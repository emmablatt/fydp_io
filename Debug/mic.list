
mic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd88  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000340  0800c058  0800c058  0001c058  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800c398  0800c398  0001c398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800c39c  0800c39c  0001c39c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000047c  24000000  0800c3a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000009e4  2400047c  0800c81c  0002047c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000e60  0800c81c  00020e60  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0002047c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00024a28  00000000  00000000  000204aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003545  00000000  00000000  00044ed2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000fe8  00000000  00000000  00048418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000ed8  00000000  00000000  00049400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000326fd  00000000  00000000  0004a2d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00016077  00000000  00000000  0007c9d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00150e1b  00000000  00000000  00092a4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      000000d1  00000000  00000000  001e3867  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000042f4  00000000  00000000  001e3938  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2400047c 	.word	0x2400047c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800c040 	.word	0x0800c040

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000480 	.word	0x24000480
 800030c:	0800c040 	.word	0x0800c040

08000310 <BSP_LED_Init>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b08a      	sub	sp, #40	; 0x28
 8000314:	af00      	add	r7, sp, #0
 8000316:	4603      	mov	r3, r0
 8000318:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800031a:	2300      	movs	r3, #0
 800031c:	627b      	str	r3, [r7, #36]	; 0x24

  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO_LED clock */
  if (Led == LED1)
 800031e:	79fb      	ldrb	r3, [r7, #7]
 8000320:	2b00      	cmp	r3, #0
 8000322:	d10f      	bne.n	8000344 <BSP_LED_Init+0x34>
  {
    LED1_GPIO_CLK_ENABLE();
 8000324:	4b26      	ldr	r3, [pc, #152]	; (80003c0 <BSP_LED_Init+0xb0>)
 8000326:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800032a:	4a25      	ldr	r2, [pc, #148]	; (80003c0 <BSP_LED_Init+0xb0>)
 800032c:	f043 0304 	orr.w	r3, r3, #4
 8000330:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000334:	4b22      	ldr	r3, [pc, #136]	; (80003c0 <BSP_LED_Init+0xb0>)
 8000336:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800033a:	f003 0304 	and.w	r3, r3, #4
 800033e:	60fb      	str	r3, [r7, #12]
 8000340:	68fb      	ldr	r3, [r7, #12]
 8000342:	e015      	b.n	8000370 <BSP_LED_Init+0x60>
  }
  else if (Led == LED2)
 8000344:	79fb      	ldrb	r3, [r7, #7]
 8000346:	2b01      	cmp	r3, #1
 8000348:	d10f      	bne.n	800036a <BSP_LED_Init+0x5a>
  {

    LED2_GPIO_CLK_ENABLE();
 800034a:	4b1d      	ldr	r3, [pc, #116]	; (80003c0 <BSP_LED_Init+0xb0>)
 800034c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000350:	4a1b      	ldr	r2, [pc, #108]	; (80003c0 <BSP_LED_Init+0xb0>)
 8000352:	f043 0304 	orr.w	r3, r3, #4
 8000356:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800035a:	4b19      	ldr	r3, [pc, #100]	; (80003c0 <BSP_LED_Init+0xb0>)
 800035c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000360:	f003 0304 	and.w	r3, r3, #4
 8000364:	60bb      	str	r3, [r7, #8]
 8000366:	68bb      	ldr	r3, [r7, #8]
 8000368:	e002      	b.n	8000370 <BSP_LED_Init+0x60>
  }
  else
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800036a:	f06f 0301 	mvn.w	r3, #1
 800036e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8000370:	2301      	movs	r3, #1
 8000372:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8000374:	2301      	movs	r3, #1
 8000376:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000378:	2302      	movs	r3, #2
 800037a:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Pin = LED_PIN [Led];
 800037c:	79fb      	ldrb	r3, [r7, #7]
 800037e:	4a11      	ldr	r2, [pc, #68]	; (80003c4 <BSP_LED_Init+0xb4>)
 8000380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000384:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_PORT [Led], &gpio_init_structure);
 8000386:	79fb      	ldrb	r3, [r7, #7]
 8000388:	4a0f      	ldr	r2, [pc, #60]	; (80003c8 <BSP_LED_Init+0xb8>)
 800038a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800038e:	f107 0210 	add.w	r2, r7, #16
 8000392:	4611      	mov	r1, r2
 8000394:	4618      	mov	r0, r3
 8000396:	f005 f837 	bl	8005408 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN[Led], GPIO_PIN_SET);
 800039a:	79fb      	ldrb	r3, [r7, #7]
 800039c:	4a0a      	ldr	r2, [pc, #40]	; (80003c8 <BSP_LED_Init+0xb8>)
 800039e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80003a2:	79fb      	ldrb	r3, [r7, #7]
 80003a4:	4a07      	ldr	r2, [pc, #28]	; (80003c4 <BSP_LED_Init+0xb4>)
 80003a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003aa:	b29b      	uxth	r3, r3
 80003ac:	2201      	movs	r2, #1
 80003ae:	4619      	mov	r1, r3
 80003b0:	f005 fad4 	bl	800595c <HAL_GPIO_WritePin>

  return ret;
 80003b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80003b6:	4618      	mov	r0, r3
 80003b8:	3728      	adds	r7, #40	; 0x28
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	bf00      	nop
 80003c0:	58024400 	.word	0x58024400
 80003c4:	0800c108 	.word	0x0800c108
 80003c8:	24000400 	.word	0x24000400

080003cc <BSP_LED_On>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b084      	sub	sp, #16
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	4603      	mov	r3, r0
 80003d4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80003d6:	2300      	movs	r3, #0
 80003d8:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_RESET);
 80003da:	79fb      	ldrb	r3, [r7, #7]
 80003dc:	4a08      	ldr	r2, [pc, #32]	; (8000400 <BSP_LED_On+0x34>)
 80003de:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80003e2:	79fb      	ldrb	r3, [r7, #7]
 80003e4:	4a07      	ldr	r2, [pc, #28]	; (8000404 <BSP_LED_On+0x38>)
 80003e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003ea:	b29b      	uxth	r3, r3
 80003ec:	2200      	movs	r2, #0
 80003ee:	4619      	mov	r1, r3
 80003f0:	f005 fab4 	bl	800595c <HAL_GPIO_WritePin>
  return ret;
 80003f4:	68fb      	ldr	r3, [r7, #12]
}
 80003f6:	4618      	mov	r0, r3
 80003f8:	3710      	adds	r7, #16
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	24000400 	.word	0x24000400
 8000404:	0800c108 	.word	0x0800c108

08000408 <BSP_LED_Off>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b084      	sub	sp, #16
 800040c:	af00      	add	r7, sp, #0
 800040e:	4603      	mov	r3, r0
 8000410:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000412:	2300      	movs	r3, #0
 8000414:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_SET);
 8000416:	79fb      	ldrb	r3, [r7, #7]
 8000418:	4a08      	ldr	r2, [pc, #32]	; (800043c <BSP_LED_Off+0x34>)
 800041a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800041e:	79fb      	ldrb	r3, [r7, #7]
 8000420:	4a07      	ldr	r2, [pc, #28]	; (8000440 <BSP_LED_Off+0x38>)
 8000422:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000426:	b29b      	uxth	r3, r3
 8000428:	2201      	movs	r2, #1
 800042a:	4619      	mov	r1, r3
 800042c:	f005 fa96 	bl	800595c <HAL_GPIO_WritePin>
  return ret;
 8000430:	68fb      	ldr	r3, [r7, #12]
}
 8000432:	4618      	mov	r0, r3
 8000434:	3710      	adds	r7, #16
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	24000400 	.word	0x24000400
 8000440:	0800c108 	.word	0x0800c108

08000444 <MX_SAI1_Block_B_Init>:
  * @param  MXConfig SAI confiruration structure
  * @note   Being __weak it can be overwritten by the application
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SAI1_Block_B_Init(SAI_HandleTypeDef* hsai, MX_SAI_Config *MXConfig)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b084      	sub	sp, #16
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
 800044c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800044e:	2300      	movs	r3, #0
 8000450:	73fb      	strb	r3, [r7, #15]

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(hsai);
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	681a      	ldr	r2, [r3, #0]
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000460:	601a      	str	r2, [r3, #0]

  /* Configure SAI1_Block_B */
  hsai->Init.MonoStereoMode       = MXConfig->MonoStereoMode;
 8000462:	683b      	ldr	r3, [r7, #0]
 8000464:	68da      	ldr	r2, [r3, #12]
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai->Init.AudioFrequency       = MXConfig->AudioFrequency;
 800046a:	683b      	ldr	r3, [r7, #0]
 800046c:	681a      	ldr	r2, [r3, #0]
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	621a      	str	r2, [r3, #32]
  hsai->Init.AudioMode            = MXConfig->AudioMode;
 8000472:	683b      	ldr	r3, [r7, #0]
 8000474:	685a      	ldr	r2, [r3, #4]
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	605a      	str	r2, [r3, #4]
  hsai->Init.NoDivider            = SAI_MASTERDIVIDER_ENABLE;
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	2200      	movs	r2, #0
 800047e:	619a      	str	r2, [r3, #24]
  hsai->Init.Protocol             = SAI_FREE_PROTOCOL;
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	2200      	movs	r2, #0
 8000484:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.DataSize             = MXConfig->DataSize;
 8000486:	683b      	ldr	r3, [r7, #0]
 8000488:	689a      	ldr	r2, [r3, #8]
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->Init.FirstBit             = SAI_FIRSTBIT_MSB;
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	2200      	movs	r2, #0
 8000492:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->Init.ClockStrobing        = MXConfig->ClockStrobing;
 8000494:	683b      	ldr	r3, [r7, #0]
 8000496:	691a      	ldr	r2, [r3, #16]
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	651a      	str	r2, [r3, #80]	; 0x50
  hsai->Init.Synchro              = MXConfig->Synchro;
 800049c:	683b      	ldr	r3, [r7, #0]
 800049e:	695a      	ldr	r2, [r3, #20]
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	609a      	str	r2, [r3, #8]
  hsai->Init.OutputDrive          = MXConfig->OutputDrive;
 80004a4:	683b      	ldr	r3, [r7, #0]
 80004a6:	699a      	ldr	r2, [r3, #24]
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	615a      	str	r2, [r3, #20]
  hsai->Init.FIFOThreshold        = SAI_FIFOTHRESHOLD_1QF;
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	2201      	movs	r2, #1
 80004b0:	61da      	str	r2, [r3, #28]
  hsai->Init.SynchroExt           = MXConfig->SynchroExt;
 80004b2:	683b      	ldr	r3, [r7, #0]
 80004b4:	69da      	ldr	r2, [r3, #28]
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	60da      	str	r2, [r3, #12]
  hsai->Init.CompandingMode       = SAI_NOCOMPANDING;
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	2200      	movs	r2, #0
 80004be:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.TriState             = SAI_OUTPUT_NOTRELEASED;
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	2200      	movs	r2, #0
 80004c4:	635a      	str	r2, [r3, #52]	; 0x34
  hsai->Init.Mckdiv               = 0;
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	2200      	movs	r2, #0
 80004ca:	625a      	str	r2, [r3, #36]	; 0x24
  hsai->Init.MckOutput            = SAI_MCK_OUTPUT_ENABLE;
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80004d2:	611a      	str	r2, [r3, #16]
  hsai->Init.MckOverSampling      = SAI_MCK_OVERSAMPLING_DISABLE;
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	2200      	movs	r2, #0
 80004d8:	629a      	str	r2, [r3, #40]	; 0x28
  hsai->Init.PdmInit.Activation   = DISABLE;
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	2200      	movs	r2, #0
 80004de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Configure SAI_Block_x Frame */
  hsai->FrameInit.FrameLength       = MXConfig->FrameLength;
 80004e2:	683b      	ldr	r3, [r7, #0]
 80004e4:	6a1a      	ldr	r2, [r3, #32]
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->FrameInit.ActiveFrameLength = MXConfig->ActiveFrameLength;
 80004ea:	683b      	ldr	r3, [r7, #0]
 80004ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->FrameInit.FSDefinition      = SAI_FS_CHANNEL_IDENTIFICATION;
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80004f8:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity        = SAI_FS_ACTIVE_LOW;
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	2200      	movs	r2, #0
 80004fe:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset          = SAI_FS_BEFOREFIRSTBIT;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000506:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure SAI Block_x Slot */
  hsai->SlotInit.FirstBitOffset     = 0;
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	2200      	movs	r2, #0
 800050c:	669a      	str	r2, [r3, #104]	; 0x68
  if ((MXConfig->DataSize == AUDIO_RESOLUTION_24B) || (MXConfig->DataSize == AUDIO_RESOLUTION_32B))
 800050e:	683b      	ldr	r3, [r7, #0]
 8000510:	689b      	ldr	r3, [r3, #8]
 8000512:	2b18      	cmp	r3, #24
 8000514:	d003      	beq.n	800051e <MX_SAI1_Block_B_Init+0xda>
 8000516:	683b      	ldr	r3, [r7, #0]
 8000518:	689b      	ldr	r3, [r3, #8]
 800051a:	2b20      	cmp	r3, #32
 800051c:	d103      	bne.n	8000526 <MX_SAI1_Block_B_Init+0xe2>
  {
    hsai->SlotInit.SlotSize         = SAI_SLOTSIZE_32B;
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	2280      	movs	r2, #128	; 0x80
 8000522:	66da      	str	r2, [r3, #108]	; 0x6c
 8000524:	e002      	b.n	800052c <MX_SAI1_Block_B_Init+0xe8>
  }
  else
  {
    hsai->SlotInit.SlotSize         = SAI_SLOTSIZE_16B;
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	2240      	movs	r2, #64	; 0x40
 800052a:	66da      	str	r2, [r3, #108]	; 0x6c
  }
  hsai->SlotInit.SlotNumber         = 4;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	2204      	movs	r2, #4
 8000530:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive         = MXConfig->SlotActive;
 8000532:	683b      	ldr	r3, [r7, #0]
 8000534:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	675a      	str	r2, [r3, #116]	; 0x74

  if(HAL_SAI_Init(hsai) != HAL_OK)
 800053a:	6878      	ldr	r0, [r7, #4]
 800053c:	f008 fb6e 	bl	8008c1c <HAL_SAI_Init>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <MX_SAI1_Block_B_Init+0x106>
  {
    ret = HAL_ERROR;
 8000546:	2301      	movs	r3, #1
 8000548:	73fb      	strb	r3, [r7, #15]
  }
  __HAL_SAI_ENABLE(hsai);
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	681a      	ldr	r2, [r3, #0]
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000558:	601a      	str	r2, [r3, #0]

  return ret;
 800055a:	7bfb      	ldrb	r3, [r7, #15]
}
 800055c:	4618      	mov	r0, r3
 800055e:	3710      	adds	r7, #16
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}

08000564 <MX_SAI1_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SAI1_ClockConfig(SAI_HandleTypeDef *hsai, uint32_t SampleRate)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b0b0      	sub	sp, #192	; 0xc0
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
 800056c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsai);

  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;
  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 800056e:	f107 030c 	add.w	r3, r7, #12
 8000572:	4618      	mov	r0, r3
 8000574:	f007 f86c 	bl	8007650 <HAL_RCCEx_GetPeriphCLKConfig>

  /* Set the PLL configuration according to the audio frequency */
  /* Set the PLL configuration according to the audio frequency */
  if((SampleRate == AUDIO_FREQUENCY_11K) || (SampleRate == AUDIO_FREQUENCY_22K) || (SampleRate == AUDIO_FREQUENCY_44K))
 8000578:	683b      	ldr	r3, [r7, #0]
 800057a:	f642 3211 	movw	r2, #11025	; 0x2b11
 800057e:	4293      	cmp	r3, r2
 8000580:	d009      	beq.n	8000596 <MX_SAI1_ClockConfig+0x32>
 8000582:	683b      	ldr	r3, [r7, #0]
 8000584:	f245 6222 	movw	r2, #22050	; 0x5622
 8000588:	4293      	cmp	r3, r2
 800058a:	d004      	beq.n	8000596 <MX_SAI1_ClockConfig+0x32>
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	f64a 4244 	movw	r2, #44100	; 0xac44
 8000592:	4293      	cmp	r3, r2
 8000594:	d104      	bne.n	80005a0 <MX_SAI1_ClockConfig+0x3c>
  {
    rcc_ex_clk_init_struct.PLL2.PLL2P = 36;
 8000596:	2324      	movs	r3, #36	; 0x24
 8000598:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLL2.PLL2Q = 36;
 800059a:	2324      	movs	r3, #36	; 0x24
 800059c:	61fb      	str	r3, [r7, #28]
 800059e:	e003      	b.n	80005a8 <MX_SAI1_ClockConfig+0x44>
  }
  else /* AUDIO_FREQUENCY_8K, AUDIO_FREQUENCY_16K, AUDIO_FREQUENCY_32K, AUDIO_FREQUENCY_48K, AUDIO_FREQUENCY_96K */
  {
    rcc_ex_clk_init_struct.PLL2.PLL2P = 8;
 80005a0:	2308      	movs	r3, #8
 80005a2:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLL2.PLL2Q = 8;
 80005a4:	2308      	movs	r3, #8
 80005a6:	61fb      	str	r3, [r7, #28]
  }
  rcc_ex_clk_init_struct.PLL2.PLL2N = 80;
 80005a8:	2350      	movs	r3, #80	; 0x50
 80005aa:	617b      	str	r3, [r7, #20]

  rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 80005ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005b0:	60fb      	str	r3, [r7, #12]
  rcc_ex_clk_init_struct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 80005b2:	2301      	movs	r3, #1
 80005b4:	663b      	str	r3, [r7, #96]	; 0x60
  rcc_ex_clk_init_struct.PLL2.PLL2R = 2;
 80005b6:	2302      	movs	r3, #2
 80005b8:	623b      	str	r3, [r7, #32]
  rcc_ex_clk_init_struct.PLL2.PLL2M = 5;
 80005ba:	2305      	movs	r3, #5
 80005bc:	613b      	str	r3, [r7, #16]
  rcc_ex_clk_init_struct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 80005be:	2300      	movs	r3, #0
 80005c0:	627b      	str	r3, [r7, #36]	; 0x24
  rcc_ex_clk_init_struct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80005c2:	2320      	movs	r3, #32
 80005c4:	62bb      	str	r3, [r7, #40]	; 0x28
  rcc_ex_clk_init_struct.PLL2.PLL2FRACN = 0;
 80005c6:	2300      	movs	r3, #0
 80005c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  return HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 80005ca:	f107 030c 	add.w	r3, r7, #12
 80005ce:	4618      	mov	r0, r3
 80005d0:	f006 f944 	bl	800685c <HAL_RCCEx_PeriphCLKConfig>
 80005d4:	4603      	mov	r3, r0
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	37c0      	adds	r7, #192	; 0xc0
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}

080005de <BSP_AUDIO_OUT_Error_CallBack>:
  * @brief  Manages the DMA FIFO error event
  * @param  Instance AUDIO OUT Instance. It can only be 0 (SAI)
  * @retval None
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(uint32_t Instance)
{
 80005de:	b480      	push	{r7}
 80005e0:	b083      	sub	sp, #12
 80005e2:	af00      	add	r7, sp, #0
 80005e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Instance);
}
 80005e6:	bf00      	nop
 80005e8:	370c      	adds	r7, #12
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
	...

080005f4 <SAI_MspInit>:
  * @brief  Initialize BSP_AUDIO_OUT MSP.
  * @param  hsai  SAI handle
  * @retval None
  */
static void SAI_MspInit(SAI_HandleTypeDef *hsai)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b096      	sub	sp, #88	; 0x58
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  static DMA_HandleTypeDef hdma_sai_tx, hdma_sai_rx;
    /* Enable SAI clock */
  AUDIO_OUT_SAIx_CLK_ENABLE();
 80005fc:	4b61      	ldr	r3, [pc, #388]	; (8000784 <SAI_MspInit+0x190>)
 80005fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000602:	4a60      	ldr	r2, [pc, #384]	; (8000784 <SAI_MspInit+0x190>)
 8000604:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000608:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800060c:	4b5d      	ldr	r3, [pc, #372]	; (8000784 <SAI_MspInit+0x190>)
 800060e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000612:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000616:	643b      	str	r3, [r7, #64]	; 0x40
 8000618:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable GPIO clock */
  AUDIO_OUT_SAIx_MCLK_ENABLE();
 800061a:	4b5a      	ldr	r3, [pc, #360]	; (8000784 <SAI_MspInit+0x190>)
 800061c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000620:	4a58      	ldr	r2, [pc, #352]	; (8000784 <SAI_MspInit+0x190>)
 8000622:	f043 0320 	orr.w	r3, r3, #32
 8000626:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800062a:	4b56      	ldr	r3, [pc, #344]	; (8000784 <SAI_MspInit+0x190>)
 800062c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000630:	f003 0320 	and.w	r3, r3, #32
 8000634:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  AUDIO_OUT_SAIx_SCK_ENABLE();
 8000638:	4b52      	ldr	r3, [pc, #328]	; (8000784 <SAI_MspInit+0x190>)
 800063a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800063e:	4a51      	ldr	r2, [pc, #324]	; (8000784 <SAI_MspInit+0x190>)
 8000640:	f043 0320 	orr.w	r3, r3, #32
 8000644:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000648:	4b4e      	ldr	r3, [pc, #312]	; (8000784 <SAI_MspInit+0x190>)
 800064a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800064e:	f003 0320 	and.w	r3, r3, #32
 8000652:	63bb      	str	r3, [r7, #56]	; 0x38
 8000654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  AUDIO_OUT_SAIx_SD_ENABLE();
 8000656:	4b4b      	ldr	r3, [pc, #300]	; (8000784 <SAI_MspInit+0x190>)
 8000658:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800065c:	4a49      	ldr	r2, [pc, #292]	; (8000784 <SAI_MspInit+0x190>)
 800065e:	f043 0320 	orr.w	r3, r3, #32
 8000662:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000666:	4b47      	ldr	r3, [pc, #284]	; (8000784 <SAI_MspInit+0x190>)
 8000668:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800066c:	f003 0320 	and.w	r3, r3, #32
 8000670:	637b      	str	r3, [r7, #52]	; 0x34
 8000672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  AUDIO_OUT_SAIx_FS_ENABLE();
 8000674:	4b43      	ldr	r3, [pc, #268]	; (8000784 <SAI_MspInit+0x190>)
 8000676:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800067a:	4a42      	ldr	r2, [pc, #264]	; (8000784 <SAI_MspInit+0x190>)
 800067c:	f043 0320 	orr.w	r3, r3, #32
 8000680:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000684:	4b3f      	ldr	r3, [pc, #252]	; (8000784 <SAI_MspInit+0x190>)
 8000686:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800068a:	f003 0320 	and.w	r3, r3, #32
 800068e:	633b      	str	r3, [r7, #48]	; 0x30
 8000690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
 8000692:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000696:	647b      	str	r3, [r7, #68]	; 0x44
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8000698:	2302      	movs	r3, #2
 800069a:	64bb      	str	r3, [r7, #72]	; 0x48
  gpio_init_structure.Pull = GPIO_NOPULL;
 800069c:	2300      	movs	r3, #0
 800069e:	64fb      	str	r3, [r7, #76]	; 0x4c
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006a0:	2303      	movs	r3, #3
 80006a2:	653b      	str	r3, [r7, #80]	; 0x50
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_AF;
 80006a4:	2306      	movs	r3, #6
 80006a6:	657b      	str	r3, [r7, #84]	; 0x54
  HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 80006a8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80006ac:	4619      	mov	r1, r3
 80006ae:	4836      	ldr	r0, [pc, #216]	; (8000788 <SAI_MspInit+0x194>)
 80006b0:	f004 feaa 	bl	8005408 <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 80006b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006b8:	647b      	str	r3, [r7, #68]	; 0x44
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
 80006ba:	2306      	movs	r3, #6
 80006bc:	657b      	str	r3, [r7, #84]	; 0x54
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_GPIO_PORT, &gpio_init_structure);
 80006be:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80006c2:	4619      	mov	r1, r3
 80006c4:	4830      	ldr	r0, [pc, #192]	; (8000788 <SAI_MspInit+0x194>)
 80006c6:	f004 fe9f 	bl	8005408 <HAL_GPIO_Init>

  gpio_init_structure.Pin =  AUDIO_OUT_SAIx_SD_PIN;
 80006ca:	2340      	movs	r3, #64	; 0x40
 80006cc:	647b      	str	r3, [r7, #68]	; 0x44
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SD_AF;
 80006ce:	2306      	movs	r3, #6
 80006d0:	657b      	str	r3, [r7, #84]	; 0x54
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 80006d2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80006d6:	4619      	mov	r1, r3
 80006d8:	482b      	ldr	r0, [pc, #172]	; (8000788 <SAI_MspInit+0x194>)
 80006da:	f004 fe95 	bl	8005408 <HAL_GPIO_Init>

    if(hsai->Instance != AUDIO_IN_SAI_PDMx)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	4a2a      	ldr	r2, [pc, #168]	; (800078c <SAI_MspInit+0x198>)
 80006e4:	4293      	cmp	r3, r2
 80006e6:	d01e      	beq.n	8000726 <SAI_MspInit+0x132>
    {
      if(haudio_in_sai[0].State != HAL_SAI_STATE_READY)
 80006e8:	4b29      	ldr	r3, [pc, #164]	; (8000790 <SAI_MspInit+0x19c>)
 80006ea:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	2b01      	cmp	r3, #1
 80006f2:	d018      	beq.n	8000726 <SAI_MspInit+0x132>
      {
        AUDIO_OUT_SAIx_MCLK_ENABLE();
 80006f4:	4b23      	ldr	r3, [pc, #140]	; (8000784 <SAI_MspInit+0x190>)
 80006f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006fa:	4a22      	ldr	r2, [pc, #136]	; (8000784 <SAI_MspInit+0x190>)
 80006fc:	f043 0320 	orr.w	r3, r3, #32
 8000700:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000704:	4b1f      	ldr	r3, [pc, #124]	; (8000784 <SAI_MspInit+0x190>)
 8000706:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800070a:	f003 0320 	and.w	r3, r3, #32
 800070e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
        gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 8000712:	2380      	movs	r3, #128	; 0x80
 8000714:	647b      	str	r3, [r7, #68]	; 0x44
        gpio_init_structure.Alternate = AUDIO_OUT_SAIx_MCLK_AF;
 8000716:	2306      	movs	r3, #6
 8000718:	657b      	str	r3, [r7, #84]	; 0x54
        HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 800071a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800071e:	4619      	mov	r1, r3
 8000720:	4819      	ldr	r0, [pc, #100]	; (8000788 <SAI_MspInit+0x194>)
 8000722:	f004 fe71 	bl	8005408 <HAL_GPIO_Init>
      }
    }

  if(hsai->Instance == AUDIO_OUT_SAIx)
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	4a1a      	ldr	r2, [pc, #104]	; (8000794 <SAI_MspInit+0x1a0>)
 800072c:	4293      	cmp	r3, r2
 800072e:	d16b      	bne.n	8000808 <SAI_MspInit+0x214>
  {
  /* Enable the DMA clock */
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 8000730:	4b14      	ldr	r3, [pc, #80]	; (8000784 <SAI_MspInit+0x190>)
 8000732:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000736:	4a13      	ldr	r2, [pc, #76]	; (8000784 <SAI_MspInit+0x190>)
 8000738:	f043 0302 	orr.w	r3, r3, #2
 800073c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000740:	4b10      	ldr	r3, [pc, #64]	; (8000784 <SAI_MspInit+0x190>)
 8000742:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000746:	f003 0302 	and.w	r3, r3, #2
 800074a:	62bb      	str	r3, [r7, #40]	; 0x28
 800074c:	6abb      	ldr	r3, [r7, #40]	; 0x28

    /* Configure the hdma_saiTx handle parameters */
    hdma_sai_tx.Init.Request             = AUDIO_OUT_SAIx_DMAx_REQUEST;
 800074e:	4b12      	ldr	r3, [pc, #72]	; (8000798 <SAI_MspInit+0x1a4>)
 8000750:	2258      	movs	r2, #88	; 0x58
 8000752:	605a      	str	r2, [r3, #4]
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8000754:	4b10      	ldr	r3, [pc, #64]	; (8000798 <SAI_MspInit+0x1a4>)
 8000756:	2240      	movs	r2, #64	; 0x40
 8000758:	609a      	str	r2, [r3, #8]
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800075a:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <SAI_MspInit+0x1a4>)
 800075c:	2200      	movs	r2, #0
 800075e:	60da      	str	r2, [r3, #12]
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8000760:	4b0d      	ldr	r3, [pc, #52]	; (8000798 <SAI_MspInit+0x1a4>)
 8000762:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000766:	611a      	str	r2, [r3, #16]
    if (Audio_Out_Ctx[0].BitsPerSample == AUDIO_RESOLUTION_16B)
 8000768:	4b0c      	ldr	r3, [pc, #48]	; (800079c <SAI_MspInit+0x1a8>)
 800076a:	68db      	ldr	r3, [r3, #12]
 800076c:	2b10      	cmp	r3, #16
 800076e:	d117      	bne.n	80007a0 <SAI_MspInit+0x1ac>
    {
      hdma_sai_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000770:	4b09      	ldr	r3, [pc, #36]	; (8000798 <SAI_MspInit+0x1a4>)
 8000772:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000776:	615a      	str	r2, [r3, #20]
      hdma_sai_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_HALFWORD;
 8000778:	4b07      	ldr	r3, [pc, #28]	; (8000798 <SAI_MspInit+0x1a4>)
 800077a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800077e:	619a      	str	r2, [r3, #24]
 8000780:	e016      	b.n	80007b0 <SAI_MspInit+0x1bc>
 8000782:	bf00      	nop
 8000784:	58024400 	.word	0x58024400
 8000788:	58021400 	.word	0x58021400
 800078c:	58005404 	.word	0x58005404
 8000790:	24000554 	.word	0x24000554
 8000794:	40015824 	.word	0x40015824
 8000798:	24000944 	.word	0x24000944
 800079c:	24000c94 	.word	0x24000c94
    }
    else /* AUDIO_RESOLUTION_32B */
    {
      hdma_sai_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80007a0:	4b53      	ldr	r3, [pc, #332]	; (80008f0 <SAI_MspInit+0x2fc>)
 80007a2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007a6:	615a      	str	r2, [r3, #20]
      hdma_sai_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80007a8:	4b51      	ldr	r3, [pc, #324]	; (80008f0 <SAI_MspInit+0x2fc>)
 80007aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007ae:	619a      	str	r2, [r3, #24]
    }
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 80007b0:	4b4f      	ldr	r3, [pc, #316]	; (80008f0 <SAI_MspInit+0x2fc>)
 80007b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007b6:	61da      	str	r2, [r3, #28]
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 80007b8:	4b4d      	ldr	r3, [pc, #308]	; (80008f0 <SAI_MspInit+0x2fc>)
 80007ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80007be:	621a      	str	r2, [r3, #32]
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 80007c0:	4b4b      	ldr	r3, [pc, #300]	; (80008f0 <SAI_MspInit+0x2fc>)
 80007c2:	2204      	movs	r2, #4
 80007c4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80007c6:	4b4a      	ldr	r3, [pc, #296]	; (80008f0 <SAI_MspInit+0x2fc>)
 80007c8:	2203      	movs	r2, #3
 80007ca:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
 80007cc:	4b48      	ldr	r3, [pc, #288]	; (80008f0 <SAI_MspInit+0x2fc>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 80007d2:	4b47      	ldr	r3, [pc, #284]	; (80008f0 <SAI_MspInit+0x2fc>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	631a      	str	r2, [r3, #48]	; 0x30

    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 80007d8:	4b45      	ldr	r3, [pc, #276]	; (80008f0 <SAI_MspInit+0x2fc>)
 80007da:	4a46      	ldr	r2, [pc, #280]	; (80008f4 <SAI_MspInit+0x300>)
 80007dc:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	4a43      	ldr	r2, [pc, #268]	; (80008f0 <SAI_MspInit+0x2fc>)
 80007e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80007e6:	4a42      	ldr	r2, [pc, #264]	; (80008f0 <SAI_MspInit+0x2fc>)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	6393      	str	r3, [r2, #56]	; 0x38

    /* Deinitialize the Stream for new transfer */
    (void)HAL_DMA_DeInit(&hdma_sai_tx);
 80007ec:	4840      	ldr	r0, [pc, #256]	; (80008f0 <SAI_MspInit+0x2fc>)
 80007ee:	f002 fd89 	bl	8003304 <HAL_DMA_DeInit>

    /* Configure the DMA Stream */
    (void)HAL_DMA_Init(&hdma_sai_tx);
 80007f2:	483f      	ldr	r0, [pc, #252]	; (80008f0 <SAI_MspInit+0x2fc>)
 80007f4:	f002 fa2c 	bl	8002c50 <HAL_DMA_Init>

    /* SAI DMA IRQ Channel configuration */
    HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, BSP_AUDIO_OUT_IT_PRIORITY, 0);
 80007f8:	2200      	movs	r2, #0
 80007fa:	210e      	movs	r1, #14
 80007fc:	2045      	movs	r0, #69	; 0x45
 80007fe:	f001 feba 	bl	8002576 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ);
 8000802:	2045      	movs	r0, #69	; 0x45
 8000804:	f001 fed1 	bl	80025aa <HAL_NVIC_EnableIRQ>
  }

  /* Audio In Msp initialization */
  if(hsai->Instance == AUDIO_IN_SAIx)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a3a      	ldr	r2, [pc, #232]	; (80008f8 <SAI_MspInit+0x304>)
 800080e:	4293      	cmp	r3, r2
 8000810:	f040 809b 	bne.w	800094a <SAI_MspInit+0x356>
  {
    /* Enable SAI clock */
    AUDIO_IN_SAIx_CLK_ENABLE();
 8000814:	4b39      	ldr	r3, [pc, #228]	; (80008fc <SAI_MspInit+0x308>)
 8000816:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800081a:	4a38      	ldr	r2, [pc, #224]	; (80008fc <SAI_MspInit+0x308>)
 800081c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000820:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000824:	4b35      	ldr	r3, [pc, #212]	; (80008fc <SAI_MspInit+0x308>)
 8000826:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800082a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800082e:	627b      	str	r3, [r7, #36]	; 0x24
 8000830:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    /* Enable SD GPIO clock */
    AUDIO_IN_SAIx_SD_ENABLE();
 8000832:	4b32      	ldr	r3, [pc, #200]	; (80008fc <SAI_MspInit+0x308>)
 8000834:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000838:	4a30      	ldr	r2, [pc, #192]	; (80008fc <SAI_MspInit+0x308>)
 800083a:	f043 0310 	orr.w	r3, r3, #16
 800083e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000842:	4b2e      	ldr	r3, [pc, #184]	; (80008fc <SAI_MspInit+0x308>)
 8000844:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000848:	f003 0310 	and.w	r3, r3, #16
 800084c:	623b      	str	r3, [r7, #32]
 800084e:	6a3b      	ldr	r3, [r7, #32]
    /* CODEC_SAI pin configuration: SD pin */
    gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 8000850:	2340      	movs	r3, #64	; 0x40
 8000852:	647b      	str	r3, [r7, #68]	; 0x44
    gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8000854:	2302      	movs	r3, #2
 8000856:	64bb      	str	r3, [r7, #72]	; 0x48
    gpio_init_structure.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	64fb      	str	r3, [r7, #76]	; 0x4c
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800085c:	2302      	movs	r3, #2
 800085e:	653b      	str	r3, [r7, #80]	; 0x50
    gpio_init_structure.Alternate = AUDIO_IN_SAIx_AF;
 8000860:	2306      	movs	r3, #6
 8000862:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 8000864:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000868:	4619      	mov	r1, r3
 800086a:	4825      	ldr	r0, [pc, #148]	; (8000900 <SAI_MspInit+0x30c>)
 800086c:	f004 fdcc 	bl	8005408 <HAL_GPIO_Init>

    /* Enable the DMA clock */
    AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 8000870:	4b22      	ldr	r3, [pc, #136]	; (80008fc <SAI_MspInit+0x308>)
 8000872:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000876:	4a21      	ldr	r2, [pc, #132]	; (80008fc <SAI_MspInit+0x308>)
 8000878:	f043 0302 	orr.w	r3, r3, #2
 800087c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000880:	4b1e      	ldr	r3, [pc, #120]	; (80008fc <SAI_MspInit+0x308>)
 8000882:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000886:	f003 0302 	and.w	r3, r3, #2
 800088a:	61fb      	str	r3, [r7, #28]
 800088c:	69fb      	ldr	r3, [r7, #28]

    /* Configure the hdma_sai_rx handle parameters */
    hdma_sai_rx.Instance                 = AUDIO_IN_SAIx_DMAx_STREAM;
 800088e:	4b1d      	ldr	r3, [pc, #116]	; (8000904 <SAI_MspInit+0x310>)
 8000890:	4a1d      	ldr	r2, [pc, #116]	; (8000908 <SAI_MspInit+0x314>)
 8000892:	601a      	str	r2, [r3, #0]
    hdma_sai_rx.Init.Request             = AUDIO_IN_SAIx_DMAx_REQUEST;
 8000894:	4b1b      	ldr	r3, [pc, #108]	; (8000904 <SAI_MspInit+0x310>)
 8000896:	2257      	movs	r2, #87	; 0x57
 8000898:	605a      	str	r2, [r3, #4]
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 800089a:	4b1a      	ldr	r3, [pc, #104]	; (8000904 <SAI_MspInit+0x310>)
 800089c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008a0:	61da      	str	r2, [r3, #28]
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 80008a2:	4b18      	ldr	r3, [pc, #96]	; (8000904 <SAI_MspInit+0x310>)
 80008a4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80008a8:	621a      	str	r2, [r3, #32]
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 80008aa:	4b16      	ldr	r3, [pc, #88]	; (8000904 <SAI_MspInit+0x310>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 80008b0:	4b14      	ldr	r3, [pc, #80]	; (8000904 <SAI_MspInit+0x310>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	60da      	str	r2, [r3, #12]
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 80008b6:	4b13      	ldr	r3, [pc, #76]	; (8000904 <SAI_MspInit+0x310>)
 80008b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008bc:	611a      	str	r2, [r3, #16]
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 80008be:	4b11      	ldr	r3, [pc, #68]	; (8000904 <SAI_MspInit+0x310>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80008c4:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <SAI_MspInit+0x310>)
 80008c6:	2203      	movs	r2, #3
 80008c8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 80008ca:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <SAI_MspInit+0x310>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 80008d0:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <SAI_MspInit+0x310>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	631a      	str	r2, [r3, #48]	; 0x30

    if(Audio_In_Ctx[0].BitsPerSample == AUDIO_RESOLUTION_16B)
 80008d6:	4b0d      	ldr	r3, [pc, #52]	; (800090c <SAI_MspInit+0x318>)
 80008d8:	68db      	ldr	r3, [r3, #12]
 80008da:	2b10      	cmp	r3, #16
 80008dc:	d118      	bne.n	8000910 <SAI_MspInit+0x31c>
    {
      hdma_sai_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80008de:	4b09      	ldr	r3, [pc, #36]	; (8000904 <SAI_MspInit+0x310>)
 80008e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008e4:	615a      	str	r2, [r3, #20]
      hdma_sai_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_HALFWORD;
 80008e6:	4b07      	ldr	r3, [pc, #28]	; (8000904 <SAI_MspInit+0x310>)
 80008e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008ec:	619a      	str	r2, [r3, #24]
 80008ee:	e017      	b.n	8000920 <SAI_MspInit+0x32c>
 80008f0:	24000944 	.word	0x24000944
 80008f4:	400204a0 	.word	0x400204a0
 80008f8:	40015804 	.word	0x40015804
 80008fc:	58024400 	.word	0x58024400
 8000900:	58021000 	.word	0x58021000
 8000904:	240009bc 	.word	0x240009bc
 8000908:	40020470 	.word	0x40020470
 800090c:	24000cb8 	.word	0x24000cb8
    }
    else
    {
      hdma_sai_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000910:	4b67      	ldr	r3, [pc, #412]	; (8000ab0 <SAI_MspInit+0x4bc>)
 8000912:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000916:	615a      	str	r2, [r3, #20]
      hdma_sai_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8000918:	4b65      	ldr	r3, [pc, #404]	; (8000ab0 <SAI_MspInit+0x4bc>)
 800091a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800091e:	619a      	str	r2, [r3, #24]
    }

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	4a63      	ldr	r2, [pc, #396]	; (8000ab0 <SAI_MspInit+0x4bc>)
 8000924:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8000928:	4a61      	ldr	r2, [pc, #388]	; (8000ab0 <SAI_MspInit+0x4bc>)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	6393      	str	r3, [r2, #56]	; 0x38

    /* Deinitialize the Stream for new transfer */
    (void)HAL_DMA_DeInit(&hdma_sai_rx);
 800092e:	4860      	ldr	r0, [pc, #384]	; (8000ab0 <SAI_MspInit+0x4bc>)
 8000930:	f002 fce8 	bl	8003304 <HAL_DMA_DeInit>

    /* Configure the DMA Stream */
    (void)HAL_DMA_Init(&hdma_sai_rx);
 8000934:	485e      	ldr	r0, [pc, #376]	; (8000ab0 <SAI_MspInit+0x4bc>)
 8000936:	f002 f98b 	bl	8002c50 <HAL_DMA_Init>

    /* SAI DMA IRQ Channel configuration */
    HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, BSP_AUDIO_IN_IT_PRIORITY, 0);
 800093a:	2200      	movs	r2, #0
 800093c:	210f      	movs	r1, #15
 800093e:	203c      	movs	r0, #60	; 0x3c
 8000940:	f001 fe19 	bl	8002576 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 8000944:	203c      	movs	r0, #60	; 0x3c
 8000946:	f001 fe30 	bl	80025aa <HAL_NVIC_EnableIRQ>
  }

  if(hsai->Instance == AUDIO_IN_SAI_PDMx)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4a59      	ldr	r2, [pc, #356]	; (8000ab4 <SAI_MspInit+0x4c0>)
 8000950:	4293      	cmp	r3, r2
 8000952:	f040 80a9 	bne.w	8000aa8 <SAI_MspInit+0x4b4>
  {
     /* Enable SAI clocks */
    AUDIO_IN_SAI_PDMx_CLK_ENABLE();
 8000956:	4b58      	ldr	r3, [pc, #352]	; (8000ab8 <SAI_MspInit+0x4c4>)
 8000958:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800095c:	4a56      	ldr	r2, [pc, #344]	; (8000ab8 <SAI_MspInit+0x4c4>)
 800095e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000962:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000966:	4b54      	ldr	r3, [pc, #336]	; (8000ab8 <SAI_MspInit+0x4c4>)
 8000968:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800096c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000970:	61bb      	str	r3, [r7, #24]
 8000972:	69bb      	ldr	r3, [r7, #24]
    AUDIO_IN_SAI_PDMx_CLK_IN_ENABLE();
 8000974:	4b50      	ldr	r3, [pc, #320]	; (8000ab8 <SAI_MspInit+0x4c4>)
 8000976:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800097a:	4a4f      	ldr	r2, [pc, #316]	; (8000ab8 <SAI_MspInit+0x4c4>)
 800097c:	f043 0310 	orr.w	r3, r3, #16
 8000980:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000984:	4b4c      	ldr	r3, [pc, #304]	; (8000ab8 <SAI_MspInit+0x4c4>)
 8000986:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800098a:	f003 0310 	and.w	r3, r3, #16
 800098e:	617b      	str	r3, [r7, #20]
 8000990:	697b      	ldr	r3, [r7, #20]
    AUDIO_IN_SAI_PDMx_DATA_IN_ENABLE();
 8000992:	4b49      	ldr	r3, [pc, #292]	; (8000ab8 <SAI_MspInit+0x4c4>)
 8000994:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000998:	4a47      	ldr	r2, [pc, #284]	; (8000ab8 <SAI_MspInit+0x4c4>)
 800099a:	f043 0304 	orr.w	r3, r3, #4
 800099e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009a2:	4b45      	ldr	r3, [pc, #276]	; (8000ab8 <SAI_MspInit+0x4c4>)
 80009a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a8:	f003 0304 	and.w	r3, r3, #4
 80009ac:	613b      	str	r3, [r7, #16]
 80009ae:	693b      	ldr	r3, [r7, #16]

    /* Configure GPIOs */
    gpio_init_structure.Pin = AUDIO_IN_SAI_PDMx_CLK_IN_PIN;
 80009b0:	2304      	movs	r3, #4
 80009b2:	647b      	str	r3, [r7, #68]	; 0x44
    gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80009b4:	2302      	movs	r3, #2
 80009b6:	64bb      	str	r3, [r7, #72]	; 0x48
    gpio_init_structure.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	64fb      	str	r3, [r7, #76]	; 0x4c
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80009bc:	2302      	movs	r3, #2
 80009be:	653b      	str	r3, [r7, #80]	; 0x50
    gpio_init_structure.Alternate = AUDIO_IN_SAI_PDMx_DATA_CLK_AF;
 80009c0:	230a      	movs	r3, #10
 80009c2:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(AUDIO_IN_SAI_PDMx_CLK_IN_PORT, &gpio_init_structure);
 80009c4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80009c8:	4619      	mov	r1, r3
 80009ca:	483c      	ldr	r0, [pc, #240]	; (8000abc <SAI_MspInit+0x4c8>)
 80009cc:	f004 fd1c 	bl	8005408 <HAL_GPIO_Init>

    gpio_init_structure.Pull = GPIO_PULLUP;
 80009d0:	2301      	movs	r3, #1
 80009d2:	64fb      	str	r3, [r7, #76]	; 0x4c
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80009d4:	2301      	movs	r3, #1
 80009d6:	653b      	str	r3, [r7, #80]	; 0x50
    gpio_init_structure.Pin = AUDIO_IN_SAI_PDMx_DATA_IN_PIN;
 80009d8:	2302      	movs	r3, #2
 80009da:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(AUDIO_IN_SAI_PDMx_DATA_IN_PORT, &gpio_init_structure);
 80009dc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80009e0:	4619      	mov	r1, r3
 80009e2:	4837      	ldr	r0, [pc, #220]	; (8000ac0 <SAI_MspInit+0x4cc>)
 80009e4:	f004 fd10 	bl	8005408 <HAL_GPIO_Init>

    AUDIO_IN_SAI_PDMx_FS_SCK_ENABLE();
 80009e8:	4b33      	ldr	r3, [pc, #204]	; (8000ab8 <SAI_MspInit+0x4c4>)
 80009ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ee:	4a32      	ldr	r2, [pc, #200]	; (8000ab8 <SAI_MspInit+0x4c4>)
 80009f0:	f043 0310 	orr.w	r3, r3, #16
 80009f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009f8:	4b2f      	ldr	r3, [pc, #188]	; (8000ab8 <SAI_MspInit+0x4c4>)
 80009fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009fe:	f003 0310 	and.w	r3, r3, #16
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]

    /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
    gpio_init_structure.Pin = AUDIO_IN_SAI_PDMx_FS_PIN | AUDIO_IN_SAI_PDMx_SCK_PIN;
 8000a06:	2330      	movs	r3, #48	; 0x30
 8000a08:	647b      	str	r3, [r7, #68]	; 0x44
    gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	64bb      	str	r3, [r7, #72]	; 0x48
    gpio_init_structure.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	64fb      	str	r3, [r7, #76]	; 0x4c
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a12:	2302      	movs	r3, #2
 8000a14:	653b      	str	r3, [r7, #80]	; 0x50
    gpio_init_structure.Alternate = AUDIO_IN_SAI_PDMx_FS_SCK_AF;
 8000a16:	2308      	movs	r3, #8
 8000a18:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(AUDIO_IN_SAI_PDMx_FS_SCK_GPIO_PORT, &gpio_init_structure);
 8000a1a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4826      	ldr	r0, [pc, #152]	; (8000abc <SAI_MspInit+0x4c8>)
 8000a22:	f004 fcf1 	bl	8005408 <HAL_GPIO_Init>


    /* Configure the hdma_sai_rx handle parameters */
    hdma_sai_rx.Init.Request             = AUDIO_IN_SAI_PDMx_DMAx_REQUEST;
 8000a26:	4b22      	ldr	r3, [pc, #136]	; (8000ab0 <SAI_MspInit+0x4bc>)
 8000a28:	220f      	movs	r2, #15
 8000a2a:	605a      	str	r2, [r3, #4]
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8000a2c:	4b20      	ldr	r3, [pc, #128]	; (8000ab0 <SAI_MspInit+0x4bc>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	609a      	str	r2, [r3, #8]
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8000a32:	4b1f      	ldr	r3, [pc, #124]	; (8000ab0 <SAI_MspInit+0x4bc>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	60da      	str	r2, [r3, #12]
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8000a38:	4b1d      	ldr	r3, [pc, #116]	; (8000ab0 <SAI_MspInit+0x4bc>)
 8000a3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a3e:	611a      	str	r2, [r3, #16]
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAI_PDMx_DMAx_PERIPH_DATA_SIZE;
 8000a40:	4b1b      	ldr	r3, [pc, #108]	; (8000ab0 <SAI_MspInit+0x4bc>)
 8000a42:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a46:	615a      	str	r2, [r3, #20]
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAI_PDMx_DMAx_MEM_DATA_SIZE;
 8000a48:	4b19      	ldr	r3, [pc, #100]	; (8000ab0 <SAI_MspInit+0x4bc>)
 8000a4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a4e:	619a      	str	r2, [r3, #24]
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 8000a50:	4b17      	ldr	r3, [pc, #92]	; (8000ab0 <SAI_MspInit+0x4bc>)
 8000a52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a56:	61da      	str	r2, [r3, #28]
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8000a58:	4b15      	ldr	r3, [pc, #84]	; (8000ab0 <SAI_MspInit+0x4bc>)
 8000a5a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000a5e:	621a      	str	r2, [r3, #32]
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8000a60:	4b13      	ldr	r3, [pc, #76]	; (8000ab0 <SAI_MspInit+0x4bc>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8000a66:	4b12      	ldr	r3, [pc, #72]	; (8000ab0 <SAI_MspInit+0x4bc>)
 8000a68:	2203      	movs	r2, #3
 8000a6a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8000a6c:	4b10      	ldr	r3, [pc, #64]	; (8000ab0 <SAI_MspInit+0x4bc>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 8000a72:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <SAI_MspInit+0x4bc>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	631a      	str	r2, [r3, #48]	; 0x30

    hdma_sai_rx.Instance = AUDIO_IN_SAI_PDMx_DMAx_STREAM;
 8000a78:	4b0d      	ldr	r3, [pc, #52]	; (8000ab0 <SAI_MspInit+0x4bc>)
 8000a7a:	4a12      	ldr	r2, [pc, #72]	; (8000ac4 <SAI_MspInit+0x4d0>)
 8000a7c:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	4a0b      	ldr	r2, [pc, #44]	; (8000ab0 <SAI_MspInit+0x4bc>)
 8000a82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8000a86:	4a0a      	ldr	r2, [pc, #40]	; (8000ab0 <SAI_MspInit+0x4bc>)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	6393      	str	r3, [r2, #56]	; 0x38

    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_rx);
 8000a8c:	4808      	ldr	r0, [pc, #32]	; (8000ab0 <SAI_MspInit+0x4bc>)
 8000a8e:	f002 fc39 	bl	8003304 <HAL_DMA_DeInit>

    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_rx);
 8000a92:	4807      	ldr	r0, [pc, #28]	; (8000ab0 <SAI_MspInit+0x4bc>)
 8000a94:	f002 f8dc 	bl	8002c50 <HAL_DMA_Init>

    /* SAI DMA IRQ Channel configuration */
    HAL_NVIC_SetPriority(AUDIO_IN_SAI_PDMx_DMAx_IRQ, BSP_AUDIO_IN_IT_PRIORITY, 0);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	210f      	movs	r1, #15
 8000a9c:	2082      	movs	r0, #130	; 0x82
 8000a9e:	f001 fd6a 	bl	8002576 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AUDIO_IN_SAI_PDMx_DMAx_IRQ);
 8000aa2:	2082      	movs	r0, #130	; 0x82
 8000aa4:	f001 fd81 	bl	80025aa <HAL_NVIC_EnableIRQ>
  }
}
 8000aa8:	bf00      	nop
 8000aaa:	3758      	adds	r7, #88	; 0x58
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	240009bc 	.word	0x240009bc
 8000ab4:	58005404 	.word	0x58005404
 8000ab8:	58024400 	.word	0x58024400
 8000abc:	58021000 	.word	0x58021000
 8000ac0:	58020800 	.word	0x58020800
 8000ac4:	5802541c 	.word	0x5802541c

08000ac8 <SAI_MspDeInit>:
  * @brief  Deinitializes SAI MSP.
  * @param  hsai  SAI handle
  * @retval HAL status
  */
static void SAI_MspDeInit(SAI_HandleTypeDef *hsai)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  if(hsai->Instance == AUDIO_OUT_SAIx)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a1d      	ldr	r2, [pc, #116]	; (8000b4c <SAI_MspDeInit+0x84>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d11a      	bne.n	8000b10 <SAI_MspDeInit+0x48>
  {
    /* SAI DMA IRQ Channel deactivation */
    HAL_NVIC_DisableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ);
 8000ada:	2045      	movs	r0, #69	; 0x45
 8000adc:	f001 fd73 	bl	80025c6 <HAL_NVIC_DisableIRQ>

    /* Deinitialize the DMA stream */
    (void)HAL_DMA_DeInit(hsai->hdmatx);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f002 fc0c 	bl	8003304 <HAL_DMA_DeInit>

    /* De-initialize FS, SCK, MCK and SD pins */
    HAL_GPIO_DeInit(AUDIO_OUT_SAIx_FS_GPIO_PORT, AUDIO_OUT_SAIx_FS_PIN);
 8000aec:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000af0:	4817      	ldr	r0, [pc, #92]	; (8000b50 <SAI_MspDeInit+0x88>)
 8000af2:	f004 fe31 	bl	8005758 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(AUDIO_OUT_SAIx_SCK_GPIO_PORT, AUDIO_OUT_SAIx_SCK_PIN);
 8000af6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000afa:	4815      	ldr	r0, [pc, #84]	; (8000b50 <SAI_MspDeInit+0x88>)
 8000afc:	f004 fe2c 	bl	8005758 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(AUDIO_OUT_SAIx_SD_GPIO_PORT, AUDIO_OUT_SAIx_SD_PIN);
 8000b00:	2140      	movs	r1, #64	; 0x40
 8000b02:	4813      	ldr	r0, [pc, #76]	; (8000b50 <SAI_MspDeInit+0x88>)
 8000b04:	f004 fe28 	bl	8005758 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, AUDIO_OUT_SAIx_MCLK_PIN);
 8000b08:	2180      	movs	r1, #128	; 0x80
 8000b0a:	4811      	ldr	r0, [pc, #68]	; (8000b50 <SAI_MspDeInit+0x88>)
 8000b0c:	f004 fe24 	bl	8005758 <HAL_GPIO_DeInit>
  }
  if(hsai->Instance == AUDIO_IN_SAIx)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a0f      	ldr	r2, [pc, #60]	; (8000b54 <SAI_MspDeInit+0x8c>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d114      	bne.n	8000b44 <SAI_MspDeInit+0x7c>
  {
    /* SAI DMA IRQ Channel deactivation */
    HAL_NVIC_DisableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 8000b1a:	203c      	movs	r0, #60	; 0x3c
 8000b1c:	f001 fd53 	bl	80025c6 <HAL_NVIC_DisableIRQ>

    /* Deinitialize the DMA stream */
    (void)HAL_DMA_DeInit(hsai->hdmarx);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000b26:	4618      	mov	r0, r3
 8000b28:	f002 fbec 	bl	8003304 <HAL_DMA_DeInit>

    /* De-initialize SD pin */
    HAL_GPIO_DeInit(AUDIO_IN_SAIx_SD_GPIO_PORT, AUDIO_IN_SAIx_SD_PIN);
 8000b2c:	2140      	movs	r1, #64	; 0x40
 8000b2e:	480a      	ldr	r0, [pc, #40]	; (8000b58 <SAI_MspDeInit+0x90>)
 8000b30:	f004 fe12 	bl	8005758 <HAL_GPIO_DeInit>

    /* Disable SAI clock */
    AUDIO_IN_SAIx_CLK_DISABLE();
 8000b34:	4b09      	ldr	r3, [pc, #36]	; (8000b5c <SAI_MspDeInit+0x94>)
 8000b36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000b3a:	4a08      	ldr	r2, [pc, #32]	; (8000b5c <SAI_MspDeInit+0x94>)
 8000b3c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000b40:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
  }
}
 8000b44:	bf00      	nop
 8000b46:	3708      	adds	r7, #8
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	40015824 	.word	0x40015824
 8000b50:	58021400 	.word	0x58021400
 8000b54:	40015804 	.word	0x40015804
 8000b58:	58021000 	.word	0x58021000
 8000b5c:	58024400 	.word	0x58024400

08000b60 <SAI_ErrorCallback>:
  * @brief  SAI error callbacks.
  * @param  hsai SAI handle
  * @retval None
  */
static void SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  if(hsai->Instance == AUDIO_OUT_SAIx)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a06      	ldr	r2, [pc, #24]	; (8000b88 <SAI_ErrorCallback+0x28>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d103      	bne.n	8000b7a <SAI_ErrorCallback+0x1a>
  {
    BSP_AUDIO_OUT_Error_CallBack(0);
 8000b72:	2000      	movs	r0, #0
 8000b74:	f7ff fd33 	bl	80005de <BSP_AUDIO_OUT_Error_CallBack>
  }
  else
  {
    BSP_AUDIO_IN_Error_CallBack(0);
  }
}
 8000b78:	e002      	b.n	8000b80 <SAI_ErrorCallback+0x20>
    BSP_AUDIO_IN_Error_CallBack(0);
 8000b7a:	2000      	movs	r0, #0
 8000b7c:	f001 f8c3 	bl	8001d06 <BSP_AUDIO_IN_Error_CallBack>
}
 8000b80:	bf00      	nop
 8000b82:	3708      	adds	r7, #8
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	40015824 	.word	0x40015824

08000b8c <BSP_AUDIO_IN_Init>:
  * @param  Instance  Audio IN instance: 0 for SAI, 1 for SAI PDM and 2 for DFSDM
  * @param  AudioInit Init structure
  * @retval BSP status
  */
int32_t BSP_AUDIO_IN_Init(uint32_t Instance, BSP_AUDIO_Init_t* AudioInit)
{
 8000b8c:	b590      	push	{r4, r7, lr}
 8000b8e:	b0a9      	sub	sp, #164	; 0xa4
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
 8000b94:	6039      	str	r1, [r7, #0]
  uint32_t i;
  int32_t ret = BSP_ERROR_NONE;
 8000b96:	2300      	movs	r3, #0
 8000b98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if(Instance >= PDMS_NBR)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2b02      	cmp	r3, #2
 8000ba0:	d905      	bls.n	8000bae <BSP_AUDIO_IN_Init+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000ba2:	f06f 0301 	mvn.w	r3, #1
 8000ba6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000baa:	f000 bca7 	b.w	80014fc <BSP_AUDIO_IN_Init+0x970>
  }
  else
  {
    /* Store the audio record context */
    Audio_In_Ctx[Instance].Device          = AudioInit->Device;
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	6819      	ldr	r1, [r3, #0]
 8000bb2:	48b6      	ldr	r0, [pc, #728]	; (8000e8c <BSP_AUDIO_IN_Init+0x300>)
 8000bb4:	687a      	ldr	r2, [r7, #4]
 8000bb6:	4613      	mov	r3, r2
 8000bb8:	005b      	lsls	r3, r3, #1
 8000bba:	4413      	add	r3, r2
 8000bbc:	011b      	lsls	r3, r3, #4
 8000bbe:	4403      	add	r3, r0
 8000bc0:	3304      	adds	r3, #4
 8000bc2:	6019      	str	r1, [r3, #0]
    Audio_In_Ctx[Instance].ChannelsNbr     = AudioInit->ChannelsNbr;
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	68d9      	ldr	r1, [r3, #12]
 8000bc8:	48b0      	ldr	r0, [pc, #704]	; (8000e8c <BSP_AUDIO_IN_Init+0x300>)
 8000bca:	687a      	ldr	r2, [r7, #4]
 8000bcc:	4613      	mov	r3, r2
 8000bce:	005b      	lsls	r3, r3, #1
 8000bd0:	4413      	add	r3, r2
 8000bd2:	011b      	lsls	r3, r3, #4
 8000bd4:	4403      	add	r3, r0
 8000bd6:	3310      	adds	r3, #16
 8000bd8:	6019      	str	r1, [r3, #0]
    Audio_In_Ctx[Instance].SampleRate      = AudioInit->SampleRate;
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	6859      	ldr	r1, [r3, #4]
 8000bde:	48ab      	ldr	r0, [pc, #684]	; (8000e8c <BSP_AUDIO_IN_Init+0x300>)
 8000be0:	687a      	ldr	r2, [r7, #4]
 8000be2:	4613      	mov	r3, r2
 8000be4:	005b      	lsls	r3, r3, #1
 8000be6:	4413      	add	r3, r2
 8000be8:	011b      	lsls	r3, r3, #4
 8000bea:	4403      	add	r3, r0
 8000bec:	3308      	adds	r3, #8
 8000bee:	6019      	str	r1, [r3, #0]
    Audio_In_Ctx[Instance].BitsPerSample   = AudioInit->BitsPerSample;
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	6899      	ldr	r1, [r3, #8]
 8000bf4:	48a5      	ldr	r0, [pc, #660]	; (8000e8c <BSP_AUDIO_IN_Init+0x300>)
 8000bf6:	687a      	ldr	r2, [r7, #4]
 8000bf8:	4613      	mov	r3, r2
 8000bfa:	005b      	lsls	r3, r3, #1
 8000bfc:	4413      	add	r3, r2
 8000bfe:	011b      	lsls	r3, r3, #4
 8000c00:	4403      	add	r3, r0
 8000c02:	330c      	adds	r3, #12
 8000c04:	6019      	str	r1, [r3, #0]
    Audio_In_Ctx[Instance].Volume          = AudioInit->Volume;
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	6919      	ldr	r1, [r3, #16]
 8000c0a:	48a0      	ldr	r0, [pc, #640]	; (8000e8c <BSP_AUDIO_IN_Init+0x300>)
 8000c0c:	687a      	ldr	r2, [r7, #4]
 8000c0e:	4613      	mov	r3, r2
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	4413      	add	r3, r2
 8000c14:	011b      	lsls	r3, r3, #4
 8000c16:	4403      	add	r3, r0
 8000c18:	3320      	adds	r3, #32
 8000c1a:	6019      	str	r1, [r3, #0]
    Audio_In_Ctx[Instance].State           = AUDIO_IN_STATE_RESET;
 8000c1c:	499b      	ldr	r1, [pc, #620]	; (8000e8c <BSP_AUDIO_IN_Init+0x300>)
 8000c1e:	687a      	ldr	r2, [r7, #4]
 8000c20:	4613      	mov	r3, r2
 8000c22:	005b      	lsls	r3, r3, #1
 8000c24:	4413      	add	r3, r2
 8000c26:	011b      	lsls	r3, r3, #4
 8000c28:	440b      	add	r3, r1
 8000c2a:	3324      	adds	r3, #36	; 0x24
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]

    if(Instance == 0U)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	f040 8115 	bne.w	8000e62 <BSP_AUDIO_IN_Init+0x2d6>
    {
      /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */
      if(MX_SAI1_ClockConfig(&haudio_in_sai[Instance], AudioInit->SampleRate) != HAL_OK)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	22b4      	movs	r2, #180	; 0xb4
 8000c3c:	fb02 f303 	mul.w	r3, r2, r3
 8000c40:	4a93      	ldr	r2, [pc, #588]	; (8000e90 <BSP_AUDIO_IN_Init+0x304>)
 8000c42:	441a      	add	r2, r3
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4610      	mov	r0, r2
 8000c4c:	f7ff fc8a 	bl	8000564 <MX_SAI1_ClockConfig>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d005      	beq.n	8000c62 <BSP_AUDIO_IN_Init+0xd6>
      {
        ret = BSP_ERROR_CLOCK_FAILURE;
 8000c56:	f06f 0308 	mvn.w	r3, #8
 8000c5a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000c5e:	f000 bc43 	b.w	80014e8 <BSP_AUDIO_IN_Init+0x95c>
      }
      else
      {
        haudio_in_sai[Instance].Instance    = AUDIO_IN_SAIx;
 8000c62:	4a8b      	ldr	r2, [pc, #556]	; (8000e90 <BSP_AUDIO_IN_Init+0x304>)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	21b4      	movs	r1, #180	; 0xb4
 8000c68:	fb01 f303 	mul.w	r3, r1, r3
 8000c6c:	4413      	add	r3, r2
 8000c6e:	4a89      	ldr	r2, [pc, #548]	; (8000e94 <BSP_AUDIO_IN_Init+0x308>)
 8000c70:	601a      	str	r2, [r3, #0]
        haudio_out_sai.Instance   = AUDIO_OUT_SAIx;
 8000c72:	4b89      	ldr	r3, [pc, #548]	; (8000e98 <BSP_AUDIO_IN_Init+0x30c>)
 8000c74:	4a89      	ldr	r2, [pc, #548]	; (8000e9c <BSP_AUDIO_IN_Init+0x310>)
 8000c76:	601a      	str	r2, [r3, #0]
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        /* Register the default SAI MSP callbacks */
        if(Audio_In_Ctx[Instance].IsMspCallbacksValid == 0U)
 8000c78:	4984      	ldr	r1, [pc, #528]	; (8000e8c <BSP_AUDIO_IN_Init+0x300>)
 8000c7a:	687a      	ldr	r2, [r7, #4]
 8000c7c:	4613      	mov	r3, r2
 8000c7e:	005b      	lsls	r3, r3, #1
 8000c80:	4413      	add	r3, r2
 8000c82:	011b      	lsls	r3, r3, #4
 8000c84:	440b      	add	r3, r1
 8000c86:	332c      	adds	r3, #44	; 0x2c
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d109      	bne.n	8000ca2 <BSP_AUDIO_IN_Init+0x116>
        {
          if(BSP_AUDIO_IN_RegisterDefaultMspCallbacks(Instance) != BSP_ERROR_NONE)
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	f000 fe3a 	bl	8001908 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d003      	beq.n	8000ca2 <BSP_AUDIO_IN_Init+0x116>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
 8000c9a:	f06f 0303 	mvn.w	r3, #3
 8000c9e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
          }
        }
#else
        SAI_MspInit(&haudio_in_sai[Instance]);
#endif /* (USE_HAL_SAI_REGISTER_CALLBACKS == 1) */
        if (ret == BSP_ERROR_NONE)
 8000ca2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	f040 841e 	bne.w	80014e8 <BSP_AUDIO_IN_Init+0x95c>
        {
          MX_SAI_Config mx_config;

          /* Prepare haudio_in_sai handle */
          mx_config.AudioFrequency        = Audio_In_Ctx[Instance].SampleRate;
 8000cac:	4977      	ldr	r1, [pc, #476]	; (8000e8c <BSP_AUDIO_IN_Init+0x300>)
 8000cae:	687a      	ldr	r2, [r7, #4]
 8000cb0:	4613      	mov	r3, r2
 8000cb2:	005b      	lsls	r3, r3, #1
 8000cb4:	4413      	add	r3, r2
 8000cb6:	011b      	lsls	r3, r3, #4
 8000cb8:	440b      	add	r3, r1
 8000cba:	3308      	adds	r3, #8
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	60bb      	str	r3, [r7, #8]
          mx_config.AudioMode             = SAI_MODESLAVE_RX;
 8000cc0:	2303      	movs	r3, #3
 8000cc2:	60fb      	str	r3, [r7, #12]
          mx_config.ClockStrobing         = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	61bb      	str	r3, [r7, #24]
          mx_config.MonoStereoMode        = (AudioInit->ChannelsNbr == 1U) ? SAI_MONOMODE : SAI_STEREOMODE;
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d102      	bne.n	8000cd6 <BSP_AUDIO_IN_Init+0x14a>
 8000cd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cd4:	e000      	b.n	8000cd8 <BSP_AUDIO_IN_Init+0x14c>
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	617b      	str	r3, [r7, #20]
          mx_config.DataSize              = SAI_DATASIZE_16;
 8000cda:	2380      	movs	r3, #128	; 0x80
 8000cdc:	613b      	str	r3, [r7, #16]
          mx_config.FrameLength           = 128;
 8000cde:	2380      	movs	r3, #128	; 0x80
 8000ce0:	62bb      	str	r3, [r7, #40]	; 0x28
          mx_config.ActiveFrameLength     = 64;
 8000ce2:	2340      	movs	r3, #64	; 0x40
 8000ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
          mx_config.OutputDrive           = SAI_OUTPUTDRIVE_ENABLE;
 8000ce6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cea:	623b      	str	r3, [r7, #32]
          mx_config.Synchro               = SAI_SYNCHRONOUS;
 8000cec:	2301      	movs	r3, #1
 8000cee:	61fb      	str	r3, [r7, #28]
          mx_config.SynchroExt            = SAI_SYNCEXT_DISABLE;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	627b      	str	r3, [r7, #36]	; 0x24
          mx_config.SlotActive            = SAI_SLOTACTIVE_0 | SAI_SLOTACTIVE_1;
 8000cf4:	2303      	movs	r3, #3
 8000cf6:	633b      	str	r3, [r7, #48]	; 0x30

          if(MX_SAI1_Block_A_Init(&haudio_in_sai[Instance], &mx_config) != HAL_OK)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	22b4      	movs	r2, #180	; 0xb4
 8000cfc:	fb02 f303 	mul.w	r3, r2, r3
 8000d00:	4a63      	ldr	r2, [pc, #396]	; (8000e90 <BSP_AUDIO_IN_Init+0x304>)
 8000d02:	4413      	add	r3, r2
 8000d04:	f107 0208 	add.w	r2, r7, #8
 8000d08:	4611      	mov	r1, r2
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f000 fcee 	bl	80016ec <MX_SAI1_Block_A_Init>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d004      	beq.n	8000d20 <BSP_AUDIO_IN_Init+0x194>
          {
            /* Return BSP_ERROR_PERIPH_FAILURE when operations are not correctly done */
            ret = BSP_ERROR_PERIPH_FAILURE;
 8000d16:	f06f 0303 	mvn.w	r3, #3
 8000d1a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000d1e:	e010      	b.n	8000d42 <BSP_AUDIO_IN_Init+0x1b6>
          }
          else
          {
            /* Prepare haudio_out_sai handle */
            mx_config.AudioMode         = SAI_MODEMASTER_TX;
 8000d20:	2300      	movs	r3, #0
 8000d22:	60fb      	str	r3, [r7, #12]
            mx_config.Synchro           = SAI_ASYNCHRONOUS;
 8000d24:	2300      	movs	r3, #0
 8000d26:	61fb      	str	r3, [r7, #28]

            if(MX_SAI1_Block_B_Init(&haudio_out_sai, &mx_config) != HAL_OK)
 8000d28:	f107 0308 	add.w	r3, r7, #8
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	485a      	ldr	r0, [pc, #360]	; (8000e98 <BSP_AUDIO_IN_Init+0x30c>)
 8000d30:	f7ff fb88 	bl	8000444 <MX_SAI1_Block_B_Init>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d003      	beq.n	8000d42 <BSP_AUDIO_IN_Init+0x1b6>
            {
              /* Return BSP_ERROR_PERIPH_FAILURE when operations are not correctly done */
              ret = BSP_ERROR_PERIPH_FAILURE;
 8000d3a:	f06f 0303 	mvn.w	r3, #3
 8000d3e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
            }
          }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
          if (ret == BSP_ERROR_NONE)
 8000d42:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d137      	bne.n	8000dba <BSP_AUDIO_IN_Init+0x22e>
          {
            /* Register SAI TC, HT and Error callbacks */
            if(HAL_SAI_RegisterCallback(&haudio_in_sai[Instance], HAL_SAI_RX_COMPLETE_CB_ID, SAI_RxCpltCallback) != HAL_OK)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	22b4      	movs	r2, #180	; 0xb4
 8000d4e:	fb02 f303 	mul.w	r3, r2, r3
 8000d52:	4a4f      	ldr	r2, [pc, #316]	; (8000e90 <BSP_AUDIO_IN_Init+0x304>)
 8000d54:	4413      	add	r3, r2
 8000d56:	4a52      	ldr	r2, [pc, #328]	; (8000ea0 <BSP_AUDIO_IN_Init+0x314>)
 8000d58:	2100      	movs	r1, #0
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f008 f99a 	bl	8009094 <HAL_SAI_RegisterCallback>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d004      	beq.n	8000d70 <BSP_AUDIO_IN_Init+0x1e4>
            {
              ret = BSP_ERROR_PERIPH_FAILURE;
 8000d66:	f06f 0303 	mvn.w	r3, #3
 8000d6a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000d6e:	e024      	b.n	8000dba <BSP_AUDIO_IN_Init+0x22e>
            }
            else if(HAL_SAI_RegisterCallback(&haudio_in_sai[Instance], HAL_SAI_RX_HALFCOMPLETE_CB_ID, SAI_RxHalfCpltCallback) != HAL_OK)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	22b4      	movs	r2, #180	; 0xb4
 8000d74:	fb02 f303 	mul.w	r3, r2, r3
 8000d78:	4a45      	ldr	r2, [pc, #276]	; (8000e90 <BSP_AUDIO_IN_Init+0x304>)
 8000d7a:	4413      	add	r3, r2
 8000d7c:	4a49      	ldr	r2, [pc, #292]	; (8000ea4 <BSP_AUDIO_IN_Init+0x318>)
 8000d7e:	2101      	movs	r1, #1
 8000d80:	4618      	mov	r0, r3
 8000d82:	f008 f987 	bl	8009094 <HAL_SAI_RegisterCallback>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d004      	beq.n	8000d96 <BSP_AUDIO_IN_Init+0x20a>
            {
              ret = BSP_ERROR_PERIPH_FAILURE;
 8000d8c:	f06f 0303 	mvn.w	r3, #3
 8000d90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000d94:	e011      	b.n	8000dba <BSP_AUDIO_IN_Init+0x22e>
            }
            else
            {
              if(HAL_SAI_RegisterCallback(&haudio_in_sai[Instance], HAL_SAI_ERROR_CB_ID, SAI_ErrorCallback) != HAL_OK)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	22b4      	movs	r2, #180	; 0xb4
 8000d9a:	fb02 f303 	mul.w	r3, r2, r3
 8000d9e:	4a3c      	ldr	r2, [pc, #240]	; (8000e90 <BSP_AUDIO_IN_Init+0x304>)
 8000da0:	4413      	add	r3, r2
 8000da2:	4a41      	ldr	r2, [pc, #260]	; (8000ea8 <BSP_AUDIO_IN_Init+0x31c>)
 8000da4:	2104      	movs	r1, #4
 8000da6:	4618      	mov	r0, r3
 8000da8:	f008 f974 	bl	8009094 <HAL_SAI_RegisterCallback>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d003      	beq.n	8000dba <BSP_AUDIO_IN_Init+0x22e>
              {
                ret = BSP_ERROR_PERIPH_FAILURE;
 8000db2:	f06f 0303 	mvn.w	r3, #3
 8000db6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
              }
            }
          }
#endif /* (USE_HAL_SAI_REGISTER_CALLBACKS == 1) */
#if (USE_AUDIO_CODEC_WM8994 == 1)
          if (ret == BSP_ERROR_NONE)
 8000dba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	f040 8392 	bne.w	80014e8 <BSP_AUDIO_IN_Init+0x95c>
          {
            WM8994_Init_t codec_init;

            /* Fill codec_init structure */
            codec_init.OutputDevice = (Audio_Out_Ctx[0].State == AUDIO_OUT_STATE_RESET) ? WM8994_OUT_NONE : WM8994_OUT_HEADPHONE;
 8000dc4:	4b39      	ldr	r3, [pc, #228]	; (8000eac <BSP_AUDIO_IN_Init+0x320>)
 8000dc6:	69db      	ldr	r3, [r3, #28]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d101      	bne.n	8000dd0 <BSP_AUDIO_IN_Init+0x244>
 8000dcc:	2300      	movs	r3, #0
 8000dce:	e000      	b.n	8000dd2 <BSP_AUDIO_IN_Init+0x246>
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            codec_init.Frequency    = AudioInit->SampleRate;
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
            codec_init.Resolution   = (AudioInit->BitsPerSample == AUDIO_RESOLUTION_32B) ? WM8994_RESOLUTION_32b : WM8994_RESOLUTION_16b;
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	689b      	ldr	r3, [r3, #8]
 8000de2:	2b20      	cmp	r3, #32
 8000de4:	d101      	bne.n	8000dea <BSP_AUDIO_IN_Init+0x25e>
 8000de6:	2303      	movs	r3, #3
 8000de8:	e000      	b.n	8000dec <BSP_AUDIO_IN_Init+0x260>
 8000dea:	2300      	movs	r3, #0
 8000dec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
            codec_init.InputDevice  = (AudioInit->Device == AUDIO_IN_DEVICE_ANALOG_MIC) ? WM8994_IN_LINE1 : WM8994_IN_MIC2;
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d101      	bne.n	8000dfc <BSP_AUDIO_IN_Init+0x270>
 8000df8:	2303      	movs	r3, #3
 8000dfa:	e000      	b.n	8000dfe <BSP_AUDIO_IN_Init+0x272>
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

            /* Convert volume before sending to the codec */
            codec_init.Volume       = VOLUME_IN_CONVERT(AudioInit->Volume);
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	691b      	ldr	r3, [r3, #16]
 8000e06:	2b63      	cmp	r3, #99	; 0x63
 8000e08:	d80c      	bhi.n	8000e24 <BSP_AUDIO_IN_Init+0x298>
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	691a      	ldr	r2, [r3, #16]
 8000e0e:	4613      	mov	r3, r2
 8000e10:	011b      	lsls	r3, r3, #4
 8000e12:	1a9b      	subs	r3, r3, r2
 8000e14:	011b      	lsls	r3, r3, #4
 8000e16:	1a9b      	subs	r3, r3, r2
 8000e18:	4a25      	ldr	r2, [pc, #148]	; (8000eb0 <BSP_AUDIO_IN_Init+0x324>)
 8000e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e1e:	095b      	lsrs	r3, r3, #5
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	e000      	b.n	8000e26 <BSP_AUDIO_IN_Init+0x29a>
 8000e24:	23ef      	movs	r3, #239	; 0xef
 8000e26:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
            /* Initialize the codec internal registers */
            if(Audio_Drv->Init(Audio_CompObj, &codec_init) < 0)
 8000e2a:	4b22      	ldr	r3, [pc, #136]	; (8000eb4 <BSP_AUDIO_IN_Init+0x328>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a21      	ldr	r2, [pc, #132]	; (8000eb8 <BSP_AUDIO_IN_Init+0x32c>)
 8000e32:	6812      	ldr	r2, [r2, #0]
 8000e34:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8000e38:	4610      	mov	r0, r2
 8000e3a:	4798      	blx	r3
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	da04      	bge.n	8000e4c <BSP_AUDIO_IN_Init+0x2c0>
            {
              ret = BSP_ERROR_COMPONENT_FAILURE;
 8000e42:	f06f 0304 	mvn.w	r3, #4
 8000e46:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000e4a:	e34d      	b.n	80014e8 <BSP_AUDIO_IN_Init+0x95c>
            }
            else
            {
              /* Update audio in context state */
              Audio_In_Ctx[Instance].State = AUDIO_IN_STATE_STOP;
 8000e4c:	490f      	ldr	r1, [pc, #60]	; (8000e8c <BSP_AUDIO_IN_Init+0x300>)
 8000e4e:	687a      	ldr	r2, [r7, #4]
 8000e50:	4613      	mov	r3, r2
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	4413      	add	r3, r2
 8000e56:	011b      	lsls	r3, r3, #4
 8000e58:	440b      	add	r3, r1
 8000e5a:	3324      	adds	r3, #36	; 0x24
 8000e5c:	2202      	movs	r2, #2
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	e342      	b.n	80014e8 <BSP_AUDIO_IN_Init+0x95c>
          }
#endif  /*USE_AUDIO_CODEC_WM8994 == 1)*/
        }
      }
    }
    else if(Instance == 1)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2b01      	cmp	r3, #1
 8000e66:	f040 80da 	bne.w	800101e <BSP_AUDIO_IN_Init+0x492>
    {
      if(Audio_In_Ctx[Instance].Device != AUDIO_IN_DEVICE_DIGITAL_MIC1)
 8000e6a:	4908      	ldr	r1, [pc, #32]	; (8000e8c <BSP_AUDIO_IN_Init+0x300>)
 8000e6c:	687a      	ldr	r2, [r7, #4]
 8000e6e:	4613      	mov	r3, r2
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	4413      	add	r3, r2
 8000e74:	011b      	lsls	r3, r3, #4
 8000e76:	440b      	add	r3, r1
 8000e78:	3304      	adds	r3, #4
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	2b10      	cmp	r3, #16
 8000e7e:	d01d      	beq.n	8000ebc <BSP_AUDIO_IN_Init+0x330>
      {
        ret = BSP_ERROR_WRONG_PARAM;
 8000e80:	f06f 0301 	mvn.w	r3, #1
 8000e84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000e88:	e32e      	b.n	80014e8 <BSP_AUDIO_IN_Init+0x95c>
 8000e8a:	bf00      	nop
 8000e8c:	24000cb8 	.word	0x24000cb8
 8000e90:	24000554 	.word	0x24000554
 8000e94:	40015804 	.word	0x40015804
 8000e98:	240004a0 	.word	0x240004a0
 8000e9c:	40015824 	.word	0x40015824
 8000ea0:	08001d31 	.word	0x08001d31
 8000ea4:	08001d1b 	.word	0x08001d1b
 8000ea8:	08000b61 	.word	0x08000b61
 8000eac:	24000c94 	.word	0x24000c94
 8000eb0:	51eb851f 	.word	0x51eb851f
 8000eb4:	240006bc 	.word	0x240006bc
 8000eb8:	2400049c 	.word	0x2400049c
      }
      else
      {
      /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */
      if(MX_SAI4_ClockConfig(&haudio_in_sai[Instance], AudioInit->SampleRate) != HAL_OK)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	22b4      	movs	r2, #180	; 0xb4
 8000ec0:	fb02 f303 	mul.w	r3, r2, r3
 8000ec4:	4a75      	ldr	r2, [pc, #468]	; (800109c <BSP_AUDIO_IN_Init+0x510>)
 8000ec6:	441a      	add	r2, r3
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4610      	mov	r0, r2
 8000ed0:	f000 fb48 	bl	8001564 <MX_SAI4_ClockConfig>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d002      	beq.n	8000ee0 <BSP_AUDIO_IN_Init+0x354>
      {
        return BSP_ERROR_CLOCK_FAILURE;
 8000eda:	f06f 0308 	mvn.w	r3, #8
 8000ede:	e30f      	b.n	8001500 <BSP_AUDIO_IN_Init+0x974>
      }
      haudio_in_sai[Instance].Instance = AUDIO_IN_SAI_PDMx;
 8000ee0:	4a6e      	ldr	r2, [pc, #440]	; (800109c <BSP_AUDIO_IN_Init+0x510>)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	21b4      	movs	r1, #180	; 0xb4
 8000ee6:	fb01 f303 	mul.w	r3, r1, r3
 8000eea:	4413      	add	r3, r2
 8000eec:	4a6c      	ldr	r2, [pc, #432]	; (80010a0 <BSP_AUDIO_IN_Init+0x514>)
 8000eee:	601a      	str	r2, [r3, #0]
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1U)
      /* Register the default SAI MSP callbacks */
      if(Audio_In_Ctx[Instance].IsMspCallbacksValid == 0U)
 8000ef0:	496c      	ldr	r1, [pc, #432]	; (80010a4 <BSP_AUDIO_IN_Init+0x518>)
 8000ef2:	687a      	ldr	r2, [r7, #4]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	4413      	add	r3, r2
 8000efa:	011b      	lsls	r3, r3, #4
 8000efc:	440b      	add	r3, r1
 8000efe:	332c      	adds	r3, #44	; 0x2c
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d108      	bne.n	8000f18 <BSP_AUDIO_IN_Init+0x38c>
      {
        if(BSP_AUDIO_IN_RegisterDefaultMspCallbacks(Instance) != BSP_ERROR_NONE)
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f000 fcfe 	bl	8001908 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d002      	beq.n	8000f18 <BSP_AUDIO_IN_Init+0x38c>
        {
          return BSP_ERROR_PERIPH_FAILURE;
 8000f12:	f06f 0303 	mvn.w	r3, #3
 8000f16:	e2f3      	b.n	8001500 <BSP_AUDIO_IN_Init+0x974>
      SAI_MspInit(&haudio_in_sai[Instance]);
#endif /* (USE_HAL_SAI_REGISTER_CALLBACKS == 1U) */
      MX_SAI_Config mx_config;

      /* Prepare haudio_in_sai handle */
      mx_config.MonoStereoMode    = SAI_STEREOMODE;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	617b      	str	r3, [r7, #20]
      mx_config.DataSize          = SAI_DATASIZE_16;
 8000f1c:	2380      	movs	r3, #128	; 0x80
 8000f1e:	613b      	str	r3, [r7, #16]
      mx_config.FrameLength       = 16;
 8000f20:	2310      	movs	r3, #16
 8000f22:	62bb      	str	r3, [r7, #40]	; 0x28
      mx_config.ActiveFrameLength = 1;
 8000f24:	2301      	movs	r3, #1
 8000f26:	62fb      	str	r3, [r7, #44]	; 0x2c
      mx_config.OutputDrive       = SAI_OUTPUTDRIVE_DISABLE;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	623b      	str	r3, [r7, #32]
      mx_config.SlotActive        = SAI_SLOTACTIVE_0;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	633b      	str	r3, [r7, #48]	; 0x30
      mx_config.AudioFrequency    = Audio_In_Ctx[Instance].SampleRate*8;
 8000f30:	495c      	ldr	r1, [pc, #368]	; (80010a4 <BSP_AUDIO_IN_Init+0x518>)
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	4613      	mov	r3, r2
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	4413      	add	r3, r2
 8000f3a:	011b      	lsls	r3, r3, #4
 8000f3c:	440b      	add	r3, r1
 8000f3e:	3308      	adds	r3, #8
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	00db      	lsls	r3, r3, #3
 8000f44:	60bb      	str	r3, [r7, #8]
      mx_config.AudioMode         = SAI_MODEMASTER_RX;
 8000f46:	2301      	movs	r3, #1
 8000f48:	60fb      	str	r3, [r7, #12]
      mx_config.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61bb      	str	r3, [r7, #24]
      mx_config.Synchro           = SAI_ASYNCHRONOUS;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61fb      	str	r3, [r7, #28]
      mx_config.SynchroExt        = SAI_SYNCEXT_DISABLE;
 8000f52:	2300      	movs	r3, #0
 8000f54:	627b      	str	r3, [r7, #36]	; 0x24

      if(MX_SAI4_Block_A_Init(&haudio_in_sai[Instance], &mx_config) != HAL_OK)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	22b4      	movs	r2, #180	; 0xb4
 8000f5a:	fb02 f303 	mul.w	r3, r2, r3
 8000f5e:	4a4f      	ldr	r2, [pc, #316]	; (800109c <BSP_AUDIO_IN_Init+0x510>)
 8000f60:	4413      	add	r3, r2
 8000f62:	f107 0208 	add.w	r2, r7, #8
 8000f66:	4611      	mov	r1, r2
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f000 fc47 	bl	80017fc <MX_SAI4_Block_A_Init>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d002      	beq.n	8000f7a <BSP_AUDIO_IN_Init+0x3ee>
      {
        /* Return BSP_ERROR_PERIPH_FAILURE when operations are not correctly done */
        return BSP_ERROR_PERIPH_FAILURE;
 8000f74:	f06f 0303 	mvn.w	r3, #3
 8000f78:	e2c2      	b.n	8001500 <BSP_AUDIO_IN_Init+0x974>
      }

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1U)
      /* Register SAI TC, HT and Error callbacks */
      if(HAL_SAI_RegisterCallback(&haudio_in_sai[Instance], HAL_SAI_RX_COMPLETE_CB_ID, SAI_RxCpltCallback) != HAL_OK)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	22b4      	movs	r2, #180	; 0xb4
 8000f7e:	fb02 f303 	mul.w	r3, r2, r3
 8000f82:	4a46      	ldr	r2, [pc, #280]	; (800109c <BSP_AUDIO_IN_Init+0x510>)
 8000f84:	4413      	add	r3, r2
 8000f86:	4a48      	ldr	r2, [pc, #288]	; (80010a8 <BSP_AUDIO_IN_Init+0x51c>)
 8000f88:	2100      	movs	r1, #0
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f008 f882 	bl	8009094 <HAL_SAI_RegisterCallback>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d002      	beq.n	8000f9c <BSP_AUDIO_IN_Init+0x410>
      {
        return BSP_ERROR_PERIPH_FAILURE;
 8000f96:	f06f 0303 	mvn.w	r3, #3
 8000f9a:	e2b1      	b.n	8001500 <BSP_AUDIO_IN_Init+0x974>
      }
      if(HAL_SAI_RegisterCallback(&haudio_in_sai[Instance], HAL_SAI_RX_HALFCOMPLETE_CB_ID, SAI_RxHalfCpltCallback) != HAL_OK)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	22b4      	movs	r2, #180	; 0xb4
 8000fa0:	fb02 f303 	mul.w	r3, r2, r3
 8000fa4:	4a3d      	ldr	r2, [pc, #244]	; (800109c <BSP_AUDIO_IN_Init+0x510>)
 8000fa6:	4413      	add	r3, r2
 8000fa8:	4a40      	ldr	r2, [pc, #256]	; (80010ac <BSP_AUDIO_IN_Init+0x520>)
 8000faa:	2101      	movs	r1, #1
 8000fac:	4618      	mov	r0, r3
 8000fae:	f008 f871 	bl	8009094 <HAL_SAI_RegisterCallback>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d002      	beq.n	8000fbe <BSP_AUDIO_IN_Init+0x432>
      {
        return BSP_ERROR_PERIPH_FAILURE;
 8000fb8:	f06f 0303 	mvn.w	r3, #3
 8000fbc:	e2a0      	b.n	8001500 <BSP_AUDIO_IN_Init+0x974>
      }
      if(HAL_SAI_RegisterCallback(&haudio_in_sai[Instance], HAL_SAI_ERROR_CB_ID, SAI_ErrorCallback) != HAL_OK)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	22b4      	movs	r2, #180	; 0xb4
 8000fc2:	fb02 f303 	mul.w	r3, r2, r3
 8000fc6:	4a35      	ldr	r2, [pc, #212]	; (800109c <BSP_AUDIO_IN_Init+0x510>)
 8000fc8:	4413      	add	r3, r2
 8000fca:	4a39      	ldr	r2, [pc, #228]	; (80010b0 <BSP_AUDIO_IN_Init+0x524>)
 8000fcc:	2104      	movs	r1, #4
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f008 f860 	bl	8009094 <HAL_SAI_RegisterCallback>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d002      	beq.n	8000fe0 <BSP_AUDIO_IN_Init+0x454>
      {
        return BSP_ERROR_PERIPH_FAILURE;
 8000fda:	f06f 0303 	mvn.w	r3, #3
 8000fde:	e28f      	b.n	8001500 <BSP_AUDIO_IN_Init+0x974>
      }
#endif /* (USE_HAL_SAI_REGISTER_CALLBACKS == 1U) */
#if (USE_BSP_PDM_LIB_FEATURE > 0U)
      if(BSP_AUDIO_IN_PDMToPCM_Init(Instance, AudioInit->SampleRate, Audio_In_Ctx[Instance].ChannelsNbr, Audio_In_Ctx[Instance].ChannelsNbr) != BSP_ERROR_NONE)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	6859      	ldr	r1, [r3, #4]
 8000fe4:	482f      	ldr	r0, [pc, #188]	; (80010a4 <BSP_AUDIO_IN_Init+0x518>)
 8000fe6:	687a      	ldr	r2, [r7, #4]
 8000fe8:	4613      	mov	r3, r2
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	4413      	add	r3, r2
 8000fee:	011b      	lsls	r3, r3, #4
 8000ff0:	4403      	add	r3, r0
 8000ff2:	3310      	adds	r3, #16
 8000ff4:	6818      	ldr	r0, [r3, #0]
 8000ff6:	4c2b      	ldr	r4, [pc, #172]	; (80010a4 <BSP_AUDIO_IN_Init+0x518>)
 8000ff8:	687a      	ldr	r2, [r7, #4]
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	4413      	add	r3, r2
 8001000:	011b      	lsls	r3, r3, #4
 8001002:	4423      	add	r3, r4
 8001004:	3310      	adds	r3, #16
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4602      	mov	r2, r0
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f000 fd3c 	bl	8001a88 <BSP_AUDIO_IN_PDMToPCM_Init>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	f000 8268 	beq.w	80014e8 <BSP_AUDIO_IN_Init+0x95c>
      {
        return BSP_ERROR_NO_INIT;
 8001018:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800101c:	e270      	b.n	8001500 <BSP_AUDIO_IN_Init+0x974>
#endif
    }
    }
    else /* (Instance == 2U) */
    {
      DFSDM_Filter_TypeDef* FilterInstnace[DFSDM_MIC_NUMBER] = {AUDIO_DFSDMx_MIC1_FILTER, AUDIO_DFSDMx_MIC2_FILTER,AUDIO_DFSDMx_MIC3_FILTER,AUDIO_DFSDMx_MIC4_FILTER};
 800101e:	4b25      	ldr	r3, [pc, #148]	; (80010b4 <BSP_AUDIO_IN_Init+0x528>)
 8001020:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8001024:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001026:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      DFSDM_Channel_TypeDef* ChannelInstance[DFSDM_MIC_NUMBER] = {AUDIO_DFSDMx_MIC1_CHANNEL, AUDIO_DFSDMx_MIC2_CHANNEL,AUDIO_DFSDMx_MIC3_CHANNEL,AUDIO_DFSDMx_MIC4_CHANNEL};
 800102a:	4b23      	ldr	r3, [pc, #140]	; (80010b8 <BSP_AUDIO_IN_Init+0x52c>)
 800102c:	f107 0464 	add.w	r4, r7, #100	; 0x64
 8001030:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001032:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      uint32_t DigitalMicPins[DFSDM_MIC_NUMBER] = {DFSDM_CHANNEL_SAME_CHANNEL_PINS, DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS, DFSDM_CHANNEL_SAME_CHANNEL_PINS, DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS};
 8001036:	4b21      	ldr	r3, [pc, #132]	; (80010bc <BSP_AUDIO_IN_Init+0x530>)
 8001038:	f107 0454 	add.w	r4, r7, #84	; 0x54
 800103c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800103e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      uint32_t DigitalMicType[DFSDM_MIC_NUMBER] = {DFSDM_CHANNEL_SPI_RISING, DFSDM_CHANNEL_SPI_FALLING, DFSDM_CHANNEL_SPI_RISING, DFSDM_CHANNEL_SPI_FALLING};
 8001042:	4b1f      	ldr	r3, [pc, #124]	; (80010c0 <BSP_AUDIO_IN_Init+0x534>)
 8001044:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8001048:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800104a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      uint32_t Channel4Filter[DFSDM_MIC_NUMBER] = {AUDIO_DFSDMx_MIC1_CHANNEL_FOR_FILTER, AUDIO_DFSDMx_MIC2_CHANNEL_FOR_FILTER,AUDIO_DFSDMx_MIC3_CHANNEL_FOR_FILTER,AUDIO_DFSDMx_MIC4_CHANNEL_FOR_FILTER};
 800104e:	4b1d      	ldr	r3, [pc, #116]	; (80010c4 <BSP_AUDIO_IN_Init+0x538>)
 8001050:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8001054:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001056:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      MX_DFSDM_Config dfsdm_config;

      /* PLL clock is set depending on the AudioFreq (44.1khz vs 48khz groups) */
      if(MX_DFSDM1_ClockConfig(&haudio_in_dfsdm_channel[0], AudioInit->SampleRate) != HAL_OK)
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	4619      	mov	r1, r3
 8001060:	4819      	ldr	r0, [pc, #100]	; (80010c8 <BSP_AUDIO_IN_Init+0x53c>)
 8001062:	f000 fa57 	bl	8001514 <MX_DFSDM1_ClockConfig>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d003      	beq.n	8001074 <BSP_AUDIO_IN_Init+0x4e8>
      {
        ret = BSP_ERROR_CLOCK_FAILURE;
 800106c:	f06f 0308 	mvn.w	r3, #8
 8001070:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
      }

      if(ret == BSP_ERROR_NONE)
 8001074:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001078:	2b00      	cmp	r3, #0
 800107a:	f040 8235 	bne.w	80014e8 <BSP_AUDIO_IN_Init+0x95c>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
          }
        }
#else
        DFSDM_FilterMspInit(&haudio_in_dfsdm_filter[1]);
 800107e:	4813      	ldr	r0, [pc, #76]	; (80010cc <BSP_AUDIO_IN_Init+0x540>)
 8001080:	f000 ff06 	bl	8001e90 <DFSDM_FilterMspInit>
        DFSDM_ChannelMspInit(&haudio_in_dfsdm_channel[1]);
 8001084:	4812      	ldr	r0, [pc, #72]	; (80010d0 <BSP_AUDIO_IN_Init+0x544>)
 8001086:	f000 fe5f 	bl	8001d48 <DFSDM_ChannelMspInit>
#endif /* (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1) */
        if(ret == BSP_ERROR_NONE)
 800108a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800108e:	2b00      	cmp	r3, #0
 8001090:	f040 822a 	bne.w	80014e8 <BSP_AUDIO_IN_Init+0x95c>
        {
          for(i = 0; i < DFSDM_MIC_NUMBER; i ++)
 8001094:	2300      	movs	r3, #0
 8001096:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800109a:	e21e      	b.n	80014da <BSP_AUDIO_IN_Init+0x94e>
 800109c:	24000554 	.word	0x24000554
 80010a0:	58005404 	.word	0x58005404
 80010a4:	24000cb8 	.word	0x24000cb8
 80010a8:	08001d31 	.word	0x08001d31
 80010ac:	08001d1b 	.word	0x08001d1b
 80010b0:	08000b61 	.word	0x08000b61
 80010b4:	0800c058 	.word	0x0800c058
 80010b8:	0800c068 	.word	0x0800c068
 80010bc:	0800c078 	.word	0x0800c078
 80010c0:	0800c088 	.word	0x0800c088
 80010c4:	0800c098 	.word	0x0800c098
 80010c8:	24000a64 	.word	0x24000a64
 80010cc:	24000b98 	.word	0x24000b98
 80010d0:	24000a9c 	.word	0x24000a9c
          {
            dfsdm_config.FilterInstance  = FilterInstnace[i];
 80010d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80010de:	4413      	add	r3, r2
 80010e0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80010e4:	60bb      	str	r3, [r7, #8]
            dfsdm_config.ChannelInstance = ChannelInstance[i];
 80010e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80010f0:	4413      	add	r3, r2
 80010f2:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80010f6:	61bb      	str	r3, [r7, #24]
            dfsdm_config.DigitalMicPins  = DigitalMicPins[i];
 80010f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8001102:	4413      	add	r3, r2
 8001104:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8001108:	61fb      	str	r3, [r7, #28]
            dfsdm_config.DigitalMicType  = DigitalMicType[i];
 800110a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8001114:	4413      	add	r3, r2
 8001116:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 800111a:	623b      	str	r3, [r7, #32]
            dfsdm_config.Channel4Filter  = Channel4Filter[i];
 800111c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8001126:	4413      	add	r3, r2
 8001128:	f853 3c6c 	ldr.w	r3, [r3, #-108]
 800112c:	627b      	str	r3, [r7, #36]	; 0x24
            dfsdm_config.RegularTrigger  = DFSDM_FILTER_SW_TRIGGER;
 800112e:	2300      	movs	r3, #0
 8001130:	60fb      	str	r3, [r7, #12]
            /* MIC2, MIC3 and MIC4 should be synchronized to MIC1 if it's used */
            if((i >= 1U) && (i < 4U) && ((Audio_In_Ctx[Instance].Device & AUDIO_IN_DEVICE_DIGITAL_MIC1) == AUDIO_IN_DEVICE_DIGITAL_MIC1))
 8001132:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001136:	2b00      	cmp	r3, #0
 8001138:	d012      	beq.n	8001160 <BSP_AUDIO_IN_Init+0x5d4>
 800113a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800113e:	2b03      	cmp	r3, #3
 8001140:	d80e      	bhi.n	8001160 <BSP_AUDIO_IN_Init+0x5d4>
 8001142:	49a0      	ldr	r1, [pc, #640]	; (80013c4 <BSP_AUDIO_IN_Init+0x838>)
 8001144:	687a      	ldr	r2, [r7, #4]
 8001146:	4613      	mov	r3, r2
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	4413      	add	r3, r2
 800114c:	011b      	lsls	r3, r3, #4
 800114e:	440b      	add	r3, r1
 8001150:	3304      	adds	r3, #4
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f003 0310 	and.w	r3, r3, #16
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <BSP_AUDIO_IN_Init+0x5d4>
            {
              dfsdm_config.RegularTrigger = DFSDM_FILTER_SYNC_TRIGGER;
 800115c:	2301      	movs	r3, #1
 800115e:	60fb      	str	r3, [r7, #12]
            }
            dfsdm_config.SincOrder       = DFSDM_FILTER_ORDER(Audio_In_Ctx[Instance].SampleRate);
 8001160:	4998      	ldr	r1, [pc, #608]	; (80013c4 <BSP_AUDIO_IN_Init+0x838>)
 8001162:	687a      	ldr	r2, [r7, #4]
 8001164:	4613      	mov	r3, r2
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	4413      	add	r3, r2
 800116a:	011b      	lsls	r3, r3, #4
 800116c:	440b      	add	r3, r1
 800116e:	3308      	adds	r3, #8
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8001176:	d060      	beq.n	800123a <BSP_AUDIO_IN_Init+0x6ae>
 8001178:	4992      	ldr	r1, [pc, #584]	; (80013c4 <BSP_AUDIO_IN_Init+0x838>)
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	4613      	mov	r3, r2
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	4413      	add	r3, r2
 8001182:	011b      	lsls	r3, r3, #4
 8001184:	440b      	add	r3, r1
 8001186:	3308      	adds	r3, #8
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f642 3211 	movw	r2, #11025	; 0x2b11
 800118e:	4293      	cmp	r3, r2
 8001190:	d050      	beq.n	8001234 <BSP_AUDIO_IN_Init+0x6a8>
 8001192:	498c      	ldr	r1, [pc, #560]	; (80013c4 <BSP_AUDIO_IN_Init+0x838>)
 8001194:	687a      	ldr	r2, [r7, #4]
 8001196:	4613      	mov	r3, r2
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	4413      	add	r3, r2
 800119c:	011b      	lsls	r3, r3, #4
 800119e:	440b      	add	r3, r1
 80011a0:	3308      	adds	r3, #8
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80011a8:	d041      	beq.n	800122e <BSP_AUDIO_IN_Init+0x6a2>
 80011aa:	4986      	ldr	r1, [pc, #536]	; (80013c4 <BSP_AUDIO_IN_Init+0x838>)
 80011ac:	687a      	ldr	r2, [r7, #4]
 80011ae:	4613      	mov	r3, r2
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	4413      	add	r3, r2
 80011b4:	011b      	lsls	r3, r3, #4
 80011b6:	440b      	add	r3, r1
 80011b8:	3308      	adds	r3, #8
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f245 6222 	movw	r2, #22050	; 0x5622
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d031      	beq.n	8001228 <BSP_AUDIO_IN_Init+0x69c>
 80011c4:	497f      	ldr	r1, [pc, #508]	; (80013c4 <BSP_AUDIO_IN_Init+0x838>)
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	4613      	mov	r3, r2
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	4413      	add	r3, r2
 80011ce:	011b      	lsls	r3, r3, #4
 80011d0:	440b      	add	r3, r1
 80011d2:	3308      	adds	r3, #8
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80011da:	d022      	beq.n	8001222 <BSP_AUDIO_IN_Init+0x696>
 80011dc:	4979      	ldr	r1, [pc, #484]	; (80013c4 <BSP_AUDIO_IN_Init+0x838>)
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	4613      	mov	r3, r2
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	4413      	add	r3, r2
 80011e6:	011b      	lsls	r3, r3, #4
 80011e8:	440b      	add	r3, r1
 80011ea:	3308      	adds	r3, #8
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f64a 4244 	movw	r2, #44100	; 0xac44
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d012      	beq.n	800121c <BSP_AUDIO_IN_Init+0x690>
 80011f6:	4973      	ldr	r1, [pc, #460]	; (80013c4 <BSP_AUDIO_IN_Init+0x838>)
 80011f8:	687a      	ldr	r2, [r7, #4]
 80011fa:	4613      	mov	r3, r2
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	4413      	add	r3, r2
 8001200:	011b      	lsls	r3, r3, #4
 8001202:	440b      	add	r3, r1
 8001204:	3308      	adds	r3, #8
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800120c:	4293      	cmp	r3, r2
 800120e:	d102      	bne.n	8001216 <BSP_AUDIO_IN_Init+0x68a>
 8001210:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001214:	e013      	b.n	800123e <BSP_AUDIO_IN_Init+0x6b2>
 8001216:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800121a:	e010      	b.n	800123e <BSP_AUDIO_IN_Init+0x6b2>
 800121c:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8001220:	e00d      	b.n	800123e <BSP_AUDIO_IN_Init+0x6b2>
 8001222:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001226:	e00a      	b.n	800123e <BSP_AUDIO_IN_Init+0x6b2>
 8001228:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800122c:	e007      	b.n	800123e <BSP_AUDIO_IN_Init+0x6b2>
 800122e:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8001232:	e004      	b.n	800123e <BSP_AUDIO_IN_Init+0x6b2>
 8001234:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8001238:	e001      	b.n	800123e <BSP_AUDIO_IN_Init+0x6b2>
 800123a:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800123e:	613b      	str	r3, [r7, #16]
            dfsdm_config.Oversampling    = DFSDM_OVER_SAMPLING(Audio_In_Ctx[Instance].SampleRate);
 8001240:	4960      	ldr	r1, [pc, #384]	; (80013c4 <BSP_AUDIO_IN_Init+0x838>)
 8001242:	687a      	ldr	r2, [r7, #4]
 8001244:	4613      	mov	r3, r2
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	4413      	add	r3, r2
 800124a:	011b      	lsls	r3, r3, #4
 800124c:	440b      	add	r3, r1
 800124e:	3308      	adds	r3, #8
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8001256:	d05a      	beq.n	800130e <BSP_AUDIO_IN_Init+0x782>
 8001258:	495a      	ldr	r1, [pc, #360]	; (80013c4 <BSP_AUDIO_IN_Init+0x838>)
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	4613      	mov	r3, r2
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	4413      	add	r3, r2
 8001262:	011b      	lsls	r3, r3, #4
 8001264:	440b      	add	r3, r1
 8001266:	3308      	adds	r3, #8
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f642 3211 	movw	r2, #11025	; 0x2b11
 800126e:	4293      	cmp	r3, r2
 8001270:	d04a      	beq.n	8001308 <BSP_AUDIO_IN_Init+0x77c>
 8001272:	4954      	ldr	r1, [pc, #336]	; (80013c4 <BSP_AUDIO_IN_Init+0x838>)
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	4613      	mov	r3, r2
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	4413      	add	r3, r2
 800127c:	011b      	lsls	r3, r3, #4
 800127e:	440b      	add	r3, r1
 8001280:	3308      	adds	r3, #8
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8001288:	d03c      	beq.n	8001304 <BSP_AUDIO_IN_Init+0x778>
 800128a:	494e      	ldr	r1, [pc, #312]	; (80013c4 <BSP_AUDIO_IN_Init+0x838>)
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	4613      	mov	r3, r2
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	4413      	add	r3, r2
 8001294:	011b      	lsls	r3, r3, #4
 8001296:	440b      	add	r3, r1
 8001298:	3308      	adds	r3, #8
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f245 6222 	movw	r2, #22050	; 0x5622
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d02d      	beq.n	8001300 <BSP_AUDIO_IN_Init+0x774>
 80012a4:	4947      	ldr	r1, [pc, #284]	; (80013c4 <BSP_AUDIO_IN_Init+0x838>)
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	4613      	mov	r3, r2
 80012aa:	005b      	lsls	r3, r3, #1
 80012ac:	4413      	add	r3, r2
 80012ae:	011b      	lsls	r3, r3, #4
 80012b0:	440b      	add	r3, r1
 80012b2:	3308      	adds	r3, #8
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80012ba:	d01f      	beq.n	80012fc <BSP_AUDIO_IN_Init+0x770>
 80012bc:	4941      	ldr	r1, [pc, #260]	; (80013c4 <BSP_AUDIO_IN_Init+0x838>)
 80012be:	687a      	ldr	r2, [r7, #4]
 80012c0:	4613      	mov	r3, r2
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	4413      	add	r3, r2
 80012c6:	011b      	lsls	r3, r3, #4
 80012c8:	440b      	add	r3, r1
 80012ca:	3308      	adds	r3, #8
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f64a 4244 	movw	r2, #44100	; 0xac44
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d010      	beq.n	80012f8 <BSP_AUDIO_IN_Init+0x76c>
 80012d6:	493b      	ldr	r1, [pc, #236]	; (80013c4 <BSP_AUDIO_IN_Init+0x838>)
 80012d8:	687a      	ldr	r2, [r7, #4]
 80012da:	4613      	mov	r3, r2
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	4413      	add	r3, r2
 80012e0:	011b      	lsls	r3, r3, #4
 80012e2:	440b      	add	r3, r1
 80012e4:	3308      	adds	r3, #8
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d101      	bne.n	80012f4 <BSP_AUDIO_IN_Init+0x768>
 80012f0:	2320      	movs	r3, #32
 80012f2:	e00e      	b.n	8001312 <BSP_AUDIO_IN_Init+0x786>
 80012f4:	2310      	movs	r3, #16
 80012f6:	e00c      	b.n	8001312 <BSP_AUDIO_IN_Init+0x786>
 80012f8:	2340      	movs	r3, #64	; 0x40
 80012fa:	e00a      	b.n	8001312 <BSP_AUDIO_IN_Init+0x786>
 80012fc:	2340      	movs	r3, #64	; 0x40
 80012fe:	e008      	b.n	8001312 <BSP_AUDIO_IN_Init+0x786>
 8001300:	2380      	movs	r3, #128	; 0x80
 8001302:	e006      	b.n	8001312 <BSP_AUDIO_IN_Init+0x786>
 8001304:	2380      	movs	r3, #128	; 0x80
 8001306:	e004      	b.n	8001312 <BSP_AUDIO_IN_Init+0x786>
 8001308:	f44f 7380 	mov.w	r3, #256	; 0x100
 800130c:	e001      	b.n	8001312 <BSP_AUDIO_IN_Init+0x786>
 800130e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001312:	617b      	str	r3, [r7, #20]
            dfsdm_config.ClockDivider    = DFSDM_CLOCK_DIVIDER(Audio_In_Ctx[Instance].SampleRate);
 8001314:	492b      	ldr	r1, [pc, #172]	; (80013c4 <BSP_AUDIO_IN_Init+0x838>)
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	4613      	mov	r3, r2
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	4413      	add	r3, r2
 800131e:	011b      	lsls	r3, r3, #4
 8001320:	440b      	add	r3, r1
 8001322:	3308      	adds	r3, #8
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800132a:	d04d      	beq.n	80013c8 <BSP_AUDIO_IN_Init+0x83c>
 800132c:	4925      	ldr	r1, [pc, #148]	; (80013c4 <BSP_AUDIO_IN_Init+0x838>)
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	4613      	mov	r3, r2
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	4413      	add	r3, r2
 8001336:	011b      	lsls	r3, r3, #4
 8001338:	440b      	add	r3, r1
 800133a:	3308      	adds	r3, #8
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f642 3211 	movw	r2, #11025	; 0x2b11
 8001342:	4293      	cmp	r3, r2
 8001344:	d03b      	beq.n	80013be <BSP_AUDIO_IN_Init+0x832>
 8001346:	491f      	ldr	r1, [pc, #124]	; (80013c4 <BSP_AUDIO_IN_Init+0x838>)
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	4613      	mov	r3, r2
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	4413      	add	r3, r2
 8001350:	011b      	lsls	r3, r3, #4
 8001352:	440b      	add	r3, r1
 8001354:	3308      	adds	r3, #8
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800135c:	d02d      	beq.n	80013ba <BSP_AUDIO_IN_Init+0x82e>
 800135e:	4919      	ldr	r1, [pc, #100]	; (80013c4 <BSP_AUDIO_IN_Init+0x838>)
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	4613      	mov	r3, r2
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	4413      	add	r3, r2
 8001368:	011b      	lsls	r3, r3, #4
 800136a:	440b      	add	r3, r1
 800136c:	3308      	adds	r3, #8
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f245 6222 	movw	r2, #22050	; 0x5622
 8001374:	4293      	cmp	r3, r2
 8001376:	d01e      	beq.n	80013b6 <BSP_AUDIO_IN_Init+0x82a>
 8001378:	4912      	ldr	r1, [pc, #72]	; (80013c4 <BSP_AUDIO_IN_Init+0x838>)
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	4613      	mov	r3, r2
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	4413      	add	r3, r2
 8001382:	011b      	lsls	r3, r3, #4
 8001384:	440b      	add	r3, r1
 8001386:	3308      	adds	r3, #8
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 800138e:	d010      	beq.n	80013b2 <BSP_AUDIO_IN_Init+0x826>
 8001390:	490c      	ldr	r1, [pc, #48]	; (80013c4 <BSP_AUDIO_IN_Init+0x838>)
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	4613      	mov	r3, r2
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	4413      	add	r3, r2
 800139a:	011b      	lsls	r3, r3, #4
 800139c:	440b      	add	r3, r1
 800139e:	3308      	adds	r3, #8
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f64a 4244 	movw	r2, #44100	; 0xac44
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d101      	bne.n	80013ae <BSP_AUDIO_IN_Init+0x822>
 80013aa:	2304      	movs	r3, #4
 80013ac:	e00d      	b.n	80013ca <BSP_AUDIO_IN_Init+0x83e>
 80013ae:	2320      	movs	r3, #32
 80013b0:	e00b      	b.n	80013ca <BSP_AUDIO_IN_Init+0x83e>
 80013b2:	2318      	movs	r3, #24
 80013b4:	e009      	b.n	80013ca <BSP_AUDIO_IN_Init+0x83e>
 80013b6:	2304      	movs	r3, #4
 80013b8:	e007      	b.n	80013ca <BSP_AUDIO_IN_Init+0x83e>
 80013ba:	2318      	movs	r3, #24
 80013bc:	e005      	b.n	80013ca <BSP_AUDIO_IN_Init+0x83e>
 80013be:	2304      	movs	r3, #4
 80013c0:	e003      	b.n	80013ca <BSP_AUDIO_IN_Init+0x83e>
 80013c2:	bf00      	nop
 80013c4:	24000cb8 	.word	0x24000cb8
 80013c8:	2318      	movs	r3, #24
 80013ca:	62bb      	str	r3, [r7, #40]	; 0x28
            dfsdm_config.RightBitShift   = DFSDM_MIC_BIT_SHIFT(Audio_In_Ctx[Instance].SampleRate);
 80013cc:	494e      	ldr	r1, [pc, #312]	; (8001508 <BSP_AUDIO_IN_Init+0x97c>)
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	4613      	mov	r3, r2
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	4413      	add	r3, r2
 80013d6:	011b      	lsls	r3, r3, #4
 80013d8:	440b      	add	r3, r1
 80013da:	3308      	adds	r3, #8
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80013e2:	d04a      	beq.n	800147a <BSP_AUDIO_IN_Init+0x8ee>
 80013e4:	4948      	ldr	r1, [pc, #288]	; (8001508 <BSP_AUDIO_IN_Init+0x97c>)
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	4613      	mov	r3, r2
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	4413      	add	r3, r2
 80013ee:	011b      	lsls	r3, r3, #4
 80013f0:	440b      	add	r3, r1
 80013f2:	3308      	adds	r3, #8
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f642 3211 	movw	r2, #11025	; 0x2b11
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d03b      	beq.n	8001476 <BSP_AUDIO_IN_Init+0x8ea>
 80013fe:	4942      	ldr	r1, [pc, #264]	; (8001508 <BSP_AUDIO_IN_Init+0x97c>)
 8001400:	687a      	ldr	r2, [r7, #4]
 8001402:	4613      	mov	r3, r2
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	4413      	add	r3, r2
 8001408:	011b      	lsls	r3, r3, #4
 800140a:	440b      	add	r3, r1
 800140c:	3308      	adds	r3, #8
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8001414:	d02d      	beq.n	8001472 <BSP_AUDIO_IN_Init+0x8e6>
 8001416:	493c      	ldr	r1, [pc, #240]	; (8001508 <BSP_AUDIO_IN_Init+0x97c>)
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	4613      	mov	r3, r2
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	4413      	add	r3, r2
 8001420:	011b      	lsls	r3, r3, #4
 8001422:	440b      	add	r3, r1
 8001424:	3308      	adds	r3, #8
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f245 6222 	movw	r2, #22050	; 0x5622
 800142c:	4293      	cmp	r3, r2
 800142e:	d01e      	beq.n	800146e <BSP_AUDIO_IN_Init+0x8e2>
 8001430:	4935      	ldr	r1, [pc, #212]	; (8001508 <BSP_AUDIO_IN_Init+0x97c>)
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	4613      	mov	r3, r2
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	4413      	add	r3, r2
 800143a:	011b      	lsls	r3, r3, #4
 800143c:	440b      	add	r3, r1
 800143e:	3308      	adds	r3, #8
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8001446:	d010      	beq.n	800146a <BSP_AUDIO_IN_Init+0x8de>
 8001448:	492f      	ldr	r1, [pc, #188]	; (8001508 <BSP_AUDIO_IN_Init+0x97c>)
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	4613      	mov	r3, r2
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	4413      	add	r3, r2
 8001452:	011b      	lsls	r3, r3, #4
 8001454:	440b      	add	r3, r1
 8001456:	3308      	adds	r3, #8
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f64a 4244 	movw	r2, #44100	; 0xac44
 800145e:	4293      	cmp	r3, r2
 8001460:	d101      	bne.n	8001466 <BSP_AUDIO_IN_Init+0x8da>
 8001462:	2300      	movs	r3, #0
 8001464:	e00a      	b.n	800147c <BSP_AUDIO_IN_Init+0x8f0>
 8001466:	2302      	movs	r3, #2
 8001468:	e008      	b.n	800147c <BSP_AUDIO_IN_Init+0x8f0>
 800146a:	2306      	movs	r3, #6
 800146c:	e006      	b.n	800147c <BSP_AUDIO_IN_Init+0x8f0>
 800146e:	2303      	movs	r3, #3
 8001470:	e004      	b.n	800147c <BSP_AUDIO_IN_Init+0x8f0>
 8001472:	2303      	movs	r3, #3
 8001474:	e002      	b.n	800147c <BSP_AUDIO_IN_Init+0x8f0>
 8001476:	2306      	movs	r3, #6
 8001478:	e000      	b.n	800147c <BSP_AUDIO_IN_Init+0x8f0>
 800147a:	2305      	movs	r3, #5
 800147c:	62fb      	str	r3, [r7, #44]	; 0x2c

            if(((AudioInit->Device >> i) & AUDIO_IN_DEVICE_DIGITAL_MIC1) == AUDIO_IN_DEVICE_DIGITAL_MIC1)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001486:	fa22 f303 	lsr.w	r3, r2, r3
 800148a:	f003 0310 	and.w	r3, r3, #16
 800148e:	2b00      	cmp	r3, #0
 8001490:	d01a      	beq.n	80014c8 <BSP_AUDIO_IN_Init+0x93c>
            {
              /* Default configuration of DFSDM filters and channels */
              if(MX_DFSDM1_Init(&haudio_in_dfsdm_filter[i], &haudio_in_dfsdm_channel[i], &dfsdm_config) != HAL_OK)
 8001492:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001496:	2254      	movs	r2, #84	; 0x54
 8001498:	fb02 f303 	mul.w	r3, r2, r3
 800149c:	4a1b      	ldr	r2, [pc, #108]	; (800150c <BSP_AUDIO_IN_Init+0x980>)
 800149e:	1898      	adds	r0, r3, r2
 80014a0:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80014a4:	4613      	mov	r3, r2
 80014a6:	00db      	lsls	r3, r3, #3
 80014a8:	1a9b      	subs	r3, r3, r2
 80014aa:	00db      	lsls	r3, r3, #3
 80014ac:	4a18      	ldr	r2, [pc, #96]	; (8001510 <BSP_AUDIO_IN_Init+0x984>)
 80014ae:	4413      	add	r3, r2
 80014b0:	f107 0208 	add.w	r2, r7, #8
 80014b4:	4619      	mov	r1, r3
 80014b6:	f000 f89a 	bl	80015ee <MX_DFSDM1_Init>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d003      	beq.n	80014c8 <BSP_AUDIO_IN_Init+0x93c>
              {
                /* Return BSP_ERROR_PERIPH_FAILURE when operations are not correctly done */
                ret = BSP_ERROR_PERIPH_FAILURE;
 80014c0:	f06f 0303 	mvn.w	r3, #3
 80014c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                  ret = BSP_ERROR_PERIPH_FAILURE;
                }
              }
#endif /* (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1) */
            }
            if(ret != BSP_ERROR_NONE)
 80014c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d10a      	bne.n	80014e6 <BSP_AUDIO_IN_Init+0x95a>
          for(i = 0; i < DFSDM_MIC_NUMBER; i ++)
 80014d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80014d4:	3301      	adds	r3, #1
 80014d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80014da:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80014de:	2b03      	cmp	r3, #3
 80014e0:	f67f adf8 	bls.w	80010d4 <BSP_AUDIO_IN_Init+0x548>
 80014e4:	e000      	b.n	80014e8 <BSP_AUDIO_IN_Init+0x95c>
            {
              break;
 80014e6:	bf00      	nop
        }
      }
    }

    /* Update BSP AUDIO IN state */
    Audio_In_Ctx[Instance].State = AUDIO_IN_STATE_STOP;
 80014e8:	4907      	ldr	r1, [pc, #28]	; (8001508 <BSP_AUDIO_IN_Init+0x97c>)
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	4613      	mov	r3, r2
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	4413      	add	r3, r2
 80014f2:	011b      	lsls	r3, r3, #4
 80014f4:	440b      	add	r3, r1
 80014f6:	3324      	adds	r3, #36	; 0x24
 80014f8:	2202      	movs	r2, #2
 80014fa:	601a      	str	r2, [r3, #0]
  }

  /* Return BSP status */
  return ret;
 80014fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
}
 8001500:	4618      	mov	r0, r3
 8001502:	37a4      	adds	r7, #164	; 0xa4
 8001504:	46bd      	mov	sp, r7
 8001506:	bd90      	pop	{r4, r7, pc}
 8001508:	24000cb8 	.word	0x24000cb8
 800150c:	24000b44 	.word	0x24000b44
 8001510:	24000a64 	.word	0x24000a64

08001514 <MX_DFSDM1_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_IN_Init()
  *         Being __weak it can be overwritten by the application
  * @retval HAL_status
  */
__weak HAL_StatusTypeDef MX_DFSDM1_ClockConfig(DFSDM_Channel_HandleTypeDef *hDfsdmChannel, uint32_t SampleRate)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b0b0      	sub	sp, #192	; 0xc0
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hDfsdmChannel);

  HAL_StatusTypeDef ret = HAL_OK;
 800151e:	2300      	movs	r3, #0
 8001520:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;

  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 8001524:	f107 0308 	add.w	r3, r7, #8
 8001528:	4618      	mov	r0, r3
 800152a:	f006 f891 	bl	8007650 <HAL_RCCEx_GetPeriphCLKConfig>

  /* Configure the PLL2 according to the requested audio frequency if not already done by other instances */
  if ((Audio_Out_Ctx[0].State == AUDIO_OUT_STATE_RESET) && (Audio_In_Ctx[0].State == AUDIO_IN_STATE_RESET))
 800152e:	4b0a      	ldr	r3, [pc, #40]	; (8001558 <MX_DFSDM1_ClockConfig+0x44>)
 8001530:	69db      	ldr	r3, [r3, #28]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d10a      	bne.n	800154c <MX_DFSDM1_ClockConfig+0x38>
 8001536:	4b09      	ldr	r3, [pc, #36]	; (800155c <MX_DFSDM1_ClockConfig+0x48>)
 8001538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800153a:	2b00      	cmp	r3, #0
 800153c:	d106      	bne.n	800154c <MX_DFSDM1_ClockConfig+0x38>
  {
    ret = MX_SAI1_ClockConfig(&haudio_in_sai[0], SampleRate);
 800153e:	6839      	ldr	r1, [r7, #0]
 8001540:	4807      	ldr	r0, [pc, #28]	; (8001560 <MX_DFSDM1_ClockConfig+0x4c>)
 8001542:	f7ff f80f 	bl	8000564 <MX_SAI1_ClockConfig>
 8001546:	4603      	mov	r3, r0
 8001548:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
  }

  return ret;
 800154c:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
}
 8001550:	4618      	mov	r0, r3
 8001552:	37c0      	adds	r7, #192	; 0xc0
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	24000c94 	.word	0x24000c94
 800155c:	24000cb8 	.word	0x24000cb8
 8001560:	24000554 	.word	0x24000554

08001564 <MX_SAI4_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SAI4_ClockConfig(SAI_HandleTypeDef *hsai, uint32_t SampleRate)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b0b0      	sub	sp, #192	; 0xc0
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsai);

  HAL_StatusTypeDef ret = HAL_OK;
 800156e:	2300      	movs	r3, #0
 8001570:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;
  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 8001574:	f107 0308 	add.w	r3, r7, #8
 8001578:	4618      	mov	r0, r3
 800157a:	f006 f869 	bl	8007650 <HAL_RCCEx_GetPeriphCLKConfig>

  /* Set the PLL configuration according to the audio frequency */
  if((SampleRate == AUDIO_FREQUENCY_11K) || (SampleRate == AUDIO_FREQUENCY_22K) || (SampleRate == AUDIO_FREQUENCY_44K))
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	f642 3211 	movw	r2, #11025	; 0x2b11
 8001584:	4293      	cmp	r3, r2
 8001586:	d009      	beq.n	800159c <MX_SAI4_ClockConfig+0x38>
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	f245 6222 	movw	r2, #22050	; 0x5622
 800158e:	4293      	cmp	r3, r2
 8001590:	d004      	beq.n	800159c <MX_SAI4_ClockConfig+0x38>
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	f64a 4244 	movw	r2, #44100	; 0xac44
 8001598:	4293      	cmp	r3, r2
 800159a:	d105      	bne.n	80015a8 <MX_SAI4_ClockConfig+0x44>
  {
    rcc_ex_clk_init_struct.PLL2.PLL2P = 24;
 800159c:	2318      	movs	r3, #24
 800159e:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.PLL2.PLL2N = 271;
 80015a0:	f240 130f 	movw	r3, #271	; 0x10f
 80015a4:	613b      	str	r3, [r7, #16]
 80015a6:	e004      	b.n	80015b2 <MX_SAI4_ClockConfig+0x4e>
  }
  else /* AUDIO_FREQUENCY_8K, AUDIO_FREQUENCY_16K, AUDIO_FREQUENCY_32K, AUDIO_FREQUENCY_48K, AUDIO_FREQUENCY_96K */
  {
    rcc_ex_clk_init_struct.PLL2.PLL2P = 7;
 80015a8:	2307      	movs	r3, #7
 80015aa:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.PLL2.PLL2N = 344;
 80015ac:	f44f 73ac 	mov.w	r3, #344	; 0x158
 80015b0:	613b      	str	r3, [r7, #16]
  }

  /* SAI clock config */
  rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI4A;
 80015b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015b6:	60bb      	str	r3, [r7, #8]
  rcc_ex_clk_init_struct.Sai4AClockSelection = RCC_SAI4ACLKSOURCE_PLL2;
 80015b8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80015bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  rcc_ex_clk_init_struct.PLL2.PLL2Q = 1;
 80015c0:	2301      	movs	r3, #1
 80015c2:	61bb      	str	r3, [r7, #24]
  rcc_ex_clk_init_struct.PLL2.PLL2R = 1;
 80015c4:	2301      	movs	r3, #1
 80015c6:	61fb      	str	r3, [r7, #28]
  rcc_ex_clk_init_struct.PLL2.PLL2M = 25;
 80015c8:	2319      	movs	r3, #25
 80015ca:	60fb      	str	r3, [r7, #12]
  if(HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct) != HAL_OK)
 80015cc:	f107 0308 	add.w	r3, r7, #8
 80015d0:	4618      	mov	r0, r3
 80015d2:	f005 f943 	bl	800685c <HAL_RCCEx_PeriphCLKConfig>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d002      	beq.n	80015e2 <MX_SAI4_ClockConfig+0x7e>
  {
    ret = HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
  }

  return ret;
 80015e2:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	37c0      	adds	r7, #192	; 0xc0
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <MX_DFSDM1_Init>:
  *           1MHZ < CLK(micro) < 3.2MHZ (TYP 2.4MHZ for MP34DT01TR)
  *         - Oversampling = CLK(input DFSDM)/(Clock_Divider * AudioFreq)
  * @retval HAL_status
  */
__weak HAL_StatusTypeDef MX_DFSDM1_Init(DFSDM_Filter_HandleTypeDef *hDfsdmFilter, DFSDM_Channel_HandleTypeDef *hDfsdmChannel, MX_DFSDM_Config *MXConfig)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b084      	sub	sp, #16
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	60f8      	str	r0, [r7, #12]
 80015f6:	60b9      	str	r1, [r7, #8]
 80015f8:	607a      	str	r2, [r7, #4]
  /* MIC filters  initialization */
  hDfsdmFilter->Instance                          = MXConfig->FilterInstance;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	601a      	str	r2, [r3, #0]
  hDfsdmFilter->Init.RegularParam.Trigger         = MXConfig->RegularTrigger;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685a      	ldr	r2, [r3, #4]
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	605a      	str	r2, [r3, #4]
  hDfsdmFilter->Init.RegularParam.FastMode        = ENABLE;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	2201      	movs	r2, #1
 800160e:	721a      	strb	r2, [r3, #8]
  hDfsdmFilter->Init.RegularParam.DmaMode         = ENABLE;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	2201      	movs	r2, #1
 8001614:	725a      	strb	r2, [r3, #9]
  hDfsdmFilter->Init.InjectedParam.Trigger        = DFSDM_FILTER_SW_TRIGGER;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	2200      	movs	r2, #0
 800161a:	60da      	str	r2, [r3, #12]
  hDfsdmFilter->Init.InjectedParam.ScanMode       = DISABLE;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2200      	movs	r2, #0
 8001620:	741a      	strb	r2, [r3, #16]
  hDfsdmFilter->Init.InjectedParam.DmaMode        = DISABLE;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	2200      	movs	r2, #0
 8001626:	745a      	strb	r2, [r3, #17]
  hDfsdmFilter->Init.InjectedParam.ExtTrigger     = DFSDM_FILTER_EXT_TRIG_TIM8_TRGO;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800162e:	615a      	str	r2, [r3, #20]
  hDfsdmFilter->Init.InjectedParam.ExtTriggerEdge = DFSDM_FILTER_EXT_TRIG_BOTH_EDGES;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8001636:	619a      	str	r2, [r3, #24]
  hDfsdmFilter->Init.FilterParam.SincOrder        = MXConfig->SincOrder;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	689a      	ldr	r2, [r3, #8]
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	61da      	str	r2, [r3, #28]
  hDfsdmFilter->Init.FilterParam.Oversampling     = MXConfig->Oversampling;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	68da      	ldr	r2, [r3, #12]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	621a      	str	r2, [r3, #32]
  hDfsdmFilter->Init.FilterParam.IntOversampling  = 1;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	2201      	movs	r2, #1
 800164c:	625a      	str	r2, [r3, #36]	; 0x24

  if(HAL_DFSDM_FilterInit(hDfsdmFilter) != HAL_OK)
 800164e:	68f8      	ldr	r0, [r7, #12]
 8001650:	f001 f986 	bl	8002960 <HAL_DFSDM_FilterInit>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_DFSDM1_Init+0x70>
  {
    return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e042      	b.n	80016e4 <MX_DFSDM1_Init+0xf6>
  }

  /* MIC channels initialization */
  hDfsdmChannel->Instance                      = MXConfig->ChannelInstance;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	691a      	ldr	r2, [r3, #16]
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	601a      	str	r2, [r3, #0]
  hDfsdmChannel->Init.OutputClock.Activation   = ENABLE;
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	2201      	movs	r2, #1
 800166a:	711a      	strb	r2, [r3, #4]
  hDfsdmChannel->Init.OutputClock.Selection    = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001672:	609a      	str	r2, [r3, #8]
  hDfsdmChannel->Init.OutputClock.Divider      = MXConfig->ClockDivider;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6a1a      	ldr	r2, [r3, #32]
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	60da      	str	r2, [r3, #12]
  hDfsdmChannel->Init.Input.Multiplexer        = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	2200      	movs	r2, #0
 8001680:	611a      	str	r2, [r3, #16]
  hDfsdmChannel->Init.Input.DataPacking        = DFSDM_CHANNEL_STANDARD_MODE;
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	2200      	movs	r2, #0
 8001686:	615a      	str	r2, [r3, #20]
  hDfsdmChannel->Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	2204      	movs	r2, #4
 800168c:	621a      	str	r2, [r3, #32]
  hDfsdmChannel->Init.Awd.FilterOrder          = DFSDM_CHANNEL_SINC1_ORDER;
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001694:	625a      	str	r2, [r3, #36]	; 0x24
  hDfsdmChannel->Init.Awd.Oversampling         = 10;
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	220a      	movs	r2, #10
 800169a:	629a      	str	r2, [r3, #40]	; 0x28
  hDfsdmChannel->Init.Offset                   = 0;
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	2200      	movs	r2, #0
 80016a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hDfsdmChannel->Init.RightBitShift            = MXConfig->RightBitShift;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	631a      	str	r2, [r3, #48]	; 0x30
  hDfsdmChannel->Init.Input.Pins               = MXConfig->DigitalMicPins;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	695a      	ldr	r2, [r3, #20]
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	619a      	str	r2, [r3, #24]
  hDfsdmChannel->Init.SerialInterface.Type     = MXConfig->DigitalMicType;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	699a      	ldr	r2, [r3, #24]
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	61da      	str	r2, [r3, #28]

  if(HAL_OK != HAL_DFSDM_ChannelInit(hDfsdmChannel))
 80016ba:	68b8      	ldr	r0, [r7, #8]
 80016bc:	f001 f888 	bl	80027d0 <HAL_DFSDM_ChannelInit>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_DFSDM1_Init+0xdc>
  {
    return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e00c      	b.n	80016e4 <MX_DFSDM1_Init+0xf6>
  }

  /* Configure injected channel */
  if(HAL_DFSDM_FilterConfigRegChannel(hDfsdmFilter, MXConfig->Channel4Filter, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	69db      	ldr	r3, [r3, #28]
 80016ce:	2201      	movs	r2, #1
 80016d0:	4619      	mov	r1, r3
 80016d2:	68f8      	ldr	r0, [r7, #12]
 80016d4:	f001 fa2a 	bl	8002b2c <HAL_DFSDM_FilterConfigRegChannel>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_DFSDM1_Init+0xf4>
  {
    return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e000      	b.n	80016e4 <MX_DFSDM1_Init+0xf6>
  }

  return HAL_OK;
 80016e2:	2300      	movs	r3, #0
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3710      	adds	r7, #16
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}

080016ec <MX_SAI1_Block_A_Init>:
  * @param  MXConfig SAI configuration structure
  * @note   Being __weak it can be overwritten by the application
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SAI1_Block_A_Init(SAI_HandleTypeDef* hsai, MX_SAI_Config *MXConfig)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80016f6:	2300      	movs	r3, #0
 80016f8:	73fb      	strb	r3, [r7, #15]

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(hsai);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001708:	601a      	str	r2, [r3, #0]

  /* Configure SAI1_Block_B */
  hsai->Init.AudioFrequency         = MXConfig->AudioFrequency;
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	621a      	str	r2, [r3, #32]
  hsai->Init.MonoStereoMode         = MXConfig->MonoStereoMode;
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	68da      	ldr	r2, [r3, #12]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai->Init.AudioMode              = MXConfig->AudioMode;
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685a      	ldr	r2, [r3, #4]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	605a      	str	r2, [r3, #4]
  hsai->Init.NoDivider              = SAI_MASTERDIVIDER_ENABLE;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2200      	movs	r2, #0
 8001726:	619a      	str	r2, [r3, #24]
  hsai->Init.Protocol               = SAI_FREE_PROTOCOL;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2200      	movs	r2, #0
 800172c:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.DataSize               = MXConfig->DataSize;
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	689a      	ldr	r2, [r3, #8]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->Init.FirstBit               = SAI_FIRSTBIT_MSB;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2200      	movs	r2, #0
 800173a:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->Init.ClockStrobing          = MXConfig->ClockStrobing;
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	691a      	ldr	r2, [r3, #16]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	651a      	str	r2, [r3, #80]	; 0x50
  hsai->Init.Synchro                = MXConfig->Synchro;
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	695a      	ldr	r2, [r3, #20]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	609a      	str	r2, [r3, #8]
  hsai->Init.OutputDrive            = MXConfig->OutputDrive;
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	699a      	ldr	r2, [r3, #24]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	615a      	str	r2, [r3, #20]
  hsai->Init.FIFOThreshold          = SAI_FIFOTHRESHOLD_1QF;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2201      	movs	r2, #1
 8001758:	61da      	str	r2, [r3, #28]
  hsai->Init.SynchroExt             = MXConfig->SynchroExt;
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	69da      	ldr	r2, [r3, #28]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	60da      	str	r2, [r3, #12]
  hsai->Init.CompandingMode         = SAI_NOCOMPANDING;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2200      	movs	r2, #0
 8001766:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.TriState               = SAI_OUTPUT_RELEASED;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2210      	movs	r2, #16
 800176c:	635a      	str	r2, [r3, #52]	; 0x34
  hsai->Init.Mckdiv                 = 0;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2200      	movs	r2, #0
 8001772:	625a      	str	r2, [r3, #36]	; 0x24
  hsai->Init.MckOutput              = SAI_MCK_OUTPUT_ENABLE;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800177a:	611a      	str	r2, [r3, #16]
  hsai->Init.MckOverSampling        = SAI_MCK_OVERSAMPLING_DISABLE;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2200      	movs	r2, #0
 8001780:	629a      	str	r2, [r3, #40]	; 0x28
  hsai->Init.PdmInit.Activation     = DISABLE;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2200      	movs	r2, #0
 8001786:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Configure SAI_Block_x Frame */
  hsai->FrameInit.FrameLength       = MXConfig->FrameLength;
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	6a1a      	ldr	r2, [r3, #32]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->FrameInit.ActiveFrameLength = MXConfig->ActiveFrameLength;
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->FrameInit.FSDefinition      = SAI_FS_CHANNEL_IDENTIFICATION;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80017a0:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity        = SAI_FS_ACTIVE_LOW;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset          = SAI_FS_BEFOREFIRSTBIT;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80017ae:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure SAI Block_x Slot */
  hsai->SlotInit.FirstBitOffset     = 0;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2200      	movs	r2, #0
 80017b4:	669a      	str	r2, [r3, #104]	; 0x68
  if ((MXConfig->DataSize == AUDIO_RESOLUTION_24B) || (MXConfig->DataSize == AUDIO_RESOLUTION_32B))
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	2b18      	cmp	r3, #24
 80017bc:	d003      	beq.n	80017c6 <MX_SAI1_Block_A_Init+0xda>
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	2b20      	cmp	r3, #32
 80017c4:	d103      	bne.n	80017ce <MX_SAI1_Block_A_Init+0xe2>
  {
    hsai->SlotInit.SlotSize         = SAI_SLOTSIZE_32B;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2280      	movs	r2, #128	; 0x80
 80017ca:	66da      	str	r2, [r3, #108]	; 0x6c
 80017cc:	e002      	b.n	80017d4 <MX_SAI1_Block_A_Init+0xe8>
  }
  else
  {
    hsai->SlotInit.SlotSize         = SAI_SLOTSIZE_16B;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2240      	movs	r2, #64	; 0x40
 80017d2:	66da      	str	r2, [r3, #108]	; 0x6c
  }
  hsai->SlotInit.SlotNumber         = 2;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2202      	movs	r2, #2
 80017d8:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive        = MXConfig->SlotActive;
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	675a      	str	r2, [r3, #116]	; 0x74

  if(HAL_SAI_Init(hsai) != HAL_OK)
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f007 fa1a 	bl	8008c1c <HAL_SAI_Init>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <MX_SAI1_Block_A_Init+0x106>
  {
    ret = HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80017f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3710      	adds	r7, #16
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}

080017fc <MX_SAI4_Block_A_Init>:
  * @param  MXConfig SAI configuration structure
  * @note   Being __weak it can be overwritten by the application
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SAI4_Block_A_Init(SAI_HandleTypeDef* hsai, MX_SAI_Config *MXConfig)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8001806:	2300      	movs	r3, #0
 8001808:	73fb      	strb	r3, [r7, #15]

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(hsai);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001818:	601a      	str	r2, [r3, #0]

  /* Configure SAI4_Block_A */
  hsai->Init.AudioFrequency         = MXConfig->AudioFrequency;
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	621a      	str	r2, [r3, #32]
  hsai->Init.MonoStereoMode         = MXConfig->MonoStereoMode;
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	68da      	ldr	r2, [r3, #12]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai->Init.AudioMode              = MXConfig->AudioMode;
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685a      	ldr	r2, [r3, #4]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	605a      	str	r2, [r3, #4]
  hsai->Init.NoDivider              = SAI_MASTERDIVIDER_DISABLE;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001838:	619a      	str	r2, [r3, #24]
  hsai->Init.Protocol               = SAI_FREE_PROTOCOL;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2200      	movs	r2, #0
 800183e:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.DataSize               = MXConfig->DataSize;
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	689a      	ldr	r2, [r3, #8]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->Init.FirstBit               = SAI_FIRSTBIT_LSB;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800184e:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->Init.ClockStrobing          = MXConfig->ClockStrobing;
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	691a      	ldr	r2, [r3, #16]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	651a      	str	r2, [r3, #80]	; 0x50
  hsai->Init.Synchro                = MXConfig->Synchro;
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	695a      	ldr	r2, [r3, #20]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	609a      	str	r2, [r3, #8]
  hsai->Init.OutputDrive            = MXConfig->OutputDrive;
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	699a      	ldr	r2, [r3, #24]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	615a      	str	r2, [r3, #20]
  hsai->Init.FIFOThreshold          = SAI_FIFOTHRESHOLD_1QF;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2201      	movs	r2, #1
 800186c:	61da      	str	r2, [r3, #28]
  hsai->Init.SynchroExt             = MXConfig->SynchroExt;
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	69da      	ldr	r2, [r3, #28]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	60da      	str	r2, [r3, #12]
  hsai->Init.CompandingMode         = SAI_NOCOMPANDING;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2200      	movs	r2, #0
 800187a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.TriState               = SAI_OUTPUT_RELEASED;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2210      	movs	r2, #16
 8001880:	635a      	str	r2, [r3, #52]	; 0x34
  hsai->Init.Mckdiv                 = 0;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2200      	movs	r2, #0
 8001886:	625a      	str	r2, [r3, #36]	; 0x24
  hsai->Init.PdmInit.Activation     = ENABLE;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2201      	movs	r2, #1
 800188c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai->Init.PdmInit.MicPairsNbr    = 1;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2201      	movs	r2, #1
 8001894:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai->Init.PdmInit.ClockEnable    = SAI_PDM_CLOCK1_ENABLE;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	f44f 7280 	mov.w	r2, #256	; 0x100
 800189c:	641a      	str	r2, [r3, #64]	; 0x40


  /* Configure SAI_Block_x Frame */
  hsai->FrameInit.FrameLength       = MXConfig->FrameLength;
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	6a1a      	ldr	r2, [r3, #32]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->FrameInit.ActiveFrameLength = MXConfig->ActiveFrameLength;
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->FrameInit.FSDefinition      = SAI_FS_STARTFRAME;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity        = SAI_FS_ACTIVE_HIGH;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018ba:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset          = SAI_FS_FIRSTBIT;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure SAI Block_x Slot */
  hsai->SlotInit.FirstBitOffset     = 0;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2200      	movs	r2, #0
 80018c6:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotSize           = SAI_SLOTSIZE_DATASIZE;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2200      	movs	r2, #0
 80018cc:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai->SlotInit.SlotNumber         = 1;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2201      	movs	r2, #1
 80018d2:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive        = MXConfig->SlotActive;
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	675a      	str	r2, [r3, #116]	; 0x74

  if(HAL_SAI_Init(hsai) != HAL_OK)
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f007 f99d 	bl	8008c1c <HAL_SAI_Init>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <MX_SAI4_Block_A_Init+0xf0>
  {
    ret = HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	73fb      	strb	r3, [r7, #15]
  }
/* Enable SAI peripheral */
  __HAL_SAI_ENABLE(hsai);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80018fa:	601a      	str	r2, [r3, #0]

  return ret;
 80018fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
	...

08001908 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks>:
  * @brief Default BSP AUDIO IN Msp Callbacks
  * @param Instance BSP AUDIO IN Instance
  * @retval BSP status
  */
int32_t BSP_AUDIO_IN_RegisterDefaultMspCallbacks (uint32_t Instance)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8001910:	2300      	movs	r3, #0
 8001912:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  if(Instance == 1U)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2b01      	cmp	r3, #1
 8001918:	d12c      	bne.n	8001974 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x6c>
  {
    for(i = 0; i < DFSDM_MIC_NUMBER; i ++)
 800191a:	2300      	movs	r3, #0
 800191c:	60bb      	str	r3, [r7, #8]
 800191e:	e025      	b.n	800196c <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x64>
    {
      if(((Audio_In_Ctx[Instance].Device >> i) & AUDIO_IN_DEVICE_DIGITAL_MIC1) == AUDIO_IN_DEVICE_DIGITAL_MIC1)
 8001920:	4952      	ldr	r1, [pc, #328]	; (8001a6c <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x164>)
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	4613      	mov	r3, r2
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	4413      	add	r3, r2
 800192a:	011b      	lsls	r3, r3, #4
 800192c:	440b      	add	r3, r1
 800192e:	3304      	adds	r3, #4
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	fa22 f303 	lsr.w	r3, r2, r3
 8001938:	f003 0310 	and.w	r3, r3, #16
 800193c:	2b00      	cmp	r3, #0
 800193e:	d012      	beq.n	8001966 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x5e>
      {
        __HAL_DFSDM_CHANNEL_RESET_HANDLE_STATE(&haudio_in_dfsdm_channel[i]);
 8001940:	494b      	ldr	r1, [pc, #300]	; (8001a70 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x168>)
 8001942:	68ba      	ldr	r2, [r7, #8]
 8001944:	4613      	mov	r3, r2
 8001946:	00db      	lsls	r3, r3, #3
 8001948:	1a9b      	subs	r3, r3, r2
 800194a:	00db      	lsls	r3, r3, #3
 800194c:	440b      	add	r3, r1
 800194e:	3334      	adds	r3, #52	; 0x34
 8001950:	2200      	movs	r2, #0
 8001952:	701a      	strb	r2, [r3, #0]
        __HAL_DFSDM_FILTER_RESET_HANDLE_STATE(&haudio_in_dfsdm_filter[i]);
 8001954:	4a47      	ldr	r2, [pc, #284]	; (8001a74 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x16c>)
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	2154      	movs	r1, #84	; 0x54
 800195a:	fb01 f303 	mul.w	r3, r1, r3
 800195e:	4413      	add	r3, r2
 8001960:	334c      	adds	r3, #76	; 0x4c
 8001962:	2200      	movs	r2, #0
 8001964:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < DFSDM_MIC_NUMBER; i ++)
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	3301      	adds	r3, #1
 800196a:	60bb      	str	r3, [r7, #8]
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	2b03      	cmp	r3, #3
 8001970:	d9d6      	bls.n	8001920 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x18>
 8001972:	e068      	b.n	8001a46 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x13e>
        }
#endif /* (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)  */
      }
    }
  }
  else if(Instance == 0U)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d162      	bne.n	8001a40 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x138>
  {
    __HAL_SAI_RESET_HANDLE_STATE(&haudio_in_sai[Instance]);
 800197a:	4a3f      	ldr	r2, [pc, #252]	; (8001a78 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x170>)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	21b4      	movs	r1, #180	; 0xb4
 8001980:	fb01 f303 	mul.w	r3, r1, r3
 8001984:	4413      	add	r3, r2
 8001986:	3391      	adds	r3, #145	; 0x91
 8001988:	2200      	movs	r2, #0
 800198a:	701a      	strb	r2, [r3, #0]
 800198c:	4a3a      	ldr	r2, [pc, #232]	; (8001a78 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x170>)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	21b4      	movs	r1, #180	; 0xb4
 8001992:	fb01 f303 	mul.w	r3, r1, r3
 8001996:	4413      	add	r3, r2
 8001998:	33ac      	adds	r3, #172	; 0xac
 800199a:	2200      	movs	r2, #0
 800199c:	601a      	str	r2, [r3, #0]
 800199e:	4a36      	ldr	r2, [pc, #216]	; (8001a78 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x170>)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	21b4      	movs	r1, #180	; 0xb4
 80019a4:	fb01 f303 	mul.w	r3, r1, r3
 80019a8:	4413      	add	r3, r2
 80019aa:	33b0      	adds	r3, #176	; 0xb0
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]
    __HAL_SAI_RESET_HANDLE_STATE(&haudio_out_sai);
 80019b0:	4b32      	ldr	r3, [pc, #200]	; (8001a7c <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x174>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
 80019b8:	4b30      	ldr	r3, [pc, #192]	; (8001a7c <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x174>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 80019c0:	4b2e      	ldr	r3, [pc, #184]	; (8001a7c <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x174>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1U)
    /* Register MspInit/MspDeInit Callbacks */
    if(HAL_SAI_RegisterCallback(&haudio_in_sai[Instance], HAL_SAI_MSPINIT_CB_ID, SAI_MspInit) != HAL_OK)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	22b4      	movs	r2, #180	; 0xb4
 80019cc:	fb02 f303 	mul.w	r3, r2, r3
 80019d0:	4a29      	ldr	r2, [pc, #164]	; (8001a78 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x170>)
 80019d2:	4413      	add	r3, r2
 80019d4:	4a2a      	ldr	r2, [pc, #168]	; (8001a80 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x178>)
 80019d6:	2105      	movs	r1, #5
 80019d8:	4618      	mov	r0, r3
 80019da:	f007 fb5b 	bl	8009094 <HAL_SAI_RegisterCallback>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d003      	beq.n	80019ec <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0xe4>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80019e4:	f06f 0303 	mvn.w	r3, #3
 80019e8:	60fb      	str	r3, [r7, #12]
 80019ea:	e02c      	b.n	8001a46 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x13e>
    }
    else if(HAL_SAI_RegisterCallback(&haudio_out_sai, HAL_SAI_MSPINIT_CB_ID, SAI_MspInit) != HAL_OK)
 80019ec:	4a24      	ldr	r2, [pc, #144]	; (8001a80 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x178>)
 80019ee:	2105      	movs	r1, #5
 80019f0:	4822      	ldr	r0, [pc, #136]	; (8001a7c <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x174>)
 80019f2:	f007 fb4f 	bl	8009094 <HAL_SAI_RegisterCallback>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d003      	beq.n	8001a04 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0xfc>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80019fc:	f06f 0303 	mvn.w	r3, #3
 8001a00:	60fb      	str	r3, [r7, #12]
 8001a02:	e020      	b.n	8001a46 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x13e>
    }
    else if(HAL_SAI_RegisterCallback(&haudio_in_sai[Instance], HAL_SAI_MSPDEINIT_CB_ID, SAI_MspDeInit) != HAL_OK)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	22b4      	movs	r2, #180	; 0xb4
 8001a08:	fb02 f303 	mul.w	r3, r2, r3
 8001a0c:	4a1a      	ldr	r2, [pc, #104]	; (8001a78 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x170>)
 8001a0e:	4413      	add	r3, r2
 8001a10:	4a1c      	ldr	r2, [pc, #112]	; (8001a84 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x17c>)
 8001a12:	2106      	movs	r1, #6
 8001a14:	4618      	mov	r0, r3
 8001a16:	f007 fb3d 	bl	8009094 <HAL_SAI_RegisterCallback>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d003      	beq.n	8001a28 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x120>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001a20:	f06f 0303 	mvn.w	r3, #3
 8001a24:	60fb      	str	r3, [r7, #12]
 8001a26:	e00e      	b.n	8001a46 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x13e>
    }
    else if(HAL_SAI_RegisterCallback(&haudio_out_sai, HAL_SAI_MSPDEINIT_CB_ID, SAI_MspDeInit) != HAL_OK)
 8001a28:	4a16      	ldr	r2, [pc, #88]	; (8001a84 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x17c>)
 8001a2a:	2106      	movs	r1, #6
 8001a2c:	4813      	ldr	r0, [pc, #76]	; (8001a7c <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x174>)
 8001a2e:	f007 fb31 	bl	8009094 <HAL_SAI_RegisterCallback>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d006      	beq.n	8001a46 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x13e>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001a38:	f06f 0303 	mvn.w	r3, #3
 8001a3c:	60fb      	str	r3, [r7, #12]
 8001a3e:	e002      	b.n	8001a46 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x13e>
    }
#endif /* (USE_HAL_SAI_REGISTER_CALLBACKS == 1U) */
  }
  else
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001a40:	f06f 0301 	mvn.w	r3, #1
 8001a44:	60fb      	str	r3, [r7, #12]
  }

  if(ret == BSP_ERROR_NONE)
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d109      	bne.n	8001a60 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x158>
  {
    Audio_In_Ctx[Instance].IsMspCallbacksValid = 1;
 8001a4c:	4907      	ldr	r1, [pc, #28]	; (8001a6c <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x164>)
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	4613      	mov	r3, r2
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	4413      	add	r3, r2
 8001a56:	011b      	lsls	r3, r3, #4
 8001a58:	440b      	add	r3, r1
 8001a5a:	332c      	adds	r3, #44	; 0x2c
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	601a      	str	r2, [r3, #0]
  }

  /* Return BSP status */
  return ret;
 8001a60:	68fb      	ldr	r3, [r7, #12]
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3710      	adds	r7, #16
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	24000cb8 	.word	0x24000cb8
 8001a70:	24000a64 	.word	0x24000a64
 8001a74:	24000b44 	.word	0x24000b44
 8001a78:	24000554 	.word	0x24000554
 8001a7c:	240004a0 	.word	0x240004a0
 8001a80:	080005f5 	.word	0x080005f5
 8001a84:	08000ac9 	.word	0x08000ac9

08001a88 <BSP_AUDIO_IN_PDMToPCM_Init>:
  * @param  ChnlNbrIn  Number of input audio channels in the PDM buffer
  * @param  ChnlNbrOut Number of desired output audio channels in the  resulting PCM buffer
  * @retval BSP status
  */
int32_t BSP_AUDIO_IN_PDMToPCM_Init(uint32_t Instance, uint32_t AudioFreq, uint32_t ChnlNbrIn, uint32_t ChnlNbrOut)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	607a      	str	r2, [r7, #4]
 8001a94:	603b      	str	r3, [r7, #0]
  uint32_t index = 0;
 8001a96:	2300      	movs	r3, #0
 8001a98:	617b      	str	r3, [r7, #20]

  if(Instance != 1U)
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d002      	beq.n	8001aa6 <BSP_AUDIO_IN_PDMToPCM_Init+0x1e>
  {
    return BSP_ERROR_WRONG_PARAM;
 8001aa0:	f06f 0301 	mvn.w	r3, #1
 8001aa4:	e085      	b.n	8001bb2 <BSP_AUDIO_IN_PDMToPCM_Init+0x12a>
  }
  else
  {
    /* Enable CRC peripheral to unlock the PDM library */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001aa6:	4b45      	ldr	r3, [pc, #276]	; (8001bbc <BSP_AUDIO_IN_PDMToPCM_Init+0x134>)
 8001aa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aac:	4a43      	ldr	r2, [pc, #268]	; (8001bbc <BSP_AUDIO_IN_PDMToPCM_Init+0x134>)
 8001aae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001ab2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ab6:	4b41      	ldr	r3, [pc, #260]	; (8001bbc <BSP_AUDIO_IN_PDMToPCM_Init+0x134>)
 8001ab8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001abc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ac0:	613b      	str	r3, [r7, #16]
 8001ac2:	693b      	ldr	r3, [r7, #16]

    for(index = 0; index < ChnlNbrIn; index++)
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	617b      	str	r3, [r7, #20]
 8001ac8:	e06e      	b.n	8001ba8 <BSP_AUDIO_IN_PDMToPCM_Init+0x120>
    {
      /* Init PDM filters */
      PDM_FilterHandler[index].bit_order  = PDM_FILTER_BIT_ORDER_MSB;
 8001aca:	4a3d      	ldr	r2, [pc, #244]	; (8001bc0 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	214c      	movs	r1, #76	; 0x4c
 8001ad0:	fb01 f303 	mul.w	r3, r1, r3
 8001ad4:	4413      	add	r3, r2
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	801a      	strh	r2, [r3, #0]
      PDM_FilterHandler[index].endianness = PDM_FILTER_ENDIANNESS_LE;
 8001ada:	4a39      	ldr	r2, [pc, #228]	; (8001bc0 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	214c      	movs	r1, #76	; 0x4c
 8001ae0:	fb01 f303 	mul.w	r3, r1, r3
 8001ae4:	4413      	add	r3, r2
 8001ae6:	3302      	adds	r3, #2
 8001ae8:	2200      	movs	r2, #0
 8001aea:	801a      	strh	r2, [r3, #0]
      PDM_FilterHandler[index].high_pass_tap = 2122358088;
 8001aec:	4a34      	ldr	r2, [pc, #208]	; (8001bc0 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	214c      	movs	r1, #76	; 0x4c
 8001af2:	fb01 f303 	mul.w	r3, r1, r3
 8001af6:	4413      	add	r3, r2
 8001af8:	3304      	adds	r3, #4
 8001afa:	4a32      	ldr	r2, [pc, #200]	; (8001bc4 <BSP_AUDIO_IN_PDMToPCM_Init+0x13c>)
 8001afc:	601a      	str	r2, [r3, #0]
      PDM_FilterHandler[index].out_ptr_channels = ChnlNbrOut;
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	b298      	uxth	r0, r3
 8001b02:	4a2f      	ldr	r2, [pc, #188]	; (8001bc0 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	214c      	movs	r1, #76	; 0x4c
 8001b08:	fb01 f303 	mul.w	r3, r1, r3
 8001b0c:	4413      	add	r3, r2
 8001b0e:	330a      	adds	r3, #10
 8001b10:	4602      	mov	r2, r0
 8001b12:	801a      	strh	r2, [r3, #0]
      PDM_FilterHandler[index].in_ptr_channels  = ChnlNbrIn;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	b298      	uxth	r0, r3
 8001b18:	4a29      	ldr	r2, [pc, #164]	; (8001bc0 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	214c      	movs	r1, #76	; 0x4c
 8001b1e:	fb01 f303 	mul.w	r3, r1, r3
 8001b22:	4413      	add	r3, r2
 8001b24:	3308      	adds	r3, #8
 8001b26:	4602      	mov	r2, r0
 8001b28:	801a      	strh	r2, [r3, #0]
      PDM_Filter_Init((PDM_Filter_Handler_t *)(&PDM_FilterHandler[index]));
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	224c      	movs	r2, #76	; 0x4c
 8001b2e:	fb02 f303 	mul.w	r3, r2, r3
 8001b32:	4a23      	ldr	r2, [pc, #140]	; (8001bc0 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 8001b34:	4413      	add	r3, r2
 8001b36:	4618      	mov	r0, r3
 8001b38:	f009 fec0 	bl	800b8bc <PDM_Filter_Init>

      /* PDM lib config phase */
      PDM_FilterConfig[index].output_samples_number = AudioFreq/1000;
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	4a22      	ldr	r2, [pc, #136]	; (8001bc8 <BSP_AUDIO_IN_PDMToPCM_Init+0x140>)
 8001b40:	fba2 2303 	umull	r2, r3, r2, r3
 8001b44:	099b      	lsrs	r3, r3, #6
 8001b46:	b298      	uxth	r0, r3
 8001b48:	4920      	ldr	r1, [pc, #128]	; (8001bcc <BSP_AUDIO_IN_PDMToPCM_Init+0x144>)
 8001b4a:	697a      	ldr	r2, [r7, #20]
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	4413      	add	r3, r2
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	440b      	add	r3, r1
 8001b56:	3302      	adds	r3, #2
 8001b58:	4602      	mov	r2, r0
 8001b5a:	801a      	strh	r2, [r3, #0]
      PDM_FilterConfig[index].mic_gain = 24;
 8001b5c:	491b      	ldr	r1, [pc, #108]	; (8001bcc <BSP_AUDIO_IN_PDMToPCM_Init+0x144>)
 8001b5e:	697a      	ldr	r2, [r7, #20]
 8001b60:	4613      	mov	r3, r2
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	4413      	add	r3, r2
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	440b      	add	r3, r1
 8001b6a:	3304      	adds	r3, #4
 8001b6c:	2218      	movs	r2, #24
 8001b6e:	801a      	strh	r2, [r3, #0]
      PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_32;
 8001b70:	4916      	ldr	r1, [pc, #88]	; (8001bcc <BSP_AUDIO_IN_PDMToPCM_Init+0x144>)
 8001b72:	697a      	ldr	r2, [r7, #20]
 8001b74:	4613      	mov	r3, r2
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	4413      	add	r3, r2
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	440b      	add	r3, r1
 8001b7e:	2207      	movs	r2, #7
 8001b80:	801a      	strh	r2, [r3, #0]
      PDM_Filter_setConfig((PDM_Filter_Handler_t *)&PDM_FilterHandler[index], &PDM_FilterConfig[index]);
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	224c      	movs	r2, #76	; 0x4c
 8001b86:	fb02 f303 	mul.w	r3, r2, r3
 8001b8a:	4a0d      	ldr	r2, [pc, #52]	; (8001bc0 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 8001b8c:	1898      	adds	r0, r3, r2
 8001b8e:	697a      	ldr	r2, [r7, #20]
 8001b90:	4613      	mov	r3, r2
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	4413      	add	r3, r2
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	4a0c      	ldr	r2, [pc, #48]	; (8001bcc <BSP_AUDIO_IN_PDMToPCM_Init+0x144>)
 8001b9a:	4413      	add	r3, r2
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	f009 ff5d 	bl	800ba5c <PDM_Filter_setConfig>
    for(index = 0; index < ChnlNbrIn; index++)
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	617b      	str	r3, [r7, #20]
 8001ba8:	697a      	ldr	r2, [r7, #20]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d38c      	bcc.n	8001aca <BSP_AUDIO_IN_PDMToPCM_Init+0x42>
    }
  }

  return BSP_ERROR_NONE;
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3718      	adds	r7, #24
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	58024400 	.word	0x58024400
 8001bc0:	240008a0 	.word	0x240008a0
 8001bc4:	7e809d48 	.word	0x7e809d48
 8001bc8:	10624dd3 	.word	0x10624dd3
 8001bcc:	24000938 	.word	0x24000938

08001bd0 <BSP_AUDIO_IN_RecordPDM>:
  * @param  pbuf     Main buffer pointer for the recorded data storing
  * @param  Size     Size of the record buffer
  * @retval BSP status
  */ // TODO
int32_t BSP_AUDIO_IN_RecordPDM(uint32_t Instance, uint8_t* pBuf, uint32_t NbrOfBytes)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b086      	sub	sp, #24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	617b      	str	r3, [r7, #20]

  if(Instance != 1U)
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d003      	beq.n	8001bee <BSP_AUDIO_IN_RecordPDM+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001be6:	f06f 0301 	mvn.w	r3, #1
 8001bea:	617b      	str	r3, [r7, #20]
 8001bec:	e01d      	b.n	8001c2a <BSP_AUDIO_IN_RecordPDM+0x5a>
  }
  else
  {
    /* Start the process receive DMA */
    if(HAL_SAI_Receive_DMA(&haudio_in_sai[Instance], (uint8_t*)pBuf, (uint16_t)(NbrOfBytes/(Audio_In_Ctx[Instance].BitsPerSample/8U))) != HAL_OK)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	22b4      	movs	r2, #180	; 0xb4
 8001bf2:	fb02 f303 	mul.w	r3, r2, r3
 8001bf6:	4a0f      	ldr	r2, [pc, #60]	; (8001c34 <BSP_AUDIO_IN_RecordPDM+0x64>)
 8001bf8:	1898      	adds	r0, r3, r2
 8001bfa:	490f      	ldr	r1, [pc, #60]	; (8001c38 <BSP_AUDIO_IN_RecordPDM+0x68>)
 8001bfc:	68fa      	ldr	r2, [r7, #12]
 8001bfe:	4613      	mov	r3, r2
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	4413      	add	r3, r2
 8001c04:	011b      	lsls	r3, r3, #4
 8001c06:	440b      	add	r3, r1
 8001c08:	330c      	adds	r3, #12
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	08db      	lsrs	r3, r3, #3
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	461a      	mov	r2, r3
 8001c18:	68b9      	ldr	r1, [r7, #8]
 8001c1a:	f007 facd 	bl	80091b8 <HAL_SAI_Receive_DMA>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d002      	beq.n	8001c2a <BSP_AUDIO_IN_RecordPDM+0x5a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001c24:	f06f 0303 	mvn.w	r3, #3
 8001c28:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return BSP status */
  return ret;
 8001c2a:	697b      	ldr	r3, [r7, #20]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3718      	adds	r7, #24
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	24000554 	.word	0x24000554
 8001c38:	24000cb8 	.word	0x24000cb8

08001c3c <BSP_AUDIO_IN_IRQHandler>:
  *         - AUDIO_IN_DEVICE_DIGITAL_MIC3
  *         - AUDIO_IN_DEVICE_DIGITAL_MIC4
  * @retval None
  */
void BSP_AUDIO_IN_IRQHandler(uint32_t Instance, uint32_t InputDevice)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b086      	sub	sp, #24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
  if(((Instance == 0U) && (InputDevice == AUDIO_IN_DEVICE_DIGITAL_MIC1)) ||\
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d102      	bne.n	8001c52 <BSP_AUDIO_IN_IRQHandler+0x16>
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	2b10      	cmp	r3, #16
 8001c50:	d00b      	beq.n	8001c6a <BSP_AUDIO_IN_IRQHandler+0x2e>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d102      	bne.n	8001c5e <BSP_AUDIO_IN_IRQHandler+0x22>
     ((Instance == 0U) && (InputDevice == AUDIO_IN_DEVICE_ANALOG_MIC)) ||\
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d005      	beq.n	8001c6a <BSP_AUDIO_IN_IRQHandler+0x2e>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d10e      	bne.n	8001c82 <BSP_AUDIO_IN_IRQHandler+0x46>
     ((Instance == 1U) && (InputDevice == AUDIO_IN_DEVICE_DIGITAL_MIC1)))
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	2b10      	cmp	r3, #16
 8001c68:	d10b      	bne.n	8001c82 <BSP_AUDIO_IN_IRQHandler+0x46>
  {
    HAL_DMA_IRQHandler(haudio_in_sai[Instance].hdmarx);
 8001c6a:	4a1a      	ldr	r2, [pc, #104]	; (8001cd4 <BSP_AUDIO_IN_IRQHandler+0x98>)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	21b4      	movs	r1, #180	; 0xb4
 8001c70:	fb01 f303 	mul.w	r3, r1, r3
 8001c74:	4413      	add	r3, r2
 8001c76:	3384      	adds	r3, #132	; 0x84
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f001 ff66 	bl	8003b4c <HAL_DMA_IRQHandler>
      (InputDevice <= AUDIO_IN_DEVICE_DIGITAL_MIC_LAST))
    {
    HAL_DMA_IRQHandler(haudio_in_dfsdm_filter[POS_VAL(InputDevice)].hdmaReg);
    }
  }
}
 8001c80:	e024      	b.n	8001ccc <BSP_AUDIO_IN_IRQHandler+0x90>
    if((Instance == 2U) && (InputDevice >= AUDIO_IN_DEVICE_DIGITAL_MIC1) &&\
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d121      	bne.n	8001ccc <BSP_AUDIO_IN_IRQHandler+0x90>
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	2b0f      	cmp	r3, #15
 8001c8c:	d91e      	bls.n	8001ccc <BSP_AUDIO_IN_IRQHandler+0x90>
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	2b80      	cmp	r3, #128	; 0x80
 8001c92:	d81b      	bhi.n	8001ccc <BSP_AUDIO_IN_IRQHandler+0x90>
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	fa93 f3a3 	rbit	r3, r3
 8001c9e:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d101      	bne.n	8001cae <BSP_AUDIO_IN_IRQHandler+0x72>
  {
    return 32U;
 8001caa:	2320      	movs	r3, #32
 8001cac:	e003      	b.n	8001cb6 <BSP_AUDIO_IN_IRQHandler+0x7a>
  }
  return __builtin_clz(value);
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	fab3 f383 	clz	r3, r3
 8001cb4:	b2db      	uxtb	r3, r3
    HAL_DMA_IRQHandler(haudio_in_dfsdm_filter[POS_VAL(InputDevice)].hdmaReg);
 8001cb6:	3b04      	subs	r3, #4
 8001cb8:	4a07      	ldr	r2, [pc, #28]	; (8001cd8 <BSP_AUDIO_IN_IRQHandler+0x9c>)
 8001cba:	2154      	movs	r1, #84	; 0x54
 8001cbc:	fb01 f303 	mul.w	r3, r1, r3
 8001cc0:	4413      	add	r3, r2
 8001cc2:	3328      	adds	r3, #40	; 0x28
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f001 ff40 	bl	8003b4c <HAL_DMA_IRQHandler>
}
 8001ccc:	bf00      	nop
 8001cce:	3718      	adds	r7, #24
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	24000554 	.word	0x24000554
 8001cd8:	24000b44 	.word	0x24000b44

08001cdc <BSP_AUDIO_IN_TransferComplete_CallBack>:
/**
  * @brief  User callback when record buffer is filled.
  * @retval None
  */
__weak void BSP_AUDIO_IN_TransferComplete_CallBack(uint32_t Instance)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  //UNUSED(Instance);

	BSP_LED_On(LED1);
 8001ce4:	2000      	movs	r0, #0
 8001ce6:	f7fe fb71 	bl	80003cc <BSP_LED_On>
  /* This function should be implemented by the user application.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 8001cea:	bf00      	nop
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <BSP_AUDIO_IN_HalfTransfer_CallBack>:
/**
  * @brief  Manages the DMA Half Transfer complete event.
  * @retval None
  */
__weak void BSP_AUDIO_IN_HalfTransfer_CallBack(uint32_t Instance)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	b083      	sub	sp, #12
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* This function should be implemented by the user application.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <BSP_AUDIO_IN_Error_CallBack>:
/**
  * @brief  Audio IN Error callback function.
  * @retval None
  */
__weak void BSP_AUDIO_IN_Error_CallBack(uint32_t Instance)
{
 8001d06:	b480      	push	{r7}
 8001d08:	b083      	sub	sp, #12
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Instance);

  /* This function is called when an Interrupt due to transfer error on or peripheral
     error occurs. */
}
 8001d0e:	bf00      	nop
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr

08001d1a <SAI_RxHalfCpltCallback>:
  * @brief  Half reception complete callback.
  * @param  hsai   SAI handle.
  * @retval None
  */
static void SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b082      	sub	sp, #8
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsai);

  /* Call the record update function to get the first half */
  BSP_AUDIO_IN_HalfTransfer_CallBack(0);
 8001d22:	2000      	movs	r0, #0
 8001d24:	f7ff ffe5 	bl	8001cf2 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 8001d28:	bf00      	nop
 8001d2a:	3708      	adds	r7, #8
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <SAI_RxCpltCallback>:
  * @brief  Reception complete callback.
  * @param  hsai   SAI handle.
  * @retval None
  */
static void SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsai);

  /* Call the record update function to get the second half */
  BSP_AUDIO_IN_TransferComplete_CallBack(0);
 8001d38:	2000      	movs	r0, #0
 8001d3a:	f7ff ffcf 	bl	8001cdc <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8001d3e:	bf00      	nop
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
	...

08001d48 <DFSDM_ChannelMspInit>:
  * @brief  Initialize the DFSDM channel MSP.
  * @param  hDfsdmChannel DFSDM Channel handle
  * @retval None
  */
static void DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef *hDfsdmChannel)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b08e      	sub	sp, #56	; 0x38
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hDfsdmChannel);

  /* DFSDM pins configuration: DFSDM_CKOUT, DMIC_DATIN pins ------------------*/
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d50:	2302      	movs	r3, #2
 8001d52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d54:	2300      	movs	r3, #0
 8001d56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	633b      	str	r3, [r7, #48]	; 0x30

  /* Enable DFSDM clock */
  AUDIO_DFSDM1_CLK_ENABLE();
 8001d5c:	4b49      	ldr	r3, [pc, #292]	; (8001e84 <DFSDM_ChannelMspInit+0x13c>)
 8001d5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d62:	4a48      	ldr	r2, [pc, #288]	; (8001e84 <DFSDM_ChannelMspInit+0x13c>)
 8001d64:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001d68:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001d6c:	4b45      	ldr	r3, [pc, #276]	; (8001e84 <DFSDM_ChannelMspInit+0x13c>)
 8001d6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d72:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001d76:	623b      	str	r3, [r7, #32]
 8001d78:	6a3b      	ldr	r3, [r7, #32]

  /* Enable GPIO clock */
  AUDIO_DFSDM1_CKOUT_GPIO_CLK_ENABLE();
 8001d7a:	4b42      	ldr	r3, [pc, #264]	; (8001e84 <DFSDM_ChannelMspInit+0x13c>)
 8001d7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d80:	4a40      	ldr	r2, [pc, #256]	; (8001e84 <DFSDM_ChannelMspInit+0x13c>)
 8001d82:	f043 0310 	orr.w	r3, r3, #16
 8001d86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d8a:	4b3e      	ldr	r3, [pc, #248]	; (8001e84 <DFSDM_ChannelMspInit+0x13c>)
 8001d8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d90:	f003 0310 	and.w	r3, r3, #16
 8001d94:	61fb      	str	r3, [r7, #28]
 8001d96:	69fb      	ldr	r3, [r7, #28]
  AUDIO_DFSDMx_DATIN_MIC1_GPIO_CLK_ENABLE();
 8001d98:	4b3a      	ldr	r3, [pc, #232]	; (8001e84 <DFSDM_ChannelMspInit+0x13c>)
 8001d9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d9e:	4a39      	ldr	r2, [pc, #228]	; (8001e84 <DFSDM_ChannelMspInit+0x13c>)
 8001da0:	f043 0310 	orr.w	r3, r3, #16
 8001da4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001da8:	4b36      	ldr	r3, [pc, #216]	; (8001e84 <DFSDM_ChannelMspInit+0x13c>)
 8001daa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dae:	f003 0310 	and.w	r3, r3, #16
 8001db2:	61bb      	str	r3, [r7, #24]
 8001db4:	69bb      	ldr	r3, [r7, #24]
  AUDIO_DFSDMx_DATIN_MIC2_GPIO_CLK_ENABLE();
 8001db6:	4b33      	ldr	r3, [pc, #204]	; (8001e84 <DFSDM_ChannelMspInit+0x13c>)
 8001db8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dbc:	4a31      	ldr	r2, [pc, #196]	; (8001e84 <DFSDM_ChannelMspInit+0x13c>)
 8001dbe:	f043 0310 	orr.w	r3, r3, #16
 8001dc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dc6:	4b2f      	ldr	r3, [pc, #188]	; (8001e84 <DFSDM_ChannelMspInit+0x13c>)
 8001dc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dcc:	f003 0310 	and.w	r3, r3, #16
 8001dd0:	617b      	str	r3, [r7, #20]
 8001dd2:	697b      	ldr	r3, [r7, #20]
  AUDIO_DFSDMx_DATIN_MIC3_GPIO_CLK_ENABLE();
 8001dd4:	4b2b      	ldr	r3, [pc, #172]	; (8001e84 <DFSDM_ChannelMspInit+0x13c>)
 8001dd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dda:	4a2a      	ldr	r2, [pc, #168]	; (8001e84 <DFSDM_ChannelMspInit+0x13c>)
 8001ddc:	f043 0320 	orr.w	r3, r3, #32
 8001de0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001de4:	4b27      	ldr	r3, [pc, #156]	; (8001e84 <DFSDM_ChannelMspInit+0x13c>)
 8001de6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dea:	f003 0320 	and.w	r3, r3, #32
 8001dee:	613b      	str	r3, [r7, #16]
 8001df0:	693b      	ldr	r3, [r7, #16]
  AUDIO_DFSDMx_DATIN_MIC4_GPIO_CLK_ENABLE();
 8001df2:	4b24      	ldr	r3, [pc, #144]	; (8001e84 <DFSDM_ChannelMspInit+0x13c>)
 8001df4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001df8:	4a22      	ldr	r2, [pc, #136]	; (8001e84 <DFSDM_ChannelMspInit+0x13c>)
 8001dfa:	f043 0320 	orr.w	r3, r3, #32
 8001dfe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e02:	4b20      	ldr	r3, [pc, #128]	; (8001e84 <DFSDM_ChannelMspInit+0x13c>)
 8001e04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e08:	f003 0320 	and.w	r3, r3, #32
 8001e0c:	60fb      	str	r3, [r7, #12]
 8001e0e:	68fb      	ldr	r3, [r7, #12]

  GPIO_InitStruct.Pin = AUDIO_DFSDM1_CKOUT_PIN;
 8001e10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Alternate = AUDIO_DFSDM1_CKOUT_AF;
 8001e16:	2303      	movs	r3, #3
 8001e18:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(AUDIO_DFSDM1_CKOUT_GPIO_PORT, &GPIO_InitStruct);
 8001e1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e1e:	4619      	mov	r1, r3
 8001e20:	4819      	ldr	r0, [pc, #100]	; (8001e88 <DFSDM_ChannelMspInit+0x140>)
 8001e22:	f003 faf1 	bl	8005408 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = AUDIO_DFSDMx_DATIN_MIC1_PIN;
 8001e26:	2380      	movs	r3, #128	; 0x80
 8001e28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Alternate = AUDIO_DFSDMx_DATIN_MIC1_AF;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(AUDIO_DFSDMx_DATIN_MIC1_GPIO_PORT, &GPIO_InitStruct);
 8001e2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e32:	4619      	mov	r1, r3
 8001e34:	4814      	ldr	r0, [pc, #80]	; (8001e88 <DFSDM_ChannelMspInit+0x140>)
 8001e36:	f003 fae7 	bl	8005408 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = AUDIO_DFSDMx_DATIN_MIC2_PIN;
 8001e3a:	2380      	movs	r3, #128	; 0x80
 8001e3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Alternate = AUDIO_DFSDMx_DATIN_MIC2_AF;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(AUDIO_DFSDMx_DATIN_MIC2_GPIO_PORT, &GPIO_InitStruct);
 8001e42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e46:	4619      	mov	r1, r3
 8001e48:	480f      	ldr	r0, [pc, #60]	; (8001e88 <DFSDM_ChannelMspInit+0x140>)
 8001e4a:	f003 fadd 	bl	8005408 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = AUDIO_DFSDMx_DATIN_MIC3_PIN;
 8001e4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Alternate = AUDIO_DFSDMx_DATIN_MIC3_AF;
 8001e54:	2303      	movs	r3, #3
 8001e56:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(AUDIO_DFSDMx_DATIN_MIC3_GPIO_PORT, &GPIO_InitStruct);
 8001e58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	480b      	ldr	r0, [pc, #44]	; (8001e8c <DFSDM_ChannelMspInit+0x144>)
 8001e60:	f003 fad2 	bl	8005408 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = AUDIO_DFSDMx_DATIN_MIC4_PIN;
 8001e64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Alternate = AUDIO_DFSDMx_DATIN_MIC4_AF;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(AUDIO_DFSDMx_DATIN_MIC4_GPIO_PORT, &GPIO_InitStruct);
 8001e6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e72:	4619      	mov	r1, r3
 8001e74:	4805      	ldr	r0, [pc, #20]	; (8001e8c <DFSDM_ChannelMspInit+0x144>)
 8001e76:	f003 fac7 	bl	8005408 <HAL_GPIO_Init>

}
 8001e7a:	bf00      	nop
 8001e7c:	3738      	adds	r7, #56	; 0x38
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	58024400 	.word	0x58024400
 8001e88:	58021000 	.word	0x58021000
 8001e8c:	58021400 	.word	0x58021400

08001e90 <DFSDM_FilterMspInit>:
  * @brief  Initialize the DFSDM filter MSP.
  * @param  hDfsdmFilter DFSDM Filter handle
  * @retval None
  */
static void DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef *hDfsdmFilter)
{
 8001e90:	b590      	push	{r4, r7, lr}
 8001e92:	b0a1      	sub	sp, #132	; 0x84
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  uint32_t i, mic_num, mic_init[DFSDM_MIC_NUMBER] = {0};
 8001e98:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]
 8001ea0:	605a      	str	r2, [r3, #4]
 8001ea2:	609a      	str	r2, [r3, #8]
 8001ea4:	60da      	str	r2, [r3, #12]
  IRQn_Type AUDIO_DFSDM_DMAx_MIC_IRQHandler[DFSDM_MIC_NUMBER] = {AUDIO_DFSDMx_DMAx_MIC1_IRQ, AUDIO_DFSDMx_DMAx_MIC2_IRQ, AUDIO_DFSDMx_DMAx_MIC3_IRQ, AUDIO_DFSDMx_DMAx_MIC4_IRQ};
 8001ea6:	4a61      	ldr	r2, [pc, #388]	; (800202c <DFSDM_FilterMspInit+0x19c>)
 8001ea8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001eac:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001eb0:	e883 0003 	stmia.w	r3, {r0, r1}
  DMA_Stream_TypeDef* AUDIO_DFSDMx_DMAx_MIC_STREAM[DFSDM_MIC_NUMBER] = {AUDIO_DFSDMx_DMAx_MIC1_STREAM, AUDIO_DFSDMx_DMAx_MIC2_STREAM, AUDIO_DFSDMx_DMAx_MIC3_STREAM, AUDIO_DFSDMx_DMAx_MIC4_STREAM};
 8001eb4:	4b5e      	ldr	r3, [pc, #376]	; (8002030 <DFSDM_FilterMspInit+0x1a0>)
 8001eb6:	f107 0420 	add.w	r4, r7, #32
 8001eba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ebc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t AUDIO_DFSDMx_DMAx_MIC_REQUEST[DFSDM_MIC_NUMBER] = {AUDIO_DFSDMx_DMAx_MIC1_REQUEST, AUDIO_DFSDMx_DMAx_MIC2_REQUEST, AUDIO_DFSDMx_DMAx_MIC3_REQUEST, AUDIO_DFSDMx_DMAx_MIC4_REQUEST};
 8001ec0:	4b5c      	ldr	r3, [pc, #368]	; (8002034 <DFSDM_FilterMspInit+0x1a4>)
 8001ec2:	f107 0410 	add.w	r4, r7, #16
 8001ec6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ec8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hDfsdmFilter);

  /* Enable DFSDM clock */
  AUDIO_DFSDM1_CLK_ENABLE();
 8001ecc:	4b5a      	ldr	r3, [pc, #360]	; (8002038 <DFSDM_FilterMspInit+0x1a8>)
 8001ece:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ed2:	4a59      	ldr	r2, [pc, #356]	; (8002038 <DFSDM_FilterMspInit+0x1a8>)
 8001ed4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001ed8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001edc:	4b56      	ldr	r3, [pc, #344]	; (8002038 <DFSDM_FilterMspInit+0x1a8>)
 8001ede:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ee2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001ee6:	60fb      	str	r3, [r7, #12]
 8001ee8:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DMA clock */
  AUDIO_DFSDM1_DMAx_CLK_ENABLE();
 8001eea:	4b53      	ldr	r3, [pc, #332]	; (8002038 <DFSDM_FilterMspInit+0x1a8>)
 8001eec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ef0:	4a51      	ldr	r2, [pc, #324]	; (8002038 <DFSDM_FilterMspInit+0x1a8>)
 8001ef2:	f043 0302 	orr.w	r3, r3, #2
 8001ef6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001efa:	4b4f      	ldr	r3, [pc, #316]	; (8002038 <DFSDM_FilterMspInit+0x1a8>)
 8001efc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001f00:	f003 0302 	and.w	r3, r3, #2
 8001f04:	60bb      	str	r3, [r7, #8]
 8001f06:	68bb      	ldr	r3, [r7, #8]

  for(i = 0; i < DFSDM_MIC_NUMBER; i++)
 8001f08:	2300      	movs	r3, #0
 8001f0a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001f0c:	e194      	b.n	8002238 <DFSDM_FilterMspInit+0x3a8>
 8001f0e:	2310      	movs	r3, #16
 8001f10:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f14:	fa93 f3a3 	rbit	r3, r3
 8001f18:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001f1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f1c:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8001f1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d101      	bne.n	8001f28 <DFSDM_FilterMspInit+0x98>
    return 32U;
 8001f24:	2320      	movs	r3, #32
 8001f26:	e003      	b.n	8001f30 <DFSDM_FilterMspInit+0xa0>
  return __builtin_clz(value);
 8001f28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f2a:	fab3 f383 	clz	r3, r3
 8001f2e:	b2db      	uxtb	r3, r3
  {
    if((mic_init[POS_VAL(AUDIO_IN_DEVICE_DIGITAL_MIC1)] != 1U) && ((Audio_In_Ctx[2].Device & AUDIO_IN_DEVICE_DIGITAL_MIC1) == AUDIO_IN_DEVICE_DIGITAL_MIC1))
 8001f30:	3b04      	subs	r3, #4
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001f38:	4413      	add	r3, r2
 8001f3a:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d010      	beq.n	8001f64 <DFSDM_FilterMspInit+0xd4>
 8001f42:	4b3e      	ldr	r3, [pc, #248]	; (800203c <DFSDM_FilterMspInit+0x1ac>)
 8001f44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f46:	f003 0310 	and.w	r3, r3, #16
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d00a      	beq.n	8001f64 <DFSDM_FilterMspInit+0xd4>
    {
      mic_num = 0U;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	67bb      	str	r3, [r7, #120]	; 0x78
      mic_init[mic_num] = 1;
 8001f52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001f5a:	4413      	add	r3, r2
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	f843 2c48 	str.w	r2, [r3, #-72]
 8001f62:	e08c      	b.n	800207e <DFSDM_FilterMspInit+0x1ee>
 8001f64:	2320      	movs	r3, #32
 8001f66:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001f6a:	fa93 f3a3 	rbit	r3, r3
 8001f6e:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8001f70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f72:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8001f74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d101      	bne.n	8001f7e <DFSDM_FilterMspInit+0xee>
    return 32U;
 8001f7a:	2320      	movs	r3, #32
 8001f7c:	e003      	b.n	8001f86 <DFSDM_FilterMspInit+0xf6>
  return __builtin_clz(value);
 8001f7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f80:	fab3 f383 	clz	r3, r3
 8001f84:	b2db      	uxtb	r3, r3
    }
    else if((mic_init[POS_VAL(AUDIO_IN_DEVICE_DIGITAL_MIC2)] != 1U) && ((Audio_In_Ctx[2].Device & AUDIO_IN_DEVICE_DIGITAL_MIC2) == AUDIO_IN_DEVICE_DIGITAL_MIC2))
 8001f86:	3b04      	subs	r3, #4
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001f8e:	4413      	add	r3, r2
 8001f90:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d010      	beq.n	8001fba <DFSDM_FilterMspInit+0x12a>
 8001f98:	4b28      	ldr	r3, [pc, #160]	; (800203c <DFSDM_FilterMspInit+0x1ac>)
 8001f9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f9c:	f003 0320 	and.w	r3, r3, #32
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d00a      	beq.n	8001fba <DFSDM_FilterMspInit+0x12a>
    {
      mic_num = 1U;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	67bb      	str	r3, [r7, #120]	; 0x78
      mic_init[mic_num] = 1;
 8001fa8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001fb0:	4413      	add	r3, r2
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f843 2c48 	str.w	r2, [r3, #-72]
 8001fb8:	e061      	b.n	800207e <DFSDM_FilterMspInit+0x1ee>
 8001fba:	2340      	movs	r3, #64	; 0x40
 8001fbc:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001fc0:	fa93 f3a3 	rbit	r3, r3
 8001fc4:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001fc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fc8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8001fca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d101      	bne.n	8001fd4 <DFSDM_FilterMspInit+0x144>
    return 32U;
 8001fd0:	2320      	movs	r3, #32
 8001fd2:	e003      	b.n	8001fdc <DFSDM_FilterMspInit+0x14c>
  return __builtin_clz(value);
 8001fd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fd6:	fab3 f383 	clz	r3, r3
 8001fda:	b2db      	uxtb	r3, r3
    }
    else if((mic_init[POS_VAL(AUDIO_IN_DEVICE_DIGITAL_MIC3)] != 1U) &&((Audio_In_Ctx[2].Device & AUDIO_IN_DEVICE_DIGITAL_MIC3) == AUDIO_IN_DEVICE_DIGITAL_MIC3))
 8001fdc:	3b04      	subs	r3, #4
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001fe4:	4413      	add	r3, r2
 8001fe6:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d010      	beq.n	8002010 <DFSDM_FilterMspInit+0x180>
 8001fee:	4b13      	ldr	r3, [pc, #76]	; (800203c <DFSDM_FilterMspInit+0x1ac>)
 8001ff0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d00a      	beq.n	8002010 <DFSDM_FilterMspInit+0x180>
    {
      mic_num = 2U;
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	67bb      	str	r3, [r7, #120]	; 0x78
      mic_init[mic_num] = 1;
 8001ffe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002006:	4413      	add	r3, r2
 8002008:	2201      	movs	r2, #1
 800200a:	f843 2c48 	str.w	r2, [r3, #-72]
 800200e:	e036      	b.n	800207e <DFSDM_FilterMspInit+0x1ee>
 8002010:	2380      	movs	r3, #128	; 0x80
 8002012:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002014:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002016:	fa93 f3a3 	rbit	r3, r3
 800201a:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800201c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800201e:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002020:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002022:	2b00      	cmp	r3, #0
 8002024:	d10c      	bne.n	8002040 <DFSDM_FilterMspInit+0x1b0>
    return 32U;
 8002026:	2320      	movs	r3, #32
 8002028:	e00e      	b.n	8002048 <DFSDM_FilterMspInit+0x1b8>
 800202a:	bf00      	nop
 800202c:	0800c0a8 	.word	0x0800c0a8
 8002030:	0800c0b0 	.word	0x0800c0b0
 8002034:	0800c0c0 	.word	0x0800c0c0
 8002038:	58024400 	.word	0x58024400
 800203c:	24000cb8 	.word	0x24000cb8
  return __builtin_clz(value);
 8002040:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002042:	fab3 f383 	clz	r3, r3
 8002046:	b2db      	uxtb	r3, r3
    }
    else if((mic_init[POS_VAL(AUDIO_IN_DEVICE_DIGITAL_MIC4)] != 1U) && ((Audio_In_Ctx[2].Device & AUDIO_IN_DEVICE_DIGITAL_MIC4) == AUDIO_IN_DEVICE_DIGITAL_MIC4))
 8002048:	3b04      	subs	r3, #4
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002050:	4413      	add	r3, r2
 8002052:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8002056:	2b01      	cmp	r3, #1
 8002058:	f000 80f2 	beq.w	8002240 <DFSDM_FilterMspInit+0x3b0>
 800205c:	4b7a      	ldr	r3, [pc, #488]	; (8002248 <DFSDM_FilterMspInit+0x3b8>)
 800205e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002060:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002064:	2b00      	cmp	r3, #0
 8002066:	f000 80eb 	beq.w	8002240 <DFSDM_FilterMspInit+0x3b0>
    {
      mic_num = 3U;
 800206a:	2303      	movs	r3, #3
 800206c:	67bb      	str	r3, [r7, #120]	; 0x78
      mic_init[mic_num] = 1;
 800206e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002076:	4413      	add	r3, r2
 8002078:	2201      	movs	r2, #1
 800207a:	f843 2c48 	str.w	r2, [r3, #-72]
    else
    {
      break;
    }
    /* Configure the hDmaDfsdm[i] handle parameters */
    hDmaDfsdm[mic_num].Init.Request             = AUDIO_DFSDMx_DMAx_MIC_REQUEST[mic_num];
 800207e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002086:	4413      	add	r3, r2
 8002088:	f853 1c70 	ldr.w	r1, [r3, #-112]
 800208c:	486f      	ldr	r0, [pc, #444]	; (800224c <DFSDM_FilterMspInit+0x3bc>)
 800208e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002090:	4613      	mov	r3, r2
 8002092:	011b      	lsls	r3, r3, #4
 8002094:	1a9b      	subs	r3, r3, r2
 8002096:	00db      	lsls	r3, r3, #3
 8002098:	4403      	add	r3, r0
 800209a:	3304      	adds	r3, #4
 800209c:	6019      	str	r1, [r3, #0]
    hDmaDfsdm[mic_num].Instance                 = AUDIO_DFSDMx_DMAx_MIC_STREAM[mic_num];
 800209e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80020a6:	4413      	add	r3, r2
 80020a8:	f853 1c60 	ldr.w	r1, [r3, #-96]
 80020ac:	4867      	ldr	r0, [pc, #412]	; (800224c <DFSDM_FilterMspInit+0x3bc>)
 80020ae:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80020b0:	4613      	mov	r3, r2
 80020b2:	011b      	lsls	r3, r3, #4
 80020b4:	1a9b      	subs	r3, r3, r2
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	4403      	add	r3, r0
 80020ba:	6019      	str	r1, [r3, #0]
    hDmaDfsdm[mic_num].Init.Direction           = DMA_PERIPH_TO_MEMORY;
 80020bc:	4963      	ldr	r1, [pc, #396]	; (800224c <DFSDM_FilterMspInit+0x3bc>)
 80020be:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80020c0:	4613      	mov	r3, r2
 80020c2:	011b      	lsls	r3, r3, #4
 80020c4:	1a9b      	subs	r3, r3, r2
 80020c6:	00db      	lsls	r3, r3, #3
 80020c8:	440b      	add	r3, r1
 80020ca:	3308      	adds	r3, #8
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]
    hDmaDfsdm[mic_num].Init.PeriphInc           = DMA_PINC_DISABLE;
 80020d0:	495e      	ldr	r1, [pc, #376]	; (800224c <DFSDM_FilterMspInit+0x3bc>)
 80020d2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80020d4:	4613      	mov	r3, r2
 80020d6:	011b      	lsls	r3, r3, #4
 80020d8:	1a9b      	subs	r3, r3, r2
 80020da:	00db      	lsls	r3, r3, #3
 80020dc:	440b      	add	r3, r1
 80020de:	330c      	adds	r3, #12
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]
    hDmaDfsdm[mic_num].Init.MemInc              = DMA_MINC_ENABLE;
 80020e4:	4959      	ldr	r1, [pc, #356]	; (800224c <DFSDM_FilterMspInit+0x3bc>)
 80020e6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80020e8:	4613      	mov	r3, r2
 80020ea:	011b      	lsls	r3, r3, #4
 80020ec:	1a9b      	subs	r3, r3, r2
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	440b      	add	r3, r1
 80020f2:	3310      	adds	r3, #16
 80020f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020f8:	601a      	str	r2, [r3, #0]
    hDmaDfsdm[mic_num].Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80020fa:	4954      	ldr	r1, [pc, #336]	; (800224c <DFSDM_FilterMspInit+0x3bc>)
 80020fc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80020fe:	4613      	mov	r3, r2
 8002100:	011b      	lsls	r3, r3, #4
 8002102:	1a9b      	subs	r3, r3, r2
 8002104:	00db      	lsls	r3, r3, #3
 8002106:	440b      	add	r3, r1
 8002108:	3314      	adds	r3, #20
 800210a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800210e:	601a      	str	r2, [r3, #0]
    hDmaDfsdm[mic_num].Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002110:	494e      	ldr	r1, [pc, #312]	; (800224c <DFSDM_FilterMspInit+0x3bc>)
 8002112:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002114:	4613      	mov	r3, r2
 8002116:	011b      	lsls	r3, r3, #4
 8002118:	1a9b      	subs	r3, r3, r2
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	440b      	add	r3, r1
 800211e:	3318      	adds	r3, #24
 8002120:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002124:	601a      	str	r2, [r3, #0]
    hDmaDfsdm[mic_num].Init.Mode                = DMA_CIRCULAR;
 8002126:	4949      	ldr	r1, [pc, #292]	; (800224c <DFSDM_FilterMspInit+0x3bc>)
 8002128:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800212a:	4613      	mov	r3, r2
 800212c:	011b      	lsls	r3, r3, #4
 800212e:	1a9b      	subs	r3, r3, r2
 8002130:	00db      	lsls	r3, r3, #3
 8002132:	440b      	add	r3, r1
 8002134:	331c      	adds	r3, #28
 8002136:	f44f 7280 	mov.w	r2, #256	; 0x100
 800213a:	601a      	str	r2, [r3, #0]
    hDmaDfsdm[mic_num].Init.Priority            = DMA_PRIORITY_HIGH;
 800213c:	4943      	ldr	r1, [pc, #268]	; (800224c <DFSDM_FilterMspInit+0x3bc>)
 800213e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002140:	4613      	mov	r3, r2
 8002142:	011b      	lsls	r3, r3, #4
 8002144:	1a9b      	subs	r3, r3, r2
 8002146:	00db      	lsls	r3, r3, #3
 8002148:	440b      	add	r3, r1
 800214a:	3320      	adds	r3, #32
 800214c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002150:	601a      	str	r2, [r3, #0]
    hDmaDfsdm[mic_num].Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8002152:	493e      	ldr	r1, [pc, #248]	; (800224c <DFSDM_FilterMspInit+0x3bc>)
 8002154:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002156:	4613      	mov	r3, r2
 8002158:	011b      	lsls	r3, r3, #4
 800215a:	1a9b      	subs	r3, r3, r2
 800215c:	00db      	lsls	r3, r3, #3
 800215e:	440b      	add	r3, r1
 8002160:	3324      	adds	r3, #36	; 0x24
 8002162:	2200      	movs	r2, #0
 8002164:	601a      	str	r2, [r3, #0]
    hDmaDfsdm[mic_num].Init.MemBurst            = DMA_MBURST_SINGLE;
 8002166:	4939      	ldr	r1, [pc, #228]	; (800224c <DFSDM_FilterMspInit+0x3bc>)
 8002168:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800216a:	4613      	mov	r3, r2
 800216c:	011b      	lsls	r3, r3, #4
 800216e:	1a9b      	subs	r3, r3, r2
 8002170:	00db      	lsls	r3, r3, #3
 8002172:	440b      	add	r3, r1
 8002174:	332c      	adds	r3, #44	; 0x2c
 8002176:	2200      	movs	r2, #0
 8002178:	601a      	str	r2, [r3, #0]
    hDmaDfsdm[mic_num].Init.PeriphBurst         = DMA_PBURST_SINGLE;
 800217a:	4934      	ldr	r1, [pc, #208]	; (800224c <DFSDM_FilterMspInit+0x3bc>)
 800217c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800217e:	4613      	mov	r3, r2
 8002180:	011b      	lsls	r3, r3, #4
 8002182:	1a9b      	subs	r3, r3, r2
 8002184:	00db      	lsls	r3, r3, #3
 8002186:	440b      	add	r3, r1
 8002188:	3330      	adds	r3, #48	; 0x30
 800218a:	2200      	movs	r2, #0
 800218c:	601a      	str	r2, [r3, #0]
    hDmaDfsdm[mic_num].State                    = HAL_DMA_STATE_RESET;
 800218e:	492f      	ldr	r1, [pc, #188]	; (800224c <DFSDM_FilterMspInit+0x3bc>)
 8002190:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002192:	4613      	mov	r3, r2
 8002194:	011b      	lsls	r3, r3, #4
 8002196:	1a9b      	subs	r3, r3, r2
 8002198:	00db      	lsls	r3, r3, #3
 800219a:	440b      	add	r3, r1
 800219c:	3335      	adds	r3, #53	; 0x35
 800219e:	2200      	movs	r2, #0
 80021a0:	701a      	strb	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(&haudio_in_dfsdm_filter[mic_num], hdmaReg, hDmaDfsdm[mic_num]);
 80021a2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80021a4:	4613      	mov	r3, r2
 80021a6:	011b      	lsls	r3, r3, #4
 80021a8:	1a9b      	subs	r3, r3, r2
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	4a27      	ldr	r2, [pc, #156]	; (800224c <DFSDM_FilterMspInit+0x3bc>)
 80021ae:	441a      	add	r2, r3
 80021b0:	4927      	ldr	r1, [pc, #156]	; (8002250 <DFSDM_FilterMspInit+0x3c0>)
 80021b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021b4:	2054      	movs	r0, #84	; 0x54
 80021b6:	fb00 f303 	mul.w	r3, r0, r3
 80021ba:	440b      	add	r3, r1
 80021bc:	3328      	adds	r3, #40	; 0x28
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021c2:	2254      	movs	r2, #84	; 0x54
 80021c4:	fb02 f303 	mul.w	r3, r2, r3
 80021c8:	4a21      	ldr	r2, [pc, #132]	; (8002250 <DFSDM_FilterMspInit+0x3c0>)
 80021ca:	1899      	adds	r1, r3, r2
 80021cc:	481f      	ldr	r0, [pc, #124]	; (800224c <DFSDM_FilterMspInit+0x3bc>)
 80021ce:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80021d0:	4613      	mov	r3, r2
 80021d2:	011b      	lsls	r3, r3, #4
 80021d4:	1a9b      	subs	r3, r3, r2
 80021d6:	00db      	lsls	r3, r3, #3
 80021d8:	4403      	add	r3, r0
 80021da:	3338      	adds	r3, #56	; 0x38
 80021dc:	6019      	str	r1, [r3, #0]

    /* Reset DMA handle state */
    __HAL_DMA_RESET_HANDLE_STATE(&hDmaDfsdm[mic_num]);
 80021de:	491b      	ldr	r1, [pc, #108]	; (800224c <DFSDM_FilterMspInit+0x3bc>)
 80021e0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80021e2:	4613      	mov	r3, r2
 80021e4:	011b      	lsls	r3, r3, #4
 80021e6:	1a9b      	subs	r3, r3, r2
 80021e8:	00db      	lsls	r3, r3, #3
 80021ea:	440b      	add	r3, r1
 80021ec:	3335      	adds	r3, #53	; 0x35
 80021ee:	2200      	movs	r2, #0
 80021f0:	701a      	strb	r2, [r3, #0]

    /* Configure the DMA Channel */
    (void)HAL_DMA_Init(&hDmaDfsdm[mic_num]);
 80021f2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80021f4:	4613      	mov	r3, r2
 80021f6:	011b      	lsls	r3, r3, #4
 80021f8:	1a9b      	subs	r3, r3, r2
 80021fa:	00db      	lsls	r3, r3, #3
 80021fc:	4a13      	ldr	r2, [pc, #76]	; (800224c <DFSDM_FilterMspInit+0x3bc>)
 80021fe:	4413      	add	r3, r2
 8002200:	4618      	mov	r0, r3
 8002202:	f000 fd25 	bl	8002c50 <HAL_DMA_Init>

    /* DMA IRQ Channel configuration */
    HAL_NVIC_SetPriority(AUDIO_DFSDM_DMAx_MIC_IRQHandler[mic_num], BSP_AUDIO_IN_IT_PRIORITY, 0);
 8002206:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800220e:	4413      	add	r3, r2
 8002210:	f933 3c50 	ldrsh.w	r3, [r3, #-80]
 8002214:	2200      	movs	r2, #0
 8002216:	210f      	movs	r1, #15
 8002218:	4618      	mov	r0, r3
 800221a:	f000 f9ac 	bl	8002576 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AUDIO_DFSDM_DMAx_MIC_IRQHandler[mic_num]);
 800221e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002226:	4413      	add	r3, r2
 8002228:	f933 3c50 	ldrsh.w	r3, [r3, #-80]
 800222c:	4618      	mov	r0, r3
 800222e:	f000 f9bc 	bl	80025aa <HAL_NVIC_EnableIRQ>
  for(i = 0; i < DFSDM_MIC_NUMBER; i++)
 8002232:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002234:	3301      	adds	r3, #1
 8002236:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002238:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800223a:	2b03      	cmp	r3, #3
 800223c:	f67f ae67 	bls.w	8001f0e <DFSDM_FilterMspInit+0x7e>
  }
}
 8002240:	bf00      	nop
 8002242:	3784      	adds	r7, #132	; 0x84
 8002244:	46bd      	mov	sp, r7
 8002246:	bd90      	pop	{r4, r7, pc}
 8002248:	24000cb8 	.word	0x24000cb8
 800224c:	240006c0 	.word	0x240006c0
 8002250:	24000b44 	.word	0x24000b44

08002254 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800225a:	2003      	movs	r0, #3
 800225c:	f000 f980 	bl	8002560 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002260:	f004 f952 	bl	8006508 <HAL_RCC_GetSysClockFreq>
 8002264:	4602      	mov	r2, r0
 8002266:	4b15      	ldr	r3, [pc, #84]	; (80022bc <HAL_Init+0x68>)
 8002268:	699b      	ldr	r3, [r3, #24]
 800226a:	0a1b      	lsrs	r3, r3, #8
 800226c:	f003 030f 	and.w	r3, r3, #15
 8002270:	4913      	ldr	r1, [pc, #76]	; (80022c0 <HAL_Init+0x6c>)
 8002272:	5ccb      	ldrb	r3, [r1, r3]
 8002274:	f003 031f 	and.w	r3, r3, #31
 8002278:	fa22 f303 	lsr.w	r3, r2, r3
 800227c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800227e:	4b0f      	ldr	r3, [pc, #60]	; (80022bc <HAL_Init+0x68>)
 8002280:	699b      	ldr	r3, [r3, #24]
 8002282:	f003 030f 	and.w	r3, r3, #15
 8002286:	4a0e      	ldr	r2, [pc, #56]	; (80022c0 <HAL_Init+0x6c>)
 8002288:	5cd3      	ldrb	r3, [r2, r3]
 800228a:	f003 031f 	and.w	r3, r3, #31
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	fa22 f303 	lsr.w	r3, r2, r3
 8002294:	4a0b      	ldr	r2, [pc, #44]	; (80022c4 <HAL_Init+0x70>)
 8002296:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002298:	4a0b      	ldr	r2, [pc, #44]	; (80022c8 <HAL_Init+0x74>)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800229e:	2000      	movs	r0, #0
 80022a0:	f000 f814 	bl	80022cc <HAL_InitTick>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e002      	b.n	80022b4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80022ae:	f007 fb3f 	bl	8009930 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022b2:	2300      	movs	r3, #0
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3708      	adds	r7, #8
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	58024400 	.word	0x58024400
 80022c0:	0800c118 	.word	0x0800c118
 80022c4:	24000414 	.word	0x24000414
 80022c8:	24000410 	.word	0x24000410

080022cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80022d4:	4b15      	ldr	r3, [pc, #84]	; (800232c <HAL_InitTick+0x60>)
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d101      	bne.n	80022e0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e021      	b.n	8002324 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80022e0:	4b13      	ldr	r3, [pc, #76]	; (8002330 <HAL_InitTick+0x64>)
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	4b11      	ldr	r3, [pc, #68]	; (800232c <HAL_InitTick+0x60>)
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	4619      	mov	r1, r3
 80022ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80022f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022f6:	4618      	mov	r0, r3
 80022f8:	f000 f973 	bl	80025e2 <HAL_SYSTICK_Config>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e00e      	b.n	8002324 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2b0f      	cmp	r3, #15
 800230a:	d80a      	bhi.n	8002322 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800230c:	2200      	movs	r2, #0
 800230e:	6879      	ldr	r1, [r7, #4]
 8002310:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002314:	f000 f92f 	bl	8002576 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002318:	4a06      	ldr	r2, [pc, #24]	; (8002334 <HAL_InitTick+0x68>)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800231e:	2300      	movs	r3, #0
 8002320:	e000      	b.n	8002324 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
}
 8002324:	4618      	mov	r0, r3
 8002326:	3708      	adds	r7, #8
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	2400040c 	.word	0x2400040c
 8002330:	24000410 	.word	0x24000410
 8002334:	24000408 	.word	0x24000408

08002338 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800233c:	4b06      	ldr	r3, [pc, #24]	; (8002358 <HAL_IncTick+0x20>)
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	461a      	mov	r2, r3
 8002342:	4b06      	ldr	r3, [pc, #24]	; (800235c <HAL_IncTick+0x24>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4413      	add	r3, r2
 8002348:	4a04      	ldr	r2, [pc, #16]	; (800235c <HAL_IncTick+0x24>)
 800234a:	6013      	str	r3, [r2, #0]
}
 800234c:	bf00      	nop
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	2400040c 	.word	0x2400040c
 800235c:	24000d48 	.word	0x24000d48

08002360 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  return uwTick;
 8002364:	4b03      	ldr	r3, [pc, #12]	; (8002374 <HAL_GetTick+0x14>)
 8002366:	681b      	ldr	r3, [r3, #0]
}
 8002368:	4618      	mov	r0, r3
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	24000d48 	.word	0x24000d48

08002378 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002378:	b480      	push	{r7}
 800237a:	b085      	sub	sp, #20
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f003 0307 	and.w	r3, r3, #7
 8002386:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002388:	4b0b      	ldr	r3, [pc, #44]	; (80023b8 <__NVIC_SetPriorityGrouping+0x40>)
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800238e:	68ba      	ldr	r2, [r7, #8]
 8002390:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002394:	4013      	ands	r3, r2
 8002396:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80023a0:	4b06      	ldr	r3, [pc, #24]	; (80023bc <__NVIC_SetPriorityGrouping+0x44>)
 80023a2:	4313      	orrs	r3, r2
 80023a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023a6:	4a04      	ldr	r2, [pc, #16]	; (80023b8 <__NVIC_SetPriorityGrouping+0x40>)
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	60d3      	str	r3, [r2, #12]
}
 80023ac:	bf00      	nop
 80023ae:	3714      	adds	r7, #20
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr
 80023b8:	e000ed00 	.word	0xe000ed00
 80023bc:	05fa0000 	.word	0x05fa0000

080023c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023c4:	4b04      	ldr	r3, [pc, #16]	; (80023d8 <__NVIC_GetPriorityGrouping+0x18>)
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	0a1b      	lsrs	r3, r3, #8
 80023ca:	f003 0307 	and.w	r3, r3, #7
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr
 80023d8:	e000ed00 	.word	0xe000ed00

080023dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	4603      	mov	r3, r0
 80023e4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80023e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	db0b      	blt.n	8002406 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023ee:	88fb      	ldrh	r3, [r7, #6]
 80023f0:	f003 021f 	and.w	r2, r3, #31
 80023f4:	4907      	ldr	r1, [pc, #28]	; (8002414 <__NVIC_EnableIRQ+0x38>)
 80023f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023fa:	095b      	lsrs	r3, r3, #5
 80023fc:	2001      	movs	r0, #1
 80023fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002406:	bf00      	nop
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	e000e100 	.word	0xe000e100

08002418 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	4603      	mov	r3, r0
 8002420:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002422:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002426:	2b00      	cmp	r3, #0
 8002428:	db12      	blt.n	8002450 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800242a:	88fb      	ldrh	r3, [r7, #6]
 800242c:	f003 021f 	and.w	r2, r3, #31
 8002430:	490a      	ldr	r1, [pc, #40]	; (800245c <__NVIC_DisableIRQ+0x44>)
 8002432:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002436:	095b      	lsrs	r3, r3, #5
 8002438:	2001      	movs	r0, #1
 800243a:	fa00 f202 	lsl.w	r2, r0, r2
 800243e:	3320      	adds	r3, #32
 8002440:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002444:	f3bf 8f4f 	dsb	sy
}
 8002448:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800244a:	f3bf 8f6f 	isb	sy
}
 800244e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002450:	bf00      	nop
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr
 800245c:	e000e100 	.word	0xe000e100

08002460 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	4603      	mov	r3, r0
 8002468:	6039      	str	r1, [r7, #0]
 800246a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800246c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002470:	2b00      	cmp	r3, #0
 8002472:	db0a      	blt.n	800248a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	b2da      	uxtb	r2, r3
 8002478:	490c      	ldr	r1, [pc, #48]	; (80024ac <__NVIC_SetPriority+0x4c>)
 800247a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800247e:	0112      	lsls	r2, r2, #4
 8002480:	b2d2      	uxtb	r2, r2
 8002482:	440b      	add	r3, r1
 8002484:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002488:	e00a      	b.n	80024a0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	b2da      	uxtb	r2, r3
 800248e:	4908      	ldr	r1, [pc, #32]	; (80024b0 <__NVIC_SetPriority+0x50>)
 8002490:	88fb      	ldrh	r3, [r7, #6]
 8002492:	f003 030f 	and.w	r3, r3, #15
 8002496:	3b04      	subs	r3, #4
 8002498:	0112      	lsls	r2, r2, #4
 800249a:	b2d2      	uxtb	r2, r2
 800249c:	440b      	add	r3, r1
 800249e:	761a      	strb	r2, [r3, #24]
}
 80024a0:	bf00      	nop
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr
 80024ac:	e000e100 	.word	0xe000e100
 80024b0:	e000ed00 	.word	0xe000ed00

080024b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b089      	sub	sp, #36	; 0x24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	60b9      	str	r1, [r7, #8]
 80024be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f003 0307 	and.w	r3, r3, #7
 80024c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	f1c3 0307 	rsb	r3, r3, #7
 80024ce:	2b04      	cmp	r3, #4
 80024d0:	bf28      	it	cs
 80024d2:	2304      	movcs	r3, #4
 80024d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	3304      	adds	r3, #4
 80024da:	2b06      	cmp	r3, #6
 80024dc:	d902      	bls.n	80024e4 <NVIC_EncodePriority+0x30>
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	3b03      	subs	r3, #3
 80024e2:	e000      	b.n	80024e6 <NVIC_EncodePriority+0x32>
 80024e4:	2300      	movs	r3, #0
 80024e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	fa02 f303 	lsl.w	r3, r2, r3
 80024f2:	43da      	mvns	r2, r3
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	401a      	ands	r2, r3
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	fa01 f303 	lsl.w	r3, r1, r3
 8002506:	43d9      	mvns	r1, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800250c:	4313      	orrs	r3, r2
         );
}
 800250e:	4618      	mov	r0, r3
 8002510:	3724      	adds	r7, #36	; 0x24
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
	...

0800251c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	3b01      	subs	r3, #1
 8002528:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800252c:	d301      	bcc.n	8002532 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800252e:	2301      	movs	r3, #1
 8002530:	e00f      	b.n	8002552 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002532:	4a0a      	ldr	r2, [pc, #40]	; (800255c <SysTick_Config+0x40>)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	3b01      	subs	r3, #1
 8002538:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800253a:	210f      	movs	r1, #15
 800253c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002540:	f7ff ff8e 	bl	8002460 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002544:	4b05      	ldr	r3, [pc, #20]	; (800255c <SysTick_Config+0x40>)
 8002546:	2200      	movs	r2, #0
 8002548:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800254a:	4b04      	ldr	r3, [pc, #16]	; (800255c <SysTick_Config+0x40>)
 800254c:	2207      	movs	r2, #7
 800254e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	e000e010 	.word	0xe000e010

08002560 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f7ff ff05 	bl	8002378 <__NVIC_SetPriorityGrouping>
}
 800256e:	bf00      	nop
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002576:	b580      	push	{r7, lr}
 8002578:	b086      	sub	sp, #24
 800257a:	af00      	add	r7, sp, #0
 800257c:	4603      	mov	r3, r0
 800257e:	60b9      	str	r1, [r7, #8]
 8002580:	607a      	str	r2, [r7, #4]
 8002582:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002584:	f7ff ff1c 	bl	80023c0 <__NVIC_GetPriorityGrouping>
 8002588:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	68b9      	ldr	r1, [r7, #8]
 800258e:	6978      	ldr	r0, [r7, #20]
 8002590:	f7ff ff90 	bl	80024b4 <NVIC_EncodePriority>
 8002594:	4602      	mov	r2, r0
 8002596:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800259a:	4611      	mov	r1, r2
 800259c:	4618      	mov	r0, r3
 800259e:	f7ff ff5f 	bl	8002460 <__NVIC_SetPriority>
}
 80025a2:	bf00      	nop
 80025a4:	3718      	adds	r7, #24
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}

080025aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b082      	sub	sp, #8
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	4603      	mov	r3, r0
 80025b2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7ff ff0f 	bl	80023dc <__NVIC_EnableIRQ>
}
 80025be:	bf00      	nop
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b082      	sub	sp, #8
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	4603      	mov	r3, r0
 80025ce:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80025d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7ff ff1f 	bl	8002418 <__NVIC_DisableIRQ>
}
 80025da:	bf00      	nop
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025e2:	b580      	push	{r7, lr}
 80025e4:	b082      	sub	sp, #8
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f7ff ff96 	bl	800251c <SysTick_Config>
 80025f0:	4603      	mov	r3, r0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3708      	adds	r7, #8
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
	...

080025fc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d101      	bne.n	800260e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e054      	b.n	80026b8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	7f5b      	ldrb	r3, [r3, #29]
 8002612:	b2db      	uxtb	r3, r3
 8002614:	2b00      	cmp	r3, #0
 8002616:	d105      	bne.n	8002624 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f007 f9a0 	bl	8009964 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2202      	movs	r2, #2
 8002628:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	791b      	ldrb	r3, [r3, #4]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d10c      	bne.n	800264c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a22      	ldr	r2, [pc, #136]	; (80026c0 <HAL_CRC_Init+0xc4>)
 8002638:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	689a      	ldr	r2, [r3, #8]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f022 0218 	bic.w	r2, r2, #24
 8002648:	609a      	str	r2, [r3, #8]
 800264a:	e00c      	b.n	8002666 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6899      	ldr	r1, [r3, #8]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	461a      	mov	r2, r3
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f000 f834 	bl	80026c4 <HAL_CRCEx_Polynomial_Set>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e028      	b.n	80026b8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	795b      	ldrb	r3, [r3, #5]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d105      	bne.n	800267a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002676:	611a      	str	r2, [r3, #16]
 8002678:	e004      	b.n	8002684 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	6912      	ldr	r2, [r2, #16]
 8002682:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	695a      	ldr	r2, [r3, #20]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	430a      	orrs	r2, r1
 8002698:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	699a      	ldr	r2, [r3, #24]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	430a      	orrs	r2, r1
 80026ae:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80026b6:	2300      	movs	r3, #0
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3708      	adds	r7, #8
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	04c11db7 	.word	0x04c11db7

080026c4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b087      	sub	sp, #28
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026d0:	2300      	movs	r3, #0
 80026d2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80026d4:	231f      	movs	r3, #31
 80026d6:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80026d8:	bf00      	nop
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	1e5a      	subs	r2, r3, #1
 80026de:	613a      	str	r2, [r7, #16]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d009      	beq.n	80026f8 <HAL_CRCEx_Polynomial_Set+0x34>
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	f003 031f 	and.w	r3, r3, #31
 80026ea:	68ba      	ldr	r2, [r7, #8]
 80026ec:	fa22 f303 	lsr.w	r3, r2, r3
 80026f0:	f003 0301 	and.w	r3, r3, #1
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d0f0      	beq.n	80026da <HAL_CRCEx_Polynomial_Set+0x16>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2b18      	cmp	r3, #24
 80026fc:	d846      	bhi.n	800278c <HAL_CRCEx_Polynomial_Set+0xc8>
 80026fe:	a201      	add	r2, pc, #4	; (adr r2, 8002704 <HAL_CRCEx_Polynomial_Set+0x40>)
 8002700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002704:	08002793 	.word	0x08002793
 8002708:	0800278d 	.word	0x0800278d
 800270c:	0800278d 	.word	0x0800278d
 8002710:	0800278d 	.word	0x0800278d
 8002714:	0800278d 	.word	0x0800278d
 8002718:	0800278d 	.word	0x0800278d
 800271c:	0800278d 	.word	0x0800278d
 8002720:	0800278d 	.word	0x0800278d
 8002724:	08002781 	.word	0x08002781
 8002728:	0800278d 	.word	0x0800278d
 800272c:	0800278d 	.word	0x0800278d
 8002730:	0800278d 	.word	0x0800278d
 8002734:	0800278d 	.word	0x0800278d
 8002738:	0800278d 	.word	0x0800278d
 800273c:	0800278d 	.word	0x0800278d
 8002740:	0800278d 	.word	0x0800278d
 8002744:	08002775 	.word	0x08002775
 8002748:	0800278d 	.word	0x0800278d
 800274c:	0800278d 	.word	0x0800278d
 8002750:	0800278d 	.word	0x0800278d
 8002754:	0800278d 	.word	0x0800278d
 8002758:	0800278d 	.word	0x0800278d
 800275c:	0800278d 	.word	0x0800278d
 8002760:	0800278d 	.word	0x0800278d
 8002764:	08002769 	.word	0x08002769
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	2b06      	cmp	r3, #6
 800276c:	d913      	bls.n	8002796 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002772:	e010      	b.n	8002796 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	2b07      	cmp	r3, #7
 8002778:	d90f      	bls.n	800279a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800277e:	e00c      	b.n	800279a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	2b0f      	cmp	r3, #15
 8002784:	d90b      	bls.n	800279e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800278a:	e008      	b.n	800279e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	75fb      	strb	r3, [r7, #23]
      break;
 8002790:	e006      	b.n	80027a0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002792:	bf00      	nop
 8002794:	e004      	b.n	80027a0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002796:	bf00      	nop
 8002798:	e002      	b.n	80027a0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800279a:	bf00      	nop
 800279c:	e000      	b.n	80027a0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800279e:	bf00      	nop
  }
  if (status == HAL_OK)
 80027a0:	7dfb      	ldrb	r3, [r7, #23]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d10d      	bne.n	80027c2 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68ba      	ldr	r2, [r7, #8]
 80027ac:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f023 0118 	bic.w	r1, r3, #24
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	430a      	orrs	r2, r1
 80027c0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80027c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	371c      	adds	r7, #28
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b086      	sub	sp, #24
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t               *channelCounterPtr;
  DFSDM_Channel_HandleTypeDef **channelHandleTable;
  DFSDM_Channel_TypeDef       *channel0Instance;

  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d101      	bne.n	80027e2 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e0b4      	b.n	800294c <HAL_DFSDM_ChannelInit+0x17c>
    channelCounterPtr  = &v_dfsdm2ChannelCounter;
    channelHandleTable = a_dfsdm2ChannelHandle;
    channel0Instance   = DFSDM2_Channel0;
  }
#else /* DFSDM2_Channel0 */
  channelCounterPtr  = &v_dfsdm1ChannelCounter;
 80027e2:	4b5c      	ldr	r3, [pc, #368]	; (8002954 <HAL_DFSDM_ChannelInit+0x184>)
 80027e4:	617b      	str	r3, [r7, #20]
  channelHandleTable = a_dfsdm1ChannelHandle;
 80027e6:	4b5c      	ldr	r3, [pc, #368]	; (8002958 <HAL_DFSDM_ChannelInit+0x188>)
 80027e8:	613b      	str	r3, [r7, #16]
  channel0Instance   = DFSDM1_Channel0;
 80027ea:	4b5c      	ldr	r3, [pc, #368]	; (800295c <HAL_DFSDM_ChannelInit+0x18c>)
 80027ec:	60fb      	str	r3, [r7, #12]
#endif /* DFSDM2_Channel0 */

  /* Check that channel has not been already initialized */
  if (channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4618      	mov	r0, r3
 80027f4:	f000 f9e0 	bl	8002bb8 <DFSDM_GetChannelFromInstance>
 80027f8:	4603      	mov	r3, r0
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	693a      	ldr	r2, [r7, #16]
 80027fe:	4413      	add	r3, r2
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <HAL_DFSDM_ChannelInit+0x3a>
  {
    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e0a0      	b.n	800294c <HAL_DFSDM_ChannelInit+0x17c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f007 f8cc 	bl	80099a8 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  (*channelCounterPtr)++;
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	1c5a      	adds	r2, r3, #1
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	601a      	str	r2, [r3, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(*channelCounterPtr == 1U)
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2b01      	cmp	r3, #1
 8002820:	d125      	bne.n	800286e <HAL_DFSDM_ChannelInit+0x9e>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	601a      	str	r2, [r3, #0]
    channel0Instance->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	431a      	orrs	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	601a      	str	r2, [r3, #0]

    /* Reset clock divider */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	791b      	ldrb	r3, [r3, #4]
 800284c:	2b01      	cmp	r3, #1
 800284e:	d108      	bne.n	8002862 <HAL_DFSDM_ChannelInit+0x92>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      channel0Instance->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	3b01      	subs	r3, #1
 800285a:	041b      	lsls	r3, r3, #16
 800285c:	431a      	orrs	r2, r3
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	601a      	str	r2, [r3, #0]
                                              DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    channel0Instance->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	601a      	str	r2, [r3, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800287c:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	6819      	ldr	r1, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800288c:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002892:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	430a      	orrs	r2, r1
 800289a:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f022 020f 	bic.w	r2, r2, #15
 80028aa:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	6819      	ldr	r1, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80028ba:	431a      	orrs	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	430a      	orrs	r2, r1
 80028c2:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	689a      	ldr	r2, [r3, #8]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80028d2:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	6899      	ldr	r1, [r3, #8]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e2:	3b01      	subs	r3, #1
 80028e4:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80028e6:	431a      	orrs	r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	430a      	orrs	r2, r1
 80028ee:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	685a      	ldr	r2, [r3, #4]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f002 0207 	and.w	r2, r2, #7
 80028fe:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	6859      	ldr	r1, [r3, #4]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800290a:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002910:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002912:	431a      	orrs	r2, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	430a      	orrs	r2, r1
 800291a:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800292a:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4618      	mov	r0, r3
 800293a:	f000 f93d 	bl	8002bb8 <DFSDM_GetChannelFromInstance>
 800293e:	4603      	mov	r3, r0
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	693a      	ldr	r2, [r7, #16]
 8002944:	4413      	add	r3, r2
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800294a:	2300      	movs	r3, #0
}
 800294c:	4618      	mov	r0, r3
 800294e:	3718      	adds	r7, #24
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	24000a34 	.word	0x24000a34
 8002958:	24000a38 	.word	0x24000a38
 800295c:	40017800 	.word	0x40017800

08002960 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  const DFSDM_Filter_TypeDef *filter0Instance;

  /* Check DFSDM Channel handle */
  if(hdfsdm_filter == NULL)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d101      	bne.n	8002972 <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e0c8      	b.n	8002b04 <HAL_DFSDM_FilterInit+0x1a4>
  else
  {
    filter0Instance = DFSDM2_Filter0;
  }
#else /* DFSDM2_Channel0 */
  filter0Instance = DFSDM1_Filter0;
 8002972:	4b66      	ldr	r3, [pc, #408]	; (8002b0c <HAL_DFSDM_FilterInit+0x1ac>)
 8002974:	60fb      	str	r3, [r7, #12]
#endif /* DFSDM2_Channel0 */

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == filter0Instance) &&
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	429a      	cmp	r2, r3
 800297e:	d109      	bne.n	8002994 <HAL_DFSDM_FilterInit+0x34>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == filter0Instance) &&
 8002984:	2b01      	cmp	r3, #1
 8002986:	d003      	beq.n	8002990 <HAL_DFSDM_FilterInit+0x30>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 800298c:	2b01      	cmp	r3, #1
 800298e:	d101      	bne.n	8002994 <HAL_DFSDM_FilterInit+0x34>
  {
    return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e0b7      	b.n	8002b04 <HAL_DFSDM_FilterInit+0x1a4>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2201      	movs	r2, #1
 800299e:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f000 f8b3 	bl	8002b18 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 80029c0:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	7a1b      	ldrb	r3, [r3, #8]
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d108      	bne.n	80029dc <HAL_DFSDM_FilterInit+0x7c>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80029d8:	601a      	str	r2, [r3, #0]
 80029da:	e007      	b.n	80029ec <HAL_DFSDM_FilterInit+0x8c>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80029ea:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	7a5b      	ldrb	r3, [r3, #9]
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d108      	bne.n	8002a06 <HAL_DFSDM_FilterInit+0xa6>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002a02:	601a      	str	r2, [r3, #0]
 8002a04:	e007      	b.n	8002a16 <HAL_DFSDM_FilterInit+0xb6>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8002a14:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	6819      	ldr	r1, [r3, #0]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	4b3b      	ldr	r3, [pc, #236]	; (8002b10 <HAL_DFSDM_FilterInit+0x1b0>)
 8002a22:	400b      	ands	r3, r1
 8002a24:	6013      	str	r3, [r2, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d108      	bne.n	8002a40 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	6819      	ldr	r1, [r3, #0]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	695a      	ldr	r2, [r3, #20]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	7c1b      	ldrb	r3, [r3, #16]
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d108      	bne.n	8002a5a <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f042 0210 	orr.w	r2, r2, #16
 8002a56:	601a      	str	r2, [r3, #0]
 8002a58:	e007      	b.n	8002a6a <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f022 0210 	bic.w	r2, r2, #16
 8002a68:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	7c5b      	ldrb	r3, [r3, #17]
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d108      	bne.n	8002a84 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f042 0220 	orr.w	r2, r2, #32
 8002a80:	601a      	str	r2, [r3, #0]
 8002a82:	e007      	b.n	8002a94 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f022 0220 	bic.w	r2, r2, #32
 8002a92:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	6959      	ldr	r1, [r3, #20]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	4b1d      	ldr	r3, [pc, #116]	; (8002b14 <HAL_DFSDM_FilterInit+0x1b4>)
 8002aa0:	400b      	ands	r3, r1
 8002aa2:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	6959      	ldr	r1, [r3, #20]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a1b      	ldr	r3, [r3, #32]
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002ab6:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002abc:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8002abe:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685a      	ldr	r2, [r3, #4]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	68da      	ldr	r2, [r3, #12]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	699a      	ldr	r2, [r3, #24]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	7c1a      	ldrb	r2, [r3, #16]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f042 0201 	orr.w	r2, r2, #1
 8002af8:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2201      	movs	r2, #1
 8002afe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 8002b02:	2300      	movs	r3, #0
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3710      	adds	r7, #16
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	40017900 	.word	0x40017900
 8002b10:	ffff80f7 	.word	0xffff80f7
 8002b14:	1c00ff00 	.word	0x1c00ff00

08002b18 <HAL_DFSDM_FilterMspInit>:
  * @brief  Initializes the DFSDM filter MSP.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the function is needed,
            the HAL_DFSDM_FilterMspInit could be implemented in the user file.
   */
}
 8002b20:	bf00      	nop
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b087      	sub	sp, #28
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d02c      	beq.n	8002ba0 <HAL_DFSDM_FilterConfigRegChannel+0x74>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8002b4c:	2bff      	cmp	r3, #255	; 0xff
 8002b4e:	d027      	beq.n	8002ba0 <HAL_DFSDM_FilterConfigRegChannel+0x74>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	6819      	ldr	r1, [r3, #0]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	4b16      	ldr	r3, [pc, #88]	; (8002bb4 <HAL_DFSDM_FilterConfigRegChannel+0x88>)
 8002b5c:	400b      	ands	r3, r1
 8002b5e:	6013      	str	r3, [r2, #0]
    if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d10d      	bne.n	8002b82 <HAL_DFSDM_FilterConfigRegChannel+0x56>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	021b      	lsls	r3, r3, #8
 8002b70:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002b74:	431a      	orrs	r2, r3
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002b7e:	601a      	str	r2, [r3, #0]
 8002b80:	e00a      	b.n	8002b98 <HAL_DFSDM_FilterConfigRegChannel+0x6c>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) ((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	6819      	ldr	r1, [r3, #0]
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	021b      	lsls	r3, r3, #8
 8002b8c:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	430a      	orrs	r2, r1
 8002b96:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	631a      	str	r2, [r3, #48]	; 0x30
 8002b9e:	e001      	b.n	8002ba4 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  }
  else
  {
    status = HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8002ba4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	371c      	adds	r7, #28
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	f8fbffff 	.word	0xf8fbffff

08002bb8 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef* Instance)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b085      	sub	sp, #20
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if(Instance == DFSDM1_Channel0)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	4a1c      	ldr	r2, [pc, #112]	; (8002c34 <DFSDM_GetChannelFromInstance+0x7c>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d102      	bne.n	8002bce <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	60fb      	str	r3, [r7, #12]
 8002bcc:	e02b      	b.n	8002c26 <DFSDM_GetChannelFromInstance+0x6e>
  else if (Instance == DFSDM2_Channel1)
  {
    channel = 1;
  }
#endif /* DFSDM2_Channel0 */
  else if(Instance == DFSDM1_Channel1)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a19      	ldr	r2, [pc, #100]	; (8002c38 <DFSDM_GetChannelFromInstance+0x80>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d102      	bne.n	8002bdc <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	60fb      	str	r3, [r7, #12]
 8002bda:	e024      	b.n	8002c26 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel2)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	4a17      	ldr	r2, [pc, #92]	; (8002c3c <DFSDM_GetChannelFromInstance+0x84>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d102      	bne.n	8002bea <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002be4:	2302      	movs	r3, #2
 8002be6:	60fb      	str	r3, [r7, #12]
 8002be8:	e01d      	b.n	8002c26 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel3)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a14      	ldr	r2, [pc, #80]	; (8002c40 <DFSDM_GetChannelFromInstance+0x88>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d102      	bne.n	8002bf8 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 3;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	60fb      	str	r3, [r7, #12]
 8002bf6:	e016      	b.n	8002c26 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel4)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4a12      	ldr	r2, [pc, #72]	; (8002c44 <DFSDM_GetChannelFromInstance+0x8c>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d102      	bne.n	8002c06 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 4;
 8002c00:	2304      	movs	r3, #4
 8002c02:	60fb      	str	r3, [r7, #12]
 8002c04:	e00f      	b.n	8002c26 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel5)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a0f      	ldr	r2, [pc, #60]	; (8002c48 <DFSDM_GetChannelFromInstance+0x90>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d102      	bne.n	8002c14 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 5;
 8002c0e:	2305      	movs	r3, #5
 8002c10:	60fb      	str	r3, [r7, #12]
 8002c12:	e008      	b.n	8002c26 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel6)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	4a0d      	ldr	r2, [pc, #52]	; (8002c4c <DFSDM_GetChannelFromInstance+0x94>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d102      	bne.n	8002c22 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 6;
 8002c1c:	2306      	movs	r3, #6
 8002c1e:	60fb      	str	r3, [r7, #12]
 8002c20:	e001      	b.n	8002c26 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else /* DFSDM1_Channel7 */
  {
    channel = 7;
 8002c22:	2307      	movs	r3, #7
 8002c24:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002c26:	68fb      	ldr	r3, [r7, #12]
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3714      	adds	r7, #20
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr
 8002c34:	40017800 	.word	0x40017800
 8002c38:	40017820 	.word	0x40017820
 8002c3c:	40017840 	.word	0x40017840
 8002c40:	40017860 	.word	0x40017860
 8002c44:	40017880 	.word	0x40017880
 8002c48:	400178a0 	.word	0x400178a0
 8002c4c:	400178c0 	.word	0x400178c0

08002c50 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b086      	sub	sp, #24
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002c58:	f7ff fb82 	bl	8002360 <HAL_GetTick>
 8002c5c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d101      	bne.n	8002c68 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e314      	b.n	8003292 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a66      	ldr	r2, [pc, #408]	; (8002e08 <HAL_DMA_Init+0x1b8>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d04a      	beq.n	8002d08 <HAL_DMA_Init+0xb8>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a65      	ldr	r2, [pc, #404]	; (8002e0c <HAL_DMA_Init+0x1bc>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d045      	beq.n	8002d08 <HAL_DMA_Init+0xb8>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a63      	ldr	r2, [pc, #396]	; (8002e10 <HAL_DMA_Init+0x1c0>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d040      	beq.n	8002d08 <HAL_DMA_Init+0xb8>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a62      	ldr	r2, [pc, #392]	; (8002e14 <HAL_DMA_Init+0x1c4>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d03b      	beq.n	8002d08 <HAL_DMA_Init+0xb8>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a60      	ldr	r2, [pc, #384]	; (8002e18 <HAL_DMA_Init+0x1c8>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d036      	beq.n	8002d08 <HAL_DMA_Init+0xb8>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a5f      	ldr	r2, [pc, #380]	; (8002e1c <HAL_DMA_Init+0x1cc>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d031      	beq.n	8002d08 <HAL_DMA_Init+0xb8>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a5d      	ldr	r2, [pc, #372]	; (8002e20 <HAL_DMA_Init+0x1d0>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d02c      	beq.n	8002d08 <HAL_DMA_Init+0xb8>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a5c      	ldr	r2, [pc, #368]	; (8002e24 <HAL_DMA_Init+0x1d4>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d027      	beq.n	8002d08 <HAL_DMA_Init+0xb8>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a5a      	ldr	r2, [pc, #360]	; (8002e28 <HAL_DMA_Init+0x1d8>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d022      	beq.n	8002d08 <HAL_DMA_Init+0xb8>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a59      	ldr	r2, [pc, #356]	; (8002e2c <HAL_DMA_Init+0x1dc>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d01d      	beq.n	8002d08 <HAL_DMA_Init+0xb8>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a57      	ldr	r2, [pc, #348]	; (8002e30 <HAL_DMA_Init+0x1e0>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d018      	beq.n	8002d08 <HAL_DMA_Init+0xb8>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a56      	ldr	r2, [pc, #344]	; (8002e34 <HAL_DMA_Init+0x1e4>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d013      	beq.n	8002d08 <HAL_DMA_Init+0xb8>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a54      	ldr	r2, [pc, #336]	; (8002e38 <HAL_DMA_Init+0x1e8>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d00e      	beq.n	8002d08 <HAL_DMA_Init+0xb8>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a53      	ldr	r2, [pc, #332]	; (8002e3c <HAL_DMA_Init+0x1ec>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d009      	beq.n	8002d08 <HAL_DMA_Init+0xb8>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a51      	ldr	r2, [pc, #324]	; (8002e40 <HAL_DMA_Init+0x1f0>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d004      	beq.n	8002d08 <HAL_DMA_Init+0xb8>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a50      	ldr	r2, [pc, #320]	; (8002e44 <HAL_DMA_Init+0x1f4>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d101      	bne.n	8002d0c <HAL_DMA_Init+0xbc>
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e000      	b.n	8002d0e <HAL_DMA_Init+0xbe>
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	f000 813c 	beq.w	8002f8c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2202      	movs	r2, #2
 8002d18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a37      	ldr	r2, [pc, #220]	; (8002e08 <HAL_DMA_Init+0x1b8>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d04a      	beq.n	8002dc4 <HAL_DMA_Init+0x174>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a36      	ldr	r2, [pc, #216]	; (8002e0c <HAL_DMA_Init+0x1bc>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d045      	beq.n	8002dc4 <HAL_DMA_Init+0x174>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a34      	ldr	r2, [pc, #208]	; (8002e10 <HAL_DMA_Init+0x1c0>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d040      	beq.n	8002dc4 <HAL_DMA_Init+0x174>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a33      	ldr	r2, [pc, #204]	; (8002e14 <HAL_DMA_Init+0x1c4>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d03b      	beq.n	8002dc4 <HAL_DMA_Init+0x174>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a31      	ldr	r2, [pc, #196]	; (8002e18 <HAL_DMA_Init+0x1c8>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d036      	beq.n	8002dc4 <HAL_DMA_Init+0x174>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a30      	ldr	r2, [pc, #192]	; (8002e1c <HAL_DMA_Init+0x1cc>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d031      	beq.n	8002dc4 <HAL_DMA_Init+0x174>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a2e      	ldr	r2, [pc, #184]	; (8002e20 <HAL_DMA_Init+0x1d0>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d02c      	beq.n	8002dc4 <HAL_DMA_Init+0x174>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a2d      	ldr	r2, [pc, #180]	; (8002e24 <HAL_DMA_Init+0x1d4>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d027      	beq.n	8002dc4 <HAL_DMA_Init+0x174>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a2b      	ldr	r2, [pc, #172]	; (8002e28 <HAL_DMA_Init+0x1d8>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d022      	beq.n	8002dc4 <HAL_DMA_Init+0x174>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a2a      	ldr	r2, [pc, #168]	; (8002e2c <HAL_DMA_Init+0x1dc>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d01d      	beq.n	8002dc4 <HAL_DMA_Init+0x174>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a28      	ldr	r2, [pc, #160]	; (8002e30 <HAL_DMA_Init+0x1e0>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d018      	beq.n	8002dc4 <HAL_DMA_Init+0x174>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a27      	ldr	r2, [pc, #156]	; (8002e34 <HAL_DMA_Init+0x1e4>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d013      	beq.n	8002dc4 <HAL_DMA_Init+0x174>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a25      	ldr	r2, [pc, #148]	; (8002e38 <HAL_DMA_Init+0x1e8>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d00e      	beq.n	8002dc4 <HAL_DMA_Init+0x174>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a24      	ldr	r2, [pc, #144]	; (8002e3c <HAL_DMA_Init+0x1ec>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d009      	beq.n	8002dc4 <HAL_DMA_Init+0x174>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a22      	ldr	r2, [pc, #136]	; (8002e40 <HAL_DMA_Init+0x1f0>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d004      	beq.n	8002dc4 <HAL_DMA_Init+0x174>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a21      	ldr	r2, [pc, #132]	; (8002e44 <HAL_DMA_Init+0x1f4>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d108      	bne.n	8002dd6 <HAL_DMA_Init+0x186>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f022 0201 	bic.w	r2, r2, #1
 8002dd2:	601a      	str	r2, [r3, #0]
 8002dd4:	e007      	b.n	8002de6 <HAL_DMA_Init+0x196>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f022 0201 	bic.w	r2, r2, #1
 8002de4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002de6:	e02f      	b.n	8002e48 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002de8:	f7ff faba 	bl	8002360 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	2b05      	cmp	r3, #5
 8002df4:	d928      	bls.n	8002e48 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2220      	movs	r2, #32
 8002dfa:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2203      	movs	r2, #3
 8002e00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e244      	b.n	8003292 <HAL_DMA_Init+0x642>
 8002e08:	40020010 	.word	0x40020010
 8002e0c:	40020028 	.word	0x40020028
 8002e10:	40020040 	.word	0x40020040
 8002e14:	40020058 	.word	0x40020058
 8002e18:	40020070 	.word	0x40020070
 8002e1c:	40020088 	.word	0x40020088
 8002e20:	400200a0 	.word	0x400200a0
 8002e24:	400200b8 	.word	0x400200b8
 8002e28:	40020410 	.word	0x40020410
 8002e2c:	40020428 	.word	0x40020428
 8002e30:	40020440 	.word	0x40020440
 8002e34:	40020458 	.word	0x40020458
 8002e38:	40020470 	.word	0x40020470
 8002e3c:	40020488 	.word	0x40020488
 8002e40:	400204a0 	.word	0x400204a0
 8002e44:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1c8      	bne.n	8002de8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e5e:	697a      	ldr	r2, [r7, #20]
 8002e60:	4b84      	ldr	r3, [pc, #528]	; (8003074 <HAL_DMA_Init+0x424>)
 8002e62:	4013      	ands	r3, r2
 8002e64:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002e6e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	691b      	ldr	r3, [r3, #16]
 8002e74:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e7a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	699b      	ldr	r3, [r3, #24]
 8002e80:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e86:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a1b      	ldr	r3, [r3, #32]
 8002e8c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002e8e:	697a      	ldr	r2, [r7, #20]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e98:	2b04      	cmp	r3, #4
 8002e9a:	d107      	bne.n	8002eac <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	697a      	ldr	r2, [r7, #20]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	2b28      	cmp	r3, #40	; 0x28
 8002eb2:	d903      	bls.n	8002ebc <HAL_DMA_Init+0x26c>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	2b2e      	cmp	r3, #46	; 0x2e
 8002eba:	d91f      	bls.n	8002efc <HAL_DMA_Init+0x2ac>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	2b3e      	cmp	r3, #62	; 0x3e
 8002ec2:	d903      	bls.n	8002ecc <HAL_DMA_Init+0x27c>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	2b42      	cmp	r3, #66	; 0x42
 8002eca:	d917      	bls.n	8002efc <HAL_DMA_Init+0x2ac>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	2b46      	cmp	r3, #70	; 0x46
 8002ed2:	d903      	bls.n	8002edc <HAL_DMA_Init+0x28c>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	2b48      	cmp	r3, #72	; 0x48
 8002eda:	d90f      	bls.n	8002efc <HAL_DMA_Init+0x2ac>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	2b4e      	cmp	r3, #78	; 0x4e
 8002ee2:	d903      	bls.n	8002eec <HAL_DMA_Init+0x29c>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	2b52      	cmp	r3, #82	; 0x52
 8002eea:	d907      	bls.n	8002efc <HAL_DMA_Init+0x2ac>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	2b73      	cmp	r3, #115	; 0x73
 8002ef2:	d905      	bls.n	8002f00 <HAL_DMA_Init+0x2b0>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	2b77      	cmp	r3, #119	; 0x77
 8002efa:	d801      	bhi.n	8002f00 <HAL_DMA_Init+0x2b0>
 8002efc:	2301      	movs	r3, #1
 8002efe:	e000      	b.n	8002f02 <HAL_DMA_Init+0x2b2>
 8002f00:	2300      	movs	r3, #0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d003      	beq.n	8002f0e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f0c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	697a      	ldr	r2, [r7, #20]
 8002f14:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	695b      	ldr	r3, [r3, #20]
 8002f1c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	f023 0307 	bic.w	r3, r3, #7
 8002f24:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2a:	697a      	ldr	r2, [r7, #20]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f34:	2b04      	cmp	r3, #4
 8002f36:	d117      	bne.n	8002f68 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f3c:	697a      	ldr	r2, [r7, #20]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d00e      	beq.n	8002f68 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f001 ff9a 	bl	8004e84 <DMA_CheckFifoParam>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d008      	beq.n	8002f68 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2240      	movs	r2, #64	; 0x40
 8002f5a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e194      	b.n	8003292 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	697a      	ldr	r2, [r7, #20]
 8002f6e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f001 fed5 	bl	8004d20 <DMA_CalcBaseAndBitshift>
 8002f76:	4603      	mov	r3, r0
 8002f78:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f7e:	f003 031f 	and.w	r3, r3, #31
 8002f82:	223f      	movs	r2, #63	; 0x3f
 8002f84:	409a      	lsls	r2, r3
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	609a      	str	r2, [r3, #8]
 8002f8a:	e0ca      	b.n	8003122 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a39      	ldr	r2, [pc, #228]	; (8003078 <HAL_DMA_Init+0x428>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d022      	beq.n	8002fdc <HAL_DMA_Init+0x38c>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a38      	ldr	r2, [pc, #224]	; (800307c <HAL_DMA_Init+0x42c>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d01d      	beq.n	8002fdc <HAL_DMA_Init+0x38c>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a36      	ldr	r2, [pc, #216]	; (8003080 <HAL_DMA_Init+0x430>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d018      	beq.n	8002fdc <HAL_DMA_Init+0x38c>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a35      	ldr	r2, [pc, #212]	; (8003084 <HAL_DMA_Init+0x434>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d013      	beq.n	8002fdc <HAL_DMA_Init+0x38c>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a33      	ldr	r2, [pc, #204]	; (8003088 <HAL_DMA_Init+0x438>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d00e      	beq.n	8002fdc <HAL_DMA_Init+0x38c>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a32      	ldr	r2, [pc, #200]	; (800308c <HAL_DMA_Init+0x43c>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d009      	beq.n	8002fdc <HAL_DMA_Init+0x38c>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a30      	ldr	r2, [pc, #192]	; (8003090 <HAL_DMA_Init+0x440>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d004      	beq.n	8002fdc <HAL_DMA_Init+0x38c>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a2f      	ldr	r2, [pc, #188]	; (8003094 <HAL_DMA_Init+0x444>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d101      	bne.n	8002fe0 <HAL_DMA_Init+0x390>
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e000      	b.n	8002fe2 <HAL_DMA_Init+0x392>
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	f000 8094 	beq.w	8003110 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a22      	ldr	r2, [pc, #136]	; (8003078 <HAL_DMA_Init+0x428>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d021      	beq.n	8003036 <HAL_DMA_Init+0x3e6>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a21      	ldr	r2, [pc, #132]	; (800307c <HAL_DMA_Init+0x42c>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d01c      	beq.n	8003036 <HAL_DMA_Init+0x3e6>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a1f      	ldr	r2, [pc, #124]	; (8003080 <HAL_DMA_Init+0x430>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d017      	beq.n	8003036 <HAL_DMA_Init+0x3e6>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a1e      	ldr	r2, [pc, #120]	; (8003084 <HAL_DMA_Init+0x434>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d012      	beq.n	8003036 <HAL_DMA_Init+0x3e6>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a1c      	ldr	r2, [pc, #112]	; (8003088 <HAL_DMA_Init+0x438>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d00d      	beq.n	8003036 <HAL_DMA_Init+0x3e6>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a1b      	ldr	r2, [pc, #108]	; (800308c <HAL_DMA_Init+0x43c>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d008      	beq.n	8003036 <HAL_DMA_Init+0x3e6>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a19      	ldr	r2, [pc, #100]	; (8003090 <HAL_DMA_Init+0x440>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d003      	beq.n	8003036 <HAL_DMA_Init+0x3e6>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a18      	ldr	r2, [pc, #96]	; (8003094 <HAL_DMA_Init+0x444>)
 8003034:	4293      	cmp	r3, r2
 8003036:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2202      	movs	r2, #2
 800303c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003050:	697a      	ldr	r2, [r7, #20]
 8003052:	4b11      	ldr	r3, [pc, #68]	; (8003098 <HAL_DMA_Init+0x448>)
 8003054:	4013      	ands	r3, r2
 8003056:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	2b40      	cmp	r3, #64	; 0x40
 800305e:	d01d      	beq.n	800309c <HAL_DMA_Init+0x44c>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	2b80      	cmp	r3, #128	; 0x80
 8003066:	d102      	bne.n	800306e <HAL_DMA_Init+0x41e>
 8003068:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800306c:	e017      	b.n	800309e <HAL_DMA_Init+0x44e>
 800306e:	2300      	movs	r3, #0
 8003070:	e015      	b.n	800309e <HAL_DMA_Init+0x44e>
 8003072:	bf00      	nop
 8003074:	fe10803f 	.word	0xfe10803f
 8003078:	58025408 	.word	0x58025408
 800307c:	5802541c 	.word	0x5802541c
 8003080:	58025430 	.word	0x58025430
 8003084:	58025444 	.word	0x58025444
 8003088:	58025458 	.word	0x58025458
 800308c:	5802546c 	.word	0x5802546c
 8003090:	58025480 	.word	0x58025480
 8003094:	58025494 	.word	0x58025494
 8003098:	fffe000f 	.word	0xfffe000f
 800309c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	68d2      	ldr	r2, [r2, #12]
 80030a2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80030a4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80030ac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	695b      	ldr	r3, [r3, #20]
 80030b2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80030b4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80030bc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	69db      	ldr	r3, [r3, #28]
 80030c2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80030c4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a1b      	ldr	r3, [r3, #32]
 80030ca:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80030cc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80030ce:	697a      	ldr	r2, [r7, #20]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	697a      	ldr	r2, [r7, #20]
 80030da:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	461a      	mov	r2, r3
 80030e2:	4b6e      	ldr	r3, [pc, #440]	; (800329c <HAL_DMA_Init+0x64c>)
 80030e4:	4413      	add	r3, r2
 80030e6:	4a6e      	ldr	r2, [pc, #440]	; (80032a0 <HAL_DMA_Init+0x650>)
 80030e8:	fba2 2303 	umull	r2, r3, r2, r3
 80030ec:	091b      	lsrs	r3, r3, #4
 80030ee:	009a      	lsls	r2, r3, #2
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f001 fe13 	bl	8004d20 <DMA_CalcBaseAndBitshift>
 80030fa:	4603      	mov	r3, r0
 80030fc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003102:	f003 031f 	and.w	r3, r3, #31
 8003106:	2201      	movs	r2, #1
 8003108:	409a      	lsls	r2, r3
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	605a      	str	r2, [r3, #4]
 800310e:	e008      	b.n	8003122 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2240      	movs	r2, #64	; 0x40
 8003114:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2203      	movs	r2, #3
 800311a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e0b7      	b.n	8003292 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a5f      	ldr	r2, [pc, #380]	; (80032a4 <HAL_DMA_Init+0x654>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d072      	beq.n	8003212 <HAL_DMA_Init+0x5c2>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a5d      	ldr	r2, [pc, #372]	; (80032a8 <HAL_DMA_Init+0x658>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d06d      	beq.n	8003212 <HAL_DMA_Init+0x5c2>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a5c      	ldr	r2, [pc, #368]	; (80032ac <HAL_DMA_Init+0x65c>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d068      	beq.n	8003212 <HAL_DMA_Init+0x5c2>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a5a      	ldr	r2, [pc, #360]	; (80032b0 <HAL_DMA_Init+0x660>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d063      	beq.n	8003212 <HAL_DMA_Init+0x5c2>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a59      	ldr	r2, [pc, #356]	; (80032b4 <HAL_DMA_Init+0x664>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d05e      	beq.n	8003212 <HAL_DMA_Init+0x5c2>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a57      	ldr	r2, [pc, #348]	; (80032b8 <HAL_DMA_Init+0x668>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d059      	beq.n	8003212 <HAL_DMA_Init+0x5c2>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a56      	ldr	r2, [pc, #344]	; (80032bc <HAL_DMA_Init+0x66c>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d054      	beq.n	8003212 <HAL_DMA_Init+0x5c2>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a54      	ldr	r2, [pc, #336]	; (80032c0 <HAL_DMA_Init+0x670>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d04f      	beq.n	8003212 <HAL_DMA_Init+0x5c2>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a53      	ldr	r2, [pc, #332]	; (80032c4 <HAL_DMA_Init+0x674>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d04a      	beq.n	8003212 <HAL_DMA_Init+0x5c2>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a51      	ldr	r2, [pc, #324]	; (80032c8 <HAL_DMA_Init+0x678>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d045      	beq.n	8003212 <HAL_DMA_Init+0x5c2>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a50      	ldr	r2, [pc, #320]	; (80032cc <HAL_DMA_Init+0x67c>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d040      	beq.n	8003212 <HAL_DMA_Init+0x5c2>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a4e      	ldr	r2, [pc, #312]	; (80032d0 <HAL_DMA_Init+0x680>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d03b      	beq.n	8003212 <HAL_DMA_Init+0x5c2>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a4d      	ldr	r2, [pc, #308]	; (80032d4 <HAL_DMA_Init+0x684>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d036      	beq.n	8003212 <HAL_DMA_Init+0x5c2>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a4b      	ldr	r2, [pc, #300]	; (80032d8 <HAL_DMA_Init+0x688>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d031      	beq.n	8003212 <HAL_DMA_Init+0x5c2>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a4a      	ldr	r2, [pc, #296]	; (80032dc <HAL_DMA_Init+0x68c>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d02c      	beq.n	8003212 <HAL_DMA_Init+0x5c2>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a48      	ldr	r2, [pc, #288]	; (80032e0 <HAL_DMA_Init+0x690>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d027      	beq.n	8003212 <HAL_DMA_Init+0x5c2>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a47      	ldr	r2, [pc, #284]	; (80032e4 <HAL_DMA_Init+0x694>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d022      	beq.n	8003212 <HAL_DMA_Init+0x5c2>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a45      	ldr	r2, [pc, #276]	; (80032e8 <HAL_DMA_Init+0x698>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d01d      	beq.n	8003212 <HAL_DMA_Init+0x5c2>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a44      	ldr	r2, [pc, #272]	; (80032ec <HAL_DMA_Init+0x69c>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d018      	beq.n	8003212 <HAL_DMA_Init+0x5c2>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a42      	ldr	r2, [pc, #264]	; (80032f0 <HAL_DMA_Init+0x6a0>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d013      	beq.n	8003212 <HAL_DMA_Init+0x5c2>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a41      	ldr	r2, [pc, #260]	; (80032f4 <HAL_DMA_Init+0x6a4>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d00e      	beq.n	8003212 <HAL_DMA_Init+0x5c2>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a3f      	ldr	r2, [pc, #252]	; (80032f8 <HAL_DMA_Init+0x6a8>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d009      	beq.n	8003212 <HAL_DMA_Init+0x5c2>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a3e      	ldr	r2, [pc, #248]	; (80032fc <HAL_DMA_Init+0x6ac>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d004      	beq.n	8003212 <HAL_DMA_Init+0x5c2>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a3c      	ldr	r2, [pc, #240]	; (8003300 <HAL_DMA_Init+0x6b0>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d101      	bne.n	8003216 <HAL_DMA_Init+0x5c6>
 8003212:	2301      	movs	r3, #1
 8003214:	e000      	b.n	8003218 <HAL_DMA_Init+0x5c8>
 8003216:	2300      	movs	r3, #0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d032      	beq.n	8003282 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f001 fead 	bl	8004f7c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	2b80      	cmp	r3, #128	; 0x80
 8003228:	d102      	bne.n	8003230 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685a      	ldr	r2, [r3, #4]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003238:	b2d2      	uxtb	r2, r2
 800323a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003244:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d010      	beq.n	8003270 <HAL_DMA_Init+0x620>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	2b08      	cmp	r3, #8
 8003254:	d80c      	bhi.n	8003270 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f001 ff2a 	bl	80050b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003260:	2200      	movs	r2, #0
 8003262:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800326c:	605a      	str	r2, [r3, #4]
 800326e:	e008      	b.n	8003282 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	3718      	adds	r7, #24
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	a7fdabf8 	.word	0xa7fdabf8
 80032a0:	cccccccd 	.word	0xcccccccd
 80032a4:	40020010 	.word	0x40020010
 80032a8:	40020028 	.word	0x40020028
 80032ac:	40020040 	.word	0x40020040
 80032b0:	40020058 	.word	0x40020058
 80032b4:	40020070 	.word	0x40020070
 80032b8:	40020088 	.word	0x40020088
 80032bc:	400200a0 	.word	0x400200a0
 80032c0:	400200b8 	.word	0x400200b8
 80032c4:	40020410 	.word	0x40020410
 80032c8:	40020428 	.word	0x40020428
 80032cc:	40020440 	.word	0x40020440
 80032d0:	40020458 	.word	0x40020458
 80032d4:	40020470 	.word	0x40020470
 80032d8:	40020488 	.word	0x40020488
 80032dc:	400204a0 	.word	0x400204a0
 80032e0:	400204b8 	.word	0x400204b8
 80032e4:	58025408 	.word	0x58025408
 80032e8:	5802541c 	.word	0x5802541c
 80032ec:	58025430 	.word	0x58025430
 80032f0:	58025444 	.word	0x58025444
 80032f4:	58025458 	.word	0x58025458
 80032f8:	5802546c 	.word	0x5802546c
 80032fc:	58025480 	.word	0x58025480
 8003300:	58025494 	.word	0x58025494

08003304 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d101      	bne.n	8003316 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e1a8      	b.n	8003668 <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a82      	ldr	r2, [pc, #520]	; (8003524 <HAL_DMA_DeInit+0x220>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d04a      	beq.n	80033b6 <HAL_DMA_DeInit+0xb2>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a80      	ldr	r2, [pc, #512]	; (8003528 <HAL_DMA_DeInit+0x224>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d045      	beq.n	80033b6 <HAL_DMA_DeInit+0xb2>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a7f      	ldr	r2, [pc, #508]	; (800352c <HAL_DMA_DeInit+0x228>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d040      	beq.n	80033b6 <HAL_DMA_DeInit+0xb2>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a7d      	ldr	r2, [pc, #500]	; (8003530 <HAL_DMA_DeInit+0x22c>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d03b      	beq.n	80033b6 <HAL_DMA_DeInit+0xb2>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a7c      	ldr	r2, [pc, #496]	; (8003534 <HAL_DMA_DeInit+0x230>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d036      	beq.n	80033b6 <HAL_DMA_DeInit+0xb2>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a7a      	ldr	r2, [pc, #488]	; (8003538 <HAL_DMA_DeInit+0x234>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d031      	beq.n	80033b6 <HAL_DMA_DeInit+0xb2>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a79      	ldr	r2, [pc, #484]	; (800353c <HAL_DMA_DeInit+0x238>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d02c      	beq.n	80033b6 <HAL_DMA_DeInit+0xb2>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a77      	ldr	r2, [pc, #476]	; (8003540 <HAL_DMA_DeInit+0x23c>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d027      	beq.n	80033b6 <HAL_DMA_DeInit+0xb2>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a76      	ldr	r2, [pc, #472]	; (8003544 <HAL_DMA_DeInit+0x240>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d022      	beq.n	80033b6 <HAL_DMA_DeInit+0xb2>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a74      	ldr	r2, [pc, #464]	; (8003548 <HAL_DMA_DeInit+0x244>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d01d      	beq.n	80033b6 <HAL_DMA_DeInit+0xb2>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a73      	ldr	r2, [pc, #460]	; (800354c <HAL_DMA_DeInit+0x248>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d018      	beq.n	80033b6 <HAL_DMA_DeInit+0xb2>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a71      	ldr	r2, [pc, #452]	; (8003550 <HAL_DMA_DeInit+0x24c>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d013      	beq.n	80033b6 <HAL_DMA_DeInit+0xb2>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a70      	ldr	r2, [pc, #448]	; (8003554 <HAL_DMA_DeInit+0x250>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d00e      	beq.n	80033b6 <HAL_DMA_DeInit+0xb2>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a6e      	ldr	r2, [pc, #440]	; (8003558 <HAL_DMA_DeInit+0x254>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d009      	beq.n	80033b6 <HAL_DMA_DeInit+0xb2>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a6d      	ldr	r2, [pc, #436]	; (800355c <HAL_DMA_DeInit+0x258>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d004      	beq.n	80033b6 <HAL_DMA_DeInit+0xb2>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a6b      	ldr	r2, [pc, #428]	; (8003560 <HAL_DMA_DeInit+0x25c>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d108      	bne.n	80033c8 <HAL_DMA_DeInit+0xc4>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f022 0201 	bic.w	r2, r2, #1
 80033c4:	601a      	str	r2, [r3, #0]
 80033c6:	e007      	b.n	80033d8 <HAL_DMA_DeInit+0xd4>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f022 0201 	bic.w	r2, r2, #1
 80033d6:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a51      	ldr	r2, [pc, #324]	; (8003524 <HAL_DMA_DeInit+0x220>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d04a      	beq.n	8003478 <HAL_DMA_DeInit+0x174>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a50      	ldr	r2, [pc, #320]	; (8003528 <HAL_DMA_DeInit+0x224>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d045      	beq.n	8003478 <HAL_DMA_DeInit+0x174>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a4e      	ldr	r2, [pc, #312]	; (800352c <HAL_DMA_DeInit+0x228>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d040      	beq.n	8003478 <HAL_DMA_DeInit+0x174>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a4d      	ldr	r2, [pc, #308]	; (8003530 <HAL_DMA_DeInit+0x22c>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d03b      	beq.n	8003478 <HAL_DMA_DeInit+0x174>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a4b      	ldr	r2, [pc, #300]	; (8003534 <HAL_DMA_DeInit+0x230>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d036      	beq.n	8003478 <HAL_DMA_DeInit+0x174>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a4a      	ldr	r2, [pc, #296]	; (8003538 <HAL_DMA_DeInit+0x234>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d031      	beq.n	8003478 <HAL_DMA_DeInit+0x174>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a48      	ldr	r2, [pc, #288]	; (800353c <HAL_DMA_DeInit+0x238>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d02c      	beq.n	8003478 <HAL_DMA_DeInit+0x174>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a47      	ldr	r2, [pc, #284]	; (8003540 <HAL_DMA_DeInit+0x23c>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d027      	beq.n	8003478 <HAL_DMA_DeInit+0x174>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a45      	ldr	r2, [pc, #276]	; (8003544 <HAL_DMA_DeInit+0x240>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d022      	beq.n	8003478 <HAL_DMA_DeInit+0x174>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a44      	ldr	r2, [pc, #272]	; (8003548 <HAL_DMA_DeInit+0x244>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d01d      	beq.n	8003478 <HAL_DMA_DeInit+0x174>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a42      	ldr	r2, [pc, #264]	; (800354c <HAL_DMA_DeInit+0x248>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d018      	beq.n	8003478 <HAL_DMA_DeInit+0x174>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a41      	ldr	r2, [pc, #260]	; (8003550 <HAL_DMA_DeInit+0x24c>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d013      	beq.n	8003478 <HAL_DMA_DeInit+0x174>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a3f      	ldr	r2, [pc, #252]	; (8003554 <HAL_DMA_DeInit+0x250>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d00e      	beq.n	8003478 <HAL_DMA_DeInit+0x174>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a3e      	ldr	r2, [pc, #248]	; (8003558 <HAL_DMA_DeInit+0x254>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d009      	beq.n	8003478 <HAL_DMA_DeInit+0x174>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a3c      	ldr	r2, [pc, #240]	; (800355c <HAL_DMA_DeInit+0x258>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d004      	beq.n	8003478 <HAL_DMA_DeInit+0x174>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a3b      	ldr	r2, [pc, #236]	; (8003560 <HAL_DMA_DeInit+0x25c>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d101      	bne.n	800347c <HAL_DMA_DeInit+0x178>
 8003478:	2301      	movs	r3, #1
 800347a:	e000      	b.n	800347e <HAL_DMA_DeInit+0x17a>
 800347c:	2300      	movs	r3, #0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d025      	beq.n	80034ce <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2200      	movs	r2, #0
 8003488:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2200      	movs	r2, #0
 8003490:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2200      	movs	r2, #0
 8003498:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2200      	movs	r2, #0
 80034a0:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2200      	movs	r2, #0
 80034a8:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2221      	movs	r2, #33	; 0x21
 80034b0:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f001 fc34 	bl	8004d20 <DMA_CalcBaseAndBitshift>
 80034b8:	4603      	mov	r3, r0
 80034ba:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034c0:	f003 031f 	and.w	r3, r3, #31
 80034c4:	223f      	movs	r2, #63	; 0x3f
 80034c6:	409a      	lsls	r2, r3
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	609a      	str	r2, [r3, #8]
 80034cc:	e081      	b.n	80035d2 <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a24      	ldr	r2, [pc, #144]	; (8003564 <HAL_DMA_DeInit+0x260>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d022      	beq.n	800351e <HAL_DMA_DeInit+0x21a>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a22      	ldr	r2, [pc, #136]	; (8003568 <HAL_DMA_DeInit+0x264>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d01d      	beq.n	800351e <HAL_DMA_DeInit+0x21a>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a21      	ldr	r2, [pc, #132]	; (800356c <HAL_DMA_DeInit+0x268>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d018      	beq.n	800351e <HAL_DMA_DeInit+0x21a>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a1f      	ldr	r2, [pc, #124]	; (8003570 <HAL_DMA_DeInit+0x26c>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d013      	beq.n	800351e <HAL_DMA_DeInit+0x21a>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a1e      	ldr	r2, [pc, #120]	; (8003574 <HAL_DMA_DeInit+0x270>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d00e      	beq.n	800351e <HAL_DMA_DeInit+0x21a>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a1c      	ldr	r2, [pc, #112]	; (8003578 <HAL_DMA_DeInit+0x274>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d009      	beq.n	800351e <HAL_DMA_DeInit+0x21a>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a1b      	ldr	r2, [pc, #108]	; (800357c <HAL_DMA_DeInit+0x278>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d004      	beq.n	800351e <HAL_DMA_DeInit+0x21a>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a19      	ldr	r2, [pc, #100]	; (8003580 <HAL_DMA_DeInit+0x27c>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d132      	bne.n	8003584 <HAL_DMA_DeInit+0x280>
 800351e:	2301      	movs	r3, #1
 8003520:	e031      	b.n	8003586 <HAL_DMA_DeInit+0x282>
 8003522:	bf00      	nop
 8003524:	40020010 	.word	0x40020010
 8003528:	40020028 	.word	0x40020028
 800352c:	40020040 	.word	0x40020040
 8003530:	40020058 	.word	0x40020058
 8003534:	40020070 	.word	0x40020070
 8003538:	40020088 	.word	0x40020088
 800353c:	400200a0 	.word	0x400200a0
 8003540:	400200b8 	.word	0x400200b8
 8003544:	40020410 	.word	0x40020410
 8003548:	40020428 	.word	0x40020428
 800354c:	40020440 	.word	0x40020440
 8003550:	40020458 	.word	0x40020458
 8003554:	40020470 	.word	0x40020470
 8003558:	40020488 	.word	0x40020488
 800355c:	400204a0 	.word	0x400204a0
 8003560:	400204b8 	.word	0x400204b8
 8003564:	58025408 	.word	0x58025408
 8003568:	5802541c 	.word	0x5802541c
 800356c:	58025430 	.word	0x58025430
 8003570:	58025444 	.word	0x58025444
 8003574:	58025458 	.word	0x58025458
 8003578:	5802546c 	.word	0x5802546c
 800357c:	58025480 	.word	0x58025480
 8003580:	58025494 	.word	0x58025494
 8003584:	2300      	movs	r3, #0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d021      	beq.n	80035ce <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	2200      	movs	r2, #0
 8003590:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2200      	movs	r2, #0
 8003598:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2200      	movs	r2, #0
 80035a0:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	2200      	movs	r2, #0
 80035a8:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2200      	movs	r2, #0
 80035b0:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f001 fbb4 	bl	8004d20 <DMA_CalcBaseAndBitshift>
 80035b8:	4603      	mov	r3, r0
 80035ba:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035c0:	f003 031f 	and.w	r3, r3, #31
 80035c4:	2201      	movs	r2, #1
 80035c6:	409a      	lsls	r2, r3
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	605a      	str	r2, [r3, #4]
 80035cc:	e001      	b.n	80035d2 <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e04a      	b.n	8003668 <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f001 fcd2 	bl	8004f7c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d008      	beq.n	80035f2 <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035e4:	2200      	movs	r2, #0
 80035e6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80035f0:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00f      	beq.n	800361a <HAL_DMA_DeInit+0x316>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	2b08      	cmp	r3, #8
 8003600:	d80b      	bhi.n	800361a <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f001 fd54 	bl	80050b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800360c:	2200      	movs	r2, #0
 800360e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003618:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	671a      	str	r2, [r3, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	675a      	str	r2, [r3, #116]	; 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback     = NULL;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback      = NULL;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback      = NULL;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003666:	2300      	movs	r3, #0
}
 8003668:	4618      	mov	r0, r3
 800366a:	3710      	adds	r7, #16
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}

08003670 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	607a      	str	r2, [r7, #4]
 800367c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800367e:	2300      	movs	r3, #0
 8003680:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d101      	bne.n	800368c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e22b      	b.n	8003ae4 <HAL_DMA_Start_IT+0x474>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003692:	2b01      	cmp	r3, #1
 8003694:	d101      	bne.n	800369a <HAL_DMA_Start_IT+0x2a>
 8003696:	2302      	movs	r3, #2
 8003698:	e224      	b.n	8003ae4 <HAL_DMA_Start_IT+0x474>
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2201      	movs	r2, #1
 800369e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	f040 820f 	bne.w	8003ace <HAL_DMA_Start_IT+0x45e>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2202      	movs	r2, #2
 80036b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2200      	movs	r2, #0
 80036bc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a68      	ldr	r2, [pc, #416]	; (8003864 <HAL_DMA_Start_IT+0x1f4>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d04a      	beq.n	800375e <HAL_DMA_Start_IT+0xee>
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a66      	ldr	r2, [pc, #408]	; (8003868 <HAL_DMA_Start_IT+0x1f8>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d045      	beq.n	800375e <HAL_DMA_Start_IT+0xee>
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a65      	ldr	r2, [pc, #404]	; (800386c <HAL_DMA_Start_IT+0x1fc>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d040      	beq.n	800375e <HAL_DMA_Start_IT+0xee>
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a63      	ldr	r2, [pc, #396]	; (8003870 <HAL_DMA_Start_IT+0x200>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d03b      	beq.n	800375e <HAL_DMA_Start_IT+0xee>
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a62      	ldr	r2, [pc, #392]	; (8003874 <HAL_DMA_Start_IT+0x204>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d036      	beq.n	800375e <HAL_DMA_Start_IT+0xee>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a60      	ldr	r2, [pc, #384]	; (8003878 <HAL_DMA_Start_IT+0x208>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d031      	beq.n	800375e <HAL_DMA_Start_IT+0xee>
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a5f      	ldr	r2, [pc, #380]	; (800387c <HAL_DMA_Start_IT+0x20c>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d02c      	beq.n	800375e <HAL_DMA_Start_IT+0xee>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a5d      	ldr	r2, [pc, #372]	; (8003880 <HAL_DMA_Start_IT+0x210>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d027      	beq.n	800375e <HAL_DMA_Start_IT+0xee>
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a5c      	ldr	r2, [pc, #368]	; (8003884 <HAL_DMA_Start_IT+0x214>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d022      	beq.n	800375e <HAL_DMA_Start_IT+0xee>
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a5a      	ldr	r2, [pc, #360]	; (8003888 <HAL_DMA_Start_IT+0x218>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d01d      	beq.n	800375e <HAL_DMA_Start_IT+0xee>
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a59      	ldr	r2, [pc, #356]	; (800388c <HAL_DMA_Start_IT+0x21c>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d018      	beq.n	800375e <HAL_DMA_Start_IT+0xee>
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a57      	ldr	r2, [pc, #348]	; (8003890 <HAL_DMA_Start_IT+0x220>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d013      	beq.n	800375e <HAL_DMA_Start_IT+0xee>
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a56      	ldr	r2, [pc, #344]	; (8003894 <HAL_DMA_Start_IT+0x224>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d00e      	beq.n	800375e <HAL_DMA_Start_IT+0xee>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a54      	ldr	r2, [pc, #336]	; (8003898 <HAL_DMA_Start_IT+0x228>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d009      	beq.n	800375e <HAL_DMA_Start_IT+0xee>
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a53      	ldr	r2, [pc, #332]	; (800389c <HAL_DMA_Start_IT+0x22c>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d004      	beq.n	800375e <HAL_DMA_Start_IT+0xee>
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a51      	ldr	r2, [pc, #324]	; (80038a0 <HAL_DMA_Start_IT+0x230>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d108      	bne.n	8003770 <HAL_DMA_Start_IT+0x100>
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f022 0201 	bic.w	r2, r2, #1
 800376c:	601a      	str	r2, [r3, #0]
 800376e:	e007      	b.n	8003780 <HAL_DMA_Start_IT+0x110>
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f022 0201 	bic.w	r2, r2, #1
 800377e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003780:	68f8      	ldr	r0, [r7, #12]
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	68b9      	ldr	r1, [r7, #8]
 8003788:	f001 f916 	bl	80049b8 <DMA_SetConfig>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a34      	ldr	r2, [pc, #208]	; (8003864 <HAL_DMA_Start_IT+0x1f4>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d04a      	beq.n	800382c <HAL_DMA_Start_IT+0x1bc>
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a33      	ldr	r2, [pc, #204]	; (8003868 <HAL_DMA_Start_IT+0x1f8>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d045      	beq.n	800382c <HAL_DMA_Start_IT+0x1bc>
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a31      	ldr	r2, [pc, #196]	; (800386c <HAL_DMA_Start_IT+0x1fc>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d040      	beq.n	800382c <HAL_DMA_Start_IT+0x1bc>
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a30      	ldr	r2, [pc, #192]	; (8003870 <HAL_DMA_Start_IT+0x200>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d03b      	beq.n	800382c <HAL_DMA_Start_IT+0x1bc>
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a2e      	ldr	r2, [pc, #184]	; (8003874 <HAL_DMA_Start_IT+0x204>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d036      	beq.n	800382c <HAL_DMA_Start_IT+0x1bc>
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a2d      	ldr	r2, [pc, #180]	; (8003878 <HAL_DMA_Start_IT+0x208>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d031      	beq.n	800382c <HAL_DMA_Start_IT+0x1bc>
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a2b      	ldr	r2, [pc, #172]	; (800387c <HAL_DMA_Start_IT+0x20c>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d02c      	beq.n	800382c <HAL_DMA_Start_IT+0x1bc>
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a2a      	ldr	r2, [pc, #168]	; (8003880 <HAL_DMA_Start_IT+0x210>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d027      	beq.n	800382c <HAL_DMA_Start_IT+0x1bc>
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a28      	ldr	r2, [pc, #160]	; (8003884 <HAL_DMA_Start_IT+0x214>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d022      	beq.n	800382c <HAL_DMA_Start_IT+0x1bc>
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a27      	ldr	r2, [pc, #156]	; (8003888 <HAL_DMA_Start_IT+0x218>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d01d      	beq.n	800382c <HAL_DMA_Start_IT+0x1bc>
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a25      	ldr	r2, [pc, #148]	; (800388c <HAL_DMA_Start_IT+0x21c>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d018      	beq.n	800382c <HAL_DMA_Start_IT+0x1bc>
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a24      	ldr	r2, [pc, #144]	; (8003890 <HAL_DMA_Start_IT+0x220>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d013      	beq.n	800382c <HAL_DMA_Start_IT+0x1bc>
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a22      	ldr	r2, [pc, #136]	; (8003894 <HAL_DMA_Start_IT+0x224>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d00e      	beq.n	800382c <HAL_DMA_Start_IT+0x1bc>
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a21      	ldr	r2, [pc, #132]	; (8003898 <HAL_DMA_Start_IT+0x228>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d009      	beq.n	800382c <HAL_DMA_Start_IT+0x1bc>
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a1f      	ldr	r2, [pc, #124]	; (800389c <HAL_DMA_Start_IT+0x22c>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d004      	beq.n	800382c <HAL_DMA_Start_IT+0x1bc>
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a1e      	ldr	r2, [pc, #120]	; (80038a0 <HAL_DMA_Start_IT+0x230>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d101      	bne.n	8003830 <HAL_DMA_Start_IT+0x1c0>
 800382c:	2301      	movs	r3, #1
 800382e:	e000      	b.n	8003832 <HAL_DMA_Start_IT+0x1c2>
 8003830:	2300      	movs	r3, #0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d036      	beq.n	80038a4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f023 021e 	bic.w	r2, r3, #30
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f042 0216 	orr.w	r2, r2, #22
 8003848:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384e:	2b00      	cmp	r3, #0
 8003850:	d043      	beq.n	80038da <HAL_DMA_Start_IT+0x26a>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f042 0208 	orr.w	r2, r2, #8
 8003860:	601a      	str	r2, [r3, #0]
 8003862:	e03a      	b.n	80038da <HAL_DMA_Start_IT+0x26a>
 8003864:	40020010 	.word	0x40020010
 8003868:	40020028 	.word	0x40020028
 800386c:	40020040 	.word	0x40020040
 8003870:	40020058 	.word	0x40020058
 8003874:	40020070 	.word	0x40020070
 8003878:	40020088 	.word	0x40020088
 800387c:	400200a0 	.word	0x400200a0
 8003880:	400200b8 	.word	0x400200b8
 8003884:	40020410 	.word	0x40020410
 8003888:	40020428 	.word	0x40020428
 800388c:	40020440 	.word	0x40020440
 8003890:	40020458 	.word	0x40020458
 8003894:	40020470 	.word	0x40020470
 8003898:	40020488 	.word	0x40020488
 800389c:	400204a0 	.word	0x400204a0
 80038a0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f023 020e 	bic.w	r2, r3, #14
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f042 020a 	orr.w	r2, r2, #10
 80038b6:	601a      	str	r2, [r3, #0]
      //TODO: added enable for mux request generator
      HAL_DMAEx_EnableMuxRequestGenerator(&hdma);
 80038b8:	f107 030c 	add.w	r3, r7, #12
 80038bc:	4618      	mov	r0, r3
 80038be:	f001 fd31 	bl	8005324 <HAL_DMAEx_EnableMuxRequestGenerator>
      if(hdma->XferHalfCpltCallback != NULL)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d007      	beq.n	80038da <HAL_DMA_Start_IT+0x26a>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f042 0204 	orr.w	r2, r2, #4
 80038d8:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a83      	ldr	r2, [pc, #524]	; (8003aec <HAL_DMA_Start_IT+0x47c>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d072      	beq.n	80039ca <HAL_DMA_Start_IT+0x35a>
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a81      	ldr	r2, [pc, #516]	; (8003af0 <HAL_DMA_Start_IT+0x480>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d06d      	beq.n	80039ca <HAL_DMA_Start_IT+0x35a>
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a80      	ldr	r2, [pc, #512]	; (8003af4 <HAL_DMA_Start_IT+0x484>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d068      	beq.n	80039ca <HAL_DMA_Start_IT+0x35a>
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a7e      	ldr	r2, [pc, #504]	; (8003af8 <HAL_DMA_Start_IT+0x488>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d063      	beq.n	80039ca <HAL_DMA_Start_IT+0x35a>
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a7d      	ldr	r2, [pc, #500]	; (8003afc <HAL_DMA_Start_IT+0x48c>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d05e      	beq.n	80039ca <HAL_DMA_Start_IT+0x35a>
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a7b      	ldr	r2, [pc, #492]	; (8003b00 <HAL_DMA_Start_IT+0x490>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d059      	beq.n	80039ca <HAL_DMA_Start_IT+0x35a>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a7a      	ldr	r2, [pc, #488]	; (8003b04 <HAL_DMA_Start_IT+0x494>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d054      	beq.n	80039ca <HAL_DMA_Start_IT+0x35a>
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a78      	ldr	r2, [pc, #480]	; (8003b08 <HAL_DMA_Start_IT+0x498>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d04f      	beq.n	80039ca <HAL_DMA_Start_IT+0x35a>
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a77      	ldr	r2, [pc, #476]	; (8003b0c <HAL_DMA_Start_IT+0x49c>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d04a      	beq.n	80039ca <HAL_DMA_Start_IT+0x35a>
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a75      	ldr	r2, [pc, #468]	; (8003b10 <HAL_DMA_Start_IT+0x4a0>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d045      	beq.n	80039ca <HAL_DMA_Start_IT+0x35a>
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a74      	ldr	r2, [pc, #464]	; (8003b14 <HAL_DMA_Start_IT+0x4a4>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d040      	beq.n	80039ca <HAL_DMA_Start_IT+0x35a>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a72      	ldr	r2, [pc, #456]	; (8003b18 <HAL_DMA_Start_IT+0x4a8>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d03b      	beq.n	80039ca <HAL_DMA_Start_IT+0x35a>
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a71      	ldr	r2, [pc, #452]	; (8003b1c <HAL_DMA_Start_IT+0x4ac>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d036      	beq.n	80039ca <HAL_DMA_Start_IT+0x35a>
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a6f      	ldr	r2, [pc, #444]	; (8003b20 <HAL_DMA_Start_IT+0x4b0>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d031      	beq.n	80039ca <HAL_DMA_Start_IT+0x35a>
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a6e      	ldr	r2, [pc, #440]	; (8003b24 <HAL_DMA_Start_IT+0x4b4>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d02c      	beq.n	80039ca <HAL_DMA_Start_IT+0x35a>
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a6c      	ldr	r2, [pc, #432]	; (8003b28 <HAL_DMA_Start_IT+0x4b8>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d027      	beq.n	80039ca <HAL_DMA_Start_IT+0x35a>
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a6b      	ldr	r2, [pc, #428]	; (8003b2c <HAL_DMA_Start_IT+0x4bc>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d022      	beq.n	80039ca <HAL_DMA_Start_IT+0x35a>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a69      	ldr	r2, [pc, #420]	; (8003b30 <HAL_DMA_Start_IT+0x4c0>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d01d      	beq.n	80039ca <HAL_DMA_Start_IT+0x35a>
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a68      	ldr	r2, [pc, #416]	; (8003b34 <HAL_DMA_Start_IT+0x4c4>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d018      	beq.n	80039ca <HAL_DMA_Start_IT+0x35a>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a66      	ldr	r2, [pc, #408]	; (8003b38 <HAL_DMA_Start_IT+0x4c8>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d013      	beq.n	80039ca <HAL_DMA_Start_IT+0x35a>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a65      	ldr	r2, [pc, #404]	; (8003b3c <HAL_DMA_Start_IT+0x4cc>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d00e      	beq.n	80039ca <HAL_DMA_Start_IT+0x35a>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a63      	ldr	r2, [pc, #396]	; (8003b40 <HAL_DMA_Start_IT+0x4d0>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d009      	beq.n	80039ca <HAL_DMA_Start_IT+0x35a>
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a62      	ldr	r2, [pc, #392]	; (8003b44 <HAL_DMA_Start_IT+0x4d4>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d004      	beq.n	80039ca <HAL_DMA_Start_IT+0x35a>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a60      	ldr	r2, [pc, #384]	; (8003b48 <HAL_DMA_Start_IT+0x4d8>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d101      	bne.n	80039ce <HAL_DMA_Start_IT+0x35e>
 80039ca:	2301      	movs	r3, #1
 80039cc:	e000      	b.n	80039d0 <HAL_DMA_Start_IT+0x360>
 80039ce:	2300      	movs	r3, #0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d01a      	beq.n	8003a0a <HAL_DMA_Start_IT+0x39a>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d007      	beq.n	80039f2 <HAL_DMA_Start_IT+0x382>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039f0:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d007      	beq.n	8003a0a <HAL_DMA_Start_IT+0x39a>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a08:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a37      	ldr	r2, [pc, #220]	; (8003aec <HAL_DMA_Start_IT+0x47c>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d04a      	beq.n	8003aaa <HAL_DMA_Start_IT+0x43a>
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a35      	ldr	r2, [pc, #212]	; (8003af0 <HAL_DMA_Start_IT+0x480>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d045      	beq.n	8003aaa <HAL_DMA_Start_IT+0x43a>
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a34      	ldr	r2, [pc, #208]	; (8003af4 <HAL_DMA_Start_IT+0x484>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d040      	beq.n	8003aaa <HAL_DMA_Start_IT+0x43a>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a32      	ldr	r2, [pc, #200]	; (8003af8 <HAL_DMA_Start_IT+0x488>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d03b      	beq.n	8003aaa <HAL_DMA_Start_IT+0x43a>
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a31      	ldr	r2, [pc, #196]	; (8003afc <HAL_DMA_Start_IT+0x48c>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d036      	beq.n	8003aaa <HAL_DMA_Start_IT+0x43a>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a2f      	ldr	r2, [pc, #188]	; (8003b00 <HAL_DMA_Start_IT+0x490>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d031      	beq.n	8003aaa <HAL_DMA_Start_IT+0x43a>
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a2e      	ldr	r2, [pc, #184]	; (8003b04 <HAL_DMA_Start_IT+0x494>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d02c      	beq.n	8003aaa <HAL_DMA_Start_IT+0x43a>
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a2c      	ldr	r2, [pc, #176]	; (8003b08 <HAL_DMA_Start_IT+0x498>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d027      	beq.n	8003aaa <HAL_DMA_Start_IT+0x43a>
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a2b      	ldr	r2, [pc, #172]	; (8003b0c <HAL_DMA_Start_IT+0x49c>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d022      	beq.n	8003aaa <HAL_DMA_Start_IT+0x43a>
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a29      	ldr	r2, [pc, #164]	; (8003b10 <HAL_DMA_Start_IT+0x4a0>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d01d      	beq.n	8003aaa <HAL_DMA_Start_IT+0x43a>
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a28      	ldr	r2, [pc, #160]	; (8003b14 <HAL_DMA_Start_IT+0x4a4>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d018      	beq.n	8003aaa <HAL_DMA_Start_IT+0x43a>
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a26      	ldr	r2, [pc, #152]	; (8003b18 <HAL_DMA_Start_IT+0x4a8>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d013      	beq.n	8003aaa <HAL_DMA_Start_IT+0x43a>
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a25      	ldr	r2, [pc, #148]	; (8003b1c <HAL_DMA_Start_IT+0x4ac>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d00e      	beq.n	8003aaa <HAL_DMA_Start_IT+0x43a>
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a23      	ldr	r2, [pc, #140]	; (8003b20 <HAL_DMA_Start_IT+0x4b0>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d009      	beq.n	8003aaa <HAL_DMA_Start_IT+0x43a>
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a22      	ldr	r2, [pc, #136]	; (8003b24 <HAL_DMA_Start_IT+0x4b4>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d004      	beq.n	8003aaa <HAL_DMA_Start_IT+0x43a>
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a20      	ldr	r2, [pc, #128]	; (8003b28 <HAL_DMA_Start_IT+0x4b8>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d108      	bne.n	8003abc <HAL_DMA_Start_IT+0x44c>
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f042 0201 	orr.w	r2, r2, #1
 8003ab8:	601a      	str	r2, [r3, #0]
 8003aba:	e012      	b.n	8003ae2 <HAL_DMA_Start_IT+0x472>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f042 0201 	orr.w	r2, r2, #1
 8003aca:	601a      	str	r2, [r3, #0]
 8003acc:	e009      	b.n	8003ae2 <HAL_DMA_Start_IT+0x472>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ad4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003ae2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3718      	adds	r7, #24
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	40020010 	.word	0x40020010
 8003af0:	40020028 	.word	0x40020028
 8003af4:	40020040 	.word	0x40020040
 8003af8:	40020058 	.word	0x40020058
 8003afc:	40020070 	.word	0x40020070
 8003b00:	40020088 	.word	0x40020088
 8003b04:	400200a0 	.word	0x400200a0
 8003b08:	400200b8 	.word	0x400200b8
 8003b0c:	40020410 	.word	0x40020410
 8003b10:	40020428 	.word	0x40020428
 8003b14:	40020440 	.word	0x40020440
 8003b18:	40020458 	.word	0x40020458
 8003b1c:	40020470 	.word	0x40020470
 8003b20:	40020488 	.word	0x40020488
 8003b24:	400204a0 	.word	0x400204a0
 8003b28:	400204b8 	.word	0x400204b8
 8003b2c:	58025408 	.word	0x58025408
 8003b30:	5802541c 	.word	0x5802541c
 8003b34:	58025430 	.word	0x58025430
 8003b38:	58025444 	.word	0x58025444
 8003b3c:	58025458 	.word	0x58025458
 8003b40:	5802546c 	.word	0x5802546c
 8003b44:	58025480 	.word	0x58025480
 8003b48:	58025494 	.word	0x58025494

08003b4c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b08a      	sub	sp, #40	; 0x28
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003b54:	2300      	movs	r3, #0
 8003b56:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003b58:	4b67      	ldr	r3, [pc, #412]	; (8003cf8 <HAL_DMA_IRQHandler+0x1ac>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a67      	ldr	r2, [pc, #412]	; (8003cfc <HAL_DMA_IRQHandler+0x1b0>)
 8003b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b62:	0a9b      	lsrs	r3, r3, #10
 8003b64:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b6a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b70:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003b72:	6a3b      	ldr	r3, [r7, #32]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a5f      	ldr	r2, [pc, #380]	; (8003d00 <HAL_DMA_IRQHandler+0x1b4>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d04a      	beq.n	8003c1e <HAL_DMA_IRQHandler+0xd2>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a5d      	ldr	r2, [pc, #372]	; (8003d04 <HAL_DMA_IRQHandler+0x1b8>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d045      	beq.n	8003c1e <HAL_DMA_IRQHandler+0xd2>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a5c      	ldr	r2, [pc, #368]	; (8003d08 <HAL_DMA_IRQHandler+0x1bc>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d040      	beq.n	8003c1e <HAL_DMA_IRQHandler+0xd2>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a5a      	ldr	r2, [pc, #360]	; (8003d0c <HAL_DMA_IRQHandler+0x1c0>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d03b      	beq.n	8003c1e <HAL_DMA_IRQHandler+0xd2>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a59      	ldr	r2, [pc, #356]	; (8003d10 <HAL_DMA_IRQHandler+0x1c4>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d036      	beq.n	8003c1e <HAL_DMA_IRQHandler+0xd2>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a57      	ldr	r2, [pc, #348]	; (8003d14 <HAL_DMA_IRQHandler+0x1c8>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d031      	beq.n	8003c1e <HAL_DMA_IRQHandler+0xd2>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a56      	ldr	r2, [pc, #344]	; (8003d18 <HAL_DMA_IRQHandler+0x1cc>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d02c      	beq.n	8003c1e <HAL_DMA_IRQHandler+0xd2>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a54      	ldr	r2, [pc, #336]	; (8003d1c <HAL_DMA_IRQHandler+0x1d0>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d027      	beq.n	8003c1e <HAL_DMA_IRQHandler+0xd2>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a53      	ldr	r2, [pc, #332]	; (8003d20 <HAL_DMA_IRQHandler+0x1d4>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d022      	beq.n	8003c1e <HAL_DMA_IRQHandler+0xd2>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a51      	ldr	r2, [pc, #324]	; (8003d24 <HAL_DMA_IRQHandler+0x1d8>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d01d      	beq.n	8003c1e <HAL_DMA_IRQHandler+0xd2>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a50      	ldr	r2, [pc, #320]	; (8003d28 <HAL_DMA_IRQHandler+0x1dc>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d018      	beq.n	8003c1e <HAL_DMA_IRQHandler+0xd2>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a4e      	ldr	r2, [pc, #312]	; (8003d2c <HAL_DMA_IRQHandler+0x1e0>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d013      	beq.n	8003c1e <HAL_DMA_IRQHandler+0xd2>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a4d      	ldr	r2, [pc, #308]	; (8003d30 <HAL_DMA_IRQHandler+0x1e4>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d00e      	beq.n	8003c1e <HAL_DMA_IRQHandler+0xd2>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a4b      	ldr	r2, [pc, #300]	; (8003d34 <HAL_DMA_IRQHandler+0x1e8>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d009      	beq.n	8003c1e <HAL_DMA_IRQHandler+0xd2>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a4a      	ldr	r2, [pc, #296]	; (8003d38 <HAL_DMA_IRQHandler+0x1ec>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d004      	beq.n	8003c1e <HAL_DMA_IRQHandler+0xd2>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a48      	ldr	r2, [pc, #288]	; (8003d3c <HAL_DMA_IRQHandler+0x1f0>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d101      	bne.n	8003c22 <HAL_DMA_IRQHandler+0xd6>
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e000      	b.n	8003c24 <HAL_DMA_IRQHandler+0xd8>
 8003c22:	2300      	movs	r3, #0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	f000 842b 	beq.w	8004480 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c2e:	f003 031f 	and.w	r3, r3, #31
 8003c32:	2208      	movs	r2, #8
 8003c34:	409a      	lsls	r2, r3
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	4013      	ands	r3, r2
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	f000 80a2 	beq.w	8003d84 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a2e      	ldr	r2, [pc, #184]	; (8003d00 <HAL_DMA_IRQHandler+0x1b4>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d04a      	beq.n	8003ce0 <HAL_DMA_IRQHandler+0x194>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a2d      	ldr	r2, [pc, #180]	; (8003d04 <HAL_DMA_IRQHandler+0x1b8>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d045      	beq.n	8003ce0 <HAL_DMA_IRQHandler+0x194>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a2b      	ldr	r2, [pc, #172]	; (8003d08 <HAL_DMA_IRQHandler+0x1bc>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d040      	beq.n	8003ce0 <HAL_DMA_IRQHandler+0x194>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a2a      	ldr	r2, [pc, #168]	; (8003d0c <HAL_DMA_IRQHandler+0x1c0>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d03b      	beq.n	8003ce0 <HAL_DMA_IRQHandler+0x194>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a28      	ldr	r2, [pc, #160]	; (8003d10 <HAL_DMA_IRQHandler+0x1c4>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d036      	beq.n	8003ce0 <HAL_DMA_IRQHandler+0x194>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a27      	ldr	r2, [pc, #156]	; (8003d14 <HAL_DMA_IRQHandler+0x1c8>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d031      	beq.n	8003ce0 <HAL_DMA_IRQHandler+0x194>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a25      	ldr	r2, [pc, #148]	; (8003d18 <HAL_DMA_IRQHandler+0x1cc>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d02c      	beq.n	8003ce0 <HAL_DMA_IRQHandler+0x194>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a24      	ldr	r2, [pc, #144]	; (8003d1c <HAL_DMA_IRQHandler+0x1d0>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d027      	beq.n	8003ce0 <HAL_DMA_IRQHandler+0x194>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a22      	ldr	r2, [pc, #136]	; (8003d20 <HAL_DMA_IRQHandler+0x1d4>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d022      	beq.n	8003ce0 <HAL_DMA_IRQHandler+0x194>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a21      	ldr	r2, [pc, #132]	; (8003d24 <HAL_DMA_IRQHandler+0x1d8>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d01d      	beq.n	8003ce0 <HAL_DMA_IRQHandler+0x194>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a1f      	ldr	r2, [pc, #124]	; (8003d28 <HAL_DMA_IRQHandler+0x1dc>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d018      	beq.n	8003ce0 <HAL_DMA_IRQHandler+0x194>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a1e      	ldr	r2, [pc, #120]	; (8003d2c <HAL_DMA_IRQHandler+0x1e0>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d013      	beq.n	8003ce0 <HAL_DMA_IRQHandler+0x194>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a1c      	ldr	r2, [pc, #112]	; (8003d30 <HAL_DMA_IRQHandler+0x1e4>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d00e      	beq.n	8003ce0 <HAL_DMA_IRQHandler+0x194>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a1b      	ldr	r2, [pc, #108]	; (8003d34 <HAL_DMA_IRQHandler+0x1e8>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d009      	beq.n	8003ce0 <HAL_DMA_IRQHandler+0x194>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a19      	ldr	r2, [pc, #100]	; (8003d38 <HAL_DMA_IRQHandler+0x1ec>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d004      	beq.n	8003ce0 <HAL_DMA_IRQHandler+0x194>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a18      	ldr	r2, [pc, #96]	; (8003d3c <HAL_DMA_IRQHandler+0x1f0>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d12f      	bne.n	8003d40 <HAL_DMA_IRQHandler+0x1f4>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0304 	and.w	r3, r3, #4
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	bf14      	ite	ne
 8003cee:	2301      	movne	r3, #1
 8003cf0:	2300      	moveq	r3, #0
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	e02e      	b.n	8003d54 <HAL_DMA_IRQHandler+0x208>
 8003cf6:	bf00      	nop
 8003cf8:	24000410 	.word	0x24000410
 8003cfc:	1b4e81b5 	.word	0x1b4e81b5
 8003d00:	40020010 	.word	0x40020010
 8003d04:	40020028 	.word	0x40020028
 8003d08:	40020040 	.word	0x40020040
 8003d0c:	40020058 	.word	0x40020058
 8003d10:	40020070 	.word	0x40020070
 8003d14:	40020088 	.word	0x40020088
 8003d18:	400200a0 	.word	0x400200a0
 8003d1c:	400200b8 	.word	0x400200b8
 8003d20:	40020410 	.word	0x40020410
 8003d24:	40020428 	.word	0x40020428
 8003d28:	40020440 	.word	0x40020440
 8003d2c:	40020458 	.word	0x40020458
 8003d30:	40020470 	.word	0x40020470
 8003d34:	40020488 	.word	0x40020488
 8003d38:	400204a0 	.word	0x400204a0
 8003d3c:	400204b8 	.word	0x400204b8
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0308 	and.w	r3, r3, #8
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	bf14      	ite	ne
 8003d4e:	2301      	movne	r3, #1
 8003d50:	2300      	moveq	r3, #0
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d015      	beq.n	8003d84 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f022 0204 	bic.w	r2, r2, #4
 8003d66:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d6c:	f003 031f 	and.w	r3, r3, #31
 8003d70:	2208      	movs	r2, #8
 8003d72:	409a      	lsls	r2, r3
 8003d74:	6a3b      	ldr	r3, [r7, #32]
 8003d76:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d7c:	f043 0201 	orr.w	r2, r3, #1
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d88:	f003 031f 	and.w	r3, r3, #31
 8003d8c:	69ba      	ldr	r2, [r7, #24]
 8003d8e:	fa22 f303 	lsr.w	r3, r2, r3
 8003d92:	f003 0301 	and.w	r3, r3, #1
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d06e      	beq.n	8003e78 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a69      	ldr	r2, [pc, #420]	; (8003f44 <HAL_DMA_IRQHandler+0x3f8>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d04a      	beq.n	8003e3a <HAL_DMA_IRQHandler+0x2ee>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a67      	ldr	r2, [pc, #412]	; (8003f48 <HAL_DMA_IRQHandler+0x3fc>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d045      	beq.n	8003e3a <HAL_DMA_IRQHandler+0x2ee>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a66      	ldr	r2, [pc, #408]	; (8003f4c <HAL_DMA_IRQHandler+0x400>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d040      	beq.n	8003e3a <HAL_DMA_IRQHandler+0x2ee>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a64      	ldr	r2, [pc, #400]	; (8003f50 <HAL_DMA_IRQHandler+0x404>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d03b      	beq.n	8003e3a <HAL_DMA_IRQHandler+0x2ee>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a63      	ldr	r2, [pc, #396]	; (8003f54 <HAL_DMA_IRQHandler+0x408>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d036      	beq.n	8003e3a <HAL_DMA_IRQHandler+0x2ee>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a61      	ldr	r2, [pc, #388]	; (8003f58 <HAL_DMA_IRQHandler+0x40c>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d031      	beq.n	8003e3a <HAL_DMA_IRQHandler+0x2ee>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a60      	ldr	r2, [pc, #384]	; (8003f5c <HAL_DMA_IRQHandler+0x410>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d02c      	beq.n	8003e3a <HAL_DMA_IRQHandler+0x2ee>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a5e      	ldr	r2, [pc, #376]	; (8003f60 <HAL_DMA_IRQHandler+0x414>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d027      	beq.n	8003e3a <HAL_DMA_IRQHandler+0x2ee>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a5d      	ldr	r2, [pc, #372]	; (8003f64 <HAL_DMA_IRQHandler+0x418>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d022      	beq.n	8003e3a <HAL_DMA_IRQHandler+0x2ee>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a5b      	ldr	r2, [pc, #364]	; (8003f68 <HAL_DMA_IRQHandler+0x41c>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d01d      	beq.n	8003e3a <HAL_DMA_IRQHandler+0x2ee>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a5a      	ldr	r2, [pc, #360]	; (8003f6c <HAL_DMA_IRQHandler+0x420>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d018      	beq.n	8003e3a <HAL_DMA_IRQHandler+0x2ee>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a58      	ldr	r2, [pc, #352]	; (8003f70 <HAL_DMA_IRQHandler+0x424>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d013      	beq.n	8003e3a <HAL_DMA_IRQHandler+0x2ee>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a57      	ldr	r2, [pc, #348]	; (8003f74 <HAL_DMA_IRQHandler+0x428>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d00e      	beq.n	8003e3a <HAL_DMA_IRQHandler+0x2ee>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a55      	ldr	r2, [pc, #340]	; (8003f78 <HAL_DMA_IRQHandler+0x42c>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d009      	beq.n	8003e3a <HAL_DMA_IRQHandler+0x2ee>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a54      	ldr	r2, [pc, #336]	; (8003f7c <HAL_DMA_IRQHandler+0x430>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d004      	beq.n	8003e3a <HAL_DMA_IRQHandler+0x2ee>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a52      	ldr	r2, [pc, #328]	; (8003f80 <HAL_DMA_IRQHandler+0x434>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d10a      	bne.n	8003e50 <HAL_DMA_IRQHandler+0x304>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	695b      	ldr	r3, [r3, #20]
 8003e40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	bf14      	ite	ne
 8003e48:	2301      	movne	r3, #1
 8003e4a:	2300      	moveq	r3, #0
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	e003      	b.n	8003e58 <HAL_DMA_IRQHandler+0x30c>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2300      	movs	r3, #0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d00d      	beq.n	8003e78 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e60:	f003 031f 	and.w	r3, r3, #31
 8003e64:	2201      	movs	r2, #1
 8003e66:	409a      	lsls	r2, r3
 8003e68:	6a3b      	ldr	r3, [r7, #32]
 8003e6a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e70:	f043 0202 	orr.w	r2, r3, #2
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e7c:	f003 031f 	and.w	r3, r3, #31
 8003e80:	2204      	movs	r2, #4
 8003e82:	409a      	lsls	r2, r3
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	4013      	ands	r3, r2
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	f000 808f 	beq.w	8003fac <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a2c      	ldr	r2, [pc, #176]	; (8003f44 <HAL_DMA_IRQHandler+0x3f8>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d04a      	beq.n	8003f2e <HAL_DMA_IRQHandler+0x3e2>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a2a      	ldr	r2, [pc, #168]	; (8003f48 <HAL_DMA_IRQHandler+0x3fc>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d045      	beq.n	8003f2e <HAL_DMA_IRQHandler+0x3e2>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a29      	ldr	r2, [pc, #164]	; (8003f4c <HAL_DMA_IRQHandler+0x400>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d040      	beq.n	8003f2e <HAL_DMA_IRQHandler+0x3e2>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a27      	ldr	r2, [pc, #156]	; (8003f50 <HAL_DMA_IRQHandler+0x404>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d03b      	beq.n	8003f2e <HAL_DMA_IRQHandler+0x3e2>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a26      	ldr	r2, [pc, #152]	; (8003f54 <HAL_DMA_IRQHandler+0x408>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d036      	beq.n	8003f2e <HAL_DMA_IRQHandler+0x3e2>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a24      	ldr	r2, [pc, #144]	; (8003f58 <HAL_DMA_IRQHandler+0x40c>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d031      	beq.n	8003f2e <HAL_DMA_IRQHandler+0x3e2>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a23      	ldr	r2, [pc, #140]	; (8003f5c <HAL_DMA_IRQHandler+0x410>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d02c      	beq.n	8003f2e <HAL_DMA_IRQHandler+0x3e2>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a21      	ldr	r2, [pc, #132]	; (8003f60 <HAL_DMA_IRQHandler+0x414>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d027      	beq.n	8003f2e <HAL_DMA_IRQHandler+0x3e2>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a20      	ldr	r2, [pc, #128]	; (8003f64 <HAL_DMA_IRQHandler+0x418>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d022      	beq.n	8003f2e <HAL_DMA_IRQHandler+0x3e2>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a1e      	ldr	r2, [pc, #120]	; (8003f68 <HAL_DMA_IRQHandler+0x41c>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d01d      	beq.n	8003f2e <HAL_DMA_IRQHandler+0x3e2>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a1d      	ldr	r2, [pc, #116]	; (8003f6c <HAL_DMA_IRQHandler+0x420>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d018      	beq.n	8003f2e <HAL_DMA_IRQHandler+0x3e2>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a1b      	ldr	r2, [pc, #108]	; (8003f70 <HAL_DMA_IRQHandler+0x424>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d013      	beq.n	8003f2e <HAL_DMA_IRQHandler+0x3e2>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a1a      	ldr	r2, [pc, #104]	; (8003f74 <HAL_DMA_IRQHandler+0x428>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d00e      	beq.n	8003f2e <HAL_DMA_IRQHandler+0x3e2>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a18      	ldr	r2, [pc, #96]	; (8003f78 <HAL_DMA_IRQHandler+0x42c>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d009      	beq.n	8003f2e <HAL_DMA_IRQHandler+0x3e2>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a17      	ldr	r2, [pc, #92]	; (8003f7c <HAL_DMA_IRQHandler+0x430>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d004      	beq.n	8003f2e <HAL_DMA_IRQHandler+0x3e2>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a15      	ldr	r2, [pc, #84]	; (8003f80 <HAL_DMA_IRQHandler+0x434>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d12a      	bne.n	8003f84 <HAL_DMA_IRQHandler+0x438>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0302 	and.w	r3, r3, #2
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	bf14      	ite	ne
 8003f3c:	2301      	movne	r3, #1
 8003f3e:	2300      	moveq	r3, #0
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	e023      	b.n	8003f8c <HAL_DMA_IRQHandler+0x440>
 8003f44:	40020010 	.word	0x40020010
 8003f48:	40020028 	.word	0x40020028
 8003f4c:	40020040 	.word	0x40020040
 8003f50:	40020058 	.word	0x40020058
 8003f54:	40020070 	.word	0x40020070
 8003f58:	40020088 	.word	0x40020088
 8003f5c:	400200a0 	.word	0x400200a0
 8003f60:	400200b8 	.word	0x400200b8
 8003f64:	40020410 	.word	0x40020410
 8003f68:	40020428 	.word	0x40020428
 8003f6c:	40020440 	.word	0x40020440
 8003f70:	40020458 	.word	0x40020458
 8003f74:	40020470 	.word	0x40020470
 8003f78:	40020488 	.word	0x40020488
 8003f7c:	400204a0 	.word	0x400204a0
 8003f80:	400204b8 	.word	0x400204b8
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d00d      	beq.n	8003fac <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f94:	f003 031f 	and.w	r3, r3, #31
 8003f98:	2204      	movs	r2, #4
 8003f9a:	409a      	lsls	r2, r3
 8003f9c:	6a3b      	ldr	r3, [r7, #32]
 8003f9e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fa4:	f043 0204 	orr.w	r2, r3, #4
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fb0:	f003 031f 	and.w	r3, r3, #31
 8003fb4:	2210      	movs	r2, #16
 8003fb6:	409a      	lsls	r2, r3
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	4013      	ands	r3, r2
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	f000 80a6 	beq.w	800410e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a85      	ldr	r2, [pc, #532]	; (80041dc <HAL_DMA_IRQHandler+0x690>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d04a      	beq.n	8004062 <HAL_DMA_IRQHandler+0x516>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a83      	ldr	r2, [pc, #524]	; (80041e0 <HAL_DMA_IRQHandler+0x694>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d045      	beq.n	8004062 <HAL_DMA_IRQHandler+0x516>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a82      	ldr	r2, [pc, #520]	; (80041e4 <HAL_DMA_IRQHandler+0x698>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d040      	beq.n	8004062 <HAL_DMA_IRQHandler+0x516>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a80      	ldr	r2, [pc, #512]	; (80041e8 <HAL_DMA_IRQHandler+0x69c>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d03b      	beq.n	8004062 <HAL_DMA_IRQHandler+0x516>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a7f      	ldr	r2, [pc, #508]	; (80041ec <HAL_DMA_IRQHandler+0x6a0>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d036      	beq.n	8004062 <HAL_DMA_IRQHandler+0x516>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a7d      	ldr	r2, [pc, #500]	; (80041f0 <HAL_DMA_IRQHandler+0x6a4>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d031      	beq.n	8004062 <HAL_DMA_IRQHandler+0x516>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a7c      	ldr	r2, [pc, #496]	; (80041f4 <HAL_DMA_IRQHandler+0x6a8>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d02c      	beq.n	8004062 <HAL_DMA_IRQHandler+0x516>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a7a      	ldr	r2, [pc, #488]	; (80041f8 <HAL_DMA_IRQHandler+0x6ac>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d027      	beq.n	8004062 <HAL_DMA_IRQHandler+0x516>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a79      	ldr	r2, [pc, #484]	; (80041fc <HAL_DMA_IRQHandler+0x6b0>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d022      	beq.n	8004062 <HAL_DMA_IRQHandler+0x516>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a77      	ldr	r2, [pc, #476]	; (8004200 <HAL_DMA_IRQHandler+0x6b4>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d01d      	beq.n	8004062 <HAL_DMA_IRQHandler+0x516>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a76      	ldr	r2, [pc, #472]	; (8004204 <HAL_DMA_IRQHandler+0x6b8>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d018      	beq.n	8004062 <HAL_DMA_IRQHandler+0x516>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a74      	ldr	r2, [pc, #464]	; (8004208 <HAL_DMA_IRQHandler+0x6bc>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d013      	beq.n	8004062 <HAL_DMA_IRQHandler+0x516>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a73      	ldr	r2, [pc, #460]	; (800420c <HAL_DMA_IRQHandler+0x6c0>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d00e      	beq.n	8004062 <HAL_DMA_IRQHandler+0x516>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a71      	ldr	r2, [pc, #452]	; (8004210 <HAL_DMA_IRQHandler+0x6c4>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d009      	beq.n	8004062 <HAL_DMA_IRQHandler+0x516>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a70      	ldr	r2, [pc, #448]	; (8004214 <HAL_DMA_IRQHandler+0x6c8>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d004      	beq.n	8004062 <HAL_DMA_IRQHandler+0x516>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a6e      	ldr	r2, [pc, #440]	; (8004218 <HAL_DMA_IRQHandler+0x6cc>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d10a      	bne.n	8004078 <HAL_DMA_IRQHandler+0x52c>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0308 	and.w	r3, r3, #8
 800406c:	2b00      	cmp	r3, #0
 800406e:	bf14      	ite	ne
 8004070:	2301      	movne	r3, #1
 8004072:	2300      	moveq	r3, #0
 8004074:	b2db      	uxtb	r3, r3
 8004076:	e009      	b.n	800408c <HAL_DMA_IRQHandler+0x540>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0304 	and.w	r3, r3, #4
 8004082:	2b00      	cmp	r3, #0
 8004084:	bf14      	ite	ne
 8004086:	2301      	movne	r3, #1
 8004088:	2300      	moveq	r3, #0
 800408a:	b2db      	uxtb	r3, r3
 800408c:	2b00      	cmp	r3, #0
 800408e:	d03e      	beq.n	800410e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004094:	f003 031f 	and.w	r3, r3, #31
 8004098:	2210      	movs	r2, #16
 800409a:	409a      	lsls	r2, r3
 800409c:	6a3b      	ldr	r3, [r7, #32]
 800409e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d018      	beq.n	80040e0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d108      	bne.n	80040ce <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d024      	beq.n	800410e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	4798      	blx	r3
 80040cc:	e01f      	b.n	800410e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d01b      	beq.n	800410e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	4798      	blx	r3
 80040de:	e016      	b.n	800410e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d107      	bne.n	80040fe <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f022 0208 	bic.w	r2, r2, #8
 80040fc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004102:	2b00      	cmp	r3, #0
 8004104:	d003      	beq.n	800410e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004112:	f003 031f 	and.w	r3, r3, #31
 8004116:	2220      	movs	r2, #32
 8004118:	409a      	lsls	r2, r3
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	4013      	ands	r3, r2
 800411e:	2b00      	cmp	r3, #0
 8004120:	f000 8110 	beq.w	8004344 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a2c      	ldr	r2, [pc, #176]	; (80041dc <HAL_DMA_IRQHandler+0x690>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d04a      	beq.n	80041c4 <HAL_DMA_IRQHandler+0x678>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a2b      	ldr	r2, [pc, #172]	; (80041e0 <HAL_DMA_IRQHandler+0x694>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d045      	beq.n	80041c4 <HAL_DMA_IRQHandler+0x678>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a29      	ldr	r2, [pc, #164]	; (80041e4 <HAL_DMA_IRQHandler+0x698>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d040      	beq.n	80041c4 <HAL_DMA_IRQHandler+0x678>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a28      	ldr	r2, [pc, #160]	; (80041e8 <HAL_DMA_IRQHandler+0x69c>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d03b      	beq.n	80041c4 <HAL_DMA_IRQHandler+0x678>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a26      	ldr	r2, [pc, #152]	; (80041ec <HAL_DMA_IRQHandler+0x6a0>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d036      	beq.n	80041c4 <HAL_DMA_IRQHandler+0x678>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a25      	ldr	r2, [pc, #148]	; (80041f0 <HAL_DMA_IRQHandler+0x6a4>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d031      	beq.n	80041c4 <HAL_DMA_IRQHandler+0x678>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a23      	ldr	r2, [pc, #140]	; (80041f4 <HAL_DMA_IRQHandler+0x6a8>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d02c      	beq.n	80041c4 <HAL_DMA_IRQHandler+0x678>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a22      	ldr	r2, [pc, #136]	; (80041f8 <HAL_DMA_IRQHandler+0x6ac>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d027      	beq.n	80041c4 <HAL_DMA_IRQHandler+0x678>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a20      	ldr	r2, [pc, #128]	; (80041fc <HAL_DMA_IRQHandler+0x6b0>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d022      	beq.n	80041c4 <HAL_DMA_IRQHandler+0x678>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a1f      	ldr	r2, [pc, #124]	; (8004200 <HAL_DMA_IRQHandler+0x6b4>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d01d      	beq.n	80041c4 <HAL_DMA_IRQHandler+0x678>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a1d      	ldr	r2, [pc, #116]	; (8004204 <HAL_DMA_IRQHandler+0x6b8>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d018      	beq.n	80041c4 <HAL_DMA_IRQHandler+0x678>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a1c      	ldr	r2, [pc, #112]	; (8004208 <HAL_DMA_IRQHandler+0x6bc>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d013      	beq.n	80041c4 <HAL_DMA_IRQHandler+0x678>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a1a      	ldr	r2, [pc, #104]	; (800420c <HAL_DMA_IRQHandler+0x6c0>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d00e      	beq.n	80041c4 <HAL_DMA_IRQHandler+0x678>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a19      	ldr	r2, [pc, #100]	; (8004210 <HAL_DMA_IRQHandler+0x6c4>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d009      	beq.n	80041c4 <HAL_DMA_IRQHandler+0x678>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a17      	ldr	r2, [pc, #92]	; (8004214 <HAL_DMA_IRQHandler+0x6c8>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d004      	beq.n	80041c4 <HAL_DMA_IRQHandler+0x678>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a16      	ldr	r2, [pc, #88]	; (8004218 <HAL_DMA_IRQHandler+0x6cc>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d12b      	bne.n	800421c <HAL_DMA_IRQHandler+0x6d0>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0310 	and.w	r3, r3, #16
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	bf14      	ite	ne
 80041d2:	2301      	movne	r3, #1
 80041d4:	2300      	moveq	r3, #0
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	e02a      	b.n	8004230 <HAL_DMA_IRQHandler+0x6e4>
 80041da:	bf00      	nop
 80041dc:	40020010 	.word	0x40020010
 80041e0:	40020028 	.word	0x40020028
 80041e4:	40020040 	.word	0x40020040
 80041e8:	40020058 	.word	0x40020058
 80041ec:	40020070 	.word	0x40020070
 80041f0:	40020088 	.word	0x40020088
 80041f4:	400200a0 	.word	0x400200a0
 80041f8:	400200b8 	.word	0x400200b8
 80041fc:	40020410 	.word	0x40020410
 8004200:	40020428 	.word	0x40020428
 8004204:	40020440 	.word	0x40020440
 8004208:	40020458 	.word	0x40020458
 800420c:	40020470 	.word	0x40020470
 8004210:	40020488 	.word	0x40020488
 8004214:	400204a0 	.word	0x400204a0
 8004218:	400204b8 	.word	0x400204b8
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0302 	and.w	r3, r3, #2
 8004226:	2b00      	cmp	r3, #0
 8004228:	bf14      	ite	ne
 800422a:	2301      	movne	r3, #1
 800422c:	2300      	moveq	r3, #0
 800422e:	b2db      	uxtb	r3, r3
 8004230:	2b00      	cmp	r3, #0
 8004232:	f000 8087 	beq.w	8004344 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800423a:	f003 031f 	and.w	r3, r3, #31
 800423e:	2220      	movs	r2, #32
 8004240:	409a      	lsls	r2, r3
 8004242:	6a3b      	ldr	r3, [r7, #32]
 8004244:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800424c:	b2db      	uxtb	r3, r3
 800424e:	2b04      	cmp	r3, #4
 8004250:	d139      	bne.n	80042c6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f022 0216 	bic.w	r2, r2, #22
 8004260:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	695a      	ldr	r2, [r3, #20]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004270:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004276:	2b00      	cmp	r3, #0
 8004278:	d103      	bne.n	8004282 <HAL_DMA_IRQHandler+0x736>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800427e:	2b00      	cmp	r3, #0
 8004280:	d007      	beq.n	8004292 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f022 0208 	bic.w	r2, r2, #8
 8004290:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004296:	f003 031f 	and.w	r3, r3, #31
 800429a:	223f      	movs	r2, #63	; 0x3f
 800429c:	409a      	lsls	r2, r3
 800429e:	6a3b      	ldr	r3, [r7, #32]
 80042a0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2201      	movs	r2, #1
 80042a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	f000 834a 	beq.w	8004950 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	4798      	blx	r3
          }
          return;
 80042c4:	e344      	b.n	8004950 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d018      	beq.n	8004306 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d108      	bne.n	80042f4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d02c      	beq.n	8004344 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	4798      	blx	r3
 80042f2:	e027      	b.n	8004344 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d023      	beq.n	8004344 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	4798      	blx	r3
 8004304:	e01e      	b.n	8004344 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004310:	2b00      	cmp	r3, #0
 8004312:	d10f      	bne.n	8004334 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f022 0210 	bic.w	r2, r2, #16
 8004322:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004338:	2b00      	cmp	r3, #0
 800433a:	d003      	beq.n	8004344 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004348:	2b00      	cmp	r3, #0
 800434a:	f000 8306 	beq.w	800495a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004352:	f003 0301 	and.w	r3, r3, #1
 8004356:	2b00      	cmp	r3, #0
 8004358:	f000 8088 	beq.w	800446c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2204      	movs	r2, #4
 8004360:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a7a      	ldr	r2, [pc, #488]	; (8004554 <HAL_DMA_IRQHandler+0xa08>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d04a      	beq.n	8004404 <HAL_DMA_IRQHandler+0x8b8>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a79      	ldr	r2, [pc, #484]	; (8004558 <HAL_DMA_IRQHandler+0xa0c>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d045      	beq.n	8004404 <HAL_DMA_IRQHandler+0x8b8>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a77      	ldr	r2, [pc, #476]	; (800455c <HAL_DMA_IRQHandler+0xa10>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d040      	beq.n	8004404 <HAL_DMA_IRQHandler+0x8b8>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a76      	ldr	r2, [pc, #472]	; (8004560 <HAL_DMA_IRQHandler+0xa14>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d03b      	beq.n	8004404 <HAL_DMA_IRQHandler+0x8b8>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a74      	ldr	r2, [pc, #464]	; (8004564 <HAL_DMA_IRQHandler+0xa18>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d036      	beq.n	8004404 <HAL_DMA_IRQHandler+0x8b8>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a73      	ldr	r2, [pc, #460]	; (8004568 <HAL_DMA_IRQHandler+0xa1c>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d031      	beq.n	8004404 <HAL_DMA_IRQHandler+0x8b8>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a71      	ldr	r2, [pc, #452]	; (800456c <HAL_DMA_IRQHandler+0xa20>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d02c      	beq.n	8004404 <HAL_DMA_IRQHandler+0x8b8>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a70      	ldr	r2, [pc, #448]	; (8004570 <HAL_DMA_IRQHandler+0xa24>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d027      	beq.n	8004404 <HAL_DMA_IRQHandler+0x8b8>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a6e      	ldr	r2, [pc, #440]	; (8004574 <HAL_DMA_IRQHandler+0xa28>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d022      	beq.n	8004404 <HAL_DMA_IRQHandler+0x8b8>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a6d      	ldr	r2, [pc, #436]	; (8004578 <HAL_DMA_IRQHandler+0xa2c>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d01d      	beq.n	8004404 <HAL_DMA_IRQHandler+0x8b8>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a6b      	ldr	r2, [pc, #428]	; (800457c <HAL_DMA_IRQHandler+0xa30>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d018      	beq.n	8004404 <HAL_DMA_IRQHandler+0x8b8>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a6a      	ldr	r2, [pc, #424]	; (8004580 <HAL_DMA_IRQHandler+0xa34>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d013      	beq.n	8004404 <HAL_DMA_IRQHandler+0x8b8>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a68      	ldr	r2, [pc, #416]	; (8004584 <HAL_DMA_IRQHandler+0xa38>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d00e      	beq.n	8004404 <HAL_DMA_IRQHandler+0x8b8>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a67      	ldr	r2, [pc, #412]	; (8004588 <HAL_DMA_IRQHandler+0xa3c>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d009      	beq.n	8004404 <HAL_DMA_IRQHandler+0x8b8>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a65      	ldr	r2, [pc, #404]	; (800458c <HAL_DMA_IRQHandler+0xa40>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d004      	beq.n	8004404 <HAL_DMA_IRQHandler+0x8b8>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a64      	ldr	r2, [pc, #400]	; (8004590 <HAL_DMA_IRQHandler+0xa44>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d108      	bne.n	8004416 <HAL_DMA_IRQHandler+0x8ca>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f022 0201 	bic.w	r2, r2, #1
 8004412:	601a      	str	r2, [r3, #0]
 8004414:	e007      	b.n	8004426 <HAL_DMA_IRQHandler+0x8da>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f022 0201 	bic.w	r2, r2, #1
 8004424:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	3301      	adds	r3, #1
 800442a:	60fb      	str	r3, [r7, #12]
 800442c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800442e:	429a      	cmp	r2, r3
 8004430:	d307      	bcc.n	8004442 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0301 	and.w	r3, r3, #1
 800443c:	2b00      	cmp	r3, #0
 800443e:	d1f2      	bne.n	8004426 <HAL_DMA_IRQHandler+0x8da>
 8004440:	e000      	b.n	8004444 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004442:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 0301 	and.w	r3, r3, #1
 800444e:	2b00      	cmp	r3, #0
 8004450:	d004      	beq.n	800445c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2203      	movs	r2, #3
 8004456:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800445a:	e003      	b.n	8004464 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004470:	2b00      	cmp	r3, #0
 8004472:	f000 8272 	beq.w	800495a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	4798      	blx	r3
 800447e:	e26c      	b.n	800495a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a43      	ldr	r2, [pc, #268]	; (8004594 <HAL_DMA_IRQHandler+0xa48>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d022      	beq.n	80044d0 <HAL_DMA_IRQHandler+0x984>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a42      	ldr	r2, [pc, #264]	; (8004598 <HAL_DMA_IRQHandler+0xa4c>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d01d      	beq.n	80044d0 <HAL_DMA_IRQHandler+0x984>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a40      	ldr	r2, [pc, #256]	; (800459c <HAL_DMA_IRQHandler+0xa50>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d018      	beq.n	80044d0 <HAL_DMA_IRQHandler+0x984>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a3f      	ldr	r2, [pc, #252]	; (80045a0 <HAL_DMA_IRQHandler+0xa54>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d013      	beq.n	80044d0 <HAL_DMA_IRQHandler+0x984>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a3d      	ldr	r2, [pc, #244]	; (80045a4 <HAL_DMA_IRQHandler+0xa58>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d00e      	beq.n	80044d0 <HAL_DMA_IRQHandler+0x984>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a3c      	ldr	r2, [pc, #240]	; (80045a8 <HAL_DMA_IRQHandler+0xa5c>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d009      	beq.n	80044d0 <HAL_DMA_IRQHandler+0x984>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a3a      	ldr	r2, [pc, #232]	; (80045ac <HAL_DMA_IRQHandler+0xa60>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d004      	beq.n	80044d0 <HAL_DMA_IRQHandler+0x984>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a39      	ldr	r2, [pc, #228]	; (80045b0 <HAL_DMA_IRQHandler+0xa64>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d101      	bne.n	80044d4 <HAL_DMA_IRQHandler+0x988>
 80044d0:	2301      	movs	r3, #1
 80044d2:	e000      	b.n	80044d6 <HAL_DMA_IRQHandler+0x98a>
 80044d4:	2300      	movs	r3, #0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	f000 823f 	beq.w	800495a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044e8:	f003 031f 	and.w	r3, r3, #31
 80044ec:	2204      	movs	r2, #4
 80044ee:	409a      	lsls	r2, r3
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	4013      	ands	r3, r2
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	f000 80cd 	beq.w	8004694 <HAL_DMA_IRQHandler+0xb48>
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	f003 0304 	and.w	r3, r3, #4
 8004500:	2b00      	cmp	r3, #0
 8004502:	f000 80c7 	beq.w	8004694 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800450a:	f003 031f 	and.w	r3, r3, #31
 800450e:	2204      	movs	r2, #4
 8004510:	409a      	lsls	r2, r3
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800451c:	2b00      	cmp	r3, #0
 800451e:	d049      	beq.n	80045b4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d109      	bne.n	800453e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800452e:	2b00      	cmp	r3, #0
 8004530:	f000 8210 	beq.w	8004954 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800453c:	e20a      	b.n	8004954 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004542:	2b00      	cmp	r3, #0
 8004544:	f000 8206 	beq.w	8004954 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004550:	e200      	b.n	8004954 <HAL_DMA_IRQHandler+0xe08>
 8004552:	bf00      	nop
 8004554:	40020010 	.word	0x40020010
 8004558:	40020028 	.word	0x40020028
 800455c:	40020040 	.word	0x40020040
 8004560:	40020058 	.word	0x40020058
 8004564:	40020070 	.word	0x40020070
 8004568:	40020088 	.word	0x40020088
 800456c:	400200a0 	.word	0x400200a0
 8004570:	400200b8 	.word	0x400200b8
 8004574:	40020410 	.word	0x40020410
 8004578:	40020428 	.word	0x40020428
 800457c:	40020440 	.word	0x40020440
 8004580:	40020458 	.word	0x40020458
 8004584:	40020470 	.word	0x40020470
 8004588:	40020488 	.word	0x40020488
 800458c:	400204a0 	.word	0x400204a0
 8004590:	400204b8 	.word	0x400204b8
 8004594:	58025408 	.word	0x58025408
 8004598:	5802541c 	.word	0x5802541c
 800459c:	58025430 	.word	0x58025430
 80045a0:	58025444 	.word	0x58025444
 80045a4:	58025458 	.word	0x58025458
 80045a8:	5802546c 	.word	0x5802546c
 80045ac:	58025480 	.word	0x58025480
 80045b0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	f003 0320 	and.w	r3, r3, #32
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d160      	bne.n	8004680 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a8c      	ldr	r2, [pc, #560]	; (80047f4 <HAL_DMA_IRQHandler+0xca8>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d04a      	beq.n	800465e <HAL_DMA_IRQHandler+0xb12>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a8a      	ldr	r2, [pc, #552]	; (80047f8 <HAL_DMA_IRQHandler+0xcac>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d045      	beq.n	800465e <HAL_DMA_IRQHandler+0xb12>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a89      	ldr	r2, [pc, #548]	; (80047fc <HAL_DMA_IRQHandler+0xcb0>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d040      	beq.n	800465e <HAL_DMA_IRQHandler+0xb12>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a87      	ldr	r2, [pc, #540]	; (8004800 <HAL_DMA_IRQHandler+0xcb4>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d03b      	beq.n	800465e <HAL_DMA_IRQHandler+0xb12>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a86      	ldr	r2, [pc, #536]	; (8004804 <HAL_DMA_IRQHandler+0xcb8>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d036      	beq.n	800465e <HAL_DMA_IRQHandler+0xb12>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a84      	ldr	r2, [pc, #528]	; (8004808 <HAL_DMA_IRQHandler+0xcbc>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d031      	beq.n	800465e <HAL_DMA_IRQHandler+0xb12>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a83      	ldr	r2, [pc, #524]	; (800480c <HAL_DMA_IRQHandler+0xcc0>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d02c      	beq.n	800465e <HAL_DMA_IRQHandler+0xb12>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a81      	ldr	r2, [pc, #516]	; (8004810 <HAL_DMA_IRQHandler+0xcc4>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d027      	beq.n	800465e <HAL_DMA_IRQHandler+0xb12>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a80      	ldr	r2, [pc, #512]	; (8004814 <HAL_DMA_IRQHandler+0xcc8>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d022      	beq.n	800465e <HAL_DMA_IRQHandler+0xb12>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a7e      	ldr	r2, [pc, #504]	; (8004818 <HAL_DMA_IRQHandler+0xccc>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d01d      	beq.n	800465e <HAL_DMA_IRQHandler+0xb12>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a7d      	ldr	r2, [pc, #500]	; (800481c <HAL_DMA_IRQHandler+0xcd0>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d018      	beq.n	800465e <HAL_DMA_IRQHandler+0xb12>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a7b      	ldr	r2, [pc, #492]	; (8004820 <HAL_DMA_IRQHandler+0xcd4>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d013      	beq.n	800465e <HAL_DMA_IRQHandler+0xb12>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a7a      	ldr	r2, [pc, #488]	; (8004824 <HAL_DMA_IRQHandler+0xcd8>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d00e      	beq.n	800465e <HAL_DMA_IRQHandler+0xb12>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a78      	ldr	r2, [pc, #480]	; (8004828 <HAL_DMA_IRQHandler+0xcdc>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d009      	beq.n	800465e <HAL_DMA_IRQHandler+0xb12>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a77      	ldr	r2, [pc, #476]	; (800482c <HAL_DMA_IRQHandler+0xce0>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d004      	beq.n	800465e <HAL_DMA_IRQHandler+0xb12>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a75      	ldr	r2, [pc, #468]	; (8004830 <HAL_DMA_IRQHandler+0xce4>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d108      	bne.n	8004670 <HAL_DMA_IRQHandler+0xb24>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f022 0208 	bic.w	r2, r2, #8
 800466c:	601a      	str	r2, [r3, #0]
 800466e:	e007      	b.n	8004680 <HAL_DMA_IRQHandler+0xb34>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f022 0204 	bic.w	r2, r2, #4
 800467e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004684:	2b00      	cmp	r3, #0
 8004686:	f000 8165 	beq.w	8004954 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004692:	e15f      	b.n	8004954 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004698:	f003 031f 	and.w	r3, r3, #31
 800469c:	2202      	movs	r2, #2
 800469e:	409a      	lsls	r2, r3
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	4013      	ands	r3, r2
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	f000 80c5 	beq.w	8004834 <HAL_DMA_IRQHandler+0xce8>
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	f003 0302 	and.w	r3, r3, #2
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	f000 80bf 	beq.w	8004834 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046ba:	f003 031f 	and.w	r3, r3, #31
 80046be:	2202      	movs	r2, #2
 80046c0:	409a      	lsls	r2, r3
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d018      	beq.n	8004702 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d109      	bne.n	80046ee <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046de:	2b00      	cmp	r3, #0
 80046e0:	f000 813a 	beq.w	8004958 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046ec:	e134      	b.n	8004958 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	f000 8130 	beq.w	8004958 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004700:	e12a      	b.n	8004958 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	f003 0320 	and.w	r3, r3, #32
 8004708:	2b00      	cmp	r3, #0
 800470a:	d168      	bne.n	80047de <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a38      	ldr	r2, [pc, #224]	; (80047f4 <HAL_DMA_IRQHandler+0xca8>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d04a      	beq.n	80047ac <HAL_DMA_IRQHandler+0xc60>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a37      	ldr	r2, [pc, #220]	; (80047f8 <HAL_DMA_IRQHandler+0xcac>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d045      	beq.n	80047ac <HAL_DMA_IRQHandler+0xc60>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a35      	ldr	r2, [pc, #212]	; (80047fc <HAL_DMA_IRQHandler+0xcb0>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d040      	beq.n	80047ac <HAL_DMA_IRQHandler+0xc60>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a34      	ldr	r2, [pc, #208]	; (8004800 <HAL_DMA_IRQHandler+0xcb4>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d03b      	beq.n	80047ac <HAL_DMA_IRQHandler+0xc60>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a32      	ldr	r2, [pc, #200]	; (8004804 <HAL_DMA_IRQHandler+0xcb8>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d036      	beq.n	80047ac <HAL_DMA_IRQHandler+0xc60>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a31      	ldr	r2, [pc, #196]	; (8004808 <HAL_DMA_IRQHandler+0xcbc>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d031      	beq.n	80047ac <HAL_DMA_IRQHandler+0xc60>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a2f      	ldr	r2, [pc, #188]	; (800480c <HAL_DMA_IRQHandler+0xcc0>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d02c      	beq.n	80047ac <HAL_DMA_IRQHandler+0xc60>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a2e      	ldr	r2, [pc, #184]	; (8004810 <HAL_DMA_IRQHandler+0xcc4>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d027      	beq.n	80047ac <HAL_DMA_IRQHandler+0xc60>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a2c      	ldr	r2, [pc, #176]	; (8004814 <HAL_DMA_IRQHandler+0xcc8>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d022      	beq.n	80047ac <HAL_DMA_IRQHandler+0xc60>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a2b      	ldr	r2, [pc, #172]	; (8004818 <HAL_DMA_IRQHandler+0xccc>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d01d      	beq.n	80047ac <HAL_DMA_IRQHandler+0xc60>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a29      	ldr	r2, [pc, #164]	; (800481c <HAL_DMA_IRQHandler+0xcd0>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d018      	beq.n	80047ac <HAL_DMA_IRQHandler+0xc60>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a28      	ldr	r2, [pc, #160]	; (8004820 <HAL_DMA_IRQHandler+0xcd4>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d013      	beq.n	80047ac <HAL_DMA_IRQHandler+0xc60>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a26      	ldr	r2, [pc, #152]	; (8004824 <HAL_DMA_IRQHandler+0xcd8>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d00e      	beq.n	80047ac <HAL_DMA_IRQHandler+0xc60>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a25      	ldr	r2, [pc, #148]	; (8004828 <HAL_DMA_IRQHandler+0xcdc>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d009      	beq.n	80047ac <HAL_DMA_IRQHandler+0xc60>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a23      	ldr	r2, [pc, #140]	; (800482c <HAL_DMA_IRQHandler+0xce0>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d004      	beq.n	80047ac <HAL_DMA_IRQHandler+0xc60>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a22      	ldr	r2, [pc, #136]	; (8004830 <HAL_DMA_IRQHandler+0xce4>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d108      	bne.n	80047be <HAL_DMA_IRQHandler+0xc72>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f022 0214 	bic.w	r2, r2, #20
 80047ba:	601a      	str	r2, [r3, #0]
 80047bc:	e007      	b.n	80047ce <HAL_DMA_IRQHandler+0xc82>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f022 020a 	bic.w	r2, r2, #10
 80047cc:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2201      	movs	r2, #1
 80047d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	f000 80b8 	beq.w	8004958 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047f0:	e0b2      	b.n	8004958 <HAL_DMA_IRQHandler+0xe0c>
 80047f2:	bf00      	nop
 80047f4:	40020010 	.word	0x40020010
 80047f8:	40020028 	.word	0x40020028
 80047fc:	40020040 	.word	0x40020040
 8004800:	40020058 	.word	0x40020058
 8004804:	40020070 	.word	0x40020070
 8004808:	40020088 	.word	0x40020088
 800480c:	400200a0 	.word	0x400200a0
 8004810:	400200b8 	.word	0x400200b8
 8004814:	40020410 	.word	0x40020410
 8004818:	40020428 	.word	0x40020428
 800481c:	40020440 	.word	0x40020440
 8004820:	40020458 	.word	0x40020458
 8004824:	40020470 	.word	0x40020470
 8004828:	40020488 	.word	0x40020488
 800482c:	400204a0 	.word	0x400204a0
 8004830:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004838:	f003 031f 	and.w	r3, r3, #31
 800483c:	2208      	movs	r2, #8
 800483e:	409a      	lsls	r2, r3
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	4013      	ands	r3, r2
 8004844:	2b00      	cmp	r3, #0
 8004846:	f000 8088 	beq.w	800495a <HAL_DMA_IRQHandler+0xe0e>
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	f003 0308 	and.w	r3, r3, #8
 8004850:	2b00      	cmp	r3, #0
 8004852:	f000 8082 	beq.w	800495a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a41      	ldr	r2, [pc, #260]	; (8004960 <HAL_DMA_IRQHandler+0xe14>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d04a      	beq.n	80048f6 <HAL_DMA_IRQHandler+0xdaa>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a3f      	ldr	r2, [pc, #252]	; (8004964 <HAL_DMA_IRQHandler+0xe18>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d045      	beq.n	80048f6 <HAL_DMA_IRQHandler+0xdaa>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a3e      	ldr	r2, [pc, #248]	; (8004968 <HAL_DMA_IRQHandler+0xe1c>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d040      	beq.n	80048f6 <HAL_DMA_IRQHandler+0xdaa>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a3c      	ldr	r2, [pc, #240]	; (800496c <HAL_DMA_IRQHandler+0xe20>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d03b      	beq.n	80048f6 <HAL_DMA_IRQHandler+0xdaa>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a3b      	ldr	r2, [pc, #236]	; (8004970 <HAL_DMA_IRQHandler+0xe24>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d036      	beq.n	80048f6 <HAL_DMA_IRQHandler+0xdaa>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a39      	ldr	r2, [pc, #228]	; (8004974 <HAL_DMA_IRQHandler+0xe28>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d031      	beq.n	80048f6 <HAL_DMA_IRQHandler+0xdaa>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a38      	ldr	r2, [pc, #224]	; (8004978 <HAL_DMA_IRQHandler+0xe2c>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d02c      	beq.n	80048f6 <HAL_DMA_IRQHandler+0xdaa>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a36      	ldr	r2, [pc, #216]	; (800497c <HAL_DMA_IRQHandler+0xe30>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d027      	beq.n	80048f6 <HAL_DMA_IRQHandler+0xdaa>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a35      	ldr	r2, [pc, #212]	; (8004980 <HAL_DMA_IRQHandler+0xe34>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d022      	beq.n	80048f6 <HAL_DMA_IRQHandler+0xdaa>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a33      	ldr	r2, [pc, #204]	; (8004984 <HAL_DMA_IRQHandler+0xe38>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d01d      	beq.n	80048f6 <HAL_DMA_IRQHandler+0xdaa>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a32      	ldr	r2, [pc, #200]	; (8004988 <HAL_DMA_IRQHandler+0xe3c>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d018      	beq.n	80048f6 <HAL_DMA_IRQHandler+0xdaa>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a30      	ldr	r2, [pc, #192]	; (800498c <HAL_DMA_IRQHandler+0xe40>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d013      	beq.n	80048f6 <HAL_DMA_IRQHandler+0xdaa>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a2f      	ldr	r2, [pc, #188]	; (8004990 <HAL_DMA_IRQHandler+0xe44>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d00e      	beq.n	80048f6 <HAL_DMA_IRQHandler+0xdaa>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a2d      	ldr	r2, [pc, #180]	; (8004994 <HAL_DMA_IRQHandler+0xe48>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d009      	beq.n	80048f6 <HAL_DMA_IRQHandler+0xdaa>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a2c      	ldr	r2, [pc, #176]	; (8004998 <HAL_DMA_IRQHandler+0xe4c>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d004      	beq.n	80048f6 <HAL_DMA_IRQHandler+0xdaa>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a2a      	ldr	r2, [pc, #168]	; (800499c <HAL_DMA_IRQHandler+0xe50>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d108      	bne.n	8004908 <HAL_DMA_IRQHandler+0xdbc>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f022 021c 	bic.w	r2, r2, #28
 8004904:	601a      	str	r2, [r3, #0]
 8004906:	e007      	b.n	8004918 <HAL_DMA_IRQHandler+0xdcc>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f022 020e 	bic.w	r2, r2, #14
 8004916:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800491c:	f003 031f 	and.w	r3, r3, #31
 8004920:	2201      	movs	r2, #1
 8004922:	409a      	lsls	r2, r3
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2201      	movs	r2, #1
 8004932:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004942:	2b00      	cmp	r3, #0
 8004944:	d009      	beq.n	800495a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	4798      	blx	r3
 800494e:	e004      	b.n	800495a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004950:	bf00      	nop
 8004952:	e002      	b.n	800495a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004954:	bf00      	nop
 8004956:	e000      	b.n	800495a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004958:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800495a:	3728      	adds	r7, #40	; 0x28
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}
 8004960:	40020010 	.word	0x40020010
 8004964:	40020028 	.word	0x40020028
 8004968:	40020040 	.word	0x40020040
 800496c:	40020058 	.word	0x40020058
 8004970:	40020070 	.word	0x40020070
 8004974:	40020088 	.word	0x40020088
 8004978:	400200a0 	.word	0x400200a0
 800497c:	400200b8 	.word	0x400200b8
 8004980:	40020410 	.word	0x40020410
 8004984:	40020428 	.word	0x40020428
 8004988:	40020440 	.word	0x40020440
 800498c:	40020458 	.word	0x40020458
 8004990:	40020470 	.word	0x40020470
 8004994:	40020488 	.word	0x40020488
 8004998:	400204a0 	.word	0x400204a0
 800499c:	400204b8 	.word	0x400204b8

080049a0 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	370c      	adds	r7, #12
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr

080049b8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b08b      	sub	sp, #44	; 0x2c
 80049bc:	af00      	add	r7, sp, #0
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	60b9      	str	r1, [r7, #8]
 80049c2:	607a      	str	r2, [r7, #4]
 80049c4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049ca:	627b      	str	r3, [r7, #36]	; 0x24
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049d0:	623b      	str	r3, [r7, #32]

  uint32_t srcdata = &SrcAddress;
 80049d2:	f107 0308 	add.w	r3, r7, #8
 80049d6:	61fb      	str	r3, [r7, #28]
  uint32_t srcaddr = SrcAddress;
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	61bb      	str	r3, [r7, #24]
  uint32_t destdata = &DstAddress;
 80049dc:	1d3b      	adds	r3, r7, #4
 80049de:	617b      	str	r3, [r7, #20]
  uint32_t destaddr = DstAddress;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	613b      	str	r3, [r7, #16]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a83      	ldr	r2, [pc, #524]	; (8004bf8 <DMA_SetConfig+0x240>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d072      	beq.n	8004ad4 <DMA_SetConfig+0x11c>
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a82      	ldr	r2, [pc, #520]	; (8004bfc <DMA_SetConfig+0x244>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d06d      	beq.n	8004ad4 <DMA_SetConfig+0x11c>
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a80      	ldr	r2, [pc, #512]	; (8004c00 <DMA_SetConfig+0x248>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d068      	beq.n	8004ad4 <DMA_SetConfig+0x11c>
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a7f      	ldr	r2, [pc, #508]	; (8004c04 <DMA_SetConfig+0x24c>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d063      	beq.n	8004ad4 <DMA_SetConfig+0x11c>
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a7d      	ldr	r2, [pc, #500]	; (8004c08 <DMA_SetConfig+0x250>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d05e      	beq.n	8004ad4 <DMA_SetConfig+0x11c>
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a7c      	ldr	r2, [pc, #496]	; (8004c0c <DMA_SetConfig+0x254>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d059      	beq.n	8004ad4 <DMA_SetConfig+0x11c>
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a7a      	ldr	r2, [pc, #488]	; (8004c10 <DMA_SetConfig+0x258>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d054      	beq.n	8004ad4 <DMA_SetConfig+0x11c>
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a79      	ldr	r2, [pc, #484]	; (8004c14 <DMA_SetConfig+0x25c>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d04f      	beq.n	8004ad4 <DMA_SetConfig+0x11c>
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a77      	ldr	r2, [pc, #476]	; (8004c18 <DMA_SetConfig+0x260>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d04a      	beq.n	8004ad4 <DMA_SetConfig+0x11c>
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a76      	ldr	r2, [pc, #472]	; (8004c1c <DMA_SetConfig+0x264>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d045      	beq.n	8004ad4 <DMA_SetConfig+0x11c>
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a74      	ldr	r2, [pc, #464]	; (8004c20 <DMA_SetConfig+0x268>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d040      	beq.n	8004ad4 <DMA_SetConfig+0x11c>
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a73      	ldr	r2, [pc, #460]	; (8004c24 <DMA_SetConfig+0x26c>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d03b      	beq.n	8004ad4 <DMA_SetConfig+0x11c>
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a71      	ldr	r2, [pc, #452]	; (8004c28 <DMA_SetConfig+0x270>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d036      	beq.n	8004ad4 <DMA_SetConfig+0x11c>
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a70      	ldr	r2, [pc, #448]	; (8004c2c <DMA_SetConfig+0x274>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d031      	beq.n	8004ad4 <DMA_SetConfig+0x11c>
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a6e      	ldr	r2, [pc, #440]	; (8004c30 <DMA_SetConfig+0x278>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d02c      	beq.n	8004ad4 <DMA_SetConfig+0x11c>
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a6d      	ldr	r2, [pc, #436]	; (8004c34 <DMA_SetConfig+0x27c>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d027      	beq.n	8004ad4 <DMA_SetConfig+0x11c>
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a6b      	ldr	r2, [pc, #428]	; (8004c38 <DMA_SetConfig+0x280>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d022      	beq.n	8004ad4 <DMA_SetConfig+0x11c>
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a6a      	ldr	r2, [pc, #424]	; (8004c3c <DMA_SetConfig+0x284>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d01d      	beq.n	8004ad4 <DMA_SetConfig+0x11c>
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a68      	ldr	r2, [pc, #416]	; (8004c40 <DMA_SetConfig+0x288>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d018      	beq.n	8004ad4 <DMA_SetConfig+0x11c>
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a67      	ldr	r2, [pc, #412]	; (8004c44 <DMA_SetConfig+0x28c>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d013      	beq.n	8004ad4 <DMA_SetConfig+0x11c>
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a65      	ldr	r2, [pc, #404]	; (8004c48 <DMA_SetConfig+0x290>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d00e      	beq.n	8004ad4 <DMA_SetConfig+0x11c>
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a64      	ldr	r2, [pc, #400]	; (8004c4c <DMA_SetConfig+0x294>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d009      	beq.n	8004ad4 <DMA_SetConfig+0x11c>
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a62      	ldr	r2, [pc, #392]	; (8004c50 <DMA_SetConfig+0x298>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d004      	beq.n	8004ad4 <DMA_SetConfig+0x11c>
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a61      	ldr	r2, [pc, #388]	; (8004c54 <DMA_SetConfig+0x29c>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d101      	bne.n	8004ad8 <DMA_SetConfig+0x120>
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e000      	b.n	8004ada <DMA_SetConfig+0x122>
 8004ad8:	2300      	movs	r3, #0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d00d      	beq.n	8004afa <DMA_SetConfig+0x142>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ae2:	68fa      	ldr	r2, [r7, #12]
 8004ae4:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004ae6:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d004      	beq.n	8004afa <DMA_SetConfig+0x142>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004af4:	68fa      	ldr	r2, [r7, #12]
 8004af6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004af8:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a3e      	ldr	r2, [pc, #248]	; (8004bf8 <DMA_SetConfig+0x240>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d04a      	beq.n	8004b9a <DMA_SetConfig+0x1e2>
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a3c      	ldr	r2, [pc, #240]	; (8004bfc <DMA_SetConfig+0x244>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d045      	beq.n	8004b9a <DMA_SetConfig+0x1e2>
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a3b      	ldr	r2, [pc, #236]	; (8004c00 <DMA_SetConfig+0x248>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d040      	beq.n	8004b9a <DMA_SetConfig+0x1e2>
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a39      	ldr	r2, [pc, #228]	; (8004c04 <DMA_SetConfig+0x24c>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d03b      	beq.n	8004b9a <DMA_SetConfig+0x1e2>
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a38      	ldr	r2, [pc, #224]	; (8004c08 <DMA_SetConfig+0x250>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d036      	beq.n	8004b9a <DMA_SetConfig+0x1e2>
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a36      	ldr	r2, [pc, #216]	; (8004c0c <DMA_SetConfig+0x254>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d031      	beq.n	8004b9a <DMA_SetConfig+0x1e2>
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a35      	ldr	r2, [pc, #212]	; (8004c10 <DMA_SetConfig+0x258>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d02c      	beq.n	8004b9a <DMA_SetConfig+0x1e2>
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a33      	ldr	r2, [pc, #204]	; (8004c14 <DMA_SetConfig+0x25c>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d027      	beq.n	8004b9a <DMA_SetConfig+0x1e2>
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a32      	ldr	r2, [pc, #200]	; (8004c18 <DMA_SetConfig+0x260>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d022      	beq.n	8004b9a <DMA_SetConfig+0x1e2>
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a30      	ldr	r2, [pc, #192]	; (8004c1c <DMA_SetConfig+0x264>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d01d      	beq.n	8004b9a <DMA_SetConfig+0x1e2>
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a2f      	ldr	r2, [pc, #188]	; (8004c20 <DMA_SetConfig+0x268>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d018      	beq.n	8004b9a <DMA_SetConfig+0x1e2>
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a2d      	ldr	r2, [pc, #180]	; (8004c24 <DMA_SetConfig+0x26c>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d013      	beq.n	8004b9a <DMA_SetConfig+0x1e2>
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a2c      	ldr	r2, [pc, #176]	; (8004c28 <DMA_SetConfig+0x270>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d00e      	beq.n	8004b9a <DMA_SetConfig+0x1e2>
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a2a      	ldr	r2, [pc, #168]	; (8004c2c <DMA_SetConfig+0x274>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d009      	beq.n	8004b9a <DMA_SetConfig+0x1e2>
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a29      	ldr	r2, [pc, #164]	; (8004c30 <DMA_SetConfig+0x278>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d004      	beq.n	8004b9a <DMA_SetConfig+0x1e2>
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a27      	ldr	r2, [pc, #156]	; (8004c34 <DMA_SetConfig+0x27c>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d101      	bne.n	8004b9e <DMA_SetConfig+0x1e6>
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e000      	b.n	8004ba0 <DMA_SetConfig+0x1e8>
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d059      	beq.n	8004c58 <DMA_SetConfig+0x2a0>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ba8:	f003 031f 	and.w	r3, r3, #31
 8004bac:	223f      	movs	r2, #63	; 0x3f
 8004bae:	409a      	lsls	r2, r3
 8004bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb2:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004bc2:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	683a      	ldr	r2, [r7, #0]
 8004bca:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	2b40      	cmp	r3, #64	; 0x40
 8004bd2:	d108      	bne.n	8004be6 <DMA_SetConfig+0x22e>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	68ba      	ldr	r2, [r7, #8]
 8004be2:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004be4:	e086      	b.n	8004cf4 <DMA_SetConfig+0x33c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	68ba      	ldr	r2, [r7, #8]
 8004bec:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	60da      	str	r2, [r3, #12]
}
 8004bf6:	e07d      	b.n	8004cf4 <DMA_SetConfig+0x33c>
 8004bf8:	40020010 	.word	0x40020010
 8004bfc:	40020028 	.word	0x40020028
 8004c00:	40020040 	.word	0x40020040
 8004c04:	40020058 	.word	0x40020058
 8004c08:	40020070 	.word	0x40020070
 8004c0c:	40020088 	.word	0x40020088
 8004c10:	400200a0 	.word	0x400200a0
 8004c14:	400200b8 	.word	0x400200b8
 8004c18:	40020410 	.word	0x40020410
 8004c1c:	40020428 	.word	0x40020428
 8004c20:	40020440 	.word	0x40020440
 8004c24:	40020458 	.word	0x40020458
 8004c28:	40020470 	.word	0x40020470
 8004c2c:	40020488 	.word	0x40020488
 8004c30:	400204a0 	.word	0x400204a0
 8004c34:	400204b8 	.word	0x400204b8
 8004c38:	58025408 	.word	0x58025408
 8004c3c:	5802541c 	.word	0x5802541c
 8004c40:	58025430 	.word	0x58025430
 8004c44:	58025444 	.word	0x58025444
 8004c48:	58025458 	.word	0x58025458
 8004c4c:	5802546c 	.word	0x5802546c
 8004c50:	58025480 	.word	0x58025480
 8004c54:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a28      	ldr	r2, [pc, #160]	; (8004d00 <DMA_SetConfig+0x348>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d022      	beq.n	8004ca8 <DMA_SetConfig+0x2f0>
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a27      	ldr	r2, [pc, #156]	; (8004d04 <DMA_SetConfig+0x34c>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d01d      	beq.n	8004ca8 <DMA_SetConfig+0x2f0>
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a25      	ldr	r2, [pc, #148]	; (8004d08 <DMA_SetConfig+0x350>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d018      	beq.n	8004ca8 <DMA_SetConfig+0x2f0>
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a24      	ldr	r2, [pc, #144]	; (8004d0c <DMA_SetConfig+0x354>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d013      	beq.n	8004ca8 <DMA_SetConfig+0x2f0>
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a22      	ldr	r2, [pc, #136]	; (8004d10 <DMA_SetConfig+0x358>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d00e      	beq.n	8004ca8 <DMA_SetConfig+0x2f0>
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a21      	ldr	r2, [pc, #132]	; (8004d14 <DMA_SetConfig+0x35c>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d009      	beq.n	8004ca8 <DMA_SetConfig+0x2f0>
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a1f      	ldr	r2, [pc, #124]	; (8004d18 <DMA_SetConfig+0x360>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d004      	beq.n	8004ca8 <DMA_SetConfig+0x2f0>
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a1e      	ldr	r2, [pc, #120]	; (8004d1c <DMA_SetConfig+0x364>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d101      	bne.n	8004cac <DMA_SetConfig+0x2f4>
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e000      	b.n	8004cae <DMA_SetConfig+0x2f6>
 8004cac:	2300      	movs	r3, #0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d020      	beq.n	8004cf4 <DMA_SetConfig+0x33c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cb6:	f003 031f 	and.w	r3, r3, #31
 8004cba:	2201      	movs	r2, #1
 8004cbc:	409a      	lsls	r2, r3
 8004cbe:	6a3b      	ldr	r3, [r7, #32]
 8004cc0:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	683a      	ldr	r2, [r7, #0]
 8004cc8:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	2b40      	cmp	r3, #64	; 0x40
 8004cd0:	d108      	bne.n	8004ce4 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	68ba      	ldr	r2, [r7, #8]
 8004ce0:	60da      	str	r2, [r3, #12]
}
 8004ce2:	e007      	b.n	8004cf4 <DMA_SetConfig+0x33c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	68ba      	ldr	r2, [r7, #8]
 8004cea:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	60da      	str	r2, [r3, #12]
}
 8004cf4:	bf00      	nop
 8004cf6:	372c      	adds	r7, #44	; 0x2c
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr
 8004d00:	58025408 	.word	0x58025408
 8004d04:	5802541c 	.word	0x5802541c
 8004d08:	58025430 	.word	0x58025430
 8004d0c:	58025444 	.word	0x58025444
 8004d10:	58025458 	.word	0x58025458
 8004d14:	5802546c 	.word	0x5802546c
 8004d18:	58025480 	.word	0x58025480
 8004d1c:	58025494 	.word	0x58025494

08004d20 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b085      	sub	sp, #20
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a42      	ldr	r2, [pc, #264]	; (8004e38 <DMA_CalcBaseAndBitshift+0x118>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d04a      	beq.n	8004dc8 <DMA_CalcBaseAndBitshift+0xa8>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a41      	ldr	r2, [pc, #260]	; (8004e3c <DMA_CalcBaseAndBitshift+0x11c>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d045      	beq.n	8004dc8 <DMA_CalcBaseAndBitshift+0xa8>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a3f      	ldr	r2, [pc, #252]	; (8004e40 <DMA_CalcBaseAndBitshift+0x120>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d040      	beq.n	8004dc8 <DMA_CalcBaseAndBitshift+0xa8>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a3e      	ldr	r2, [pc, #248]	; (8004e44 <DMA_CalcBaseAndBitshift+0x124>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d03b      	beq.n	8004dc8 <DMA_CalcBaseAndBitshift+0xa8>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a3c      	ldr	r2, [pc, #240]	; (8004e48 <DMA_CalcBaseAndBitshift+0x128>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d036      	beq.n	8004dc8 <DMA_CalcBaseAndBitshift+0xa8>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a3b      	ldr	r2, [pc, #236]	; (8004e4c <DMA_CalcBaseAndBitshift+0x12c>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d031      	beq.n	8004dc8 <DMA_CalcBaseAndBitshift+0xa8>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a39      	ldr	r2, [pc, #228]	; (8004e50 <DMA_CalcBaseAndBitshift+0x130>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d02c      	beq.n	8004dc8 <DMA_CalcBaseAndBitshift+0xa8>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a38      	ldr	r2, [pc, #224]	; (8004e54 <DMA_CalcBaseAndBitshift+0x134>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d027      	beq.n	8004dc8 <DMA_CalcBaseAndBitshift+0xa8>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a36      	ldr	r2, [pc, #216]	; (8004e58 <DMA_CalcBaseAndBitshift+0x138>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d022      	beq.n	8004dc8 <DMA_CalcBaseAndBitshift+0xa8>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a35      	ldr	r2, [pc, #212]	; (8004e5c <DMA_CalcBaseAndBitshift+0x13c>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d01d      	beq.n	8004dc8 <DMA_CalcBaseAndBitshift+0xa8>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a33      	ldr	r2, [pc, #204]	; (8004e60 <DMA_CalcBaseAndBitshift+0x140>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d018      	beq.n	8004dc8 <DMA_CalcBaseAndBitshift+0xa8>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a32      	ldr	r2, [pc, #200]	; (8004e64 <DMA_CalcBaseAndBitshift+0x144>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d013      	beq.n	8004dc8 <DMA_CalcBaseAndBitshift+0xa8>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a30      	ldr	r2, [pc, #192]	; (8004e68 <DMA_CalcBaseAndBitshift+0x148>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d00e      	beq.n	8004dc8 <DMA_CalcBaseAndBitshift+0xa8>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a2f      	ldr	r2, [pc, #188]	; (8004e6c <DMA_CalcBaseAndBitshift+0x14c>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d009      	beq.n	8004dc8 <DMA_CalcBaseAndBitshift+0xa8>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a2d      	ldr	r2, [pc, #180]	; (8004e70 <DMA_CalcBaseAndBitshift+0x150>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d004      	beq.n	8004dc8 <DMA_CalcBaseAndBitshift+0xa8>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a2c      	ldr	r2, [pc, #176]	; (8004e74 <DMA_CalcBaseAndBitshift+0x154>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d101      	bne.n	8004dcc <DMA_CalcBaseAndBitshift+0xac>
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e000      	b.n	8004dce <DMA_CalcBaseAndBitshift+0xae>
 8004dcc:	2300      	movs	r3, #0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d024      	beq.n	8004e1c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	3b10      	subs	r3, #16
 8004dda:	4a27      	ldr	r2, [pc, #156]	; (8004e78 <DMA_CalcBaseAndBitshift+0x158>)
 8004ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8004de0:	091b      	lsrs	r3, r3, #4
 8004de2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f003 0307 	and.w	r3, r3, #7
 8004dea:	4a24      	ldr	r2, [pc, #144]	; (8004e7c <DMA_CalcBaseAndBitshift+0x15c>)
 8004dec:	5cd3      	ldrb	r3, [r2, r3]
 8004dee:	461a      	mov	r2, r3
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2b03      	cmp	r3, #3
 8004df8:	d908      	bls.n	8004e0c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	461a      	mov	r2, r3
 8004e00:	4b1f      	ldr	r3, [pc, #124]	; (8004e80 <DMA_CalcBaseAndBitshift+0x160>)
 8004e02:	4013      	ands	r3, r2
 8004e04:	1d1a      	adds	r2, r3, #4
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	659a      	str	r2, [r3, #88]	; 0x58
 8004e0a:	e00d      	b.n	8004e28 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	461a      	mov	r2, r3
 8004e12:	4b1b      	ldr	r3, [pc, #108]	; (8004e80 <DMA_CalcBaseAndBitshift+0x160>)
 8004e14:	4013      	ands	r3, r2
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	6593      	str	r3, [r2, #88]	; 0x58
 8004e1a:	e005      	b.n	8004e28 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3714      	adds	r7, #20
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr
 8004e38:	40020010 	.word	0x40020010
 8004e3c:	40020028 	.word	0x40020028
 8004e40:	40020040 	.word	0x40020040
 8004e44:	40020058 	.word	0x40020058
 8004e48:	40020070 	.word	0x40020070
 8004e4c:	40020088 	.word	0x40020088
 8004e50:	400200a0 	.word	0x400200a0
 8004e54:	400200b8 	.word	0x400200b8
 8004e58:	40020410 	.word	0x40020410
 8004e5c:	40020428 	.word	0x40020428
 8004e60:	40020440 	.word	0x40020440
 8004e64:	40020458 	.word	0x40020458
 8004e68:	40020470 	.word	0x40020470
 8004e6c:	40020488 	.word	0x40020488
 8004e70:	400204a0 	.word	0x400204a0
 8004e74:	400204b8 	.word	0x400204b8
 8004e78:	aaaaaaab 	.word	0xaaaaaaab
 8004e7c:	0800c110 	.word	0x0800c110
 8004e80:	fffffc00 	.word	0xfffffc00

08004e84 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b085      	sub	sp, #20
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	699b      	ldr	r3, [r3, #24]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d120      	bne.n	8004eda <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e9c:	2b03      	cmp	r3, #3
 8004e9e:	d858      	bhi.n	8004f52 <DMA_CheckFifoParam+0xce>
 8004ea0:	a201      	add	r2, pc, #4	; (adr r2, 8004ea8 <DMA_CheckFifoParam+0x24>)
 8004ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ea6:	bf00      	nop
 8004ea8:	08004eb9 	.word	0x08004eb9
 8004eac:	08004ecb 	.word	0x08004ecb
 8004eb0:	08004eb9 	.word	0x08004eb9
 8004eb4:	08004f53 	.word	0x08004f53
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ebc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d048      	beq.n	8004f56 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004ec8:	e045      	b.n	8004f56 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ece:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004ed2:	d142      	bne.n	8004f5a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004ed8:	e03f      	b.n	8004f5a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	699b      	ldr	r3, [r3, #24]
 8004ede:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ee2:	d123      	bne.n	8004f2c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee8:	2b03      	cmp	r3, #3
 8004eea:	d838      	bhi.n	8004f5e <DMA_CheckFifoParam+0xda>
 8004eec:	a201      	add	r2, pc, #4	; (adr r2, 8004ef4 <DMA_CheckFifoParam+0x70>)
 8004eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ef2:	bf00      	nop
 8004ef4:	08004f05 	.word	0x08004f05
 8004ef8:	08004f0b 	.word	0x08004f0b
 8004efc:	08004f05 	.word	0x08004f05
 8004f00:	08004f1d 	.word	0x08004f1d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	73fb      	strb	r3, [r7, #15]
        break;
 8004f08:	e030      	b.n	8004f6c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d025      	beq.n	8004f62 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004f1a:	e022      	b.n	8004f62 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f20:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004f24:	d11f      	bne.n	8004f66 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004f2a:	e01c      	b.n	8004f66 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f30:	2b02      	cmp	r3, #2
 8004f32:	d902      	bls.n	8004f3a <DMA_CheckFifoParam+0xb6>
 8004f34:	2b03      	cmp	r3, #3
 8004f36:	d003      	beq.n	8004f40 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004f38:	e018      	b.n	8004f6c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	73fb      	strb	r3, [r7, #15]
        break;
 8004f3e:	e015      	b.n	8004f6c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d00e      	beq.n	8004f6a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	73fb      	strb	r3, [r7, #15]
    break;
 8004f50:	e00b      	b.n	8004f6a <DMA_CheckFifoParam+0xe6>
        break;
 8004f52:	bf00      	nop
 8004f54:	e00a      	b.n	8004f6c <DMA_CheckFifoParam+0xe8>
        break;
 8004f56:	bf00      	nop
 8004f58:	e008      	b.n	8004f6c <DMA_CheckFifoParam+0xe8>
        break;
 8004f5a:	bf00      	nop
 8004f5c:	e006      	b.n	8004f6c <DMA_CheckFifoParam+0xe8>
        break;
 8004f5e:	bf00      	nop
 8004f60:	e004      	b.n	8004f6c <DMA_CheckFifoParam+0xe8>
        break;
 8004f62:	bf00      	nop
 8004f64:	e002      	b.n	8004f6c <DMA_CheckFifoParam+0xe8>
        break;
 8004f66:	bf00      	nop
 8004f68:	e000      	b.n	8004f6c <DMA_CheckFifoParam+0xe8>
    break;
 8004f6a:	bf00      	nop
    }
  }

  return status;
 8004f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3714      	adds	r7, #20
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop

08004f7c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b085      	sub	sp, #20
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a38      	ldr	r2, [pc, #224]	; (8005070 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d022      	beq.n	8004fda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a36      	ldr	r2, [pc, #216]	; (8005074 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d01d      	beq.n	8004fda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a35      	ldr	r2, [pc, #212]	; (8005078 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d018      	beq.n	8004fda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a33      	ldr	r2, [pc, #204]	; (800507c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d013      	beq.n	8004fda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a32      	ldr	r2, [pc, #200]	; (8005080 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d00e      	beq.n	8004fda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a30      	ldr	r2, [pc, #192]	; (8005084 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d009      	beq.n	8004fda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a2f      	ldr	r2, [pc, #188]	; (8005088 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d004      	beq.n	8004fda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a2d      	ldr	r2, [pc, #180]	; (800508c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d101      	bne.n	8004fde <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e000      	b.n	8004fe0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004fde:	2300      	movs	r3, #0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d01a      	beq.n	800501a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	3b08      	subs	r3, #8
 8004fec:	4a28      	ldr	r2, [pc, #160]	; (8005090 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004fee:	fba2 2303 	umull	r2, r3, r2, r3
 8004ff2:	091b      	lsrs	r3, r3, #4
 8004ff4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004ff6:	68fa      	ldr	r2, [r7, #12]
 8004ff8:	4b26      	ldr	r3, [pc, #152]	; (8005094 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004ffa:	4413      	add	r3, r2
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	461a      	mov	r2, r3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4a24      	ldr	r2, [pc, #144]	; (8005098 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005008:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f003 031f 	and.w	r3, r3, #31
 8005010:	2201      	movs	r2, #1
 8005012:	409a      	lsls	r2, r3
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005018:	e024      	b.n	8005064 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	b2db      	uxtb	r3, r3
 8005020:	3b10      	subs	r3, #16
 8005022:	4a1e      	ldr	r2, [pc, #120]	; (800509c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005024:	fba2 2303 	umull	r2, r3, r2, r3
 8005028:	091b      	lsrs	r3, r3, #4
 800502a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	4a1c      	ldr	r2, [pc, #112]	; (80050a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d806      	bhi.n	8005042 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	4a1b      	ldr	r2, [pc, #108]	; (80050a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d902      	bls.n	8005042 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	3308      	adds	r3, #8
 8005040:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005042:	68fa      	ldr	r2, [r7, #12]
 8005044:	4b18      	ldr	r3, [pc, #96]	; (80050a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005046:	4413      	add	r3, r2
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	461a      	mov	r2, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4a16      	ldr	r2, [pc, #88]	; (80050ac <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005054:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	f003 031f 	and.w	r3, r3, #31
 800505c:	2201      	movs	r2, #1
 800505e:	409a      	lsls	r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005064:	bf00      	nop
 8005066:	3714      	adds	r7, #20
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr
 8005070:	58025408 	.word	0x58025408
 8005074:	5802541c 	.word	0x5802541c
 8005078:	58025430 	.word	0x58025430
 800507c:	58025444 	.word	0x58025444
 8005080:	58025458 	.word	0x58025458
 8005084:	5802546c 	.word	0x5802546c
 8005088:	58025480 	.word	0x58025480
 800508c:	58025494 	.word	0x58025494
 8005090:	cccccccd 	.word	0xcccccccd
 8005094:	16009600 	.word	0x16009600
 8005098:	58025880 	.word	0x58025880
 800509c:	aaaaaaab 	.word	0xaaaaaaab
 80050a0:	400204b8 	.word	0x400204b8
 80050a4:	4002040f 	.word	0x4002040f
 80050a8:	10008200 	.word	0x10008200
 80050ac:	40020880 	.word	0x40020880

080050b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b085      	sub	sp, #20
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d04a      	beq.n	800515c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2b08      	cmp	r3, #8
 80050ca:	d847      	bhi.n	800515c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a25      	ldr	r2, [pc, #148]	; (8005168 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d022      	beq.n	800511c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a24      	ldr	r2, [pc, #144]	; (800516c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d01d      	beq.n	800511c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a22      	ldr	r2, [pc, #136]	; (8005170 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d018      	beq.n	800511c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a21      	ldr	r2, [pc, #132]	; (8005174 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d013      	beq.n	800511c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a1f      	ldr	r2, [pc, #124]	; (8005178 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d00e      	beq.n	800511c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a1e      	ldr	r2, [pc, #120]	; (800517c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d009      	beq.n	800511c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a1c      	ldr	r2, [pc, #112]	; (8005180 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d004      	beq.n	800511c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a1b      	ldr	r2, [pc, #108]	; (8005184 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d101      	bne.n	8005120 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800511c:	2301      	movs	r3, #1
 800511e:	e000      	b.n	8005122 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005120:	2300      	movs	r3, #0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d00a      	beq.n	800513c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005126:	68fa      	ldr	r2, [r7, #12]
 8005128:	4b17      	ldr	r3, [pc, #92]	; (8005188 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800512a:	4413      	add	r3, r2
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	461a      	mov	r2, r3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	4a15      	ldr	r2, [pc, #84]	; (800518c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005138:	671a      	str	r2, [r3, #112]	; 0x70
 800513a:	e009      	b.n	8005150 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800513c:	68fa      	ldr	r2, [r7, #12]
 800513e:	4b14      	ldr	r3, [pc, #80]	; (8005190 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005140:	4413      	add	r3, r2
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	461a      	mov	r2, r3
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a11      	ldr	r2, [pc, #68]	; (8005194 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800514e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	3b01      	subs	r3, #1
 8005154:	2201      	movs	r2, #1
 8005156:	409a      	lsls	r2, r3
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800515c:	bf00      	nop
 800515e:	3714      	adds	r7, #20
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr
 8005168:	58025408 	.word	0x58025408
 800516c:	5802541c 	.word	0x5802541c
 8005170:	58025430 	.word	0x58025430
 8005174:	58025444 	.word	0x58025444
 8005178:	58025458 	.word	0x58025458
 800517c:	5802546c 	.word	0x5802546c
 8005180:	58025480 	.word	0x58025480
 8005184:	58025494 	.word	0x58025494
 8005188:	1600963f 	.word	0x1600963f
 800518c:	58025940 	.word	0x58025940
 8005190:	1000823f 	.word	0x1000823f
 8005194:	40020940 	.word	0x40020940

08005198 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA Stream.
  * @param  pSyncConfig : pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 8005198:	b480      	push	{r7}
 800519a:	b085      	sub	sp, #20
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]
  uint32_t syncSignalID = 0;
 80051a2:	2300      	movs	r3, #0
 80051a4:	60fb      	str	r3, [r7, #12]
  uint32_t syncPolarity = 0;
 80051a6:	2300      	movs	r3, #0
 80051a8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  if(pSyncConfig->SyncEnable == ENABLE)
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	7a1b      	ldrb	r3, [r3, #8]
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d155      	bne.n	800525e <HAL_DMAEx_ConfigMuxSync+0xc6>
  {
    assert_param(IS_DMAMUX_SYNC_POLARITY(pSyncConfig->SyncPolarity));

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a4b      	ldr	r2, [pc, #300]	; (80052e4 <HAL_DMAEx_ConfigMuxSync+0x14c>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d049      	beq.n	8005250 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a49      	ldr	r2, [pc, #292]	; (80052e8 <HAL_DMAEx_ConfigMuxSync+0x150>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d044      	beq.n	8005250 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a48      	ldr	r2, [pc, #288]	; (80052ec <HAL_DMAEx_ConfigMuxSync+0x154>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d03f      	beq.n	8005250 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a46      	ldr	r2, [pc, #280]	; (80052f0 <HAL_DMAEx_ConfigMuxSync+0x158>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d03a      	beq.n	8005250 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a45      	ldr	r2, [pc, #276]	; (80052f4 <HAL_DMAEx_ConfigMuxSync+0x15c>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d035      	beq.n	8005250 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a43      	ldr	r2, [pc, #268]	; (80052f8 <HAL_DMAEx_ConfigMuxSync+0x160>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d030      	beq.n	8005250 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a42      	ldr	r2, [pc, #264]	; (80052fc <HAL_DMAEx_ConfigMuxSync+0x164>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d02b      	beq.n	8005250 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a40      	ldr	r2, [pc, #256]	; (8005300 <HAL_DMAEx_ConfigMuxSync+0x168>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d026      	beq.n	8005250 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a3f      	ldr	r2, [pc, #252]	; (8005304 <HAL_DMAEx_ConfigMuxSync+0x16c>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d021      	beq.n	8005250 <HAL_DMAEx_ConfigMuxSync+0xb8>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a3d      	ldr	r2, [pc, #244]	; (8005308 <HAL_DMAEx_ConfigMuxSync+0x170>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d01c      	beq.n	8005250 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a3c      	ldr	r2, [pc, #240]	; (800530c <HAL_DMAEx_ConfigMuxSync+0x174>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d017      	beq.n	8005250 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a3a      	ldr	r2, [pc, #232]	; (8005310 <HAL_DMAEx_ConfigMuxSync+0x178>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d012      	beq.n	8005250 <HAL_DMAEx_ConfigMuxSync+0xb8>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a39      	ldr	r2, [pc, #228]	; (8005314 <HAL_DMAEx_ConfigMuxSync+0x17c>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d00d      	beq.n	8005250 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a37      	ldr	r2, [pc, #220]	; (8005318 <HAL_DMAEx_ConfigMuxSync+0x180>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d008      	beq.n	8005250 <HAL_DMAEx_ConfigMuxSync+0xb8>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a36      	ldr	r2, [pc, #216]	; (800531c <HAL_DMAEx_ConfigMuxSync+0x184>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d003      	beq.n	8005250 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a34      	ldr	r2, [pc, #208]	; (8005320 <HAL_DMAEx_ConfigMuxSync+0x188>)
 800524e:	4293      	cmp	r3, r2
 8005250:	bf00      	nop
    }
    else
    {
      assert_param(IS_BDMA_DMAMUX_SYNC_SIGNAL_ID(pSyncConfig->SyncSignalID));
    }
    syncSignalID = pSyncConfig->SyncSignalID;
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	60fb      	str	r3, [r7, #12]
    syncPolarity = pSyncConfig->SyncPolarity;
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	60bb      	str	r3, [r7, #8]
  }

  /*Check if the DMA state is ready */
  if(hdma->State == HAL_DMA_STATE_READY)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005264:	b2db      	uxtb	r3, r3
 8005266:	2b01      	cmp	r3, #1
 8005268:	d131      	bne.n	80052ce <HAL_DMAEx_ConfigMuxSync+0x136>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005270:	2b01      	cmp	r3, #1
 8005272:	d101      	bne.n	8005278 <HAL_DMAEx_ConfigMuxSync+0xe0>
 8005274:	2302      	movs	r3, #2
 8005276:	e02f      	b.n	80052d8 <HAL_DMAEx_ConfigMuxSync+0x140>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the synchronization and event generation before applying a new config */
    CLEAR_BIT(hdma->DMAmuxChannel->CCR,(DMAMUX_CxCR_SE | DMAMUX_CxCR_EGE));
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800528a:	f422 3281 	bic.w	r2, r2, #66048	; 0x10200
 800528e:	601a      	str	r2, [r3, #0]

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG( hdma->DMAmuxChannel->CCR, \
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	b2d9      	uxtb	r1, r3
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	061a      	lsls	r2, r3, #24
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	3b01      	subs	r3, #1
 80052a2:	04db      	lsls	r3, r3, #19
 80052a4:	431a      	orrs	r2, r3
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	431a      	orrs	r2, r3
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	7a1b      	ldrb	r3, [r3, #8]
 80052ae:	041b      	lsls	r3, r3, #16
 80052b0:	431a      	orrs	r2, r3
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	7a5b      	ldrb	r3, [r3, #9]
 80052b6:	025b      	lsls	r3, r3, #9
 80052b8:	431a      	orrs	r2, r3
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052be:	430a      	orrs	r2, r1
 80052c0:	601a      	str	r2, [r3, #0]
               ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
               syncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)    | \
               ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos));

      /* Process Locked */
    __HAL_UNLOCK(hdma);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80052ca:	2300      	movs	r3, #0
 80052cc:	e004      	b.n	80052d8 <HAL_DMAEx_ConfigMuxSync+0x140>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052d4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
  }
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3714      	adds	r7, #20
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr
 80052e4:	40020010 	.word	0x40020010
 80052e8:	40020028 	.word	0x40020028
 80052ec:	40020040 	.word	0x40020040
 80052f0:	40020058 	.word	0x40020058
 80052f4:	40020070 	.word	0x40020070
 80052f8:	40020088 	.word	0x40020088
 80052fc:	400200a0 	.word	0x400200a0
 8005300:	400200b8 	.word	0x400200b8
 8005304:	40020410 	.word	0x40020410
 8005308:	40020428 	.word	0x40020428
 800530c:	40020440 	.word	0x40020440
 8005310:	40020458 	.word	0x40020458
 8005314:	40020470 	.word	0x40020470
 8005318:	40020488 	.word	0x40020488
 800531c:	400204a0 	.word	0x400204a0
 8005320:	400204b8 	.word	0x400204b8

08005324 <HAL_DMAEx_EnableMuxRequestGenerator>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_EnableMuxRequestGenerator (DMA_HandleTypeDef *hdma)
{
 8005324:	b480      	push	{r7}
 8005326:	b083      	sub	sp, #12
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));

  /* check if the DMA state is ready
     and DMA is using a DMAMUX request generator block */
  if((hdma->State != HAL_DMA_STATE_RESET) && (hdma->DMAmuxRequestGen != 0U))
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005332:	b2db      	uxtb	r3, r3
 8005334:	2b00      	cmp	r3, #0
 8005336:	d00d      	beq.n	8005354 <HAL_DMAEx_EnableMuxRequestGenerator+0x30>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800533c:	2b00      	cmp	r3, #0
 800533e:	d009      	beq.n	8005354 <HAL_DMAEx_EnableMuxRequestGenerator+0x30>
  {
    /* Enable the request generator*/
    hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_GE;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800534a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800534e:	601a      	str	r2, [r3, #0]

   return HAL_OK;
 8005350:	2300      	movs	r3, #0
 8005352:	e000      	b.n	8005356 <HAL_DMAEx_EnableMuxRequestGenerator+0x32>
 }
 else
 {
   return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 }
}
 8005356:	4618      	mov	r0, r3
 8005358:	370c      	adds	r7, #12
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr

08005362 <HAL_DMAEx_MUX_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005362:	b580      	push	{r7, lr}
 8005364:	b082      	sub	sp, #8
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005374:	4013      	ands	r3, r2
 8005376:	2b00      	cmp	r3, #0
 8005378:	d01a      	beq.n	80053b0 <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005384:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005388:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005392:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005398:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	655a      	str	r2, [r3, #84]	; 0x54

    if(hdma->XferErrorCallback != NULL)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d003      	beq.n	80053b0 <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	4798      	blx	r3
    }
  }

  if(hdma->DMAmuxRequestGen != 0)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d022      	beq.n	80053fe <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
   /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053c2:	4013      	ands	r3, r2
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d01a      	beq.n	80053fe <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80053d6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80053e0:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053e6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	655a      	str	r2, [r3, #84]	; 0x54

      if(hdma->XferErrorCallback != NULL)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d003      	beq.n	80053fe <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	4798      	blx	r3
      }
    }
  }
}
 80053fe:	bf00      	nop
 8005400:	3708      	adds	r7, #8
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
	...

08005408 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005408:	b480      	push	{r7}
 800540a:	b089      	sub	sp, #36	; 0x24
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005412:	2300      	movs	r3, #0
 8005414:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005416:	4b86      	ldr	r3, [pc, #536]	; (8005630 <HAL_GPIO_Init+0x228>)
 8005418:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800541a:	e18c      	b.n	8005736 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	2101      	movs	r1, #1
 8005422:	69fb      	ldr	r3, [r7, #28]
 8005424:	fa01 f303 	lsl.w	r3, r1, r3
 8005428:	4013      	ands	r3, r2
 800542a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	2b00      	cmp	r3, #0
 8005430:	f000 817e 	beq.w	8005730 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	f003 0303 	and.w	r3, r3, #3
 800543c:	2b01      	cmp	r3, #1
 800543e:	d005      	beq.n	800544c <HAL_GPIO_Init+0x44>
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	f003 0303 	and.w	r3, r3, #3
 8005448:	2b02      	cmp	r3, #2
 800544a:	d130      	bne.n	80054ae <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	005b      	lsls	r3, r3, #1
 8005456:	2203      	movs	r2, #3
 8005458:	fa02 f303 	lsl.w	r3, r2, r3
 800545c:	43db      	mvns	r3, r3
 800545e:	69ba      	ldr	r2, [r7, #24]
 8005460:	4013      	ands	r3, r2
 8005462:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	68da      	ldr	r2, [r3, #12]
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	005b      	lsls	r3, r3, #1
 800546c:	fa02 f303 	lsl.w	r3, r2, r3
 8005470:	69ba      	ldr	r2, [r7, #24]
 8005472:	4313      	orrs	r3, r2
 8005474:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	69ba      	ldr	r2, [r7, #24]
 800547a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005482:	2201      	movs	r2, #1
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	fa02 f303 	lsl.w	r3, r2, r3
 800548a:	43db      	mvns	r3, r3
 800548c:	69ba      	ldr	r2, [r7, #24]
 800548e:	4013      	ands	r3, r2
 8005490:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	091b      	lsrs	r3, r3, #4
 8005498:	f003 0201 	and.w	r2, r3, #1
 800549c:	69fb      	ldr	r3, [r7, #28]
 800549e:	fa02 f303 	lsl.w	r3, r2, r3
 80054a2:	69ba      	ldr	r2, [r7, #24]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	69ba      	ldr	r2, [r7, #24]
 80054ac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	f003 0303 	and.w	r3, r3, #3
 80054b6:	2b03      	cmp	r3, #3
 80054b8:	d017      	beq.n	80054ea <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	68db      	ldr	r3, [r3, #12]
 80054be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80054c0:	69fb      	ldr	r3, [r7, #28]
 80054c2:	005b      	lsls	r3, r3, #1
 80054c4:	2203      	movs	r2, #3
 80054c6:	fa02 f303 	lsl.w	r3, r2, r3
 80054ca:	43db      	mvns	r3, r3
 80054cc:	69ba      	ldr	r2, [r7, #24]
 80054ce:	4013      	ands	r3, r2
 80054d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	689a      	ldr	r2, [r3, #8]
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	005b      	lsls	r3, r3, #1
 80054da:	fa02 f303 	lsl.w	r3, r2, r3
 80054de:	69ba      	ldr	r2, [r7, #24]
 80054e0:	4313      	orrs	r3, r2
 80054e2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	69ba      	ldr	r2, [r7, #24]
 80054e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	f003 0303 	and.w	r3, r3, #3
 80054f2:	2b02      	cmp	r3, #2
 80054f4:	d123      	bne.n	800553e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	08da      	lsrs	r2, r3, #3
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	3208      	adds	r2, #8
 80054fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005502:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005504:	69fb      	ldr	r3, [r7, #28]
 8005506:	f003 0307 	and.w	r3, r3, #7
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	220f      	movs	r2, #15
 800550e:	fa02 f303 	lsl.w	r3, r2, r3
 8005512:	43db      	mvns	r3, r3
 8005514:	69ba      	ldr	r2, [r7, #24]
 8005516:	4013      	ands	r3, r2
 8005518:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	691a      	ldr	r2, [r3, #16]
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	f003 0307 	and.w	r3, r3, #7
 8005524:	009b      	lsls	r3, r3, #2
 8005526:	fa02 f303 	lsl.w	r3, r2, r3
 800552a:	69ba      	ldr	r2, [r7, #24]
 800552c:	4313      	orrs	r3, r2
 800552e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	08da      	lsrs	r2, r3, #3
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	3208      	adds	r2, #8
 8005538:	69b9      	ldr	r1, [r7, #24]
 800553a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005544:	69fb      	ldr	r3, [r7, #28]
 8005546:	005b      	lsls	r3, r3, #1
 8005548:	2203      	movs	r2, #3
 800554a:	fa02 f303 	lsl.w	r3, r2, r3
 800554e:	43db      	mvns	r3, r3
 8005550:	69ba      	ldr	r2, [r7, #24]
 8005552:	4013      	ands	r3, r2
 8005554:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	f003 0203 	and.w	r2, r3, #3
 800555e:	69fb      	ldr	r3, [r7, #28]
 8005560:	005b      	lsls	r3, r3, #1
 8005562:	fa02 f303 	lsl.w	r3, r2, r3
 8005566:	69ba      	ldr	r2, [r7, #24]
 8005568:	4313      	orrs	r3, r2
 800556a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	69ba      	ldr	r2, [r7, #24]
 8005570:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800557a:	2b00      	cmp	r3, #0
 800557c:	f000 80d8 	beq.w	8005730 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005580:	4b2c      	ldr	r3, [pc, #176]	; (8005634 <HAL_GPIO_Init+0x22c>)
 8005582:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005586:	4a2b      	ldr	r2, [pc, #172]	; (8005634 <HAL_GPIO_Init+0x22c>)
 8005588:	f043 0302 	orr.w	r3, r3, #2
 800558c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005590:	4b28      	ldr	r3, [pc, #160]	; (8005634 <HAL_GPIO_Init+0x22c>)
 8005592:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005596:	f003 0302 	and.w	r3, r3, #2
 800559a:	60fb      	str	r3, [r7, #12]
 800559c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800559e:	4a26      	ldr	r2, [pc, #152]	; (8005638 <HAL_GPIO_Init+0x230>)
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	089b      	lsrs	r3, r3, #2
 80055a4:	3302      	adds	r3, #2
 80055a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80055ac:	69fb      	ldr	r3, [r7, #28]
 80055ae:	f003 0303 	and.w	r3, r3, #3
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	220f      	movs	r2, #15
 80055b6:	fa02 f303 	lsl.w	r3, r2, r3
 80055ba:	43db      	mvns	r3, r3
 80055bc:	69ba      	ldr	r2, [r7, #24]
 80055be:	4013      	ands	r3, r2
 80055c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a1d      	ldr	r2, [pc, #116]	; (800563c <HAL_GPIO_Init+0x234>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d04a      	beq.n	8005660 <HAL_GPIO_Init+0x258>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4a1c      	ldr	r2, [pc, #112]	; (8005640 <HAL_GPIO_Init+0x238>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d02b      	beq.n	800562a <HAL_GPIO_Init+0x222>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	4a1b      	ldr	r2, [pc, #108]	; (8005644 <HAL_GPIO_Init+0x23c>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d025      	beq.n	8005626 <HAL_GPIO_Init+0x21e>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4a1a      	ldr	r2, [pc, #104]	; (8005648 <HAL_GPIO_Init+0x240>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d01f      	beq.n	8005622 <HAL_GPIO_Init+0x21a>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4a19      	ldr	r2, [pc, #100]	; (800564c <HAL_GPIO_Init+0x244>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d019      	beq.n	800561e <HAL_GPIO_Init+0x216>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4a18      	ldr	r2, [pc, #96]	; (8005650 <HAL_GPIO_Init+0x248>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d013      	beq.n	800561a <HAL_GPIO_Init+0x212>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4a17      	ldr	r2, [pc, #92]	; (8005654 <HAL_GPIO_Init+0x24c>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d00d      	beq.n	8005616 <HAL_GPIO_Init+0x20e>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	4a16      	ldr	r2, [pc, #88]	; (8005658 <HAL_GPIO_Init+0x250>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d007      	beq.n	8005612 <HAL_GPIO_Init+0x20a>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	4a15      	ldr	r2, [pc, #84]	; (800565c <HAL_GPIO_Init+0x254>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d101      	bne.n	800560e <HAL_GPIO_Init+0x206>
 800560a:	2309      	movs	r3, #9
 800560c:	e029      	b.n	8005662 <HAL_GPIO_Init+0x25a>
 800560e:	230a      	movs	r3, #10
 8005610:	e027      	b.n	8005662 <HAL_GPIO_Init+0x25a>
 8005612:	2307      	movs	r3, #7
 8005614:	e025      	b.n	8005662 <HAL_GPIO_Init+0x25a>
 8005616:	2306      	movs	r3, #6
 8005618:	e023      	b.n	8005662 <HAL_GPIO_Init+0x25a>
 800561a:	2305      	movs	r3, #5
 800561c:	e021      	b.n	8005662 <HAL_GPIO_Init+0x25a>
 800561e:	2304      	movs	r3, #4
 8005620:	e01f      	b.n	8005662 <HAL_GPIO_Init+0x25a>
 8005622:	2303      	movs	r3, #3
 8005624:	e01d      	b.n	8005662 <HAL_GPIO_Init+0x25a>
 8005626:	2302      	movs	r3, #2
 8005628:	e01b      	b.n	8005662 <HAL_GPIO_Init+0x25a>
 800562a:	2301      	movs	r3, #1
 800562c:	e019      	b.n	8005662 <HAL_GPIO_Init+0x25a>
 800562e:	bf00      	nop
 8005630:	58000080 	.word	0x58000080
 8005634:	58024400 	.word	0x58024400
 8005638:	58000400 	.word	0x58000400
 800563c:	58020000 	.word	0x58020000
 8005640:	58020400 	.word	0x58020400
 8005644:	58020800 	.word	0x58020800
 8005648:	58020c00 	.word	0x58020c00
 800564c:	58021000 	.word	0x58021000
 8005650:	58021400 	.word	0x58021400
 8005654:	58021800 	.word	0x58021800
 8005658:	58021c00 	.word	0x58021c00
 800565c:	58022400 	.word	0x58022400
 8005660:	2300      	movs	r3, #0
 8005662:	69fa      	ldr	r2, [r7, #28]
 8005664:	f002 0203 	and.w	r2, r2, #3
 8005668:	0092      	lsls	r2, r2, #2
 800566a:	4093      	lsls	r3, r2
 800566c:	69ba      	ldr	r2, [r7, #24]
 800566e:	4313      	orrs	r3, r2
 8005670:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005672:	4938      	ldr	r1, [pc, #224]	; (8005754 <HAL_GPIO_Init+0x34c>)
 8005674:	69fb      	ldr	r3, [r7, #28]
 8005676:	089b      	lsrs	r3, r3, #2
 8005678:	3302      	adds	r3, #2
 800567a:	69ba      	ldr	r2, [r7, #24]
 800567c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005680:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	43db      	mvns	r3, r3
 800568c:	69ba      	ldr	r2, [r7, #24]
 800568e:	4013      	ands	r3, r2
 8005690:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800569a:	2b00      	cmp	r3, #0
 800569c:	d003      	beq.n	80056a6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800569e:	69ba      	ldr	r2, [r7, #24]
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80056a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80056aa:	69bb      	ldr	r3, [r7, #24]
 80056ac:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80056ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	43db      	mvns	r3, r3
 80056ba:	69ba      	ldr	r2, [r7, #24]
 80056bc:	4013      	ands	r3, r2
 80056be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d003      	beq.n	80056d4 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80056cc:	69ba      	ldr	r2, [r7, #24]
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80056d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80056d8:	69bb      	ldr	r3, [r7, #24]
 80056da:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	43db      	mvns	r3, r3
 80056e6:	69ba      	ldr	r2, [r7, #24]
 80056e8:	4013      	ands	r3, r2
 80056ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d003      	beq.n	8005700 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80056f8:	69ba      	ldr	r2, [r7, #24]
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	69ba      	ldr	r2, [r7, #24]
 8005704:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	43db      	mvns	r3, r3
 8005710:	69ba      	ldr	r2, [r7, #24]
 8005712:	4013      	ands	r3, r2
 8005714:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800571e:	2b00      	cmp	r3, #0
 8005720:	d003      	beq.n	800572a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8005722:	69ba      	ldr	r2, [r7, #24]
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	4313      	orrs	r3, r2
 8005728:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	69ba      	ldr	r2, [r7, #24]
 800572e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005730:	69fb      	ldr	r3, [r7, #28]
 8005732:	3301      	adds	r3, #1
 8005734:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	69fb      	ldr	r3, [r7, #28]
 800573c:	fa22 f303 	lsr.w	r3, r2, r3
 8005740:	2b00      	cmp	r3, #0
 8005742:	f47f ae6b 	bne.w	800541c <HAL_GPIO_Init+0x14>
  }
}
 8005746:	bf00      	nop
 8005748:	bf00      	nop
 800574a:	3724      	adds	r7, #36	; 0x24
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr
 8005754:	58000400 	.word	0x58000400

08005758 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005758:	b480      	push	{r7}
 800575a:	b087      	sub	sp, #28
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005762:	2300      	movs	r3, #0
 8005764:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005766:	4b72      	ldr	r3, [pc, #456]	; (8005930 <HAL_GPIO_DeInit+0x1d8>)
 8005768:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800576a:	e0d3      	b.n	8005914 <HAL_GPIO_DeInit+0x1bc>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 800576c:	2201      	movs	r2, #1
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	fa02 f303 	lsl.w	r3, r2, r3
 8005774:	683a      	ldr	r2, [r7, #0]
 8005776:	4013      	ands	r3, r2
 8005778:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2b00      	cmp	r3, #0
 800577e:	f000 80c6 	beq.w	800590e <HAL_GPIO_DeInit+0x1b6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005782:	4a6c      	ldr	r2, [pc, #432]	; (8005934 <HAL_GPIO_DeInit+0x1dc>)
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	089b      	lsrs	r3, r3, #2
 8005788:	3302      	adds	r3, #2
 800578a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800578e:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	f003 0303 	and.w	r3, r3, #3
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	220f      	movs	r2, #15
 800579a:	fa02 f303 	lsl.w	r3, r2, r3
 800579e:	68ba      	ldr	r2, [r7, #8]
 80057a0:	4013      	ands	r3, r2
 80057a2:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	4a64      	ldr	r2, [pc, #400]	; (8005938 <HAL_GPIO_DeInit+0x1e0>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d031      	beq.n	8005810 <HAL_GPIO_DeInit+0xb8>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	4a63      	ldr	r2, [pc, #396]	; (800593c <HAL_GPIO_DeInit+0x1e4>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d02b      	beq.n	800580c <HAL_GPIO_DeInit+0xb4>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	4a62      	ldr	r2, [pc, #392]	; (8005940 <HAL_GPIO_DeInit+0x1e8>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d025      	beq.n	8005808 <HAL_GPIO_DeInit+0xb0>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	4a61      	ldr	r2, [pc, #388]	; (8005944 <HAL_GPIO_DeInit+0x1ec>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d01f      	beq.n	8005804 <HAL_GPIO_DeInit+0xac>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	4a60      	ldr	r2, [pc, #384]	; (8005948 <HAL_GPIO_DeInit+0x1f0>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d019      	beq.n	8005800 <HAL_GPIO_DeInit+0xa8>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	4a5f      	ldr	r2, [pc, #380]	; (800594c <HAL_GPIO_DeInit+0x1f4>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d013      	beq.n	80057fc <HAL_GPIO_DeInit+0xa4>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4a5e      	ldr	r2, [pc, #376]	; (8005950 <HAL_GPIO_DeInit+0x1f8>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d00d      	beq.n	80057f8 <HAL_GPIO_DeInit+0xa0>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4a5d      	ldr	r2, [pc, #372]	; (8005954 <HAL_GPIO_DeInit+0x1fc>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d007      	beq.n	80057f4 <HAL_GPIO_DeInit+0x9c>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a5c      	ldr	r2, [pc, #368]	; (8005958 <HAL_GPIO_DeInit+0x200>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d101      	bne.n	80057f0 <HAL_GPIO_DeInit+0x98>
 80057ec:	2309      	movs	r3, #9
 80057ee:	e010      	b.n	8005812 <HAL_GPIO_DeInit+0xba>
 80057f0:	230a      	movs	r3, #10
 80057f2:	e00e      	b.n	8005812 <HAL_GPIO_DeInit+0xba>
 80057f4:	2307      	movs	r3, #7
 80057f6:	e00c      	b.n	8005812 <HAL_GPIO_DeInit+0xba>
 80057f8:	2306      	movs	r3, #6
 80057fa:	e00a      	b.n	8005812 <HAL_GPIO_DeInit+0xba>
 80057fc:	2305      	movs	r3, #5
 80057fe:	e008      	b.n	8005812 <HAL_GPIO_DeInit+0xba>
 8005800:	2304      	movs	r3, #4
 8005802:	e006      	b.n	8005812 <HAL_GPIO_DeInit+0xba>
 8005804:	2303      	movs	r3, #3
 8005806:	e004      	b.n	8005812 <HAL_GPIO_DeInit+0xba>
 8005808:	2302      	movs	r3, #2
 800580a:	e002      	b.n	8005812 <HAL_GPIO_DeInit+0xba>
 800580c:	2301      	movs	r3, #1
 800580e:	e000      	b.n	8005812 <HAL_GPIO_DeInit+0xba>
 8005810:	2300      	movs	r3, #0
 8005812:	697a      	ldr	r2, [r7, #20]
 8005814:	f002 0203 	and.w	r2, r2, #3
 8005818:	0092      	lsls	r2, r2, #2
 800581a:	4093      	lsls	r3, r2
 800581c:	68ba      	ldr	r2, [r7, #8]
 800581e:	429a      	cmp	r2, r3
 8005820:	d136      	bne.n	8005890 <HAL_GPIO_DeInit+0x138>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	43db      	mvns	r3, r3
 800582a:	401a      	ands	r2, r3
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	685a      	ldr	r2, [r3, #4]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	43db      	mvns	r3, r3
 8005838:	401a      	ands	r2, r3
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800583e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005842:	685a      	ldr	r2, [r3, #4]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	43db      	mvns	r3, r3
 8005848:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800584c:	4013      	ands	r3, r2
 800584e:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8005850:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	43db      	mvns	r3, r3
 800585a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800585e:	4013      	ands	r3, r2
 8005860:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	f003 0303 	and.w	r3, r3, #3
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	220f      	movs	r2, #15
 800586c:	fa02 f303 	lsl.w	r3, r2, r3
 8005870:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005872:	4a30      	ldr	r2, [pc, #192]	; (8005934 <HAL_GPIO_DeInit+0x1dc>)
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	089b      	lsrs	r3, r3, #2
 8005878:	3302      	adds	r3, #2
 800587a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	43da      	mvns	r2, r3
 8005882:	482c      	ldr	r0, [pc, #176]	; (8005934 <HAL_GPIO_DeInit+0x1dc>)
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	089b      	lsrs	r3, r3, #2
 8005888:	400a      	ands	r2, r1
 800588a:	3302      	adds	r3, #2
 800588c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	005b      	lsls	r3, r3, #1
 8005898:	2103      	movs	r1, #3
 800589a:	fa01 f303 	lsl.w	r3, r1, r3
 800589e:	431a      	orrs	r2, r3
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	08da      	lsrs	r2, r3, #3
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	3208      	adds	r2, #8
 80058ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	f003 0307 	and.w	r3, r3, #7
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	220f      	movs	r2, #15
 80058ba:	fa02 f303 	lsl.w	r3, r2, r3
 80058be:	43db      	mvns	r3, r3
 80058c0:	697a      	ldr	r2, [r7, #20]
 80058c2:	08d2      	lsrs	r2, r2, #3
 80058c4:	4019      	ands	r1, r3
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	3208      	adds	r2, #8
 80058ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	68da      	ldr	r2, [r3, #12]
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	005b      	lsls	r3, r3, #1
 80058d6:	2103      	movs	r1, #3
 80058d8:	fa01 f303 	lsl.w	r3, r1, r3
 80058dc:	43db      	mvns	r3, r3
 80058de:	401a      	ands	r2, r3
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	685a      	ldr	r2, [r3, #4]
 80058e8:	2101      	movs	r1, #1
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	fa01 f303 	lsl.w	r3, r1, r3
 80058f0:	43db      	mvns	r3, r3
 80058f2:	401a      	ands	r2, r3
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	689a      	ldr	r2, [r3, #8]
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	005b      	lsls	r3, r3, #1
 8005900:	2103      	movs	r1, #3
 8005902:	fa01 f303 	lsl.w	r3, r1, r3
 8005906:	43db      	mvns	r3, r3
 8005908:	401a      	ands	r2, r3
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	609a      	str	r2, [r3, #8]
    }

    position++;
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	3301      	adds	r3, #1
 8005912:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8005914:	683a      	ldr	r2, [r7, #0]
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	fa22 f303 	lsr.w	r3, r2, r3
 800591c:	2b00      	cmp	r3, #0
 800591e:	f47f af25 	bne.w	800576c <HAL_GPIO_DeInit+0x14>
  }
}
 8005922:	bf00      	nop
 8005924:	bf00      	nop
 8005926:	371c      	adds	r7, #28
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr
 8005930:	58000080 	.word	0x58000080
 8005934:	58000400 	.word	0x58000400
 8005938:	58020000 	.word	0x58020000
 800593c:	58020400 	.word	0x58020400
 8005940:	58020800 	.word	0x58020800
 8005944:	58020c00 	.word	0x58020c00
 8005948:	58021000 	.word	0x58021000
 800594c:	58021400 	.word	0x58021400
 8005950:	58021800 	.word	0x58021800
 8005954:	58021c00 	.word	0x58021c00
 8005958:	58022400 	.word	0x58022400

0800595c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	460b      	mov	r3, r1
 8005966:	807b      	strh	r3, [r7, #2]
 8005968:	4613      	mov	r3, r2
 800596a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800596c:	787b      	ldrb	r3, [r7, #1]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d003      	beq.n	800597a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005972:	887a      	ldrh	r2, [r7, #2]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005978:	e003      	b.n	8005982 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800597a:	887b      	ldrh	r3, [r7, #2]
 800597c:	041a      	lsls	r2, r3, #16
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	619a      	str	r2, [r3, #24]
}
 8005982:	bf00      	nop
 8005984:	370c      	adds	r7, #12
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr
	...

08005990 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8005998:	4b29      	ldr	r3, [pc, #164]	; (8005a40 <HAL_PWREx_ConfigSupply+0xb0>)
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	f003 0307 	and.w	r3, r3, #7
 80059a0:	2b06      	cmp	r3, #6
 80059a2:	d00a      	beq.n	80059ba <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80059a4:	4b26      	ldr	r3, [pc, #152]	; (8005a40 <HAL_PWREx_ConfigSupply+0xb0>)
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d001      	beq.n	80059b6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	e03f      	b.n	8005a36 <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80059b6:	2300      	movs	r3, #0
 80059b8:	e03d      	b.n	8005a36 <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80059ba:	4b21      	ldr	r3, [pc, #132]	; (8005a40 <HAL_PWREx_ConfigSupply+0xb0>)
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80059c2:	491f      	ldr	r1, [pc, #124]	; (8005a40 <HAL_PWREx_ConfigSupply+0xb0>)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80059ca:	f7fc fcc9 	bl	8002360 <HAL_GetTick>
 80059ce:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80059d0:	e009      	b.n	80059e6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80059d2:	f7fc fcc5 	bl	8002360 <HAL_GetTick>
 80059d6:	4602      	mov	r2, r0
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	1ad3      	subs	r3, r2, r3
 80059dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80059e0:	d901      	bls.n	80059e6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	e027      	b.n	8005a36 <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80059e6:	4b16      	ldr	r3, [pc, #88]	; (8005a40 <HAL_PWREx_ConfigSupply+0xb0>)
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80059ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059f2:	d1ee      	bne.n	80059d2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2b1e      	cmp	r3, #30
 80059f8:	d008      	beq.n	8005a0c <HAL_PWREx_ConfigSupply+0x7c>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2b2e      	cmp	r3, #46	; 0x2e
 80059fe:	d005      	beq.n	8005a0c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2b1d      	cmp	r3, #29
 8005a04:	d002      	beq.n	8005a0c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2b2d      	cmp	r3, #45	; 0x2d
 8005a0a:	d113      	bne.n	8005a34 <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005a0c:	f7fc fca8 	bl	8002360 <HAL_GetTick>
 8005a10:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005a12:	e009      	b.n	8005a28 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005a14:	f7fc fca4 	bl	8002360 <HAL_GetTick>
 8005a18:	4602      	mov	r2, r0
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	1ad3      	subs	r3, r2, r3
 8005a1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a22:	d901      	bls.n	8005a28 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	e006      	b.n	8005a36 <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005a28:	4b05      	ldr	r3, [pc, #20]	; (8005a40 <HAL_PWREx_ConfigSupply+0xb0>)
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	f003 0311 	and.w	r3, r3, #17
 8005a30:	2b11      	cmp	r3, #17
 8005a32:	d1ef      	bne.n	8005a14 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005a34:	2300      	movs	r3, #0
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3710      	adds	r7, #16
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	58024800 	.word	0x58024800

08005a44 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b08c      	sub	sp, #48	; 0x30
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d101      	bne.n	8005a56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	e397      	b.n	8006186 <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f003 0301 	and.w	r3, r3, #1
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	f000 8087 	beq.w	8005b72 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a64:	4b9e      	ldr	r3, [pc, #632]	; (8005ce0 <HAL_RCC_OscConfig+0x29c>)
 8005a66:	691b      	ldr	r3, [r3, #16]
 8005a68:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005a6e:	4b9c      	ldr	r3, [pc, #624]	; (8005ce0 <HAL_RCC_OscConfig+0x29c>)
 8005a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a72:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a76:	2b10      	cmp	r3, #16
 8005a78:	d007      	beq.n	8005a8a <HAL_RCC_OscConfig+0x46>
 8005a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a7c:	2b18      	cmp	r3, #24
 8005a7e:	d110      	bne.n	8005aa2 <HAL_RCC_OscConfig+0x5e>
 8005a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a82:	f003 0303 	and.w	r3, r3, #3
 8005a86:	2b02      	cmp	r3, #2
 8005a88:	d10b      	bne.n	8005aa2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a8a:	4b95      	ldr	r3, [pc, #596]	; (8005ce0 <HAL_RCC_OscConfig+0x29c>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d06c      	beq.n	8005b70 <HAL_RCC_OscConfig+0x12c>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d168      	bne.n	8005b70 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e371      	b.n	8006186 <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005aaa:	d106      	bne.n	8005aba <HAL_RCC_OscConfig+0x76>
 8005aac:	4b8c      	ldr	r3, [pc, #560]	; (8005ce0 <HAL_RCC_OscConfig+0x29c>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a8b      	ldr	r2, [pc, #556]	; (8005ce0 <HAL_RCC_OscConfig+0x29c>)
 8005ab2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ab6:	6013      	str	r3, [r2, #0]
 8005ab8:	e02e      	b.n	8005b18 <HAL_RCC_OscConfig+0xd4>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d10c      	bne.n	8005adc <HAL_RCC_OscConfig+0x98>
 8005ac2:	4b87      	ldr	r3, [pc, #540]	; (8005ce0 <HAL_RCC_OscConfig+0x29c>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a86      	ldr	r2, [pc, #536]	; (8005ce0 <HAL_RCC_OscConfig+0x29c>)
 8005ac8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005acc:	6013      	str	r3, [r2, #0]
 8005ace:	4b84      	ldr	r3, [pc, #528]	; (8005ce0 <HAL_RCC_OscConfig+0x29c>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a83      	ldr	r2, [pc, #524]	; (8005ce0 <HAL_RCC_OscConfig+0x29c>)
 8005ad4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ad8:	6013      	str	r3, [r2, #0]
 8005ada:	e01d      	b.n	8005b18 <HAL_RCC_OscConfig+0xd4>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ae4:	d10c      	bne.n	8005b00 <HAL_RCC_OscConfig+0xbc>
 8005ae6:	4b7e      	ldr	r3, [pc, #504]	; (8005ce0 <HAL_RCC_OscConfig+0x29c>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a7d      	ldr	r2, [pc, #500]	; (8005ce0 <HAL_RCC_OscConfig+0x29c>)
 8005aec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005af0:	6013      	str	r3, [r2, #0]
 8005af2:	4b7b      	ldr	r3, [pc, #492]	; (8005ce0 <HAL_RCC_OscConfig+0x29c>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a7a      	ldr	r2, [pc, #488]	; (8005ce0 <HAL_RCC_OscConfig+0x29c>)
 8005af8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005afc:	6013      	str	r3, [r2, #0]
 8005afe:	e00b      	b.n	8005b18 <HAL_RCC_OscConfig+0xd4>
 8005b00:	4b77      	ldr	r3, [pc, #476]	; (8005ce0 <HAL_RCC_OscConfig+0x29c>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a76      	ldr	r2, [pc, #472]	; (8005ce0 <HAL_RCC_OscConfig+0x29c>)
 8005b06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b0a:	6013      	str	r3, [r2, #0]
 8005b0c:	4b74      	ldr	r3, [pc, #464]	; (8005ce0 <HAL_RCC_OscConfig+0x29c>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a73      	ldr	r2, [pc, #460]	; (8005ce0 <HAL_RCC_OscConfig+0x29c>)
 8005b12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d013      	beq.n	8005b48 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b20:	f7fc fc1e 	bl	8002360 <HAL_GetTick>
 8005b24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005b26:	e008      	b.n	8005b3a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b28:	f7fc fc1a 	bl	8002360 <HAL_GetTick>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b30:	1ad3      	subs	r3, r2, r3
 8005b32:	2b64      	cmp	r3, #100	; 0x64
 8005b34:	d901      	bls.n	8005b3a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005b36:	2303      	movs	r3, #3
 8005b38:	e325      	b.n	8006186 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005b3a:	4b69      	ldr	r3, [pc, #420]	; (8005ce0 <HAL_RCC_OscConfig+0x29c>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d0f0      	beq.n	8005b28 <HAL_RCC_OscConfig+0xe4>
 8005b46:	e014      	b.n	8005b72 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b48:	f7fc fc0a 	bl	8002360 <HAL_GetTick>
 8005b4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005b4e:	e008      	b.n	8005b62 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b50:	f7fc fc06 	bl	8002360 <HAL_GetTick>
 8005b54:	4602      	mov	r2, r0
 8005b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b58:	1ad3      	subs	r3, r2, r3
 8005b5a:	2b64      	cmp	r3, #100	; 0x64
 8005b5c:	d901      	bls.n	8005b62 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005b5e:	2303      	movs	r3, #3
 8005b60:	e311      	b.n	8006186 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005b62:	4b5f      	ldr	r3, [pc, #380]	; (8005ce0 <HAL_RCC_OscConfig+0x29c>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d1f0      	bne.n	8005b50 <HAL_RCC_OscConfig+0x10c>
 8005b6e:	e000      	b.n	8005b72 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f003 0302 	and.w	r3, r3, #2
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	f000 808a 	beq.w	8005c94 <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b80:	4b57      	ldr	r3, [pc, #348]	; (8005ce0 <HAL_RCC_OscConfig+0x29c>)
 8005b82:	691b      	ldr	r3, [r3, #16]
 8005b84:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b88:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005b8a:	4b55      	ldr	r3, [pc, #340]	; (8005ce0 <HAL_RCC_OscConfig+0x29c>)
 8005b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b8e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005b90:	6a3b      	ldr	r3, [r7, #32]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d007      	beq.n	8005ba6 <HAL_RCC_OscConfig+0x162>
 8005b96:	6a3b      	ldr	r3, [r7, #32]
 8005b98:	2b18      	cmp	r3, #24
 8005b9a:	d137      	bne.n	8005c0c <HAL_RCC_OscConfig+0x1c8>
 8005b9c:	69fb      	ldr	r3, [r7, #28]
 8005b9e:	f003 0303 	and.w	r3, r3, #3
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d132      	bne.n	8005c0c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ba6:	4b4e      	ldr	r3, [pc, #312]	; (8005ce0 <HAL_RCC_OscConfig+0x29c>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f003 0304 	and.w	r3, r3, #4
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d005      	beq.n	8005bbe <HAL_RCC_OscConfig+0x17a>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	68db      	ldr	r3, [r3, #12]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d101      	bne.n	8005bbe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e2e3      	b.n	8006186 <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005bbe:	4b48      	ldr	r3, [pc, #288]	; (8005ce0 <HAL_RCC_OscConfig+0x29c>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f023 0219 	bic.w	r2, r3, #25
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	68db      	ldr	r3, [r3, #12]
 8005bca:	4945      	ldr	r1, [pc, #276]	; (8005ce0 <HAL_RCC_OscConfig+0x29c>)
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005bd0:	f7fc fbc6 	bl	8002360 <HAL_GetTick>
 8005bd4:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005bd6:	e008      	b.n	8005bea <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005bd8:	f7fc fbc2 	bl	8002360 <HAL_GetTick>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be0:	1ad3      	subs	r3, r2, r3
 8005be2:	2b02      	cmp	r3, #2
 8005be4:	d901      	bls.n	8005bea <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8005be6:	2303      	movs	r3, #3
 8005be8:	e2cd      	b.n	8006186 <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005bea:	4b3d      	ldr	r3, [pc, #244]	; (8005ce0 <HAL_RCC_OscConfig+0x29c>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 0304 	and.w	r3, r3, #4
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d0f0      	beq.n	8005bd8 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bf6:	4b3a      	ldr	r3, [pc, #232]	; (8005ce0 <HAL_RCC_OscConfig+0x29c>)
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	691b      	ldr	r3, [r3, #16]
 8005c02:	061b      	lsls	r3, r3, #24
 8005c04:	4936      	ldr	r1, [pc, #216]	; (8005ce0 <HAL_RCC_OscConfig+0x29c>)
 8005c06:	4313      	orrs	r3, r2
 8005c08:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c0a:	e043      	b.n	8005c94 <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	68db      	ldr	r3, [r3, #12]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d026      	beq.n	8005c62 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005c14:	4b32      	ldr	r3, [pc, #200]	; (8005ce0 <HAL_RCC_OscConfig+0x29c>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f023 0219 	bic.w	r2, r3, #25
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	492f      	ldr	r1, [pc, #188]	; (8005ce0 <HAL_RCC_OscConfig+0x29c>)
 8005c22:	4313      	orrs	r3, r2
 8005c24:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c26:	f7fc fb9b 	bl	8002360 <HAL_GetTick>
 8005c2a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c2c:	e008      	b.n	8005c40 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c2e:	f7fc fb97 	bl	8002360 <HAL_GetTick>
 8005c32:	4602      	mov	r2, r0
 8005c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c36:	1ad3      	subs	r3, r2, r3
 8005c38:	2b02      	cmp	r3, #2
 8005c3a:	d901      	bls.n	8005c40 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005c3c:	2303      	movs	r3, #3
 8005c3e:	e2a2      	b.n	8006186 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c40:	4b27      	ldr	r3, [pc, #156]	; (8005ce0 <HAL_RCC_OscConfig+0x29c>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f003 0304 	and.w	r3, r3, #4
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d0f0      	beq.n	8005c2e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c4c:	4b24      	ldr	r3, [pc, #144]	; (8005ce0 <HAL_RCC_OscConfig+0x29c>)
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	691b      	ldr	r3, [r3, #16]
 8005c58:	061b      	lsls	r3, r3, #24
 8005c5a:	4921      	ldr	r1, [pc, #132]	; (8005ce0 <HAL_RCC_OscConfig+0x29c>)
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	604b      	str	r3, [r1, #4]
 8005c60:	e018      	b.n	8005c94 <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c62:	4b1f      	ldr	r3, [pc, #124]	; (8005ce0 <HAL_RCC_OscConfig+0x29c>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a1e      	ldr	r2, [pc, #120]	; (8005ce0 <HAL_RCC_OscConfig+0x29c>)
 8005c68:	f023 0301 	bic.w	r3, r3, #1
 8005c6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c6e:	f7fc fb77 	bl	8002360 <HAL_GetTick>
 8005c72:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005c74:	e008      	b.n	8005c88 <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c76:	f7fc fb73 	bl	8002360 <HAL_GetTick>
 8005c7a:	4602      	mov	r2, r0
 8005c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7e:	1ad3      	subs	r3, r2, r3
 8005c80:	2b02      	cmp	r3, #2
 8005c82:	d901      	bls.n	8005c88 <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 8005c84:	2303      	movs	r3, #3
 8005c86:	e27e      	b.n	8006186 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005c88:	4b15      	ldr	r3, [pc, #84]	; (8005ce0 <HAL_RCC_OscConfig+0x29c>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 0304 	and.w	r3, r3, #4
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d1f0      	bne.n	8005c76 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f003 0310 	and.w	r3, r3, #16
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d06d      	beq.n	8005d7c <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ca0:	4b0f      	ldr	r3, [pc, #60]	; (8005ce0 <HAL_RCC_OscConfig+0x29c>)
 8005ca2:	691b      	ldr	r3, [r3, #16]
 8005ca4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ca8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005caa:	4b0d      	ldr	r3, [pc, #52]	; (8005ce0 <HAL_RCC_OscConfig+0x29c>)
 8005cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cae:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005cb0:	69bb      	ldr	r3, [r7, #24]
 8005cb2:	2b08      	cmp	r3, #8
 8005cb4:	d007      	beq.n	8005cc6 <HAL_RCC_OscConfig+0x282>
 8005cb6:	69bb      	ldr	r3, [r7, #24]
 8005cb8:	2b18      	cmp	r3, #24
 8005cba:	d11e      	bne.n	8005cfa <HAL_RCC_OscConfig+0x2b6>
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	f003 0303 	and.w	r3, r3, #3
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d119      	bne.n	8005cfa <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005cc6:	4b06      	ldr	r3, [pc, #24]	; (8005ce0 <HAL_RCC_OscConfig+0x29c>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d008      	beq.n	8005ce4 <HAL_RCC_OscConfig+0x2a0>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	69db      	ldr	r3, [r3, #28]
 8005cd6:	2b80      	cmp	r3, #128	; 0x80
 8005cd8:	d004      	beq.n	8005ce4 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e253      	b.n	8006186 <HAL_RCC_OscConfig+0x742>
 8005cde:	bf00      	nop
 8005ce0:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005ce4:	4ba3      	ldr	r3, [pc, #652]	; (8005f74 <HAL_RCC_OscConfig+0x530>)
 8005ce6:	68db      	ldr	r3, [r3, #12]
 8005ce8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6a1b      	ldr	r3, [r3, #32]
 8005cf0:	061b      	lsls	r3, r3, #24
 8005cf2:	49a0      	ldr	r1, [pc, #640]	; (8005f74 <HAL_RCC_OscConfig+0x530>)
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005cf8:	e040      	b.n	8005d7c <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	69db      	ldr	r3, [r3, #28]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d023      	beq.n	8005d4a <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005d02:	4b9c      	ldr	r3, [pc, #624]	; (8005f74 <HAL_RCC_OscConfig+0x530>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a9b      	ldr	r2, [pc, #620]	; (8005f74 <HAL_RCC_OscConfig+0x530>)
 8005d08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d0e:	f7fc fb27 	bl	8002360 <HAL_GetTick>
 8005d12:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005d14:	e008      	b.n	8005d28 <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005d16:	f7fc fb23 	bl	8002360 <HAL_GetTick>
 8005d1a:	4602      	mov	r2, r0
 8005d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1e:	1ad3      	subs	r3, r2, r3
 8005d20:	2b02      	cmp	r3, #2
 8005d22:	d901      	bls.n	8005d28 <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 8005d24:	2303      	movs	r3, #3
 8005d26:	e22e      	b.n	8006186 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005d28:	4b92      	ldr	r3, [pc, #584]	; (8005f74 <HAL_RCC_OscConfig+0x530>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d0f0      	beq.n	8005d16 <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005d34:	4b8f      	ldr	r3, [pc, #572]	; (8005f74 <HAL_RCC_OscConfig+0x530>)
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6a1b      	ldr	r3, [r3, #32]
 8005d40:	061b      	lsls	r3, r3, #24
 8005d42:	498c      	ldr	r1, [pc, #560]	; (8005f74 <HAL_RCC_OscConfig+0x530>)
 8005d44:	4313      	orrs	r3, r2
 8005d46:	60cb      	str	r3, [r1, #12]
 8005d48:	e018      	b.n	8005d7c <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005d4a:	4b8a      	ldr	r3, [pc, #552]	; (8005f74 <HAL_RCC_OscConfig+0x530>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a89      	ldr	r2, [pc, #548]	; (8005f74 <HAL_RCC_OscConfig+0x530>)
 8005d50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d56:	f7fc fb03 	bl	8002360 <HAL_GetTick>
 8005d5a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005d5c:	e008      	b.n	8005d70 <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005d5e:	f7fc faff 	bl	8002360 <HAL_GetTick>
 8005d62:	4602      	mov	r2, r0
 8005d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d66:	1ad3      	subs	r3, r2, r3
 8005d68:	2b02      	cmp	r3, #2
 8005d6a:	d901      	bls.n	8005d70 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8005d6c:	2303      	movs	r3, #3
 8005d6e:	e20a      	b.n	8006186 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005d70:	4b80      	ldr	r3, [pc, #512]	; (8005f74 <HAL_RCC_OscConfig+0x530>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d1f0      	bne.n	8005d5e <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f003 0308 	and.w	r3, r3, #8
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d036      	beq.n	8005df6 <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	695b      	ldr	r3, [r3, #20]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d019      	beq.n	8005dc4 <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d90:	4b78      	ldr	r3, [pc, #480]	; (8005f74 <HAL_RCC_OscConfig+0x530>)
 8005d92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d94:	4a77      	ldr	r2, [pc, #476]	; (8005f74 <HAL_RCC_OscConfig+0x530>)
 8005d96:	f043 0301 	orr.w	r3, r3, #1
 8005d9a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d9c:	f7fc fae0 	bl	8002360 <HAL_GetTick>
 8005da0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005da2:	e008      	b.n	8005db6 <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005da4:	f7fc fadc 	bl	8002360 <HAL_GetTick>
 8005da8:	4602      	mov	r2, r0
 8005daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dac:	1ad3      	subs	r3, r2, r3
 8005dae:	2b02      	cmp	r3, #2
 8005db0:	d901      	bls.n	8005db6 <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 8005db2:	2303      	movs	r3, #3
 8005db4:	e1e7      	b.n	8006186 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005db6:	4b6f      	ldr	r3, [pc, #444]	; (8005f74 <HAL_RCC_OscConfig+0x530>)
 8005db8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dba:	f003 0302 	and.w	r3, r3, #2
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d0f0      	beq.n	8005da4 <HAL_RCC_OscConfig+0x360>
 8005dc2:	e018      	b.n	8005df6 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005dc4:	4b6b      	ldr	r3, [pc, #428]	; (8005f74 <HAL_RCC_OscConfig+0x530>)
 8005dc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dc8:	4a6a      	ldr	r2, [pc, #424]	; (8005f74 <HAL_RCC_OscConfig+0x530>)
 8005dca:	f023 0301 	bic.w	r3, r3, #1
 8005dce:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dd0:	f7fc fac6 	bl	8002360 <HAL_GetTick>
 8005dd4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005dd6:	e008      	b.n	8005dea <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005dd8:	f7fc fac2 	bl	8002360 <HAL_GetTick>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de0:	1ad3      	subs	r3, r2, r3
 8005de2:	2b02      	cmp	r3, #2
 8005de4:	d901      	bls.n	8005dea <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8005de6:	2303      	movs	r3, #3
 8005de8:	e1cd      	b.n	8006186 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005dea:	4b62      	ldr	r3, [pc, #392]	; (8005f74 <HAL_RCC_OscConfig+0x530>)
 8005dec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dee:	f003 0302 	and.w	r3, r3, #2
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d1f0      	bne.n	8005dd8 <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 0320 	and.w	r3, r3, #32
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d036      	beq.n	8005e70 <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	699b      	ldr	r3, [r3, #24]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d019      	beq.n	8005e3e <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005e0a:	4b5a      	ldr	r3, [pc, #360]	; (8005f74 <HAL_RCC_OscConfig+0x530>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a59      	ldr	r2, [pc, #356]	; (8005f74 <HAL_RCC_OscConfig+0x530>)
 8005e10:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005e14:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005e16:	f7fc faa3 	bl	8002360 <HAL_GetTick>
 8005e1a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005e1c:	e008      	b.n	8005e30 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005e1e:	f7fc fa9f 	bl	8002360 <HAL_GetTick>
 8005e22:	4602      	mov	r2, r0
 8005e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e26:	1ad3      	subs	r3, r2, r3
 8005e28:	2b02      	cmp	r3, #2
 8005e2a:	d901      	bls.n	8005e30 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8005e2c:	2303      	movs	r3, #3
 8005e2e:	e1aa      	b.n	8006186 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005e30:	4b50      	ldr	r3, [pc, #320]	; (8005f74 <HAL_RCC_OscConfig+0x530>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d0f0      	beq.n	8005e1e <HAL_RCC_OscConfig+0x3da>
 8005e3c:	e018      	b.n	8005e70 <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005e3e:	4b4d      	ldr	r3, [pc, #308]	; (8005f74 <HAL_RCC_OscConfig+0x530>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a4c      	ldr	r2, [pc, #304]	; (8005f74 <HAL_RCC_OscConfig+0x530>)
 8005e44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e48:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005e4a:	f7fc fa89 	bl	8002360 <HAL_GetTick>
 8005e4e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005e50:	e008      	b.n	8005e64 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005e52:	f7fc fa85 	bl	8002360 <HAL_GetTick>
 8005e56:	4602      	mov	r2, r0
 8005e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5a:	1ad3      	subs	r3, r2, r3
 8005e5c:	2b02      	cmp	r3, #2
 8005e5e:	d901      	bls.n	8005e64 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 8005e60:	2303      	movs	r3, #3
 8005e62:	e190      	b.n	8006186 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005e64:	4b43      	ldr	r3, [pc, #268]	; (8005f74 <HAL_RCC_OscConfig+0x530>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d1f0      	bne.n	8005e52 <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f003 0304 	and.w	r3, r3, #4
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	f000 8085 	beq.w	8005f88 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005e7e:	4b3e      	ldr	r3, [pc, #248]	; (8005f78 <HAL_RCC_OscConfig+0x534>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a3d      	ldr	r2, [pc, #244]	; (8005f78 <HAL_RCC_OscConfig+0x534>)
 8005e84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e88:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005e8a:	f7fc fa69 	bl	8002360 <HAL_GetTick>
 8005e8e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e90:	e008      	b.n	8005ea4 <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005e92:	f7fc fa65 	bl	8002360 <HAL_GetTick>
 8005e96:	4602      	mov	r2, r0
 8005e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9a:	1ad3      	subs	r3, r2, r3
 8005e9c:	2b64      	cmp	r3, #100	; 0x64
 8005e9e:	d901      	bls.n	8005ea4 <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 8005ea0:	2303      	movs	r3, #3
 8005ea2:	e170      	b.n	8006186 <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ea4:	4b34      	ldr	r3, [pc, #208]	; (8005f78 <HAL_RCC_OscConfig+0x534>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d0f0      	beq.n	8005e92 <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d106      	bne.n	8005ec6 <HAL_RCC_OscConfig+0x482>
 8005eb8:	4b2e      	ldr	r3, [pc, #184]	; (8005f74 <HAL_RCC_OscConfig+0x530>)
 8005eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ebc:	4a2d      	ldr	r2, [pc, #180]	; (8005f74 <HAL_RCC_OscConfig+0x530>)
 8005ebe:	f043 0301 	orr.w	r3, r3, #1
 8005ec2:	6713      	str	r3, [r2, #112]	; 0x70
 8005ec4:	e02d      	b.n	8005f22 <HAL_RCC_OscConfig+0x4de>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d10c      	bne.n	8005ee8 <HAL_RCC_OscConfig+0x4a4>
 8005ece:	4b29      	ldr	r3, [pc, #164]	; (8005f74 <HAL_RCC_OscConfig+0x530>)
 8005ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ed2:	4a28      	ldr	r2, [pc, #160]	; (8005f74 <HAL_RCC_OscConfig+0x530>)
 8005ed4:	f023 0301 	bic.w	r3, r3, #1
 8005ed8:	6713      	str	r3, [r2, #112]	; 0x70
 8005eda:	4b26      	ldr	r3, [pc, #152]	; (8005f74 <HAL_RCC_OscConfig+0x530>)
 8005edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ede:	4a25      	ldr	r2, [pc, #148]	; (8005f74 <HAL_RCC_OscConfig+0x530>)
 8005ee0:	f023 0304 	bic.w	r3, r3, #4
 8005ee4:	6713      	str	r3, [r2, #112]	; 0x70
 8005ee6:	e01c      	b.n	8005f22 <HAL_RCC_OscConfig+0x4de>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	2b05      	cmp	r3, #5
 8005eee:	d10c      	bne.n	8005f0a <HAL_RCC_OscConfig+0x4c6>
 8005ef0:	4b20      	ldr	r3, [pc, #128]	; (8005f74 <HAL_RCC_OscConfig+0x530>)
 8005ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ef4:	4a1f      	ldr	r2, [pc, #124]	; (8005f74 <HAL_RCC_OscConfig+0x530>)
 8005ef6:	f043 0304 	orr.w	r3, r3, #4
 8005efa:	6713      	str	r3, [r2, #112]	; 0x70
 8005efc:	4b1d      	ldr	r3, [pc, #116]	; (8005f74 <HAL_RCC_OscConfig+0x530>)
 8005efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f00:	4a1c      	ldr	r2, [pc, #112]	; (8005f74 <HAL_RCC_OscConfig+0x530>)
 8005f02:	f043 0301 	orr.w	r3, r3, #1
 8005f06:	6713      	str	r3, [r2, #112]	; 0x70
 8005f08:	e00b      	b.n	8005f22 <HAL_RCC_OscConfig+0x4de>
 8005f0a:	4b1a      	ldr	r3, [pc, #104]	; (8005f74 <HAL_RCC_OscConfig+0x530>)
 8005f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f0e:	4a19      	ldr	r2, [pc, #100]	; (8005f74 <HAL_RCC_OscConfig+0x530>)
 8005f10:	f023 0301 	bic.w	r3, r3, #1
 8005f14:	6713      	str	r3, [r2, #112]	; 0x70
 8005f16:	4b17      	ldr	r3, [pc, #92]	; (8005f74 <HAL_RCC_OscConfig+0x530>)
 8005f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f1a:	4a16      	ldr	r2, [pc, #88]	; (8005f74 <HAL_RCC_OscConfig+0x530>)
 8005f1c:	f023 0304 	bic.w	r3, r3, #4
 8005f20:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d015      	beq.n	8005f56 <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f2a:	f7fc fa19 	bl	8002360 <HAL_GetTick>
 8005f2e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005f30:	e00a      	b.n	8005f48 <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f32:	f7fc fa15 	bl	8002360 <HAL_GetTick>
 8005f36:	4602      	mov	r2, r0
 8005f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3a:	1ad3      	subs	r3, r2, r3
 8005f3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d901      	bls.n	8005f48 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8005f44:	2303      	movs	r3, #3
 8005f46:	e11e      	b.n	8006186 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005f48:	4b0a      	ldr	r3, [pc, #40]	; (8005f74 <HAL_RCC_OscConfig+0x530>)
 8005f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f4c:	f003 0302 	and.w	r3, r3, #2
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d0ee      	beq.n	8005f32 <HAL_RCC_OscConfig+0x4ee>
 8005f54:	e018      	b.n	8005f88 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f56:	f7fc fa03 	bl	8002360 <HAL_GetTick>
 8005f5a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005f5c:	e00e      	b.n	8005f7c <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f5e:	f7fc f9ff 	bl	8002360 <HAL_GetTick>
 8005f62:	4602      	mov	r2, r0
 8005f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f66:	1ad3      	subs	r3, r2, r3
 8005f68:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d905      	bls.n	8005f7c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8005f70:	2303      	movs	r3, #3
 8005f72:	e108      	b.n	8006186 <HAL_RCC_OscConfig+0x742>
 8005f74:	58024400 	.word	0x58024400
 8005f78:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005f7c:	4b84      	ldr	r3, [pc, #528]	; (8006190 <HAL_RCC_OscConfig+0x74c>)
 8005f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f80:	f003 0302 	and.w	r3, r3, #2
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d1ea      	bne.n	8005f5e <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	f000 80f9 	beq.w	8006184 <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005f92:	4b7f      	ldr	r3, [pc, #508]	; (8006190 <HAL_RCC_OscConfig+0x74c>)
 8005f94:	691b      	ldr	r3, [r3, #16]
 8005f96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f9a:	2b18      	cmp	r3, #24
 8005f9c:	f000 80b4 	beq.w	8006108 <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa4:	2b02      	cmp	r3, #2
 8005fa6:	f040 8095 	bne.w	80060d4 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005faa:	4b79      	ldr	r3, [pc, #484]	; (8006190 <HAL_RCC_OscConfig+0x74c>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a78      	ldr	r2, [pc, #480]	; (8006190 <HAL_RCC_OscConfig+0x74c>)
 8005fb0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005fb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fb6:	f7fc f9d3 	bl	8002360 <HAL_GetTick>
 8005fba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005fbc:	e008      	b.n	8005fd0 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005fbe:	f7fc f9cf 	bl	8002360 <HAL_GetTick>
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc6:	1ad3      	subs	r3, r2, r3
 8005fc8:	2b02      	cmp	r3, #2
 8005fca:	d901      	bls.n	8005fd0 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8005fcc:	2303      	movs	r3, #3
 8005fce:	e0da      	b.n	8006186 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005fd0:	4b6f      	ldr	r3, [pc, #444]	; (8006190 <HAL_RCC_OscConfig+0x74c>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d1f0      	bne.n	8005fbe <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005fdc:	4b6c      	ldr	r3, [pc, #432]	; (8006190 <HAL_RCC_OscConfig+0x74c>)
 8005fde:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005fe0:	4b6c      	ldr	r3, [pc, #432]	; (8006194 <HAL_RCC_OscConfig+0x750>)
 8005fe2:	4013      	ands	r3, r2
 8005fe4:	687a      	ldr	r2, [r7, #4]
 8005fe6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005fe8:	687a      	ldr	r2, [r7, #4]
 8005fea:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005fec:	0112      	lsls	r2, r2, #4
 8005fee:	430a      	orrs	r2, r1
 8005ff0:	4967      	ldr	r1, [pc, #412]	; (8006190 <HAL_RCC_OscConfig+0x74c>)
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	628b      	str	r3, [r1, #40]	; 0x28
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ffa:	3b01      	subs	r3, #1
 8005ffc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006004:	3b01      	subs	r3, #1
 8006006:	025b      	lsls	r3, r3, #9
 8006008:	b29b      	uxth	r3, r3
 800600a:	431a      	orrs	r2, r3
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006010:	3b01      	subs	r3, #1
 8006012:	041b      	lsls	r3, r3, #16
 8006014:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006018:	431a      	orrs	r2, r3
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800601e:	3b01      	subs	r3, #1
 8006020:	061b      	lsls	r3, r3, #24
 8006022:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006026:	495a      	ldr	r1, [pc, #360]	; (8006190 <HAL_RCC_OscConfig+0x74c>)
 8006028:	4313      	orrs	r3, r2
 800602a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800602c:	4b58      	ldr	r3, [pc, #352]	; (8006190 <HAL_RCC_OscConfig+0x74c>)
 800602e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006030:	4a57      	ldr	r2, [pc, #348]	; (8006190 <HAL_RCC_OscConfig+0x74c>)
 8006032:	f023 0301 	bic.w	r3, r3, #1
 8006036:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006038:	4b55      	ldr	r3, [pc, #340]	; (8006190 <HAL_RCC_OscConfig+0x74c>)
 800603a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800603c:	4b56      	ldr	r3, [pc, #344]	; (8006198 <HAL_RCC_OscConfig+0x754>)
 800603e:	4013      	ands	r3, r2
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006044:	00d2      	lsls	r2, r2, #3
 8006046:	4952      	ldr	r1, [pc, #328]	; (8006190 <HAL_RCC_OscConfig+0x74c>)
 8006048:	4313      	orrs	r3, r2
 800604a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800604c:	4b50      	ldr	r3, [pc, #320]	; (8006190 <HAL_RCC_OscConfig+0x74c>)
 800604e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006050:	f023 020c 	bic.w	r2, r3, #12
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006058:	494d      	ldr	r1, [pc, #308]	; (8006190 <HAL_RCC_OscConfig+0x74c>)
 800605a:	4313      	orrs	r3, r2
 800605c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800605e:	4b4c      	ldr	r3, [pc, #304]	; (8006190 <HAL_RCC_OscConfig+0x74c>)
 8006060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006062:	f023 0202 	bic.w	r2, r3, #2
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800606a:	4949      	ldr	r1, [pc, #292]	; (8006190 <HAL_RCC_OscConfig+0x74c>)
 800606c:	4313      	orrs	r3, r2
 800606e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006070:	4b47      	ldr	r3, [pc, #284]	; (8006190 <HAL_RCC_OscConfig+0x74c>)
 8006072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006074:	4a46      	ldr	r2, [pc, #280]	; (8006190 <HAL_RCC_OscConfig+0x74c>)
 8006076:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800607a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800607c:	4b44      	ldr	r3, [pc, #272]	; (8006190 <HAL_RCC_OscConfig+0x74c>)
 800607e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006080:	4a43      	ldr	r2, [pc, #268]	; (8006190 <HAL_RCC_OscConfig+0x74c>)
 8006082:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006086:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006088:	4b41      	ldr	r3, [pc, #260]	; (8006190 <HAL_RCC_OscConfig+0x74c>)
 800608a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800608c:	4a40      	ldr	r2, [pc, #256]	; (8006190 <HAL_RCC_OscConfig+0x74c>)
 800608e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006092:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006094:	4b3e      	ldr	r3, [pc, #248]	; (8006190 <HAL_RCC_OscConfig+0x74c>)
 8006096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006098:	4a3d      	ldr	r2, [pc, #244]	; (8006190 <HAL_RCC_OscConfig+0x74c>)
 800609a:	f043 0301 	orr.w	r3, r3, #1
 800609e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80060a0:	4b3b      	ldr	r3, [pc, #236]	; (8006190 <HAL_RCC_OscConfig+0x74c>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a3a      	ldr	r2, [pc, #232]	; (8006190 <HAL_RCC_OscConfig+0x74c>)
 80060a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80060aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060ac:	f7fc f958 	bl	8002360 <HAL_GetTick>
 80060b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80060b2:	e008      	b.n	80060c6 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060b4:	f7fc f954 	bl	8002360 <HAL_GetTick>
 80060b8:	4602      	mov	r2, r0
 80060ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060bc:	1ad3      	subs	r3, r2, r3
 80060be:	2b02      	cmp	r3, #2
 80060c0:	d901      	bls.n	80060c6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80060c2:	2303      	movs	r3, #3
 80060c4:	e05f      	b.n	8006186 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80060c6:	4b32      	ldr	r3, [pc, #200]	; (8006190 <HAL_RCC_OscConfig+0x74c>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d0f0      	beq.n	80060b4 <HAL_RCC_OscConfig+0x670>
 80060d2:	e057      	b.n	8006184 <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060d4:	4b2e      	ldr	r3, [pc, #184]	; (8006190 <HAL_RCC_OscConfig+0x74c>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a2d      	ldr	r2, [pc, #180]	; (8006190 <HAL_RCC_OscConfig+0x74c>)
 80060da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80060de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060e0:	f7fc f93e 	bl	8002360 <HAL_GetTick>
 80060e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80060e6:	e008      	b.n	80060fa <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060e8:	f7fc f93a 	bl	8002360 <HAL_GetTick>
 80060ec:	4602      	mov	r2, r0
 80060ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f0:	1ad3      	subs	r3, r2, r3
 80060f2:	2b02      	cmp	r3, #2
 80060f4:	d901      	bls.n	80060fa <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80060f6:	2303      	movs	r3, #3
 80060f8:	e045      	b.n	8006186 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80060fa:	4b25      	ldr	r3, [pc, #148]	; (8006190 <HAL_RCC_OscConfig+0x74c>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006102:	2b00      	cmp	r3, #0
 8006104:	d1f0      	bne.n	80060e8 <HAL_RCC_OscConfig+0x6a4>
 8006106:	e03d      	b.n	8006184 <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006108:	4b21      	ldr	r3, [pc, #132]	; (8006190 <HAL_RCC_OscConfig+0x74c>)
 800610a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800610c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800610e:	4b20      	ldr	r3, [pc, #128]	; (8006190 <HAL_RCC_OscConfig+0x74c>)
 8006110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006112:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006118:	2b01      	cmp	r3, #1
 800611a:	d031      	beq.n	8006180 <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	f003 0203 	and.w	r2, r3, #3
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006126:	429a      	cmp	r2, r3
 8006128:	d12a      	bne.n	8006180 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	091b      	lsrs	r3, r3, #4
 800612e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006136:	429a      	cmp	r2, r3
 8006138:	d122      	bne.n	8006180 <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006144:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006146:	429a      	cmp	r2, r3
 8006148:	d11a      	bne.n	8006180 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	0a5b      	lsrs	r3, r3, #9
 800614e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006156:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006158:	429a      	cmp	r2, r3
 800615a:	d111      	bne.n	8006180 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	0c1b      	lsrs	r3, r3, #16
 8006160:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006168:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800616a:	429a      	cmp	r2, r3
 800616c:	d108      	bne.n	8006180 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	0e1b      	lsrs	r3, r3, #24
 8006172:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800617a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800617c:	429a      	cmp	r2, r3
 800617e:	d001      	beq.n	8006184 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 8006180:	2301      	movs	r3, #1
 8006182:	e000      	b.n	8006186 <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 8006184:	2300      	movs	r3, #0
}
 8006186:	4618      	mov	r0, r3
 8006188:	3730      	adds	r7, #48	; 0x30
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
 800618e:	bf00      	nop
 8006190:	58024400 	.word	0x58024400
 8006194:	fffffc0c 	.word	0xfffffc0c
 8006198:	ffff0007 	.word	0xffff0007

0800619c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b086      	sub	sp, #24
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d101      	bne.n	80061b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	e19c      	b.n	80064ea <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80061b0:	4b8a      	ldr	r3, [pc, #552]	; (80063dc <HAL_RCC_ClockConfig+0x240>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f003 030f 	and.w	r3, r3, #15
 80061b8:	683a      	ldr	r2, [r7, #0]
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d910      	bls.n	80061e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061be:	4b87      	ldr	r3, [pc, #540]	; (80063dc <HAL_RCC_ClockConfig+0x240>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f023 020f 	bic.w	r2, r3, #15
 80061c6:	4985      	ldr	r1, [pc, #532]	; (80063dc <HAL_RCC_ClockConfig+0x240>)
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80061ce:	4b83      	ldr	r3, [pc, #524]	; (80063dc <HAL_RCC_ClockConfig+0x240>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f003 030f 	and.w	r3, r3, #15
 80061d6:	683a      	ldr	r2, [r7, #0]
 80061d8:	429a      	cmp	r2, r3
 80061da:	d001      	beq.n	80061e0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80061dc:	2301      	movs	r3, #1
 80061de:	e184      	b.n	80064ea <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f003 0304 	and.w	r3, r3, #4
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d010      	beq.n	800620e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	691a      	ldr	r2, [r3, #16]
 80061f0:	4b7b      	ldr	r3, [pc, #492]	; (80063e0 <HAL_RCC_ClockConfig+0x244>)
 80061f2:	699b      	ldr	r3, [r3, #24]
 80061f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d908      	bls.n	800620e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80061fc:	4b78      	ldr	r3, [pc, #480]	; (80063e0 <HAL_RCC_ClockConfig+0x244>)
 80061fe:	699b      	ldr	r3, [r3, #24]
 8006200:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	691b      	ldr	r3, [r3, #16]
 8006208:	4975      	ldr	r1, [pc, #468]	; (80063e0 <HAL_RCC_ClockConfig+0x244>)
 800620a:	4313      	orrs	r3, r2
 800620c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f003 0308 	and.w	r3, r3, #8
 8006216:	2b00      	cmp	r3, #0
 8006218:	d010      	beq.n	800623c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	695a      	ldr	r2, [r3, #20]
 800621e:	4b70      	ldr	r3, [pc, #448]	; (80063e0 <HAL_RCC_ClockConfig+0x244>)
 8006220:	69db      	ldr	r3, [r3, #28]
 8006222:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006226:	429a      	cmp	r2, r3
 8006228:	d908      	bls.n	800623c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800622a:	4b6d      	ldr	r3, [pc, #436]	; (80063e0 <HAL_RCC_ClockConfig+0x244>)
 800622c:	69db      	ldr	r3, [r3, #28]
 800622e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	695b      	ldr	r3, [r3, #20]
 8006236:	496a      	ldr	r1, [pc, #424]	; (80063e0 <HAL_RCC_ClockConfig+0x244>)
 8006238:	4313      	orrs	r3, r2
 800623a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f003 0310 	and.w	r3, r3, #16
 8006244:	2b00      	cmp	r3, #0
 8006246:	d010      	beq.n	800626a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	699a      	ldr	r2, [r3, #24]
 800624c:	4b64      	ldr	r3, [pc, #400]	; (80063e0 <HAL_RCC_ClockConfig+0x244>)
 800624e:	69db      	ldr	r3, [r3, #28]
 8006250:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006254:	429a      	cmp	r2, r3
 8006256:	d908      	bls.n	800626a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006258:	4b61      	ldr	r3, [pc, #388]	; (80063e0 <HAL_RCC_ClockConfig+0x244>)
 800625a:	69db      	ldr	r3, [r3, #28]
 800625c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	699b      	ldr	r3, [r3, #24]
 8006264:	495e      	ldr	r1, [pc, #376]	; (80063e0 <HAL_RCC_ClockConfig+0x244>)
 8006266:	4313      	orrs	r3, r2
 8006268:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f003 0320 	and.w	r3, r3, #32
 8006272:	2b00      	cmp	r3, #0
 8006274:	d010      	beq.n	8006298 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	69da      	ldr	r2, [r3, #28]
 800627a:	4b59      	ldr	r3, [pc, #356]	; (80063e0 <HAL_RCC_ClockConfig+0x244>)
 800627c:	6a1b      	ldr	r3, [r3, #32]
 800627e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006282:	429a      	cmp	r2, r3
 8006284:	d908      	bls.n	8006298 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006286:	4b56      	ldr	r3, [pc, #344]	; (80063e0 <HAL_RCC_ClockConfig+0x244>)
 8006288:	6a1b      	ldr	r3, [r3, #32]
 800628a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	69db      	ldr	r3, [r3, #28]
 8006292:	4953      	ldr	r1, [pc, #332]	; (80063e0 <HAL_RCC_ClockConfig+0x244>)
 8006294:	4313      	orrs	r3, r2
 8006296:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 0302 	and.w	r3, r3, #2
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d010      	beq.n	80062c6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	68da      	ldr	r2, [r3, #12]
 80062a8:	4b4d      	ldr	r3, [pc, #308]	; (80063e0 <HAL_RCC_ClockConfig+0x244>)
 80062aa:	699b      	ldr	r3, [r3, #24]
 80062ac:	f003 030f 	and.w	r3, r3, #15
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d908      	bls.n	80062c6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80062b4:	4b4a      	ldr	r3, [pc, #296]	; (80063e0 <HAL_RCC_ClockConfig+0x244>)
 80062b6:	699b      	ldr	r3, [r3, #24]
 80062b8:	f023 020f 	bic.w	r2, r3, #15
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	68db      	ldr	r3, [r3, #12]
 80062c0:	4947      	ldr	r1, [pc, #284]	; (80063e0 <HAL_RCC_ClockConfig+0x244>)
 80062c2:	4313      	orrs	r3, r2
 80062c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f003 0301 	and.w	r3, r3, #1
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d055      	beq.n	800637e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80062d2:	4b43      	ldr	r3, [pc, #268]	; (80063e0 <HAL_RCC_ClockConfig+0x244>)
 80062d4:	699b      	ldr	r3, [r3, #24]
 80062d6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	4940      	ldr	r1, [pc, #256]	; (80063e0 <HAL_RCC_ClockConfig+0x244>)
 80062e0:	4313      	orrs	r3, r2
 80062e2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	2b02      	cmp	r3, #2
 80062ea:	d107      	bne.n	80062fc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80062ec:	4b3c      	ldr	r3, [pc, #240]	; (80063e0 <HAL_RCC_ClockConfig+0x244>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d121      	bne.n	800633c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	e0f6      	b.n	80064ea <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	2b03      	cmp	r3, #3
 8006302:	d107      	bne.n	8006314 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006304:	4b36      	ldr	r3, [pc, #216]	; (80063e0 <HAL_RCC_ClockConfig+0x244>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800630c:	2b00      	cmp	r3, #0
 800630e:	d115      	bne.n	800633c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	e0ea      	b.n	80064ea <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	2b01      	cmp	r3, #1
 800631a:	d107      	bne.n	800632c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800631c:	4b30      	ldr	r3, [pc, #192]	; (80063e0 <HAL_RCC_ClockConfig+0x244>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006324:	2b00      	cmp	r3, #0
 8006326:	d109      	bne.n	800633c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	e0de      	b.n	80064ea <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800632c:	4b2c      	ldr	r3, [pc, #176]	; (80063e0 <HAL_RCC_ClockConfig+0x244>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f003 0304 	and.w	r3, r3, #4
 8006334:	2b00      	cmp	r3, #0
 8006336:	d101      	bne.n	800633c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006338:	2301      	movs	r3, #1
 800633a:	e0d6      	b.n	80064ea <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800633c:	4b28      	ldr	r3, [pc, #160]	; (80063e0 <HAL_RCC_ClockConfig+0x244>)
 800633e:	691b      	ldr	r3, [r3, #16]
 8006340:	f023 0207 	bic.w	r2, r3, #7
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	4925      	ldr	r1, [pc, #148]	; (80063e0 <HAL_RCC_ClockConfig+0x244>)
 800634a:	4313      	orrs	r3, r2
 800634c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800634e:	f7fc f807 	bl	8002360 <HAL_GetTick>
 8006352:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006354:	e00a      	b.n	800636c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006356:	f7fc f803 	bl	8002360 <HAL_GetTick>
 800635a:	4602      	mov	r2, r0
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	1ad3      	subs	r3, r2, r3
 8006360:	f241 3288 	movw	r2, #5000	; 0x1388
 8006364:	4293      	cmp	r3, r2
 8006366:	d901      	bls.n	800636c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006368:	2303      	movs	r3, #3
 800636a:	e0be      	b.n	80064ea <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800636c:	4b1c      	ldr	r3, [pc, #112]	; (80063e0 <HAL_RCC_ClockConfig+0x244>)
 800636e:	691b      	ldr	r3, [r3, #16]
 8006370:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	00db      	lsls	r3, r3, #3
 800637a:	429a      	cmp	r2, r3
 800637c:	d1eb      	bne.n	8006356 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f003 0302 	and.w	r3, r3, #2
 8006386:	2b00      	cmp	r3, #0
 8006388:	d010      	beq.n	80063ac <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	68da      	ldr	r2, [r3, #12]
 800638e:	4b14      	ldr	r3, [pc, #80]	; (80063e0 <HAL_RCC_ClockConfig+0x244>)
 8006390:	699b      	ldr	r3, [r3, #24]
 8006392:	f003 030f 	and.w	r3, r3, #15
 8006396:	429a      	cmp	r2, r3
 8006398:	d208      	bcs.n	80063ac <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800639a:	4b11      	ldr	r3, [pc, #68]	; (80063e0 <HAL_RCC_ClockConfig+0x244>)
 800639c:	699b      	ldr	r3, [r3, #24]
 800639e:	f023 020f 	bic.w	r2, r3, #15
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	68db      	ldr	r3, [r3, #12]
 80063a6:	490e      	ldr	r1, [pc, #56]	; (80063e0 <HAL_RCC_ClockConfig+0x244>)
 80063a8:	4313      	orrs	r3, r2
 80063aa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80063ac:	4b0b      	ldr	r3, [pc, #44]	; (80063dc <HAL_RCC_ClockConfig+0x240>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f003 030f 	and.w	r3, r3, #15
 80063b4:	683a      	ldr	r2, [r7, #0]
 80063b6:	429a      	cmp	r2, r3
 80063b8:	d214      	bcs.n	80063e4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063ba:	4b08      	ldr	r3, [pc, #32]	; (80063dc <HAL_RCC_ClockConfig+0x240>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f023 020f 	bic.w	r2, r3, #15
 80063c2:	4906      	ldr	r1, [pc, #24]	; (80063dc <HAL_RCC_ClockConfig+0x240>)
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	4313      	orrs	r3, r2
 80063c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80063ca:	4b04      	ldr	r3, [pc, #16]	; (80063dc <HAL_RCC_ClockConfig+0x240>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f003 030f 	and.w	r3, r3, #15
 80063d2:	683a      	ldr	r2, [r7, #0]
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d005      	beq.n	80063e4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80063d8:	2301      	movs	r3, #1
 80063da:	e086      	b.n	80064ea <HAL_RCC_ClockConfig+0x34e>
 80063dc:	52002000 	.word	0x52002000
 80063e0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f003 0304 	and.w	r3, r3, #4
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d010      	beq.n	8006412 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	691a      	ldr	r2, [r3, #16]
 80063f4:	4b3f      	ldr	r3, [pc, #252]	; (80064f4 <HAL_RCC_ClockConfig+0x358>)
 80063f6:	699b      	ldr	r3, [r3, #24]
 80063f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d208      	bcs.n	8006412 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006400:	4b3c      	ldr	r3, [pc, #240]	; (80064f4 <HAL_RCC_ClockConfig+0x358>)
 8006402:	699b      	ldr	r3, [r3, #24]
 8006404:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	691b      	ldr	r3, [r3, #16]
 800640c:	4939      	ldr	r1, [pc, #228]	; (80064f4 <HAL_RCC_ClockConfig+0x358>)
 800640e:	4313      	orrs	r3, r2
 8006410:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f003 0308 	and.w	r3, r3, #8
 800641a:	2b00      	cmp	r3, #0
 800641c:	d010      	beq.n	8006440 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	695a      	ldr	r2, [r3, #20]
 8006422:	4b34      	ldr	r3, [pc, #208]	; (80064f4 <HAL_RCC_ClockConfig+0x358>)
 8006424:	69db      	ldr	r3, [r3, #28]
 8006426:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800642a:	429a      	cmp	r2, r3
 800642c:	d208      	bcs.n	8006440 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800642e:	4b31      	ldr	r3, [pc, #196]	; (80064f4 <HAL_RCC_ClockConfig+0x358>)
 8006430:	69db      	ldr	r3, [r3, #28]
 8006432:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	695b      	ldr	r3, [r3, #20]
 800643a:	492e      	ldr	r1, [pc, #184]	; (80064f4 <HAL_RCC_ClockConfig+0x358>)
 800643c:	4313      	orrs	r3, r2
 800643e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f003 0310 	and.w	r3, r3, #16
 8006448:	2b00      	cmp	r3, #0
 800644a:	d010      	beq.n	800646e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	699a      	ldr	r2, [r3, #24]
 8006450:	4b28      	ldr	r3, [pc, #160]	; (80064f4 <HAL_RCC_ClockConfig+0x358>)
 8006452:	69db      	ldr	r3, [r3, #28]
 8006454:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006458:	429a      	cmp	r2, r3
 800645a:	d208      	bcs.n	800646e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800645c:	4b25      	ldr	r3, [pc, #148]	; (80064f4 <HAL_RCC_ClockConfig+0x358>)
 800645e:	69db      	ldr	r3, [r3, #28]
 8006460:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	699b      	ldr	r3, [r3, #24]
 8006468:	4922      	ldr	r1, [pc, #136]	; (80064f4 <HAL_RCC_ClockConfig+0x358>)
 800646a:	4313      	orrs	r3, r2
 800646c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f003 0320 	and.w	r3, r3, #32
 8006476:	2b00      	cmp	r3, #0
 8006478:	d010      	beq.n	800649c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	69da      	ldr	r2, [r3, #28]
 800647e:	4b1d      	ldr	r3, [pc, #116]	; (80064f4 <HAL_RCC_ClockConfig+0x358>)
 8006480:	6a1b      	ldr	r3, [r3, #32]
 8006482:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006486:	429a      	cmp	r2, r3
 8006488:	d208      	bcs.n	800649c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800648a:	4b1a      	ldr	r3, [pc, #104]	; (80064f4 <HAL_RCC_ClockConfig+0x358>)
 800648c:	6a1b      	ldr	r3, [r3, #32]
 800648e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	69db      	ldr	r3, [r3, #28]
 8006496:	4917      	ldr	r1, [pc, #92]	; (80064f4 <HAL_RCC_ClockConfig+0x358>)
 8006498:	4313      	orrs	r3, r2
 800649a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800649c:	f000 f834 	bl	8006508 <HAL_RCC_GetSysClockFreq>
 80064a0:	4602      	mov	r2, r0
 80064a2:	4b14      	ldr	r3, [pc, #80]	; (80064f4 <HAL_RCC_ClockConfig+0x358>)
 80064a4:	699b      	ldr	r3, [r3, #24]
 80064a6:	0a1b      	lsrs	r3, r3, #8
 80064a8:	f003 030f 	and.w	r3, r3, #15
 80064ac:	4912      	ldr	r1, [pc, #72]	; (80064f8 <HAL_RCC_ClockConfig+0x35c>)
 80064ae:	5ccb      	ldrb	r3, [r1, r3]
 80064b0:	f003 031f 	and.w	r3, r3, #31
 80064b4:	fa22 f303 	lsr.w	r3, r2, r3
 80064b8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80064ba:	4b0e      	ldr	r3, [pc, #56]	; (80064f4 <HAL_RCC_ClockConfig+0x358>)
 80064bc:	699b      	ldr	r3, [r3, #24]
 80064be:	f003 030f 	and.w	r3, r3, #15
 80064c2:	4a0d      	ldr	r2, [pc, #52]	; (80064f8 <HAL_RCC_ClockConfig+0x35c>)
 80064c4:	5cd3      	ldrb	r3, [r2, r3]
 80064c6:	f003 031f 	and.w	r3, r3, #31
 80064ca:	693a      	ldr	r2, [r7, #16]
 80064cc:	fa22 f303 	lsr.w	r3, r2, r3
 80064d0:	4a0a      	ldr	r2, [pc, #40]	; (80064fc <HAL_RCC_ClockConfig+0x360>)
 80064d2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80064d4:	4a0a      	ldr	r2, [pc, #40]	; (8006500 <HAL_RCC_ClockConfig+0x364>)
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80064da:	4b0a      	ldr	r3, [pc, #40]	; (8006504 <HAL_RCC_ClockConfig+0x368>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4618      	mov	r0, r3
 80064e0:	f7fb fef4 	bl	80022cc <HAL_InitTick>
 80064e4:	4603      	mov	r3, r0
 80064e6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80064e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3718      	adds	r7, #24
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}
 80064f2:	bf00      	nop
 80064f4:	58024400 	.word	0x58024400
 80064f8:	0800c118 	.word	0x0800c118
 80064fc:	24000414 	.word	0x24000414
 8006500:	24000410 	.word	0x24000410
 8006504:	24000408 	.word	0x24000408

08006508 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006508:	b480      	push	{r7}
 800650a:	b089      	sub	sp, #36	; 0x24
 800650c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800650e:	4bb3      	ldr	r3, [pc, #716]	; (80067dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006510:	691b      	ldr	r3, [r3, #16]
 8006512:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006516:	2b18      	cmp	r3, #24
 8006518:	f200 8155 	bhi.w	80067c6 <HAL_RCC_GetSysClockFreq+0x2be>
 800651c:	a201      	add	r2, pc, #4	; (adr r2, 8006524 <HAL_RCC_GetSysClockFreq+0x1c>)
 800651e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006522:	bf00      	nop
 8006524:	08006589 	.word	0x08006589
 8006528:	080067c7 	.word	0x080067c7
 800652c:	080067c7 	.word	0x080067c7
 8006530:	080067c7 	.word	0x080067c7
 8006534:	080067c7 	.word	0x080067c7
 8006538:	080067c7 	.word	0x080067c7
 800653c:	080067c7 	.word	0x080067c7
 8006540:	080067c7 	.word	0x080067c7
 8006544:	080065af 	.word	0x080065af
 8006548:	080067c7 	.word	0x080067c7
 800654c:	080067c7 	.word	0x080067c7
 8006550:	080067c7 	.word	0x080067c7
 8006554:	080067c7 	.word	0x080067c7
 8006558:	080067c7 	.word	0x080067c7
 800655c:	080067c7 	.word	0x080067c7
 8006560:	080067c7 	.word	0x080067c7
 8006564:	080065b5 	.word	0x080065b5
 8006568:	080067c7 	.word	0x080067c7
 800656c:	080067c7 	.word	0x080067c7
 8006570:	080067c7 	.word	0x080067c7
 8006574:	080067c7 	.word	0x080067c7
 8006578:	080067c7 	.word	0x080067c7
 800657c:	080067c7 	.word	0x080067c7
 8006580:	080067c7 	.word	0x080067c7
 8006584:	080065bb 	.word	0x080065bb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006588:	4b94      	ldr	r3, [pc, #592]	; (80067dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f003 0320 	and.w	r3, r3, #32
 8006590:	2b00      	cmp	r3, #0
 8006592:	d009      	beq.n	80065a8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006594:	4b91      	ldr	r3, [pc, #580]	; (80067dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	08db      	lsrs	r3, r3, #3
 800659a:	f003 0303 	and.w	r3, r3, #3
 800659e:	4a90      	ldr	r2, [pc, #576]	; (80067e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80065a0:	fa22 f303 	lsr.w	r3, r2, r3
 80065a4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80065a6:	e111      	b.n	80067cc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80065a8:	4b8d      	ldr	r3, [pc, #564]	; (80067e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80065aa:	61bb      	str	r3, [r7, #24]
    break;
 80065ac:	e10e      	b.n	80067cc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80065ae:	4b8d      	ldr	r3, [pc, #564]	; (80067e4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80065b0:	61bb      	str	r3, [r7, #24]
    break;
 80065b2:	e10b      	b.n	80067cc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80065b4:	4b8c      	ldr	r3, [pc, #560]	; (80067e8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80065b6:	61bb      	str	r3, [r7, #24]
    break;
 80065b8:	e108      	b.n	80067cc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80065ba:	4b88      	ldr	r3, [pc, #544]	; (80067dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065be:	f003 0303 	and.w	r3, r3, #3
 80065c2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80065c4:	4b85      	ldr	r3, [pc, #532]	; (80067dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065c8:	091b      	lsrs	r3, r3, #4
 80065ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80065ce:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80065d0:	4b82      	ldr	r3, [pc, #520]	; (80067dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d4:	f003 0301 	and.w	r3, r3, #1
 80065d8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80065da:	4b80      	ldr	r3, [pc, #512]	; (80067dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065de:	08db      	lsrs	r3, r3, #3
 80065e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80065e4:	68fa      	ldr	r2, [r7, #12]
 80065e6:	fb02 f303 	mul.w	r3, r2, r3
 80065ea:	ee07 3a90 	vmov	s15, r3
 80065ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065f2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	f000 80e1 	beq.w	80067c0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	2b02      	cmp	r3, #2
 8006602:	f000 8083 	beq.w	800670c <HAL_RCC_GetSysClockFreq+0x204>
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	2b02      	cmp	r3, #2
 800660a:	f200 80a1 	bhi.w	8006750 <HAL_RCC_GetSysClockFreq+0x248>
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d003      	beq.n	800661c <HAL_RCC_GetSysClockFreq+0x114>
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	2b01      	cmp	r3, #1
 8006618:	d056      	beq.n	80066c8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800661a:	e099      	b.n	8006750 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800661c:	4b6f      	ldr	r3, [pc, #444]	; (80067dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f003 0320 	and.w	r3, r3, #32
 8006624:	2b00      	cmp	r3, #0
 8006626:	d02d      	beq.n	8006684 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006628:	4b6c      	ldr	r3, [pc, #432]	; (80067dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	08db      	lsrs	r3, r3, #3
 800662e:	f003 0303 	and.w	r3, r3, #3
 8006632:	4a6b      	ldr	r2, [pc, #428]	; (80067e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006634:	fa22 f303 	lsr.w	r3, r2, r3
 8006638:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	ee07 3a90 	vmov	s15, r3
 8006640:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	ee07 3a90 	vmov	s15, r3
 800664a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800664e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006652:	4b62      	ldr	r3, [pc, #392]	; (80067dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006656:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800665a:	ee07 3a90 	vmov	s15, r3
 800665e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006662:	ed97 6a02 	vldr	s12, [r7, #8]
 8006666:	eddf 5a61 	vldr	s11, [pc, #388]	; 80067ec <HAL_RCC_GetSysClockFreq+0x2e4>
 800666a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800666e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006672:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006676:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800667a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800667e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006682:	e087      	b.n	8006794 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	ee07 3a90 	vmov	s15, r3
 800668a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800668e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80067f0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006692:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006696:	4b51      	ldr	r3, [pc, #324]	; (80067dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800669a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800669e:	ee07 3a90 	vmov	s15, r3
 80066a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80066aa:	eddf 5a50 	vldr	s11, [pc, #320]	; 80067ec <HAL_RCC_GetSysClockFreq+0x2e4>
 80066ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80066ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80066c6:	e065      	b.n	8006794 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	ee07 3a90 	vmov	s15, r3
 80066ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066d2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80067f4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80066d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066da:	4b40      	ldr	r3, [pc, #256]	; (80067dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066e2:	ee07 3a90 	vmov	s15, r3
 80066e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80066ee:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80067ec <HAL_RCC_GetSysClockFreq+0x2e4>
 80066f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80066fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006702:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006706:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800670a:	e043      	b.n	8006794 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	ee07 3a90 	vmov	s15, r3
 8006712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006716:	eddf 6a38 	vldr	s13, [pc, #224]	; 80067f8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800671a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800671e:	4b2f      	ldr	r3, [pc, #188]	; (80067dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006722:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006726:	ee07 3a90 	vmov	s15, r3
 800672a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800672e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006732:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80067ec <HAL_RCC_GetSysClockFreq+0x2e4>
 8006736:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800673a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800673e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006742:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800674a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800674e:	e021      	b.n	8006794 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	ee07 3a90 	vmov	s15, r3
 8006756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800675a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80067f4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800675e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006762:	4b1e      	ldr	r3, [pc, #120]	; (80067dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006766:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800676a:	ee07 3a90 	vmov	s15, r3
 800676e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006772:	ed97 6a02 	vldr	s12, [r7, #8]
 8006776:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80067ec <HAL_RCC_GetSysClockFreq+0x2e4>
 800677a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800677e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006782:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006786:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800678a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800678e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006792:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006794:	4b11      	ldr	r3, [pc, #68]	; (80067dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006798:	0a5b      	lsrs	r3, r3, #9
 800679a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800679e:	3301      	adds	r3, #1
 80067a0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	ee07 3a90 	vmov	s15, r3
 80067a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80067ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80067b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067b8:	ee17 3a90 	vmov	r3, s15
 80067bc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80067be:	e005      	b.n	80067cc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80067c0:	2300      	movs	r3, #0
 80067c2:	61bb      	str	r3, [r7, #24]
    break;
 80067c4:	e002      	b.n	80067cc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80067c6:	4b07      	ldr	r3, [pc, #28]	; (80067e4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80067c8:	61bb      	str	r3, [r7, #24]
    break;
 80067ca:	bf00      	nop
  }

  return sysclockfreq;
 80067cc:	69bb      	ldr	r3, [r7, #24]
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3724      	adds	r7, #36	; 0x24
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr
 80067da:	bf00      	nop
 80067dc:	58024400 	.word	0x58024400
 80067e0:	03d09000 	.word	0x03d09000
 80067e4:	003d0900 	.word	0x003d0900
 80067e8:	017d7840 	.word	0x017d7840
 80067ec:	46000000 	.word	0x46000000
 80067f0:	4c742400 	.word	0x4c742400
 80067f4:	4a742400 	.word	0x4a742400
 80067f8:	4bbebc20 	.word	0x4bbebc20

080067fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b082      	sub	sp, #8
 8006800:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006802:	f7ff fe81 	bl	8006508 <HAL_RCC_GetSysClockFreq>
 8006806:	4602      	mov	r2, r0
 8006808:	4b10      	ldr	r3, [pc, #64]	; (800684c <HAL_RCC_GetHCLKFreq+0x50>)
 800680a:	699b      	ldr	r3, [r3, #24]
 800680c:	0a1b      	lsrs	r3, r3, #8
 800680e:	f003 030f 	and.w	r3, r3, #15
 8006812:	490f      	ldr	r1, [pc, #60]	; (8006850 <HAL_RCC_GetHCLKFreq+0x54>)
 8006814:	5ccb      	ldrb	r3, [r1, r3]
 8006816:	f003 031f 	and.w	r3, r3, #31
 800681a:	fa22 f303 	lsr.w	r3, r2, r3
 800681e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006820:	4b0a      	ldr	r3, [pc, #40]	; (800684c <HAL_RCC_GetHCLKFreq+0x50>)
 8006822:	699b      	ldr	r3, [r3, #24]
 8006824:	f003 030f 	and.w	r3, r3, #15
 8006828:	4a09      	ldr	r2, [pc, #36]	; (8006850 <HAL_RCC_GetHCLKFreq+0x54>)
 800682a:	5cd3      	ldrb	r3, [r2, r3]
 800682c:	f003 031f 	and.w	r3, r3, #31
 8006830:	687a      	ldr	r2, [r7, #4]
 8006832:	fa22 f303 	lsr.w	r3, r2, r3
 8006836:	4a07      	ldr	r2, [pc, #28]	; (8006854 <HAL_RCC_GetHCLKFreq+0x58>)
 8006838:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800683a:	4a07      	ldr	r2, [pc, #28]	; (8006858 <HAL_RCC_GetHCLKFreq+0x5c>)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006840:	4b04      	ldr	r3, [pc, #16]	; (8006854 <HAL_RCC_GetHCLKFreq+0x58>)
 8006842:	681b      	ldr	r3, [r3, #0]
}
 8006844:	4618      	mov	r0, r3
 8006846:	3708      	adds	r7, #8
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}
 800684c:	58024400 	.word	0x58024400
 8006850:	0800c118 	.word	0x0800c118
 8006854:	24000414 	.word	0x24000414
 8006858:	24000410 	.word	0x24000410

0800685c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b086      	sub	sp, #24
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006864:	2300      	movs	r3, #0
 8006866:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006868:	2300      	movs	r3, #0
 800686a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006874:	2b00      	cmp	r3, #0
 8006876:	d03f      	beq.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800687c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006880:	d02a      	beq.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006882:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006886:	d824      	bhi.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006888:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800688c:	d018      	beq.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800688e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006892:	d81e      	bhi.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006894:	2b00      	cmp	r3, #0
 8006896:	d003      	beq.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006898:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800689c:	d007      	beq.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x52>
 800689e:	e018      	b.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068a0:	4bab      	ldr	r3, [pc, #684]	; (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80068a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068a4:	4aaa      	ldr	r2, [pc, #680]	; (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80068a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80068ac:	e015      	b.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	3304      	adds	r3, #4
 80068b2:	2102      	movs	r1, #2
 80068b4:	4618      	mov	r0, r3
 80068b6:	f002 f84d 	bl	8008954 <RCCEx_PLL2_Config>
 80068ba:	4603      	mov	r3, r0
 80068bc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80068be:	e00c      	b.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	3324      	adds	r3, #36	; 0x24
 80068c4:	2102      	movs	r1, #2
 80068c6:	4618      	mov	r0, r3
 80068c8:	f002 f8f6 	bl	8008ab8 <RCCEx_PLL3_Config>
 80068cc:	4603      	mov	r3, r0
 80068ce:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80068d0:	e003      	b.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80068d2:	2301      	movs	r3, #1
 80068d4:	75fb      	strb	r3, [r7, #23]
      break;
 80068d6:	e000      	b.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80068d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068da:	7dfb      	ldrb	r3, [r7, #23]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d109      	bne.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80068e0:	4b9b      	ldr	r3, [pc, #620]	; (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80068e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068ec:	4998      	ldr	r1, [pc, #608]	; (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80068ee:	4313      	orrs	r3, r2
 80068f0:	650b      	str	r3, [r1, #80]	; 0x50
 80068f2:	e001      	b.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068f4:	7dfb      	ldrb	r3, [r7, #23]
 80068f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006900:	2b00      	cmp	r3, #0
 8006902:	d03d      	beq.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006908:	2b04      	cmp	r3, #4
 800690a:	d826      	bhi.n	800695a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800690c:	a201      	add	r2, pc, #4	; (adr r2, 8006914 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800690e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006912:	bf00      	nop
 8006914:	08006929 	.word	0x08006929
 8006918:	08006937 	.word	0x08006937
 800691c:	08006949 	.word	0x08006949
 8006920:	08006961 	.word	0x08006961
 8006924:	08006961 	.word	0x08006961
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006928:	4b89      	ldr	r3, [pc, #548]	; (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800692a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800692c:	4a88      	ldr	r2, [pc, #544]	; (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800692e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006932:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006934:	e015      	b.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	3304      	adds	r3, #4
 800693a:	2100      	movs	r1, #0
 800693c:	4618      	mov	r0, r3
 800693e:	f002 f809 	bl	8008954 <RCCEx_PLL2_Config>
 8006942:	4603      	mov	r3, r0
 8006944:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006946:	e00c      	b.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	3324      	adds	r3, #36	; 0x24
 800694c:	2100      	movs	r1, #0
 800694e:	4618      	mov	r0, r3
 8006950:	f002 f8b2 	bl	8008ab8 <RCCEx_PLL3_Config>
 8006954:	4603      	mov	r3, r0
 8006956:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006958:	e003      	b.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	75fb      	strb	r3, [r7, #23]
      break;
 800695e:	e000      	b.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006960:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006962:	7dfb      	ldrb	r3, [r7, #23]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d109      	bne.n	800697c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006968:	4b79      	ldr	r3, [pc, #484]	; (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800696a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800696c:	f023 0207 	bic.w	r2, r3, #7
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006974:	4976      	ldr	r1, [pc, #472]	; (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006976:	4313      	orrs	r3, r2
 8006978:	650b      	str	r3, [r1, #80]	; 0x50
 800697a:	e001      	b.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800697c:	7dfb      	ldrb	r3, [r7, #23]
 800697e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006988:	2b00      	cmp	r3, #0
 800698a:	d051      	beq.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006992:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8006996:	d036      	beq.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006998:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800699c:	d830      	bhi.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800699e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80069a2:	d032      	beq.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 80069a4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80069a8:	d82a      	bhi.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80069aa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80069ae:	d02e      	beq.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80069b0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80069b4:	d824      	bhi.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80069b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069ba:	d018      	beq.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0x192>
 80069bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069c0:	d81e      	bhi.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d003      	beq.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0x172>
 80069c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80069ca:	d007      	beq.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x180>
 80069cc:	e018      	b.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069ce:	4b60      	ldr	r3, [pc, #384]	; (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80069d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069d2:	4a5f      	ldr	r2, [pc, #380]	; (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80069d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069d8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80069da:	e019      	b.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	3304      	adds	r3, #4
 80069e0:	2100      	movs	r1, #0
 80069e2:	4618      	mov	r0, r3
 80069e4:	f001 ffb6 	bl	8008954 <RCCEx_PLL2_Config>
 80069e8:	4603      	mov	r3, r0
 80069ea:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80069ec:	e010      	b.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	3324      	adds	r3, #36	; 0x24
 80069f2:	2100      	movs	r1, #0
 80069f4:	4618      	mov	r0, r3
 80069f6:	f002 f85f 	bl	8008ab8 <RCCEx_PLL3_Config>
 80069fa:	4603      	mov	r3, r0
 80069fc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80069fe:	e007      	b.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006a00:	2301      	movs	r3, #1
 8006a02:	75fb      	strb	r3, [r7, #23]
      break;
 8006a04:	e004      	b.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8006a06:	bf00      	nop
 8006a08:	e002      	b.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8006a0a:	bf00      	nop
 8006a0c:	e000      	b.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8006a0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a10:	7dfb      	ldrb	r3, [r7, #23]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d10a      	bne.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006a16:	4b4e      	ldr	r3, [pc, #312]	; (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a1a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006a24:	494a      	ldr	r1, [pc, #296]	; (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006a26:	4313      	orrs	r3, r2
 8006a28:	658b      	str	r3, [r1, #88]	; 0x58
 8006a2a:	e001      	b.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a2c:	7dfb      	ldrb	r3, [r7, #23]
 8006a2e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d051      	beq.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006a42:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006a46:	d036      	beq.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8006a48:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006a4c:	d830      	bhi.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8006a4e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006a52:	d032      	beq.n	8006aba <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8006a54:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006a58:	d82a      	bhi.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8006a5a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006a5e:	d02e      	beq.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x262>
 8006a60:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006a64:	d824      	bhi.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8006a66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a6a:	d018      	beq.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x242>
 8006a6c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a70:	d81e      	bhi.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d003      	beq.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0x222>
 8006a76:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006a7a:	d007      	beq.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0x230>
 8006a7c:	e018      	b.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a7e:	4b34      	ldr	r3, [pc, #208]	; (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a82:	4a33      	ldr	r2, [pc, #204]	; (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006a84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a88:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006a8a:	e019      	b.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	3304      	adds	r3, #4
 8006a90:	2100      	movs	r1, #0
 8006a92:	4618      	mov	r0, r3
 8006a94:	f001 ff5e 	bl	8008954 <RCCEx_PLL2_Config>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006a9c:	e010      	b.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	3324      	adds	r3, #36	; 0x24
 8006aa2:	2100      	movs	r1, #0
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f002 f807 	bl	8008ab8 <RCCEx_PLL3_Config>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006aae:	e007      	b.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	75fb      	strb	r3, [r7, #23]
      break;
 8006ab4:	e004      	b.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8006ab6:	bf00      	nop
 8006ab8:	e002      	b.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8006aba:	bf00      	nop
 8006abc:	e000      	b.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8006abe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ac0:	7dfb      	ldrb	r3, [r7, #23]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d10a      	bne.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006ac6:	4b22      	ldr	r3, [pc, #136]	; (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006aca:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006ad4:	491e      	ldr	r1, [pc, #120]	; (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	658b      	str	r3, [r1, #88]	; 0x58
 8006ada:	e001      	b.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006adc:	7dfb      	ldrb	r3, [r7, #23]
 8006ade:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d035      	beq.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006af0:	2b30      	cmp	r3, #48	; 0x30
 8006af2:	d01c      	beq.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006af4:	2b30      	cmp	r3, #48	; 0x30
 8006af6:	d817      	bhi.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8006af8:	2b20      	cmp	r3, #32
 8006afa:	d00c      	beq.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8006afc:	2b20      	cmp	r3, #32
 8006afe:	d813      	bhi.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d016      	beq.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8006b04:	2b10      	cmp	r3, #16
 8006b06:	d10f      	bne.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b08:	4b11      	ldr	r3, [pc, #68]	; (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b0c:	4a10      	ldr	r2, [pc, #64]	; (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006b0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b12:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8006b14:	e00e      	b.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	3304      	adds	r3, #4
 8006b1a:	2102      	movs	r1, #2
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f001 ff19 	bl	8008954 <RCCEx_PLL2_Config>
 8006b22:	4603      	mov	r3, r0
 8006b24:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8006b26:	e005      	b.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	75fb      	strb	r3, [r7, #23]
      break;
 8006b2c:	e002      	b.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8006b2e:	bf00      	nop
 8006b30:	e000      	b.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8006b32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b34:	7dfb      	ldrb	r3, [r7, #23]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d10c      	bne.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006b3a:	4b05      	ldr	r3, [pc, #20]	; (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b3e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b46:	4902      	ldr	r1, [pc, #8]	; (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006b4c:	e004      	b.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8006b4e:	bf00      	nop
 8006b50:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b54:	7dfb      	ldrb	r3, [r7, #23]
 8006b56:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d047      	beq.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b6c:	d030      	beq.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8006b6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b72:	d82a      	bhi.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8006b74:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006b78:	d02c      	beq.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8006b7a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006b7e:	d824      	bhi.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8006b80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b84:	d018      	beq.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006b86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b8a:	d81e      	bhi.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d003      	beq.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006b90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b94:	d007      	beq.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006b96:	e018      	b.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b98:	4bac      	ldr	r3, [pc, #688]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b9c:	4aab      	ldr	r2, [pc, #684]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006b9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ba2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006ba4:	e017      	b.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	3304      	adds	r3, #4
 8006baa:	2100      	movs	r1, #0
 8006bac:	4618      	mov	r0, r3
 8006bae:	f001 fed1 	bl	8008954 <RCCEx_PLL2_Config>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006bb6:	e00e      	b.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	3324      	adds	r3, #36	; 0x24
 8006bbc:	2100      	movs	r1, #0
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f001 ff7a 	bl	8008ab8 <RCCEx_PLL3_Config>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006bc8:	e005      	b.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006bca:	2301      	movs	r3, #1
 8006bcc:	75fb      	strb	r3, [r7, #23]
      break;
 8006bce:	e002      	b.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8006bd0:	bf00      	nop
 8006bd2:	e000      	b.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8006bd4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006bd6:	7dfb      	ldrb	r3, [r7, #23]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d109      	bne.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006bdc:	4b9b      	ldr	r3, [pc, #620]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006bde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006be0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006be8:	4998      	ldr	r1, [pc, #608]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006bea:	4313      	orrs	r3, r2
 8006bec:	650b      	str	r3, [r1, #80]	; 0x50
 8006bee:	e001      	b.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bf0:	7dfb      	ldrb	r3, [r7, #23]
 8006bf2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d049      	beq.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c08:	d02e      	beq.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8006c0a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c0e:	d828      	bhi.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8006c10:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006c14:	d02a      	beq.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8006c16:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006c1a:	d822      	bhi.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8006c1c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006c20:	d026      	beq.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8006c22:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006c26:	d81c      	bhi.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8006c28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c2c:	d010      	beq.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8006c2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c32:	d816      	bhi.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d01d      	beq.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8006c38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c3c:	d111      	bne.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	3304      	adds	r3, #4
 8006c42:	2101      	movs	r1, #1
 8006c44:	4618      	mov	r0, r3
 8006c46:	f001 fe85 	bl	8008954 <RCCEx_PLL2_Config>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006c4e:	e012      	b.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	3324      	adds	r3, #36	; 0x24
 8006c54:	2101      	movs	r1, #1
 8006c56:	4618      	mov	r0, r3
 8006c58:	f001 ff2e 	bl	8008ab8 <RCCEx_PLL3_Config>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006c60:	e009      	b.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c62:	2301      	movs	r3, #1
 8006c64:	75fb      	strb	r3, [r7, #23]
      break;
 8006c66:	e006      	b.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8006c68:	bf00      	nop
 8006c6a:	e004      	b.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8006c6c:	bf00      	nop
 8006c6e:	e002      	b.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8006c70:	bf00      	nop
 8006c72:	e000      	b.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8006c74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c76:	7dfb      	ldrb	r3, [r7, #23]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d109      	bne.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006c7c:	4b73      	ldr	r3, [pc, #460]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006c7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c80:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c88:	4970      	ldr	r1, [pc, #448]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	650b      	str	r3, [r1, #80]	; 0x50
 8006c8e:	e001      	b.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c90:	7dfb      	ldrb	r3, [r7, #23]
 8006c92:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d04b      	beq.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006ca6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006caa:	d02e      	beq.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8006cac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006cb0:	d828      	bhi.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cb6:	d02a      	beq.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8006cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cbc:	d822      	bhi.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006cbe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006cc2:	d026      	beq.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8006cc4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006cc8:	d81c      	bhi.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006cca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006cce:	d010      	beq.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x496>
 8006cd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006cd4:	d816      	bhi.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d01d      	beq.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8006cda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006cde:	d111      	bne.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	3304      	adds	r3, #4
 8006ce4:	2101      	movs	r1, #1
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f001 fe34 	bl	8008954 <RCCEx_PLL2_Config>
 8006cec:	4603      	mov	r3, r0
 8006cee:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006cf0:	e012      	b.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	3324      	adds	r3, #36	; 0x24
 8006cf6:	2101      	movs	r1, #1
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f001 fedd 	bl	8008ab8 <RCCEx_PLL3_Config>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006d02:	e009      	b.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006d04:	2301      	movs	r3, #1
 8006d06:	75fb      	strb	r3, [r7, #23]
      break;
 8006d08:	e006      	b.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8006d0a:	bf00      	nop
 8006d0c:	e004      	b.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8006d0e:	bf00      	nop
 8006d10:	e002      	b.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8006d12:	bf00      	nop
 8006d14:	e000      	b.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8006d16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d18:	7dfb      	ldrb	r3, [r7, #23]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d10a      	bne.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006d1e:	4b4b      	ldr	r3, [pc, #300]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d22:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006d2c:	4947      	ldr	r1, [pc, #284]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	658b      	str	r3, [r1, #88]	; 0x58
 8006d32:	e001      	b.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d34:	7dfb      	ldrb	r3, [r7, #23]
 8006d36:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d02f      	beq.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d4c:	d00e      	beq.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x510>
 8006d4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d52:	d814      	bhi.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0x522>
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d015      	beq.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8006d58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d5c:	d10f      	bne.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d5e:	4b3b      	ldr	r3, [pc, #236]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d62:	4a3a      	ldr	r2, [pc, #232]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006d64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d68:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006d6a:	e00c      	b.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	3304      	adds	r3, #4
 8006d70:	2101      	movs	r1, #1
 8006d72:	4618      	mov	r0, r3
 8006d74:	f001 fdee 	bl	8008954 <RCCEx_PLL2_Config>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006d7c:	e003      	b.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	75fb      	strb	r3, [r7, #23]
      break;
 8006d82:	e000      	b.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8006d84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d86:	7dfb      	ldrb	r3, [r7, #23]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d109      	bne.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006d8c:	4b2f      	ldr	r3, [pc, #188]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006d8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d90:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d98:	492c      	ldr	r1, [pc, #176]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	650b      	str	r3, [r1, #80]	; 0x50
 8006d9e:	e001      	b.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006da0:	7dfb      	ldrb	r3, [r7, #23]
 8006da2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d032      	beq.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006db4:	2b03      	cmp	r3, #3
 8006db6:	d81b      	bhi.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8006db8:	a201      	add	r2, pc, #4	; (adr r2, 8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8006dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dbe:	bf00      	nop
 8006dc0:	08006df7 	.word	0x08006df7
 8006dc4:	08006dd1 	.word	0x08006dd1
 8006dc8:	08006ddf 	.word	0x08006ddf
 8006dcc:	08006df7 	.word	0x08006df7
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006dd0:	4b1e      	ldr	r3, [pc, #120]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd4:	4a1d      	ldr	r2, [pc, #116]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006dd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006dda:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006ddc:	e00c      	b.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	3304      	adds	r3, #4
 8006de2:	2102      	movs	r1, #2
 8006de4:	4618      	mov	r0, r3
 8006de6:	f001 fdb5 	bl	8008954 <RCCEx_PLL2_Config>
 8006dea:	4603      	mov	r3, r0
 8006dec:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006dee:	e003      	b.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006df0:	2301      	movs	r3, #1
 8006df2:	75fb      	strb	r3, [r7, #23]
      break;
 8006df4:	e000      	b.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8006df6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006df8:	7dfb      	ldrb	r3, [r7, #23]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d109      	bne.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006dfe:	4b13      	ldr	r3, [pc, #76]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e02:	f023 0203 	bic.w	r2, r3, #3
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e0a:	4910      	ldr	r1, [pc, #64]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006e10:	e001      	b.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e12:	7dfb      	ldrb	r3, [r7, #23]
 8006e14:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	f000 808a 	beq.w	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006e24:	4b0a      	ldr	r3, [pc, #40]	; (8006e50 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a09      	ldr	r2, [pc, #36]	; (8006e50 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8006e2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e2e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006e30:	f7fb fa96 	bl	8002360 <HAL_GetTick>
 8006e34:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006e36:	e00d      	b.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e38:	f7fb fa92 	bl	8002360 <HAL_GetTick>
 8006e3c:	4602      	mov	r2, r0
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	1ad3      	subs	r3, r2, r3
 8006e42:	2b64      	cmp	r3, #100	; 0x64
 8006e44:	d906      	bls.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 8006e46:	2303      	movs	r3, #3
 8006e48:	75fb      	strb	r3, [r7, #23]
        break;
 8006e4a:	e009      	b.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8006e4c:	58024400 	.word	0x58024400
 8006e50:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006e54:	4bb9      	ldr	r3, [pc, #740]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d0eb      	beq.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8006e60:	7dfb      	ldrb	r3, [r7, #23]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d166      	bne.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006e66:	4bb6      	ldr	r3, [pc, #728]	; (8007140 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006e68:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006e70:	4053      	eors	r3, r2
 8006e72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d013      	beq.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006e7a:	4bb1      	ldr	r3, [pc, #708]	; (8007140 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e82:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006e84:	4bae      	ldr	r3, [pc, #696]	; (8007140 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e88:	4aad      	ldr	r2, [pc, #692]	; (8007140 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006e8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e8e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006e90:	4bab      	ldr	r3, [pc, #684]	; (8007140 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e94:	4aaa      	ldr	r2, [pc, #680]	; (8007140 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006e96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e9a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006e9c:	4aa8      	ldr	r2, [pc, #672]	; (8007140 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006ea8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006eac:	d115      	bne.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006eae:	f7fb fa57 	bl	8002360 <HAL_GetTick>
 8006eb2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006eb4:	e00b      	b.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006eb6:	f7fb fa53 	bl	8002360 <HAL_GetTick>
 8006eba:	4602      	mov	r2, r0
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	1ad3      	subs	r3, r2, r3
 8006ec0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d902      	bls.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8006ec8:	2303      	movs	r3, #3
 8006eca:	75fb      	strb	r3, [r7, #23]
            break;
 8006ecc:	e005      	b.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006ece:	4b9c      	ldr	r3, [pc, #624]	; (8007140 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ed2:	f003 0302 	and.w	r3, r3, #2
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d0ed      	beq.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 8006eda:	7dfb      	ldrb	r3, [r7, #23]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d126      	bne.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006ee6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006eea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006eee:	d10d      	bne.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8006ef0:	4b93      	ldr	r3, [pc, #588]	; (8007140 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006ef2:	691b      	ldr	r3, [r3, #16]
 8006ef4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006efe:	0919      	lsrs	r1, r3, #4
 8006f00:	4b90      	ldr	r3, [pc, #576]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006f02:	400b      	ands	r3, r1
 8006f04:	498e      	ldr	r1, [pc, #568]	; (8007140 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006f06:	4313      	orrs	r3, r2
 8006f08:	610b      	str	r3, [r1, #16]
 8006f0a:	e005      	b.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 8006f0c:	4b8c      	ldr	r3, [pc, #560]	; (8007140 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006f0e:	691b      	ldr	r3, [r3, #16]
 8006f10:	4a8b      	ldr	r2, [pc, #556]	; (8007140 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006f12:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006f16:	6113      	str	r3, [r2, #16]
 8006f18:	4b89      	ldr	r3, [pc, #548]	; (8007140 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006f1a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006f22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f26:	4986      	ldr	r1, [pc, #536]	; (8007140 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	670b      	str	r3, [r1, #112]	; 0x70
 8006f2c:	e004      	b.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006f2e:	7dfb      	ldrb	r3, [r7, #23]
 8006f30:	75bb      	strb	r3, [r7, #22]
 8006f32:	e001      	b.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f34:	7dfb      	ldrb	r3, [r7, #23]
 8006f36:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f003 0301 	and.w	r3, r3, #1
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d07e      	beq.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f48:	2b28      	cmp	r3, #40	; 0x28
 8006f4a:	d867      	bhi.n	800701c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8006f4c:	a201      	add	r2, pc, #4	; (adr r2, 8006f54 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 8006f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f52:	bf00      	nop
 8006f54:	08007023 	.word	0x08007023
 8006f58:	0800701d 	.word	0x0800701d
 8006f5c:	0800701d 	.word	0x0800701d
 8006f60:	0800701d 	.word	0x0800701d
 8006f64:	0800701d 	.word	0x0800701d
 8006f68:	0800701d 	.word	0x0800701d
 8006f6c:	0800701d 	.word	0x0800701d
 8006f70:	0800701d 	.word	0x0800701d
 8006f74:	08006ff9 	.word	0x08006ff9
 8006f78:	0800701d 	.word	0x0800701d
 8006f7c:	0800701d 	.word	0x0800701d
 8006f80:	0800701d 	.word	0x0800701d
 8006f84:	0800701d 	.word	0x0800701d
 8006f88:	0800701d 	.word	0x0800701d
 8006f8c:	0800701d 	.word	0x0800701d
 8006f90:	0800701d 	.word	0x0800701d
 8006f94:	0800700b 	.word	0x0800700b
 8006f98:	0800701d 	.word	0x0800701d
 8006f9c:	0800701d 	.word	0x0800701d
 8006fa0:	0800701d 	.word	0x0800701d
 8006fa4:	0800701d 	.word	0x0800701d
 8006fa8:	0800701d 	.word	0x0800701d
 8006fac:	0800701d 	.word	0x0800701d
 8006fb0:	0800701d 	.word	0x0800701d
 8006fb4:	08007023 	.word	0x08007023
 8006fb8:	0800701d 	.word	0x0800701d
 8006fbc:	0800701d 	.word	0x0800701d
 8006fc0:	0800701d 	.word	0x0800701d
 8006fc4:	0800701d 	.word	0x0800701d
 8006fc8:	0800701d 	.word	0x0800701d
 8006fcc:	0800701d 	.word	0x0800701d
 8006fd0:	0800701d 	.word	0x0800701d
 8006fd4:	08007023 	.word	0x08007023
 8006fd8:	0800701d 	.word	0x0800701d
 8006fdc:	0800701d 	.word	0x0800701d
 8006fe0:	0800701d 	.word	0x0800701d
 8006fe4:	0800701d 	.word	0x0800701d
 8006fe8:	0800701d 	.word	0x0800701d
 8006fec:	0800701d 	.word	0x0800701d
 8006ff0:	0800701d 	.word	0x0800701d
 8006ff4:	08007023 	.word	0x08007023
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	3304      	adds	r3, #4
 8006ffc:	2101      	movs	r1, #1
 8006ffe:	4618      	mov	r0, r3
 8007000:	f001 fca8 	bl	8008954 <RCCEx_PLL2_Config>
 8007004:	4603      	mov	r3, r0
 8007006:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007008:	e00c      	b.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	3324      	adds	r3, #36	; 0x24
 800700e:	2101      	movs	r1, #1
 8007010:	4618      	mov	r0, r3
 8007012:	f001 fd51 	bl	8008ab8 <RCCEx_PLL3_Config>
 8007016:	4603      	mov	r3, r0
 8007018:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800701a:	e003      	b.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800701c:	2301      	movs	r3, #1
 800701e:	75fb      	strb	r3, [r7, #23]
      break;
 8007020:	e000      	b.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 8007022:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007024:	7dfb      	ldrb	r3, [r7, #23]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d109      	bne.n	800703e <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800702a:	4b45      	ldr	r3, [pc, #276]	; (8007140 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800702c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800702e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007036:	4942      	ldr	r1, [pc, #264]	; (8007140 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007038:	4313      	orrs	r3, r2
 800703a:	654b      	str	r3, [r1, #84]	; 0x54
 800703c:	e001      	b.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800703e:	7dfb      	ldrb	r3, [r7, #23]
 8007040:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f003 0302 	and.w	r3, r3, #2
 800704a:	2b00      	cmp	r3, #0
 800704c:	d037      	beq.n	80070be <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007052:	2b05      	cmp	r3, #5
 8007054:	d820      	bhi.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8007056:	a201      	add	r2, pc, #4	; (adr r2, 800705c <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8007058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800705c:	0800709f 	.word	0x0800709f
 8007060:	08007075 	.word	0x08007075
 8007064:	08007087 	.word	0x08007087
 8007068:	0800709f 	.word	0x0800709f
 800706c:	0800709f 	.word	0x0800709f
 8007070:	0800709f 	.word	0x0800709f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	3304      	adds	r3, #4
 8007078:	2101      	movs	r1, #1
 800707a:	4618      	mov	r0, r3
 800707c:	f001 fc6a 	bl	8008954 <RCCEx_PLL2_Config>
 8007080:	4603      	mov	r3, r0
 8007082:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007084:	e00c      	b.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	3324      	adds	r3, #36	; 0x24
 800708a:	2101      	movs	r1, #1
 800708c:	4618      	mov	r0, r3
 800708e:	f001 fd13 	bl	8008ab8 <RCCEx_PLL3_Config>
 8007092:	4603      	mov	r3, r0
 8007094:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007096:	e003      	b.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007098:	2301      	movs	r3, #1
 800709a:	75fb      	strb	r3, [r7, #23]
      break;
 800709c:	e000      	b.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 800709e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070a0:	7dfb      	ldrb	r3, [r7, #23]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d109      	bne.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80070a6:	4b26      	ldr	r3, [pc, #152]	; (8007140 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80070a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070aa:	f023 0207 	bic.w	r2, r3, #7
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070b2:	4923      	ldr	r1, [pc, #140]	; (8007140 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80070b4:	4313      	orrs	r3, r2
 80070b6:	654b      	str	r3, [r1, #84]	; 0x54
 80070b8:	e001      	b.n	80070be <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070ba:	7dfb      	ldrb	r3, [r7, #23]
 80070bc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f003 0304 	and.w	r3, r3, #4
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d040      	beq.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070d0:	2b05      	cmp	r3, #5
 80070d2:	d821      	bhi.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80070d4:	a201      	add	r2, pc, #4	; (adr r2, 80070dc <HAL_RCCEx_PeriphCLKConfig+0x880>)
 80070d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070da:	bf00      	nop
 80070dc:	0800711f 	.word	0x0800711f
 80070e0:	080070f5 	.word	0x080070f5
 80070e4:	08007107 	.word	0x08007107
 80070e8:	0800711f 	.word	0x0800711f
 80070ec:	0800711f 	.word	0x0800711f
 80070f0:	0800711f 	.word	0x0800711f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	3304      	adds	r3, #4
 80070f8:	2101      	movs	r1, #1
 80070fa:	4618      	mov	r0, r3
 80070fc:	f001 fc2a 	bl	8008954 <RCCEx_PLL2_Config>
 8007100:	4603      	mov	r3, r0
 8007102:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007104:	e00c      	b.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	3324      	adds	r3, #36	; 0x24
 800710a:	2101      	movs	r1, #1
 800710c:	4618      	mov	r0, r3
 800710e:	f001 fcd3 	bl	8008ab8 <RCCEx_PLL3_Config>
 8007112:	4603      	mov	r3, r0
 8007114:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007116:	e003      	b.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007118:	2301      	movs	r3, #1
 800711a:	75fb      	strb	r3, [r7, #23]
      break;
 800711c:	e000      	b.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 800711e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007120:	7dfb      	ldrb	r3, [r7, #23]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d110      	bne.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007126:	4b06      	ldr	r3, [pc, #24]	; (8007140 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800712a:	f023 0207 	bic.w	r2, r3, #7
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007134:	4902      	ldr	r1, [pc, #8]	; (8007140 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007136:	4313      	orrs	r3, r2
 8007138:	658b      	str	r3, [r1, #88]	; 0x58
 800713a:	e007      	b.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 800713c:	58024800 	.word	0x58024800
 8007140:	58024400 	.word	0x58024400
 8007144:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007148:	7dfb      	ldrb	r3, [r7, #23]
 800714a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f003 0320 	and.w	r3, r3, #32
 8007154:	2b00      	cmp	r3, #0
 8007156:	d04b      	beq.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800715e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007162:	d02e      	beq.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8007164:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007168:	d828      	bhi.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x960>
 800716a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800716e:	d02a      	beq.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8007170:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007174:	d822      	bhi.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x960>
 8007176:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800717a:	d026      	beq.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800717c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007180:	d81c      	bhi.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x960>
 8007182:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007186:	d010      	beq.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8007188:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800718c:	d816      	bhi.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x960>
 800718e:	2b00      	cmp	r3, #0
 8007190:	d01d      	beq.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0x972>
 8007192:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007196:	d111      	bne.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	3304      	adds	r3, #4
 800719c:	2100      	movs	r1, #0
 800719e:	4618      	mov	r0, r3
 80071a0:	f001 fbd8 	bl	8008954 <RCCEx_PLL2_Config>
 80071a4:	4603      	mov	r3, r0
 80071a6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80071a8:	e012      	b.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	3324      	adds	r3, #36	; 0x24
 80071ae:	2102      	movs	r1, #2
 80071b0:	4618      	mov	r0, r3
 80071b2:	f001 fc81 	bl	8008ab8 <RCCEx_PLL3_Config>
 80071b6:	4603      	mov	r3, r0
 80071b8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80071ba:	e009      	b.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80071bc:	2301      	movs	r3, #1
 80071be:	75fb      	strb	r3, [r7, #23]
      break;
 80071c0:	e006      	b.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80071c2:	bf00      	nop
 80071c4:	e004      	b.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80071c6:	bf00      	nop
 80071c8:	e002      	b.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80071ca:	bf00      	nop
 80071cc:	e000      	b.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80071ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071d0:	7dfb      	ldrb	r3, [r7, #23]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d10a      	bne.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80071d6:	4bb2      	ldr	r3, [pc, #712]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80071d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071da:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071e4:	49ae      	ldr	r1, [pc, #696]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80071e6:	4313      	orrs	r3, r2
 80071e8:	654b      	str	r3, [r1, #84]	; 0x54
 80071ea:	e001      	b.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071ec:	7dfb      	ldrb	r3, [r7, #23]
 80071ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d04b      	beq.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007202:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007206:	d02e      	beq.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8007208:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800720c:	d828      	bhi.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800720e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007212:	d02a      	beq.n	800726a <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8007214:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007218:	d822      	bhi.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800721a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800721e:	d026      	beq.n	800726e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8007220:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007224:	d81c      	bhi.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8007226:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800722a:	d010      	beq.n	800724e <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 800722c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007230:	d816      	bhi.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8007232:	2b00      	cmp	r3, #0
 8007234:	d01d      	beq.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8007236:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800723a:	d111      	bne.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	3304      	adds	r3, #4
 8007240:	2100      	movs	r1, #0
 8007242:	4618      	mov	r0, r3
 8007244:	f001 fb86 	bl	8008954 <RCCEx_PLL2_Config>
 8007248:	4603      	mov	r3, r0
 800724a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800724c:	e012      	b.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	3324      	adds	r3, #36	; 0x24
 8007252:	2102      	movs	r1, #2
 8007254:	4618      	mov	r0, r3
 8007256:	f001 fc2f 	bl	8008ab8 <RCCEx_PLL3_Config>
 800725a:	4603      	mov	r3, r0
 800725c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800725e:	e009      	b.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007260:	2301      	movs	r3, #1
 8007262:	75fb      	strb	r3, [r7, #23]
      break;
 8007264:	e006      	b.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8007266:	bf00      	nop
 8007268:	e004      	b.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800726a:	bf00      	nop
 800726c:	e002      	b.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800726e:	bf00      	nop
 8007270:	e000      	b.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8007272:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007274:	7dfb      	ldrb	r3, [r7, #23]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d10a      	bne.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800727a:	4b89      	ldr	r3, [pc, #548]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800727c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800727e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007288:	4985      	ldr	r1, [pc, #532]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800728a:	4313      	orrs	r3, r2
 800728c:	658b      	str	r3, [r1, #88]	; 0x58
 800728e:	e001      	b.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007290:	7dfb      	ldrb	r3, [r7, #23]
 8007292:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800729c:	2b00      	cmp	r3, #0
 800729e:	d04b      	beq.n	8007338 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80072a6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80072aa:	d02e      	beq.n	800730a <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80072ac:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80072b0:	d828      	bhi.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80072b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072b6:	d02a      	beq.n	800730e <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80072b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072bc:	d822      	bhi.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80072be:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80072c2:	d026      	beq.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 80072c4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80072c8:	d81c      	bhi.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80072ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80072ce:	d010      	beq.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 80072d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80072d4:	d816      	bhi.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d01d      	beq.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 80072da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072de:	d111      	bne.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	3304      	adds	r3, #4
 80072e4:	2100      	movs	r1, #0
 80072e6:	4618      	mov	r0, r3
 80072e8:	f001 fb34 	bl	8008954 <RCCEx_PLL2_Config>
 80072ec:	4603      	mov	r3, r0
 80072ee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80072f0:	e012      	b.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	3324      	adds	r3, #36	; 0x24
 80072f6:	2102      	movs	r1, #2
 80072f8:	4618      	mov	r0, r3
 80072fa:	f001 fbdd 	bl	8008ab8 <RCCEx_PLL3_Config>
 80072fe:	4603      	mov	r3, r0
 8007300:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007302:	e009      	b.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007304:	2301      	movs	r3, #1
 8007306:	75fb      	strb	r3, [r7, #23]
      break;
 8007308:	e006      	b.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800730a:	bf00      	nop
 800730c:	e004      	b.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800730e:	bf00      	nop
 8007310:	e002      	b.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8007312:	bf00      	nop
 8007314:	e000      	b.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8007316:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007318:	7dfb      	ldrb	r3, [r7, #23]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d10a      	bne.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800731e:	4b60      	ldr	r3, [pc, #384]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007322:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800732c:	495c      	ldr	r1, [pc, #368]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800732e:	4313      	orrs	r3, r2
 8007330:	658b      	str	r3, [r1, #88]	; 0x58
 8007332:	e001      	b.n	8007338 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007334:	7dfb      	ldrb	r3, [r7, #23]
 8007336:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f003 0308 	and.w	r3, r3, #8
 8007340:	2b00      	cmp	r3, #0
 8007342:	d018      	beq.n	8007376 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007348:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800734c:	d10a      	bne.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	3324      	adds	r3, #36	; 0x24
 8007352:	2102      	movs	r1, #2
 8007354:	4618      	mov	r0, r3
 8007356:	f001 fbaf 	bl	8008ab8 <RCCEx_PLL3_Config>
 800735a:	4603      	mov	r3, r0
 800735c:	2b00      	cmp	r3, #0
 800735e:	d001      	beq.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8007360:	2301      	movs	r3, #1
 8007362:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8007364:	4b4e      	ldr	r3, [pc, #312]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007368:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007370:	494b      	ldr	r1, [pc, #300]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007372:	4313      	orrs	r3, r2
 8007374:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f003 0310 	and.w	r3, r3, #16
 800737e:	2b00      	cmp	r3, #0
 8007380:	d01a      	beq.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007388:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800738c:	d10a      	bne.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	3324      	adds	r3, #36	; 0x24
 8007392:	2102      	movs	r1, #2
 8007394:	4618      	mov	r0, r3
 8007396:	f001 fb8f 	bl	8008ab8 <RCCEx_PLL3_Config>
 800739a:	4603      	mov	r3, r0
 800739c:	2b00      	cmp	r3, #0
 800739e:	d001      	beq.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 80073a0:	2301      	movs	r3, #1
 80073a2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80073a4:	4b3e      	ldr	r3, [pc, #248]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80073a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073b2:	493b      	ldr	r1, [pc, #236]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80073b4:	4313      	orrs	r3, r2
 80073b6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d034      	beq.n	800742e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80073ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80073ce:	d01d      	beq.n	800740c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80073d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80073d4:	d817      	bhi.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d003      	beq.n	80073e2 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80073da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073de:	d009      	beq.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80073e0:	e011      	b.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	3304      	adds	r3, #4
 80073e6:	2100      	movs	r1, #0
 80073e8:	4618      	mov	r0, r3
 80073ea:	f001 fab3 	bl	8008954 <RCCEx_PLL2_Config>
 80073ee:	4603      	mov	r3, r0
 80073f0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80073f2:	e00c      	b.n	800740e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	3324      	adds	r3, #36	; 0x24
 80073f8:	2102      	movs	r1, #2
 80073fa:	4618      	mov	r0, r3
 80073fc:	f001 fb5c 	bl	8008ab8 <RCCEx_PLL3_Config>
 8007400:	4603      	mov	r3, r0
 8007402:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007404:	e003      	b.n	800740e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007406:	2301      	movs	r3, #1
 8007408:	75fb      	strb	r3, [r7, #23]
      break;
 800740a:	e000      	b.n	800740e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 800740c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800740e:	7dfb      	ldrb	r3, [r7, #23]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d10a      	bne.n	800742a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007414:	4b22      	ldr	r3, [pc, #136]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007418:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007422:	491f      	ldr	r1, [pc, #124]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007424:	4313      	orrs	r3, r2
 8007426:	658b      	str	r3, [r1, #88]	; 0x58
 8007428:	e001      	b.n	800742e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800742a:	7dfb      	ldrb	r3, [r7, #23]
 800742c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007436:	2b00      	cmp	r3, #0
 8007438:	d036      	beq.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007440:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007444:	d01c      	beq.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8007446:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800744a:	d816      	bhi.n	800747a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800744c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007450:	d003      	beq.n	800745a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8007452:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007456:	d007      	beq.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8007458:	e00f      	b.n	800747a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800745a:	4b11      	ldr	r3, [pc, #68]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800745c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800745e:	4a10      	ldr	r2, [pc, #64]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007460:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007464:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007466:	e00c      	b.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	3324      	adds	r3, #36	; 0x24
 800746c:	2101      	movs	r1, #1
 800746e:	4618      	mov	r0, r3
 8007470:	f001 fb22 	bl	8008ab8 <RCCEx_PLL3_Config>
 8007474:	4603      	mov	r3, r0
 8007476:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007478:	e003      	b.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800747a:	2301      	movs	r3, #1
 800747c:	75fb      	strb	r3, [r7, #23]
      break;
 800747e:	e000      	b.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8007480:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007482:	7dfb      	ldrb	r3, [r7, #23]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d10d      	bne.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007488:	4b05      	ldr	r3, [pc, #20]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800748a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800748c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007496:	4902      	ldr	r1, [pc, #8]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007498:	4313      	orrs	r3, r2
 800749a:	654b      	str	r3, [r1, #84]	; 0x54
 800749c:	e004      	b.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 800749e:	bf00      	nop
 80074a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074a4:	7dfb      	ldrb	r3, [r7, #23]
 80074a6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d029      	beq.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d003      	beq.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80074bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074c0:	d007      	beq.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80074c2:	e00f      	b.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074c4:	4b61      	ldr	r3, [pc, #388]	; (800764c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80074c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074c8:	4a60      	ldr	r2, [pc, #384]	; (800764c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80074ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80074d0:	e00b      	b.n	80074ea <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	3304      	adds	r3, #4
 80074d6:	2102      	movs	r1, #2
 80074d8:	4618      	mov	r0, r3
 80074da:	f001 fa3b 	bl	8008954 <RCCEx_PLL2_Config>
 80074de:	4603      	mov	r3, r0
 80074e0:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80074e2:	e002      	b.n	80074ea <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 80074e4:	2301      	movs	r3, #1
 80074e6:	75fb      	strb	r3, [r7, #23]
      break;
 80074e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074ea:	7dfb      	ldrb	r3, [r7, #23]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d109      	bne.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80074f0:	4b56      	ldr	r3, [pc, #344]	; (800764c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80074f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074fc:	4953      	ldr	r1, [pc, #332]	; (800764c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80074fe:	4313      	orrs	r3, r2
 8007500:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007502:	e001      	b.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007504:	7dfb      	ldrb	r3, [r7, #23]
 8007506:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007510:	2b00      	cmp	r3, #0
 8007512:	d00a      	beq.n	800752a <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	3324      	adds	r3, #36	; 0x24
 8007518:	2102      	movs	r1, #2
 800751a:	4618      	mov	r0, r3
 800751c:	f001 facc 	bl	8008ab8 <RCCEx_PLL3_Config>
 8007520:	4603      	mov	r3, r0
 8007522:	2b00      	cmp	r3, #0
 8007524:	d001      	beq.n	800752a <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 8007526:	2301      	movs	r3, #1
 8007528:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007532:	2b00      	cmp	r3, #0
 8007534:	d030      	beq.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800753a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800753e:	d017      	beq.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007540:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007544:	d811      	bhi.n	800756a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8007546:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800754a:	d013      	beq.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 800754c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007550:	d80b      	bhi.n	800756a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8007552:	2b00      	cmp	r3, #0
 8007554:	d010      	beq.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8007556:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800755a:	d106      	bne.n	800756a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800755c:	4b3b      	ldr	r3, [pc, #236]	; (800764c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800755e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007560:	4a3a      	ldr	r2, [pc, #232]	; (800764c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007562:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007566:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007568:	e007      	b.n	800757a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800756a:	2301      	movs	r3, #1
 800756c:	75fb      	strb	r3, [r7, #23]
      break;
 800756e:	e004      	b.n	800757a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8007570:	bf00      	nop
 8007572:	e002      	b.n	800757a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8007574:	bf00      	nop
 8007576:	e000      	b.n	800757a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8007578:	bf00      	nop
    }

    if(ret == HAL_OK)
 800757a:	7dfb      	ldrb	r3, [r7, #23]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d109      	bne.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007580:	4b32      	ldr	r3, [pc, #200]	; (800764c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007584:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800758c:	492f      	ldr	r1, [pc, #188]	; (800764c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800758e:	4313      	orrs	r3, r2
 8007590:	654b      	str	r3, [r1, #84]	; 0x54
 8007592:	e001      	b.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007594:	7dfb      	ldrb	r3, [r7, #23]
 8007596:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d008      	beq.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80075a4:	4b29      	ldr	r3, [pc, #164]	; (800764c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80075a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075a8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075b0:	4926      	ldr	r1, [pc, #152]	; (800764c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80075b2:	4313      	orrs	r3, r2
 80075b4:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d008      	beq.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80075c2:	4b22      	ldr	r3, [pc, #136]	; (800764c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80075c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075c6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075ce:	491f      	ldr	r1, [pc, #124]	; (800764c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80075d0:	4313      	orrs	r3, r2
 80075d2:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d00d      	beq.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80075e0:	4b1a      	ldr	r3, [pc, #104]	; (800764c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80075e2:	691b      	ldr	r3, [r3, #16]
 80075e4:	4a19      	ldr	r2, [pc, #100]	; (800764c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80075e6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80075ea:	6113      	str	r3, [r2, #16]
 80075ec:	4b17      	ldr	r3, [pc, #92]	; (800764c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80075ee:	691a      	ldr	r2, [r3, #16]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80075f6:	4915      	ldr	r1, [pc, #84]	; (800764c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80075f8:	4313      	orrs	r3, r2
 80075fa:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	2b00      	cmp	r3, #0
 8007602:	da08      	bge.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007604:	4b11      	ldr	r3, [pc, #68]	; (800764c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007606:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007608:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007610:	490e      	ldr	r1, [pc, #56]	; (800764c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007612:	4313      	orrs	r3, r2
 8007614:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800761e:	2b00      	cmp	r3, #0
 8007620:	d009      	beq.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007622:	4b0a      	ldr	r3, [pc, #40]	; (800764c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007626:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007630:	4906      	ldr	r1, [pc, #24]	; (800764c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007632:	4313      	orrs	r3, r2
 8007634:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8007636:	7dbb      	ldrb	r3, [r7, #22]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d101      	bne.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 800763c:	2300      	movs	r3, #0
 800763e:	e000      	b.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8007640:	2301      	movs	r3, #1
}
 8007642:	4618      	mov	r0, r3
 8007644:	3718      	adds	r7, #24
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}
 800764a:	bf00      	nop
 800764c:	58024400 	.word	0x58024400

08007650 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @retval None
  *
  *   (*) : Available on some STM32H7 lines only.
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007650:	b480      	push	{r7}
 8007652:	b083      	sub	sp, #12
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection =
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	4aa2      	ldr	r2, [pc, #648]	; (80078e4 <HAL_RCCEx_GetPeriphCLKConfig+0x294>)
 800765c:	601a      	str	r2, [r3, #0]
	         RCC_PERIPHCLK_ADC     | RCC_PERIPHCLK_SWPMI1      | RCC_PERIPHCLK_DFSDM1  | RCC_PERIPHCLK_RTC      |
	         RCC_PERIPHCLK_CEC     | RCC_PERIPHCLK_FMC         | RCC_PERIPHCLK_SPDIFRX | RCC_PERIPHCLK_TIM      |
	         RCC_PERIPHCLK_CKPER;

#if defined(I2C5)
PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_I2C1235;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f043 0208 	orr.w	r2, r3, #8
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	601a      	str	r2, [r3, #0]
#endif /* RCC_CDCCIP1R_SAI2BSEL */
#if defined(SAI3)	 
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SAI23;
#endif /* SAI3 */
#if defined(SAI4)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SAI4A;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	601a      	str	r2, [r3, #0]
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SAI4B;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	601a      	str	r2, [r3, #0]
#endif /* DFSDM2 */
#if defined(QUADSPI)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_QSPI;
#endif /* QUADSPI */
#if defined(OCTOSPI1) || defined(OCTOSPI2)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_OSPI;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	601a      	str	r2, [r3, #0]
#endif /* OCTOSPI1 || OCTOSPI2 */
#if defined(HRTIM1)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_HRTIM1;
#endif /* HRTIM1 */
#if defined(LTDC)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_LTDC;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	601a      	str	r2, [r3, #0]
#if defined(DSI)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_DSI;
#endif /* DSI */

  /* Get the PLL3 Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLL3.PLL3M = (uint32_t)((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> RCC_PLLCKSELR_DIVM3_Pos);
 800769a:	4b93      	ldr	r3, [pc, #588]	; (80078e8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800769c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800769e:	0d1b      	lsrs	r3, r3, #20
 80076a0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	625a      	str	r2, [r3, #36]	; 0x24
  PeriphClkInit->PLL3.PLL3N = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) >> RCC_PLL3DIVR_N3_Pos)+ 1U;
 80076a8:	4b8f      	ldr	r3, [pc, #572]	; (80078e8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 80076aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076b0:	1c5a      	adds	r2, r3, #1
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInit->PLL3.PLL3R = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> RCC_PLL3DIVR_R3_Pos)+ 1U;
 80076b6:	4b8c      	ldr	r3, [pc, #560]	; (80078e8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 80076b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ba:	0e1b      	lsrs	r3, r3, #24
 80076bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076c0:	1c5a      	adds	r2, r3, #1
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	635a      	str	r2, [r3, #52]	; 0x34
  PeriphClkInit->PLL3.PLL3P = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> RCC_PLL3DIVR_P3_Pos)+ 1U;
 80076c6:	4b88      	ldr	r3, [pc, #544]	; (80078e8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 80076c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ca:	0a5b      	lsrs	r3, r3, #9
 80076cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076d0:	1c5a      	adds	r2, r3, #1
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	62da      	str	r2, [r3, #44]	; 0x2c
  PeriphClkInit->PLL3.PLL3Q = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> RCC_PLL3DIVR_Q3_Pos)+ 1U;
 80076d6:	4b84      	ldr	r3, [pc, #528]	; (80078e8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 80076d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076da:	0c1b      	lsrs	r3, r3, #16
 80076dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076e0:	1c5a      	adds	r2, r3, #1
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	631a      	str	r2, [r3, #48]	; 0x30
  PeriphClkInit->PLL3.PLL3RGE = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL3RGE) >> RCC_PLLCFGR_PLL3RGE_Pos);
 80076e6:	4b80      	ldr	r3, [pc, #512]	; (80078e8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 80076e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ea:	0a9b      	lsrs	r3, r3, #10
 80076ec:	f003 0203 	and.w	r2, r3, #3
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	639a      	str	r2, [r3, #56]	; 0x38
  PeriphClkInit->PLL3.PLL3VCOSEL = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL3VCOSEL) >> RCC_PLLCFGR_PLL3VCOSEL_Pos);
 80076f4:	4b7c      	ldr	r3, [pc, #496]	; (80078e8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 80076f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f8:	0a5b      	lsrs	r3, r3, #9
 80076fa:	f003 0201 	and.w	r2, r3, #1
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Get the PLL2 Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLL2.PLL2M = (uint32_t)((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> RCC_PLLCKSELR_DIVM2_Pos);
 8007702:	4b79      	ldr	r3, [pc, #484]	; (80078e8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007706:	0b1b      	lsrs	r3, r3, #12
 8007708:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLL2.PLL2N = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) >> RCC_PLL2DIVR_N2_Pos)+ 1U;
 8007710:	4b75      	ldr	r3, [pc, #468]	; (80078e8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007714:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007718:	1c5a      	adds	r2, r3, #1
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	609a      	str	r2, [r3, #8]
  PeriphClkInit->PLL2.PLL2R = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> RCC_PLL2DIVR_R2_Pos)+ 1U;
 800771e:	4b72      	ldr	r3, [pc, #456]	; (80078e8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007722:	0e1b      	lsrs	r3, r3, #24
 8007724:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007728:	1c5a      	adds	r2, r3, #1
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLL2.PLL2P = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> RCC_PLL2DIVR_P2_Pos)+ 1U;
 800772e:	4b6e      	ldr	r3, [pc, #440]	; (80078e8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007732:	0a5b      	lsrs	r3, r3, #9
 8007734:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007738:	1c5a      	adds	r2, r3, #1
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLL2.PLL2Q = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> RCC_PLL2DIVR_Q2_Pos)+ 1U;
 800773e:	4b6a      	ldr	r3, [pc, #424]	; (80078e8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007742:	0c1b      	lsrs	r3, r3, #16
 8007744:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007748:	1c5a      	adds	r2, r3, #1
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLL2.PLL2RGE = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL2RGE) >> RCC_PLLCFGR_PLL2RGE_Pos);
 800774e:	4b66      	ldr	r3, [pc, #408]	; (80078e8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007752:	099b      	lsrs	r3, r3, #6
 8007754:	f003 0203 	and.w	r2, r3, #3
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLL2.PLL2VCOSEL = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL2VCOSEL) >> RCC_PLLCFGR_PLL2VCOSEL_Pos);
 800775c:	4b62      	ldr	r3, [pc, #392]	; (80078e8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800775e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007760:	095b      	lsrs	r3, r3, #5
 8007762:	f003 0201 	and.w	r2, r3, #1
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	61da      	str	r2, [r3, #28]

  /* Get the USART1 configuration --------------------------------------------*/
  PeriphClkInit->Usart16ClockSelection      = __HAL_RCC_GET_USART16_SOURCE();
 800776a:	4b5f      	ldr	r3, [pc, #380]	; (80078e8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800776c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800776e:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	675a      	str	r2, [r3, #116]	; 0x74
  /* Get the USART2/3/4/5/7/8 clock source -----------------------------------*/
  PeriphClkInit->Usart234578ClockSelection  = __HAL_RCC_GET_USART234578_SOURCE();
 8007776:	4b5c      	ldr	r3, [pc, #368]	; (80078e8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800777a:	f003 0207 	and.w	r2, r3, #7
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	671a      	str	r2, [r3, #112]	; 0x70
  /* Get the LPUART1 clock source --------------------------------------------*/
  PeriphClkInit->Lpuart1ClockSelection      = __HAL_RCC_GET_LPUART1_SOURCE();
 8007782:	4b59      	ldr	r3, [pc, #356]	; (80078e8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007786:	f003 0207 	and.w	r2, r3, #7
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if defined(I2C5)
  /* Get the I2C1/2/3/5 clock source -----------------------------------------*/
  PeriphClkInit->I2c1235ClockSelection       = __HAL_RCC_GET_I2C1_SOURCE();
 8007790:	4b55      	ldr	r3, [pc, #340]	; (80078e8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007794:	f403 5240 	and.w	r2, r3, #12288	; 0x3000
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	67da      	str	r2, [r3, #124]	; 0x7c
#else
  /* Get the I2C1/2/3 clock source -------------------------------------------*/
  PeriphClkInit->I2c123ClockSelection       = __HAL_RCC_GET_I2C1_SOURCE();
#endif /*I2C5*/
  /* Get the LPTIM1 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection       = __HAL_RCC_GET_LPTIM1_SOURCE();
 800779c:	4b52      	ldr	r3, [pc, #328]	; (80078e8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800779e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077a0:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  /* Get the LPTIM2 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim2ClockSelection       = __HAL_RCC_GET_LPTIM2_SOURCE();
 80077aa:	4b4f      	ldr	r3, [pc, #316]	; (80078e8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 80077ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077ae:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  /* Get the LPTIM3/4/5 clock source -----------------------------------------*/
  PeriphClkInit->Lptim345ClockSelection     = __HAL_RCC_GET_LPTIM345_SOURCE();
 80077b8:	4b4b      	ldr	r3, [pc, #300]	; (80078e8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 80077ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077bc:	f403 4260 	and.w	r2, r3, #57344	; 0xe000
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  /* Get the SAI1 clock source -----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection         = __HAL_RCC_GET_SAI1_SOURCE();
 80077c6:	4b48      	ldr	r3, [pc, #288]	; (80078e8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 80077c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077ca:	f003 0207 	and.w	r2, r3, #7
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	655a      	str	r2, [r3, #84]	; 0x54
  /* Get the SAI2B clock source ---------------------------------------------*/
  PeriphClkInit->Sai2BClockSelection        = __HAL_RCC_GET_SAI2B_SOURCE();
#endif  /*SAI2B*/
#if defined(SAI4)
  /* Get the SAI4A clock source ----------------------------------------------*/
  PeriphClkInit->Sai4AClockSelection        = __HAL_RCC_GET_SAI4A_SOURCE();
 80077d2:	4b45      	ldr	r3, [pc, #276]	; (80078e8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 80077d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077d6:	f403 0260 	and.w	r2, r3, #14680064	; 0xe00000
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  /* Get the SAI4B clock source ----------------------------------------------*/
  PeriphClkInit->Sai4BClockSelection        = __HAL_RCC_GET_SAI4B_SOURCE();
 80077e0:	4b41      	ldr	r3, [pc, #260]	; (80078e8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 80077e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077e4:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
#endif  /*SAI4*/
  /* Get the RTC clock source ------------------------------------------------*/
  PeriphClkInit->RTCClockSelection          = __HAL_RCC_GET_RTC_SOURCE();
 80077ee:	4b3e      	ldr	r3, [pc, #248]	; (80078e8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 80077f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077f2:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  /* Get the USB clock source ------------------------------------------------*/
  PeriphClkInit->UsbClockSelection          = __HAL_RCC_GET_USB_SOURCE();
 80077fc:	4b3a      	ldr	r3, [pc, #232]	; (80078e8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 80077fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007800:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  /* Get the SDMMC clock source ----------------------------------------------*/
  PeriphClkInit->SdmmcClockSelection        = __HAL_RCC_GET_SDMMC_SOURCE();
 800780a:	4b37      	ldr	r3, [pc, #220]	; (80078e8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800780c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800780e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Get the RNG clock source ------------------------------------------------*/
  PeriphClkInit->RngClockSelection          = __HAL_RCC_GET_RNG_SOURCE();
 8007816:	4b34      	ldr	r3, [pc, #208]	; (80078e8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800781a:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	679a      	str	r2, [r3, #120]	; 0x78
#if defined(HRTIM1)
  /* Get the HRTIM1 clock source ---------------------------------------------*/
  PeriphClkInit->Hrtim1ClockSelection       = __HAL_RCC_GET_HRTIM1_SOURCE();
#endif /* HRTIM1 */
  /* Get the ADC clock source ------------------------------------------------*/
  PeriphClkInit->AdcClockSelection          = __HAL_RCC_GET_ADC_SOURCE();
 8007822:	4b31      	ldr	r3, [pc, #196]	; (80078e8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007826:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  /* Get the SWPMI1 clock source ---------------------------------------------*/
  PeriphClkInit->Swpmi1ClockSelection       = __HAL_RCC_GET_SWPMI1_SOURCE();
 8007830:	4b2d      	ldr	r3, [pc, #180]	; (80078e8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007832:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007834:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	66da      	str	r2, [r3, #108]	; 0x6c
  /* Get the DFSDM1 clock source ---------------------------------------------*/
  PeriphClkInit->Dfsdm1ClockSelection       = __HAL_RCC_GET_DFSDM1_SOURCE();
 800783c:	4b2a      	ldr	r3, [pc, #168]	; (80078e8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800783e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007840:	f003 7280 	and.w	r2, r3, #16777216	; 0x1000000
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	665a      	str	r2, [r3, #100]	; 0x64
#if defined(DFSDM2_BASE)
  /* Get the DFSDM2 clock source ---------------------------------------------*/
  PeriphClkInit->Dfsdm2ClockSelection       = __HAL_RCC_GET_DFSDM2_SOURCE();
#endif /* DFSDM2 */
  /* Get the SPDIFRX clock source --------------------------------------------*/
  PeriphClkInit->SpdifrxClockSelection      = __HAL_RCC_GET_SPDIFRX_SOURCE();
 8007848:	4b27      	ldr	r3, [pc, #156]	; (80078e8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800784a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800784c:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	661a      	str	r2, [r3, #96]	; 0x60
  /* Get the SPI1/2/3 clock source -------------------------------------------*/
  PeriphClkInit->Spi123ClockSelection       = __HAL_RCC_GET_SPI123_SOURCE();
 8007854:	4b24      	ldr	r3, [pc, #144]	; (80078e8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007856:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007858:	f403 42e0 	and.w	r2, r3, #28672	; 0x7000
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	659a      	str	r2, [r3, #88]	; 0x58
  /* Get the SPI4/5 clock source ---------------------------------------------*/
  PeriphClkInit->Spi45ClockSelection        = __HAL_RCC_GET_SPI45_SOURCE();
 8007860:	4b21      	ldr	r3, [pc, #132]	; (80078e8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007862:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007864:	f403 22e0 	and.w	r2, r3, #458752	; 0x70000
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Get the SPI6 clock source -----------------------------------------------*/
  PeriphClkInit->Spi6ClockSelection         = __HAL_RCC_GET_SPI6_SOURCE();
 800786c:	4b1e      	ldr	r3, [pc, #120]	; (80078e8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800786e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007870:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  /* Get the FDCAN clock source ----------------------------------------------*/
  PeriphClkInit->FdcanClockSelection        = __HAL_RCC_GET_FDCAN_SOURCE();
 800787a:	4b1b      	ldr	r3, [pc, #108]	; (80078e8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800787c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800787e:	f003 5240 	and.w	r2, r3, #805306368	; 0x30000000
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	669a      	str	r2, [r3, #104]	; 0x68
  /* Get the CEC clock source ------------------------------------------------*/
  PeriphClkInit->CecClockSelection          = __HAL_RCC_GET_CEC_SOURCE();
 8007886:	4b18      	ldr	r3, [pc, #96]	; (80078e8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800788a:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  /* Get the FMC clock source ------------------------------------------------*/
  PeriphClkInit->FmcClockSelection          = __HAL_RCC_GET_FMC_SOURCE();
 8007894:	4b14      	ldr	r3, [pc, #80]	; (80078e8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007896:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007898:	f003 0203 	and.w	r2, r3, #3
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	645a      	str	r2, [r3, #68]	; 0x44
  /* Get the QSPI clock source -----------------------------------------------*/
  PeriphClkInit->QspiClockSelection         = __HAL_RCC_GET_QSPI_SOURCE();
#endif /* QUADSPI */
#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /* Get the OSPI clock source -----------------------------------------------*/
  PeriphClkInit->OspiClockSelection         = __HAL_RCC_GET_OSPI_SOURCE();
 80078a0:	4b11      	ldr	r3, [pc, #68]	; (80078e8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 80078a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078a4:	f003 0230 	and.w	r2, r3, #48	; 0x30
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	649a      	str	r2, [r3, #72]	; 0x48
  /* Get the DSI clock source ------------------------------------------------*/
  PeriphClkInit->DsiClockSelection          = __HAL_RCC_GET_DSI_SOURCE();
#endif /*DSI*/

  /* Get the CKPER clock source ----------------------------------------------*/
  PeriphClkInit->CkperClockSelection        = __HAL_RCC_GET_CLKP_SOURCE();
 80078ac:	4b0e      	ldr	r3, [pc, #56]	; (80078e8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 80078ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078b0:	f003 5240 	and.w	r2, r3, #805306368	; 0x30000000
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Get the TIM Prescaler configuration -------------------------------------*/
  if ((RCC->CFGR & RCC_CFGR_TIMPRE) == 0U)
 80078b8:	4b0b      	ldr	r3, [pc, #44]	; (80078e8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 80078ba:	691b      	ldr	r3, [r3, #16]
 80078bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d104      	bne.n	80078ce <HAL_RCCEx_GetPeriphCLKConfig+0x27e>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2200      	movs	r2, #0
 80078c8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 80078cc:	e004      	b.n	80078d8 <HAL_RCCEx_GetPeriphCLKConfig+0x288>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80078d4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80078d8:	bf00      	nop
 80078da:	370c      	adds	r7, #12
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr
 80078e4:	c9fff1f7 	.word	0xc9fff1f7
 80078e8:	58024400 	.word	0x58024400

080078ec <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b090      	sub	sp, #64	; 0x40
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078fa:	f040 8089 	bne.w	8007a10 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80078fe:	4b95      	ldr	r3, [pc, #596]	; (8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007900:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007902:	f003 0307 	and.w	r3, r3, #7
 8007906:	633b      	str	r3, [r7, #48]	; 0x30
 8007908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800790a:	2b04      	cmp	r3, #4
 800790c:	d87d      	bhi.n	8007a0a <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 800790e:	a201      	add	r2, pc, #4	; (adr r2, 8007914 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8007910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007914:	08007929 	.word	0x08007929
 8007918:	0800794d 	.word	0x0800794d
 800791c:	08007971 	.word	0x08007971
 8007920:	08007a05 	.word	0x08007a05
 8007924:	08007995 	.word	0x08007995

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007928:	4b8a      	ldr	r3, [pc, #552]	; (8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007930:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007934:	d107      	bne.n	8007946 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007936:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800793a:	4618      	mov	r0, r3
 800793c:	f000 feb8 	bl	80086b0 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8007940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007942:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007944:	e3ed      	b.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007946:	2300      	movs	r3, #0
 8007948:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800794a:	e3ea      	b.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800794c:	4b81      	ldr	r3, [pc, #516]	; (8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007954:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007958:	d107      	bne.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800795a:	f107 0318 	add.w	r3, r7, #24
 800795e:	4618      	mov	r0, r3
 8007960:	f000 fbfe 	bl	8008160 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007964:	69bb      	ldr	r3, [r7, #24]
 8007966:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007968:	e3db      	b.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800796a:	2300      	movs	r3, #0
 800796c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800796e:	e3d8      	b.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007970:	4b78      	ldr	r3, [pc, #480]	; (8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007978:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800797c:	d107      	bne.n	800798e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800797e:	f107 030c 	add.w	r3, r7, #12
 8007982:	4618      	mov	r0, r3
 8007984:	f000 fd40 	bl	8008408 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800798c:	e3c9      	b.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800798e:	2300      	movs	r3, #0
 8007990:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007992:	e3c6      	b.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007994:	4b6f      	ldr	r3, [pc, #444]	; (8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007996:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007998:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800799c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800799e:	4b6d      	ldr	r3, [pc, #436]	; (8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f003 0304 	and.w	r3, r3, #4
 80079a6:	2b04      	cmp	r3, #4
 80079a8:	d10c      	bne.n	80079c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 80079aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d109      	bne.n	80079c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80079b0:	4b68      	ldr	r3, [pc, #416]	; (8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	08db      	lsrs	r3, r3, #3
 80079b6:	f003 0303 	and.w	r3, r3, #3
 80079ba:	4a67      	ldr	r2, [pc, #412]	; (8007b58 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 80079bc:	fa22 f303 	lsr.w	r3, r2, r3
 80079c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80079c2:	e01e      	b.n	8007a02 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80079c4:	4b63      	ldr	r3, [pc, #396]	; (8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079d0:	d106      	bne.n	80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80079d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80079d8:	d102      	bne.n	80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80079da:	4b60      	ldr	r3, [pc, #384]	; (8007b5c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80079dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80079de:	e010      	b.n	8007a02 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80079e0:	4b5c      	ldr	r3, [pc, #368]	; (8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80079ec:	d106      	bne.n	80079fc <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80079ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079f4:	d102      	bne.n	80079fc <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80079f6:	4b5a      	ldr	r3, [pc, #360]	; (8007b60 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80079f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80079fa:	e002      	b.n	8007a02 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80079fc:	2300      	movs	r3, #0
 80079fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007a00:	e38f      	b.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8007a02:	e38e      	b.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007a04:	4b57      	ldr	r3, [pc, #348]	; (8007b64 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007a06:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a08:	e38b      	b.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a0e:	e388      	b.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a16:	f040 80a7 	bne.w	8007b68 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8007a1a:	4b4e      	ldr	r3, [pc, #312]	; (8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a1e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8007a22:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a26:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007a2a:	d054      	beq.n	8007ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8007a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a2e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007a32:	f200 808b 	bhi.w	8007b4c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8007a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a38:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007a3c:	f000 8083 	beq.w	8007b46 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8007a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a42:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007a46:	f200 8081 	bhi.w	8007b4c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8007a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a50:	d02f      	beq.n	8007ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 8007a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a58:	d878      	bhi.n	8007b4c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8007a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d004      	beq.n	8007a6a <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 8007a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a62:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007a66:	d012      	beq.n	8007a8e <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 8007a68:	e070      	b.n	8007b4c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007a6a:	4b3a      	ldr	r3, [pc, #232]	; (8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a72:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a76:	d107      	bne.n	8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f000 fe17 	bl	80086b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a84:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007a86:	e34c      	b.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a8c:	e349      	b.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007a8e:	4b31      	ldr	r3, [pc, #196]	; (8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007a9a:	d107      	bne.n	8007aac <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a9c:	f107 0318 	add.w	r3, r7, #24
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f000 fb5d 	bl	8008160 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007aa6:	69bb      	ldr	r3, [r7, #24]
 8007aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007aaa:	e33a      	b.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007aac:	2300      	movs	r3, #0
 8007aae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ab0:	e337      	b.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007ab2:	4b28      	ldr	r3, [pc, #160]	; (8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007aba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007abe:	d107      	bne.n	8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ac0:	f107 030c 	add.w	r3, r7, #12
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f000 fc9f 	bl	8008408 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007ace:	e328      	b.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ad4:	e325      	b.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007ad6:	4b1f      	ldr	r3, [pc, #124]	; (8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ada:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007ade:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007ae0:	4b1c      	ldr	r3, [pc, #112]	; (8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f003 0304 	and.w	r3, r3, #4
 8007ae8:	2b04      	cmp	r3, #4
 8007aea:	d10c      	bne.n	8007b06 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 8007aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d109      	bne.n	8007b06 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007af2:	4b18      	ldr	r3, [pc, #96]	; (8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	08db      	lsrs	r3, r3, #3
 8007af8:	f003 0303 	and.w	r3, r3, #3
 8007afc:	4a16      	ldr	r2, [pc, #88]	; (8007b58 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8007afe:	fa22 f303 	lsr.w	r3, r2, r3
 8007b02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b04:	e01e      	b.n	8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007b06:	4b13      	ldr	r3, [pc, #76]	; (8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b12:	d106      	bne.n	8007b22 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8007b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b1a:	d102      	bne.n	8007b22 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007b1c:	4b0f      	ldr	r3, [pc, #60]	; (8007b5c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b20:	e010      	b.n	8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007b22:	4b0c      	ldr	r3, [pc, #48]	; (8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b2e:	d106      	bne.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8007b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b36:	d102      	bne.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007b38:	4b09      	ldr	r3, [pc, #36]	; (8007b60 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b3c:	e002      	b.n	8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007b42:	e2ee      	b.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8007b44:	e2ed      	b.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007b46:	4b07      	ldr	r3, [pc, #28]	; (8007b64 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007b48:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b4a:	e2ea      	b.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b50:	e2e7      	b.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8007b52:	bf00      	nop
 8007b54:	58024400 	.word	0x58024400
 8007b58:	03d09000 	.word	0x03d09000
 8007b5c:	003d0900 	.word	0x003d0900
 8007b60:	017d7840 	.word	0x017d7840
 8007b64:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b6e:	f040 809c 	bne.w	8007caa <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8007b72:	4b9e      	ldr	r3, [pc, #632]	; (8007dec <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b76:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007b7a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b7e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007b82:	d054      	beq.n	8007c2e <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8007b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b86:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007b8a:	f200 808b 	bhi.w	8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8007b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b90:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007b94:	f000 8083 	beq.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8007b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b9a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007b9e:	f200 8081 	bhi.w	8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8007ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007ba8:	d02f      	beq.n	8007c0a <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8007baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007bb0:	d878      	bhi.n	8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8007bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d004      	beq.n	8007bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8007bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007bbe:	d012      	beq.n	8007be6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8007bc0:	e070      	b.n	8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007bc2:	4b8a      	ldr	r3, [pc, #552]	; (8007dec <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007bce:	d107      	bne.n	8007be0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007bd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f000 fd6b 	bl	80086b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bdc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007bde:	e2a0      	b.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007be0:	2300      	movs	r3, #0
 8007be2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007be4:	e29d      	b.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007be6:	4b81      	ldr	r3, [pc, #516]	; (8007dec <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007bee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007bf2:	d107      	bne.n	8007c04 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007bf4:	f107 0318 	add.w	r3, r7, #24
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f000 fab1 	bl	8008160 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007bfe:	69bb      	ldr	r3, [r7, #24]
 8007c00:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8007c02:	e28e      	b.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007c04:	2300      	movs	r3, #0
 8007c06:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c08:	e28b      	b.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007c0a:	4b78      	ldr	r3, [pc, #480]	; (8007dec <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c16:	d107      	bne.n	8007c28 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c18:	f107 030c 	add.w	r3, r7, #12
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f000 fbf3 	bl	8008408 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007c26:	e27c      	b.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c2c:	e279      	b.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007c2e:	4b6f      	ldr	r3, [pc, #444]	; (8007dec <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c32:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007c36:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007c38:	4b6c      	ldr	r3, [pc, #432]	; (8007dec <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f003 0304 	and.w	r3, r3, #4
 8007c40:	2b04      	cmp	r3, #4
 8007c42:	d10c      	bne.n	8007c5e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8007c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d109      	bne.n	8007c5e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007c4a:	4b68      	ldr	r3, [pc, #416]	; (8007dec <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	08db      	lsrs	r3, r3, #3
 8007c50:	f003 0303 	and.w	r3, r3, #3
 8007c54:	4a66      	ldr	r2, [pc, #408]	; (8007df0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007c56:	fa22 f303 	lsr.w	r3, r2, r3
 8007c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c5c:	e01e      	b.n	8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007c5e:	4b63      	ldr	r3, [pc, #396]	; (8007dec <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c6a:	d106      	bne.n	8007c7a <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 8007c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c72:	d102      	bne.n	8007c7a <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007c74:	4b5f      	ldr	r3, [pc, #380]	; (8007df4 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8007c76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c78:	e010      	b.n	8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007c7a:	4b5c      	ldr	r3, [pc, #368]	; (8007dec <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c82:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c86:	d106      	bne.n	8007c96 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8007c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c8e:	d102      	bne.n	8007c96 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007c90:	4b59      	ldr	r3, [pc, #356]	; (8007df8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8007c92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c94:	e002      	b.n	8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007c96:	2300      	movs	r3, #0
 8007c98:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007c9a:	e242      	b.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8007c9c:	e241      	b.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007c9e:	4b57      	ldr	r3, [pc, #348]	; (8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8007ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ca2:	e23e      	b.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ca8:	e23b      	b.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cb0:	f040 80a6 	bne.w	8007e00 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8007cb4:	4b4d      	ldr	r3, [pc, #308]	; (8007dec <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007cb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cb8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007cbc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cc0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007cc4:	d054      	beq.n	8007d70 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8007cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cc8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ccc:	f200 808b 	bhi.w	8007de6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8007cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cd2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007cd6:	f000 8083 	beq.w	8007de0 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 8007cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cdc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007ce0:	f200 8081 	bhi.w	8007de6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8007ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007cea:	d02f      	beq.n	8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 8007cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007cf2:	d878      	bhi.n	8007de6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8007cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d004      	beq.n	8007d04 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8007cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d00:	d012      	beq.n	8007d28 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 8007d02:	e070      	b.n	8007de6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007d04:	4b39      	ldr	r3, [pc, #228]	; (8007dec <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d0c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d10:	d107      	bne.n	8007d22 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007d12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d16:	4618      	mov	r0, r3
 8007d18:	f000 fcca 	bl	80086b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007d20:	e1ff      	b.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007d22:	2300      	movs	r3, #0
 8007d24:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d26:	e1fc      	b.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007d28:	4b30      	ldr	r3, [pc, #192]	; (8007dec <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d34:	d107      	bne.n	8007d46 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d36:	f107 0318 	add.w	r3, r7, #24
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f000 fa10 	bl	8008160 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007d40:	69bb      	ldr	r3, [r7, #24]
 8007d42:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007d44:	e1ed      	b.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007d46:	2300      	movs	r3, #0
 8007d48:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d4a:	e1ea      	b.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007d4c:	4b27      	ldr	r3, [pc, #156]	; (8007dec <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d58:	d107      	bne.n	8007d6a <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d5a:	f107 030c 	add.w	r3, r7, #12
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f000 fb52 	bl	8008408 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007d68:	e1db      	b.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d6e:	e1d8      	b.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007d70:	4b1e      	ldr	r3, [pc, #120]	; (8007dec <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007d72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d74:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007d78:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007d7a:	4b1c      	ldr	r3, [pc, #112]	; (8007dec <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f003 0304 	and.w	r3, r3, #4
 8007d82:	2b04      	cmp	r3, #4
 8007d84:	d10c      	bne.n	8007da0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 8007d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d109      	bne.n	8007da0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007d8c:	4b17      	ldr	r3, [pc, #92]	; (8007dec <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	08db      	lsrs	r3, r3, #3
 8007d92:	f003 0303 	and.w	r3, r3, #3
 8007d96:	4a16      	ldr	r2, [pc, #88]	; (8007df0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007d98:	fa22 f303 	lsr.w	r3, r2, r3
 8007d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d9e:	e01e      	b.n	8007dde <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007da0:	4b12      	ldr	r3, [pc, #72]	; (8007dec <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007da8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dac:	d106      	bne.n	8007dbc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8007dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007db0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007db4:	d102      	bne.n	8007dbc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007db6:	4b0f      	ldr	r3, [pc, #60]	; (8007df4 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8007db8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007dba:	e010      	b.n	8007dde <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007dbc:	4b0b      	ldr	r3, [pc, #44]	; (8007dec <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007dc4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007dc8:	d106      	bne.n	8007dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8007dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dcc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007dd0:	d102      	bne.n	8007dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007dd2:	4b09      	ldr	r3, [pc, #36]	; (8007df8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8007dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007dd6:	e002      	b.n	8007dde <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007ddc:	e1a1      	b.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8007dde:	e1a0      	b.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007de0:	4b06      	ldr	r3, [pc, #24]	; (8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8007de2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007de4:	e19d      	b.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8007de6:	2300      	movs	r3, #0
 8007de8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007dea:	e19a      	b.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8007dec:	58024400 	.word	0x58024400
 8007df0:	03d09000 	.word	0x03d09000
 8007df4:	003d0900 	.word	0x003d0900
 8007df8:	017d7840 	.word	0x017d7840
 8007dfc:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007e06:	d173      	bne.n	8007ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8007e08:	4b9a      	ldr	r3, [pc, #616]	; (8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007e10:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e18:	d02f      	beq.n	8007e7a <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8007e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e20:	d863      	bhi.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8007e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d004      	beq.n	8007e32 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 8007e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e2e:	d012      	beq.n	8007e56 <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 8007e30:	e05b      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007e32:	4b90      	ldr	r3, [pc, #576]	; (8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e3e:	d107      	bne.n	8007e50 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e40:	f107 0318 	add.w	r3, r7, #24
 8007e44:	4618      	mov	r0, r3
 8007e46:	f000 f98b 	bl	8008160 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007e4a:	69bb      	ldr	r3, [r7, #24]
 8007e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007e4e:	e168      	b.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007e50:	2300      	movs	r3, #0
 8007e52:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e54:	e165      	b.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007e56:	4b87      	ldr	r3, [pc, #540]	; (8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e62:	d107      	bne.n	8007e74 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e64:	f107 030c 	add.w	r3, r7, #12
 8007e68:	4618      	mov	r0, r3
 8007e6a:	f000 facd 	bl	8008408 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007e72:	e156      	b.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007e74:	2300      	movs	r3, #0
 8007e76:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e78:	e153      	b.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007e7a:	4b7e      	ldr	r3, [pc, #504]	; (8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e7e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007e82:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007e84:	4b7b      	ldr	r3, [pc, #492]	; (8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f003 0304 	and.w	r3, r3, #4
 8007e8c:	2b04      	cmp	r3, #4
 8007e8e:	d10c      	bne.n	8007eaa <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 8007e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d109      	bne.n	8007eaa <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007e96:	4b77      	ldr	r3, [pc, #476]	; (8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	08db      	lsrs	r3, r3, #3
 8007e9c:	f003 0303 	and.w	r3, r3, #3
 8007ea0:	4a75      	ldr	r2, [pc, #468]	; (8008078 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8007ea2:	fa22 f303 	lsr.w	r3, r2, r3
 8007ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ea8:	e01e      	b.n	8007ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007eaa:	4b72      	ldr	r3, [pc, #456]	; (8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007eb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007eb6:	d106      	bne.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8007eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007eba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ebe:	d102      	bne.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007ec0:	4b6e      	ldr	r3, [pc, #440]	; (800807c <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8007ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ec4:	e010      	b.n	8007ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007ec6:	4b6b      	ldr	r3, [pc, #428]	; (8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ece:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ed2:	d106      	bne.n	8007ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8007ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ed6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007eda:	d102      	bne.n	8007ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007edc:	4b68      	ldr	r3, [pc, #416]	; (8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8007ede:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ee0:	e002      	b.n	8007ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007ee6:	e11c      	b.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8007ee8:	e11b      	b.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8007eea:	2300      	movs	r3, #0
 8007eec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007eee:	e118      	b.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ef6:	d133      	bne.n	8007f60 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8007ef8:	4b5e      	ldr	r3, [pc, #376]	; (8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007efa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007efc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f00:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d004      	beq.n	8007f12 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8007f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f0e:	d012      	beq.n	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 8007f10:	e023      	b.n	8007f5a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007f12:	4b58      	ldr	r3, [pc, #352]	; (8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f1e:	d107      	bne.n	8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007f20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f24:	4618      	mov	r0, r3
 8007f26:	f000 fbc3 	bl	80086b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007f2e:	e0f8      	b.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8007f30:	2300      	movs	r3, #0
 8007f32:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f34:	e0f5      	b.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007f36:	4b4f      	ldr	r3, [pc, #316]	; (8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f42:	d107      	bne.n	8007f54 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f44:	f107 0318 	add.w	r3, r7, #24
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f000 f909 	bl	8008160 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007f4e:	6a3b      	ldr	r3, [r7, #32]
 8007f50:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007f52:	e0e6      	b.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8007f54:	2300      	movs	r3, #0
 8007f56:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f58:	e0e3      	b.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f5e:	e0e0      	b.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007f66:	f040 808d 	bne.w	8008084 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8007f6a:	4b42      	ldr	r3, [pc, #264]	; (8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f6e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8007f72:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007f7a:	d06b      	beq.n	8008054 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 8007f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007f82:	d874      	bhi.n	800806e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8007f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f8a:	d056      	beq.n	800803a <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8007f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f92:	d86c      	bhi.n	800806e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8007f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f96:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007f9a:	d03b      	beq.n	8008014 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 8007f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f9e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007fa2:	d864      	bhi.n	800806e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8007fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fa6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007faa:	d021      	beq.n	8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8007fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fb2:	d85c      	bhi.n	800806e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8007fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d004      	beq.n	8007fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8007fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fbc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007fc0:	d004      	beq.n	8007fcc <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8007fc2:	e054      	b.n	800806e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007fc4:	f000 f8b6 	bl	8008134 <HAL_RCCEx_GetD3PCLK1Freq>
 8007fc8:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8007fca:	e0aa      	b.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007fcc:	4b29      	ldr	r3, [pc, #164]	; (8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007fd4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007fd8:	d107      	bne.n	8007fea <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007fda:	f107 0318 	add.w	r3, r7, #24
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f000 f8be 	bl	8008160 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007fe4:	69fb      	ldr	r3, [r7, #28]
 8007fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007fe8:	e09b      	b.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8007fea:	2300      	movs	r3, #0
 8007fec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007fee:	e098      	b.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007ff0:	4b20      	ldr	r3, [pc, #128]	; (8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ff8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ffc:	d107      	bne.n	800800e <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ffe:	f107 030c 	add.w	r3, r7, #12
 8008002:	4618      	mov	r0, r3
 8008004:	f000 fa00 	bl	8008408 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800800c:	e089      	b.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800800e:	2300      	movs	r3, #0
 8008010:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008012:	e086      	b.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008014:	4b17      	ldr	r3, [pc, #92]	; (8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f003 0304 	and.w	r3, r3, #4
 800801c:	2b04      	cmp	r3, #4
 800801e:	d109      	bne.n	8008034 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008020:	4b14      	ldr	r3, [pc, #80]	; (8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	08db      	lsrs	r3, r3, #3
 8008026:	f003 0303 	and.w	r3, r3, #3
 800802a:	4a13      	ldr	r2, [pc, #76]	; (8008078 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800802c:	fa22 f303 	lsr.w	r3, r2, r3
 8008030:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008032:	e076      	b.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008034:	2300      	movs	r3, #0
 8008036:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008038:	e073      	b.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800803a:	4b0e      	ldr	r3, [pc, #56]	; (8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008042:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008046:	d102      	bne.n	800804e <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 8008048:	4b0c      	ldr	r3, [pc, #48]	; (800807c <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800804a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800804c:	e069      	b.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800804e:	2300      	movs	r3, #0
 8008050:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008052:	e066      	b.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008054:	4b07      	ldr	r3, [pc, #28]	; (8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800805c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008060:	d102      	bne.n	8008068 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 8008062:	4b07      	ldr	r3, [pc, #28]	; (8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8008064:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008066:	e05c      	b.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008068:	2300      	movs	r3, #0
 800806a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800806c:	e059      	b.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800806e:	2300      	movs	r3, #0
 8008070:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008072:	e056      	b.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8008074:	58024400 	.word	0x58024400
 8008078:	03d09000 	.word	0x03d09000
 800807c:	003d0900 	.word	0x003d0900
 8008080:	017d7840 	.word	0x017d7840
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800808a:	d148      	bne.n	800811e <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800808c:	4b27      	ldr	r3, [pc, #156]	; (800812c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800808e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008090:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008094:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008098:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800809c:	d02a      	beq.n	80080f4 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 800809e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080a4:	d838      	bhi.n	8008118 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 80080a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d004      	beq.n	80080b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 80080ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80080b2:	d00d      	beq.n	80080d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 80080b4:	e030      	b.n	8008118 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80080b6:	4b1d      	ldr	r3, [pc, #116]	; (800812c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80080c2:	d102      	bne.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 80080c4:	4b1a      	ldr	r3, [pc, #104]	; (8008130 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80080c6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80080c8:	e02b      	b.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80080ca:	2300      	movs	r3, #0
 80080cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080ce:	e028      	b.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80080d0:	4b16      	ldr	r3, [pc, #88]	; (800812c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80080dc:	d107      	bne.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80080de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80080e2:	4618      	mov	r0, r3
 80080e4:	f000 fae4 	bl	80086b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80080e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80080ec:	e019      	b.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80080ee:	2300      	movs	r3, #0
 80080f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080f2:	e016      	b.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80080f4:	4b0d      	ldr	r3, [pc, #52]	; (800812c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80080fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008100:	d107      	bne.n	8008112 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008102:	f107 0318 	add.w	r3, r7, #24
 8008106:	4618      	mov	r0, r3
 8008108:	f000 f82a 	bl	8008160 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800810c:	69fb      	ldr	r3, [r7, #28]
 800810e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008110:	e007      	b.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008112:	2300      	movs	r3, #0
 8008114:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008116:	e004      	b.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8008118:	2300      	movs	r3, #0
 800811a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800811c:	e001      	b.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 800811e:	2300      	movs	r3, #0
 8008120:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8008122:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008124:	4618      	mov	r0, r3
 8008126:	3740      	adds	r7, #64	; 0x40
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}
 800812c:	58024400 	.word	0x58024400
 8008130:	017d7840 	.word	0x017d7840

08008134 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008138:	f7fe fb60 	bl	80067fc <HAL_RCC_GetHCLKFreq>
 800813c:	4602      	mov	r2, r0
 800813e:	4b06      	ldr	r3, [pc, #24]	; (8008158 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008140:	6a1b      	ldr	r3, [r3, #32]
 8008142:	091b      	lsrs	r3, r3, #4
 8008144:	f003 0307 	and.w	r3, r3, #7
 8008148:	4904      	ldr	r1, [pc, #16]	; (800815c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800814a:	5ccb      	ldrb	r3, [r1, r3]
 800814c:	f003 031f 	and.w	r3, r3, #31
 8008150:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008154:	4618      	mov	r0, r3
 8008156:	bd80      	pop	{r7, pc}
 8008158:	58024400 	.word	0x58024400
 800815c:	0800c118 	.word	0x0800c118

08008160 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8008160:	b480      	push	{r7}
 8008162:	b089      	sub	sp, #36	; 0x24
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008168:	4ba1      	ldr	r3, [pc, #644]	; (80083f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800816a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800816c:	f003 0303 	and.w	r3, r3, #3
 8008170:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8008172:	4b9f      	ldr	r3, [pc, #636]	; (80083f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008176:	0b1b      	lsrs	r3, r3, #12
 8008178:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800817c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800817e:	4b9c      	ldr	r3, [pc, #624]	; (80083f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008182:	091b      	lsrs	r3, r3, #4
 8008184:	f003 0301 	and.w	r3, r3, #1
 8008188:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800818a:	4b99      	ldr	r3, [pc, #612]	; (80083f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800818c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800818e:	08db      	lsrs	r3, r3, #3
 8008190:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008194:	693a      	ldr	r2, [r7, #16]
 8008196:	fb02 f303 	mul.w	r3, r2, r3
 800819a:	ee07 3a90 	vmov	s15, r3
 800819e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081a2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	f000 8111 	beq.w	80083d0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80081ae:	69bb      	ldr	r3, [r7, #24]
 80081b0:	2b02      	cmp	r3, #2
 80081b2:	f000 8083 	beq.w	80082bc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80081b6:	69bb      	ldr	r3, [r7, #24]
 80081b8:	2b02      	cmp	r3, #2
 80081ba:	f200 80a1 	bhi.w	8008300 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80081be:	69bb      	ldr	r3, [r7, #24]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d003      	beq.n	80081cc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80081c4:	69bb      	ldr	r3, [r7, #24]
 80081c6:	2b01      	cmp	r3, #1
 80081c8:	d056      	beq.n	8008278 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80081ca:	e099      	b.n	8008300 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80081cc:	4b88      	ldr	r3, [pc, #544]	; (80083f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f003 0320 	and.w	r3, r3, #32
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d02d      	beq.n	8008234 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80081d8:	4b85      	ldr	r3, [pc, #532]	; (80083f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	08db      	lsrs	r3, r3, #3
 80081de:	f003 0303 	and.w	r3, r3, #3
 80081e2:	4a84      	ldr	r2, [pc, #528]	; (80083f4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80081e4:	fa22 f303 	lsr.w	r3, r2, r3
 80081e8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	ee07 3a90 	vmov	s15, r3
 80081f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081f4:	697b      	ldr	r3, [r7, #20]
 80081f6:	ee07 3a90 	vmov	s15, r3
 80081fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008202:	4b7b      	ldr	r3, [pc, #492]	; (80083f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008206:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800820a:	ee07 3a90 	vmov	s15, r3
 800820e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008212:	ed97 6a03 	vldr	s12, [r7, #12]
 8008216:	eddf 5a78 	vldr	s11, [pc, #480]	; 80083f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800821a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800821e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008222:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008226:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800822a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800822e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008232:	e087      	b.n	8008344 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	ee07 3a90 	vmov	s15, r3
 800823a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800823e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80083fc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008242:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008246:	4b6a      	ldr	r3, [pc, #424]	; (80083f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800824a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800824e:	ee07 3a90 	vmov	s15, r3
 8008252:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008256:	ed97 6a03 	vldr	s12, [r7, #12]
 800825a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80083f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800825e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008262:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008266:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800826a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800826e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008272:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008276:	e065      	b.n	8008344 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008278:	697b      	ldr	r3, [r7, #20]
 800827a:	ee07 3a90 	vmov	s15, r3
 800827e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008282:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008400 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008286:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800828a:	4b59      	ldr	r3, [pc, #356]	; (80083f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800828c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800828e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008292:	ee07 3a90 	vmov	s15, r3
 8008296:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800829a:	ed97 6a03 	vldr	s12, [r7, #12]
 800829e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80083f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80082a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80082ba:	e043      	b.n	8008344 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80082bc:	697b      	ldr	r3, [r7, #20]
 80082be:	ee07 3a90 	vmov	s15, r3
 80082c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082c6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008404 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80082ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082ce:	4b48      	ldr	r3, [pc, #288]	; (80083f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082d6:	ee07 3a90 	vmov	s15, r3
 80082da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082de:	ed97 6a03 	vldr	s12, [r7, #12]
 80082e2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80083f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80082e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80082fe:	e021      	b.n	8008344 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	ee07 3a90 	vmov	s15, r3
 8008306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800830a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008400 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800830e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008312:	4b37      	ldr	r3, [pc, #220]	; (80083f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008316:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800831a:	ee07 3a90 	vmov	s15, r3
 800831e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008322:	ed97 6a03 	vldr	s12, [r7, #12]
 8008326:	eddf 5a34 	vldr	s11, [pc, #208]	; 80083f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800832a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800832e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008332:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008336:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800833a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800833e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008342:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008344:	4b2a      	ldr	r3, [pc, #168]	; (80083f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008348:	0a5b      	lsrs	r3, r3, #9
 800834a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800834e:	ee07 3a90 	vmov	s15, r3
 8008352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008356:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800835a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800835e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008362:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008366:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800836a:	ee17 2a90 	vmov	r2, s15
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008372:	4b1f      	ldr	r3, [pc, #124]	; (80083f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008376:	0c1b      	lsrs	r3, r3, #16
 8008378:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800837c:	ee07 3a90 	vmov	s15, r3
 8008380:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008384:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008388:	ee37 7a87 	vadd.f32	s14, s15, s14
 800838c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008390:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008394:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008398:	ee17 2a90 	vmov	r2, s15
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80083a0:	4b13      	ldr	r3, [pc, #76]	; (80083f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083a4:	0e1b      	lsrs	r3, r3, #24
 80083a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083aa:	ee07 3a90 	vmov	s15, r3
 80083ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80083b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80083ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80083be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083c6:	ee17 2a90 	vmov	r2, s15
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80083ce:	e008      	b.n	80083e2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2200      	movs	r2, #0
 80083d4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2200      	movs	r2, #0
 80083da:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2200      	movs	r2, #0
 80083e0:	609a      	str	r2, [r3, #8]
}
 80083e2:	bf00      	nop
 80083e4:	3724      	adds	r7, #36	; 0x24
 80083e6:	46bd      	mov	sp, r7
 80083e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ec:	4770      	bx	lr
 80083ee:	bf00      	nop
 80083f0:	58024400 	.word	0x58024400
 80083f4:	03d09000 	.word	0x03d09000
 80083f8:	46000000 	.word	0x46000000
 80083fc:	4c742400 	.word	0x4c742400
 8008400:	4a742400 	.word	0x4a742400
 8008404:	4bbebc20 	.word	0x4bbebc20

08008408 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008408:	b480      	push	{r7}
 800840a:	b089      	sub	sp, #36	; 0x24
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008410:	4ba1      	ldr	r3, [pc, #644]	; (8008698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008414:	f003 0303 	and.w	r3, r3, #3
 8008418:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800841a:	4b9f      	ldr	r3, [pc, #636]	; (8008698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800841c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800841e:	0d1b      	lsrs	r3, r3, #20
 8008420:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008424:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008426:	4b9c      	ldr	r3, [pc, #624]	; (8008698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800842a:	0a1b      	lsrs	r3, r3, #8
 800842c:	f003 0301 	and.w	r3, r3, #1
 8008430:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008432:	4b99      	ldr	r3, [pc, #612]	; (8008698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008436:	08db      	lsrs	r3, r3, #3
 8008438:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800843c:	693a      	ldr	r2, [r7, #16]
 800843e:	fb02 f303 	mul.w	r3, r2, r3
 8008442:	ee07 3a90 	vmov	s15, r3
 8008446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800844a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	2b00      	cmp	r3, #0
 8008452:	f000 8111 	beq.w	8008678 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008456:	69bb      	ldr	r3, [r7, #24]
 8008458:	2b02      	cmp	r3, #2
 800845a:	f000 8083 	beq.w	8008564 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800845e:	69bb      	ldr	r3, [r7, #24]
 8008460:	2b02      	cmp	r3, #2
 8008462:	f200 80a1 	bhi.w	80085a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008466:	69bb      	ldr	r3, [r7, #24]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d003      	beq.n	8008474 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800846c:	69bb      	ldr	r3, [r7, #24]
 800846e:	2b01      	cmp	r3, #1
 8008470:	d056      	beq.n	8008520 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008472:	e099      	b.n	80085a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008474:	4b88      	ldr	r3, [pc, #544]	; (8008698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f003 0320 	and.w	r3, r3, #32
 800847c:	2b00      	cmp	r3, #0
 800847e:	d02d      	beq.n	80084dc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008480:	4b85      	ldr	r3, [pc, #532]	; (8008698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	08db      	lsrs	r3, r3, #3
 8008486:	f003 0303 	and.w	r3, r3, #3
 800848a:	4a84      	ldr	r2, [pc, #528]	; (800869c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800848c:	fa22 f303 	lsr.w	r3, r2, r3
 8008490:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	ee07 3a90 	vmov	s15, r3
 8008498:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	ee07 3a90 	vmov	s15, r3
 80084a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084aa:	4b7b      	ldr	r3, [pc, #492]	; (8008698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084b2:	ee07 3a90 	vmov	s15, r3
 80084b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80084be:	eddf 5a78 	vldr	s11, [pc, #480]	; 80086a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80084c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80084ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084d6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80084da:	e087      	b.n	80085ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80084dc:	697b      	ldr	r3, [r7, #20]
 80084de:	ee07 3a90 	vmov	s15, r3
 80084e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084e6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80086a4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80084ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084ee:	4b6a      	ldr	r3, [pc, #424]	; (8008698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084f6:	ee07 3a90 	vmov	s15, r3
 80084fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8008502:	eddf 5a67 	vldr	s11, [pc, #412]	; 80086a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008506:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800850a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800850e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008512:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008516:	ee67 7a27 	vmul.f32	s15, s14, s15
 800851a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800851e:	e065      	b.n	80085ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008520:	697b      	ldr	r3, [r7, #20]
 8008522:	ee07 3a90 	vmov	s15, r3
 8008526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800852a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80086a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800852e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008532:	4b59      	ldr	r3, [pc, #356]	; (8008698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008536:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800853a:	ee07 3a90 	vmov	s15, r3
 800853e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008542:	ed97 6a03 	vldr	s12, [r7, #12]
 8008546:	eddf 5a56 	vldr	s11, [pc, #344]	; 80086a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800854a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800854e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008552:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008556:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800855a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800855e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008562:	e043      	b.n	80085ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	ee07 3a90 	vmov	s15, r3
 800856a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800856e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80086ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008572:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008576:	4b48      	ldr	r3, [pc, #288]	; (8008698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800857a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800857e:	ee07 3a90 	vmov	s15, r3
 8008582:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008586:	ed97 6a03 	vldr	s12, [r7, #12]
 800858a:	eddf 5a45 	vldr	s11, [pc, #276]	; 80086a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800858e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008592:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008596:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800859a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800859e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80085a6:	e021      	b.n	80085ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	ee07 3a90 	vmov	s15, r3
 80085ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085b2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80086a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80085b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085ba:	4b37      	ldr	r3, [pc, #220]	; (8008698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085c2:	ee07 3a90 	vmov	s15, r3
 80085c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80085ce:	eddf 5a34 	vldr	s11, [pc, #208]	; 80086a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80085d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80085ea:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80085ec:	4b2a      	ldr	r3, [pc, #168]	; (8008698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085f0:	0a5b      	lsrs	r3, r3, #9
 80085f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085f6:	ee07 3a90 	vmov	s15, r3
 80085fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008602:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008606:	edd7 6a07 	vldr	s13, [r7, #28]
 800860a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800860e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008612:	ee17 2a90 	vmov	r2, s15
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800861a:	4b1f      	ldr	r3, [pc, #124]	; (8008698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800861c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800861e:	0c1b      	lsrs	r3, r3, #16
 8008620:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008624:	ee07 3a90 	vmov	s15, r3
 8008628:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800862c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008630:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008634:	edd7 6a07 	vldr	s13, [r7, #28]
 8008638:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800863c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008640:	ee17 2a90 	vmov	r2, s15
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008648:	4b13      	ldr	r3, [pc, #76]	; (8008698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800864a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800864c:	0e1b      	lsrs	r3, r3, #24
 800864e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008652:	ee07 3a90 	vmov	s15, r3
 8008656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800865a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800865e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008662:	edd7 6a07 	vldr	s13, [r7, #28]
 8008666:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800866a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800866e:	ee17 2a90 	vmov	r2, s15
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008676:	e008      	b.n	800868a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2200      	movs	r2, #0
 800867c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2200      	movs	r2, #0
 8008682:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2200      	movs	r2, #0
 8008688:	609a      	str	r2, [r3, #8]
}
 800868a:	bf00      	nop
 800868c:	3724      	adds	r7, #36	; 0x24
 800868e:	46bd      	mov	sp, r7
 8008690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008694:	4770      	bx	lr
 8008696:	bf00      	nop
 8008698:	58024400 	.word	0x58024400
 800869c:	03d09000 	.word	0x03d09000
 80086a0:	46000000 	.word	0x46000000
 80086a4:	4c742400 	.word	0x4c742400
 80086a8:	4a742400 	.word	0x4a742400
 80086ac:	4bbebc20 	.word	0x4bbebc20

080086b0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b089      	sub	sp, #36	; 0x24
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80086b8:	4ba0      	ldr	r3, [pc, #640]	; (800893c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80086ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086bc:	f003 0303 	and.w	r3, r3, #3
 80086c0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80086c2:	4b9e      	ldr	r3, [pc, #632]	; (800893c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80086c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086c6:	091b      	lsrs	r3, r3, #4
 80086c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80086cc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80086ce:	4b9b      	ldr	r3, [pc, #620]	; (800893c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80086d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086d2:	f003 0301 	and.w	r3, r3, #1
 80086d6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80086d8:	4b98      	ldr	r3, [pc, #608]	; (800893c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80086da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086dc:	08db      	lsrs	r3, r3, #3
 80086de:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80086e2:	693a      	ldr	r2, [r7, #16]
 80086e4:	fb02 f303 	mul.w	r3, r2, r3
 80086e8:	ee07 3a90 	vmov	s15, r3
 80086ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086f0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	f000 8111 	beq.w	800891e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80086fc:	69bb      	ldr	r3, [r7, #24]
 80086fe:	2b02      	cmp	r3, #2
 8008700:	f000 8083 	beq.w	800880a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008704:	69bb      	ldr	r3, [r7, #24]
 8008706:	2b02      	cmp	r3, #2
 8008708:	f200 80a1 	bhi.w	800884e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800870c:	69bb      	ldr	r3, [r7, #24]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d003      	beq.n	800871a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008712:	69bb      	ldr	r3, [r7, #24]
 8008714:	2b01      	cmp	r3, #1
 8008716:	d056      	beq.n	80087c6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008718:	e099      	b.n	800884e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800871a:	4b88      	ldr	r3, [pc, #544]	; (800893c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f003 0320 	and.w	r3, r3, #32
 8008722:	2b00      	cmp	r3, #0
 8008724:	d02d      	beq.n	8008782 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008726:	4b85      	ldr	r3, [pc, #532]	; (800893c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	08db      	lsrs	r3, r3, #3
 800872c:	f003 0303 	and.w	r3, r3, #3
 8008730:	4a83      	ldr	r2, [pc, #524]	; (8008940 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008732:	fa22 f303 	lsr.w	r3, r2, r3
 8008736:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	ee07 3a90 	vmov	s15, r3
 800873e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	ee07 3a90 	vmov	s15, r3
 8008748:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800874c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008750:	4b7a      	ldr	r3, [pc, #488]	; (800893c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008754:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008758:	ee07 3a90 	vmov	s15, r3
 800875c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008760:	ed97 6a03 	vldr	s12, [r7, #12]
 8008764:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008944 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008768:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800876c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008770:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008774:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008778:	ee67 7a27 	vmul.f32	s15, s14, s15
 800877c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008780:	e087      	b.n	8008892 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	ee07 3a90 	vmov	s15, r3
 8008788:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800878c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008948 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008790:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008794:	4b69      	ldr	r3, [pc, #420]	; (800893c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008798:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800879c:	ee07 3a90 	vmov	s15, r3
 80087a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087a4:	ed97 6a03 	vldr	s12, [r7, #12]
 80087a8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008944 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80087ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80087b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087c0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80087c4:	e065      	b.n	8008892 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	ee07 3a90 	vmov	s15, r3
 80087cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087d0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800894c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80087d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087d8:	4b58      	ldr	r3, [pc, #352]	; (800893c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80087da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087e0:	ee07 3a90 	vmov	s15, r3
 80087e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087e8:	ed97 6a03 	vldr	s12, [r7, #12]
 80087ec:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008944 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80087f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80087fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008800:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008804:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008808:	e043      	b.n	8008892 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	ee07 3a90 	vmov	s15, r3
 8008810:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008814:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008950 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008818:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800881c:	4b47      	ldr	r3, [pc, #284]	; (800893c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800881e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008820:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008824:	ee07 3a90 	vmov	s15, r3
 8008828:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800882c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008830:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008944 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008834:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008838:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800883c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008840:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008844:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008848:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800884c:	e021      	b.n	8008892 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800884e:	697b      	ldr	r3, [r7, #20]
 8008850:	ee07 3a90 	vmov	s15, r3
 8008854:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008858:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8008948 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800885c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008860:	4b36      	ldr	r3, [pc, #216]	; (800893c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008864:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008868:	ee07 3a90 	vmov	s15, r3
 800886c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008870:	ed97 6a03 	vldr	s12, [r7, #12]
 8008874:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008944 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008878:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800887c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008880:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008884:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008888:	ee67 7a27 	vmul.f32	s15, s14, s15
 800888c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008890:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8008892:	4b2a      	ldr	r3, [pc, #168]	; (800893c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008896:	0a5b      	lsrs	r3, r3, #9
 8008898:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800889c:	ee07 3a90 	vmov	s15, r3
 80088a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80088a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80088ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80088b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80088b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088b8:	ee17 2a90 	vmov	r2, s15
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80088c0:	4b1e      	ldr	r3, [pc, #120]	; (800893c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80088c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088c4:	0c1b      	lsrs	r3, r3, #16
 80088c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088ca:	ee07 3a90 	vmov	s15, r3
 80088ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80088d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80088da:	edd7 6a07 	vldr	s13, [r7, #28]
 80088de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80088e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088e6:	ee17 2a90 	vmov	r2, s15
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80088ee:	4b13      	ldr	r3, [pc, #76]	; (800893c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80088f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088f2:	0e1b      	lsrs	r3, r3, #24
 80088f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088f8:	ee07 3a90 	vmov	s15, r3
 80088fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008900:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008904:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008908:	edd7 6a07 	vldr	s13, [r7, #28]
 800890c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008910:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008914:	ee17 2a90 	vmov	r2, s15
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800891c:	e008      	b.n	8008930 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2200      	movs	r2, #0
 8008922:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2200      	movs	r2, #0
 8008928:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2200      	movs	r2, #0
 800892e:	609a      	str	r2, [r3, #8]
}
 8008930:	bf00      	nop
 8008932:	3724      	adds	r7, #36	; 0x24
 8008934:	46bd      	mov	sp, r7
 8008936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893a:	4770      	bx	lr
 800893c:	58024400 	.word	0x58024400
 8008940:	03d09000 	.word	0x03d09000
 8008944:	46000000 	.word	0x46000000
 8008948:	4c742400 	.word	0x4c742400
 800894c:	4a742400 	.word	0x4a742400
 8008950:	4bbebc20 	.word	0x4bbebc20

08008954 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b084      	sub	sp, #16
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
 800895c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800895e:	2300      	movs	r3, #0
 8008960:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008962:	4b53      	ldr	r3, [pc, #332]	; (8008ab0 <RCCEx_PLL2_Config+0x15c>)
 8008964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008966:	f003 0303 	and.w	r3, r3, #3
 800896a:	2b03      	cmp	r3, #3
 800896c:	d101      	bne.n	8008972 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800896e:	2301      	movs	r3, #1
 8008970:	e099      	b.n	8008aa6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008972:	4b4f      	ldr	r3, [pc, #316]	; (8008ab0 <RCCEx_PLL2_Config+0x15c>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	4a4e      	ldr	r2, [pc, #312]	; (8008ab0 <RCCEx_PLL2_Config+0x15c>)
 8008978:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800897c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800897e:	f7f9 fcef 	bl	8002360 <HAL_GetTick>
 8008982:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008984:	e008      	b.n	8008998 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008986:	f7f9 fceb 	bl	8002360 <HAL_GetTick>
 800898a:	4602      	mov	r2, r0
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	1ad3      	subs	r3, r2, r3
 8008990:	2b02      	cmp	r3, #2
 8008992:	d901      	bls.n	8008998 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008994:	2303      	movs	r3, #3
 8008996:	e086      	b.n	8008aa6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008998:	4b45      	ldr	r3, [pc, #276]	; (8008ab0 <RCCEx_PLL2_Config+0x15c>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d1f0      	bne.n	8008986 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80089a4:	4b42      	ldr	r3, [pc, #264]	; (8008ab0 <RCCEx_PLL2_Config+0x15c>)
 80089a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089a8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	031b      	lsls	r3, r3, #12
 80089b2:	493f      	ldr	r1, [pc, #252]	; (8008ab0 <RCCEx_PLL2_Config+0x15c>)
 80089b4:	4313      	orrs	r3, r2
 80089b6:	628b      	str	r3, [r1, #40]	; 0x28
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	685b      	ldr	r3, [r3, #4]
 80089bc:	3b01      	subs	r3, #1
 80089be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	689b      	ldr	r3, [r3, #8]
 80089c6:	3b01      	subs	r3, #1
 80089c8:	025b      	lsls	r3, r3, #9
 80089ca:	b29b      	uxth	r3, r3
 80089cc:	431a      	orrs	r2, r3
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	68db      	ldr	r3, [r3, #12]
 80089d2:	3b01      	subs	r3, #1
 80089d4:	041b      	lsls	r3, r3, #16
 80089d6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80089da:	431a      	orrs	r2, r3
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	691b      	ldr	r3, [r3, #16]
 80089e0:	3b01      	subs	r3, #1
 80089e2:	061b      	lsls	r3, r3, #24
 80089e4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80089e8:	4931      	ldr	r1, [pc, #196]	; (8008ab0 <RCCEx_PLL2_Config+0x15c>)
 80089ea:	4313      	orrs	r3, r2
 80089ec:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80089ee:	4b30      	ldr	r3, [pc, #192]	; (8008ab0 <RCCEx_PLL2_Config+0x15c>)
 80089f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089f2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	695b      	ldr	r3, [r3, #20]
 80089fa:	492d      	ldr	r1, [pc, #180]	; (8008ab0 <RCCEx_PLL2_Config+0x15c>)
 80089fc:	4313      	orrs	r3, r2
 80089fe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008a00:	4b2b      	ldr	r3, [pc, #172]	; (8008ab0 <RCCEx_PLL2_Config+0x15c>)
 8008a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a04:	f023 0220 	bic.w	r2, r3, #32
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	699b      	ldr	r3, [r3, #24]
 8008a0c:	4928      	ldr	r1, [pc, #160]	; (8008ab0 <RCCEx_PLL2_Config+0x15c>)
 8008a0e:	4313      	orrs	r3, r2
 8008a10:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008a12:	4b27      	ldr	r3, [pc, #156]	; (8008ab0 <RCCEx_PLL2_Config+0x15c>)
 8008a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a16:	4a26      	ldr	r2, [pc, #152]	; (8008ab0 <RCCEx_PLL2_Config+0x15c>)
 8008a18:	f023 0310 	bic.w	r3, r3, #16
 8008a1c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008a1e:	4b24      	ldr	r3, [pc, #144]	; (8008ab0 <RCCEx_PLL2_Config+0x15c>)
 8008a20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a22:	4b24      	ldr	r3, [pc, #144]	; (8008ab4 <RCCEx_PLL2_Config+0x160>)
 8008a24:	4013      	ands	r3, r2
 8008a26:	687a      	ldr	r2, [r7, #4]
 8008a28:	69d2      	ldr	r2, [r2, #28]
 8008a2a:	00d2      	lsls	r2, r2, #3
 8008a2c:	4920      	ldr	r1, [pc, #128]	; (8008ab0 <RCCEx_PLL2_Config+0x15c>)
 8008a2e:	4313      	orrs	r3, r2
 8008a30:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008a32:	4b1f      	ldr	r3, [pc, #124]	; (8008ab0 <RCCEx_PLL2_Config+0x15c>)
 8008a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a36:	4a1e      	ldr	r2, [pc, #120]	; (8008ab0 <RCCEx_PLL2_Config+0x15c>)
 8008a38:	f043 0310 	orr.w	r3, r3, #16
 8008a3c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d106      	bne.n	8008a52 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008a44:	4b1a      	ldr	r3, [pc, #104]	; (8008ab0 <RCCEx_PLL2_Config+0x15c>)
 8008a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a48:	4a19      	ldr	r2, [pc, #100]	; (8008ab0 <RCCEx_PLL2_Config+0x15c>)
 8008a4a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008a4e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008a50:	e00f      	b.n	8008a72 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	2b01      	cmp	r3, #1
 8008a56:	d106      	bne.n	8008a66 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008a58:	4b15      	ldr	r3, [pc, #84]	; (8008ab0 <RCCEx_PLL2_Config+0x15c>)
 8008a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a5c:	4a14      	ldr	r2, [pc, #80]	; (8008ab0 <RCCEx_PLL2_Config+0x15c>)
 8008a5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008a62:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008a64:	e005      	b.n	8008a72 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008a66:	4b12      	ldr	r3, [pc, #72]	; (8008ab0 <RCCEx_PLL2_Config+0x15c>)
 8008a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a6a:	4a11      	ldr	r2, [pc, #68]	; (8008ab0 <RCCEx_PLL2_Config+0x15c>)
 8008a6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008a70:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008a72:	4b0f      	ldr	r3, [pc, #60]	; (8008ab0 <RCCEx_PLL2_Config+0x15c>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4a0e      	ldr	r2, [pc, #56]	; (8008ab0 <RCCEx_PLL2_Config+0x15c>)
 8008a78:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008a7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a7e:	f7f9 fc6f 	bl	8002360 <HAL_GetTick>
 8008a82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008a84:	e008      	b.n	8008a98 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008a86:	f7f9 fc6b 	bl	8002360 <HAL_GetTick>
 8008a8a:	4602      	mov	r2, r0
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	1ad3      	subs	r3, r2, r3
 8008a90:	2b02      	cmp	r3, #2
 8008a92:	d901      	bls.n	8008a98 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008a94:	2303      	movs	r3, #3
 8008a96:	e006      	b.n	8008aa6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008a98:	4b05      	ldr	r3, [pc, #20]	; (8008ab0 <RCCEx_PLL2_Config+0x15c>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d0f0      	beq.n	8008a86 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	3710      	adds	r7, #16
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}
 8008aae:	bf00      	nop
 8008ab0:	58024400 	.word	0x58024400
 8008ab4:	ffff0007 	.word	0xffff0007

08008ab8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b084      	sub	sp, #16
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
 8008ac0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008ac6:	4b53      	ldr	r3, [pc, #332]	; (8008c14 <RCCEx_PLL3_Config+0x15c>)
 8008ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aca:	f003 0303 	and.w	r3, r3, #3
 8008ace:	2b03      	cmp	r3, #3
 8008ad0:	d101      	bne.n	8008ad6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	e099      	b.n	8008c0a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008ad6:	4b4f      	ldr	r3, [pc, #316]	; (8008c14 <RCCEx_PLL3_Config+0x15c>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	4a4e      	ldr	r2, [pc, #312]	; (8008c14 <RCCEx_PLL3_Config+0x15c>)
 8008adc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008ae0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ae2:	f7f9 fc3d 	bl	8002360 <HAL_GetTick>
 8008ae6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008ae8:	e008      	b.n	8008afc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008aea:	f7f9 fc39 	bl	8002360 <HAL_GetTick>
 8008aee:	4602      	mov	r2, r0
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	1ad3      	subs	r3, r2, r3
 8008af4:	2b02      	cmp	r3, #2
 8008af6:	d901      	bls.n	8008afc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008af8:	2303      	movs	r3, #3
 8008afa:	e086      	b.n	8008c0a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008afc:	4b45      	ldr	r3, [pc, #276]	; (8008c14 <RCCEx_PLL3_Config+0x15c>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d1f0      	bne.n	8008aea <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008b08:	4b42      	ldr	r3, [pc, #264]	; (8008c14 <RCCEx_PLL3_Config+0x15c>)
 8008b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b0c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	051b      	lsls	r3, r3, #20
 8008b16:	493f      	ldr	r1, [pc, #252]	; (8008c14 <RCCEx_PLL3_Config+0x15c>)
 8008b18:	4313      	orrs	r3, r2
 8008b1a:	628b      	str	r3, [r1, #40]	; 0x28
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	685b      	ldr	r3, [r3, #4]
 8008b20:	3b01      	subs	r3, #1
 8008b22:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	689b      	ldr	r3, [r3, #8]
 8008b2a:	3b01      	subs	r3, #1
 8008b2c:	025b      	lsls	r3, r3, #9
 8008b2e:	b29b      	uxth	r3, r3
 8008b30:	431a      	orrs	r2, r3
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	68db      	ldr	r3, [r3, #12]
 8008b36:	3b01      	subs	r3, #1
 8008b38:	041b      	lsls	r3, r3, #16
 8008b3a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008b3e:	431a      	orrs	r2, r3
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	691b      	ldr	r3, [r3, #16]
 8008b44:	3b01      	subs	r3, #1
 8008b46:	061b      	lsls	r3, r3, #24
 8008b48:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008b4c:	4931      	ldr	r1, [pc, #196]	; (8008c14 <RCCEx_PLL3_Config+0x15c>)
 8008b4e:	4313      	orrs	r3, r2
 8008b50:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008b52:	4b30      	ldr	r3, [pc, #192]	; (8008c14 <RCCEx_PLL3_Config+0x15c>)
 8008b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b56:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	695b      	ldr	r3, [r3, #20]
 8008b5e:	492d      	ldr	r1, [pc, #180]	; (8008c14 <RCCEx_PLL3_Config+0x15c>)
 8008b60:	4313      	orrs	r3, r2
 8008b62:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008b64:	4b2b      	ldr	r3, [pc, #172]	; (8008c14 <RCCEx_PLL3_Config+0x15c>)
 8008b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b68:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	699b      	ldr	r3, [r3, #24]
 8008b70:	4928      	ldr	r1, [pc, #160]	; (8008c14 <RCCEx_PLL3_Config+0x15c>)
 8008b72:	4313      	orrs	r3, r2
 8008b74:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008b76:	4b27      	ldr	r3, [pc, #156]	; (8008c14 <RCCEx_PLL3_Config+0x15c>)
 8008b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b7a:	4a26      	ldr	r2, [pc, #152]	; (8008c14 <RCCEx_PLL3_Config+0x15c>)
 8008b7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b80:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008b82:	4b24      	ldr	r3, [pc, #144]	; (8008c14 <RCCEx_PLL3_Config+0x15c>)
 8008b84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b86:	4b24      	ldr	r3, [pc, #144]	; (8008c18 <RCCEx_PLL3_Config+0x160>)
 8008b88:	4013      	ands	r3, r2
 8008b8a:	687a      	ldr	r2, [r7, #4]
 8008b8c:	69d2      	ldr	r2, [r2, #28]
 8008b8e:	00d2      	lsls	r2, r2, #3
 8008b90:	4920      	ldr	r1, [pc, #128]	; (8008c14 <RCCEx_PLL3_Config+0x15c>)
 8008b92:	4313      	orrs	r3, r2
 8008b94:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008b96:	4b1f      	ldr	r3, [pc, #124]	; (8008c14 <RCCEx_PLL3_Config+0x15c>)
 8008b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b9a:	4a1e      	ldr	r2, [pc, #120]	; (8008c14 <RCCEx_PLL3_Config+0x15c>)
 8008b9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ba0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d106      	bne.n	8008bb6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008ba8:	4b1a      	ldr	r3, [pc, #104]	; (8008c14 <RCCEx_PLL3_Config+0x15c>)
 8008baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bac:	4a19      	ldr	r2, [pc, #100]	; (8008c14 <RCCEx_PLL3_Config+0x15c>)
 8008bae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008bb2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008bb4:	e00f      	b.n	8008bd6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	2b01      	cmp	r3, #1
 8008bba:	d106      	bne.n	8008bca <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008bbc:	4b15      	ldr	r3, [pc, #84]	; (8008c14 <RCCEx_PLL3_Config+0x15c>)
 8008bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bc0:	4a14      	ldr	r2, [pc, #80]	; (8008c14 <RCCEx_PLL3_Config+0x15c>)
 8008bc2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008bc6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008bc8:	e005      	b.n	8008bd6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008bca:	4b12      	ldr	r3, [pc, #72]	; (8008c14 <RCCEx_PLL3_Config+0x15c>)
 8008bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bce:	4a11      	ldr	r2, [pc, #68]	; (8008c14 <RCCEx_PLL3_Config+0x15c>)
 8008bd0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008bd4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008bd6:	4b0f      	ldr	r3, [pc, #60]	; (8008c14 <RCCEx_PLL3_Config+0x15c>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	4a0e      	ldr	r2, [pc, #56]	; (8008c14 <RCCEx_PLL3_Config+0x15c>)
 8008bdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008be0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008be2:	f7f9 fbbd 	bl	8002360 <HAL_GetTick>
 8008be6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008be8:	e008      	b.n	8008bfc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008bea:	f7f9 fbb9 	bl	8002360 <HAL_GetTick>
 8008bee:	4602      	mov	r2, r0
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	1ad3      	subs	r3, r2, r3
 8008bf4:	2b02      	cmp	r3, #2
 8008bf6:	d901      	bls.n	8008bfc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008bf8:	2303      	movs	r3, #3
 8008bfa:	e006      	b.n	8008c0a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008bfc:	4b05      	ldr	r3, [pc, #20]	; (8008c14 <RCCEx_PLL3_Config+0x15c>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d0f0      	beq.n	8008bea <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	3710      	adds	r7, #16
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}
 8008c12:	bf00      	nop
 8008c14:	58024400 	.word	0x58024400
 8008c18:	ffff0007 	.word	0xffff0007

08008c1c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b08a      	sub	sp, #40	; 0x28
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d101      	bne.n	8008c2e <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	e224      	b.n	8009078 <HAL_SAI_Init+0x45c>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008c34:	2b01      	cmp	r3, #1
 8008c36:	d113      	bne.n	8008c60 <HAL_SAI_Init+0x44>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	4aa1      	ldr	r2, [pc, #644]	; (8008ec4 <HAL_SAI_Init+0x2a8>)
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	d004      	beq.n	8008c4c <HAL_SAI_Init+0x30>
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	4aa0      	ldr	r2, [pc, #640]	; (8008ec8 <HAL_SAI_Init+0x2ac>)
 8008c48:	4293      	cmp	r3, r2
 8008c4a:	d107      	bne.n	8008c5c <HAL_SAI_Init+0x40>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8008c50:	2b01      	cmp	r3, #1
 8008c52:	d103      	bne.n	8008c5c <HAL_SAI_Init+0x40>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d001      	beq.n	8008c60 <HAL_SAI_Init+0x44>
    {
      return HAL_ERROR;
 8008c5c:	2301      	movs	r3, #1
 8008c5e:	e20b      	b.n	8009078 <HAL_SAI_Init+0x45c>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	4a97      	ldr	r2, [pc, #604]	; (8008ec4 <HAL_SAI_Init+0x2a8>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d004      	beq.n	8008c74 <HAL_SAI_Init+0x58>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	4a97      	ldr	r2, [pc, #604]	; (8008ecc <HAL_SAI_Init+0x2b0>)
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d102      	bne.n	8008c7a <HAL_SAI_Init+0x5e>
  {
    SaiBaseAddress = SAI1;
 8008c74:	4b96      	ldr	r3, [pc, #600]	; (8008ed0 <HAL_SAI_Init+0x2b4>)
 8008c76:	61bb      	str	r3, [r7, #24]
 8008c78:	e00e      	b.n	8008c98 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI3;
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	4a92      	ldr	r2, [pc, #584]	; (8008ec8 <HAL_SAI_Init+0x2ac>)
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d004      	beq.n	8008c8e <HAL_SAI_Init+0x72>
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	4a92      	ldr	r2, [pc, #584]	; (8008ed4 <HAL_SAI_Init+0x2b8>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d102      	bne.n	8008c94 <HAL_SAI_Init+0x78>
  {
    SaiBaseAddress = SAI4;
 8008c8e:	4b92      	ldr	r3, [pc, #584]	; (8008ed8 <HAL_SAI_Init+0x2bc>)
 8008c90:	61bb      	str	r3, [r7, #24]
 8008c92:	e001      	b.n	8008c98 <HAL_SAI_Init+0x7c>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8008c94:	2301      	movs	r3, #1
 8008c96:	e1ef      	b.n	8009078 <HAL_SAI_Init+0x45c>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8008c9e:	b2db      	uxtb	r3, r3
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d125      	bne.n	8008cf0 <HAL_SAI_Init+0xd4>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    /* Reset callback pointers to the weak predefined callbacks */
    hsai->RxCpltCallback     = HAL_SAI_RxCpltCallback;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	4a8b      	ldr	r2, [pc, #556]	; (8008edc <HAL_SAI_Init+0x2c0>)
 8008cb0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    hsai->RxHalfCpltCallback = HAL_SAI_RxHalfCpltCallback;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	4a8a      	ldr	r2, [pc, #552]	; (8008ee0 <HAL_SAI_Init+0x2c4>)
 8008cb8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    hsai->TxCpltCallback     = HAL_SAI_TxCpltCallback;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	4a89      	ldr	r2, [pc, #548]	; (8008ee4 <HAL_SAI_Init+0x2c8>)
 8008cc0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    hsai->TxHalfCpltCallback = HAL_SAI_TxHalfCpltCallback;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	4a88      	ldr	r2, [pc, #544]	; (8008ee8 <HAL_SAI_Init+0x2cc>)
 8008cc8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    hsai->ErrorCallback      = HAL_SAI_ErrorCallback;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	4a87      	ldr	r2, [pc, #540]	; (8008eec <HAL_SAI_Init+0x2d0>)
 8008cd0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    if (hsai->MspInitCallback == NULL)
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d103      	bne.n	8008ce6 <HAL_SAI_Init+0xca>
    {
      hsai->MspInitCallback = HAL_SAI_MspInit;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	4a83      	ldr	r2, [pc, #524]	; (8008ef0 <HAL_SAI_Init+0x2d4>)
 8008ce2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    }
    hsai->MspInitCallback(hsai);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	4798      	blx	r3
    HAL_SAI_MspInit(hsai);
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f000 fb5f 	bl	80093b4 <SAI_Disable>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d001      	beq.n	8008d00 <HAL_SAI_Init+0xe4>
  {
    return HAL_ERROR;
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	e1bb      	b.n	8009078 <HAL_SAI_Init+0x45c>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2202      	movs	r2, #2
 8008d04:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	68db      	ldr	r3, [r3, #12]
 8008d0c:	2b02      	cmp	r3, #2
 8008d0e:	d00c      	beq.n	8008d2a <HAL_SAI_Init+0x10e>
 8008d10:	2b02      	cmp	r3, #2
 8008d12:	d80d      	bhi.n	8008d30 <HAL_SAI_Init+0x114>
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d002      	beq.n	8008d1e <HAL_SAI_Init+0x102>
 8008d18:	2b01      	cmp	r3, #1
 8008d1a:	d003      	beq.n	8008d24 <HAL_SAI_Init+0x108>
 8008d1c:	e008      	b.n	8008d30 <HAL_SAI_Init+0x114>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8008d22:	e008      	b.n	8008d36 <HAL_SAI_Init+0x11a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8008d24:	2310      	movs	r3, #16
 8008d26:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8008d28:	e005      	b.n	8008d36 <HAL_SAI_Init+0x11a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8008d2a:	2320      	movs	r3, #32
 8008d2c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8008d2e:	e002      	b.n	8008d36 <HAL_SAI_Init+0x11a>
    default:
      tmpregisterGCR = 0;
 8008d30:	2300      	movs	r3, #0
 8008d32:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8008d34:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	689b      	ldr	r3, [r3, #8]
 8008d3a:	2b05      	cmp	r3, #5
 8008d3c:	d821      	bhi.n	8008d82 <HAL_SAI_Init+0x166>
 8008d3e:	a201      	add	r2, pc, #4	; (adr r2, 8008d44 <HAL_SAI_Init+0x128>)
 8008d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d44:	08008d5d 	.word	0x08008d5d
 8008d48:	08008d63 	.word	0x08008d63
 8008d4c:	08008d6b 	.word	0x08008d6b
 8008d50:	08008d83 	.word	0x08008d83
 8008d54:	08008d83 	.word	0x08008d83
 8008d58:	08008d73 	.word	0x08008d73
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	61fb      	str	r3, [r7, #28]
      break;
 8008d60:	e012      	b.n	8008d88 <HAL_SAI_Init+0x16c>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8008d62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d66:	61fb      	str	r3, [r7, #28]
      break;
 8008d68:	e00e      	b.n	8008d88 <HAL_SAI_Init+0x16c>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008d6a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008d6e:	61fb      	str	r3, [r7, #28]
      break;
 8008d70:	e00a      	b.n	8008d88 <HAL_SAI_Init+0x16c>
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
      break;
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008d72:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008d76:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8008d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d7a:	f043 0303 	orr.w	r3, r3, #3
 8008d7e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8008d80:	e002      	b.n	8008d88 <HAL_SAI_Init+0x16c>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 8008d82:	2300      	movs	r3, #0
 8008d84:	61fb      	str	r3, [r7, #28]
      break;
 8008d86:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 8008d88:	69bb      	ldr	r3, [r7, #24]
 8008d8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d8c:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6a1b      	ldr	r3, [r3, #32]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	f000 8084 	beq.w	8008ea0 <HAL_SAI_Init+0x284>
  {
    uint32_t freq = 0;
 8008d98:	2300      	movs	r3, #0
 8008d9a:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4a48      	ldr	r2, [pc, #288]	; (8008ec4 <HAL_SAI_Init+0x2a8>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d004      	beq.n	8008db0 <HAL_SAI_Init+0x194>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	4a48      	ldr	r2, [pc, #288]	; (8008ecc <HAL_SAI_Init+0x2b0>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d104      	bne.n	8008dba <HAL_SAI_Init+0x19e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8008db0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008db4:	f7fe fd9a 	bl	80078ec <HAL_RCCEx_GetPeriphCLKFreq>
 8008db8:	6178      	str	r0, [r7, #20]
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	4a42      	ldr	r2, [pc, #264]	; (8008ec8 <HAL_SAI_Init+0x2ac>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d104      	bne.n	8008dce <HAL_SAI_Init+0x1b2>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8008dc4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8008dc8:	f7fe fd90 	bl	80078ec <HAL_RCCEx_GetPeriphCLKFreq>
 8008dcc:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	4a40      	ldr	r2, [pc, #256]	; (8008ed4 <HAL_SAI_Init+0x2b8>)
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d104      	bne.n	8008de2 <HAL_SAI_Init+0x1c6>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8008dd8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008ddc:	f7fe fd86 	bl	80078ec <HAL_RCCEx_GetPeriphCLKFreq>
 8008de0:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	699b      	ldr	r3, [r3, #24]
 8008de6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008dea:	d120      	bne.n	8008e2e <HAL_SAI_Init+0x212>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008df0:	2b04      	cmp	r3, #4
 8008df2:	d102      	bne.n	8008dfa <HAL_SAI_Init+0x1de>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 8008df4:	2340      	movs	r3, #64	; 0x40
 8008df6:	60fb      	str	r3, [r7, #12]
 8008df8:	e00a      	b.n	8008e10 <HAL_SAI_Init+0x1f4>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dfe:	2b08      	cmp	r3, #8
 8008e00:	d103      	bne.n	8008e0a <HAL_SAI_Init+0x1ee>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 8008e02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e06:	60fb      	str	r3, [r7, #12]
 8008e08:	e002      	b.n	8008e10 <HAL_SAI_Init+0x1f4>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e0e:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8008e10:	697a      	ldr	r2, [r7, #20]
 8008e12:	4613      	mov	r3, r2
 8008e14:	009b      	lsls	r3, r3, #2
 8008e16:	4413      	add	r3, r2
 8008e18:	005b      	lsls	r3, r3, #1
 8008e1a:	4619      	mov	r1, r3
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	6a1b      	ldr	r3, [r3, #32]
 8008e20:	68fa      	ldr	r2, [r7, #12]
 8008e22:	fb02 f303 	mul.w	r3, r2, r3
 8008e26:	fbb1 f3f3 	udiv	r3, r1, r3
 8008e2a:	613b      	str	r3, [r7, #16]
 8008e2c:	e017      	b.n	8008e5e <HAL_SAI_Init+0x242>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e32:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008e36:	d101      	bne.n	8008e3c <HAL_SAI_Init+0x220>
 8008e38:	2302      	movs	r3, #2
 8008e3a:	e000      	b.n	8008e3e <HAL_SAI_Init+0x222>
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8008e40:	697a      	ldr	r2, [r7, #20]
 8008e42:	4613      	mov	r3, r2
 8008e44:	009b      	lsls	r3, r3, #2
 8008e46:	4413      	add	r3, r2
 8008e48:	005b      	lsls	r3, r3, #1
 8008e4a:	4619      	mov	r1, r3
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6a1b      	ldr	r3, [r3, #32]
 8008e50:	68ba      	ldr	r2, [r7, #8]
 8008e52:	fb02 f303 	mul.w	r3, r2, r3
 8008e56:	021b      	lsls	r3, r3, #8
 8008e58:	fbb1 f3f3 	udiv	r3, r1, r3
 8008e5c:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8008e5e:	693b      	ldr	r3, [r7, #16]
 8008e60:	4a24      	ldr	r2, [pc, #144]	; (8008ef4 <HAL_SAI_Init+0x2d8>)
 8008e62:	fba2 2303 	umull	r2, r3, r2, r3
 8008e66:	08da      	lsrs	r2, r3, #3
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8008e6c:	6939      	ldr	r1, [r7, #16]
 8008e6e:	4b21      	ldr	r3, [pc, #132]	; (8008ef4 <HAL_SAI_Init+0x2d8>)
 8008e70:	fba3 2301 	umull	r2, r3, r3, r1
 8008e74:	08da      	lsrs	r2, r3, #3
 8008e76:	4613      	mov	r3, r2
 8008e78:	009b      	lsls	r3, r3, #2
 8008e7a:	4413      	add	r3, r2
 8008e7c:	005b      	lsls	r3, r3, #1
 8008e7e:	1aca      	subs	r2, r1, r3
 8008e80:	2a08      	cmp	r2, #8
 8008e82:	d904      	bls.n	8008e8e <HAL_SAI_Init+0x272>
    {
      hsai->Init.Mckdiv += 1U;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e88:	1c5a      	adds	r2, r3, #1
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e92:	2b04      	cmp	r3, #4
 8008e94:	d104      	bne.n	8008ea0 <HAL_SAI_Init+0x284>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e9a:	085a      	lsrs	r2, r3, #1
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	685b      	ldr	r3, [r3, #4]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d003      	beq.n	8008eb0 <HAL_SAI_Init+0x294>
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	685b      	ldr	r3, [r3, #4]
 8008eac:	2b02      	cmp	r3, #2
 8008eae:	d123      	bne.n	8008ef8 <HAL_SAI_Init+0x2dc>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008eb4:	2b01      	cmp	r3, #1
 8008eb6:	d101      	bne.n	8008ebc <HAL_SAI_Init+0x2a0>
 8008eb8:	2300      	movs	r3, #0
 8008eba:	e001      	b.n	8008ec0 <HAL_SAI_Init+0x2a4>
 8008ebc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ec0:	623b      	str	r3, [r7, #32]
 8008ec2:	e022      	b.n	8008f0a <HAL_SAI_Init+0x2ee>
 8008ec4:	40015804 	.word	0x40015804
 8008ec8:	58005404 	.word	0x58005404
 8008ecc:	40015824 	.word	0x40015824
 8008ed0:	40015800 	.word	0x40015800
 8008ed4:	58005424 	.word	0x58005424
 8008ed8:	58005400 	.word	0x58005400
 8008edc:	08009309 	.word	0x08009309
 8008ee0:	0800931d 	.word	0x0800931d
 8008ee4:	080092e1 	.word	0x080092e1
 8008ee8:	080092f5 	.word	0x080092f5
 8008eec:	08009331 	.word	0x08009331
 8008ef0:	08009a1d 	.word	0x08009a1d
 8008ef4:	cccccccd 	.word	0xcccccccd
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008efc:	2b01      	cmp	r3, #1
 8008efe:	d102      	bne.n	8008f06 <HAL_SAI_Init+0x2ea>
 8008f00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f04:	e000      	b.n	8008f08 <HAL_SAI_Init+0x2ec>
 8008f06:	2300      	movs	r3, #0
 8008f08:	623b      	str	r3, [r7, #32]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                            hsai->Init.MckOverSampling);
  }
#else /* SAI_VER_V2_1*/
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	6819      	ldr	r1, [r3, #0]
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681a      	ldr	r2, [r3, #0]
 8008f14:	4b5a      	ldr	r3, [pc, #360]	; (8009080 <HAL_SAI_Init+0x464>)
 8008f16:	400b      	ands	r3, r1
 8008f18:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	6819      	ldr	r1, [r3, #0]
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	685a      	ldr	r2, [r3, #4]
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f28:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008f2e:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f34:	431a      	orrs	r2, r3
 8008f36:	6a3b      	ldr	r3, [r7, #32]
 8008f38:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8008f3a:	69fb      	ldr	r3, [r7, #28]
 8008f3c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                          ckstr_bits | syncen_bits |                             \
 8008f42:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	695b      	ldr	r3, [r3, #20]
 8008f48:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008f4e:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f54:	051b      	lsls	r3, r3, #20
 8008f56:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008f5c:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	691b      	ldr	r3, [r3, #16]
 8008f62:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	430a      	orrs	r2, r1
 8008f6a:	601a      	str	r2, [r3, #0]
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	6859      	ldr	r1, [r3, #4]
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681a      	ldr	r2, [r3, #0]
 8008f76:	4b43      	ldr	r3, [pc, #268]	; (8009084 <HAL_SAI_Init+0x468>)
 8008f78:	400b      	ands	r3, r1
 8008f7a:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	6859      	ldr	r1, [r3, #4]
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	69da      	ldr	r2, [r3, #28]
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f8a:	431a      	orrs	r2, r3
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f90:	431a      	orrs	r2, r3
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	430a      	orrs	r2, r1
 8008f98:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	6899      	ldr	r1, [r3, #8]
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681a      	ldr	r2, [r3, #0]
 8008fa4:	4b38      	ldr	r3, [pc, #224]	; (8009088 <HAL_SAI_Init+0x46c>)
 8008fa6:	400b      	ands	r3, r1
 8008fa8:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	6899      	ldr	r1, [r3, #8]
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fb4:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008fba:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 8008fc0:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 8008fc6:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fcc:	3b01      	subs	r3, #1
 8008fce:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8008fd0:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	430a      	orrs	r2, r1
 8008fd8:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	68d9      	ldr	r1, [r3, #12]
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681a      	ldr	r2, [r3, #0]
 8008fe4:	f24f 0320 	movw	r3, #61472	; 0xf020
 8008fe8:	400b      	ands	r3, r1
 8008fea:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	68d9      	ldr	r1, [r3, #12]
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ffa:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009000:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8009002:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009008:	3b01      	subs	r3, #1
 800900a:	021b      	lsls	r3, r3, #8
 800900c:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	430a      	orrs	r2, r1
 8009014:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	4a1c      	ldr	r2, [pc, #112]	; (800908c <HAL_SAI_Init+0x470>)
 800901c:	4293      	cmp	r3, r2
 800901e:	d004      	beq.n	800902a <HAL_SAI_Init+0x40e>
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	4a1a      	ldr	r2, [pc, #104]	; (8009090 <HAL_SAI_Init+0x474>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d119      	bne.n	800905e <HAL_SAI_Init+0x442>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800902a:	69bb      	ldr	r3, [r7, #24]
 800902c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800902e:	f023 0201 	bic.w	r2, r3, #1
 8009032:	69bb      	ldr	r3, [r7, #24]
 8009034:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800903c:	2b01      	cmp	r3, #1
 800903e:	d10e      	bne.n	800905e <HAL_SAI_Init+0x442>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009048:	3b01      	subs	r3, #1
 800904a:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800904c:	431a      	orrs	r2, r3
 800904e:	69bb      	ldr	r3, [r7, #24]
 8009050:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 8009052:	69bb      	ldr	r3, [r7, #24]
 8009054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009056:	f043 0201 	orr.w	r2, r3, #1
 800905a:	69bb      	ldr	r3, [r7, #24]
 800905c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2200      	movs	r2, #0
 8009062:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2201      	movs	r2, #1
 800906a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2200      	movs	r2, #0
 8009072:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 8009076:	2300      	movs	r3, #0
}
 8009078:	4618      	mov	r0, r3
 800907a:	3728      	adds	r7, #40	; 0x28
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}
 8009080:	f005c010 	.word	0xf005c010
 8009084:	ffff1ff0 	.word	0xffff1ff0
 8009088:	fff88000 	.word	0xfff88000
 800908c:	40015804 	.word	0x40015804
 8009090:	58005404 	.word	0x58005404

08009094 <HAL_SAI_RegisterCallback>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_SAI_RegisterCallback(SAI_HandleTypeDef        *hsai,
                                           HAL_SAI_CallbackIDTypeDef CallbackID,
                                           pSAI_CallbackTypeDef      pCallback)
{
 8009094:	b480      	push	{r7}
 8009096:	b087      	sub	sp, #28
 8009098:	af00      	add	r7, sp, #0
 800909a:	60f8      	str	r0, [r7, #12]
 800909c:	460b      	mov	r3, r1
 800909e:	607a      	str	r2, [r7, #4]
 80090a0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80090a2:	2300      	movs	r3, #0
 80090a4:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d10a      	bne.n	80090c2 <HAL_SAI_RegisterCallback+0x2e>
  {
    /* update the error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_INVALID_CALLBACK;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80090b2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    /* update return status */
    status = HAL_ERROR;
 80090bc:	2301      	movs	r3, #1
 80090be:	75fb      	strb	r3, [r7, #23]
 80090c0:	e073      	b.n	80091aa <HAL_SAI_RegisterCallback+0x116>
  }
  else
  {
    if (HAL_SAI_STATE_READY == hsai->State)
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80090c8:	b2db      	uxtb	r3, r3
 80090ca:	2b01      	cmp	r3, #1
 80090cc:	d142      	bne.n	8009154 <HAL_SAI_RegisterCallback+0xc0>
    {
      switch (CallbackID)
 80090ce:	7afb      	ldrb	r3, [r7, #11]
 80090d0:	2b06      	cmp	r3, #6
 80090d2:	d834      	bhi.n	800913e <HAL_SAI_RegisterCallback+0xaa>
 80090d4:	a201      	add	r2, pc, #4	; (adr r2, 80090dc <HAL_SAI_RegisterCallback+0x48>)
 80090d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090da:	bf00      	nop
 80090dc:	080090f9 	.word	0x080090f9
 80090e0:	08009103 	.word	0x08009103
 80090e4:	0800910d 	.word	0x0800910d
 80090e8:	08009117 	.word	0x08009117
 80090ec:	08009121 	.word	0x08009121
 80090f0:	0800912b 	.word	0x0800912b
 80090f4:	08009135 	.word	0x08009135
      {
        case HAL_SAI_RX_COMPLETE_CB_ID :
          hsai->RxCpltCallback = pCallback;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	687a      	ldr	r2, [r7, #4]
 80090fc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
          break;
 8009100:	e053      	b.n	80091aa <HAL_SAI_RegisterCallback+0x116>
        case HAL_SAI_RX_HALFCOMPLETE_CB_ID :
          hsai->RxHalfCpltCallback = pCallback;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	687a      	ldr	r2, [r7, #4]
 8009106:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
          break;
 800910a:	e04e      	b.n	80091aa <HAL_SAI_RegisterCallback+0x116>
        case HAL_SAI_TX_COMPLETE_CB_ID :
          hsai->TxCpltCallback = pCallback;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	687a      	ldr	r2, [r7, #4]
 8009110:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
          break;
 8009114:	e049      	b.n	80091aa <HAL_SAI_RegisterCallback+0x116>
        case HAL_SAI_TX_HALFCOMPLETE_CB_ID :
          hsai->TxHalfCpltCallback = pCallback;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	687a      	ldr	r2, [r7, #4]
 800911a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
          break;
 800911e:	e044      	b.n	80091aa <HAL_SAI_RegisterCallback+0x116>
        case HAL_SAI_ERROR_CB_ID :
          hsai->ErrorCallback = pCallback;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	687a      	ldr	r2, [r7, #4]
 8009124:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
          break;
 8009128:	e03f      	b.n	80091aa <HAL_SAI_RegisterCallback+0x116>
        case HAL_SAI_MSPINIT_CB_ID :
          hsai->MspInitCallback = pCallback;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	687a      	ldr	r2, [r7, #4]
 800912e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
          break;
 8009132:	e03a      	b.n	80091aa <HAL_SAI_RegisterCallback+0x116>
        case HAL_SAI_MSPDEINIT_CB_ID :
          hsai->MspDeInitCallback = pCallback;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	687a      	ldr	r2, [r7, #4]
 8009138:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
          break;
 800913c:	e035      	b.n	80091aa <HAL_SAI_RegisterCallback+0x116>
        default :
          /* update the error code */
          hsai->ErrorCode |= HAL_SAI_ERROR_INVALID_CALLBACK;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009144:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
          /* update return status */
          status = HAL_ERROR;
 800914e:	2301      	movs	r3, #1
 8009150:	75fb      	strb	r3, [r7, #23]
          break;
 8009152:	e02a      	b.n	80091aa <HAL_SAI_RegisterCallback+0x116>
      }
    }
    else if (HAL_SAI_STATE_RESET == hsai->State)
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800915a:	b2db      	uxtb	r3, r3
 800915c:	2b00      	cmp	r3, #0
 800915e:	d11a      	bne.n	8009196 <HAL_SAI_RegisterCallback+0x102>
    {
      switch (CallbackID)
 8009160:	7afb      	ldrb	r3, [r7, #11]
 8009162:	2b05      	cmp	r3, #5
 8009164:	d002      	beq.n	800916c <HAL_SAI_RegisterCallback+0xd8>
 8009166:	2b06      	cmp	r3, #6
 8009168:	d005      	beq.n	8009176 <HAL_SAI_RegisterCallback+0xe2>
 800916a:	e009      	b.n	8009180 <HAL_SAI_RegisterCallback+0xec>
      {
        case HAL_SAI_MSPINIT_CB_ID :
          hsai->MspInitCallback = pCallback;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	687a      	ldr	r2, [r7, #4]
 8009170:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
          break;
 8009174:	e019      	b.n	80091aa <HAL_SAI_RegisterCallback+0x116>
        case HAL_SAI_MSPDEINIT_CB_ID :
          hsai->MspDeInitCallback = pCallback;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	687a      	ldr	r2, [r7, #4]
 800917a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
          break;
 800917e:	e014      	b.n	80091aa <HAL_SAI_RegisterCallback+0x116>
        default :
          /* update the error code */
          hsai->ErrorCode |= HAL_SAI_ERROR_INVALID_CALLBACK;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009186:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
          /* update return status */
          status = HAL_ERROR;
 8009190:	2301      	movs	r3, #1
 8009192:	75fb      	strb	r3, [r7, #23]
          break;
 8009194:	e009      	b.n	80091aa <HAL_SAI_RegisterCallback+0x116>
      }
    }
    else
    {
      /* update the error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_INVALID_CALLBACK;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800919c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      /* update return status */
      status = HAL_ERROR;
 80091a6:	2301      	movs	r3, #1
 80091a8:	75fb      	strb	r3, [r7, #23]
    }
  }
  return status;
 80091aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80091ac:	4618      	mov	r0, r3
 80091ae:	371c      	adds	r7, #28
 80091b0:	46bd      	mov	sp, r7
 80091b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b6:	4770      	bx	lr

080091b8 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b084      	sub	sp, #16
 80091bc:	af00      	add	r7, sp, #0
 80091be:	60f8      	str	r0, [r7, #12]
 80091c0:	60b9      	str	r1, [r7, #8]
 80091c2:	4613      	mov	r3, r2
 80091c4:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d002      	beq.n	80091d2 <HAL_SAI_Receive_DMA+0x1a>
 80091cc:	88fb      	ldrh	r3, [r7, #6]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d101      	bne.n	80091d6 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 80091d2:	2301      	movs	r3, #1
 80091d4:	e079      	b.n	80092ca <HAL_SAI_Receive_DMA+0x112>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80091dc:	b2db      	uxtb	r3, r3
 80091de:	2b01      	cmp	r3, #1
 80091e0:	d172      	bne.n	80092c8 <HAL_SAI_Receive_DMA+0x110>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80091e8:	2b01      	cmp	r3, #1
 80091ea:	d101      	bne.n	80091f0 <HAL_SAI_Receive_DMA+0x38>
 80091ec:	2302      	movs	r3, #2
 80091ee:	e06c      	b.n	80092ca <HAL_SAI_Receive_DMA+0x112>
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	2201      	movs	r2, #1
 80091f4:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	68ba      	ldr	r2, [r7, #8]
 80091fc:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	88fa      	ldrh	r2, [r7, #6]
 8009202:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	88fa      	ldrh	r2, [r7, #6]
 800920a:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	2200      	movs	r2, #0
 8009212:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	2222      	movs	r2, #34	; 0x22
 800921a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009224:	4a2b      	ldr	r2, [pc, #172]	; (80092d4 <HAL_SAI_Receive_DMA+0x11c>)
 8009226:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800922e:	4a2a      	ldr	r2, [pc, #168]	; (80092d8 <HAL_SAI_Receive_DMA+0x120>)
 8009230:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009238:	4a28      	ldr	r2, [pc, #160]	; (80092dc <HAL_SAI_Receive_DMA+0x124>)
 800923a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009242:	2200      	movs	r2, #0
 8009244:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */ //todo
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, (uint32_t)hsai->XferSize) != HAL_OK)
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	331c      	adds	r3, #28
 8009252:	4619      	mov	r1, r3
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009258:	461a      	mov	r2, r3
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8009260:	f7fa fa06 	bl	8003670 <HAL_DMA_Start_IT>
 8009264:	4603      	mov	r3, r0
 8009266:	2b00      	cmp	r3, #0
 8009268:	d005      	beq.n	8009276 <HAL_SAI_Receive_DMA+0xbe>
    {
      __HAL_UNLOCK(hsai);
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	2200      	movs	r2, #0
 800926e:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 8009272:	2301      	movs	r3, #1
 8009274:	e029      	b.n	80092ca <HAL_SAI_Receive_DMA+0x112>
    }

    /* DMA polling...nvm */
    //HAL_DMA_PollForTransfer(hsai->hdmarx, HAL_DMA_FULL_TRANSFER, 2000);
    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8009276:	2100      	movs	r1, #0
 8009278:	68f8      	ldr	r0, [r7, #12]
 800927a:	f000 f863 	bl	8009344 <SAI_InterruptFlag>
 800927e:	4601      	mov	r1, r0
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	691a      	ldr	r2, [r3, #16]
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	430a      	orrs	r2, r1
 800928c:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	681a      	ldr	r2, [r3, #0]
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800929c:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d107      	bne.n	80092bc <HAL_SAI_Receive_DMA+0x104>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	681a      	ldr	r2, [r3, #0]
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80092ba:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	2200      	movs	r2, #0
 80092c0:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 80092c4:	2300      	movs	r3, #0
 80092c6:	e000      	b.n	80092ca <HAL_SAI_Receive_DMA+0x112>
  }
  else
  {
    return HAL_BUSY;
 80092c8:	2302      	movs	r3, #2
  }
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	3710      	adds	r7, #16
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}
 80092d2:	bf00      	nop
 80092d4:	08009493 	.word	0x08009493
 80092d8:	08009429 	.word	0x08009429
 80092dc:	080094b3 	.word	0x080094b3

080092e0 <HAL_SAI_TxCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 80092e0:	b480      	push	{r7}
 80092e2:	b083      	sub	sp, #12
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxCpltCallback could be implemented in the user file
   */
}
 80092e8:	bf00      	nop
 80092ea:	370c      	adds	r7, #12
 80092ec:	46bd      	mov	sp, r7
 80092ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f2:	4770      	bx	lr

080092f4 <HAL_SAI_TxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 80092f4:	b480      	push	{r7}
 80092f6:	b083      	sub	sp, #12
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxHalfCpltCallback could be implemented in the user file
   */
}
 80092fc:	bf00      	nop
 80092fe:	370c      	adds	r7, #12
 8009300:	46bd      	mov	sp, r7
 8009302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009306:	4770      	bx	lr

08009308 <HAL_SAI_RxCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8009308:	b480      	push	{r7}
 800930a:	b083      	sub	sp, #12
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_RxCpltCallback could be implemented in the user file
   */
}
 8009310:	bf00      	nop
 8009312:	370c      	adds	r7, #12
 8009314:	46bd      	mov	sp, r7
 8009316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931a:	4770      	bx	lr

0800931c <HAL_SAI_RxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 800931c:	b480      	push	{r7}
 800931e:	b083      	sub	sp, #12
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009324:	bf00      	nop
 8009326:	370c      	adds	r7, #12
 8009328:	46bd      	mov	sp, r7
 800932a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932e:	4770      	bx	lr

08009330 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8009330:	b480      	push	{r7}
 8009332:	b083      	sub	sp, #12
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8009338:	bf00      	nop
 800933a:	370c      	adds	r7, #12
 800933c:	46bd      	mov	sp, r7
 800933e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009342:	4770      	bx	lr

08009344 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 8009344:	b480      	push	{r7}
 8009346:	b085      	sub	sp, #20
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
 800934c:	460b      	mov	r3, r1
 800934e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8009350:	2301      	movs	r3, #1
 8009352:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8009354:	78fb      	ldrb	r3, [r7, #3]
 8009356:	2b01      	cmp	r3, #1
 8009358:	d103      	bne.n	8009362 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	f043 0308 	orr.w	r3, r3, #8
 8009360:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009366:	2b08      	cmp	r3, #8
 8009368:	d10b      	bne.n	8009382 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800936e:	2b03      	cmp	r3, #3
 8009370:	d003      	beq.n	800937a <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	685b      	ldr	r3, [r3, #4]
 8009376:	2b01      	cmp	r3, #1
 8009378:	d103      	bne.n	8009382 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	f043 0310 	orr.w	r3, r3, #16
 8009380:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	685b      	ldr	r3, [r3, #4]
 8009386:	2b03      	cmp	r3, #3
 8009388:	d003      	beq.n	8009392 <SAI_InterruptFlag+0x4e>
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	685b      	ldr	r3, [r3, #4]
 800938e:	2b02      	cmp	r3, #2
 8009390:	d104      	bne.n	800939c <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009398:	60fb      	str	r3, [r7, #12]
 800939a:	e003      	b.n	80093a4 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	f043 0304 	orr.w	r3, r3, #4
 80093a2:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 80093a4:	68fb      	ldr	r3, [r7, #12]
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	3714      	adds	r7, #20
 80093aa:	46bd      	mov	sp, r7
 80093ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b0:	4770      	bx	lr
	...

080093b4 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80093b4:	b480      	push	{r7}
 80093b6:	b085      	sub	sp, #20
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80093bc:	4b18      	ldr	r3, [pc, #96]	; (8009420 <SAI_Disable+0x6c>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	4a18      	ldr	r2, [pc, #96]	; (8009424 <SAI_Disable+0x70>)
 80093c2:	fba2 2303 	umull	r2, r3, r2, r3
 80093c6:	0b1b      	lsrs	r3, r3, #12
 80093c8:	009b      	lsls	r3, r3, #2
 80093ca:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80093cc:	2300      	movs	r3, #0
 80093ce:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	681a      	ldr	r2, [r3, #0]
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80093de:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d10a      	bne.n	80093fc <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80093ec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 80093f6:	2303      	movs	r3, #3
 80093f8:	72fb      	strb	r3, [r7, #11]
      break;
 80093fa:	e009      	b.n	8009410 <SAI_Disable+0x5c>
    }
    count--;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	3b01      	subs	r3, #1
 8009400:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800940c:	2b00      	cmp	r3, #0
 800940e:	d1e7      	bne.n	80093e0 <SAI_Disable+0x2c>

  return status;
 8009410:	7afb      	ldrb	r3, [r7, #11]
}
 8009412:	4618      	mov	r0, r3
 8009414:	3714      	adds	r7, #20
 8009416:	46bd      	mov	sp, r7
 8009418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941c:	4770      	bx	lr
 800941e:	bf00      	nop
 8009420:	24000410 	.word	0x24000410
 8009424:	95cbec1b 	.word	0x95cbec1b

08009428 <SAI_DMARxCplt>:
  *              the configuration information for the specified DMA module.
  * @retval None
  */
// TODO: Add a function for when it's complete
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b084      	sub	sp, #16
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
	BSP_LED_On(LED1);
 8009430:	2000      	movs	r0, #0
 8009432:	f7f6 ffcb 	bl	80003cc <BSP_LED_On>
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800943a:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	69db      	ldr	r3, [r3, #28]
 8009440:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009444:	d01c      	beq.n	8009480 <SAI_DMARxCplt+0x58>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	681a      	ldr	r2, [r3, #0]
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8009454:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	2200      	movs	r2, #0
 800945a:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800945e:	2100      	movs	r1, #0
 8009460:	68f8      	ldr	r0, [r7, #12]
 8009462:	f7ff ff6f 	bl	8009344 <SAI_InterruptFlag>
 8009466:	4603      	mov	r3, r0
 8009468:	43d9      	mvns	r1, r3
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	691a      	ldr	r2, [r3, #16]
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	400a      	ands	r2, r1
 8009476:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	2201      	movs	r2, #1
 800947c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009486:	68f8      	ldr	r0, [r7, #12]
 8009488:	4798      	blx	r3
#else
  HAL_SAI_RxCpltCallback(hsai);
#endif
}
 800948a:	bf00      	nop
 800948c:	3710      	adds	r7, #16
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}

08009492 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009492:	b580      	push	{r7, lr}
 8009494:	b084      	sub	sp, #16
 8009496:	af00      	add	r7, sp, #0
 8009498:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800949e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80094a6:	68f8      	ldr	r0, [r7, #12]
 80094a8:	4798      	blx	r3
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
#endif
}
 80094aa:	bf00      	nop
 80094ac:	3710      	adds	r7, #16
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}

080094b2 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 80094b2:	b580      	push	{r7, lr}
 80094b4:	b084      	sub	sp, #16
 80094b6:	af00      	add	r7, sp, #0
 80094b8:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094be:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	f7fb fa6d 	bl	80049a0 <HAL_DMA_GetError>
 80094c6:	4603      	mov	r3, r0
 80094c8:	2b02      	cmp	r3, #2
 80094ca:	d01f      	beq.n	800950c <SAI_DMAError+0x5a>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80094d2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	681a      	ldr	r2, [r3, #0]
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80094ea:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 80094ec:	68f8      	ldr	r0, [r7, #12]
 80094ee:	f7ff ff61 	bl	80093b4 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	2201      	movs	r2, #1
 80094f6:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	2200      	movs	r2, #0
 80094fe:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009508:	68f8      	ldr	r0, [r7, #12]
 800950a:	4798      	blx	r3
#else
    HAL_SAI_ErrorCallback(hsai);
#endif
  }
}
 800950c:	bf00      	nop
 800950e:	3710      	adds	r7, #16
 8009510:	46bd      	mov	sp, r7
 8009512:	bd80      	pop	{r7, pc}

08009514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b0c6      	sub	sp, #280	; 0x118
 8009518:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800951a:	f7f8 fe9b 	bl	8002254 <HAL_Init>
  /* USER CODE BEGIN Init */
  //HAL_Delay(2000);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800951e:	f000 f83f 	bl	80095a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009522:	f000 f9b7 	bl	8009894 <MX_GPIO_Init>
  MX_CRC_Init();
 8009526:	f000 f8a9 	bl	800967c <MX_CRC_Init>

  MX_SAI4_Init();
 800952a:	f000 f8e9 	bl	8009700 <MX_SAI4_Init>
  MX_BDMA_Init();
 800952e:	f000 f961 	bl	80097f4 <MX_BDMA_Init>
  // MX_SAI1_Init();
  MX_DMA_Init();
 8009532:	f000 f987 	bl	8009844 <MX_DMA_Init>
  //MX_PDM2PCM_Init();
  //MX_DFSDM1_Init();


  /* USER CODE BEGIN 2 */
  BSP_LED_Init(LED1);
 8009536:	2000      	movs	r0, #0
 8009538:	f7f6 feea 	bl	8000310 <BSP_LED_Init>
  BSP_LED_Off(LED1);
 800953c:	2000      	movs	r0, #0
 800953e:	f7f6 ff63 	bl	8000408 <BSP_LED_Off>
  BSP_AUDIO_Init_t haudio_in;
  haudio_in.Device = AUDIO_IN_DEVICE_DIGITAL_MIC1;
 8009542:	2310      	movs	r3, #16
 8009544:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  haudio_in.ChannelsNbr = 1;
 8009548:	2301      	movs	r3, #1
 800954a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  haudio_in.SampleRate = AUDIO_FREQUENCY_16K;
 800954e:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 8009552:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  haudio_in.BitsPerSample = AUDIO_RESOLUTION_8B;
 8009556:	2308      	movs	r3, #8
 8009558:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  haudio_in.Volume = 50;
 800955c:	2332      	movs	r3, #50	; 0x32
 800955e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  BSP_AUDIO_IN_Init(PDM, &haudio_in);
 8009562:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8009566:	4619      	mov	r1, r3
 8009568:	2001      	movs	r0, #1
 800956a:	f7f7 fb0f 	bl	8000b8c <BSP_AUDIO_IN_Init>
  BSP_AUDIO_IN_PDMToPCM_Init(PDM, SAI_AUDIO_FREQUENCY_16K, 1, 1);
 800956e:	2301      	movs	r3, #1
 8009570:	2201      	movs	r2, #1
 8009572:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
 8009576:	2001      	movs	r0, #1
 8009578:	f7f8 fa86 	bl	8001a88 <BSP_AUDIO_IN_PDMToPCM_Init>

  uint8_t mic_buffer[PDM_BUFFER_SIZE] = {0};
 800957c:	1d3b      	adds	r3, r7, #4
 800957e:	2200      	movs	r2, #0
 8009580:	601a      	str	r2, [r3, #0]
 8009582:	3304      	adds	r3, #4
 8009584:	22fc      	movs	r2, #252	; 0xfc
 8009586:	2100      	movs	r1, #0
 8009588:	4618      	mov	r0, r3
 800958a:	f002 fb8b 	bl	800bca4 <memset>
  // uint16_t speaker_buffer[PCM_BUFFER_SIZE] = {0};
  // @param  Instance  Audio IN instance: 0 for SAI, 1 for SAI PDM and 2 for DFSDM
  BSP_AUDIO_IN_RecordPDM(PDM, mic_buffer, PDM_BUFFER_SIZE);
 800958e:	1d3b      	adds	r3, r7, #4
 8009590:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009594:	4619      	mov	r1, r3
 8009596:	2001      	movs	r0, #1
 8009598:	f7f8 fb1a 	bl	8001bd0 <BSP_AUDIO_IN_RecordPDM>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  (* XferCpltCallback)( struct __DMA_HandleTypeDef * hdma);

  while (1)
 800959c:	e7fe      	b.n	800959c <main+0x88>
	...

080095a0 <SystemClock_Config>:
  }
  /* USER CODE END 3 */
}

void SystemClock_Config(void)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b09c      	sub	sp, #112	; 0x70
 80095a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80095a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80095aa:	224c      	movs	r2, #76	; 0x4c
 80095ac:	2100      	movs	r1, #0
 80095ae:	4618      	mov	r0, r3
 80095b0:	f002 fb78 	bl	800bca4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80095b4:	1d3b      	adds	r3, r7, #4
 80095b6:	2220      	movs	r2, #32
 80095b8:	2100      	movs	r1, #0
 80095ba:	4618      	mov	r0, r3
 80095bc:	f002 fb72 	bl	800bca4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80095c0:	2004      	movs	r0, #4
 80095c2:	f7fc f9e5 	bl	8005990 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80095c6:	2300      	movs	r3, #0
 80095c8:	603b      	str	r3, [r7, #0]
 80095ca:	4b2b      	ldr	r3, [pc, #172]	; (8009678 <SystemClock_Config+0xd8>)
 80095cc:	699b      	ldr	r3, [r3, #24]
 80095ce:	4a2a      	ldr	r2, [pc, #168]	; (8009678 <SystemClock_Config+0xd8>)
 80095d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80095d4:	6193      	str	r3, [r2, #24]
 80095d6:	4b28      	ldr	r3, [pc, #160]	; (8009678 <SystemClock_Config+0xd8>)
 80095d8:	699b      	ldr	r3, [r3, #24]
 80095da:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80095de:	603b      	str	r3, [r7, #0]
 80095e0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80095e2:	bf00      	nop
 80095e4:	4b24      	ldr	r3, [pc, #144]	; (8009678 <SystemClock_Config+0xd8>)
 80095e6:	699b      	ldr	r3, [r3, #24]
 80095e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80095ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80095f0:	d1f8      	bne.n	80095e4 <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80095f2:	2302      	movs	r3, #2
 80095f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80095f6:	2301      	movs	r3, #1
 80095f8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80095fa:	2340      	movs	r3, #64	; 0x40
 80095fc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80095fe:	2302      	movs	r3, #2
 8009600:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8009602:	2300      	movs	r3, #0
 8009604:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8009606:	2304      	movs	r3, #4
 8009608:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 800960a:	2318      	movs	r3, #24
 800960c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800960e:	2301      	movs	r3, #1
 8009610:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 125;
 8009612:	237d      	movs	r3, #125	; 0x7d
 8009614:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8009616:	2302      	movs	r3, #2
 8009618:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800961a:	230c      	movs	r3, #12
 800961c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800961e:	2300      	movs	r3, #0
 8009620:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8009622:	2300      	movs	r3, #0
 8009624:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009626:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800962a:	4618      	mov	r0, r3
 800962c:	f7fc fa0a 	bl	8005a44 <HAL_RCC_OscConfig>
 8009630:	4603      	mov	r3, r0
 8009632:	2b00      	cmp	r3, #0
 8009634:	d001      	beq.n	800963a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8009636:	f000 f975 	bl	8009924 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800963a:	233f      	movs	r3, #63	; 0x3f
 800963c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800963e:	2303      	movs	r3, #3
 8009640:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8009642:	2300      	movs	r3, #0
 8009644:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8009646:	2308      	movs	r3, #8
 8009648:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800964a:	2340      	movs	r3, #64	; 0x40
 800964c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800964e:	2340      	movs	r3, #64	; 0x40
 8009650:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8009652:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009656:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8009658:	2340      	movs	r3, #64	; 0x40
 800965a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800965c:	1d3b      	adds	r3, r7, #4
 800965e:	2102      	movs	r1, #2
 8009660:	4618      	mov	r0, r3
 8009662:	f7fc fd9b 	bl	800619c <HAL_RCC_ClockConfig>
 8009666:	4603      	mov	r3, r0
 8009668:	2b00      	cmp	r3, #0
 800966a:	d001      	beq.n	8009670 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800966c:	f000 f95a 	bl	8009924 <Error_Handler>
  }
}
 8009670:	bf00      	nop
 8009672:	3770      	adds	r7, #112	; 0x70
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}
 8009678:	58024800 	.word	0x58024800

0800967c <MX_CRC_Init>:


static void MX_CRC_Init(void)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b082      	sub	sp, #8
 8009680:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8009682:	4b1c      	ldr	r3, [pc, #112]	; (80096f4 <MX_CRC_Init+0x78>)
 8009684:	4a1c      	ldr	r2, [pc, #112]	; (80096f8 <MX_CRC_Init+0x7c>)
 8009686:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8009688:	4b1a      	ldr	r3, [pc, #104]	; (80096f4 <MX_CRC_Init+0x78>)
 800968a:	2200      	movs	r2, #0
 800968c:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800968e:	4b19      	ldr	r3, [pc, #100]	; (80096f4 <MX_CRC_Init+0x78>)
 8009690:	2200      	movs	r2, #0
 8009692:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8009694:	4b17      	ldr	r3, [pc, #92]	; (80096f4 <MX_CRC_Init+0x78>)
 8009696:	2200      	movs	r2, #0
 8009698:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800969a:	4b16      	ldr	r3, [pc, #88]	; (80096f4 <MX_CRC_Init+0x78>)
 800969c:	2200      	movs	r2, #0
 800969e:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80096a0:	4b14      	ldr	r3, [pc, #80]	; (80096f4 <MX_CRC_Init+0x78>)
 80096a2:	2201      	movs	r2, #1
 80096a4:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80096a6:	4813      	ldr	r0, [pc, #76]	; (80096f4 <MX_CRC_Init+0x78>)
 80096a8:	f7f8 ffa8 	bl	80025fc <HAL_CRC_Init>
 80096ac:	4603      	mov	r3, r0
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d001      	beq.n	80096b6 <MX_CRC_Init+0x3a>
  {
    Error_Handler();
 80096b2:	f000 f937 	bl	8009924 <Error_Handler>
  }
  __HAL_CRC_DR_RESET(&hcrc);
 80096b6:	4b0f      	ldr	r3, [pc, #60]	; (80096f4 <MX_CRC_Init+0x78>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	689a      	ldr	r2, [r3, #8]
 80096bc:	4b0d      	ldr	r3, [pc, #52]	; (80096f4 <MX_CRC_Init+0x78>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f042 0201 	orr.w	r2, r2, #1
 80096c4:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN CRC_Init 2 */

  __HAL_RCC_CRC_CLK_ENABLE();
 80096c6:	4b0d      	ldr	r3, [pc, #52]	; (80096fc <MX_CRC_Init+0x80>)
 80096c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80096cc:	4a0b      	ldr	r2, [pc, #44]	; (80096fc <MX_CRC_Init+0x80>)
 80096ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80096d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80096d6:	4b09      	ldr	r3, [pc, #36]	; (80096fc <MX_CRC_Init+0x80>)
 80096d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80096dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80096e0:	607b      	str	r3, [r7, #4]
 80096e2:	687b      	ldr	r3, [r7, #4]
  HAL_CRC_MspInit(&hcrc);
 80096e4:	4803      	ldr	r0, [pc, #12]	; (80096f4 <MX_CRC_Init+0x78>)
 80096e6:	f000 f93d 	bl	8009964 <HAL_CRC_MspInit>

  /* USER CODE END CRC_Init 2 */

}
 80096ea:	bf00      	nop
 80096ec:	3708      	adds	r7, #8
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd80      	pop	{r7, pc}
 80096f2:	bf00      	nop
 80096f4:	24000d4c 	.word	0x24000d4c
 80096f8:	58024c00 	.word	0x58024c00
 80096fc:	58024400 	.word	0x58024400

08009700 <MX_SAI4_Init>:

}


static void MX_SAI4_Init(void)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI4_Init 1 */
  /* USER CODE END SAI4_Init 1 */

  /* USER CODE BEGIN SAI4_Init 2 */
  haudio_in_sai[PDM].Instance = AUDIO_IN_SAI_PDMx;
 8009704:	4b38      	ldr	r3, [pc, #224]	; (80097e8 <MX_SAI4_Init+0xe8>)
 8009706:	4a39      	ldr	r2, [pc, #228]	; (80097ec <MX_SAI4_Init+0xec>)
 8009708:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  haudio_in_sai[PDM].Init.Protocol = SAI_FREE_PROTOCOL;
 800970c:	4b36      	ldr	r3, [pc, #216]	; (80097e8 <MX_SAI4_Init+0xe8>)
 800970e:	2200      	movs	r2, #0
 8009710:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
  haudio_in_sai[PDM].Init.AudioMode = SAI_MODEMASTER_RX;
 8009714:	4b34      	ldr	r3, [pc, #208]	; (80097e8 <MX_SAI4_Init+0xe8>)
 8009716:	2201      	movs	r2, #1
 8009718:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  haudio_in_sai[PDM].Init.DataSize = SAI_DATASIZE_16;
 800971c:	4b32      	ldr	r3, [pc, #200]	; (80097e8 <MX_SAI4_Init+0xe8>)
 800971e:	2280      	movs	r2, #128	; 0x80
 8009720:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
  haudio_in_sai[PDM].Init.FirstBit = SAI_FIRSTBIT_MSB;
 8009724:	4b30      	ldr	r3, [pc, #192]	; (80097e8 <MX_SAI4_Init+0xe8>)
 8009726:	2200      	movs	r2, #0
 8009728:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  haudio_in_sai[PDM].Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800972c:	4b2e      	ldr	r3, [pc, #184]	; (80097e8 <MX_SAI4_Init+0xe8>)
 800972e:	2200      	movs	r2, #0
 8009730:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
  haudio_in_sai[PDM].Init.Synchro = SAI_ASYNCHRONOUS;
 8009734:	4b2c      	ldr	r3, [pc, #176]	; (80097e8 <MX_SAI4_Init+0xe8>)
 8009736:	2200      	movs	r2, #0
 8009738:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  haudio_in_sai[PDM].Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800973c:	4b2a      	ldr	r3, [pc, #168]	; (80097e8 <MX_SAI4_Init+0xe8>)
 800973e:	2200      	movs	r2, #0
 8009740:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  haudio_in_sai[PDM].Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8009744:	4b28      	ldr	r3, [pc, #160]	; (80097e8 <MX_SAI4_Init+0xe8>)
 8009746:	2200      	movs	r2, #0
 8009748:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  haudio_in_sai[PDM].Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800974c:	4b26      	ldr	r3, [pc, #152]	; (80097e8 <MX_SAI4_Init+0xe8>)
 800974e:	2200      	movs	r2, #0
 8009750:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  haudio_in_sai[PDM].Init.AudioFrequency = SAI_AUDIO_FREQUENCY_16K;
 8009754:	4b24      	ldr	r3, [pc, #144]	; (80097e8 <MX_SAI4_Init+0xe8>)
 8009756:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800975a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  haudio_in_sai[PDM].Init.MonoStereoMode = SAI_MONOMODE;
 800975e:	4b22      	ldr	r3, [pc, #136]	; (80097e8 <MX_SAI4_Init+0xe8>)
 8009760:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009764:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  haudio_in_sai[PDM].Init.CompandingMode = SAI_NOCOMPANDING;
 8009768:	4b1f      	ldr	r3, [pc, #124]	; (80097e8 <MX_SAI4_Init+0xe8>)
 800976a:	2200      	movs	r2, #0
 800976c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4

  haudio_in_sai[PDM].FrameInit.FrameLength = 16;
 8009770:	4b1d      	ldr	r3, [pc, #116]	; (80097e8 <MX_SAI4_Init+0xe8>)
 8009772:	2210      	movs	r2, #16
 8009774:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  haudio_in_sai[PDM].FrameInit.ActiveFrameLength = 1;
 8009778:	4b1b      	ldr	r3, [pc, #108]	; (80097e8 <MX_SAI4_Init+0xe8>)
 800977a:	2201      	movs	r2, #1
 800977c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  haudio_in_sai[PDM].FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8009780:	4b19      	ldr	r3, [pc, #100]	; (80097e8 <MX_SAI4_Init+0xe8>)
 8009782:	2200      	movs	r2, #0
 8009784:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  haudio_in_sai[PDM].FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8009788:	4b17      	ldr	r3, [pc, #92]	; (80097e8 <MX_SAI4_Init+0xe8>)
 800978a:	2200      	movs	r2, #0
 800978c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  haudio_in_sai[PDM].FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8009790:	4b15      	ldr	r3, [pc, #84]	; (80097e8 <MX_SAI4_Init+0xe8>)
 8009792:	2200      	movs	r2, #0
 8009794:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

  haudio_in_sai[PDM].SlotInit.FirstBitOffset = 0;
 8009798:	4b13      	ldr	r3, [pc, #76]	; (80097e8 <MX_SAI4_Init+0xe8>)
 800979a:	2200      	movs	r2, #0
 800979c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
  haudio_in_sai[PDM].SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80097a0:	4b11      	ldr	r3, [pc, #68]	; (80097e8 <MX_SAI4_Init+0xe8>)
 80097a2:	2200      	movs	r2, #0
 80097a4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  haudio_in_sai[PDM].SlotInit.SlotNumber = 0;
 80097a8:	4b0f      	ldr	r3, [pc, #60]	; (80097e8 <MX_SAI4_Init+0xe8>)
 80097aa:	2200      	movs	r2, #0
 80097ac:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  haudio_in_sai[PDM].SlotInit.SlotActive = 0x0000FFFF;
 80097b0:	4b0d      	ldr	r3, [pc, #52]	; (80097e8 <MX_SAI4_Init+0xe8>)
 80097b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80097b6:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

  haudio_in_sai[PDM].Init.PdmInit.Activation = ENABLE;
 80097ba:	4b0b      	ldr	r3, [pc, #44]	; (80097e8 <MX_SAI4_Init+0xe8>)
 80097bc:	2201      	movs	r2, #1
 80097be:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
  haudio_in_sai[PDM].Init.PdmInit.MicPairsNbr = 1;
 80097c2:	4b09      	ldr	r3, [pc, #36]	; (80097e8 <MX_SAI4_Init+0xe8>)
 80097c4:	2201      	movs	r2, #1
 80097c6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  haudio_in_sai[PDM].Init.PdmInit.ClockEnable = SAI_PDM_CLOCK2_ENABLE;
 80097ca:	4b07      	ldr	r3, [pc, #28]	; (80097e8 <MX_SAI4_Init+0xe8>)
 80097cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80097d0:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4

  if (HAL_SAI_Init(&haudio_in_sai[PDM]) != HAL_OK)
 80097d4:	4806      	ldr	r0, [pc, #24]	; (80097f0 <MX_SAI4_Init+0xf0>)
 80097d6:	f7ff fa21 	bl	8008c1c <HAL_SAI_Init>
 80097da:	4603      	mov	r3, r0
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d001      	beq.n	80097e4 <MX_SAI4_Init+0xe4>
  {
    Error_Handler();
 80097e0:	f000 f8a0 	bl	8009924 <Error_Handler>
  }

  /* USER CODE END SAI4_Init 2 */

}
 80097e4:	bf00      	nop
 80097e6:	bd80      	pop	{r7, pc}
 80097e8:	24000554 	.word	0x24000554
 80097ec:	58005404 	.word	0x58005404
 80097f0:	24000608 	.word	0x24000608

080097f4 <MX_BDMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_BDMA_Init(void)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b082      	sub	sp, #8
 80097f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 80097fa:	4b11      	ldr	r3, [pc, #68]	; (8009840 <MX_BDMA_Init+0x4c>)
 80097fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009800:	4a0f      	ldr	r2, [pc, #60]	; (8009840 <MX_BDMA_Init+0x4c>)
 8009802:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009806:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800980a:	4b0d      	ldr	r3, [pc, #52]	; (8009840 <MX_BDMA_Init+0x4c>)
 800980c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009810:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009814:	607b      	str	r3, [r7, #4]
 8009816:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMAMUX2_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX2_OVR_IRQn, 0, 0);
 8009818:	2200      	movs	r2, #0
 800981a:	2100      	movs	r1, #0
 800981c:	2080      	movs	r0, #128	; 0x80
 800981e:	f7f8 feaa 	bl	8002576 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX2_OVR_IRQn);
 8009822:	2080      	movs	r0, #128	; 0x80
 8009824:	f7f8 fec1 	bl	80025aa <HAL_NVIC_EnableIRQ>
  /* BDMA_Channel0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 0, 0);
 8009828:	2200      	movs	r2, #0
 800982a:	2100      	movs	r1, #0
 800982c:	2081      	movs	r0, #129	; 0x81
 800982e:	f7f8 fea2 	bl	8002576 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
 8009832:	2081      	movs	r0, #129	; 0x81
 8009834:	f7f8 feb9 	bl	80025aa <HAL_NVIC_EnableIRQ>

}
 8009838:	bf00      	nop
 800983a:	3708      	adds	r7, #8
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}
 8009840:	58024400 	.word	0x58024400

08009844 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b082      	sub	sp, #8
 8009848:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800984a:	4b11      	ldr	r3, [pc, #68]	; (8009890 <MX_DMA_Init+0x4c>)
 800984c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009850:	4a0f      	ldr	r2, [pc, #60]	; (8009890 <MX_DMA_Init+0x4c>)
 8009852:	f043 0301 	orr.w	r3, r3, #1
 8009856:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800985a:	4b0d      	ldr	r3, [pc, #52]	; (8009890 <MX_DMA_Init+0x4c>)
 800985c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009860:	f003 0301 	and.w	r3, r3, #1
 8009864:	607b      	str	r3, [r7, #4]
 8009866:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8009868:	2200      	movs	r2, #0
 800986a:	2100      	movs	r1, #0
 800986c:	200c      	movs	r0, #12
 800986e:	f7f8 fe82 	bl	8002576 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8009872:	200c      	movs	r0, #12
 8009874:	f7f8 fe99 	bl	80025aa <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 0, 0);
 8009878:	2200      	movs	r2, #0
 800987a:	2100      	movs	r1, #0
 800987c:	2066      	movs	r0, #102	; 0x66
 800987e:	f7f8 fe7a 	bl	8002576 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
 8009882:	2066      	movs	r0, #102	; 0x66
 8009884:	f7f8 fe91 	bl	80025aa <HAL_NVIC_EnableIRQ>

}
 8009888:	bf00      	nop
 800988a:	3708      	adds	r7, #8
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}
 8009890:	58024400 	.word	0x58024400

08009894 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8009894:	b480      	push	{r7}
 8009896:	b085      	sub	sp, #20
 8009898:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800989a:	4b21      	ldr	r3, [pc, #132]	; (8009920 <MX_GPIO_Init+0x8c>)
 800989c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80098a0:	4a1f      	ldr	r2, [pc, #124]	; (8009920 <MX_GPIO_Init+0x8c>)
 80098a2:	f043 0301 	orr.w	r3, r3, #1
 80098a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80098aa:	4b1d      	ldr	r3, [pc, #116]	; (8009920 <MX_GPIO_Init+0x8c>)
 80098ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80098b0:	f003 0301 	and.w	r3, r3, #1
 80098b4:	60fb      	str	r3, [r7, #12]
 80098b6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80098b8:	4b19      	ldr	r3, [pc, #100]	; (8009920 <MX_GPIO_Init+0x8c>)
 80098ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80098be:	4a18      	ldr	r2, [pc, #96]	; (8009920 <MX_GPIO_Init+0x8c>)
 80098c0:	f043 0310 	orr.w	r3, r3, #16
 80098c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80098c8:	4b15      	ldr	r3, [pc, #84]	; (8009920 <MX_GPIO_Init+0x8c>)
 80098ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80098ce:	f003 0310 	and.w	r3, r3, #16
 80098d2:	60bb      	str	r3, [r7, #8]
 80098d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80098d6:	4b12      	ldr	r3, [pc, #72]	; (8009920 <MX_GPIO_Init+0x8c>)
 80098d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80098dc:	4a10      	ldr	r2, [pc, #64]	; (8009920 <MX_GPIO_Init+0x8c>)
 80098de:	f043 0308 	orr.w	r3, r3, #8
 80098e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80098e6:	4b0e      	ldr	r3, [pc, #56]	; (8009920 <MX_GPIO_Init+0x8c>)
 80098e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80098ec:	f003 0308 	and.w	r3, r3, #8
 80098f0:	607b      	str	r3, [r7, #4]
 80098f2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80098f4:	4b0a      	ldr	r3, [pc, #40]	; (8009920 <MX_GPIO_Init+0x8c>)
 80098f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80098fa:	4a09      	ldr	r2, [pc, #36]	; (8009920 <MX_GPIO_Init+0x8c>)
 80098fc:	f043 0320 	orr.w	r3, r3, #32
 8009900:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009904:	4b06      	ldr	r3, [pc, #24]	; (8009920 <MX_GPIO_Init+0x8c>)
 8009906:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800990a:	f003 0320 	and.w	r3, r3, #32
 800990e:	603b      	str	r3, [r7, #0]
 8009910:	683b      	ldr	r3, [r7, #0]

}
 8009912:	bf00      	nop
 8009914:	3714      	adds	r7, #20
 8009916:	46bd      	mov	sp, r7
 8009918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991c:	4770      	bx	lr
 800991e:	bf00      	nop
 8009920:	58024400 	.word	0x58024400

08009924 <Error_Handler>:
/* USER CODE BEGIN 4 */
/* USER CODE END 4 */


void Error_Handler(void)
{
 8009924:	b480      	push	{r7}
 8009926:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8009928:	b672      	cpsid	i
}
 800992a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800992c:	e7fe      	b.n	800992c <Error_Handler+0x8>
	...

08009930 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009930:	b480      	push	{r7}
 8009932:	b083      	sub	sp, #12
 8009934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009936:	4b0a      	ldr	r3, [pc, #40]	; (8009960 <HAL_MspInit+0x30>)
 8009938:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800993c:	4a08      	ldr	r2, [pc, #32]	; (8009960 <HAL_MspInit+0x30>)
 800993e:	f043 0302 	orr.w	r3, r3, #2
 8009942:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009946:	4b06      	ldr	r3, [pc, #24]	; (8009960 <HAL_MspInit+0x30>)
 8009948:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800994c:	f003 0302 	and.w	r3, r3, #2
 8009950:	607b      	str	r3, [r7, #4]
 8009952:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009954:	bf00      	nop
 8009956:	370c      	adds	r7, #12
 8009958:	46bd      	mov	sp, r7
 800995a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995e:	4770      	bx	lr
 8009960:	58024400 	.word	0x58024400

08009964 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8009964:	b480      	push	{r7}
 8009966:	b085      	sub	sp, #20
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	4a0b      	ldr	r2, [pc, #44]	; (80099a0 <HAL_CRC_MspInit+0x3c>)
 8009972:	4293      	cmp	r3, r2
 8009974:	d10e      	bne.n	8009994 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8009976:	4b0b      	ldr	r3, [pc, #44]	; (80099a4 <HAL_CRC_MspInit+0x40>)
 8009978:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800997c:	4a09      	ldr	r2, [pc, #36]	; (80099a4 <HAL_CRC_MspInit+0x40>)
 800997e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009982:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009986:	4b07      	ldr	r3, [pc, #28]	; (80099a4 <HAL_CRC_MspInit+0x40>)
 8009988:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800998c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009990:	60fb      	str	r3, [r7, #12]
 8009992:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8009994:	bf00      	nop
 8009996:	3714      	adds	r7, #20
 8009998:	46bd      	mov	sp, r7
 800999a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999e:	4770      	bx	lr
 80099a0:	58024c00 	.word	0x58024c00
 80099a4:	58024400 	.word	0x58024400

080099a8 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b0b0      	sub	sp, #192	; 0xc0
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80099b0:	f107 030c 	add.w	r3, r7, #12
 80099b4:	22b4      	movs	r2, #180	; 0xb4
 80099b6:	2100      	movs	r1, #0
 80099b8:	4618      	mov	r0, r3
 80099ba:	f002 f973 	bl	800bca4 <memset>
  if(DFSDM1_Init == 0)
 80099be:	4b15      	ldr	r3, [pc, #84]	; (8009a14 <HAL_DFSDM_ChannelMspInit+0x6c>)
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d122      	bne.n	8009a0c <HAL_DFSDM_ChannelMspInit+0x64>
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 80099c6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80099ca:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_D2PCLK1;
 80099cc:	2300      	movs	r3, #0
 80099ce:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80099d0:	f107 030c 	add.w	r3, r7, #12
 80099d4:	4618      	mov	r0, r3
 80099d6:	f7fc ff41 	bl	800685c <HAL_RCCEx_PeriphCLKConfig>
 80099da:	4603      	mov	r3, r0
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d001      	beq.n	80099e4 <HAL_DFSDM_ChannelMspInit+0x3c>
    {
      Error_Handler();
 80099e0:	f7ff ffa0 	bl	8009924 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 80099e4:	4b0c      	ldr	r3, [pc, #48]	; (8009a18 <HAL_DFSDM_ChannelMspInit+0x70>)
 80099e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80099ea:	4a0b      	ldr	r2, [pc, #44]	; (8009a18 <HAL_DFSDM_ChannelMspInit+0x70>)
 80099ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80099f0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80099f4:	4b08      	ldr	r3, [pc, #32]	; (8009a18 <HAL_DFSDM_ChannelMspInit+0x70>)
 80099f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80099fa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80099fe:	60bb      	str	r3, [r7, #8]
 8009a00:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8009a02:	4b04      	ldr	r3, [pc, #16]	; (8009a14 <HAL_DFSDM_ChannelMspInit+0x6c>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	3301      	adds	r3, #1
 8009a08:	4a02      	ldr	r2, [pc, #8]	; (8009a14 <HAL_DFSDM_ChannelMspInit+0x6c>)
 8009a0a:	6013      	str	r3, [r2, #0]
  }

}
 8009a0c:	bf00      	nop
 8009a0e:	37c0      	adds	r7, #192	; 0xc0
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bd80      	pop	{r7, pc}
 8009a14:	24000a58 	.word	0x24000a58
 8009a18:	58024400 	.word	0x58024400

08009a1c <HAL_SAI_MspInit>:

static uint32_t SAI1_client =0;
static uint32_t SAI4_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b0ba      	sub	sp, #232	; 0xe8
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009a24:	f107 0310 	add.w	r3, r7, #16
 8009a28:	22b4      	movs	r2, #180	; 0xb4
 8009a2a:	2100      	movs	r1, #0
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	f002 f939 	bl	800bca4 <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_B)
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	4aa9      	ldr	r2, [pc, #676]	; (8009cdc <HAL_SAI_MspInit+0x2c0>)
 8009a38:	4293      	cmp	r3, r2
 8009a3a:	f040 80a5 	bne.w	8009b88 <HAL_SAI_MspInit+0x16c>
    {
      /* Peripheral clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8009a3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a42:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 8009a44:	2300      	movs	r3, #0
 8009a46:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009a48:	f107 0310 	add.w	r3, r7, #16
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	f7fc ff05 	bl	800685c <HAL_RCCEx_PeriphCLKConfig>
 8009a52:	4603      	mov	r3, r0
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d001      	beq.n	8009a5c <HAL_SAI_MspInit+0x40>
    {
      Error_Handler();
 8009a58:	f7ff ff64 	bl	8009924 <Error_Handler>
    }

      if (SAI1_client == 0)
 8009a5c:	4ba0      	ldr	r3, [pc, #640]	; (8009ce0 <HAL_SAI_MspInit+0x2c4>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d10e      	bne.n	8009a82 <HAL_SAI_MspInit+0x66>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8009a64:	4b9f      	ldr	r3, [pc, #636]	; (8009ce4 <HAL_SAI_MspInit+0x2c8>)
 8009a66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009a6a:	4a9e      	ldr	r2, [pc, #632]	; (8009ce4 <HAL_SAI_MspInit+0x2c8>)
 8009a6c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009a70:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8009a74:	4b9b      	ldr	r3, [pc, #620]	; (8009ce4 <HAL_SAI_MspInit+0x2c8>)
 8009a76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009a7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009a7e:	60fb      	str	r3, [r7, #12]
 8009a80:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8009a82:	4b97      	ldr	r3, [pc, #604]	; (8009ce0 <HAL_SAI_MspInit+0x2c4>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	3301      	adds	r3, #1
 8009a88:	4a95      	ldr	r2, [pc, #596]	; (8009ce0 <HAL_SAI_MspInit+0x2c4>)
 8009a8a:	6013      	str	r3, [r2, #0]
    PE3     ------> SAI1_SD_B
    PF8     ------> SAI1_SCK_B
    PF7     ------> SAI1_MCLK_B
    PF9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8009a8c:	2308      	movs	r3, #8
 8009a8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009a92:	2302      	movs	r3, #2
 8009a94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a98:	2300      	movs	r3, #0
 8009a9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8009aa4:	2306      	movs	r3, #6
 8009aa6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009aaa:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8009aae:	4619      	mov	r1, r3
 8009ab0:	488d      	ldr	r0, [pc, #564]	; (8009ce8 <HAL_SAI_MspInit+0x2cc>)
 8009ab2:	f7fb fca9 	bl	8005408 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_9;
 8009ab6:	f44f 7360 	mov.w	r3, #896	; 0x380
 8009aba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009abe:	2302      	movs	r3, #2
 8009ac0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009aca:	2300      	movs	r3, #0
 8009acc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8009ad0:	2306      	movs	r3, #6
 8009ad2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8009ad6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8009ada:	4619      	mov	r1, r3
 8009adc:	4883      	ldr	r0, [pc, #524]	; (8009cec <HAL_SAI_MspInit+0x2d0>)
 8009ade:	f7fb fc93 	bl	8005408 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA1_Stream1;
 8009ae2:	4b83      	ldr	r3, [pc, #524]	; (8009cf0 <HAL_SAI_MspInit+0x2d4>)
 8009ae4:	4a83      	ldr	r2, [pc, #524]	; (8009cf4 <HAL_SAI_MspInit+0x2d8>)
 8009ae6:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 8009ae8:	4b81      	ldr	r3, [pc, #516]	; (8009cf0 <HAL_SAI_MspInit+0x2d4>)
 8009aea:	2258      	movs	r2, #88	; 0x58
 8009aec:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009aee:	4b80      	ldr	r3, [pc, #512]	; (8009cf0 <HAL_SAI_MspInit+0x2d4>)
 8009af0:	2240      	movs	r2, #64	; 0x40
 8009af2:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8009af4:	4b7e      	ldr	r3, [pc, #504]	; (8009cf0 <HAL_SAI_MspInit+0x2d4>)
 8009af6:	2200      	movs	r2, #0
 8009af8:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 8009afa:	4b7d      	ldr	r3, [pc, #500]	; (8009cf0 <HAL_SAI_MspInit+0x2d4>)
 8009afc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009b00:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8009b02:	4b7b      	ldr	r3, [pc, #492]	; (8009cf0 <HAL_SAI_MspInit+0x2d4>)
 8009b04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009b08:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8009b0a:	4b79      	ldr	r3, [pc, #484]	; (8009cf0 <HAL_SAI_MspInit+0x2d4>)
 8009b0c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009b10:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 8009b12:	4b77      	ldr	r3, [pc, #476]	; (8009cf0 <HAL_SAI_MspInit+0x2d4>)
 8009b14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009b18:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_HIGH;
 8009b1a:	4b75      	ldr	r3, [pc, #468]	; (8009cf0 <HAL_SAI_MspInit+0x2d4>)
 8009b1c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009b20:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009b22:	4b73      	ldr	r3, [pc, #460]	; (8009cf0 <HAL_SAI_MspInit+0x2d4>)
 8009b24:	2200      	movs	r2, #0
 8009b26:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8009b28:	4871      	ldr	r0, [pc, #452]	; (8009cf0 <HAL_SAI_MspInit+0x2d4>)
 8009b2a:	f7f9 f891 	bl	8002c50 <HAL_DMA_Init>
 8009b2e:	4603      	mov	r3, r0
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d001      	beq.n	8009b38 <HAL_SAI_MspInit+0x11c>
    {
      Error_Handler();
 8009b34:	f7ff fef6 	bl	8009924 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 8009b38:	2306      	movs	r3, #6
 8009b3a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    pSyncConfig.SyncEnable = DISABLE;
 8009b44:	2300      	movs	r3, #0
 8009b46:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    pSyncConfig.EventEnable = ENABLE;
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    pSyncConfig.RequestNumber = 1;
 8009b50:	2301      	movs	r3, #1
 8009b52:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai1_b, &pSyncConfig) != HAL_OK)
 8009b56:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8009b5a:	4619      	mov	r1, r3
 8009b5c:	4864      	ldr	r0, [pc, #400]	; (8009cf0 <HAL_SAI_MspInit+0x2d4>)
 8009b5e:	f7fb fb1b 	bl	8005198 <HAL_DMAEx_ConfigMuxSync>
 8009b62:	4603      	mov	r3, r0
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d001      	beq.n	8009b6c <HAL_SAI_MspInit+0x150>
    {
      Error_Handler();
 8009b68:	f7ff fedc 	bl	8009924 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	4a60      	ldr	r2, [pc, #384]	; (8009cf0 <HAL_SAI_MspInit+0x2d4>)
 8009b70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8009b74:	4a5e      	ldr	r2, [pc, #376]	; (8009cf0 <HAL_SAI_MspInit+0x2d4>)
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	4a5c      	ldr	r2, [pc, #368]	; (8009cf0 <HAL_SAI_MspInit+0x2d4>)
 8009b7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8009b82:	4a5b      	ldr	r2, [pc, #364]	; (8009cf0 <HAL_SAI_MspInit+0x2d4>)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	6393      	str	r3, [r2, #56]	; 0x38
    }
/* SAI4 */
    if(hsai->Instance==SAI4_Block_A)
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	4a5a      	ldr	r2, [pc, #360]	; (8009cf8 <HAL_SAI_MspInit+0x2dc>)
 8009b8e:	4293      	cmp	r3, r2
 8009b90:	f040 80a0 	bne.w	8009cd4 <HAL_SAI_MspInit+0x2b8>
    {
    /* Peripheral clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI4A;
 8009b94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b98:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Sai4AClockSelection = RCC_SAI4ACLKSOURCE_PLL;
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009ba0:	f107 0310 	add.w	r3, r7, #16
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	f7fc fe59 	bl	800685c <HAL_RCCEx_PeriphCLKConfig>
 8009baa:	4603      	mov	r3, r0
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d001      	beq.n	8009bb4 <HAL_SAI_MspInit+0x198>
    {
      Error_Handler();
 8009bb0:	f7ff feb8 	bl	8009924 <Error_Handler>
    }

    if (SAI4_client == 0)
 8009bb4:	4b51      	ldr	r3, [pc, #324]	; (8009cfc <HAL_SAI_MspInit+0x2e0>)
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d10e      	bne.n	8009bda <HAL_SAI_MspInit+0x1be>
    {
       __HAL_RCC_SAI4_CLK_ENABLE();
 8009bbc:	4b49      	ldr	r3, [pc, #292]	; (8009ce4 <HAL_SAI_MspInit+0x2c8>)
 8009bbe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009bc2:	4a48      	ldr	r2, [pc, #288]	; (8009ce4 <HAL_SAI_MspInit+0x2c8>)
 8009bc4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009bc8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009bcc:	4b45      	ldr	r3, [pc, #276]	; (8009ce4 <HAL_SAI_MspInit+0x2c8>)
 8009bce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009bd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009bd6:	60bb      	str	r3, [r7, #8]
 8009bd8:	68bb      	ldr	r3, [r7, #8]
    }
    SAI4_client ++;
 8009bda:	4b48      	ldr	r3, [pc, #288]	; (8009cfc <HAL_SAI_MspInit+0x2e0>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	3301      	adds	r3, #1
 8009be0:	4a46      	ldr	r2, [pc, #280]	; (8009cfc <HAL_SAI_MspInit+0x2e0>)
 8009be2:	6013      	str	r3, [r2, #0]
    /**SAI4_A_Block_A GPIO Configuration
    PE4     ------> SAI4_D2
    PE5     ------> SAI4_CK2
    PD6     ------> SAI4_D1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8009be4:	2330      	movs	r3, #48	; 0x30
 8009be6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009bea:	2302      	movs	r3, #2
 8009bec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 8009bfc:	230a      	movs	r3, #10
 8009bfe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009c02:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8009c06:	4619      	mov	r1, r3
 8009c08:	4837      	ldr	r0, [pc, #220]	; (8009ce8 <HAL_SAI_MspInit+0x2cc>)
 8009c0a:	f7fb fbfd 	bl	8005408 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8009c0e:	2340      	movs	r3, #64	; 0x40
 8009c10:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009c14:	2302      	movs	r3, #2
 8009c16:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009c20:	2300      	movs	r3, #0
 8009c22:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF1_SAI4;
 8009c26:	2301      	movs	r3, #1
 8009c28:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009c2c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8009c30:	4619      	mov	r1, r3
 8009c32:	4833      	ldr	r0, [pc, #204]	; (8009d00 <HAL_SAI_MspInit+0x2e4>)
 8009c34:	f7fb fbe8 	bl	8005408 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai4_a.Instance = BDMA_Channel0;
 8009c38:	4b32      	ldr	r3, [pc, #200]	; (8009d04 <HAL_SAI_MspInit+0x2e8>)
 8009c3a:	4a33      	ldr	r2, [pc, #204]	; (8009d08 <HAL_SAI_MspInit+0x2ec>)
 8009c3c:	601a      	str	r2, [r3, #0]
    hdma_sai4_a.Init.Request = BDMA_REQUEST_SAI4_A;
 8009c3e:	4b31      	ldr	r3, [pc, #196]	; (8009d04 <HAL_SAI_MspInit+0x2e8>)
 8009c40:	220f      	movs	r2, #15
 8009c42:	605a      	str	r2, [r3, #4]
    hdma_sai4_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009c44:	4b2f      	ldr	r3, [pc, #188]	; (8009d04 <HAL_SAI_MspInit+0x2e8>)
 8009c46:	2200      	movs	r2, #0
 8009c48:	609a      	str	r2, [r3, #8]
    hdma_sai4_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8009c4a:	4b2e      	ldr	r3, [pc, #184]	; (8009d04 <HAL_SAI_MspInit+0x2e8>)
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	60da      	str	r2, [r3, #12]
    hdma_sai4_a.Init.MemInc = DMA_MINC_ENABLE;
 8009c50:	4b2c      	ldr	r3, [pc, #176]	; (8009d04 <HAL_SAI_MspInit+0x2e8>)
 8009c52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009c56:	611a      	str	r2, [r3, #16]
    hdma_sai4_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009c58:	4b2a      	ldr	r3, [pc, #168]	; (8009d04 <HAL_SAI_MspInit+0x2e8>)
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	615a      	str	r2, [r3, #20]
    hdma_sai4_a.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009c5e:	4b29      	ldr	r3, [pc, #164]	; (8009d04 <HAL_SAI_MspInit+0x2e8>)
 8009c60:	2200      	movs	r2, #0
 8009c62:	619a      	str	r2, [r3, #24]
    hdma_sai4_a.Init.Mode = DMA_CIRCULAR;
 8009c64:	4b27      	ldr	r3, [pc, #156]	; (8009d04 <HAL_SAI_MspInit+0x2e8>)
 8009c66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009c6a:	61da      	str	r2, [r3, #28]
    hdma_sai4_a.Init.Priority = DMA_PRIORITY_HIGH;
 8009c6c:	4b25      	ldr	r3, [pc, #148]	; (8009d04 <HAL_SAI_MspInit+0x2e8>)
 8009c6e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009c72:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai4_a) != HAL_OK)
 8009c74:	4823      	ldr	r0, [pc, #140]	; (8009d04 <HAL_SAI_MspInit+0x2e8>)
 8009c76:	f7f8 ffeb 	bl	8002c50 <HAL_DMA_Init>
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d001      	beq.n	8009c84 <HAL_SAI_MspInit+0x268>
    {
      Error_Handler();
 8009c80:	f7ff fe50 	bl	8009924 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX2_SYNC_EXTI0;
 8009c84:	230e      	movs	r3, #14
 8009c86:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    pSyncConfig.SyncEnable = DISABLE;
 8009c90:	2300      	movs	r3, #0
 8009c92:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    pSyncConfig.EventEnable = ENABLE;
 8009c96:	2301      	movs	r3, #1
 8009c98:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    pSyncConfig.RequestNumber = 1;
 8009c9c:	2301      	movs	r3, #1
 8009c9e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai4_a, &pSyncConfig) != HAL_OK)
 8009ca2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8009ca6:	4619      	mov	r1, r3
 8009ca8:	4816      	ldr	r0, [pc, #88]	; (8009d04 <HAL_SAI_MspInit+0x2e8>)
 8009caa:	f7fb fa75 	bl	8005198 <HAL_DMAEx_ConfigMuxSync>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d001      	beq.n	8009cb8 <HAL_SAI_MspInit+0x29c>
    {
      Error_Handler();
 8009cb4:	f7ff fe36 	bl	8009924 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai4_a);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	4a12      	ldr	r2, [pc, #72]	; (8009d04 <HAL_SAI_MspInit+0x2e8>)
 8009cbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8009cc0:	4a10      	ldr	r2, [pc, #64]	; (8009d04 <HAL_SAI_MspInit+0x2e8>)
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai4_a);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	4a0e      	ldr	r2, [pc, #56]	; (8009d04 <HAL_SAI_MspInit+0x2e8>)
 8009cca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8009cce:	4a0d      	ldr	r2, [pc, #52]	; (8009d04 <HAL_SAI_MspInit+0x2e8>)
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	6393      	str	r3, [r2, #56]	; 0x38

    }
}
 8009cd4:	bf00      	nop
 8009cd6:	37e8      	adds	r7, #232	; 0xe8
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	bd80      	pop	{r7, pc}
 8009cdc:	40015824 	.word	0x40015824
 8009ce0:	24000a5c 	.word	0x24000a5c
 8009ce4:	58024400 	.word	0x58024400
 8009ce8:	58021000 	.word	0x58021000
 8009cec:	58021400 	.word	0x58021400
 8009cf0:	24000de8 	.word	0x24000de8
 8009cf4:	40020028 	.word	0x40020028
 8009cf8:	58005404 	.word	0x58005404
 8009cfc:	24000a60 	.word	0x24000a60
 8009d00:	58020c00 	.word	0x58020c00
 8009d04:	24000d70 	.word	0x24000d70
 8009d08:	58025408 	.word	0x58025408

08009d0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009d0c:	b480      	push	{r7}
 8009d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8009d10:	e7fe      	b.n	8009d10 <NMI_Handler+0x4>

08009d12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009d12:	b480      	push	{r7}
 8009d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009d16:	e7fe      	b.n	8009d16 <HardFault_Handler+0x4>

08009d18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009d18:	b480      	push	{r7}
 8009d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009d1c:	e7fe      	b.n	8009d1c <MemManage_Handler+0x4>

08009d1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009d1e:	b480      	push	{r7}
 8009d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009d22:	e7fe      	b.n	8009d22 <BusFault_Handler+0x4>

08009d24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009d24:	b480      	push	{r7}
 8009d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009d28:	e7fe      	b.n	8009d28 <UsageFault_Handler+0x4>

08009d2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009d2a:	b480      	push	{r7}
 8009d2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009d2e:	bf00      	nop
 8009d30:	46bd      	mov	sp, r7
 8009d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d36:	4770      	bx	lr

08009d38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009d38:	b480      	push	{r7}
 8009d3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009d3c:	bf00      	nop
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d44:	4770      	bx	lr

08009d46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009d46:	b480      	push	{r7}
 8009d48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009d4a:	bf00      	nop
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d52:	4770      	bx	lr

08009d54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009d58:	f7f8 faee 	bl	8002338 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009d5c:	bf00      	nop
 8009d5e:	bd80      	pop	{r7, pc}

08009d60 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 8009d64:	4802      	ldr	r0, [pc, #8]	; (8009d70 <DMA1_Stream1_IRQHandler+0x10>)
 8009d66:	f7f9 fef1 	bl	8003b4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8009d6a:	bf00      	nop
 8009d6c:	bd80      	pop	{r7, pc}
 8009d6e:	bf00      	nop
 8009d70:	24000de8 	.word	0x24000de8

08009d74 <DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX1 overrun interrupt.
  */
void DMAMUX1_OVR_IRQHandler(void)
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMAMUX1_OVR_IRQn 0 */
  // Handle DMA1_Stream1
  HAL_DMAEx_MUX_IRQHandler(&hdma_sai1_b);
 8009d78:	4802      	ldr	r0, [pc, #8]	; (8009d84 <DMAMUX1_OVR_IRQHandler+0x10>)
 8009d7a:	f7fb faf2 	bl	8005362 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMAMUX1_OVR_IRQn 1 */
}
 8009d7e:	bf00      	nop
 8009d80:	bd80      	pop	{r7, pc}
 8009d82:	bf00      	nop
 8009d84:	24000de8 	.word	0x24000de8

08009d88 <DMAMUX2_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX2 overrun interrupt.
  */
void DMAMUX2_OVR_IRQHandler(void)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX2_OVR_IRQn 0 */

  /* USER CODE END DMAMUX2_OVR_IRQn 0 */
  // Handle BDMA_Channel0
  HAL_DMAEx_MUX_IRQHandler(&hdma_sai4_a);
 8009d8c:	4802      	ldr	r0, [pc, #8]	; (8009d98 <DMAMUX2_OVR_IRQHandler+0x10>)
 8009d8e:	f7fb fae8 	bl	8005362 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX2_OVR_IRQn 1 */

  /* USER CODE END DMAMUX2_OVR_IRQn 1 */
}
 8009d92:	bf00      	nop
 8009d94:	bd80      	pop	{r7, pc}
 8009d96:	bf00      	nop
 8009d98:	24000d70 	.word	0x24000d70

08009d9c <BDMA_Channel0_IRQHandler>:

/**
  * @brief This function handles BDMA channel0 global interrupt.
  */
void BDMA_Channel0_IRQHandler(void)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  //HAL_DMA_IRQHandler(&hdma_sai4_a);
	//HAL_DMA_IRQHandler(&haudio_in_sai[PDM].hdmarx);
	BSP_AUDIO_IN_IRQHandler(PDM, AUDIO_IN_DEVICE_DIGITAL_MIC1);
 8009da0:	2110      	movs	r1, #16
 8009da2:	2001      	movs	r0, #1
 8009da4:	f7f7 ff4a 	bl	8001c3c <BSP_AUDIO_IN_IRQHandler>
	BSP_AUDIO_IN_TransferComplete_CallBack(PDM);
 8009da8:	2001      	movs	r0, #1
 8009daa:	f7f7 ff97 	bl	8001cdc <BSP_AUDIO_IN_TransferComplete_CallBack>
  /* USER CODE BEGIN BDMA_Channel0_IRQn 1 */

  /* USER CODE END BDMA_Channel0_IRQn 1 */
}
 8009dae:	bf00      	nop
 8009db0:	bd80      	pop	{r7, pc}
	...

08009db4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8009db4:	b480      	push	{r7}
 8009db6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8009db8:	4b32      	ldr	r3, [pc, #200]	; (8009e84 <SystemInit+0xd0>)
 8009dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dbe:	4a31      	ldr	r2, [pc, #196]	; (8009e84 <SystemInit+0xd0>)
 8009dc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009dc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8009dc8:	4b2f      	ldr	r3, [pc, #188]	; (8009e88 <SystemInit+0xd4>)
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f003 030f 	and.w	r3, r3, #15
 8009dd0:	2b06      	cmp	r3, #6
 8009dd2:	d807      	bhi.n	8009de4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8009dd4:	4b2c      	ldr	r3, [pc, #176]	; (8009e88 <SystemInit+0xd4>)
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f023 030f 	bic.w	r3, r3, #15
 8009ddc:	4a2a      	ldr	r2, [pc, #168]	; (8009e88 <SystemInit+0xd4>)
 8009dde:	f043 0307 	orr.w	r3, r3, #7
 8009de2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8009de4:	4b29      	ldr	r3, [pc, #164]	; (8009e8c <SystemInit+0xd8>)
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	4a28      	ldr	r2, [pc, #160]	; (8009e8c <SystemInit+0xd8>)
 8009dea:	f043 0301 	orr.w	r3, r3, #1
 8009dee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8009df0:	4b26      	ldr	r3, [pc, #152]	; (8009e8c <SystemInit+0xd8>)
 8009df2:	2200      	movs	r2, #0
 8009df4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8009df6:	4b25      	ldr	r3, [pc, #148]	; (8009e8c <SystemInit+0xd8>)
 8009df8:	681a      	ldr	r2, [r3, #0]
 8009dfa:	4924      	ldr	r1, [pc, #144]	; (8009e8c <SystemInit+0xd8>)
 8009dfc:	4b24      	ldr	r3, [pc, #144]	; (8009e90 <SystemInit+0xdc>)
 8009dfe:	4013      	ands	r3, r2
 8009e00:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8009e02:	4b21      	ldr	r3, [pc, #132]	; (8009e88 <SystemInit+0xd4>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	f003 0308 	and.w	r3, r3, #8
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d007      	beq.n	8009e1e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8009e0e:	4b1e      	ldr	r3, [pc, #120]	; (8009e88 <SystemInit+0xd4>)
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	f023 030f 	bic.w	r3, r3, #15
 8009e16:	4a1c      	ldr	r2, [pc, #112]	; (8009e88 <SystemInit+0xd4>)
 8009e18:	f043 0307 	orr.w	r3, r3, #7
 8009e1c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8009e1e:	4b1b      	ldr	r3, [pc, #108]	; (8009e8c <SystemInit+0xd8>)
 8009e20:	2200      	movs	r2, #0
 8009e22:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8009e24:	4b19      	ldr	r3, [pc, #100]	; (8009e8c <SystemInit+0xd8>)
 8009e26:	2200      	movs	r2, #0
 8009e28:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8009e2a:	4b18      	ldr	r3, [pc, #96]	; (8009e8c <SystemInit+0xd8>)
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8009e30:	4b16      	ldr	r3, [pc, #88]	; (8009e8c <SystemInit+0xd8>)
 8009e32:	4a18      	ldr	r2, [pc, #96]	; (8009e94 <SystemInit+0xe0>)
 8009e34:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8009e36:	4b15      	ldr	r3, [pc, #84]	; (8009e8c <SystemInit+0xd8>)
 8009e38:	4a17      	ldr	r2, [pc, #92]	; (8009e98 <SystemInit+0xe4>)
 8009e3a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8009e3c:	4b13      	ldr	r3, [pc, #76]	; (8009e8c <SystemInit+0xd8>)
 8009e3e:	4a17      	ldr	r2, [pc, #92]	; (8009e9c <SystemInit+0xe8>)
 8009e40:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8009e42:	4b12      	ldr	r3, [pc, #72]	; (8009e8c <SystemInit+0xd8>)
 8009e44:	2200      	movs	r2, #0
 8009e46:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8009e48:	4b10      	ldr	r3, [pc, #64]	; (8009e8c <SystemInit+0xd8>)
 8009e4a:	4a14      	ldr	r2, [pc, #80]	; (8009e9c <SystemInit+0xe8>)
 8009e4c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8009e4e:	4b0f      	ldr	r3, [pc, #60]	; (8009e8c <SystemInit+0xd8>)
 8009e50:	2200      	movs	r2, #0
 8009e52:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8009e54:	4b0d      	ldr	r3, [pc, #52]	; (8009e8c <SystemInit+0xd8>)
 8009e56:	4a11      	ldr	r2, [pc, #68]	; (8009e9c <SystemInit+0xe8>)
 8009e58:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8009e5a:	4b0c      	ldr	r3, [pc, #48]	; (8009e8c <SystemInit+0xd8>)
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8009e60:	4b0a      	ldr	r3, [pc, #40]	; (8009e8c <SystemInit+0xd8>)
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	4a09      	ldr	r2, [pc, #36]	; (8009e8c <SystemInit+0xd8>)
 8009e66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009e6a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8009e6c:	4b07      	ldr	r3, [pc, #28]	; (8009e8c <SystemInit+0xd8>)
 8009e6e:	2200      	movs	r2, #0
 8009e70:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8009e72:	4b0b      	ldr	r3, [pc, #44]	; (8009ea0 <SystemInit+0xec>)
 8009e74:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8009e78:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8009e7a:	bf00      	nop
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e82:	4770      	bx	lr
 8009e84:	e000ed00 	.word	0xe000ed00
 8009e88:	52002000 	.word	0x52002000
 8009e8c:	58024400 	.word	0x58024400
 8009e90:	eaf6ed7f 	.word	0xeaf6ed7f
 8009e94:	02020200 	.word	0x02020200
 8009e98:	01ff0000 	.word	0x01ff0000
 8009e9c:	01010280 	.word	0x01010280
 8009ea0:	52004000 	.word	0x52004000

08009ea4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8009ea4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009edc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8009ea8:	f7ff ff84 	bl	8009db4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009eac:	480c      	ldr	r0, [pc, #48]	; (8009ee0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8009eae:	490d      	ldr	r1, [pc, #52]	; (8009ee4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8009eb0:	4a0d      	ldr	r2, [pc, #52]	; (8009ee8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8009eb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009eb4:	e002      	b.n	8009ebc <LoopCopyDataInit>

08009eb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009eb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009eb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009eba:	3304      	adds	r3, #4

08009ebc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009ebc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009ebe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009ec0:	d3f9      	bcc.n	8009eb6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009ec2:	4a0a      	ldr	r2, [pc, #40]	; (8009eec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8009ec4:	4c0a      	ldr	r4, [pc, #40]	; (8009ef0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8009ec6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009ec8:	e001      	b.n	8009ece <LoopFillZerobss>

08009eca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009eca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009ecc:	3204      	adds	r2, #4

08009ece <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009ece:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009ed0:	d3fb      	bcc.n	8009eca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8009ed2:	f001 fec3 	bl	800bc5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009ed6:	f7ff fb1d 	bl	8009514 <main>
  bx  lr
 8009eda:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8009edc:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8009ee0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8009ee4:	2400047c 	.word	0x2400047c
  ldr r2, =_sidata
 8009ee8:	0800c3a0 	.word	0x0800c3a0
  ldr r2, =_sbss
 8009eec:	2400047c 	.word	0x2400047c
  ldr r4, =_ebss
 8009ef0:	24000e60 	.word	0x24000e60

08009ef4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009ef4:	e7fe      	b.n	8009ef4 <ADC3_IRQHandler>
	...

08009ef8 <D16_GENERIC>:
 8009ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009efc:	b089      	sub	sp, #36	; 0x24
 8009efe:	6993      	ldr	r3, [r2, #24]
 8009f00:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8009f02:	9103      	str	r1, [sp, #12]
 8009f04:	9307      	str	r3, [sp, #28]
 8009f06:	69d3      	ldr	r3, [r2, #28]
 8009f08:	e9d2 c102 	ldrd	ip, r1, [r2, #8]
 8009f0c:	e9d2 4a04 	ldrd	r4, sl, [r2, #16]
 8009f10:	9106      	str	r1, [sp, #24]
 8009f12:	e9d2 810c 	ldrd	r8, r1, [r2, #48]	; 0x30
 8009f16:	2d00      	cmp	r5, #0
 8009f18:	d063      	beq.n	8009fe2 <D16_GENERIC+0xea>
 8009f1a:	f001 0520 	and.w	r5, r1, #32
 8009f1e:	f001 0110 	and.w	r1, r1, #16
 8009f22:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 800a004 <D16_GENERIC+0x10c>
 8009f26:	46c1      	mov	r9, r8
 8009f28:	9104      	str	r1, [sp, #16]
 8009f2a:	2100      	movs	r1, #0
 8009f2c:	9505      	str	r5, [sp, #20]
 8009f2e:	e04d      	b.n	8009fcc <D16_GENERIC+0xd4>
 8009f30:	5d87      	ldrb	r7, [r0, r6]
 8009f32:	7805      	ldrb	r5, [r0, #0]
 8009f34:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 8009f38:	eb05 2707 	add.w	r7, r5, r7, lsl #8
 8009f3c:	b2fe      	uxtb	r6, r7
 8009f3e:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8009f42:	f85e 5026 	ldr.w	r5, [lr, r6, lsl #2]
 8009f46:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
 8009f4a:	441d      	add	r5, r3
 8009f4c:	eb06 2395 	add.w	r3, r6, r5, lsr #10
 8009f50:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8009f54:	f3c3 0609 	ubfx	r6, r3, #0, #10
 8009f58:	0a9b      	lsrs	r3, r3, #10
 8009f5a:	ea46 4605 	orr.w	r6, r6, r5, lsl #16
 8009f5e:	4d27      	ldr	r5, [pc, #156]	; (8009ffc <D16_GENERIC+0x104>)
 8009f60:	fb26 c505 	smlad	r5, r6, r5, ip
 8009f64:	4f26      	ldr	r7, [pc, #152]	; (800a000 <D16_GENERIC+0x108>)
 8009f66:	fb26 fc07 	smuad	ip, r6, r7
 8009f6a:	9e04      	ldr	r6, [sp, #16]
 8009f6c:	f101 0801 	add.w	r8, r1, #1
 8009f70:	f5a5 6500 	sub.w	r5, r5, #2048	; 0x800
 8009f74:	b1ae      	cbz	r6, 8009fa2 <D16_GENERIC+0xaa>
 8009f76:	442c      	add	r4, r5
 8009f78:	f8d2 b020 	ldr.w	fp, [r2, #32]
 8009f7c:	eba4 040a 	sub.w	r4, r4, sl
 8009f80:	46aa      	mov	sl, r5
 8009f82:	17e7      	asrs	r7, r4, #31
 8009f84:	fba4 450b 	umull	r4, r5, r4, fp
 8009f88:	e9cd 4500 	strd	r4, r5, [sp]
 8009f8c:	fb0b 5407 	mla	r4, fp, r7, r5
 8009f90:	9401      	str	r4, [sp, #4]
 8009f92:	e9dd 4500 	ldrd	r4, r5, [sp]
 8009f96:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 8009f9a:	f145 0500 	adc.w	r5, r5, #0
 8009f9e:	006c      	lsls	r4, r5, #1
 8009fa0:	4625      	mov	r5, r4
 8009fa2:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 8009fa6:	042d      	lsls	r5, r5, #16
 8009fa8:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009fac:	2700      	movs	r7, #0
 8009fae:	fb01 fb0b 	mul.w	fp, r1, fp
 8009fb2:	fa1f f188 	uxth.w	r1, r8
 8009fb6:	fbc9 6705 	smlal	r6, r7, r9, r5
 8009fba:	9e03      	ldr	r6, [sp, #12]
 8009fbc:	10bd      	asrs	r5, r7, #2
 8009fbe:	f305 050f 	ssat	r5, #16, r5
 8009fc2:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 8009fc6:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8009fc8:	428d      	cmp	r5, r1
 8009fca:	d90a      	bls.n	8009fe2 <D16_GENERIC+0xea>
 8009fcc:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 8009fce:	2d01      	cmp	r5, #1
 8009fd0:	b2ee      	uxtb	r6, r5
 8009fd2:	d1ad      	bne.n	8009f30 <D16_GENERIC+0x38>
 8009fd4:	9d05      	ldr	r5, [sp, #20]
 8009fd6:	f850 7b02 	ldr.w	r7, [r0], #2
 8009fda:	2d00      	cmp	r5, #0
 8009fdc:	d0ae      	beq.n	8009f3c <D16_GENERIC+0x44>
 8009fde:	ba7f      	rev16	r7, r7
 8009fe0:	e7ac      	b.n	8009f3c <D16_GENERIC+0x44>
 8009fe2:	2000      	movs	r0, #0
 8009fe4:	9906      	ldr	r1, [sp, #24]
 8009fe6:	61d3      	str	r3, [r2, #28]
 8009fe8:	9b07      	ldr	r3, [sp, #28]
 8009fea:	f8c2 c008 	str.w	ip, [r2, #8]
 8009fee:	60d1      	str	r1, [r2, #12]
 8009ff0:	6193      	str	r3, [r2, #24]
 8009ff2:	e9c2 4a04 	strd	r4, sl, [r2, #16]
 8009ff6:	b009      	add	sp, #36	; 0x24
 8009ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ffc:	00030001 	.word	0x00030001
 800a000:	00010003 	.word	0x00010003
 800a004:	24000000 	.word	0x24000000

0800a008 <D24_GENERIC>:
 800a008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a00c:	e9d2 4304 	ldrd	r4, r3, [r2, #16]
 800a010:	b089      	sub	sp, #36	; 0x24
 800a012:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 800a014:	9303      	str	r3, [sp, #12]
 800a016:	6993      	ldr	r3, [r2, #24]
 800a018:	9104      	str	r1, [sp, #16]
 800a01a:	9307      	str	r3, [sp, #28]
 800a01c:	69d1      	ldr	r1, [r2, #28]
 800a01e:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 800a022:	e9d2 a50c 	ldrd	sl, r5, [r2, #48]	; 0x30
 800a026:	2e00      	cmp	r6, #0
 800a028:	f000 8088 	beq.w	800a13c <D24_GENERIC+0x134>
 800a02c:	f005 0620 	and.w	r6, r5, #32
 800a030:	f005 0510 	and.w	r5, r5, #16
 800a034:	f04f 0c00 	mov.w	ip, #0
 800a038:	f8df e140 	ldr.w	lr, [pc, #320]	; 800a17c <D24_GENERIC+0x174>
 800a03c:	9606      	str	r6, [sp, #24]
 800a03e:	9505      	str	r5, [sp, #20]
 800a040:	e064      	b.n	800a10c <D24_GENERIC+0x104>
 800a042:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 800a046:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 800a04a:	f810 b007 	ldrb.w	fp, [r0, r7]
 800a04e:	042d      	lsls	r5, r5, #16
 800a050:	19f0      	adds	r0, r6, r7
 800a052:	eb05 250b 	add.w	r5, r5, fp, lsl #8
 800a056:	44a9      	add	r9, r5
 800a058:	fa5f f689 	uxtb.w	r6, r9
 800a05c:	f3c9 2707 	ubfx	r7, r9, #8, #8
 800a060:	ea4f 4919 	mov.w	r9, r9, lsr #16
 800a064:	f85e 6026 	ldr.w	r6, [lr, r6, lsl #2]
 800a068:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
 800a06c:	eb06 2691 	add.w	r6, r6, r1, lsr #10
 800a070:	f85e 1029 	ldr.w	r1, [lr, r9, lsl #2]
 800a074:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 800a078:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800a07c:	f3c7 0509 	ubfx	r5, r7, #0, #10
 800a080:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 800a084:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 800a088:	4d3a      	ldr	r5, [pc, #232]	; (800a174 <D24_GENERIC+0x16c>)
 800a08a:	fb26 8705 	smlad	r7, r6, r5, r8
 800a08e:	4d3a      	ldr	r5, [pc, #232]	; (800a178 <D24_GENERIC+0x170>)
 800a090:	fb26 3805 	smlad	r8, r6, r5, r3
 800a094:	f3c1 0309 	ubfx	r3, r1, #0, #10
 800a098:	eb03 0b43 	add.w	fp, r3, r3, lsl #1
 800a09c:	2301      	movs	r3, #1
 800a09e:	eb08 084b 	add.w	r8, r8, fp, lsl #1
 800a0a2:	fb26 f603 	smuad	r6, r6, r3
 800a0a6:	eb0c 0903 	add.w	r9, ip, r3
 800a0aa:	eb0b 0306 	add.w	r3, fp, r6
 800a0ae:	9e05      	ldr	r6, [sp, #20]
 800a0b0:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 800a0b4:	b1ae      	cbz	r6, 800a0e2 <D24_GENERIC+0xda>
 800a0b6:	442c      	add	r4, r5
 800a0b8:	9e03      	ldr	r6, [sp, #12]
 800a0ba:	f8d2 b020 	ldr.w	fp, [r2, #32]
 800a0be:	1ba4      	subs	r4, r4, r6
 800a0c0:	9503      	str	r5, [sp, #12]
 800a0c2:	17e7      	asrs	r7, r4, #31
 800a0c4:	fba4 450b 	umull	r4, r5, r4, fp
 800a0c8:	e9cd 4500 	strd	r4, r5, [sp]
 800a0cc:	fb0b 5407 	mla	r4, fp, r7, r5
 800a0d0:	9401      	str	r4, [sp, #4]
 800a0d2:	e9dd 4500 	ldrd	r4, r5, [sp]
 800a0d6:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800a0da:	f145 0500 	adc.w	r5, r5, #0
 800a0de:	006c      	lsls	r4, r5, #1
 800a0e0:	4625      	mov	r5, r4
 800a0e2:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 800a0e6:	03ad      	lsls	r5, r5, #14
 800a0e8:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a0ec:	2700      	movs	r7, #0
 800a0ee:	fb0c fb0b 	mul.w	fp, ip, fp
 800a0f2:	fa1f fc89 	uxth.w	ip, r9
 800a0f6:	fbca 6705 	smlal	r6, r7, sl, r5
 800a0fa:	9e04      	ldr	r6, [sp, #16]
 800a0fc:	10bd      	asrs	r5, r7, #2
 800a0fe:	f305 050f 	ssat	r5, #16, r5
 800a102:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 800a106:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800a108:	4565      	cmp	r5, ip
 800a10a:	d917      	bls.n	800a13c <D24_GENERIC+0x134>
 800a10c:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800a10e:	f890 9000 	ldrb.w	r9, [r0]
 800a112:	b2ef      	uxtb	r7, r5
 800a114:	2d01      	cmp	r5, #1
 800a116:	b23e      	sxth	r6, r7
 800a118:	d193      	bne.n	800a042 <D24_GENERIC+0x3a>
 800a11a:	9d06      	ldr	r5, [sp, #24]
 800a11c:	b1dd      	cbz	r5, 800a156 <D24_GENERIC+0x14e>
 800a11e:	78c7      	ldrb	r7, [r0, #3]
 800a120:	ea4f 2609 	mov.w	r6, r9, lsl #8
 800a124:	f01c 0f01 	tst.w	ip, #1
 800a128:	ea4f 2507 	mov.w	r5, r7, lsl #8
 800a12c:	eb06 4607 	add.w	r6, r6, r7, lsl #16
 800a130:	d11a      	bne.n	800a168 <D24_GENERIC+0x160>
 800a132:	f890 9001 	ldrb.w	r9, [r0, #1]
 800a136:	3002      	adds	r0, #2
 800a138:	44b1      	add	r9, r6
 800a13a:	e78d      	b.n	800a058 <D24_GENERIC+0x50>
 800a13c:	6093      	str	r3, [r2, #8]
 800a13e:	2000      	movs	r0, #0
 800a140:	9b03      	ldr	r3, [sp, #12]
 800a142:	f8c2 800c 	str.w	r8, [r2, #12]
 800a146:	6153      	str	r3, [r2, #20]
 800a148:	9b07      	ldr	r3, [sp, #28]
 800a14a:	61d1      	str	r1, [r2, #28]
 800a14c:	6114      	str	r4, [r2, #16]
 800a14e:	6193      	str	r3, [r2, #24]
 800a150:	b009      	add	sp, #36	; 0x24
 800a152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a156:	7845      	ldrb	r5, [r0, #1]
 800a158:	3003      	adds	r0, #3
 800a15a:	f810 6c01 	ldrb.w	r6, [r0, #-1]
 800a15e:	022d      	lsls	r5, r5, #8
 800a160:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 800a164:	44a9      	add	r9, r5
 800a166:	e777      	b.n	800a058 <D24_GENERIC+0x50>
 800a168:	7886      	ldrb	r6, [r0, #2]
 800a16a:	3004      	adds	r0, #4
 800a16c:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 800a170:	44a9      	add	r9, r5
 800a172:	e771      	b.n	800a058 <D24_GENERIC+0x50>
 800a174:	00030001 	.word	0x00030001
 800a178:	00060007 	.word	0x00060007
 800a17c:	24000000 	.word	0x24000000

0800a180 <D32_GENERIC>:
 800a180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a184:	e9d2 4304 	ldrd	r4, r3, [r2, #16]
 800a188:	b089      	sub	sp, #36	; 0x24
 800a18a:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800a18c:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 800a18e:	9302      	str	r3, [sp, #8]
 800a190:	6993      	ldr	r3, [r2, #24]
 800a192:	9104      	str	r1, [sp, #16]
 800a194:	9307      	str	r3, [sp, #28]
 800a196:	9503      	str	r5, [sp, #12]
 800a198:	69d1      	ldr	r1, [r2, #28]
 800a19a:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800a19c:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 800a1a0:	2e00      	cmp	r6, #0
 800a1a2:	f000 8097 	beq.w	800a2d4 <D32_GENERIC+0x154>
 800a1a6:	f005 0620 	and.w	r6, r5, #32
 800a1aa:	f005 0510 	and.w	r5, r5, #16
 800a1ae:	f04f 0e00 	mov.w	lr, #0
 800a1b2:	f8df c150 	ldr.w	ip, [pc, #336]	; 800a304 <D32_GENERIC+0x184>
 800a1b6:	9606      	str	r6, [sp, #24]
 800a1b8:	9505      	str	r5, [sp, #20]
 800a1ba:	e079      	b.n	800a2b0 <D32_GENERIC+0x130>
 800a1bc:	783d      	ldrb	r5, [r7, #0]
 800a1be:	f810 b009 	ldrb.w	fp, [r0, r9]
 800a1c2:	042d      	lsls	r5, r5, #16
 800a1c4:	f810 a006 	ldrb.w	sl, [r0, r6]
 800a1c8:	f890 9000 	ldrb.w	r9, [r0]
 800a1cc:	eb07 0046 	add.w	r0, r7, r6, lsl #1
 800a1d0:	eb05 650b 	add.w	r5, r5, fp, lsl #24
 800a1d4:	eb05 250a 	add.w	r5, r5, sl, lsl #8
 800a1d8:	44a9      	add	r9, r5
 800a1da:	fa5f f789 	uxtb.w	r7, r9
 800a1de:	f3c9 2507 	ubfx	r5, r9, #8, #8
 800a1e2:	f3c9 4607 	ubfx	r6, r9, #16, #8
 800a1e6:	ea4f 6919 	mov.w	r9, r9, lsr #24
 800a1ea:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 800a1ee:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 800a1f2:	eb07 2191 	add.w	r1, r7, r1, lsr #10
 800a1f6:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
 800a1fa:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
 800a1fe:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800a202:	f3c1 0909 	ubfx	r9, r1, #0, #10
 800a206:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 800a20a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800a20e:	eb07 2196 	add.w	r1, r7, r6, lsr #10
 800a212:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800a216:	ea45 4909 	orr.w	r9, r5, r9, lsl #16
 800a21a:	f3c1 0509 	ubfx	r5, r1, #0, #10
 800a21e:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 800a222:	4d34      	ldr	r5, [pc, #208]	; (800a2f4 <D32_GENERIC+0x174>)
 800a224:	fb29 8805 	smlad	r8, r9, r5, r8
 800a228:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 800a22c:	fb26 8705 	smlad	r7, r6, r5, r8
 800a230:	4d31      	ldr	r5, [pc, #196]	; (800a2f8 <D32_GENERIC+0x178>)
 800a232:	fb29 3305 	smlad	r3, r9, r5, r3
 800a236:	4d31      	ldr	r5, [pc, #196]	; (800a2fc <D32_GENERIC+0x17c>)
 800a238:	fb26 3805 	smlad	r8, r6, r5, r3
 800a23c:	2301      	movs	r3, #1
 800a23e:	fb29 f903 	smuad	r9, r9, r3
 800a242:	4b2f      	ldr	r3, [pc, #188]	; (800a300 <D32_GENERIC+0x180>)
 800a244:	fb26 9303 	smlad	r3, r6, r3, r9
 800a248:	9e05      	ldr	r6, [sp, #20]
 800a24a:	f10e 0901 	add.w	r9, lr, #1
 800a24e:	f5a7 4580 	sub.w	r5, r7, #16384	; 0x4000
 800a252:	b1ae      	cbz	r6, 800a280 <D32_GENERIC+0x100>
 800a254:	442c      	add	r4, r5
 800a256:	9e02      	ldr	r6, [sp, #8]
 800a258:	f8d2 a020 	ldr.w	sl, [r2, #32]
 800a25c:	1ba4      	subs	r4, r4, r6
 800a25e:	9502      	str	r5, [sp, #8]
 800a260:	17e7      	asrs	r7, r4, #31
 800a262:	fba4 450a 	umull	r4, r5, r4, sl
 800a266:	e9cd 4500 	strd	r4, r5, [sp]
 800a26a:	fb0a 5407 	mla	r4, sl, r7, r5
 800a26e:	9401      	str	r4, [sp, #4]
 800a270:	e9dd 4500 	ldrd	r4, r5, [sp]
 800a274:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800a278:	f145 0500 	adc.w	r5, r5, #0
 800a27c:	006c      	lsls	r4, r5, #1
 800a27e:	4625      	mov	r5, r4
 800a280:	f8b2 a028 	ldrh.w	sl, [r2, #40]	; 0x28
 800a284:	036d      	lsls	r5, r5, #13
 800a286:	9f03      	ldr	r7, [sp, #12]
 800a288:	fb0e fb0a 	mul.w	fp, lr, sl
 800a28c:	fa1f fe89 	uxth.w	lr, r9
 800a290:	f04f 0a00 	mov.w	sl, #0
 800a294:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 800a298:	9e04      	ldr	r6, [sp, #16]
 800a29a:	fbc7 9a05 	smlal	r9, sl, r7, r5
 800a29e:	4657      	mov	r7, sl
 800a2a0:	10bd      	asrs	r5, r7, #2
 800a2a2:	f305 050f 	ssat	r5, #16, r5
 800a2a6:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 800a2aa:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800a2ac:	4575      	cmp	r5, lr
 800a2ae:	d911      	bls.n	800a2d4 <D32_GENERIC+0x154>
 800a2b0:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800a2b2:	b2ee      	uxtb	r6, r5
 800a2b4:	2d01      	cmp	r5, #1
 800a2b6:	eb00 0746 	add.w	r7, r0, r6, lsl #1
 800a2ba:	eb06 0946 	add.w	r9, r6, r6, lsl #1
 800a2be:	f47f af7d 	bne.w	800a1bc <D32_GENERIC+0x3c>
 800a2c2:	1d05      	adds	r5, r0, #4
 800a2c4:	f8d0 9000 	ldr.w	r9, [r0]
 800a2c8:	9806      	ldr	r0, [sp, #24]
 800a2ca:	b180      	cbz	r0, 800a2ee <D32_GENERIC+0x16e>
 800a2cc:	fa99 f999 	rev16.w	r9, r9
 800a2d0:	4628      	mov	r0, r5
 800a2d2:	e782      	b.n	800a1da <D32_GENERIC+0x5a>
 800a2d4:	6093      	str	r3, [r2, #8]
 800a2d6:	2000      	movs	r0, #0
 800a2d8:	9b02      	ldr	r3, [sp, #8]
 800a2da:	f8c2 800c 	str.w	r8, [r2, #12]
 800a2de:	6153      	str	r3, [r2, #20]
 800a2e0:	9b07      	ldr	r3, [sp, #28]
 800a2e2:	61d1      	str	r1, [r2, #28]
 800a2e4:	6114      	str	r4, [r2, #16]
 800a2e6:	6193      	str	r3, [r2, #24]
 800a2e8:	b009      	add	sp, #36	; 0x24
 800a2ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2ee:	4628      	mov	r0, r5
 800a2f0:	e773      	b.n	800a1da <D32_GENERIC+0x5a>
 800a2f2:	bf00      	nop
 800a2f4:	00060003 	.word	0x00060003
 800a2f8:	000a000c 	.word	0x000a000c
 800a2fc:	000c000a 	.word	0x000c000a
 800a300:	00030006 	.word	0x00030006
 800a304:	24000000 	.word	0x24000000

0800a308 <D48_GENERIC>:
 800a308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a30c:	6913      	ldr	r3, [r2, #16]
 800a30e:	b089      	sub	sp, #36	; 0x24
 800a310:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800a312:	9301      	str	r3, [sp, #4]
 800a314:	6953      	ldr	r3, [r2, #20]
 800a316:	9104      	str	r1, [sp, #16]
 800a318:	9302      	str	r3, [sp, #8]
 800a31a:	6993      	ldr	r3, [r2, #24]
 800a31c:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 800a320:	9307      	str	r3, [sp, #28]
 800a322:	e9d2 3102 	ldrd	r3, r1, [r2, #8]
 800a326:	9100      	str	r1, [sp, #0]
 800a328:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800a32a:	9103      	str	r1, [sp, #12]
 800a32c:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800a32e:	2c00      	cmp	r4, #0
 800a330:	f000 80be 	beq.w	800a4b0 <D48_GENERIC+0x1a8>
 800a334:	f001 0420 	and.w	r4, r1, #32
 800a338:	f001 0110 	and.w	r1, r1, #16
 800a33c:	f04f 0e00 	mov.w	lr, #0
 800a340:	9105      	str	r1, [sp, #20]
 800a342:	9406      	str	r4, [sp, #24]
 800a344:	4962      	ldr	r1, [pc, #392]	; (800a4d0 <D48_GENERIC+0x1c8>)
 800a346:	e0a0      	b.n	800a48a <D48_GENERIC+0x182>
 800a348:	eb00 0608 	add.w	r6, r0, r8
 800a34c:	f810 a008 	ldrb.w	sl, [r0, r8]
 800a350:	f810 9005 	ldrb.w	r9, [r0, r5]
 800a354:	5df4      	ldrb	r4, [r6, r7]
 800a356:	443e      	add	r6, r7
 800a358:	f890 b000 	ldrb.w	fp, [r0]
 800a35c:	0420      	lsls	r0, r4, #16
 800a35e:	eb06 0408 	add.w	r4, r6, r8
 800a362:	f816 6008 	ldrb.w	r6, [r6, r8]
 800a366:	eb00 6a0a 	add.w	sl, r0, sl, lsl #24
 800a36a:	f814 8007 	ldrb.w	r8, [r4, r7]
 800a36e:	4427      	add	r7, r4
 800a370:	eb0a 2a09 	add.w	sl, sl, r9, lsl #8
 800a374:	eb08 2606 	add.w	r6, r8, r6, lsl #8
 800a378:	eb0a 040b 	add.w	r4, sl, fp
 800a37c:	eb07 0045 	add.w	r0, r7, r5, lsl #1
 800a380:	f3c6 2807 	ubfx	r8, r6, #8, #8
 800a384:	b2f7      	uxtb	r7, r6
 800a386:	b2e6      	uxtb	r6, r4
 800a388:	f3c4 2507 	ubfx	r5, r4, #8, #8
 800a38c:	f3c4 4907 	ubfx	r9, r4, #16, #8
 800a390:	ea4f 6b14 	mov.w	fp, r4, lsr #24
 800a394:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800a398:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 800a39c:	eb06 269c 	add.w	r6, r6, ip, lsr #10
 800a3a0:	f851 9029 	ldr.w	r9, [r1, r9, lsl #2]
 800a3a4:	f851 402b 	ldr.w	r4, [r1, fp, lsl #2]
 800a3a8:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 800a3ac:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 800a3b0:	f851 c028 	ldr.w	ip, [r1, r8, lsl #2]
 800a3b4:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800a3b8:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 800a3bc:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800a3c0:	eb04 2499 	add.w	r4, r4, r9, lsr #10
 800a3c4:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800a3c8:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 800a3cc:	9d00      	ldr	r5, [sp, #0]
 800a3ce:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 800a3d2:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800a3d6:	eb0c 2c97 	add.w	ip, ip, r7, lsr #10
 800a3da:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800a3de:	ea44 4909 	orr.w	r9, r4, r9, lsl #16
 800a3e2:	f3cc 0409 	ubfx	r4, ip, #0, #10
 800a3e6:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 800a3ea:	4c3a      	ldr	r4, [pc, #232]	; (800a4d4 <D48_GENERIC+0x1cc>)
 800a3ec:	fb26 5a04 	smlad	sl, r6, r4, r5
 800a3f0:	4c39      	ldr	r4, [pc, #228]	; (800a4d8 <D48_GENERIC+0x1d0>)
 800a3f2:	fb29 aa04 	smlad	sl, r9, r4, sl
 800a3f6:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 800a3fa:	fb27 aa04 	smlad	sl, r7, r4, sl
 800a3fe:	4c37      	ldr	r4, [pc, #220]	; (800a4dc <D48_GENERIC+0x1d4>)
 800a400:	fb26 3304 	smlad	r3, r6, r4, r3
 800a404:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 800a408:	fb29 3304 	smlad	r3, r9, r4, r3
 800a40c:	4c34      	ldr	r4, [pc, #208]	; (800a4e0 <D48_GENERIC+0x1d8>)
 800a40e:	fb27 3304 	smlad	r3, r7, r4, r3
 800a412:	2501      	movs	r5, #1
 800a414:	9300      	str	r3, [sp, #0]
 800a416:	fb26 f605 	smuad	r6, r6, r5
 800a41a:	4b32      	ldr	r3, [pc, #200]	; (800a4e4 <D48_GENERIC+0x1dc>)
 800a41c:	fb29 6903 	smlad	r9, r9, r3, r6
 800a420:	4b31      	ldr	r3, [pc, #196]	; (800a4e8 <D48_GENERIC+0x1e0>)
 800a422:	fb27 9303 	smlad	r3, r7, r3, r9
 800a426:	9c05      	ldr	r4, [sp, #20]
 800a428:	eb0e 0805 	add.w	r8, lr, r5
 800a42c:	f5aa 4a58 	sub.w	sl, sl, #55296	; 0xd800
 800a430:	b19c      	cbz	r4, 800a45a <D48_GENERIC+0x152>
 800a432:	9c01      	ldr	r4, [sp, #4]
 800a434:	9d02      	ldr	r5, [sp, #8]
 800a436:	4454      	add	r4, sl
 800a438:	f8d2 9020 	ldr.w	r9, [r2, #32]
 800a43c:	f8cd a008 	str.w	sl, [sp, #8]
 800a440:	1b64      	subs	r4, r4, r5
 800a442:	fba4 ab09 	umull	sl, fp, r4, r9
 800a446:	17e7      	asrs	r7, r4, #31
 800a448:	f11a 4400 	adds.w	r4, sl, #2147483648	; 0x80000000
 800a44c:	fb09 bb07 	mla	fp, r9, r7, fp
 800a450:	f14b 0500 	adc.w	r5, fp, #0
 800a454:	006c      	lsls	r4, r5, #1
 800a456:	46a2      	mov	sl, r4
 800a458:	9401      	str	r4, [sp, #4]
 800a45a:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 800a45c:	ea4f 2aca 	mov.w	sl, sl, lsl #11
 800a460:	9d03      	ldr	r5, [sp, #12]
 800a462:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800a466:	fb0e f606 	mul.w	r6, lr, r6
 800a46a:	fa1f fe88 	uxth.w	lr, r8
 800a46e:	f04f 0800 	mov.w	r8, #0
 800a472:	fbc5 780a 	smlal	r7, r8, r5, sl
 800a476:	4645      	mov	r5, r8
 800a478:	10ac      	asrs	r4, r5, #2
 800a47a:	9d04      	ldr	r5, [sp, #16]
 800a47c:	f304 040f 	ssat	r4, #16, r4
 800a480:	f825 4016 	strh.w	r4, [r5, r6, lsl #1]
 800a484:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800a486:	4574      	cmp	r4, lr
 800a488:	d912      	bls.n	800a4b0 <D48_GENERIC+0x1a8>
 800a48a:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 800a48c:	b2e5      	uxtb	r5, r4
 800a48e:	2c01      	cmp	r4, #1
 800a490:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 800a494:	f1c5 0700 	rsb	r7, r5, #0
 800a498:	f47f af56 	bne.w	800a348 <D48_GENERIC+0x40>
 800a49c:	9d06      	ldr	r5, [sp, #24]
 800a49e:	e9d0 4600 	ldrd	r4, r6, [r0]
 800a4a2:	3006      	adds	r0, #6
 800a4a4:	2d00      	cmp	r5, #0
 800a4a6:	f43f af6b 	beq.w	800a380 <D48_GENERIC+0x78>
 800a4aa:	ba64      	rev16	r4, r4
 800a4ac:	ba76      	rev16	r6, r6
 800a4ae:	e767      	b.n	800a380 <D48_GENERIC+0x78>
 800a4b0:	6093      	str	r3, [r2, #8]
 800a4b2:	2000      	movs	r0, #0
 800a4b4:	9b00      	ldr	r3, [sp, #0]
 800a4b6:	f8c2 c01c 	str.w	ip, [r2, #28]
 800a4ba:	60d3      	str	r3, [r2, #12]
 800a4bc:	9b01      	ldr	r3, [sp, #4]
 800a4be:	6113      	str	r3, [r2, #16]
 800a4c0:	9b02      	ldr	r3, [sp, #8]
 800a4c2:	6153      	str	r3, [r2, #20]
 800a4c4:	9b07      	ldr	r3, [sp, #28]
 800a4c6:	6193      	str	r3, [r2, #24]
 800a4c8:	b009      	add	sp, #36	; 0x24
 800a4ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4ce:	bf00      	nop
 800a4d0:	24000000 	.word	0x24000000
 800a4d4:	000f000a 	.word	0x000f000a
 800a4d8:	00060003 	.word	0x00060003
 800a4dc:	00150019 	.word	0x00150019
 800a4e0:	00190015 	.word	0x00190015
 800a4e4:	00030006 	.word	0x00030006
 800a4e8:	000a000f 	.word	0x000a000f

0800a4ec <D64_GENERIC>:
 800a4ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4f0:	6913      	ldr	r3, [r2, #16]
 800a4f2:	b089      	sub	sp, #36	; 0x24
 800a4f4:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800a4f6:	9300      	str	r3, [sp, #0]
 800a4f8:	6953      	ldr	r3, [r2, #20]
 800a4fa:	9105      	str	r1, [sp, #20]
 800a4fc:	9303      	str	r3, [sp, #12]
 800a4fe:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 800a500:	6993      	ldr	r3, [r2, #24]
 800a502:	69d4      	ldr	r4, [r2, #28]
 800a504:	9307      	str	r3, [sp, #28]
 800a506:	9504      	str	r5, [sp, #16]
 800a508:	e9d2 3602 	ldrd	r3, r6, [r2, #8]
 800a50c:	2900      	cmp	r1, #0
 800a50e:	f000 80e8 	beq.w	800a6e2 <D64_GENERIC+0x1f6>
 800a512:	6a11      	ldr	r1, [r2, #32]
 800a514:	2500      	movs	r5, #0
 800a516:	46b3      	mov	fp, r6
 800a518:	9302      	str	r3, [sp, #8]
 800a51a:	9106      	str	r1, [sp, #24]
 800a51c:	4978      	ldr	r1, [pc, #480]	; (800a700 <D64_GENERIC+0x214>)
 800a51e:	e0cc      	b.n	800a6ba <D64_GENERIC+0x1ce>
 800a520:	eb0e 084e 	add.w	r8, lr, lr, lsl #1
 800a524:	f1ce 0c00 	rsb	ip, lr, #0
 800a528:	f890 9000 	ldrb.w	r9, [r0]
 800a52c:	eb00 0708 	add.w	r7, r0, r8
 800a530:	f810 6008 	ldrb.w	r6, [r0, r8]
 800a534:	eb07 0a4c 	add.w	sl, r7, ip, lsl #1
 800a538:	f817 000c 	ldrb.w	r0, [r7, ip]
 800a53c:	f817 301c 	ldrb.w	r3, [r7, ip, lsl #1]
 800a540:	eb0a 0748 	add.w	r7, sl, r8, lsl #1
 800a544:	f81a a018 	ldrb.w	sl, [sl, r8, lsl #1]
 800a548:	ea4f 4800 	mov.w	r8, r0, lsl #16
 800a54c:	f817 000c 	ldrb.w	r0, [r7, ip]
 800a550:	eb08 6606 	add.w	r6, r8, r6, lsl #24
 800a554:	f817 801c 	ldrb.w	r8, [r7, ip, lsl #1]
 800a558:	0400      	lsls	r0, r0, #16
 800a55a:	4467      	add	r7, ip
 800a55c:	eb06 2603 	add.w	r6, r6, r3, lsl #8
 800a560:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 800a564:	f817 a01c 	ldrb.w	sl, [r7, ip, lsl #1]
 800a568:	eb07 074c 	add.w	r7, r7, ip, lsl #1
 800a56c:	444e      	add	r6, r9
 800a56e:	eb00 2808 	add.w	r8, r0, r8, lsl #8
 800a572:	eb07 008e 	add.w	r0, r7, lr, lsl #2
 800a576:	44c2      	add	sl, r8
 800a578:	b2f7      	uxtb	r7, r6
 800a57a:	f3c6 2807 	ubfx	r8, r6, #8, #8
 800a57e:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 800a582:	0e36      	lsrs	r6, r6, #24
 800a584:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 800a588:	fa5f fc8a 	uxtb.w	ip, sl
 800a58c:	f851 8028 	ldr.w	r8, [r1, r8, lsl #2]
 800a590:	f3ca 2907 	ubfx	r9, sl, #8, #8
 800a594:	443c      	add	r4, r7
 800a596:	f851 702e 	ldr.w	r7, [r1, lr, lsl #2]
 800a59a:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800a59e:	eb08 2894 	add.w	r8, r8, r4, lsr #10
 800a5a2:	f851 c02c 	ldr.w	ip, [r1, ip, lsl #2]
 800a5a6:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800a5aa:	4b56      	ldr	r3, [pc, #344]	; (800a704 <D64_GENERIC+0x218>)
 800a5ac:	eb07 2e98 	add.w	lr, r7, r8, lsr #10
 800a5b0:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800a5b4:	f851 7029 	ldr.w	r7, [r1, r9, lsl #2]
 800a5b8:	eb06 269e 	add.w	r6, r6, lr, lsr #10
 800a5bc:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800a5c0:	ea48 4804 	orr.w	r8, r8, r4, lsl #16
 800a5c4:	f3ca 4407 	ubfx	r4, sl, #16, #8
 800a5c8:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 800a5cc:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800a5d0:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800a5d4:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 800a5d8:	eb07 279c 	add.w	r7, r7, ip, lsr #10
 800a5dc:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800a5e0:	f851 902a 	ldr.w	r9, [r1, sl, lsl #2]
 800a5e4:	ea46 460e 	orr.w	r6, r6, lr, lsl #16
 800a5e8:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 800a5ec:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800a5f0:	eb09 299a 	add.w	r9, r9, sl, lsr #10
 800a5f4:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800a5f8:	ea47 4c0c 	orr.w	ip, r7, ip, lsl #16
 800a5fc:	f3c9 0709 	ubfx	r7, r9, #0, #10
 800a600:	ea4f 2499 	mov.w	r4, r9, lsr #10
 800a604:	ea47 4a0a 	orr.w	sl, r7, sl, lsl #16
 800a608:	fb28 b903 	smlad	r9, r8, r3, fp
 800a60c:	4b3e      	ldr	r3, [pc, #248]	; (800a708 <D64_GENERIC+0x21c>)
 800a60e:	fb26 9903 	smlad	r9, r6, r3, r9
 800a612:	4b3e      	ldr	r3, [pc, #248]	; (800a70c <D64_GENERIC+0x220>)
 800a614:	fb2c 9703 	smlad	r7, ip, r3, r9
 800a618:	f44f 3980 	mov.w	r9, #65536	; 0x10000
 800a61c:	fb2a 7909 	smlad	r9, sl, r9, r7
 800a620:	4f3b      	ldr	r7, [pc, #236]	; (800a710 <D64_GENERIC+0x224>)
 800a622:	9b02      	ldr	r3, [sp, #8]
 800a624:	fb28 3307 	smlad	r3, r8, r7, r3
 800a628:	fb2a 3317 	smladx	r3, sl, r7, r3
 800a62c:	4f39      	ldr	r7, [pc, #228]	; (800a714 <D64_GENERIC+0x228>)
 800a62e:	fb26 3307 	smlad	r3, r6, r7, r3
 800a632:	fb2c 3b17 	smladx	fp, ip, r7, r3
 800a636:	f04f 0e01 	mov.w	lr, #1
 800a63a:	fb28 f80e 	smuad	r8, r8, lr
 800a63e:	4b36      	ldr	r3, [pc, #216]	; (800a718 <D64_GENERIC+0x22c>)
 800a640:	fb26 8603 	smlad	r6, r6, r3, r8
 800a644:	4b35      	ldr	r3, [pc, #212]	; (800a71c <D64_GENERIC+0x230>)
 800a646:	fb2c 6c03 	smlad	ip, ip, r3, r6
 800a64a:	4b35      	ldr	r3, [pc, #212]	; (800a720 <D64_GENERIC+0x234>)
 800a64c:	fb2a c303 	smlad	r3, sl, r3, ip
 800a650:	9f06      	ldr	r7, [sp, #24]
 800a652:	f5a9 3900 	sub.w	r9, r9, #131072	; 0x20000
 800a656:	9302      	str	r3, [sp, #8]
 800a658:	b1cf      	cbz	r7, 800a68e <D64_GENERIC+0x1a2>
 800a65a:	9b00      	ldr	r3, [sp, #0]
 800a65c:	444b      	add	r3, r9
 800a65e:	461e      	mov	r6, r3
 800a660:	9b03      	ldr	r3, [sp, #12]
 800a662:	f8cd 900c 	str.w	r9, [sp, #12]
 800a666:	1af6      	subs	r6, r6, r3
 800a668:	46b0      	mov	r8, r6
 800a66a:	ea4f 79e6 	mov.w	r9, r6, asr #31
 800a66e:	e9cd 8900 	strd	r8, r9, [sp]
 800a672:	fba6 8907 	umull	r8, r9, r6, r7
 800a676:	9e01      	ldr	r6, [sp, #4]
 800a678:	fb07 9306 	mla	r3, r7, r6, r9
 800a67c:	4646      	mov	r6, r8
 800a67e:	f116 4600 	adds.w	r6, r6, #2147483648	; 0x80000000
 800a682:	f143 0700 	adc.w	r7, r3, #0
 800a686:	fa07 f30e 	lsl.w	r3, r7, lr
 800a68a:	4699      	mov	r9, r3
 800a68c:	9300      	str	r3, [sp, #0]
 800a68e:	f8b2 c028 	ldrh.w	ip, [r2, #40]	; 0x28
 800a692:	ea4f 2989 	mov.w	r9, r9, lsl #10
 800a696:	9b04      	ldr	r3, [sp, #16]
 800a698:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a69c:	2700      	movs	r7, #0
 800a69e:	fb05 fc0c 	mul.w	ip, r5, ip
 800a6a2:	3501      	adds	r5, #1
 800a6a4:	fbc3 6709 	smlal	r6, r7, r3, r9
 800a6a8:	9b05      	ldr	r3, [sp, #20]
 800a6aa:	10be      	asrs	r6, r7, #2
 800a6ac:	f306 060f 	ssat	r6, #16, r6
 800a6b0:	f823 601c 	strh.w	r6, [r3, ip, lsl #1]
 800a6b4:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 800a6b6:	42ae      	cmp	r6, r5
 800a6b8:	dd11      	ble.n	800a6de <D64_GENERIC+0x1f2>
 800a6ba:	f8b2 e02a 	ldrh.w	lr, [r2, #42]	; 0x2a
 800a6be:	f1be 0f01 	cmp.w	lr, #1
 800a6c2:	f47f af2d 	bne.w	800a520 <D64_GENERIC+0x34>
 800a6c6:	6b57      	ldr	r7, [r2, #52]	; 0x34
 800a6c8:	f100 0c08 	add.w	ip, r0, #8
 800a6cc:	06bb      	lsls	r3, r7, #26
 800a6ce:	e9d0 6a00 	ldrd	r6, sl, [r0]
 800a6d2:	d513      	bpl.n	800a6fc <D64_GENERIC+0x210>
 800a6d4:	ba76      	rev16	r6, r6
 800a6d6:	fa9a fa9a 	rev16.w	sl, sl
 800a6da:	4660      	mov	r0, ip
 800a6dc:	e74c      	b.n	800a578 <D64_GENERIC+0x8c>
 800a6de:	465e      	mov	r6, fp
 800a6e0:	9b02      	ldr	r3, [sp, #8]
 800a6e2:	6093      	str	r3, [r2, #8]
 800a6e4:	2000      	movs	r0, #0
 800a6e6:	9b00      	ldr	r3, [sp, #0]
 800a6e8:	60d6      	str	r6, [r2, #12]
 800a6ea:	6113      	str	r3, [r2, #16]
 800a6ec:	9b03      	ldr	r3, [sp, #12]
 800a6ee:	61d4      	str	r4, [r2, #28]
 800a6f0:	6153      	str	r3, [r2, #20]
 800a6f2:	9b07      	ldr	r3, [sp, #28]
 800a6f4:	6193      	str	r3, [r2, #24]
 800a6f6:	b009      	add	sp, #36	; 0x24
 800a6f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6fc:	4660      	mov	r0, ip
 800a6fe:	e73b      	b.n	800a578 <D64_GENERIC+0x8c>
 800a700:	24000000 	.word	0x24000000
 800a704:	001c0015 	.word	0x001c0015
 800a708:	000f000a 	.word	0x000f000a
 800a70c:	00060003 	.word	0x00060003
 800a710:	0024002a 	.word	0x0024002a
 800a714:	002e0030 	.word	0x002e0030
 800a718:	00030006 	.word	0x00030006
 800a71c:	000a000f 	.word	0x000a000f
 800a720:	0015001c 	.word	0x0015001c

0800a724 <D80_GENERIC>:
 800a724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a728:	b08b      	sub	sp, #44	; 0x2c
 800a72a:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800a72c:	9107      	str	r1, [sp, #28]
 800a72e:	6911      	ldr	r1, [r2, #16]
 800a730:	9104      	str	r1, [sp, #16]
 800a732:	6951      	ldr	r1, [r2, #20]
 800a734:	9105      	str	r1, [sp, #20]
 800a736:	6991      	ldr	r1, [r2, #24]
 800a738:	9109      	str	r1, [sp, #36]	; 0x24
 800a73a:	69d1      	ldr	r1, [r2, #28]
 800a73c:	9102      	str	r1, [sp, #8]
 800a73e:	6891      	ldr	r1, [r2, #8]
 800a740:	9103      	str	r1, [sp, #12]
 800a742:	68d1      	ldr	r1, [r2, #12]
 800a744:	9101      	str	r1, [sp, #4]
 800a746:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800a748:	9106      	str	r1, [sp, #24]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	f000 810b 	beq.w	800a966 <D80_GENERIC+0x242>
 800a750:	6a13      	ldr	r3, [r2, #32]
 800a752:	f04f 0800 	mov.w	r8, #0
 800a756:	f8df c260 	ldr.w	ip, [pc, #608]	; 800a9b8 <D80_GENERIC+0x294>
 800a75a:	9308      	str	r3, [sp, #32]
 800a75c:	9200      	str	r2, [sp, #0]
 800a75e:	e0ee      	b.n	800a93e <D80_GENERIC+0x21a>
 800a760:	b2db      	uxtb	r3, r3
 800a762:	f890 e000 	ldrb.w	lr, [r0]
 800a766:	b219      	sxth	r1, r3
 800a768:	425c      	negs	r4, r3
 800a76a:	f810 9003 	ldrb.w	r9, [r0, r3]
 800a76e:	004e      	lsls	r6, r1, #1
 800a770:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 800a774:	4431      	add	r1, r6
 800a776:	1843      	adds	r3, r0, r1
 800a778:	f810 b001 	ldrb.w	fp, [r0, r1]
 800a77c:	1919      	adds	r1, r3, r4
 800a77e:	5d1b      	ldrb	r3, [r3, r4]
 800a780:	1948      	adds	r0, r1, r5
 800a782:	f811 a005 	ldrb.w	sl, [r1, r5]
 800a786:	041b      	lsls	r3, r3, #16
 800a788:	1907      	adds	r7, r0, r4
 800a78a:	5d01      	ldrb	r1, [r0, r4]
 800a78c:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 800a790:	f810 0014 	ldrb.w	r0, [r0, r4, lsl #1]
 800a794:	eb07 0b44 	add.w	fp, r7, r4, lsl #1
 800a798:	f817 7014 	ldrb.w	r7, [r7, r4, lsl #1]
 800a79c:	0409      	lsls	r1, r1, #16
 800a79e:	eb03 2309 	add.w	r3, r3, r9, lsl #8
 800a7a2:	eb0b 0905 	add.w	r9, fp, r5
 800a7a6:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 800a7aa:	f81b 5005 	ldrb.w	r5, [fp, r5]
 800a7ae:	eb09 0b04 	add.w	fp, r9, r4
 800a7b2:	f819 4004 	ldrb.w	r4, [r9, r4]
 800a7b6:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 800a7ba:	4473      	add	r3, lr
 800a7bc:	eb0b 0006 	add.w	r0, fp, r6
 800a7c0:	eb04 2505 	add.w	r5, r4, r5, lsl #8
 800a7c4:	4439      	add	r1, r7
 800a7c6:	f3c3 2407 	ubfx	r4, r3, #8, #8
 800a7ca:	b2df      	uxtb	r7, r3
 800a7cc:	f3c3 4607 	ubfx	r6, r3, #16, #8
 800a7d0:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 800a7d4:	f85c 3027 	ldr.w	r3, [ip, r7, lsl #2]
 800a7d8:	fa5f fa81 	uxtb.w	sl, r1
 800a7dc:	f85c 7024 	ldr.w	r7, [ip, r4, lsl #2]
 800a7e0:	9c02      	ldr	r4, [sp, #8]
 800a7e2:	f85c 9026 	ldr.w	r9, [ip, r6, lsl #2]
 800a7e6:	441c      	add	r4, r3
 800a7e8:	f85c 602e 	ldr.w	r6, [ip, lr, lsl #2]
 800a7ec:	f85c e02a 	ldr.w	lr, [ip, sl, lsl #2]
 800a7f0:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 800a7f4:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 800a7f8:	f3c4 0309 	ubfx	r3, r4, #0, #10
 800a7fc:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800a800:	b2ed      	uxtb	r5, r5
 800a802:	eb09 2997 	add.w	r9, r9, r7, lsr #10
 800a806:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800a80a:	f85c 4024 	ldr.w	r4, [ip, r4, lsl #2]
 800a80e:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 800a812:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 800a816:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 800a81a:	f3c1 4707 	ubfx	r7, r1, #16, #8
 800a81e:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 800a822:	f85c a02a 	ldr.w	sl, [ip, sl, lsl #2]
 800a826:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 800a82a:	0e09      	lsrs	r1, r1, #24
 800a82c:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 800a830:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800a834:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 800a838:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800a83c:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 800a840:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800a844:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800a848:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 800a84c:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800a850:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
 800a854:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800a858:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800a85c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800a860:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 800a864:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800a868:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 800a86c:	ea4f 229a 	mov.w	r2, sl, lsr #10
 800a870:	f3ca 0709 	ubfx	r7, sl, #0, #10
 800a874:	9202      	str	r2, [sp, #8]
 800a876:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 800a87a:	4a43      	ldr	r2, [pc, #268]	; (800a988 <D80_GENERIC+0x264>)
 800a87c:	9f01      	ldr	r7, [sp, #4]
 800a87e:	fb23 7a02 	smlad	sl, r3, r2, r7
 800a882:	4a42      	ldr	r2, [pc, #264]	; (800a98c <D80_GENERIC+0x268>)
 800a884:	fb26 aa02 	smlad	sl, r6, r2, sl
 800a888:	4a41      	ldr	r2, [pc, #260]	; (800a990 <D80_GENERIC+0x26c>)
 800a88a:	fb24 aa02 	smlad	sl, r4, r2, sl
 800a88e:	4a41      	ldr	r2, [pc, #260]	; (800a994 <D80_GENERIC+0x270>)
 800a890:	fb21 a702 	smlad	r7, r1, r2, sl
 800a894:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 800a898:	fb25 7a0a 	smlad	sl, r5, sl, r7
 800a89c:	4a3e      	ldr	r2, [pc, #248]	; (800a998 <D80_GENERIC+0x274>)
 800a89e:	9f03      	ldr	r7, [sp, #12]
 800a8a0:	fb23 7e02 	smlad	lr, r3, r2, r7
 800a8a4:	4a3d      	ldr	r2, [pc, #244]	; (800a99c <D80_GENERIC+0x278>)
 800a8a6:	fb26 ee02 	smlad	lr, r6, r2, lr
 800a8aa:	f04f 174b 	mov.w	r7, #4915275	; 0x4b004b
 800a8ae:	fb24 e707 	smlad	r7, r4, r7, lr
 800a8b2:	4a3b      	ldr	r2, [pc, #236]	; (800a9a0 <D80_GENERIC+0x27c>)
 800a8b4:	fb21 7702 	smlad	r7, r1, r2, r7
 800a8b8:	4a3a      	ldr	r2, [pc, #232]	; (800a9a4 <D80_GENERIC+0x280>)
 800a8ba:	fb25 7202 	smlad	r2, r5, r2, r7
 800a8be:	f04f 0901 	mov.w	r9, #1
 800a8c2:	9201      	str	r2, [sp, #4]
 800a8c4:	fb23 f909 	smuad	r9, r3, r9
 800a8c8:	4b37      	ldr	r3, [pc, #220]	; (800a9a8 <D80_GENERIC+0x284>)
 800a8ca:	fb26 9603 	smlad	r6, r6, r3, r9
 800a8ce:	4f37      	ldr	r7, [pc, #220]	; (800a9ac <D80_GENERIC+0x288>)
 800a8d0:	fb24 6407 	smlad	r4, r4, r7, r6
 800a8d4:	4f36      	ldr	r7, [pc, #216]	; (800a9b0 <D80_GENERIC+0x28c>)
 800a8d6:	fb21 4707 	smlad	r7, r1, r7, r4
 800a8da:	4936      	ldr	r1, [pc, #216]	; (800a9b4 <D80_GENERIC+0x290>)
 800a8dc:	fb25 7301 	smlad	r3, r5, r1, r7
 800a8e0:	9303      	str	r3, [sp, #12]
 800a8e2:	f5aa 3a7a 	sub.w	sl, sl, #256000	; 0x3e800
 800a8e6:	9b08      	ldr	r3, [sp, #32]
 800a8e8:	b193      	cbz	r3, 800a910 <D80_GENERIC+0x1ec>
 800a8ea:	9a04      	ldr	r2, [sp, #16]
 800a8ec:	4452      	add	r2, sl
 800a8ee:	4614      	mov	r4, r2
 800a8f0:	9a05      	ldr	r2, [sp, #20]
 800a8f2:	f8cd a014 	str.w	sl, [sp, #20]
 800a8f6:	1aa4      	subs	r4, r4, r2
 800a8f8:	fba4 1203 	umull	r1, r2, r4, r3
 800a8fc:	17e7      	asrs	r7, r4, #31
 800a8fe:	f111 4400 	adds.w	r4, r1, #2147483648	; 0x80000000
 800a902:	fb03 2207 	mla	r2, r3, r7, r2
 800a906:	f142 0500 	adc.w	r5, r2, #0
 800a90a:	006b      	lsls	r3, r5, #1
 800a90c:	469a      	mov	sl, r3
 800a90e:	9304      	str	r3, [sp, #16]
 800a910:	9e00      	ldr	r6, [sp, #0]
 800a912:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
 800a916:	9a06      	ldr	r2, [sp, #24]
 800a918:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800a91c:	8d33      	ldrh	r3, [r6, #40]	; 0x28
 800a91e:	2500      	movs	r5, #0
 800a920:	fb08 f303 	mul.w	r3, r8, r3
 800a924:	fbc2 450a 	smlal	r4, r5, r2, sl
 800a928:	9a07      	ldr	r2, [sp, #28]
 800a92a:	f108 0801 	add.w	r8, r8, #1
 800a92e:	10a9      	asrs	r1, r5, #2
 800a930:	f301 010f 	ssat	r1, #16, r1
 800a934:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800a938:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 800a93a:	4543      	cmp	r3, r8
 800a93c:	dd12      	ble.n	800a964 <D80_GENERIC+0x240>
 800a93e:	9b00      	ldr	r3, [sp, #0]
 800a940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a942:	2b01      	cmp	r3, #1
 800a944:	f47f af0c 	bne.w	800a760 <D80_GENERIC+0x3c>
 800a948:	9b00      	ldr	r3, [sp, #0]
 800a94a:	6885      	ldr	r5, [r0, #8]
 800a94c:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 800a94e:	06b2      	lsls	r2, r6, #26
 800a950:	e9d0 3100 	ldrd	r3, r1, [r0]
 800a954:	f100 000a 	add.w	r0, r0, #10
 800a958:	f57f af35 	bpl.w	800a7c6 <D80_GENERIC+0xa2>
 800a95c:	ba5b      	rev16	r3, r3
 800a95e:	ba49      	rev16	r1, r1
 800a960:	ba6d      	rev16	r5, r5
 800a962:	e730      	b.n	800a7c6 <D80_GENERIC+0xa2>
 800a964:	4632      	mov	r2, r6
 800a966:	9b03      	ldr	r3, [sp, #12]
 800a968:	2000      	movs	r0, #0
 800a96a:	6093      	str	r3, [r2, #8]
 800a96c:	9b01      	ldr	r3, [sp, #4]
 800a96e:	60d3      	str	r3, [r2, #12]
 800a970:	9b02      	ldr	r3, [sp, #8]
 800a972:	61d3      	str	r3, [r2, #28]
 800a974:	9b04      	ldr	r3, [sp, #16]
 800a976:	6113      	str	r3, [r2, #16]
 800a978:	9b05      	ldr	r3, [sp, #20]
 800a97a:	6153      	str	r3, [r2, #20]
 800a97c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a97e:	6193      	str	r3, [r2, #24]
 800a980:	b00b      	add	sp, #44	; 0x2c
 800a982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a986:	bf00      	nop
 800a988:	002d0024 	.word	0x002d0024
 800a98c:	001c0015 	.word	0x001c0015
 800a990:	000f000a 	.word	0x000f000a
 800a994:	00060003 	.word	0x00060003
 800a998:	0037003f 	.word	0x0037003f
 800a99c:	00450049 	.word	0x00450049
 800a9a0:	00490045 	.word	0x00490045
 800a9a4:	003f0037 	.word	0x003f0037
 800a9a8:	00030006 	.word	0x00030006
 800a9ac:	000a000f 	.word	0x000a000f
 800a9b0:	0015001c 	.word	0x0015001c
 800a9b4:	0024002d 	.word	0x0024002d
 800a9b8:	24000000 	.word	0x24000000

0800a9bc <D128_GENERIC>:
 800a9bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9c0:	b08d      	sub	sp, #52	; 0x34
 800a9c2:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800a9c4:	f8d2 a01c 	ldr.w	sl, [r2, #28]
 800a9c8:	9109      	str	r1, [sp, #36]	; 0x24
 800a9ca:	6911      	ldr	r1, [r2, #16]
 800a9cc:	9201      	str	r2, [sp, #4]
 800a9ce:	9106      	str	r1, [sp, #24]
 800a9d0:	6951      	ldr	r1, [r2, #20]
 800a9d2:	9107      	str	r1, [sp, #28]
 800a9d4:	6991      	ldr	r1, [r2, #24]
 800a9d6:	910b      	str	r1, [sp, #44]	; 0x2c
 800a9d8:	6891      	ldr	r1, [r2, #8]
 800a9da:	9103      	str	r1, [sp, #12]
 800a9dc:	68d1      	ldr	r1, [r2, #12]
 800a9de:	9102      	str	r1, [sp, #8]
 800a9e0:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800a9e2:	9108      	str	r1, [sp, #32]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	f000 8183 	beq.w	800acf0 <D128_GENERIC+0x334>
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	6a12      	ldr	r2, [r2, #32]
 800a9ee:	4681      	mov	r9, r0
 800a9f0:	920a      	str	r2, [sp, #40]	; 0x28
 800a9f2:	e9cd a304 	strd	sl, r3, [sp, #16]
 800a9f6:	e165      	b.n	800acc4 <D128_GENERIC+0x308>
 800a9f8:	b2d2      	uxtb	r2, r2
 800a9fa:	f899 b000 	ldrb.w	fp, [r9]
 800a9fe:	b213      	sxth	r3, r2
 800aa00:	4255      	negs	r5, r2
 800aa02:	f819 0002 	ldrb.w	r0, [r9, r2]
 800aa06:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800aa0a:	009f      	lsls	r7, r3, #2
 800aa0c:	eb09 0402 	add.w	r4, r9, r2
 800aa10:	ebc3 06c3 	rsb	r6, r3, r3, lsl #3
 800aa14:	f819 8002 	ldrb.w	r8, [r9, r2]
 800aa18:	443b      	add	r3, r7
 800aa1a:	1962      	adds	r2, r4, r5
 800aa1c:	5d64      	ldrb	r4, [r4, r5]
 800aa1e:	eb02 0c03 	add.w	ip, r2, r3
 800aa22:	0424      	lsls	r4, r4, #16
 800aa24:	5cd3      	ldrb	r3, [r2, r3]
 800aa26:	eb0c 0e05 	add.w	lr, ip, r5
 800aa2a:	f81c 9015 	ldrb.w	r9, [ip, r5, lsl #1]
 800aa2e:	f81c 2005 	ldrb.w	r2, [ip, r5]
 800aa32:	eb04 6408 	add.w	r4, r4, r8, lsl #24
 800aa36:	eb0e 0c45 	add.w	ip, lr, r5, lsl #1
 800aa3a:	f81e 8015 	ldrb.w	r8, [lr, r5, lsl #1]
 800aa3e:	eb04 2400 	add.w	r4, r4, r0, lsl #8
 800aa42:	eb0c 0e06 	add.w	lr, ip, r6
 800aa46:	f81c a006 	ldrb.w	sl, [ip, r6]
 800aa4a:	0412      	lsls	r2, r2, #16
 800aa4c:	445c      	add	r4, fp
 800aa4e:	eb0e 0c05 	add.w	ip, lr, r5
 800aa52:	eb02 6203 	add.w	r2, r2, r3, lsl #24
 800aa56:	f81e 3005 	ldrb.w	r3, [lr, r5]
 800aa5a:	eb0c 0045 	add.w	r0, ip, r5, lsl #1
 800aa5e:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 800aa62:	041b      	lsls	r3, r3, #16
 800aa64:	f81c c015 	ldrb.w	ip, [ip, r5, lsl #1]
 800aa68:	eb00 0b06 	add.w	fp, r0, r6
 800aa6c:	5d80      	ldrb	r0, [r0, r6]
 800aa6e:	eb03 630a 	add.w	r3, r3, sl, lsl #24
 800aa72:	f81b 6005 	ldrb.w	r6, [fp, r5]
 800aa76:	eb0b 0a05 	add.w	sl, fp, r5
 800aa7a:	eb02 2209 	add.w	r2, r2, r9, lsl #8
 800aa7e:	f81b b015 	ldrb.w	fp, [fp, r5, lsl #1]
 800aa82:	0436      	lsls	r6, r6, #16
 800aa84:	eb0a 0945 	add.w	r9, sl, r5, lsl #1
 800aa88:	4442      	add	r2, r8
 800aa8a:	eb06 6600 	add.w	r6, r6, r0, lsl #24
 800aa8e:	f81a 8015 	ldrb.w	r8, [sl, r5, lsl #1]
 800aa92:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 800aa96:	44b9      	add	r9, r7
 800aa98:	eb06 260b 	add.w	r6, r6, fp, lsl #8
 800aa9c:	4463      	add	r3, ip
 800aa9e:	eb06 0508 	add.w	r5, r6, r8
 800aaa2:	b2e7      	uxtb	r7, r4
 800aaa4:	f3c4 2607 	ubfx	r6, r4, #8, #8
 800aaa8:	499b      	ldr	r1, [pc, #620]	; (800ad18 <D128_GENERIC+0x35c>)
 800aaaa:	f3c4 4007 	ubfx	r0, r4, #16, #8
 800aaae:	0e24      	lsrs	r4, r4, #24
 800aab0:	f851 c027 	ldr.w	ip, [r1, r7, lsl #2]
 800aab4:	b2d7      	uxtb	r7, r2
 800aab6:	f851 b026 	ldr.w	fp, [r1, r6, lsl #2]
 800aaba:	f3c2 2607 	ubfx	r6, r2, #8, #8
 800aabe:	9904      	ldr	r1, [sp, #16]
 800aac0:	4461      	add	r1, ip
 800aac2:	468c      	mov	ip, r1
 800aac4:	4994      	ldr	r1, [pc, #592]	; (800ad18 <D128_GENERIC+0x35c>)
 800aac6:	eb0b 2b9c 	add.w	fp, fp, ip, lsr #10
 800aaca:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800aace:	f851 8024 	ldr.w	r8, [r1, r4, lsl #2]
 800aad2:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800aad6:	eb00 209b 	add.w	r0, r0, fp, lsr #10
 800aada:	f851 e027 	ldr.w	lr, [r1, r7, lsl #2]
 800aade:	f851 7026 	ldr.w	r7, [r1, r6, lsl #2]
 800aae2:	0e12      	lsrs	r2, r2, #24
 800aae4:	eb08 2890 	add.w	r8, r8, r0, lsr #10
 800aae8:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800aaec:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 800aaf0:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800aaf4:	eb0e 2e98 	add.w	lr, lr, r8, lsr #10
 800aaf8:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800aafc:	b2da      	uxtb	r2, r3
 800aafe:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800ab02:	eb07 279e 	add.w	r7, r7, lr, lsr #10
 800ab06:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800ab0a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800ab0e:	ea48 4800 	orr.w	r8, r8, r0, lsl #16
 800ab12:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 800ab16:	f3c3 2007 	ubfx	r0, r3, #8, #8
 800ab1a:	ea4b 4b0c 	orr.w	fp, fp, ip, lsl #16
 800ab1e:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800ab22:	eb06 269a 	add.w	r6, r6, sl, lsr #10
 800ab26:	f851 c020 	ldr.w	ip, [r1, r0, lsl #2]
 800ab2a:	f3c3 4007 	ubfx	r0, r3, #16, #8
 800ab2e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800ab32:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 800ab36:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800ab3a:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 800ab3e:	0e1b      	lsrs	r3, r3, #24
 800ab40:	eb0c 2c92 	add.w	ip, ip, r2, lsr #10
 800ab44:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800ab48:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800ab4c:	ea47 470e 	orr.w	r7, r7, lr, lsl #16
 800ab50:	b2eb      	uxtb	r3, r5
 800ab52:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800ab56:	eb04 2e9c 	add.w	lr, r4, ip, lsr #10
 800ab5a:	f3cc 0409 	ubfx	r4, ip, #0, #10
 800ab5e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ab62:	ea46 460a 	orr.w	r6, r6, sl, lsl #16
 800ab66:	eb00 209e 	add.w	r0, r0, lr, lsr #10
 800ab6a:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 800ab6e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800ab72:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800ab76:	eb03 2c90 	add.w	ip, r3, r0, lsr #10
 800ab7a:	f851 202a 	ldr.w	r2, [r1, sl, lsl #2]
 800ab7e:	f3c5 4307 	ubfx	r3, r5, #16, #8
 800ab82:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 800ab86:	eb02 229c 	add.w	r2, r2, ip, lsr #10
 800ab8a:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800ab8e:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
 800ab92:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800ab96:	f851 302a 	ldr.w	r3, [r1, sl, lsl #2]
 800ab9a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 800ab9e:	eb05 2592 	add.w	r5, r5, r2, lsr #10
 800aba2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800aba6:	eb03 2e95 	add.w	lr, r3, r5, lsr #10
 800abaa:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800abae:	ea42 430c 	orr.w	r3, r2, ip, lsl #16
 800abb2:	ea4f 219e 	mov.w	r1, lr, lsr #10
 800abb6:	f3ce 0209 	ubfx	r2, lr, #0, #10
 800abba:	9104      	str	r1, [sp, #16]
 800abbc:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800abc0:	9902      	ldr	r1, [sp, #8]
 800abc2:	4a56      	ldr	r2, [pc, #344]	; (800ad1c <D128_GENERIC+0x360>)
 800abc4:	fb2b 1202 	smlad	r2, fp, r2, r1
 800abc8:	4955      	ldr	r1, [pc, #340]	; (800ad20 <D128_GENERIC+0x364>)
 800abca:	fb28 2201 	smlad	r2, r8, r1, r2
 800abce:	4955      	ldr	r1, [pc, #340]	; (800ad24 <D128_GENERIC+0x368>)
 800abd0:	fb27 2201 	smlad	r2, r7, r1, r2
 800abd4:	4954      	ldr	r1, [pc, #336]	; (800ad28 <D128_GENERIC+0x36c>)
 800abd6:	fb26 2201 	smlad	r2, r6, r1, r2
 800abda:	4954      	ldr	r1, [pc, #336]	; (800ad2c <D128_GENERIC+0x370>)
 800abdc:	fb24 2201 	smlad	r2, r4, r1, r2
 800abe0:	4953      	ldr	r1, [pc, #332]	; (800ad30 <D128_GENERIC+0x374>)
 800abe2:	fb20 2201 	smlad	r2, r0, r1, r2
 800abe6:	4953      	ldr	r1, [pc, #332]	; (800ad34 <D128_GENERIC+0x378>)
 800abe8:	fb23 2201 	smlad	r2, r3, r1, r2
 800abec:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
 800abf0:	fb25 2a0c 	smlad	sl, r5, ip, r2
 800abf4:	4950      	ldr	r1, [pc, #320]	; (800ad38 <D128_GENERIC+0x37c>)
 800abf6:	9a03      	ldr	r2, [sp, #12]
 800abf8:	fb2b 2c01 	smlad	ip, fp, r1, r2
 800abfc:	4a4f      	ldr	r2, [pc, #316]	; (800ad3c <D128_GENERIC+0x380>)
 800abfe:	fb28 ce02 	smlad	lr, r8, r2, ip
 800ac02:	f8df c150 	ldr.w	ip, [pc, #336]	; 800ad54 <D128_GENERIC+0x398>
 800ac06:	fb27 ec0c 	smlad	ip, r7, ip, lr
 800ac0a:	f8df e14c 	ldr.w	lr, [pc, #332]	; 800ad58 <D128_GENERIC+0x39c>
 800ac0e:	fb26 cc0e 	smlad	ip, r6, lr, ip
 800ac12:	f8df e148 	ldr.w	lr, [pc, #328]	; 800ad5c <D128_GENERIC+0x3a0>
 800ac16:	fb24 ce0e 	smlad	lr, r4, lr, ip
 800ac1a:	f8df c144 	ldr.w	ip, [pc, #324]	; 800ad60 <D128_GENERIC+0x3a4>
 800ac1e:	fb20 ee0c 	smlad	lr, r0, ip, lr
 800ac22:	f8df c140 	ldr.w	ip, [pc, #320]	; 800ad64 <D128_GENERIC+0x3a8>
 800ac26:	fb23 ec0c 	smlad	ip, r3, ip, lr
 800ac2a:	f8df e13c 	ldr.w	lr, [pc, #316]	; 800ad68 <D128_GENERIC+0x3ac>
 800ac2e:	fb25 c20e 	smlad	r2, r5, lr, ip
 800ac32:	f04f 0c01 	mov.w	ip, #1
 800ac36:	9202      	str	r2, [sp, #8]
 800ac38:	fb2b fb0c 	smuad	fp, fp, ip
 800ac3c:	f8df c12c 	ldr.w	ip, [pc, #300]	; 800ad6c <D128_GENERIC+0x3b0>
 800ac40:	fb28 bb0c 	smlad	fp, r8, ip, fp
 800ac44:	f8df c128 	ldr.w	ip, [pc, #296]	; 800ad70 <D128_GENERIC+0x3b4>
 800ac48:	fb27 bb0c 	smlad	fp, r7, ip, fp
 800ac4c:	4f3c      	ldr	r7, [pc, #240]	; (800ad40 <D128_GENERIC+0x384>)
 800ac4e:	fb26 bb07 	smlad	fp, r6, r7, fp
 800ac52:	4f3c      	ldr	r7, [pc, #240]	; (800ad44 <D128_GENERIC+0x388>)
 800ac54:	fb24 bb07 	smlad	fp, r4, r7, fp
 800ac58:	4f3b      	ldr	r7, [pc, #236]	; (800ad48 <D128_GENERIC+0x38c>)
 800ac5a:	fb20 bb07 	smlad	fp, r0, r7, fp
 800ac5e:	4f3b      	ldr	r7, [pc, #236]	; (800ad4c <D128_GENERIC+0x390>)
 800ac60:	fb23 bb07 	smlad	fp, r3, r7, fp
 800ac64:	4b3a      	ldr	r3, [pc, #232]	; (800ad50 <D128_GENERIC+0x394>)
 800ac66:	fb25 b303 	smlad	r3, r5, r3, fp
 800ac6a:	9303      	str	r3, [sp, #12]
 800ac6c:	f5aa 1480 	sub.w	r4, sl, #1048576	; 0x100000
 800ac70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac72:	b183      	cbz	r3, 800ac96 <D128_GENERIC+0x2da>
 800ac74:	9a06      	ldr	r2, [sp, #24]
 800ac76:	9907      	ldr	r1, [sp, #28]
 800ac78:	4422      	add	r2, r4
 800ac7a:	9407      	str	r4, [sp, #28]
 800ac7c:	1a52      	subs	r2, r2, r1
 800ac7e:	fba2 0103 	umull	r0, r1, r2, r3
 800ac82:	17d5      	asrs	r5, r2, #31
 800ac84:	f110 4200 	adds.w	r2, r0, #2147483648	; 0x80000000
 800ac88:	fb03 1105 	mla	r1, r3, r5, r1
 800ac8c:	f141 0300 	adc.w	r3, r1, #0
 800ac90:	005b      	lsls	r3, r3, #1
 800ac92:	461c      	mov	r4, r3
 800ac94:	9306      	str	r3, [sp, #24]
 800ac96:	9d01      	ldr	r5, [sp, #4]
 800ac98:	01e4      	lsls	r4, r4, #7
 800ac9a:	9e05      	ldr	r6, [sp, #20]
 800ac9c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800aca0:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 800aca2:	2300      	movs	r3, #0
 800aca4:	9908      	ldr	r1, [sp, #32]
 800aca6:	fb06 f000 	mul.w	r0, r6, r0
 800acaa:	3601      	adds	r6, #1
 800acac:	fbc1 2304 	smlal	r2, r3, r1, r4
 800acb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800acb2:	109b      	asrs	r3, r3, #2
 800acb4:	9605      	str	r6, [sp, #20]
 800acb6:	f303 030f 	ssat	r3, #16, r3
 800acba:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
 800acbe:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 800acc0:	42b3      	cmp	r3, r6
 800acc2:	dd13      	ble.n	800acec <D128_GENERIC+0x330>
 800acc4:	9b01      	ldr	r3, [sp, #4]
 800acc6:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800acc8:	2a01      	cmp	r2, #1
 800acca:	f47f ae95 	bne.w	800a9f8 <D128_GENERIC+0x3c>
 800acce:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800acd0:	f109 0610 	add.w	r6, r9, #16
 800acd4:	0681      	lsls	r1, r0, #26
 800acd6:	e9d9 4200 	ldrd	r4, r2, [r9]
 800acda:	e9d9 3502 	ldrd	r3, r5, [r9, #8]
 800acde:	d518      	bpl.n	800ad12 <D128_GENERIC+0x356>
 800ace0:	ba64      	rev16	r4, r4
 800ace2:	ba52      	rev16	r2, r2
 800ace4:	ba5b      	rev16	r3, r3
 800ace6:	ba6d      	rev16	r5, r5
 800ace8:	46b1      	mov	r9, r6
 800acea:	e6da      	b.n	800aaa2 <D128_GENERIC+0xe6>
 800acec:	f8dd a010 	ldr.w	sl, [sp, #16]
 800acf0:	9b01      	ldr	r3, [sp, #4]
 800acf2:	2000      	movs	r0, #0
 800acf4:	9903      	ldr	r1, [sp, #12]
 800acf6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800acf8:	6099      	str	r1, [r3, #8]
 800acfa:	9902      	ldr	r1, [sp, #8]
 800acfc:	f8c3 a01c 	str.w	sl, [r3, #28]
 800ad00:	60d9      	str	r1, [r3, #12]
 800ad02:	9906      	ldr	r1, [sp, #24]
 800ad04:	619a      	str	r2, [r3, #24]
 800ad06:	6119      	str	r1, [r3, #16]
 800ad08:	9907      	ldr	r1, [sp, #28]
 800ad0a:	6159      	str	r1, [r3, #20]
 800ad0c:	b00d      	add	sp, #52	; 0x34
 800ad0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad12:	46b1      	mov	r9, r6
 800ad14:	e6c5      	b.n	800aaa2 <D128_GENERIC+0xe6>
 800ad16:	bf00      	nop
 800ad18:	24000000 	.word	0x24000000
 800ad1c:	00780069 	.word	0x00780069
 800ad20:	005b004e 	.word	0x005b004e
 800ad24:	00420037 	.word	0x00420037
 800ad28:	002d0024 	.word	0x002d0024
 800ad2c:	001c0015 	.word	0x001c0015
 800ad30:	000f000a 	.word	0x000f000a
 800ad34:	00060003 	.word	0x00060003
 800ad38:	00880096 	.word	0x00880096
 800ad3c:	00a200ac 	.word	0x00a200ac
 800ad40:	0015001c 	.word	0x0015001c
 800ad44:	0024002d 	.word	0x0024002d
 800ad48:	00370042 	.word	0x00370042
 800ad4c:	004e005b 	.word	0x004e005b
 800ad50:	00690078 	.word	0x00690078
 800ad54:	00b400ba 	.word	0x00b400ba
 800ad58:	00be00c0 	.word	0x00be00c0
 800ad5c:	00c000be 	.word	0x00c000be
 800ad60:	00ba00b4 	.word	0x00ba00b4
 800ad64:	00ac00a2 	.word	0x00ac00a2
 800ad68:	00960088 	.word	0x00960088
 800ad6c:	00030006 	.word	0x00030006
 800ad70:	000a000f 	.word	0x000a000f

0800ad74 <D16_1CH_HTONS_VOL_HP>:
 800ad74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad78:	6993      	ldr	r3, [r2, #24]
 800ad7a:	b087      	sub	sp, #28
 800ad7c:	4682      	mov	sl, r0
 800ad7e:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 800ad80:	9304      	str	r3, [sp, #16]
 800ad82:	f8d2 b030 	ldr.w	fp, [r2, #48]	; 0x30
 800ad86:	69d3      	ldr	r3, [r2, #28]
 800ad88:	f8d2 e020 	ldr.w	lr, [r2, #32]
 800ad8c:	e9d2 5402 	ldrd	r5, r4, [r2, #8]
 800ad90:	e9d2 6c04 	ldrd	r6, ip, [r2, #16]
 800ad94:	9403      	str	r4, [sp, #12]
 800ad96:	2800      	cmp	r0, #0
 800ad98:	d054      	beq.n	800ae44 <D16_1CH_HTONS_VOL_HP+0xd0>
 800ad9a:	f1a1 0902 	sub.w	r9, r1, #2
 800ad9e:	eb0a 0140 	add.w	r1, sl, r0, lsl #1
 800ada2:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 800ae50 <D16_1CH_HTONS_VOL_HP+0xdc>
 800ada6:	4650      	mov	r0, sl
 800ada8:	9101      	str	r1, [sp, #4]
 800adaa:	4619      	mov	r1, r3
 800adac:	f8cd b008 	str.w	fp, [sp, #8]
 800adb0:	9205      	str	r2, [sp, #20]
 800adb2:	f850 3b02 	ldr.w	r3, [r0], #2
 800adb6:	ba5b      	rev16	r3, r3
 800adb8:	b2dc      	uxtb	r4, r3
 800adba:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800adbe:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800adc2:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 800adc6:	4419      	add	r1, r3
 800adc8:	eb04 2491 	add.w	r4, r4, r1, lsr #10
 800adcc:	f3c1 0309 	ubfx	r3, r1, #0, #10
 800add0:	f3c4 0209 	ubfx	r2, r4, #0, #10
 800add4:	0aa1      	lsrs	r1, r4, #10
 800add6:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 800adda:	4a1b      	ldr	r2, [pc, #108]	; (800ae48 <D16_1CH_HTONS_VOL_HP+0xd4>)
 800addc:	fb23 5402 	smlad	r4, r3, r2, r5
 800ade0:	4a1a      	ldr	r2, [pc, #104]	; (800ae4c <D16_1CH_HTONS_VOL_HP+0xd8>)
 800ade2:	fb23 f502 	smuad	r5, r3, r2
 800ade6:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 800adea:	f04f 4a00 	mov.w	sl, #2147483648	; 0x80000000
 800adee:	f04f 0b00 	mov.w	fp, #0
 800adf2:	19a2      	adds	r2, r4, r6
 800adf4:	eba2 020c 	sub.w	r2, r2, ip
 800adf8:	46a4      	mov	ip, r4
 800adfa:	17d7      	asrs	r7, r2, #31
 800adfc:	fba2 230e 	umull	r2, r3, r2, lr
 800ae00:	f112 4600 	adds.w	r6, r2, #2147483648	; 0x80000000
 800ae04:	fb0e 3307 	mla	r3, lr, r7, r3
 800ae08:	f143 0700 	adc.w	r7, r3, #0
 800ae0c:	9b02      	ldr	r3, [sp, #8]
 800ae0e:	047a      	lsls	r2, r7, #17
 800ae10:	007e      	lsls	r6, r7, #1
 800ae12:	fbc3 ab02 	smlal	sl, fp, r3, r2
 800ae16:	ea4f 03ab 	mov.w	r3, fp, asr #2
 800ae1a:	f303 030f 	ssat	r3, #16, r3
 800ae1e:	f829 3f02 	strh.w	r3, [r9, #2]!
 800ae22:	9b01      	ldr	r3, [sp, #4]
 800ae24:	4298      	cmp	r0, r3
 800ae26:	d1c4      	bne.n	800adb2 <D16_1CH_HTONS_VOL_HP+0x3e>
 800ae28:	460b      	mov	r3, r1
 800ae2a:	9a05      	ldr	r2, [sp, #20]
 800ae2c:	2000      	movs	r0, #0
 800ae2e:	9903      	ldr	r1, [sp, #12]
 800ae30:	61d3      	str	r3, [r2, #28]
 800ae32:	9b04      	ldr	r3, [sp, #16]
 800ae34:	6095      	str	r5, [r2, #8]
 800ae36:	60d1      	str	r1, [r2, #12]
 800ae38:	6193      	str	r3, [r2, #24]
 800ae3a:	e9c2 6404 	strd	r6, r4, [r2, #16]
 800ae3e:	b007      	add	sp, #28
 800ae40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae44:	4664      	mov	r4, ip
 800ae46:	e7f1      	b.n	800ae2c <D16_1CH_HTONS_VOL_HP+0xb8>
 800ae48:	00030001 	.word	0x00030001
 800ae4c:	00010003 	.word	0x00010003
 800ae50:	24000000 	.word	0x24000000

0800ae54 <D24_1CH_HTONS_VOL_HP>:
 800ae54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae58:	6b16      	ldr	r6, [r2, #48]	; 0x30
 800ae5a:	b089      	sub	sp, #36	; 0x24
 800ae5c:	6993      	ldr	r3, [r2, #24]
 800ae5e:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800ae60:	9604      	str	r6, [sp, #16]
 800ae62:	6a16      	ldr	r6, [r2, #32]
 800ae64:	9306      	str	r3, [sp, #24]
 800ae66:	9505      	str	r5, [sp, #20]
 800ae68:	69d3      	ldr	r3, [r2, #28]
 800ae6a:	9600      	str	r6, [sp, #0]
 800ae6c:	e9d2 4a04 	ldrd	r4, sl, [r2, #16]
 800ae70:	e9d2 ce02 	ldrd	ip, lr, [r2, #8]
 800ae74:	2d00      	cmp	r5, #0
 800ae76:	f000 8083 	beq.w	800af80 <D24_1CH_HTONS_VOL_HP+0x12c>
 800ae7a:	9207      	str	r2, [sp, #28]
 800ae7c:	2600      	movs	r6, #0
 800ae7e:	4622      	mov	r2, r4
 800ae80:	f1a1 0b02 	sub.w	fp, r1, #2
 800ae84:	4f3f      	ldr	r7, [pc, #252]	; (800af84 <D24_1CH_HTONS_VOL_HP+0x130>)
 800ae86:	461d      	mov	r5, r3
 800ae88:	f8cd a00c 	str.w	sl, [sp, #12]
 800ae8c:	9c00      	ldr	r4, [sp, #0]
 800ae8e:	e056      	b.n	800af3e <D24_1CH_HTONS_VOL_HP+0xea>
 800ae90:	7841      	ldrb	r1, [r0, #1]
 800ae92:	eb08 4809 	add.w	r8, r8, r9, lsl #16
 800ae96:	3002      	adds	r0, #2
 800ae98:	4488      	add	r8, r1
 800ae9a:	fa5f f388 	uxtb.w	r3, r8
 800ae9e:	f3c8 2907 	ubfx	r9, r8, #8, #8
 800aea2:	ea4f 4818 	mov.w	r8, r8, lsr #16
 800aea6:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 800aeaa:	f857 3029 	ldr.w	r3, [r7, r9, lsl #2]
 800aeae:	eb01 2195 	add.w	r1, r1, r5, lsr #10
 800aeb2:	f857 5028 	ldr.w	r5, [r7, r8, lsl #2]
 800aeb6:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 800aeba:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800aebe:	f3c8 0309 	ubfx	r3, r8, #0, #10
 800aec2:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 800aec6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800aeca:	492f      	ldr	r1, [pc, #188]	; (800af88 <D24_1CH_HTONS_VOL_HP+0x134>)
 800aecc:	fb23 e901 	smlad	r9, r3, r1, lr
 800aed0:	492e      	ldr	r1, [pc, #184]	; (800af8c <D24_1CH_HTONS_VOL_HP+0x138>)
 800aed2:	fb23 ce01 	smlad	lr, r3, r1, ip
 800aed6:	f3c5 0c09 	ubfx	ip, r5, #0, #10
 800aeda:	2101      	movs	r1, #1
 800aedc:	eb0c 084c 	add.w	r8, ip, ip, lsl #1
 800aee0:	eb0e 0e48 	add.w	lr, lr, r8, lsl #1
 800aee4:	fb23 f301 	smuad	r3, r3, r1
 800aee8:	f5a9 51d8 	sub.w	r1, r9, #6912	; 0x1b00
 800aeec:	eb08 0c03 	add.w	ip, r8, r3
 800aef0:	9b03      	ldr	r3, [sp, #12]
 800aef2:	f04f 0a00 	mov.w	sl, #0
 800aef6:	440a      	add	r2, r1
 800aef8:	3601      	adds	r6, #1
 800aefa:	9103      	str	r1, [sp, #12]
 800aefc:	1ad2      	subs	r2, r2, r3
 800aefe:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800af02:	fba2 2304 	umull	r2, r3, r2, r4
 800af06:	e9cd 2300 	strd	r2, r3, [sp]
 800af0a:	fb04 3309 	mla	r3, r4, r9, r3
 800af0e:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 800af12:	9301      	str	r3, [sp, #4]
 800af14:	e9dd 2300 	ldrd	r2, r3, [sp]
 800af18:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800af1c:	f143 0300 	adc.w	r3, r3, #0
 800af20:	ea4f 38c3 	mov.w	r8, r3, lsl #15
 800af24:	005a      	lsls	r2, r3, #1
 800af26:	9b04      	ldr	r3, [sp, #16]
 800af28:	fbc3 9a08 	smlal	r9, sl, r3, r8
 800af2c:	ea4f 03aa 	mov.w	r3, sl, asr #2
 800af30:	f303 030f 	ssat	r3, #16, r3
 800af34:	f82b 3f02 	strh.w	r3, [fp, #2]!
 800af38:	9b05      	ldr	r3, [sp, #20]
 800af3a:	429e      	cmp	r6, r3
 800af3c:	d010      	beq.n	800af60 <D24_1CH_HTONS_VOL_HP+0x10c>
 800af3e:	f890 9003 	ldrb.w	r9, [r0, #3]
 800af42:	f016 0f01 	tst.w	r6, #1
 800af46:	7801      	ldrb	r1, [r0, #0]
 800af48:	ea4f 2309 	mov.w	r3, r9, lsl #8
 800af4c:	ea4f 2801 	mov.w	r8, r1, lsl #8
 800af50:	d09e      	beq.n	800ae90 <D24_1CH_HTONS_VOL_HP+0x3c>
 800af52:	f890 8002 	ldrb.w	r8, [r0, #2]
 800af56:	3004      	adds	r0, #4
 800af58:	eb03 4808 	add.w	r8, r3, r8, lsl #16
 800af5c:	4488      	add	r8, r1
 800af5e:	e79c      	b.n	800ae9a <D24_1CH_HTONS_VOL_HP+0x46>
 800af60:	4614      	mov	r4, r2
 800af62:	462b      	mov	r3, r5
 800af64:	9a07      	ldr	r2, [sp, #28]
 800af66:	2000      	movs	r0, #0
 800af68:	61d3      	str	r3, [r2, #28]
 800af6a:	9b06      	ldr	r3, [sp, #24]
 800af6c:	f8c2 c008 	str.w	ip, [r2, #8]
 800af70:	f8c2 e00c 	str.w	lr, [r2, #12]
 800af74:	6193      	str	r3, [r2, #24]
 800af76:	e9c2 4104 	strd	r4, r1, [r2, #16]
 800af7a:	b009      	add	sp, #36	; 0x24
 800af7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af80:	4651      	mov	r1, sl
 800af82:	e7f0      	b.n	800af66 <D24_1CH_HTONS_VOL_HP+0x112>
 800af84:	24000000 	.word	0x24000000
 800af88:	00030001 	.word	0x00030001
 800af8c:	00060007 	.word	0x00060007

0800af90 <D32_1CH_HTONS_VOL_HP>:
 800af90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af94:	6993      	ldr	r3, [r2, #24]
 800af96:	b087      	sub	sp, #28
 800af98:	4683      	mov	fp, r0
 800af9a:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 800af9c:	9304      	str	r3, [sp, #16]
 800af9e:	69d5      	ldr	r5, [r2, #28]
 800afa0:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800afa2:	f8d2 a020 	ldr.w	sl, [r2, #32]
 800afa6:	e9d2 8e04 	ldrd	r8, lr, [r2, #16]
 800afaa:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 800afae:	2800      	cmp	r0, #0
 800afb0:	d077      	beq.n	800b0a2 <D32_1CH_HTONS_VOL_HP+0x112>
 800afb2:	460f      	mov	r7, r1
 800afb4:	46f1      	mov	r9, lr
 800afb6:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 800afba:	f8cd 8000 	str.w	r8, [sp]
 800afbe:	4e3a      	ldr	r6, [pc, #232]	; (800b0a8 <D32_1CH_HTONS_VOL_HP+0x118>)
 800afc0:	469e      	mov	lr, r3
 800afc2:	46a0      	mov	r8, r4
 800afc4:	9103      	str	r1, [sp, #12]
 800afc6:	9205      	str	r2, [sp, #20]
 800afc8:	f85b 4b04 	ldr.w	r4, [fp], #4
 800afcc:	ba64      	rev16	r4, r4
 800afce:	b2e0      	uxtb	r0, r4
 800afd0:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800afd4:	f3c4 4107 	ubfx	r1, r4, #16, #8
 800afd8:	0e24      	lsrs	r4, r4, #24
 800afda:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 800afde:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800afe2:	eb00 2095 	add.w	r0, r0, r5, lsr #10
 800afe6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800afea:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
 800afee:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 800aff2:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800aff6:	eb01 2193 	add.w	r1, r1, r3, lsr #10
 800affa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800affe:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800b002:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800b006:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b00a:	f3c5 0009 	ubfx	r0, r5, #0, #10
 800b00e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800b012:	4826      	ldr	r0, [pc, #152]	; (800b0ac <D32_1CH_HTONS_VOL_HP+0x11c>)
 800b014:	fb23 c400 	smlad	r4, r3, r0, ip
 800b018:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800b01c:	fb21 4402 	smlad	r4, r1, r2, r4
 800b020:	4823      	ldr	r0, [pc, #140]	; (800b0b0 <D32_1CH_HTONS_VOL_HP+0x120>)
 800b022:	fb23 ec00 	smlad	ip, r3, r0, lr
 800b026:	4823      	ldr	r0, [pc, #140]	; (800b0b4 <D32_1CH_HTONS_VOL_HP+0x124>)
 800b028:	fb21 cc00 	smlad	ip, r1, r0, ip
 800b02c:	2201      	movs	r2, #1
 800b02e:	fb23 f302 	smuad	r3, r3, r2
 800b032:	4821      	ldr	r0, [pc, #132]	; (800b0b8 <D32_1CH_HTONS_VOL_HP+0x128>)
 800b034:	fb21 3e00 	smlad	lr, r1, r0, r3
 800b038:	9b00      	ldr	r3, [sp, #0]
 800b03a:	f5a4 4480 	sub.w	r4, r4, #16384	; 0x4000
 800b03e:	4423      	add	r3, r4
 800b040:	eba3 0209 	sub.w	r2, r3, r9
 800b044:	46a1      	mov	r9, r4
 800b046:	17d1      	asrs	r1, r2, #31
 800b048:	fba2 230a 	umull	r2, r3, r2, sl
 800b04c:	e9cd 2300 	strd	r2, r3, [sp]
 800b050:	fb0a 3301 	mla	r3, sl, r1, r3
 800b054:	9301      	str	r3, [sp, #4]
 800b056:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b05a:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800b05e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b062:	f143 0300 	adc.w	r3, r3, #0
 800b066:	0399      	lsls	r1, r3, #14
 800b068:	005b      	lsls	r3, r3, #1
 800b06a:	9300      	str	r3, [sp, #0]
 800b06c:	2300      	movs	r3, #0
 800b06e:	fbc8 2301 	smlal	r2, r3, r8, r1
 800b072:	109b      	asrs	r3, r3, #2
 800b074:	f303 030f 	ssat	r3, #16, r3
 800b078:	f827 3b02 	strh.w	r3, [r7], #2
 800b07c:	9b03      	ldr	r3, [sp, #12]
 800b07e:	429f      	cmp	r7, r3
 800b080:	d1a2      	bne.n	800afc8 <D32_1CH_HTONS_VOL_HP+0x38>
 800b082:	4673      	mov	r3, lr
 800b084:	f8dd 8000 	ldr.w	r8, [sp]
 800b088:	9a05      	ldr	r2, [sp, #20]
 800b08a:	6093      	str	r3, [r2, #8]
 800b08c:	2000      	movs	r0, #0
 800b08e:	9b04      	ldr	r3, [sp, #16]
 800b090:	f8c2 c00c 	str.w	ip, [r2, #12]
 800b094:	61d5      	str	r5, [r2, #28]
 800b096:	6193      	str	r3, [r2, #24]
 800b098:	e9c2 8404 	strd	r8, r4, [r2, #16]
 800b09c:	b007      	add	sp, #28
 800b09e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0a2:	4674      	mov	r4, lr
 800b0a4:	e7f1      	b.n	800b08a <D32_1CH_HTONS_VOL_HP+0xfa>
 800b0a6:	bf00      	nop
 800b0a8:	24000000 	.word	0x24000000
 800b0ac:	00060003 	.word	0x00060003
 800b0b0:	000a000c 	.word	0x000a000c
 800b0b4:	000c000a 	.word	0x000c000a
 800b0b8:	00030006 	.word	0x00030006

0800b0bc <D48_1CH_HTONS_VOL_HP>:
 800b0bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0c0:	6b17      	ldr	r7, [r2, #48]	; 0x30
 800b0c2:	b087      	sub	sp, #28
 800b0c4:	6993      	ldr	r3, [r2, #24]
 800b0c6:	9701      	str	r7, [sp, #4]
 800b0c8:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800b0ca:	6a17      	ldr	r7, [r2, #32]
 800b0cc:	9304      	str	r3, [sp, #16]
 800b0ce:	69d6      	ldr	r6, [r2, #28]
 800b0d0:	9702      	str	r7, [sp, #8]
 800b0d2:	e9d2 4e04 	ldrd	r4, lr, [r2, #16]
 800b0d6:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 800b0da:	2d00      	cmp	r5, #0
 800b0dc:	f000 8093 	beq.w	800b206 <D48_1CH_HTONS_VOL_HP+0x14a>
 800b0e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b0e4:	f1a1 0b02 	sub.w	fp, r1, #2
 800b0e8:	46f2      	mov	sl, lr
 800b0ea:	4f48      	ldr	r7, [pc, #288]	; (800b20c <D48_1CH_HTONS_VOL_HP+0x150>)
 800b0ec:	eb00 0145 	add.w	r1, r0, r5, lsl #1
 800b0f0:	469e      	mov	lr, r3
 800b0f2:	9205      	str	r2, [sp, #20]
 800b0f4:	9103      	str	r1, [sp, #12]
 800b0f6:	e9d0 3200 	ldrd	r3, r2, [r0]
 800b0fa:	3006      	adds	r0, #6
 800b0fc:	ba5b      	rev16	r3, r3
 800b0fe:	fa92 f992 	rev16.w	r9, r2
 800b102:	b2dd      	uxtb	r5, r3
 800b104:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800b108:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800b10c:	0e1b      	lsrs	r3, r3, #24
 800b10e:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 800b112:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 800b116:	eb05 2696 	add.w	r6, r5, r6, lsr #10
 800b11a:	f857 5022 	ldr.w	r5, [r7, r2, lsl #2]
 800b11e:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800b122:	fa5f f289 	uxtb.w	r2, r9
 800b126:	eb01 2196 	add.w	r1, r1, r6, lsr #10
 800b12a:	f3c9 2907 	ubfx	r9, r9, #8, #8
 800b12e:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800b132:	f3c6 0809 	ubfx	r8, r6, #0, #10
 800b136:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800b13a:	f857 6029 	ldr.w	r6, [r7, r9, lsl #2]
 800b13e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800b142:	eb03 2395 	add.w	r3, r3, r5, lsr #10
 800b146:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800b14a:	ea41 4808 	orr.w	r8, r1, r8, lsl #16
 800b14e:	eb02 2293 	add.w	r2, r2, r3, lsr #10
 800b152:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b156:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 800b15a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800b15e:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 800b162:	f3c6 0309 	ubfx	r3, r6, #0, #10
 800b166:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 800b16a:	4b29      	ldr	r3, [pc, #164]	; (800b210 <D48_1CH_HTONS_VOL_HP+0x154>)
 800b16c:	fb28 c103 	smlad	r1, r8, r3, ip
 800b170:	4b28      	ldr	r3, [pc, #160]	; (800b214 <D48_1CH_HTONS_VOL_HP+0x158>)
 800b172:	fb25 1103 	smlad	r1, r5, r3, r1
 800b176:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b17a:	fb22 1903 	smlad	r9, r2, r3, r1
 800b17e:	4b26      	ldr	r3, [pc, #152]	; (800b218 <D48_1CH_HTONS_VOL_HP+0x15c>)
 800b180:	fb28 ec03 	smlad	ip, r8, r3, lr
 800b184:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 800b188:	fb25 cc03 	smlad	ip, r5, r3, ip
 800b18c:	4b23      	ldr	r3, [pc, #140]	; (800b21c <D48_1CH_HTONS_VOL_HP+0x160>)
 800b18e:	fb22 cc03 	smlad	ip, r2, r3, ip
 800b192:	2101      	movs	r1, #1
 800b194:	fb28 f801 	smuad	r8, r8, r1
 800b198:	4b21      	ldr	r3, [pc, #132]	; (800b220 <D48_1CH_HTONS_VOL_HP+0x164>)
 800b19a:	fb25 8503 	smlad	r5, r5, r3, r8
 800b19e:	4b21      	ldr	r3, [pc, #132]	; (800b224 <D48_1CH_HTONS_VOL_HP+0x168>)
 800b1a0:	fb22 5e03 	smlad	lr, r2, r3, r5
 800b1a4:	f5a9 4158 	sub.w	r1, r9, #55296	; 0xd800
 800b1a8:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800b1ac:	190a      	adds	r2, r1, r4
 800b1ae:	9c02      	ldr	r4, [sp, #8]
 800b1b0:	eba2 020a 	sub.w	r2, r2, sl
 800b1b4:	468a      	mov	sl, r1
 800b1b6:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800b1ba:	fba2 2304 	umull	r2, r3, r2, r4
 800b1be:	fb04 3309 	mla	r3, r4, r9, r3
 800b1c2:	f112 4400 	adds.w	r4, r2, #2147483648	; 0x80000000
 800b1c6:	f04f 0900 	mov.w	r9, #0
 800b1ca:	f143 0500 	adc.w	r5, r3, #0
 800b1ce:	9b01      	ldr	r3, [sp, #4]
 800b1d0:	032a      	lsls	r2, r5, #12
 800b1d2:	006c      	lsls	r4, r5, #1
 800b1d4:	fbc3 8902 	smlal	r8, r9, r3, r2
 800b1d8:	ea4f 03a9 	mov.w	r3, r9, asr #2
 800b1dc:	f303 030f 	ssat	r3, #16, r3
 800b1e0:	f82b 3f02 	strh.w	r3, [fp, #2]!
 800b1e4:	9b03      	ldr	r3, [sp, #12]
 800b1e6:	4283      	cmp	r3, r0
 800b1e8:	d185      	bne.n	800b0f6 <D48_1CH_HTONS_VOL_HP+0x3a>
 800b1ea:	4673      	mov	r3, lr
 800b1ec:	9a05      	ldr	r2, [sp, #20]
 800b1ee:	6093      	str	r3, [r2, #8]
 800b1f0:	2000      	movs	r0, #0
 800b1f2:	9b04      	ldr	r3, [sp, #16]
 800b1f4:	f8c2 c00c 	str.w	ip, [r2, #12]
 800b1f8:	61d6      	str	r6, [r2, #28]
 800b1fa:	6193      	str	r3, [r2, #24]
 800b1fc:	e9c2 4104 	strd	r4, r1, [r2, #16]
 800b200:	b007      	add	sp, #28
 800b202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b206:	4671      	mov	r1, lr
 800b208:	e7f1      	b.n	800b1ee <D48_1CH_HTONS_VOL_HP+0x132>
 800b20a:	bf00      	nop
 800b20c:	24000000 	.word	0x24000000
 800b210:	000f000a 	.word	0x000f000a
 800b214:	00060003 	.word	0x00060003
 800b218:	00150019 	.word	0x00150019
 800b21c:	00190015 	.word	0x00190015
 800b220:	00030006 	.word	0x00030006
 800b224:	000a000f 	.word	0x000a000f

0800b228 <D64_1CH_HTONS_VOL_HP>:
 800b228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b22c:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800b22e:	b089      	sub	sp, #36	; 0x24
 800b230:	6993      	ldr	r3, [r2, #24]
 800b232:	4686      	mov	lr, r0
 800b234:	9503      	str	r5, [sp, #12]
 800b236:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 800b238:	6a15      	ldr	r5, [r2, #32]
 800b23a:	9306      	str	r3, [sp, #24]
 800b23c:	69d6      	ldr	r6, [r2, #28]
 800b23e:	9504      	str	r5, [sp, #16]
 800b240:	e9d2 8404 	ldrd	r8, r4, [r2, #16]
 800b244:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 800b248:	2800      	cmp	r0, #0
 800b24a:	f000 80a4 	beq.w	800b396 <D64_1CH_HTONS_VOL_HP+0x16e>
 800b24e:	460f      	mov	r7, r1
 800b250:	46f1      	mov	r9, lr
 800b252:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 800b256:	4d56      	ldr	r5, [pc, #344]	; (800b3b0 <D64_1CH_HTONS_VOL_HP+0x188>)
 800b258:	46a2      	mov	sl, r4
 800b25a:	469e      	mov	lr, r3
 800b25c:	9105      	str	r1, [sp, #20]
 800b25e:	9207      	str	r2, [sp, #28]
 800b260:	f859 1b08 	ldr.w	r1, [r9], #8
 800b264:	f859 3c04 	ldr.w	r3, [r9, #-4]
 800b268:	ba49      	rev16	r1, r1
 800b26a:	fa93 fb93 	rev16.w	fp, r3
 800b26e:	b2cb      	uxtb	r3, r1
 800b270:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800b274:	f3c1 4007 	ubfx	r0, r1, #16, #8
 800b278:	0e09      	lsrs	r1, r1, #24
 800b27a:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
 800b27e:	fa5f f38b 	uxtb.w	r3, fp
 800b282:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800b286:	4426      	add	r6, r4
 800b288:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 800b28c:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 800b290:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 800b294:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 800b298:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800b29c:	f3cb 2307 	ubfx	r3, fp, #8, #8
 800b2a0:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 800b2a4:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800b2a8:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800b2ac:	eb01 2194 	add.w	r1, r1, r4, lsr #10
 800b2b0:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800b2b4:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 800b2b8:	f3cb 4607 	ubfx	r6, fp, #16, #8
 800b2bc:	eb00 2091 	add.w	r0, r0, r1, lsr #10
 800b2c0:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800b2c4:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800b2c8:	ea4f 6b1b 	mov.w	fp, fp, lsr #24
 800b2cc:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 800b2d0:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800b2d4:	f855 b02b 	ldr.w	fp, [r5, fp, lsl #2]
 800b2d8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b2dc:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 800b2e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b2e4:	eb0b 2b96 	add.w	fp, fp, r6, lsr #10
 800b2e8:	f3c6 0409 	ubfx	r4, r6, #0, #10
 800b2ec:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b2f0:	f3cb 0009 	ubfx	r0, fp, #0, #10
 800b2f4:	ea4f 269b 	mov.w	r6, fp, lsr #10
 800b2f8:	ea40 4b04 	orr.w	fp, r0, r4, lsl #16
 800b2fc:	482d      	ldr	r0, [pc, #180]	; (800b3b4 <D64_1CH_HTONS_VOL_HP+0x18c>)
 800b2fe:	fb22 cc00 	smlad	ip, r2, r0, ip
 800b302:	482d      	ldr	r0, [pc, #180]	; (800b3b8 <D64_1CH_HTONS_VOL_HP+0x190>)
 800b304:	fb21 cc00 	smlad	ip, r1, r0, ip
 800b308:	482c      	ldr	r0, [pc, #176]	; (800b3bc <D64_1CH_HTONS_VOL_HP+0x194>)
 800b30a:	fb23 cc00 	smlad	ip, r3, r0, ip
 800b30e:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 800b312:	fb2b c404 	smlad	r4, fp, r4, ip
 800b316:	482a      	ldr	r0, [pc, #168]	; (800b3c0 <D64_1CH_HTONS_VOL_HP+0x198>)
 800b318:	fb22 ec00 	smlad	ip, r2, r0, lr
 800b31c:	fb2b cc10 	smladx	ip, fp, r0, ip
 800b320:	4828      	ldr	r0, [pc, #160]	; (800b3c4 <D64_1CH_HTONS_VOL_HP+0x19c>)
 800b322:	fb21 cc00 	smlad	ip, r1, r0, ip
 800b326:	fb23 cc10 	smladx	ip, r3, r0, ip
 800b32a:	f04f 0e01 	mov.w	lr, #1
 800b32e:	fb22 f20e 	smuad	r2, r2, lr
 800b332:	4825      	ldr	r0, [pc, #148]	; (800b3c8 <D64_1CH_HTONS_VOL_HP+0x1a0>)
 800b334:	fb21 2100 	smlad	r1, r1, r0, r2
 800b338:	4a24      	ldr	r2, [pc, #144]	; (800b3cc <D64_1CH_HTONS_VOL_HP+0x1a4>)
 800b33a:	fb23 1302 	smlad	r3, r3, r2, r1
 800b33e:	4a24      	ldr	r2, [pc, #144]	; (800b3d0 <D64_1CH_HTONS_VOL_HP+0x1a8>)
 800b340:	fb2b 3e02 	smlad	lr, fp, r2, r3
 800b344:	f5a4 3400 	sub.w	r4, r4, #131072	; 0x20000
 800b348:	eb04 0208 	add.w	r2, r4, r8
 800b34c:	eba2 020a 	sub.w	r2, r2, sl
 800b350:	46a2      	mov	sl, r4
 800b352:	4610      	mov	r0, r2
 800b354:	17d1      	asrs	r1, r2, #31
 800b356:	e9cd 0100 	strd	r0, r1, [sp]
 800b35a:	9904      	ldr	r1, [sp, #16]
 800b35c:	9801      	ldr	r0, [sp, #4]
 800b35e:	fba2 2301 	umull	r2, r3, r2, r1
 800b362:	fb01 3300 	mla	r3, r1, r0, r3
 800b366:	f112 4000 	adds.w	r0, r2, #2147483648	; 0x80000000
 800b36a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800b36e:	f143 0100 	adc.w	r1, r3, #0
 800b372:	9b03      	ldr	r3, [sp, #12]
 800b374:	02ca      	lsls	r2, r1, #11
 800b376:	ea4f 0841 	mov.w	r8, r1, lsl #1
 800b37a:	2100      	movs	r1, #0
 800b37c:	fbc3 0102 	smlal	r0, r1, r3, r2
 800b380:	108b      	asrs	r3, r1, #2
 800b382:	f303 030f 	ssat	r3, #16, r3
 800b386:	f827 3b02 	strh.w	r3, [r7], #2
 800b38a:	9b05      	ldr	r3, [sp, #20]
 800b38c:	429f      	cmp	r7, r3
 800b38e:	f47f af67 	bne.w	800b260 <D64_1CH_HTONS_VOL_HP+0x38>
 800b392:	4673      	mov	r3, lr
 800b394:	9a07      	ldr	r2, [sp, #28]
 800b396:	6093      	str	r3, [r2, #8]
 800b398:	2000      	movs	r0, #0
 800b39a:	9b06      	ldr	r3, [sp, #24]
 800b39c:	f8c2 c00c 	str.w	ip, [r2, #12]
 800b3a0:	61d6      	str	r6, [r2, #28]
 800b3a2:	6193      	str	r3, [r2, #24]
 800b3a4:	e9c2 8404 	strd	r8, r4, [r2, #16]
 800b3a8:	b009      	add	sp, #36	; 0x24
 800b3aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3ae:	bf00      	nop
 800b3b0:	24000000 	.word	0x24000000
 800b3b4:	001c0015 	.word	0x001c0015
 800b3b8:	000f000a 	.word	0x000f000a
 800b3bc:	00060003 	.word	0x00060003
 800b3c0:	0024002a 	.word	0x0024002a
 800b3c4:	002e0030 	.word	0x002e0030
 800b3c8:	00030006 	.word	0x00030006
 800b3cc:	000a000f 	.word	0x000a000f
 800b3d0:	0015001c 	.word	0x0015001c

0800b3d4 <D80_1CH_HTONS_VOL_HP>:
 800b3d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3d8:	6913      	ldr	r3, [r2, #16]
 800b3da:	b089      	sub	sp, #36	; 0x24
 800b3dc:	6b16      	ldr	r6, [r2, #48]	; 0x30
 800b3de:	9301      	str	r3, [sp, #4]
 800b3e0:	9603      	str	r6, [sp, #12]
 800b3e2:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800b3e4:	6a16      	ldr	r6, [r2, #32]
 800b3e6:	e9d2 5305 	ldrd	r5, r3, [r2, #20]
 800b3ea:	e9d2 7c02 	ldrd	r7, ip, [r2, #8]
 800b3ee:	9306      	str	r3, [sp, #24]
 800b3f0:	9604      	str	r6, [sp, #16]
 800b3f2:	69d3      	ldr	r3, [r2, #28]
 800b3f4:	2c00      	cmp	r4, #0
 800b3f6:	f000 80ce 	beq.w	800b596 <D80_1CH_HTONS_VOL_HP+0x1c2>
 800b3fa:	3902      	subs	r1, #2
 800b3fc:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800b400:	4e66      	ldr	r6, [pc, #408]	; (800b59c <D80_1CH_HTONS_VOL_HP+0x1c8>)
 800b402:	469e      	mov	lr, r3
 800b404:	9102      	str	r1, [sp, #8]
 800b406:	46aa      	mov	sl, r5
 800b408:	eb00 0144 	add.w	r1, r0, r4, lsl #1
 800b40c:	9207      	str	r2, [sp, #28]
 800b40e:	9105      	str	r1, [sp, #20]
 800b410:	6883      	ldr	r3, [r0, #8]
 800b412:	e9d0 4200 	ldrd	r4, r2, [r0]
 800b416:	300a      	adds	r0, #10
 800b418:	ba64      	rev16	r4, r4
 800b41a:	ba52      	rev16	r2, r2
 800b41c:	fa93 fb93 	rev16.w	fp, r3
 800b420:	b2e5      	uxtb	r5, r4
 800b422:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800b426:	f3c4 4107 	ubfx	r1, r4, #16, #8
 800b42a:	0e24      	lsrs	r4, r4, #24
 800b42c:	f856 8025 	ldr.w	r8, [r6, r5, lsl #2]
 800b430:	b2d5      	uxtb	r5, r2
 800b432:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800b436:	44c6      	add	lr, r8
 800b438:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800b43c:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
 800b440:	eb03 239e 	add.w	r3, r3, lr, lsr #10
 800b444:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 800b448:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800b44c:	eb01 2993 	add.w	r9, r1, r3, lsr #10
 800b450:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800b454:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b458:	eb04 2499 	add.w	r4, r4, r9, lsr #10
 800b45c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800b460:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800b464:	f3cb 2e07 	ubfx	lr, fp, #8, #8
 800b468:	eb05 2894 	add.w	r8, r5, r4, lsr #10
 800b46c:	f3c2 4507 	ubfx	r5, r2, #16, #8
 800b470:	0e12      	lsrs	r2, r2, #24
 800b472:	f856 e02e 	ldr.w	lr, [r6, lr, lsl #2]
 800b476:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 800b47a:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 800b47e:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 800b482:	fa5f fb8b 	uxtb.w	fp, fp
 800b486:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800b48a:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800b48e:	f856 b02b 	ldr.w	fp, [r6, fp, lsl #2]
 800b492:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800b496:	eb02 2295 	add.w	r2, r2, r5, lsr #10
 800b49a:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800b49e:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800b4a2:	ea41 4808 	orr.w	r8, r1, r8, lsl #16
 800b4a6:	eb0b 2b92 	add.w	fp, fp, r2, lsr #10
 800b4aa:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800b4ae:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800b4b2:	eb0e 2e9b 	add.w	lr, lr, fp, lsr #10
 800b4b6:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800b4ba:	ea44 4409 	orr.w	r4, r4, r9, lsl #16
 800b4be:	f3ce 0109 	ubfx	r1, lr, #0, #10
 800b4c2:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 800b4c6:	ea4f 2e9e 	mov.w	lr, lr, lsr #10
 800b4ca:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 800b4ce:	4934      	ldr	r1, [pc, #208]	; (800b5a0 <D80_1CH_HTONS_VOL_HP+0x1cc>)
 800b4d0:	fb23 cc01 	smlad	ip, r3, r1, ip
 800b4d4:	4933      	ldr	r1, [pc, #204]	; (800b5a4 <D80_1CH_HTONS_VOL_HP+0x1d0>)
 800b4d6:	fb24 cc01 	smlad	ip, r4, r1, ip
 800b4da:	4933      	ldr	r1, [pc, #204]	; (800b5a8 <D80_1CH_HTONS_VOL_HP+0x1d4>)
 800b4dc:	fb28 cc01 	smlad	ip, r8, r1, ip
 800b4e0:	4932      	ldr	r1, [pc, #200]	; (800b5ac <D80_1CH_HTONS_VOL_HP+0x1d8>)
 800b4e2:	fb22 cc01 	smlad	ip, r2, r1, ip
 800b4e6:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800b4ea:	fb2b c901 	smlad	r9, fp, r1, ip
 800b4ee:	4930      	ldr	r1, [pc, #192]	; (800b5b0 <D80_1CH_HTONS_VOL_HP+0x1dc>)
 800b4f0:	fb23 7701 	smlad	r7, r3, r1, r7
 800b4f4:	492f      	ldr	r1, [pc, #188]	; (800b5b4 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 800b4f6:	fb24 7701 	smlad	r7, r4, r1, r7
 800b4fa:	f04f 1c4b 	mov.w	ip, #4915275	; 0x4b004b
 800b4fe:	fb28 7c0c 	smlad	ip, r8, ip, r7
 800b502:	492d      	ldr	r1, [pc, #180]	; (800b5b8 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 800b504:	fb22 cc01 	smlad	ip, r2, r1, ip
 800b508:	492c      	ldr	r1, [pc, #176]	; (800b5bc <D80_1CH_HTONS_VOL_HP+0x1e8>)
 800b50a:	fb2b cc01 	smlad	ip, fp, r1, ip
 800b50e:	2101      	movs	r1, #1
 800b510:	fb23 f301 	smuad	r3, r3, r1
 800b514:	492a      	ldr	r1, [pc, #168]	; (800b5c0 <D80_1CH_HTONS_VOL_HP+0x1ec>)
 800b516:	fb24 3401 	smlad	r4, r4, r1, r3
 800b51a:	492a      	ldr	r1, [pc, #168]	; (800b5c4 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 800b51c:	fb28 4101 	smlad	r1, r8, r1, r4
 800b520:	4f29      	ldr	r7, [pc, #164]	; (800b5c8 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 800b522:	fb22 1207 	smlad	r2, r2, r7, r1
 800b526:	4f29      	ldr	r7, [pc, #164]	; (800b5cc <D80_1CH_HTONS_VOL_HP+0x1f8>)
 800b528:	fb2b 2707 	smlad	r7, fp, r7, r2
 800b52c:	f5a9 317a 	sub.w	r1, r9, #256000	; 0x3e800
 800b530:	9b01      	ldr	r3, [sp, #4]
 800b532:	9c04      	ldr	r4, [sp, #16]
 800b534:	440b      	add	r3, r1
 800b536:	eba3 020a 	sub.w	r2, r3, sl
 800b53a:	468a      	mov	sl, r1
 800b53c:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800b540:	fba2 2304 	umull	r2, r3, r2, r4
 800b544:	fb04 3309 	mla	r3, r4, r9, r3
 800b548:	f112 4400 	adds.w	r4, r2, #2147483648	; 0x80000000
 800b54c:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800b550:	f143 0500 	adc.w	r5, r3, #0
 800b554:	006b      	lsls	r3, r5, #1
 800b556:	02aa      	lsls	r2, r5, #10
 800b558:	2500      	movs	r5, #0
 800b55a:	9301      	str	r3, [sp, #4]
 800b55c:	9b03      	ldr	r3, [sp, #12]
 800b55e:	fbc3 4502 	smlal	r4, r5, r3, r2
 800b562:	9a02      	ldr	r2, [sp, #8]
 800b564:	10ab      	asrs	r3, r5, #2
 800b566:	f303 030f 	ssat	r3, #16, r3
 800b56a:	f822 3f02 	strh.w	r3, [r2, #2]!
 800b56e:	9b05      	ldr	r3, [sp, #20]
 800b570:	9202      	str	r2, [sp, #8]
 800b572:	4298      	cmp	r0, r3
 800b574:	f47f af4c 	bne.w	800b410 <D80_1CH_HTONS_VOL_HP+0x3c>
 800b578:	4673      	mov	r3, lr
 800b57a:	9a07      	ldr	r2, [sp, #28]
 800b57c:	61d3      	str	r3, [r2, #28]
 800b57e:	2000      	movs	r0, #0
 800b580:	9b01      	ldr	r3, [sp, #4]
 800b582:	6097      	str	r7, [r2, #8]
 800b584:	f8c2 c00c 	str.w	ip, [r2, #12]
 800b588:	e9c2 3104 	strd	r3, r1, [r2, #16]
 800b58c:	9b06      	ldr	r3, [sp, #24]
 800b58e:	6193      	str	r3, [r2, #24]
 800b590:	b009      	add	sp, #36	; 0x24
 800b592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b596:	4629      	mov	r1, r5
 800b598:	e7f0      	b.n	800b57c <D80_1CH_HTONS_VOL_HP+0x1a8>
 800b59a:	bf00      	nop
 800b59c:	24000000 	.word	0x24000000
 800b5a0:	002d0024 	.word	0x002d0024
 800b5a4:	001c0015 	.word	0x001c0015
 800b5a8:	000f000a 	.word	0x000f000a
 800b5ac:	00060003 	.word	0x00060003
 800b5b0:	0037003f 	.word	0x0037003f
 800b5b4:	00450049 	.word	0x00450049
 800b5b8:	00490045 	.word	0x00490045
 800b5bc:	003f0037 	.word	0x003f0037
 800b5c0:	00030006 	.word	0x00030006
 800b5c4:	000a000f 	.word	0x000a000f
 800b5c8:	0015001c 	.word	0x0015001c
 800b5cc:	0024002d 	.word	0x0024002d

0800b5d0 <D128_1CH_HTONS_VOL_HP>:
 800b5d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5d4:	6914      	ldr	r4, [r2, #16]
 800b5d6:	b08d      	sub	sp, #52	; 0x34
 800b5d8:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800b5da:	9404      	str	r4, [sp, #16]
 800b5dc:	6954      	ldr	r4, [r2, #20]
 800b5de:	920b      	str	r2, [sp, #44]	; 0x2c
 800b5e0:	9405      	str	r4, [sp, #20]
 800b5e2:	6994      	ldr	r4, [r2, #24]
 800b5e4:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 800b5e8:	940a      	str	r4, [sp, #40]	; 0x28
 800b5ea:	6894      	ldr	r4, [r2, #8]
 800b5ec:	9403      	str	r4, [sp, #12]
 800b5ee:	68d4      	ldr	r4, [r2, #12]
 800b5f0:	9402      	str	r4, [sp, #8]
 800b5f2:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800b5f4:	6a12      	ldr	r2, [r2, #32]
 800b5f6:	9407      	str	r4, [sp, #28]
 800b5f8:	9208      	str	r2, [sp, #32]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	f000 812e 	beq.w	800b85c <D128_1CH_HTONS_VOL_HP+0x28c>
 800b600:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800b604:	f100 0b10 	add.w	fp, r0, #16
 800b608:	f8df 9290 	ldr.w	r9, [pc, #656]	; 800b89c <D128_1CH_HTONS_VOL_HP+0x2cc>
 800b60c:	9106      	str	r1, [sp, #24]
 800b60e:	9309      	str	r3, [sp, #36]	; 0x24
 800b610:	e95b 0204 	ldrd	r0, r2, [fp, #-16]
 800b614:	e95b 3602 	ldrd	r3, r6, [fp, #-8]
 800b618:	ba40      	rev16	r0, r0
 800b61a:	ba52      	rev16	r2, r2
 800b61c:	ba5b      	rev16	r3, r3
 800b61e:	ba76      	rev16	r6, r6
 800b620:	b2c5      	uxtb	r5, r0
 800b622:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800b626:	f3c0 4107 	ubfx	r1, r0, #16, #8
 800b62a:	0e00      	lsrs	r0, r0, #24
 800b62c:	f859 7025 	ldr.w	r7, [r9, r5, lsl #2]
 800b630:	b2d5      	uxtb	r5, r2
 800b632:	f859 e024 	ldr.w	lr, [r9, r4, lsl #2]
 800b636:	f3c2 2407 	ubfx	r4, r2, #8, #8
 800b63a:	44bc      	add	ip, r7
 800b63c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b640:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
 800b644:	f3c2 4007 	ubfx	r0, r2, #16, #8
 800b648:	eb0e 2e9c 	add.w	lr, lr, ip, lsr #10
 800b64c:	f859 a025 	ldr.w	sl, [r9, r5, lsl #2]
 800b650:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 800b654:	0e12      	lsrs	r2, r2, #24
 800b656:	eb01 219e 	add.w	r1, r1, lr, lsr #10
 800b65a:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 800b65e:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800b662:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800b666:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 800b66a:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 800b66e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800b672:	b2da      	uxtb	r2, r3
 800b674:	eb0a 2a97 	add.w	sl, sl, r7, lsr #10
 800b678:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800b67c:	ea4e 4e0c 	orr.w	lr, lr, ip, lsl #16
 800b680:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 800b684:	eb05 259a 	add.w	r5, r5, sl, lsr #10
 800b688:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800b68c:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800b690:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800b694:	eb00 2c95 	add.w	ip, r0, r5, lsr #10
 800b698:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800b69c:	f859 8021 	ldr.w	r8, [r9, r1, lsl #2]
 800b6a0:	f3c3 4107 	ubfx	r1, r3, #16, #8
 800b6a4:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 800b6a8:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800b6ac:	f859 0021 	ldr.w	r0, [r9, r1, lsl #2]
 800b6b0:	0e1b      	lsrs	r3, r3, #24
 800b6b2:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 800b6b6:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800b6ba:	f859 1023 	ldr.w	r1, [r9, r3, lsl #2]
 800b6be:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 800b6c2:	eb08 2892 	add.w	r8, r8, r2, lsr #10
 800b6c6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800b6ca:	b2f3      	uxtb	r3, r6
 800b6cc:	eb00 2a98 	add.w	sl, r0, r8, lsr #10
 800b6d0:	f3c8 0009 	ubfx	r0, r8, #0, #10
 800b6d4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b6d8:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 800b6dc:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 800b6e0:	f3c6 2c07 	ubfx	ip, r6, #8, #8
 800b6e4:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800b6e8:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800b6ec:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 800b6f0:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 800b6f4:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 800b6f8:	0e36      	lsrs	r6, r6, #24
 800b6fa:	eb02 2298 	add.w	r2, r2, r8, lsr #10
 800b6fe:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800b702:	f859 302c 	ldr.w	r3, [r9, ip, lsl #2]
 800b706:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800b70a:	f859 c026 	ldr.w	ip, [r9, r6, lsl #2]
 800b70e:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b712:	eb03 2692 	add.w	r6, r3, r2, lsr #10
 800b716:	f3c2 0309 	ubfx	r3, r2, #0, #10
 800b71a:	9101      	str	r1, [sp, #4]
 800b71c:	ea43 4208 	orr.w	r2, r3, r8, lsl #16
 800b720:	9b02      	ldr	r3, [sp, #8]
 800b722:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 800b726:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800b72a:	4611      	mov	r1, r2
 800b72c:	f3cc 0209 	ubfx	r2, ip, #0, #10
 800b730:	ea4f 2c9c 	mov.w	ip, ip, lsr #10
 800b734:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 800b738:	4a49      	ldr	r2, [pc, #292]	; (800b860 <D128_1CH_HTONS_VOL_HP+0x290>)
 800b73a:	fb2e 3202 	smlad	r2, lr, r2, r3
 800b73e:	4b49      	ldr	r3, [pc, #292]	; (800b864 <D128_1CH_HTONS_VOL_HP+0x294>)
 800b740:	fb27 2203 	smlad	r2, r7, r3, r2
 800b744:	4b48      	ldr	r3, [pc, #288]	; (800b868 <D128_1CH_HTONS_VOL_HP+0x298>)
 800b746:	fb25 2203 	smlad	r2, r5, r3, r2
 800b74a:	4b48      	ldr	r3, [pc, #288]	; (800b86c <D128_1CH_HTONS_VOL_HP+0x29c>)
 800b74c:	fb24 2203 	smlad	r2, r4, r3, r2
 800b750:	4b47      	ldr	r3, [pc, #284]	; (800b870 <D128_1CH_HTONS_VOL_HP+0x2a0>)
 800b752:	fb20 2803 	smlad	r8, r0, r3, r2
 800b756:	4b47      	ldr	r3, [pc, #284]	; (800b874 <D128_1CH_HTONS_VOL_HP+0x2a4>)
 800b758:	9a01      	ldr	r2, [sp, #4]
 800b75a:	fb22 8203 	smlad	r2, r2, r3, r8
 800b75e:	4b46      	ldr	r3, [pc, #280]	; (800b878 <D128_1CH_HTONS_VOL_HP+0x2a8>)
 800b760:	9102      	str	r1, [sp, #8]
 800b762:	fb21 2203 	smlad	r2, r1, r3, r2
 800b766:	f44f 3880 	mov.w	r8, #65536	; 0x10000
 800b76a:	fb26 2308 	smlad	r3, r6, r8, r2
 800b76e:	4619      	mov	r1, r3
 800b770:	9a03      	ldr	r2, [sp, #12]
 800b772:	4b42      	ldr	r3, [pc, #264]	; (800b87c <D128_1CH_HTONS_VOL_HP+0x2ac>)
 800b774:	fb2e 2803 	smlad	r8, lr, r3, r2
 800b778:	4b41      	ldr	r3, [pc, #260]	; (800b880 <D128_1CH_HTONS_VOL_HP+0x2b0>)
 800b77a:	fb27 8a03 	smlad	sl, r7, r3, r8
 800b77e:	f8df 8120 	ldr.w	r8, [pc, #288]	; 800b8a0 <D128_1CH_HTONS_VOL_HP+0x2d0>
 800b782:	fb25 a808 	smlad	r8, r5, r8, sl
 800b786:	f8df a11c 	ldr.w	sl, [pc, #284]	; 800b8a4 <D128_1CH_HTONS_VOL_HP+0x2d4>
 800b78a:	fb24 880a 	smlad	r8, r4, sl, r8
 800b78e:	f8df a118 	ldr.w	sl, [pc, #280]	; 800b8a8 <D128_1CH_HTONS_VOL_HP+0x2d8>
 800b792:	fb20 8a0a 	smlad	sl, r0, sl, r8
 800b796:	f8df 8114 	ldr.w	r8, [pc, #276]	; 800b8ac <D128_1CH_HTONS_VOL_HP+0x2dc>
 800b79a:	9b01      	ldr	r3, [sp, #4]
 800b79c:	fb23 aa08 	smlad	sl, r3, r8, sl
 800b7a0:	f8df 810c 	ldr.w	r8, [pc, #268]	; 800b8b0 <D128_1CH_HTONS_VOL_HP+0x2e0>
 800b7a4:	9a02      	ldr	r2, [sp, #8]
 800b7a6:	fb22 a808 	smlad	r8, r2, r8, sl
 800b7aa:	f8df a108 	ldr.w	sl, [pc, #264]	; 800b8b4 <D128_1CH_HTONS_VOL_HP+0x2e4>
 800b7ae:	fb26 830a 	smlad	r3, r6, sl, r8
 800b7b2:	f04f 0801 	mov.w	r8, #1
 800b7b6:	9302      	str	r3, [sp, #8]
 800b7b8:	fb2e fe08 	smuad	lr, lr, r8
 800b7bc:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 800b8b8 <D128_1CH_HTONS_VOL_HP+0x2e8>
 800b7c0:	fb27 ee08 	smlad	lr, r7, r8, lr
 800b7c4:	4f2f      	ldr	r7, [pc, #188]	; (800b884 <D128_1CH_HTONS_VOL_HP+0x2b4>)
 800b7c6:	fb25 ee07 	smlad	lr, r5, r7, lr
 800b7ca:	4f2f      	ldr	r7, [pc, #188]	; (800b888 <D128_1CH_HTONS_VOL_HP+0x2b8>)
 800b7cc:	fb24 ee07 	smlad	lr, r4, r7, lr
 800b7d0:	4f2e      	ldr	r7, [pc, #184]	; (800b88c <D128_1CH_HTONS_VOL_HP+0x2bc>)
 800b7d2:	fb20 ee07 	smlad	lr, r0, r7, lr
 800b7d6:	4f2e      	ldr	r7, [pc, #184]	; (800b890 <D128_1CH_HTONS_VOL_HP+0x2c0>)
 800b7d8:	9b01      	ldr	r3, [sp, #4]
 800b7da:	fb23 ee07 	smlad	lr, r3, r7, lr
 800b7de:	4f2d      	ldr	r7, [pc, #180]	; (800b894 <D128_1CH_HTONS_VOL_HP+0x2c4>)
 800b7e0:	fb22 e707 	smlad	r7, r2, r7, lr
 800b7e4:	4b2c      	ldr	r3, [pc, #176]	; (800b898 <D128_1CH_HTONS_VOL_HP+0x2c8>)
 800b7e6:	fb26 7303 	smlad	r3, r6, r3, r7
 800b7ea:	f5a1 1680 	sub.w	r6, r1, #1048576	; 0x100000
 800b7ee:	9303      	str	r3, [sp, #12]
 800b7f0:	9b04      	ldr	r3, [sp, #16]
 800b7f2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800b7f6:	9f08      	ldr	r7, [sp, #32]
 800b7f8:	2100      	movs	r1, #0
 800b7fa:	4433      	add	r3, r6
 800b7fc:	f10b 0b10 	add.w	fp, fp, #16
 800b800:	461a      	mov	r2, r3
 800b802:	9b05      	ldr	r3, [sp, #20]
 800b804:	9605      	str	r6, [sp, #20]
 800b806:	1ad2      	subs	r2, r2, r3
 800b808:	17d5      	asrs	r5, r2, #31
 800b80a:	fba2 2307 	umull	r2, r3, r2, r7
 800b80e:	1814      	adds	r4, r2, r0
 800b810:	fb07 3305 	mla	r3, r7, r5, r3
 800b814:	eb43 0501 	adc.w	r5, r3, r1
 800b818:	006b      	lsls	r3, r5, #1
 800b81a:	022a      	lsls	r2, r5, #8
 800b81c:	9304      	str	r3, [sp, #16]
 800b81e:	9b07      	ldr	r3, [sp, #28]
 800b820:	fbc3 0102 	smlal	r0, r1, r3, r2
 800b824:	9a06      	ldr	r2, [sp, #24]
 800b826:	108b      	asrs	r3, r1, #2
 800b828:	f303 030f 	ssat	r3, #16, r3
 800b82c:	f822 3b02 	strh.w	r3, [r2], #2
 800b830:	4613      	mov	r3, r2
 800b832:	9206      	str	r2, [sp, #24]
 800b834:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b836:	4293      	cmp	r3, r2
 800b838:	f47f aeea 	bne.w	800b610 <D128_1CH_HTONS_VOL_HP+0x40>
 800b83c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b83e:	2000      	movs	r0, #0
 800b840:	9903      	ldr	r1, [sp, #12]
 800b842:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b844:	6099      	str	r1, [r3, #8]
 800b846:	9902      	ldr	r1, [sp, #8]
 800b848:	f8c3 c01c 	str.w	ip, [r3, #28]
 800b84c:	60d9      	str	r1, [r3, #12]
 800b84e:	9904      	ldr	r1, [sp, #16]
 800b850:	619a      	str	r2, [r3, #24]
 800b852:	e9c3 1604 	strd	r1, r6, [r3, #16]
 800b856:	b00d      	add	sp, #52	; 0x34
 800b858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b85c:	9e05      	ldr	r6, [sp, #20]
 800b85e:	e7ed      	b.n	800b83c <D128_1CH_HTONS_VOL_HP+0x26c>
 800b860:	00780069 	.word	0x00780069
 800b864:	005b004e 	.word	0x005b004e
 800b868:	00420037 	.word	0x00420037
 800b86c:	002d0024 	.word	0x002d0024
 800b870:	001c0015 	.word	0x001c0015
 800b874:	000f000a 	.word	0x000f000a
 800b878:	00060003 	.word	0x00060003
 800b87c:	00880096 	.word	0x00880096
 800b880:	00a200ac 	.word	0x00a200ac
 800b884:	000a000f 	.word	0x000a000f
 800b888:	0015001c 	.word	0x0015001c
 800b88c:	0024002d 	.word	0x0024002d
 800b890:	00370042 	.word	0x00370042
 800b894:	004e005b 	.word	0x004e005b
 800b898:	00690078 	.word	0x00690078
 800b89c:	24000000 	.word	0x24000000
 800b8a0:	00b400ba 	.word	0x00b400ba
 800b8a4:	00be00c0 	.word	0x00be00c0
 800b8a8:	00c000be 	.word	0x00c000be
 800b8ac:	00ba00b4 	.word	0x00ba00b4
 800b8b0:	00ac00a2 	.word	0x00ac00a2
 800b8b4:	00960088 	.word	0x00960088
 800b8b8:	00030006 	.word	0x00030006

0800b8bc <PDM_Filter_Init>:
 800b8bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8be:	2240      	movs	r2, #64	; 0x40
 800b8c0:	2100      	movs	r1, #0
 800b8c2:	4604      	mov	r4, r0
 800b8c4:	300c      	adds	r0, #12
 800b8c6:	f000 f9ed 	bl	800bca4 <memset>
 800b8ca:	4a56      	ldr	r2, [pc, #344]	; (800ba24 <PDM_Filter_Init+0x168>)
 800b8cc:	4856      	ldr	r0, [pc, #344]	; (800ba28 <PDM_Filter_Init+0x16c>)
 800b8ce:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 800b8d2:	6813      	ldr	r3, [r2, #0]
 800b8d4:	f24c 2540 	movw	r5, #49728	; 0xc240
 800b8d8:	f023 0301 	bic.w	r3, r3, #1
 800b8dc:	6013      	str	r3, [r2, #0]
 800b8de:	6803      	ldr	r3, [r0, #0]
 800b8e0:	400b      	ands	r3, r1
 800b8e2:	42ab      	cmp	r3, r5
 800b8e4:	d040      	beq.n	800b968 <PDM_Filter_Init+0xac>
 800b8e6:	6803      	ldr	r3, [r0, #0]
 800b8e8:	f24c 2270 	movw	r2, #49776	; 0xc270
 800b8ec:	4019      	ands	r1, r3
 800b8ee:	4291      	cmp	r1, r2
 800b8f0:	d03a      	beq.n	800b968 <PDM_Filter_Init+0xac>
 800b8f2:	4b4e      	ldr	r3, [pc, #312]	; (800ba2c <PDM_Filter_Init+0x170>)
 800b8f4:	2101      	movs	r1, #1
 800b8f6:	461a      	mov	r2, r3
 800b8f8:	6019      	str	r1, [r3, #0]
 800b8fa:	6813      	ldr	r3, [r2, #0]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d1fc      	bne.n	800b8fa <PDM_Filter_Init+0x3e>
 800b900:	4b4b      	ldr	r3, [pc, #300]	; (800ba30 <PDM_Filter_Init+0x174>)
 800b902:	494c      	ldr	r1, [pc, #304]	; (800ba34 <PDM_Filter_Init+0x178>)
 800b904:	4a4c      	ldr	r2, [pc, #304]	; (800ba38 <PDM_Filter_Init+0x17c>)
 800b906:	6019      	str	r1, [r3, #0]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	8820      	ldrh	r0, [r4, #0]
 800b90c:	4293      	cmp	r3, r2
 800b90e:	8961      	ldrh	r1, [r4, #10]
 800b910:	f04f 0300 	mov.w	r3, #0
 800b914:	8922      	ldrh	r2, [r4, #8]
 800b916:	bf14      	ite	ne
 800b918:	2500      	movne	r5, #0
 800b91a:	4d47      	ldreq	r5, [pc, #284]	; (800ba38 <PDM_Filter_Init+0x17c>)
 800b91c:	2801      	cmp	r0, #1
 800b91e:	61a3      	str	r3, [r4, #24]
 800b920:	6465      	str	r5, [r4, #68]	; 0x44
 800b922:	60e3      	str	r3, [r4, #12]
 800b924:	6263      	str	r3, [r4, #36]	; 0x24
 800b926:	6423      	str	r3, [r4, #64]	; 0x40
 800b928:	86a1      	strh	r1, [r4, #52]	; 0x34
 800b92a:	86e2      	strh	r2, [r4, #54]	; 0x36
 800b92c:	e9c4 3304 	strd	r3, r3, [r4, #16]
 800b930:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800b934:	d936      	bls.n	800b9a4 <PDM_Filter_Init+0xe8>
 800b936:	2003      	movs	r0, #3
 800b938:	2302      	movs	r3, #2
 800b93a:	8862      	ldrh	r2, [r4, #2]
 800b93c:	2a01      	cmp	r2, #1
 800b93e:	d92e      	bls.n	800b99e <PDM_Filter_Init+0xe2>
 800b940:	2140      	movs	r1, #64	; 0x40
 800b942:	2300      	movs	r3, #0
 800b944:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800b946:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 800b94a:	d101      	bne.n	800b950 <PDM_Filter_Init+0x94>
 800b94c:	460b      	mov	r3, r1
 800b94e:	6421      	str	r1, [r4, #64]	; 0x40
 800b950:	6862      	ldr	r2, [r4, #4]
 800b952:	b11a      	cbz	r2, 800b95c <PDM_Filter_Init+0xa0>
 800b954:	f043 0310 	orr.w	r3, r3, #16
 800b958:	62e2      	str	r2, [r4, #44]	; 0x2c
 800b95a:	6423      	str	r3, [r4, #64]	; 0x40
 800b95c:	2200      	movs	r2, #0
 800b95e:	8722      	strh	r2, [r4, #56]	; 0x38
 800b960:	b908      	cbnz	r0, 800b966 <PDM_Filter_Init+0xaa>
 800b962:	3380      	adds	r3, #128	; 0x80
 800b964:	6423      	str	r3, [r4, #64]	; 0x40
 800b966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b968:	4b34      	ldr	r3, [pc, #208]	; (800ba3c <PDM_Filter_Init+0x180>)
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d1c0      	bne.n	800b8f2 <PDM_Filter_Init+0x36>
 800b970:	4a33      	ldr	r2, [pc, #204]	; (800ba40 <PDM_Filter_Init+0x184>)
 800b972:	6813      	ldr	r3, [r2, #0]
 800b974:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b978:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800b97c:	d006      	beq.n	800b98c <PDM_Filter_Init+0xd0>
 800b97e:	6813      	ldr	r3, [r2, #0]
 800b980:	f240 4283 	movw	r2, #1155	; 0x483
 800b984:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b988:	4293      	cmp	r3, r2
 800b98a:	d1b2      	bne.n	800b8f2 <PDM_Filter_Init+0x36>
 800b98c:	4b2d      	ldr	r3, [pc, #180]	; (800ba44 <PDM_Filter_Init+0x188>)
 800b98e:	2101      	movs	r1, #1
 800b990:	461a      	mov	r2, r3
 800b992:	6019      	str	r1, [r3, #0]
 800b994:	6813      	ldr	r3, [r2, #0]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d1fc      	bne.n	800b994 <PDM_Filter_Init+0xd8>
 800b99a:	4b2b      	ldr	r3, [pc, #172]	; (800ba48 <PDM_Filter_Init+0x18c>)
 800b99c:	e7b1      	b.n	800b902 <PDM_Filter_Init+0x46>
 800b99e:	d03a      	beq.n	800ba16 <PDM_Filter_Init+0x15a>
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	e7cd      	b.n	800b940 <PDM_Filter_Init+0x84>
 800b9a4:	4d29      	ldr	r5, [pc, #164]	; (800ba4c <PDM_Filter_Init+0x190>)
 800b9a6:	782a      	ldrb	r2, [r5, #0]
 800b9a8:	d01b      	beq.n	800b9e2 <PDM_Filter_Init+0x126>
 800b9aa:	2a01      	cmp	r2, #1
 800b9ac:	d001      	beq.n	800b9b2 <PDM_Filter_Init+0xf6>
 800b9ae:	2001      	movs	r0, #1
 800b9b0:	e7c3      	b.n	800b93a <PDM_Filter_Init+0x7e>
 800b9b2:	4927      	ldr	r1, [pc, #156]	; (800ba50 <PDM_Filter_Init+0x194>)
 800b9b4:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 800ba58 <PDM_Filter_Init+0x19c>
 800b9b8:	f501 6780 	add.w	r7, r1, #1024	; 0x400
 800b9bc:	4e25      	ldr	r6, [pc, #148]	; (800ba54 <PDM_Filter_Init+0x198>)
 800b9be:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800b9c2:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 800b9c6:	ea02 0006 	and.w	r0, r2, r6
 800b9ca:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800b9ce:	428f      	cmp	r7, r1
 800b9d0:	ea43 0300 	orr.w	r3, r3, r0
 800b9d4:	4413      	add	r3, r2
 800b9d6:	600b      	str	r3, [r1, #0]
 800b9d8:	d1f1      	bne.n	800b9be <PDM_Filter_Init+0x102>
 800b9da:	2300      	movs	r3, #0
 800b9dc:	2001      	movs	r0, #1
 800b9de:	702b      	strb	r3, [r5, #0]
 800b9e0:	e7ab      	b.n	800b93a <PDM_Filter_Init+0x7e>
 800b9e2:	2a00      	cmp	r2, #0
 800b9e4:	d1a9      	bne.n	800b93a <PDM_Filter_Init+0x7e>
 800b9e6:	491a      	ldr	r1, [pc, #104]	; (800ba50 <PDM_Filter_Init+0x194>)
 800b9e8:	f8df c06c 	ldr.w	ip, [pc, #108]	; 800ba58 <PDM_Filter_Init+0x19c>
 800b9ec:	f501 6780 	add.w	r7, r1, #1024	; 0x400
 800b9f0:	4e18      	ldr	r6, [pc, #96]	; (800ba54 <PDM_Filter_Init+0x198>)
 800b9f2:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800b9f6:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 800b9fa:	ea02 0006 	and.w	r0, r2, r6
 800b9fe:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800ba02:	428f      	cmp	r7, r1
 800ba04:	ea43 0300 	orr.w	r3, r3, r0
 800ba08:	4413      	add	r3, r2
 800ba0a:	600b      	str	r3, [r1, #0]
 800ba0c:	d1f1      	bne.n	800b9f2 <PDM_Filter_Init+0x136>
 800ba0e:	2001      	movs	r0, #1
 800ba10:	2300      	movs	r3, #0
 800ba12:	7028      	strb	r0, [r5, #0]
 800ba14:	e791      	b.n	800b93a <PDM_Filter_Init+0x7e>
 800ba16:	2220      	movs	r2, #32
 800ba18:	4618      	mov	r0, r3
 800ba1a:	2160      	movs	r1, #96	; 0x60
 800ba1c:	6422      	str	r2, [r4, #64]	; 0x40
 800ba1e:	4613      	mov	r3, r2
 800ba20:	e790      	b.n	800b944 <PDM_Filter_Init+0x88>
 800ba22:	bf00      	nop
 800ba24:	e0002000 	.word	0xe0002000
 800ba28:	e000ed00 	.word	0xe000ed00
 800ba2c:	40023008 	.word	0x40023008
 800ba30:	40023000 	.word	0x40023000
 800ba34:	f407a5c2 	.word	0xf407a5c2
 800ba38:	b5e8b5cd 	.word	0xb5e8b5cd
 800ba3c:	e0042000 	.word	0xe0042000
 800ba40:	5c001000 	.word	0x5c001000
 800ba44:	58024c08 	.word	0x58024c08
 800ba48:	58024c00 	.word	0x58024c00
 800ba4c:	24000498 	.word	0x24000498
 800ba50:	23fffffc 	.word	0x23fffffc
 800ba54:	000ffc00 	.word	0x000ffc00
 800ba58:	3ff00000 	.word	0x3ff00000

0800ba5c <PDM_Filter_setConfig>:
 800ba5c:	4b67      	ldr	r3, [pc, #412]	; (800bbfc <PDM_Filter_setConfig+0x1a0>)
 800ba5e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ba60:	429a      	cmp	r2, r3
 800ba62:	d128      	bne.n	800bab6 <PDM_Filter_setConfig+0x5a>
 800ba64:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800ba66:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba68:	880e      	ldrh	r6, [r1, #0]
 800ba6a:	460d      	mov	r5, r1
 800ba6c:	4604      	mov	r4, r0
 800ba6e:	f422 7180 	bic.w	r1, r2, #256	; 0x100
 800ba72:	1e73      	subs	r3, r6, #1
 800ba74:	f9b5 7004 	ldrsh.w	r7, [r5, #4]
 800ba78:	f9b0 0038 	ldrsh.w	r0, [r0, #56]	; 0x38
 800ba7c:	2b06      	cmp	r3, #6
 800ba7e:	ed2d 8b02 	vpush	{d8}
 800ba82:	6421      	str	r1, [r4, #64]	; 0x40
 800ba84:	b083      	sub	sp, #12
 800ba86:	d820      	bhi.n	800baca <PDM_Filter_setConfig+0x6e>
 800ba88:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800ba8a:	42b3      	cmp	r3, r6
 800ba8c:	d03d      	beq.n	800bb0a <PDM_Filter_setConfig+0xae>
 800ba8e:	4b5c      	ldr	r3, [pc, #368]	; (800bc00 <PDM_Filter_setConfig+0x1a4>)
 800ba90:	4013      	ands	r3, r2
 800ba92:	4333      	orrs	r3, r6
 800ba94:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800ba98:	6423      	str	r3, [r4, #64]	; 0x40
 800ba9a:	f003 030f 	and.w	r3, r3, #15
 800ba9e:	2a70      	cmp	r2, #112	; 0x70
 800baa0:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800baa4:	d009      	beq.n	800baba <PDM_Filter_setConfig+0x5e>
 800baa6:	2b06      	cmp	r3, #6
 800baa8:	d824      	bhi.n	800baf4 <PDM_Filter_setConfig+0x98>
 800baaa:	e8df f003 	tbb	[pc, r3]
 800baae:	878a      	.short	0x878a
 800bab0:	7b7e8184 	.word	0x7b7e8184
 800bab4:	78          	.byte	0x78
 800bab5:	00          	.byte	0x00
 800bab6:	2004      	movs	r0, #4
 800bab8:	4770      	bx	lr
 800baba:	2b06      	cmp	r3, #6
 800babc:	d81a      	bhi.n	800baf4 <PDM_Filter_setConfig+0x98>
 800babe:	e8df f003 	tbb	[pc, r3]
 800bac2:	8f92      	.short	0x8f92
 800bac4:	8617898c 	.word	0x8617898c
 800bac8:	83          	.byte	0x83
 800bac9:	00          	.byte	0x00
 800baca:	4287      	cmp	r7, r0
 800bacc:	f000 808e 	beq.w	800bbec <PDM_Filter_setConfig+0x190>
 800bad0:	f117 0f0c 	cmn.w	r7, #12
 800bad4:	f04f 0008 	mov.w	r0, #8
 800bad8:	da11      	bge.n	800bafe <PDM_Filter_setConfig+0xa2>
 800bada:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 800bade:	3040      	adds	r0, #64	; 0x40
 800bae0:	80ab      	strh	r3, [r5, #4]
 800bae2:	886b      	ldrh	r3, [r5, #2]
 800bae4:	8626      	strh	r6, [r4, #48]	; 0x30
 800bae6:	8663      	strh	r3, [r4, #50]	; 0x32
 800bae8:	b003      	add	sp, #12
 800baea:	ecbd 8b02 	vpop	{d8}
 800baee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800baf0:	4b44      	ldr	r3, [pc, #272]	; (800bc04 <PDM_Filter_setConfig+0x1a8>)
 800baf2:	64a3      	str	r3, [r4, #72]	; 0x48
 800baf4:	f117 0f0c 	cmn.w	r7, #12
 800baf8:	f04f 0000 	mov.w	r0, #0
 800bafc:	dbed      	blt.n	800bada <PDM_Filter_setConfig+0x7e>
 800bafe:	2f33      	cmp	r7, #51	; 0x33
 800bb00:	dd10      	ble.n	800bb24 <PDM_Filter_setConfig+0xc8>
 800bb02:	2333      	movs	r3, #51	; 0x33
 800bb04:	3040      	adds	r0, #64	; 0x40
 800bb06:	80ab      	strh	r3, [r5, #4]
 800bb08:	e7eb      	b.n	800bae2 <PDM_Filter_setConfig+0x86>
 800bb0a:	4287      	cmp	r7, r0
 800bb0c:	d1f2      	bne.n	800baf4 <PDM_Filter_setConfig+0x98>
 800bb0e:	886b      	ldrh	r3, [r5, #2]
 800bb10:	8663      	strh	r3, [r4, #50]	; 0x32
 800bb12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bb14:	2000      	movs	r0, #0
 800bb16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bb1a:	6423      	str	r3, [r4, #64]	; 0x40
 800bb1c:	b003      	add	sp, #12
 800bb1e:	ecbd 8b02 	vpop	{d8}
 800bb22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb24:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bb26:	f003 030f 	and.w	r3, r3, #15
 800bb2a:	3b01      	subs	r3, #1
 800bb2c:	2b06      	cmp	r3, #6
 800bb2e:	d831      	bhi.n	800bb94 <PDM_Filter_setConfig+0x138>
 800bb30:	4a35      	ldr	r2, [pc, #212]	; (800bc08 <PDM_Filter_setConfig+0x1ac>)
 800bb32:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800bb36:	eddf 0a35 	vldr	s1, [pc, #212]	; 800bc0c <PDM_Filter_setConfig+0x1b0>
 800bb3a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bb3e:	9001      	str	r0, [sp, #4]
 800bb40:	edd3 7a07 	vldr	s15, [r3, #28]
 800bb44:	ed93 8a00 	vldr	s16, [r3]
 800bb48:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800bb4c:	f000 f8cc 	bl	800bce8 <powf>
 800bb50:	eef0 8a40 	vmov.f32	s17, s0
 800bb54:	9801      	ldr	r0, [sp, #4]
 800bb56:	ee07 7a90 	vmov	s15, r7
 800bb5a:	ee28 8a28 	vmul.f32	s16, s16, s17
 800bb5e:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800bb62:	9001      	str	r0, [sp, #4]
 800bb64:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 800bb68:	eddf 7a29 	vldr	s15, [pc, #164]	; 800bc10 <PDM_Filter_setConfig+0x1b4>
 800bb6c:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800bb70:	f000 f8ba 	bl	800bce8 <powf>
 800bb74:	ee28 8a00 	vmul.f32	s16, s16, s0
 800bb78:	886b      	ldrh	r3, [r5, #2]
 800bb7a:	9801      	ldr	r0, [sp, #4]
 800bb7c:	feb8 8a48 	vrinta.f32	s16, s16
 800bb80:	eebc 8ac8 	vcvt.u32.f32	s16, s16
 800bb84:	8727      	strh	r7, [r4, #56]	; 0x38
 800bb86:	8663      	strh	r3, [r4, #50]	; 0x32
 800bb88:	8626      	strh	r6, [r4, #48]	; 0x30
 800bb8a:	ed84 8a0f 	vstr	s16, [r4, #60]	; 0x3c
 800bb8e:	2800      	cmp	r0, #0
 800bb90:	d0bf      	beq.n	800bb12 <PDM_Filter_setConfig+0xb6>
 800bb92:	e7a9      	b.n	800bae8 <PDM_Filter_setConfig+0x8c>
 800bb94:	eddf 8a1f 	vldr	s17, [pc, #124]	; 800bc14 <PDM_Filter_setConfig+0x1b8>
 800bb98:	ed9f 8a1f 	vldr	s16, [pc, #124]	; 800bc18 <PDM_Filter_setConfig+0x1bc>
 800bb9c:	e7db      	b.n	800bb56 <PDM_Filter_setConfig+0xfa>
 800bb9e:	4b1f      	ldr	r3, [pc, #124]	; (800bc1c <PDM_Filter_setConfig+0x1c0>)
 800bba0:	64a3      	str	r3, [r4, #72]	; 0x48
 800bba2:	e7a7      	b.n	800baf4 <PDM_Filter_setConfig+0x98>
 800bba4:	4b1e      	ldr	r3, [pc, #120]	; (800bc20 <PDM_Filter_setConfig+0x1c4>)
 800bba6:	64a3      	str	r3, [r4, #72]	; 0x48
 800bba8:	e7a4      	b.n	800baf4 <PDM_Filter_setConfig+0x98>
 800bbaa:	4b1e      	ldr	r3, [pc, #120]	; (800bc24 <PDM_Filter_setConfig+0x1c8>)
 800bbac:	64a3      	str	r3, [r4, #72]	; 0x48
 800bbae:	e7a1      	b.n	800baf4 <PDM_Filter_setConfig+0x98>
 800bbb0:	4b1d      	ldr	r3, [pc, #116]	; (800bc28 <PDM_Filter_setConfig+0x1cc>)
 800bbb2:	64a3      	str	r3, [r4, #72]	; 0x48
 800bbb4:	e79e      	b.n	800baf4 <PDM_Filter_setConfig+0x98>
 800bbb6:	4b1d      	ldr	r3, [pc, #116]	; (800bc2c <PDM_Filter_setConfig+0x1d0>)
 800bbb8:	64a3      	str	r3, [r4, #72]	; 0x48
 800bbba:	e79b      	b.n	800baf4 <PDM_Filter_setConfig+0x98>
 800bbbc:	4b1c      	ldr	r3, [pc, #112]	; (800bc30 <PDM_Filter_setConfig+0x1d4>)
 800bbbe:	64a3      	str	r3, [r4, #72]	; 0x48
 800bbc0:	e798      	b.n	800baf4 <PDM_Filter_setConfig+0x98>
 800bbc2:	4b1c      	ldr	r3, [pc, #112]	; (800bc34 <PDM_Filter_setConfig+0x1d8>)
 800bbc4:	64a3      	str	r3, [r4, #72]	; 0x48
 800bbc6:	e795      	b.n	800baf4 <PDM_Filter_setConfig+0x98>
 800bbc8:	4b1b      	ldr	r3, [pc, #108]	; (800bc38 <PDM_Filter_setConfig+0x1dc>)
 800bbca:	64a3      	str	r3, [r4, #72]	; 0x48
 800bbcc:	e792      	b.n	800baf4 <PDM_Filter_setConfig+0x98>
 800bbce:	4b1b      	ldr	r3, [pc, #108]	; (800bc3c <PDM_Filter_setConfig+0x1e0>)
 800bbd0:	64a3      	str	r3, [r4, #72]	; 0x48
 800bbd2:	e78f      	b.n	800baf4 <PDM_Filter_setConfig+0x98>
 800bbd4:	4b1a      	ldr	r3, [pc, #104]	; (800bc40 <PDM_Filter_setConfig+0x1e4>)
 800bbd6:	64a3      	str	r3, [r4, #72]	; 0x48
 800bbd8:	e78c      	b.n	800baf4 <PDM_Filter_setConfig+0x98>
 800bbda:	4b1a      	ldr	r3, [pc, #104]	; (800bc44 <PDM_Filter_setConfig+0x1e8>)
 800bbdc:	64a3      	str	r3, [r4, #72]	; 0x48
 800bbde:	e789      	b.n	800baf4 <PDM_Filter_setConfig+0x98>
 800bbe0:	4b19      	ldr	r3, [pc, #100]	; (800bc48 <PDM_Filter_setConfig+0x1ec>)
 800bbe2:	64a3      	str	r3, [r4, #72]	; 0x48
 800bbe4:	e786      	b.n	800baf4 <PDM_Filter_setConfig+0x98>
 800bbe6:	4b19      	ldr	r3, [pc, #100]	; (800bc4c <PDM_Filter_setConfig+0x1f0>)
 800bbe8:	64a3      	str	r3, [r4, #72]	; 0x48
 800bbea:	e783      	b.n	800baf4 <PDM_Filter_setConfig+0x98>
 800bbec:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800bbee:	42b3      	cmp	r3, r6
 800bbf0:	f47f af6e 	bne.w	800bad0 <PDM_Filter_setConfig+0x74>
 800bbf4:	886b      	ldrh	r3, [r5, #2]
 800bbf6:	2008      	movs	r0, #8
 800bbf8:	8663      	strh	r3, [r4, #50]	; 0x32
 800bbfa:	e775      	b.n	800bae8 <PDM_Filter_setConfig+0x8c>
 800bbfc:	b5e8b5cd 	.word	0xb5e8b5cd
 800bc00:	fffffef0 	.word	0xfffffef0
 800bc04:	0800ad75 	.word	0x0800ad75
 800bc08:	0800c0d0 	.word	0x0800c0d0
 800bc0c:	42000000 	.word	0x42000000
 800bc10:	3d4ccccd 	.word	0x3d4ccccd
 800bc14:	4f800000 	.word	0x4f800000
 800bc18:	00000000 	.word	0x00000000
 800bc1c:	0800a181 	.word	0x0800a181
 800bc20:	0800a009 	.word	0x0800a009
 800bc24:	08009ef9 	.word	0x08009ef9
 800bc28:	0800a9bd 	.word	0x0800a9bd
 800bc2c:	0800a725 	.word	0x0800a725
 800bc30:	0800a4ed 	.word	0x0800a4ed
 800bc34:	0800a309 	.word	0x0800a309
 800bc38:	0800af91 	.word	0x0800af91
 800bc3c:	0800ae55 	.word	0x0800ae55
 800bc40:	0800b5d1 	.word	0x0800b5d1
 800bc44:	0800b3d5 	.word	0x0800b3d5
 800bc48:	0800b229 	.word	0x0800b229
 800bc4c:	0800b0bd 	.word	0x0800b0bd

0800bc50 <__errno>:
 800bc50:	4b01      	ldr	r3, [pc, #4]	; (800bc58 <__errno+0x8>)
 800bc52:	6818      	ldr	r0, [r3, #0]
 800bc54:	4770      	bx	lr
 800bc56:	bf00      	nop
 800bc58:	24000418 	.word	0x24000418

0800bc5c <__libc_init_array>:
 800bc5c:	b570      	push	{r4, r5, r6, lr}
 800bc5e:	4d0d      	ldr	r5, [pc, #52]	; (800bc94 <__libc_init_array+0x38>)
 800bc60:	4c0d      	ldr	r4, [pc, #52]	; (800bc98 <__libc_init_array+0x3c>)
 800bc62:	1b64      	subs	r4, r4, r5
 800bc64:	10a4      	asrs	r4, r4, #2
 800bc66:	2600      	movs	r6, #0
 800bc68:	42a6      	cmp	r6, r4
 800bc6a:	d109      	bne.n	800bc80 <__libc_init_array+0x24>
 800bc6c:	4d0b      	ldr	r5, [pc, #44]	; (800bc9c <__libc_init_array+0x40>)
 800bc6e:	4c0c      	ldr	r4, [pc, #48]	; (800bca0 <__libc_init_array+0x44>)
 800bc70:	f000 f9e6 	bl	800c040 <_init>
 800bc74:	1b64      	subs	r4, r4, r5
 800bc76:	10a4      	asrs	r4, r4, #2
 800bc78:	2600      	movs	r6, #0
 800bc7a:	42a6      	cmp	r6, r4
 800bc7c:	d105      	bne.n	800bc8a <__libc_init_array+0x2e>
 800bc7e:	bd70      	pop	{r4, r5, r6, pc}
 800bc80:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc84:	4798      	blx	r3
 800bc86:	3601      	adds	r6, #1
 800bc88:	e7ee      	b.n	800bc68 <__libc_init_array+0xc>
 800bc8a:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc8e:	4798      	blx	r3
 800bc90:	3601      	adds	r6, #1
 800bc92:	e7f2      	b.n	800bc7a <__libc_init_array+0x1e>
 800bc94:	0800c398 	.word	0x0800c398
 800bc98:	0800c398 	.word	0x0800c398
 800bc9c:	0800c398 	.word	0x0800c398
 800bca0:	0800c39c 	.word	0x0800c39c

0800bca4 <memset>:
 800bca4:	4402      	add	r2, r0
 800bca6:	4603      	mov	r3, r0
 800bca8:	4293      	cmp	r3, r2
 800bcaa:	d100      	bne.n	800bcae <memset+0xa>
 800bcac:	4770      	bx	lr
 800bcae:	f803 1b01 	strb.w	r1, [r3], #1
 800bcb2:	e7f9      	b.n	800bca8 <memset+0x4>

0800bcb4 <checkint>:
 800bcb4:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800bcb8:	2b7e      	cmp	r3, #126	; 0x7e
 800bcba:	dd10      	ble.n	800bcde <checkint+0x2a>
 800bcbc:	2b96      	cmp	r3, #150	; 0x96
 800bcbe:	dc0c      	bgt.n	800bcda <checkint+0x26>
 800bcc0:	2201      	movs	r2, #1
 800bcc2:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800bcc6:	fa02 f303 	lsl.w	r3, r2, r3
 800bcca:	1e5a      	subs	r2, r3, #1
 800bccc:	4202      	tst	r2, r0
 800bcce:	d106      	bne.n	800bcde <checkint+0x2a>
 800bcd0:	4203      	tst	r3, r0
 800bcd2:	bf0c      	ite	eq
 800bcd4:	2002      	moveq	r0, #2
 800bcd6:	2001      	movne	r0, #1
 800bcd8:	4770      	bx	lr
 800bcda:	2002      	movs	r0, #2
 800bcdc:	4770      	bx	lr
 800bcde:	2000      	movs	r0, #0
 800bce0:	4770      	bx	lr
 800bce2:	0000      	movs	r0, r0
 800bce4:	0000      	movs	r0, r0
	...

0800bce8 <powf>:
 800bce8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bcea:	ee10 1a10 	vmov	r1, s0
 800bcee:	ee10 6a90 	vmov	r6, s1
 800bcf2:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 800bcf6:	0072      	lsls	r2, r6, #1
 800bcf8:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800bcfc:	b085      	sub	sp, #20
 800bcfe:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 800bd02:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 800bd06:	d256      	bcs.n	800bdb6 <powf+0xce>
 800bd08:	4298      	cmp	r0, r3
 800bd0a:	d256      	bcs.n	800bdba <powf+0xd2>
 800bd0c:	2000      	movs	r0, #0
 800bd0e:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 800bd12:	4ea3      	ldr	r6, [pc, #652]	; (800bfa0 <powf+0x2b8>)
 800bd14:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800bd18:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 800bd1c:	f3c2 47c3 	ubfx	r7, r2, #19, #4
 800bd20:	0dd2      	lsrs	r2, r2, #23
 800bd22:	eb06 1707 	add.w	r7, r6, r7, lsl #4
 800bd26:	05d2      	lsls	r2, r2, #23
 800bd28:	1a8b      	subs	r3, r1, r2
 800bd2a:	ed97 5b00 	vldr	d5, [r7]
 800bd2e:	ee07 3a90 	vmov	s15, r3
 800bd32:	15d2      	asrs	r2, r2, #23
 800bd34:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800bd38:	eea5 6b07 	vfma.f64	d6, d5, d7
 800bd3c:	ed97 5b02 	vldr	d5, [r7, #8]
 800bd40:	ee26 2b06 	vmul.f64	d2, d6, d6
 800bd44:	ee22 1b02 	vmul.f64	d1, d2, d2
 800bd48:	ee07 2a90 	vmov	s15, r2
 800bd4c:	ed96 4b40 	vldr	d4, [r6, #256]	; 0x100
 800bd50:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800bd54:	ee37 7b05 	vadd.f64	d7, d7, d5
 800bd58:	ed96 5b42 	vldr	d5, [r6, #264]	; 0x108
 800bd5c:	ed96 3b44 	vldr	d3, [r6, #272]	; 0x110
 800bd60:	eea6 5b04 	vfma.f64	d5, d6, d4
 800bd64:	ed96 4b46 	vldr	d4, [r6, #280]	; 0x118
 800bd68:	eea6 4b03 	vfma.f64	d4, d6, d3
 800bd6c:	ed96 3b48 	vldr	d3, [r6, #288]	; 0x120
 800bd70:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 800bd74:	eea6 7b03 	vfma.f64	d7, d6, d3
 800bd78:	eea2 7b04 	vfma.f64	d7, d2, d4
 800bd7c:	eea5 7b01 	vfma.f64	d7, d5, d1
 800bd80:	ee20 0b07 	vmul.f64	d0, d0, d7
 800bd84:	ee10 1a90 	vmov	r1, s1
 800bd88:	2300      	movs	r3, #0
 800bd8a:	2700      	movs	r7, #0
 800bd8c:	f3c1 32cf 	ubfx	r2, r1, #15, #16
 800bd90:	f248 06be 	movw	r6, #32958	; 0x80be
 800bd94:	429f      	cmp	r7, r3
 800bd96:	bf08      	it	eq
 800bd98:	4296      	cmpeq	r6, r2
 800bd9a:	f080 80b1 	bcs.w	800bf00 <powf+0x218>
 800bd9e:	ed9f 7b78 	vldr	d7, [pc, #480]	; 800bf80 <powf+0x298>
 800bda2:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800bda6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdaa:	dd79      	ble.n	800bea0 <powf+0x1b8>
 800bdac:	b005      	add	sp, #20
 800bdae:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800bdb2:	f000 b91f 	b.w	800bff4 <__math_oflowf>
 800bdb6:	4298      	cmp	r0, r3
 800bdb8:	d32d      	bcc.n	800be16 <powf+0x12e>
 800bdba:	b952      	cbnz	r2, 800bdd2 <powf+0xea>
 800bdbc:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 800bdc0:	005b      	lsls	r3, r3, #1
 800bdc2:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 800bdc6:	f240 80cd 	bls.w	800bf64 <powf+0x27c>
 800bdca:	ee30 0a20 	vadd.f32	s0, s0, s1
 800bdce:	b005      	add	sp, #20
 800bdd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bdd2:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800bdd6:	d105      	bne.n	800bde4 <powf+0xfc>
 800bdd8:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 800bddc:	0076      	lsls	r6, r6, #1
 800bdde:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 800bde2:	e7f0      	b.n	800bdc6 <powf+0xde>
 800bde4:	004b      	lsls	r3, r1, #1
 800bde6:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 800bdea:	d8ee      	bhi.n	800bdca <powf+0xe2>
 800bdec:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 800bdf0:	d1eb      	bne.n	800bdca <powf+0xe2>
 800bdf2:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800bdf6:	f000 80b5 	beq.w	800bf64 <powf+0x27c>
 800bdfa:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800bdfe:	ea6f 0606 	mvn.w	r6, r6
 800be02:	bf34      	ite	cc
 800be04:	2300      	movcc	r3, #0
 800be06:	2301      	movcs	r3, #1
 800be08:	0ff6      	lsrs	r6, r6, #31
 800be0a:	42b3      	cmp	r3, r6
 800be0c:	f040 80ad 	bne.w	800bf6a <powf+0x282>
 800be10:	ee20 0aa0 	vmul.f32	s0, s1, s1
 800be14:	e7db      	b.n	800bdce <powf+0xe6>
 800be16:	004f      	lsls	r7, r1, #1
 800be18:	1e7a      	subs	r2, r7, #1
 800be1a:	429a      	cmp	r2, r3
 800be1c:	d31c      	bcc.n	800be58 <powf+0x170>
 800be1e:	2900      	cmp	r1, #0
 800be20:	ee20 0a00 	vmul.f32	s0, s0, s0
 800be24:	da0f      	bge.n	800be46 <powf+0x15e>
 800be26:	ee10 0a90 	vmov	r0, s1
 800be2a:	f7ff ff43 	bl	800bcb4 <checkint>
 800be2e:	2801      	cmp	r0, #1
 800be30:	d109      	bne.n	800be46 <powf+0x15e>
 800be32:	eeb1 0a40 	vneg.f32	s0, s0
 800be36:	b947      	cbnz	r7, 800be4a <powf+0x162>
 800be38:	2e00      	cmp	r6, #0
 800be3a:	dac8      	bge.n	800bdce <powf+0xe6>
 800be3c:	b005      	add	sp, #20
 800be3e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800be42:	f000 b8dd 	b.w	800c000 <__math_divzerof>
 800be46:	2000      	movs	r0, #0
 800be48:	e7f5      	b.n	800be36 <powf+0x14e>
 800be4a:	2e00      	cmp	r6, #0
 800be4c:	dabf      	bge.n	800bdce <powf+0xe6>
 800be4e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800be52:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800be56:	e7ba      	b.n	800bdce <powf+0xe6>
 800be58:	2900      	cmp	r1, #0
 800be5a:	da1f      	bge.n	800be9c <powf+0x1b4>
 800be5c:	ee10 0a90 	vmov	r0, s1
 800be60:	f7ff ff28 	bl	800bcb4 <checkint>
 800be64:	b920      	cbnz	r0, 800be70 <powf+0x188>
 800be66:	b005      	add	sp, #20
 800be68:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800be6c:	f000 b8d8 	b.w	800c020 <__math_invalidf>
 800be70:	2801      	cmp	r0, #1
 800be72:	bf14      	ite	ne
 800be74:	2000      	movne	r0, #0
 800be76:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800be7a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800be7e:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800be82:	f4bf af44 	bcs.w	800bd0e <powf+0x26>
 800be86:	eddf 7a47 	vldr	s15, [pc, #284]	; 800bfa4 <powf+0x2bc>
 800be8a:	ee20 0a27 	vmul.f32	s0, s0, s15
 800be8e:	ee10 3a10 	vmov	r3, s0
 800be92:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800be96:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 800be9a:	e738      	b.n	800bd0e <powf+0x26>
 800be9c:	2000      	movs	r0, #0
 800be9e:	e7ee      	b.n	800be7e <powf+0x196>
 800bea0:	ed9f 7b39 	vldr	d7, [pc, #228]	; 800bf88 <powf+0x2a0>
 800bea4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800bea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800beac:	dd10      	ble.n	800bed0 <powf+0x1e8>
 800beae:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 800beb2:	2800      	cmp	r0, #0
 800beb4:	d15c      	bne.n	800bf70 <powf+0x288>
 800beb6:	9302      	str	r3, [sp, #8]
 800beb8:	eddd 7a02 	vldr	s15, [sp, #8]
 800bebc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bec0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bec4:	eef4 7a47 	vcmp.f32	s15, s14
 800bec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800becc:	f47f af6e 	bne.w	800bdac <powf+0xc4>
 800bed0:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800bf90 <powf+0x2a8>
 800bed4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800bed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bedc:	d804      	bhi.n	800bee8 <powf+0x200>
 800bede:	b005      	add	sp, #20
 800bee0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800bee4:	f000 b87a 	b.w	800bfdc <__math_uflowf>
 800bee8:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 800bf98 <powf+0x2b0>
 800beec:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800bef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bef4:	d504      	bpl.n	800bf00 <powf+0x218>
 800bef6:	b005      	add	sp, #20
 800bef8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800befc:	f000 b874 	b.w	800bfe8 <__math_may_uflowf>
 800bf00:	4b29      	ldr	r3, [pc, #164]	; (800bfa8 <powf+0x2c0>)
 800bf02:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 800bf06:	ee30 6b07 	vadd.f64	d6, d0, d7
 800bf0a:	ed8d 6b00 	vstr	d6, [sp]
 800bf0e:	ee36 7b47 	vsub.f64	d7, d6, d7
 800bf12:	ee30 7b47 	vsub.f64	d7, d0, d7
 800bf16:	e9dd 6700 	ldrd	r6, r7, [sp]
 800bf1a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800bf1e:	f006 011f 	and.w	r1, r6, #31
 800bf22:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800bf26:	e9d1 ce00 	ldrd	ip, lr, [r1]
 800bf2a:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 800bf2e:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 800bf32:	ed93 4b46 	vldr	d4, [r3, #280]	; 0x118
 800bf36:	eea7 6b05 	vfma.f64	d6, d7, d5
 800bf3a:	ee27 5b07 	vmul.f64	d5, d7, d7
 800bf3e:	1836      	adds	r6, r6, r0
 800bf40:	2300      	movs	r3, #0
 800bf42:	eb13 040c 	adds.w	r4, r3, ip
 800bf46:	ea4f 31c6 	mov.w	r1, r6, lsl #15
 800bf4a:	eb41 050e 	adc.w	r5, r1, lr
 800bf4e:	eea7 0b04 	vfma.f64	d0, d7, d4
 800bf52:	ec45 4b17 	vmov	d7, r4, r5
 800bf56:	eea6 0b05 	vfma.f64	d0, d6, d5
 800bf5a:	ee20 0b07 	vmul.f64	d0, d0, d7
 800bf5e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800bf62:	e734      	b.n	800bdce <powf+0xe6>
 800bf64:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800bf68:	e731      	b.n	800bdce <powf+0xe6>
 800bf6a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800bfac <powf+0x2c4>
 800bf6e:	e72e      	b.n	800bdce <powf+0xe6>
 800bf70:	9303      	str	r3, [sp, #12]
 800bf72:	eddd 7a03 	vldr	s15, [sp, #12]
 800bf76:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800bf7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bf7e:	e7a1      	b.n	800bec4 <powf+0x1dc>
 800bf80:	ffd1d571 	.word	0xffd1d571
 800bf84:	405fffff 	.word	0x405fffff
 800bf88:	ffa3aae2 	.word	0xffa3aae2
 800bf8c:	405fffff 	.word	0x405fffff
 800bf90:	00000000 	.word	0x00000000
 800bf94:	c062c000 	.word	0xc062c000
 800bf98:	00000000 	.word	0x00000000
 800bf9c:	c062a000 	.word	0xc062a000
 800bfa0:	0800c128 	.word	0x0800c128
 800bfa4:	4b000000 	.word	0x4b000000
 800bfa8:	0800c250 	.word	0x0800c250
 800bfac:	00000000 	.word	0x00000000

0800bfb0 <with_errnof>:
 800bfb0:	b513      	push	{r0, r1, r4, lr}
 800bfb2:	4604      	mov	r4, r0
 800bfb4:	ed8d 0a01 	vstr	s0, [sp, #4]
 800bfb8:	f7ff fe4a 	bl	800bc50 <__errno>
 800bfbc:	ed9d 0a01 	vldr	s0, [sp, #4]
 800bfc0:	6004      	str	r4, [r0, #0]
 800bfc2:	b002      	add	sp, #8
 800bfc4:	bd10      	pop	{r4, pc}

0800bfc6 <xflowf>:
 800bfc6:	b130      	cbz	r0, 800bfd6 <xflowf+0x10>
 800bfc8:	eef1 7a40 	vneg.f32	s15, s0
 800bfcc:	ee27 0a80 	vmul.f32	s0, s15, s0
 800bfd0:	2022      	movs	r0, #34	; 0x22
 800bfd2:	f7ff bfed 	b.w	800bfb0 <with_errnof>
 800bfd6:	eef0 7a40 	vmov.f32	s15, s0
 800bfda:	e7f7      	b.n	800bfcc <xflowf+0x6>

0800bfdc <__math_uflowf>:
 800bfdc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800bfe4 <__math_uflowf+0x8>
 800bfe0:	f7ff bff1 	b.w	800bfc6 <xflowf>
 800bfe4:	10000000 	.word	0x10000000

0800bfe8 <__math_may_uflowf>:
 800bfe8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800bff0 <__math_may_uflowf+0x8>
 800bfec:	f7ff bfeb 	b.w	800bfc6 <xflowf>
 800bff0:	1a200000 	.word	0x1a200000

0800bff4 <__math_oflowf>:
 800bff4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800bffc <__math_oflowf+0x8>
 800bff8:	f7ff bfe5 	b.w	800bfc6 <xflowf>
 800bffc:	70000000 	.word	0x70000000

0800c000 <__math_divzerof>:
 800c000:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c004:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800c008:	2800      	cmp	r0, #0
 800c00a:	fe40 7a27 	vseleq.f32	s15, s0, s15
 800c00e:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800c01c <__math_divzerof+0x1c>
 800c012:	2022      	movs	r0, #34	; 0x22
 800c014:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800c018:	f7ff bfca 	b.w	800bfb0 <with_errnof>
 800c01c:	00000000 	.word	0x00000000

0800c020 <__math_invalidf>:
 800c020:	eef0 7a40 	vmov.f32	s15, s0
 800c024:	ee30 7a40 	vsub.f32	s14, s0, s0
 800c028:	eef4 7a67 	vcmp.f32	s15, s15
 800c02c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c030:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800c034:	d602      	bvs.n	800c03c <__math_invalidf+0x1c>
 800c036:	2021      	movs	r0, #33	; 0x21
 800c038:	f7ff bfba 	b.w	800bfb0 <with_errnof>
 800c03c:	4770      	bx	lr
	...

0800c040 <_init>:
 800c040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c042:	bf00      	nop
 800c044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c046:	bc08      	pop	{r3}
 800c048:	469e      	mov	lr, r3
 800c04a:	4770      	bx	lr

0800c04c <_fini>:
 800c04c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c04e:	bf00      	nop
 800c050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c052:	bc08      	pop	{r3}
 800c054:	469e      	mov	lr, r3
 800c056:	4770      	bx	lr
