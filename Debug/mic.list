
mic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c1e0  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000340  0800c4b0  0800c4b0  0001c4b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800c7f0  0800c7f0  0001c7f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800c7f4  0800c7f4  0001c7f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000047c  24000000  0800c7f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000b4c  2400047c  0800cc74  0002047c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000fc8  0800cc74  00020fc8  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0002047c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00036678  00000000  00000000  000204aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003825  00000000  00000000  00056b22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000ff0  00000000  00000000  0005a348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000ed0  00000000  00000000  0005b338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003313c  00000000  00000000  0005c208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00017d34  00000000  00000000  0008f344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00150be4  00000000  00000000  000a7078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      000000d1  00000000  00000000  001f7c5c  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000429c  00000000  00000000  001f7d30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2400047c 	.word	0x2400047c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800c498 	.word	0x0800c498

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000480 	.word	0x24000480
 800030c:	0800c498 	.word	0x0800c498

08000310 <BSP_LED_Init>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b08a      	sub	sp, #40	; 0x28
 8000314:	af00      	add	r7, sp, #0
 8000316:	4603      	mov	r3, r0
 8000318:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800031a:	2300      	movs	r3, #0
 800031c:	627b      	str	r3, [r7, #36]	; 0x24

  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO_LED clock */
  if (Led == LED1)
 800031e:	79fb      	ldrb	r3, [r7, #7]
 8000320:	2b00      	cmp	r3, #0
 8000322:	d10f      	bne.n	8000344 <BSP_LED_Init+0x34>
  {
    LED1_GPIO_CLK_ENABLE();
 8000324:	4b26      	ldr	r3, [pc, #152]	; (80003c0 <BSP_LED_Init+0xb0>)
 8000326:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800032a:	4a25      	ldr	r2, [pc, #148]	; (80003c0 <BSP_LED_Init+0xb0>)
 800032c:	f043 0304 	orr.w	r3, r3, #4
 8000330:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000334:	4b22      	ldr	r3, [pc, #136]	; (80003c0 <BSP_LED_Init+0xb0>)
 8000336:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800033a:	f003 0304 	and.w	r3, r3, #4
 800033e:	60fb      	str	r3, [r7, #12]
 8000340:	68fb      	ldr	r3, [r7, #12]
 8000342:	e015      	b.n	8000370 <BSP_LED_Init+0x60>
  }
  else if (Led == LED2)
 8000344:	79fb      	ldrb	r3, [r7, #7]
 8000346:	2b01      	cmp	r3, #1
 8000348:	d10f      	bne.n	800036a <BSP_LED_Init+0x5a>
  {

    LED2_GPIO_CLK_ENABLE();
 800034a:	4b1d      	ldr	r3, [pc, #116]	; (80003c0 <BSP_LED_Init+0xb0>)
 800034c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000350:	4a1b      	ldr	r2, [pc, #108]	; (80003c0 <BSP_LED_Init+0xb0>)
 8000352:	f043 0304 	orr.w	r3, r3, #4
 8000356:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800035a:	4b19      	ldr	r3, [pc, #100]	; (80003c0 <BSP_LED_Init+0xb0>)
 800035c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000360:	f003 0304 	and.w	r3, r3, #4
 8000364:	60bb      	str	r3, [r7, #8]
 8000366:	68bb      	ldr	r3, [r7, #8]
 8000368:	e002      	b.n	8000370 <BSP_LED_Init+0x60>
  }
  else
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800036a:	f06f 0301 	mvn.w	r3, #1
 800036e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8000370:	2301      	movs	r3, #1
 8000372:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8000374:	2301      	movs	r3, #1
 8000376:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000378:	2302      	movs	r3, #2
 800037a:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Pin = LED_PIN [Led];
 800037c:	79fb      	ldrb	r3, [r7, #7]
 800037e:	4a11      	ldr	r2, [pc, #68]	; (80003c4 <BSP_LED_Init+0xb4>)
 8000380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000384:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_PORT [Led], &gpio_init_structure);
 8000386:	79fb      	ldrb	r3, [r7, #7]
 8000388:	4a0f      	ldr	r2, [pc, #60]	; (80003c8 <BSP_LED_Init+0xb8>)
 800038a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800038e:	f107 0210 	add.w	r2, r7, #16
 8000392:	4611      	mov	r1, r2
 8000394:	4618      	mov	r0, r3
 8000396:	f005 fa4f 	bl	8005838 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN[Led], GPIO_PIN_SET);
 800039a:	79fb      	ldrb	r3, [r7, #7]
 800039c:	4a0a      	ldr	r2, [pc, #40]	; (80003c8 <BSP_LED_Init+0xb8>)
 800039e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80003a2:	79fb      	ldrb	r3, [r7, #7]
 80003a4:	4a07      	ldr	r2, [pc, #28]	; (80003c4 <BSP_LED_Init+0xb4>)
 80003a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003aa:	b29b      	uxth	r3, r3
 80003ac:	2201      	movs	r2, #1
 80003ae:	4619      	mov	r1, r3
 80003b0:	f005 fbea 	bl	8005b88 <HAL_GPIO_WritePin>

  return ret;
 80003b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80003b6:	4618      	mov	r0, r3
 80003b8:	3728      	adds	r7, #40	; 0x28
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	bf00      	nop
 80003c0:	58024400 	.word	0x58024400
 80003c4:	0800c560 	.word	0x0800c560
 80003c8:	24000400 	.word	0x24000400

080003cc <BSP_LED_On>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b084      	sub	sp, #16
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	4603      	mov	r3, r0
 80003d4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80003d6:	2300      	movs	r3, #0
 80003d8:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_RESET);
 80003da:	79fb      	ldrb	r3, [r7, #7]
 80003dc:	4a08      	ldr	r2, [pc, #32]	; (8000400 <BSP_LED_On+0x34>)
 80003de:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80003e2:	79fb      	ldrb	r3, [r7, #7]
 80003e4:	4a07      	ldr	r2, [pc, #28]	; (8000404 <BSP_LED_On+0x38>)
 80003e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003ea:	b29b      	uxth	r3, r3
 80003ec:	2200      	movs	r2, #0
 80003ee:	4619      	mov	r1, r3
 80003f0:	f005 fbca 	bl	8005b88 <HAL_GPIO_WritePin>
  return ret;
 80003f4:	68fb      	ldr	r3, [r7, #12]
}
 80003f6:	4618      	mov	r0, r3
 80003f8:	3710      	adds	r7, #16
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	24000400 	.word	0x24000400
 8000404:	0800c560 	.word	0x0800c560

08000408 <BSP_LED_Off>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b084      	sub	sp, #16
 800040c:	af00      	add	r7, sp, #0
 800040e:	4603      	mov	r3, r0
 8000410:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000412:	2300      	movs	r3, #0
 8000414:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_SET);
 8000416:	79fb      	ldrb	r3, [r7, #7]
 8000418:	4a08      	ldr	r2, [pc, #32]	; (800043c <BSP_LED_Off+0x34>)
 800041a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800041e:	79fb      	ldrb	r3, [r7, #7]
 8000420:	4a07      	ldr	r2, [pc, #28]	; (8000440 <BSP_LED_Off+0x38>)
 8000422:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000426:	b29b      	uxth	r3, r3
 8000428:	2201      	movs	r2, #1
 800042a:	4619      	mov	r1, r3
 800042c:	f005 fbac 	bl	8005b88 <HAL_GPIO_WritePin>
  return ret;
 8000430:	68fb      	ldr	r3, [r7, #12]
}
 8000432:	4618      	mov	r0, r3
 8000434:	3710      	adds	r7, #16
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	24000400 	.word	0x24000400
 8000440:	0800c560 	.word	0x0800c560

08000444 <MX_SAI1_Block_B_Init>:
  * @param  MXConfig SAI confiruration structure
  * @note   Being __weak it can be overwritten by the application
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SAI1_Block_B_Init(SAI_HandleTypeDef* hsai, MX_SAI_Config *MXConfig)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b084      	sub	sp, #16
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
 800044c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800044e:	2300      	movs	r3, #0
 8000450:	73fb      	strb	r3, [r7, #15]

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(hsai);
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	681a      	ldr	r2, [r3, #0]
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000460:	601a      	str	r2, [r3, #0]

  /* Configure SAI1_Block_B */
  hsai->Init.MonoStereoMode       = MXConfig->MonoStereoMode;
 8000462:	683b      	ldr	r3, [r7, #0]
 8000464:	68da      	ldr	r2, [r3, #12]
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai->Init.AudioFrequency       = MXConfig->AudioFrequency;
 800046a:	683b      	ldr	r3, [r7, #0]
 800046c:	681a      	ldr	r2, [r3, #0]
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	621a      	str	r2, [r3, #32]
  hsai->Init.AudioMode            = MXConfig->AudioMode;
 8000472:	683b      	ldr	r3, [r7, #0]
 8000474:	685a      	ldr	r2, [r3, #4]
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	605a      	str	r2, [r3, #4]
  hsai->Init.NoDivider            = SAI_MASTERDIVIDER_ENABLE;
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	2200      	movs	r2, #0
 800047e:	619a      	str	r2, [r3, #24]
  hsai->Init.Protocol             = SAI_FREE_PROTOCOL;
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	2200      	movs	r2, #0
 8000484:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.DataSize             = MXConfig->DataSize;
 8000486:	683b      	ldr	r3, [r7, #0]
 8000488:	689a      	ldr	r2, [r3, #8]
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->Init.FirstBit             = SAI_FIRSTBIT_MSB;
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	2200      	movs	r2, #0
 8000492:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->Init.ClockStrobing        = MXConfig->ClockStrobing;
 8000494:	683b      	ldr	r3, [r7, #0]
 8000496:	691a      	ldr	r2, [r3, #16]
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	651a      	str	r2, [r3, #80]	; 0x50
  hsai->Init.Synchro              = MXConfig->Synchro;
 800049c:	683b      	ldr	r3, [r7, #0]
 800049e:	695a      	ldr	r2, [r3, #20]
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	609a      	str	r2, [r3, #8]
  hsai->Init.OutputDrive          = MXConfig->OutputDrive;
 80004a4:	683b      	ldr	r3, [r7, #0]
 80004a6:	699a      	ldr	r2, [r3, #24]
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	615a      	str	r2, [r3, #20]
  hsai->Init.FIFOThreshold        = SAI_FIFOTHRESHOLD_1QF;
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	2201      	movs	r2, #1
 80004b0:	61da      	str	r2, [r3, #28]
  hsai->Init.SynchroExt           = MXConfig->SynchroExt;
 80004b2:	683b      	ldr	r3, [r7, #0]
 80004b4:	69da      	ldr	r2, [r3, #28]
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	60da      	str	r2, [r3, #12]
  hsai->Init.CompandingMode       = SAI_NOCOMPANDING;
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	2200      	movs	r2, #0
 80004be:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.TriState             = SAI_OUTPUT_NOTRELEASED;
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	2200      	movs	r2, #0
 80004c4:	635a      	str	r2, [r3, #52]	; 0x34
  hsai->Init.Mckdiv               = 0;
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	2200      	movs	r2, #0
 80004ca:	625a      	str	r2, [r3, #36]	; 0x24
  hsai->Init.MckOutput            = SAI_MCK_OUTPUT_ENABLE;
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80004d2:	611a      	str	r2, [r3, #16]
  hsai->Init.MckOverSampling      = SAI_MCK_OVERSAMPLING_DISABLE;
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	2200      	movs	r2, #0
 80004d8:	629a      	str	r2, [r3, #40]	; 0x28
  hsai->Init.PdmInit.Activation   = DISABLE;
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	2200      	movs	r2, #0
 80004de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Configure SAI_Block_x Frame */
  hsai->FrameInit.FrameLength       = MXConfig->FrameLength;
 80004e2:	683b      	ldr	r3, [r7, #0]
 80004e4:	6a1a      	ldr	r2, [r3, #32]
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->FrameInit.ActiveFrameLength = MXConfig->ActiveFrameLength;
 80004ea:	683b      	ldr	r3, [r7, #0]
 80004ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->FrameInit.FSDefinition      = SAI_FS_CHANNEL_IDENTIFICATION;
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80004f8:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity        = SAI_FS_ACTIVE_LOW;
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	2200      	movs	r2, #0
 80004fe:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset          = SAI_FS_BEFOREFIRSTBIT;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000506:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure SAI Block_x Slot */
  hsai->SlotInit.FirstBitOffset     = 0;
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	2200      	movs	r2, #0
 800050c:	669a      	str	r2, [r3, #104]	; 0x68
  if ((MXConfig->DataSize == AUDIO_RESOLUTION_24B) || (MXConfig->DataSize == AUDIO_RESOLUTION_32B))
 800050e:	683b      	ldr	r3, [r7, #0]
 8000510:	689b      	ldr	r3, [r3, #8]
 8000512:	2b18      	cmp	r3, #24
 8000514:	d003      	beq.n	800051e <MX_SAI1_Block_B_Init+0xda>
 8000516:	683b      	ldr	r3, [r7, #0]
 8000518:	689b      	ldr	r3, [r3, #8]
 800051a:	2b20      	cmp	r3, #32
 800051c:	d103      	bne.n	8000526 <MX_SAI1_Block_B_Init+0xe2>
  {
    hsai->SlotInit.SlotSize         = SAI_SLOTSIZE_32B;
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	2280      	movs	r2, #128	; 0x80
 8000522:	66da      	str	r2, [r3, #108]	; 0x6c
 8000524:	e002      	b.n	800052c <MX_SAI1_Block_B_Init+0xe8>
  }
  else
  {
    hsai->SlotInit.SlotSize         = SAI_SLOTSIZE_16B;
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	2240      	movs	r2, #64	; 0x40
 800052a:	66da      	str	r2, [r3, #108]	; 0x6c
  }
  hsai->SlotInit.SlotNumber         = 4;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	2204      	movs	r2, #4
 8000530:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive         = MXConfig->SlotActive;
 8000532:	683b      	ldr	r3, [r7, #0]
 8000534:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	675a      	str	r2, [r3, #116]	; 0x74

  if(HAL_SAI_Init(hsai) != HAL_OK)
 800053a:	6878      	ldr	r0, [r7, #4]
 800053c:	f008 fc84 	bl	8008e48 <HAL_SAI_Init>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <MX_SAI1_Block_B_Init+0x106>
  {
    ret = HAL_ERROR;
 8000546:	2301      	movs	r3, #1
 8000548:	73fb      	strb	r3, [r7, #15]
  }
  __HAL_SAI_ENABLE(hsai);
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	681a      	ldr	r2, [r3, #0]
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000558:	601a      	str	r2, [r3, #0]

  return ret;
 800055a:	7bfb      	ldrb	r3, [r7, #15]
}
 800055c:	4618      	mov	r0, r3
 800055e:	3710      	adds	r7, #16
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}

08000564 <MX_SAI1_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SAI1_ClockConfig(SAI_HandleTypeDef *hsai, uint32_t SampleRate)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b0b0      	sub	sp, #192	; 0xc0
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
 800056c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsai);

  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;
  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 800056e:	f107 030c 	add.w	r3, r7, #12
 8000572:	4618      	mov	r0, r3
 8000574:	f007 f982 	bl	800787c <HAL_RCCEx_GetPeriphCLKConfig>

  /* Set the PLL configuration according to the audio frequency */
  /* Set the PLL configuration according to the audio frequency */
  if((SampleRate == AUDIO_FREQUENCY_11K) || (SampleRate == AUDIO_FREQUENCY_22K) || (SampleRate == AUDIO_FREQUENCY_44K))
 8000578:	683b      	ldr	r3, [r7, #0]
 800057a:	f642 3211 	movw	r2, #11025	; 0x2b11
 800057e:	4293      	cmp	r3, r2
 8000580:	d009      	beq.n	8000596 <MX_SAI1_ClockConfig+0x32>
 8000582:	683b      	ldr	r3, [r7, #0]
 8000584:	f245 6222 	movw	r2, #22050	; 0x5622
 8000588:	4293      	cmp	r3, r2
 800058a:	d004      	beq.n	8000596 <MX_SAI1_ClockConfig+0x32>
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	f64a 4244 	movw	r2, #44100	; 0xac44
 8000592:	4293      	cmp	r3, r2
 8000594:	d104      	bne.n	80005a0 <MX_SAI1_ClockConfig+0x3c>
  {
    rcc_ex_clk_init_struct.PLL2.PLL2P = 36;
 8000596:	2324      	movs	r3, #36	; 0x24
 8000598:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLL2.PLL2Q = 36;
 800059a:	2324      	movs	r3, #36	; 0x24
 800059c:	61fb      	str	r3, [r7, #28]
 800059e:	e003      	b.n	80005a8 <MX_SAI1_ClockConfig+0x44>
  }
  else /* AUDIO_FREQUENCY_8K, AUDIO_FREQUENCY_16K, AUDIO_FREQUENCY_32K, AUDIO_FREQUENCY_48K, AUDIO_FREQUENCY_96K */
  {
    rcc_ex_clk_init_struct.PLL2.PLL2P = 8;
 80005a0:	2308      	movs	r3, #8
 80005a2:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLL2.PLL2Q = 8;
 80005a4:	2308      	movs	r3, #8
 80005a6:	61fb      	str	r3, [r7, #28]
  }
  rcc_ex_clk_init_struct.PLL2.PLL2N = 80;
 80005a8:	2350      	movs	r3, #80	; 0x50
 80005aa:	617b      	str	r3, [r7, #20]

  rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 80005ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005b0:	60fb      	str	r3, [r7, #12]
  rcc_ex_clk_init_struct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 80005b2:	2301      	movs	r3, #1
 80005b4:	663b      	str	r3, [r7, #96]	; 0x60
  rcc_ex_clk_init_struct.PLL2.PLL2R = 2;
 80005b6:	2302      	movs	r3, #2
 80005b8:	623b      	str	r3, [r7, #32]
  rcc_ex_clk_init_struct.PLL2.PLL2M = 5;
 80005ba:	2305      	movs	r3, #5
 80005bc:	613b      	str	r3, [r7, #16]
  rcc_ex_clk_init_struct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 80005be:	2300      	movs	r3, #0
 80005c0:	627b      	str	r3, [r7, #36]	; 0x24
  rcc_ex_clk_init_struct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80005c2:	2320      	movs	r3, #32
 80005c4:	62bb      	str	r3, [r7, #40]	; 0x28
  rcc_ex_clk_init_struct.PLL2.PLL2FRACN = 0;
 80005c6:	2300      	movs	r3, #0
 80005c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  return HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 80005ca:	f107 030c 	add.w	r3, r7, #12
 80005ce:	4618      	mov	r0, r3
 80005d0:	f006 fa5a 	bl	8006a88 <HAL_RCCEx_PeriphCLKConfig>
 80005d4:	4603      	mov	r3, r0
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	37c0      	adds	r7, #192	; 0xc0
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
	...

080005e0 <HAL_SAI_ErrorCallback>:
  * @brief  SAI error callbacks.
  * @param  hsai  SAI handle
  * @retval None
  */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  if(hsai->Instance == AUDIO_OUT_SAIx)
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a06      	ldr	r2, [pc, #24]	; (8000608 <HAL_SAI_ErrorCallback+0x28>)
 80005ee:	4293      	cmp	r3, r2
 80005f0:	d103      	bne.n	80005fa <HAL_SAI_ErrorCallback+0x1a>
  {
    BSP_AUDIO_OUT_Error_CallBack(0);
 80005f2:	2000      	movs	r0, #0
 80005f4:	f000 f80a 	bl	800060c <BSP_AUDIO_OUT_Error_CallBack>
  }
  else
  {
    BSP_AUDIO_IN_Error_CallBack(0);
  }
}
 80005f8:	e002      	b.n	8000600 <HAL_SAI_ErrorCallback+0x20>
    BSP_AUDIO_IN_Error_CallBack(0);
 80005fa:	2000      	movs	r0, #0
 80005fc:	f001 f8ae 	bl	800175c <BSP_AUDIO_IN_Error_CallBack>
}
 8000600:	bf00      	nop
 8000602:	3708      	adds	r7, #8
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	40015824 	.word	0x40015824

0800060c <BSP_AUDIO_OUT_Error_CallBack>:
  * @brief  Manages the DMA FIFO error event
  * @param  Instance AUDIO OUT Instance. It can only be 0 (SAI)
  * @retval None
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(uint32_t Instance)
{
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Instance);
}
 8000614:	bf00      	nop
 8000616:	370c      	adds	r7, #12
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr

08000620 <SAI_MspInit>:
  * @brief  Initialize BSP_AUDIO_OUT MSP.
  * @param  hsai  SAI handle
  * @retval None
  */
static void SAI_MspInit(SAI_HandleTypeDef *hsai)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b096      	sub	sp, #88	; 0x58
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  static DMA_HandleTypeDef hdma_sai_tx, hdma_sai_rx;
    /* Enable SAI clock */
  AUDIO_OUT_SAIx_CLK_ENABLE();
 8000628:	4b61      	ldr	r3, [pc, #388]	; (80007b0 <SAI_MspInit+0x190>)
 800062a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800062e:	4a60      	ldr	r2, [pc, #384]	; (80007b0 <SAI_MspInit+0x190>)
 8000630:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000634:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000638:	4b5d      	ldr	r3, [pc, #372]	; (80007b0 <SAI_MspInit+0x190>)
 800063a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800063e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000642:	643b      	str	r3, [r7, #64]	; 0x40
 8000644:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable GPIO clock */
  AUDIO_OUT_SAIx_MCLK_ENABLE();
 8000646:	4b5a      	ldr	r3, [pc, #360]	; (80007b0 <SAI_MspInit+0x190>)
 8000648:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800064c:	4a58      	ldr	r2, [pc, #352]	; (80007b0 <SAI_MspInit+0x190>)
 800064e:	f043 0320 	orr.w	r3, r3, #32
 8000652:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000656:	4b56      	ldr	r3, [pc, #344]	; (80007b0 <SAI_MspInit+0x190>)
 8000658:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800065c:	f003 0320 	and.w	r3, r3, #32
 8000660:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000662:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  AUDIO_OUT_SAIx_SCK_ENABLE();
 8000664:	4b52      	ldr	r3, [pc, #328]	; (80007b0 <SAI_MspInit+0x190>)
 8000666:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800066a:	4a51      	ldr	r2, [pc, #324]	; (80007b0 <SAI_MspInit+0x190>)
 800066c:	f043 0320 	orr.w	r3, r3, #32
 8000670:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000674:	4b4e      	ldr	r3, [pc, #312]	; (80007b0 <SAI_MspInit+0x190>)
 8000676:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800067a:	f003 0320 	and.w	r3, r3, #32
 800067e:	63bb      	str	r3, [r7, #56]	; 0x38
 8000680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  AUDIO_OUT_SAIx_SD_ENABLE();
 8000682:	4b4b      	ldr	r3, [pc, #300]	; (80007b0 <SAI_MspInit+0x190>)
 8000684:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000688:	4a49      	ldr	r2, [pc, #292]	; (80007b0 <SAI_MspInit+0x190>)
 800068a:	f043 0320 	orr.w	r3, r3, #32
 800068e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000692:	4b47      	ldr	r3, [pc, #284]	; (80007b0 <SAI_MspInit+0x190>)
 8000694:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000698:	f003 0320 	and.w	r3, r3, #32
 800069c:	637b      	str	r3, [r7, #52]	; 0x34
 800069e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  AUDIO_OUT_SAIx_FS_ENABLE();
 80006a0:	4b43      	ldr	r3, [pc, #268]	; (80007b0 <SAI_MspInit+0x190>)
 80006a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006a6:	4a42      	ldr	r2, [pc, #264]	; (80007b0 <SAI_MspInit+0x190>)
 80006a8:	f043 0320 	orr.w	r3, r3, #32
 80006ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006b0:	4b3f      	ldr	r3, [pc, #252]	; (80007b0 <SAI_MspInit+0x190>)
 80006b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006b6:	f003 0320 	and.w	r3, r3, #32
 80006ba:	633b      	str	r3, [r7, #48]	; 0x30
 80006bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
 80006be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006c2:	647b      	str	r3, [r7, #68]	; 0x44
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80006c4:	2302      	movs	r3, #2
 80006c6:	64bb      	str	r3, [r7, #72]	; 0x48
  gpio_init_structure.Pull = GPIO_NOPULL;
 80006c8:	2300      	movs	r3, #0
 80006ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006cc:	2303      	movs	r3, #3
 80006ce:	653b      	str	r3, [r7, #80]	; 0x50
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_AF;
 80006d0:	2306      	movs	r3, #6
 80006d2:	657b      	str	r3, [r7, #84]	; 0x54
  HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 80006d4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80006d8:	4619      	mov	r1, r3
 80006da:	4836      	ldr	r0, [pc, #216]	; (80007b4 <SAI_MspInit+0x194>)
 80006dc:	f005 f8ac 	bl	8005838 <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 80006e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006e4:	647b      	str	r3, [r7, #68]	; 0x44
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
 80006e6:	2306      	movs	r3, #6
 80006e8:	657b      	str	r3, [r7, #84]	; 0x54
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_GPIO_PORT, &gpio_init_structure);
 80006ea:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80006ee:	4619      	mov	r1, r3
 80006f0:	4830      	ldr	r0, [pc, #192]	; (80007b4 <SAI_MspInit+0x194>)
 80006f2:	f005 f8a1 	bl	8005838 <HAL_GPIO_Init>

  gpio_init_structure.Pin =  AUDIO_OUT_SAIx_SD_PIN;
 80006f6:	2340      	movs	r3, #64	; 0x40
 80006f8:	647b      	str	r3, [r7, #68]	; 0x44
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SD_AF;
 80006fa:	2306      	movs	r3, #6
 80006fc:	657b      	str	r3, [r7, #84]	; 0x54
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 80006fe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000702:	4619      	mov	r1, r3
 8000704:	482b      	ldr	r0, [pc, #172]	; (80007b4 <SAI_MspInit+0x194>)
 8000706:	f005 f897 	bl	8005838 <HAL_GPIO_Init>

    if(hsai->Instance != AUDIO_IN_SAI_PDMx)
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	4a2a      	ldr	r2, [pc, #168]	; (80007b8 <SAI_MspInit+0x198>)
 8000710:	4293      	cmp	r3, r2
 8000712:	d01e      	beq.n	8000752 <SAI_MspInit+0x132>
    {
      if(haudio_in_sai[0].State != HAL_SAI_STATE_READY)
 8000714:	4b29      	ldr	r3, [pc, #164]	; (80007bc <SAI_MspInit+0x19c>)
 8000716:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800071a:	b2db      	uxtb	r3, r3
 800071c:	2b01      	cmp	r3, #1
 800071e:	d018      	beq.n	8000752 <SAI_MspInit+0x132>
      {
        AUDIO_OUT_SAIx_MCLK_ENABLE();
 8000720:	4b23      	ldr	r3, [pc, #140]	; (80007b0 <SAI_MspInit+0x190>)
 8000722:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000726:	4a22      	ldr	r2, [pc, #136]	; (80007b0 <SAI_MspInit+0x190>)
 8000728:	f043 0320 	orr.w	r3, r3, #32
 800072c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000730:	4b1f      	ldr	r3, [pc, #124]	; (80007b0 <SAI_MspInit+0x190>)
 8000732:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000736:	f003 0320 	and.w	r3, r3, #32
 800073a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800073c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
        gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 800073e:	2380      	movs	r3, #128	; 0x80
 8000740:	647b      	str	r3, [r7, #68]	; 0x44
        gpio_init_structure.Alternate = AUDIO_OUT_SAIx_MCLK_AF;
 8000742:	2306      	movs	r3, #6
 8000744:	657b      	str	r3, [r7, #84]	; 0x54
        HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 8000746:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800074a:	4619      	mov	r1, r3
 800074c:	4819      	ldr	r0, [pc, #100]	; (80007b4 <SAI_MspInit+0x194>)
 800074e:	f005 f873 	bl	8005838 <HAL_GPIO_Init>
      }
    }

  if(hsai->Instance == AUDIO_OUT_SAIx)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	4a1a      	ldr	r2, [pc, #104]	; (80007c0 <SAI_MspInit+0x1a0>)
 8000758:	4293      	cmp	r3, r2
 800075a:	d16b      	bne.n	8000834 <SAI_MspInit+0x214>
  {
  /* Enable the DMA clock */
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 800075c:	4b14      	ldr	r3, [pc, #80]	; (80007b0 <SAI_MspInit+0x190>)
 800075e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000762:	4a13      	ldr	r2, [pc, #76]	; (80007b0 <SAI_MspInit+0x190>)
 8000764:	f043 0302 	orr.w	r3, r3, #2
 8000768:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800076c:	4b10      	ldr	r3, [pc, #64]	; (80007b0 <SAI_MspInit+0x190>)
 800076e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000772:	f003 0302 	and.w	r3, r3, #2
 8000776:	62bb      	str	r3, [r7, #40]	; 0x28
 8000778:	6abb      	ldr	r3, [r7, #40]	; 0x28

    /* Configure the hdma_saiTx handle parameters */
    hdma_sai_tx.Init.Request             = AUDIO_OUT_SAIx_DMAx_REQUEST;
 800077a:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <SAI_MspInit+0x1a4>)
 800077c:	2258      	movs	r2, #88	; 0x58
 800077e:	605a      	str	r2, [r3, #4]
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8000780:	4b10      	ldr	r3, [pc, #64]	; (80007c4 <SAI_MspInit+0x1a4>)
 8000782:	2240      	movs	r2, #64	; 0x40
 8000784:	609a      	str	r2, [r3, #8]
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8000786:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <SAI_MspInit+0x1a4>)
 8000788:	2200      	movs	r2, #0
 800078a:	60da      	str	r2, [r3, #12]
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 800078c:	4b0d      	ldr	r3, [pc, #52]	; (80007c4 <SAI_MspInit+0x1a4>)
 800078e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000792:	611a      	str	r2, [r3, #16]
    if (Audio_Out_Ctx[0].BitsPerSample == AUDIO_RESOLUTION_16B)
 8000794:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <SAI_MspInit+0x1a8>)
 8000796:	68db      	ldr	r3, [r3, #12]
 8000798:	2b10      	cmp	r3, #16
 800079a:	d117      	bne.n	80007cc <SAI_MspInit+0x1ac>
    {
      hdma_sai_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800079c:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <SAI_MspInit+0x1a4>)
 800079e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80007a2:	615a      	str	r2, [r3, #20]
      hdma_sai_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_HALFWORD;
 80007a4:	4b07      	ldr	r3, [pc, #28]	; (80007c4 <SAI_MspInit+0x1a4>)
 80007a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007aa:	619a      	str	r2, [r3, #24]
 80007ac:	e016      	b.n	80007dc <SAI_MspInit+0x1bc>
 80007ae:	bf00      	nop
 80007b0:	58024400 	.word	0x58024400
 80007b4:	58021400 	.word	0x58021400
 80007b8:	58005404 	.word	0x58005404
 80007bc:	24000538 	.word	0x24000538
 80007c0:	40015824 	.word	0x40015824
 80007c4:	240008f0 	.word	0x240008f0
 80007c8:	24000c40 	.word	0x24000c40
    }
    else /* AUDIO_RESOLUTION_32B */
    {
      hdma_sai_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80007cc:	4b53      	ldr	r3, [pc, #332]	; (800091c <SAI_MspInit+0x2fc>)
 80007ce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007d2:	615a      	str	r2, [r3, #20]
      hdma_sai_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80007d4:	4b51      	ldr	r3, [pc, #324]	; (800091c <SAI_MspInit+0x2fc>)
 80007d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007da:	619a      	str	r2, [r3, #24]
    }
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 80007dc:	4b4f      	ldr	r3, [pc, #316]	; (800091c <SAI_MspInit+0x2fc>)
 80007de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007e2:	61da      	str	r2, [r3, #28]
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 80007e4:	4b4d      	ldr	r3, [pc, #308]	; (800091c <SAI_MspInit+0x2fc>)
 80007e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80007ea:	621a      	str	r2, [r3, #32]
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 80007ec:	4b4b      	ldr	r3, [pc, #300]	; (800091c <SAI_MspInit+0x2fc>)
 80007ee:	2204      	movs	r2, #4
 80007f0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80007f2:	4b4a      	ldr	r3, [pc, #296]	; (800091c <SAI_MspInit+0x2fc>)
 80007f4:	2203      	movs	r2, #3
 80007f6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
 80007f8:	4b48      	ldr	r3, [pc, #288]	; (800091c <SAI_MspInit+0x2fc>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 80007fe:	4b47      	ldr	r3, [pc, #284]	; (800091c <SAI_MspInit+0x2fc>)
 8000800:	2200      	movs	r2, #0
 8000802:	631a      	str	r2, [r3, #48]	; 0x30

    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 8000804:	4b45      	ldr	r3, [pc, #276]	; (800091c <SAI_MspInit+0x2fc>)
 8000806:	4a46      	ldr	r2, [pc, #280]	; (8000920 <SAI_MspInit+0x300>)
 8000808:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	4a43      	ldr	r2, [pc, #268]	; (800091c <SAI_MspInit+0x2fc>)
 800080e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8000812:	4a42      	ldr	r2, [pc, #264]	; (800091c <SAI_MspInit+0x2fc>)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	6393      	str	r3, [r2, #56]	; 0x38

    /* Deinitialize the Stream for new transfer */
    (void)HAL_DMA_DeInit(&hdma_sai_tx);
 8000818:	4840      	ldr	r0, [pc, #256]	; (800091c <SAI_MspInit+0x2fc>)
 800081a:	f002 fa55 	bl	8002cc8 <HAL_DMA_DeInit>

    /* Configure the DMA Stream */
    (void)HAL_DMA_Init(&hdma_sai_tx);
 800081e:	483f      	ldr	r0, [pc, #252]	; (800091c <SAI_MspInit+0x2fc>)
 8000820:	f001 fef8 	bl	8002614 <HAL_DMA_Init>

    /* SAI DMA IRQ Channel configuration */
    HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, BSP_AUDIO_OUT_IT_PRIORITY, 0);
 8000824:	2200      	movs	r2, #0
 8000826:	210e      	movs	r1, #14
 8000828:	2045      	movs	r0, #69	; 0x45
 800082a:	f001 fb94 	bl	8001f56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ);
 800082e:	2045      	movs	r0, #69	; 0x45
 8000830:	f001 fbab 	bl	8001f8a <HAL_NVIC_EnableIRQ>
  }

  /* Audio In Msp initialization */
  if(hsai->Instance == AUDIO_IN_SAIx)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a3a      	ldr	r2, [pc, #232]	; (8000924 <SAI_MspInit+0x304>)
 800083a:	4293      	cmp	r3, r2
 800083c:	f040 809b 	bne.w	8000976 <SAI_MspInit+0x356>
  {
    /* Enable SAI clock */
    AUDIO_IN_SAIx_CLK_ENABLE();
 8000840:	4b39      	ldr	r3, [pc, #228]	; (8000928 <SAI_MspInit+0x308>)
 8000842:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000846:	4a38      	ldr	r2, [pc, #224]	; (8000928 <SAI_MspInit+0x308>)
 8000848:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800084c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000850:	4b35      	ldr	r3, [pc, #212]	; (8000928 <SAI_MspInit+0x308>)
 8000852:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000856:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800085a:	627b      	str	r3, [r7, #36]	; 0x24
 800085c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    /* Enable SD GPIO clock */
    AUDIO_IN_SAIx_SD_ENABLE();
 800085e:	4b32      	ldr	r3, [pc, #200]	; (8000928 <SAI_MspInit+0x308>)
 8000860:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000864:	4a30      	ldr	r2, [pc, #192]	; (8000928 <SAI_MspInit+0x308>)
 8000866:	f043 0310 	orr.w	r3, r3, #16
 800086a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800086e:	4b2e      	ldr	r3, [pc, #184]	; (8000928 <SAI_MspInit+0x308>)
 8000870:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000874:	f003 0310 	and.w	r3, r3, #16
 8000878:	623b      	str	r3, [r7, #32]
 800087a:	6a3b      	ldr	r3, [r7, #32]
    /* CODEC_SAI pin configuration: SD pin */
    gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 800087c:	2340      	movs	r3, #64	; 0x40
 800087e:	647b      	str	r3, [r7, #68]	; 0x44
    gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8000880:	2302      	movs	r3, #2
 8000882:	64bb      	str	r3, [r7, #72]	; 0x48
    gpio_init_structure.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	64fb      	str	r3, [r7, #76]	; 0x4c
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000888:	2302      	movs	r3, #2
 800088a:	653b      	str	r3, [r7, #80]	; 0x50
    gpio_init_structure.Alternate = AUDIO_IN_SAIx_AF;
 800088c:	2306      	movs	r3, #6
 800088e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 8000890:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000894:	4619      	mov	r1, r3
 8000896:	4825      	ldr	r0, [pc, #148]	; (800092c <SAI_MspInit+0x30c>)
 8000898:	f004 ffce 	bl	8005838 <HAL_GPIO_Init>

    /* Enable the DMA clock */
    AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 800089c:	4b22      	ldr	r3, [pc, #136]	; (8000928 <SAI_MspInit+0x308>)
 800089e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80008a2:	4a21      	ldr	r2, [pc, #132]	; (8000928 <SAI_MspInit+0x308>)
 80008a4:	f043 0302 	orr.w	r3, r3, #2
 80008a8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80008ac:	4b1e      	ldr	r3, [pc, #120]	; (8000928 <SAI_MspInit+0x308>)
 80008ae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80008b2:	f003 0302 	and.w	r3, r3, #2
 80008b6:	61fb      	str	r3, [r7, #28]
 80008b8:	69fb      	ldr	r3, [r7, #28]

    /* Configure the hdma_sai_rx handle parameters */
    hdma_sai_rx.Instance                 = AUDIO_IN_SAI_PDMx_DMAx_STREAM;
 80008ba:	4b1d      	ldr	r3, [pc, #116]	; (8000930 <SAI_MspInit+0x310>)
 80008bc:	4a1d      	ldr	r2, [pc, #116]	; (8000934 <SAI_MspInit+0x314>)
 80008be:	601a      	str	r2, [r3, #0]
    hdma_sai_rx.Init.Request             = AUDIO_IN_SAI_PDMx_DMAx_REQUEST;
 80008c0:	4b1b      	ldr	r3, [pc, #108]	; (8000930 <SAI_MspInit+0x310>)
 80008c2:	220f      	movs	r2, #15
 80008c4:	605a      	str	r2, [r3, #4]
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 80008c6:	4b1a      	ldr	r3, [pc, #104]	; (8000930 <SAI_MspInit+0x310>)
 80008c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008cc:	61da      	str	r2, [r3, #28]
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 80008ce:	4b18      	ldr	r3, [pc, #96]	; (8000930 <SAI_MspInit+0x310>)
 80008d0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80008d4:	621a      	str	r2, [r3, #32]
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 80008d6:	4b16      	ldr	r3, [pc, #88]	; (8000930 <SAI_MspInit+0x310>)
 80008d8:	2200      	movs	r2, #0
 80008da:	609a      	str	r2, [r3, #8]
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 80008dc:	4b14      	ldr	r3, [pc, #80]	; (8000930 <SAI_MspInit+0x310>)
 80008de:	2200      	movs	r2, #0
 80008e0:	60da      	str	r2, [r3, #12]
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 80008e2:	4b13      	ldr	r3, [pc, #76]	; (8000930 <SAI_MspInit+0x310>)
 80008e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008e8:	611a      	str	r2, [r3, #16]
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 80008ea:	4b11      	ldr	r3, [pc, #68]	; (8000930 <SAI_MspInit+0x310>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80008f0:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <SAI_MspInit+0x310>)
 80008f2:	2203      	movs	r2, #3
 80008f4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 80008f6:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <SAI_MspInit+0x310>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 80008fc:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <SAI_MspInit+0x310>)
 80008fe:	2200      	movs	r2, #0
 8000900:	631a      	str	r2, [r3, #48]	; 0x30

    if(Audio_In_Ctx[0].BitsPerSample == AUDIO_RESOLUTION_16B)
 8000902:	4b0d      	ldr	r3, [pc, #52]	; (8000938 <SAI_MspInit+0x318>)
 8000904:	68db      	ldr	r3, [r3, #12]
 8000906:	2b10      	cmp	r3, #16
 8000908:	d118      	bne.n	800093c <SAI_MspInit+0x31c>
    {
      hdma_sai_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800090a:	4b09      	ldr	r3, [pc, #36]	; (8000930 <SAI_MspInit+0x310>)
 800090c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000910:	615a      	str	r2, [r3, #20]
      hdma_sai_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_HALFWORD;
 8000912:	4b07      	ldr	r3, [pc, #28]	; (8000930 <SAI_MspInit+0x310>)
 8000914:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000918:	619a      	str	r2, [r3, #24]
 800091a:	e017      	b.n	800094c <SAI_MspInit+0x32c>
 800091c:	240008f0 	.word	0x240008f0
 8000920:	400204a0 	.word	0x400204a0
 8000924:	40015804 	.word	0x40015804
 8000928:	58024400 	.word	0x58024400
 800092c:	58021000 	.word	0x58021000
 8000930:	24000968 	.word	0x24000968
 8000934:	5802541c 	.word	0x5802541c
 8000938:	24000c64 	.word	0x24000c64
    }
    else
    {
      hdma_sai_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800093c:	4b6f      	ldr	r3, [pc, #444]	; (8000afc <SAI_MspInit+0x4dc>)
 800093e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000942:	615a      	str	r2, [r3, #20]
      hdma_sai_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8000944:	4b6d      	ldr	r3, [pc, #436]	; (8000afc <SAI_MspInit+0x4dc>)
 8000946:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800094a:	619a      	str	r2, [r3, #24]
    }

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	4a6b      	ldr	r2, [pc, #428]	; (8000afc <SAI_MspInit+0x4dc>)
 8000950:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8000954:	4a69      	ldr	r2, [pc, #420]	; (8000afc <SAI_MspInit+0x4dc>)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	6393      	str	r3, [r2, #56]	; 0x38

    /* Deinitialize the Stream for new transfer */
    (void)HAL_DMA_DeInit(&hdma_sai_rx);
 800095a:	4868      	ldr	r0, [pc, #416]	; (8000afc <SAI_MspInit+0x4dc>)
 800095c:	f002 f9b4 	bl	8002cc8 <HAL_DMA_DeInit>

    /* Configure the DMA Stream */
    (void)HAL_DMA_Init(&hdma_sai_rx);
 8000960:	4866      	ldr	r0, [pc, #408]	; (8000afc <SAI_MspInit+0x4dc>)
 8000962:	f001 fe57 	bl	8002614 <HAL_DMA_Init>

    /* SAI DMA IRQ Channel configuration */
    HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, BSP_AUDIO_IN_IT_PRIORITY, 0);
 8000966:	2200      	movs	r2, #0
 8000968:	210f      	movs	r1, #15
 800096a:	203c      	movs	r0, #60	; 0x3c
 800096c:	f001 faf3 	bl	8001f56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 8000970:	203c      	movs	r0, #60	; 0x3c
 8000972:	f001 fb0a 	bl	8001f8a <HAL_NVIC_EnableIRQ>
  }

  if(hsai->Instance == AUDIO_IN_SAI_PDMx)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4a61      	ldr	r2, [pc, #388]	; (8000b00 <SAI_MspInit+0x4e0>)
 800097c:	4293      	cmp	r3, r2
 800097e:	f040 80b8 	bne.w	8000af2 <SAI_MspInit+0x4d2>
  {
     /* Enable SAI clock */
    AUDIO_IN_SAI_PDMx_CLK_ENABLE();
 8000982:	4b60      	ldr	r3, [pc, #384]	; (8000b04 <SAI_MspInit+0x4e4>)
 8000984:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000988:	4a5e      	ldr	r2, [pc, #376]	; (8000b04 <SAI_MspInit+0x4e4>)
 800098a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800098e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000992:	4b5c      	ldr	r3, [pc, #368]	; (8000b04 <SAI_MspInit+0x4e4>)
 8000994:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000998:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800099c:	61bb      	str	r3, [r7, #24]
 800099e:	69bb      	ldr	r3, [r7, #24]

    AUDIO_IN_SAI_PDMx_CLK_IN_ENABLE();
 80009a0:	4b58      	ldr	r3, [pc, #352]	; (8000b04 <SAI_MspInit+0x4e4>)
 80009a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a6:	4a57      	ldr	r2, [pc, #348]	; (8000b04 <SAI_MspInit+0x4e4>)
 80009a8:	f043 0310 	orr.w	r3, r3, #16
 80009ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009b0:	4b54      	ldr	r3, [pc, #336]	; (8000b04 <SAI_MspInit+0x4e4>)
 80009b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b6:	f003 0310 	and.w	r3, r3, #16
 80009ba:	617b      	str	r3, [r7, #20]
 80009bc:	697b      	ldr	r3, [r7, #20]
    AUDIO_IN_SAI_PDMx_DATA_IN_ENABLE();
 80009be:	4b51      	ldr	r3, [pc, #324]	; (8000b04 <SAI_MspInit+0x4e4>)
 80009c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c4:	4a4f      	ldr	r2, [pc, #316]	; (8000b04 <SAI_MspInit+0x4e4>)
 80009c6:	f043 0304 	orr.w	r3, r3, #4
 80009ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009ce:	4b4d      	ldr	r3, [pc, #308]	; (8000b04 <SAI_MspInit+0x4e4>)
 80009d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d4:	f003 0304 	and.w	r3, r3, #4
 80009d8:	613b      	str	r3, [r7, #16]
 80009da:	693b      	ldr	r3, [r7, #16]

    gpio_init_structure.Pin = AUDIO_IN_SAI_PDMx_CLK_IN_PIN;
 80009dc:	2304      	movs	r3, #4
 80009de:	647b      	str	r3, [r7, #68]	; 0x44
    gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80009e0:	2302      	movs	r3, #2
 80009e2:	64bb      	str	r3, [r7, #72]	; 0x48
    gpio_init_structure.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	64fb      	str	r3, [r7, #76]	; 0x4c
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80009e8:	2302      	movs	r3, #2
 80009ea:	653b      	str	r3, [r7, #80]	; 0x50
    gpio_init_structure.Alternate = AUDIO_IN_SAI_PDMx_DATA_CLK_AF;
 80009ec:	230a      	movs	r3, #10
 80009ee:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(AUDIO_IN_SAI_PDMx_CLK_IN_PORT, &gpio_init_structure);
 80009f0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80009f4:	4619      	mov	r1, r3
 80009f6:	4844      	ldr	r0, [pc, #272]	; (8000b08 <SAI_MspInit+0x4e8>)
 80009f8:	f004 ff1e 	bl	8005838 <HAL_GPIO_Init>

    gpio_init_structure.Pull = GPIO_PULLUP;
 80009fc:	2301      	movs	r3, #1
 80009fe:	64fb      	str	r3, [r7, #76]	; 0x4c
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000a00:	2301      	movs	r3, #1
 8000a02:	653b      	str	r3, [r7, #80]	; 0x50
    gpio_init_structure.Pin = AUDIO_IN_SAI_PDMx_DATA_IN_PIN;
 8000a04:	2302      	movs	r3, #2
 8000a06:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(AUDIO_IN_SAI_PDMx_DATA_IN_PORT, &gpio_init_structure);
 8000a08:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	483f      	ldr	r0, [pc, #252]	; (8000b0c <SAI_MspInit+0x4ec>)
 8000a10:	f004 ff12 	bl	8005838 <HAL_GPIO_Init>

    AUDIO_IN_SAI_PDMx_FS_SCK_ENABLE();
 8000a14:	4b3b      	ldr	r3, [pc, #236]	; (8000b04 <SAI_MspInit+0x4e4>)
 8000a16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a1a:	4a3a      	ldr	r2, [pc, #232]	; (8000b04 <SAI_MspInit+0x4e4>)
 8000a1c:	f043 0310 	orr.w	r3, r3, #16
 8000a20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a24:	4b37      	ldr	r3, [pc, #220]	; (8000b04 <SAI_MspInit+0x4e4>)
 8000a26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a2a:	f003 0310 	and.w	r3, r3, #16
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	68fb      	ldr	r3, [r7, #12]

    /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
    gpio_init_structure.Pin = AUDIO_IN_SAI_PDMx_FS_PIN | AUDIO_IN_SAI_PDMx_SCK_PIN;
 8000a32:	2330      	movs	r3, #48	; 0x30
 8000a34:	647b      	str	r3, [r7, #68]	; 0x44
    gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8000a36:	2302      	movs	r3, #2
 8000a38:	64bb      	str	r3, [r7, #72]	; 0x48
    gpio_init_structure.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	64fb      	str	r3, [r7, #76]	; 0x4c
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	653b      	str	r3, [r7, #80]	; 0x50
    gpio_init_structure.Alternate = AUDIO_IN_SAI_PDMx_FS_SCK_AF;
 8000a42:	2308      	movs	r3, #8
 8000a44:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(AUDIO_IN_SAI_PDMx_FS_SCK_GPIO_PORT, &gpio_init_structure);
 8000a46:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	482e      	ldr	r0, [pc, #184]	; (8000b08 <SAI_MspInit+0x4e8>)
 8000a4e:	f004 fef3 	bl	8005838 <HAL_GPIO_Init>

    /* Enable the DMA clock */
    AUDIO_IN_SAI_PDMx_DMAx_CLK_ENABLE();
 8000a52:	4b2c      	ldr	r3, [pc, #176]	; (8000b04 <SAI_MspInit+0x4e4>)
 8000a54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a58:	4a2a      	ldr	r2, [pc, #168]	; (8000b04 <SAI_MspInit+0x4e4>)
 8000a5a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a62:	4b28      	ldr	r3, [pc, #160]	; (8000b04 <SAI_MspInit+0x4e4>)
 8000a64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a6c:	60bb      	str	r3, [r7, #8]
 8000a6e:	68bb      	ldr	r3, [r7, #8]

    /* Configure the hdma_sai_rx handle parameters */
    hdma_sai_rx.Init.Request             = AUDIO_IN_SAI_PDMx_DMAx_REQUEST;
 8000a70:	4b22      	ldr	r3, [pc, #136]	; (8000afc <SAI_MspInit+0x4dc>)
 8000a72:	220f      	movs	r2, #15
 8000a74:	605a      	str	r2, [r3, #4]
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8000a76:	4b21      	ldr	r3, [pc, #132]	; (8000afc <SAI_MspInit+0x4dc>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	609a      	str	r2, [r3, #8]
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8000a7c:	4b1f      	ldr	r3, [pc, #124]	; (8000afc <SAI_MspInit+0x4dc>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	60da      	str	r2, [r3, #12]
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8000a82:	4b1e      	ldr	r3, [pc, #120]	; (8000afc <SAI_MspInit+0x4dc>)
 8000a84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a88:	611a      	str	r2, [r3, #16]
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAI_PDMx_DMAx_PERIPH_DATA_SIZE;
 8000a8a:	4b1c      	ldr	r3, [pc, #112]	; (8000afc <SAI_MspInit+0x4dc>)
 8000a8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a90:	615a      	str	r2, [r3, #20]
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAI_PDMx_DMAx_MEM_DATA_SIZE;
 8000a92:	4b1a      	ldr	r3, [pc, #104]	; (8000afc <SAI_MspInit+0x4dc>)
 8000a94:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a98:	619a      	str	r2, [r3, #24]
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 8000a9a:	4b18      	ldr	r3, [pc, #96]	; (8000afc <SAI_MspInit+0x4dc>)
 8000a9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000aa0:	61da      	str	r2, [r3, #28]
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8000aa2:	4b16      	ldr	r3, [pc, #88]	; (8000afc <SAI_MspInit+0x4dc>)
 8000aa4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000aa8:	621a      	str	r2, [r3, #32]
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8000aaa:	4b14      	ldr	r3, [pc, #80]	; (8000afc <SAI_MspInit+0x4dc>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8000ab0:	4b12      	ldr	r3, [pc, #72]	; (8000afc <SAI_MspInit+0x4dc>)
 8000ab2:	2203      	movs	r2, #3
 8000ab4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8000ab6:	4b11      	ldr	r3, [pc, #68]	; (8000afc <SAI_MspInit+0x4dc>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 8000abc:	4b0f      	ldr	r3, [pc, #60]	; (8000afc <SAI_MspInit+0x4dc>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	631a      	str	r2, [r3, #48]	; 0x30

    hdma_sai_rx.Instance = AUDIO_IN_SAI_PDMx_DMAx_STREAM;
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <SAI_MspInit+0x4dc>)
 8000ac4:	4a12      	ldr	r2, [pc, #72]	; (8000b10 <SAI_MspInit+0x4f0>)
 8000ac6:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	4a0c      	ldr	r2, [pc, #48]	; (8000afc <SAI_MspInit+0x4dc>)
 8000acc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8000ad0:	4a0a      	ldr	r2, [pc, #40]	; (8000afc <SAI_MspInit+0x4dc>)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	6393      	str	r3, [r2, #56]	; 0x38

    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_rx);
 8000ad6:	4809      	ldr	r0, [pc, #36]	; (8000afc <SAI_MspInit+0x4dc>)
 8000ad8:	f002 f8f6 	bl	8002cc8 <HAL_DMA_DeInit>

    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_rx);
 8000adc:	4807      	ldr	r0, [pc, #28]	; (8000afc <SAI_MspInit+0x4dc>)
 8000ade:	f001 fd99 	bl	8002614 <HAL_DMA_Init>

    /* SAI DMA IRQ Channel configuration */
    HAL_NVIC_SetPriority(AUDIO_IN_SAI_PDMx_DMAx_IRQ, BSP_AUDIO_IN_IT_PRIORITY, 0);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	210f      	movs	r1, #15
 8000ae6:	2082      	movs	r0, #130	; 0x82
 8000ae8:	f001 fa35 	bl	8001f56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AUDIO_IN_SAI_PDMx_DMAx_IRQ);
 8000aec:	2082      	movs	r0, #130	; 0x82
 8000aee:	f001 fa4c 	bl	8001f8a <HAL_NVIC_EnableIRQ>
  }
}
 8000af2:	bf00      	nop
 8000af4:	3758      	adds	r7, #88	; 0x58
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	24000968 	.word	0x24000968
 8000b00:	58005404 	.word	0x58005404
 8000b04:	58024400 	.word	0x58024400
 8000b08:	58021000 	.word	0x58021000
 8000b0c:	58020800 	.word	0x58020800
 8000b10:	5802541c 	.word	0x5802541c

08000b14 <BSP_AUDIO_IN_Init>:
  * @param  Instance  Audio IN instance: 0 for SAI, 1 for SAI PDM and 2 for DFSDM
  * @param  AudioInit Init structure
  * @retval BSP status
  */
int32_t BSP_AUDIO_IN_Init(uint32_t Instance, BSP_AUDIO_Init_t* AudioInit)
{
 8000b14:	b590      	push	{r4, r7, lr}
 8000b16:	b0a9      	sub	sp, #164	; 0xa4
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
 8000b1c:	6039      	str	r1, [r7, #0]
  uint32_t i;
  int32_t ret = BSP_ERROR_NONE;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if(Instance >= AUDIO_IN_INSTANCES_NBR)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2b02      	cmp	r3, #2
 8000b28:	d904      	bls.n	8000b34 <BSP_AUDIO_IN_Init+0x20>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000b2a:	f06f 0301 	mvn.w	r3, #1
 8000b2e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000b32:	e2c8      	b.n	80010c6 <BSP_AUDIO_IN_Init+0x5b2>
  }
  else
  {
    /* Store the audio record context */
    Audio_In_Ctx[PDM].Device          = AudioInit->Device;
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4aa9      	ldr	r2, [pc, #676]	; (8000de0 <BSP_AUDIO_IN_Init+0x2cc>)
 8000b3a:	6353      	str	r3, [r2, #52]	; 0x34
    Audio_In_Ctx[PDM].ChannelsNbr     = AudioInit->ChannelsNbr;
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	68db      	ldr	r3, [r3, #12]
 8000b40:	4aa7      	ldr	r2, [pc, #668]	; (8000de0 <BSP_AUDIO_IN_Init+0x2cc>)
 8000b42:	6413      	str	r3, [r2, #64]	; 0x40
    Audio_In_Ctx[PDM].SampleRate      = AudioInit->SampleRate;
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	4aa5      	ldr	r2, [pc, #660]	; (8000de0 <BSP_AUDIO_IN_Init+0x2cc>)
 8000b4a:	6393      	str	r3, [r2, #56]	; 0x38
    Audio_In_Ctx[PDM].BitsPerSample   = AudioInit->BitsPerSample;
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	689b      	ldr	r3, [r3, #8]
 8000b50:	4aa3      	ldr	r2, [pc, #652]	; (8000de0 <BSP_AUDIO_IN_Init+0x2cc>)
 8000b52:	63d3      	str	r3, [r2, #60]	; 0x3c
    Audio_In_Ctx[PDM].Volume          = AudioInit->Volume;
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	691b      	ldr	r3, [r3, #16]
 8000b58:	4aa1      	ldr	r2, [pc, #644]	; (8000de0 <BSP_AUDIO_IN_Init+0x2cc>)
 8000b5a:	6513      	str	r3, [r2, #80]	; 0x50
    Audio_In_Ctx[PDM].State           = AUDIO_IN_STATE_RESET;
 8000b5c:	4ba0      	ldr	r3, [pc, #640]	; (8000de0 <BSP_AUDIO_IN_Init+0x2cc>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	655a      	str	r2, [r3, #84]	; 0x54

    if(Instance == 0U)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	f040 80a8 	bne.w	8000cba <BSP_AUDIO_IN_Init+0x1a6>
    {
      /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */
      if(MX_SAI1_ClockConfig(&haudio_in_sai[PDM], AudioInit->SampleRate) != HAL_OK)
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	4619      	mov	r1, r3
 8000b70:	489c      	ldr	r0, [pc, #624]	; (8000de4 <BSP_AUDIO_IN_Init+0x2d0>)
 8000b72:	f7ff fcf7 	bl	8000564 <MX_SAI1_ClockConfig>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d004      	beq.n	8000b86 <BSP_AUDIO_IN_Init+0x72>
      {
        ret = BSP_ERROR_CLOCK_FAILURE;
 8000b7c:	f06f 0308 	mvn.w	r3, #8
 8000b80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000b84:	e29c      	b.n	80010c0 <BSP_AUDIO_IN_Init+0x5ac>
      }
      else
      {
        haudio_in_sai[PDM].Instance    = AUDIO_IN_SAIx;
 8000b86:	4b98      	ldr	r3, [pc, #608]	; (8000de8 <BSP_AUDIO_IN_Init+0x2d4>)
 8000b88:	4a98      	ldr	r2, [pc, #608]	; (8000dec <BSP_AUDIO_IN_Init+0x2d8>)
 8000b8a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        haudio_out_sai.Instance   = AUDIO_OUT_SAIx;
 8000b8e:	4b98      	ldr	r3, [pc, #608]	; (8000df0 <BSP_AUDIO_IN_Init+0x2dc>)
 8000b90:	4a98      	ldr	r2, [pc, #608]	; (8000df4 <BSP_AUDIO_IN_Init+0x2e0>)
 8000b92:	601a      	str	r2, [r3, #0]
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
          }
        }
#else
        SAI_MspInit(&haudio_in_sai[PDM]);
 8000b94:	4893      	ldr	r0, [pc, #588]	; (8000de4 <BSP_AUDIO_IN_Init+0x2d0>)
 8000b96:	f7ff fd43 	bl	8000620 <SAI_MspInit>
#endif /* (USE_HAL_SAI_REGISTER_CALLBACKS == 1) */
        if (ret == BSP_ERROR_NONE)
 8000b9a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	f040 828e 	bne.w	80010c0 <BSP_AUDIO_IN_Init+0x5ac>
        {
          MX_SAI_Config mx_config;

          /* Prepare haudio_in_sai handle */
          mx_config.AudioFrequency        = Audio_In_Ctx[PDM].SampleRate;
 8000ba4:	4b8e      	ldr	r3, [pc, #568]	; (8000de0 <BSP_AUDIO_IN_Init+0x2cc>)
 8000ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ba8:	60bb      	str	r3, [r7, #8]
          mx_config.AudioMode             = SAI_MODESLAVE_RX;
 8000baa:	2303      	movs	r3, #3
 8000bac:	60fb      	str	r3, [r7, #12]
          mx_config.ClockStrobing         = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61bb      	str	r3, [r7, #24]
          mx_config.MonoStereoMode        = (AudioInit->ChannelsNbr == 1U) ? SAI_MONOMODE : SAI_STEREOMODE;
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	68db      	ldr	r3, [r3, #12]
 8000bb6:	2b01      	cmp	r3, #1
 8000bb8:	d102      	bne.n	8000bc0 <BSP_AUDIO_IN_Init+0xac>
 8000bba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bbe:	e000      	b.n	8000bc2 <BSP_AUDIO_IN_Init+0xae>
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	617b      	str	r3, [r7, #20]
          mx_config.DataSize              = SAI_DATASIZE_16;
 8000bc4:	2380      	movs	r3, #128	; 0x80
 8000bc6:	613b      	str	r3, [r7, #16]
          mx_config.FrameLength           = 128;
 8000bc8:	2380      	movs	r3, #128	; 0x80
 8000bca:	62bb      	str	r3, [r7, #40]	; 0x28
          mx_config.ActiveFrameLength     = 64;
 8000bcc:	2340      	movs	r3, #64	; 0x40
 8000bce:	62fb      	str	r3, [r7, #44]	; 0x2c
          mx_config.OutputDrive           = SAI_OUTPUTDRIVE_ENABLE;
 8000bd0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bd4:	623b      	str	r3, [r7, #32]
          mx_config.Synchro               = SAI_SYNCHRONOUS;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	61fb      	str	r3, [r7, #28]
          mx_config.SynchroExt            = SAI_SYNCEXT_DISABLE;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	627b      	str	r3, [r7, #36]	; 0x24
          mx_config.SlotActive            = SAI_SLOTACTIVE_0 | SAI_SLOTACTIVE_1;
 8000bde:	2303      	movs	r3, #3
 8000be0:	633b      	str	r3, [r7, #48]	; 0x30

          if(MX_SAI1_Block_A_Init(&haudio_in_sai[PDM], &mx_config) != HAL_OK)
 8000be2:	f107 0308 	add.w	r3, r7, #8
 8000be6:	4619      	mov	r1, r3
 8000be8:	487e      	ldr	r0, [pc, #504]	; (8000de4 <BSP_AUDIO_IN_Init+0x2d0>)
 8000bea:	f000 fb65 	bl	80012b8 <MX_SAI1_Block_A_Init>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d004      	beq.n	8000bfe <BSP_AUDIO_IN_Init+0xea>
          {
            /* Return BSP_ERROR_PERIPH_FAILURE when operations are not correctly done */
            ret = BSP_ERROR_PERIPH_FAILURE;
 8000bf4:	f06f 0303 	mvn.w	r3, #3
 8000bf8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000bfc:	e010      	b.n	8000c20 <BSP_AUDIO_IN_Init+0x10c>
          }
          else
          {
            /* Prepare haudio_out_sai handle */
            mx_config.AudioMode         = SAI_MODEMASTER_TX;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	60fb      	str	r3, [r7, #12]
            mx_config.Synchro           = SAI_ASYNCHRONOUS;
 8000c02:	2300      	movs	r3, #0
 8000c04:	61fb      	str	r3, [r7, #28]

            if(MX_SAI1_Block_B_Init(&haudio_out_sai, &mx_config) != HAL_OK)
 8000c06:	f107 0308 	add.w	r3, r7, #8
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4878      	ldr	r0, [pc, #480]	; (8000df0 <BSP_AUDIO_IN_Init+0x2dc>)
 8000c0e:	f7ff fc19 	bl	8000444 <MX_SAI1_Block_B_Init>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d003      	beq.n	8000c20 <BSP_AUDIO_IN_Init+0x10c>
            {
              /* Return BSP_ERROR_PERIPH_FAILURE when operations are not correctly done */
              ret = BSP_ERROR_PERIPH_FAILURE;
 8000c18:	f06f 0303 	mvn.w	r3, #3
 8000c1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
              }
            }
          }
#endif /* (USE_HAL_SAI_REGISTER_CALLBACKS == 1) */
#if (USE_AUDIO_CODEC_WM8994 == 1)
          if (ret == BSP_ERROR_NONE)
 8000c20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	f040 824b 	bne.w	80010c0 <BSP_AUDIO_IN_Init+0x5ac>
          {
            WM8994_Init_t codec_init;

            /* Fill codec_init structure */
            codec_init.OutputDevice = (Audio_Out_Ctx[0].State == AUDIO_OUT_STATE_RESET) ? WM8994_OUT_NONE : WM8994_OUT_HEADPHONE;
 8000c2a:	4b73      	ldr	r3, [pc, #460]	; (8000df8 <BSP_AUDIO_IN_Init+0x2e4>)
 8000c2c:	69db      	ldr	r3, [r3, #28]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d101      	bne.n	8000c36 <BSP_AUDIO_IN_Init+0x122>
 8000c32:	2300      	movs	r3, #0
 8000c34:	e000      	b.n	8000c38 <BSP_AUDIO_IN_Init+0x124>
 8000c36:	2302      	movs	r3, #2
 8000c38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            codec_init.Frequency    = AudioInit->SampleRate;
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
            codec_init.Resolution   = (AudioInit->BitsPerSample == AUDIO_RESOLUTION_32B) ? WM8994_RESOLUTION_32b : WM8994_RESOLUTION_16b;
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	689b      	ldr	r3, [r3, #8]
 8000c48:	2b20      	cmp	r3, #32
 8000c4a:	d101      	bne.n	8000c50 <BSP_AUDIO_IN_Init+0x13c>
 8000c4c:	2303      	movs	r3, #3
 8000c4e:	e000      	b.n	8000c52 <BSP_AUDIO_IN_Init+0x13e>
 8000c50:	2300      	movs	r3, #0
 8000c52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
            codec_init.InputDevice  = (AudioInit->Device == AUDIO_IN_DEVICE_ANALOG_MIC) ? WM8994_IN_LINE1 : WM8994_IN_MIC2;
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d101      	bne.n	8000c62 <BSP_AUDIO_IN_Init+0x14e>
 8000c5e:	2303      	movs	r3, #3
 8000c60:	e000      	b.n	8000c64 <BSP_AUDIO_IN_Init+0x150>
 8000c62:	2302      	movs	r3, #2
 8000c64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

            /* Convert volume before sending to the codec */
            codec_init.Volume       = VOLUME_IN_CONVERT(AudioInit->Volume);
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	691b      	ldr	r3, [r3, #16]
 8000c6c:	2b63      	cmp	r3, #99	; 0x63
 8000c6e:	d80c      	bhi.n	8000c8a <BSP_AUDIO_IN_Init+0x176>
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	691a      	ldr	r2, [r3, #16]
 8000c74:	4613      	mov	r3, r2
 8000c76:	011b      	lsls	r3, r3, #4
 8000c78:	1a9b      	subs	r3, r3, r2
 8000c7a:	011b      	lsls	r3, r3, #4
 8000c7c:	1a9b      	subs	r3, r3, r2
 8000c7e:	4a5f      	ldr	r2, [pc, #380]	; (8000dfc <BSP_AUDIO_IN_Init+0x2e8>)
 8000c80:	fba2 2303 	umull	r2, r3, r2, r3
 8000c84:	095b      	lsrs	r3, r3, #5
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	e000      	b.n	8000c8c <BSP_AUDIO_IN_Init+0x178>
 8000c8a:	23ef      	movs	r3, #239	; 0xef
 8000c8c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
            /* Initialize the codec internal registers */
            if(Audio_Drv->Init(Audio_CompObj, &codec_init) < 0)
 8000c90:	4b5b      	ldr	r3, [pc, #364]	; (8000e00 <BSP_AUDIO_IN_Init+0x2ec>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4a5b      	ldr	r2, [pc, #364]	; (8000e04 <BSP_AUDIO_IN_Init+0x2f0>)
 8000c98:	6812      	ldr	r2, [r2, #0]
 8000c9a:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8000c9e:	4610      	mov	r0, r2
 8000ca0:	4798      	blx	r3
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	da04      	bge.n	8000cb2 <BSP_AUDIO_IN_Init+0x19e>
            {
              ret = BSP_ERROR_COMPONENT_FAILURE;
 8000ca8:	f06f 0304 	mvn.w	r3, #4
 8000cac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000cb0:	e206      	b.n	80010c0 <BSP_AUDIO_IN_Init+0x5ac>
            }
            else
            {
              /* Update audio in context state */
              Audio_In_Ctx[PDM].State = AUDIO_IN_STATE_STOP;
 8000cb2:	4b4b      	ldr	r3, [pc, #300]	; (8000de0 <BSP_AUDIO_IN_Init+0x2cc>)
 8000cb4:	2202      	movs	r2, #2
 8000cb6:	655a      	str	r2, [r3, #84]	; 0x54
 8000cb8:	e202      	b.n	80010c0 <BSP_AUDIO_IN_Init+0x5ac>
          }
#endif  /*USE_AUDIO_CODEC_WM8994 == 1)*/
        }
      }
    }
    else if(Instance == 1)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d14f      	bne.n	8000d60 <BSP_AUDIO_IN_Init+0x24c>
    {
      if(Audio_In_Ctx[PDM].Device != AUDIO_IN_DEVICE_DIGITAL_MIC1)
 8000cc0:	4b47      	ldr	r3, [pc, #284]	; (8000de0 <BSP_AUDIO_IN_Init+0x2cc>)
 8000cc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cc4:	2b10      	cmp	r3, #16
 8000cc6:	d004      	beq.n	8000cd2 <BSP_AUDIO_IN_Init+0x1be>
      {
        ret = BSP_ERROR_WRONG_PARAM;
 8000cc8:	f06f 0301 	mvn.w	r3, #1
 8000ccc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000cd0:	e1f6      	b.n	80010c0 <BSP_AUDIO_IN_Init+0x5ac>
      }
      else
      {
      /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */
      if(MX_SAI4_ClockConfig(&haudio_in_sai[PDM], AudioInit->SampleRate) != HAL_OK)
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4842      	ldr	r0, [pc, #264]	; (8000de4 <BSP_AUDIO_IN_Init+0x2d0>)
 8000cda:	f000 fa29 	bl	8001130 <MX_SAI4_ClockConfig>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d002      	beq.n	8000cea <BSP_AUDIO_IN_Init+0x1d6>
      {
        return BSP_ERROR_CLOCK_FAILURE;
 8000ce4:	f06f 0308 	mvn.w	r3, #8
 8000ce8:	e1ef      	b.n	80010ca <BSP_AUDIO_IN_Init+0x5b6>
      }
      haudio_in_sai[PDM].Instance = AUDIO_IN_SAI_PDMx;
 8000cea:	4b3f      	ldr	r3, [pc, #252]	; (8000de8 <BSP_AUDIO_IN_Init+0x2d4>)
 8000cec:	4a46      	ldr	r2, [pc, #280]	; (8000e08 <BSP_AUDIO_IN_Init+0x2f4>)
 8000cee:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        {
          return BSP_ERROR_PERIPH_FAILURE;
        }
      }
#else
      SAI_MspInit(&haudio_in_sai[PDM]);
 8000cf2:	483c      	ldr	r0, [pc, #240]	; (8000de4 <BSP_AUDIO_IN_Init+0x2d0>)
 8000cf4:	f7ff fc94 	bl	8000620 <SAI_MspInit>
#endif /* (USE_HAL_SAI_REGISTER_CALLBACKS == 1U) */
      MX_SAI_Config mx_config;

      /* Prepare haudio_in_sai handle */
      mx_config.MonoStereoMode    = SAI_STEREOMODE;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	617b      	str	r3, [r7, #20]
      mx_config.DataSize          = SAI_DATASIZE_16;
 8000cfc:	2380      	movs	r3, #128	; 0x80
 8000cfe:	613b      	str	r3, [r7, #16]
      mx_config.FrameLength       = 16;
 8000d00:	2310      	movs	r3, #16
 8000d02:	62bb      	str	r3, [r7, #40]	; 0x28
      mx_config.ActiveFrameLength = 1;
 8000d04:	2301      	movs	r3, #1
 8000d06:	62fb      	str	r3, [r7, #44]	; 0x2c
      mx_config.OutputDrive       = SAI_OUTPUTDRIVE_DISABLE;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	623b      	str	r3, [r7, #32]
      mx_config.SlotActive        = SAI_SLOTACTIVE_0;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	633b      	str	r3, [r7, #48]	; 0x30
      mx_config.AudioFrequency    = Audio_In_Ctx[PDM].SampleRate*8;
 8000d10:	4b33      	ldr	r3, [pc, #204]	; (8000de0 <BSP_AUDIO_IN_Init+0x2cc>)
 8000d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d14:	00db      	lsls	r3, r3, #3
 8000d16:	60bb      	str	r3, [r7, #8]
      mx_config.AudioMode         = SAI_MODEMASTER_RX;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	60fb      	str	r3, [r7, #12]
      mx_config.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	61bb      	str	r3, [r7, #24]
      mx_config.Synchro           = SAI_ASYNCHRONOUS;
 8000d20:	2300      	movs	r3, #0
 8000d22:	61fb      	str	r3, [r7, #28]
      mx_config.SynchroExt        = SAI_SYNCEXT_DISABLE;
 8000d24:	2300      	movs	r3, #0
 8000d26:	627b      	str	r3, [r7, #36]	; 0x24

      if(MX_SAI4_Block_A_Init(&haudio_in_sai[PDM], &mx_config) != HAL_OK)
 8000d28:	f107 0308 	add.w	r3, r7, #8
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	482d      	ldr	r0, [pc, #180]	; (8000de4 <BSP_AUDIO_IN_Init+0x2d0>)
 8000d30:	f000 fb4a 	bl	80013c8 <MX_SAI4_Block_A_Init>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d002      	beq.n	8000d40 <BSP_AUDIO_IN_Init+0x22c>
      {
        /* Return BSP_ERROR_PERIPH_FAILURE when operations are not correctly done */
        return BSP_ERROR_PERIPH_FAILURE;
 8000d3a:	f06f 0303 	mvn.w	r3, #3
 8000d3e:	e1c4      	b.n	80010ca <BSP_AUDIO_IN_Init+0x5b6>
      {
        return BSP_ERROR_PERIPH_FAILURE;
      }
#endif /* (USE_HAL_SAI_REGISTER_CALLBACKS == 1U) */
#if (USE_BSP_PDM_LIB_FEATURE > 0U)
      if(BSP_AUDIO_IN_PDMToPCM_Init(Instance, AudioInit->SampleRate, Audio_In_Ctx[PDM].ChannelsNbr, Audio_In_Ctx[PDM].ChannelsNbr) != BSP_ERROR_NONE)
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	6859      	ldr	r1, [r3, #4]
 8000d44:	4b26      	ldr	r3, [pc, #152]	; (8000de0 <BSP_AUDIO_IN_Init+0x2cc>)
 8000d46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d48:	4b25      	ldr	r3, [pc, #148]	; (8000de0 <BSP_AUDIO_IN_Init+0x2cc>)
 8000d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4c:	6878      	ldr	r0, [r7, #4]
 8000d4e:	f000 fbc1 	bl	80014d4 <BSP_AUDIO_IN_PDMToPCM_Init>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	f000 81b3 	beq.w	80010c0 <BSP_AUDIO_IN_Init+0x5ac>
      {
        return BSP_ERROR_NO_INIT;
 8000d5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d5e:	e1b4      	b.n	80010ca <BSP_AUDIO_IN_Init+0x5b6>
#endif
    }
    }
    else /* (Instance == 2U) */
    {
      DFSDM_Filter_TypeDef* FilterInstnace[DFSDM_MIC_NUMBER] = {AUDIO_DFSDMx_MIC1_FILTER, AUDIO_DFSDMx_MIC2_FILTER,AUDIO_DFSDMx_MIC3_FILTER,AUDIO_DFSDMx_MIC4_FILTER};
 8000d60:	4b2a      	ldr	r3, [pc, #168]	; (8000e0c <BSP_AUDIO_IN_Init+0x2f8>)
 8000d62:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8000d66:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      DFSDM_Channel_TypeDef* ChannelInstance[DFSDM_MIC_NUMBER] = {AUDIO_DFSDMx_MIC1_CHANNEL, AUDIO_DFSDMx_MIC2_CHANNEL,AUDIO_DFSDMx_MIC3_CHANNEL,AUDIO_DFSDMx_MIC4_CHANNEL};
 8000d6c:	4b28      	ldr	r3, [pc, #160]	; (8000e10 <BSP_AUDIO_IN_Init+0x2fc>)
 8000d6e:	f107 0464 	add.w	r4, r7, #100	; 0x64
 8000d72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      uint32_t DigitalMicPins[DFSDM_MIC_NUMBER] = {DFSDM_CHANNEL_SAME_CHANNEL_PINS, DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS, DFSDM_CHANNEL_SAME_CHANNEL_PINS, DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS};
 8000d78:	4b26      	ldr	r3, [pc, #152]	; (8000e14 <BSP_AUDIO_IN_Init+0x300>)
 8000d7a:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000d7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      uint32_t DigitalMicType[DFSDM_MIC_NUMBER] = {DFSDM_CHANNEL_SPI_RISING, DFSDM_CHANNEL_SPI_FALLING, DFSDM_CHANNEL_SPI_RISING, DFSDM_CHANNEL_SPI_FALLING};
 8000d84:	4b24      	ldr	r3, [pc, #144]	; (8000e18 <BSP_AUDIO_IN_Init+0x304>)
 8000d86:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8000d8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d8c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      uint32_t Channel4Filter[DFSDM_MIC_NUMBER] = {AUDIO_DFSDMx_MIC1_CHANNEL_FOR_FILTER, AUDIO_DFSDMx_MIC2_CHANNEL_FOR_FILTER,AUDIO_DFSDMx_MIC3_CHANNEL_FOR_FILTER,AUDIO_DFSDMx_MIC4_CHANNEL_FOR_FILTER};
 8000d90:	4b22      	ldr	r3, [pc, #136]	; (8000e1c <BSP_AUDIO_IN_Init+0x308>)
 8000d92:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8000d96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      MX_DFSDM_Config dfsdm_config;

      /* PLL clock is set depending on the AudioFreq (44.1khz vs 48khz groups) */
      if(MX_DFSDM1_ClockConfig(&haudio_in_dfsdm_channel[0], AudioInit->SampleRate) != HAL_OK)
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	4619      	mov	r1, r3
 8000da2:	481f      	ldr	r0, [pc, #124]	; (8000e20 <BSP_AUDIO_IN_Init+0x30c>)
 8000da4:	f000 f99c 	bl	80010e0 <MX_DFSDM1_ClockConfig>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d003      	beq.n	8000db6 <BSP_AUDIO_IN_Init+0x2a2>
      {
        ret = BSP_ERROR_CLOCK_FAILURE;
 8000dae:	f06f 0308 	mvn.w	r3, #8
 8000db2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
      }

      if(ret == BSP_ERROR_NONE)
 8000db6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	f040 8180 	bne.w	80010c0 <BSP_AUDIO_IN_Init+0x5ac>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
          }
        }
#else
        DFSDM_FilterMspInit(&haudio_in_dfsdm_filter[PDM]);
 8000dc0:	4818      	ldr	r0, [pc, #96]	; (8000e24 <BSP_AUDIO_IN_Init+0x310>)
 8000dc2:	f000 fd79 	bl	80018b8 <DFSDM_FilterMspInit>
        DFSDM_ChannelMspInit(&haudio_in_dfsdm_channel[PDM]);
 8000dc6:	4818      	ldr	r0, [pc, #96]	; (8000e28 <BSP_AUDIO_IN_Init+0x314>)
 8000dc8:	f000 fcd2 	bl	8001770 <DFSDM_ChannelMspInit>
#endif /* (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1) */
        if(ret == BSP_ERROR_NONE)
 8000dcc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	f040 8175 	bne.w	80010c0 <BSP_AUDIO_IN_Init+0x5ac>
        {
          for(i = 0; i < DFSDM_MIC_NUMBER; i ++)
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000ddc:	e169      	b.n	80010b2 <BSP_AUDIO_IN_Init+0x59e>
 8000dde:	bf00      	nop
 8000de0:	24000c64 	.word	0x24000c64
 8000de4:	240005d0 	.word	0x240005d0
 8000de8:	24000538 	.word	0x24000538
 8000dec:	40015804 	.word	0x40015804
 8000df0:	240004a0 	.word	0x240004a0
 8000df4:	40015824 	.word	0x40015824
 8000df8:	24000c40 	.word	0x24000c40
 8000dfc:	51eb851f 	.word	0x51eb851f
 8000e00:	24000668 	.word	0x24000668
 8000e04:	2400049c 	.word	0x2400049c
 8000e08:	58005404 	.word	0x58005404
 8000e0c:	0800c4b0 	.word	0x0800c4b0
 8000e10:	0800c4c0 	.word	0x0800c4c0
 8000e14:	0800c4d0 	.word	0x0800c4d0
 8000e18:	0800c4e0 	.word	0x0800c4e0
 8000e1c:	0800c4f0 	.word	0x0800c4f0
 8000e20:	24000a10 	.word	0x24000a10
 8000e24:	24000b44 	.word	0x24000b44
 8000e28:	24000a48 	.word	0x24000a48
          {
            dfsdm_config.FilterInstance  = FilterInstnace[i];
 8000e2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8000e36:	4413      	add	r3, r2
 8000e38:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8000e3c:	60bb      	str	r3, [r7, #8]
            dfsdm_config.ChannelInstance = ChannelInstance[i];
 8000e3e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8000e48:	4413      	add	r3, r2
 8000e4a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8000e4e:	61bb      	str	r3, [r7, #24]
            dfsdm_config.DigitalMicPins  = DigitalMicPins[i];
 8000e50:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000e54:	009b      	lsls	r3, r3, #2
 8000e56:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8000e5a:	4413      	add	r3, r2
 8000e5c:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8000e60:	61fb      	str	r3, [r7, #28]
            dfsdm_config.DigitalMicType  = DigitalMicType[i];
 8000e62:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8000e6c:	4413      	add	r3, r2
 8000e6e:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8000e72:	623b      	str	r3, [r7, #32]
            dfsdm_config.Channel4Filter  = Channel4Filter[i];
 8000e74:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8000e7e:	4413      	add	r3, r2
 8000e80:	f853 3c6c 	ldr.w	r3, [r3, #-108]
 8000e84:	627b      	str	r3, [r7, #36]	; 0x24
            dfsdm_config.RegularTrigger  = DFSDM_FILTER_SW_TRIGGER;
 8000e86:	2300      	movs	r3, #0
 8000e88:	60fb      	str	r3, [r7, #12]
            /* MIC2, MIC3 and MIC4 should be synchronized to MIC1 if it's used */
            if((i >= 1U) && (i < 4U) && ((Audio_In_Ctx[PDM].Device & AUDIO_IN_DEVICE_DIGITAL_MIC1) == AUDIO_IN_DEVICE_DIGITAL_MIC1))
 8000e8a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d00b      	beq.n	8000eaa <BSP_AUDIO_IN_Init+0x396>
 8000e92:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000e96:	2b03      	cmp	r3, #3
 8000e98:	d807      	bhi.n	8000eaa <BSP_AUDIO_IN_Init+0x396>
 8000e9a:	4b8e      	ldr	r3, [pc, #568]	; (80010d4 <BSP_AUDIO_IN_Init+0x5c0>)
 8000e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e9e:	f003 0310 	and.w	r3, r3, #16
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <BSP_AUDIO_IN_Init+0x396>
            {
              dfsdm_config.RegularTrigger = DFSDM_FILTER_SYNC_TRIGGER;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	60fb      	str	r3, [r7, #12]
            }
            dfsdm_config.SincOrder       = DFSDM_FILTER_ORDER(Audio_In_Ctx[PDM].SampleRate);
 8000eaa:	4b8a      	ldr	r3, [pc, #552]	; (80010d4 <BSP_AUDIO_IN_Init+0x5c0>)
 8000eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000eae:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8000eb2:	d036      	beq.n	8000f22 <BSP_AUDIO_IN_Init+0x40e>
 8000eb4:	4b87      	ldr	r3, [pc, #540]	; (80010d4 <BSP_AUDIO_IN_Init+0x5c0>)
 8000eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000eb8:	f642 3211 	movw	r2, #11025	; 0x2b11
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d02d      	beq.n	8000f1c <BSP_AUDIO_IN_Init+0x408>
 8000ec0:	4b84      	ldr	r3, [pc, #528]	; (80010d4 <BSP_AUDIO_IN_Init+0x5c0>)
 8000ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ec4:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8000ec8:	d025      	beq.n	8000f16 <BSP_AUDIO_IN_Init+0x402>
 8000eca:	4b82      	ldr	r3, [pc, #520]	; (80010d4 <BSP_AUDIO_IN_Init+0x5c0>)
 8000ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ece:	f245 6222 	movw	r2, #22050	; 0x5622
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d01c      	beq.n	8000f10 <BSP_AUDIO_IN_Init+0x3fc>
 8000ed6:	4b7f      	ldr	r3, [pc, #508]	; (80010d4 <BSP_AUDIO_IN_Init+0x5c0>)
 8000ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000eda:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8000ede:	d014      	beq.n	8000f0a <BSP_AUDIO_IN_Init+0x3f6>
 8000ee0:	4b7c      	ldr	r3, [pc, #496]	; (80010d4 <BSP_AUDIO_IN_Init+0x5c0>)
 8000ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ee4:	f64a 4244 	movw	r2, #44100	; 0xac44
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d00b      	beq.n	8000f04 <BSP_AUDIO_IN_Init+0x3f0>
 8000eec:	4b79      	ldr	r3, [pc, #484]	; (80010d4 <BSP_AUDIO_IN_Init+0x5c0>)
 8000eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ef0:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d102      	bne.n	8000efe <BSP_AUDIO_IN_Init+0x3ea>
 8000ef8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000efc:	e013      	b.n	8000f26 <BSP_AUDIO_IN_Init+0x412>
 8000efe:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8000f02:	e010      	b.n	8000f26 <BSP_AUDIO_IN_Init+0x412>
 8000f04:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000f08:	e00d      	b.n	8000f26 <BSP_AUDIO_IN_Init+0x412>
 8000f0a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000f0e:	e00a      	b.n	8000f26 <BSP_AUDIO_IN_Init+0x412>
 8000f10:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000f14:	e007      	b.n	8000f26 <BSP_AUDIO_IN_Init+0x412>
 8000f16:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000f1a:	e004      	b.n	8000f26 <BSP_AUDIO_IN_Init+0x412>
 8000f1c:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000f20:	e001      	b.n	8000f26 <BSP_AUDIO_IN_Init+0x412>
 8000f22:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000f26:	613b      	str	r3, [r7, #16]
            dfsdm_config.Oversampling    = DFSDM_OVER_SAMPLING(Audio_In_Ctx[PDM].SampleRate);
 8000f28:	4b6a      	ldr	r3, [pc, #424]	; (80010d4 <BSP_AUDIO_IN_Init+0x5c0>)
 8000f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f2c:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8000f30:	d030      	beq.n	8000f94 <BSP_AUDIO_IN_Init+0x480>
 8000f32:	4b68      	ldr	r3, [pc, #416]	; (80010d4 <BSP_AUDIO_IN_Init+0x5c0>)
 8000f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f36:	f642 3211 	movw	r2, #11025	; 0x2b11
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d027      	beq.n	8000f8e <BSP_AUDIO_IN_Init+0x47a>
 8000f3e:	4b65      	ldr	r3, [pc, #404]	; (80010d4 <BSP_AUDIO_IN_Init+0x5c0>)
 8000f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f42:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8000f46:	d020      	beq.n	8000f8a <BSP_AUDIO_IN_Init+0x476>
 8000f48:	4b62      	ldr	r3, [pc, #392]	; (80010d4 <BSP_AUDIO_IN_Init+0x5c0>)
 8000f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f4c:	f245 6222 	movw	r2, #22050	; 0x5622
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d018      	beq.n	8000f86 <BSP_AUDIO_IN_Init+0x472>
 8000f54:	4b5f      	ldr	r3, [pc, #380]	; (80010d4 <BSP_AUDIO_IN_Init+0x5c0>)
 8000f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f58:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8000f5c:	d011      	beq.n	8000f82 <BSP_AUDIO_IN_Init+0x46e>
 8000f5e:	4b5d      	ldr	r3, [pc, #372]	; (80010d4 <BSP_AUDIO_IN_Init+0x5c0>)
 8000f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f62:	f64a 4244 	movw	r2, #44100	; 0xac44
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d009      	beq.n	8000f7e <BSP_AUDIO_IN_Init+0x46a>
 8000f6a:	4b5a      	ldr	r3, [pc, #360]	; (80010d4 <BSP_AUDIO_IN_Init+0x5c0>)
 8000f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f6e:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d101      	bne.n	8000f7a <BSP_AUDIO_IN_Init+0x466>
 8000f76:	2320      	movs	r3, #32
 8000f78:	e00e      	b.n	8000f98 <BSP_AUDIO_IN_Init+0x484>
 8000f7a:	2310      	movs	r3, #16
 8000f7c:	e00c      	b.n	8000f98 <BSP_AUDIO_IN_Init+0x484>
 8000f7e:	2340      	movs	r3, #64	; 0x40
 8000f80:	e00a      	b.n	8000f98 <BSP_AUDIO_IN_Init+0x484>
 8000f82:	2340      	movs	r3, #64	; 0x40
 8000f84:	e008      	b.n	8000f98 <BSP_AUDIO_IN_Init+0x484>
 8000f86:	2380      	movs	r3, #128	; 0x80
 8000f88:	e006      	b.n	8000f98 <BSP_AUDIO_IN_Init+0x484>
 8000f8a:	2380      	movs	r3, #128	; 0x80
 8000f8c:	e004      	b.n	8000f98 <BSP_AUDIO_IN_Init+0x484>
 8000f8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f92:	e001      	b.n	8000f98 <BSP_AUDIO_IN_Init+0x484>
 8000f94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f98:	617b      	str	r3, [r7, #20]
            dfsdm_config.ClockDivider    = DFSDM_CLOCK_DIVIDER(Audio_In_Ctx[PDM].SampleRate);
 8000f9a:	4b4e      	ldr	r3, [pc, #312]	; (80010d4 <BSP_AUDIO_IN_Init+0x5c0>)
 8000f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f9e:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8000fa2:	d027      	beq.n	8000ff4 <BSP_AUDIO_IN_Init+0x4e0>
 8000fa4:	4b4b      	ldr	r3, [pc, #300]	; (80010d4 <BSP_AUDIO_IN_Init+0x5c0>)
 8000fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fa8:	f642 3211 	movw	r2, #11025	; 0x2b11
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d01f      	beq.n	8000ff0 <BSP_AUDIO_IN_Init+0x4dc>
 8000fb0:	4b48      	ldr	r3, [pc, #288]	; (80010d4 <BSP_AUDIO_IN_Init+0x5c0>)
 8000fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fb4:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8000fb8:	d018      	beq.n	8000fec <BSP_AUDIO_IN_Init+0x4d8>
 8000fba:	4b46      	ldr	r3, [pc, #280]	; (80010d4 <BSP_AUDIO_IN_Init+0x5c0>)
 8000fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fbe:	f245 6222 	movw	r2, #22050	; 0x5622
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d010      	beq.n	8000fe8 <BSP_AUDIO_IN_Init+0x4d4>
 8000fc6:	4b43      	ldr	r3, [pc, #268]	; (80010d4 <BSP_AUDIO_IN_Init+0x5c0>)
 8000fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fca:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8000fce:	d009      	beq.n	8000fe4 <BSP_AUDIO_IN_Init+0x4d0>
 8000fd0:	4b40      	ldr	r3, [pc, #256]	; (80010d4 <BSP_AUDIO_IN_Init+0x5c0>)
 8000fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fd4:	f64a 4244 	movw	r2, #44100	; 0xac44
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d101      	bne.n	8000fe0 <BSP_AUDIO_IN_Init+0x4cc>
 8000fdc:	2304      	movs	r3, #4
 8000fde:	e00a      	b.n	8000ff6 <BSP_AUDIO_IN_Init+0x4e2>
 8000fe0:	2320      	movs	r3, #32
 8000fe2:	e008      	b.n	8000ff6 <BSP_AUDIO_IN_Init+0x4e2>
 8000fe4:	2318      	movs	r3, #24
 8000fe6:	e006      	b.n	8000ff6 <BSP_AUDIO_IN_Init+0x4e2>
 8000fe8:	2304      	movs	r3, #4
 8000fea:	e004      	b.n	8000ff6 <BSP_AUDIO_IN_Init+0x4e2>
 8000fec:	2318      	movs	r3, #24
 8000fee:	e002      	b.n	8000ff6 <BSP_AUDIO_IN_Init+0x4e2>
 8000ff0:	2304      	movs	r3, #4
 8000ff2:	e000      	b.n	8000ff6 <BSP_AUDIO_IN_Init+0x4e2>
 8000ff4:	2318      	movs	r3, #24
 8000ff6:	62bb      	str	r3, [r7, #40]	; 0x28
            dfsdm_config.RightBitShift   = DFSDM_MIC_BIT_SHIFT(Audio_In_Ctx[PDM].SampleRate);
 8000ff8:	4b36      	ldr	r3, [pc, #216]	; (80010d4 <BSP_AUDIO_IN_Init+0x5c0>)
 8000ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ffc:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8001000:	d027      	beq.n	8001052 <BSP_AUDIO_IN_Init+0x53e>
 8001002:	4b34      	ldr	r3, [pc, #208]	; (80010d4 <BSP_AUDIO_IN_Init+0x5c0>)
 8001004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001006:	f642 3211 	movw	r2, #11025	; 0x2b11
 800100a:	4293      	cmp	r3, r2
 800100c:	d01f      	beq.n	800104e <BSP_AUDIO_IN_Init+0x53a>
 800100e:	4b31      	ldr	r3, [pc, #196]	; (80010d4 <BSP_AUDIO_IN_Init+0x5c0>)
 8001010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001012:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8001016:	d018      	beq.n	800104a <BSP_AUDIO_IN_Init+0x536>
 8001018:	4b2e      	ldr	r3, [pc, #184]	; (80010d4 <BSP_AUDIO_IN_Init+0x5c0>)
 800101a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800101c:	f245 6222 	movw	r2, #22050	; 0x5622
 8001020:	4293      	cmp	r3, r2
 8001022:	d010      	beq.n	8001046 <BSP_AUDIO_IN_Init+0x532>
 8001024:	4b2b      	ldr	r3, [pc, #172]	; (80010d4 <BSP_AUDIO_IN_Init+0x5c0>)
 8001026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001028:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 800102c:	d009      	beq.n	8001042 <BSP_AUDIO_IN_Init+0x52e>
 800102e:	4b29      	ldr	r3, [pc, #164]	; (80010d4 <BSP_AUDIO_IN_Init+0x5c0>)
 8001030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001032:	f64a 4244 	movw	r2, #44100	; 0xac44
 8001036:	4293      	cmp	r3, r2
 8001038:	d101      	bne.n	800103e <BSP_AUDIO_IN_Init+0x52a>
 800103a:	2300      	movs	r3, #0
 800103c:	e00a      	b.n	8001054 <BSP_AUDIO_IN_Init+0x540>
 800103e:	2302      	movs	r3, #2
 8001040:	e008      	b.n	8001054 <BSP_AUDIO_IN_Init+0x540>
 8001042:	2306      	movs	r3, #6
 8001044:	e006      	b.n	8001054 <BSP_AUDIO_IN_Init+0x540>
 8001046:	2303      	movs	r3, #3
 8001048:	e004      	b.n	8001054 <BSP_AUDIO_IN_Init+0x540>
 800104a:	2303      	movs	r3, #3
 800104c:	e002      	b.n	8001054 <BSP_AUDIO_IN_Init+0x540>
 800104e:	2306      	movs	r3, #6
 8001050:	e000      	b.n	8001054 <BSP_AUDIO_IN_Init+0x540>
 8001052:	2305      	movs	r3, #5
 8001054:	62fb      	str	r3, [r7, #44]	; 0x2c

            if(((AudioInit->Device >> i) & AUDIO_IN_DEVICE_DIGITAL_MIC1) == AUDIO_IN_DEVICE_DIGITAL_MIC1)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800105e:	fa22 f303 	lsr.w	r3, r2, r3
 8001062:	f003 0310 	and.w	r3, r3, #16
 8001066:	2b00      	cmp	r3, #0
 8001068:	d01a      	beq.n	80010a0 <BSP_AUDIO_IN_Init+0x58c>
            {
              /* Default configuration of DFSDM filters and channels */
              if(MX_DFSDM1_Init(&haudio_in_dfsdm_filter[i], &haudio_in_dfsdm_channel[i], &dfsdm_config) != HAL_OK)
 800106a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800106e:	2254      	movs	r2, #84	; 0x54
 8001070:	fb02 f303 	mul.w	r3, r2, r3
 8001074:	4a18      	ldr	r2, [pc, #96]	; (80010d8 <BSP_AUDIO_IN_Init+0x5c4>)
 8001076:	1898      	adds	r0, r3, r2
 8001078:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800107c:	4613      	mov	r3, r2
 800107e:	00db      	lsls	r3, r3, #3
 8001080:	1a9b      	subs	r3, r3, r2
 8001082:	00db      	lsls	r3, r3, #3
 8001084:	4a15      	ldr	r2, [pc, #84]	; (80010dc <BSP_AUDIO_IN_Init+0x5c8>)
 8001086:	4413      	add	r3, r2
 8001088:	f107 0208 	add.w	r2, r7, #8
 800108c:	4619      	mov	r1, r3
 800108e:	f000 f894 	bl	80011ba <MX_DFSDM1_Init>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d003      	beq.n	80010a0 <BSP_AUDIO_IN_Init+0x58c>
              {
                /* Return BSP_ERROR_PERIPH_FAILURE when operations are not correctly done */
                ret = BSP_ERROR_PERIPH_FAILURE;
 8001098:	f06f 0303 	mvn.w	r3, #3
 800109c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                  ret = BSP_ERROR_PERIPH_FAILURE;
                }
              }
#endif /* (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1) */
            }
            if(ret != BSP_ERROR_NONE)
 80010a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d10a      	bne.n	80010be <BSP_AUDIO_IN_Init+0x5aa>
          for(i = 0; i < DFSDM_MIC_NUMBER; i ++)
 80010a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80010ac:	3301      	adds	r3, #1
 80010ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80010b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80010b6:	2b03      	cmp	r3, #3
 80010b8:	f67f aeb8 	bls.w	8000e2c <BSP_AUDIO_IN_Init+0x318>
 80010bc:	e000      	b.n	80010c0 <BSP_AUDIO_IN_Init+0x5ac>
            {
              break;
 80010be:	bf00      	nop
        }
      }
    }

    /* Update BSP AUDIO IN state */
    Audio_In_Ctx[PDM].State = AUDIO_IN_STATE_STOP;
 80010c0:	4b04      	ldr	r3, [pc, #16]	; (80010d4 <BSP_AUDIO_IN_Init+0x5c0>)
 80010c2:	2202      	movs	r2, #2
 80010c4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Return BSP status */
  return ret;
 80010c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	37a4      	adds	r7, #164	; 0xa4
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd90      	pop	{r4, r7, pc}
 80010d2:	bf00      	nop
 80010d4:	24000c64 	.word	0x24000c64
 80010d8:	24000af0 	.word	0x24000af0
 80010dc:	24000a10 	.word	0x24000a10

080010e0 <MX_DFSDM1_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_IN_Init()
  *         Being __weak it can be overwritten by the application
  * @retval HAL_status
  */
__weak HAL_StatusTypeDef MX_DFSDM1_ClockConfig(DFSDM_Channel_HandleTypeDef *hDfsdmChannel, uint32_t SampleRate)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b0b0      	sub	sp, #192	; 0xc0
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hDfsdmChannel);

  HAL_StatusTypeDef ret = HAL_OK;
 80010ea:	2300      	movs	r3, #0
 80010ec:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;

  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 80010f0:	f107 0308 	add.w	r3, r7, #8
 80010f4:	4618      	mov	r0, r3
 80010f6:	f006 fbc1 	bl	800787c <HAL_RCCEx_GetPeriphCLKConfig>

  /* Configure the PLL2 according to the requested audio frequency if not already done by other instances */
  if ((Audio_Out_Ctx[0].State == AUDIO_OUT_STATE_RESET) && (Audio_In_Ctx[0].State == AUDIO_IN_STATE_RESET))
 80010fa:	4b0a      	ldr	r3, [pc, #40]	; (8001124 <MX_DFSDM1_ClockConfig+0x44>)
 80010fc:	69db      	ldr	r3, [r3, #28]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d10a      	bne.n	8001118 <MX_DFSDM1_ClockConfig+0x38>
 8001102:	4b09      	ldr	r3, [pc, #36]	; (8001128 <MX_DFSDM1_ClockConfig+0x48>)
 8001104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001106:	2b00      	cmp	r3, #0
 8001108:	d106      	bne.n	8001118 <MX_DFSDM1_ClockConfig+0x38>
  {
    ret = MX_SAI1_ClockConfig(&haudio_in_sai[0], SampleRate);
 800110a:	6839      	ldr	r1, [r7, #0]
 800110c:	4807      	ldr	r0, [pc, #28]	; (800112c <MX_DFSDM1_ClockConfig+0x4c>)
 800110e:	f7ff fa29 	bl	8000564 <MX_SAI1_ClockConfig>
 8001112:	4603      	mov	r3, r0
 8001114:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
  }

  return ret;
 8001118:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
}
 800111c:	4618      	mov	r0, r3
 800111e:	37c0      	adds	r7, #192	; 0xc0
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	24000c40 	.word	0x24000c40
 8001128:	24000c64 	.word	0x24000c64
 800112c:	24000538 	.word	0x24000538

08001130 <MX_SAI4_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SAI4_ClockConfig(SAI_HandleTypeDef *hsai, uint32_t SampleRate)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b0b0      	sub	sp, #192	; 0xc0
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsai);

  HAL_StatusTypeDef ret = HAL_OK;
 800113a:	2300      	movs	r3, #0
 800113c:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;
  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 8001140:	f107 0308 	add.w	r3, r7, #8
 8001144:	4618      	mov	r0, r3
 8001146:	f006 fb99 	bl	800787c <HAL_RCCEx_GetPeriphCLKConfig>

  /* Set the PLL configuration according to the audio frequency */
  if((SampleRate == AUDIO_FREQUENCY_11K) || (SampleRate == AUDIO_FREQUENCY_22K) || (SampleRate == AUDIO_FREQUENCY_44K))
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	f642 3211 	movw	r2, #11025	; 0x2b11
 8001150:	4293      	cmp	r3, r2
 8001152:	d009      	beq.n	8001168 <MX_SAI4_ClockConfig+0x38>
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	f245 6222 	movw	r2, #22050	; 0x5622
 800115a:	4293      	cmp	r3, r2
 800115c:	d004      	beq.n	8001168 <MX_SAI4_ClockConfig+0x38>
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	f64a 4244 	movw	r2, #44100	; 0xac44
 8001164:	4293      	cmp	r3, r2
 8001166:	d105      	bne.n	8001174 <MX_SAI4_ClockConfig+0x44>
  {
    rcc_ex_clk_init_struct.PLL2.PLL2P = 24;
 8001168:	2318      	movs	r3, #24
 800116a:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.PLL2.PLL2N = 271;
 800116c:	f240 130f 	movw	r3, #271	; 0x10f
 8001170:	613b      	str	r3, [r7, #16]
 8001172:	e004      	b.n	800117e <MX_SAI4_ClockConfig+0x4e>
  }
  else /* AUDIO_FREQUENCY_8K, AUDIO_FREQUENCY_16K, AUDIO_FREQUENCY_32K, AUDIO_FREQUENCY_48K, AUDIO_FREQUENCY_96K */
  {
    rcc_ex_clk_init_struct.PLL2.PLL2P = 7;
 8001174:	2307      	movs	r3, #7
 8001176:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.PLL2.PLL2N = 344;
 8001178:	f44f 73ac 	mov.w	r3, #344	; 0x158
 800117c:	613b      	str	r3, [r7, #16]
  }

  /* SAI clock config */
  rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI4A;
 800117e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001182:	60bb      	str	r3, [r7, #8]
  rcc_ex_clk_init_struct.Sai4AClockSelection = RCC_SAI4ACLKSOURCE_PLL2;
 8001184:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001188:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  rcc_ex_clk_init_struct.PLL2.PLL2Q = 1;
 800118c:	2301      	movs	r3, #1
 800118e:	61bb      	str	r3, [r7, #24]
  rcc_ex_clk_init_struct.PLL2.PLL2R = 1;
 8001190:	2301      	movs	r3, #1
 8001192:	61fb      	str	r3, [r7, #28]
  rcc_ex_clk_init_struct.PLL2.PLL2M = 25;
 8001194:	2319      	movs	r3, #25
 8001196:	60fb      	str	r3, [r7, #12]
  if(HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct) != HAL_OK)
 8001198:	f107 0308 	add.w	r3, r7, #8
 800119c:	4618      	mov	r0, r3
 800119e:	f005 fc73 	bl	8006a88 <HAL_RCCEx_PeriphCLKConfig>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d002      	beq.n	80011ae <MX_SAI4_ClockConfig+0x7e>
  {
    ret = HAL_ERROR;
 80011a8:	2301      	movs	r3, #1
 80011aa:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
  }

  return ret;
 80011ae:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	37c0      	adds	r7, #192	; 0xc0
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <MX_DFSDM1_Init>:
  *           1MHZ < CLK(micro) < 3.2MHZ (TYP 2.4MHZ for MP34DT01TR)
  *         - Oversampling = CLK(input DFSDM)/(Clock_Divider * AudioFreq)
  * @retval HAL_status
  */
__weak HAL_StatusTypeDef MX_DFSDM1_Init(DFSDM_Filter_HandleTypeDef *hDfsdmFilter, DFSDM_Channel_HandleTypeDef *hDfsdmChannel, MX_DFSDM_Config *MXConfig)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b084      	sub	sp, #16
 80011be:	af00      	add	r7, sp, #0
 80011c0:	60f8      	str	r0, [r7, #12]
 80011c2:	60b9      	str	r1, [r7, #8]
 80011c4:	607a      	str	r2, [r7, #4]
  /* MIC filters  initialization */
  hDfsdmFilter->Instance                          = MXConfig->FilterInstance;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	601a      	str	r2, [r3, #0]
  hDfsdmFilter->Init.RegularParam.Trigger         = MXConfig->RegularTrigger;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	685a      	ldr	r2, [r3, #4]
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	605a      	str	r2, [r3, #4]
  hDfsdmFilter->Init.RegularParam.FastMode        = ENABLE;
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	2201      	movs	r2, #1
 80011da:	721a      	strb	r2, [r3, #8]
  hDfsdmFilter->Init.RegularParam.DmaMode         = ENABLE;
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	2201      	movs	r2, #1
 80011e0:	725a      	strb	r2, [r3, #9]
  hDfsdmFilter->Init.InjectedParam.Trigger        = DFSDM_FILTER_SW_TRIGGER;
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	2200      	movs	r2, #0
 80011e6:	60da      	str	r2, [r3, #12]
  hDfsdmFilter->Init.InjectedParam.ScanMode       = DISABLE;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	2200      	movs	r2, #0
 80011ec:	741a      	strb	r2, [r3, #16]
  hDfsdmFilter->Init.InjectedParam.DmaMode        = DISABLE;
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	2200      	movs	r2, #0
 80011f2:	745a      	strb	r2, [r3, #17]
  hDfsdmFilter->Init.InjectedParam.ExtTrigger     = DFSDM_FILTER_EXT_TRIG_TIM8_TRGO;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011fa:	615a      	str	r2, [r3, #20]
  hDfsdmFilter->Init.InjectedParam.ExtTriggerEdge = DFSDM_FILTER_EXT_TRIG_BOTH_EDGES;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8001202:	619a      	str	r2, [r3, #24]
  hDfsdmFilter->Init.FilterParam.SincOrder        = MXConfig->SincOrder;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	689a      	ldr	r2, [r3, #8]
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	61da      	str	r2, [r3, #28]
  hDfsdmFilter->Init.FilterParam.Oversampling     = MXConfig->Oversampling;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	68da      	ldr	r2, [r3, #12]
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	621a      	str	r2, [r3, #32]
  hDfsdmFilter->Init.FilterParam.IntOversampling  = 1;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	2201      	movs	r2, #1
 8001218:	625a      	str	r2, [r3, #36]	; 0x24

  if(HAL_DFSDM_FilterInit(hDfsdmFilter) != HAL_OK)
 800121a:	68f8      	ldr	r0, [r7, #12]
 800121c:	f001 f882 	bl	8002324 <HAL_DFSDM_FilterInit>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_DFSDM1_Init+0x70>
  {
    return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e042      	b.n	80012b0 <MX_DFSDM1_Init+0xf6>
  }

  /* MIC channels initialization */
  hDfsdmChannel->Instance                      = MXConfig->ChannelInstance;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	691a      	ldr	r2, [r3, #16]
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	601a      	str	r2, [r3, #0]
  hDfsdmChannel->Init.OutputClock.Activation   = ENABLE;
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	2201      	movs	r2, #1
 8001236:	711a      	strb	r2, [r3, #4]
  hDfsdmChannel->Init.OutputClock.Selection    = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800123e:	609a      	str	r2, [r3, #8]
  hDfsdmChannel->Init.OutputClock.Divider      = MXConfig->ClockDivider;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6a1a      	ldr	r2, [r3, #32]
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	60da      	str	r2, [r3, #12]
  hDfsdmChannel->Init.Input.Multiplexer        = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	2200      	movs	r2, #0
 800124c:	611a      	str	r2, [r3, #16]
  hDfsdmChannel->Init.Input.DataPacking        = DFSDM_CHANNEL_STANDARD_MODE;
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	2200      	movs	r2, #0
 8001252:	615a      	str	r2, [r3, #20]
  hDfsdmChannel->Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	2204      	movs	r2, #4
 8001258:	621a      	str	r2, [r3, #32]
  hDfsdmChannel->Init.Awd.FilterOrder          = DFSDM_CHANNEL_SINC1_ORDER;
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001260:	625a      	str	r2, [r3, #36]	; 0x24
  hDfsdmChannel->Init.Awd.Oversampling         = 10;
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	220a      	movs	r2, #10
 8001266:	629a      	str	r2, [r3, #40]	; 0x28
  hDfsdmChannel->Init.Offset                   = 0;
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	2200      	movs	r2, #0
 800126c:	62da      	str	r2, [r3, #44]	; 0x2c
  hDfsdmChannel->Init.RightBitShift            = MXConfig->RightBitShift;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	631a      	str	r2, [r3, #48]	; 0x30
  hDfsdmChannel->Init.Input.Pins               = MXConfig->DigitalMicPins;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	695a      	ldr	r2, [r3, #20]
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	619a      	str	r2, [r3, #24]
  hDfsdmChannel->Init.SerialInterface.Type     = MXConfig->DigitalMicType;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	699a      	ldr	r2, [r3, #24]
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	61da      	str	r2, [r3, #28]

  if(HAL_OK != HAL_DFSDM_ChannelInit(hDfsdmChannel))
 8001286:	68b8      	ldr	r0, [r7, #8]
 8001288:	f000 ff84 	bl	8002194 <HAL_DFSDM_ChannelInit>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_DFSDM1_Init+0xdc>
  {
    return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e00c      	b.n	80012b0 <MX_DFSDM1_Init+0xf6>
  }

  /* Configure injected channel */
  if(HAL_DFSDM_FilterConfigRegChannel(hDfsdmFilter, MXConfig->Channel4Filter, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	69db      	ldr	r3, [r3, #28]
 800129a:	2201      	movs	r2, #1
 800129c:	4619      	mov	r1, r3
 800129e:	68f8      	ldr	r0, [r7, #12]
 80012a0:	f001 f926 	bl	80024f0 <HAL_DFSDM_FilterConfigRegChannel>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_DFSDM1_Init+0xf4>
  {
    return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e000      	b.n	80012b0 <MX_DFSDM1_Init+0xf6>
  }

  return HAL_OK;
 80012ae:	2300      	movs	r3, #0
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3710      	adds	r7, #16
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}

080012b8 <MX_SAI1_Block_A_Init>:
  * @param  MXConfig SAI configuration structure
  * @note   Being __weak it can be overwritten by the application
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SAI1_Block_A_Init(SAI_HandleTypeDef* hsai, MX_SAI_Config *MXConfig)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80012c2:	2300      	movs	r3, #0
 80012c4:	73fb      	strb	r3, [r7, #15]

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(hsai);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80012d4:	601a      	str	r2, [r3, #0]

  /* Configure SAI1_Block_B */
  hsai->Init.AudioFrequency         = MXConfig->AudioFrequency;
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	621a      	str	r2, [r3, #32]
  hsai->Init.MonoStereoMode         = MXConfig->MonoStereoMode;
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	68da      	ldr	r2, [r3, #12]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai->Init.AudioMode              = MXConfig->AudioMode;
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685a      	ldr	r2, [r3, #4]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	605a      	str	r2, [r3, #4]
  hsai->Init.NoDivider              = SAI_MASTERDIVIDER_ENABLE;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2200      	movs	r2, #0
 80012f2:	619a      	str	r2, [r3, #24]
  hsai->Init.Protocol               = SAI_FREE_PROTOCOL;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2200      	movs	r2, #0
 80012f8:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.DataSize               = MXConfig->DataSize;
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	689a      	ldr	r2, [r3, #8]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->Init.FirstBit               = SAI_FIRSTBIT_MSB;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2200      	movs	r2, #0
 8001306:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->Init.ClockStrobing          = MXConfig->ClockStrobing;
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	691a      	ldr	r2, [r3, #16]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	651a      	str	r2, [r3, #80]	; 0x50
  hsai->Init.Synchro                = MXConfig->Synchro;
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	695a      	ldr	r2, [r3, #20]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	609a      	str	r2, [r3, #8]
  hsai->Init.OutputDrive            = MXConfig->OutputDrive;
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	699a      	ldr	r2, [r3, #24]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	615a      	str	r2, [r3, #20]
  hsai->Init.FIFOThreshold          = SAI_FIFOTHRESHOLD_1QF;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2201      	movs	r2, #1
 8001324:	61da      	str	r2, [r3, #28]
  hsai->Init.SynchroExt             = MXConfig->SynchroExt;
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	69da      	ldr	r2, [r3, #28]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	60da      	str	r2, [r3, #12]
  hsai->Init.CompandingMode         = SAI_NOCOMPANDING;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2200      	movs	r2, #0
 8001332:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.TriState               = SAI_OUTPUT_RELEASED;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2210      	movs	r2, #16
 8001338:	635a      	str	r2, [r3, #52]	; 0x34
  hsai->Init.Mckdiv                 = 0;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2200      	movs	r2, #0
 800133e:	625a      	str	r2, [r3, #36]	; 0x24
  hsai->Init.MckOutput              = SAI_MCK_OUTPUT_ENABLE;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001346:	611a      	str	r2, [r3, #16]
  hsai->Init.MckOverSampling        = SAI_MCK_OVERSAMPLING_DISABLE;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2200      	movs	r2, #0
 800134c:	629a      	str	r2, [r3, #40]	; 0x28
  hsai->Init.PdmInit.Activation     = DISABLE;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Configure SAI_Block_x Frame */
  hsai->FrameInit.FrameLength       = MXConfig->FrameLength;
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	6a1a      	ldr	r2, [r3, #32]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->FrameInit.ActiveFrameLength = MXConfig->ActiveFrameLength;
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->FrameInit.FSDefinition      = SAI_FS_CHANNEL_IDENTIFICATION;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800136c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity        = SAI_FS_ACTIVE_LOW;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2200      	movs	r2, #0
 8001372:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset          = SAI_FS_BEFOREFIRSTBIT;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800137a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure SAI Block_x Slot */
  hsai->SlotInit.FirstBitOffset     = 0;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2200      	movs	r2, #0
 8001380:	669a      	str	r2, [r3, #104]	; 0x68
  if ((MXConfig->DataSize == AUDIO_RESOLUTION_24B) || (MXConfig->DataSize == AUDIO_RESOLUTION_32B))
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	2b18      	cmp	r3, #24
 8001388:	d003      	beq.n	8001392 <MX_SAI1_Block_A_Init+0xda>
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	2b20      	cmp	r3, #32
 8001390:	d103      	bne.n	800139a <MX_SAI1_Block_A_Init+0xe2>
  {
    hsai->SlotInit.SlotSize         = SAI_SLOTSIZE_32B;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2280      	movs	r2, #128	; 0x80
 8001396:	66da      	str	r2, [r3, #108]	; 0x6c
 8001398:	e002      	b.n	80013a0 <MX_SAI1_Block_A_Init+0xe8>
  }
  else
  {
    hsai->SlotInit.SlotSize         = SAI_SLOTSIZE_16B;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2240      	movs	r2, #64	; 0x40
 800139e:	66da      	str	r2, [r3, #108]	; 0x6c
  }
  hsai->SlotInit.SlotNumber         = 2;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2202      	movs	r2, #2
 80013a4:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive        = MXConfig->SlotActive;
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	675a      	str	r2, [r3, #116]	; 0x74

  if(HAL_SAI_Init(hsai) != HAL_OK)
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f007 fd4a 	bl	8008e48 <HAL_SAI_Init>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_SAI1_Block_A_Init+0x106>
  {
    ret = HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80013be:	7bfb      	ldrb	r3, [r7, #15]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3710      	adds	r7, #16
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <MX_SAI4_Block_A_Init>:
  * @param  MXConfig SAI configuration structure
  * @note   Being __weak it can be overwritten by the application
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SAI4_Block_A_Init(SAI_HandleTypeDef* hsai, MX_SAI_Config *MXConfig)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80013d2:	2300      	movs	r3, #0
 80013d4:	73fb      	strb	r3, [r7, #15]

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(hsai);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80013e4:	601a      	str	r2, [r3, #0]

  /* Configure SAI4_Block_A */
  hsai->Init.AudioFrequency         = MXConfig->AudioFrequency;
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	621a      	str	r2, [r3, #32]
  hsai->Init.MonoStereoMode         = MXConfig->MonoStereoMode;
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	68da      	ldr	r2, [r3, #12]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai->Init.AudioMode              = MXConfig->AudioMode;
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685a      	ldr	r2, [r3, #4]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	605a      	str	r2, [r3, #4]
  hsai->Init.NoDivider              = SAI_MASTERDIVIDER_DISABLE;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001404:	619a      	str	r2, [r3, #24]
  hsai->Init.Protocol               = SAI_FREE_PROTOCOL;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2200      	movs	r2, #0
 800140a:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.DataSize               = MXConfig->DataSize;
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	689a      	ldr	r2, [r3, #8]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->Init.FirstBit               = SAI_FIRSTBIT_LSB;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f44f 7280 	mov.w	r2, #256	; 0x100
 800141a:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->Init.ClockStrobing          = MXConfig->ClockStrobing;
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	691a      	ldr	r2, [r3, #16]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	651a      	str	r2, [r3, #80]	; 0x50
  hsai->Init.Synchro                = MXConfig->Synchro;
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	695a      	ldr	r2, [r3, #20]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	609a      	str	r2, [r3, #8]
  hsai->Init.OutputDrive            = MXConfig->OutputDrive;
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	699a      	ldr	r2, [r3, #24]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	615a      	str	r2, [r3, #20]
  hsai->Init.FIFOThreshold          = SAI_FIFOTHRESHOLD_1QF;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2201      	movs	r2, #1
 8001438:	61da      	str	r2, [r3, #28]
  hsai->Init.SynchroExt             = MXConfig->SynchroExt;
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	69da      	ldr	r2, [r3, #28]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	60da      	str	r2, [r3, #12]
  hsai->Init.CompandingMode         = SAI_NOCOMPANDING;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2200      	movs	r2, #0
 8001446:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.TriState               = SAI_OUTPUT_RELEASED;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2210      	movs	r2, #16
 800144c:	635a      	str	r2, [r3, #52]	; 0x34
  hsai->Init.Mckdiv                 = 0;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2200      	movs	r2, #0
 8001452:	625a      	str	r2, [r3, #36]	; 0x24
  hsai->Init.PdmInit.Activation     = ENABLE;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2201      	movs	r2, #1
 8001458:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai->Init.PdmInit.MicPairsNbr    = 1;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2201      	movs	r2, #1
 8001460:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai->Init.PdmInit.ClockEnable    = SAI_PDM_CLOCK2_ENABLE;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001468:	641a      	str	r2, [r3, #64]	; 0x40


  /* Configure SAI_Block_x Frame */
  hsai->FrameInit.FrameLength       = MXConfig->FrameLength;
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	6a1a      	ldr	r2, [r3, #32]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->FrameInit.ActiveFrameLength = MXConfig->ActiveFrameLength;
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->FrameInit.FSDefinition      = SAI_FS_STARTFRAME;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2200      	movs	r2, #0
 800147e:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity        = SAI_FS_ACTIVE_HIGH;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001486:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset          = SAI_FS_FIRSTBIT;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2200      	movs	r2, #0
 800148c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure SAI Block_x Slot */
  hsai->SlotInit.FirstBitOffset     = 0;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2200      	movs	r2, #0
 8001492:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotSize           = SAI_SLOTSIZE_DATASIZE;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2200      	movs	r2, #0
 8001498:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai->SlotInit.SlotNumber         = 1;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2201      	movs	r2, #1
 800149e:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive        = MXConfig->SlotActive;
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	675a      	str	r2, [r3, #116]	; 0x74

  if(HAL_SAI_Init(hsai) != HAL_OK)
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f007 fccd 	bl	8008e48 <HAL_SAI_Init>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_SAI4_Block_A_Init+0xf0>
  {
    ret = HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	73fb      	strb	r3, [r7, #15]
  }
/* Enable SAI peripheral */
  __HAL_SAI_ENABLE(hsai);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80014c6:	601a      	str	r2, [r3, #0]

  return ret;
 80014c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3710      	adds	r7, #16
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
	...

080014d4 <BSP_AUDIO_IN_PDMToPCM_Init>:
  * @param  ChnlNbrOut Number of desired output audio channels in the  resulting PCM buffer
  * @retval BSP status
  */

int32_t BSP_AUDIO_IN_PDMToPCM_Init(uint32_t Instance, uint32_t AudioFreq, uint32_t ChnlNbrIn, uint32_t ChnlNbrOut)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b086      	sub	sp, #24
 80014d8:	af00      	add	r7, sp, #0
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	60b9      	str	r1, [r7, #8]
 80014de:	607a      	str	r2, [r7, #4]
 80014e0:	603b      	str	r3, [r7, #0]
  uint32_t index = 0;
 80014e2:	2300      	movs	r3, #0
 80014e4:	617b      	str	r3, [r7, #20]

  if(Instance != 1U)
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d002      	beq.n	80014f2 <BSP_AUDIO_IN_PDMToPCM_Init+0x1e>
  {
    return BSP_ERROR_WRONG_PARAM;
 80014ec:	f06f 0301 	mvn.w	r3, #1
 80014f0:	e085      	b.n	80015fe <BSP_AUDIO_IN_PDMToPCM_Init+0x12a>
  }
  else
  {
    /* Enable CRC peripheral to unlock the PDM library */
    __HAL_RCC_CRC_CLK_ENABLE();
 80014f2:	4b45      	ldr	r3, [pc, #276]	; (8001608 <BSP_AUDIO_IN_PDMToPCM_Init+0x134>)
 80014f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014f8:	4a43      	ldr	r2, [pc, #268]	; (8001608 <BSP_AUDIO_IN_PDMToPCM_Init+0x134>)
 80014fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80014fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001502:	4b41      	ldr	r3, [pc, #260]	; (8001608 <BSP_AUDIO_IN_PDMToPCM_Init+0x134>)
 8001504:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001508:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800150c:	613b      	str	r3, [r7, #16]
 800150e:	693b      	ldr	r3, [r7, #16]


    for(index = 0; index < ChnlNbrIn; index++)
 8001510:	2300      	movs	r3, #0
 8001512:	617b      	str	r3, [r7, #20]
 8001514:	e06e      	b.n	80015f4 <BSP_AUDIO_IN_PDMToPCM_Init+0x120>
    {
      /* Init PDM filters */
      PDM_FilterHandler[index].bit_order  = PDM_FILTER_BIT_ORDER_MSB;
 8001516:	4a3d      	ldr	r2, [pc, #244]	; (800160c <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	214c      	movs	r1, #76	; 0x4c
 800151c:	fb01 f303 	mul.w	r3, r1, r3
 8001520:	4413      	add	r3, r2
 8001522:	2201      	movs	r2, #1
 8001524:	801a      	strh	r2, [r3, #0]
      PDM_FilterHandler[index].endianness = PDM_FILTER_ENDIANNESS_LE;
 8001526:	4a39      	ldr	r2, [pc, #228]	; (800160c <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	214c      	movs	r1, #76	; 0x4c
 800152c:	fb01 f303 	mul.w	r3, r1, r3
 8001530:	4413      	add	r3, r2
 8001532:	3302      	adds	r3, #2
 8001534:	2200      	movs	r2, #0
 8001536:	801a      	strh	r2, [r3, #0]
      PDM_FilterHandler[index].high_pass_tap = 2122358088;
 8001538:	4a34      	ldr	r2, [pc, #208]	; (800160c <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	214c      	movs	r1, #76	; 0x4c
 800153e:	fb01 f303 	mul.w	r3, r1, r3
 8001542:	4413      	add	r3, r2
 8001544:	3304      	adds	r3, #4
 8001546:	4a32      	ldr	r2, [pc, #200]	; (8001610 <BSP_AUDIO_IN_PDMToPCM_Init+0x13c>)
 8001548:	601a      	str	r2, [r3, #0]
      PDM_FilterHandler[index].out_ptr_channels = ChnlNbrOut;
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	b298      	uxth	r0, r3
 800154e:	4a2f      	ldr	r2, [pc, #188]	; (800160c <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	214c      	movs	r1, #76	; 0x4c
 8001554:	fb01 f303 	mul.w	r3, r1, r3
 8001558:	4413      	add	r3, r2
 800155a:	330a      	adds	r3, #10
 800155c:	4602      	mov	r2, r0
 800155e:	801a      	strh	r2, [r3, #0]
      PDM_FilterHandler[index].in_ptr_channels  = ChnlNbrIn;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	b298      	uxth	r0, r3
 8001564:	4a29      	ldr	r2, [pc, #164]	; (800160c <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	214c      	movs	r1, #76	; 0x4c
 800156a:	fb01 f303 	mul.w	r3, r1, r3
 800156e:	4413      	add	r3, r2
 8001570:	3308      	adds	r3, #8
 8001572:	4602      	mov	r2, r0
 8001574:	801a      	strh	r2, [r3, #0]
      PDM_Filter_Init((PDM_Filter_Handler_t *)(&PDM_FilterHandler[index]));
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	224c      	movs	r2, #76	; 0x4c
 800157a:	fb02 f303 	mul.w	r3, r2, r3
 800157e:	4a23      	ldr	r2, [pc, #140]	; (800160c <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 8001580:	4413      	add	r3, r2
 8001582:	4618      	mov	r0, r3
 8001584:	f00a fbc6 	bl	800bd14 <PDM_Filter_Init>

      /* PDM lib config phase */
      PDM_FilterConfig[index].output_samples_number = AudioFreq/1000;
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	4a22      	ldr	r2, [pc, #136]	; (8001614 <BSP_AUDIO_IN_PDMToPCM_Init+0x140>)
 800158c:	fba2 2303 	umull	r2, r3, r2, r3
 8001590:	099b      	lsrs	r3, r3, #6
 8001592:	b298      	uxth	r0, r3
 8001594:	4920      	ldr	r1, [pc, #128]	; (8001618 <BSP_AUDIO_IN_PDMToPCM_Init+0x144>)
 8001596:	697a      	ldr	r2, [r7, #20]
 8001598:	4613      	mov	r3, r2
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	4413      	add	r3, r2
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	440b      	add	r3, r1
 80015a2:	3302      	adds	r3, #2
 80015a4:	4602      	mov	r2, r0
 80015a6:	801a      	strh	r2, [r3, #0]
      PDM_FilterConfig[index].mic_gain = 24;
 80015a8:	491b      	ldr	r1, [pc, #108]	; (8001618 <BSP_AUDIO_IN_PDMToPCM_Init+0x144>)
 80015aa:	697a      	ldr	r2, [r7, #20]
 80015ac:	4613      	mov	r3, r2
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	4413      	add	r3, r2
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	440b      	add	r3, r1
 80015b6:	3304      	adds	r3, #4
 80015b8:	2218      	movs	r2, #24
 80015ba:	801a      	strh	r2, [r3, #0]
      PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 80015bc:	4916      	ldr	r1, [pc, #88]	; (8001618 <BSP_AUDIO_IN_PDMToPCM_Init+0x144>)
 80015be:	697a      	ldr	r2, [r7, #20]
 80015c0:	4613      	mov	r3, r2
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	4413      	add	r3, r2
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	440b      	add	r3, r1
 80015ca:	2202      	movs	r2, #2
 80015cc:	801a      	strh	r2, [r3, #0]
      PDM_Filter_setConfig((PDM_Filter_Handler_t *)&PDM_FilterHandler[index], &PDM_FilterConfig[index]);
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	224c      	movs	r2, #76	; 0x4c
 80015d2:	fb02 f303 	mul.w	r3, r2, r3
 80015d6:	4a0d      	ldr	r2, [pc, #52]	; (800160c <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 80015d8:	1898      	adds	r0, r3, r2
 80015da:	697a      	ldr	r2, [r7, #20]
 80015dc:	4613      	mov	r3, r2
 80015de:	005b      	lsls	r3, r3, #1
 80015e0:	4413      	add	r3, r2
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	4a0c      	ldr	r2, [pc, #48]	; (8001618 <BSP_AUDIO_IN_PDMToPCM_Init+0x144>)
 80015e6:	4413      	add	r3, r2
 80015e8:	4619      	mov	r1, r3
 80015ea:	f00a fc63 	bl	800beb4 <PDM_Filter_setConfig>
    for(index = 0; index < ChnlNbrIn; index++)
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	3301      	adds	r3, #1
 80015f2:	617b      	str	r3, [r7, #20]
 80015f4:	697a      	ldr	r2, [r7, #20]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d38c      	bcc.n	8001516 <BSP_AUDIO_IN_PDMToPCM_Init+0x42>
    }
  }

  return BSP_ERROR_NONE;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3718      	adds	r7, #24
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	58024400 	.word	0x58024400
 800160c:	2400084c 	.word	0x2400084c
 8001610:	7e809d48 	.word	0x7e809d48
 8001614:	10624dd3 	.word	0x10624dd3
 8001618:	240008e4 	.word	0x240008e4

0800161c <BSP_AUDIO_IN_RecordPDM>:
  * @param  pbuf     Main buffer pointer for the recorded data storing
  * @param  Size     Size of the record buffer
  * @retval BSP status
  */
int32_t BSP_AUDIO_IN_RecordPDM(uint32_t Instance, uint8_t* pBuf, uint32_t NbrOfBytes)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b086      	sub	sp, #24
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8001628:	2300      	movs	r3, #0
 800162a:	617b      	str	r3, [r7, #20]

  if(Instance != 1U)
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d003      	beq.n	800163a <BSP_AUDIO_IN_RecordPDM+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001632:	f06f 0301 	mvn.w	r3, #1
 8001636:	617b      	str	r3, [r7, #20]
 8001638:	e011      	b.n	800165e <BSP_AUDIO_IN_RecordPDM+0x42>
  }
  else
  {
    /* Start the process receive DMA */
	  // setup SAI4 in receive DMA mode - set a callback when buffer full?
    if(HAL_SAI_Receive_DMA(&haudio_in_sai[PDM], (uint8_t*)pBuf, (uint16_t)(NbrOfBytes/(Audio_In_Ctx[PDM].BitsPerSample/8U))) != HAL_OK)
 800163a:	4b0b      	ldr	r3, [pc, #44]	; (8001668 <BSP_AUDIO_IN_RecordPDM+0x4c>)
 800163c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800163e:	08db      	lsrs	r3, r3, #3
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	fbb2 f3f3 	udiv	r3, r2, r3
 8001646:	b29b      	uxth	r3, r3
 8001648:	461a      	mov	r2, r3
 800164a:	68b9      	ldr	r1, [r7, #8]
 800164c:	4807      	ldr	r0, [pc, #28]	; (800166c <BSP_AUDIO_IN_RecordPDM+0x50>)
 800164e:	f007 fe9f 	bl	8009390 <HAL_SAI_Receive_DMA>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d002      	beq.n	800165e <BSP_AUDIO_IN_RecordPDM+0x42>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001658:	f06f 0303 	mvn.w	r3, #3
 800165c:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return BSP status */
  return ret;
 800165e:	697b      	ldr	r3, [r7, #20]
}
 8001660:	4618      	mov	r0, r3
 8001662:	3718      	adds	r7, #24
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	24000c64 	.word	0x24000c64
 800166c:	240005d0 	.word	0x240005d0

08001670 <BSP_AUDIO_IN_IRQHandler>:
  *         - AUDIO_IN_DEVICE_DIGITAL_MIC3
  *         - AUDIO_IN_DEVICE_DIGITAL_MIC4
  * @retval None
  */
void BSP_AUDIO_IN_IRQHandler(uint32_t Instance, uint32_t InputDevice)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b086      	sub	sp, #24
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	6039      	str	r1, [r7, #0]
  if(((Instance == 0U) && (InputDevice == AUDIO_IN_DEVICE_DIGITAL_MIC1)) ||\
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d102      	bne.n	8001686 <BSP_AUDIO_IN_IRQHandler+0x16>
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	2b10      	cmp	r3, #16
 8001684:	d00b      	beq.n	800169e <BSP_AUDIO_IN_IRQHandler+0x2e>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d102      	bne.n	8001692 <BSP_AUDIO_IN_IRQHandler+0x22>
     ((Instance == 0U) && (InputDevice == AUDIO_IN_DEVICE_ANALOG_MIC)) ||\
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d005      	beq.n	800169e <BSP_AUDIO_IN_IRQHandler+0x2e>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2b01      	cmp	r3, #1
 8001696:	d109      	bne.n	80016ac <BSP_AUDIO_IN_IRQHandler+0x3c>
     ((Instance == 1U) && (InputDevice == AUDIO_IN_DEVICE_DIGITAL_MIC1)))
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	2b10      	cmp	r3, #16
 800169c:	d106      	bne.n	80016ac <BSP_AUDIO_IN_IRQHandler+0x3c>
  {
    HAL_DMA_IRQHandler(haudio_in_sai[PDM].hdmarx);
 800169e:	4b18      	ldr	r3, [pc, #96]	; (8001700 <BSP_AUDIO_IN_IRQHandler+0x90>)
 80016a0:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80016a4:	4618      	mov	r0, r3
 80016a6:	f002 fc91 	bl	8003fcc <HAL_DMA_IRQHandler>
      (InputDevice <= AUDIO_IN_DEVICE_DIGITAL_MIC_LAST))
    {
    HAL_DMA_IRQHandler(haudio_in_dfsdm_filter[POS_VAL(InputDevice)].hdmaReg);
    }
  }
}
 80016aa:	e024      	b.n	80016f6 <BSP_AUDIO_IN_IRQHandler+0x86>
    if((Instance == 2U) && (InputDevice >= AUDIO_IN_DEVICE_DIGITAL_MIC1) &&\
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d121      	bne.n	80016f6 <BSP_AUDIO_IN_IRQHandler+0x86>
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	2b0f      	cmp	r3, #15
 80016b6:	d91e      	bls.n	80016f6 <BSP_AUDIO_IN_IRQHandler+0x86>
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	2b80      	cmp	r3, #128	; 0x80
 80016bc:	d81b      	bhi.n	80016f6 <BSP_AUDIO_IN_IRQHandler+0x86>
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	fa93 f3a3 	rbit	r3, r3
 80016c8:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d101      	bne.n	80016d8 <BSP_AUDIO_IN_IRQHandler+0x68>
  {
    return 32U;
 80016d4:	2320      	movs	r3, #32
 80016d6:	e003      	b.n	80016e0 <BSP_AUDIO_IN_IRQHandler+0x70>
  }
  return __builtin_clz(value);
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	fab3 f383 	clz	r3, r3
 80016de:	b2db      	uxtb	r3, r3
    HAL_DMA_IRQHandler(haudio_in_dfsdm_filter[POS_VAL(InputDevice)].hdmaReg);
 80016e0:	3b04      	subs	r3, #4
 80016e2:	4a08      	ldr	r2, [pc, #32]	; (8001704 <BSP_AUDIO_IN_IRQHandler+0x94>)
 80016e4:	2154      	movs	r1, #84	; 0x54
 80016e6:	fb01 f303 	mul.w	r3, r1, r3
 80016ea:	4413      	add	r3, r2
 80016ec:	3328      	adds	r3, #40	; 0x28
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f002 fc6b 	bl	8003fcc <HAL_DMA_IRQHandler>
}
 80016f6:	bf00      	nop
 80016f8:	3718      	adds	r7, #24
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	24000538 	.word	0x24000538
 8001704:	24000af0 	.word	0x24000af0

08001708 <HAL_SAI_RxHalfCpltCallback>:
  * @brief  Half reception complete callback.
  * @param  hsai   SAI handle.
  * @retval None
  */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsai);

  /* Call the record update function to get the first half */
  BSP_AUDIO_IN_HalfTransfer_CallBack(0);
 8001710:	2000      	movs	r0, #0
 8001712:	f000 f819 	bl	8001748 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 8001716:	bf00      	nop
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <HAL_SAI_RxCpltCallback>:
  * @brief  Reception complete callback.
  * @param  hsai   SAI handle.
  * @retval None
  */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 800171e:	b580      	push	{r7, lr}
 8001720:	b082      	sub	sp, #8
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsai);

  /* Call the record update function to get the second half */
  BSP_AUDIO_IN_TransferComplete_CallBack(0);
 8001726:	2000      	movs	r0, #0
 8001728:	f000 f804 	bl	8001734 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 800172c:	bf00      	nop
 800172e:	3708      	adds	r7, #8
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}

08001734 <BSP_AUDIO_IN_TransferComplete_CallBack>:
/**
  * @brief  User callback when record buffer is filled.
  * @retval None
  */
__weak void BSP_AUDIO_IN_TransferComplete_CallBack(uint32_t Instance)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* This function should be implemented by the user application.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 800173c:	bf00      	nop
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <BSP_AUDIO_IN_HalfTransfer_CallBack>:
/**
  * @brief  Manages the DMA Half Transfer complete event.
  * @retval None
  */
__weak void BSP_AUDIO_IN_HalfTransfer_CallBack(uint32_t Instance)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* This function should be implemented by the user application.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 8001750:	bf00      	nop
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <BSP_AUDIO_IN_Error_CallBack>:
/**
  * @brief  Audio IN Error callback function.
  * @retval None
  */
__weak void BSP_AUDIO_IN_Error_CallBack(uint32_t Instance)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Instance);

  /* This function is called when an Interrupt due to transfer error on or peripheral
     error occurs. */
}
 8001764:	bf00      	nop
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <DFSDM_ChannelMspInit>:
  * @brief  Initialize the DFSDM channel MSP.
  * @param  hDfsdmChannel DFSDM Channel handle
  * @retval None
  */
static void DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef *hDfsdmChannel)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b08e      	sub	sp, #56	; 0x38
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hDfsdmChannel);

  /* DFSDM pins configuration: DFSDM_CKOUT, DMIC_DATIN pins ------------------*/
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001778:	2302      	movs	r3, #2
 800177a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177c:	2300      	movs	r3, #0
 800177e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001780:	2303      	movs	r3, #3
 8001782:	633b      	str	r3, [r7, #48]	; 0x30

  /* Enable DFSDM clock */
  AUDIO_DFSDM1_CLK_ENABLE();
 8001784:	4b49      	ldr	r3, [pc, #292]	; (80018ac <DFSDM_ChannelMspInit+0x13c>)
 8001786:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800178a:	4a48      	ldr	r2, [pc, #288]	; (80018ac <DFSDM_ChannelMspInit+0x13c>)
 800178c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001790:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001794:	4b45      	ldr	r3, [pc, #276]	; (80018ac <DFSDM_ChannelMspInit+0x13c>)
 8001796:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800179a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800179e:	623b      	str	r3, [r7, #32]
 80017a0:	6a3b      	ldr	r3, [r7, #32]

  /* Enable GPIO clock */
  AUDIO_DFSDM1_CKOUT_GPIO_CLK_ENABLE();
 80017a2:	4b42      	ldr	r3, [pc, #264]	; (80018ac <DFSDM_ChannelMspInit+0x13c>)
 80017a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017a8:	4a40      	ldr	r2, [pc, #256]	; (80018ac <DFSDM_ChannelMspInit+0x13c>)
 80017aa:	f043 0310 	orr.w	r3, r3, #16
 80017ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017b2:	4b3e      	ldr	r3, [pc, #248]	; (80018ac <DFSDM_ChannelMspInit+0x13c>)
 80017b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017b8:	f003 0310 	and.w	r3, r3, #16
 80017bc:	61fb      	str	r3, [r7, #28]
 80017be:	69fb      	ldr	r3, [r7, #28]
  AUDIO_DFSDMx_DATIN_MIC1_GPIO_CLK_ENABLE();
 80017c0:	4b3a      	ldr	r3, [pc, #232]	; (80018ac <DFSDM_ChannelMspInit+0x13c>)
 80017c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017c6:	4a39      	ldr	r2, [pc, #228]	; (80018ac <DFSDM_ChannelMspInit+0x13c>)
 80017c8:	f043 0310 	orr.w	r3, r3, #16
 80017cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017d0:	4b36      	ldr	r3, [pc, #216]	; (80018ac <DFSDM_ChannelMspInit+0x13c>)
 80017d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017d6:	f003 0310 	and.w	r3, r3, #16
 80017da:	61bb      	str	r3, [r7, #24]
 80017dc:	69bb      	ldr	r3, [r7, #24]
  AUDIO_DFSDMx_DATIN_MIC2_GPIO_CLK_ENABLE();
 80017de:	4b33      	ldr	r3, [pc, #204]	; (80018ac <DFSDM_ChannelMspInit+0x13c>)
 80017e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017e4:	4a31      	ldr	r2, [pc, #196]	; (80018ac <DFSDM_ChannelMspInit+0x13c>)
 80017e6:	f043 0310 	orr.w	r3, r3, #16
 80017ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017ee:	4b2f      	ldr	r3, [pc, #188]	; (80018ac <DFSDM_ChannelMspInit+0x13c>)
 80017f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017f4:	f003 0310 	and.w	r3, r3, #16
 80017f8:	617b      	str	r3, [r7, #20]
 80017fa:	697b      	ldr	r3, [r7, #20]
  AUDIO_DFSDMx_DATIN_MIC3_GPIO_CLK_ENABLE();
 80017fc:	4b2b      	ldr	r3, [pc, #172]	; (80018ac <DFSDM_ChannelMspInit+0x13c>)
 80017fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001802:	4a2a      	ldr	r2, [pc, #168]	; (80018ac <DFSDM_ChannelMspInit+0x13c>)
 8001804:	f043 0320 	orr.w	r3, r3, #32
 8001808:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800180c:	4b27      	ldr	r3, [pc, #156]	; (80018ac <DFSDM_ChannelMspInit+0x13c>)
 800180e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001812:	f003 0320 	and.w	r3, r3, #32
 8001816:	613b      	str	r3, [r7, #16]
 8001818:	693b      	ldr	r3, [r7, #16]
  AUDIO_DFSDMx_DATIN_MIC4_GPIO_CLK_ENABLE();
 800181a:	4b24      	ldr	r3, [pc, #144]	; (80018ac <DFSDM_ChannelMspInit+0x13c>)
 800181c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001820:	4a22      	ldr	r2, [pc, #136]	; (80018ac <DFSDM_ChannelMspInit+0x13c>)
 8001822:	f043 0320 	orr.w	r3, r3, #32
 8001826:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800182a:	4b20      	ldr	r3, [pc, #128]	; (80018ac <DFSDM_ChannelMspInit+0x13c>)
 800182c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001830:	f003 0320 	and.w	r3, r3, #32
 8001834:	60fb      	str	r3, [r7, #12]
 8001836:	68fb      	ldr	r3, [r7, #12]

  GPIO_InitStruct.Pin = AUDIO_DFSDM1_CKOUT_PIN;
 8001838:	f44f 7300 	mov.w	r3, #512	; 0x200
 800183c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Alternate = AUDIO_DFSDM1_CKOUT_AF;
 800183e:	2303      	movs	r3, #3
 8001840:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(AUDIO_DFSDM1_CKOUT_GPIO_PORT, &GPIO_InitStruct);
 8001842:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001846:	4619      	mov	r1, r3
 8001848:	4819      	ldr	r0, [pc, #100]	; (80018b0 <DFSDM_ChannelMspInit+0x140>)
 800184a:	f003 fff5 	bl	8005838 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = AUDIO_DFSDMx_DATIN_MIC1_PIN;
 800184e:	2380      	movs	r3, #128	; 0x80
 8001850:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Alternate = AUDIO_DFSDMx_DATIN_MIC1_AF;
 8001852:	2303      	movs	r3, #3
 8001854:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(AUDIO_DFSDMx_DATIN_MIC1_GPIO_PORT, &GPIO_InitStruct);
 8001856:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800185a:	4619      	mov	r1, r3
 800185c:	4814      	ldr	r0, [pc, #80]	; (80018b0 <DFSDM_ChannelMspInit+0x140>)
 800185e:	f003 ffeb 	bl	8005838 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = AUDIO_DFSDMx_DATIN_MIC2_PIN;
 8001862:	2380      	movs	r3, #128	; 0x80
 8001864:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Alternate = AUDIO_DFSDMx_DATIN_MIC2_AF;
 8001866:	2303      	movs	r3, #3
 8001868:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(AUDIO_DFSDMx_DATIN_MIC2_GPIO_PORT, &GPIO_InitStruct);
 800186a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800186e:	4619      	mov	r1, r3
 8001870:	480f      	ldr	r0, [pc, #60]	; (80018b0 <DFSDM_ChannelMspInit+0x140>)
 8001872:	f003 ffe1 	bl	8005838 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = AUDIO_DFSDMx_DATIN_MIC3_PIN;
 8001876:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800187a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Alternate = AUDIO_DFSDMx_DATIN_MIC3_AF;
 800187c:	2303      	movs	r3, #3
 800187e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(AUDIO_DFSDMx_DATIN_MIC3_GPIO_PORT, &GPIO_InitStruct);
 8001880:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001884:	4619      	mov	r1, r3
 8001886:	480b      	ldr	r0, [pc, #44]	; (80018b4 <DFSDM_ChannelMspInit+0x144>)
 8001888:	f003 ffd6 	bl	8005838 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = AUDIO_DFSDMx_DATIN_MIC4_PIN;
 800188c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001890:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Alternate = AUDIO_DFSDMx_DATIN_MIC4_AF;
 8001892:	2303      	movs	r3, #3
 8001894:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(AUDIO_DFSDMx_DATIN_MIC4_GPIO_PORT, &GPIO_InitStruct);
 8001896:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800189a:	4619      	mov	r1, r3
 800189c:	4805      	ldr	r0, [pc, #20]	; (80018b4 <DFSDM_ChannelMspInit+0x144>)
 800189e:	f003 ffcb 	bl	8005838 <HAL_GPIO_Init>

}
 80018a2:	bf00      	nop
 80018a4:	3738      	adds	r7, #56	; 0x38
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	58024400 	.word	0x58024400
 80018b0:	58021000 	.word	0x58021000
 80018b4:	58021400 	.word	0x58021400

080018b8 <DFSDM_FilterMspInit>:
  * @brief  Initialize the DFSDM filter MSP.
  * @param  hDfsdmFilter DFSDM Filter handle
  * @retval None
  */
static void DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef *hDfsdmFilter)
{
 80018b8:	b590      	push	{r4, r7, lr}
 80018ba:	b0a1      	sub	sp, #132	; 0x84
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t i, mic_num, mic_init[DFSDM_MIC_NUMBER] = {0};
 80018c0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	605a      	str	r2, [r3, #4]
 80018ca:	609a      	str	r2, [r3, #8]
 80018cc:	60da      	str	r2, [r3, #12]
  IRQn_Type AUDIO_DFSDM_DMAx_MIC_IRQHandler[DFSDM_MIC_NUMBER] = {AUDIO_DFSDMx_DMAx_MIC1_IRQ, AUDIO_DFSDMx_DMAx_MIC2_IRQ, AUDIO_DFSDMx_DMAx_MIC3_IRQ, AUDIO_DFSDMx_DMAx_MIC4_IRQ};
 80018ce:	4a61      	ldr	r2, [pc, #388]	; (8001a54 <DFSDM_FilterMspInit+0x19c>)
 80018d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018d8:	e883 0003 	stmia.w	r3, {r0, r1}
  DMA_Stream_TypeDef* AUDIO_DFSDMx_DMAx_MIC_STREAM[DFSDM_MIC_NUMBER] = {AUDIO_DFSDMx_DMAx_MIC1_STREAM, AUDIO_DFSDMx_DMAx_MIC2_STREAM, AUDIO_DFSDMx_DMAx_MIC3_STREAM, AUDIO_DFSDMx_DMAx_MIC4_STREAM};
 80018dc:	4b5e      	ldr	r3, [pc, #376]	; (8001a58 <DFSDM_FilterMspInit+0x1a0>)
 80018de:	f107 0420 	add.w	r4, r7, #32
 80018e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t AUDIO_DFSDMx_DMAx_MIC_REQUEST[DFSDM_MIC_NUMBER] = {AUDIO_DFSDMx_DMAx_MIC1_REQUEST, AUDIO_DFSDMx_DMAx_MIC2_REQUEST, AUDIO_DFSDMx_DMAx_MIC3_REQUEST, AUDIO_DFSDMx_DMAx_MIC4_REQUEST};
 80018e8:	4b5c      	ldr	r3, [pc, #368]	; (8001a5c <DFSDM_FilterMspInit+0x1a4>)
 80018ea:	f107 0410 	add.w	r4, r7, #16
 80018ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hDfsdmFilter);

  /* Enable DFSDM clock */
  AUDIO_DFSDM1_CLK_ENABLE();
 80018f4:	4b5a      	ldr	r3, [pc, #360]	; (8001a60 <DFSDM_FilterMspInit+0x1a8>)
 80018f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80018fa:	4a59      	ldr	r2, [pc, #356]	; (8001a60 <DFSDM_FilterMspInit+0x1a8>)
 80018fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001900:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001904:	4b56      	ldr	r3, [pc, #344]	; (8001a60 <DFSDM_FilterMspInit+0x1a8>)
 8001906:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800190a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DMA clock */
  AUDIO_DFSDM1_DMAx_CLK_ENABLE();
 8001912:	4b53      	ldr	r3, [pc, #332]	; (8001a60 <DFSDM_FilterMspInit+0x1a8>)
 8001914:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001918:	4a51      	ldr	r2, [pc, #324]	; (8001a60 <DFSDM_FilterMspInit+0x1a8>)
 800191a:	f043 0302 	orr.w	r3, r3, #2
 800191e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001922:	4b4f      	ldr	r3, [pc, #316]	; (8001a60 <DFSDM_FilterMspInit+0x1a8>)
 8001924:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001928:	f003 0302 	and.w	r3, r3, #2
 800192c:	60bb      	str	r3, [r7, #8]
 800192e:	68bb      	ldr	r3, [r7, #8]

  for(i = 0; i < DFSDM_MIC_NUMBER; i++)
 8001930:	2300      	movs	r3, #0
 8001932:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001934:	e194      	b.n	8001c60 <DFSDM_FilterMspInit+0x3a8>
 8001936:	2310      	movs	r3, #16
 8001938:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800193a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800193c:	fa93 f3a3 	rbit	r3, r3
 8001940:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001942:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001944:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8001946:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001948:	2b00      	cmp	r3, #0
 800194a:	d101      	bne.n	8001950 <DFSDM_FilterMspInit+0x98>
    return 32U;
 800194c:	2320      	movs	r3, #32
 800194e:	e003      	b.n	8001958 <DFSDM_FilterMspInit+0xa0>
  return __builtin_clz(value);
 8001950:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001952:	fab3 f383 	clz	r3, r3
 8001956:	b2db      	uxtb	r3, r3
  {
    if((mic_init[POS_VAL(AUDIO_IN_DEVICE_DIGITAL_MIC1)] != 1U) && ((Audio_In_Ctx[2].Device & AUDIO_IN_DEVICE_DIGITAL_MIC1) == AUDIO_IN_DEVICE_DIGITAL_MIC1))
 8001958:	3b04      	subs	r3, #4
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001960:	4413      	add	r3, r2
 8001962:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d010      	beq.n	800198c <DFSDM_FilterMspInit+0xd4>
 800196a:	4b3e      	ldr	r3, [pc, #248]	; (8001a64 <DFSDM_FilterMspInit+0x1ac>)
 800196c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800196e:	f003 0310 	and.w	r3, r3, #16
 8001972:	2b00      	cmp	r3, #0
 8001974:	d00a      	beq.n	800198c <DFSDM_FilterMspInit+0xd4>
    {
      mic_num = 0U;
 8001976:	2300      	movs	r3, #0
 8001978:	67bb      	str	r3, [r7, #120]	; 0x78
      mic_init[mic_num] = 1;
 800197a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001982:	4413      	add	r3, r2
 8001984:	2201      	movs	r2, #1
 8001986:	f843 2c48 	str.w	r2, [r3, #-72]
 800198a:	e08c      	b.n	8001aa6 <DFSDM_FilterMspInit+0x1ee>
 800198c:	2320      	movs	r3, #32
 800198e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001990:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001992:	fa93 f3a3 	rbit	r3, r3
 8001996:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8001998:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800199a:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800199c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d101      	bne.n	80019a6 <DFSDM_FilterMspInit+0xee>
    return 32U;
 80019a2:	2320      	movs	r3, #32
 80019a4:	e003      	b.n	80019ae <DFSDM_FilterMspInit+0xf6>
  return __builtin_clz(value);
 80019a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80019a8:	fab3 f383 	clz	r3, r3
 80019ac:	b2db      	uxtb	r3, r3
    }
    else if((mic_init[POS_VAL(AUDIO_IN_DEVICE_DIGITAL_MIC2)] != 1U) && ((Audio_In_Ctx[2].Device & AUDIO_IN_DEVICE_DIGITAL_MIC2) == AUDIO_IN_DEVICE_DIGITAL_MIC2))
 80019ae:	3b04      	subs	r3, #4
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80019b6:	4413      	add	r3, r2
 80019b8:	f853 3c48 	ldr.w	r3, [r3, #-72]
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d010      	beq.n	80019e2 <DFSDM_FilterMspInit+0x12a>
 80019c0:	4b28      	ldr	r3, [pc, #160]	; (8001a64 <DFSDM_FilterMspInit+0x1ac>)
 80019c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80019c4:	f003 0320 	and.w	r3, r3, #32
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d00a      	beq.n	80019e2 <DFSDM_FilterMspInit+0x12a>
    {
      mic_num = 1U;
 80019cc:	2301      	movs	r3, #1
 80019ce:	67bb      	str	r3, [r7, #120]	; 0x78
      mic_init[mic_num] = 1;
 80019d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80019d8:	4413      	add	r3, r2
 80019da:	2201      	movs	r2, #1
 80019dc:	f843 2c48 	str.w	r2, [r3, #-72]
 80019e0:	e061      	b.n	8001aa6 <DFSDM_FilterMspInit+0x1ee>
 80019e2:	2340      	movs	r3, #64	; 0x40
 80019e4:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80019e8:	fa93 f3a3 	rbit	r3, r3
 80019ec:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80019ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019f0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80019f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d101      	bne.n	80019fc <DFSDM_FilterMspInit+0x144>
    return 32U;
 80019f8:	2320      	movs	r3, #32
 80019fa:	e003      	b.n	8001a04 <DFSDM_FilterMspInit+0x14c>
  return __builtin_clz(value);
 80019fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019fe:	fab3 f383 	clz	r3, r3
 8001a02:	b2db      	uxtb	r3, r3
    }
    else if((mic_init[POS_VAL(AUDIO_IN_DEVICE_DIGITAL_MIC3)] != 1U) &&((Audio_In_Ctx[2].Device & AUDIO_IN_DEVICE_DIGITAL_MIC3) == AUDIO_IN_DEVICE_DIGITAL_MIC3))
 8001a04:	3b04      	subs	r3, #4
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001a0c:	4413      	add	r3, r2
 8001a0e:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d010      	beq.n	8001a38 <DFSDM_FilterMspInit+0x180>
 8001a16:	4b13      	ldr	r3, [pc, #76]	; (8001a64 <DFSDM_FilterMspInit+0x1ac>)
 8001a18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d00a      	beq.n	8001a38 <DFSDM_FilterMspInit+0x180>
    {
      mic_num = 2U;
 8001a22:	2302      	movs	r3, #2
 8001a24:	67bb      	str	r3, [r7, #120]	; 0x78
      mic_init[mic_num] = 1;
 8001a26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001a2e:	4413      	add	r3, r2
 8001a30:	2201      	movs	r2, #1
 8001a32:	f843 2c48 	str.w	r2, [r3, #-72]
 8001a36:	e036      	b.n	8001aa6 <DFSDM_FilterMspInit+0x1ee>
 8001a38:	2380      	movs	r3, #128	; 0x80
 8001a3a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a3e:	fa93 f3a3 	rbit	r3, r3
 8001a42:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8001a44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a46:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8001a48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d10c      	bne.n	8001a68 <DFSDM_FilterMspInit+0x1b0>
    return 32U;
 8001a4e:	2320      	movs	r3, #32
 8001a50:	e00e      	b.n	8001a70 <DFSDM_FilterMspInit+0x1b8>
 8001a52:	bf00      	nop
 8001a54:	0800c500 	.word	0x0800c500
 8001a58:	0800c508 	.word	0x0800c508
 8001a5c:	0800c518 	.word	0x0800c518
 8001a60:	58024400 	.word	0x58024400
 8001a64:	24000c64 	.word	0x24000c64
  return __builtin_clz(value);
 8001a68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a6a:	fab3 f383 	clz	r3, r3
 8001a6e:	b2db      	uxtb	r3, r3
    }
    else if((mic_init[POS_VAL(AUDIO_IN_DEVICE_DIGITAL_MIC4)] != 1U) && ((Audio_In_Ctx[2].Device & AUDIO_IN_DEVICE_DIGITAL_MIC4) == AUDIO_IN_DEVICE_DIGITAL_MIC4))
 8001a70:	3b04      	subs	r3, #4
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001a78:	4413      	add	r3, r2
 8001a7a:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	f000 80f2 	beq.w	8001c68 <DFSDM_FilterMspInit+0x3b0>
 8001a84:	4b7a      	ldr	r3, [pc, #488]	; (8001c70 <DFSDM_FilterMspInit+0x3b8>)
 8001a86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001a88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	f000 80eb 	beq.w	8001c68 <DFSDM_FilterMspInit+0x3b0>
    {
      mic_num = 3U;
 8001a92:	2303      	movs	r3, #3
 8001a94:	67bb      	str	r3, [r7, #120]	; 0x78
      mic_init[mic_num] = 1;
 8001a96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001a9e:	4413      	add	r3, r2
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	f843 2c48 	str.w	r2, [r3, #-72]
    else
    {
      break;
    }
    /* Configure the hDmaDfsdm[i] handle parameters */
    hDmaDfsdm[mic_num].Init.Request             = AUDIO_DFSDMx_DMAx_MIC_REQUEST[mic_num];
 8001aa6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001aae:	4413      	add	r3, r2
 8001ab0:	f853 1c70 	ldr.w	r1, [r3, #-112]
 8001ab4:	486f      	ldr	r0, [pc, #444]	; (8001c74 <DFSDM_FilterMspInit+0x3bc>)
 8001ab6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001ab8:	4613      	mov	r3, r2
 8001aba:	011b      	lsls	r3, r3, #4
 8001abc:	1a9b      	subs	r3, r3, r2
 8001abe:	00db      	lsls	r3, r3, #3
 8001ac0:	4403      	add	r3, r0
 8001ac2:	3304      	adds	r3, #4
 8001ac4:	6019      	str	r1, [r3, #0]
    hDmaDfsdm[mic_num].Instance                 = AUDIO_DFSDMx_DMAx_MIC_STREAM[mic_num];
 8001ac6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001ace:	4413      	add	r3, r2
 8001ad0:	f853 1c60 	ldr.w	r1, [r3, #-96]
 8001ad4:	4867      	ldr	r0, [pc, #412]	; (8001c74 <DFSDM_FilterMspInit+0x3bc>)
 8001ad6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001ad8:	4613      	mov	r3, r2
 8001ada:	011b      	lsls	r3, r3, #4
 8001adc:	1a9b      	subs	r3, r3, r2
 8001ade:	00db      	lsls	r3, r3, #3
 8001ae0:	4403      	add	r3, r0
 8001ae2:	6019      	str	r1, [r3, #0]
    hDmaDfsdm[mic_num].Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8001ae4:	4963      	ldr	r1, [pc, #396]	; (8001c74 <DFSDM_FilterMspInit+0x3bc>)
 8001ae6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001ae8:	4613      	mov	r3, r2
 8001aea:	011b      	lsls	r3, r3, #4
 8001aec:	1a9b      	subs	r3, r3, r2
 8001aee:	00db      	lsls	r3, r3, #3
 8001af0:	440b      	add	r3, r1
 8001af2:	3308      	adds	r3, #8
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
    hDmaDfsdm[mic_num].Init.PeriphInc           = DMA_PINC_DISABLE;
 8001af8:	495e      	ldr	r1, [pc, #376]	; (8001c74 <DFSDM_FilterMspInit+0x3bc>)
 8001afa:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001afc:	4613      	mov	r3, r2
 8001afe:	011b      	lsls	r3, r3, #4
 8001b00:	1a9b      	subs	r3, r3, r2
 8001b02:	00db      	lsls	r3, r3, #3
 8001b04:	440b      	add	r3, r1
 8001b06:	330c      	adds	r3, #12
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
    hDmaDfsdm[mic_num].Init.MemInc              = DMA_MINC_ENABLE;
 8001b0c:	4959      	ldr	r1, [pc, #356]	; (8001c74 <DFSDM_FilterMspInit+0x3bc>)
 8001b0e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001b10:	4613      	mov	r3, r2
 8001b12:	011b      	lsls	r3, r3, #4
 8001b14:	1a9b      	subs	r3, r3, r2
 8001b16:	00db      	lsls	r3, r3, #3
 8001b18:	440b      	add	r3, r1
 8001b1a:	3310      	adds	r3, #16
 8001b1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b20:	601a      	str	r2, [r3, #0]
    hDmaDfsdm[mic_num].Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001b22:	4954      	ldr	r1, [pc, #336]	; (8001c74 <DFSDM_FilterMspInit+0x3bc>)
 8001b24:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001b26:	4613      	mov	r3, r2
 8001b28:	011b      	lsls	r3, r3, #4
 8001b2a:	1a9b      	subs	r3, r3, r2
 8001b2c:	00db      	lsls	r3, r3, #3
 8001b2e:	440b      	add	r3, r1
 8001b30:	3314      	adds	r3, #20
 8001b32:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b36:	601a      	str	r2, [r3, #0]
    hDmaDfsdm[mic_num].Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8001b38:	494e      	ldr	r1, [pc, #312]	; (8001c74 <DFSDM_FilterMspInit+0x3bc>)
 8001b3a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	011b      	lsls	r3, r3, #4
 8001b40:	1a9b      	subs	r3, r3, r2
 8001b42:	00db      	lsls	r3, r3, #3
 8001b44:	440b      	add	r3, r1
 8001b46:	3318      	adds	r3, #24
 8001b48:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b4c:	601a      	str	r2, [r3, #0]
    hDmaDfsdm[mic_num].Init.Mode                = DMA_CIRCULAR;
 8001b4e:	4949      	ldr	r1, [pc, #292]	; (8001c74 <DFSDM_FilterMspInit+0x3bc>)
 8001b50:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001b52:	4613      	mov	r3, r2
 8001b54:	011b      	lsls	r3, r3, #4
 8001b56:	1a9b      	subs	r3, r3, r2
 8001b58:	00db      	lsls	r3, r3, #3
 8001b5a:	440b      	add	r3, r1
 8001b5c:	331c      	adds	r3, #28
 8001b5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b62:	601a      	str	r2, [r3, #0]
    hDmaDfsdm[mic_num].Init.Priority            = DMA_PRIORITY_HIGH;
 8001b64:	4943      	ldr	r1, [pc, #268]	; (8001c74 <DFSDM_FilterMspInit+0x3bc>)
 8001b66:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001b68:	4613      	mov	r3, r2
 8001b6a:	011b      	lsls	r3, r3, #4
 8001b6c:	1a9b      	subs	r3, r3, r2
 8001b6e:	00db      	lsls	r3, r3, #3
 8001b70:	440b      	add	r3, r1
 8001b72:	3320      	adds	r3, #32
 8001b74:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b78:	601a      	str	r2, [r3, #0]
    hDmaDfsdm[mic_num].Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8001b7a:	493e      	ldr	r1, [pc, #248]	; (8001c74 <DFSDM_FilterMspInit+0x3bc>)
 8001b7c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001b7e:	4613      	mov	r3, r2
 8001b80:	011b      	lsls	r3, r3, #4
 8001b82:	1a9b      	subs	r3, r3, r2
 8001b84:	00db      	lsls	r3, r3, #3
 8001b86:	440b      	add	r3, r1
 8001b88:	3324      	adds	r3, #36	; 0x24
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	601a      	str	r2, [r3, #0]
    hDmaDfsdm[mic_num].Init.MemBurst            = DMA_MBURST_SINGLE;
 8001b8e:	4939      	ldr	r1, [pc, #228]	; (8001c74 <DFSDM_FilterMspInit+0x3bc>)
 8001b90:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001b92:	4613      	mov	r3, r2
 8001b94:	011b      	lsls	r3, r3, #4
 8001b96:	1a9b      	subs	r3, r3, r2
 8001b98:	00db      	lsls	r3, r3, #3
 8001b9a:	440b      	add	r3, r1
 8001b9c:	332c      	adds	r3, #44	; 0x2c
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	601a      	str	r2, [r3, #0]
    hDmaDfsdm[mic_num].Init.PeriphBurst         = DMA_PBURST_SINGLE;
 8001ba2:	4934      	ldr	r1, [pc, #208]	; (8001c74 <DFSDM_FilterMspInit+0x3bc>)
 8001ba4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	011b      	lsls	r3, r3, #4
 8001baa:	1a9b      	subs	r3, r3, r2
 8001bac:	00db      	lsls	r3, r3, #3
 8001bae:	440b      	add	r3, r1
 8001bb0:	3330      	adds	r3, #48	; 0x30
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	601a      	str	r2, [r3, #0]
    hDmaDfsdm[mic_num].State                    = HAL_DMA_STATE_RESET;
 8001bb6:	492f      	ldr	r1, [pc, #188]	; (8001c74 <DFSDM_FilterMspInit+0x3bc>)
 8001bb8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001bba:	4613      	mov	r3, r2
 8001bbc:	011b      	lsls	r3, r3, #4
 8001bbe:	1a9b      	subs	r3, r3, r2
 8001bc0:	00db      	lsls	r3, r3, #3
 8001bc2:	440b      	add	r3, r1
 8001bc4:	3335      	adds	r3, #53	; 0x35
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	701a      	strb	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(&haudio_in_dfsdm_filter[mic_num], hdmaReg, hDmaDfsdm[mic_num]);
 8001bca:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001bcc:	4613      	mov	r3, r2
 8001bce:	011b      	lsls	r3, r3, #4
 8001bd0:	1a9b      	subs	r3, r3, r2
 8001bd2:	00db      	lsls	r3, r3, #3
 8001bd4:	4a27      	ldr	r2, [pc, #156]	; (8001c74 <DFSDM_FilterMspInit+0x3bc>)
 8001bd6:	441a      	add	r2, r3
 8001bd8:	4927      	ldr	r1, [pc, #156]	; (8001c78 <DFSDM_FilterMspInit+0x3c0>)
 8001bda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001bdc:	2054      	movs	r0, #84	; 0x54
 8001bde:	fb00 f303 	mul.w	r3, r0, r3
 8001be2:	440b      	add	r3, r1
 8001be4:	3328      	adds	r3, #40	; 0x28
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001bea:	2254      	movs	r2, #84	; 0x54
 8001bec:	fb02 f303 	mul.w	r3, r2, r3
 8001bf0:	4a21      	ldr	r2, [pc, #132]	; (8001c78 <DFSDM_FilterMspInit+0x3c0>)
 8001bf2:	1899      	adds	r1, r3, r2
 8001bf4:	481f      	ldr	r0, [pc, #124]	; (8001c74 <DFSDM_FilterMspInit+0x3bc>)
 8001bf6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	011b      	lsls	r3, r3, #4
 8001bfc:	1a9b      	subs	r3, r3, r2
 8001bfe:	00db      	lsls	r3, r3, #3
 8001c00:	4403      	add	r3, r0
 8001c02:	3338      	adds	r3, #56	; 0x38
 8001c04:	6019      	str	r1, [r3, #0]

    /* Reset DMA handle state */
    __HAL_DMA_RESET_HANDLE_STATE(&hDmaDfsdm[mic_num]);
 8001c06:	491b      	ldr	r1, [pc, #108]	; (8001c74 <DFSDM_FilterMspInit+0x3bc>)
 8001c08:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	011b      	lsls	r3, r3, #4
 8001c0e:	1a9b      	subs	r3, r3, r2
 8001c10:	00db      	lsls	r3, r3, #3
 8001c12:	440b      	add	r3, r1
 8001c14:	3335      	adds	r3, #53	; 0x35
 8001c16:	2200      	movs	r2, #0
 8001c18:	701a      	strb	r2, [r3, #0]

    /* Configure the DMA Channel */
    (void)HAL_DMA_Init(&hDmaDfsdm[mic_num]);
 8001c1a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	011b      	lsls	r3, r3, #4
 8001c20:	1a9b      	subs	r3, r3, r2
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	4a13      	ldr	r2, [pc, #76]	; (8001c74 <DFSDM_FilterMspInit+0x3bc>)
 8001c26:	4413      	add	r3, r2
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f000 fcf3 	bl	8002614 <HAL_DMA_Init>

    /* DMA IRQ Channel configuration */
    HAL_NVIC_SetPriority(AUDIO_DFSDM_DMAx_MIC_IRQHandler[mic_num], BSP_AUDIO_IN_IT_PRIORITY, 0);
 8001c2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001c36:	4413      	add	r3, r2
 8001c38:	f933 3c50 	ldrsh.w	r3, [r3, #-80]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	210f      	movs	r1, #15
 8001c40:	4618      	mov	r0, r3
 8001c42:	f000 f988 	bl	8001f56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AUDIO_DFSDM_DMAx_MIC_IRQHandler[mic_num]);
 8001c46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001c4e:	4413      	add	r3, r2
 8001c50:	f933 3c50 	ldrsh.w	r3, [r3, #-80]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f000 f998 	bl	8001f8a <HAL_NVIC_EnableIRQ>
  for(i = 0; i < DFSDM_MIC_NUMBER; i++)
 8001c5a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001c60:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c62:	2b03      	cmp	r3, #3
 8001c64:	f67f ae67 	bls.w	8001936 <DFSDM_FilterMspInit+0x7e>
  }
}
 8001c68:	bf00      	nop
 8001c6a:	3784      	adds	r7, #132	; 0x84
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd90      	pop	{r4, r7, pc}
 8001c70:	24000c64 	.word	0x24000c64
 8001c74:	2400066c 	.word	0x2400066c
 8001c78:	24000af0 	.word	0x24000af0

08001c7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c82:	2003      	movs	r0, #3
 8001c84:	f000 f95c 	bl	8001f40 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001c88:	f004 fd54 	bl	8006734 <HAL_RCC_GetSysClockFreq>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	4b15      	ldr	r3, [pc, #84]	; (8001ce4 <HAL_Init+0x68>)
 8001c90:	699b      	ldr	r3, [r3, #24]
 8001c92:	0a1b      	lsrs	r3, r3, #8
 8001c94:	f003 030f 	and.w	r3, r3, #15
 8001c98:	4913      	ldr	r1, [pc, #76]	; (8001ce8 <HAL_Init+0x6c>)
 8001c9a:	5ccb      	ldrb	r3, [r1, r3]
 8001c9c:	f003 031f 	and.w	r3, r3, #31
 8001ca0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ca4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001ca6:	4b0f      	ldr	r3, [pc, #60]	; (8001ce4 <HAL_Init+0x68>)
 8001ca8:	699b      	ldr	r3, [r3, #24]
 8001caa:	f003 030f 	and.w	r3, r3, #15
 8001cae:	4a0e      	ldr	r2, [pc, #56]	; (8001ce8 <HAL_Init+0x6c>)
 8001cb0:	5cd3      	ldrb	r3, [r2, r3]
 8001cb2:	f003 031f 	and.w	r3, r3, #31
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	fa22 f303 	lsr.w	r3, r2, r3
 8001cbc:	4a0b      	ldr	r2, [pc, #44]	; (8001cec <HAL_Init+0x70>)
 8001cbe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001cc0:	4a0b      	ldr	r2, [pc, #44]	; (8001cf0 <HAL_Init+0x74>)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cc6:	2000      	movs	r0, #0
 8001cc8:	f000 f814 	bl	8001cf4 <HAL_InitTick>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e002      	b.n	8001cdc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001cd6:	f008 f885 	bl	8009de4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cda:	2300      	movs	r3, #0
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3708      	adds	r7, #8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	58024400 	.word	0x58024400
 8001ce8:	0800c570 	.word	0x0800c570
 8001cec:	24000414 	.word	0x24000414
 8001cf0:	24000410 	.word	0x24000410

08001cf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001cfc:	4b15      	ldr	r3, [pc, #84]	; (8001d54 <HAL_InitTick+0x60>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d101      	bne.n	8001d08 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e021      	b.n	8001d4c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001d08:	4b13      	ldr	r3, [pc, #76]	; (8001d58 <HAL_InitTick+0x64>)
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	4b11      	ldr	r3, [pc, #68]	; (8001d54 <HAL_InitTick+0x60>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	4619      	mov	r1, r3
 8001d12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d16:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f000 f941 	bl	8001fa6 <HAL_SYSTICK_Config>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e00e      	b.n	8001d4c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2b0f      	cmp	r3, #15
 8001d32:	d80a      	bhi.n	8001d4a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d34:	2200      	movs	r2, #0
 8001d36:	6879      	ldr	r1, [r7, #4]
 8001d38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d3c:	f000 f90b 	bl	8001f56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d40:	4a06      	ldr	r2, [pc, #24]	; (8001d5c <HAL_InitTick+0x68>)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d46:	2300      	movs	r3, #0
 8001d48:	e000      	b.n	8001d4c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3708      	adds	r7, #8
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	2400040c 	.word	0x2400040c
 8001d58:	24000410 	.word	0x24000410
 8001d5c:	24000408 	.word	0x24000408

08001d60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d64:	4b06      	ldr	r3, [pc, #24]	; (8001d80 <HAL_IncTick+0x20>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	461a      	mov	r2, r3
 8001d6a:	4b06      	ldr	r3, [pc, #24]	; (8001d84 <HAL_IncTick+0x24>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4413      	add	r3, r2
 8001d70:	4a04      	ldr	r2, [pc, #16]	; (8001d84 <HAL_IncTick+0x24>)
 8001d72:	6013      	str	r3, [r2, #0]
}
 8001d74:	bf00      	nop
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	2400040c 	.word	0x2400040c
 8001d84:	24000cf4 	.word	0x24000cf4

08001d88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d8c:	4b03      	ldr	r3, [pc, #12]	; (8001d9c <HAL_GetTick+0x14>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	24000cf4 	.word	0x24000cf4

08001da0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f003 0307 	and.w	r3, r3, #7
 8001dae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001db0:	4b0b      	ldr	r3, [pc, #44]	; (8001de0 <__NVIC_SetPriorityGrouping+0x40>)
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001db6:	68ba      	ldr	r2, [r7, #8]
 8001db8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001dc8:	4b06      	ldr	r3, [pc, #24]	; (8001de4 <__NVIC_SetPriorityGrouping+0x44>)
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dce:	4a04      	ldr	r2, [pc, #16]	; (8001de0 <__NVIC_SetPriorityGrouping+0x40>)
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	60d3      	str	r3, [r2, #12]
}
 8001dd4:	bf00      	nop
 8001dd6:	3714      	adds	r7, #20
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr
 8001de0:	e000ed00 	.word	0xe000ed00
 8001de4:	05fa0000 	.word	0x05fa0000

08001de8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dec:	4b04      	ldr	r3, [pc, #16]	; (8001e00 <__NVIC_GetPriorityGrouping+0x18>)
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	0a1b      	lsrs	r3, r3, #8
 8001df2:	f003 0307 	and.w	r3, r3, #7
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr
 8001e00:	e000ed00 	.word	0xe000ed00

08001e04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001e0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	db0b      	blt.n	8001e2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e16:	88fb      	ldrh	r3, [r7, #6]
 8001e18:	f003 021f 	and.w	r2, r3, #31
 8001e1c:	4907      	ldr	r1, [pc, #28]	; (8001e3c <__NVIC_EnableIRQ+0x38>)
 8001e1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e22:	095b      	lsrs	r3, r3, #5
 8001e24:	2001      	movs	r0, #1
 8001e26:	fa00 f202 	lsl.w	r2, r0, r2
 8001e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e2e:	bf00      	nop
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	e000e100 	.word	0xe000e100

08001e40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	4603      	mov	r3, r0
 8001e48:	6039      	str	r1, [r7, #0]
 8001e4a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001e4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	db0a      	blt.n	8001e6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	b2da      	uxtb	r2, r3
 8001e58:	490c      	ldr	r1, [pc, #48]	; (8001e8c <__NVIC_SetPriority+0x4c>)
 8001e5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e5e:	0112      	lsls	r2, r2, #4
 8001e60:	b2d2      	uxtb	r2, r2
 8001e62:	440b      	add	r3, r1
 8001e64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e68:	e00a      	b.n	8001e80 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	b2da      	uxtb	r2, r3
 8001e6e:	4908      	ldr	r1, [pc, #32]	; (8001e90 <__NVIC_SetPriority+0x50>)
 8001e70:	88fb      	ldrh	r3, [r7, #6]
 8001e72:	f003 030f 	and.w	r3, r3, #15
 8001e76:	3b04      	subs	r3, #4
 8001e78:	0112      	lsls	r2, r2, #4
 8001e7a:	b2d2      	uxtb	r2, r2
 8001e7c:	440b      	add	r3, r1
 8001e7e:	761a      	strb	r2, [r3, #24]
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr
 8001e8c:	e000e100 	.word	0xe000e100
 8001e90:	e000ed00 	.word	0xe000ed00

08001e94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b089      	sub	sp, #36	; 0x24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f003 0307 	and.w	r3, r3, #7
 8001ea6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	f1c3 0307 	rsb	r3, r3, #7
 8001eae:	2b04      	cmp	r3, #4
 8001eb0:	bf28      	it	cs
 8001eb2:	2304      	movcs	r3, #4
 8001eb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	3304      	adds	r3, #4
 8001eba:	2b06      	cmp	r3, #6
 8001ebc:	d902      	bls.n	8001ec4 <NVIC_EncodePriority+0x30>
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	3b03      	subs	r3, #3
 8001ec2:	e000      	b.n	8001ec6 <NVIC_EncodePriority+0x32>
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed2:	43da      	mvns	r2, r3
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	401a      	ands	r2, r3
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001edc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee6:	43d9      	mvns	r1, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eec:	4313      	orrs	r3, r2
         );
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3724      	adds	r7, #36	; 0x24
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
	...

08001efc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	3b01      	subs	r3, #1
 8001f08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f0c:	d301      	bcc.n	8001f12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e00f      	b.n	8001f32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f12:	4a0a      	ldr	r2, [pc, #40]	; (8001f3c <SysTick_Config+0x40>)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	3b01      	subs	r3, #1
 8001f18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f1a:	210f      	movs	r1, #15
 8001f1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f20:	f7ff ff8e 	bl	8001e40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f24:	4b05      	ldr	r3, [pc, #20]	; (8001f3c <SysTick_Config+0x40>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f2a:	4b04      	ldr	r3, [pc, #16]	; (8001f3c <SysTick_Config+0x40>)
 8001f2c:	2207      	movs	r2, #7
 8001f2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	e000e010 	.word	0xe000e010

08001f40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f7ff ff29 	bl	8001da0 <__NVIC_SetPriorityGrouping>
}
 8001f4e:	bf00      	nop
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b086      	sub	sp, #24
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	60b9      	str	r1, [r7, #8]
 8001f60:	607a      	str	r2, [r7, #4]
 8001f62:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f64:	f7ff ff40 	bl	8001de8 <__NVIC_GetPriorityGrouping>
 8001f68:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	68b9      	ldr	r1, [r7, #8]
 8001f6e:	6978      	ldr	r0, [r7, #20]
 8001f70:	f7ff ff90 	bl	8001e94 <NVIC_EncodePriority>
 8001f74:	4602      	mov	r2, r0
 8001f76:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f7a:	4611      	mov	r1, r2
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff ff5f 	bl	8001e40 <__NVIC_SetPriority>
}
 8001f82:	bf00      	nop
 8001f84:	3718      	adds	r7, #24
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b082      	sub	sp, #8
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	4603      	mov	r3, r0
 8001f92:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7ff ff33 	bl	8001e04 <__NVIC_EnableIRQ>
}
 8001f9e:	bf00      	nop
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b082      	sub	sp, #8
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f7ff ffa4 	bl	8001efc <SysTick_Config>
 8001fb4:	4603      	mov	r3, r0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
	...

08001fc0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d101      	bne.n	8001fd2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e054      	b.n	800207c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	7f5b      	ldrb	r3, [r3, #29]
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d105      	bne.n	8001fe8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f007 ff18 	bl	8009e18 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2202      	movs	r2, #2
 8001fec:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	791b      	ldrb	r3, [r3, #4]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d10c      	bne.n	8002010 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a22      	ldr	r2, [pc, #136]	; (8002084 <HAL_CRC_Init+0xc4>)
 8001ffc:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	689a      	ldr	r2, [r3, #8]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f022 0218 	bic.w	r2, r2, #24
 800200c:	609a      	str	r2, [r3, #8]
 800200e:	e00c      	b.n	800202a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6899      	ldr	r1, [r3, #8]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	461a      	mov	r2, r3
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 f834 	bl	8002088 <HAL_CRCEx_Polynomial_Set>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e028      	b.n	800207c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	795b      	ldrb	r3, [r3, #5]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d105      	bne.n	800203e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800203a:	611a      	str	r2, [r3, #16]
 800203c:	e004      	b.n	8002048 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	6912      	ldr	r2, [r2, #16]
 8002046:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	695a      	ldr	r2, [r3, #20]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	430a      	orrs	r2, r1
 800205c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	699a      	ldr	r2, [r3, #24]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	430a      	orrs	r2, r1
 8002072:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2201      	movs	r2, #1
 8002078:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800207a:	2300      	movs	r3, #0
}
 800207c:	4618      	mov	r0, r3
 800207e:	3708      	adds	r7, #8
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	04c11db7 	.word	0x04c11db7

08002088 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002088:	b480      	push	{r7}
 800208a:	b087      	sub	sp, #28
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	60b9      	str	r1, [r7, #8]
 8002092:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002094:	2300      	movs	r3, #0
 8002096:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002098:	231f      	movs	r3, #31
 800209a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800209c:	bf00      	nop
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	1e5a      	subs	r2, r3, #1
 80020a2:	613a      	str	r2, [r7, #16]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d009      	beq.n	80020bc <HAL_CRCEx_Polynomial_Set+0x34>
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	f003 031f 	and.w	r3, r3, #31
 80020ae:	68ba      	ldr	r2, [r7, #8]
 80020b0:	fa22 f303 	lsr.w	r3, r2, r3
 80020b4:	f003 0301 	and.w	r3, r3, #1
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d0f0      	beq.n	800209e <HAL_CRCEx_Polynomial_Set+0x16>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2b18      	cmp	r3, #24
 80020c0:	d846      	bhi.n	8002150 <HAL_CRCEx_Polynomial_Set+0xc8>
 80020c2:	a201      	add	r2, pc, #4	; (adr r2, 80020c8 <HAL_CRCEx_Polynomial_Set+0x40>)
 80020c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020c8:	08002157 	.word	0x08002157
 80020cc:	08002151 	.word	0x08002151
 80020d0:	08002151 	.word	0x08002151
 80020d4:	08002151 	.word	0x08002151
 80020d8:	08002151 	.word	0x08002151
 80020dc:	08002151 	.word	0x08002151
 80020e0:	08002151 	.word	0x08002151
 80020e4:	08002151 	.word	0x08002151
 80020e8:	08002145 	.word	0x08002145
 80020ec:	08002151 	.word	0x08002151
 80020f0:	08002151 	.word	0x08002151
 80020f4:	08002151 	.word	0x08002151
 80020f8:	08002151 	.word	0x08002151
 80020fc:	08002151 	.word	0x08002151
 8002100:	08002151 	.word	0x08002151
 8002104:	08002151 	.word	0x08002151
 8002108:	08002139 	.word	0x08002139
 800210c:	08002151 	.word	0x08002151
 8002110:	08002151 	.word	0x08002151
 8002114:	08002151 	.word	0x08002151
 8002118:	08002151 	.word	0x08002151
 800211c:	08002151 	.word	0x08002151
 8002120:	08002151 	.word	0x08002151
 8002124:	08002151 	.word	0x08002151
 8002128:	0800212d 	.word	0x0800212d
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	2b06      	cmp	r3, #6
 8002130:	d913      	bls.n	800215a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002136:	e010      	b.n	800215a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	2b07      	cmp	r3, #7
 800213c:	d90f      	bls.n	800215e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002142:	e00c      	b.n	800215e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	2b0f      	cmp	r3, #15
 8002148:	d90b      	bls.n	8002162 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800214e:	e008      	b.n	8002162 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	75fb      	strb	r3, [r7, #23]
      break;
 8002154:	e006      	b.n	8002164 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002156:	bf00      	nop
 8002158:	e004      	b.n	8002164 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800215a:	bf00      	nop
 800215c:	e002      	b.n	8002164 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800215e:	bf00      	nop
 8002160:	e000      	b.n	8002164 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002162:	bf00      	nop
  }
  if (status == HAL_OK)
 8002164:	7dfb      	ldrb	r3, [r7, #23]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d10d      	bne.n	8002186 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	68ba      	ldr	r2, [r7, #8]
 8002170:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f023 0118 	bic.w	r1, r3, #24
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	430a      	orrs	r2, r1
 8002184:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002186:	7dfb      	ldrb	r3, [r7, #23]
}
 8002188:	4618      	mov	r0, r3
 800218a:	371c      	adds	r7, #28
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b086      	sub	sp, #24
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  __IO uint32_t               *channelCounterPtr;
  DFSDM_Channel_HandleTypeDef **channelHandleTable;
  DFSDM_Channel_TypeDef       *channel0Instance;

  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d101      	bne.n	80021a6 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e0b4      	b.n	8002310 <HAL_DFSDM_ChannelInit+0x17c>
    channelCounterPtr  = &v_dfsdm2ChannelCounter;
    channelHandleTable = a_dfsdm2ChannelHandle;
    channel0Instance   = DFSDM2_Channel0;
  }
#else /* DFSDM2_Channel0 */
  channelCounterPtr  = &v_dfsdm1ChannelCounter;
 80021a6:	4b5c      	ldr	r3, [pc, #368]	; (8002318 <HAL_DFSDM_ChannelInit+0x184>)
 80021a8:	617b      	str	r3, [r7, #20]
  channelHandleTable = a_dfsdm1ChannelHandle;
 80021aa:	4b5c      	ldr	r3, [pc, #368]	; (800231c <HAL_DFSDM_ChannelInit+0x188>)
 80021ac:	613b      	str	r3, [r7, #16]
  channel0Instance   = DFSDM1_Channel0;
 80021ae:	4b5c      	ldr	r3, [pc, #368]	; (8002320 <HAL_DFSDM_ChannelInit+0x18c>)
 80021b0:	60fb      	str	r3, [r7, #12]
#endif /* DFSDM2_Channel0 */

  /* Check that channel has not been already initialized */
  if (channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f000 f9e0 	bl	800257c <DFSDM_GetChannelFromInstance>
 80021bc:	4603      	mov	r3, r0
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	693a      	ldr	r2, [r7, #16]
 80021c2:	4413      	add	r3, r2
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <HAL_DFSDM_ChannelInit+0x3a>
  {
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e0a0      	b.n	8002310 <HAL_DFSDM_ChannelInit+0x17c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f007 fe44 	bl	8009e5c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  (*channelCounterPtr)++;
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	1c5a      	adds	r2, r3, #1
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	601a      	str	r2, [r3, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(*channelCounterPtr == 1U)
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d125      	bne.n	8002232 <HAL_DFSDM_ChannelInit+0x9e>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	601a      	str	r2, [r3, #0]
    channel0Instance->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	431a      	orrs	r2, r3
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	601a      	str	r2, [r3, #0]

    /* Reset clock divider */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	791b      	ldrb	r3, [r3, #4]
 8002210:	2b01      	cmp	r3, #1
 8002212:	d108      	bne.n	8002226 <HAL_DFSDM_ChannelInit+0x92>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      channel0Instance->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	3b01      	subs	r3, #1
 800221e:	041b      	lsls	r3, r3, #16
 8002220:	431a      	orrs	r2, r3
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	601a      	str	r2, [r3, #0]
                                              DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    channel0Instance->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	601a      	str	r2, [r3, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8002240:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	6819      	ldr	r1, [r3, #0]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002250:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002256:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	430a      	orrs	r2, r1
 800225e:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f022 020f 	bic.w	r2, r2, #15
 800226e:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	6819      	ldr	r1, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800227e:	431a      	orrs	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	430a      	orrs	r2, r1
 8002286:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	689a      	ldr	r2, [r3, #8]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002296:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	6899      	ldr	r1, [r3, #8]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a6:	3b01      	subs	r3, #1
 80022a8:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80022aa:	431a      	orrs	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	430a      	orrs	r2, r1
 80022b2:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	685a      	ldr	r2, [r3, #4]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f002 0207 	and.w	r2, r2, #7
 80022c2:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	6859      	ldr	r1, [r3, #4]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ce:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d4:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80022d6:	431a      	orrs	r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	430a      	orrs	r2, r1
 80022de:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80022ee:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f000 f93d 	bl	800257c <DFSDM_GetChannelFromInstance>
 8002302:	4603      	mov	r3, r0
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	693a      	ldr	r2, [r7, #16]
 8002308:	4413      	add	r3, r2
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800230e:	2300      	movs	r3, #0
}
 8002310:	4618      	mov	r0, r3
 8002312:	3718      	adds	r7, #24
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	240009e0 	.word	0x240009e0
 800231c:	240009e4 	.word	0x240009e4
 8002320:	40017800 	.word	0x40017800

08002324 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  const DFSDM_Filter_TypeDef *filter0Instance;

  /* Check DFSDM Channel handle */
  if(hdfsdm_filter == NULL)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d101      	bne.n	8002336 <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e0c8      	b.n	80024c8 <HAL_DFSDM_FilterInit+0x1a4>
  else
  {
    filter0Instance = DFSDM2_Filter0;
  }
#else /* DFSDM2_Channel0 */
  filter0Instance = DFSDM1_Filter0;
 8002336:	4b66      	ldr	r3, [pc, #408]	; (80024d0 <HAL_DFSDM_FilterInit+0x1ac>)
 8002338:	60fb      	str	r3, [r7, #12]
#endif /* DFSDM2_Channel0 */

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == filter0Instance) &&
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	68fa      	ldr	r2, [r7, #12]
 8002340:	429a      	cmp	r2, r3
 8002342:	d109      	bne.n	8002358 <HAL_DFSDM_FilterInit+0x34>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == filter0Instance) &&
 8002348:	2b01      	cmp	r3, #1
 800234a:	d003      	beq.n	8002354 <HAL_DFSDM_FilterInit+0x30>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8002350:	2b01      	cmp	r3, #1
 8002352:	d101      	bne.n	8002358 <HAL_DFSDM_FilterInit+0x34>
  {
    return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e0b7      	b.n	80024c8 <HAL_DFSDM_FilterInit+0x1a4>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2201      	movs	r2, #1
 8002362:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f000 f8b3 	bl	80024dc <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8002384:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	7a1b      	ldrb	r3, [r3, #8]
 800238a:	2b01      	cmp	r3, #1
 800238c:	d108      	bne.n	80023a0 <HAL_DFSDM_FilterInit+0x7c>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800239c:	601a      	str	r2, [r3, #0]
 800239e:	e007      	b.n	80023b0 <HAL_DFSDM_FilterInit+0x8c>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80023ae:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	7a5b      	ldrb	r3, [r3, #9]
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d108      	bne.n	80023ca <HAL_DFSDM_FilterInit+0xa6>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80023c6:	601a      	str	r2, [r3, #0]
 80023c8:	e007      	b.n	80023da <HAL_DFSDM_FilterInit+0xb6>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80023d8:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	6819      	ldr	r1, [r3, #0]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	4b3b      	ldr	r3, [pc, #236]	; (80024d4 <HAL_DFSDM_FilterInit+0x1b0>)
 80023e6:	400b      	ands	r3, r1
 80023e8:	6013      	str	r3, [r2, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d108      	bne.n	8002404 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	6819      	ldr	r1, [r3, #0]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	695a      	ldr	r2, [r3, #20]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	430a      	orrs	r2, r1
 8002402:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	7c1b      	ldrb	r3, [r3, #16]
 8002408:	2b01      	cmp	r3, #1
 800240a:	d108      	bne.n	800241e <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f042 0210 	orr.w	r2, r2, #16
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	e007      	b.n	800242e <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f022 0210 	bic.w	r2, r2, #16
 800242c:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	7c5b      	ldrb	r3, [r3, #17]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d108      	bne.n	8002448 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f042 0220 	orr.w	r2, r2, #32
 8002444:	601a      	str	r2, [r3, #0]
 8002446:	e007      	b.n	8002458 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f022 0220 	bic.w	r2, r2, #32
 8002456:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	6959      	ldr	r1, [r3, #20]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	4b1d      	ldr	r3, [pc, #116]	; (80024d8 <HAL_DFSDM_FilterInit+0x1b4>)
 8002464:	400b      	ands	r3, r1
 8002466:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	6959      	ldr	r1, [r3, #20]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a1b      	ldr	r3, [r3, #32]
 8002476:	3b01      	subs	r3, #1
 8002478:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 800247a:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002480:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8002482:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	430a      	orrs	r2, r1
 800248a:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685a      	ldr	r2, [r3, #4]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	68da      	ldr	r2, [r3, #12]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	699a      	ldr	r2, [r3, #24]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	7c1a      	ldrb	r2, [r3, #16]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f042 0201 	orr.w	r2, r2, #1
 80024bc:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2201      	movs	r2, #1
 80024c2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3710      	adds	r7, #16
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	40017900 	.word	0x40017900
 80024d4:	ffff80f7 	.word	0xffff80f7
 80024d8:	1c00ff00 	.word	0x1c00ff00

080024dc <HAL_DFSDM_FilterMspInit>:
  * @brief  Initializes the DFSDM filter MSP.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the function is needed,
            the HAL_DFSDM_FilterMspInit could be implemented in the user file.
   */
}
 80024e4:	bf00      	nop
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b087      	sub	sp, #28
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024fc:	2300      	movs	r3, #0
 80024fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002506:	2b00      	cmp	r3, #0
 8002508:	d02c      	beq.n	8002564 <HAL_DFSDM_FilterConfigRegChannel+0x74>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8002510:	2bff      	cmp	r3, #255	; 0xff
 8002512:	d027      	beq.n	8002564 <HAL_DFSDM_FilterConfigRegChannel+0x74>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	6819      	ldr	r1, [r3, #0]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	4b16      	ldr	r3, [pc, #88]	; (8002578 <HAL_DFSDM_FilterConfigRegChannel+0x88>)
 8002520:	400b      	ands	r3, r1
 8002522:	6013      	str	r3, [r2, #0]
    if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2b01      	cmp	r3, #1
 8002528:	d10d      	bne.n	8002546 <HAL_DFSDM_FilterConfigRegChannel+0x56>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	021b      	lsls	r3, r3, #8
 8002534:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002538:	431a      	orrs	r2, r3
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002542:	601a      	str	r2, [r3, #0]
 8002544:	e00a      	b.n	800255c <HAL_DFSDM_FilterConfigRegChannel+0x6c>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) ((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	6819      	ldr	r1, [r3, #0]
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	021b      	lsls	r3, r3, #8
 8002550:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	430a      	orrs	r2, r1
 800255a:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	631a      	str	r2, [r3, #48]	; 0x30
 8002562:	e001      	b.n	8002568 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  }
  else
  {
    status = HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8002568:	7dfb      	ldrb	r3, [r7, #23]
}
 800256a:	4618      	mov	r0, r3
 800256c:	371c      	adds	r7, #28
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	f8fbffff 	.word	0xf8fbffff

0800257c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef* Instance)
{
 800257c:	b480      	push	{r7}
 800257e:	b085      	sub	sp, #20
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if(Instance == DFSDM1_Channel0)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	4a1c      	ldr	r2, [pc, #112]	; (80025f8 <DFSDM_GetChannelFromInstance+0x7c>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d102      	bne.n	8002592 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 800258c:	2300      	movs	r3, #0
 800258e:	60fb      	str	r3, [r7, #12]
 8002590:	e02b      	b.n	80025ea <DFSDM_GetChannelFromInstance+0x6e>
  else if (Instance == DFSDM2_Channel1)
  {
    channel = 1;
  }
#endif /* DFSDM2_Channel0 */
  else if(Instance == DFSDM1_Channel1)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a19      	ldr	r2, [pc, #100]	; (80025fc <DFSDM_GetChannelFromInstance+0x80>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d102      	bne.n	80025a0 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800259a:	2301      	movs	r3, #1
 800259c:	60fb      	str	r3, [r7, #12]
 800259e:	e024      	b.n	80025ea <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel2)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	4a17      	ldr	r2, [pc, #92]	; (8002600 <DFSDM_GetChannelFromInstance+0x84>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d102      	bne.n	80025ae <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80025a8:	2302      	movs	r3, #2
 80025aa:	60fb      	str	r3, [r7, #12]
 80025ac:	e01d      	b.n	80025ea <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel3)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a14      	ldr	r2, [pc, #80]	; (8002604 <DFSDM_GetChannelFromInstance+0x88>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d102      	bne.n	80025bc <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 3;
 80025b6:	2303      	movs	r3, #3
 80025b8:	60fb      	str	r3, [r7, #12]
 80025ba:	e016      	b.n	80025ea <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel4)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4a12      	ldr	r2, [pc, #72]	; (8002608 <DFSDM_GetChannelFromInstance+0x8c>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d102      	bne.n	80025ca <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 4;
 80025c4:	2304      	movs	r3, #4
 80025c6:	60fb      	str	r3, [r7, #12]
 80025c8:	e00f      	b.n	80025ea <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel5)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a0f      	ldr	r2, [pc, #60]	; (800260c <DFSDM_GetChannelFromInstance+0x90>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d102      	bne.n	80025d8 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 5;
 80025d2:	2305      	movs	r3, #5
 80025d4:	60fb      	str	r3, [r7, #12]
 80025d6:	e008      	b.n	80025ea <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel6)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	4a0d      	ldr	r2, [pc, #52]	; (8002610 <DFSDM_GetChannelFromInstance+0x94>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d102      	bne.n	80025e6 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 6;
 80025e0:	2306      	movs	r3, #6
 80025e2:	60fb      	str	r3, [r7, #12]
 80025e4:	e001      	b.n	80025ea <DFSDM_GetChannelFromInstance+0x6e>
  }
  else /* DFSDM1_Channel7 */
  {
    channel = 7;
 80025e6:	2307      	movs	r3, #7
 80025e8:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80025ea:	68fb      	ldr	r3, [r7, #12]
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3714      	adds	r7, #20
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr
 80025f8:	40017800 	.word	0x40017800
 80025fc:	40017820 	.word	0x40017820
 8002600:	40017840 	.word	0x40017840
 8002604:	40017860 	.word	0x40017860
 8002608:	40017880 	.word	0x40017880
 800260c:	400178a0 	.word	0x400178a0
 8002610:	400178c0 	.word	0x400178c0

08002614 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b086      	sub	sp, #24
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800261c:	f7ff fbb4 	bl	8001d88 <HAL_GetTick>
 8002620:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d101      	bne.n	800262c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e314      	b.n	8002c56 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a66      	ldr	r2, [pc, #408]	; (80027cc <HAL_DMA_Init+0x1b8>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d04a      	beq.n	80026cc <HAL_DMA_Init+0xb8>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a65      	ldr	r2, [pc, #404]	; (80027d0 <HAL_DMA_Init+0x1bc>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d045      	beq.n	80026cc <HAL_DMA_Init+0xb8>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a63      	ldr	r2, [pc, #396]	; (80027d4 <HAL_DMA_Init+0x1c0>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d040      	beq.n	80026cc <HAL_DMA_Init+0xb8>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a62      	ldr	r2, [pc, #392]	; (80027d8 <HAL_DMA_Init+0x1c4>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d03b      	beq.n	80026cc <HAL_DMA_Init+0xb8>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a60      	ldr	r2, [pc, #384]	; (80027dc <HAL_DMA_Init+0x1c8>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d036      	beq.n	80026cc <HAL_DMA_Init+0xb8>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a5f      	ldr	r2, [pc, #380]	; (80027e0 <HAL_DMA_Init+0x1cc>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d031      	beq.n	80026cc <HAL_DMA_Init+0xb8>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a5d      	ldr	r2, [pc, #372]	; (80027e4 <HAL_DMA_Init+0x1d0>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d02c      	beq.n	80026cc <HAL_DMA_Init+0xb8>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a5c      	ldr	r2, [pc, #368]	; (80027e8 <HAL_DMA_Init+0x1d4>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d027      	beq.n	80026cc <HAL_DMA_Init+0xb8>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a5a      	ldr	r2, [pc, #360]	; (80027ec <HAL_DMA_Init+0x1d8>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d022      	beq.n	80026cc <HAL_DMA_Init+0xb8>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a59      	ldr	r2, [pc, #356]	; (80027f0 <HAL_DMA_Init+0x1dc>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d01d      	beq.n	80026cc <HAL_DMA_Init+0xb8>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a57      	ldr	r2, [pc, #348]	; (80027f4 <HAL_DMA_Init+0x1e0>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d018      	beq.n	80026cc <HAL_DMA_Init+0xb8>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a56      	ldr	r2, [pc, #344]	; (80027f8 <HAL_DMA_Init+0x1e4>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d013      	beq.n	80026cc <HAL_DMA_Init+0xb8>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a54      	ldr	r2, [pc, #336]	; (80027fc <HAL_DMA_Init+0x1e8>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d00e      	beq.n	80026cc <HAL_DMA_Init+0xb8>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a53      	ldr	r2, [pc, #332]	; (8002800 <HAL_DMA_Init+0x1ec>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d009      	beq.n	80026cc <HAL_DMA_Init+0xb8>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a51      	ldr	r2, [pc, #324]	; (8002804 <HAL_DMA_Init+0x1f0>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d004      	beq.n	80026cc <HAL_DMA_Init+0xb8>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a50      	ldr	r2, [pc, #320]	; (8002808 <HAL_DMA_Init+0x1f4>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d101      	bne.n	80026d0 <HAL_DMA_Init+0xbc>
 80026cc:	2301      	movs	r3, #1
 80026ce:	e000      	b.n	80026d2 <HAL_DMA_Init+0xbe>
 80026d0:	2300      	movs	r3, #0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	f000 813c 	beq.w	8002950 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2202      	movs	r2, #2
 80026dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a37      	ldr	r2, [pc, #220]	; (80027cc <HAL_DMA_Init+0x1b8>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d04a      	beq.n	8002788 <HAL_DMA_Init+0x174>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a36      	ldr	r2, [pc, #216]	; (80027d0 <HAL_DMA_Init+0x1bc>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d045      	beq.n	8002788 <HAL_DMA_Init+0x174>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a34      	ldr	r2, [pc, #208]	; (80027d4 <HAL_DMA_Init+0x1c0>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d040      	beq.n	8002788 <HAL_DMA_Init+0x174>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a33      	ldr	r2, [pc, #204]	; (80027d8 <HAL_DMA_Init+0x1c4>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d03b      	beq.n	8002788 <HAL_DMA_Init+0x174>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a31      	ldr	r2, [pc, #196]	; (80027dc <HAL_DMA_Init+0x1c8>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d036      	beq.n	8002788 <HAL_DMA_Init+0x174>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a30      	ldr	r2, [pc, #192]	; (80027e0 <HAL_DMA_Init+0x1cc>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d031      	beq.n	8002788 <HAL_DMA_Init+0x174>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a2e      	ldr	r2, [pc, #184]	; (80027e4 <HAL_DMA_Init+0x1d0>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d02c      	beq.n	8002788 <HAL_DMA_Init+0x174>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a2d      	ldr	r2, [pc, #180]	; (80027e8 <HAL_DMA_Init+0x1d4>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d027      	beq.n	8002788 <HAL_DMA_Init+0x174>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a2b      	ldr	r2, [pc, #172]	; (80027ec <HAL_DMA_Init+0x1d8>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d022      	beq.n	8002788 <HAL_DMA_Init+0x174>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a2a      	ldr	r2, [pc, #168]	; (80027f0 <HAL_DMA_Init+0x1dc>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d01d      	beq.n	8002788 <HAL_DMA_Init+0x174>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a28      	ldr	r2, [pc, #160]	; (80027f4 <HAL_DMA_Init+0x1e0>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d018      	beq.n	8002788 <HAL_DMA_Init+0x174>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a27      	ldr	r2, [pc, #156]	; (80027f8 <HAL_DMA_Init+0x1e4>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d013      	beq.n	8002788 <HAL_DMA_Init+0x174>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a25      	ldr	r2, [pc, #148]	; (80027fc <HAL_DMA_Init+0x1e8>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d00e      	beq.n	8002788 <HAL_DMA_Init+0x174>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a24      	ldr	r2, [pc, #144]	; (8002800 <HAL_DMA_Init+0x1ec>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d009      	beq.n	8002788 <HAL_DMA_Init+0x174>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a22      	ldr	r2, [pc, #136]	; (8002804 <HAL_DMA_Init+0x1f0>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d004      	beq.n	8002788 <HAL_DMA_Init+0x174>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a21      	ldr	r2, [pc, #132]	; (8002808 <HAL_DMA_Init+0x1f4>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d108      	bne.n	800279a <HAL_DMA_Init+0x186>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f022 0201 	bic.w	r2, r2, #1
 8002796:	601a      	str	r2, [r3, #0]
 8002798:	e007      	b.n	80027aa <HAL_DMA_Init+0x196>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f022 0201 	bic.w	r2, r2, #1
 80027a8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80027aa:	e02f      	b.n	800280c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027ac:	f7ff faec 	bl	8001d88 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b05      	cmp	r3, #5
 80027b8:	d928      	bls.n	800280c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2220      	movs	r2, #32
 80027be:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2203      	movs	r2, #3
 80027c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e244      	b.n	8002c56 <HAL_DMA_Init+0x642>
 80027cc:	40020010 	.word	0x40020010
 80027d0:	40020028 	.word	0x40020028
 80027d4:	40020040 	.word	0x40020040
 80027d8:	40020058 	.word	0x40020058
 80027dc:	40020070 	.word	0x40020070
 80027e0:	40020088 	.word	0x40020088
 80027e4:	400200a0 	.word	0x400200a0
 80027e8:	400200b8 	.word	0x400200b8
 80027ec:	40020410 	.word	0x40020410
 80027f0:	40020428 	.word	0x40020428
 80027f4:	40020440 	.word	0x40020440
 80027f8:	40020458 	.word	0x40020458
 80027fc:	40020470 	.word	0x40020470
 8002800:	40020488 	.word	0x40020488
 8002804:	400204a0 	.word	0x400204a0
 8002808:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0301 	and.w	r3, r3, #1
 8002816:	2b00      	cmp	r3, #0
 8002818:	d1c8      	bne.n	80027ac <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002822:	697a      	ldr	r2, [r7, #20]
 8002824:	4b84      	ldr	r3, [pc, #528]	; (8002a38 <HAL_DMA_Init+0x424>)
 8002826:	4013      	ands	r3, r2
 8002828:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002832:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	691b      	ldr	r3, [r3, #16]
 8002838:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800283e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	699b      	ldr	r3, [r3, #24]
 8002844:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800284a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a1b      	ldr	r3, [r3, #32]
 8002850:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002852:	697a      	ldr	r2, [r7, #20]
 8002854:	4313      	orrs	r3, r2
 8002856:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285c:	2b04      	cmp	r3, #4
 800285e:	d107      	bne.n	8002870 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002868:	4313      	orrs	r3, r2
 800286a:	697a      	ldr	r2, [r7, #20]
 800286c:	4313      	orrs	r3, r2
 800286e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	2b28      	cmp	r3, #40	; 0x28
 8002876:	d903      	bls.n	8002880 <HAL_DMA_Init+0x26c>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	2b2e      	cmp	r3, #46	; 0x2e
 800287e:	d91f      	bls.n	80028c0 <HAL_DMA_Init+0x2ac>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	2b3e      	cmp	r3, #62	; 0x3e
 8002886:	d903      	bls.n	8002890 <HAL_DMA_Init+0x27c>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	2b42      	cmp	r3, #66	; 0x42
 800288e:	d917      	bls.n	80028c0 <HAL_DMA_Init+0x2ac>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	2b46      	cmp	r3, #70	; 0x46
 8002896:	d903      	bls.n	80028a0 <HAL_DMA_Init+0x28c>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	2b48      	cmp	r3, #72	; 0x48
 800289e:	d90f      	bls.n	80028c0 <HAL_DMA_Init+0x2ac>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	2b4e      	cmp	r3, #78	; 0x4e
 80028a6:	d903      	bls.n	80028b0 <HAL_DMA_Init+0x29c>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	2b52      	cmp	r3, #82	; 0x52
 80028ae:	d907      	bls.n	80028c0 <HAL_DMA_Init+0x2ac>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	2b73      	cmp	r3, #115	; 0x73
 80028b6:	d905      	bls.n	80028c4 <HAL_DMA_Init+0x2b0>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	2b77      	cmp	r3, #119	; 0x77
 80028be:	d801      	bhi.n	80028c4 <HAL_DMA_Init+0x2b0>
 80028c0:	2301      	movs	r3, #1
 80028c2:	e000      	b.n	80028c6 <HAL_DMA_Init+0x2b2>
 80028c4:	2300      	movs	r3, #0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d003      	beq.n	80028d2 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028d0:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	697a      	ldr	r2, [r7, #20]
 80028d8:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	695b      	ldr	r3, [r3, #20]
 80028e0:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	f023 0307 	bic.w	r3, r3, #7
 80028e8:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ee:	697a      	ldr	r2, [r7, #20]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f8:	2b04      	cmp	r3, #4
 80028fa:	d117      	bne.n	800292c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002900:	697a      	ldr	r2, [r7, #20]
 8002902:	4313      	orrs	r3, r2
 8002904:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800290a:	2b00      	cmp	r3, #0
 800290c:	d00e      	beq.n	800292c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f002 fcf0 	bl	80052f4 <DMA_CheckFifoParam>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d008      	beq.n	800292c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2240      	movs	r2, #64	; 0x40
 800291e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e194      	b.n	8002c56 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	697a      	ldr	r2, [r7, #20]
 8002932:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f002 fc2b 	bl	8005190 <DMA_CalcBaseAndBitshift>
 800293a:	4603      	mov	r3, r0
 800293c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002942:	f003 031f 	and.w	r3, r3, #31
 8002946:	223f      	movs	r2, #63	; 0x3f
 8002948:	409a      	lsls	r2, r3
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	609a      	str	r2, [r3, #8]
 800294e:	e0ca      	b.n	8002ae6 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a39      	ldr	r2, [pc, #228]	; (8002a3c <HAL_DMA_Init+0x428>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d022      	beq.n	80029a0 <HAL_DMA_Init+0x38c>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a38      	ldr	r2, [pc, #224]	; (8002a40 <HAL_DMA_Init+0x42c>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d01d      	beq.n	80029a0 <HAL_DMA_Init+0x38c>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a36      	ldr	r2, [pc, #216]	; (8002a44 <HAL_DMA_Init+0x430>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d018      	beq.n	80029a0 <HAL_DMA_Init+0x38c>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a35      	ldr	r2, [pc, #212]	; (8002a48 <HAL_DMA_Init+0x434>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d013      	beq.n	80029a0 <HAL_DMA_Init+0x38c>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a33      	ldr	r2, [pc, #204]	; (8002a4c <HAL_DMA_Init+0x438>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d00e      	beq.n	80029a0 <HAL_DMA_Init+0x38c>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a32      	ldr	r2, [pc, #200]	; (8002a50 <HAL_DMA_Init+0x43c>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d009      	beq.n	80029a0 <HAL_DMA_Init+0x38c>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a30      	ldr	r2, [pc, #192]	; (8002a54 <HAL_DMA_Init+0x440>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d004      	beq.n	80029a0 <HAL_DMA_Init+0x38c>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a2f      	ldr	r2, [pc, #188]	; (8002a58 <HAL_DMA_Init+0x444>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d101      	bne.n	80029a4 <HAL_DMA_Init+0x390>
 80029a0:	2301      	movs	r3, #1
 80029a2:	e000      	b.n	80029a6 <HAL_DMA_Init+0x392>
 80029a4:	2300      	movs	r3, #0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	f000 8094 	beq.w	8002ad4 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a22      	ldr	r2, [pc, #136]	; (8002a3c <HAL_DMA_Init+0x428>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d021      	beq.n	80029fa <HAL_DMA_Init+0x3e6>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a21      	ldr	r2, [pc, #132]	; (8002a40 <HAL_DMA_Init+0x42c>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d01c      	beq.n	80029fa <HAL_DMA_Init+0x3e6>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a1f      	ldr	r2, [pc, #124]	; (8002a44 <HAL_DMA_Init+0x430>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d017      	beq.n	80029fa <HAL_DMA_Init+0x3e6>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a1e      	ldr	r2, [pc, #120]	; (8002a48 <HAL_DMA_Init+0x434>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d012      	beq.n	80029fa <HAL_DMA_Init+0x3e6>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a1c      	ldr	r2, [pc, #112]	; (8002a4c <HAL_DMA_Init+0x438>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d00d      	beq.n	80029fa <HAL_DMA_Init+0x3e6>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a1b      	ldr	r2, [pc, #108]	; (8002a50 <HAL_DMA_Init+0x43c>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d008      	beq.n	80029fa <HAL_DMA_Init+0x3e6>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a19      	ldr	r2, [pc, #100]	; (8002a54 <HAL_DMA_Init+0x440>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d003      	beq.n	80029fa <HAL_DMA_Init+0x3e6>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a18      	ldr	r2, [pc, #96]	; (8002a58 <HAL_DMA_Init+0x444>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2202      	movs	r2, #2
 8002a00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002a14:	697a      	ldr	r2, [r7, #20]
 8002a16:	4b11      	ldr	r3, [pc, #68]	; (8002a5c <HAL_DMA_Init+0x448>)
 8002a18:	4013      	ands	r3, r2
 8002a1a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	2b40      	cmp	r3, #64	; 0x40
 8002a22:	d01d      	beq.n	8002a60 <HAL_DMA_Init+0x44c>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	2b80      	cmp	r3, #128	; 0x80
 8002a2a:	d102      	bne.n	8002a32 <HAL_DMA_Init+0x41e>
 8002a2c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002a30:	e017      	b.n	8002a62 <HAL_DMA_Init+0x44e>
 8002a32:	2300      	movs	r3, #0
 8002a34:	e015      	b.n	8002a62 <HAL_DMA_Init+0x44e>
 8002a36:	bf00      	nop
 8002a38:	fe10803f 	.word	0xfe10803f
 8002a3c:	58025408 	.word	0x58025408
 8002a40:	5802541c 	.word	0x5802541c
 8002a44:	58025430 	.word	0x58025430
 8002a48:	58025444 	.word	0x58025444
 8002a4c:	58025458 	.word	0x58025458
 8002a50:	5802546c 	.word	0x5802546c
 8002a54:	58025480 	.word	0x58025480
 8002a58:	58025494 	.word	0x58025494
 8002a5c:	fffe000f 	.word	0xfffe000f
 8002a60:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	68d2      	ldr	r2, [r2, #12]
 8002a66:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002a68:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002a70:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	695b      	ldr	r3, [r3, #20]
 8002a76:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002a78:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	699b      	ldr	r3, [r3, #24]
 8002a7e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002a80:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	69db      	ldr	r3, [r3, #28]
 8002a86:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002a88:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a1b      	ldr	r3, [r3, #32]
 8002a8e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002a90:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002a92:	697a      	ldr	r2, [r7, #20]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	697a      	ldr	r2, [r7, #20]
 8002a9e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	4b6e      	ldr	r3, [pc, #440]	; (8002c60 <HAL_DMA_Init+0x64c>)
 8002aa8:	4413      	add	r3, r2
 8002aaa:	4a6e      	ldr	r2, [pc, #440]	; (8002c64 <HAL_DMA_Init+0x650>)
 8002aac:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab0:	091b      	lsrs	r3, r3, #4
 8002ab2:	009a      	lsls	r2, r3, #2
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f002 fb69 	bl	8005190 <DMA_CalcBaseAndBitshift>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac6:	f003 031f 	and.w	r3, r3, #31
 8002aca:	2201      	movs	r2, #1
 8002acc:	409a      	lsls	r2, r3
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	605a      	str	r2, [r3, #4]
 8002ad2:	e008      	b.n	8002ae6 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2240      	movs	r2, #64	; 0x40
 8002ad8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2203      	movs	r2, #3
 8002ade:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e0b7      	b.n	8002c56 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a5f      	ldr	r2, [pc, #380]	; (8002c68 <HAL_DMA_Init+0x654>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d072      	beq.n	8002bd6 <HAL_DMA_Init+0x5c2>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a5d      	ldr	r2, [pc, #372]	; (8002c6c <HAL_DMA_Init+0x658>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d06d      	beq.n	8002bd6 <HAL_DMA_Init+0x5c2>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a5c      	ldr	r2, [pc, #368]	; (8002c70 <HAL_DMA_Init+0x65c>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d068      	beq.n	8002bd6 <HAL_DMA_Init+0x5c2>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a5a      	ldr	r2, [pc, #360]	; (8002c74 <HAL_DMA_Init+0x660>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d063      	beq.n	8002bd6 <HAL_DMA_Init+0x5c2>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a59      	ldr	r2, [pc, #356]	; (8002c78 <HAL_DMA_Init+0x664>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d05e      	beq.n	8002bd6 <HAL_DMA_Init+0x5c2>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a57      	ldr	r2, [pc, #348]	; (8002c7c <HAL_DMA_Init+0x668>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d059      	beq.n	8002bd6 <HAL_DMA_Init+0x5c2>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a56      	ldr	r2, [pc, #344]	; (8002c80 <HAL_DMA_Init+0x66c>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d054      	beq.n	8002bd6 <HAL_DMA_Init+0x5c2>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a54      	ldr	r2, [pc, #336]	; (8002c84 <HAL_DMA_Init+0x670>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d04f      	beq.n	8002bd6 <HAL_DMA_Init+0x5c2>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a53      	ldr	r2, [pc, #332]	; (8002c88 <HAL_DMA_Init+0x674>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d04a      	beq.n	8002bd6 <HAL_DMA_Init+0x5c2>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a51      	ldr	r2, [pc, #324]	; (8002c8c <HAL_DMA_Init+0x678>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d045      	beq.n	8002bd6 <HAL_DMA_Init+0x5c2>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a50      	ldr	r2, [pc, #320]	; (8002c90 <HAL_DMA_Init+0x67c>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d040      	beq.n	8002bd6 <HAL_DMA_Init+0x5c2>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a4e      	ldr	r2, [pc, #312]	; (8002c94 <HAL_DMA_Init+0x680>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d03b      	beq.n	8002bd6 <HAL_DMA_Init+0x5c2>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a4d      	ldr	r2, [pc, #308]	; (8002c98 <HAL_DMA_Init+0x684>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d036      	beq.n	8002bd6 <HAL_DMA_Init+0x5c2>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a4b      	ldr	r2, [pc, #300]	; (8002c9c <HAL_DMA_Init+0x688>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d031      	beq.n	8002bd6 <HAL_DMA_Init+0x5c2>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a4a      	ldr	r2, [pc, #296]	; (8002ca0 <HAL_DMA_Init+0x68c>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d02c      	beq.n	8002bd6 <HAL_DMA_Init+0x5c2>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a48      	ldr	r2, [pc, #288]	; (8002ca4 <HAL_DMA_Init+0x690>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d027      	beq.n	8002bd6 <HAL_DMA_Init+0x5c2>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a47      	ldr	r2, [pc, #284]	; (8002ca8 <HAL_DMA_Init+0x694>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d022      	beq.n	8002bd6 <HAL_DMA_Init+0x5c2>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a45      	ldr	r2, [pc, #276]	; (8002cac <HAL_DMA_Init+0x698>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d01d      	beq.n	8002bd6 <HAL_DMA_Init+0x5c2>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a44      	ldr	r2, [pc, #272]	; (8002cb0 <HAL_DMA_Init+0x69c>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d018      	beq.n	8002bd6 <HAL_DMA_Init+0x5c2>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a42      	ldr	r2, [pc, #264]	; (8002cb4 <HAL_DMA_Init+0x6a0>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d013      	beq.n	8002bd6 <HAL_DMA_Init+0x5c2>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a41      	ldr	r2, [pc, #260]	; (8002cb8 <HAL_DMA_Init+0x6a4>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d00e      	beq.n	8002bd6 <HAL_DMA_Init+0x5c2>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a3f      	ldr	r2, [pc, #252]	; (8002cbc <HAL_DMA_Init+0x6a8>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d009      	beq.n	8002bd6 <HAL_DMA_Init+0x5c2>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a3e      	ldr	r2, [pc, #248]	; (8002cc0 <HAL_DMA_Init+0x6ac>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d004      	beq.n	8002bd6 <HAL_DMA_Init+0x5c2>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a3c      	ldr	r2, [pc, #240]	; (8002cc4 <HAL_DMA_Init+0x6b0>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d101      	bne.n	8002bda <HAL_DMA_Init+0x5c6>
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e000      	b.n	8002bdc <HAL_DMA_Init+0x5c8>
 8002bda:	2300      	movs	r3, #0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d032      	beq.n	8002c46 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f002 fc03 	bl	80053ec <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	2b80      	cmp	r3, #128	; 0x80
 8002bec:	d102      	bne.n	8002bf4 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	685a      	ldr	r2, [r3, #4]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bfc:	b2d2      	uxtb	r2, r2
 8002bfe:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002c08:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d010      	beq.n	8002c34 <HAL_DMA_Init+0x620>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	2b08      	cmp	r3, #8
 8002c18:	d80c      	bhi.n	8002c34 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f002 fc80 	bl	8005520 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c24:	2200      	movs	r2, #0
 8002c26:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002c30:	605a      	str	r2, [r3, #4]
 8002c32:	e008      	b.n	8002c46 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3718      	adds	r7, #24
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	a7fdabf8 	.word	0xa7fdabf8
 8002c64:	cccccccd 	.word	0xcccccccd
 8002c68:	40020010 	.word	0x40020010
 8002c6c:	40020028 	.word	0x40020028
 8002c70:	40020040 	.word	0x40020040
 8002c74:	40020058 	.word	0x40020058
 8002c78:	40020070 	.word	0x40020070
 8002c7c:	40020088 	.word	0x40020088
 8002c80:	400200a0 	.word	0x400200a0
 8002c84:	400200b8 	.word	0x400200b8
 8002c88:	40020410 	.word	0x40020410
 8002c8c:	40020428 	.word	0x40020428
 8002c90:	40020440 	.word	0x40020440
 8002c94:	40020458 	.word	0x40020458
 8002c98:	40020470 	.word	0x40020470
 8002c9c:	40020488 	.word	0x40020488
 8002ca0:	400204a0 	.word	0x400204a0
 8002ca4:	400204b8 	.word	0x400204b8
 8002ca8:	58025408 	.word	0x58025408
 8002cac:	5802541c 	.word	0x5802541c
 8002cb0:	58025430 	.word	0x58025430
 8002cb4:	58025444 	.word	0x58025444
 8002cb8:	58025458 	.word	0x58025458
 8002cbc:	5802546c 	.word	0x5802546c
 8002cc0:	58025480 	.word	0x58025480
 8002cc4:	58025494 	.word	0x58025494

08002cc8 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d101      	bne.n	8002cda <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e1a8      	b.n	800302c <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a82      	ldr	r2, [pc, #520]	; (8002ee8 <HAL_DMA_DeInit+0x220>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d04a      	beq.n	8002d7a <HAL_DMA_DeInit+0xb2>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a80      	ldr	r2, [pc, #512]	; (8002eec <HAL_DMA_DeInit+0x224>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d045      	beq.n	8002d7a <HAL_DMA_DeInit+0xb2>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a7f      	ldr	r2, [pc, #508]	; (8002ef0 <HAL_DMA_DeInit+0x228>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d040      	beq.n	8002d7a <HAL_DMA_DeInit+0xb2>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a7d      	ldr	r2, [pc, #500]	; (8002ef4 <HAL_DMA_DeInit+0x22c>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d03b      	beq.n	8002d7a <HAL_DMA_DeInit+0xb2>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a7c      	ldr	r2, [pc, #496]	; (8002ef8 <HAL_DMA_DeInit+0x230>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d036      	beq.n	8002d7a <HAL_DMA_DeInit+0xb2>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a7a      	ldr	r2, [pc, #488]	; (8002efc <HAL_DMA_DeInit+0x234>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d031      	beq.n	8002d7a <HAL_DMA_DeInit+0xb2>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a79      	ldr	r2, [pc, #484]	; (8002f00 <HAL_DMA_DeInit+0x238>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d02c      	beq.n	8002d7a <HAL_DMA_DeInit+0xb2>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a77      	ldr	r2, [pc, #476]	; (8002f04 <HAL_DMA_DeInit+0x23c>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d027      	beq.n	8002d7a <HAL_DMA_DeInit+0xb2>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a76      	ldr	r2, [pc, #472]	; (8002f08 <HAL_DMA_DeInit+0x240>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d022      	beq.n	8002d7a <HAL_DMA_DeInit+0xb2>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a74      	ldr	r2, [pc, #464]	; (8002f0c <HAL_DMA_DeInit+0x244>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d01d      	beq.n	8002d7a <HAL_DMA_DeInit+0xb2>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a73      	ldr	r2, [pc, #460]	; (8002f10 <HAL_DMA_DeInit+0x248>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d018      	beq.n	8002d7a <HAL_DMA_DeInit+0xb2>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a71      	ldr	r2, [pc, #452]	; (8002f14 <HAL_DMA_DeInit+0x24c>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d013      	beq.n	8002d7a <HAL_DMA_DeInit+0xb2>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a70      	ldr	r2, [pc, #448]	; (8002f18 <HAL_DMA_DeInit+0x250>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d00e      	beq.n	8002d7a <HAL_DMA_DeInit+0xb2>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a6e      	ldr	r2, [pc, #440]	; (8002f1c <HAL_DMA_DeInit+0x254>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d009      	beq.n	8002d7a <HAL_DMA_DeInit+0xb2>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a6d      	ldr	r2, [pc, #436]	; (8002f20 <HAL_DMA_DeInit+0x258>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d004      	beq.n	8002d7a <HAL_DMA_DeInit+0xb2>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a6b      	ldr	r2, [pc, #428]	; (8002f24 <HAL_DMA_DeInit+0x25c>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d108      	bne.n	8002d8c <HAL_DMA_DeInit+0xc4>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f022 0201 	bic.w	r2, r2, #1
 8002d88:	601a      	str	r2, [r3, #0]
 8002d8a:	e007      	b.n	8002d9c <HAL_DMA_DeInit+0xd4>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f022 0201 	bic.w	r2, r2, #1
 8002d9a:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a51      	ldr	r2, [pc, #324]	; (8002ee8 <HAL_DMA_DeInit+0x220>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d04a      	beq.n	8002e3c <HAL_DMA_DeInit+0x174>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a50      	ldr	r2, [pc, #320]	; (8002eec <HAL_DMA_DeInit+0x224>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d045      	beq.n	8002e3c <HAL_DMA_DeInit+0x174>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a4e      	ldr	r2, [pc, #312]	; (8002ef0 <HAL_DMA_DeInit+0x228>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d040      	beq.n	8002e3c <HAL_DMA_DeInit+0x174>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a4d      	ldr	r2, [pc, #308]	; (8002ef4 <HAL_DMA_DeInit+0x22c>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d03b      	beq.n	8002e3c <HAL_DMA_DeInit+0x174>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a4b      	ldr	r2, [pc, #300]	; (8002ef8 <HAL_DMA_DeInit+0x230>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d036      	beq.n	8002e3c <HAL_DMA_DeInit+0x174>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a4a      	ldr	r2, [pc, #296]	; (8002efc <HAL_DMA_DeInit+0x234>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d031      	beq.n	8002e3c <HAL_DMA_DeInit+0x174>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a48      	ldr	r2, [pc, #288]	; (8002f00 <HAL_DMA_DeInit+0x238>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d02c      	beq.n	8002e3c <HAL_DMA_DeInit+0x174>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a47      	ldr	r2, [pc, #284]	; (8002f04 <HAL_DMA_DeInit+0x23c>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d027      	beq.n	8002e3c <HAL_DMA_DeInit+0x174>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a45      	ldr	r2, [pc, #276]	; (8002f08 <HAL_DMA_DeInit+0x240>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d022      	beq.n	8002e3c <HAL_DMA_DeInit+0x174>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a44      	ldr	r2, [pc, #272]	; (8002f0c <HAL_DMA_DeInit+0x244>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d01d      	beq.n	8002e3c <HAL_DMA_DeInit+0x174>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a42      	ldr	r2, [pc, #264]	; (8002f10 <HAL_DMA_DeInit+0x248>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d018      	beq.n	8002e3c <HAL_DMA_DeInit+0x174>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a41      	ldr	r2, [pc, #260]	; (8002f14 <HAL_DMA_DeInit+0x24c>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d013      	beq.n	8002e3c <HAL_DMA_DeInit+0x174>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a3f      	ldr	r2, [pc, #252]	; (8002f18 <HAL_DMA_DeInit+0x250>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d00e      	beq.n	8002e3c <HAL_DMA_DeInit+0x174>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a3e      	ldr	r2, [pc, #248]	; (8002f1c <HAL_DMA_DeInit+0x254>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d009      	beq.n	8002e3c <HAL_DMA_DeInit+0x174>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a3c      	ldr	r2, [pc, #240]	; (8002f20 <HAL_DMA_DeInit+0x258>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d004      	beq.n	8002e3c <HAL_DMA_DeInit+0x174>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a3b      	ldr	r2, [pc, #236]	; (8002f24 <HAL_DMA_DeInit+0x25c>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d101      	bne.n	8002e40 <HAL_DMA_DeInit+0x178>
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e000      	b.n	8002e42 <HAL_DMA_DeInit+0x17a>
 8002e40:	2300      	movs	r3, #0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d025      	beq.n	8002e92 <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2200      	movs	r2, #0
 8002e54:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2200      	movs	r2, #0
 8002e64:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2221      	movs	r2, #33	; 0x21
 8002e74:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f002 f98a 	bl	8005190 <DMA_CalcBaseAndBitshift>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e84:	f003 031f 	and.w	r3, r3, #31
 8002e88:	223f      	movs	r2, #63	; 0x3f
 8002e8a:	409a      	lsls	r2, r3
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	609a      	str	r2, [r3, #8]
 8002e90:	e081      	b.n	8002f96 <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a24      	ldr	r2, [pc, #144]	; (8002f28 <HAL_DMA_DeInit+0x260>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d022      	beq.n	8002ee2 <HAL_DMA_DeInit+0x21a>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a22      	ldr	r2, [pc, #136]	; (8002f2c <HAL_DMA_DeInit+0x264>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d01d      	beq.n	8002ee2 <HAL_DMA_DeInit+0x21a>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a21      	ldr	r2, [pc, #132]	; (8002f30 <HAL_DMA_DeInit+0x268>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d018      	beq.n	8002ee2 <HAL_DMA_DeInit+0x21a>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a1f      	ldr	r2, [pc, #124]	; (8002f34 <HAL_DMA_DeInit+0x26c>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d013      	beq.n	8002ee2 <HAL_DMA_DeInit+0x21a>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a1e      	ldr	r2, [pc, #120]	; (8002f38 <HAL_DMA_DeInit+0x270>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d00e      	beq.n	8002ee2 <HAL_DMA_DeInit+0x21a>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a1c      	ldr	r2, [pc, #112]	; (8002f3c <HAL_DMA_DeInit+0x274>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d009      	beq.n	8002ee2 <HAL_DMA_DeInit+0x21a>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a1b      	ldr	r2, [pc, #108]	; (8002f40 <HAL_DMA_DeInit+0x278>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d004      	beq.n	8002ee2 <HAL_DMA_DeInit+0x21a>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a19      	ldr	r2, [pc, #100]	; (8002f44 <HAL_DMA_DeInit+0x27c>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d132      	bne.n	8002f48 <HAL_DMA_DeInit+0x280>
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e031      	b.n	8002f4a <HAL_DMA_DeInit+0x282>
 8002ee6:	bf00      	nop
 8002ee8:	40020010 	.word	0x40020010
 8002eec:	40020028 	.word	0x40020028
 8002ef0:	40020040 	.word	0x40020040
 8002ef4:	40020058 	.word	0x40020058
 8002ef8:	40020070 	.word	0x40020070
 8002efc:	40020088 	.word	0x40020088
 8002f00:	400200a0 	.word	0x400200a0
 8002f04:	400200b8 	.word	0x400200b8
 8002f08:	40020410 	.word	0x40020410
 8002f0c:	40020428 	.word	0x40020428
 8002f10:	40020440 	.word	0x40020440
 8002f14:	40020458 	.word	0x40020458
 8002f18:	40020470 	.word	0x40020470
 8002f1c:	40020488 	.word	0x40020488
 8002f20:	400204a0 	.word	0x400204a0
 8002f24:	400204b8 	.word	0x400204b8
 8002f28:	58025408 	.word	0x58025408
 8002f2c:	5802541c 	.word	0x5802541c
 8002f30:	58025430 	.word	0x58025430
 8002f34:	58025444 	.word	0x58025444
 8002f38:	58025458 	.word	0x58025458
 8002f3c:	5802546c 	.word	0x5802546c
 8002f40:	58025480 	.word	0x58025480
 8002f44:	58025494 	.word	0x58025494
 8002f48:	2300      	movs	r3, #0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d021      	beq.n	8002f92 <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2200      	movs	r2, #0
 8002f54:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2200      	movs	r2, #0
 8002f64:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2200      	movs	r2, #0
 8002f74:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f002 f90a 	bl	8005190 <DMA_CalcBaseAndBitshift>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f84:	f003 031f 	and.w	r3, r3, #31
 8002f88:	2201      	movs	r2, #1
 8002f8a:	409a      	lsls	r2, r3
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	605a      	str	r2, [r3, #4]
 8002f90:	e001      	b.n	8002f96 <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e04a      	b.n	800302c <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f002 fa28 	bl	80053ec <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d008      	beq.n	8002fb6 <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fa8:	2200      	movs	r2, #0
 8002faa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002fb4:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d00f      	beq.n	8002fde <HAL_DMA_DeInit+0x316>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	2b08      	cmp	r3, #8
 8002fc4:	d80b      	bhi.n	8002fde <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f002 faaa 	bl	8005520 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002fdc:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	671a      	str	r2, [r3, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	675a      	str	r2, [r3, #116]	; 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback     = NULL;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback      = NULL;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback      = NULL;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	651a      	str	r2, [r3, #80]	; 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	3710      	adds	r7, #16
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b086      	sub	sp, #24
 8003038:	af00      	add	r7, sp, #0
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	60b9      	str	r1, [r7, #8]
 800303e:	607a      	str	r2, [r7, #4]
 8003040:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003042:	2300      	movs	r3, #0
 8003044:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d101      	bne.n	8003050 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e226      	b.n	800349e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003056:	2b01      	cmp	r3, #1
 8003058:	d101      	bne.n	800305e <HAL_DMA_Start_IT+0x2a>
 800305a:	2302      	movs	r3, #2
 800305c:	e21f      	b.n	800349e <HAL_DMA_Start_IT+0x46a>
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2201      	movs	r2, #1
 8003062:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b01      	cmp	r3, #1
 8003070:	f040 820a 	bne.w	8003488 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2202      	movs	r2, #2
 8003078:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a68      	ldr	r2, [pc, #416]	; (8003228 <HAL_DMA_Start_IT+0x1f4>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d04a      	beq.n	8003122 <HAL_DMA_Start_IT+0xee>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a66      	ldr	r2, [pc, #408]	; (800322c <HAL_DMA_Start_IT+0x1f8>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d045      	beq.n	8003122 <HAL_DMA_Start_IT+0xee>
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a65      	ldr	r2, [pc, #404]	; (8003230 <HAL_DMA_Start_IT+0x1fc>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d040      	beq.n	8003122 <HAL_DMA_Start_IT+0xee>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a63      	ldr	r2, [pc, #396]	; (8003234 <HAL_DMA_Start_IT+0x200>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d03b      	beq.n	8003122 <HAL_DMA_Start_IT+0xee>
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a62      	ldr	r2, [pc, #392]	; (8003238 <HAL_DMA_Start_IT+0x204>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d036      	beq.n	8003122 <HAL_DMA_Start_IT+0xee>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a60      	ldr	r2, [pc, #384]	; (800323c <HAL_DMA_Start_IT+0x208>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d031      	beq.n	8003122 <HAL_DMA_Start_IT+0xee>
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a5f      	ldr	r2, [pc, #380]	; (8003240 <HAL_DMA_Start_IT+0x20c>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d02c      	beq.n	8003122 <HAL_DMA_Start_IT+0xee>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a5d      	ldr	r2, [pc, #372]	; (8003244 <HAL_DMA_Start_IT+0x210>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d027      	beq.n	8003122 <HAL_DMA_Start_IT+0xee>
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a5c      	ldr	r2, [pc, #368]	; (8003248 <HAL_DMA_Start_IT+0x214>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d022      	beq.n	8003122 <HAL_DMA_Start_IT+0xee>
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a5a      	ldr	r2, [pc, #360]	; (800324c <HAL_DMA_Start_IT+0x218>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d01d      	beq.n	8003122 <HAL_DMA_Start_IT+0xee>
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a59      	ldr	r2, [pc, #356]	; (8003250 <HAL_DMA_Start_IT+0x21c>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d018      	beq.n	8003122 <HAL_DMA_Start_IT+0xee>
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a57      	ldr	r2, [pc, #348]	; (8003254 <HAL_DMA_Start_IT+0x220>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d013      	beq.n	8003122 <HAL_DMA_Start_IT+0xee>
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a56      	ldr	r2, [pc, #344]	; (8003258 <HAL_DMA_Start_IT+0x224>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d00e      	beq.n	8003122 <HAL_DMA_Start_IT+0xee>
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a54      	ldr	r2, [pc, #336]	; (800325c <HAL_DMA_Start_IT+0x228>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d009      	beq.n	8003122 <HAL_DMA_Start_IT+0xee>
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a53      	ldr	r2, [pc, #332]	; (8003260 <HAL_DMA_Start_IT+0x22c>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d004      	beq.n	8003122 <HAL_DMA_Start_IT+0xee>
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a51      	ldr	r2, [pc, #324]	; (8003264 <HAL_DMA_Start_IT+0x230>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d108      	bne.n	8003134 <HAL_DMA_Start_IT+0x100>
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f022 0201 	bic.w	r2, r2, #1
 8003130:	601a      	str	r2, [r3, #0]
 8003132:	e007      	b.n	8003144 <HAL_DMA_Start_IT+0x110>
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f022 0201 	bic.w	r2, r2, #1
 8003142:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	68b9      	ldr	r1, [r7, #8]
 800314a:	68f8      	ldr	r0, [r7, #12]
 800314c:	f001 fe74 	bl	8004e38 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a34      	ldr	r2, [pc, #208]	; (8003228 <HAL_DMA_Start_IT+0x1f4>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d04a      	beq.n	80031f0 <HAL_DMA_Start_IT+0x1bc>
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a33      	ldr	r2, [pc, #204]	; (800322c <HAL_DMA_Start_IT+0x1f8>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d045      	beq.n	80031f0 <HAL_DMA_Start_IT+0x1bc>
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a31      	ldr	r2, [pc, #196]	; (8003230 <HAL_DMA_Start_IT+0x1fc>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d040      	beq.n	80031f0 <HAL_DMA_Start_IT+0x1bc>
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a30      	ldr	r2, [pc, #192]	; (8003234 <HAL_DMA_Start_IT+0x200>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d03b      	beq.n	80031f0 <HAL_DMA_Start_IT+0x1bc>
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a2e      	ldr	r2, [pc, #184]	; (8003238 <HAL_DMA_Start_IT+0x204>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d036      	beq.n	80031f0 <HAL_DMA_Start_IT+0x1bc>
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a2d      	ldr	r2, [pc, #180]	; (800323c <HAL_DMA_Start_IT+0x208>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d031      	beq.n	80031f0 <HAL_DMA_Start_IT+0x1bc>
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a2b      	ldr	r2, [pc, #172]	; (8003240 <HAL_DMA_Start_IT+0x20c>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d02c      	beq.n	80031f0 <HAL_DMA_Start_IT+0x1bc>
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a2a      	ldr	r2, [pc, #168]	; (8003244 <HAL_DMA_Start_IT+0x210>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d027      	beq.n	80031f0 <HAL_DMA_Start_IT+0x1bc>
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a28      	ldr	r2, [pc, #160]	; (8003248 <HAL_DMA_Start_IT+0x214>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d022      	beq.n	80031f0 <HAL_DMA_Start_IT+0x1bc>
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a27      	ldr	r2, [pc, #156]	; (800324c <HAL_DMA_Start_IT+0x218>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d01d      	beq.n	80031f0 <HAL_DMA_Start_IT+0x1bc>
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a25      	ldr	r2, [pc, #148]	; (8003250 <HAL_DMA_Start_IT+0x21c>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d018      	beq.n	80031f0 <HAL_DMA_Start_IT+0x1bc>
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a24      	ldr	r2, [pc, #144]	; (8003254 <HAL_DMA_Start_IT+0x220>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d013      	beq.n	80031f0 <HAL_DMA_Start_IT+0x1bc>
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a22      	ldr	r2, [pc, #136]	; (8003258 <HAL_DMA_Start_IT+0x224>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d00e      	beq.n	80031f0 <HAL_DMA_Start_IT+0x1bc>
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a21      	ldr	r2, [pc, #132]	; (800325c <HAL_DMA_Start_IT+0x228>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d009      	beq.n	80031f0 <HAL_DMA_Start_IT+0x1bc>
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a1f      	ldr	r2, [pc, #124]	; (8003260 <HAL_DMA_Start_IT+0x22c>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d004      	beq.n	80031f0 <HAL_DMA_Start_IT+0x1bc>
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a1e      	ldr	r2, [pc, #120]	; (8003264 <HAL_DMA_Start_IT+0x230>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d101      	bne.n	80031f4 <HAL_DMA_Start_IT+0x1c0>
 80031f0:	2301      	movs	r3, #1
 80031f2:	e000      	b.n	80031f6 <HAL_DMA_Start_IT+0x1c2>
 80031f4:	2300      	movs	r3, #0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d036      	beq.n	8003268 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f023 021e 	bic.w	r2, r3, #30
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f042 0216 	orr.w	r2, r2, #22
 800320c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003212:	2b00      	cmp	r3, #0
 8003214:	d03e      	beq.n	8003294 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f042 0208 	orr.w	r2, r2, #8
 8003224:	601a      	str	r2, [r3, #0]
 8003226:	e035      	b.n	8003294 <HAL_DMA_Start_IT+0x260>
 8003228:	40020010 	.word	0x40020010
 800322c:	40020028 	.word	0x40020028
 8003230:	40020040 	.word	0x40020040
 8003234:	40020058 	.word	0x40020058
 8003238:	40020070 	.word	0x40020070
 800323c:	40020088 	.word	0x40020088
 8003240:	400200a0 	.word	0x400200a0
 8003244:	400200b8 	.word	0x400200b8
 8003248:	40020410 	.word	0x40020410
 800324c:	40020428 	.word	0x40020428
 8003250:	40020440 	.word	0x40020440
 8003254:	40020458 	.word	0x40020458
 8003258:	40020470 	.word	0x40020470
 800325c:	40020488 	.word	0x40020488
 8003260:	400204a0 	.word	0x400204a0
 8003264:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f023 020e 	bic.w	r2, r3, #14
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f042 020a 	orr.w	r2, r2, #10
 800327a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003280:	2b00      	cmp	r3, #0
 8003282:	d007      	beq.n	8003294 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f042 0204 	orr.w	r2, r2, #4
 8003292:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a83      	ldr	r2, [pc, #524]	; (80034a8 <HAL_DMA_Start_IT+0x474>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d072      	beq.n	8003384 <HAL_DMA_Start_IT+0x350>
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a82      	ldr	r2, [pc, #520]	; (80034ac <HAL_DMA_Start_IT+0x478>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d06d      	beq.n	8003384 <HAL_DMA_Start_IT+0x350>
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a80      	ldr	r2, [pc, #512]	; (80034b0 <HAL_DMA_Start_IT+0x47c>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d068      	beq.n	8003384 <HAL_DMA_Start_IT+0x350>
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a7f      	ldr	r2, [pc, #508]	; (80034b4 <HAL_DMA_Start_IT+0x480>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d063      	beq.n	8003384 <HAL_DMA_Start_IT+0x350>
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a7d      	ldr	r2, [pc, #500]	; (80034b8 <HAL_DMA_Start_IT+0x484>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d05e      	beq.n	8003384 <HAL_DMA_Start_IT+0x350>
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a7c      	ldr	r2, [pc, #496]	; (80034bc <HAL_DMA_Start_IT+0x488>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d059      	beq.n	8003384 <HAL_DMA_Start_IT+0x350>
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a7a      	ldr	r2, [pc, #488]	; (80034c0 <HAL_DMA_Start_IT+0x48c>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d054      	beq.n	8003384 <HAL_DMA_Start_IT+0x350>
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a79      	ldr	r2, [pc, #484]	; (80034c4 <HAL_DMA_Start_IT+0x490>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d04f      	beq.n	8003384 <HAL_DMA_Start_IT+0x350>
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a77      	ldr	r2, [pc, #476]	; (80034c8 <HAL_DMA_Start_IT+0x494>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d04a      	beq.n	8003384 <HAL_DMA_Start_IT+0x350>
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a76      	ldr	r2, [pc, #472]	; (80034cc <HAL_DMA_Start_IT+0x498>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d045      	beq.n	8003384 <HAL_DMA_Start_IT+0x350>
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a74      	ldr	r2, [pc, #464]	; (80034d0 <HAL_DMA_Start_IT+0x49c>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d040      	beq.n	8003384 <HAL_DMA_Start_IT+0x350>
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a73      	ldr	r2, [pc, #460]	; (80034d4 <HAL_DMA_Start_IT+0x4a0>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d03b      	beq.n	8003384 <HAL_DMA_Start_IT+0x350>
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a71      	ldr	r2, [pc, #452]	; (80034d8 <HAL_DMA_Start_IT+0x4a4>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d036      	beq.n	8003384 <HAL_DMA_Start_IT+0x350>
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a70      	ldr	r2, [pc, #448]	; (80034dc <HAL_DMA_Start_IT+0x4a8>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d031      	beq.n	8003384 <HAL_DMA_Start_IT+0x350>
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a6e      	ldr	r2, [pc, #440]	; (80034e0 <HAL_DMA_Start_IT+0x4ac>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d02c      	beq.n	8003384 <HAL_DMA_Start_IT+0x350>
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a6d      	ldr	r2, [pc, #436]	; (80034e4 <HAL_DMA_Start_IT+0x4b0>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d027      	beq.n	8003384 <HAL_DMA_Start_IT+0x350>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a6b      	ldr	r2, [pc, #428]	; (80034e8 <HAL_DMA_Start_IT+0x4b4>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d022      	beq.n	8003384 <HAL_DMA_Start_IT+0x350>
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a6a      	ldr	r2, [pc, #424]	; (80034ec <HAL_DMA_Start_IT+0x4b8>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d01d      	beq.n	8003384 <HAL_DMA_Start_IT+0x350>
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a68      	ldr	r2, [pc, #416]	; (80034f0 <HAL_DMA_Start_IT+0x4bc>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d018      	beq.n	8003384 <HAL_DMA_Start_IT+0x350>
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a67      	ldr	r2, [pc, #412]	; (80034f4 <HAL_DMA_Start_IT+0x4c0>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d013      	beq.n	8003384 <HAL_DMA_Start_IT+0x350>
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a65      	ldr	r2, [pc, #404]	; (80034f8 <HAL_DMA_Start_IT+0x4c4>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d00e      	beq.n	8003384 <HAL_DMA_Start_IT+0x350>
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a64      	ldr	r2, [pc, #400]	; (80034fc <HAL_DMA_Start_IT+0x4c8>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d009      	beq.n	8003384 <HAL_DMA_Start_IT+0x350>
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a62      	ldr	r2, [pc, #392]	; (8003500 <HAL_DMA_Start_IT+0x4cc>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d004      	beq.n	8003384 <HAL_DMA_Start_IT+0x350>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a61      	ldr	r2, [pc, #388]	; (8003504 <HAL_DMA_Start_IT+0x4d0>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d101      	bne.n	8003388 <HAL_DMA_Start_IT+0x354>
 8003384:	2301      	movs	r3, #1
 8003386:	e000      	b.n	800338a <HAL_DMA_Start_IT+0x356>
 8003388:	2300      	movs	r3, #0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d01a      	beq.n	80033c4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d007      	beq.n	80033ac <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033aa:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d007      	beq.n	80033c4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033c2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a37      	ldr	r2, [pc, #220]	; (80034a8 <HAL_DMA_Start_IT+0x474>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d04a      	beq.n	8003464 <HAL_DMA_Start_IT+0x430>
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a36      	ldr	r2, [pc, #216]	; (80034ac <HAL_DMA_Start_IT+0x478>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d045      	beq.n	8003464 <HAL_DMA_Start_IT+0x430>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a34      	ldr	r2, [pc, #208]	; (80034b0 <HAL_DMA_Start_IT+0x47c>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d040      	beq.n	8003464 <HAL_DMA_Start_IT+0x430>
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a33      	ldr	r2, [pc, #204]	; (80034b4 <HAL_DMA_Start_IT+0x480>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d03b      	beq.n	8003464 <HAL_DMA_Start_IT+0x430>
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a31      	ldr	r2, [pc, #196]	; (80034b8 <HAL_DMA_Start_IT+0x484>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d036      	beq.n	8003464 <HAL_DMA_Start_IT+0x430>
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a30      	ldr	r2, [pc, #192]	; (80034bc <HAL_DMA_Start_IT+0x488>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d031      	beq.n	8003464 <HAL_DMA_Start_IT+0x430>
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a2e      	ldr	r2, [pc, #184]	; (80034c0 <HAL_DMA_Start_IT+0x48c>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d02c      	beq.n	8003464 <HAL_DMA_Start_IT+0x430>
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a2d      	ldr	r2, [pc, #180]	; (80034c4 <HAL_DMA_Start_IT+0x490>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d027      	beq.n	8003464 <HAL_DMA_Start_IT+0x430>
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a2b      	ldr	r2, [pc, #172]	; (80034c8 <HAL_DMA_Start_IT+0x494>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d022      	beq.n	8003464 <HAL_DMA_Start_IT+0x430>
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a2a      	ldr	r2, [pc, #168]	; (80034cc <HAL_DMA_Start_IT+0x498>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d01d      	beq.n	8003464 <HAL_DMA_Start_IT+0x430>
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a28      	ldr	r2, [pc, #160]	; (80034d0 <HAL_DMA_Start_IT+0x49c>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d018      	beq.n	8003464 <HAL_DMA_Start_IT+0x430>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a27      	ldr	r2, [pc, #156]	; (80034d4 <HAL_DMA_Start_IT+0x4a0>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d013      	beq.n	8003464 <HAL_DMA_Start_IT+0x430>
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a25      	ldr	r2, [pc, #148]	; (80034d8 <HAL_DMA_Start_IT+0x4a4>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d00e      	beq.n	8003464 <HAL_DMA_Start_IT+0x430>
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a24      	ldr	r2, [pc, #144]	; (80034dc <HAL_DMA_Start_IT+0x4a8>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d009      	beq.n	8003464 <HAL_DMA_Start_IT+0x430>
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a22      	ldr	r2, [pc, #136]	; (80034e0 <HAL_DMA_Start_IT+0x4ac>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d004      	beq.n	8003464 <HAL_DMA_Start_IT+0x430>
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a21      	ldr	r2, [pc, #132]	; (80034e4 <HAL_DMA_Start_IT+0x4b0>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d108      	bne.n	8003476 <HAL_DMA_Start_IT+0x442>
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f042 0201 	orr.w	r2, r2, #1
 8003472:	601a      	str	r2, [r3, #0]
 8003474:	e012      	b.n	800349c <HAL_DMA_Start_IT+0x468>
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f042 0201 	orr.w	r2, r2, #1
 8003484:	601a      	str	r2, [r3, #0]
 8003486:	e009      	b.n	800349c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800348e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2200      	movs	r2, #0
 8003494:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800349c:	7dfb      	ldrb	r3, [r7, #23]
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3718      	adds	r7, #24
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	40020010 	.word	0x40020010
 80034ac:	40020028 	.word	0x40020028
 80034b0:	40020040 	.word	0x40020040
 80034b4:	40020058 	.word	0x40020058
 80034b8:	40020070 	.word	0x40020070
 80034bc:	40020088 	.word	0x40020088
 80034c0:	400200a0 	.word	0x400200a0
 80034c4:	400200b8 	.word	0x400200b8
 80034c8:	40020410 	.word	0x40020410
 80034cc:	40020428 	.word	0x40020428
 80034d0:	40020440 	.word	0x40020440
 80034d4:	40020458 	.word	0x40020458
 80034d8:	40020470 	.word	0x40020470
 80034dc:	40020488 	.word	0x40020488
 80034e0:	400204a0 	.word	0x400204a0
 80034e4:	400204b8 	.word	0x400204b8
 80034e8:	58025408 	.word	0x58025408
 80034ec:	5802541c 	.word	0x5802541c
 80034f0:	58025430 	.word	0x58025430
 80034f4:	58025444 	.word	0x58025444
 80034f8:	58025458 	.word	0x58025458
 80034fc:	5802546c 	.word	0x5802546c
 8003500:	58025480 	.word	0x58025480
 8003504:	58025494 	.word	0x58025494

08003508 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b086      	sub	sp, #24
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003510:	f7fe fc3a 	bl	8001d88 <HAL_GetTick>
 8003514:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d101      	bne.n	8003520 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e2dc      	b.n	8003ada <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003526:	b2db      	uxtb	r3, r3
 8003528:	2b02      	cmp	r3, #2
 800352a:	d008      	beq.n	800353e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2280      	movs	r2, #128	; 0x80
 8003530:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e2cd      	b.n	8003ada <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a76      	ldr	r2, [pc, #472]	; (800371c <HAL_DMA_Abort+0x214>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d04a      	beq.n	80035de <HAL_DMA_Abort+0xd6>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a74      	ldr	r2, [pc, #464]	; (8003720 <HAL_DMA_Abort+0x218>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d045      	beq.n	80035de <HAL_DMA_Abort+0xd6>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a73      	ldr	r2, [pc, #460]	; (8003724 <HAL_DMA_Abort+0x21c>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d040      	beq.n	80035de <HAL_DMA_Abort+0xd6>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a71      	ldr	r2, [pc, #452]	; (8003728 <HAL_DMA_Abort+0x220>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d03b      	beq.n	80035de <HAL_DMA_Abort+0xd6>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a70      	ldr	r2, [pc, #448]	; (800372c <HAL_DMA_Abort+0x224>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d036      	beq.n	80035de <HAL_DMA_Abort+0xd6>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a6e      	ldr	r2, [pc, #440]	; (8003730 <HAL_DMA_Abort+0x228>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d031      	beq.n	80035de <HAL_DMA_Abort+0xd6>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a6d      	ldr	r2, [pc, #436]	; (8003734 <HAL_DMA_Abort+0x22c>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d02c      	beq.n	80035de <HAL_DMA_Abort+0xd6>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a6b      	ldr	r2, [pc, #428]	; (8003738 <HAL_DMA_Abort+0x230>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d027      	beq.n	80035de <HAL_DMA_Abort+0xd6>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a6a      	ldr	r2, [pc, #424]	; (800373c <HAL_DMA_Abort+0x234>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d022      	beq.n	80035de <HAL_DMA_Abort+0xd6>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a68      	ldr	r2, [pc, #416]	; (8003740 <HAL_DMA_Abort+0x238>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d01d      	beq.n	80035de <HAL_DMA_Abort+0xd6>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a67      	ldr	r2, [pc, #412]	; (8003744 <HAL_DMA_Abort+0x23c>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d018      	beq.n	80035de <HAL_DMA_Abort+0xd6>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a65      	ldr	r2, [pc, #404]	; (8003748 <HAL_DMA_Abort+0x240>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d013      	beq.n	80035de <HAL_DMA_Abort+0xd6>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a64      	ldr	r2, [pc, #400]	; (800374c <HAL_DMA_Abort+0x244>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d00e      	beq.n	80035de <HAL_DMA_Abort+0xd6>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a62      	ldr	r2, [pc, #392]	; (8003750 <HAL_DMA_Abort+0x248>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d009      	beq.n	80035de <HAL_DMA_Abort+0xd6>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a61      	ldr	r2, [pc, #388]	; (8003754 <HAL_DMA_Abort+0x24c>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d004      	beq.n	80035de <HAL_DMA_Abort+0xd6>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a5f      	ldr	r2, [pc, #380]	; (8003758 <HAL_DMA_Abort+0x250>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d101      	bne.n	80035e2 <HAL_DMA_Abort+0xda>
 80035de:	2301      	movs	r3, #1
 80035e0:	e000      	b.n	80035e4 <HAL_DMA_Abort+0xdc>
 80035e2:	2300      	movs	r3, #0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d013      	beq.n	8003610 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f022 021e 	bic.w	r2, r2, #30
 80035f6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	695a      	ldr	r2, [r3, #20]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003606:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	617b      	str	r3, [r7, #20]
 800360e:	e00a      	b.n	8003626 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f022 020e 	bic.w	r2, r2, #14
 800361e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a3c      	ldr	r2, [pc, #240]	; (800371c <HAL_DMA_Abort+0x214>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d072      	beq.n	8003716 <HAL_DMA_Abort+0x20e>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a3a      	ldr	r2, [pc, #232]	; (8003720 <HAL_DMA_Abort+0x218>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d06d      	beq.n	8003716 <HAL_DMA_Abort+0x20e>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a39      	ldr	r2, [pc, #228]	; (8003724 <HAL_DMA_Abort+0x21c>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d068      	beq.n	8003716 <HAL_DMA_Abort+0x20e>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a37      	ldr	r2, [pc, #220]	; (8003728 <HAL_DMA_Abort+0x220>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d063      	beq.n	8003716 <HAL_DMA_Abort+0x20e>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a36      	ldr	r2, [pc, #216]	; (800372c <HAL_DMA_Abort+0x224>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d05e      	beq.n	8003716 <HAL_DMA_Abort+0x20e>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a34      	ldr	r2, [pc, #208]	; (8003730 <HAL_DMA_Abort+0x228>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d059      	beq.n	8003716 <HAL_DMA_Abort+0x20e>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a33      	ldr	r2, [pc, #204]	; (8003734 <HAL_DMA_Abort+0x22c>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d054      	beq.n	8003716 <HAL_DMA_Abort+0x20e>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a31      	ldr	r2, [pc, #196]	; (8003738 <HAL_DMA_Abort+0x230>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d04f      	beq.n	8003716 <HAL_DMA_Abort+0x20e>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a30      	ldr	r2, [pc, #192]	; (800373c <HAL_DMA_Abort+0x234>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d04a      	beq.n	8003716 <HAL_DMA_Abort+0x20e>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a2e      	ldr	r2, [pc, #184]	; (8003740 <HAL_DMA_Abort+0x238>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d045      	beq.n	8003716 <HAL_DMA_Abort+0x20e>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a2d      	ldr	r2, [pc, #180]	; (8003744 <HAL_DMA_Abort+0x23c>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d040      	beq.n	8003716 <HAL_DMA_Abort+0x20e>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a2b      	ldr	r2, [pc, #172]	; (8003748 <HAL_DMA_Abort+0x240>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d03b      	beq.n	8003716 <HAL_DMA_Abort+0x20e>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a2a      	ldr	r2, [pc, #168]	; (800374c <HAL_DMA_Abort+0x244>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d036      	beq.n	8003716 <HAL_DMA_Abort+0x20e>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a28      	ldr	r2, [pc, #160]	; (8003750 <HAL_DMA_Abort+0x248>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d031      	beq.n	8003716 <HAL_DMA_Abort+0x20e>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a27      	ldr	r2, [pc, #156]	; (8003754 <HAL_DMA_Abort+0x24c>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d02c      	beq.n	8003716 <HAL_DMA_Abort+0x20e>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a25      	ldr	r2, [pc, #148]	; (8003758 <HAL_DMA_Abort+0x250>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d027      	beq.n	8003716 <HAL_DMA_Abort+0x20e>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a24      	ldr	r2, [pc, #144]	; (800375c <HAL_DMA_Abort+0x254>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d022      	beq.n	8003716 <HAL_DMA_Abort+0x20e>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a22      	ldr	r2, [pc, #136]	; (8003760 <HAL_DMA_Abort+0x258>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d01d      	beq.n	8003716 <HAL_DMA_Abort+0x20e>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a21      	ldr	r2, [pc, #132]	; (8003764 <HAL_DMA_Abort+0x25c>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d018      	beq.n	8003716 <HAL_DMA_Abort+0x20e>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a1f      	ldr	r2, [pc, #124]	; (8003768 <HAL_DMA_Abort+0x260>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d013      	beq.n	8003716 <HAL_DMA_Abort+0x20e>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a1e      	ldr	r2, [pc, #120]	; (800376c <HAL_DMA_Abort+0x264>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d00e      	beq.n	8003716 <HAL_DMA_Abort+0x20e>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a1c      	ldr	r2, [pc, #112]	; (8003770 <HAL_DMA_Abort+0x268>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d009      	beq.n	8003716 <HAL_DMA_Abort+0x20e>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a1b      	ldr	r2, [pc, #108]	; (8003774 <HAL_DMA_Abort+0x26c>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d004      	beq.n	8003716 <HAL_DMA_Abort+0x20e>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a19      	ldr	r2, [pc, #100]	; (8003778 <HAL_DMA_Abort+0x270>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d132      	bne.n	800377c <HAL_DMA_Abort+0x274>
 8003716:	2301      	movs	r3, #1
 8003718:	e031      	b.n	800377e <HAL_DMA_Abort+0x276>
 800371a:	bf00      	nop
 800371c:	40020010 	.word	0x40020010
 8003720:	40020028 	.word	0x40020028
 8003724:	40020040 	.word	0x40020040
 8003728:	40020058 	.word	0x40020058
 800372c:	40020070 	.word	0x40020070
 8003730:	40020088 	.word	0x40020088
 8003734:	400200a0 	.word	0x400200a0
 8003738:	400200b8 	.word	0x400200b8
 800373c:	40020410 	.word	0x40020410
 8003740:	40020428 	.word	0x40020428
 8003744:	40020440 	.word	0x40020440
 8003748:	40020458 	.word	0x40020458
 800374c:	40020470 	.word	0x40020470
 8003750:	40020488 	.word	0x40020488
 8003754:	400204a0 	.word	0x400204a0
 8003758:	400204b8 	.word	0x400204b8
 800375c:	58025408 	.word	0x58025408
 8003760:	5802541c 	.word	0x5802541c
 8003764:	58025430 	.word	0x58025430
 8003768:	58025444 	.word	0x58025444
 800376c:	58025458 	.word	0x58025458
 8003770:	5802546c 	.word	0x5802546c
 8003774:	58025480 	.word	0x58025480
 8003778:	58025494 	.word	0x58025494
 800377c:	2300      	movs	r3, #0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d007      	beq.n	8003792 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800378c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003790:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a6d      	ldr	r2, [pc, #436]	; (800394c <HAL_DMA_Abort+0x444>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d04a      	beq.n	8003832 <HAL_DMA_Abort+0x32a>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a6b      	ldr	r2, [pc, #428]	; (8003950 <HAL_DMA_Abort+0x448>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d045      	beq.n	8003832 <HAL_DMA_Abort+0x32a>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a6a      	ldr	r2, [pc, #424]	; (8003954 <HAL_DMA_Abort+0x44c>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d040      	beq.n	8003832 <HAL_DMA_Abort+0x32a>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a68      	ldr	r2, [pc, #416]	; (8003958 <HAL_DMA_Abort+0x450>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d03b      	beq.n	8003832 <HAL_DMA_Abort+0x32a>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a67      	ldr	r2, [pc, #412]	; (800395c <HAL_DMA_Abort+0x454>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d036      	beq.n	8003832 <HAL_DMA_Abort+0x32a>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a65      	ldr	r2, [pc, #404]	; (8003960 <HAL_DMA_Abort+0x458>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d031      	beq.n	8003832 <HAL_DMA_Abort+0x32a>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a64      	ldr	r2, [pc, #400]	; (8003964 <HAL_DMA_Abort+0x45c>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d02c      	beq.n	8003832 <HAL_DMA_Abort+0x32a>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a62      	ldr	r2, [pc, #392]	; (8003968 <HAL_DMA_Abort+0x460>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d027      	beq.n	8003832 <HAL_DMA_Abort+0x32a>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a61      	ldr	r2, [pc, #388]	; (800396c <HAL_DMA_Abort+0x464>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d022      	beq.n	8003832 <HAL_DMA_Abort+0x32a>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a5f      	ldr	r2, [pc, #380]	; (8003970 <HAL_DMA_Abort+0x468>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d01d      	beq.n	8003832 <HAL_DMA_Abort+0x32a>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a5e      	ldr	r2, [pc, #376]	; (8003974 <HAL_DMA_Abort+0x46c>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d018      	beq.n	8003832 <HAL_DMA_Abort+0x32a>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a5c      	ldr	r2, [pc, #368]	; (8003978 <HAL_DMA_Abort+0x470>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d013      	beq.n	8003832 <HAL_DMA_Abort+0x32a>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a5b      	ldr	r2, [pc, #364]	; (800397c <HAL_DMA_Abort+0x474>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d00e      	beq.n	8003832 <HAL_DMA_Abort+0x32a>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a59      	ldr	r2, [pc, #356]	; (8003980 <HAL_DMA_Abort+0x478>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d009      	beq.n	8003832 <HAL_DMA_Abort+0x32a>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a58      	ldr	r2, [pc, #352]	; (8003984 <HAL_DMA_Abort+0x47c>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d004      	beq.n	8003832 <HAL_DMA_Abort+0x32a>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a56      	ldr	r2, [pc, #344]	; (8003988 <HAL_DMA_Abort+0x480>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d108      	bne.n	8003844 <HAL_DMA_Abort+0x33c>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f022 0201 	bic.w	r2, r2, #1
 8003840:	601a      	str	r2, [r3, #0]
 8003842:	e007      	b.n	8003854 <HAL_DMA_Abort+0x34c>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f022 0201 	bic.w	r2, r2, #1
 8003852:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003854:	e013      	b.n	800387e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003856:	f7fe fa97 	bl	8001d88 <HAL_GetTick>
 800385a:	4602      	mov	r2, r0
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	2b05      	cmp	r3, #5
 8003862:	d90c      	bls.n	800387e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2220      	movs	r2, #32
 8003868:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2203      	movs	r2, #3
 800386e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e12d      	b.n	8003ada <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0301 	and.w	r3, r3, #1
 8003886:	2b00      	cmp	r3, #0
 8003888:	d1e5      	bne.n	8003856 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a2f      	ldr	r2, [pc, #188]	; (800394c <HAL_DMA_Abort+0x444>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d04a      	beq.n	800392a <HAL_DMA_Abort+0x422>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a2d      	ldr	r2, [pc, #180]	; (8003950 <HAL_DMA_Abort+0x448>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d045      	beq.n	800392a <HAL_DMA_Abort+0x422>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a2c      	ldr	r2, [pc, #176]	; (8003954 <HAL_DMA_Abort+0x44c>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d040      	beq.n	800392a <HAL_DMA_Abort+0x422>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a2a      	ldr	r2, [pc, #168]	; (8003958 <HAL_DMA_Abort+0x450>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d03b      	beq.n	800392a <HAL_DMA_Abort+0x422>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a29      	ldr	r2, [pc, #164]	; (800395c <HAL_DMA_Abort+0x454>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d036      	beq.n	800392a <HAL_DMA_Abort+0x422>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a27      	ldr	r2, [pc, #156]	; (8003960 <HAL_DMA_Abort+0x458>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d031      	beq.n	800392a <HAL_DMA_Abort+0x422>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a26      	ldr	r2, [pc, #152]	; (8003964 <HAL_DMA_Abort+0x45c>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d02c      	beq.n	800392a <HAL_DMA_Abort+0x422>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a24      	ldr	r2, [pc, #144]	; (8003968 <HAL_DMA_Abort+0x460>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d027      	beq.n	800392a <HAL_DMA_Abort+0x422>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a23      	ldr	r2, [pc, #140]	; (800396c <HAL_DMA_Abort+0x464>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d022      	beq.n	800392a <HAL_DMA_Abort+0x422>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a21      	ldr	r2, [pc, #132]	; (8003970 <HAL_DMA_Abort+0x468>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d01d      	beq.n	800392a <HAL_DMA_Abort+0x422>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a20      	ldr	r2, [pc, #128]	; (8003974 <HAL_DMA_Abort+0x46c>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d018      	beq.n	800392a <HAL_DMA_Abort+0x422>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a1e      	ldr	r2, [pc, #120]	; (8003978 <HAL_DMA_Abort+0x470>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d013      	beq.n	800392a <HAL_DMA_Abort+0x422>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a1d      	ldr	r2, [pc, #116]	; (800397c <HAL_DMA_Abort+0x474>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d00e      	beq.n	800392a <HAL_DMA_Abort+0x422>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a1b      	ldr	r2, [pc, #108]	; (8003980 <HAL_DMA_Abort+0x478>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d009      	beq.n	800392a <HAL_DMA_Abort+0x422>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a1a      	ldr	r2, [pc, #104]	; (8003984 <HAL_DMA_Abort+0x47c>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d004      	beq.n	800392a <HAL_DMA_Abort+0x422>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a18      	ldr	r2, [pc, #96]	; (8003988 <HAL_DMA_Abort+0x480>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d101      	bne.n	800392e <HAL_DMA_Abort+0x426>
 800392a:	2301      	movs	r3, #1
 800392c:	e000      	b.n	8003930 <HAL_DMA_Abort+0x428>
 800392e:	2300      	movs	r3, #0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d02b      	beq.n	800398c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003938:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800393e:	f003 031f 	and.w	r3, r3, #31
 8003942:	223f      	movs	r2, #63	; 0x3f
 8003944:	409a      	lsls	r2, r3
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	609a      	str	r2, [r3, #8]
 800394a:	e02a      	b.n	80039a2 <HAL_DMA_Abort+0x49a>
 800394c:	40020010 	.word	0x40020010
 8003950:	40020028 	.word	0x40020028
 8003954:	40020040 	.word	0x40020040
 8003958:	40020058 	.word	0x40020058
 800395c:	40020070 	.word	0x40020070
 8003960:	40020088 	.word	0x40020088
 8003964:	400200a0 	.word	0x400200a0
 8003968:	400200b8 	.word	0x400200b8
 800396c:	40020410 	.word	0x40020410
 8003970:	40020428 	.word	0x40020428
 8003974:	40020440 	.word	0x40020440
 8003978:	40020458 	.word	0x40020458
 800397c:	40020470 	.word	0x40020470
 8003980:	40020488 	.word	0x40020488
 8003984:	400204a0 	.word	0x400204a0
 8003988:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003990:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003996:	f003 031f 	and.w	r3, r3, #31
 800399a:	2201      	movs	r2, #1
 800399c:	409a      	lsls	r2, r3
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a4f      	ldr	r2, [pc, #316]	; (8003ae4 <HAL_DMA_Abort+0x5dc>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d072      	beq.n	8003a92 <HAL_DMA_Abort+0x58a>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a4d      	ldr	r2, [pc, #308]	; (8003ae8 <HAL_DMA_Abort+0x5e0>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d06d      	beq.n	8003a92 <HAL_DMA_Abort+0x58a>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a4c      	ldr	r2, [pc, #304]	; (8003aec <HAL_DMA_Abort+0x5e4>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d068      	beq.n	8003a92 <HAL_DMA_Abort+0x58a>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a4a      	ldr	r2, [pc, #296]	; (8003af0 <HAL_DMA_Abort+0x5e8>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d063      	beq.n	8003a92 <HAL_DMA_Abort+0x58a>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a49      	ldr	r2, [pc, #292]	; (8003af4 <HAL_DMA_Abort+0x5ec>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d05e      	beq.n	8003a92 <HAL_DMA_Abort+0x58a>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a47      	ldr	r2, [pc, #284]	; (8003af8 <HAL_DMA_Abort+0x5f0>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d059      	beq.n	8003a92 <HAL_DMA_Abort+0x58a>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a46      	ldr	r2, [pc, #280]	; (8003afc <HAL_DMA_Abort+0x5f4>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d054      	beq.n	8003a92 <HAL_DMA_Abort+0x58a>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a44      	ldr	r2, [pc, #272]	; (8003b00 <HAL_DMA_Abort+0x5f8>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d04f      	beq.n	8003a92 <HAL_DMA_Abort+0x58a>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a43      	ldr	r2, [pc, #268]	; (8003b04 <HAL_DMA_Abort+0x5fc>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d04a      	beq.n	8003a92 <HAL_DMA_Abort+0x58a>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a41      	ldr	r2, [pc, #260]	; (8003b08 <HAL_DMA_Abort+0x600>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d045      	beq.n	8003a92 <HAL_DMA_Abort+0x58a>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a40      	ldr	r2, [pc, #256]	; (8003b0c <HAL_DMA_Abort+0x604>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d040      	beq.n	8003a92 <HAL_DMA_Abort+0x58a>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a3e      	ldr	r2, [pc, #248]	; (8003b10 <HAL_DMA_Abort+0x608>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d03b      	beq.n	8003a92 <HAL_DMA_Abort+0x58a>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a3d      	ldr	r2, [pc, #244]	; (8003b14 <HAL_DMA_Abort+0x60c>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d036      	beq.n	8003a92 <HAL_DMA_Abort+0x58a>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a3b      	ldr	r2, [pc, #236]	; (8003b18 <HAL_DMA_Abort+0x610>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d031      	beq.n	8003a92 <HAL_DMA_Abort+0x58a>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a3a      	ldr	r2, [pc, #232]	; (8003b1c <HAL_DMA_Abort+0x614>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d02c      	beq.n	8003a92 <HAL_DMA_Abort+0x58a>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a38      	ldr	r2, [pc, #224]	; (8003b20 <HAL_DMA_Abort+0x618>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d027      	beq.n	8003a92 <HAL_DMA_Abort+0x58a>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a37      	ldr	r2, [pc, #220]	; (8003b24 <HAL_DMA_Abort+0x61c>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d022      	beq.n	8003a92 <HAL_DMA_Abort+0x58a>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a35      	ldr	r2, [pc, #212]	; (8003b28 <HAL_DMA_Abort+0x620>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d01d      	beq.n	8003a92 <HAL_DMA_Abort+0x58a>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a34      	ldr	r2, [pc, #208]	; (8003b2c <HAL_DMA_Abort+0x624>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d018      	beq.n	8003a92 <HAL_DMA_Abort+0x58a>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a32      	ldr	r2, [pc, #200]	; (8003b30 <HAL_DMA_Abort+0x628>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d013      	beq.n	8003a92 <HAL_DMA_Abort+0x58a>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a31      	ldr	r2, [pc, #196]	; (8003b34 <HAL_DMA_Abort+0x62c>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d00e      	beq.n	8003a92 <HAL_DMA_Abort+0x58a>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a2f      	ldr	r2, [pc, #188]	; (8003b38 <HAL_DMA_Abort+0x630>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d009      	beq.n	8003a92 <HAL_DMA_Abort+0x58a>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a2e      	ldr	r2, [pc, #184]	; (8003b3c <HAL_DMA_Abort+0x634>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d004      	beq.n	8003a92 <HAL_DMA_Abort+0x58a>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a2c      	ldr	r2, [pc, #176]	; (8003b40 <HAL_DMA_Abort+0x638>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d101      	bne.n	8003a96 <HAL_DMA_Abort+0x58e>
 8003a92:	2301      	movs	r3, #1
 8003a94:	e000      	b.n	8003a98 <HAL_DMA_Abort+0x590>
 8003a96:	2300      	movs	r3, #0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d015      	beq.n	8003ac8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003aa4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00c      	beq.n	8003ac8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ab8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003abc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003ac6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3718      	adds	r7, #24
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	40020010 	.word	0x40020010
 8003ae8:	40020028 	.word	0x40020028
 8003aec:	40020040 	.word	0x40020040
 8003af0:	40020058 	.word	0x40020058
 8003af4:	40020070 	.word	0x40020070
 8003af8:	40020088 	.word	0x40020088
 8003afc:	400200a0 	.word	0x400200a0
 8003b00:	400200b8 	.word	0x400200b8
 8003b04:	40020410 	.word	0x40020410
 8003b08:	40020428 	.word	0x40020428
 8003b0c:	40020440 	.word	0x40020440
 8003b10:	40020458 	.word	0x40020458
 8003b14:	40020470 	.word	0x40020470
 8003b18:	40020488 	.word	0x40020488
 8003b1c:	400204a0 	.word	0x400204a0
 8003b20:	400204b8 	.word	0x400204b8
 8003b24:	58025408 	.word	0x58025408
 8003b28:	5802541c 	.word	0x5802541c
 8003b2c:	58025430 	.word	0x58025430
 8003b30:	58025444 	.word	0x58025444
 8003b34:	58025458 	.word	0x58025458
 8003b38:	5802546c 	.word	0x5802546c
 8003b3c:	58025480 	.word	0x58025480
 8003b40:	58025494 	.word	0x58025494

08003b44 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d101      	bne.n	8003b56 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e205      	b.n	8003f62 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d004      	beq.n	8003b6c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2280      	movs	r2, #128	; 0x80
 8003b66:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e1fa      	b.n	8003f62 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a8c      	ldr	r2, [pc, #560]	; (8003da4 <HAL_DMA_Abort_IT+0x260>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d04a      	beq.n	8003c0c <HAL_DMA_Abort_IT+0xc8>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a8b      	ldr	r2, [pc, #556]	; (8003da8 <HAL_DMA_Abort_IT+0x264>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d045      	beq.n	8003c0c <HAL_DMA_Abort_IT+0xc8>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a89      	ldr	r2, [pc, #548]	; (8003dac <HAL_DMA_Abort_IT+0x268>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d040      	beq.n	8003c0c <HAL_DMA_Abort_IT+0xc8>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a88      	ldr	r2, [pc, #544]	; (8003db0 <HAL_DMA_Abort_IT+0x26c>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d03b      	beq.n	8003c0c <HAL_DMA_Abort_IT+0xc8>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a86      	ldr	r2, [pc, #536]	; (8003db4 <HAL_DMA_Abort_IT+0x270>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d036      	beq.n	8003c0c <HAL_DMA_Abort_IT+0xc8>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a85      	ldr	r2, [pc, #532]	; (8003db8 <HAL_DMA_Abort_IT+0x274>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d031      	beq.n	8003c0c <HAL_DMA_Abort_IT+0xc8>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a83      	ldr	r2, [pc, #524]	; (8003dbc <HAL_DMA_Abort_IT+0x278>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d02c      	beq.n	8003c0c <HAL_DMA_Abort_IT+0xc8>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a82      	ldr	r2, [pc, #520]	; (8003dc0 <HAL_DMA_Abort_IT+0x27c>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d027      	beq.n	8003c0c <HAL_DMA_Abort_IT+0xc8>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a80      	ldr	r2, [pc, #512]	; (8003dc4 <HAL_DMA_Abort_IT+0x280>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d022      	beq.n	8003c0c <HAL_DMA_Abort_IT+0xc8>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a7f      	ldr	r2, [pc, #508]	; (8003dc8 <HAL_DMA_Abort_IT+0x284>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d01d      	beq.n	8003c0c <HAL_DMA_Abort_IT+0xc8>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a7d      	ldr	r2, [pc, #500]	; (8003dcc <HAL_DMA_Abort_IT+0x288>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d018      	beq.n	8003c0c <HAL_DMA_Abort_IT+0xc8>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a7c      	ldr	r2, [pc, #496]	; (8003dd0 <HAL_DMA_Abort_IT+0x28c>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d013      	beq.n	8003c0c <HAL_DMA_Abort_IT+0xc8>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a7a      	ldr	r2, [pc, #488]	; (8003dd4 <HAL_DMA_Abort_IT+0x290>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d00e      	beq.n	8003c0c <HAL_DMA_Abort_IT+0xc8>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a79      	ldr	r2, [pc, #484]	; (8003dd8 <HAL_DMA_Abort_IT+0x294>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d009      	beq.n	8003c0c <HAL_DMA_Abort_IT+0xc8>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a77      	ldr	r2, [pc, #476]	; (8003ddc <HAL_DMA_Abort_IT+0x298>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d004      	beq.n	8003c0c <HAL_DMA_Abort_IT+0xc8>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a76      	ldr	r2, [pc, #472]	; (8003de0 <HAL_DMA_Abort_IT+0x29c>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d101      	bne.n	8003c10 <HAL_DMA_Abort_IT+0xcc>
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e000      	b.n	8003c12 <HAL_DMA_Abort_IT+0xce>
 8003c10:	2300      	movs	r3, #0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d065      	beq.n	8003ce2 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2204      	movs	r2, #4
 8003c1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a60      	ldr	r2, [pc, #384]	; (8003da4 <HAL_DMA_Abort_IT+0x260>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d04a      	beq.n	8003cbe <HAL_DMA_Abort_IT+0x17a>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a5e      	ldr	r2, [pc, #376]	; (8003da8 <HAL_DMA_Abort_IT+0x264>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d045      	beq.n	8003cbe <HAL_DMA_Abort_IT+0x17a>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a5d      	ldr	r2, [pc, #372]	; (8003dac <HAL_DMA_Abort_IT+0x268>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d040      	beq.n	8003cbe <HAL_DMA_Abort_IT+0x17a>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a5b      	ldr	r2, [pc, #364]	; (8003db0 <HAL_DMA_Abort_IT+0x26c>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d03b      	beq.n	8003cbe <HAL_DMA_Abort_IT+0x17a>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a5a      	ldr	r2, [pc, #360]	; (8003db4 <HAL_DMA_Abort_IT+0x270>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d036      	beq.n	8003cbe <HAL_DMA_Abort_IT+0x17a>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a58      	ldr	r2, [pc, #352]	; (8003db8 <HAL_DMA_Abort_IT+0x274>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d031      	beq.n	8003cbe <HAL_DMA_Abort_IT+0x17a>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a57      	ldr	r2, [pc, #348]	; (8003dbc <HAL_DMA_Abort_IT+0x278>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d02c      	beq.n	8003cbe <HAL_DMA_Abort_IT+0x17a>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a55      	ldr	r2, [pc, #340]	; (8003dc0 <HAL_DMA_Abort_IT+0x27c>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d027      	beq.n	8003cbe <HAL_DMA_Abort_IT+0x17a>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a54      	ldr	r2, [pc, #336]	; (8003dc4 <HAL_DMA_Abort_IT+0x280>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d022      	beq.n	8003cbe <HAL_DMA_Abort_IT+0x17a>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a52      	ldr	r2, [pc, #328]	; (8003dc8 <HAL_DMA_Abort_IT+0x284>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d01d      	beq.n	8003cbe <HAL_DMA_Abort_IT+0x17a>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a51      	ldr	r2, [pc, #324]	; (8003dcc <HAL_DMA_Abort_IT+0x288>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d018      	beq.n	8003cbe <HAL_DMA_Abort_IT+0x17a>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a4f      	ldr	r2, [pc, #316]	; (8003dd0 <HAL_DMA_Abort_IT+0x28c>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d013      	beq.n	8003cbe <HAL_DMA_Abort_IT+0x17a>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a4e      	ldr	r2, [pc, #312]	; (8003dd4 <HAL_DMA_Abort_IT+0x290>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d00e      	beq.n	8003cbe <HAL_DMA_Abort_IT+0x17a>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a4c      	ldr	r2, [pc, #304]	; (8003dd8 <HAL_DMA_Abort_IT+0x294>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d009      	beq.n	8003cbe <HAL_DMA_Abort_IT+0x17a>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a4b      	ldr	r2, [pc, #300]	; (8003ddc <HAL_DMA_Abort_IT+0x298>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d004      	beq.n	8003cbe <HAL_DMA_Abort_IT+0x17a>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a49      	ldr	r2, [pc, #292]	; (8003de0 <HAL_DMA_Abort_IT+0x29c>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d108      	bne.n	8003cd0 <HAL_DMA_Abort_IT+0x18c>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f022 0201 	bic.w	r2, r2, #1
 8003ccc:	601a      	str	r2, [r3, #0]
 8003cce:	e147      	b.n	8003f60 <HAL_DMA_Abort_IT+0x41c>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f022 0201 	bic.w	r2, r2, #1
 8003cde:	601a      	str	r2, [r3, #0]
 8003ce0:	e13e      	b.n	8003f60 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f022 020e 	bic.w	r2, r2, #14
 8003cf0:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a2b      	ldr	r2, [pc, #172]	; (8003da4 <HAL_DMA_Abort_IT+0x260>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d04a      	beq.n	8003d92 <HAL_DMA_Abort_IT+0x24e>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a29      	ldr	r2, [pc, #164]	; (8003da8 <HAL_DMA_Abort_IT+0x264>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d045      	beq.n	8003d92 <HAL_DMA_Abort_IT+0x24e>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a28      	ldr	r2, [pc, #160]	; (8003dac <HAL_DMA_Abort_IT+0x268>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d040      	beq.n	8003d92 <HAL_DMA_Abort_IT+0x24e>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a26      	ldr	r2, [pc, #152]	; (8003db0 <HAL_DMA_Abort_IT+0x26c>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d03b      	beq.n	8003d92 <HAL_DMA_Abort_IT+0x24e>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a25      	ldr	r2, [pc, #148]	; (8003db4 <HAL_DMA_Abort_IT+0x270>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d036      	beq.n	8003d92 <HAL_DMA_Abort_IT+0x24e>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a23      	ldr	r2, [pc, #140]	; (8003db8 <HAL_DMA_Abort_IT+0x274>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d031      	beq.n	8003d92 <HAL_DMA_Abort_IT+0x24e>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a22      	ldr	r2, [pc, #136]	; (8003dbc <HAL_DMA_Abort_IT+0x278>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d02c      	beq.n	8003d92 <HAL_DMA_Abort_IT+0x24e>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a20      	ldr	r2, [pc, #128]	; (8003dc0 <HAL_DMA_Abort_IT+0x27c>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d027      	beq.n	8003d92 <HAL_DMA_Abort_IT+0x24e>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a1f      	ldr	r2, [pc, #124]	; (8003dc4 <HAL_DMA_Abort_IT+0x280>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d022      	beq.n	8003d92 <HAL_DMA_Abort_IT+0x24e>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a1d      	ldr	r2, [pc, #116]	; (8003dc8 <HAL_DMA_Abort_IT+0x284>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d01d      	beq.n	8003d92 <HAL_DMA_Abort_IT+0x24e>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a1c      	ldr	r2, [pc, #112]	; (8003dcc <HAL_DMA_Abort_IT+0x288>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d018      	beq.n	8003d92 <HAL_DMA_Abort_IT+0x24e>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a1a      	ldr	r2, [pc, #104]	; (8003dd0 <HAL_DMA_Abort_IT+0x28c>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d013      	beq.n	8003d92 <HAL_DMA_Abort_IT+0x24e>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a19      	ldr	r2, [pc, #100]	; (8003dd4 <HAL_DMA_Abort_IT+0x290>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d00e      	beq.n	8003d92 <HAL_DMA_Abort_IT+0x24e>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a17      	ldr	r2, [pc, #92]	; (8003dd8 <HAL_DMA_Abort_IT+0x294>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d009      	beq.n	8003d92 <HAL_DMA_Abort_IT+0x24e>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a16      	ldr	r2, [pc, #88]	; (8003ddc <HAL_DMA_Abort_IT+0x298>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d004      	beq.n	8003d92 <HAL_DMA_Abort_IT+0x24e>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a14      	ldr	r2, [pc, #80]	; (8003de0 <HAL_DMA_Abort_IT+0x29c>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d128      	bne.n	8003de4 <HAL_DMA_Abort_IT+0x2a0>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f022 0201 	bic.w	r2, r2, #1
 8003da0:	601a      	str	r2, [r3, #0]
 8003da2:	e027      	b.n	8003df4 <HAL_DMA_Abort_IT+0x2b0>
 8003da4:	40020010 	.word	0x40020010
 8003da8:	40020028 	.word	0x40020028
 8003dac:	40020040 	.word	0x40020040
 8003db0:	40020058 	.word	0x40020058
 8003db4:	40020070 	.word	0x40020070
 8003db8:	40020088 	.word	0x40020088
 8003dbc:	400200a0 	.word	0x400200a0
 8003dc0:	400200b8 	.word	0x400200b8
 8003dc4:	40020410 	.word	0x40020410
 8003dc8:	40020428 	.word	0x40020428
 8003dcc:	40020440 	.word	0x40020440
 8003dd0:	40020458 	.word	0x40020458
 8003dd4:	40020470 	.word	0x40020470
 8003dd8:	40020488 	.word	0x40020488
 8003ddc:	400204a0 	.word	0x400204a0
 8003de0:	400204b8 	.word	0x400204b8
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f022 0201 	bic.w	r2, r2, #1
 8003df2:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a5c      	ldr	r2, [pc, #368]	; (8003f6c <HAL_DMA_Abort_IT+0x428>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d072      	beq.n	8003ee4 <HAL_DMA_Abort_IT+0x3a0>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a5b      	ldr	r2, [pc, #364]	; (8003f70 <HAL_DMA_Abort_IT+0x42c>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d06d      	beq.n	8003ee4 <HAL_DMA_Abort_IT+0x3a0>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a59      	ldr	r2, [pc, #356]	; (8003f74 <HAL_DMA_Abort_IT+0x430>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d068      	beq.n	8003ee4 <HAL_DMA_Abort_IT+0x3a0>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a58      	ldr	r2, [pc, #352]	; (8003f78 <HAL_DMA_Abort_IT+0x434>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d063      	beq.n	8003ee4 <HAL_DMA_Abort_IT+0x3a0>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a56      	ldr	r2, [pc, #344]	; (8003f7c <HAL_DMA_Abort_IT+0x438>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d05e      	beq.n	8003ee4 <HAL_DMA_Abort_IT+0x3a0>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a55      	ldr	r2, [pc, #340]	; (8003f80 <HAL_DMA_Abort_IT+0x43c>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d059      	beq.n	8003ee4 <HAL_DMA_Abort_IT+0x3a0>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a53      	ldr	r2, [pc, #332]	; (8003f84 <HAL_DMA_Abort_IT+0x440>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d054      	beq.n	8003ee4 <HAL_DMA_Abort_IT+0x3a0>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a52      	ldr	r2, [pc, #328]	; (8003f88 <HAL_DMA_Abort_IT+0x444>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d04f      	beq.n	8003ee4 <HAL_DMA_Abort_IT+0x3a0>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a50      	ldr	r2, [pc, #320]	; (8003f8c <HAL_DMA_Abort_IT+0x448>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d04a      	beq.n	8003ee4 <HAL_DMA_Abort_IT+0x3a0>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a4f      	ldr	r2, [pc, #316]	; (8003f90 <HAL_DMA_Abort_IT+0x44c>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d045      	beq.n	8003ee4 <HAL_DMA_Abort_IT+0x3a0>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a4d      	ldr	r2, [pc, #308]	; (8003f94 <HAL_DMA_Abort_IT+0x450>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d040      	beq.n	8003ee4 <HAL_DMA_Abort_IT+0x3a0>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a4c      	ldr	r2, [pc, #304]	; (8003f98 <HAL_DMA_Abort_IT+0x454>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d03b      	beq.n	8003ee4 <HAL_DMA_Abort_IT+0x3a0>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a4a      	ldr	r2, [pc, #296]	; (8003f9c <HAL_DMA_Abort_IT+0x458>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d036      	beq.n	8003ee4 <HAL_DMA_Abort_IT+0x3a0>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a49      	ldr	r2, [pc, #292]	; (8003fa0 <HAL_DMA_Abort_IT+0x45c>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d031      	beq.n	8003ee4 <HAL_DMA_Abort_IT+0x3a0>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a47      	ldr	r2, [pc, #284]	; (8003fa4 <HAL_DMA_Abort_IT+0x460>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d02c      	beq.n	8003ee4 <HAL_DMA_Abort_IT+0x3a0>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a46      	ldr	r2, [pc, #280]	; (8003fa8 <HAL_DMA_Abort_IT+0x464>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d027      	beq.n	8003ee4 <HAL_DMA_Abort_IT+0x3a0>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a44      	ldr	r2, [pc, #272]	; (8003fac <HAL_DMA_Abort_IT+0x468>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d022      	beq.n	8003ee4 <HAL_DMA_Abort_IT+0x3a0>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a43      	ldr	r2, [pc, #268]	; (8003fb0 <HAL_DMA_Abort_IT+0x46c>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d01d      	beq.n	8003ee4 <HAL_DMA_Abort_IT+0x3a0>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a41      	ldr	r2, [pc, #260]	; (8003fb4 <HAL_DMA_Abort_IT+0x470>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d018      	beq.n	8003ee4 <HAL_DMA_Abort_IT+0x3a0>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a40      	ldr	r2, [pc, #256]	; (8003fb8 <HAL_DMA_Abort_IT+0x474>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d013      	beq.n	8003ee4 <HAL_DMA_Abort_IT+0x3a0>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a3e      	ldr	r2, [pc, #248]	; (8003fbc <HAL_DMA_Abort_IT+0x478>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d00e      	beq.n	8003ee4 <HAL_DMA_Abort_IT+0x3a0>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a3d      	ldr	r2, [pc, #244]	; (8003fc0 <HAL_DMA_Abort_IT+0x47c>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d009      	beq.n	8003ee4 <HAL_DMA_Abort_IT+0x3a0>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a3b      	ldr	r2, [pc, #236]	; (8003fc4 <HAL_DMA_Abort_IT+0x480>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d004      	beq.n	8003ee4 <HAL_DMA_Abort_IT+0x3a0>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a3a      	ldr	r2, [pc, #232]	; (8003fc8 <HAL_DMA_Abort_IT+0x484>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d101      	bne.n	8003ee8 <HAL_DMA_Abort_IT+0x3a4>
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e000      	b.n	8003eea <HAL_DMA_Abort_IT+0x3a6>
 8003ee8:	2300      	movs	r3, #0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d028      	beq.n	8003f40 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ef8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003efc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f02:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f08:	f003 031f 	and.w	r3, r3, #31
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	409a      	lsls	r2, r3
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003f1c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d00c      	beq.n	8003f40 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f34:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003f3e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d003      	beq.n	8003f60 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3710      	adds	r7, #16
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	40020010 	.word	0x40020010
 8003f70:	40020028 	.word	0x40020028
 8003f74:	40020040 	.word	0x40020040
 8003f78:	40020058 	.word	0x40020058
 8003f7c:	40020070 	.word	0x40020070
 8003f80:	40020088 	.word	0x40020088
 8003f84:	400200a0 	.word	0x400200a0
 8003f88:	400200b8 	.word	0x400200b8
 8003f8c:	40020410 	.word	0x40020410
 8003f90:	40020428 	.word	0x40020428
 8003f94:	40020440 	.word	0x40020440
 8003f98:	40020458 	.word	0x40020458
 8003f9c:	40020470 	.word	0x40020470
 8003fa0:	40020488 	.word	0x40020488
 8003fa4:	400204a0 	.word	0x400204a0
 8003fa8:	400204b8 	.word	0x400204b8
 8003fac:	58025408 	.word	0x58025408
 8003fb0:	5802541c 	.word	0x5802541c
 8003fb4:	58025430 	.word	0x58025430
 8003fb8:	58025444 	.word	0x58025444
 8003fbc:	58025458 	.word	0x58025458
 8003fc0:	5802546c 	.word	0x5802546c
 8003fc4:	58025480 	.word	0x58025480
 8003fc8:	58025494 	.word	0x58025494

08003fcc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b08a      	sub	sp, #40	; 0x28
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003fd8:	4b67      	ldr	r3, [pc, #412]	; (8004178 <HAL_DMA_IRQHandler+0x1ac>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a67      	ldr	r2, [pc, #412]	; (800417c <HAL_DMA_IRQHandler+0x1b0>)
 8003fde:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe2:	0a9b      	lsrs	r3, r3, #10
 8003fe4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fea:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ff0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003ff2:	6a3b      	ldr	r3, [r7, #32]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a5f      	ldr	r2, [pc, #380]	; (8004180 <HAL_DMA_IRQHandler+0x1b4>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d04a      	beq.n	800409e <HAL_DMA_IRQHandler+0xd2>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a5d      	ldr	r2, [pc, #372]	; (8004184 <HAL_DMA_IRQHandler+0x1b8>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d045      	beq.n	800409e <HAL_DMA_IRQHandler+0xd2>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a5c      	ldr	r2, [pc, #368]	; (8004188 <HAL_DMA_IRQHandler+0x1bc>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d040      	beq.n	800409e <HAL_DMA_IRQHandler+0xd2>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a5a      	ldr	r2, [pc, #360]	; (800418c <HAL_DMA_IRQHandler+0x1c0>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d03b      	beq.n	800409e <HAL_DMA_IRQHandler+0xd2>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a59      	ldr	r2, [pc, #356]	; (8004190 <HAL_DMA_IRQHandler+0x1c4>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d036      	beq.n	800409e <HAL_DMA_IRQHandler+0xd2>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a57      	ldr	r2, [pc, #348]	; (8004194 <HAL_DMA_IRQHandler+0x1c8>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d031      	beq.n	800409e <HAL_DMA_IRQHandler+0xd2>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a56      	ldr	r2, [pc, #344]	; (8004198 <HAL_DMA_IRQHandler+0x1cc>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d02c      	beq.n	800409e <HAL_DMA_IRQHandler+0xd2>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a54      	ldr	r2, [pc, #336]	; (800419c <HAL_DMA_IRQHandler+0x1d0>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d027      	beq.n	800409e <HAL_DMA_IRQHandler+0xd2>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a53      	ldr	r2, [pc, #332]	; (80041a0 <HAL_DMA_IRQHandler+0x1d4>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d022      	beq.n	800409e <HAL_DMA_IRQHandler+0xd2>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a51      	ldr	r2, [pc, #324]	; (80041a4 <HAL_DMA_IRQHandler+0x1d8>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d01d      	beq.n	800409e <HAL_DMA_IRQHandler+0xd2>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a50      	ldr	r2, [pc, #320]	; (80041a8 <HAL_DMA_IRQHandler+0x1dc>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d018      	beq.n	800409e <HAL_DMA_IRQHandler+0xd2>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a4e      	ldr	r2, [pc, #312]	; (80041ac <HAL_DMA_IRQHandler+0x1e0>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d013      	beq.n	800409e <HAL_DMA_IRQHandler+0xd2>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a4d      	ldr	r2, [pc, #308]	; (80041b0 <HAL_DMA_IRQHandler+0x1e4>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d00e      	beq.n	800409e <HAL_DMA_IRQHandler+0xd2>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a4b      	ldr	r2, [pc, #300]	; (80041b4 <HAL_DMA_IRQHandler+0x1e8>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d009      	beq.n	800409e <HAL_DMA_IRQHandler+0xd2>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a4a      	ldr	r2, [pc, #296]	; (80041b8 <HAL_DMA_IRQHandler+0x1ec>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d004      	beq.n	800409e <HAL_DMA_IRQHandler+0xd2>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a48      	ldr	r2, [pc, #288]	; (80041bc <HAL_DMA_IRQHandler+0x1f0>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d101      	bne.n	80040a2 <HAL_DMA_IRQHandler+0xd6>
 800409e:	2301      	movs	r3, #1
 80040a0:	e000      	b.n	80040a4 <HAL_DMA_IRQHandler+0xd8>
 80040a2:	2300      	movs	r3, #0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	f000 842b 	beq.w	8004900 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040ae:	f003 031f 	and.w	r3, r3, #31
 80040b2:	2208      	movs	r2, #8
 80040b4:	409a      	lsls	r2, r3
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	4013      	ands	r3, r2
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	f000 80a2 	beq.w	8004204 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a2e      	ldr	r2, [pc, #184]	; (8004180 <HAL_DMA_IRQHandler+0x1b4>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d04a      	beq.n	8004160 <HAL_DMA_IRQHandler+0x194>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a2d      	ldr	r2, [pc, #180]	; (8004184 <HAL_DMA_IRQHandler+0x1b8>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d045      	beq.n	8004160 <HAL_DMA_IRQHandler+0x194>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a2b      	ldr	r2, [pc, #172]	; (8004188 <HAL_DMA_IRQHandler+0x1bc>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d040      	beq.n	8004160 <HAL_DMA_IRQHandler+0x194>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a2a      	ldr	r2, [pc, #168]	; (800418c <HAL_DMA_IRQHandler+0x1c0>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d03b      	beq.n	8004160 <HAL_DMA_IRQHandler+0x194>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a28      	ldr	r2, [pc, #160]	; (8004190 <HAL_DMA_IRQHandler+0x1c4>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d036      	beq.n	8004160 <HAL_DMA_IRQHandler+0x194>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a27      	ldr	r2, [pc, #156]	; (8004194 <HAL_DMA_IRQHandler+0x1c8>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d031      	beq.n	8004160 <HAL_DMA_IRQHandler+0x194>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a25      	ldr	r2, [pc, #148]	; (8004198 <HAL_DMA_IRQHandler+0x1cc>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d02c      	beq.n	8004160 <HAL_DMA_IRQHandler+0x194>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a24      	ldr	r2, [pc, #144]	; (800419c <HAL_DMA_IRQHandler+0x1d0>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d027      	beq.n	8004160 <HAL_DMA_IRQHandler+0x194>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a22      	ldr	r2, [pc, #136]	; (80041a0 <HAL_DMA_IRQHandler+0x1d4>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d022      	beq.n	8004160 <HAL_DMA_IRQHandler+0x194>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a21      	ldr	r2, [pc, #132]	; (80041a4 <HAL_DMA_IRQHandler+0x1d8>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d01d      	beq.n	8004160 <HAL_DMA_IRQHandler+0x194>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a1f      	ldr	r2, [pc, #124]	; (80041a8 <HAL_DMA_IRQHandler+0x1dc>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d018      	beq.n	8004160 <HAL_DMA_IRQHandler+0x194>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a1e      	ldr	r2, [pc, #120]	; (80041ac <HAL_DMA_IRQHandler+0x1e0>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d013      	beq.n	8004160 <HAL_DMA_IRQHandler+0x194>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a1c      	ldr	r2, [pc, #112]	; (80041b0 <HAL_DMA_IRQHandler+0x1e4>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d00e      	beq.n	8004160 <HAL_DMA_IRQHandler+0x194>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a1b      	ldr	r2, [pc, #108]	; (80041b4 <HAL_DMA_IRQHandler+0x1e8>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d009      	beq.n	8004160 <HAL_DMA_IRQHandler+0x194>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a19      	ldr	r2, [pc, #100]	; (80041b8 <HAL_DMA_IRQHandler+0x1ec>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d004      	beq.n	8004160 <HAL_DMA_IRQHandler+0x194>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a18      	ldr	r2, [pc, #96]	; (80041bc <HAL_DMA_IRQHandler+0x1f0>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d12f      	bne.n	80041c0 <HAL_DMA_IRQHandler+0x1f4>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0304 	and.w	r3, r3, #4
 800416a:	2b00      	cmp	r3, #0
 800416c:	bf14      	ite	ne
 800416e:	2301      	movne	r3, #1
 8004170:	2300      	moveq	r3, #0
 8004172:	b2db      	uxtb	r3, r3
 8004174:	e02e      	b.n	80041d4 <HAL_DMA_IRQHandler+0x208>
 8004176:	bf00      	nop
 8004178:	24000410 	.word	0x24000410
 800417c:	1b4e81b5 	.word	0x1b4e81b5
 8004180:	40020010 	.word	0x40020010
 8004184:	40020028 	.word	0x40020028
 8004188:	40020040 	.word	0x40020040
 800418c:	40020058 	.word	0x40020058
 8004190:	40020070 	.word	0x40020070
 8004194:	40020088 	.word	0x40020088
 8004198:	400200a0 	.word	0x400200a0
 800419c:	400200b8 	.word	0x400200b8
 80041a0:	40020410 	.word	0x40020410
 80041a4:	40020428 	.word	0x40020428
 80041a8:	40020440 	.word	0x40020440
 80041ac:	40020458 	.word	0x40020458
 80041b0:	40020470 	.word	0x40020470
 80041b4:	40020488 	.word	0x40020488
 80041b8:	400204a0 	.word	0x400204a0
 80041bc:	400204b8 	.word	0x400204b8
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0308 	and.w	r3, r3, #8
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	bf14      	ite	ne
 80041ce:	2301      	movne	r3, #1
 80041d0:	2300      	moveq	r3, #0
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d015      	beq.n	8004204 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f022 0204 	bic.w	r2, r2, #4
 80041e6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ec:	f003 031f 	and.w	r3, r3, #31
 80041f0:	2208      	movs	r2, #8
 80041f2:	409a      	lsls	r2, r3
 80041f4:	6a3b      	ldr	r3, [r7, #32]
 80041f6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041fc:	f043 0201 	orr.w	r2, r3, #1
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004208:	f003 031f 	and.w	r3, r3, #31
 800420c:	69ba      	ldr	r2, [r7, #24]
 800420e:	fa22 f303 	lsr.w	r3, r2, r3
 8004212:	f003 0301 	and.w	r3, r3, #1
 8004216:	2b00      	cmp	r3, #0
 8004218:	d06e      	beq.n	80042f8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a69      	ldr	r2, [pc, #420]	; (80043c4 <HAL_DMA_IRQHandler+0x3f8>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d04a      	beq.n	80042ba <HAL_DMA_IRQHandler+0x2ee>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a67      	ldr	r2, [pc, #412]	; (80043c8 <HAL_DMA_IRQHandler+0x3fc>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d045      	beq.n	80042ba <HAL_DMA_IRQHandler+0x2ee>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a66      	ldr	r2, [pc, #408]	; (80043cc <HAL_DMA_IRQHandler+0x400>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d040      	beq.n	80042ba <HAL_DMA_IRQHandler+0x2ee>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a64      	ldr	r2, [pc, #400]	; (80043d0 <HAL_DMA_IRQHandler+0x404>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d03b      	beq.n	80042ba <HAL_DMA_IRQHandler+0x2ee>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a63      	ldr	r2, [pc, #396]	; (80043d4 <HAL_DMA_IRQHandler+0x408>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d036      	beq.n	80042ba <HAL_DMA_IRQHandler+0x2ee>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a61      	ldr	r2, [pc, #388]	; (80043d8 <HAL_DMA_IRQHandler+0x40c>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d031      	beq.n	80042ba <HAL_DMA_IRQHandler+0x2ee>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a60      	ldr	r2, [pc, #384]	; (80043dc <HAL_DMA_IRQHandler+0x410>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d02c      	beq.n	80042ba <HAL_DMA_IRQHandler+0x2ee>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a5e      	ldr	r2, [pc, #376]	; (80043e0 <HAL_DMA_IRQHandler+0x414>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d027      	beq.n	80042ba <HAL_DMA_IRQHandler+0x2ee>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a5d      	ldr	r2, [pc, #372]	; (80043e4 <HAL_DMA_IRQHandler+0x418>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d022      	beq.n	80042ba <HAL_DMA_IRQHandler+0x2ee>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a5b      	ldr	r2, [pc, #364]	; (80043e8 <HAL_DMA_IRQHandler+0x41c>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d01d      	beq.n	80042ba <HAL_DMA_IRQHandler+0x2ee>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a5a      	ldr	r2, [pc, #360]	; (80043ec <HAL_DMA_IRQHandler+0x420>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d018      	beq.n	80042ba <HAL_DMA_IRQHandler+0x2ee>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a58      	ldr	r2, [pc, #352]	; (80043f0 <HAL_DMA_IRQHandler+0x424>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d013      	beq.n	80042ba <HAL_DMA_IRQHandler+0x2ee>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a57      	ldr	r2, [pc, #348]	; (80043f4 <HAL_DMA_IRQHandler+0x428>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d00e      	beq.n	80042ba <HAL_DMA_IRQHandler+0x2ee>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a55      	ldr	r2, [pc, #340]	; (80043f8 <HAL_DMA_IRQHandler+0x42c>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d009      	beq.n	80042ba <HAL_DMA_IRQHandler+0x2ee>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a54      	ldr	r2, [pc, #336]	; (80043fc <HAL_DMA_IRQHandler+0x430>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d004      	beq.n	80042ba <HAL_DMA_IRQHandler+0x2ee>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a52      	ldr	r2, [pc, #328]	; (8004400 <HAL_DMA_IRQHandler+0x434>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d10a      	bne.n	80042d0 <HAL_DMA_IRQHandler+0x304>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	695b      	ldr	r3, [r3, #20]
 80042c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	bf14      	ite	ne
 80042c8:	2301      	movne	r3, #1
 80042ca:	2300      	moveq	r3, #0
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	e003      	b.n	80042d8 <HAL_DMA_IRQHandler+0x30c>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2300      	movs	r3, #0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d00d      	beq.n	80042f8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042e0:	f003 031f 	and.w	r3, r3, #31
 80042e4:	2201      	movs	r2, #1
 80042e6:	409a      	lsls	r2, r3
 80042e8:	6a3b      	ldr	r3, [r7, #32]
 80042ea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042f0:	f043 0202 	orr.w	r2, r3, #2
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042fc:	f003 031f 	and.w	r3, r3, #31
 8004300:	2204      	movs	r2, #4
 8004302:	409a      	lsls	r2, r3
 8004304:	69bb      	ldr	r3, [r7, #24]
 8004306:	4013      	ands	r3, r2
 8004308:	2b00      	cmp	r3, #0
 800430a:	f000 808f 	beq.w	800442c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a2c      	ldr	r2, [pc, #176]	; (80043c4 <HAL_DMA_IRQHandler+0x3f8>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d04a      	beq.n	80043ae <HAL_DMA_IRQHandler+0x3e2>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a2a      	ldr	r2, [pc, #168]	; (80043c8 <HAL_DMA_IRQHandler+0x3fc>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d045      	beq.n	80043ae <HAL_DMA_IRQHandler+0x3e2>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a29      	ldr	r2, [pc, #164]	; (80043cc <HAL_DMA_IRQHandler+0x400>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d040      	beq.n	80043ae <HAL_DMA_IRQHandler+0x3e2>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a27      	ldr	r2, [pc, #156]	; (80043d0 <HAL_DMA_IRQHandler+0x404>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d03b      	beq.n	80043ae <HAL_DMA_IRQHandler+0x3e2>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a26      	ldr	r2, [pc, #152]	; (80043d4 <HAL_DMA_IRQHandler+0x408>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d036      	beq.n	80043ae <HAL_DMA_IRQHandler+0x3e2>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a24      	ldr	r2, [pc, #144]	; (80043d8 <HAL_DMA_IRQHandler+0x40c>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d031      	beq.n	80043ae <HAL_DMA_IRQHandler+0x3e2>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a23      	ldr	r2, [pc, #140]	; (80043dc <HAL_DMA_IRQHandler+0x410>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d02c      	beq.n	80043ae <HAL_DMA_IRQHandler+0x3e2>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a21      	ldr	r2, [pc, #132]	; (80043e0 <HAL_DMA_IRQHandler+0x414>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d027      	beq.n	80043ae <HAL_DMA_IRQHandler+0x3e2>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a20      	ldr	r2, [pc, #128]	; (80043e4 <HAL_DMA_IRQHandler+0x418>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d022      	beq.n	80043ae <HAL_DMA_IRQHandler+0x3e2>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a1e      	ldr	r2, [pc, #120]	; (80043e8 <HAL_DMA_IRQHandler+0x41c>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d01d      	beq.n	80043ae <HAL_DMA_IRQHandler+0x3e2>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a1d      	ldr	r2, [pc, #116]	; (80043ec <HAL_DMA_IRQHandler+0x420>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d018      	beq.n	80043ae <HAL_DMA_IRQHandler+0x3e2>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a1b      	ldr	r2, [pc, #108]	; (80043f0 <HAL_DMA_IRQHandler+0x424>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d013      	beq.n	80043ae <HAL_DMA_IRQHandler+0x3e2>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a1a      	ldr	r2, [pc, #104]	; (80043f4 <HAL_DMA_IRQHandler+0x428>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d00e      	beq.n	80043ae <HAL_DMA_IRQHandler+0x3e2>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a18      	ldr	r2, [pc, #96]	; (80043f8 <HAL_DMA_IRQHandler+0x42c>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d009      	beq.n	80043ae <HAL_DMA_IRQHandler+0x3e2>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a17      	ldr	r2, [pc, #92]	; (80043fc <HAL_DMA_IRQHandler+0x430>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d004      	beq.n	80043ae <HAL_DMA_IRQHandler+0x3e2>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a15      	ldr	r2, [pc, #84]	; (8004400 <HAL_DMA_IRQHandler+0x434>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d12a      	bne.n	8004404 <HAL_DMA_IRQHandler+0x438>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0302 	and.w	r3, r3, #2
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	bf14      	ite	ne
 80043bc:	2301      	movne	r3, #1
 80043be:	2300      	moveq	r3, #0
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	e023      	b.n	800440c <HAL_DMA_IRQHandler+0x440>
 80043c4:	40020010 	.word	0x40020010
 80043c8:	40020028 	.word	0x40020028
 80043cc:	40020040 	.word	0x40020040
 80043d0:	40020058 	.word	0x40020058
 80043d4:	40020070 	.word	0x40020070
 80043d8:	40020088 	.word	0x40020088
 80043dc:	400200a0 	.word	0x400200a0
 80043e0:	400200b8 	.word	0x400200b8
 80043e4:	40020410 	.word	0x40020410
 80043e8:	40020428 	.word	0x40020428
 80043ec:	40020440 	.word	0x40020440
 80043f0:	40020458 	.word	0x40020458
 80043f4:	40020470 	.word	0x40020470
 80043f8:	40020488 	.word	0x40020488
 80043fc:	400204a0 	.word	0x400204a0
 8004400:	400204b8 	.word	0x400204b8
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2300      	movs	r3, #0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d00d      	beq.n	800442c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004414:	f003 031f 	and.w	r3, r3, #31
 8004418:	2204      	movs	r2, #4
 800441a:	409a      	lsls	r2, r3
 800441c:	6a3b      	ldr	r3, [r7, #32]
 800441e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004424:	f043 0204 	orr.w	r2, r3, #4
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004430:	f003 031f 	and.w	r3, r3, #31
 8004434:	2210      	movs	r2, #16
 8004436:	409a      	lsls	r2, r3
 8004438:	69bb      	ldr	r3, [r7, #24]
 800443a:	4013      	ands	r3, r2
 800443c:	2b00      	cmp	r3, #0
 800443e:	f000 80a6 	beq.w	800458e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a85      	ldr	r2, [pc, #532]	; (800465c <HAL_DMA_IRQHandler+0x690>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d04a      	beq.n	80044e2 <HAL_DMA_IRQHandler+0x516>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a83      	ldr	r2, [pc, #524]	; (8004660 <HAL_DMA_IRQHandler+0x694>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d045      	beq.n	80044e2 <HAL_DMA_IRQHandler+0x516>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a82      	ldr	r2, [pc, #520]	; (8004664 <HAL_DMA_IRQHandler+0x698>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d040      	beq.n	80044e2 <HAL_DMA_IRQHandler+0x516>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a80      	ldr	r2, [pc, #512]	; (8004668 <HAL_DMA_IRQHandler+0x69c>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d03b      	beq.n	80044e2 <HAL_DMA_IRQHandler+0x516>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a7f      	ldr	r2, [pc, #508]	; (800466c <HAL_DMA_IRQHandler+0x6a0>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d036      	beq.n	80044e2 <HAL_DMA_IRQHandler+0x516>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a7d      	ldr	r2, [pc, #500]	; (8004670 <HAL_DMA_IRQHandler+0x6a4>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d031      	beq.n	80044e2 <HAL_DMA_IRQHandler+0x516>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a7c      	ldr	r2, [pc, #496]	; (8004674 <HAL_DMA_IRQHandler+0x6a8>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d02c      	beq.n	80044e2 <HAL_DMA_IRQHandler+0x516>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a7a      	ldr	r2, [pc, #488]	; (8004678 <HAL_DMA_IRQHandler+0x6ac>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d027      	beq.n	80044e2 <HAL_DMA_IRQHandler+0x516>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a79      	ldr	r2, [pc, #484]	; (800467c <HAL_DMA_IRQHandler+0x6b0>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d022      	beq.n	80044e2 <HAL_DMA_IRQHandler+0x516>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a77      	ldr	r2, [pc, #476]	; (8004680 <HAL_DMA_IRQHandler+0x6b4>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d01d      	beq.n	80044e2 <HAL_DMA_IRQHandler+0x516>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a76      	ldr	r2, [pc, #472]	; (8004684 <HAL_DMA_IRQHandler+0x6b8>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d018      	beq.n	80044e2 <HAL_DMA_IRQHandler+0x516>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a74      	ldr	r2, [pc, #464]	; (8004688 <HAL_DMA_IRQHandler+0x6bc>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d013      	beq.n	80044e2 <HAL_DMA_IRQHandler+0x516>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a73      	ldr	r2, [pc, #460]	; (800468c <HAL_DMA_IRQHandler+0x6c0>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d00e      	beq.n	80044e2 <HAL_DMA_IRQHandler+0x516>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a71      	ldr	r2, [pc, #452]	; (8004690 <HAL_DMA_IRQHandler+0x6c4>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d009      	beq.n	80044e2 <HAL_DMA_IRQHandler+0x516>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a70      	ldr	r2, [pc, #448]	; (8004694 <HAL_DMA_IRQHandler+0x6c8>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d004      	beq.n	80044e2 <HAL_DMA_IRQHandler+0x516>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a6e      	ldr	r2, [pc, #440]	; (8004698 <HAL_DMA_IRQHandler+0x6cc>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d10a      	bne.n	80044f8 <HAL_DMA_IRQHandler+0x52c>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0308 	and.w	r3, r3, #8
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	bf14      	ite	ne
 80044f0:	2301      	movne	r3, #1
 80044f2:	2300      	moveq	r3, #0
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	e009      	b.n	800450c <HAL_DMA_IRQHandler+0x540>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0304 	and.w	r3, r3, #4
 8004502:	2b00      	cmp	r3, #0
 8004504:	bf14      	ite	ne
 8004506:	2301      	movne	r3, #1
 8004508:	2300      	moveq	r3, #0
 800450a:	b2db      	uxtb	r3, r3
 800450c:	2b00      	cmp	r3, #0
 800450e:	d03e      	beq.n	800458e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004514:	f003 031f 	and.w	r3, r3, #31
 8004518:	2210      	movs	r2, #16
 800451a:	409a      	lsls	r2, r3
 800451c:	6a3b      	ldr	r3, [r7, #32]
 800451e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800452a:	2b00      	cmp	r3, #0
 800452c:	d018      	beq.n	8004560 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004538:	2b00      	cmp	r3, #0
 800453a:	d108      	bne.n	800454e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004540:	2b00      	cmp	r3, #0
 8004542:	d024      	beq.n	800458e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	4798      	blx	r3
 800454c:	e01f      	b.n	800458e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004552:	2b00      	cmp	r3, #0
 8004554:	d01b      	beq.n	800458e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	4798      	blx	r3
 800455e:	e016      	b.n	800458e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800456a:	2b00      	cmp	r3, #0
 800456c:	d107      	bne.n	800457e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f022 0208 	bic.w	r2, r2, #8
 800457c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004582:	2b00      	cmp	r3, #0
 8004584:	d003      	beq.n	800458e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004592:	f003 031f 	and.w	r3, r3, #31
 8004596:	2220      	movs	r2, #32
 8004598:	409a      	lsls	r2, r3
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	4013      	ands	r3, r2
 800459e:	2b00      	cmp	r3, #0
 80045a0:	f000 8110 	beq.w	80047c4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a2c      	ldr	r2, [pc, #176]	; (800465c <HAL_DMA_IRQHandler+0x690>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d04a      	beq.n	8004644 <HAL_DMA_IRQHandler+0x678>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a2b      	ldr	r2, [pc, #172]	; (8004660 <HAL_DMA_IRQHandler+0x694>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d045      	beq.n	8004644 <HAL_DMA_IRQHandler+0x678>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a29      	ldr	r2, [pc, #164]	; (8004664 <HAL_DMA_IRQHandler+0x698>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d040      	beq.n	8004644 <HAL_DMA_IRQHandler+0x678>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a28      	ldr	r2, [pc, #160]	; (8004668 <HAL_DMA_IRQHandler+0x69c>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d03b      	beq.n	8004644 <HAL_DMA_IRQHandler+0x678>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a26      	ldr	r2, [pc, #152]	; (800466c <HAL_DMA_IRQHandler+0x6a0>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d036      	beq.n	8004644 <HAL_DMA_IRQHandler+0x678>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a25      	ldr	r2, [pc, #148]	; (8004670 <HAL_DMA_IRQHandler+0x6a4>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d031      	beq.n	8004644 <HAL_DMA_IRQHandler+0x678>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a23      	ldr	r2, [pc, #140]	; (8004674 <HAL_DMA_IRQHandler+0x6a8>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d02c      	beq.n	8004644 <HAL_DMA_IRQHandler+0x678>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a22      	ldr	r2, [pc, #136]	; (8004678 <HAL_DMA_IRQHandler+0x6ac>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d027      	beq.n	8004644 <HAL_DMA_IRQHandler+0x678>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a20      	ldr	r2, [pc, #128]	; (800467c <HAL_DMA_IRQHandler+0x6b0>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d022      	beq.n	8004644 <HAL_DMA_IRQHandler+0x678>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a1f      	ldr	r2, [pc, #124]	; (8004680 <HAL_DMA_IRQHandler+0x6b4>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d01d      	beq.n	8004644 <HAL_DMA_IRQHandler+0x678>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a1d      	ldr	r2, [pc, #116]	; (8004684 <HAL_DMA_IRQHandler+0x6b8>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d018      	beq.n	8004644 <HAL_DMA_IRQHandler+0x678>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a1c      	ldr	r2, [pc, #112]	; (8004688 <HAL_DMA_IRQHandler+0x6bc>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d013      	beq.n	8004644 <HAL_DMA_IRQHandler+0x678>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a1a      	ldr	r2, [pc, #104]	; (800468c <HAL_DMA_IRQHandler+0x6c0>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d00e      	beq.n	8004644 <HAL_DMA_IRQHandler+0x678>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a19      	ldr	r2, [pc, #100]	; (8004690 <HAL_DMA_IRQHandler+0x6c4>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d009      	beq.n	8004644 <HAL_DMA_IRQHandler+0x678>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a17      	ldr	r2, [pc, #92]	; (8004694 <HAL_DMA_IRQHandler+0x6c8>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d004      	beq.n	8004644 <HAL_DMA_IRQHandler+0x678>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a16      	ldr	r2, [pc, #88]	; (8004698 <HAL_DMA_IRQHandler+0x6cc>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d12b      	bne.n	800469c <HAL_DMA_IRQHandler+0x6d0>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0310 	and.w	r3, r3, #16
 800464e:	2b00      	cmp	r3, #0
 8004650:	bf14      	ite	ne
 8004652:	2301      	movne	r3, #1
 8004654:	2300      	moveq	r3, #0
 8004656:	b2db      	uxtb	r3, r3
 8004658:	e02a      	b.n	80046b0 <HAL_DMA_IRQHandler+0x6e4>
 800465a:	bf00      	nop
 800465c:	40020010 	.word	0x40020010
 8004660:	40020028 	.word	0x40020028
 8004664:	40020040 	.word	0x40020040
 8004668:	40020058 	.word	0x40020058
 800466c:	40020070 	.word	0x40020070
 8004670:	40020088 	.word	0x40020088
 8004674:	400200a0 	.word	0x400200a0
 8004678:	400200b8 	.word	0x400200b8
 800467c:	40020410 	.word	0x40020410
 8004680:	40020428 	.word	0x40020428
 8004684:	40020440 	.word	0x40020440
 8004688:	40020458 	.word	0x40020458
 800468c:	40020470 	.word	0x40020470
 8004690:	40020488 	.word	0x40020488
 8004694:	400204a0 	.word	0x400204a0
 8004698:	400204b8 	.word	0x400204b8
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 0302 	and.w	r3, r3, #2
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	bf14      	ite	ne
 80046aa:	2301      	movne	r3, #1
 80046ac:	2300      	moveq	r3, #0
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	f000 8087 	beq.w	80047c4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046ba:	f003 031f 	and.w	r3, r3, #31
 80046be:	2220      	movs	r2, #32
 80046c0:	409a      	lsls	r2, r3
 80046c2:	6a3b      	ldr	r3, [r7, #32]
 80046c4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	2b04      	cmp	r3, #4
 80046d0:	d139      	bne.n	8004746 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f022 0216 	bic.w	r2, r2, #22
 80046e0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	695a      	ldr	r2, [r3, #20]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046f0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d103      	bne.n	8004702 <HAL_DMA_IRQHandler+0x736>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d007      	beq.n	8004712 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f022 0208 	bic.w	r2, r2, #8
 8004710:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004716:	f003 031f 	and.w	r3, r3, #31
 800471a:	223f      	movs	r2, #63	; 0x3f
 800471c:	409a      	lsls	r2, r3
 800471e:	6a3b      	ldr	r3, [r7, #32]
 8004720:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2201      	movs	r2, #1
 8004726:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004736:	2b00      	cmp	r3, #0
 8004738:	f000 834a 	beq.w	8004dd0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	4798      	blx	r3
          }
          return;
 8004744:	e344      	b.n	8004dd0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d018      	beq.n	8004786 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d108      	bne.n	8004774 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004766:	2b00      	cmp	r3, #0
 8004768:	d02c      	beq.n	80047c4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	4798      	blx	r3
 8004772:	e027      	b.n	80047c4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004778:	2b00      	cmp	r3, #0
 800477a:	d023      	beq.n	80047c4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	4798      	blx	r3
 8004784:	e01e      	b.n	80047c4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004790:	2b00      	cmp	r3, #0
 8004792:	d10f      	bne.n	80047b4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f022 0210 	bic.w	r2, r2, #16
 80047a2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d003      	beq.n	80047c4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	f000 8306 	beq.w	8004dda <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047d2:	f003 0301 	and.w	r3, r3, #1
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	f000 8088 	beq.w	80048ec <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2204      	movs	r2, #4
 80047e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a7a      	ldr	r2, [pc, #488]	; (80049d4 <HAL_DMA_IRQHandler+0xa08>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d04a      	beq.n	8004884 <HAL_DMA_IRQHandler+0x8b8>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a79      	ldr	r2, [pc, #484]	; (80049d8 <HAL_DMA_IRQHandler+0xa0c>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d045      	beq.n	8004884 <HAL_DMA_IRQHandler+0x8b8>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a77      	ldr	r2, [pc, #476]	; (80049dc <HAL_DMA_IRQHandler+0xa10>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d040      	beq.n	8004884 <HAL_DMA_IRQHandler+0x8b8>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a76      	ldr	r2, [pc, #472]	; (80049e0 <HAL_DMA_IRQHandler+0xa14>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d03b      	beq.n	8004884 <HAL_DMA_IRQHandler+0x8b8>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a74      	ldr	r2, [pc, #464]	; (80049e4 <HAL_DMA_IRQHandler+0xa18>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d036      	beq.n	8004884 <HAL_DMA_IRQHandler+0x8b8>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a73      	ldr	r2, [pc, #460]	; (80049e8 <HAL_DMA_IRQHandler+0xa1c>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d031      	beq.n	8004884 <HAL_DMA_IRQHandler+0x8b8>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a71      	ldr	r2, [pc, #452]	; (80049ec <HAL_DMA_IRQHandler+0xa20>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d02c      	beq.n	8004884 <HAL_DMA_IRQHandler+0x8b8>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a70      	ldr	r2, [pc, #448]	; (80049f0 <HAL_DMA_IRQHandler+0xa24>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d027      	beq.n	8004884 <HAL_DMA_IRQHandler+0x8b8>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a6e      	ldr	r2, [pc, #440]	; (80049f4 <HAL_DMA_IRQHandler+0xa28>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d022      	beq.n	8004884 <HAL_DMA_IRQHandler+0x8b8>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a6d      	ldr	r2, [pc, #436]	; (80049f8 <HAL_DMA_IRQHandler+0xa2c>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d01d      	beq.n	8004884 <HAL_DMA_IRQHandler+0x8b8>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a6b      	ldr	r2, [pc, #428]	; (80049fc <HAL_DMA_IRQHandler+0xa30>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d018      	beq.n	8004884 <HAL_DMA_IRQHandler+0x8b8>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a6a      	ldr	r2, [pc, #424]	; (8004a00 <HAL_DMA_IRQHandler+0xa34>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d013      	beq.n	8004884 <HAL_DMA_IRQHandler+0x8b8>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a68      	ldr	r2, [pc, #416]	; (8004a04 <HAL_DMA_IRQHandler+0xa38>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d00e      	beq.n	8004884 <HAL_DMA_IRQHandler+0x8b8>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a67      	ldr	r2, [pc, #412]	; (8004a08 <HAL_DMA_IRQHandler+0xa3c>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d009      	beq.n	8004884 <HAL_DMA_IRQHandler+0x8b8>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a65      	ldr	r2, [pc, #404]	; (8004a0c <HAL_DMA_IRQHandler+0xa40>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d004      	beq.n	8004884 <HAL_DMA_IRQHandler+0x8b8>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a64      	ldr	r2, [pc, #400]	; (8004a10 <HAL_DMA_IRQHandler+0xa44>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d108      	bne.n	8004896 <HAL_DMA_IRQHandler+0x8ca>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f022 0201 	bic.w	r2, r2, #1
 8004892:	601a      	str	r2, [r3, #0]
 8004894:	e007      	b.n	80048a6 <HAL_DMA_IRQHandler+0x8da>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f022 0201 	bic.w	r2, r2, #1
 80048a4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	3301      	adds	r3, #1
 80048aa:	60fb      	str	r3, [r7, #12]
 80048ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d307      	bcc.n	80048c2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0301 	and.w	r3, r3, #1
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d1f2      	bne.n	80048a6 <HAL_DMA_IRQHandler+0x8da>
 80048c0:	e000      	b.n	80048c4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80048c2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0301 	and.w	r3, r3, #1
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d004      	beq.n	80048dc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2203      	movs	r2, #3
 80048d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80048da:	e003      	b.n	80048e4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	f000 8272 	beq.w	8004dda <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	4798      	blx	r3
 80048fe:	e26c      	b.n	8004dda <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a43      	ldr	r2, [pc, #268]	; (8004a14 <HAL_DMA_IRQHandler+0xa48>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d022      	beq.n	8004950 <HAL_DMA_IRQHandler+0x984>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a42      	ldr	r2, [pc, #264]	; (8004a18 <HAL_DMA_IRQHandler+0xa4c>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d01d      	beq.n	8004950 <HAL_DMA_IRQHandler+0x984>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a40      	ldr	r2, [pc, #256]	; (8004a1c <HAL_DMA_IRQHandler+0xa50>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d018      	beq.n	8004950 <HAL_DMA_IRQHandler+0x984>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a3f      	ldr	r2, [pc, #252]	; (8004a20 <HAL_DMA_IRQHandler+0xa54>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d013      	beq.n	8004950 <HAL_DMA_IRQHandler+0x984>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a3d      	ldr	r2, [pc, #244]	; (8004a24 <HAL_DMA_IRQHandler+0xa58>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d00e      	beq.n	8004950 <HAL_DMA_IRQHandler+0x984>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a3c      	ldr	r2, [pc, #240]	; (8004a28 <HAL_DMA_IRQHandler+0xa5c>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d009      	beq.n	8004950 <HAL_DMA_IRQHandler+0x984>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a3a      	ldr	r2, [pc, #232]	; (8004a2c <HAL_DMA_IRQHandler+0xa60>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d004      	beq.n	8004950 <HAL_DMA_IRQHandler+0x984>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a39      	ldr	r2, [pc, #228]	; (8004a30 <HAL_DMA_IRQHandler+0xa64>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d101      	bne.n	8004954 <HAL_DMA_IRQHandler+0x988>
 8004950:	2301      	movs	r3, #1
 8004952:	e000      	b.n	8004956 <HAL_DMA_IRQHandler+0x98a>
 8004954:	2300      	movs	r3, #0
 8004956:	2b00      	cmp	r3, #0
 8004958:	f000 823f 	beq.w	8004dda <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004968:	f003 031f 	and.w	r3, r3, #31
 800496c:	2204      	movs	r2, #4
 800496e:	409a      	lsls	r2, r3
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	4013      	ands	r3, r2
 8004974:	2b00      	cmp	r3, #0
 8004976:	f000 80cd 	beq.w	8004b14 <HAL_DMA_IRQHandler+0xb48>
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	f003 0304 	and.w	r3, r3, #4
 8004980:	2b00      	cmp	r3, #0
 8004982:	f000 80c7 	beq.w	8004b14 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800498a:	f003 031f 	and.w	r3, r3, #31
 800498e:	2204      	movs	r2, #4
 8004990:	409a      	lsls	r2, r3
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800499c:	2b00      	cmp	r3, #0
 800499e:	d049      	beq.n	8004a34 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d109      	bne.n	80049be <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	f000 8210 	beq.w	8004dd4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049bc:	e20a      	b.n	8004dd4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	f000 8206 	beq.w	8004dd4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049d0:	e200      	b.n	8004dd4 <HAL_DMA_IRQHandler+0xe08>
 80049d2:	bf00      	nop
 80049d4:	40020010 	.word	0x40020010
 80049d8:	40020028 	.word	0x40020028
 80049dc:	40020040 	.word	0x40020040
 80049e0:	40020058 	.word	0x40020058
 80049e4:	40020070 	.word	0x40020070
 80049e8:	40020088 	.word	0x40020088
 80049ec:	400200a0 	.word	0x400200a0
 80049f0:	400200b8 	.word	0x400200b8
 80049f4:	40020410 	.word	0x40020410
 80049f8:	40020428 	.word	0x40020428
 80049fc:	40020440 	.word	0x40020440
 8004a00:	40020458 	.word	0x40020458
 8004a04:	40020470 	.word	0x40020470
 8004a08:	40020488 	.word	0x40020488
 8004a0c:	400204a0 	.word	0x400204a0
 8004a10:	400204b8 	.word	0x400204b8
 8004a14:	58025408 	.word	0x58025408
 8004a18:	5802541c 	.word	0x5802541c
 8004a1c:	58025430 	.word	0x58025430
 8004a20:	58025444 	.word	0x58025444
 8004a24:	58025458 	.word	0x58025458
 8004a28:	5802546c 	.word	0x5802546c
 8004a2c:	58025480 	.word	0x58025480
 8004a30:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	f003 0320 	and.w	r3, r3, #32
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d160      	bne.n	8004b00 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a8c      	ldr	r2, [pc, #560]	; (8004c74 <HAL_DMA_IRQHandler+0xca8>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d04a      	beq.n	8004ade <HAL_DMA_IRQHandler+0xb12>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a8a      	ldr	r2, [pc, #552]	; (8004c78 <HAL_DMA_IRQHandler+0xcac>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d045      	beq.n	8004ade <HAL_DMA_IRQHandler+0xb12>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a89      	ldr	r2, [pc, #548]	; (8004c7c <HAL_DMA_IRQHandler+0xcb0>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d040      	beq.n	8004ade <HAL_DMA_IRQHandler+0xb12>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a87      	ldr	r2, [pc, #540]	; (8004c80 <HAL_DMA_IRQHandler+0xcb4>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d03b      	beq.n	8004ade <HAL_DMA_IRQHandler+0xb12>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a86      	ldr	r2, [pc, #536]	; (8004c84 <HAL_DMA_IRQHandler+0xcb8>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d036      	beq.n	8004ade <HAL_DMA_IRQHandler+0xb12>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a84      	ldr	r2, [pc, #528]	; (8004c88 <HAL_DMA_IRQHandler+0xcbc>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d031      	beq.n	8004ade <HAL_DMA_IRQHandler+0xb12>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a83      	ldr	r2, [pc, #524]	; (8004c8c <HAL_DMA_IRQHandler+0xcc0>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d02c      	beq.n	8004ade <HAL_DMA_IRQHandler+0xb12>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a81      	ldr	r2, [pc, #516]	; (8004c90 <HAL_DMA_IRQHandler+0xcc4>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d027      	beq.n	8004ade <HAL_DMA_IRQHandler+0xb12>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a80      	ldr	r2, [pc, #512]	; (8004c94 <HAL_DMA_IRQHandler+0xcc8>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d022      	beq.n	8004ade <HAL_DMA_IRQHandler+0xb12>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a7e      	ldr	r2, [pc, #504]	; (8004c98 <HAL_DMA_IRQHandler+0xccc>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d01d      	beq.n	8004ade <HAL_DMA_IRQHandler+0xb12>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a7d      	ldr	r2, [pc, #500]	; (8004c9c <HAL_DMA_IRQHandler+0xcd0>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d018      	beq.n	8004ade <HAL_DMA_IRQHandler+0xb12>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a7b      	ldr	r2, [pc, #492]	; (8004ca0 <HAL_DMA_IRQHandler+0xcd4>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d013      	beq.n	8004ade <HAL_DMA_IRQHandler+0xb12>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a7a      	ldr	r2, [pc, #488]	; (8004ca4 <HAL_DMA_IRQHandler+0xcd8>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d00e      	beq.n	8004ade <HAL_DMA_IRQHandler+0xb12>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a78      	ldr	r2, [pc, #480]	; (8004ca8 <HAL_DMA_IRQHandler+0xcdc>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d009      	beq.n	8004ade <HAL_DMA_IRQHandler+0xb12>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a77      	ldr	r2, [pc, #476]	; (8004cac <HAL_DMA_IRQHandler+0xce0>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d004      	beq.n	8004ade <HAL_DMA_IRQHandler+0xb12>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a75      	ldr	r2, [pc, #468]	; (8004cb0 <HAL_DMA_IRQHandler+0xce4>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d108      	bne.n	8004af0 <HAL_DMA_IRQHandler+0xb24>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f022 0208 	bic.w	r2, r2, #8
 8004aec:	601a      	str	r2, [r3, #0]
 8004aee:	e007      	b.n	8004b00 <HAL_DMA_IRQHandler+0xb34>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f022 0204 	bic.w	r2, r2, #4
 8004afe:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	f000 8165 	beq.w	8004dd4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b12:	e15f      	b.n	8004dd4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b18:	f003 031f 	and.w	r3, r3, #31
 8004b1c:	2202      	movs	r2, #2
 8004b1e:	409a      	lsls	r2, r3
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	4013      	ands	r3, r2
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	f000 80c5 	beq.w	8004cb4 <HAL_DMA_IRQHandler+0xce8>
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	f003 0302 	and.w	r3, r3, #2
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	f000 80bf 	beq.w	8004cb4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b3a:	f003 031f 	and.w	r3, r3, #31
 8004b3e:	2202      	movs	r2, #2
 8004b40:	409a      	lsls	r2, r3
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d018      	beq.n	8004b82 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d109      	bne.n	8004b6e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	f000 813a 	beq.w	8004dd8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b6c:	e134      	b.n	8004dd8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	f000 8130 	beq.w	8004dd8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b80:	e12a      	b.n	8004dd8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	f003 0320 	and.w	r3, r3, #32
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d168      	bne.n	8004c5e <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a38      	ldr	r2, [pc, #224]	; (8004c74 <HAL_DMA_IRQHandler+0xca8>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d04a      	beq.n	8004c2c <HAL_DMA_IRQHandler+0xc60>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a37      	ldr	r2, [pc, #220]	; (8004c78 <HAL_DMA_IRQHandler+0xcac>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d045      	beq.n	8004c2c <HAL_DMA_IRQHandler+0xc60>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a35      	ldr	r2, [pc, #212]	; (8004c7c <HAL_DMA_IRQHandler+0xcb0>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d040      	beq.n	8004c2c <HAL_DMA_IRQHandler+0xc60>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a34      	ldr	r2, [pc, #208]	; (8004c80 <HAL_DMA_IRQHandler+0xcb4>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d03b      	beq.n	8004c2c <HAL_DMA_IRQHandler+0xc60>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a32      	ldr	r2, [pc, #200]	; (8004c84 <HAL_DMA_IRQHandler+0xcb8>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d036      	beq.n	8004c2c <HAL_DMA_IRQHandler+0xc60>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a31      	ldr	r2, [pc, #196]	; (8004c88 <HAL_DMA_IRQHandler+0xcbc>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d031      	beq.n	8004c2c <HAL_DMA_IRQHandler+0xc60>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a2f      	ldr	r2, [pc, #188]	; (8004c8c <HAL_DMA_IRQHandler+0xcc0>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d02c      	beq.n	8004c2c <HAL_DMA_IRQHandler+0xc60>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a2e      	ldr	r2, [pc, #184]	; (8004c90 <HAL_DMA_IRQHandler+0xcc4>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d027      	beq.n	8004c2c <HAL_DMA_IRQHandler+0xc60>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a2c      	ldr	r2, [pc, #176]	; (8004c94 <HAL_DMA_IRQHandler+0xcc8>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d022      	beq.n	8004c2c <HAL_DMA_IRQHandler+0xc60>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a2b      	ldr	r2, [pc, #172]	; (8004c98 <HAL_DMA_IRQHandler+0xccc>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d01d      	beq.n	8004c2c <HAL_DMA_IRQHandler+0xc60>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a29      	ldr	r2, [pc, #164]	; (8004c9c <HAL_DMA_IRQHandler+0xcd0>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d018      	beq.n	8004c2c <HAL_DMA_IRQHandler+0xc60>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a28      	ldr	r2, [pc, #160]	; (8004ca0 <HAL_DMA_IRQHandler+0xcd4>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d013      	beq.n	8004c2c <HAL_DMA_IRQHandler+0xc60>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a26      	ldr	r2, [pc, #152]	; (8004ca4 <HAL_DMA_IRQHandler+0xcd8>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d00e      	beq.n	8004c2c <HAL_DMA_IRQHandler+0xc60>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a25      	ldr	r2, [pc, #148]	; (8004ca8 <HAL_DMA_IRQHandler+0xcdc>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d009      	beq.n	8004c2c <HAL_DMA_IRQHandler+0xc60>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a23      	ldr	r2, [pc, #140]	; (8004cac <HAL_DMA_IRQHandler+0xce0>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d004      	beq.n	8004c2c <HAL_DMA_IRQHandler+0xc60>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a22      	ldr	r2, [pc, #136]	; (8004cb0 <HAL_DMA_IRQHandler+0xce4>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d108      	bne.n	8004c3e <HAL_DMA_IRQHandler+0xc72>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f022 0214 	bic.w	r2, r2, #20
 8004c3a:	601a      	str	r2, [r3, #0]
 8004c3c:	e007      	b.n	8004c4e <HAL_DMA_IRQHandler+0xc82>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f022 020a 	bic.w	r2, r2, #10
 8004c4c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2201      	movs	r2, #1
 8004c52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	f000 80b8 	beq.w	8004dd8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c70:	e0b2      	b.n	8004dd8 <HAL_DMA_IRQHandler+0xe0c>
 8004c72:	bf00      	nop
 8004c74:	40020010 	.word	0x40020010
 8004c78:	40020028 	.word	0x40020028
 8004c7c:	40020040 	.word	0x40020040
 8004c80:	40020058 	.word	0x40020058
 8004c84:	40020070 	.word	0x40020070
 8004c88:	40020088 	.word	0x40020088
 8004c8c:	400200a0 	.word	0x400200a0
 8004c90:	400200b8 	.word	0x400200b8
 8004c94:	40020410 	.word	0x40020410
 8004c98:	40020428 	.word	0x40020428
 8004c9c:	40020440 	.word	0x40020440
 8004ca0:	40020458 	.word	0x40020458
 8004ca4:	40020470 	.word	0x40020470
 8004ca8:	40020488 	.word	0x40020488
 8004cac:	400204a0 	.word	0x400204a0
 8004cb0:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cb8:	f003 031f 	and.w	r3, r3, #31
 8004cbc:	2208      	movs	r2, #8
 8004cbe:	409a      	lsls	r2, r3
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	f000 8088 	beq.w	8004dda <HAL_DMA_IRQHandler+0xe0e>
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	f003 0308 	and.w	r3, r3, #8
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	f000 8082 	beq.w	8004dda <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a41      	ldr	r2, [pc, #260]	; (8004de0 <HAL_DMA_IRQHandler+0xe14>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d04a      	beq.n	8004d76 <HAL_DMA_IRQHandler+0xdaa>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a3f      	ldr	r2, [pc, #252]	; (8004de4 <HAL_DMA_IRQHandler+0xe18>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d045      	beq.n	8004d76 <HAL_DMA_IRQHandler+0xdaa>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a3e      	ldr	r2, [pc, #248]	; (8004de8 <HAL_DMA_IRQHandler+0xe1c>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d040      	beq.n	8004d76 <HAL_DMA_IRQHandler+0xdaa>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a3c      	ldr	r2, [pc, #240]	; (8004dec <HAL_DMA_IRQHandler+0xe20>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d03b      	beq.n	8004d76 <HAL_DMA_IRQHandler+0xdaa>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a3b      	ldr	r2, [pc, #236]	; (8004df0 <HAL_DMA_IRQHandler+0xe24>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d036      	beq.n	8004d76 <HAL_DMA_IRQHandler+0xdaa>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a39      	ldr	r2, [pc, #228]	; (8004df4 <HAL_DMA_IRQHandler+0xe28>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d031      	beq.n	8004d76 <HAL_DMA_IRQHandler+0xdaa>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a38      	ldr	r2, [pc, #224]	; (8004df8 <HAL_DMA_IRQHandler+0xe2c>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d02c      	beq.n	8004d76 <HAL_DMA_IRQHandler+0xdaa>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a36      	ldr	r2, [pc, #216]	; (8004dfc <HAL_DMA_IRQHandler+0xe30>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d027      	beq.n	8004d76 <HAL_DMA_IRQHandler+0xdaa>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a35      	ldr	r2, [pc, #212]	; (8004e00 <HAL_DMA_IRQHandler+0xe34>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d022      	beq.n	8004d76 <HAL_DMA_IRQHandler+0xdaa>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a33      	ldr	r2, [pc, #204]	; (8004e04 <HAL_DMA_IRQHandler+0xe38>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d01d      	beq.n	8004d76 <HAL_DMA_IRQHandler+0xdaa>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a32      	ldr	r2, [pc, #200]	; (8004e08 <HAL_DMA_IRQHandler+0xe3c>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d018      	beq.n	8004d76 <HAL_DMA_IRQHandler+0xdaa>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a30      	ldr	r2, [pc, #192]	; (8004e0c <HAL_DMA_IRQHandler+0xe40>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d013      	beq.n	8004d76 <HAL_DMA_IRQHandler+0xdaa>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a2f      	ldr	r2, [pc, #188]	; (8004e10 <HAL_DMA_IRQHandler+0xe44>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d00e      	beq.n	8004d76 <HAL_DMA_IRQHandler+0xdaa>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a2d      	ldr	r2, [pc, #180]	; (8004e14 <HAL_DMA_IRQHandler+0xe48>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d009      	beq.n	8004d76 <HAL_DMA_IRQHandler+0xdaa>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a2c      	ldr	r2, [pc, #176]	; (8004e18 <HAL_DMA_IRQHandler+0xe4c>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d004      	beq.n	8004d76 <HAL_DMA_IRQHandler+0xdaa>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a2a      	ldr	r2, [pc, #168]	; (8004e1c <HAL_DMA_IRQHandler+0xe50>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d108      	bne.n	8004d88 <HAL_DMA_IRQHandler+0xdbc>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f022 021c 	bic.w	r2, r2, #28
 8004d84:	601a      	str	r2, [r3, #0]
 8004d86:	e007      	b.n	8004d98 <HAL_DMA_IRQHandler+0xdcc>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f022 020e 	bic.w	r2, r2, #14
 8004d96:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d9c:	f003 031f 	and.w	r3, r3, #31
 8004da0:	2201      	movs	r2, #1
 8004da2:	409a      	lsls	r2, r3
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2201      	movs	r2, #1
 8004db2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d009      	beq.n	8004dda <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	4798      	blx	r3
 8004dce:	e004      	b.n	8004dda <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004dd0:	bf00      	nop
 8004dd2:	e002      	b.n	8004dda <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004dd4:	bf00      	nop
 8004dd6:	e000      	b.n	8004dda <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004dd8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004dda:	3728      	adds	r7, #40	; 0x28
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}
 8004de0:	40020010 	.word	0x40020010
 8004de4:	40020028 	.word	0x40020028
 8004de8:	40020040 	.word	0x40020040
 8004dec:	40020058 	.word	0x40020058
 8004df0:	40020070 	.word	0x40020070
 8004df4:	40020088 	.word	0x40020088
 8004df8:	400200a0 	.word	0x400200a0
 8004dfc:	400200b8 	.word	0x400200b8
 8004e00:	40020410 	.word	0x40020410
 8004e04:	40020428 	.word	0x40020428
 8004e08:	40020440 	.word	0x40020440
 8004e0c:	40020458 	.word	0x40020458
 8004e10:	40020470 	.word	0x40020470
 8004e14:	40020488 	.word	0x40020488
 8004e18:	400204a0 	.word	0x400204a0
 8004e1c:	400204b8 	.word	0x400204b8

08004e20 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	370c      	adds	r7, #12
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr

08004e38 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b087      	sub	sp, #28
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	60f8      	str	r0, [r7, #12]
 8004e40:	60b9      	str	r1, [r7, #8]
 8004e42:	607a      	str	r2, [r7, #4]
 8004e44:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e4a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e50:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a84      	ldr	r2, [pc, #528]	; (8005068 <DMA_SetConfig+0x230>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d072      	beq.n	8004f42 <DMA_SetConfig+0x10a>
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a82      	ldr	r2, [pc, #520]	; (800506c <DMA_SetConfig+0x234>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d06d      	beq.n	8004f42 <DMA_SetConfig+0x10a>
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a81      	ldr	r2, [pc, #516]	; (8005070 <DMA_SetConfig+0x238>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d068      	beq.n	8004f42 <DMA_SetConfig+0x10a>
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a7f      	ldr	r2, [pc, #508]	; (8005074 <DMA_SetConfig+0x23c>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d063      	beq.n	8004f42 <DMA_SetConfig+0x10a>
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a7e      	ldr	r2, [pc, #504]	; (8005078 <DMA_SetConfig+0x240>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d05e      	beq.n	8004f42 <DMA_SetConfig+0x10a>
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a7c      	ldr	r2, [pc, #496]	; (800507c <DMA_SetConfig+0x244>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d059      	beq.n	8004f42 <DMA_SetConfig+0x10a>
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a7b      	ldr	r2, [pc, #492]	; (8005080 <DMA_SetConfig+0x248>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d054      	beq.n	8004f42 <DMA_SetConfig+0x10a>
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a79      	ldr	r2, [pc, #484]	; (8005084 <DMA_SetConfig+0x24c>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d04f      	beq.n	8004f42 <DMA_SetConfig+0x10a>
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a78      	ldr	r2, [pc, #480]	; (8005088 <DMA_SetConfig+0x250>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d04a      	beq.n	8004f42 <DMA_SetConfig+0x10a>
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a76      	ldr	r2, [pc, #472]	; (800508c <DMA_SetConfig+0x254>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d045      	beq.n	8004f42 <DMA_SetConfig+0x10a>
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a75      	ldr	r2, [pc, #468]	; (8005090 <DMA_SetConfig+0x258>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d040      	beq.n	8004f42 <DMA_SetConfig+0x10a>
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a73      	ldr	r2, [pc, #460]	; (8005094 <DMA_SetConfig+0x25c>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d03b      	beq.n	8004f42 <DMA_SetConfig+0x10a>
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a72      	ldr	r2, [pc, #456]	; (8005098 <DMA_SetConfig+0x260>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d036      	beq.n	8004f42 <DMA_SetConfig+0x10a>
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a70      	ldr	r2, [pc, #448]	; (800509c <DMA_SetConfig+0x264>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d031      	beq.n	8004f42 <DMA_SetConfig+0x10a>
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a6f      	ldr	r2, [pc, #444]	; (80050a0 <DMA_SetConfig+0x268>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d02c      	beq.n	8004f42 <DMA_SetConfig+0x10a>
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a6d      	ldr	r2, [pc, #436]	; (80050a4 <DMA_SetConfig+0x26c>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d027      	beq.n	8004f42 <DMA_SetConfig+0x10a>
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a6c      	ldr	r2, [pc, #432]	; (80050a8 <DMA_SetConfig+0x270>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d022      	beq.n	8004f42 <DMA_SetConfig+0x10a>
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a6a      	ldr	r2, [pc, #424]	; (80050ac <DMA_SetConfig+0x274>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d01d      	beq.n	8004f42 <DMA_SetConfig+0x10a>
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a69      	ldr	r2, [pc, #420]	; (80050b0 <DMA_SetConfig+0x278>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d018      	beq.n	8004f42 <DMA_SetConfig+0x10a>
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a67      	ldr	r2, [pc, #412]	; (80050b4 <DMA_SetConfig+0x27c>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d013      	beq.n	8004f42 <DMA_SetConfig+0x10a>
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a66      	ldr	r2, [pc, #408]	; (80050b8 <DMA_SetConfig+0x280>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d00e      	beq.n	8004f42 <DMA_SetConfig+0x10a>
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a64      	ldr	r2, [pc, #400]	; (80050bc <DMA_SetConfig+0x284>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d009      	beq.n	8004f42 <DMA_SetConfig+0x10a>
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a63      	ldr	r2, [pc, #396]	; (80050c0 <DMA_SetConfig+0x288>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d004      	beq.n	8004f42 <DMA_SetConfig+0x10a>
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a61      	ldr	r2, [pc, #388]	; (80050c4 <DMA_SetConfig+0x28c>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d101      	bne.n	8004f46 <DMA_SetConfig+0x10e>
 8004f42:	2301      	movs	r3, #1
 8004f44:	e000      	b.n	8004f48 <DMA_SetConfig+0x110>
 8004f46:	2300      	movs	r3, #0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d00d      	beq.n	8004f68 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f50:	68fa      	ldr	r2, [r7, #12]
 8004f52:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004f54:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d004      	beq.n	8004f68 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f62:	68fa      	ldr	r2, [r7, #12]
 8004f64:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004f66:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a3e      	ldr	r2, [pc, #248]	; (8005068 <DMA_SetConfig+0x230>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d04a      	beq.n	8005008 <DMA_SetConfig+0x1d0>
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a3d      	ldr	r2, [pc, #244]	; (800506c <DMA_SetConfig+0x234>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d045      	beq.n	8005008 <DMA_SetConfig+0x1d0>
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a3b      	ldr	r2, [pc, #236]	; (8005070 <DMA_SetConfig+0x238>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d040      	beq.n	8005008 <DMA_SetConfig+0x1d0>
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a3a      	ldr	r2, [pc, #232]	; (8005074 <DMA_SetConfig+0x23c>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d03b      	beq.n	8005008 <DMA_SetConfig+0x1d0>
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a38      	ldr	r2, [pc, #224]	; (8005078 <DMA_SetConfig+0x240>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d036      	beq.n	8005008 <DMA_SetConfig+0x1d0>
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a37      	ldr	r2, [pc, #220]	; (800507c <DMA_SetConfig+0x244>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d031      	beq.n	8005008 <DMA_SetConfig+0x1d0>
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a35      	ldr	r2, [pc, #212]	; (8005080 <DMA_SetConfig+0x248>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d02c      	beq.n	8005008 <DMA_SetConfig+0x1d0>
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a34      	ldr	r2, [pc, #208]	; (8005084 <DMA_SetConfig+0x24c>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d027      	beq.n	8005008 <DMA_SetConfig+0x1d0>
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a32      	ldr	r2, [pc, #200]	; (8005088 <DMA_SetConfig+0x250>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d022      	beq.n	8005008 <DMA_SetConfig+0x1d0>
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a31      	ldr	r2, [pc, #196]	; (800508c <DMA_SetConfig+0x254>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d01d      	beq.n	8005008 <DMA_SetConfig+0x1d0>
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a2f      	ldr	r2, [pc, #188]	; (8005090 <DMA_SetConfig+0x258>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d018      	beq.n	8005008 <DMA_SetConfig+0x1d0>
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a2e      	ldr	r2, [pc, #184]	; (8005094 <DMA_SetConfig+0x25c>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d013      	beq.n	8005008 <DMA_SetConfig+0x1d0>
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a2c      	ldr	r2, [pc, #176]	; (8005098 <DMA_SetConfig+0x260>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d00e      	beq.n	8005008 <DMA_SetConfig+0x1d0>
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a2b      	ldr	r2, [pc, #172]	; (800509c <DMA_SetConfig+0x264>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d009      	beq.n	8005008 <DMA_SetConfig+0x1d0>
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a29      	ldr	r2, [pc, #164]	; (80050a0 <DMA_SetConfig+0x268>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d004      	beq.n	8005008 <DMA_SetConfig+0x1d0>
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a28      	ldr	r2, [pc, #160]	; (80050a4 <DMA_SetConfig+0x26c>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d101      	bne.n	800500c <DMA_SetConfig+0x1d4>
 8005008:	2301      	movs	r3, #1
 800500a:	e000      	b.n	800500e <DMA_SetConfig+0x1d6>
 800500c:	2300      	movs	r3, #0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d05a      	beq.n	80050c8 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005016:	f003 031f 	and.w	r3, r3, #31
 800501a:	223f      	movs	r2, #63	; 0x3f
 800501c:	409a      	lsls	r2, r3
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005030:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	683a      	ldr	r2, [r7, #0]
 8005038:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	2b40      	cmp	r3, #64	; 0x40
 8005040:	d108      	bne.n	8005054 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	68ba      	ldr	r2, [r7, #8]
 8005050:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005052:	e087      	b.n	8005164 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	68ba      	ldr	r2, [r7, #8]
 800505a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	60da      	str	r2, [r3, #12]
}
 8005064:	e07e      	b.n	8005164 <DMA_SetConfig+0x32c>
 8005066:	bf00      	nop
 8005068:	40020010 	.word	0x40020010
 800506c:	40020028 	.word	0x40020028
 8005070:	40020040 	.word	0x40020040
 8005074:	40020058 	.word	0x40020058
 8005078:	40020070 	.word	0x40020070
 800507c:	40020088 	.word	0x40020088
 8005080:	400200a0 	.word	0x400200a0
 8005084:	400200b8 	.word	0x400200b8
 8005088:	40020410 	.word	0x40020410
 800508c:	40020428 	.word	0x40020428
 8005090:	40020440 	.word	0x40020440
 8005094:	40020458 	.word	0x40020458
 8005098:	40020470 	.word	0x40020470
 800509c:	40020488 	.word	0x40020488
 80050a0:	400204a0 	.word	0x400204a0
 80050a4:	400204b8 	.word	0x400204b8
 80050a8:	58025408 	.word	0x58025408
 80050ac:	5802541c 	.word	0x5802541c
 80050b0:	58025430 	.word	0x58025430
 80050b4:	58025444 	.word	0x58025444
 80050b8:	58025458 	.word	0x58025458
 80050bc:	5802546c 	.word	0x5802546c
 80050c0:	58025480 	.word	0x58025480
 80050c4:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a28      	ldr	r2, [pc, #160]	; (8005170 <DMA_SetConfig+0x338>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d022      	beq.n	8005118 <DMA_SetConfig+0x2e0>
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a27      	ldr	r2, [pc, #156]	; (8005174 <DMA_SetConfig+0x33c>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d01d      	beq.n	8005118 <DMA_SetConfig+0x2e0>
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a25      	ldr	r2, [pc, #148]	; (8005178 <DMA_SetConfig+0x340>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d018      	beq.n	8005118 <DMA_SetConfig+0x2e0>
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a24      	ldr	r2, [pc, #144]	; (800517c <DMA_SetConfig+0x344>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d013      	beq.n	8005118 <DMA_SetConfig+0x2e0>
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a22      	ldr	r2, [pc, #136]	; (8005180 <DMA_SetConfig+0x348>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d00e      	beq.n	8005118 <DMA_SetConfig+0x2e0>
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a21      	ldr	r2, [pc, #132]	; (8005184 <DMA_SetConfig+0x34c>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d009      	beq.n	8005118 <DMA_SetConfig+0x2e0>
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a1f      	ldr	r2, [pc, #124]	; (8005188 <DMA_SetConfig+0x350>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d004      	beq.n	8005118 <DMA_SetConfig+0x2e0>
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a1e      	ldr	r2, [pc, #120]	; (800518c <DMA_SetConfig+0x354>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d101      	bne.n	800511c <DMA_SetConfig+0x2e4>
 8005118:	2301      	movs	r3, #1
 800511a:	e000      	b.n	800511e <DMA_SetConfig+0x2e6>
 800511c:	2300      	movs	r3, #0
 800511e:	2b00      	cmp	r3, #0
 8005120:	d020      	beq.n	8005164 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005126:	f003 031f 	and.w	r3, r3, #31
 800512a:	2201      	movs	r2, #1
 800512c:	409a      	lsls	r2, r3
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	683a      	ldr	r2, [r7, #0]
 8005138:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	2b40      	cmp	r3, #64	; 0x40
 8005140:	d108      	bne.n	8005154 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	68ba      	ldr	r2, [r7, #8]
 8005150:	60da      	str	r2, [r3, #12]
}
 8005152:	e007      	b.n	8005164 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	68ba      	ldr	r2, [r7, #8]
 800515a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	60da      	str	r2, [r3, #12]
}
 8005164:	bf00      	nop
 8005166:	371c      	adds	r7, #28
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr
 8005170:	58025408 	.word	0x58025408
 8005174:	5802541c 	.word	0x5802541c
 8005178:	58025430 	.word	0x58025430
 800517c:	58025444 	.word	0x58025444
 8005180:	58025458 	.word	0x58025458
 8005184:	5802546c 	.word	0x5802546c
 8005188:	58025480 	.word	0x58025480
 800518c:	58025494 	.word	0x58025494

08005190 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005190:	b480      	push	{r7}
 8005192:	b085      	sub	sp, #20
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a42      	ldr	r2, [pc, #264]	; (80052a8 <DMA_CalcBaseAndBitshift+0x118>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d04a      	beq.n	8005238 <DMA_CalcBaseAndBitshift+0xa8>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a41      	ldr	r2, [pc, #260]	; (80052ac <DMA_CalcBaseAndBitshift+0x11c>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d045      	beq.n	8005238 <DMA_CalcBaseAndBitshift+0xa8>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a3f      	ldr	r2, [pc, #252]	; (80052b0 <DMA_CalcBaseAndBitshift+0x120>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d040      	beq.n	8005238 <DMA_CalcBaseAndBitshift+0xa8>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a3e      	ldr	r2, [pc, #248]	; (80052b4 <DMA_CalcBaseAndBitshift+0x124>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d03b      	beq.n	8005238 <DMA_CalcBaseAndBitshift+0xa8>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a3c      	ldr	r2, [pc, #240]	; (80052b8 <DMA_CalcBaseAndBitshift+0x128>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d036      	beq.n	8005238 <DMA_CalcBaseAndBitshift+0xa8>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a3b      	ldr	r2, [pc, #236]	; (80052bc <DMA_CalcBaseAndBitshift+0x12c>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d031      	beq.n	8005238 <DMA_CalcBaseAndBitshift+0xa8>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a39      	ldr	r2, [pc, #228]	; (80052c0 <DMA_CalcBaseAndBitshift+0x130>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d02c      	beq.n	8005238 <DMA_CalcBaseAndBitshift+0xa8>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a38      	ldr	r2, [pc, #224]	; (80052c4 <DMA_CalcBaseAndBitshift+0x134>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d027      	beq.n	8005238 <DMA_CalcBaseAndBitshift+0xa8>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a36      	ldr	r2, [pc, #216]	; (80052c8 <DMA_CalcBaseAndBitshift+0x138>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d022      	beq.n	8005238 <DMA_CalcBaseAndBitshift+0xa8>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a35      	ldr	r2, [pc, #212]	; (80052cc <DMA_CalcBaseAndBitshift+0x13c>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d01d      	beq.n	8005238 <DMA_CalcBaseAndBitshift+0xa8>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a33      	ldr	r2, [pc, #204]	; (80052d0 <DMA_CalcBaseAndBitshift+0x140>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d018      	beq.n	8005238 <DMA_CalcBaseAndBitshift+0xa8>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a32      	ldr	r2, [pc, #200]	; (80052d4 <DMA_CalcBaseAndBitshift+0x144>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d013      	beq.n	8005238 <DMA_CalcBaseAndBitshift+0xa8>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a30      	ldr	r2, [pc, #192]	; (80052d8 <DMA_CalcBaseAndBitshift+0x148>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d00e      	beq.n	8005238 <DMA_CalcBaseAndBitshift+0xa8>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a2f      	ldr	r2, [pc, #188]	; (80052dc <DMA_CalcBaseAndBitshift+0x14c>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d009      	beq.n	8005238 <DMA_CalcBaseAndBitshift+0xa8>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a2d      	ldr	r2, [pc, #180]	; (80052e0 <DMA_CalcBaseAndBitshift+0x150>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d004      	beq.n	8005238 <DMA_CalcBaseAndBitshift+0xa8>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a2c      	ldr	r2, [pc, #176]	; (80052e4 <DMA_CalcBaseAndBitshift+0x154>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d101      	bne.n	800523c <DMA_CalcBaseAndBitshift+0xac>
 8005238:	2301      	movs	r3, #1
 800523a:	e000      	b.n	800523e <DMA_CalcBaseAndBitshift+0xae>
 800523c:	2300      	movs	r3, #0
 800523e:	2b00      	cmp	r3, #0
 8005240:	d024      	beq.n	800528c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	b2db      	uxtb	r3, r3
 8005248:	3b10      	subs	r3, #16
 800524a:	4a27      	ldr	r2, [pc, #156]	; (80052e8 <DMA_CalcBaseAndBitshift+0x158>)
 800524c:	fba2 2303 	umull	r2, r3, r2, r3
 8005250:	091b      	lsrs	r3, r3, #4
 8005252:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f003 0307 	and.w	r3, r3, #7
 800525a:	4a24      	ldr	r2, [pc, #144]	; (80052ec <DMA_CalcBaseAndBitshift+0x15c>)
 800525c:	5cd3      	ldrb	r3, [r2, r3]
 800525e:	461a      	mov	r2, r3
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2b03      	cmp	r3, #3
 8005268:	d908      	bls.n	800527c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	461a      	mov	r2, r3
 8005270:	4b1f      	ldr	r3, [pc, #124]	; (80052f0 <DMA_CalcBaseAndBitshift+0x160>)
 8005272:	4013      	ands	r3, r2
 8005274:	1d1a      	adds	r2, r3, #4
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	659a      	str	r2, [r3, #88]	; 0x58
 800527a:	e00d      	b.n	8005298 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	461a      	mov	r2, r3
 8005282:	4b1b      	ldr	r3, [pc, #108]	; (80052f0 <DMA_CalcBaseAndBitshift+0x160>)
 8005284:	4013      	ands	r3, r2
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	6593      	str	r3, [r2, #88]	; 0x58
 800528a:	e005      	b.n	8005298 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800529c:	4618      	mov	r0, r3
 800529e:	3714      	adds	r7, #20
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr
 80052a8:	40020010 	.word	0x40020010
 80052ac:	40020028 	.word	0x40020028
 80052b0:	40020040 	.word	0x40020040
 80052b4:	40020058 	.word	0x40020058
 80052b8:	40020070 	.word	0x40020070
 80052bc:	40020088 	.word	0x40020088
 80052c0:	400200a0 	.word	0x400200a0
 80052c4:	400200b8 	.word	0x400200b8
 80052c8:	40020410 	.word	0x40020410
 80052cc:	40020428 	.word	0x40020428
 80052d0:	40020440 	.word	0x40020440
 80052d4:	40020458 	.word	0x40020458
 80052d8:	40020470 	.word	0x40020470
 80052dc:	40020488 	.word	0x40020488
 80052e0:	400204a0 	.word	0x400204a0
 80052e4:	400204b8 	.word	0x400204b8
 80052e8:	aaaaaaab 	.word	0xaaaaaaab
 80052ec:	0800c568 	.word	0x0800c568
 80052f0:	fffffc00 	.word	0xfffffc00

080052f4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b085      	sub	sp, #20
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052fc:	2300      	movs	r3, #0
 80052fe:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	699b      	ldr	r3, [r3, #24]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d120      	bne.n	800534a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800530c:	2b03      	cmp	r3, #3
 800530e:	d858      	bhi.n	80053c2 <DMA_CheckFifoParam+0xce>
 8005310:	a201      	add	r2, pc, #4	; (adr r2, 8005318 <DMA_CheckFifoParam+0x24>)
 8005312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005316:	bf00      	nop
 8005318:	08005329 	.word	0x08005329
 800531c:	0800533b 	.word	0x0800533b
 8005320:	08005329 	.word	0x08005329
 8005324:	080053c3 	.word	0x080053c3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800532c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005330:	2b00      	cmp	r3, #0
 8005332:	d048      	beq.n	80053c6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005338:	e045      	b.n	80053c6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800533e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005342:	d142      	bne.n	80053ca <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005348:	e03f      	b.n	80053ca <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	699b      	ldr	r3, [r3, #24]
 800534e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005352:	d123      	bne.n	800539c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005358:	2b03      	cmp	r3, #3
 800535a:	d838      	bhi.n	80053ce <DMA_CheckFifoParam+0xda>
 800535c:	a201      	add	r2, pc, #4	; (adr r2, 8005364 <DMA_CheckFifoParam+0x70>)
 800535e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005362:	bf00      	nop
 8005364:	08005375 	.word	0x08005375
 8005368:	0800537b 	.word	0x0800537b
 800536c:	08005375 	.word	0x08005375
 8005370:	0800538d 	.word	0x0800538d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	73fb      	strb	r3, [r7, #15]
        break;
 8005378:	e030      	b.n	80053dc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800537e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005382:	2b00      	cmp	r3, #0
 8005384:	d025      	beq.n	80053d2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800538a:	e022      	b.n	80053d2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005390:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005394:	d11f      	bne.n	80053d6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800539a:	e01c      	b.n	80053d6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053a0:	2b02      	cmp	r3, #2
 80053a2:	d902      	bls.n	80053aa <DMA_CheckFifoParam+0xb6>
 80053a4:	2b03      	cmp	r3, #3
 80053a6:	d003      	beq.n	80053b0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80053a8:	e018      	b.n	80053dc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	73fb      	strb	r3, [r7, #15]
        break;
 80053ae:	e015      	b.n	80053dc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d00e      	beq.n	80053da <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	73fb      	strb	r3, [r7, #15]
    break;
 80053c0:	e00b      	b.n	80053da <DMA_CheckFifoParam+0xe6>
        break;
 80053c2:	bf00      	nop
 80053c4:	e00a      	b.n	80053dc <DMA_CheckFifoParam+0xe8>
        break;
 80053c6:	bf00      	nop
 80053c8:	e008      	b.n	80053dc <DMA_CheckFifoParam+0xe8>
        break;
 80053ca:	bf00      	nop
 80053cc:	e006      	b.n	80053dc <DMA_CheckFifoParam+0xe8>
        break;
 80053ce:	bf00      	nop
 80053d0:	e004      	b.n	80053dc <DMA_CheckFifoParam+0xe8>
        break;
 80053d2:	bf00      	nop
 80053d4:	e002      	b.n	80053dc <DMA_CheckFifoParam+0xe8>
        break;
 80053d6:	bf00      	nop
 80053d8:	e000      	b.n	80053dc <DMA_CheckFifoParam+0xe8>
    break;
 80053da:	bf00      	nop
    }
  }

  return status;
 80053dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3714      	adds	r7, #20
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr
 80053ea:	bf00      	nop

080053ec <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b085      	sub	sp, #20
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a38      	ldr	r2, [pc, #224]	; (80054e0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d022      	beq.n	800544a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a36      	ldr	r2, [pc, #216]	; (80054e4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d01d      	beq.n	800544a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a35      	ldr	r2, [pc, #212]	; (80054e8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d018      	beq.n	800544a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a33      	ldr	r2, [pc, #204]	; (80054ec <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d013      	beq.n	800544a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a32      	ldr	r2, [pc, #200]	; (80054f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d00e      	beq.n	800544a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a30      	ldr	r2, [pc, #192]	; (80054f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d009      	beq.n	800544a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a2f      	ldr	r2, [pc, #188]	; (80054f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d004      	beq.n	800544a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a2d      	ldr	r2, [pc, #180]	; (80054fc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d101      	bne.n	800544e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800544a:	2301      	movs	r3, #1
 800544c:	e000      	b.n	8005450 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800544e:	2300      	movs	r3, #0
 8005450:	2b00      	cmp	r3, #0
 8005452:	d01a      	beq.n	800548a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	b2db      	uxtb	r3, r3
 800545a:	3b08      	subs	r3, #8
 800545c:	4a28      	ldr	r2, [pc, #160]	; (8005500 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800545e:	fba2 2303 	umull	r2, r3, r2, r3
 8005462:	091b      	lsrs	r3, r3, #4
 8005464:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005466:	68fa      	ldr	r2, [r7, #12]
 8005468:	4b26      	ldr	r3, [pc, #152]	; (8005504 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800546a:	4413      	add	r3, r2
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	461a      	mov	r2, r3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4a24      	ldr	r2, [pc, #144]	; (8005508 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005478:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f003 031f 	and.w	r3, r3, #31
 8005480:	2201      	movs	r2, #1
 8005482:	409a      	lsls	r2, r3
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005488:	e024      	b.n	80054d4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	b2db      	uxtb	r3, r3
 8005490:	3b10      	subs	r3, #16
 8005492:	4a1e      	ldr	r2, [pc, #120]	; (800550c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005494:	fba2 2303 	umull	r2, r3, r2, r3
 8005498:	091b      	lsrs	r3, r3, #4
 800549a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	4a1c      	ldr	r2, [pc, #112]	; (8005510 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d806      	bhi.n	80054b2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	4a1b      	ldr	r2, [pc, #108]	; (8005514 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d902      	bls.n	80054b2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	3308      	adds	r3, #8
 80054b0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80054b2:	68fa      	ldr	r2, [r7, #12]
 80054b4:	4b18      	ldr	r3, [pc, #96]	; (8005518 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80054b6:	4413      	add	r3, r2
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	461a      	mov	r2, r3
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	4a16      	ldr	r2, [pc, #88]	; (800551c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80054c4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f003 031f 	and.w	r3, r3, #31
 80054cc:	2201      	movs	r2, #1
 80054ce:	409a      	lsls	r2, r3
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80054d4:	bf00      	nop
 80054d6:	3714      	adds	r7, #20
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr
 80054e0:	58025408 	.word	0x58025408
 80054e4:	5802541c 	.word	0x5802541c
 80054e8:	58025430 	.word	0x58025430
 80054ec:	58025444 	.word	0x58025444
 80054f0:	58025458 	.word	0x58025458
 80054f4:	5802546c 	.word	0x5802546c
 80054f8:	58025480 	.word	0x58025480
 80054fc:	58025494 	.word	0x58025494
 8005500:	cccccccd 	.word	0xcccccccd
 8005504:	16009600 	.word	0x16009600
 8005508:	58025880 	.word	0x58025880
 800550c:	aaaaaaab 	.word	0xaaaaaaab
 8005510:	400204b8 	.word	0x400204b8
 8005514:	4002040f 	.word	0x4002040f
 8005518:	10008200 	.word	0x10008200
 800551c:	40020880 	.word	0x40020880

08005520 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005520:	b480      	push	{r7}
 8005522:	b085      	sub	sp, #20
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	b2db      	uxtb	r3, r3
 800552e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d04a      	beq.n	80055cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2b08      	cmp	r3, #8
 800553a:	d847      	bhi.n	80055cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a25      	ldr	r2, [pc, #148]	; (80055d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d022      	beq.n	800558c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a24      	ldr	r2, [pc, #144]	; (80055dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d01d      	beq.n	800558c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a22      	ldr	r2, [pc, #136]	; (80055e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d018      	beq.n	800558c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a21      	ldr	r2, [pc, #132]	; (80055e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d013      	beq.n	800558c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a1f      	ldr	r2, [pc, #124]	; (80055e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d00e      	beq.n	800558c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a1e      	ldr	r2, [pc, #120]	; (80055ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d009      	beq.n	800558c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a1c      	ldr	r2, [pc, #112]	; (80055f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d004      	beq.n	800558c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a1b      	ldr	r2, [pc, #108]	; (80055f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d101      	bne.n	8005590 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800558c:	2301      	movs	r3, #1
 800558e:	e000      	b.n	8005592 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005590:	2300      	movs	r3, #0
 8005592:	2b00      	cmp	r3, #0
 8005594:	d00a      	beq.n	80055ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005596:	68fa      	ldr	r2, [r7, #12]
 8005598:	4b17      	ldr	r3, [pc, #92]	; (80055f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800559a:	4413      	add	r3, r2
 800559c:	009b      	lsls	r3, r3, #2
 800559e:	461a      	mov	r2, r3
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	4a15      	ldr	r2, [pc, #84]	; (80055fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80055a8:	671a      	str	r2, [r3, #112]	; 0x70
 80055aa:	e009      	b.n	80055c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80055ac:	68fa      	ldr	r2, [r7, #12]
 80055ae:	4b14      	ldr	r3, [pc, #80]	; (8005600 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80055b0:	4413      	add	r3, r2
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	461a      	mov	r2, r3
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a11      	ldr	r2, [pc, #68]	; (8005604 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80055be:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	3b01      	subs	r3, #1
 80055c4:	2201      	movs	r2, #1
 80055c6:	409a      	lsls	r2, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80055cc:	bf00      	nop
 80055ce:	3714      	adds	r7, #20
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr
 80055d8:	58025408 	.word	0x58025408
 80055dc:	5802541c 	.word	0x5802541c
 80055e0:	58025430 	.word	0x58025430
 80055e4:	58025444 	.word	0x58025444
 80055e8:	58025458 	.word	0x58025458
 80055ec:	5802546c 	.word	0x5802546c
 80055f0:	58025480 	.word	0x58025480
 80055f4:	58025494 	.word	0x58025494
 80055f8:	1600963f 	.word	0x1600963f
 80055fc:	58025940 	.word	0x58025940
 8005600:	1000823f 	.word	0x1000823f
 8005604:	40020940 	.word	0x40020940

08005608 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA Stream.
  * @param  pSyncConfig : pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 8005608:	b480      	push	{r7}
 800560a:	b085      	sub	sp, #20
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	6039      	str	r1, [r7, #0]
  uint32_t syncSignalID = 0;
 8005612:	2300      	movs	r3, #0
 8005614:	60fb      	str	r3, [r7, #12]
  uint32_t syncPolarity = 0;
 8005616:	2300      	movs	r3, #0
 8005618:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  if(pSyncConfig->SyncEnable == ENABLE)
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	7a1b      	ldrb	r3, [r3, #8]
 800561e:	2b01      	cmp	r3, #1
 8005620:	d155      	bne.n	80056ce <HAL_DMAEx_ConfigMuxSync+0xc6>
  {
    assert_param(IS_DMAMUX_SYNC_POLARITY(pSyncConfig->SyncPolarity));

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a4b      	ldr	r2, [pc, #300]	; (8005754 <HAL_DMAEx_ConfigMuxSync+0x14c>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d049      	beq.n	80056c0 <HAL_DMAEx_ConfigMuxSync+0xb8>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a49      	ldr	r2, [pc, #292]	; (8005758 <HAL_DMAEx_ConfigMuxSync+0x150>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d044      	beq.n	80056c0 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a48      	ldr	r2, [pc, #288]	; (800575c <HAL_DMAEx_ConfigMuxSync+0x154>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d03f      	beq.n	80056c0 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a46      	ldr	r2, [pc, #280]	; (8005760 <HAL_DMAEx_ConfigMuxSync+0x158>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d03a      	beq.n	80056c0 <HAL_DMAEx_ConfigMuxSync+0xb8>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a45      	ldr	r2, [pc, #276]	; (8005764 <HAL_DMAEx_ConfigMuxSync+0x15c>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d035      	beq.n	80056c0 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a43      	ldr	r2, [pc, #268]	; (8005768 <HAL_DMAEx_ConfigMuxSync+0x160>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d030      	beq.n	80056c0 <HAL_DMAEx_ConfigMuxSync+0xb8>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a42      	ldr	r2, [pc, #264]	; (800576c <HAL_DMAEx_ConfigMuxSync+0x164>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d02b      	beq.n	80056c0 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a40      	ldr	r2, [pc, #256]	; (8005770 <HAL_DMAEx_ConfigMuxSync+0x168>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d026      	beq.n	80056c0 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a3f      	ldr	r2, [pc, #252]	; (8005774 <HAL_DMAEx_ConfigMuxSync+0x16c>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d021      	beq.n	80056c0 <HAL_DMAEx_ConfigMuxSync+0xb8>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a3d      	ldr	r2, [pc, #244]	; (8005778 <HAL_DMAEx_ConfigMuxSync+0x170>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d01c      	beq.n	80056c0 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a3c      	ldr	r2, [pc, #240]	; (800577c <HAL_DMAEx_ConfigMuxSync+0x174>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d017      	beq.n	80056c0 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a3a      	ldr	r2, [pc, #232]	; (8005780 <HAL_DMAEx_ConfigMuxSync+0x178>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d012      	beq.n	80056c0 <HAL_DMAEx_ConfigMuxSync+0xb8>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a39      	ldr	r2, [pc, #228]	; (8005784 <HAL_DMAEx_ConfigMuxSync+0x17c>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d00d      	beq.n	80056c0 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a37      	ldr	r2, [pc, #220]	; (8005788 <HAL_DMAEx_ConfigMuxSync+0x180>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d008      	beq.n	80056c0 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a36      	ldr	r2, [pc, #216]	; (800578c <HAL_DMAEx_ConfigMuxSync+0x184>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d003      	beq.n	80056c0 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a34      	ldr	r2, [pc, #208]	; (8005790 <HAL_DMAEx_ConfigMuxSync+0x188>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	bf00      	nop
    }
    else
    {
      assert_param(IS_BDMA_DMAMUX_SYNC_SIGNAL_ID(pSyncConfig->SyncSignalID));
    }
    syncSignalID = pSyncConfig->SyncSignalID;
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	60fb      	str	r3, [r7, #12]
    syncPolarity = pSyncConfig->SyncPolarity;
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	60bb      	str	r3, [r7, #8]
  }

  /*Check if the DMA state is ready */
  if(hdma->State == HAL_DMA_STATE_READY)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d131      	bne.n	800573e <HAL_DMAEx_ConfigMuxSync+0x136>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d101      	bne.n	80056e8 <HAL_DMAEx_ConfigMuxSync+0xe0>
 80056e4:	2302      	movs	r3, #2
 80056e6:	e02f      	b.n	8005748 <HAL_DMAEx_ConfigMuxSync+0x140>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the synchronization and event generation before applying a new config */
    CLEAR_BIT(hdma->DMAmuxChannel->CCR,(DMAMUX_CxCR_SE | DMAMUX_CxCR_EGE));
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056fa:	f422 3281 	bic.w	r2, r2, #66048	; 0x10200
 80056fe:	601a      	str	r2, [r3, #0]

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG( hdma->DMAmuxChannel->CCR, \
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	b2d9      	uxtb	r1, r3
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	061a      	lsls	r2, r3, #24
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	3b01      	subs	r3, #1
 8005712:	04db      	lsls	r3, r3, #19
 8005714:	431a      	orrs	r2, r3
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	431a      	orrs	r2, r3
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	7a1b      	ldrb	r3, [r3, #8]
 800571e:	041b      	lsls	r3, r3, #16
 8005720:	431a      	orrs	r2, r3
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	7a5b      	ldrb	r3, [r3, #9]
 8005726:	025b      	lsls	r3, r3, #9
 8005728:	431a      	orrs	r2, r3
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800572e:	430a      	orrs	r2, r1
 8005730:	601a      	str	r2, [r3, #0]
               ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
               syncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)    | \
               ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos));

      /* Process Locked */
    __HAL_UNLOCK(hdma);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800573a:	2300      	movs	r3, #0
 800573c:	e004      	b.n	8005748 <HAL_DMAEx_ConfigMuxSync+0x140>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005744:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
  }
}
 8005748:	4618      	mov	r0, r3
 800574a:	3714      	adds	r7, #20
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr
 8005754:	40020010 	.word	0x40020010
 8005758:	40020028 	.word	0x40020028
 800575c:	40020040 	.word	0x40020040
 8005760:	40020058 	.word	0x40020058
 8005764:	40020070 	.word	0x40020070
 8005768:	40020088 	.word	0x40020088
 800576c:	400200a0 	.word	0x400200a0
 8005770:	400200b8 	.word	0x400200b8
 8005774:	40020410 	.word	0x40020410
 8005778:	40020428 	.word	0x40020428
 800577c:	40020440 	.word	0x40020440
 8005780:	40020458 	.word	0x40020458
 8005784:	40020470 	.word	0x40020470
 8005788:	40020488 	.word	0x40020488
 800578c:	400204a0 	.word	0x400204a0
 8005790:	400204b8 	.word	0x400204b8

08005794 <HAL_DMAEx_MUX_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b082      	sub	sp, #8
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057a6:	4013      	ands	r3, r2
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d01a      	beq.n	80057e2 <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80057ba:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80057c4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	655a      	str	r2, [r3, #84]	; 0x54

    if(hdma->XferErrorCallback != NULL)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d003      	beq.n	80057e2 <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	4798      	blx	r3
    }
  }

  if(hdma->DMAmuxRequestGen != 0)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d022      	beq.n	8005830 <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
   /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057f4:	4013      	ands	r3, r2
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d01a      	beq.n	8005830 <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005804:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005808:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005812:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005818:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	655a      	str	r2, [r3, #84]	; 0x54

      if(hdma->XferErrorCallback != NULL)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005824:	2b00      	cmp	r3, #0
 8005826:	d003      	beq.n	8005830 <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	4798      	blx	r3
      }
    }
  }
}
 8005830:	bf00      	nop
 8005832:	3708      	adds	r7, #8
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}

08005838 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005838:	b480      	push	{r7}
 800583a:	b089      	sub	sp, #36	; 0x24
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005842:	2300      	movs	r3, #0
 8005844:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005846:	4b86      	ldr	r3, [pc, #536]	; (8005a60 <HAL_GPIO_Init+0x228>)
 8005848:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800584a:	e18c      	b.n	8005b66 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	2101      	movs	r1, #1
 8005852:	69fb      	ldr	r3, [r7, #28]
 8005854:	fa01 f303 	lsl.w	r3, r1, r3
 8005858:	4013      	ands	r3, r2
 800585a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	2b00      	cmp	r3, #0
 8005860:	f000 817e 	beq.w	8005b60 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	f003 0303 	and.w	r3, r3, #3
 800586c:	2b01      	cmp	r3, #1
 800586e:	d005      	beq.n	800587c <HAL_GPIO_Init+0x44>
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	f003 0303 	and.w	r3, r3, #3
 8005878:	2b02      	cmp	r3, #2
 800587a:	d130      	bne.n	80058de <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	005b      	lsls	r3, r3, #1
 8005886:	2203      	movs	r2, #3
 8005888:	fa02 f303 	lsl.w	r3, r2, r3
 800588c:	43db      	mvns	r3, r3
 800588e:	69ba      	ldr	r2, [r7, #24]
 8005890:	4013      	ands	r3, r2
 8005892:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	68da      	ldr	r2, [r3, #12]
 8005898:	69fb      	ldr	r3, [r7, #28]
 800589a:	005b      	lsls	r3, r3, #1
 800589c:	fa02 f303 	lsl.w	r3, r2, r3
 80058a0:	69ba      	ldr	r2, [r7, #24]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	69ba      	ldr	r2, [r7, #24]
 80058aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80058b2:	2201      	movs	r2, #1
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	fa02 f303 	lsl.w	r3, r2, r3
 80058ba:	43db      	mvns	r3, r3
 80058bc:	69ba      	ldr	r2, [r7, #24]
 80058be:	4013      	ands	r3, r2
 80058c0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	091b      	lsrs	r3, r3, #4
 80058c8:	f003 0201 	and.w	r2, r3, #1
 80058cc:	69fb      	ldr	r3, [r7, #28]
 80058ce:	fa02 f303 	lsl.w	r3, r2, r3
 80058d2:	69ba      	ldr	r2, [r7, #24]
 80058d4:	4313      	orrs	r3, r2
 80058d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	69ba      	ldr	r2, [r7, #24]
 80058dc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	f003 0303 	and.w	r3, r3, #3
 80058e6:	2b03      	cmp	r3, #3
 80058e8:	d017      	beq.n	800591a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	68db      	ldr	r3, [r3, #12]
 80058ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80058f0:	69fb      	ldr	r3, [r7, #28]
 80058f2:	005b      	lsls	r3, r3, #1
 80058f4:	2203      	movs	r2, #3
 80058f6:	fa02 f303 	lsl.w	r3, r2, r3
 80058fa:	43db      	mvns	r3, r3
 80058fc:	69ba      	ldr	r2, [r7, #24]
 80058fe:	4013      	ands	r3, r2
 8005900:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	689a      	ldr	r2, [r3, #8]
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	005b      	lsls	r3, r3, #1
 800590a:	fa02 f303 	lsl.w	r3, r2, r3
 800590e:	69ba      	ldr	r2, [r7, #24]
 8005910:	4313      	orrs	r3, r2
 8005912:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	69ba      	ldr	r2, [r7, #24]
 8005918:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	f003 0303 	and.w	r3, r3, #3
 8005922:	2b02      	cmp	r3, #2
 8005924:	d123      	bne.n	800596e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005926:	69fb      	ldr	r3, [r7, #28]
 8005928:	08da      	lsrs	r2, r3, #3
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	3208      	adds	r2, #8
 800592e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005932:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005934:	69fb      	ldr	r3, [r7, #28]
 8005936:	f003 0307 	and.w	r3, r3, #7
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	220f      	movs	r2, #15
 800593e:	fa02 f303 	lsl.w	r3, r2, r3
 8005942:	43db      	mvns	r3, r3
 8005944:	69ba      	ldr	r2, [r7, #24]
 8005946:	4013      	ands	r3, r2
 8005948:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	691a      	ldr	r2, [r3, #16]
 800594e:	69fb      	ldr	r3, [r7, #28]
 8005950:	f003 0307 	and.w	r3, r3, #7
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	fa02 f303 	lsl.w	r3, r2, r3
 800595a:	69ba      	ldr	r2, [r7, #24]
 800595c:	4313      	orrs	r3, r2
 800595e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005960:	69fb      	ldr	r3, [r7, #28]
 8005962:	08da      	lsrs	r2, r3, #3
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	3208      	adds	r2, #8
 8005968:	69b9      	ldr	r1, [r7, #24]
 800596a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005974:	69fb      	ldr	r3, [r7, #28]
 8005976:	005b      	lsls	r3, r3, #1
 8005978:	2203      	movs	r2, #3
 800597a:	fa02 f303 	lsl.w	r3, r2, r3
 800597e:	43db      	mvns	r3, r3
 8005980:	69ba      	ldr	r2, [r7, #24]
 8005982:	4013      	ands	r3, r2
 8005984:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	f003 0203 	and.w	r2, r3, #3
 800598e:	69fb      	ldr	r3, [r7, #28]
 8005990:	005b      	lsls	r3, r3, #1
 8005992:	fa02 f303 	lsl.w	r3, r2, r3
 8005996:	69ba      	ldr	r2, [r7, #24]
 8005998:	4313      	orrs	r3, r2
 800599a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	69ba      	ldr	r2, [r7, #24]
 80059a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	f000 80d8 	beq.w	8005b60 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80059b0:	4b2c      	ldr	r3, [pc, #176]	; (8005a64 <HAL_GPIO_Init+0x22c>)
 80059b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80059b6:	4a2b      	ldr	r2, [pc, #172]	; (8005a64 <HAL_GPIO_Init+0x22c>)
 80059b8:	f043 0302 	orr.w	r3, r3, #2
 80059bc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80059c0:	4b28      	ldr	r3, [pc, #160]	; (8005a64 <HAL_GPIO_Init+0x22c>)
 80059c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80059c6:	f003 0302 	and.w	r3, r3, #2
 80059ca:	60fb      	str	r3, [r7, #12]
 80059cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80059ce:	4a26      	ldr	r2, [pc, #152]	; (8005a68 <HAL_GPIO_Init+0x230>)
 80059d0:	69fb      	ldr	r3, [r7, #28]
 80059d2:	089b      	lsrs	r3, r3, #2
 80059d4:	3302      	adds	r3, #2
 80059d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80059dc:	69fb      	ldr	r3, [r7, #28]
 80059de:	f003 0303 	and.w	r3, r3, #3
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	220f      	movs	r2, #15
 80059e6:	fa02 f303 	lsl.w	r3, r2, r3
 80059ea:	43db      	mvns	r3, r3
 80059ec:	69ba      	ldr	r2, [r7, #24]
 80059ee:	4013      	ands	r3, r2
 80059f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4a1d      	ldr	r2, [pc, #116]	; (8005a6c <HAL_GPIO_Init+0x234>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d04a      	beq.n	8005a90 <HAL_GPIO_Init+0x258>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a1c      	ldr	r2, [pc, #112]	; (8005a70 <HAL_GPIO_Init+0x238>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d02b      	beq.n	8005a5a <HAL_GPIO_Init+0x222>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a1b      	ldr	r2, [pc, #108]	; (8005a74 <HAL_GPIO_Init+0x23c>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d025      	beq.n	8005a56 <HAL_GPIO_Init+0x21e>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4a1a      	ldr	r2, [pc, #104]	; (8005a78 <HAL_GPIO_Init+0x240>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d01f      	beq.n	8005a52 <HAL_GPIO_Init+0x21a>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a19      	ldr	r2, [pc, #100]	; (8005a7c <HAL_GPIO_Init+0x244>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d019      	beq.n	8005a4e <HAL_GPIO_Init+0x216>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4a18      	ldr	r2, [pc, #96]	; (8005a80 <HAL_GPIO_Init+0x248>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d013      	beq.n	8005a4a <HAL_GPIO_Init+0x212>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4a17      	ldr	r2, [pc, #92]	; (8005a84 <HAL_GPIO_Init+0x24c>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d00d      	beq.n	8005a46 <HAL_GPIO_Init+0x20e>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	4a16      	ldr	r2, [pc, #88]	; (8005a88 <HAL_GPIO_Init+0x250>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d007      	beq.n	8005a42 <HAL_GPIO_Init+0x20a>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4a15      	ldr	r2, [pc, #84]	; (8005a8c <HAL_GPIO_Init+0x254>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d101      	bne.n	8005a3e <HAL_GPIO_Init+0x206>
 8005a3a:	2309      	movs	r3, #9
 8005a3c:	e029      	b.n	8005a92 <HAL_GPIO_Init+0x25a>
 8005a3e:	230a      	movs	r3, #10
 8005a40:	e027      	b.n	8005a92 <HAL_GPIO_Init+0x25a>
 8005a42:	2307      	movs	r3, #7
 8005a44:	e025      	b.n	8005a92 <HAL_GPIO_Init+0x25a>
 8005a46:	2306      	movs	r3, #6
 8005a48:	e023      	b.n	8005a92 <HAL_GPIO_Init+0x25a>
 8005a4a:	2305      	movs	r3, #5
 8005a4c:	e021      	b.n	8005a92 <HAL_GPIO_Init+0x25a>
 8005a4e:	2304      	movs	r3, #4
 8005a50:	e01f      	b.n	8005a92 <HAL_GPIO_Init+0x25a>
 8005a52:	2303      	movs	r3, #3
 8005a54:	e01d      	b.n	8005a92 <HAL_GPIO_Init+0x25a>
 8005a56:	2302      	movs	r3, #2
 8005a58:	e01b      	b.n	8005a92 <HAL_GPIO_Init+0x25a>
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e019      	b.n	8005a92 <HAL_GPIO_Init+0x25a>
 8005a5e:	bf00      	nop
 8005a60:	58000080 	.word	0x58000080
 8005a64:	58024400 	.word	0x58024400
 8005a68:	58000400 	.word	0x58000400
 8005a6c:	58020000 	.word	0x58020000
 8005a70:	58020400 	.word	0x58020400
 8005a74:	58020800 	.word	0x58020800
 8005a78:	58020c00 	.word	0x58020c00
 8005a7c:	58021000 	.word	0x58021000
 8005a80:	58021400 	.word	0x58021400
 8005a84:	58021800 	.word	0x58021800
 8005a88:	58021c00 	.word	0x58021c00
 8005a8c:	58022400 	.word	0x58022400
 8005a90:	2300      	movs	r3, #0
 8005a92:	69fa      	ldr	r2, [r7, #28]
 8005a94:	f002 0203 	and.w	r2, r2, #3
 8005a98:	0092      	lsls	r2, r2, #2
 8005a9a:	4093      	lsls	r3, r2
 8005a9c:	69ba      	ldr	r2, [r7, #24]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005aa2:	4938      	ldr	r1, [pc, #224]	; (8005b84 <HAL_GPIO_Init+0x34c>)
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	089b      	lsrs	r3, r3, #2
 8005aa8:	3302      	adds	r3, #2
 8005aaa:	69ba      	ldr	r2, [r7, #24]
 8005aac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005ab0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	43db      	mvns	r3, r3
 8005abc:	69ba      	ldr	r2, [r7, #24]
 8005abe:	4013      	ands	r3, r2
 8005ac0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d003      	beq.n	8005ad6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8005ace:	69ba      	ldr	r2, [r7, #24]
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005ad6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ada:	69bb      	ldr	r3, [r7, #24]
 8005adc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005ade:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	43db      	mvns	r3, r3
 8005aea:	69ba      	ldr	r2, [r7, #24]
 8005aec:	4013      	ands	r3, r2
 8005aee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d003      	beq.n	8005b04 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8005afc:	69ba      	ldr	r2, [r7, #24]
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	4313      	orrs	r3, r2
 8005b02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005b04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b08:	69bb      	ldr	r3, [r7, #24]
 8005b0a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	43db      	mvns	r3, r3
 8005b16:	69ba      	ldr	r2, [r7, #24]
 8005b18:	4013      	ands	r3, r2
 8005b1a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d003      	beq.n	8005b30 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8005b28:	69ba      	ldr	r2, [r7, #24]
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	69ba      	ldr	r2, [r7, #24]
 8005b34:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	43db      	mvns	r3, r3
 8005b40:	69ba      	ldr	r2, [r7, #24]
 8005b42:	4013      	ands	r3, r2
 8005b44:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d003      	beq.n	8005b5a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8005b52:	69ba      	ldr	r2, [r7, #24]
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	69ba      	ldr	r2, [r7, #24]
 8005b5e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005b60:	69fb      	ldr	r3, [r7, #28]
 8005b62:	3301      	adds	r3, #1
 8005b64:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	fa22 f303 	lsr.w	r3, r2, r3
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	f47f ae6b 	bne.w	800584c <HAL_GPIO_Init+0x14>
  }
}
 8005b76:	bf00      	nop
 8005b78:	bf00      	nop
 8005b7a:	3724      	adds	r7, #36	; 0x24
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr
 8005b84:	58000400 	.word	0x58000400

08005b88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b083      	sub	sp, #12
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	460b      	mov	r3, r1
 8005b92:	807b      	strh	r3, [r7, #2]
 8005b94:	4613      	mov	r3, r2
 8005b96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005b98:	787b      	ldrb	r3, [r7, #1]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d003      	beq.n	8005ba6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005b9e:	887a      	ldrh	r2, [r7, #2]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005ba4:	e003      	b.n	8005bae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005ba6:	887b      	ldrh	r3, [r7, #2]
 8005ba8:	041a      	lsls	r2, r3, #16
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	619a      	str	r2, [r3, #24]
}
 8005bae:	bf00      	nop
 8005bb0:	370c      	adds	r7, #12
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr
	...

08005bbc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b084      	sub	sp, #16
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8005bc4:	4b29      	ldr	r3, [pc, #164]	; (8005c6c <HAL_PWREx_ConfigSupply+0xb0>)
 8005bc6:	68db      	ldr	r3, [r3, #12]
 8005bc8:	f003 0307 	and.w	r3, r3, #7
 8005bcc:	2b06      	cmp	r3, #6
 8005bce:	d00a      	beq.n	8005be6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005bd0:	4b26      	ldr	r3, [pc, #152]	; (8005c6c <HAL_PWREx_ConfigSupply+0xb0>)
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d001      	beq.n	8005be2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	e03f      	b.n	8005c62 <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005be2:	2300      	movs	r3, #0
 8005be4:	e03d      	b.n	8005c62 <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005be6:	4b21      	ldr	r3, [pc, #132]	; (8005c6c <HAL_PWREx_ConfigSupply+0xb0>)
 8005be8:	68db      	ldr	r3, [r3, #12]
 8005bea:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8005bee:	491f      	ldr	r1, [pc, #124]	; (8005c6c <HAL_PWREx_ConfigSupply+0xb0>)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005bf6:	f7fc f8c7 	bl	8001d88 <HAL_GetTick>
 8005bfa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005bfc:	e009      	b.n	8005c12 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005bfe:	f7fc f8c3 	bl	8001d88 <HAL_GetTick>
 8005c02:	4602      	mov	r2, r0
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	1ad3      	subs	r3, r2, r3
 8005c08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c0c:	d901      	bls.n	8005c12 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e027      	b.n	8005c62 <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005c12:	4b16      	ldr	r3, [pc, #88]	; (8005c6c <HAL_PWREx_ConfigSupply+0xb0>)
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c1e:	d1ee      	bne.n	8005bfe <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2b1e      	cmp	r3, #30
 8005c24:	d008      	beq.n	8005c38 <HAL_PWREx_ConfigSupply+0x7c>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2b2e      	cmp	r3, #46	; 0x2e
 8005c2a:	d005      	beq.n	8005c38 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2b1d      	cmp	r3, #29
 8005c30:	d002      	beq.n	8005c38 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2b2d      	cmp	r3, #45	; 0x2d
 8005c36:	d113      	bne.n	8005c60 <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005c38:	f7fc f8a6 	bl	8001d88 <HAL_GetTick>
 8005c3c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005c3e:	e009      	b.n	8005c54 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005c40:	f7fc f8a2 	bl	8001d88 <HAL_GetTick>
 8005c44:	4602      	mov	r2, r0
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	1ad3      	subs	r3, r2, r3
 8005c4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c4e:	d901      	bls.n	8005c54 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	e006      	b.n	8005c62 <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005c54:	4b05      	ldr	r3, [pc, #20]	; (8005c6c <HAL_PWREx_ConfigSupply+0xb0>)
 8005c56:	68db      	ldr	r3, [r3, #12]
 8005c58:	f003 0311 	and.w	r3, r3, #17
 8005c5c:	2b11      	cmp	r3, #17
 8005c5e:	d1ef      	bne.n	8005c40 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005c60:	2300      	movs	r3, #0
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3710      	adds	r7, #16
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	bf00      	nop
 8005c6c:	58024800 	.word	0x58024800

08005c70 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b08c      	sub	sp, #48	; 0x30
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d101      	bne.n	8005c82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e397      	b.n	80063b2 <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f003 0301 	and.w	r3, r3, #1
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	f000 8087 	beq.w	8005d9e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c90:	4b9e      	ldr	r3, [pc, #632]	; (8005f0c <HAL_RCC_OscConfig+0x29c>)
 8005c92:	691b      	ldr	r3, [r3, #16]
 8005c94:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c98:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005c9a:	4b9c      	ldr	r3, [pc, #624]	; (8005f0c <HAL_RCC_OscConfig+0x29c>)
 8005c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c9e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ca2:	2b10      	cmp	r3, #16
 8005ca4:	d007      	beq.n	8005cb6 <HAL_RCC_OscConfig+0x46>
 8005ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ca8:	2b18      	cmp	r3, #24
 8005caa:	d110      	bne.n	8005cce <HAL_RCC_OscConfig+0x5e>
 8005cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cae:	f003 0303 	and.w	r3, r3, #3
 8005cb2:	2b02      	cmp	r3, #2
 8005cb4:	d10b      	bne.n	8005cce <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cb6:	4b95      	ldr	r3, [pc, #596]	; (8005f0c <HAL_RCC_OscConfig+0x29c>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d06c      	beq.n	8005d9c <HAL_RCC_OscConfig+0x12c>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d168      	bne.n	8005d9c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e371      	b.n	80063b2 <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cd6:	d106      	bne.n	8005ce6 <HAL_RCC_OscConfig+0x76>
 8005cd8:	4b8c      	ldr	r3, [pc, #560]	; (8005f0c <HAL_RCC_OscConfig+0x29c>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a8b      	ldr	r2, [pc, #556]	; (8005f0c <HAL_RCC_OscConfig+0x29c>)
 8005cde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ce2:	6013      	str	r3, [r2, #0]
 8005ce4:	e02e      	b.n	8005d44 <HAL_RCC_OscConfig+0xd4>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d10c      	bne.n	8005d08 <HAL_RCC_OscConfig+0x98>
 8005cee:	4b87      	ldr	r3, [pc, #540]	; (8005f0c <HAL_RCC_OscConfig+0x29c>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a86      	ldr	r2, [pc, #536]	; (8005f0c <HAL_RCC_OscConfig+0x29c>)
 8005cf4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cf8:	6013      	str	r3, [r2, #0]
 8005cfa:	4b84      	ldr	r3, [pc, #528]	; (8005f0c <HAL_RCC_OscConfig+0x29c>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a83      	ldr	r2, [pc, #524]	; (8005f0c <HAL_RCC_OscConfig+0x29c>)
 8005d00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d04:	6013      	str	r3, [r2, #0]
 8005d06:	e01d      	b.n	8005d44 <HAL_RCC_OscConfig+0xd4>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d10:	d10c      	bne.n	8005d2c <HAL_RCC_OscConfig+0xbc>
 8005d12:	4b7e      	ldr	r3, [pc, #504]	; (8005f0c <HAL_RCC_OscConfig+0x29c>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a7d      	ldr	r2, [pc, #500]	; (8005f0c <HAL_RCC_OscConfig+0x29c>)
 8005d18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d1c:	6013      	str	r3, [r2, #0]
 8005d1e:	4b7b      	ldr	r3, [pc, #492]	; (8005f0c <HAL_RCC_OscConfig+0x29c>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a7a      	ldr	r2, [pc, #488]	; (8005f0c <HAL_RCC_OscConfig+0x29c>)
 8005d24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d28:	6013      	str	r3, [r2, #0]
 8005d2a:	e00b      	b.n	8005d44 <HAL_RCC_OscConfig+0xd4>
 8005d2c:	4b77      	ldr	r3, [pc, #476]	; (8005f0c <HAL_RCC_OscConfig+0x29c>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a76      	ldr	r2, [pc, #472]	; (8005f0c <HAL_RCC_OscConfig+0x29c>)
 8005d32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d36:	6013      	str	r3, [r2, #0]
 8005d38:	4b74      	ldr	r3, [pc, #464]	; (8005f0c <HAL_RCC_OscConfig+0x29c>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a73      	ldr	r2, [pc, #460]	; (8005f0c <HAL_RCC_OscConfig+0x29c>)
 8005d3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d013      	beq.n	8005d74 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d4c:	f7fc f81c 	bl	8001d88 <HAL_GetTick>
 8005d50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005d52:	e008      	b.n	8005d66 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d54:	f7fc f818 	bl	8001d88 <HAL_GetTick>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5c:	1ad3      	subs	r3, r2, r3
 8005d5e:	2b64      	cmp	r3, #100	; 0x64
 8005d60:	d901      	bls.n	8005d66 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005d62:	2303      	movs	r3, #3
 8005d64:	e325      	b.n	80063b2 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005d66:	4b69      	ldr	r3, [pc, #420]	; (8005f0c <HAL_RCC_OscConfig+0x29c>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d0f0      	beq.n	8005d54 <HAL_RCC_OscConfig+0xe4>
 8005d72:	e014      	b.n	8005d9e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d74:	f7fc f808 	bl	8001d88 <HAL_GetTick>
 8005d78:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005d7a:	e008      	b.n	8005d8e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d7c:	f7fc f804 	bl	8001d88 <HAL_GetTick>
 8005d80:	4602      	mov	r2, r0
 8005d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d84:	1ad3      	subs	r3, r2, r3
 8005d86:	2b64      	cmp	r3, #100	; 0x64
 8005d88:	d901      	bls.n	8005d8e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005d8a:	2303      	movs	r3, #3
 8005d8c:	e311      	b.n	80063b2 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005d8e:	4b5f      	ldr	r3, [pc, #380]	; (8005f0c <HAL_RCC_OscConfig+0x29c>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d1f0      	bne.n	8005d7c <HAL_RCC_OscConfig+0x10c>
 8005d9a:	e000      	b.n	8005d9e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f003 0302 	and.w	r3, r3, #2
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	f000 808a 	beq.w	8005ec0 <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005dac:	4b57      	ldr	r3, [pc, #348]	; (8005f0c <HAL_RCC_OscConfig+0x29c>)
 8005dae:	691b      	ldr	r3, [r3, #16]
 8005db0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005db4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005db6:	4b55      	ldr	r3, [pc, #340]	; (8005f0c <HAL_RCC_OscConfig+0x29c>)
 8005db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dba:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005dbc:	6a3b      	ldr	r3, [r7, #32]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d007      	beq.n	8005dd2 <HAL_RCC_OscConfig+0x162>
 8005dc2:	6a3b      	ldr	r3, [r7, #32]
 8005dc4:	2b18      	cmp	r3, #24
 8005dc6:	d137      	bne.n	8005e38 <HAL_RCC_OscConfig+0x1c8>
 8005dc8:	69fb      	ldr	r3, [r7, #28]
 8005dca:	f003 0303 	and.w	r3, r3, #3
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d132      	bne.n	8005e38 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005dd2:	4b4e      	ldr	r3, [pc, #312]	; (8005f0c <HAL_RCC_OscConfig+0x29c>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f003 0304 	and.w	r3, r3, #4
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d005      	beq.n	8005dea <HAL_RCC_OscConfig+0x17a>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	68db      	ldr	r3, [r3, #12]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d101      	bne.n	8005dea <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	e2e3      	b.n	80063b2 <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005dea:	4b48      	ldr	r3, [pc, #288]	; (8005f0c <HAL_RCC_OscConfig+0x29c>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f023 0219 	bic.w	r2, r3, #25
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	68db      	ldr	r3, [r3, #12]
 8005df6:	4945      	ldr	r1, [pc, #276]	; (8005f0c <HAL_RCC_OscConfig+0x29c>)
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005dfc:	f7fb ffc4 	bl	8001d88 <HAL_GetTick>
 8005e00:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005e02:	e008      	b.n	8005e16 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e04:	f7fb ffc0 	bl	8001d88 <HAL_GetTick>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0c:	1ad3      	subs	r3, r2, r3
 8005e0e:	2b02      	cmp	r3, #2
 8005e10:	d901      	bls.n	8005e16 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8005e12:	2303      	movs	r3, #3
 8005e14:	e2cd      	b.n	80063b2 <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005e16:	4b3d      	ldr	r3, [pc, #244]	; (8005f0c <HAL_RCC_OscConfig+0x29c>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f003 0304 	and.w	r3, r3, #4
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d0f0      	beq.n	8005e04 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e22:	4b3a      	ldr	r3, [pc, #232]	; (8005f0c <HAL_RCC_OscConfig+0x29c>)
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	691b      	ldr	r3, [r3, #16]
 8005e2e:	061b      	lsls	r3, r3, #24
 8005e30:	4936      	ldr	r1, [pc, #216]	; (8005f0c <HAL_RCC_OscConfig+0x29c>)
 8005e32:	4313      	orrs	r3, r2
 8005e34:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e36:	e043      	b.n	8005ec0 <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	68db      	ldr	r3, [r3, #12]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d026      	beq.n	8005e8e <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005e40:	4b32      	ldr	r3, [pc, #200]	; (8005f0c <HAL_RCC_OscConfig+0x29c>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f023 0219 	bic.w	r2, r3, #25
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	68db      	ldr	r3, [r3, #12]
 8005e4c:	492f      	ldr	r1, [pc, #188]	; (8005f0c <HAL_RCC_OscConfig+0x29c>)
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e52:	f7fb ff99 	bl	8001d88 <HAL_GetTick>
 8005e56:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005e58:	e008      	b.n	8005e6c <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e5a:	f7fb ff95 	bl	8001d88 <HAL_GetTick>
 8005e5e:	4602      	mov	r2, r0
 8005e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e62:	1ad3      	subs	r3, r2, r3
 8005e64:	2b02      	cmp	r3, #2
 8005e66:	d901      	bls.n	8005e6c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005e68:	2303      	movs	r3, #3
 8005e6a:	e2a2      	b.n	80063b2 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005e6c:	4b27      	ldr	r3, [pc, #156]	; (8005f0c <HAL_RCC_OscConfig+0x29c>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f003 0304 	and.w	r3, r3, #4
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d0f0      	beq.n	8005e5a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e78:	4b24      	ldr	r3, [pc, #144]	; (8005f0c <HAL_RCC_OscConfig+0x29c>)
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	691b      	ldr	r3, [r3, #16]
 8005e84:	061b      	lsls	r3, r3, #24
 8005e86:	4921      	ldr	r1, [pc, #132]	; (8005f0c <HAL_RCC_OscConfig+0x29c>)
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	604b      	str	r3, [r1, #4]
 8005e8c:	e018      	b.n	8005ec0 <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e8e:	4b1f      	ldr	r3, [pc, #124]	; (8005f0c <HAL_RCC_OscConfig+0x29c>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a1e      	ldr	r2, [pc, #120]	; (8005f0c <HAL_RCC_OscConfig+0x29c>)
 8005e94:	f023 0301 	bic.w	r3, r3, #1
 8005e98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e9a:	f7fb ff75 	bl	8001d88 <HAL_GetTick>
 8005e9e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005ea0:	e008      	b.n	8005eb4 <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ea2:	f7fb ff71 	bl	8001d88 <HAL_GetTick>
 8005ea6:	4602      	mov	r2, r0
 8005ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eaa:	1ad3      	subs	r3, r2, r3
 8005eac:	2b02      	cmp	r3, #2
 8005eae:	d901      	bls.n	8005eb4 <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 8005eb0:	2303      	movs	r3, #3
 8005eb2:	e27e      	b.n	80063b2 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005eb4:	4b15      	ldr	r3, [pc, #84]	; (8005f0c <HAL_RCC_OscConfig+0x29c>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f003 0304 	and.w	r3, r3, #4
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d1f0      	bne.n	8005ea2 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f003 0310 	and.w	r3, r3, #16
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d06d      	beq.n	8005fa8 <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ecc:	4b0f      	ldr	r3, [pc, #60]	; (8005f0c <HAL_RCC_OscConfig+0x29c>)
 8005ece:	691b      	ldr	r3, [r3, #16]
 8005ed0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ed4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005ed6:	4b0d      	ldr	r3, [pc, #52]	; (8005f0c <HAL_RCC_OscConfig+0x29c>)
 8005ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eda:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005edc:	69bb      	ldr	r3, [r7, #24]
 8005ede:	2b08      	cmp	r3, #8
 8005ee0:	d007      	beq.n	8005ef2 <HAL_RCC_OscConfig+0x282>
 8005ee2:	69bb      	ldr	r3, [r7, #24]
 8005ee4:	2b18      	cmp	r3, #24
 8005ee6:	d11e      	bne.n	8005f26 <HAL_RCC_OscConfig+0x2b6>
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	f003 0303 	and.w	r3, r3, #3
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d119      	bne.n	8005f26 <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005ef2:	4b06      	ldr	r3, [pc, #24]	; (8005f0c <HAL_RCC_OscConfig+0x29c>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d008      	beq.n	8005f10 <HAL_RCC_OscConfig+0x2a0>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	69db      	ldr	r3, [r3, #28]
 8005f02:	2b80      	cmp	r3, #128	; 0x80
 8005f04:	d004      	beq.n	8005f10 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	e253      	b.n	80063b2 <HAL_RCC_OscConfig+0x742>
 8005f0a:	bf00      	nop
 8005f0c:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005f10:	4ba3      	ldr	r3, [pc, #652]	; (80061a0 <HAL_RCC_OscConfig+0x530>)
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6a1b      	ldr	r3, [r3, #32]
 8005f1c:	061b      	lsls	r3, r3, #24
 8005f1e:	49a0      	ldr	r1, [pc, #640]	; (80061a0 <HAL_RCC_OscConfig+0x530>)
 8005f20:	4313      	orrs	r3, r2
 8005f22:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005f24:	e040      	b.n	8005fa8 <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	69db      	ldr	r3, [r3, #28]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d023      	beq.n	8005f76 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005f2e:	4b9c      	ldr	r3, [pc, #624]	; (80061a0 <HAL_RCC_OscConfig+0x530>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a9b      	ldr	r2, [pc, #620]	; (80061a0 <HAL_RCC_OscConfig+0x530>)
 8005f34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f3a:	f7fb ff25 	bl	8001d88 <HAL_GetTick>
 8005f3e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005f40:	e008      	b.n	8005f54 <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005f42:	f7fb ff21 	bl	8001d88 <HAL_GetTick>
 8005f46:	4602      	mov	r2, r0
 8005f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4a:	1ad3      	subs	r3, r2, r3
 8005f4c:	2b02      	cmp	r3, #2
 8005f4e:	d901      	bls.n	8005f54 <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 8005f50:	2303      	movs	r3, #3
 8005f52:	e22e      	b.n	80063b2 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005f54:	4b92      	ldr	r3, [pc, #584]	; (80061a0 <HAL_RCC_OscConfig+0x530>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d0f0      	beq.n	8005f42 <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005f60:	4b8f      	ldr	r3, [pc, #572]	; (80061a0 <HAL_RCC_OscConfig+0x530>)
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6a1b      	ldr	r3, [r3, #32]
 8005f6c:	061b      	lsls	r3, r3, #24
 8005f6e:	498c      	ldr	r1, [pc, #560]	; (80061a0 <HAL_RCC_OscConfig+0x530>)
 8005f70:	4313      	orrs	r3, r2
 8005f72:	60cb      	str	r3, [r1, #12]
 8005f74:	e018      	b.n	8005fa8 <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005f76:	4b8a      	ldr	r3, [pc, #552]	; (80061a0 <HAL_RCC_OscConfig+0x530>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a89      	ldr	r2, [pc, #548]	; (80061a0 <HAL_RCC_OscConfig+0x530>)
 8005f7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f82:	f7fb ff01 	bl	8001d88 <HAL_GetTick>
 8005f86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005f88:	e008      	b.n	8005f9c <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005f8a:	f7fb fefd 	bl	8001d88 <HAL_GetTick>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f92:	1ad3      	subs	r3, r2, r3
 8005f94:	2b02      	cmp	r3, #2
 8005f96:	d901      	bls.n	8005f9c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8005f98:	2303      	movs	r3, #3
 8005f9a:	e20a      	b.n	80063b2 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005f9c:	4b80      	ldr	r3, [pc, #512]	; (80061a0 <HAL_RCC_OscConfig+0x530>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d1f0      	bne.n	8005f8a <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f003 0308 	and.w	r3, r3, #8
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d036      	beq.n	8006022 <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	695b      	ldr	r3, [r3, #20]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d019      	beq.n	8005ff0 <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005fbc:	4b78      	ldr	r3, [pc, #480]	; (80061a0 <HAL_RCC_OscConfig+0x530>)
 8005fbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fc0:	4a77      	ldr	r2, [pc, #476]	; (80061a0 <HAL_RCC_OscConfig+0x530>)
 8005fc2:	f043 0301 	orr.w	r3, r3, #1
 8005fc6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fc8:	f7fb fede 	bl	8001d88 <HAL_GetTick>
 8005fcc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005fce:	e008      	b.n	8005fe2 <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005fd0:	f7fb feda 	bl	8001d88 <HAL_GetTick>
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd8:	1ad3      	subs	r3, r2, r3
 8005fda:	2b02      	cmp	r3, #2
 8005fdc:	d901      	bls.n	8005fe2 <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 8005fde:	2303      	movs	r3, #3
 8005fe0:	e1e7      	b.n	80063b2 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005fe2:	4b6f      	ldr	r3, [pc, #444]	; (80061a0 <HAL_RCC_OscConfig+0x530>)
 8005fe4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fe6:	f003 0302 	and.w	r3, r3, #2
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d0f0      	beq.n	8005fd0 <HAL_RCC_OscConfig+0x360>
 8005fee:	e018      	b.n	8006022 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ff0:	4b6b      	ldr	r3, [pc, #428]	; (80061a0 <HAL_RCC_OscConfig+0x530>)
 8005ff2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ff4:	4a6a      	ldr	r2, [pc, #424]	; (80061a0 <HAL_RCC_OscConfig+0x530>)
 8005ff6:	f023 0301 	bic.w	r3, r3, #1
 8005ffa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ffc:	f7fb fec4 	bl	8001d88 <HAL_GetTick>
 8006000:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006002:	e008      	b.n	8006016 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006004:	f7fb fec0 	bl	8001d88 <HAL_GetTick>
 8006008:	4602      	mov	r2, r0
 800600a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600c:	1ad3      	subs	r3, r2, r3
 800600e:	2b02      	cmp	r3, #2
 8006010:	d901      	bls.n	8006016 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8006012:	2303      	movs	r3, #3
 8006014:	e1cd      	b.n	80063b2 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006016:	4b62      	ldr	r3, [pc, #392]	; (80061a0 <HAL_RCC_OscConfig+0x530>)
 8006018:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800601a:	f003 0302 	and.w	r3, r3, #2
 800601e:	2b00      	cmp	r3, #0
 8006020:	d1f0      	bne.n	8006004 <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f003 0320 	and.w	r3, r3, #32
 800602a:	2b00      	cmp	r3, #0
 800602c:	d036      	beq.n	800609c <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	699b      	ldr	r3, [r3, #24]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d019      	beq.n	800606a <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006036:	4b5a      	ldr	r3, [pc, #360]	; (80061a0 <HAL_RCC_OscConfig+0x530>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a59      	ldr	r2, [pc, #356]	; (80061a0 <HAL_RCC_OscConfig+0x530>)
 800603c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006040:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006042:	f7fb fea1 	bl	8001d88 <HAL_GetTick>
 8006046:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006048:	e008      	b.n	800605c <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800604a:	f7fb fe9d 	bl	8001d88 <HAL_GetTick>
 800604e:	4602      	mov	r2, r0
 8006050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006052:	1ad3      	subs	r3, r2, r3
 8006054:	2b02      	cmp	r3, #2
 8006056:	d901      	bls.n	800605c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8006058:	2303      	movs	r3, #3
 800605a:	e1aa      	b.n	80063b2 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800605c:	4b50      	ldr	r3, [pc, #320]	; (80061a0 <HAL_RCC_OscConfig+0x530>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006064:	2b00      	cmp	r3, #0
 8006066:	d0f0      	beq.n	800604a <HAL_RCC_OscConfig+0x3da>
 8006068:	e018      	b.n	800609c <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800606a:	4b4d      	ldr	r3, [pc, #308]	; (80061a0 <HAL_RCC_OscConfig+0x530>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a4c      	ldr	r2, [pc, #304]	; (80061a0 <HAL_RCC_OscConfig+0x530>)
 8006070:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006074:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006076:	f7fb fe87 	bl	8001d88 <HAL_GetTick>
 800607a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800607c:	e008      	b.n	8006090 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800607e:	f7fb fe83 	bl	8001d88 <HAL_GetTick>
 8006082:	4602      	mov	r2, r0
 8006084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006086:	1ad3      	subs	r3, r2, r3
 8006088:	2b02      	cmp	r3, #2
 800608a:	d901      	bls.n	8006090 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 800608c:	2303      	movs	r3, #3
 800608e:	e190      	b.n	80063b2 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006090:	4b43      	ldr	r3, [pc, #268]	; (80061a0 <HAL_RCC_OscConfig+0x530>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006098:	2b00      	cmp	r3, #0
 800609a:	d1f0      	bne.n	800607e <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f003 0304 	and.w	r3, r3, #4
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	f000 8085 	beq.w	80061b4 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80060aa:	4b3e      	ldr	r3, [pc, #248]	; (80061a4 <HAL_RCC_OscConfig+0x534>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a3d      	ldr	r2, [pc, #244]	; (80061a4 <HAL_RCC_OscConfig+0x534>)
 80060b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80060b6:	f7fb fe67 	bl	8001d88 <HAL_GetTick>
 80060ba:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80060bc:	e008      	b.n	80060d0 <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80060be:	f7fb fe63 	bl	8001d88 <HAL_GetTick>
 80060c2:	4602      	mov	r2, r0
 80060c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c6:	1ad3      	subs	r3, r2, r3
 80060c8:	2b64      	cmp	r3, #100	; 0x64
 80060ca:	d901      	bls.n	80060d0 <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 80060cc:	2303      	movs	r3, #3
 80060ce:	e170      	b.n	80063b2 <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80060d0:	4b34      	ldr	r3, [pc, #208]	; (80061a4 <HAL_RCC_OscConfig+0x534>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d0f0      	beq.n	80060be <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d106      	bne.n	80060f2 <HAL_RCC_OscConfig+0x482>
 80060e4:	4b2e      	ldr	r3, [pc, #184]	; (80061a0 <HAL_RCC_OscConfig+0x530>)
 80060e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060e8:	4a2d      	ldr	r2, [pc, #180]	; (80061a0 <HAL_RCC_OscConfig+0x530>)
 80060ea:	f043 0301 	orr.w	r3, r3, #1
 80060ee:	6713      	str	r3, [r2, #112]	; 0x70
 80060f0:	e02d      	b.n	800614e <HAL_RCC_OscConfig+0x4de>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	689b      	ldr	r3, [r3, #8]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d10c      	bne.n	8006114 <HAL_RCC_OscConfig+0x4a4>
 80060fa:	4b29      	ldr	r3, [pc, #164]	; (80061a0 <HAL_RCC_OscConfig+0x530>)
 80060fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060fe:	4a28      	ldr	r2, [pc, #160]	; (80061a0 <HAL_RCC_OscConfig+0x530>)
 8006100:	f023 0301 	bic.w	r3, r3, #1
 8006104:	6713      	str	r3, [r2, #112]	; 0x70
 8006106:	4b26      	ldr	r3, [pc, #152]	; (80061a0 <HAL_RCC_OscConfig+0x530>)
 8006108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800610a:	4a25      	ldr	r2, [pc, #148]	; (80061a0 <HAL_RCC_OscConfig+0x530>)
 800610c:	f023 0304 	bic.w	r3, r3, #4
 8006110:	6713      	str	r3, [r2, #112]	; 0x70
 8006112:	e01c      	b.n	800614e <HAL_RCC_OscConfig+0x4de>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	2b05      	cmp	r3, #5
 800611a:	d10c      	bne.n	8006136 <HAL_RCC_OscConfig+0x4c6>
 800611c:	4b20      	ldr	r3, [pc, #128]	; (80061a0 <HAL_RCC_OscConfig+0x530>)
 800611e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006120:	4a1f      	ldr	r2, [pc, #124]	; (80061a0 <HAL_RCC_OscConfig+0x530>)
 8006122:	f043 0304 	orr.w	r3, r3, #4
 8006126:	6713      	str	r3, [r2, #112]	; 0x70
 8006128:	4b1d      	ldr	r3, [pc, #116]	; (80061a0 <HAL_RCC_OscConfig+0x530>)
 800612a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800612c:	4a1c      	ldr	r2, [pc, #112]	; (80061a0 <HAL_RCC_OscConfig+0x530>)
 800612e:	f043 0301 	orr.w	r3, r3, #1
 8006132:	6713      	str	r3, [r2, #112]	; 0x70
 8006134:	e00b      	b.n	800614e <HAL_RCC_OscConfig+0x4de>
 8006136:	4b1a      	ldr	r3, [pc, #104]	; (80061a0 <HAL_RCC_OscConfig+0x530>)
 8006138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800613a:	4a19      	ldr	r2, [pc, #100]	; (80061a0 <HAL_RCC_OscConfig+0x530>)
 800613c:	f023 0301 	bic.w	r3, r3, #1
 8006140:	6713      	str	r3, [r2, #112]	; 0x70
 8006142:	4b17      	ldr	r3, [pc, #92]	; (80061a0 <HAL_RCC_OscConfig+0x530>)
 8006144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006146:	4a16      	ldr	r2, [pc, #88]	; (80061a0 <HAL_RCC_OscConfig+0x530>)
 8006148:	f023 0304 	bic.w	r3, r3, #4
 800614c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d015      	beq.n	8006182 <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006156:	f7fb fe17 	bl	8001d88 <HAL_GetTick>
 800615a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800615c:	e00a      	b.n	8006174 <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800615e:	f7fb fe13 	bl	8001d88 <HAL_GetTick>
 8006162:	4602      	mov	r2, r0
 8006164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006166:	1ad3      	subs	r3, r2, r3
 8006168:	f241 3288 	movw	r2, #5000	; 0x1388
 800616c:	4293      	cmp	r3, r2
 800616e:	d901      	bls.n	8006174 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8006170:	2303      	movs	r3, #3
 8006172:	e11e      	b.n	80063b2 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006174:	4b0a      	ldr	r3, [pc, #40]	; (80061a0 <HAL_RCC_OscConfig+0x530>)
 8006176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006178:	f003 0302 	and.w	r3, r3, #2
 800617c:	2b00      	cmp	r3, #0
 800617e:	d0ee      	beq.n	800615e <HAL_RCC_OscConfig+0x4ee>
 8006180:	e018      	b.n	80061b4 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006182:	f7fb fe01 	bl	8001d88 <HAL_GetTick>
 8006186:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006188:	e00e      	b.n	80061a8 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800618a:	f7fb fdfd 	bl	8001d88 <HAL_GetTick>
 800618e:	4602      	mov	r2, r0
 8006190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006192:	1ad3      	subs	r3, r2, r3
 8006194:	f241 3288 	movw	r2, #5000	; 0x1388
 8006198:	4293      	cmp	r3, r2
 800619a:	d905      	bls.n	80061a8 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800619c:	2303      	movs	r3, #3
 800619e:	e108      	b.n	80063b2 <HAL_RCC_OscConfig+0x742>
 80061a0:	58024400 	.word	0x58024400
 80061a4:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80061a8:	4b84      	ldr	r3, [pc, #528]	; (80063bc <HAL_RCC_OscConfig+0x74c>)
 80061aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061ac:	f003 0302 	and.w	r3, r3, #2
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d1ea      	bne.n	800618a <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	f000 80f9 	beq.w	80063b0 <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80061be:	4b7f      	ldr	r3, [pc, #508]	; (80063bc <HAL_RCC_OscConfig+0x74c>)
 80061c0:	691b      	ldr	r3, [r3, #16]
 80061c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80061c6:	2b18      	cmp	r3, #24
 80061c8:	f000 80b4 	beq.w	8006334 <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d0:	2b02      	cmp	r3, #2
 80061d2:	f040 8095 	bne.w	8006300 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061d6:	4b79      	ldr	r3, [pc, #484]	; (80063bc <HAL_RCC_OscConfig+0x74c>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a78      	ldr	r2, [pc, #480]	; (80063bc <HAL_RCC_OscConfig+0x74c>)
 80061dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80061e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061e2:	f7fb fdd1 	bl	8001d88 <HAL_GetTick>
 80061e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80061e8:	e008      	b.n	80061fc <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061ea:	f7fb fdcd 	bl	8001d88 <HAL_GetTick>
 80061ee:	4602      	mov	r2, r0
 80061f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f2:	1ad3      	subs	r3, r2, r3
 80061f4:	2b02      	cmp	r3, #2
 80061f6:	d901      	bls.n	80061fc <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80061f8:	2303      	movs	r3, #3
 80061fa:	e0da      	b.n	80063b2 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80061fc:	4b6f      	ldr	r3, [pc, #444]	; (80063bc <HAL_RCC_OscConfig+0x74c>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006204:	2b00      	cmp	r3, #0
 8006206:	d1f0      	bne.n	80061ea <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006208:	4b6c      	ldr	r3, [pc, #432]	; (80063bc <HAL_RCC_OscConfig+0x74c>)
 800620a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800620c:	4b6c      	ldr	r3, [pc, #432]	; (80063c0 <HAL_RCC_OscConfig+0x750>)
 800620e:	4013      	ands	r3, r2
 8006210:	687a      	ldr	r2, [r7, #4]
 8006212:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006218:	0112      	lsls	r2, r2, #4
 800621a:	430a      	orrs	r2, r1
 800621c:	4967      	ldr	r1, [pc, #412]	; (80063bc <HAL_RCC_OscConfig+0x74c>)
 800621e:	4313      	orrs	r3, r2
 8006220:	628b      	str	r3, [r1, #40]	; 0x28
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006226:	3b01      	subs	r3, #1
 8006228:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006230:	3b01      	subs	r3, #1
 8006232:	025b      	lsls	r3, r3, #9
 8006234:	b29b      	uxth	r3, r3
 8006236:	431a      	orrs	r2, r3
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800623c:	3b01      	subs	r3, #1
 800623e:	041b      	lsls	r3, r3, #16
 8006240:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006244:	431a      	orrs	r2, r3
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800624a:	3b01      	subs	r3, #1
 800624c:	061b      	lsls	r3, r3, #24
 800624e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006252:	495a      	ldr	r1, [pc, #360]	; (80063bc <HAL_RCC_OscConfig+0x74c>)
 8006254:	4313      	orrs	r3, r2
 8006256:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006258:	4b58      	ldr	r3, [pc, #352]	; (80063bc <HAL_RCC_OscConfig+0x74c>)
 800625a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800625c:	4a57      	ldr	r2, [pc, #348]	; (80063bc <HAL_RCC_OscConfig+0x74c>)
 800625e:	f023 0301 	bic.w	r3, r3, #1
 8006262:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006264:	4b55      	ldr	r3, [pc, #340]	; (80063bc <HAL_RCC_OscConfig+0x74c>)
 8006266:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006268:	4b56      	ldr	r3, [pc, #344]	; (80063c4 <HAL_RCC_OscConfig+0x754>)
 800626a:	4013      	ands	r3, r2
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006270:	00d2      	lsls	r2, r2, #3
 8006272:	4952      	ldr	r1, [pc, #328]	; (80063bc <HAL_RCC_OscConfig+0x74c>)
 8006274:	4313      	orrs	r3, r2
 8006276:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006278:	4b50      	ldr	r3, [pc, #320]	; (80063bc <HAL_RCC_OscConfig+0x74c>)
 800627a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800627c:	f023 020c 	bic.w	r2, r3, #12
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006284:	494d      	ldr	r1, [pc, #308]	; (80063bc <HAL_RCC_OscConfig+0x74c>)
 8006286:	4313      	orrs	r3, r2
 8006288:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800628a:	4b4c      	ldr	r3, [pc, #304]	; (80063bc <HAL_RCC_OscConfig+0x74c>)
 800628c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800628e:	f023 0202 	bic.w	r2, r3, #2
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006296:	4949      	ldr	r1, [pc, #292]	; (80063bc <HAL_RCC_OscConfig+0x74c>)
 8006298:	4313      	orrs	r3, r2
 800629a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800629c:	4b47      	ldr	r3, [pc, #284]	; (80063bc <HAL_RCC_OscConfig+0x74c>)
 800629e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062a0:	4a46      	ldr	r2, [pc, #280]	; (80063bc <HAL_RCC_OscConfig+0x74c>)
 80062a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062a8:	4b44      	ldr	r3, [pc, #272]	; (80063bc <HAL_RCC_OscConfig+0x74c>)
 80062aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ac:	4a43      	ldr	r2, [pc, #268]	; (80063bc <HAL_RCC_OscConfig+0x74c>)
 80062ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80062b4:	4b41      	ldr	r3, [pc, #260]	; (80063bc <HAL_RCC_OscConfig+0x74c>)
 80062b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062b8:	4a40      	ldr	r2, [pc, #256]	; (80063bc <HAL_RCC_OscConfig+0x74c>)
 80062ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80062be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80062c0:	4b3e      	ldr	r3, [pc, #248]	; (80063bc <HAL_RCC_OscConfig+0x74c>)
 80062c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062c4:	4a3d      	ldr	r2, [pc, #244]	; (80063bc <HAL_RCC_OscConfig+0x74c>)
 80062c6:	f043 0301 	orr.w	r3, r3, #1
 80062ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80062cc:	4b3b      	ldr	r3, [pc, #236]	; (80063bc <HAL_RCC_OscConfig+0x74c>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a3a      	ldr	r2, [pc, #232]	; (80063bc <HAL_RCC_OscConfig+0x74c>)
 80062d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80062d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062d8:	f7fb fd56 	bl	8001d88 <HAL_GetTick>
 80062dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80062de:	e008      	b.n	80062f2 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062e0:	f7fb fd52 	bl	8001d88 <HAL_GetTick>
 80062e4:	4602      	mov	r2, r0
 80062e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e8:	1ad3      	subs	r3, r2, r3
 80062ea:	2b02      	cmp	r3, #2
 80062ec:	d901      	bls.n	80062f2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80062ee:	2303      	movs	r3, #3
 80062f0:	e05f      	b.n	80063b2 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80062f2:	4b32      	ldr	r3, [pc, #200]	; (80063bc <HAL_RCC_OscConfig+0x74c>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d0f0      	beq.n	80062e0 <HAL_RCC_OscConfig+0x670>
 80062fe:	e057      	b.n	80063b0 <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006300:	4b2e      	ldr	r3, [pc, #184]	; (80063bc <HAL_RCC_OscConfig+0x74c>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a2d      	ldr	r2, [pc, #180]	; (80063bc <HAL_RCC_OscConfig+0x74c>)
 8006306:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800630a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800630c:	f7fb fd3c 	bl	8001d88 <HAL_GetTick>
 8006310:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006312:	e008      	b.n	8006326 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006314:	f7fb fd38 	bl	8001d88 <HAL_GetTick>
 8006318:	4602      	mov	r2, r0
 800631a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631c:	1ad3      	subs	r3, r2, r3
 800631e:	2b02      	cmp	r3, #2
 8006320:	d901      	bls.n	8006326 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8006322:	2303      	movs	r3, #3
 8006324:	e045      	b.n	80063b2 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006326:	4b25      	ldr	r3, [pc, #148]	; (80063bc <HAL_RCC_OscConfig+0x74c>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800632e:	2b00      	cmp	r3, #0
 8006330:	d1f0      	bne.n	8006314 <HAL_RCC_OscConfig+0x6a4>
 8006332:	e03d      	b.n	80063b0 <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006334:	4b21      	ldr	r3, [pc, #132]	; (80063bc <HAL_RCC_OscConfig+0x74c>)
 8006336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006338:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800633a:	4b20      	ldr	r3, [pc, #128]	; (80063bc <HAL_RCC_OscConfig+0x74c>)
 800633c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800633e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006344:	2b01      	cmp	r3, #1
 8006346:	d031      	beq.n	80063ac <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	f003 0203 	and.w	r2, r3, #3
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006352:	429a      	cmp	r2, r3
 8006354:	d12a      	bne.n	80063ac <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	091b      	lsrs	r3, r3, #4
 800635a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006362:	429a      	cmp	r2, r3
 8006364:	d122      	bne.n	80063ac <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006370:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006372:	429a      	cmp	r2, r3
 8006374:	d11a      	bne.n	80063ac <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	0a5b      	lsrs	r3, r3, #9
 800637a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006382:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006384:	429a      	cmp	r2, r3
 8006386:	d111      	bne.n	80063ac <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	0c1b      	lsrs	r3, r3, #16
 800638c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006394:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006396:	429a      	cmp	r2, r3
 8006398:	d108      	bne.n	80063ac <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	0e1b      	lsrs	r3, r3, #24
 800639e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063a6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80063a8:	429a      	cmp	r2, r3
 80063aa:	d001      	beq.n	80063b0 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 80063ac:	2301      	movs	r3, #1
 80063ae:	e000      	b.n	80063b2 <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 80063b0:	2300      	movs	r3, #0
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3730      	adds	r7, #48	; 0x30
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
 80063ba:	bf00      	nop
 80063bc:	58024400 	.word	0x58024400
 80063c0:	fffffc0c 	.word	0xfffffc0c
 80063c4:	ffff0007 	.word	0xffff0007

080063c8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b086      	sub	sp, #24
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d101      	bne.n	80063dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80063d8:	2301      	movs	r3, #1
 80063da:	e19c      	b.n	8006716 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80063dc:	4b8a      	ldr	r3, [pc, #552]	; (8006608 <HAL_RCC_ClockConfig+0x240>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f003 030f 	and.w	r3, r3, #15
 80063e4:	683a      	ldr	r2, [r7, #0]
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d910      	bls.n	800640c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063ea:	4b87      	ldr	r3, [pc, #540]	; (8006608 <HAL_RCC_ClockConfig+0x240>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f023 020f 	bic.w	r2, r3, #15
 80063f2:	4985      	ldr	r1, [pc, #532]	; (8006608 <HAL_RCC_ClockConfig+0x240>)
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	4313      	orrs	r3, r2
 80063f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80063fa:	4b83      	ldr	r3, [pc, #524]	; (8006608 <HAL_RCC_ClockConfig+0x240>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f003 030f 	and.w	r3, r3, #15
 8006402:	683a      	ldr	r2, [r7, #0]
 8006404:	429a      	cmp	r2, r3
 8006406:	d001      	beq.n	800640c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006408:	2301      	movs	r3, #1
 800640a:	e184      	b.n	8006716 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f003 0304 	and.w	r3, r3, #4
 8006414:	2b00      	cmp	r3, #0
 8006416:	d010      	beq.n	800643a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	691a      	ldr	r2, [r3, #16]
 800641c:	4b7b      	ldr	r3, [pc, #492]	; (800660c <HAL_RCC_ClockConfig+0x244>)
 800641e:	699b      	ldr	r3, [r3, #24]
 8006420:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006424:	429a      	cmp	r2, r3
 8006426:	d908      	bls.n	800643a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006428:	4b78      	ldr	r3, [pc, #480]	; (800660c <HAL_RCC_ClockConfig+0x244>)
 800642a:	699b      	ldr	r3, [r3, #24]
 800642c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	691b      	ldr	r3, [r3, #16]
 8006434:	4975      	ldr	r1, [pc, #468]	; (800660c <HAL_RCC_ClockConfig+0x244>)
 8006436:	4313      	orrs	r3, r2
 8006438:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f003 0308 	and.w	r3, r3, #8
 8006442:	2b00      	cmp	r3, #0
 8006444:	d010      	beq.n	8006468 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	695a      	ldr	r2, [r3, #20]
 800644a:	4b70      	ldr	r3, [pc, #448]	; (800660c <HAL_RCC_ClockConfig+0x244>)
 800644c:	69db      	ldr	r3, [r3, #28]
 800644e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006452:	429a      	cmp	r2, r3
 8006454:	d908      	bls.n	8006468 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006456:	4b6d      	ldr	r3, [pc, #436]	; (800660c <HAL_RCC_ClockConfig+0x244>)
 8006458:	69db      	ldr	r3, [r3, #28]
 800645a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	695b      	ldr	r3, [r3, #20]
 8006462:	496a      	ldr	r1, [pc, #424]	; (800660c <HAL_RCC_ClockConfig+0x244>)
 8006464:	4313      	orrs	r3, r2
 8006466:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f003 0310 	and.w	r3, r3, #16
 8006470:	2b00      	cmp	r3, #0
 8006472:	d010      	beq.n	8006496 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	699a      	ldr	r2, [r3, #24]
 8006478:	4b64      	ldr	r3, [pc, #400]	; (800660c <HAL_RCC_ClockConfig+0x244>)
 800647a:	69db      	ldr	r3, [r3, #28]
 800647c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006480:	429a      	cmp	r2, r3
 8006482:	d908      	bls.n	8006496 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006484:	4b61      	ldr	r3, [pc, #388]	; (800660c <HAL_RCC_ClockConfig+0x244>)
 8006486:	69db      	ldr	r3, [r3, #28]
 8006488:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	699b      	ldr	r3, [r3, #24]
 8006490:	495e      	ldr	r1, [pc, #376]	; (800660c <HAL_RCC_ClockConfig+0x244>)
 8006492:	4313      	orrs	r3, r2
 8006494:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f003 0320 	and.w	r3, r3, #32
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d010      	beq.n	80064c4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	69da      	ldr	r2, [r3, #28]
 80064a6:	4b59      	ldr	r3, [pc, #356]	; (800660c <HAL_RCC_ClockConfig+0x244>)
 80064a8:	6a1b      	ldr	r3, [r3, #32]
 80064aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d908      	bls.n	80064c4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80064b2:	4b56      	ldr	r3, [pc, #344]	; (800660c <HAL_RCC_ClockConfig+0x244>)
 80064b4:	6a1b      	ldr	r3, [r3, #32]
 80064b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	69db      	ldr	r3, [r3, #28]
 80064be:	4953      	ldr	r1, [pc, #332]	; (800660c <HAL_RCC_ClockConfig+0x244>)
 80064c0:	4313      	orrs	r3, r2
 80064c2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f003 0302 	and.w	r3, r3, #2
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d010      	beq.n	80064f2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	68da      	ldr	r2, [r3, #12]
 80064d4:	4b4d      	ldr	r3, [pc, #308]	; (800660c <HAL_RCC_ClockConfig+0x244>)
 80064d6:	699b      	ldr	r3, [r3, #24]
 80064d8:	f003 030f 	and.w	r3, r3, #15
 80064dc:	429a      	cmp	r2, r3
 80064de:	d908      	bls.n	80064f2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064e0:	4b4a      	ldr	r3, [pc, #296]	; (800660c <HAL_RCC_ClockConfig+0x244>)
 80064e2:	699b      	ldr	r3, [r3, #24]
 80064e4:	f023 020f 	bic.w	r2, r3, #15
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	4947      	ldr	r1, [pc, #284]	; (800660c <HAL_RCC_ClockConfig+0x244>)
 80064ee:	4313      	orrs	r3, r2
 80064f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f003 0301 	and.w	r3, r3, #1
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d055      	beq.n	80065aa <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80064fe:	4b43      	ldr	r3, [pc, #268]	; (800660c <HAL_RCC_ClockConfig+0x244>)
 8006500:	699b      	ldr	r3, [r3, #24]
 8006502:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	4940      	ldr	r1, [pc, #256]	; (800660c <HAL_RCC_ClockConfig+0x244>)
 800650c:	4313      	orrs	r3, r2
 800650e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	2b02      	cmp	r3, #2
 8006516:	d107      	bne.n	8006528 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006518:	4b3c      	ldr	r3, [pc, #240]	; (800660c <HAL_RCC_ClockConfig+0x244>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006520:	2b00      	cmp	r3, #0
 8006522:	d121      	bne.n	8006568 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006524:	2301      	movs	r3, #1
 8006526:	e0f6      	b.n	8006716 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	2b03      	cmp	r3, #3
 800652e:	d107      	bne.n	8006540 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006530:	4b36      	ldr	r3, [pc, #216]	; (800660c <HAL_RCC_ClockConfig+0x244>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006538:	2b00      	cmp	r3, #0
 800653a:	d115      	bne.n	8006568 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	e0ea      	b.n	8006716 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	2b01      	cmp	r3, #1
 8006546:	d107      	bne.n	8006558 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006548:	4b30      	ldr	r3, [pc, #192]	; (800660c <HAL_RCC_ClockConfig+0x244>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006550:	2b00      	cmp	r3, #0
 8006552:	d109      	bne.n	8006568 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	e0de      	b.n	8006716 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006558:	4b2c      	ldr	r3, [pc, #176]	; (800660c <HAL_RCC_ClockConfig+0x244>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f003 0304 	and.w	r3, r3, #4
 8006560:	2b00      	cmp	r3, #0
 8006562:	d101      	bne.n	8006568 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006564:	2301      	movs	r3, #1
 8006566:	e0d6      	b.n	8006716 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006568:	4b28      	ldr	r3, [pc, #160]	; (800660c <HAL_RCC_ClockConfig+0x244>)
 800656a:	691b      	ldr	r3, [r3, #16]
 800656c:	f023 0207 	bic.w	r2, r3, #7
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	4925      	ldr	r1, [pc, #148]	; (800660c <HAL_RCC_ClockConfig+0x244>)
 8006576:	4313      	orrs	r3, r2
 8006578:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800657a:	f7fb fc05 	bl	8001d88 <HAL_GetTick>
 800657e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006580:	e00a      	b.n	8006598 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006582:	f7fb fc01 	bl	8001d88 <HAL_GetTick>
 8006586:	4602      	mov	r2, r0
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	1ad3      	subs	r3, r2, r3
 800658c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006590:	4293      	cmp	r3, r2
 8006592:	d901      	bls.n	8006598 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006594:	2303      	movs	r3, #3
 8006596:	e0be      	b.n	8006716 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006598:	4b1c      	ldr	r3, [pc, #112]	; (800660c <HAL_RCC_ClockConfig+0x244>)
 800659a:	691b      	ldr	r3, [r3, #16]
 800659c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	00db      	lsls	r3, r3, #3
 80065a6:	429a      	cmp	r2, r3
 80065a8:	d1eb      	bne.n	8006582 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f003 0302 	and.w	r3, r3, #2
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d010      	beq.n	80065d8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	68da      	ldr	r2, [r3, #12]
 80065ba:	4b14      	ldr	r3, [pc, #80]	; (800660c <HAL_RCC_ClockConfig+0x244>)
 80065bc:	699b      	ldr	r3, [r3, #24]
 80065be:	f003 030f 	and.w	r3, r3, #15
 80065c2:	429a      	cmp	r2, r3
 80065c4:	d208      	bcs.n	80065d8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80065c6:	4b11      	ldr	r3, [pc, #68]	; (800660c <HAL_RCC_ClockConfig+0x244>)
 80065c8:	699b      	ldr	r3, [r3, #24]
 80065ca:	f023 020f 	bic.w	r2, r3, #15
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	68db      	ldr	r3, [r3, #12]
 80065d2:	490e      	ldr	r1, [pc, #56]	; (800660c <HAL_RCC_ClockConfig+0x244>)
 80065d4:	4313      	orrs	r3, r2
 80065d6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80065d8:	4b0b      	ldr	r3, [pc, #44]	; (8006608 <HAL_RCC_ClockConfig+0x240>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f003 030f 	and.w	r3, r3, #15
 80065e0:	683a      	ldr	r2, [r7, #0]
 80065e2:	429a      	cmp	r2, r3
 80065e4:	d214      	bcs.n	8006610 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065e6:	4b08      	ldr	r3, [pc, #32]	; (8006608 <HAL_RCC_ClockConfig+0x240>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f023 020f 	bic.w	r2, r3, #15
 80065ee:	4906      	ldr	r1, [pc, #24]	; (8006608 <HAL_RCC_ClockConfig+0x240>)
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	4313      	orrs	r3, r2
 80065f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80065f6:	4b04      	ldr	r3, [pc, #16]	; (8006608 <HAL_RCC_ClockConfig+0x240>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f003 030f 	and.w	r3, r3, #15
 80065fe:	683a      	ldr	r2, [r7, #0]
 8006600:	429a      	cmp	r2, r3
 8006602:	d005      	beq.n	8006610 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006604:	2301      	movs	r3, #1
 8006606:	e086      	b.n	8006716 <HAL_RCC_ClockConfig+0x34e>
 8006608:	52002000 	.word	0x52002000
 800660c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f003 0304 	and.w	r3, r3, #4
 8006618:	2b00      	cmp	r3, #0
 800661a:	d010      	beq.n	800663e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	691a      	ldr	r2, [r3, #16]
 8006620:	4b3f      	ldr	r3, [pc, #252]	; (8006720 <HAL_RCC_ClockConfig+0x358>)
 8006622:	699b      	ldr	r3, [r3, #24]
 8006624:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006628:	429a      	cmp	r2, r3
 800662a:	d208      	bcs.n	800663e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800662c:	4b3c      	ldr	r3, [pc, #240]	; (8006720 <HAL_RCC_ClockConfig+0x358>)
 800662e:	699b      	ldr	r3, [r3, #24]
 8006630:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	691b      	ldr	r3, [r3, #16]
 8006638:	4939      	ldr	r1, [pc, #228]	; (8006720 <HAL_RCC_ClockConfig+0x358>)
 800663a:	4313      	orrs	r3, r2
 800663c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f003 0308 	and.w	r3, r3, #8
 8006646:	2b00      	cmp	r3, #0
 8006648:	d010      	beq.n	800666c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	695a      	ldr	r2, [r3, #20]
 800664e:	4b34      	ldr	r3, [pc, #208]	; (8006720 <HAL_RCC_ClockConfig+0x358>)
 8006650:	69db      	ldr	r3, [r3, #28]
 8006652:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006656:	429a      	cmp	r2, r3
 8006658:	d208      	bcs.n	800666c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800665a:	4b31      	ldr	r3, [pc, #196]	; (8006720 <HAL_RCC_ClockConfig+0x358>)
 800665c:	69db      	ldr	r3, [r3, #28]
 800665e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	695b      	ldr	r3, [r3, #20]
 8006666:	492e      	ldr	r1, [pc, #184]	; (8006720 <HAL_RCC_ClockConfig+0x358>)
 8006668:	4313      	orrs	r3, r2
 800666a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f003 0310 	and.w	r3, r3, #16
 8006674:	2b00      	cmp	r3, #0
 8006676:	d010      	beq.n	800669a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	699a      	ldr	r2, [r3, #24]
 800667c:	4b28      	ldr	r3, [pc, #160]	; (8006720 <HAL_RCC_ClockConfig+0x358>)
 800667e:	69db      	ldr	r3, [r3, #28]
 8006680:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006684:	429a      	cmp	r2, r3
 8006686:	d208      	bcs.n	800669a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006688:	4b25      	ldr	r3, [pc, #148]	; (8006720 <HAL_RCC_ClockConfig+0x358>)
 800668a:	69db      	ldr	r3, [r3, #28]
 800668c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	699b      	ldr	r3, [r3, #24]
 8006694:	4922      	ldr	r1, [pc, #136]	; (8006720 <HAL_RCC_ClockConfig+0x358>)
 8006696:	4313      	orrs	r3, r2
 8006698:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f003 0320 	and.w	r3, r3, #32
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d010      	beq.n	80066c8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	69da      	ldr	r2, [r3, #28]
 80066aa:	4b1d      	ldr	r3, [pc, #116]	; (8006720 <HAL_RCC_ClockConfig+0x358>)
 80066ac:	6a1b      	ldr	r3, [r3, #32]
 80066ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d208      	bcs.n	80066c8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80066b6:	4b1a      	ldr	r3, [pc, #104]	; (8006720 <HAL_RCC_ClockConfig+0x358>)
 80066b8:	6a1b      	ldr	r3, [r3, #32]
 80066ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	69db      	ldr	r3, [r3, #28]
 80066c2:	4917      	ldr	r1, [pc, #92]	; (8006720 <HAL_RCC_ClockConfig+0x358>)
 80066c4:	4313      	orrs	r3, r2
 80066c6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80066c8:	f000 f834 	bl	8006734 <HAL_RCC_GetSysClockFreq>
 80066cc:	4602      	mov	r2, r0
 80066ce:	4b14      	ldr	r3, [pc, #80]	; (8006720 <HAL_RCC_ClockConfig+0x358>)
 80066d0:	699b      	ldr	r3, [r3, #24]
 80066d2:	0a1b      	lsrs	r3, r3, #8
 80066d4:	f003 030f 	and.w	r3, r3, #15
 80066d8:	4912      	ldr	r1, [pc, #72]	; (8006724 <HAL_RCC_ClockConfig+0x35c>)
 80066da:	5ccb      	ldrb	r3, [r1, r3]
 80066dc:	f003 031f 	and.w	r3, r3, #31
 80066e0:	fa22 f303 	lsr.w	r3, r2, r3
 80066e4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80066e6:	4b0e      	ldr	r3, [pc, #56]	; (8006720 <HAL_RCC_ClockConfig+0x358>)
 80066e8:	699b      	ldr	r3, [r3, #24]
 80066ea:	f003 030f 	and.w	r3, r3, #15
 80066ee:	4a0d      	ldr	r2, [pc, #52]	; (8006724 <HAL_RCC_ClockConfig+0x35c>)
 80066f0:	5cd3      	ldrb	r3, [r2, r3]
 80066f2:	f003 031f 	and.w	r3, r3, #31
 80066f6:	693a      	ldr	r2, [r7, #16]
 80066f8:	fa22 f303 	lsr.w	r3, r2, r3
 80066fc:	4a0a      	ldr	r2, [pc, #40]	; (8006728 <HAL_RCC_ClockConfig+0x360>)
 80066fe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006700:	4a0a      	ldr	r2, [pc, #40]	; (800672c <HAL_RCC_ClockConfig+0x364>)
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006706:	4b0a      	ldr	r3, [pc, #40]	; (8006730 <HAL_RCC_ClockConfig+0x368>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4618      	mov	r0, r3
 800670c:	f7fb faf2 	bl	8001cf4 <HAL_InitTick>
 8006710:	4603      	mov	r3, r0
 8006712:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006714:	7bfb      	ldrb	r3, [r7, #15]
}
 8006716:	4618      	mov	r0, r3
 8006718:	3718      	adds	r7, #24
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}
 800671e:	bf00      	nop
 8006720:	58024400 	.word	0x58024400
 8006724:	0800c570 	.word	0x0800c570
 8006728:	24000414 	.word	0x24000414
 800672c:	24000410 	.word	0x24000410
 8006730:	24000408 	.word	0x24000408

08006734 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006734:	b480      	push	{r7}
 8006736:	b089      	sub	sp, #36	; 0x24
 8006738:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800673a:	4bb3      	ldr	r3, [pc, #716]	; (8006a08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800673c:	691b      	ldr	r3, [r3, #16]
 800673e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006742:	2b18      	cmp	r3, #24
 8006744:	f200 8155 	bhi.w	80069f2 <HAL_RCC_GetSysClockFreq+0x2be>
 8006748:	a201      	add	r2, pc, #4	; (adr r2, 8006750 <HAL_RCC_GetSysClockFreq+0x1c>)
 800674a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800674e:	bf00      	nop
 8006750:	080067b5 	.word	0x080067b5
 8006754:	080069f3 	.word	0x080069f3
 8006758:	080069f3 	.word	0x080069f3
 800675c:	080069f3 	.word	0x080069f3
 8006760:	080069f3 	.word	0x080069f3
 8006764:	080069f3 	.word	0x080069f3
 8006768:	080069f3 	.word	0x080069f3
 800676c:	080069f3 	.word	0x080069f3
 8006770:	080067db 	.word	0x080067db
 8006774:	080069f3 	.word	0x080069f3
 8006778:	080069f3 	.word	0x080069f3
 800677c:	080069f3 	.word	0x080069f3
 8006780:	080069f3 	.word	0x080069f3
 8006784:	080069f3 	.word	0x080069f3
 8006788:	080069f3 	.word	0x080069f3
 800678c:	080069f3 	.word	0x080069f3
 8006790:	080067e1 	.word	0x080067e1
 8006794:	080069f3 	.word	0x080069f3
 8006798:	080069f3 	.word	0x080069f3
 800679c:	080069f3 	.word	0x080069f3
 80067a0:	080069f3 	.word	0x080069f3
 80067a4:	080069f3 	.word	0x080069f3
 80067a8:	080069f3 	.word	0x080069f3
 80067ac:	080069f3 	.word	0x080069f3
 80067b0:	080067e7 	.word	0x080067e7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80067b4:	4b94      	ldr	r3, [pc, #592]	; (8006a08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f003 0320 	and.w	r3, r3, #32
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d009      	beq.n	80067d4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80067c0:	4b91      	ldr	r3, [pc, #580]	; (8006a08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	08db      	lsrs	r3, r3, #3
 80067c6:	f003 0303 	and.w	r3, r3, #3
 80067ca:	4a90      	ldr	r2, [pc, #576]	; (8006a0c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80067cc:	fa22 f303 	lsr.w	r3, r2, r3
 80067d0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80067d2:	e111      	b.n	80069f8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80067d4:	4b8d      	ldr	r3, [pc, #564]	; (8006a0c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80067d6:	61bb      	str	r3, [r7, #24]
    break;
 80067d8:	e10e      	b.n	80069f8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80067da:	4b8d      	ldr	r3, [pc, #564]	; (8006a10 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80067dc:	61bb      	str	r3, [r7, #24]
    break;
 80067de:	e10b      	b.n	80069f8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80067e0:	4b8c      	ldr	r3, [pc, #560]	; (8006a14 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80067e2:	61bb      	str	r3, [r7, #24]
    break;
 80067e4:	e108      	b.n	80069f8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80067e6:	4b88      	ldr	r3, [pc, #544]	; (8006a08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ea:	f003 0303 	and.w	r3, r3, #3
 80067ee:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80067f0:	4b85      	ldr	r3, [pc, #532]	; (8006a08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067f4:	091b      	lsrs	r3, r3, #4
 80067f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80067fa:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80067fc:	4b82      	ldr	r3, [pc, #520]	; (8006a08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006800:	f003 0301 	and.w	r3, r3, #1
 8006804:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006806:	4b80      	ldr	r3, [pc, #512]	; (8006a08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800680a:	08db      	lsrs	r3, r3, #3
 800680c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006810:	68fa      	ldr	r2, [r7, #12]
 8006812:	fb02 f303 	mul.w	r3, r2, r3
 8006816:	ee07 3a90 	vmov	s15, r3
 800681a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800681e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	2b00      	cmp	r3, #0
 8006826:	f000 80e1 	beq.w	80069ec <HAL_RCC_GetSysClockFreq+0x2b8>
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	2b02      	cmp	r3, #2
 800682e:	f000 8083 	beq.w	8006938 <HAL_RCC_GetSysClockFreq+0x204>
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	2b02      	cmp	r3, #2
 8006836:	f200 80a1 	bhi.w	800697c <HAL_RCC_GetSysClockFreq+0x248>
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d003      	beq.n	8006848 <HAL_RCC_GetSysClockFreq+0x114>
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	2b01      	cmp	r3, #1
 8006844:	d056      	beq.n	80068f4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006846:	e099      	b.n	800697c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006848:	4b6f      	ldr	r3, [pc, #444]	; (8006a08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f003 0320 	and.w	r3, r3, #32
 8006850:	2b00      	cmp	r3, #0
 8006852:	d02d      	beq.n	80068b0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006854:	4b6c      	ldr	r3, [pc, #432]	; (8006a08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	08db      	lsrs	r3, r3, #3
 800685a:	f003 0303 	and.w	r3, r3, #3
 800685e:	4a6b      	ldr	r2, [pc, #428]	; (8006a0c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006860:	fa22 f303 	lsr.w	r3, r2, r3
 8006864:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	ee07 3a90 	vmov	s15, r3
 800686c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	ee07 3a90 	vmov	s15, r3
 8006876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800687a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800687e:	4b62      	ldr	r3, [pc, #392]	; (8006a08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006882:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006886:	ee07 3a90 	vmov	s15, r3
 800688a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800688e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006892:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006a18 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006896:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800689a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800689e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068aa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80068ae:	e087      	b.n	80069c0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	ee07 3a90 	vmov	s15, r3
 80068b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068ba:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006a1c <HAL_RCC_GetSysClockFreq+0x2e8>
 80068be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068c2:	4b51      	ldr	r3, [pc, #324]	; (8006a08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068ca:	ee07 3a90 	vmov	s15, r3
 80068ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80068d6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006a18 <HAL_RCC_GetSysClockFreq+0x2e4>
 80068da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80068f2:	e065      	b.n	80069c0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	ee07 3a90 	vmov	s15, r3
 80068fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068fe:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006a20 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006902:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006906:	4b40      	ldr	r3, [pc, #256]	; (8006a08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800690a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800690e:	ee07 3a90 	vmov	s15, r3
 8006912:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006916:	ed97 6a02 	vldr	s12, [r7, #8]
 800691a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006a18 <HAL_RCC_GetSysClockFreq+0x2e4>
 800691e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006922:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006926:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800692a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800692e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006932:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006936:	e043      	b.n	80069c0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	ee07 3a90 	vmov	s15, r3
 800693e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006942:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006a24 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006946:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800694a:	4b2f      	ldr	r3, [pc, #188]	; (8006a08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800694c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800694e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006952:	ee07 3a90 	vmov	s15, r3
 8006956:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800695a:	ed97 6a02 	vldr	s12, [r7, #8]
 800695e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006a18 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006962:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006966:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800696a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800696e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006972:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006976:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800697a:	e021      	b.n	80069c0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	ee07 3a90 	vmov	s15, r3
 8006982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006986:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006a20 <HAL_RCC_GetSysClockFreq+0x2ec>
 800698a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800698e:	4b1e      	ldr	r3, [pc, #120]	; (8006a08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006992:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006996:	ee07 3a90 	vmov	s15, r3
 800699a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800699e:	ed97 6a02 	vldr	s12, [r7, #8]
 80069a2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006a18 <HAL_RCC_GetSysClockFreq+0x2e4>
 80069a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80069be:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80069c0:	4b11      	ldr	r3, [pc, #68]	; (8006a08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069c4:	0a5b      	lsrs	r3, r3, #9
 80069c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069ca:	3301      	adds	r3, #1
 80069cc:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	ee07 3a90 	vmov	s15, r3
 80069d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80069d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80069dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069e4:	ee17 3a90 	vmov	r3, s15
 80069e8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80069ea:	e005      	b.n	80069f8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80069ec:	2300      	movs	r3, #0
 80069ee:	61bb      	str	r3, [r7, #24]
    break;
 80069f0:	e002      	b.n	80069f8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80069f2:	4b07      	ldr	r3, [pc, #28]	; (8006a10 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80069f4:	61bb      	str	r3, [r7, #24]
    break;
 80069f6:	bf00      	nop
  }

  return sysclockfreq;
 80069f8:	69bb      	ldr	r3, [r7, #24]
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3724      	adds	r7, #36	; 0x24
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr
 8006a06:	bf00      	nop
 8006a08:	58024400 	.word	0x58024400
 8006a0c:	03d09000 	.word	0x03d09000
 8006a10:	003d0900 	.word	0x003d0900
 8006a14:	017d7840 	.word	0x017d7840
 8006a18:	46000000 	.word	0x46000000
 8006a1c:	4c742400 	.word	0x4c742400
 8006a20:	4a742400 	.word	0x4a742400
 8006a24:	4bbebc20 	.word	0x4bbebc20

08006a28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b082      	sub	sp, #8
 8006a2c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006a2e:	f7ff fe81 	bl	8006734 <HAL_RCC_GetSysClockFreq>
 8006a32:	4602      	mov	r2, r0
 8006a34:	4b10      	ldr	r3, [pc, #64]	; (8006a78 <HAL_RCC_GetHCLKFreq+0x50>)
 8006a36:	699b      	ldr	r3, [r3, #24]
 8006a38:	0a1b      	lsrs	r3, r3, #8
 8006a3a:	f003 030f 	and.w	r3, r3, #15
 8006a3e:	490f      	ldr	r1, [pc, #60]	; (8006a7c <HAL_RCC_GetHCLKFreq+0x54>)
 8006a40:	5ccb      	ldrb	r3, [r1, r3]
 8006a42:	f003 031f 	and.w	r3, r3, #31
 8006a46:	fa22 f303 	lsr.w	r3, r2, r3
 8006a4a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006a4c:	4b0a      	ldr	r3, [pc, #40]	; (8006a78 <HAL_RCC_GetHCLKFreq+0x50>)
 8006a4e:	699b      	ldr	r3, [r3, #24]
 8006a50:	f003 030f 	and.w	r3, r3, #15
 8006a54:	4a09      	ldr	r2, [pc, #36]	; (8006a7c <HAL_RCC_GetHCLKFreq+0x54>)
 8006a56:	5cd3      	ldrb	r3, [r2, r3]
 8006a58:	f003 031f 	and.w	r3, r3, #31
 8006a5c:	687a      	ldr	r2, [r7, #4]
 8006a5e:	fa22 f303 	lsr.w	r3, r2, r3
 8006a62:	4a07      	ldr	r2, [pc, #28]	; (8006a80 <HAL_RCC_GetHCLKFreq+0x58>)
 8006a64:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006a66:	4a07      	ldr	r2, [pc, #28]	; (8006a84 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006a6c:	4b04      	ldr	r3, [pc, #16]	; (8006a80 <HAL_RCC_GetHCLKFreq+0x58>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3708      	adds	r7, #8
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}
 8006a78:	58024400 	.word	0x58024400
 8006a7c:	0800c570 	.word	0x0800c570
 8006a80:	24000414 	.word	0x24000414
 8006a84:	24000410 	.word	0x24000410

08006a88 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b086      	sub	sp, #24
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006a90:	2300      	movs	r3, #0
 8006a92:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006a94:	2300      	movs	r3, #0
 8006a96:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d03f      	beq.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006aa8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006aac:	d02a      	beq.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006aae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006ab2:	d824      	bhi.n	8006afe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006ab4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ab8:	d018      	beq.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006aba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006abe:	d81e      	bhi.n	8006afe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d003      	beq.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006ac4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ac8:	d007      	beq.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006aca:	e018      	b.n	8006afe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006acc:	4bab      	ldr	r3, [pc, #684]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad0:	4aaa      	ldr	r2, [pc, #680]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006ad2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ad6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006ad8:	e015      	b.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	3304      	adds	r3, #4
 8006ade:	2102      	movs	r1, #2
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	f002 f84d 	bl	8008b80 <RCCEx_PLL2_Config>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006aea:	e00c      	b.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	3324      	adds	r3, #36	; 0x24
 8006af0:	2102      	movs	r1, #2
 8006af2:	4618      	mov	r0, r3
 8006af4:	f002 f8f6 	bl	8008ce4 <RCCEx_PLL3_Config>
 8006af8:	4603      	mov	r3, r0
 8006afa:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006afc:	e003      	b.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006afe:	2301      	movs	r3, #1
 8006b00:	75fb      	strb	r3, [r7, #23]
      break;
 8006b02:	e000      	b.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006b04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b06:	7dfb      	ldrb	r3, [r7, #23]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d109      	bne.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006b0c:	4b9b      	ldr	r3, [pc, #620]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006b0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b10:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b18:	4998      	ldr	r1, [pc, #608]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	650b      	str	r3, [r1, #80]	; 0x50
 8006b1e:	e001      	b.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b20:	7dfb      	ldrb	r3, [r7, #23]
 8006b22:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d03d      	beq.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b34:	2b04      	cmp	r3, #4
 8006b36:	d826      	bhi.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006b38:	a201      	add	r2, pc, #4	; (adr r2, 8006b40 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8006b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b3e:	bf00      	nop
 8006b40:	08006b55 	.word	0x08006b55
 8006b44:	08006b63 	.word	0x08006b63
 8006b48:	08006b75 	.word	0x08006b75
 8006b4c:	08006b8d 	.word	0x08006b8d
 8006b50:	08006b8d 	.word	0x08006b8d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b54:	4b89      	ldr	r3, [pc, #548]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b58:	4a88      	ldr	r2, [pc, #544]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006b5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b5e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006b60:	e015      	b.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	3304      	adds	r3, #4
 8006b66:	2100      	movs	r1, #0
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f002 f809 	bl	8008b80 <RCCEx_PLL2_Config>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006b72:	e00c      	b.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	3324      	adds	r3, #36	; 0x24
 8006b78:	2100      	movs	r1, #0
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f002 f8b2 	bl	8008ce4 <RCCEx_PLL3_Config>
 8006b80:	4603      	mov	r3, r0
 8006b82:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006b84:	e003      	b.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b86:	2301      	movs	r3, #1
 8006b88:	75fb      	strb	r3, [r7, #23]
      break;
 8006b8a:	e000      	b.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006b8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b8e:	7dfb      	ldrb	r3, [r7, #23]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d109      	bne.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006b94:	4b79      	ldr	r3, [pc, #484]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006b96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b98:	f023 0207 	bic.w	r2, r3, #7
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ba0:	4976      	ldr	r1, [pc, #472]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	650b      	str	r3, [r1, #80]	; 0x50
 8006ba6:	e001      	b.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ba8:	7dfb      	ldrb	r3, [r7, #23]
 8006baa:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d051      	beq.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006bbe:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8006bc2:	d036      	beq.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006bc4:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8006bc8:	d830      	bhi.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8006bca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006bce:	d032      	beq.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8006bd0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006bd4:	d82a      	bhi.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8006bd6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006bda:	d02e      	beq.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8006bdc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006be0:	d824      	bhi.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8006be2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006be6:	d018      	beq.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8006be8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006bec:	d81e      	bhi.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d003      	beq.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x172>
 8006bf2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006bf6:	d007      	beq.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8006bf8:	e018      	b.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bfa:	4b60      	ldr	r3, [pc, #384]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bfe:	4a5f      	ldr	r2, [pc, #380]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006c00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c04:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006c06:	e019      	b.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	3304      	adds	r3, #4
 8006c0c:	2100      	movs	r1, #0
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f001 ffb6 	bl	8008b80 <RCCEx_PLL2_Config>
 8006c14:	4603      	mov	r3, r0
 8006c16:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006c18:	e010      	b.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	3324      	adds	r3, #36	; 0x24
 8006c1e:	2100      	movs	r1, #0
 8006c20:	4618      	mov	r0, r3
 8006c22:	f002 f85f 	bl	8008ce4 <RCCEx_PLL3_Config>
 8006c26:	4603      	mov	r3, r0
 8006c28:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006c2a:	e007      	b.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	75fb      	strb	r3, [r7, #23]
      break;
 8006c30:	e004      	b.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8006c32:	bf00      	nop
 8006c34:	e002      	b.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8006c36:	bf00      	nop
 8006c38:	e000      	b.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8006c3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c3c:	7dfb      	ldrb	r3, [r7, #23]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d10a      	bne.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006c42:	4b4e      	ldr	r3, [pc, #312]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c46:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006c50:	494a      	ldr	r1, [pc, #296]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006c52:	4313      	orrs	r3, r2
 8006c54:	658b      	str	r3, [r1, #88]	; 0x58
 8006c56:	e001      	b.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c58:	7dfb      	ldrb	r3, [r7, #23]
 8006c5a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d051      	beq.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006c6e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006c72:	d036      	beq.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8006c74:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006c78:	d830      	bhi.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0x254>
 8006c7a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006c7e:	d032      	beq.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8006c80:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006c84:	d82a      	bhi.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0x254>
 8006c86:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006c8a:	d02e      	beq.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0x262>
 8006c8c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006c90:	d824      	bhi.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0x254>
 8006c92:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c96:	d018      	beq.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x242>
 8006c98:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c9c:	d81e      	bhi.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0x254>
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d003      	beq.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x222>
 8006ca2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006ca6:	d007      	beq.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8006ca8:	e018      	b.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006caa:	4b34      	ldr	r3, [pc, #208]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cae:	4a33      	ldr	r2, [pc, #204]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006cb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cb4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006cb6:	e019      	b.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	3304      	adds	r3, #4
 8006cbc:	2100      	movs	r1, #0
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f001 ff5e 	bl	8008b80 <RCCEx_PLL2_Config>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006cc8:	e010      	b.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	3324      	adds	r3, #36	; 0x24
 8006cce:	2100      	movs	r1, #0
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f002 f807 	bl	8008ce4 <RCCEx_PLL3_Config>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006cda:	e007      	b.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006cdc:	2301      	movs	r3, #1
 8006cde:	75fb      	strb	r3, [r7, #23]
      break;
 8006ce0:	e004      	b.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8006ce2:	bf00      	nop
 8006ce4:	e002      	b.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8006ce6:	bf00      	nop
 8006ce8:	e000      	b.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8006cea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006cec:	7dfb      	ldrb	r3, [r7, #23]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d10a      	bne.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006cf2:	4b22      	ldr	r3, [pc, #136]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cf6:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006d00:	491e      	ldr	r1, [pc, #120]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006d02:	4313      	orrs	r3, r2
 8006d04:	658b      	str	r3, [r1, #88]	; 0x58
 8006d06:	e001      	b.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d08:	7dfb      	ldrb	r3, [r7, #23]
 8006d0a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d035      	beq.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d1c:	2b30      	cmp	r3, #48	; 0x30
 8006d1e:	d01c      	beq.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006d20:	2b30      	cmp	r3, #48	; 0x30
 8006d22:	d817      	bhi.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8006d24:	2b20      	cmp	r3, #32
 8006d26:	d00c      	beq.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8006d28:	2b20      	cmp	r3, #32
 8006d2a:	d813      	bhi.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d016      	beq.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8006d30:	2b10      	cmp	r3, #16
 8006d32:	d10f      	bne.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d34:	4b11      	ldr	r3, [pc, #68]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d38:	4a10      	ldr	r2, [pc, #64]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006d3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d3e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8006d40:	e00e      	b.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	3304      	adds	r3, #4
 8006d46:	2102      	movs	r1, #2
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f001 ff19 	bl	8008b80 <RCCEx_PLL2_Config>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8006d52:	e005      	b.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006d54:	2301      	movs	r3, #1
 8006d56:	75fb      	strb	r3, [r7, #23]
      break;
 8006d58:	e002      	b.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8006d5a:	bf00      	nop
 8006d5c:	e000      	b.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8006d5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d60:	7dfb      	ldrb	r3, [r7, #23]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d10c      	bne.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006d66:	4b05      	ldr	r3, [pc, #20]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d6a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d72:	4902      	ldr	r1, [pc, #8]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006d74:	4313      	orrs	r3, r2
 8006d76:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006d78:	e004      	b.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8006d7a:	bf00      	nop
 8006d7c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d80:	7dfb      	ldrb	r3, [r7, #23]
 8006d82:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d047      	beq.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d98:	d030      	beq.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x374>
 8006d9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d9e:	d82a      	bhi.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8006da0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006da4:	d02c      	beq.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8006da6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006daa:	d824      	bhi.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8006dac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006db0:	d018      	beq.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006db2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006db6:	d81e      	bhi.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d003      	beq.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006dbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dc0:	d007      	beq.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006dc2:	e018      	b.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006dc4:	4bac      	ldr	r3, [pc, #688]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc8:	4aab      	ldr	r2, [pc, #684]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006dca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006dce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006dd0:	e017      	b.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	3304      	adds	r3, #4
 8006dd6:	2100      	movs	r1, #0
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f001 fed1 	bl	8008b80 <RCCEx_PLL2_Config>
 8006dde:	4603      	mov	r3, r0
 8006de0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006de2:	e00e      	b.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	3324      	adds	r3, #36	; 0x24
 8006de8:	2100      	movs	r1, #0
 8006dea:	4618      	mov	r0, r3
 8006dec:	f001 ff7a 	bl	8008ce4 <RCCEx_PLL3_Config>
 8006df0:	4603      	mov	r3, r0
 8006df2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006df4:	e005      	b.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006df6:	2301      	movs	r3, #1
 8006df8:	75fb      	strb	r3, [r7, #23]
      break;
 8006dfa:	e002      	b.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8006dfc:	bf00      	nop
 8006dfe:	e000      	b.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8006e00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e02:	7dfb      	ldrb	r3, [r7, #23]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d109      	bne.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006e08:	4b9b      	ldr	r3, [pc, #620]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006e0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e0c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e14:	4998      	ldr	r1, [pc, #608]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006e16:	4313      	orrs	r3, r2
 8006e18:	650b      	str	r3, [r1, #80]	; 0x50
 8006e1a:	e001      	b.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e1c:	7dfb      	ldrb	r3, [r7, #23]
 8006e1e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d049      	beq.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006e34:	d02e      	beq.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8006e36:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006e3a:	d828      	bhi.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8006e3c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006e40:	d02a      	beq.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8006e42:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006e46:	d822      	bhi.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8006e48:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006e4c:	d026      	beq.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0x414>
 8006e4e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006e52:	d81c      	bhi.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8006e54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e58:	d010      	beq.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8006e5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e5e:	d816      	bhi.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d01d      	beq.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8006e64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e68:	d111      	bne.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	3304      	adds	r3, #4
 8006e6e:	2101      	movs	r1, #1
 8006e70:	4618      	mov	r0, r3
 8006e72:	f001 fe85 	bl	8008b80 <RCCEx_PLL2_Config>
 8006e76:	4603      	mov	r3, r0
 8006e78:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006e7a:	e012      	b.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	3324      	adds	r3, #36	; 0x24
 8006e80:	2101      	movs	r1, #1
 8006e82:	4618      	mov	r0, r3
 8006e84:	f001 ff2e 	bl	8008ce4 <RCCEx_PLL3_Config>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006e8c:	e009      	b.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	75fb      	strb	r3, [r7, #23]
      break;
 8006e92:	e006      	b.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8006e94:	bf00      	nop
 8006e96:	e004      	b.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8006e98:	bf00      	nop
 8006e9a:	e002      	b.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8006e9c:	bf00      	nop
 8006e9e:	e000      	b.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8006ea0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ea2:	7dfb      	ldrb	r3, [r7, #23]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d109      	bne.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006ea8:	4b73      	ldr	r3, [pc, #460]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006eaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006eac:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006eb4:	4970      	ldr	r1, [pc, #448]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	650b      	str	r3, [r1, #80]	; 0x50
 8006eba:	e001      	b.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ebc:	7dfb      	ldrb	r3, [r7, #23]
 8006ebe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d04b      	beq.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006ed2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006ed6:	d02e      	beq.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8006ed8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006edc:	d828      	bhi.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006ede:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ee2:	d02a      	beq.n	8006f3a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8006ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ee8:	d822      	bhi.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006eea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006eee:	d026      	beq.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8006ef0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006ef4:	d81c      	bhi.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006ef6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006efa:	d010      	beq.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0x496>
 8006efc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f00:	d816      	bhi.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d01d      	beq.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8006f06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f0a:	d111      	bne.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	3304      	adds	r3, #4
 8006f10:	2101      	movs	r1, #1
 8006f12:	4618      	mov	r0, r3
 8006f14:	f001 fe34 	bl	8008b80 <RCCEx_PLL2_Config>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006f1c:	e012      	b.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	3324      	adds	r3, #36	; 0x24
 8006f22:	2101      	movs	r1, #1
 8006f24:	4618      	mov	r0, r3
 8006f26:	f001 fedd 	bl	8008ce4 <RCCEx_PLL3_Config>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006f2e:	e009      	b.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006f30:	2301      	movs	r3, #1
 8006f32:	75fb      	strb	r3, [r7, #23]
      break;
 8006f34:	e006      	b.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8006f36:	bf00      	nop
 8006f38:	e004      	b.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8006f3a:	bf00      	nop
 8006f3c:	e002      	b.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8006f3e:	bf00      	nop
 8006f40:	e000      	b.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8006f42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f44:	7dfb      	ldrb	r3, [r7, #23]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d10a      	bne.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006f4a:	4b4b      	ldr	r3, [pc, #300]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f4e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006f58:	4947      	ldr	r1, [pc, #284]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	658b      	str	r3, [r1, #88]	; 0x58
 8006f5e:	e001      	b.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f60:	7dfb      	ldrb	r3, [r7, #23]
 8006f62:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d02f      	beq.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f78:	d00e      	beq.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8006f7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f7e:	d814      	bhi.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0x522>
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d015      	beq.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8006f84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f88:	d10f      	bne.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f8a:	4b3b      	ldr	r3, [pc, #236]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f8e:	4a3a      	ldr	r2, [pc, #232]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006f90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f94:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006f96:	e00c      	b.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	3304      	adds	r3, #4
 8006f9c:	2101      	movs	r1, #1
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f001 fdee 	bl	8008b80 <RCCEx_PLL2_Config>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006fa8:	e003      	b.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006faa:	2301      	movs	r3, #1
 8006fac:	75fb      	strb	r3, [r7, #23]
      break;
 8006fae:	e000      	b.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8006fb0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006fb2:	7dfb      	ldrb	r3, [r7, #23]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d109      	bne.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006fb8:	4b2f      	ldr	r3, [pc, #188]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006fba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fbc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006fc4:	492c      	ldr	r1, [pc, #176]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	650b      	str	r3, [r1, #80]	; 0x50
 8006fca:	e001      	b.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fcc:	7dfb      	ldrb	r3, [r7, #23]
 8006fce:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d032      	beq.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fe0:	2b03      	cmp	r3, #3
 8006fe2:	d81b      	bhi.n	800701c <HAL_RCCEx_PeriphCLKConfig+0x594>
 8006fe4:	a201      	add	r2, pc, #4	; (adr r2, 8006fec <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8006fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fea:	bf00      	nop
 8006fec:	08007023 	.word	0x08007023
 8006ff0:	08006ffd 	.word	0x08006ffd
 8006ff4:	0800700b 	.word	0x0800700b
 8006ff8:	08007023 	.word	0x08007023
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ffc:	4b1e      	ldr	r3, [pc, #120]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007000:	4a1d      	ldr	r2, [pc, #116]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007002:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007006:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007008:	e00c      	b.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	3304      	adds	r3, #4
 800700e:	2102      	movs	r1, #2
 8007010:	4618      	mov	r0, r3
 8007012:	f001 fdb5 	bl	8008b80 <RCCEx_PLL2_Config>
 8007016:	4603      	mov	r3, r0
 8007018:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800701a:	e003      	b.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800701c:	2301      	movs	r3, #1
 800701e:	75fb      	strb	r3, [r7, #23]
      break;
 8007020:	e000      	b.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8007022:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007024:	7dfb      	ldrb	r3, [r7, #23]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d109      	bne.n	800703e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800702a:	4b13      	ldr	r3, [pc, #76]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800702c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800702e:	f023 0203 	bic.w	r2, r3, #3
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007036:	4910      	ldr	r1, [pc, #64]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007038:	4313      	orrs	r3, r2
 800703a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800703c:	e001      	b.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800703e:	7dfb      	ldrb	r3, [r7, #23]
 8007040:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800704a:	2b00      	cmp	r3, #0
 800704c:	f000 808a 	beq.w	8007164 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007050:	4b0a      	ldr	r3, [pc, #40]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a09      	ldr	r2, [pc, #36]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8007056:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800705a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800705c:	f7fa fe94 	bl	8001d88 <HAL_GetTick>
 8007060:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007062:	e00d      	b.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007064:	f7fa fe90 	bl	8001d88 <HAL_GetTick>
 8007068:	4602      	mov	r2, r0
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	1ad3      	subs	r3, r2, r3
 800706e:	2b64      	cmp	r3, #100	; 0x64
 8007070:	d906      	bls.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 8007072:	2303      	movs	r3, #3
 8007074:	75fb      	strb	r3, [r7, #23]
        break;
 8007076:	e009      	b.n	800708c <HAL_RCCEx_PeriphCLKConfig+0x604>
 8007078:	58024400 	.word	0x58024400
 800707c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007080:	4bb9      	ldr	r3, [pc, #740]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007088:	2b00      	cmp	r3, #0
 800708a:	d0eb      	beq.n	8007064 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 800708c:	7dfb      	ldrb	r3, [r7, #23]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d166      	bne.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007092:	4bb6      	ldr	r3, [pc, #728]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007094:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800709c:	4053      	eors	r3, r2
 800709e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d013      	beq.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80070a6:	4bb1      	ldr	r3, [pc, #708]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80070a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070ae:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80070b0:	4bae      	ldr	r3, [pc, #696]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80070b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070b4:	4aad      	ldr	r2, [pc, #692]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80070b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070ba:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80070bc:	4bab      	ldr	r3, [pc, #684]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80070be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070c0:	4aaa      	ldr	r2, [pc, #680]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80070c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070c6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80070c8:	4aa8      	ldr	r2, [pc, #672]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80070d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070d8:	d115      	bne.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070da:	f7fa fe55 	bl	8001d88 <HAL_GetTick>
 80070de:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80070e0:	e00b      	b.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070e2:	f7fa fe51 	bl	8001d88 <HAL_GetTick>
 80070e6:	4602      	mov	r2, r0
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	1ad3      	subs	r3, r2, r3
 80070ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d902      	bls.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 80070f4:	2303      	movs	r3, #3
 80070f6:	75fb      	strb	r3, [r7, #23]
            break;
 80070f8:	e005      	b.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80070fa:	4b9c      	ldr	r3, [pc, #624]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80070fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070fe:	f003 0302 	and.w	r3, r3, #2
 8007102:	2b00      	cmp	r3, #0
 8007104:	d0ed      	beq.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 8007106:	7dfb      	ldrb	r3, [r7, #23]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d126      	bne.n	800715a <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007112:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007116:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800711a:	d10d      	bne.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 800711c:	4b93      	ldr	r3, [pc, #588]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800711e:	691b      	ldr	r3, [r3, #16]
 8007120:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800712a:	0919      	lsrs	r1, r3, #4
 800712c:	4b90      	ldr	r3, [pc, #576]	; (8007370 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800712e:	400b      	ands	r3, r1
 8007130:	498e      	ldr	r1, [pc, #568]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007132:	4313      	orrs	r3, r2
 8007134:	610b      	str	r3, [r1, #16]
 8007136:	e005      	b.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 8007138:	4b8c      	ldr	r3, [pc, #560]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800713a:	691b      	ldr	r3, [r3, #16]
 800713c:	4a8b      	ldr	r2, [pc, #556]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800713e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007142:	6113      	str	r3, [r2, #16]
 8007144:	4b89      	ldr	r3, [pc, #548]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007146:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800714e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007152:	4986      	ldr	r1, [pc, #536]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007154:	4313      	orrs	r3, r2
 8007156:	670b      	str	r3, [r1, #112]	; 0x70
 8007158:	e004      	b.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800715a:	7dfb      	ldrb	r3, [r7, #23]
 800715c:	75bb      	strb	r3, [r7, #22]
 800715e:	e001      	b.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007160:	7dfb      	ldrb	r3, [r7, #23]
 8007162:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f003 0301 	and.w	r3, r3, #1
 800716c:	2b00      	cmp	r3, #0
 800716e:	d07e      	beq.n	800726e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007174:	2b28      	cmp	r3, #40	; 0x28
 8007176:	d867      	bhi.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8007178:	a201      	add	r2, pc, #4	; (adr r2, 8007180 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 800717a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800717e:	bf00      	nop
 8007180:	0800724f 	.word	0x0800724f
 8007184:	08007249 	.word	0x08007249
 8007188:	08007249 	.word	0x08007249
 800718c:	08007249 	.word	0x08007249
 8007190:	08007249 	.word	0x08007249
 8007194:	08007249 	.word	0x08007249
 8007198:	08007249 	.word	0x08007249
 800719c:	08007249 	.word	0x08007249
 80071a0:	08007225 	.word	0x08007225
 80071a4:	08007249 	.word	0x08007249
 80071a8:	08007249 	.word	0x08007249
 80071ac:	08007249 	.word	0x08007249
 80071b0:	08007249 	.word	0x08007249
 80071b4:	08007249 	.word	0x08007249
 80071b8:	08007249 	.word	0x08007249
 80071bc:	08007249 	.word	0x08007249
 80071c0:	08007237 	.word	0x08007237
 80071c4:	08007249 	.word	0x08007249
 80071c8:	08007249 	.word	0x08007249
 80071cc:	08007249 	.word	0x08007249
 80071d0:	08007249 	.word	0x08007249
 80071d4:	08007249 	.word	0x08007249
 80071d8:	08007249 	.word	0x08007249
 80071dc:	08007249 	.word	0x08007249
 80071e0:	0800724f 	.word	0x0800724f
 80071e4:	08007249 	.word	0x08007249
 80071e8:	08007249 	.word	0x08007249
 80071ec:	08007249 	.word	0x08007249
 80071f0:	08007249 	.word	0x08007249
 80071f4:	08007249 	.word	0x08007249
 80071f8:	08007249 	.word	0x08007249
 80071fc:	08007249 	.word	0x08007249
 8007200:	0800724f 	.word	0x0800724f
 8007204:	08007249 	.word	0x08007249
 8007208:	08007249 	.word	0x08007249
 800720c:	08007249 	.word	0x08007249
 8007210:	08007249 	.word	0x08007249
 8007214:	08007249 	.word	0x08007249
 8007218:	08007249 	.word	0x08007249
 800721c:	08007249 	.word	0x08007249
 8007220:	0800724f 	.word	0x0800724f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	3304      	adds	r3, #4
 8007228:	2101      	movs	r1, #1
 800722a:	4618      	mov	r0, r3
 800722c:	f001 fca8 	bl	8008b80 <RCCEx_PLL2_Config>
 8007230:	4603      	mov	r3, r0
 8007232:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007234:	e00c      	b.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	3324      	adds	r3, #36	; 0x24
 800723a:	2101      	movs	r1, #1
 800723c:	4618      	mov	r0, r3
 800723e:	f001 fd51 	bl	8008ce4 <RCCEx_PLL3_Config>
 8007242:	4603      	mov	r3, r0
 8007244:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007246:	e003      	b.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007248:	2301      	movs	r3, #1
 800724a:	75fb      	strb	r3, [r7, #23]
      break;
 800724c:	e000      	b.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 800724e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007250:	7dfb      	ldrb	r3, [r7, #23]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d109      	bne.n	800726a <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007256:	4b45      	ldr	r3, [pc, #276]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800725a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007262:	4942      	ldr	r1, [pc, #264]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007264:	4313      	orrs	r3, r2
 8007266:	654b      	str	r3, [r1, #84]	; 0x54
 8007268:	e001      	b.n	800726e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800726a:	7dfb      	ldrb	r3, [r7, #23]
 800726c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f003 0302 	and.w	r3, r3, #2
 8007276:	2b00      	cmp	r3, #0
 8007278:	d037      	beq.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800727e:	2b05      	cmp	r3, #5
 8007280:	d820      	bhi.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8007282:	a201      	add	r2, pc, #4	; (adr r2, 8007288 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8007284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007288:	080072cb 	.word	0x080072cb
 800728c:	080072a1 	.word	0x080072a1
 8007290:	080072b3 	.word	0x080072b3
 8007294:	080072cb 	.word	0x080072cb
 8007298:	080072cb 	.word	0x080072cb
 800729c:	080072cb 	.word	0x080072cb
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	3304      	adds	r3, #4
 80072a4:	2101      	movs	r1, #1
 80072a6:	4618      	mov	r0, r3
 80072a8:	f001 fc6a 	bl	8008b80 <RCCEx_PLL2_Config>
 80072ac:	4603      	mov	r3, r0
 80072ae:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80072b0:	e00c      	b.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	3324      	adds	r3, #36	; 0x24
 80072b6:	2101      	movs	r1, #1
 80072b8:	4618      	mov	r0, r3
 80072ba:	f001 fd13 	bl	8008ce4 <RCCEx_PLL3_Config>
 80072be:	4603      	mov	r3, r0
 80072c0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80072c2:	e003      	b.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80072c4:	2301      	movs	r3, #1
 80072c6:	75fb      	strb	r3, [r7, #23]
      break;
 80072c8:	e000      	b.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 80072ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072cc:	7dfb      	ldrb	r3, [r7, #23]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d109      	bne.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80072d2:	4b26      	ldr	r3, [pc, #152]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80072d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072d6:	f023 0207 	bic.w	r2, r3, #7
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072de:	4923      	ldr	r1, [pc, #140]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80072e0:	4313      	orrs	r3, r2
 80072e2:	654b      	str	r3, [r1, #84]	; 0x54
 80072e4:	e001      	b.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072e6:	7dfb      	ldrb	r3, [r7, #23]
 80072e8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f003 0304 	and.w	r3, r3, #4
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d040      	beq.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072fc:	2b05      	cmp	r3, #5
 80072fe:	d821      	bhi.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8007300:	a201      	add	r2, pc, #4	; (adr r2, 8007308 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8007302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007306:	bf00      	nop
 8007308:	0800734b 	.word	0x0800734b
 800730c:	08007321 	.word	0x08007321
 8007310:	08007333 	.word	0x08007333
 8007314:	0800734b 	.word	0x0800734b
 8007318:	0800734b 	.word	0x0800734b
 800731c:	0800734b 	.word	0x0800734b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	3304      	adds	r3, #4
 8007324:	2101      	movs	r1, #1
 8007326:	4618      	mov	r0, r3
 8007328:	f001 fc2a 	bl	8008b80 <RCCEx_PLL2_Config>
 800732c:	4603      	mov	r3, r0
 800732e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007330:	e00c      	b.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	3324      	adds	r3, #36	; 0x24
 8007336:	2101      	movs	r1, #1
 8007338:	4618      	mov	r0, r3
 800733a:	f001 fcd3 	bl	8008ce4 <RCCEx_PLL3_Config>
 800733e:	4603      	mov	r3, r0
 8007340:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007342:	e003      	b.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007344:	2301      	movs	r3, #1
 8007346:	75fb      	strb	r3, [r7, #23]
      break;
 8007348:	e000      	b.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 800734a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800734c:	7dfb      	ldrb	r3, [r7, #23]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d110      	bne.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007352:	4b06      	ldr	r3, [pc, #24]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007356:	f023 0207 	bic.w	r2, r3, #7
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007360:	4902      	ldr	r1, [pc, #8]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007362:	4313      	orrs	r3, r2
 8007364:	658b      	str	r3, [r1, #88]	; 0x58
 8007366:	e007      	b.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8007368:	58024800 	.word	0x58024800
 800736c:	58024400 	.word	0x58024400
 8007370:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007374:	7dfb      	ldrb	r3, [r7, #23]
 8007376:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f003 0320 	and.w	r3, r3, #32
 8007380:	2b00      	cmp	r3, #0
 8007382:	d04b      	beq.n	800741c <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800738a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800738e:	d02e      	beq.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0x966>
 8007390:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007394:	d828      	bhi.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8007396:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800739a:	d02a      	beq.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800739c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073a0:	d822      	bhi.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80073a2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80073a6:	d026      	beq.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80073a8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80073ac:	d81c      	bhi.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80073ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073b2:	d010      	beq.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 80073b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073b8:	d816      	bhi.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d01d      	beq.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0x972>
 80073be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80073c2:	d111      	bne.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	3304      	adds	r3, #4
 80073c8:	2100      	movs	r1, #0
 80073ca:	4618      	mov	r0, r3
 80073cc:	f001 fbd8 	bl	8008b80 <RCCEx_PLL2_Config>
 80073d0:	4603      	mov	r3, r0
 80073d2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80073d4:	e012      	b.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	3324      	adds	r3, #36	; 0x24
 80073da:	2102      	movs	r1, #2
 80073dc:	4618      	mov	r0, r3
 80073de:	f001 fc81 	bl	8008ce4 <RCCEx_PLL3_Config>
 80073e2:	4603      	mov	r3, r0
 80073e4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80073e6:	e009      	b.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80073e8:	2301      	movs	r3, #1
 80073ea:	75fb      	strb	r3, [r7, #23]
      break;
 80073ec:	e006      	b.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80073ee:	bf00      	nop
 80073f0:	e004      	b.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80073f2:	bf00      	nop
 80073f4:	e002      	b.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80073f6:	bf00      	nop
 80073f8:	e000      	b.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80073fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80073fc:	7dfb      	ldrb	r3, [r7, #23]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d10a      	bne.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007402:	4bb2      	ldr	r3, [pc, #712]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007406:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007410:	49ae      	ldr	r1, [pc, #696]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007412:	4313      	orrs	r3, r2
 8007414:	654b      	str	r3, [r1, #84]	; 0x54
 8007416:	e001      	b.n	800741c <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007418:	7dfb      	ldrb	r3, [r7, #23]
 800741a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007424:	2b00      	cmp	r3, #0
 8007426:	d04b      	beq.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800742e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007432:	d02e      	beq.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8007434:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007438:	d828      	bhi.n	800748c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800743a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800743e:	d02a      	beq.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8007440:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007444:	d822      	bhi.n	800748c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8007446:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800744a:	d026      	beq.n	800749a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800744c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007450:	d81c      	bhi.n	800748c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8007452:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007456:	d010      	beq.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8007458:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800745c:	d816      	bhi.n	800748c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800745e:	2b00      	cmp	r3, #0
 8007460:	d01d      	beq.n	800749e <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8007462:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007466:	d111      	bne.n	800748c <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	3304      	adds	r3, #4
 800746c:	2100      	movs	r1, #0
 800746e:	4618      	mov	r0, r3
 8007470:	f001 fb86 	bl	8008b80 <RCCEx_PLL2_Config>
 8007474:	4603      	mov	r3, r0
 8007476:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007478:	e012      	b.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	3324      	adds	r3, #36	; 0x24
 800747e:	2102      	movs	r1, #2
 8007480:	4618      	mov	r0, r3
 8007482:	f001 fc2f 	bl	8008ce4 <RCCEx_PLL3_Config>
 8007486:	4603      	mov	r3, r0
 8007488:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800748a:	e009      	b.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800748c:	2301      	movs	r3, #1
 800748e:	75fb      	strb	r3, [r7, #23]
      break;
 8007490:	e006      	b.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8007492:	bf00      	nop
 8007494:	e004      	b.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8007496:	bf00      	nop
 8007498:	e002      	b.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800749a:	bf00      	nop
 800749c:	e000      	b.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800749e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074a0:	7dfb      	ldrb	r3, [r7, #23]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d10a      	bne.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80074a6:	4b89      	ldr	r3, [pc, #548]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80074a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074aa:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80074b4:	4985      	ldr	r1, [pc, #532]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80074b6:	4313      	orrs	r3, r2
 80074b8:	658b      	str	r3, [r1, #88]	; 0x58
 80074ba:	e001      	b.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074bc:	7dfb      	ldrb	r3, [r7, #23]
 80074be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d04b      	beq.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80074d2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80074d6:	d02e      	beq.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80074d8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80074dc:	d828      	bhi.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80074de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074e2:	d02a      	beq.n	800753a <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80074e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074e8:	d822      	bhi.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80074ea:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80074ee:	d026      	beq.n	800753e <HAL_RCCEx_PeriphCLKConfig+0xab6>
 80074f0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80074f4:	d81c      	bhi.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80074f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80074fa:	d010      	beq.n	800751e <HAL_RCCEx_PeriphCLKConfig+0xa96>
 80074fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007500:	d816      	bhi.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8007502:	2b00      	cmp	r3, #0
 8007504:	d01d      	beq.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8007506:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800750a:	d111      	bne.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	3304      	adds	r3, #4
 8007510:	2100      	movs	r1, #0
 8007512:	4618      	mov	r0, r3
 8007514:	f001 fb34 	bl	8008b80 <RCCEx_PLL2_Config>
 8007518:	4603      	mov	r3, r0
 800751a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800751c:	e012      	b.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	3324      	adds	r3, #36	; 0x24
 8007522:	2102      	movs	r1, #2
 8007524:	4618      	mov	r0, r3
 8007526:	f001 fbdd 	bl	8008ce4 <RCCEx_PLL3_Config>
 800752a:	4603      	mov	r3, r0
 800752c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800752e:	e009      	b.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007530:	2301      	movs	r3, #1
 8007532:	75fb      	strb	r3, [r7, #23]
      break;
 8007534:	e006      	b.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8007536:	bf00      	nop
 8007538:	e004      	b.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800753a:	bf00      	nop
 800753c:	e002      	b.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800753e:	bf00      	nop
 8007540:	e000      	b.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8007542:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007544:	7dfb      	ldrb	r3, [r7, #23]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d10a      	bne.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800754a:	4b60      	ldr	r3, [pc, #384]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800754c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800754e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007558:	495c      	ldr	r1, [pc, #368]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800755a:	4313      	orrs	r3, r2
 800755c:	658b      	str	r3, [r1, #88]	; 0x58
 800755e:	e001      	b.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007560:	7dfb      	ldrb	r3, [r7, #23]
 8007562:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f003 0308 	and.w	r3, r3, #8
 800756c:	2b00      	cmp	r3, #0
 800756e:	d018      	beq.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007574:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007578:	d10a      	bne.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	3324      	adds	r3, #36	; 0x24
 800757e:	2102      	movs	r1, #2
 8007580:	4618      	mov	r0, r3
 8007582:	f001 fbaf 	bl	8008ce4 <RCCEx_PLL3_Config>
 8007586:	4603      	mov	r3, r0
 8007588:	2b00      	cmp	r3, #0
 800758a:	d001      	beq.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 800758c:	2301      	movs	r3, #1
 800758e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8007590:	4b4e      	ldr	r3, [pc, #312]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007594:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800759c:	494b      	ldr	r1, [pc, #300]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800759e:	4313      	orrs	r3, r2
 80075a0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f003 0310 	and.w	r3, r3, #16
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d01a      	beq.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075b8:	d10a      	bne.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	3324      	adds	r3, #36	; 0x24
 80075be:	2102      	movs	r1, #2
 80075c0:	4618      	mov	r0, r3
 80075c2:	f001 fb8f 	bl	8008ce4 <RCCEx_PLL3_Config>
 80075c6:	4603      	mov	r3, r0
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d001      	beq.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 80075cc:	2301      	movs	r3, #1
 80075ce:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80075d0:	4b3e      	ldr	r3, [pc, #248]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80075d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075de:	493b      	ldr	r1, [pc, #236]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80075e0:	4313      	orrs	r3, r2
 80075e2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d034      	beq.n	800765a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80075f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80075fa:	d01d      	beq.n	8007638 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80075fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007600:	d817      	bhi.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8007602:	2b00      	cmp	r3, #0
 8007604:	d003      	beq.n	800760e <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8007606:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800760a:	d009      	beq.n	8007620 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800760c:	e011      	b.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	3304      	adds	r3, #4
 8007612:	2100      	movs	r1, #0
 8007614:	4618      	mov	r0, r3
 8007616:	f001 fab3 	bl	8008b80 <RCCEx_PLL2_Config>
 800761a:	4603      	mov	r3, r0
 800761c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800761e:	e00c      	b.n	800763a <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	3324      	adds	r3, #36	; 0x24
 8007624:	2102      	movs	r1, #2
 8007626:	4618      	mov	r0, r3
 8007628:	f001 fb5c 	bl	8008ce4 <RCCEx_PLL3_Config>
 800762c:	4603      	mov	r3, r0
 800762e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007630:	e003      	b.n	800763a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007632:	2301      	movs	r3, #1
 8007634:	75fb      	strb	r3, [r7, #23]
      break;
 8007636:	e000      	b.n	800763a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8007638:	bf00      	nop
    }

    if(ret == HAL_OK)
 800763a:	7dfb      	ldrb	r3, [r7, #23]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d10a      	bne.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007640:	4b22      	ldr	r3, [pc, #136]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007644:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800764e:	491f      	ldr	r1, [pc, #124]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007650:	4313      	orrs	r3, r2
 8007652:	658b      	str	r3, [r1, #88]	; 0x58
 8007654:	e001      	b.n	800765a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007656:	7dfb      	ldrb	r3, [r7, #23]
 8007658:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007662:	2b00      	cmp	r3, #0
 8007664:	d036      	beq.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800766c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007670:	d01c      	beq.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8007672:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007676:	d816      	bhi.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007678:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800767c:	d003      	beq.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800767e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007682:	d007      	beq.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8007684:	e00f      	b.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007686:	4b11      	ldr	r3, [pc, #68]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800768a:	4a10      	ldr	r2, [pc, #64]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800768c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007690:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007692:	e00c      	b.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	3324      	adds	r3, #36	; 0x24
 8007698:	2101      	movs	r1, #1
 800769a:	4618      	mov	r0, r3
 800769c:	f001 fb22 	bl	8008ce4 <RCCEx_PLL3_Config>
 80076a0:	4603      	mov	r3, r0
 80076a2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80076a4:	e003      	b.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80076a6:	2301      	movs	r3, #1
 80076a8:	75fb      	strb	r3, [r7, #23]
      break;
 80076aa:	e000      	b.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 80076ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076ae:	7dfb      	ldrb	r3, [r7, #23]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d10d      	bne.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80076b4:	4b05      	ldr	r3, [pc, #20]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80076b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076c2:	4902      	ldr	r1, [pc, #8]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80076c4:	4313      	orrs	r3, r2
 80076c6:	654b      	str	r3, [r1, #84]	; 0x54
 80076c8:	e004      	b.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 80076ca:	bf00      	nop
 80076cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076d0:	7dfb      	ldrb	r3, [r7, #23]
 80076d2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d029      	beq.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d003      	beq.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80076e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076ec:	d007      	beq.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80076ee:	e00f      	b.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076f0:	4b61      	ldr	r3, [pc, #388]	; (8007878 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80076f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f4:	4a60      	ldr	r2, [pc, #384]	; (8007878 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80076f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80076fc:	e00b      	b.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	3304      	adds	r3, #4
 8007702:	2102      	movs	r1, #2
 8007704:	4618      	mov	r0, r3
 8007706:	f001 fa3b 	bl	8008b80 <RCCEx_PLL2_Config>
 800770a:	4603      	mov	r3, r0
 800770c:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800770e:	e002      	b.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 8007710:	2301      	movs	r3, #1
 8007712:	75fb      	strb	r3, [r7, #23]
      break;
 8007714:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007716:	7dfb      	ldrb	r3, [r7, #23]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d109      	bne.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800771c:	4b56      	ldr	r3, [pc, #344]	; (8007878 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800771e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007720:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007728:	4953      	ldr	r1, [pc, #332]	; (8007878 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800772a:	4313      	orrs	r3, r2
 800772c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800772e:	e001      	b.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007730:	7dfb      	ldrb	r3, [r7, #23]
 8007732:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800773c:	2b00      	cmp	r3, #0
 800773e:	d00a      	beq.n	8007756 <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	3324      	adds	r3, #36	; 0x24
 8007744:	2102      	movs	r1, #2
 8007746:	4618      	mov	r0, r3
 8007748:	f001 facc 	bl	8008ce4 <RCCEx_PLL3_Config>
 800774c:	4603      	mov	r3, r0
 800774e:	2b00      	cmp	r3, #0
 8007750:	d001      	beq.n	8007756 <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 8007752:	2301      	movs	r3, #1
 8007754:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800775e:	2b00      	cmp	r3, #0
 8007760:	d030      	beq.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007766:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800776a:	d017      	beq.n	800779c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800776c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007770:	d811      	bhi.n	8007796 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8007772:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007776:	d013      	beq.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8007778:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800777c:	d80b      	bhi.n	8007796 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800777e:	2b00      	cmp	r3, #0
 8007780:	d010      	beq.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8007782:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007786:	d106      	bne.n	8007796 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007788:	4b3b      	ldr	r3, [pc, #236]	; (8007878 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800778a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800778c:	4a3a      	ldr	r2, [pc, #232]	; (8007878 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800778e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007792:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007794:	e007      	b.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007796:	2301      	movs	r3, #1
 8007798:	75fb      	strb	r3, [r7, #23]
      break;
 800779a:	e004      	b.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800779c:	bf00      	nop
 800779e:	e002      	b.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80077a0:	bf00      	nop
 80077a2:	e000      	b.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80077a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077a6:	7dfb      	ldrb	r3, [r7, #23]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d109      	bne.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80077ac:	4b32      	ldr	r3, [pc, #200]	; (8007878 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80077ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80077b8:	492f      	ldr	r1, [pc, #188]	; (8007878 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80077ba:	4313      	orrs	r3, r2
 80077bc:	654b      	str	r3, [r1, #84]	; 0x54
 80077be:	e001      	b.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077c0:	7dfb      	ldrb	r3, [r7, #23]
 80077c2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d008      	beq.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80077d0:	4b29      	ldr	r3, [pc, #164]	; (8007878 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80077d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077d4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077dc:	4926      	ldr	r1, [pc, #152]	; (8007878 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80077de:	4313      	orrs	r3, r2
 80077e0:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d008      	beq.n	8007800 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80077ee:	4b22      	ldr	r3, [pc, #136]	; (8007878 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80077f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077f2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80077fa:	491f      	ldr	r1, [pc, #124]	; (8007878 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80077fc:	4313      	orrs	r3, r2
 80077fe:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007808:	2b00      	cmp	r3, #0
 800780a:	d00d      	beq.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800780c:	4b1a      	ldr	r3, [pc, #104]	; (8007878 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800780e:	691b      	ldr	r3, [r3, #16]
 8007810:	4a19      	ldr	r2, [pc, #100]	; (8007878 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007812:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007816:	6113      	str	r3, [r2, #16]
 8007818:	4b17      	ldr	r3, [pc, #92]	; (8007878 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800781a:	691a      	ldr	r2, [r3, #16]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007822:	4915      	ldr	r1, [pc, #84]	; (8007878 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007824:	4313      	orrs	r3, r2
 8007826:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	2b00      	cmp	r3, #0
 800782e:	da08      	bge.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007830:	4b11      	ldr	r3, [pc, #68]	; (8007878 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007832:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007834:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800783c:	490e      	ldr	r1, [pc, #56]	; (8007878 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800783e:	4313      	orrs	r3, r2
 8007840:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800784a:	2b00      	cmp	r3, #0
 800784c:	d009      	beq.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800784e:	4b0a      	ldr	r3, [pc, #40]	; (8007878 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007852:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800785c:	4906      	ldr	r1, [pc, #24]	; (8007878 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800785e:	4313      	orrs	r3, r2
 8007860:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8007862:	7dbb      	ldrb	r3, [r7, #22]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d101      	bne.n	800786c <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8007868:	2300      	movs	r3, #0
 800786a:	e000      	b.n	800786e <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 800786c:	2301      	movs	r3, #1
}
 800786e:	4618      	mov	r0, r3
 8007870:	3718      	adds	r7, #24
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}
 8007876:	bf00      	nop
 8007878:	58024400 	.word	0x58024400

0800787c <HAL_RCCEx_GetPeriphCLKConfig>:
  * @retval None
  *
  *   (*) : Available on some STM32H7 lines only.
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800787c:	b480      	push	{r7}
 800787e:	b083      	sub	sp, #12
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection =
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	4aa2      	ldr	r2, [pc, #648]	; (8007b10 <HAL_RCCEx_GetPeriphCLKConfig+0x294>)
 8007888:	601a      	str	r2, [r3, #0]
	         RCC_PERIPHCLK_ADC     | RCC_PERIPHCLK_SWPMI1      | RCC_PERIPHCLK_DFSDM1  | RCC_PERIPHCLK_RTC      |
	         RCC_PERIPHCLK_CEC     | RCC_PERIPHCLK_FMC         | RCC_PERIPHCLK_SPDIFRX | RCC_PERIPHCLK_TIM      |
	         RCC_PERIPHCLK_CKPER;

#if defined(I2C5)
PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_I2C1235;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f043 0208 	orr.w	r2, r3, #8
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	601a      	str	r2, [r3, #0]
#endif /* RCC_CDCCIP1R_SAI2BSEL */
#if defined(SAI3)	 
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SAI23;
#endif /* SAI3 */
#if defined(SAI4)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SAI4A;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	601a      	str	r2, [r3, #0]
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SAI4B;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	601a      	str	r2, [r3, #0]
#endif /* DFSDM2 */
#if defined(QUADSPI)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_QSPI;
#endif /* QUADSPI */
#if defined(OCTOSPI1) || defined(OCTOSPI2)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_OSPI;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	601a      	str	r2, [r3, #0]
#endif /* OCTOSPI1 || OCTOSPI2 */
#if defined(HRTIM1)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_HRTIM1;
#endif /* HRTIM1 */
#if defined(LTDC)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_LTDC;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	601a      	str	r2, [r3, #0]
#if defined(DSI)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_DSI;
#endif /* DSI */

  /* Get the PLL3 Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLL3.PLL3M = (uint32_t)((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> RCC_PLLCKSELR_DIVM3_Pos);
 80078c6:	4b93      	ldr	r3, [pc, #588]	; (8007b14 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 80078c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078ca:	0d1b      	lsrs	r3, r3, #20
 80078cc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	625a      	str	r2, [r3, #36]	; 0x24
  PeriphClkInit->PLL3.PLL3N = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) >> RCC_PLL3DIVR_N3_Pos)+ 1U;
 80078d4:	4b8f      	ldr	r3, [pc, #572]	; (8007b14 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 80078d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078dc:	1c5a      	adds	r2, r3, #1
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInit->PLL3.PLL3R = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> RCC_PLL3DIVR_R3_Pos)+ 1U;
 80078e2:	4b8c      	ldr	r3, [pc, #560]	; (8007b14 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 80078e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078e6:	0e1b      	lsrs	r3, r3, #24
 80078e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078ec:	1c5a      	adds	r2, r3, #1
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	635a      	str	r2, [r3, #52]	; 0x34
  PeriphClkInit->PLL3.PLL3P = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> RCC_PLL3DIVR_P3_Pos)+ 1U;
 80078f2:	4b88      	ldr	r3, [pc, #544]	; (8007b14 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 80078f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078f6:	0a5b      	lsrs	r3, r3, #9
 80078f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078fc:	1c5a      	adds	r2, r3, #1
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	62da      	str	r2, [r3, #44]	; 0x2c
  PeriphClkInit->PLL3.PLL3Q = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> RCC_PLL3DIVR_Q3_Pos)+ 1U;
 8007902:	4b84      	ldr	r3, [pc, #528]	; (8007b14 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007906:	0c1b      	lsrs	r3, r3, #16
 8007908:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800790c:	1c5a      	adds	r2, r3, #1
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	631a      	str	r2, [r3, #48]	; 0x30
  PeriphClkInit->PLL3.PLL3RGE = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL3RGE) >> RCC_PLLCFGR_PLL3RGE_Pos);
 8007912:	4b80      	ldr	r3, [pc, #512]	; (8007b14 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007916:	0a9b      	lsrs	r3, r3, #10
 8007918:	f003 0203 	and.w	r2, r3, #3
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	639a      	str	r2, [r3, #56]	; 0x38
  PeriphClkInit->PLL3.PLL3VCOSEL = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL3VCOSEL) >> RCC_PLLCFGR_PLL3VCOSEL_Pos);
 8007920:	4b7c      	ldr	r3, [pc, #496]	; (8007b14 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007924:	0a5b      	lsrs	r3, r3, #9
 8007926:	f003 0201 	and.w	r2, r3, #1
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Get the PLL2 Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLL2.PLL2M = (uint32_t)((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> RCC_PLLCKSELR_DIVM2_Pos);
 800792e:	4b79      	ldr	r3, [pc, #484]	; (8007b14 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007932:	0b1b      	lsrs	r3, r3, #12
 8007934:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLL2.PLL2N = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) >> RCC_PLL2DIVR_N2_Pos)+ 1U;
 800793c:	4b75      	ldr	r3, [pc, #468]	; (8007b14 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800793e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007940:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007944:	1c5a      	adds	r2, r3, #1
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	609a      	str	r2, [r3, #8]
  PeriphClkInit->PLL2.PLL2R = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> RCC_PLL2DIVR_R2_Pos)+ 1U;
 800794a:	4b72      	ldr	r3, [pc, #456]	; (8007b14 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800794c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800794e:	0e1b      	lsrs	r3, r3, #24
 8007950:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007954:	1c5a      	adds	r2, r3, #1
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLL2.PLL2P = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> RCC_PLL2DIVR_P2_Pos)+ 1U;
 800795a:	4b6e      	ldr	r3, [pc, #440]	; (8007b14 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800795c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800795e:	0a5b      	lsrs	r3, r3, #9
 8007960:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007964:	1c5a      	adds	r2, r3, #1
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLL2.PLL2Q = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> RCC_PLL2DIVR_Q2_Pos)+ 1U;
 800796a:	4b6a      	ldr	r3, [pc, #424]	; (8007b14 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800796c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800796e:	0c1b      	lsrs	r3, r3, #16
 8007970:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007974:	1c5a      	adds	r2, r3, #1
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLL2.PLL2RGE = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL2RGE) >> RCC_PLLCFGR_PLL2RGE_Pos);
 800797a:	4b66      	ldr	r3, [pc, #408]	; (8007b14 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800797c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800797e:	099b      	lsrs	r3, r3, #6
 8007980:	f003 0203 	and.w	r2, r3, #3
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLL2.PLL2VCOSEL = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL2VCOSEL) >> RCC_PLLCFGR_PLL2VCOSEL_Pos);
 8007988:	4b62      	ldr	r3, [pc, #392]	; (8007b14 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800798a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800798c:	095b      	lsrs	r3, r3, #5
 800798e:	f003 0201 	and.w	r2, r3, #1
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	61da      	str	r2, [r3, #28]

  /* Get the USART1 configuration --------------------------------------------*/
  PeriphClkInit->Usart16ClockSelection      = __HAL_RCC_GET_USART16_SOURCE();
 8007996:	4b5f      	ldr	r3, [pc, #380]	; (8007b14 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800799a:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	675a      	str	r2, [r3, #116]	; 0x74
  /* Get the USART2/3/4/5/7/8 clock source -----------------------------------*/
  PeriphClkInit->Usart234578ClockSelection  = __HAL_RCC_GET_USART234578_SOURCE();
 80079a2:	4b5c      	ldr	r3, [pc, #368]	; (8007b14 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 80079a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079a6:	f003 0207 	and.w	r2, r3, #7
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	671a      	str	r2, [r3, #112]	; 0x70
  /* Get the LPUART1 clock source --------------------------------------------*/
  PeriphClkInit->Lpuart1ClockSelection      = __HAL_RCC_GET_LPUART1_SOURCE();
 80079ae:	4b59      	ldr	r3, [pc, #356]	; (8007b14 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 80079b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079b2:	f003 0207 	and.w	r2, r3, #7
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if defined(I2C5)
  /* Get the I2C1/2/3/5 clock source -----------------------------------------*/
  PeriphClkInit->I2c1235ClockSelection       = __HAL_RCC_GET_I2C1_SOURCE();
 80079bc:	4b55      	ldr	r3, [pc, #340]	; (8007b14 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 80079be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079c0:	f403 5240 	and.w	r2, r3, #12288	; 0x3000
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	67da      	str	r2, [r3, #124]	; 0x7c
#else
  /* Get the I2C1/2/3 clock source -------------------------------------------*/
  PeriphClkInit->I2c123ClockSelection       = __HAL_RCC_GET_I2C1_SOURCE();
#endif /*I2C5*/
  /* Get the LPTIM1 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection       = __HAL_RCC_GET_LPTIM1_SOURCE();
 80079c8:	4b52      	ldr	r3, [pc, #328]	; (8007b14 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 80079ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079cc:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  /* Get the LPTIM2 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim2ClockSelection       = __HAL_RCC_GET_LPTIM2_SOURCE();
 80079d6:	4b4f      	ldr	r3, [pc, #316]	; (8007b14 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 80079d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079da:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  /* Get the LPTIM3/4/5 clock source -----------------------------------------*/
  PeriphClkInit->Lptim345ClockSelection     = __HAL_RCC_GET_LPTIM345_SOURCE();
 80079e4:	4b4b      	ldr	r3, [pc, #300]	; (8007b14 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 80079e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079e8:	f403 4260 	and.w	r2, r3, #57344	; 0xe000
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  /* Get the SAI1 clock source -----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection         = __HAL_RCC_GET_SAI1_SOURCE();
 80079f2:	4b48      	ldr	r3, [pc, #288]	; (8007b14 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 80079f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079f6:	f003 0207 	and.w	r2, r3, #7
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	655a      	str	r2, [r3, #84]	; 0x54
  /* Get the SAI2B clock source ---------------------------------------------*/
  PeriphClkInit->Sai2BClockSelection        = __HAL_RCC_GET_SAI2B_SOURCE();
#endif  /*SAI2B*/
#if defined(SAI4)
  /* Get the SAI4A clock source ----------------------------------------------*/
  PeriphClkInit->Sai4AClockSelection        = __HAL_RCC_GET_SAI4A_SOURCE();
 80079fe:	4b45      	ldr	r3, [pc, #276]	; (8007b14 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a02:	f403 0260 	and.w	r2, r3, #14680064	; 0xe00000
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  /* Get the SAI4B clock source ----------------------------------------------*/
  PeriphClkInit->Sai4BClockSelection        = __HAL_RCC_GET_SAI4B_SOURCE();
 8007a0c:	4b41      	ldr	r3, [pc, #260]	; (8007b14 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a10:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
#endif  /*SAI4*/
  /* Get the RTC clock source ------------------------------------------------*/
  PeriphClkInit->RTCClockSelection          = __HAL_RCC_GET_RTC_SOURCE();
 8007a1a:	4b3e      	ldr	r3, [pc, #248]	; (8007b14 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a1e:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  /* Get the USB clock source ------------------------------------------------*/
  PeriphClkInit->UsbClockSelection          = __HAL_RCC_GET_USB_SOURCE();
 8007a28:	4b3a      	ldr	r3, [pc, #232]	; (8007b14 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a2c:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  /* Get the SDMMC clock source ----------------------------------------------*/
  PeriphClkInit->SdmmcClockSelection        = __HAL_RCC_GET_SDMMC_SOURCE();
 8007a36:	4b37      	ldr	r3, [pc, #220]	; (8007b14 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a3a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Get the RNG clock source ------------------------------------------------*/
  PeriphClkInit->RngClockSelection          = __HAL_RCC_GET_RNG_SOURCE();
 8007a42:	4b34      	ldr	r3, [pc, #208]	; (8007b14 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a46:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	679a      	str	r2, [r3, #120]	; 0x78
#if defined(HRTIM1)
  /* Get the HRTIM1 clock source ---------------------------------------------*/
  PeriphClkInit->Hrtim1ClockSelection       = __HAL_RCC_GET_HRTIM1_SOURCE();
#endif /* HRTIM1 */
  /* Get the ADC clock source ------------------------------------------------*/
  PeriphClkInit->AdcClockSelection          = __HAL_RCC_GET_ADC_SOURCE();
 8007a4e:	4b31      	ldr	r3, [pc, #196]	; (8007b14 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a52:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  /* Get the SWPMI1 clock source ---------------------------------------------*/
  PeriphClkInit->Swpmi1ClockSelection       = __HAL_RCC_GET_SWPMI1_SOURCE();
 8007a5c:	4b2d      	ldr	r3, [pc, #180]	; (8007b14 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007a5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a60:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	66da      	str	r2, [r3, #108]	; 0x6c
  /* Get the DFSDM1 clock source ---------------------------------------------*/
  PeriphClkInit->Dfsdm1ClockSelection       = __HAL_RCC_GET_DFSDM1_SOURCE();
 8007a68:	4b2a      	ldr	r3, [pc, #168]	; (8007b14 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007a6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a6c:	f003 7280 	and.w	r2, r3, #16777216	; 0x1000000
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	665a      	str	r2, [r3, #100]	; 0x64
#if defined(DFSDM2_BASE)
  /* Get the DFSDM2 clock source ---------------------------------------------*/
  PeriphClkInit->Dfsdm2ClockSelection       = __HAL_RCC_GET_DFSDM2_SOURCE();
#endif /* DFSDM2 */
  /* Get the SPDIFRX clock source --------------------------------------------*/
  PeriphClkInit->SpdifrxClockSelection      = __HAL_RCC_GET_SPDIFRX_SOURCE();
 8007a74:	4b27      	ldr	r3, [pc, #156]	; (8007b14 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007a76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a78:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	661a      	str	r2, [r3, #96]	; 0x60
  /* Get the SPI1/2/3 clock source -------------------------------------------*/
  PeriphClkInit->Spi123ClockSelection       = __HAL_RCC_GET_SPI123_SOURCE();
 8007a80:	4b24      	ldr	r3, [pc, #144]	; (8007b14 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007a82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a84:	f403 42e0 	and.w	r2, r3, #28672	; 0x7000
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	659a      	str	r2, [r3, #88]	; 0x58
  /* Get the SPI4/5 clock source ---------------------------------------------*/
  PeriphClkInit->Spi45ClockSelection        = __HAL_RCC_GET_SPI45_SOURCE();
 8007a8c:	4b21      	ldr	r3, [pc, #132]	; (8007b14 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007a8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a90:	f403 22e0 	and.w	r2, r3, #458752	; 0x70000
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Get the SPI6 clock source -----------------------------------------------*/
  PeriphClkInit->Spi6ClockSelection         = __HAL_RCC_GET_SPI6_SOURCE();
 8007a98:	4b1e      	ldr	r3, [pc, #120]	; (8007b14 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a9c:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  /* Get the FDCAN clock source ----------------------------------------------*/
  PeriphClkInit->FdcanClockSelection        = __HAL_RCC_GET_FDCAN_SOURCE();
 8007aa6:	4b1b      	ldr	r3, [pc, #108]	; (8007b14 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007aa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007aaa:	f003 5240 	and.w	r2, r3, #805306368	; 0x30000000
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	669a      	str	r2, [r3, #104]	; 0x68
  /* Get the CEC clock source ------------------------------------------------*/
  PeriphClkInit->CecClockSelection          = __HAL_RCC_GET_CEC_SOURCE();
 8007ab2:	4b18      	ldr	r3, [pc, #96]	; (8007b14 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ab6:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  /* Get the FMC clock source ------------------------------------------------*/
  PeriphClkInit->FmcClockSelection          = __HAL_RCC_GET_FMC_SOURCE();
 8007ac0:	4b14      	ldr	r3, [pc, #80]	; (8007b14 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007ac2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ac4:	f003 0203 	and.w	r2, r3, #3
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	645a      	str	r2, [r3, #68]	; 0x44
  /* Get the QSPI clock source -----------------------------------------------*/
  PeriphClkInit->QspiClockSelection         = __HAL_RCC_GET_QSPI_SOURCE();
#endif /* QUADSPI */
#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /* Get the OSPI clock source -----------------------------------------------*/
  PeriphClkInit->OspiClockSelection         = __HAL_RCC_GET_OSPI_SOURCE();
 8007acc:	4b11      	ldr	r3, [pc, #68]	; (8007b14 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007ace:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ad0:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	649a      	str	r2, [r3, #72]	; 0x48
  /* Get the DSI clock source ------------------------------------------------*/
  PeriphClkInit->DsiClockSelection          = __HAL_RCC_GET_DSI_SOURCE();
#endif /*DSI*/

  /* Get the CKPER clock source ----------------------------------------------*/
  PeriphClkInit->CkperClockSelection        = __HAL_RCC_GET_CLKP_SOURCE();
 8007ad8:	4b0e      	ldr	r3, [pc, #56]	; (8007b14 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007ada:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007adc:	f003 5240 	and.w	r2, r3, #805306368	; 0x30000000
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Get the TIM Prescaler configuration -------------------------------------*/
  if ((RCC->CFGR & RCC_CFGR_TIMPRE) == 0U)
 8007ae4:	4b0b      	ldr	r3, [pc, #44]	; (8007b14 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007ae6:	691b      	ldr	r3, [r3, #16]
 8007ae8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d104      	bne.n	8007afa <HAL_RCCEx_GetPeriphCLKConfig+0x27e>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2200      	movs	r2, #0
 8007af4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 8007af8:	e004      	b.n	8007b04 <HAL_RCCEx_GetPeriphCLKConfig+0x288>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8007b00:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8007b04:	bf00      	nop
 8007b06:	370c      	adds	r7, #12
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0e:	4770      	bx	lr
 8007b10:	c9fff1f7 	.word	0xc9fff1f7
 8007b14:	58024400 	.word	0x58024400

08007b18 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b090      	sub	sp, #64	; 0x40
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b26:	f040 8089 	bne.w	8007c3c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8007b2a:	4b95      	ldr	r3, [pc, #596]	; (8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007b2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b2e:	f003 0307 	and.w	r3, r3, #7
 8007b32:	633b      	str	r3, [r7, #48]	; 0x30
 8007b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b36:	2b04      	cmp	r3, #4
 8007b38:	d87d      	bhi.n	8007c36 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 8007b3a:	a201      	add	r2, pc, #4	; (adr r2, 8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8007b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b40:	08007b55 	.word	0x08007b55
 8007b44:	08007b79 	.word	0x08007b79
 8007b48:	08007b9d 	.word	0x08007b9d
 8007b4c:	08007c31 	.word	0x08007c31
 8007b50:	08007bc1 	.word	0x08007bc1

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007b54:	4b8a      	ldr	r3, [pc, #552]	; (8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007b60:	d107      	bne.n	8007b72 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007b62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b66:	4618      	mov	r0, r3
 8007b68:	f000 feb8 	bl	80088dc <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8007b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007b70:	e3ed      	b.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007b72:	2300      	movs	r3, #0
 8007b74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b76:	e3ea      	b.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007b78:	4b81      	ldr	r3, [pc, #516]	; (8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b84:	d107      	bne.n	8007b96 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b86:	f107 0318 	add.w	r3, r7, #24
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f000 fbfe 	bl	800838c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007b90:	69bb      	ldr	r3, [r7, #24]
 8007b92:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007b94:	e3db      	b.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007b96:	2300      	movs	r3, #0
 8007b98:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b9a:	e3d8      	b.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007b9c:	4b78      	ldr	r3, [pc, #480]	; (8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ba4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ba8:	d107      	bne.n	8007bba <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007baa:	f107 030c 	add.w	r3, r7, #12
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f000 fd40 	bl	8008634 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007bb8:	e3c9      	b.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007bbe:	e3c6      	b.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007bc0:	4b6f      	ldr	r3, [pc, #444]	; (8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007bc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bc4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007bc8:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007bca:	4b6d      	ldr	r3, [pc, #436]	; (8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f003 0304 	and.w	r3, r3, #4
 8007bd2:	2b04      	cmp	r3, #4
 8007bd4:	d10c      	bne.n	8007bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8007bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d109      	bne.n	8007bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007bdc:	4b68      	ldr	r3, [pc, #416]	; (8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	08db      	lsrs	r3, r3, #3
 8007be2:	f003 0303 	and.w	r3, r3, #3
 8007be6:	4a67      	ldr	r2, [pc, #412]	; (8007d84 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8007be8:	fa22 f303 	lsr.w	r3, r2, r3
 8007bec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007bee:	e01e      	b.n	8007c2e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007bf0:	4b63      	ldr	r3, [pc, #396]	; (8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bfc:	d106      	bne.n	8007c0c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8007bfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c04:	d102      	bne.n	8007c0c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007c06:	4b60      	ldr	r3, [pc, #384]	; (8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007c08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c0a:	e010      	b.n	8007c2e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007c0c:	4b5c      	ldr	r3, [pc, #368]	; (8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c18:	d106      	bne.n	8007c28 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8007c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c20:	d102      	bne.n	8007c28 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007c22:	4b5a      	ldr	r3, [pc, #360]	; (8007d8c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007c24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c26:	e002      	b.n	8007c2e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007c2c:	e38f      	b.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8007c2e:	e38e      	b.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007c30:	4b57      	ldr	r3, [pc, #348]	; (8007d90 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007c32:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c34:	e38b      	b.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8007c36:	2300      	movs	r3, #0
 8007c38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c3a:	e388      	b.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c42:	f040 80a7 	bne.w	8007d94 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8007c46:	4b4e      	ldr	r3, [pc, #312]	; (8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c4a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8007c4e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c52:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007c56:	d054      	beq.n	8007d02 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8007c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c5a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007c5e:	f200 808b 	bhi.w	8007d78 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8007c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c64:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007c68:	f000 8083 	beq.w	8007d72 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8007c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c6e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007c72:	f200 8081 	bhi.w	8007d78 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8007c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007c7c:	d02f      	beq.n	8007cde <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 8007c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007c84:	d878      	bhi.n	8007d78 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8007c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d004      	beq.n	8007c96 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 8007c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c8e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007c92:	d012      	beq.n	8007cba <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 8007c94:	e070      	b.n	8007d78 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007c96:	4b3a      	ldr	r3, [pc, #232]	; (8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007ca2:	d107      	bne.n	8007cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007ca4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f000 fe17 	bl	80088dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007cb2:	e34c      	b.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007cb8:	e349      	b.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007cba:	4b31      	ldr	r3, [pc, #196]	; (8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007cc2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007cc6:	d107      	bne.n	8007cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007cc8:	f107 0318 	add.w	r3, r7, #24
 8007ccc:	4618      	mov	r0, r3
 8007cce:	f000 fb5d 	bl	800838c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007cd2:	69bb      	ldr	r3, [r7, #24]
 8007cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007cd6:	e33a      	b.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007cdc:	e337      	b.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007cde:	4b28      	ldr	r3, [pc, #160]	; (8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ce6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007cea:	d107      	bne.n	8007cfc <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007cec:	f107 030c 	add.w	r3, r7, #12
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f000 fc9f 	bl	8008634 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007cfa:	e328      	b.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d00:	e325      	b.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007d02:	4b1f      	ldr	r3, [pc, #124]	; (8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d06:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007d0a:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007d0c:	4b1c      	ldr	r3, [pc, #112]	; (8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f003 0304 	and.w	r3, r3, #4
 8007d14:	2b04      	cmp	r3, #4
 8007d16:	d10c      	bne.n	8007d32 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 8007d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d109      	bne.n	8007d32 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007d1e:	4b18      	ldr	r3, [pc, #96]	; (8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	08db      	lsrs	r3, r3, #3
 8007d24:	f003 0303 	and.w	r3, r3, #3
 8007d28:	4a16      	ldr	r2, [pc, #88]	; (8007d84 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8007d2a:	fa22 f303 	lsr.w	r3, r2, r3
 8007d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d30:	e01e      	b.n	8007d70 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007d32:	4b13      	ldr	r3, [pc, #76]	; (8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d3e:	d106      	bne.n	8007d4e <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8007d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d46:	d102      	bne.n	8007d4e <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007d48:	4b0f      	ldr	r3, [pc, #60]	; (8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d4c:	e010      	b.n	8007d70 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007d4e:	4b0c      	ldr	r3, [pc, #48]	; (8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d56:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d5a:	d106      	bne.n	8007d6a <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8007d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d62:	d102      	bne.n	8007d6a <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007d64:	4b09      	ldr	r3, [pc, #36]	; (8007d8c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007d66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d68:	e002      	b.n	8007d70 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007d6e:	e2ee      	b.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8007d70:	e2ed      	b.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007d72:	4b07      	ldr	r3, [pc, #28]	; (8007d90 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007d74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d76:	e2ea      	b.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d7c:	e2e7      	b.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8007d7e:	bf00      	nop
 8007d80:	58024400 	.word	0x58024400
 8007d84:	03d09000 	.word	0x03d09000
 8007d88:	003d0900 	.word	0x003d0900
 8007d8c:	017d7840 	.word	0x017d7840
 8007d90:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d9a:	f040 809c 	bne.w	8007ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8007d9e:	4b9e      	ldr	r3, [pc, #632]	; (8008018 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007da2:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007da6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007daa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007dae:	d054      	beq.n	8007e5a <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8007db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007db2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007db6:	f200 808b 	bhi.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8007dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dbc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007dc0:	f000 8083 	beq.w	8007eca <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8007dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dc6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007dca:	f200 8081 	bhi.w	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8007dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007dd4:	d02f      	beq.n	8007e36 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8007dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007ddc:	d878      	bhi.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8007dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d004      	beq.n	8007dee <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8007de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007dea:	d012      	beq.n	8007e12 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8007dec:	e070      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007dee:	4b8a      	ldr	r3, [pc, #552]	; (8008018 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007df6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007dfa:	d107      	bne.n	8007e0c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007dfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007e00:	4618      	mov	r0, r3
 8007e02:	f000 fd6b 	bl	80088dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e08:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007e0a:	e2a0      	b.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e10:	e29d      	b.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007e12:	4b81      	ldr	r3, [pc, #516]	; (8008018 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e1e:	d107      	bne.n	8007e30 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e20:	f107 0318 	add.w	r3, r7, #24
 8007e24:	4618      	mov	r0, r3
 8007e26:	f000 fab1 	bl	800838c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007e2a:	69bb      	ldr	r3, [r7, #24]
 8007e2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8007e2e:	e28e      	b.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007e30:	2300      	movs	r3, #0
 8007e32:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e34:	e28b      	b.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007e36:	4b78      	ldr	r3, [pc, #480]	; (8008018 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e42:	d107      	bne.n	8007e54 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e44:	f107 030c 	add.w	r3, r7, #12
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f000 fbf3 	bl	8008634 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007e52:	e27c      	b.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007e54:	2300      	movs	r3, #0
 8007e56:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e58:	e279      	b.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007e5a:	4b6f      	ldr	r3, [pc, #444]	; (8008018 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e5e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007e62:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007e64:	4b6c      	ldr	r3, [pc, #432]	; (8008018 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f003 0304 	and.w	r3, r3, #4
 8007e6c:	2b04      	cmp	r3, #4
 8007e6e:	d10c      	bne.n	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8007e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d109      	bne.n	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007e76:	4b68      	ldr	r3, [pc, #416]	; (8008018 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	08db      	lsrs	r3, r3, #3
 8007e7c:	f003 0303 	and.w	r3, r3, #3
 8007e80:	4a66      	ldr	r2, [pc, #408]	; (800801c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007e82:	fa22 f303 	lsr.w	r3, r2, r3
 8007e86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e88:	e01e      	b.n	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007e8a:	4b63      	ldr	r3, [pc, #396]	; (8008018 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e96:	d106      	bne.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 8007e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e9e:	d102      	bne.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007ea0:	4b5f      	ldr	r3, [pc, #380]	; (8008020 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8007ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ea4:	e010      	b.n	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007ea6:	4b5c      	ldr	r3, [pc, #368]	; (8008018 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007eae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007eb2:	d106      	bne.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8007eb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007eb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007eba:	d102      	bne.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007ebc:	4b59      	ldr	r3, [pc, #356]	; (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8007ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ec0:	e002      	b.n	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007ec6:	e242      	b.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8007ec8:	e241      	b.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007eca:	4b57      	ldr	r3, [pc, #348]	; (8008028 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8007ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ece:	e23e      	b.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ed4:	e23b      	b.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007edc:	f040 80a6 	bne.w	800802c <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8007ee0:	4b4d      	ldr	r3, [pc, #308]	; (8008018 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007ee2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ee4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007ee8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ef0:	d054      	beq.n	8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8007ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ef4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ef8:	f200 808b 	bhi.w	8008012 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8007efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007efe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007f02:	f000 8083 	beq.w	800800c <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 8007f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f08:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007f0c:	f200 8081 	bhi.w	8008012 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8007f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f16:	d02f      	beq.n	8007f78 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 8007f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f1e:	d878      	bhi.n	8008012 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8007f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d004      	beq.n	8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8007f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f2c:	d012      	beq.n	8007f54 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 8007f2e:	e070      	b.n	8008012 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007f30:	4b39      	ldr	r3, [pc, #228]	; (8008018 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f3c:	d107      	bne.n	8007f4e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007f3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f42:	4618      	mov	r0, r3
 8007f44:	f000 fcca 	bl	80088dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007f4c:	e1ff      	b.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f52:	e1fc      	b.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007f54:	4b30      	ldr	r3, [pc, #192]	; (8008018 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f60:	d107      	bne.n	8007f72 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f62:	f107 0318 	add.w	r3, r7, #24
 8007f66:	4618      	mov	r0, r3
 8007f68:	f000 fa10 	bl	800838c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007f6c:	69bb      	ldr	r3, [r7, #24]
 8007f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007f70:	e1ed      	b.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007f72:	2300      	movs	r3, #0
 8007f74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f76:	e1ea      	b.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007f78:	4b27      	ldr	r3, [pc, #156]	; (8008018 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f84:	d107      	bne.n	8007f96 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f86:	f107 030c 	add.w	r3, r7, #12
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f000 fb52 	bl	8008634 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007f94:	e1db      	b.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007f96:	2300      	movs	r3, #0
 8007f98:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f9a:	e1d8      	b.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007f9c:	4b1e      	ldr	r3, [pc, #120]	; (8008018 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007f9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fa0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007fa4:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007fa6:	4b1c      	ldr	r3, [pc, #112]	; (8008018 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f003 0304 	and.w	r3, r3, #4
 8007fae:	2b04      	cmp	r3, #4
 8007fb0:	d10c      	bne.n	8007fcc <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 8007fb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d109      	bne.n	8007fcc <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007fb8:	4b17      	ldr	r3, [pc, #92]	; (8008018 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	08db      	lsrs	r3, r3, #3
 8007fbe:	f003 0303 	and.w	r3, r3, #3
 8007fc2:	4a16      	ldr	r2, [pc, #88]	; (800801c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007fc4:	fa22 f303 	lsr.w	r3, r2, r3
 8007fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fca:	e01e      	b.n	800800a <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007fcc:	4b12      	ldr	r3, [pc, #72]	; (8008018 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fd8:	d106      	bne.n	8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8007fda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fdc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007fe0:	d102      	bne.n	8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007fe2:	4b0f      	ldr	r3, [pc, #60]	; (8008020 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8007fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fe6:	e010      	b.n	800800a <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007fe8:	4b0b      	ldr	r3, [pc, #44]	; (8008018 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ff0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ff4:	d106      	bne.n	8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8007ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ff8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ffc:	d102      	bne.n	8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007ffe:	4b09      	ldr	r3, [pc, #36]	; (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8008000:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008002:	e002      	b.n	800800a <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008004:	2300      	movs	r3, #0
 8008006:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008008:	e1a1      	b.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800800a:	e1a0      	b.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800800c:	4b06      	ldr	r3, [pc, #24]	; (8008028 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800800e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008010:	e19d      	b.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8008012:	2300      	movs	r3, #0
 8008014:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008016:	e19a      	b.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8008018:	58024400 	.word	0x58024400
 800801c:	03d09000 	.word	0x03d09000
 8008020:	003d0900 	.word	0x003d0900
 8008024:	017d7840 	.word	0x017d7840
 8008028:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008032:	d173      	bne.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8008034:	4b9a      	ldr	r3, [pc, #616]	; (80082a0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008038:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800803c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800803e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008040:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008044:	d02f      	beq.n	80080a6 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8008046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008048:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800804c:	d863      	bhi.n	8008116 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 800804e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008050:	2b00      	cmp	r3, #0
 8008052:	d004      	beq.n	800805e <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 8008054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008056:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800805a:	d012      	beq.n	8008082 <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 800805c:	e05b      	b.n	8008116 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800805e:	4b90      	ldr	r3, [pc, #576]	; (80082a0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008066:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800806a:	d107      	bne.n	800807c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800806c:	f107 0318 	add.w	r3, r7, #24
 8008070:	4618      	mov	r0, r3
 8008072:	f000 f98b 	bl	800838c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008076:	69bb      	ldr	r3, [r7, #24]
 8008078:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800807a:	e168      	b.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800807c:	2300      	movs	r3, #0
 800807e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008080:	e165      	b.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008082:	4b87      	ldr	r3, [pc, #540]	; (80082a0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800808a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800808e:	d107      	bne.n	80080a0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008090:	f107 030c 	add.w	r3, r7, #12
 8008094:	4618      	mov	r0, r3
 8008096:	f000 facd 	bl	8008634 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800809e:	e156      	b.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80080a0:	2300      	movs	r3, #0
 80080a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080a4:	e153      	b.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80080a6:	4b7e      	ldr	r3, [pc, #504]	; (80082a0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80080a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080aa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80080ae:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80080b0:	4b7b      	ldr	r3, [pc, #492]	; (80082a0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f003 0304 	and.w	r3, r3, #4
 80080b8:	2b04      	cmp	r3, #4
 80080ba:	d10c      	bne.n	80080d6 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 80080bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d109      	bne.n	80080d6 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80080c2:	4b77      	ldr	r3, [pc, #476]	; (80082a0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	08db      	lsrs	r3, r3, #3
 80080c8:	f003 0303 	and.w	r3, r3, #3
 80080cc:	4a75      	ldr	r2, [pc, #468]	; (80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80080ce:	fa22 f303 	lsr.w	r3, r2, r3
 80080d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080d4:	e01e      	b.n	8008114 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80080d6:	4b72      	ldr	r3, [pc, #456]	; (80082a0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080e2:	d106      	bne.n	80080f2 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 80080e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80080ea:	d102      	bne.n	80080f2 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80080ec:	4b6e      	ldr	r3, [pc, #440]	; (80082a8 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 80080ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080f0:	e010      	b.n	8008114 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80080f2:	4b6b      	ldr	r3, [pc, #428]	; (80082a0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80080fe:	d106      	bne.n	800810e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8008100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008102:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008106:	d102      	bne.n	800810e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008108:	4b68      	ldr	r3, [pc, #416]	; (80082ac <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800810a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800810c:	e002      	b.n	8008114 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800810e:	2300      	movs	r3, #0
 8008110:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008112:	e11c      	b.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8008114:	e11b      	b.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8008116:	2300      	movs	r3, #0
 8008118:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800811a:	e118      	b.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008122:	d133      	bne.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8008124:	4b5e      	ldr	r3, [pc, #376]	; (80082a0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008126:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008128:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800812c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800812e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008130:	2b00      	cmp	r3, #0
 8008132:	d004      	beq.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8008134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008136:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800813a:	d012      	beq.n	8008162 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 800813c:	e023      	b.n	8008186 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800813e:	4b58      	ldr	r3, [pc, #352]	; (80082a0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008146:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800814a:	d107      	bne.n	800815c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800814c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008150:	4618      	mov	r0, r3
 8008152:	f000 fbc3 	bl	80088dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008158:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800815a:	e0f8      	b.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800815c:	2300      	movs	r3, #0
 800815e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008160:	e0f5      	b.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008162:	4b4f      	ldr	r3, [pc, #316]	; (80082a0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800816a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800816e:	d107      	bne.n	8008180 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008170:	f107 0318 	add.w	r3, r7, #24
 8008174:	4618      	mov	r0, r3
 8008176:	f000 f909 	bl	800838c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800817a:	6a3b      	ldr	r3, [r7, #32]
 800817c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800817e:	e0e6      	b.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008180:	2300      	movs	r3, #0
 8008182:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008184:	e0e3      	b.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8008186:	2300      	movs	r3, #0
 8008188:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800818a:	e0e0      	b.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008192:	f040 808d 	bne.w	80082b0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8008196:	4b42      	ldr	r3, [pc, #264]	; (80082a0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800819a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800819e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80081a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80081a6:	d06b      	beq.n	8008280 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 80081a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80081ae:	d874      	bhi.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 80081b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081b6:	d056      	beq.n	8008266 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 80081b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081be:	d86c      	bhi.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 80081c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081c2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80081c6:	d03b      	beq.n	8008240 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 80081c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80081ce:	d864      	bhi.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 80081d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081d6:	d021      	beq.n	800821c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 80081d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081de:	d85c      	bhi.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 80081e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d004      	beq.n	80081f0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 80081e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80081ec:	d004      	beq.n	80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 80081ee:	e054      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80081f0:	f000 f8b6 	bl	8008360 <HAL_RCCEx_GetD3PCLK1Freq>
 80081f4:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 80081f6:	e0aa      	b.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80081f8:	4b29      	ldr	r3, [pc, #164]	; (80082a0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008200:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008204:	d107      	bne.n	8008216 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008206:	f107 0318 	add.w	r3, r7, #24
 800820a:	4618      	mov	r0, r3
 800820c:	f000 f8be 	bl	800838c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008210:	69fb      	ldr	r3, [r7, #28]
 8008212:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008214:	e09b      	b.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008216:	2300      	movs	r3, #0
 8008218:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800821a:	e098      	b.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800821c:	4b20      	ldr	r3, [pc, #128]	; (80082a0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008224:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008228:	d107      	bne.n	800823a <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800822a:	f107 030c 	add.w	r3, r7, #12
 800822e:	4618      	mov	r0, r3
 8008230:	f000 fa00 	bl	8008634 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008234:	693b      	ldr	r3, [r7, #16]
 8008236:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008238:	e089      	b.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800823a:	2300      	movs	r3, #0
 800823c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800823e:	e086      	b.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008240:	4b17      	ldr	r3, [pc, #92]	; (80082a0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f003 0304 	and.w	r3, r3, #4
 8008248:	2b04      	cmp	r3, #4
 800824a:	d109      	bne.n	8008260 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800824c:	4b14      	ldr	r3, [pc, #80]	; (80082a0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	08db      	lsrs	r3, r3, #3
 8008252:	f003 0303 	and.w	r3, r3, #3
 8008256:	4a13      	ldr	r2, [pc, #76]	; (80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8008258:	fa22 f303 	lsr.w	r3, r2, r3
 800825c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800825e:	e076      	b.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008260:	2300      	movs	r3, #0
 8008262:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008264:	e073      	b.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008266:	4b0e      	ldr	r3, [pc, #56]	; (80082a0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800826e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008272:	d102      	bne.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 8008274:	4b0c      	ldr	r3, [pc, #48]	; (80082a8 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8008276:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008278:	e069      	b.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800827a:	2300      	movs	r3, #0
 800827c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800827e:	e066      	b.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008280:	4b07      	ldr	r3, [pc, #28]	; (80082a0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008288:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800828c:	d102      	bne.n	8008294 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 800828e:	4b07      	ldr	r3, [pc, #28]	; (80082ac <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8008290:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008292:	e05c      	b.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008294:	2300      	movs	r3, #0
 8008296:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008298:	e059      	b.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800829a:	2300      	movs	r3, #0
 800829c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800829e:	e056      	b.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80082a0:	58024400 	.word	0x58024400
 80082a4:	03d09000 	.word	0x03d09000
 80082a8:	003d0900 	.word	0x003d0900
 80082ac:	017d7840 	.word	0x017d7840
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082b6:	d148      	bne.n	800834a <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 80082b8:	4b27      	ldr	r3, [pc, #156]	; (8008358 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80082ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80082c0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80082c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082c8:	d02a      	beq.n	8008320 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 80082ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082d0:	d838      	bhi.n	8008344 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 80082d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d004      	beq.n	80082e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 80082d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80082de:	d00d      	beq.n	80082fc <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 80082e0:	e030      	b.n	8008344 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80082e2:	4b1d      	ldr	r3, [pc, #116]	; (8008358 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80082ee:	d102      	bne.n	80082f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 80082f0:	4b1a      	ldr	r3, [pc, #104]	; (800835c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80082f2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80082f4:	e02b      	b.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80082f6:	2300      	movs	r3, #0
 80082f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80082fa:	e028      	b.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80082fc:	4b16      	ldr	r3, [pc, #88]	; (8008358 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008304:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008308:	d107      	bne.n	800831a <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800830a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800830e:	4618      	mov	r0, r3
 8008310:	f000 fae4 	bl	80088dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008316:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008318:	e019      	b.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800831a:	2300      	movs	r3, #0
 800831c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800831e:	e016      	b.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008320:	4b0d      	ldr	r3, [pc, #52]	; (8008358 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008328:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800832c:	d107      	bne.n	800833e <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800832e:	f107 0318 	add.w	r3, r7, #24
 8008332:	4618      	mov	r0, r3
 8008334:	f000 f82a 	bl	800838c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008338:	69fb      	ldr	r3, [r7, #28]
 800833a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800833c:	e007      	b.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800833e:	2300      	movs	r3, #0
 8008340:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008342:	e004      	b.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8008344:	2300      	movs	r3, #0
 8008346:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008348:	e001      	b.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 800834a:	2300      	movs	r3, #0
 800834c:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800834e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008350:	4618      	mov	r0, r3
 8008352:	3740      	adds	r7, #64	; 0x40
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}
 8008358:	58024400 	.word	0x58024400
 800835c:	017d7840 	.word	0x017d7840

08008360 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008364:	f7fe fb60 	bl	8006a28 <HAL_RCC_GetHCLKFreq>
 8008368:	4602      	mov	r2, r0
 800836a:	4b06      	ldr	r3, [pc, #24]	; (8008384 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800836c:	6a1b      	ldr	r3, [r3, #32]
 800836e:	091b      	lsrs	r3, r3, #4
 8008370:	f003 0307 	and.w	r3, r3, #7
 8008374:	4904      	ldr	r1, [pc, #16]	; (8008388 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008376:	5ccb      	ldrb	r3, [r1, r3]
 8008378:	f003 031f 	and.w	r3, r3, #31
 800837c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008380:	4618      	mov	r0, r3
 8008382:	bd80      	pop	{r7, pc}
 8008384:	58024400 	.word	0x58024400
 8008388:	0800c570 	.word	0x0800c570

0800838c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800838c:	b480      	push	{r7}
 800838e:	b089      	sub	sp, #36	; 0x24
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008394:	4ba1      	ldr	r3, [pc, #644]	; (800861c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008398:	f003 0303 	and.w	r3, r3, #3
 800839c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800839e:	4b9f      	ldr	r3, [pc, #636]	; (800861c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083a2:	0b1b      	lsrs	r3, r3, #12
 80083a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80083a8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80083aa:	4b9c      	ldr	r3, [pc, #624]	; (800861c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ae:	091b      	lsrs	r3, r3, #4
 80083b0:	f003 0301 	and.w	r3, r3, #1
 80083b4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80083b6:	4b99      	ldr	r3, [pc, #612]	; (800861c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083ba:	08db      	lsrs	r3, r3, #3
 80083bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80083c0:	693a      	ldr	r2, [r7, #16]
 80083c2:	fb02 f303 	mul.w	r3, r2, r3
 80083c6:	ee07 3a90 	vmov	s15, r3
 80083ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083ce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	f000 8111 	beq.w	80085fc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80083da:	69bb      	ldr	r3, [r7, #24]
 80083dc:	2b02      	cmp	r3, #2
 80083de:	f000 8083 	beq.w	80084e8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80083e2:	69bb      	ldr	r3, [r7, #24]
 80083e4:	2b02      	cmp	r3, #2
 80083e6:	f200 80a1 	bhi.w	800852c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80083ea:	69bb      	ldr	r3, [r7, #24]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d003      	beq.n	80083f8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80083f0:	69bb      	ldr	r3, [r7, #24]
 80083f2:	2b01      	cmp	r3, #1
 80083f4:	d056      	beq.n	80084a4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80083f6:	e099      	b.n	800852c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80083f8:	4b88      	ldr	r3, [pc, #544]	; (800861c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f003 0320 	and.w	r3, r3, #32
 8008400:	2b00      	cmp	r3, #0
 8008402:	d02d      	beq.n	8008460 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008404:	4b85      	ldr	r3, [pc, #532]	; (800861c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	08db      	lsrs	r3, r3, #3
 800840a:	f003 0303 	and.w	r3, r3, #3
 800840e:	4a84      	ldr	r2, [pc, #528]	; (8008620 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008410:	fa22 f303 	lsr.w	r3, r2, r3
 8008414:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	ee07 3a90 	vmov	s15, r3
 800841c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	ee07 3a90 	vmov	s15, r3
 8008426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800842a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800842e:	4b7b      	ldr	r3, [pc, #492]	; (800861c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008432:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008436:	ee07 3a90 	vmov	s15, r3
 800843a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800843e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008442:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008624 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008446:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800844a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800844e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008452:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008456:	ee67 7a27 	vmul.f32	s15, s14, s15
 800845a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800845e:	e087      	b.n	8008570 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008460:	697b      	ldr	r3, [r7, #20]
 8008462:	ee07 3a90 	vmov	s15, r3
 8008466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800846a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008628 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800846e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008472:	4b6a      	ldr	r3, [pc, #424]	; (800861c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008476:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800847a:	ee07 3a90 	vmov	s15, r3
 800847e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008482:	ed97 6a03 	vldr	s12, [r7, #12]
 8008486:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008624 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800848a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800848e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008492:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008496:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800849a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800849e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80084a2:	e065      	b.n	8008570 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80084a4:	697b      	ldr	r3, [r7, #20]
 80084a6:	ee07 3a90 	vmov	s15, r3
 80084aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084ae:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800862c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80084b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084b6:	4b59      	ldr	r3, [pc, #356]	; (800861c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80084b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084be:	ee07 3a90 	vmov	s15, r3
 80084c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80084ca:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008624 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80084ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80084da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80084e6:	e043      	b.n	8008570 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	ee07 3a90 	vmov	s15, r3
 80084ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084f2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008630 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80084f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084fa:	4b48      	ldr	r3, [pc, #288]	; (800861c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80084fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008502:	ee07 3a90 	vmov	s15, r3
 8008506:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800850a:	ed97 6a03 	vldr	s12, [r7, #12]
 800850e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008624 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008512:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008516:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800851a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800851e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008522:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008526:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800852a:	e021      	b.n	8008570 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	ee07 3a90 	vmov	s15, r3
 8008532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008536:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800862c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800853a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800853e:	4b37      	ldr	r3, [pc, #220]	; (800861c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008542:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008546:	ee07 3a90 	vmov	s15, r3
 800854a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800854e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008552:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008624 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008556:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800855a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800855e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008562:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008566:	ee67 7a27 	vmul.f32	s15, s14, s15
 800856a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800856e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008570:	4b2a      	ldr	r3, [pc, #168]	; (800861c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008574:	0a5b      	lsrs	r3, r3, #9
 8008576:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800857a:	ee07 3a90 	vmov	s15, r3
 800857e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008582:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008586:	ee37 7a87 	vadd.f32	s14, s15, s14
 800858a:	edd7 6a07 	vldr	s13, [r7, #28]
 800858e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008592:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008596:	ee17 2a90 	vmov	r2, s15
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800859e:	4b1f      	ldr	r3, [pc, #124]	; (800861c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80085a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085a2:	0c1b      	lsrs	r3, r3, #16
 80085a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085a8:	ee07 3a90 	vmov	s15, r3
 80085ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80085b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80085b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80085bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80085c4:	ee17 2a90 	vmov	r2, s15
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80085cc:	4b13      	ldr	r3, [pc, #76]	; (800861c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80085ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085d0:	0e1b      	lsrs	r3, r3, #24
 80085d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085d6:	ee07 3a90 	vmov	s15, r3
 80085da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80085e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80085e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80085ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80085f2:	ee17 2a90 	vmov	r2, s15
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80085fa:	e008      	b.n	800860e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2200      	movs	r2, #0
 8008600:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2200      	movs	r2, #0
 8008606:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2200      	movs	r2, #0
 800860c:	609a      	str	r2, [r3, #8]
}
 800860e:	bf00      	nop
 8008610:	3724      	adds	r7, #36	; 0x24
 8008612:	46bd      	mov	sp, r7
 8008614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008618:	4770      	bx	lr
 800861a:	bf00      	nop
 800861c:	58024400 	.word	0x58024400
 8008620:	03d09000 	.word	0x03d09000
 8008624:	46000000 	.word	0x46000000
 8008628:	4c742400 	.word	0x4c742400
 800862c:	4a742400 	.word	0x4a742400
 8008630:	4bbebc20 	.word	0x4bbebc20

08008634 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008634:	b480      	push	{r7}
 8008636:	b089      	sub	sp, #36	; 0x24
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800863c:	4ba1      	ldr	r3, [pc, #644]	; (80088c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800863e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008640:	f003 0303 	and.w	r3, r3, #3
 8008644:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008646:	4b9f      	ldr	r3, [pc, #636]	; (80088c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800864a:	0d1b      	lsrs	r3, r3, #20
 800864c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008650:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008652:	4b9c      	ldr	r3, [pc, #624]	; (80088c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008656:	0a1b      	lsrs	r3, r3, #8
 8008658:	f003 0301 	and.w	r3, r3, #1
 800865c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800865e:	4b99      	ldr	r3, [pc, #612]	; (80088c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008662:	08db      	lsrs	r3, r3, #3
 8008664:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008668:	693a      	ldr	r2, [r7, #16]
 800866a:	fb02 f303 	mul.w	r3, r2, r3
 800866e:	ee07 3a90 	vmov	s15, r3
 8008672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008676:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	2b00      	cmp	r3, #0
 800867e:	f000 8111 	beq.w	80088a4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008682:	69bb      	ldr	r3, [r7, #24]
 8008684:	2b02      	cmp	r3, #2
 8008686:	f000 8083 	beq.w	8008790 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800868a:	69bb      	ldr	r3, [r7, #24]
 800868c:	2b02      	cmp	r3, #2
 800868e:	f200 80a1 	bhi.w	80087d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008692:	69bb      	ldr	r3, [r7, #24]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d003      	beq.n	80086a0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008698:	69bb      	ldr	r3, [r7, #24]
 800869a:	2b01      	cmp	r3, #1
 800869c:	d056      	beq.n	800874c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800869e:	e099      	b.n	80087d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80086a0:	4b88      	ldr	r3, [pc, #544]	; (80088c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f003 0320 	and.w	r3, r3, #32
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d02d      	beq.n	8008708 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80086ac:	4b85      	ldr	r3, [pc, #532]	; (80088c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	08db      	lsrs	r3, r3, #3
 80086b2:	f003 0303 	and.w	r3, r3, #3
 80086b6:	4a84      	ldr	r2, [pc, #528]	; (80088c8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80086b8:	fa22 f303 	lsr.w	r3, r2, r3
 80086bc:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	ee07 3a90 	vmov	s15, r3
 80086c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	ee07 3a90 	vmov	s15, r3
 80086ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086d6:	4b7b      	ldr	r3, [pc, #492]	; (80088c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086de:	ee07 3a90 	vmov	s15, r3
 80086e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80086ea:	eddf 5a78 	vldr	s11, [pc, #480]	; 80088cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80086ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008702:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008706:	e087      	b.n	8008818 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	ee07 3a90 	vmov	s15, r3
 800870e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008712:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80088d0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008716:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800871a:	4b6a      	ldr	r3, [pc, #424]	; (80088c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800871c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800871e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008722:	ee07 3a90 	vmov	s15, r3
 8008726:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800872a:	ed97 6a03 	vldr	s12, [r7, #12]
 800872e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80088cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008732:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008736:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800873a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800873e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008746:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800874a:	e065      	b.n	8008818 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	ee07 3a90 	vmov	s15, r3
 8008752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008756:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80088d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800875a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800875e:	4b59      	ldr	r3, [pc, #356]	; (80088c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008762:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008766:	ee07 3a90 	vmov	s15, r3
 800876a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800876e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008772:	eddf 5a56 	vldr	s11, [pc, #344]	; 80088cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008776:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800877a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800877e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008782:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800878a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800878e:	e043      	b.n	8008818 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	ee07 3a90 	vmov	s15, r3
 8008796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800879a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80088d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800879e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087a2:	4b48      	ldr	r3, [pc, #288]	; (80088c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80087a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087aa:	ee07 3a90 	vmov	s15, r3
 80087ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80087b6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80088cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80087ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80087c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80087d2:	e021      	b.n	8008818 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	ee07 3a90 	vmov	s15, r3
 80087da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087de:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80088d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80087e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087e6:	4b37      	ldr	r3, [pc, #220]	; (80088c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80087e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087ee:	ee07 3a90 	vmov	s15, r3
 80087f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80087fa:	eddf 5a34 	vldr	s11, [pc, #208]	; 80088cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80087fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008802:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008806:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800880a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800880e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008812:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008816:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008818:	4b2a      	ldr	r3, [pc, #168]	; (80088c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800881a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800881c:	0a5b      	lsrs	r3, r3, #9
 800881e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008822:	ee07 3a90 	vmov	s15, r3
 8008826:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800882a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800882e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008832:	edd7 6a07 	vldr	s13, [r7, #28]
 8008836:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800883a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800883e:	ee17 2a90 	vmov	r2, s15
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008846:	4b1f      	ldr	r3, [pc, #124]	; (80088c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800884a:	0c1b      	lsrs	r3, r3, #16
 800884c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008850:	ee07 3a90 	vmov	s15, r3
 8008854:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008858:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800885c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008860:	edd7 6a07 	vldr	s13, [r7, #28]
 8008864:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008868:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800886c:	ee17 2a90 	vmov	r2, s15
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008874:	4b13      	ldr	r3, [pc, #76]	; (80088c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008878:	0e1b      	lsrs	r3, r3, #24
 800887a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800887e:	ee07 3a90 	vmov	s15, r3
 8008882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008886:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800888a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800888e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008892:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008896:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800889a:	ee17 2a90 	vmov	r2, s15
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80088a2:	e008      	b.n	80088b6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2200      	movs	r2, #0
 80088a8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2200      	movs	r2, #0
 80088ae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2200      	movs	r2, #0
 80088b4:	609a      	str	r2, [r3, #8]
}
 80088b6:	bf00      	nop
 80088b8:	3724      	adds	r7, #36	; 0x24
 80088ba:	46bd      	mov	sp, r7
 80088bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c0:	4770      	bx	lr
 80088c2:	bf00      	nop
 80088c4:	58024400 	.word	0x58024400
 80088c8:	03d09000 	.word	0x03d09000
 80088cc:	46000000 	.word	0x46000000
 80088d0:	4c742400 	.word	0x4c742400
 80088d4:	4a742400 	.word	0x4a742400
 80088d8:	4bbebc20 	.word	0x4bbebc20

080088dc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80088dc:	b480      	push	{r7}
 80088de:	b089      	sub	sp, #36	; 0x24
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80088e4:	4ba0      	ldr	r3, [pc, #640]	; (8008b68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80088e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088e8:	f003 0303 	and.w	r3, r3, #3
 80088ec:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80088ee:	4b9e      	ldr	r3, [pc, #632]	; (8008b68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80088f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088f2:	091b      	lsrs	r3, r3, #4
 80088f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80088f8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80088fa:	4b9b      	ldr	r3, [pc, #620]	; (8008b68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80088fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088fe:	f003 0301 	and.w	r3, r3, #1
 8008902:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008904:	4b98      	ldr	r3, [pc, #608]	; (8008b68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008908:	08db      	lsrs	r3, r3, #3
 800890a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800890e:	693a      	ldr	r2, [r7, #16]
 8008910:	fb02 f303 	mul.w	r3, r2, r3
 8008914:	ee07 3a90 	vmov	s15, r3
 8008918:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800891c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	2b00      	cmp	r3, #0
 8008924:	f000 8111 	beq.w	8008b4a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008928:	69bb      	ldr	r3, [r7, #24]
 800892a:	2b02      	cmp	r3, #2
 800892c:	f000 8083 	beq.w	8008a36 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008930:	69bb      	ldr	r3, [r7, #24]
 8008932:	2b02      	cmp	r3, #2
 8008934:	f200 80a1 	bhi.w	8008a7a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008938:	69bb      	ldr	r3, [r7, #24]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d003      	beq.n	8008946 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800893e:	69bb      	ldr	r3, [r7, #24]
 8008940:	2b01      	cmp	r3, #1
 8008942:	d056      	beq.n	80089f2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008944:	e099      	b.n	8008a7a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008946:	4b88      	ldr	r3, [pc, #544]	; (8008b68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f003 0320 	and.w	r3, r3, #32
 800894e:	2b00      	cmp	r3, #0
 8008950:	d02d      	beq.n	80089ae <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008952:	4b85      	ldr	r3, [pc, #532]	; (8008b68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	08db      	lsrs	r3, r3, #3
 8008958:	f003 0303 	and.w	r3, r3, #3
 800895c:	4a83      	ldr	r2, [pc, #524]	; (8008b6c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800895e:	fa22 f303 	lsr.w	r3, r2, r3
 8008962:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	ee07 3a90 	vmov	s15, r3
 800896a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	ee07 3a90 	vmov	s15, r3
 8008974:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008978:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800897c:	4b7a      	ldr	r3, [pc, #488]	; (8008b68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800897e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008980:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008984:	ee07 3a90 	vmov	s15, r3
 8008988:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800898c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008990:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008b70 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008994:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008998:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800899c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089a8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80089ac:	e087      	b.n	8008abe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	ee07 3a90 	vmov	s15, r3
 80089b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089b8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008b74 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80089bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089c0:	4b69      	ldr	r3, [pc, #420]	; (8008b68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80089c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089c8:	ee07 3a90 	vmov	s15, r3
 80089cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089d0:	ed97 6a03 	vldr	s12, [r7, #12]
 80089d4:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008b70 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80089d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089ec:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80089f0:	e065      	b.n	8008abe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	ee07 3a90 	vmov	s15, r3
 80089f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089fc:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008b78 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008a00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a04:	4b58      	ldr	r3, [pc, #352]	; (8008b68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a0c:	ee07 3a90 	vmov	s15, r3
 8008a10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a14:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a18:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008b70 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008a1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a24:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a30:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008a34:	e043      	b.n	8008abe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	ee07 3a90 	vmov	s15, r3
 8008a3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a40:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008b7c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008a44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a48:	4b47      	ldr	r3, [pc, #284]	; (8008b68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a50:	ee07 3a90 	vmov	s15, r3
 8008a54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a58:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a5c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008b70 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008a60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a68:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a74:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008a78:	e021      	b.n	8008abe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008a7a:	697b      	ldr	r3, [r7, #20]
 8008a7c:	ee07 3a90 	vmov	s15, r3
 8008a80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a84:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8008b74 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008a88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a8c:	4b36      	ldr	r3, [pc, #216]	; (8008b68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a94:	ee07 3a90 	vmov	s15, r3
 8008a98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a9c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008aa0:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008b70 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008aa4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008aa8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008aac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ab0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ab4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ab8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008abc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8008abe:	4b2a      	ldr	r3, [pc, #168]	; (8008b68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ac2:	0a5b      	lsrs	r3, r3, #9
 8008ac4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ac8:	ee07 3a90 	vmov	s15, r3
 8008acc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ad0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ad4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ad8:	edd7 6a07 	vldr	s13, [r7, #28]
 8008adc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ae0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ae4:	ee17 2a90 	vmov	r2, s15
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8008aec:	4b1e      	ldr	r3, [pc, #120]	; (8008b68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008af0:	0c1b      	lsrs	r3, r3, #16
 8008af2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008af6:	ee07 3a90 	vmov	s15, r3
 8008afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008afe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008b02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b06:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b12:	ee17 2a90 	vmov	r2, s15
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8008b1a:	4b13      	ldr	r3, [pc, #76]	; (8008b68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b1e:	0e1b      	lsrs	r3, r3, #24
 8008b20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b24:	ee07 3a90 	vmov	s15, r3
 8008b28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008b30:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b34:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b40:	ee17 2a90 	vmov	r2, s15
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008b48:	e008      	b.n	8008b5c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2200      	movs	r2, #0
 8008b54:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	609a      	str	r2, [r3, #8]
}
 8008b5c:	bf00      	nop
 8008b5e:	3724      	adds	r7, #36	; 0x24
 8008b60:	46bd      	mov	sp, r7
 8008b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b66:	4770      	bx	lr
 8008b68:	58024400 	.word	0x58024400
 8008b6c:	03d09000 	.word	0x03d09000
 8008b70:	46000000 	.word	0x46000000
 8008b74:	4c742400 	.word	0x4c742400
 8008b78:	4a742400 	.word	0x4a742400
 8008b7c:	4bbebc20 	.word	0x4bbebc20

08008b80 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b084      	sub	sp, #16
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
 8008b88:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008b8e:	4b53      	ldr	r3, [pc, #332]	; (8008cdc <RCCEx_PLL2_Config+0x15c>)
 8008b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b92:	f003 0303 	and.w	r3, r3, #3
 8008b96:	2b03      	cmp	r3, #3
 8008b98:	d101      	bne.n	8008b9e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	e099      	b.n	8008cd2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008b9e:	4b4f      	ldr	r3, [pc, #316]	; (8008cdc <RCCEx_PLL2_Config+0x15c>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	4a4e      	ldr	r2, [pc, #312]	; (8008cdc <RCCEx_PLL2_Config+0x15c>)
 8008ba4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008ba8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008baa:	f7f9 f8ed 	bl	8001d88 <HAL_GetTick>
 8008bae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008bb0:	e008      	b.n	8008bc4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008bb2:	f7f9 f8e9 	bl	8001d88 <HAL_GetTick>
 8008bb6:	4602      	mov	r2, r0
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	1ad3      	subs	r3, r2, r3
 8008bbc:	2b02      	cmp	r3, #2
 8008bbe:	d901      	bls.n	8008bc4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008bc0:	2303      	movs	r3, #3
 8008bc2:	e086      	b.n	8008cd2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008bc4:	4b45      	ldr	r3, [pc, #276]	; (8008cdc <RCCEx_PLL2_Config+0x15c>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d1f0      	bne.n	8008bb2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008bd0:	4b42      	ldr	r3, [pc, #264]	; (8008cdc <RCCEx_PLL2_Config+0x15c>)
 8008bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bd4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	031b      	lsls	r3, r3, #12
 8008bde:	493f      	ldr	r1, [pc, #252]	; (8008cdc <RCCEx_PLL2_Config+0x15c>)
 8008be0:	4313      	orrs	r3, r2
 8008be2:	628b      	str	r3, [r1, #40]	; 0x28
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	685b      	ldr	r3, [r3, #4]
 8008be8:	3b01      	subs	r3, #1
 8008bea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	689b      	ldr	r3, [r3, #8]
 8008bf2:	3b01      	subs	r3, #1
 8008bf4:	025b      	lsls	r3, r3, #9
 8008bf6:	b29b      	uxth	r3, r3
 8008bf8:	431a      	orrs	r2, r3
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	68db      	ldr	r3, [r3, #12]
 8008bfe:	3b01      	subs	r3, #1
 8008c00:	041b      	lsls	r3, r3, #16
 8008c02:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008c06:	431a      	orrs	r2, r3
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	691b      	ldr	r3, [r3, #16]
 8008c0c:	3b01      	subs	r3, #1
 8008c0e:	061b      	lsls	r3, r3, #24
 8008c10:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008c14:	4931      	ldr	r1, [pc, #196]	; (8008cdc <RCCEx_PLL2_Config+0x15c>)
 8008c16:	4313      	orrs	r3, r2
 8008c18:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008c1a:	4b30      	ldr	r3, [pc, #192]	; (8008cdc <RCCEx_PLL2_Config+0x15c>)
 8008c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c1e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	695b      	ldr	r3, [r3, #20]
 8008c26:	492d      	ldr	r1, [pc, #180]	; (8008cdc <RCCEx_PLL2_Config+0x15c>)
 8008c28:	4313      	orrs	r3, r2
 8008c2a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008c2c:	4b2b      	ldr	r3, [pc, #172]	; (8008cdc <RCCEx_PLL2_Config+0x15c>)
 8008c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c30:	f023 0220 	bic.w	r2, r3, #32
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	699b      	ldr	r3, [r3, #24]
 8008c38:	4928      	ldr	r1, [pc, #160]	; (8008cdc <RCCEx_PLL2_Config+0x15c>)
 8008c3a:	4313      	orrs	r3, r2
 8008c3c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008c3e:	4b27      	ldr	r3, [pc, #156]	; (8008cdc <RCCEx_PLL2_Config+0x15c>)
 8008c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c42:	4a26      	ldr	r2, [pc, #152]	; (8008cdc <RCCEx_PLL2_Config+0x15c>)
 8008c44:	f023 0310 	bic.w	r3, r3, #16
 8008c48:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008c4a:	4b24      	ldr	r3, [pc, #144]	; (8008cdc <RCCEx_PLL2_Config+0x15c>)
 8008c4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c4e:	4b24      	ldr	r3, [pc, #144]	; (8008ce0 <RCCEx_PLL2_Config+0x160>)
 8008c50:	4013      	ands	r3, r2
 8008c52:	687a      	ldr	r2, [r7, #4]
 8008c54:	69d2      	ldr	r2, [r2, #28]
 8008c56:	00d2      	lsls	r2, r2, #3
 8008c58:	4920      	ldr	r1, [pc, #128]	; (8008cdc <RCCEx_PLL2_Config+0x15c>)
 8008c5a:	4313      	orrs	r3, r2
 8008c5c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008c5e:	4b1f      	ldr	r3, [pc, #124]	; (8008cdc <RCCEx_PLL2_Config+0x15c>)
 8008c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c62:	4a1e      	ldr	r2, [pc, #120]	; (8008cdc <RCCEx_PLL2_Config+0x15c>)
 8008c64:	f043 0310 	orr.w	r3, r3, #16
 8008c68:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d106      	bne.n	8008c7e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008c70:	4b1a      	ldr	r3, [pc, #104]	; (8008cdc <RCCEx_PLL2_Config+0x15c>)
 8008c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c74:	4a19      	ldr	r2, [pc, #100]	; (8008cdc <RCCEx_PLL2_Config+0x15c>)
 8008c76:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008c7a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008c7c:	e00f      	b.n	8008c9e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	2b01      	cmp	r3, #1
 8008c82:	d106      	bne.n	8008c92 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008c84:	4b15      	ldr	r3, [pc, #84]	; (8008cdc <RCCEx_PLL2_Config+0x15c>)
 8008c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c88:	4a14      	ldr	r2, [pc, #80]	; (8008cdc <RCCEx_PLL2_Config+0x15c>)
 8008c8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008c8e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008c90:	e005      	b.n	8008c9e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008c92:	4b12      	ldr	r3, [pc, #72]	; (8008cdc <RCCEx_PLL2_Config+0x15c>)
 8008c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c96:	4a11      	ldr	r2, [pc, #68]	; (8008cdc <RCCEx_PLL2_Config+0x15c>)
 8008c98:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008c9c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008c9e:	4b0f      	ldr	r3, [pc, #60]	; (8008cdc <RCCEx_PLL2_Config+0x15c>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	4a0e      	ldr	r2, [pc, #56]	; (8008cdc <RCCEx_PLL2_Config+0x15c>)
 8008ca4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008ca8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008caa:	f7f9 f86d 	bl	8001d88 <HAL_GetTick>
 8008cae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008cb0:	e008      	b.n	8008cc4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008cb2:	f7f9 f869 	bl	8001d88 <HAL_GetTick>
 8008cb6:	4602      	mov	r2, r0
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	1ad3      	subs	r3, r2, r3
 8008cbc:	2b02      	cmp	r3, #2
 8008cbe:	d901      	bls.n	8008cc4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008cc0:	2303      	movs	r3, #3
 8008cc2:	e006      	b.n	8008cd2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008cc4:	4b05      	ldr	r3, [pc, #20]	; (8008cdc <RCCEx_PLL2_Config+0x15c>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d0f0      	beq.n	8008cb2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	3710      	adds	r7, #16
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}
 8008cda:	bf00      	nop
 8008cdc:	58024400 	.word	0x58024400
 8008ce0:	ffff0007 	.word	0xffff0007

08008ce4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b084      	sub	sp, #16
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
 8008cec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008cf2:	4b53      	ldr	r3, [pc, #332]	; (8008e40 <RCCEx_PLL3_Config+0x15c>)
 8008cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cf6:	f003 0303 	and.w	r3, r3, #3
 8008cfa:	2b03      	cmp	r3, #3
 8008cfc:	d101      	bne.n	8008d02 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008cfe:	2301      	movs	r3, #1
 8008d00:	e099      	b.n	8008e36 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008d02:	4b4f      	ldr	r3, [pc, #316]	; (8008e40 <RCCEx_PLL3_Config+0x15c>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	4a4e      	ldr	r2, [pc, #312]	; (8008e40 <RCCEx_PLL3_Config+0x15c>)
 8008d08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008d0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d0e:	f7f9 f83b 	bl	8001d88 <HAL_GetTick>
 8008d12:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008d14:	e008      	b.n	8008d28 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008d16:	f7f9 f837 	bl	8001d88 <HAL_GetTick>
 8008d1a:	4602      	mov	r2, r0
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	1ad3      	subs	r3, r2, r3
 8008d20:	2b02      	cmp	r3, #2
 8008d22:	d901      	bls.n	8008d28 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008d24:	2303      	movs	r3, #3
 8008d26:	e086      	b.n	8008e36 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008d28:	4b45      	ldr	r3, [pc, #276]	; (8008e40 <RCCEx_PLL3_Config+0x15c>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d1f0      	bne.n	8008d16 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008d34:	4b42      	ldr	r3, [pc, #264]	; (8008e40 <RCCEx_PLL3_Config+0x15c>)
 8008d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d38:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	051b      	lsls	r3, r3, #20
 8008d42:	493f      	ldr	r1, [pc, #252]	; (8008e40 <RCCEx_PLL3_Config+0x15c>)
 8008d44:	4313      	orrs	r3, r2
 8008d46:	628b      	str	r3, [r1, #40]	; 0x28
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	685b      	ldr	r3, [r3, #4]
 8008d4c:	3b01      	subs	r3, #1
 8008d4e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	689b      	ldr	r3, [r3, #8]
 8008d56:	3b01      	subs	r3, #1
 8008d58:	025b      	lsls	r3, r3, #9
 8008d5a:	b29b      	uxth	r3, r3
 8008d5c:	431a      	orrs	r2, r3
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	68db      	ldr	r3, [r3, #12]
 8008d62:	3b01      	subs	r3, #1
 8008d64:	041b      	lsls	r3, r3, #16
 8008d66:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008d6a:	431a      	orrs	r2, r3
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	691b      	ldr	r3, [r3, #16]
 8008d70:	3b01      	subs	r3, #1
 8008d72:	061b      	lsls	r3, r3, #24
 8008d74:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008d78:	4931      	ldr	r1, [pc, #196]	; (8008e40 <RCCEx_PLL3_Config+0x15c>)
 8008d7a:	4313      	orrs	r3, r2
 8008d7c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008d7e:	4b30      	ldr	r3, [pc, #192]	; (8008e40 <RCCEx_PLL3_Config+0x15c>)
 8008d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d82:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	695b      	ldr	r3, [r3, #20]
 8008d8a:	492d      	ldr	r1, [pc, #180]	; (8008e40 <RCCEx_PLL3_Config+0x15c>)
 8008d8c:	4313      	orrs	r3, r2
 8008d8e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008d90:	4b2b      	ldr	r3, [pc, #172]	; (8008e40 <RCCEx_PLL3_Config+0x15c>)
 8008d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d94:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	699b      	ldr	r3, [r3, #24]
 8008d9c:	4928      	ldr	r1, [pc, #160]	; (8008e40 <RCCEx_PLL3_Config+0x15c>)
 8008d9e:	4313      	orrs	r3, r2
 8008da0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008da2:	4b27      	ldr	r3, [pc, #156]	; (8008e40 <RCCEx_PLL3_Config+0x15c>)
 8008da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008da6:	4a26      	ldr	r2, [pc, #152]	; (8008e40 <RCCEx_PLL3_Config+0x15c>)
 8008da8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008dac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008dae:	4b24      	ldr	r3, [pc, #144]	; (8008e40 <RCCEx_PLL3_Config+0x15c>)
 8008db0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008db2:	4b24      	ldr	r3, [pc, #144]	; (8008e44 <RCCEx_PLL3_Config+0x160>)
 8008db4:	4013      	ands	r3, r2
 8008db6:	687a      	ldr	r2, [r7, #4]
 8008db8:	69d2      	ldr	r2, [r2, #28]
 8008dba:	00d2      	lsls	r2, r2, #3
 8008dbc:	4920      	ldr	r1, [pc, #128]	; (8008e40 <RCCEx_PLL3_Config+0x15c>)
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008dc2:	4b1f      	ldr	r3, [pc, #124]	; (8008e40 <RCCEx_PLL3_Config+0x15c>)
 8008dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dc6:	4a1e      	ldr	r2, [pc, #120]	; (8008e40 <RCCEx_PLL3_Config+0x15c>)
 8008dc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008dcc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d106      	bne.n	8008de2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008dd4:	4b1a      	ldr	r3, [pc, #104]	; (8008e40 <RCCEx_PLL3_Config+0x15c>)
 8008dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dd8:	4a19      	ldr	r2, [pc, #100]	; (8008e40 <RCCEx_PLL3_Config+0x15c>)
 8008dda:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008dde:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008de0:	e00f      	b.n	8008e02 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	2b01      	cmp	r3, #1
 8008de6:	d106      	bne.n	8008df6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008de8:	4b15      	ldr	r3, [pc, #84]	; (8008e40 <RCCEx_PLL3_Config+0x15c>)
 8008dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dec:	4a14      	ldr	r2, [pc, #80]	; (8008e40 <RCCEx_PLL3_Config+0x15c>)
 8008dee:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008df2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008df4:	e005      	b.n	8008e02 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008df6:	4b12      	ldr	r3, [pc, #72]	; (8008e40 <RCCEx_PLL3_Config+0x15c>)
 8008df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dfa:	4a11      	ldr	r2, [pc, #68]	; (8008e40 <RCCEx_PLL3_Config+0x15c>)
 8008dfc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008e00:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008e02:	4b0f      	ldr	r3, [pc, #60]	; (8008e40 <RCCEx_PLL3_Config+0x15c>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	4a0e      	ldr	r2, [pc, #56]	; (8008e40 <RCCEx_PLL3_Config+0x15c>)
 8008e08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e0e:	f7f8 ffbb 	bl	8001d88 <HAL_GetTick>
 8008e12:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008e14:	e008      	b.n	8008e28 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008e16:	f7f8 ffb7 	bl	8001d88 <HAL_GetTick>
 8008e1a:	4602      	mov	r2, r0
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	1ad3      	subs	r3, r2, r3
 8008e20:	2b02      	cmp	r3, #2
 8008e22:	d901      	bls.n	8008e28 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008e24:	2303      	movs	r3, #3
 8008e26:	e006      	b.n	8008e36 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008e28:	4b05      	ldr	r3, [pc, #20]	; (8008e40 <RCCEx_PLL3_Config+0x15c>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d0f0      	beq.n	8008e16 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	3710      	adds	r7, #16
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}
 8008e3e:	bf00      	nop
 8008e40:	58024400 	.word	0x58024400
 8008e44:	ffff0007 	.word	0xffff0007

08008e48 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b08a      	sub	sp, #40	; 0x28
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d101      	bne.n	8008e5a <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8008e56:	2301      	movs	r3, #1
 8008e58:	e1fb      	b.n	8009252 <HAL_SAI_Init+0x40a>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008e60:	2b01      	cmp	r3, #1
 8008e62:	d113      	bne.n	8008e8c <HAL_SAI_Init+0x44>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	4a96      	ldr	r2, [pc, #600]	; (80090c4 <HAL_SAI_Init+0x27c>)
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d004      	beq.n	8008e78 <HAL_SAI_Init+0x30>
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	4a95      	ldr	r2, [pc, #596]	; (80090c8 <HAL_SAI_Init+0x280>)
 8008e74:	4293      	cmp	r3, r2
 8008e76:	d107      	bne.n	8008e88 <HAL_SAI_Init+0x40>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8008e7c:	2b01      	cmp	r3, #1
 8008e7e:	d103      	bne.n	8008e88 <HAL_SAI_Init+0x40>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d001      	beq.n	8008e8c <HAL_SAI_Init+0x44>
    {
      return HAL_ERROR;
 8008e88:	2301      	movs	r3, #1
 8008e8a:	e1e2      	b.n	8009252 <HAL_SAI_Init+0x40a>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	4a8c      	ldr	r2, [pc, #560]	; (80090c4 <HAL_SAI_Init+0x27c>)
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d004      	beq.n	8008ea0 <HAL_SAI_Init+0x58>
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	4a8c      	ldr	r2, [pc, #560]	; (80090cc <HAL_SAI_Init+0x284>)
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d102      	bne.n	8008ea6 <HAL_SAI_Init+0x5e>
  {
    SaiBaseAddress = SAI1;
 8008ea0:	4b8b      	ldr	r3, [pc, #556]	; (80090d0 <HAL_SAI_Init+0x288>)
 8008ea2:	61bb      	str	r3, [r7, #24]
 8008ea4:	e00e      	b.n	8008ec4 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI3;
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	4a87      	ldr	r2, [pc, #540]	; (80090c8 <HAL_SAI_Init+0x280>)
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d004      	beq.n	8008eba <HAL_SAI_Init+0x72>
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	4a87      	ldr	r2, [pc, #540]	; (80090d4 <HAL_SAI_Init+0x28c>)
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d102      	bne.n	8008ec0 <HAL_SAI_Init+0x78>
  {
    SaiBaseAddress = SAI4;
 8008eba:	4b87      	ldr	r3, [pc, #540]	; (80090d8 <HAL_SAI_Init+0x290>)
 8008ebc:	61bb      	str	r3, [r7, #24]
 8008ebe:	e001      	b.n	8008ec4 <HAL_SAI_Init+0x7c>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	e1c6      	b.n	8009252 <HAL_SAI_Init+0x40a>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8008eca:	b2db      	uxtb	r3, r3
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d106      	bne.n	8008ede <HAL_SAI_Init+0x96>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f000 fff9 	bl	8009ed0 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f000 fcda 	bl	8009898 <SAI_Disable>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d001      	beq.n	8008eee <HAL_SAI_Init+0xa6>
  {
    return HAL_ERROR;
 8008eea:	2301      	movs	r3, #1
 8008eec:	e1b1      	b.n	8009252 <HAL_SAI_Init+0x40a>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2202      	movs	r2, #2
 8008ef2:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	68db      	ldr	r3, [r3, #12]
 8008efa:	2b02      	cmp	r3, #2
 8008efc:	d00c      	beq.n	8008f18 <HAL_SAI_Init+0xd0>
 8008efe:	2b02      	cmp	r3, #2
 8008f00:	d80d      	bhi.n	8008f1e <HAL_SAI_Init+0xd6>
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d002      	beq.n	8008f0c <HAL_SAI_Init+0xc4>
 8008f06:	2b01      	cmp	r3, #1
 8008f08:	d003      	beq.n	8008f12 <HAL_SAI_Init+0xca>
 8008f0a:	e008      	b.n	8008f1e <HAL_SAI_Init+0xd6>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8008f10:	e008      	b.n	8008f24 <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8008f12:	2310      	movs	r3, #16
 8008f14:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8008f16:	e005      	b.n	8008f24 <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8008f18:	2320      	movs	r3, #32
 8008f1a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8008f1c:	e002      	b.n	8008f24 <HAL_SAI_Init+0xdc>
    default:
      tmpregisterGCR = 0;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8008f22:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	689b      	ldr	r3, [r3, #8]
 8008f28:	2b05      	cmp	r3, #5
 8008f2a:	d822      	bhi.n	8008f72 <HAL_SAI_Init+0x12a>
 8008f2c:	a201      	add	r2, pc, #4	; (adr r2, 8008f34 <HAL_SAI_Init+0xec>)
 8008f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f32:	bf00      	nop
 8008f34:	08008f4d 	.word	0x08008f4d
 8008f38:	08008f53 	.word	0x08008f53
 8008f3c:	08008f5b 	.word	0x08008f5b
 8008f40:	08008f73 	.word	0x08008f73
 8008f44:	08008f73 	.word	0x08008f73
 8008f48:	08008f63 	.word	0x08008f63
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	61fb      	str	r3, [r7, #28]
      break;
 8008f50:	e012      	b.n	8008f78 <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8008f52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f56:	61fb      	str	r3, [r7, #28]
      break;
 8008f58:	e00e      	b.n	8008f78 <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008f5a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008f5e:	61fb      	str	r3, [r7, #28]
      break;
 8008f60:	e00a      	b.n	8008f78 <HAL_SAI_Init+0x130>
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
      break;
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008f62:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008f66:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8008f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f6a:	f043 0303 	orr.w	r3, r3, #3
 8008f6e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8008f70:	e002      	b.n	8008f78 <HAL_SAI_Init+0x130>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 8008f72:	2300      	movs	r3, #0
 8008f74:	61fb      	str	r3, [r7, #28]
      break;
 8008f76:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 8008f78:	69bb      	ldr	r3, [r7, #24]
 8008f7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f7c:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6a1b      	ldr	r3, [r3, #32]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	f000 8084 	beq.w	8009090 <HAL_SAI_Init+0x248>
  {
    uint32_t freq = 0;
 8008f88:	2300      	movs	r3, #0
 8008f8a:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	4a4c      	ldr	r2, [pc, #304]	; (80090c4 <HAL_SAI_Init+0x27c>)
 8008f92:	4293      	cmp	r3, r2
 8008f94:	d004      	beq.n	8008fa0 <HAL_SAI_Init+0x158>
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	4a4c      	ldr	r2, [pc, #304]	; (80090cc <HAL_SAI_Init+0x284>)
 8008f9c:	4293      	cmp	r3, r2
 8008f9e:	d104      	bne.n	8008faa <HAL_SAI_Init+0x162>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8008fa0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008fa4:	f7fe fdb8 	bl	8007b18 <HAL_RCCEx_GetPeriphCLKFreq>
 8008fa8:	6178      	str	r0, [r7, #20]
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	4a46      	ldr	r2, [pc, #280]	; (80090c8 <HAL_SAI_Init+0x280>)
 8008fb0:	4293      	cmp	r3, r2
 8008fb2:	d104      	bne.n	8008fbe <HAL_SAI_Init+0x176>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8008fb4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8008fb8:	f7fe fdae 	bl	8007b18 <HAL_RCCEx_GetPeriphCLKFreq>
 8008fbc:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	4a44      	ldr	r2, [pc, #272]	; (80090d4 <HAL_SAI_Init+0x28c>)
 8008fc4:	4293      	cmp	r3, r2
 8008fc6:	d104      	bne.n	8008fd2 <HAL_SAI_Init+0x18a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8008fc8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008fcc:	f7fe fda4 	bl	8007b18 <HAL_RCCEx_GetPeriphCLKFreq>
 8008fd0:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	699b      	ldr	r3, [r3, #24]
 8008fd6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008fda:	d120      	bne.n	800901e <HAL_SAI_Init+0x1d6>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fe0:	2b04      	cmp	r3, #4
 8008fe2:	d102      	bne.n	8008fea <HAL_SAI_Init+0x1a2>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 8008fe4:	2340      	movs	r3, #64	; 0x40
 8008fe6:	60fb      	str	r3, [r7, #12]
 8008fe8:	e00a      	b.n	8009000 <HAL_SAI_Init+0x1b8>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fee:	2b08      	cmp	r3, #8
 8008ff0:	d103      	bne.n	8008ffa <HAL_SAI_Init+0x1b2>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 8008ff2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ff6:	60fb      	str	r3, [r7, #12]
 8008ff8:	e002      	b.n	8009000 <HAL_SAI_Init+0x1b8>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ffe:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8009000:	697a      	ldr	r2, [r7, #20]
 8009002:	4613      	mov	r3, r2
 8009004:	009b      	lsls	r3, r3, #2
 8009006:	4413      	add	r3, r2
 8009008:	005b      	lsls	r3, r3, #1
 800900a:	4619      	mov	r1, r3
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6a1b      	ldr	r3, [r3, #32]
 8009010:	68fa      	ldr	r2, [r7, #12]
 8009012:	fb02 f303 	mul.w	r3, r2, r3
 8009016:	fbb1 f3f3 	udiv	r3, r1, r3
 800901a:	613b      	str	r3, [r7, #16]
 800901c:	e017      	b.n	800904e <HAL_SAI_Init+0x206>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009022:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009026:	d101      	bne.n	800902c <HAL_SAI_Init+0x1e4>
 8009028:	2302      	movs	r3, #2
 800902a:	e000      	b.n	800902e <HAL_SAI_Init+0x1e6>
 800902c:	2301      	movs	r3, #1
 800902e:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8009030:	697a      	ldr	r2, [r7, #20]
 8009032:	4613      	mov	r3, r2
 8009034:	009b      	lsls	r3, r3, #2
 8009036:	4413      	add	r3, r2
 8009038:	005b      	lsls	r3, r3, #1
 800903a:	4619      	mov	r1, r3
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6a1b      	ldr	r3, [r3, #32]
 8009040:	68ba      	ldr	r2, [r7, #8]
 8009042:	fb02 f303 	mul.w	r3, r2, r3
 8009046:	021b      	lsls	r3, r3, #8
 8009048:	fbb1 f3f3 	udiv	r3, r1, r3
 800904c:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800904e:	693b      	ldr	r3, [r7, #16]
 8009050:	4a22      	ldr	r2, [pc, #136]	; (80090dc <HAL_SAI_Init+0x294>)
 8009052:	fba2 2303 	umull	r2, r3, r2, r3
 8009056:	08da      	lsrs	r2, r3, #3
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800905c:	6939      	ldr	r1, [r7, #16]
 800905e:	4b1f      	ldr	r3, [pc, #124]	; (80090dc <HAL_SAI_Init+0x294>)
 8009060:	fba3 2301 	umull	r2, r3, r3, r1
 8009064:	08da      	lsrs	r2, r3, #3
 8009066:	4613      	mov	r3, r2
 8009068:	009b      	lsls	r3, r3, #2
 800906a:	4413      	add	r3, r2
 800906c:	005b      	lsls	r3, r3, #1
 800906e:	1aca      	subs	r2, r1, r3
 8009070:	2a08      	cmp	r2, #8
 8009072:	d904      	bls.n	800907e <HAL_SAI_Init+0x236>
    {
      hsai->Init.Mckdiv += 1U;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009078:	1c5a      	adds	r2, r3, #1
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009082:	2b04      	cmp	r3, #4
 8009084:	d104      	bne.n	8009090 <HAL_SAI_Init+0x248>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800908a:	085a      	lsrs	r2, r3, #1
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	685b      	ldr	r3, [r3, #4]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d003      	beq.n	80090a0 <HAL_SAI_Init+0x258>
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	685b      	ldr	r3, [r3, #4]
 800909c:	2b02      	cmp	r3, #2
 800909e:	d109      	bne.n	80090b4 <HAL_SAI_Init+0x26c>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090a4:	2b01      	cmp	r3, #1
 80090a6:	d101      	bne.n	80090ac <HAL_SAI_Init+0x264>
 80090a8:	2300      	movs	r3, #0
 80090aa:	e001      	b.n	80090b0 <HAL_SAI_Init+0x268>
 80090ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80090b0:	623b      	str	r3, [r7, #32]
 80090b2:	e017      	b.n	80090e4 <HAL_SAI_Init+0x29c>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090b8:	2b01      	cmp	r3, #1
 80090ba:	d111      	bne.n	80090e0 <HAL_SAI_Init+0x298>
 80090bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80090c0:	e00f      	b.n	80090e2 <HAL_SAI_Init+0x29a>
 80090c2:	bf00      	nop
 80090c4:	40015804 	.word	0x40015804
 80090c8:	58005404 	.word	0x58005404
 80090cc:	40015824 	.word	0x40015824
 80090d0:	40015800 	.word	0x40015800
 80090d4:	58005424 	.word	0x58005424
 80090d8:	58005400 	.word	0x58005400
 80090dc:	cccccccd 	.word	0xcccccccd
 80090e0:	2300      	movs	r3, #0
 80090e2:	623b      	str	r3, [r7, #32]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                            hsai->Init.MckOverSampling);
  }
#else /* SAI_VER_V2_1*/
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	6819      	ldr	r1, [r3, #0]
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681a      	ldr	r2, [r3, #0]
 80090ee:	4b5b      	ldr	r3, [pc, #364]	; (800925c <HAL_SAI_Init+0x414>)
 80090f0:	400b      	ands	r3, r1
 80090f2:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	6819      	ldr	r1, [r3, #0]
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	685a      	ldr	r2, [r3, #4]
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009102:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009108:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800910e:	431a      	orrs	r2, r3
 8009110:	6a3b      	ldr	r3, [r7, #32]
 8009112:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8009114:	69fb      	ldr	r3, [r7, #28]
 8009116:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                          ckstr_bits | syncen_bits |                             \
 800911c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	695b      	ldr	r3, [r3, #20]
 8009122:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009128:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800912e:	051b      	lsls	r3, r3, #20
 8009130:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009136:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	691b      	ldr	r3, [r3, #16]
 800913c:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	430a      	orrs	r2, r1
 8009144:	601a      	str	r2, [r3, #0]
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	6859      	ldr	r1, [r3, #4]
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681a      	ldr	r2, [r3, #0]
 8009150:	4b43      	ldr	r3, [pc, #268]	; (8009260 <HAL_SAI_Init+0x418>)
 8009152:	400b      	ands	r3, r1
 8009154:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	6859      	ldr	r1, [r3, #4]
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	69da      	ldr	r2, [r3, #28]
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009164:	431a      	orrs	r2, r3
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800916a:	431a      	orrs	r2, r3
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	430a      	orrs	r2, r1
 8009172:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	6899      	ldr	r1, [r3, #8]
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681a      	ldr	r2, [r3, #0]
 800917e:	4b39      	ldr	r3, [pc, #228]	; (8009264 <HAL_SAI_Init+0x41c>)
 8009180:	400b      	ands	r3, r1
 8009182:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	6899      	ldr	r1, [r3, #8]
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800918e:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8009194:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 800919a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 80091a0:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091a6:	3b01      	subs	r3, #1
 80091a8:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80091aa:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	430a      	orrs	r2, r1
 80091b2:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	68d9      	ldr	r1, [r3, #12]
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681a      	ldr	r2, [r3, #0]
 80091be:	f24f 0320 	movw	r3, #61472	; 0xf020
 80091c2:	400b      	ands	r3, r1
 80091c4:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	68d9      	ldr	r1, [r3, #12]
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091d4:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091da:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80091dc:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091e2:	3b01      	subs	r3, #1
 80091e4:	021b      	lsls	r3, r3, #8
 80091e6:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	430a      	orrs	r2, r1
 80091ee:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	4a1c      	ldr	r2, [pc, #112]	; (8009268 <HAL_SAI_Init+0x420>)
 80091f6:	4293      	cmp	r3, r2
 80091f8:	d004      	beq.n	8009204 <HAL_SAI_Init+0x3bc>
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	4a1b      	ldr	r2, [pc, #108]	; (800926c <HAL_SAI_Init+0x424>)
 8009200:	4293      	cmp	r3, r2
 8009202:	d119      	bne.n	8009238 <HAL_SAI_Init+0x3f0>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8009204:	69bb      	ldr	r3, [r7, #24]
 8009206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009208:	f023 0201 	bic.w	r2, r3, #1
 800920c:	69bb      	ldr	r3, [r7, #24]
 800920e:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009216:	2b01      	cmp	r3, #1
 8009218:	d10e      	bne.n	8009238 <HAL_SAI_Init+0x3f0>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009222:	3b01      	subs	r3, #1
 8009224:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8009226:	431a      	orrs	r2, r3
 8009228:	69bb      	ldr	r3, [r7, #24]
 800922a:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800922c:	69bb      	ldr	r3, [r7, #24]
 800922e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009230:	f043 0201 	orr.w	r2, r3, #1
 8009234:	69bb      	ldr	r3, [r7, #24]
 8009236:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2200      	movs	r2, #0
 800923c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2201      	movs	r2, #1
 8009244:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2200      	movs	r2, #0
 800924c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 8009250:	2300      	movs	r3, #0
}
 8009252:	4618      	mov	r0, r3
 8009254:	3728      	adds	r7, #40	; 0x28
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}
 800925a:	bf00      	nop
 800925c:	f005c010 	.word	0xf005c010
 8009260:	ffff1ff0 	.word	0xffff1ff0
 8009264:	fff88000 	.word	0xfff88000
 8009268:	40015804 	.word	0x40015804
 800926c:	58005404 	.word	0x58005404

08009270 <HAL_SAI_Abort>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b084      	sub	sp, #16
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009278:	2300      	movs	r3, #0
 800927a:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8009282:	2b01      	cmp	r3, #1
 8009284:	d101      	bne.n	800928a <HAL_SAI_Abort+0x1a>
 8009286:	2302      	movs	r3, #2
 8009288:	e07d      	b.n	8009386 <HAL_SAI_Abort+0x116>
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2201      	movs	r2, #1
 800928e:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  /* Check SAI DMA is enabled or not */
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800929c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80092a0:	d14f      	bne.n	8009342 <HAL_SAI_Abort+0xd2>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	681a      	ldr	r2, [r3, #0]
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80092b0:	601a      	str	r2, [r3, #0]

    /* Abort the SAI Tx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX)&& (hsai->hdmatx != NULL))
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80092b8:	b2db      	uxtb	r3, r3
 80092ba:	2b12      	cmp	r3, #18
 80092bc:	d11d      	bne.n	80092fa <HAL_SAI_Abort+0x8a>
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d018      	beq.n	80092fa <HAL_SAI_Abort+0x8a>
    {
      if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80092ce:	4618      	mov	r0, r3
 80092d0:	f7fa f91a 	bl	8003508 <HAL_DMA_Abort>
 80092d4:	4603      	mov	r3, r0
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d00f      	beq.n	80092fa <HAL_SAI_Abort+0x8a>
      {
        /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80092e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092e2:	2b80      	cmp	r3, #128	; 0x80
 80092e4:	d009      	beq.n	80092fa <HAL_SAI_Abort+0x8a>
        {
          status = HAL_ERROR;
 80092e6:	2301      	movs	r3, #1
 80092e8:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80092f0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        }
      }
    }

    /* Abort the SAI Rx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8009300:	b2db      	uxtb	r3, r3
 8009302:	2b22      	cmp	r3, #34	; 0x22
 8009304:	d11d      	bne.n	8009342 <HAL_SAI_Abort+0xd2>
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800930c:	2b00      	cmp	r3, #0
 800930e:	d018      	beq.n	8009342 <HAL_SAI_Abort+0xd2>
    {
      if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009316:	4618      	mov	r0, r3
 8009318:	f7fa f8f6 	bl	8003508 <HAL_DMA_Abort>
 800931c:	4603      	mov	r3, r0
 800931e:	2b00      	cmp	r3, #0
 8009320:	d00f      	beq.n	8009342 <HAL_SAI_Abort+0xd2>
      {
        /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800932a:	2b80      	cmp	r3, #128	; 0x80
 800932c:	d009      	beq.n	8009342 <HAL_SAI_Abort+0xd2>
        {
          status = HAL_ERROR;
 800932e:	2301      	movs	r3, #1
 8009330:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009338:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      }
    }
  }

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	2200      	movs	r2, #0
 8009348:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009352:	619a      	str	r2, [r3, #24]

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	f000 fa9f 	bl	8009898 <SAI_Disable>
 800935a:	4603      	mov	r3, r0
 800935c:	2b00      	cmp	r3, #0
 800935e:	d001      	beq.n	8009364 <HAL_SAI_Abort+0xf4>
  {
    status = HAL_ERROR;
 8009360:	2301      	movs	r3, #1
 8009362:	73fb      	strb	r3, [r7, #15]
  }

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	685a      	ldr	r2, [r3, #4]
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f042 0208 	orr.w	r2, r2, #8
 8009372:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2201      	movs	r2, #1
 8009378:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2200      	movs	r2, #0
 8009380:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return status;
 8009384:	7bfb      	ldrb	r3, [r7, #15]
}
 8009386:	4618      	mov	r0, r3
 8009388:	3710      	adds	r7, #16
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}
	...

08009390 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b084      	sub	sp, #16
 8009394:	af00      	add	r7, sp, #0
 8009396:	60f8      	str	r0, [r7, #12]
 8009398:	60b9      	str	r1, [r7, #8]
 800939a:	4613      	mov	r3, r2
 800939c:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d002      	beq.n	80093aa <HAL_SAI_Receive_DMA+0x1a>
 80093a4:	88fb      	ldrh	r3, [r7, #6]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d101      	bne.n	80093ae <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 80093aa:	2301      	movs	r3, #1
 80093ac:	e079      	b.n	80094a2 <HAL_SAI_Receive_DMA+0x112>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80093b4:	b2db      	uxtb	r3, r3
 80093b6:	2b01      	cmp	r3, #1
 80093b8:	d172      	bne.n	80094a0 <HAL_SAI_Receive_DMA+0x110>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80093c0:	2b01      	cmp	r3, #1
 80093c2:	d101      	bne.n	80093c8 <HAL_SAI_Receive_DMA+0x38>
 80093c4:	2302      	movs	r3, #2
 80093c6:	e06c      	b.n	80094a2 <HAL_SAI_Receive_DMA+0x112>
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	2201      	movs	r2, #1
 80093cc:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	68ba      	ldr	r2, [r7, #8]
 80093d4:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	88fa      	ldrh	r2, [r7, #6]
 80093da:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	88fa      	ldrh	r2, [r7, #6]
 80093e2:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	2200      	movs	r2, #0
 80093ea:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	2222      	movs	r2, #34	; 0x22
 80093f2:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093fc:	4a2b      	ldr	r2, [pc, #172]	; (80094ac <HAL_SAI_Receive_DMA+0x11c>)
 80093fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009406:	4a2a      	ldr	r2, [pc, #168]	; (80094b0 <HAL_SAI_Receive_DMA+0x120>)
 8009408:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009410:	4a28      	ldr	r2, [pc, #160]	; (80094b4 <HAL_SAI_Receive_DMA+0x124>)
 8009412:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800941a:	2200      	movs	r2, #0
 800941c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	331c      	adds	r3, #28
 800942a:	4619      	mov	r1, r3
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009430:	461a      	mov	r2, r3
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8009438:	f7f9 fdfc 	bl	8003034 <HAL_DMA_Start_IT>
 800943c:	4603      	mov	r3, r0
 800943e:	2b00      	cmp	r3, #0
 8009440:	d005      	beq.n	800944e <HAL_SAI_Receive_DMA+0xbe>
    {
      __HAL_UNLOCK(hsai);
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	2200      	movs	r2, #0
 8009446:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 800944a:	2301      	movs	r3, #1
 800944c:	e029      	b.n	80094a2 <HAL_SAI_Receive_DMA+0x112>
    }

    /* Enable the interrupts for error handling */

    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800944e:	2100      	movs	r1, #0
 8009450:	68f8      	ldr	r0, [r7, #12]
 8009452:	f000 f9e9 	bl	8009828 <SAI_InterruptFlag>
 8009456:	4601      	mov	r1, r0
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	691a      	ldr	r2, [r3, #16]
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	430a      	orrs	r2, r1
 8009464:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	681a      	ldr	r2, [r3, #0]
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009474:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009480:	2b00      	cmp	r3, #0
 8009482:	d107      	bne.n	8009494 <HAL_SAI_Receive_DMA+0x104>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	681a      	ldr	r2, [r3, #0]
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8009492:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	2200      	movs	r2, #0
 8009498:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 800949c:	2300      	movs	r3, #0
 800949e:	e000      	b.n	80094a2 <HAL_SAI_Receive_DMA+0x112>
  }
  else
  {
    return HAL_BUSY;
 80094a0:	2302      	movs	r3, #2
  }
}
 80094a2:	4618      	mov	r0, r3
 80094a4:	3710      	adds	r7, #16
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}
 80094aa:	bf00      	nop
 80094ac:	0800996d 	.word	0x0800996d
 80094b0:	0800990d 	.word	0x0800990d
 80094b4:	08009989 	.word	0x08009989

080094b8 <HAL_SAI_IRQHandler>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b086      	sub	sp, #24
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
  if (hsai->State != HAL_SAI_STATE_RESET)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80094c6:	b2db      	uxtb	r3, r3
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	f000 81a7 	beq.w	800981c <HAL_SAI_IRQHandler+0x364>
  {
    uint32_t itflags = hsai->Instance->SR;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	695b      	ldr	r3, [r3, #20]
 80094d4:	617b      	str	r3, [r7, #20]
    uint32_t itsources = hsai->Instance->IMR;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	691b      	ldr	r3, [r3, #16]
 80094dc:	613b      	str	r3, [r7, #16]
    uint32_t cr1config = hsai->Instance->CR1;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	60fb      	str	r3, [r7, #12]
    uint32_t tmperror;

    /* SAI Fifo request interrupt occurred ------------------------------------*/
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 80094e6:	697b      	ldr	r3, [r7, #20]
 80094e8:	f003 0308 	and.w	r3, r3, #8
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d00a      	beq.n	8009506 <HAL_SAI_IRQHandler+0x4e>
 80094f0:	693b      	ldr	r3, [r7, #16]
 80094f2:	f003 0308 	and.w	r3, r3, #8
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d005      	beq.n	8009506 <HAL_SAI_IRQHandler+0x4e>
    {
      hsai->InterruptServiceRoutine(hsai);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	4798      	blx	r3
 8009504:	e18a      	b.n	800981c <HAL_SAI_IRQHandler+0x364>
    }
    /* SAI Overrun error interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 8009506:	697b      	ldr	r3, [r7, #20]
 8009508:	f003 0301 	and.w	r3, r3, #1
 800950c:	2b00      	cmp	r3, #0
 800950e:	d01e      	beq.n	800954e <HAL_SAI_IRQHandler+0x96>
 8009510:	693b      	ldr	r3, [r7, #16]
 8009512:	f003 0301 	and.w	r3, r3, #1
 8009516:	2b00      	cmp	r3, #0
 8009518:	d019      	beq.n	800954e <HAL_SAI_IRQHandler+0x96>
    {
      /* Clear the SAI Overrun flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	2201      	movs	r2, #1
 8009520:	619a      	str	r2, [r3, #24]
      /* Get the SAI error code */
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8009528:	b2db      	uxtb	r3, r3
 800952a:	2b22      	cmp	r3, #34	; 0x22
 800952c:	d101      	bne.n	8009532 <HAL_SAI_IRQHandler+0x7a>
 800952e:	2301      	movs	r3, #1
 8009530:	e000      	b.n	8009534 <HAL_SAI_IRQHandler+0x7c>
 8009532:	2302      	movs	r3, #2
 8009534:	60bb      	str	r3, [r7, #8]
      /* Change the SAI error code */
      hsai->ErrorCode |= tmperror;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	431a      	orrs	r2, r3
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f7f7 f84a 	bl	80005e0 <HAL_SAI_ErrorCallback>
 800954c:	e166      	b.n	800981c <HAL_SAI_IRQHandler+0x364>
#endif
    }
    /* SAI mutedet interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 800954e:	697b      	ldr	r3, [r7, #20]
 8009550:	f003 0302 	and.w	r3, r3, #2
 8009554:	2b00      	cmp	r3, #0
 8009556:	d013      	beq.n	8009580 <HAL_SAI_IRQHandler+0xc8>
 8009558:	693b      	ldr	r3, [r7, #16]
 800955a:	f003 0302 	and.w	r3, r3, #2
 800955e:	2b00      	cmp	r3, #0
 8009560:	d00e      	beq.n	8009580 <HAL_SAI_IRQHandler+0xc8>
    {
      /* Clear the SAI mutedet flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	2202      	movs	r2, #2
 8009568:	619a      	str	r2, [r3, #24]
      /* call the call back function */
      if (hsai->mutecallback != NULL)
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009570:	2b00      	cmp	r3, #0
 8009572:	f000 8153 	beq.w	800981c <HAL_SAI_IRQHandler+0x364>
      {
        /* inform the user that an RX mute event has been detected */
        hsai->mutecallback();
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800957c:	4798      	blx	r3
      if (hsai->mutecallback != NULL)
 800957e:	e14d      	b.n	800981c <HAL_SAI_IRQHandler+0x364>
      }
    }
    /* SAI AFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 8009580:	697b      	ldr	r3, [r7, #20]
 8009582:	f003 0320 	and.w	r3, r3, #32
 8009586:	2b00      	cmp	r3, #0
 8009588:	d05b      	beq.n	8009642 <HAL_SAI_IRQHandler+0x18a>
 800958a:	693b      	ldr	r3, [r7, #16]
 800958c:	f003 0320 	and.w	r3, r3, #32
 8009590:	2b00      	cmp	r3, #0
 8009592:	d056      	beq.n	8009642 <HAL_SAI_IRQHandler+0x18a>
    {
      /* Clear the SAI AFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	2220      	movs	r2, #32
 800959a:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80095a2:	f043 0204 	orr.w	r2, r3, #4
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d03e      	beq.n	8009634 <HAL_SAI_IRQHandler+0x17c>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d018      	beq.n	80095f2 <HAL_SAI_IRQHandler+0x13a>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80095c6:	4a97      	ldr	r2, [pc, #604]	; (8009824 <HAL_SAI_IRQHandler+0x36c>)
 80095c8:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80095d0:	4618      	mov	r0, r3
 80095d2:	f7fa fab7 	bl	8003b44 <HAL_DMA_Abort_IT>
 80095d6:	4603      	mov	r3, r0
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d00a      	beq.n	80095f2 <HAL_SAI_IRQHandler+0x13a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80095e2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 80095ec:	6878      	ldr	r0, [r7, #4]
 80095ee:	f7f6 fff7 	bl	80005e0 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	f000 810a 	beq.w	8009812 <HAL_SAI_IRQHandler+0x35a>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009604:	4a87      	ldr	r2, [pc, #540]	; (8009824 <HAL_SAI_IRQHandler+0x36c>)
 8009606:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800960e:	4618      	mov	r0, r3
 8009610:	f7fa fa98 	bl	8003b44 <HAL_DMA_Abort_IT>
 8009614:	4603      	mov	r3, r0
 8009616:	2b00      	cmp	r3, #0
 8009618:	f000 80fb 	beq.w	8009812 <HAL_SAI_IRQHandler+0x35a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009622:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800962c:	6878      	ldr	r0, [r7, #4]
 800962e:	f7f6 ffd7 	bl	80005e0 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8009632:	e0ee      	b.n	8009812 <HAL_SAI_IRQHandler+0x35a>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	f7ff fe1b 	bl	8009270 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	f7f6 ffd0 	bl	80005e0 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8009640:	e0e7      	b.n	8009812 <HAL_SAI_IRQHandler+0x35a>
#endif
      }
    }
    /* SAI LFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 8009642:	697b      	ldr	r3, [r7, #20]
 8009644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009648:	2b00      	cmp	r3, #0
 800964a:	d05b      	beq.n	8009704 <HAL_SAI_IRQHandler+0x24c>
 800964c:	693b      	ldr	r3, [r7, #16]
 800964e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009652:	2b00      	cmp	r3, #0
 8009654:	d056      	beq.n	8009704 <HAL_SAI_IRQHandler+0x24c>
    {
      /* Clear the SAI LFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	2240      	movs	r2, #64	; 0x40
 800965c:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009664:	f043 0208 	orr.w	r2, r3, #8
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009674:	2b00      	cmp	r3, #0
 8009676:	d03e      	beq.n	80096f6 <HAL_SAI_IRQHandler+0x23e>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800967e:	2b00      	cmp	r3, #0
 8009680:	d018      	beq.n	80096b4 <HAL_SAI_IRQHandler+0x1fc>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009688:	4a66      	ldr	r2, [pc, #408]	; (8009824 <HAL_SAI_IRQHandler+0x36c>)
 800968a:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009692:	4618      	mov	r0, r3
 8009694:	f7fa fa56 	bl	8003b44 <HAL_DMA_Abort_IT>
 8009698:	4603      	mov	r3, r0
 800969a:	2b00      	cmp	r3, #0
 800969c:	d00a      	beq.n	80096b4 <HAL_SAI_IRQHandler+0x1fc>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80096a4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f7f6 ff96 	bl	80005e0 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	f000 80ab 	beq.w	8009816 <HAL_SAI_IRQHandler+0x35e>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80096c6:	4a57      	ldr	r2, [pc, #348]	; (8009824 <HAL_SAI_IRQHandler+0x36c>)
 80096c8:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80096d0:	4618      	mov	r0, r3
 80096d2:	f7fa fa37 	bl	8003b44 <HAL_DMA_Abort_IT>
 80096d6:	4603      	mov	r3, r0
 80096d8:	2b00      	cmp	r3, #0
 80096da:	f000 809c 	beq.w	8009816 <HAL_SAI_IRQHandler+0x35e>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80096e4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f7f6 ff76 	bl	80005e0 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80096f4:	e08f      	b.n	8009816 <HAL_SAI_IRQHandler+0x35e>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f7ff fdba 	bl	8009270 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 80096fc:	6878      	ldr	r0, [r7, #4]
 80096fe:	f7f6 ff6f 	bl	80005e0 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8009702:	e088      	b.n	8009816 <HAL_SAI_IRQHandler+0x35e>
#endif
      }
    }
    /* SAI WCKCFG interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 8009704:	697b      	ldr	r3, [r7, #20]
 8009706:	f003 0304 	and.w	r3, r3, #4
 800970a:	2b00      	cmp	r3, #0
 800970c:	d067      	beq.n	80097de <HAL_SAI_IRQHandler+0x326>
 800970e:	693b      	ldr	r3, [r7, #16]
 8009710:	f003 0304 	and.w	r3, r3, #4
 8009714:	2b00      	cmp	r3, #0
 8009716:	d062      	beq.n	80097de <HAL_SAI_IRQHandler+0x326>
    {
      /* Clear the SAI WCKCFG flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	2204      	movs	r2, #4
 800971e:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009726:	f043 0220 	orr.w	r2, r3, #32
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009736:	2b00      	cmp	r3, #0
 8009738:	d03c      	beq.n	80097b4 <HAL_SAI_IRQHandler+0x2fc>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009740:	2b00      	cmp	r3, #0
 8009742:	d018      	beq.n	8009776 <HAL_SAI_IRQHandler+0x2be>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800974a:	4a36      	ldr	r2, [pc, #216]	; (8009824 <HAL_SAI_IRQHandler+0x36c>)
 800974c:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009754:	4618      	mov	r0, r3
 8009756:	f7fa f9f5 	bl	8003b44 <HAL_DMA_Abort_IT>
 800975a:	4603      	mov	r3, r0
 800975c:	2b00      	cmp	r3, #0
 800975e:	d00a      	beq.n	8009776 <HAL_SAI_IRQHandler+0x2be>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009766:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f7f6 ff35 	bl	80005e0 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800977c:	2b00      	cmp	r3, #0
 800977e:	d04c      	beq.n	800981a <HAL_SAI_IRQHandler+0x362>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009786:	4a27      	ldr	r2, [pc, #156]	; (8009824 <HAL_SAI_IRQHandler+0x36c>)
 8009788:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009790:	4618      	mov	r0, r3
 8009792:	f7fa f9d7 	bl	8003b44 <HAL_DMA_Abort_IT>
 8009796:	4603      	mov	r3, r0
 8009798:	2b00      	cmp	r3, #0
 800979a:	d03e      	beq.n	800981a <HAL_SAI_IRQHandler+0x362>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80097a2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 80097ac:	6878      	ldr	r0, [r7, #4]
 80097ae:	f7f6 ff17 	bl	80005e0 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80097b2:	e032      	b.n	800981a <HAL_SAI_IRQHandler+0x362>
      }
      else
      {
        /* If WCKCFG occurs, SAI audio block is automatically disabled */
        /* Disable all interrupts and clear all flags */
        hsai->Instance->IMR = 0U;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	2200      	movs	r2, #0
 80097ba:	611a      	str	r2, [r3, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80097c4:	619a      	str	r2, [r3, #24]
        /* Set the SAI state to ready to be able to start again the process */
        hsai->State = HAL_SAI_STATE_READY;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2201      	movs	r2, #1
 80097ca:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

        /* Initialize XferCount */
        hsai->XferCount = 0U;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	2200      	movs	r2, #0
 80097d2:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

        /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f7f6 ff02 	bl	80005e0 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80097dc:	e01d      	b.n	800981a <HAL_SAI_IRQHandler+0x362>
#endif
      }
    }
    /* SAI CNRDY interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 80097de:	697b      	ldr	r3, [r7, #20]
 80097e0:	f003 0310 	and.w	r3, r3, #16
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d019      	beq.n	800981c <HAL_SAI_IRQHandler+0x364>
 80097e8:	693b      	ldr	r3, [r7, #16]
 80097ea:	f003 0310 	and.w	r3, r3, #16
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d014      	beq.n	800981c <HAL_SAI_IRQHandler+0x364>
    {
      /* Clear the SAI CNRDY flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	2210      	movs	r2, #16
 80097f8:	619a      	str	r2, [r3, #24]
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009800:	f043 0210 	orr.w	r2, r3, #16
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	f7f6 fee8 	bl	80005e0 <HAL_SAI_ErrorCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
 8009810:	e004      	b.n	800981c <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8009812:	bf00      	nop
 8009814:	e002      	b.n	800981c <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8009816:	bf00      	nop
 8009818:	e000      	b.n	800981c <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800981a:	bf00      	nop
}
 800981c:	bf00      	nop
 800981e:	3718      	adds	r7, #24
 8009820:	46bd      	mov	sp, r7
 8009822:	bd80      	pop	{r7, pc}
 8009824:	080099e7 	.word	0x080099e7

08009828 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 8009828:	b480      	push	{r7}
 800982a:	b085      	sub	sp, #20
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
 8009830:	460b      	mov	r3, r1
 8009832:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8009834:	2301      	movs	r3, #1
 8009836:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8009838:	78fb      	ldrb	r3, [r7, #3]
 800983a:	2b01      	cmp	r3, #1
 800983c:	d103      	bne.n	8009846 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	f043 0308 	orr.w	r3, r3, #8
 8009844:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800984a:	2b08      	cmp	r3, #8
 800984c:	d10b      	bne.n	8009866 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8009852:	2b03      	cmp	r3, #3
 8009854:	d003      	beq.n	800985e <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	685b      	ldr	r3, [r3, #4]
 800985a:	2b01      	cmp	r3, #1
 800985c:	d103      	bne.n	8009866 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	f043 0310 	orr.w	r3, r3, #16
 8009864:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	685b      	ldr	r3, [r3, #4]
 800986a:	2b03      	cmp	r3, #3
 800986c:	d003      	beq.n	8009876 <SAI_InterruptFlag+0x4e>
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	685b      	ldr	r3, [r3, #4]
 8009872:	2b02      	cmp	r3, #2
 8009874:	d104      	bne.n	8009880 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800987c:	60fb      	str	r3, [r7, #12]
 800987e:	e003      	b.n	8009888 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	f043 0304 	orr.w	r3, r3, #4
 8009886:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8009888:	68fb      	ldr	r3, [r7, #12]
}
 800988a:	4618      	mov	r0, r3
 800988c:	3714      	adds	r7, #20
 800988e:	46bd      	mov	sp, r7
 8009890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009894:	4770      	bx	lr
	...

08009898 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8009898:	b480      	push	{r7}
 800989a:	b085      	sub	sp, #20
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80098a0:	4b18      	ldr	r3, [pc, #96]	; (8009904 <SAI_Disable+0x6c>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	4a18      	ldr	r2, [pc, #96]	; (8009908 <SAI_Disable+0x70>)
 80098a6:	fba2 2303 	umull	r2, r3, r2, r3
 80098aa:	0b1b      	lsrs	r3, r3, #12
 80098ac:	009b      	lsls	r3, r3, #2
 80098ae:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80098b0:	2300      	movs	r3, #0
 80098b2:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	681a      	ldr	r2, [r3, #0]
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80098c2:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d10a      	bne.n	80098e0 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80098d0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 80098da:	2303      	movs	r3, #3
 80098dc:	72fb      	strb	r3, [r7, #11]
      break;
 80098de:	e009      	b.n	80098f4 <SAI_Disable+0x5c>
    }
    count--;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	3b01      	subs	r3, #1
 80098e4:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d1e7      	bne.n	80098c4 <SAI_Disable+0x2c>

  return status;
 80098f4:	7afb      	ldrb	r3, [r7, #11]
}
 80098f6:	4618      	mov	r0, r3
 80098f8:	3714      	adds	r7, #20
 80098fa:	46bd      	mov	sp, r7
 80098fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009900:	4770      	bx	lr
 8009902:	bf00      	nop
 8009904:	24000410 	.word	0x24000410
 8009908:	95cbec1b 	.word	0x95cbec1b

0800990c <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b084      	sub	sp, #16
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009918:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	69db      	ldr	r3, [r3, #28]
 800991e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009922:	d01c      	beq.n	800995e <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	681a      	ldr	r2, [r3, #0]
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8009932:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	2200      	movs	r2, #0
 8009938:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800993c:	2100      	movs	r1, #0
 800993e:	68f8      	ldr	r0, [r7, #12]
 8009940:	f7ff ff72 	bl	8009828 <SAI_InterruptFlag>
 8009944:	4603      	mov	r3, r0
 8009946:	43d9      	mvns	r1, r3
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	691a      	ldr	r2, [r3, #16]
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	400a      	ands	r2, r1
 8009954:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	2201      	movs	r2, #1
 800995a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800995e:	68f8      	ldr	r0, [r7, #12]
 8009960:	f7f7 fedd 	bl	800171e <HAL_SAI_RxCpltCallback>
#endif
}
 8009964:	bf00      	nop
 8009966:	3710      	adds	r7, #16
 8009968:	46bd      	mov	sp, r7
 800996a:	bd80      	pop	{r7, pc}

0800996c <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b084      	sub	sp, #16
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009978:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800997a:	68f8      	ldr	r0, [r7, #12]
 800997c:	f7f7 fec4 	bl	8001708 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 8009980:	bf00      	nop
 8009982:	3710      	adds	r7, #16
 8009984:	46bd      	mov	sp, r7
 8009986:	bd80      	pop	{r7, pc}

08009988 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b084      	sub	sp, #16
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009994:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f7fb fa42 	bl	8004e20 <HAL_DMA_GetError>
 800999c:	4603      	mov	r3, r0
 800999e:	2b02      	cmp	r3, #2
 80099a0:	d01d      	beq.n	80099de <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80099a8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	681a      	ldr	r2, [r3, #0]
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80099c0:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 80099c2:	68f8      	ldr	r0, [r7, #12]
 80099c4:	f7ff ff68 	bl	8009898 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	2201      	movs	r2, #1
 80099cc:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	2200      	movs	r2, #0
 80099d4:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 80099d8:	68f8      	ldr	r0, [r7, #12]
 80099da:	f7f6 fe01 	bl	80005e0 <HAL_SAI_ErrorCallback>
#endif
  }
}
 80099de:	bf00      	nop
 80099e0:	3710      	adds	r7, #16
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}

080099e6 <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80099e6:	b580      	push	{r7, lr}
 80099e8:	b084      	sub	sp, #16
 80099ea:	af00      	add	r7, sp, #0
 80099ec:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099f2:	60fb      	str	r3, [r7, #12]

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	681a      	ldr	r2, [r3, #0]
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8009a02:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	2200      	movs	r2, #0
 8009a0a:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009a14:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009a1c:	2b20      	cmp	r3, #32
 8009a1e:	d00a      	beq.n	8009a36 <SAI_DMAAbort+0x50>
  {
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 8009a20:	68f8      	ldr	r0, [r7, #12]
 8009a22:	f7ff ff39 	bl	8009898 <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	685a      	ldr	r2, [r3, #4]
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f042 0208 	orr.w	r2, r2, #8
 8009a34:	605a      	str	r2, [r3, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	2201      	movs	r2, #1
 8009a3a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	2200      	movs	r2, #0
 8009a42:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8009a46:	68f8      	ldr	r0, [r7, #12]
 8009a48:	f7f6 fdca 	bl	80005e0 <HAL_SAI_ErrorCallback>
#endif
}
 8009a4c:	bf00      	nop
 8009a4e:	3710      	adds	r7, #16
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bd80      	pop	{r7, pc}

08009a54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b0a8      	sub	sp, #160	; 0xa0
 8009a58:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009a5a:	f7f8 f90f 	bl	8001c7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009a5e:	f000 f849 	bl	8009af4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_CRC_Init();
 8009a62:	f000 f8b5 	bl	8009bd0 <MX_CRC_Init>
  MX_GPIO_Init();
 8009a66:	f000 f945 	bl	8009cf4 <MX_GPIO_Init>
  MX_BDMA_Init();
 8009a6a:	f000 f8f3 	bl	8009c54 <MX_BDMA_Init>

  //MX_SAI4_Init();

  MX_PDM2PCM_Init();
 8009a6e:	f000 f98f 	bl	8009d90 <MX_PDM2PCM_Init>
  MX_DMA_Init();
 8009a72:	f000 f917 	bl	8009ca4 <MX_DMA_Init>
  //MX_DFSDM1_Init();



  /* USER CODE BEGIN 2 */
  BSP_LED_Init(LED_GREEN);
 8009a76:	2000      	movs	r0, #0
 8009a78:	f7f6 fc4a 	bl	8000310 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8009a7c:	2001      	movs	r0, #1
 8009a7e:	f7f6 fc47 	bl	8000310 <BSP_LED_Init>
  BSP_LED_Off(LED_GREEN);
 8009a82:	2000      	movs	r0, #0
 8009a84:	f7f6 fcc0 	bl	8000408 <BSP_LED_Off>
  BSP_LED_Off(LED_RED);
 8009a88:	2001      	movs	r0, #1
 8009a8a:	f7f6 fcbd 	bl	8000408 <BSP_LED_Off>

  BSP_AUDIO_Init_t haudio_in;
  haudio_in.Device = AUDIO_IN_DEVICE_DIGITAL_MIC1;
 8009a8e:	2310      	movs	r3, #16
 8009a90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  haudio_in.ChannelsNbr = 1;
 8009a94:	2301      	movs	r3, #1
 8009a96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  haudio_in.SampleRate = AUDIO_FREQUENCY_16K;
 8009a9a:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 8009a9e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  haudio_in.BitsPerSample = AUDIO_RESOLUTION_8B;
 8009aa2:	2308      	movs	r3, #8
 8009aa4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  haudio_in.Volume = 50;
 8009aa8:	2332      	movs	r3, #50	; 0x32
 8009aaa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  int32_t in_init_status = BSP_AUDIO_IN_Init(PDM, &haudio_in);
 8009aae:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009ab2:	4619      	mov	r1, r3
 8009ab4:	2001      	movs	r0, #1
 8009ab6:	f7f7 f82d 	bl	8000b14 <BSP_AUDIO_IN_Init>
 8009aba:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
  int32_t convert_status = BSP_AUDIO_IN_PDMToPCM_Init(PDM, SAI_AUDIO_FREQUENCY_16K, 1, 1);
 8009abe:	2301      	movs	r3, #1
 8009ac0:	2201      	movs	r2, #1
 8009ac2:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
 8009ac6:	2001      	movs	r0, #1
 8009ac8:	f7f7 fd04 	bl	80014d4 <BSP_AUDIO_IN_PDMToPCM_Init>
 8009acc:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

  uint8_t mic_buffer[PDM_BUFFER_SIZE] = {0};
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	603b      	str	r3, [r7, #0]
 8009ad4:	1d3b      	adds	r3, r7, #4
 8009ad6:	227c      	movs	r2, #124	; 0x7c
 8009ad8:	2100      	movs	r1, #0
 8009ada:	4618      	mov	r0, r3
 8009adc:	f002 fb0e 	bl	800c0fc <memset>
  // uint16_t speaker_buffer[PCM_BUFFER_SIZE] = {0};
  // @param  Instance  Audio IN instance: 0 for SAI, 1 for SAI PDM and 2 for DFSDM
  uint8_t record_status = BSP_AUDIO_IN_RecordPDM(PDM, mic_buffer, PDM_BUFFER_SIZE);
 8009ae0:	463b      	mov	r3, r7
 8009ae2:	2280      	movs	r2, #128	; 0x80
 8009ae4:	4619      	mov	r1, r3
 8009ae6:	2001      	movs	r0, #1
 8009ae8:	f7f7 fd98 	bl	800161c <BSP_AUDIO_IN_RecordPDM>
 8009aec:	4603      	mov	r3, r0
 8009aee:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8009af2:	e7fe      	b.n	8009af2 <main+0x9e>

08009af4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b09c      	sub	sp, #112	; 0x70
 8009af8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009afa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009afe:	224c      	movs	r2, #76	; 0x4c
 8009b00:	2100      	movs	r1, #0
 8009b02:	4618      	mov	r0, r3
 8009b04:	f002 fafa 	bl	800c0fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009b08:	1d3b      	adds	r3, r7, #4
 8009b0a:	2220      	movs	r2, #32
 8009b0c:	2100      	movs	r1, #0
 8009b0e:	4618      	mov	r0, r3
 8009b10:	f002 faf4 	bl	800c0fc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8009b14:	2004      	movs	r0, #4
 8009b16:	f7fc f851 	bl	8005bbc <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	603b      	str	r3, [r7, #0]
 8009b1e:	4b2b      	ldr	r3, [pc, #172]	; (8009bcc <SystemClock_Config+0xd8>)
 8009b20:	699b      	ldr	r3, [r3, #24]
 8009b22:	4a2a      	ldr	r2, [pc, #168]	; (8009bcc <SystemClock_Config+0xd8>)
 8009b24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009b28:	6193      	str	r3, [r2, #24]
 8009b2a:	4b28      	ldr	r3, [pc, #160]	; (8009bcc <SystemClock_Config+0xd8>)
 8009b2c:	699b      	ldr	r3, [r3, #24]
 8009b2e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009b32:	603b      	str	r3, [r7, #0]
 8009b34:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8009b36:	bf00      	nop
 8009b38:	4b24      	ldr	r3, [pc, #144]	; (8009bcc <SystemClock_Config+0xd8>)
 8009b3a:	699b      	ldr	r3, [r3, #24]
 8009b3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009b40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b44:	d1f8      	bne.n	8009b38 <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8009b46:	2302      	movs	r3, #2
 8009b48:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8009b4e:	2340      	movs	r3, #64	; 0x40
 8009b50:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009b52:	2302      	movs	r3, #2
 8009b54:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8009b56:	2300      	movs	r3, #0
 8009b58:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8009b5a:	2304      	movs	r3, #4
 8009b5c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8009b5e:	2318      	movs	r3, #24
 8009b60:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8009b62:	2301      	movs	r3, #1
 8009b64:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 125;
 8009b66:	237d      	movs	r3, #125	; 0x7d
 8009b68:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8009b6a:	2302      	movs	r3, #2
 8009b6c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8009b6e:	230c      	movs	r3, #12
 8009b70:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8009b72:	2300      	movs	r3, #0
 8009b74:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8009b76:	2300      	movs	r3, #0
 8009b78:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009b7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009b7e:	4618      	mov	r0, r3
 8009b80:	f7fc f876 	bl	8005c70 <HAL_RCC_OscConfig>
 8009b84:	4603      	mov	r3, r0
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d001      	beq.n	8009b8e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8009b8a:	f000 f8fb 	bl	8009d84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009b8e:	233f      	movs	r3, #63	; 0x3f
 8009b90:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009b92:	2303      	movs	r3, #3
 8009b94:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8009b96:	2300      	movs	r3, #0
 8009b98:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8009b9a:	2308      	movs	r3, #8
 8009b9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8009b9e:	2340      	movs	r3, #64	; 0x40
 8009ba0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8009ba2:	2340      	movs	r3, #64	; 0x40
 8009ba4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8009ba6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009baa:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8009bac:	2340      	movs	r3, #64	; 0x40
 8009bae:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8009bb0:	1d3b      	adds	r3, r7, #4
 8009bb2:	2102      	movs	r1, #2
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	f7fc fc07 	bl	80063c8 <HAL_RCC_ClockConfig>
 8009bba:	4603      	mov	r3, r0
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d001      	beq.n	8009bc4 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8009bc0:	f000 f8e0 	bl	8009d84 <Error_Handler>
  }
}
 8009bc4:	bf00      	nop
 8009bc6:	3770      	adds	r7, #112	; 0x70
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	bd80      	pop	{r7, pc}
 8009bcc:	58024800 	.word	0x58024800

08009bd0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b082      	sub	sp, #8
 8009bd4:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8009bd6:	4b1c      	ldr	r3, [pc, #112]	; (8009c48 <MX_CRC_Init+0x78>)
 8009bd8:	4a1c      	ldr	r2, [pc, #112]	; (8009c4c <MX_CRC_Init+0x7c>)
 8009bda:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8009bdc:	4b1a      	ldr	r3, [pc, #104]	; (8009c48 <MX_CRC_Init+0x78>)
 8009bde:	2200      	movs	r2, #0
 8009be0:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8009be2:	4b19      	ldr	r3, [pc, #100]	; (8009c48 <MX_CRC_Init+0x78>)
 8009be4:	2200      	movs	r2, #0
 8009be6:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8009be8:	4b17      	ldr	r3, [pc, #92]	; (8009c48 <MX_CRC_Init+0x78>)
 8009bea:	2200      	movs	r2, #0
 8009bec:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8009bee:	4b16      	ldr	r3, [pc, #88]	; (8009c48 <MX_CRC_Init+0x78>)
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8009bf4:	4b14      	ldr	r3, [pc, #80]	; (8009c48 <MX_CRC_Init+0x78>)
 8009bf6:	2201      	movs	r2, #1
 8009bf8:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8009bfa:	4813      	ldr	r0, [pc, #76]	; (8009c48 <MX_CRC_Init+0x78>)
 8009bfc:	f7f8 f9e0 	bl	8001fc0 <HAL_CRC_Init>
 8009c00:	4603      	mov	r3, r0
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d001      	beq.n	8009c0a <MX_CRC_Init+0x3a>
  {
    Error_Handler();
 8009c06:	f000 f8bd 	bl	8009d84 <Error_Handler>
  }
  __HAL_CRC_DR_RESET(&hcrc);
 8009c0a:	4b0f      	ldr	r3, [pc, #60]	; (8009c48 <MX_CRC_Init+0x78>)
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	689a      	ldr	r2, [r3, #8]
 8009c10:	4b0d      	ldr	r3, [pc, #52]	; (8009c48 <MX_CRC_Init+0x78>)
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	f042 0201 	orr.w	r2, r2, #1
 8009c18:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN CRC_Init 2 */

  __HAL_RCC_CRC_CLK_ENABLE();
 8009c1a:	4b0d      	ldr	r3, [pc, #52]	; (8009c50 <MX_CRC_Init+0x80>)
 8009c1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009c20:	4a0b      	ldr	r2, [pc, #44]	; (8009c50 <MX_CRC_Init+0x80>)
 8009c22:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009c26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009c2a:	4b09      	ldr	r3, [pc, #36]	; (8009c50 <MX_CRC_Init+0x80>)
 8009c2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009c30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009c34:	607b      	str	r3, [r7, #4]
 8009c36:	687b      	ldr	r3, [r7, #4]
  HAL_CRC_MspInit(&hcrc);
 8009c38:	4803      	ldr	r0, [pc, #12]	; (8009c48 <MX_CRC_Init+0x78>)
 8009c3a:	f000 f8ed 	bl	8009e18 <HAL_CRC_MspInit>

  /* USER CODE END CRC_Init 2 */

}
 8009c3e:	bf00      	nop
 8009c40:	3708      	adds	r7, #8
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}
 8009c46:	bf00      	nop
 8009c48:	24000cf8 	.word	0x24000cf8
 8009c4c:	58024c00 	.word	0x58024c00
 8009c50:	58024400 	.word	0x58024400

08009c54 <MX_BDMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_BDMA_Init(void)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b082      	sub	sp, #8
 8009c58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 8009c5a:	4b11      	ldr	r3, [pc, #68]	; (8009ca0 <MX_BDMA_Init+0x4c>)
 8009c5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009c60:	4a0f      	ldr	r2, [pc, #60]	; (8009ca0 <MX_BDMA_Init+0x4c>)
 8009c62:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009c66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009c6a:	4b0d      	ldr	r3, [pc, #52]	; (8009ca0 <MX_BDMA_Init+0x4c>)
 8009c6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009c70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009c74:	607b      	str	r3, [r7, #4]
 8009c76:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMAMUX2_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX2_OVR_IRQn, 0, 0);
 8009c78:	2200      	movs	r2, #0
 8009c7a:	2100      	movs	r1, #0
 8009c7c:	2080      	movs	r0, #128	; 0x80
 8009c7e:	f7f8 f96a 	bl	8001f56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX2_OVR_IRQn);
 8009c82:	2080      	movs	r0, #128	; 0x80
 8009c84:	f7f8 f981 	bl	8001f8a <HAL_NVIC_EnableIRQ>
  // CHANGING TO CHANNEL1
  /* BDMA_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel1_IRQn, 0, 0);
 8009c88:	2200      	movs	r2, #0
 8009c8a:	2100      	movs	r1, #0
 8009c8c:	2082      	movs	r0, #130	; 0x82
 8009c8e:	f7f8 f962 	bl	8001f56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel1_IRQn);
 8009c92:	2082      	movs	r0, #130	; 0x82
 8009c94:	f7f8 f979 	bl	8001f8a <HAL_NVIC_EnableIRQ>

}
 8009c98:	bf00      	nop
 8009c9a:	3708      	adds	r7, #8
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bd80      	pop	{r7, pc}
 8009ca0:	58024400 	.word	0x58024400

08009ca4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b082      	sub	sp, #8
 8009ca8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8009caa:	4b11      	ldr	r3, [pc, #68]	; (8009cf0 <MX_DMA_Init+0x4c>)
 8009cac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009cb0:	4a0f      	ldr	r2, [pc, #60]	; (8009cf0 <MX_DMA_Init+0x4c>)
 8009cb2:	f043 0301 	orr.w	r3, r3, #1
 8009cb6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8009cba:	4b0d      	ldr	r3, [pc, #52]	; (8009cf0 <MX_DMA_Init+0x4c>)
 8009cbc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009cc0:	f003 0301 	and.w	r3, r3, #1
 8009cc4:	607b      	str	r3, [r7, #4]
 8009cc6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8009cc8:	2200      	movs	r2, #0
 8009cca:	2100      	movs	r1, #0
 8009ccc:	200c      	movs	r0, #12
 8009cce:	f7f8 f942 	bl	8001f56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8009cd2:	200c      	movs	r0, #12
 8009cd4:	f7f8 f959 	bl	8001f8a <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 0, 0);
 8009cd8:	2200      	movs	r2, #0
 8009cda:	2100      	movs	r1, #0
 8009cdc:	2066      	movs	r0, #102	; 0x66
 8009cde:	f7f8 f93a 	bl	8001f56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
 8009ce2:	2066      	movs	r0, #102	; 0x66
 8009ce4:	f7f8 f951 	bl	8001f8a <HAL_NVIC_EnableIRQ>

}
 8009ce8:	bf00      	nop
 8009cea:	3708      	adds	r7, #8
 8009cec:	46bd      	mov	sp, r7
 8009cee:	bd80      	pop	{r7, pc}
 8009cf0:	58024400 	.word	0x58024400

08009cf4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	b085      	sub	sp, #20
 8009cf8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009cfa:	4b21      	ldr	r3, [pc, #132]	; (8009d80 <MX_GPIO_Init+0x8c>)
 8009cfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009d00:	4a1f      	ldr	r2, [pc, #124]	; (8009d80 <MX_GPIO_Init+0x8c>)
 8009d02:	f043 0301 	orr.w	r3, r3, #1
 8009d06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009d0a:	4b1d      	ldr	r3, [pc, #116]	; (8009d80 <MX_GPIO_Init+0x8c>)
 8009d0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009d10:	f003 0301 	and.w	r3, r3, #1
 8009d14:	60fb      	str	r3, [r7, #12]
 8009d16:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8009d18:	4b19      	ldr	r3, [pc, #100]	; (8009d80 <MX_GPIO_Init+0x8c>)
 8009d1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009d1e:	4a18      	ldr	r2, [pc, #96]	; (8009d80 <MX_GPIO_Init+0x8c>)
 8009d20:	f043 0310 	orr.w	r3, r3, #16
 8009d24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009d28:	4b15      	ldr	r3, [pc, #84]	; (8009d80 <MX_GPIO_Init+0x8c>)
 8009d2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009d2e:	f003 0310 	and.w	r3, r3, #16
 8009d32:	60bb      	str	r3, [r7, #8]
 8009d34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8009d36:	4b12      	ldr	r3, [pc, #72]	; (8009d80 <MX_GPIO_Init+0x8c>)
 8009d38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009d3c:	4a10      	ldr	r2, [pc, #64]	; (8009d80 <MX_GPIO_Init+0x8c>)
 8009d3e:	f043 0308 	orr.w	r3, r3, #8
 8009d42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009d46:	4b0e      	ldr	r3, [pc, #56]	; (8009d80 <MX_GPIO_Init+0x8c>)
 8009d48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009d4c:	f003 0308 	and.w	r3, r3, #8
 8009d50:	607b      	str	r3, [r7, #4]
 8009d52:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8009d54:	4b0a      	ldr	r3, [pc, #40]	; (8009d80 <MX_GPIO_Init+0x8c>)
 8009d56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009d5a:	4a09      	ldr	r2, [pc, #36]	; (8009d80 <MX_GPIO_Init+0x8c>)
 8009d5c:	f043 0320 	orr.w	r3, r3, #32
 8009d60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009d64:	4b06      	ldr	r3, [pc, #24]	; (8009d80 <MX_GPIO_Init+0x8c>)
 8009d66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009d6a:	f003 0320 	and.w	r3, r3, #32
 8009d6e:	603b      	str	r3, [r7, #0]
 8009d70:	683b      	ldr	r3, [r7, #0]

}
 8009d72:	bf00      	nop
 8009d74:	3714      	adds	r7, #20
 8009d76:	46bd      	mov	sp, r7
 8009d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7c:	4770      	bx	lr
 8009d7e:	bf00      	nop
 8009d80:	58024400 	.word	0x58024400

08009d84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009d84:	b480      	push	{r7}
 8009d86:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8009d88:	b672      	cpsid	i
}
 8009d8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8009d8c:	e7fe      	b.n	8009d8c <Error_Handler+0x8>
	...

08009d90 <MX_PDM2PCM_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* PDM2PCM init function */
void MX_PDM2PCM_Init(void)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

   /**
  */
  PDM1_filter_handler.bit_order = PDM_FILTER_BIT_ORDER_LSB;
 8009d94:	4b10      	ldr	r3, [pc, #64]	; (8009dd8 <MX_PDM2PCM_Init+0x48>)
 8009d96:	2200      	movs	r2, #0
 8009d98:	801a      	strh	r2, [r3, #0]
  PDM1_filter_handler.endianness = PDM_FILTER_ENDIANNESS_BE;
 8009d9a:	4b0f      	ldr	r3, [pc, #60]	; (8009dd8 <MX_PDM2PCM_Init+0x48>)
 8009d9c:	2201      	movs	r2, #1
 8009d9e:	805a      	strh	r2, [r3, #2]
  PDM1_filter_handler.high_pass_tap = 2104533974;
 8009da0:	4b0d      	ldr	r3, [pc, #52]	; (8009dd8 <MX_PDM2PCM_Init+0x48>)
 8009da2:	4a0e      	ldr	r2, [pc, #56]	; (8009ddc <MX_PDM2PCM_Init+0x4c>)
 8009da4:	605a      	str	r2, [r3, #4]
  PDM1_filter_handler.in_ptr_channels = 2;
 8009da6:	4b0c      	ldr	r3, [pc, #48]	; (8009dd8 <MX_PDM2PCM_Init+0x48>)
 8009da8:	2202      	movs	r2, #2
 8009daa:	811a      	strh	r2, [r3, #8]
  PDM1_filter_handler.out_ptr_channels = 2;
 8009dac:	4b0a      	ldr	r3, [pc, #40]	; (8009dd8 <MX_PDM2PCM_Init+0x48>)
 8009dae:	2202      	movs	r2, #2
 8009db0:	815a      	strh	r2, [r3, #10]
  PDM_Filter_Init(&PDM1_filter_handler);
 8009db2:	4809      	ldr	r0, [pc, #36]	; (8009dd8 <MX_PDM2PCM_Init+0x48>)
 8009db4:	f001 ffae 	bl	800bd14 <PDM_Filter_Init>

  PDM1_filter_config.decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 8009db8:	4b09      	ldr	r3, [pc, #36]	; (8009de0 <MX_PDM2PCM_Init+0x50>)
 8009dba:	2202      	movs	r2, #2
 8009dbc:	801a      	strh	r2, [r3, #0]
  PDM1_filter_config.output_samples_number = 16;
 8009dbe:	4b08      	ldr	r3, [pc, #32]	; (8009de0 <MX_PDM2PCM_Init+0x50>)
 8009dc0:	2210      	movs	r2, #16
 8009dc2:	805a      	strh	r2, [r3, #2]
  PDM1_filter_config.mic_gain = 0;
 8009dc4:	4b06      	ldr	r3, [pc, #24]	; (8009de0 <MX_PDM2PCM_Init+0x50>)
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	809a      	strh	r2, [r3, #4]
  PDM_Filter_setConfig(&PDM1_filter_handler, &PDM1_filter_config);
 8009dca:	4905      	ldr	r1, [pc, #20]	; (8009de0 <MX_PDM2PCM_Init+0x50>)
 8009dcc:	4802      	ldr	r0, [pc, #8]	; (8009dd8 <MX_PDM2PCM_Init+0x48>)
 8009dce:	f002 f871 	bl	800beb4 <PDM_Filter_setConfig>

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 8009dd2:	bf00      	nop
 8009dd4:	bd80      	pop	{r7, pc}
 8009dd6:	bf00      	nop
 8009dd8:	24000f7c 	.word	0x24000f7c
 8009ddc:	7d70a3d6 	.word	0x7d70a3d6
 8009de0:	24000f74 	.word	0x24000f74

08009de4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009de4:	b480      	push	{r7}
 8009de6:	b083      	sub	sp, #12
 8009de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009dea:	4b0a      	ldr	r3, [pc, #40]	; (8009e14 <HAL_MspInit+0x30>)
 8009dec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009df0:	4a08      	ldr	r2, [pc, #32]	; (8009e14 <HAL_MspInit+0x30>)
 8009df2:	f043 0302 	orr.w	r3, r3, #2
 8009df6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009dfa:	4b06      	ldr	r3, [pc, #24]	; (8009e14 <HAL_MspInit+0x30>)
 8009dfc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009e00:	f003 0302 	and.w	r3, r3, #2
 8009e04:	607b      	str	r3, [r7, #4]
 8009e06:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009e08:	bf00      	nop
 8009e0a:	370c      	adds	r7, #12
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e12:	4770      	bx	lr
 8009e14:	58024400 	.word	0x58024400

08009e18 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b085      	sub	sp, #20
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	4a0b      	ldr	r2, [pc, #44]	; (8009e54 <HAL_CRC_MspInit+0x3c>)
 8009e26:	4293      	cmp	r3, r2
 8009e28:	d10e      	bne.n	8009e48 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8009e2a:	4b0b      	ldr	r3, [pc, #44]	; (8009e58 <HAL_CRC_MspInit+0x40>)
 8009e2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009e30:	4a09      	ldr	r2, [pc, #36]	; (8009e58 <HAL_CRC_MspInit+0x40>)
 8009e32:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009e36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009e3a:	4b07      	ldr	r3, [pc, #28]	; (8009e58 <HAL_CRC_MspInit+0x40>)
 8009e3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009e40:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009e44:	60fb      	str	r3, [r7, #12]
 8009e46:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8009e48:	bf00      	nop
 8009e4a:	3714      	adds	r7, #20
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e52:	4770      	bx	lr
 8009e54:	58024c00 	.word	0x58024c00
 8009e58:	58024400 	.word	0x58024400

08009e5c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b0b0      	sub	sp, #192	; 0xc0
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009e64:	f107 030c 	add.w	r3, r7, #12
 8009e68:	22b4      	movs	r2, #180	; 0xb4
 8009e6a:	2100      	movs	r1, #0
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	f002 f945 	bl	800c0fc <memset>
  if(DFSDM1_Init == 0)
 8009e72:	4b15      	ldr	r3, [pc, #84]	; (8009ec8 <HAL_DFSDM_ChannelMspInit+0x6c>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d122      	bne.n	8009ec0 <HAL_DFSDM_ChannelMspInit+0x64>
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8009e7a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009e7e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_D2PCLK1;
 8009e80:	2300      	movs	r3, #0
 8009e82:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009e84:	f107 030c 	add.w	r3, r7, #12
 8009e88:	4618      	mov	r0, r3
 8009e8a:	f7fc fdfd 	bl	8006a88 <HAL_RCCEx_PeriphCLKConfig>
 8009e8e:	4603      	mov	r3, r0
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d001      	beq.n	8009e98 <HAL_DFSDM_ChannelMspInit+0x3c>
    {
      Error_Handler();
 8009e94:	f7ff ff76 	bl	8009d84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8009e98:	4b0c      	ldr	r3, [pc, #48]	; (8009ecc <HAL_DFSDM_ChannelMspInit+0x70>)
 8009e9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009e9e:	4a0b      	ldr	r2, [pc, #44]	; (8009ecc <HAL_DFSDM_ChannelMspInit+0x70>)
 8009ea0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009ea4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8009ea8:	4b08      	ldr	r3, [pc, #32]	; (8009ecc <HAL_DFSDM_ChannelMspInit+0x70>)
 8009eaa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009eae:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009eb2:	60bb      	str	r3, [r7, #8]
 8009eb4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8009eb6:	4b04      	ldr	r3, [pc, #16]	; (8009ec8 <HAL_DFSDM_ChannelMspInit+0x6c>)
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	3301      	adds	r3, #1
 8009ebc:	4a02      	ldr	r2, [pc, #8]	; (8009ec8 <HAL_DFSDM_ChannelMspInit+0x6c>)
 8009ebe:	6013      	str	r3, [r2, #0]
  }

}
 8009ec0:	bf00      	nop
 8009ec2:	37c0      	adds	r7, #192	; 0xc0
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	bd80      	pop	{r7, pc}
 8009ec8:	24000a04 	.word	0x24000a04
 8009ecc:	58024400 	.word	0x58024400

08009ed0 <HAL_SAI_MspInit>:

static uint32_t SAI1_client =0;
static uint32_t SAI4_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b0ba      	sub	sp, #232	; 0xe8
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009ed8:	f107 0310 	add.w	r3, r7, #16
 8009edc:	22b4      	movs	r2, #180	; 0xb4
 8009ede:	2100      	movs	r1, #0
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	f002 f90b 	bl	800c0fc <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_B)
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	4a89      	ldr	r2, [pc, #548]	; (800a110 <HAL_SAI_MspInit+0x240>)
 8009eec:	4293      	cmp	r3, r2
 8009eee:	f040 80ad 	bne.w	800a04c <HAL_SAI_MspInit+0x17c>
    {
      /* Peripheral clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8009ef2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ef6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 8009ef8:	2300      	movs	r3, #0
 8009efa:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009efc:	f107 0310 	add.w	r3, r7, #16
 8009f00:	4618      	mov	r0, r3
 8009f02:	f7fc fdc1 	bl	8006a88 <HAL_RCCEx_PeriphCLKConfig>
 8009f06:	4603      	mov	r3, r0
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d001      	beq.n	8009f10 <HAL_SAI_MspInit+0x40>
    {
      Error_Handler();
 8009f0c:	f7ff ff3a 	bl	8009d84 <Error_Handler>
    }

      if (SAI1_client == 0)
 8009f10:	4b80      	ldr	r3, [pc, #512]	; (800a114 <HAL_SAI_MspInit+0x244>)
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d116      	bne.n	8009f46 <HAL_SAI_MspInit+0x76>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8009f18:	4b7f      	ldr	r3, [pc, #508]	; (800a118 <HAL_SAI_MspInit+0x248>)
 8009f1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009f1e:	4a7e      	ldr	r2, [pc, #504]	; (800a118 <HAL_SAI_MspInit+0x248>)
 8009f20:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009f24:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8009f28:	4b7b      	ldr	r3, [pc, #492]	; (800a118 <HAL_SAI_MspInit+0x248>)
 8009f2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009f2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009f32:	60fb      	str	r3, [r7, #12]
 8009f34:	68fb      	ldr	r3, [r7, #12]

      /* Peripheral interrupt init*/
      HAL_NVIC_SetPriority(SAI1_IRQn, 0, 0);
 8009f36:	2200      	movs	r2, #0
 8009f38:	2100      	movs	r1, #0
 8009f3a:	2057      	movs	r0, #87	; 0x57
 8009f3c:	f7f8 f80b 	bl	8001f56 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(SAI1_IRQn);
 8009f40:	2057      	movs	r0, #87	; 0x57
 8009f42:	f7f8 f822 	bl	8001f8a <HAL_NVIC_EnableIRQ>
      }
    SAI1_client ++;
 8009f46:	4b73      	ldr	r3, [pc, #460]	; (800a114 <HAL_SAI_MspInit+0x244>)
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	3301      	adds	r3, #1
 8009f4c:	4a71      	ldr	r2, [pc, #452]	; (800a114 <HAL_SAI_MspInit+0x244>)
 8009f4e:	6013      	str	r3, [r2, #0]
    PE3     ------> SAI1_SD_B
    PF8     ------> SAI1_SCK_B
    PF7     ------> SAI1_MCLK_B
    PF9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8009f50:	2308      	movs	r3, #8
 8009f52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f56:	2302      	movs	r3, #2
 8009f58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009f62:	2300      	movs	r3, #0
 8009f64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8009f68:	2306      	movs	r3, #6
 8009f6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009f6e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8009f72:	4619      	mov	r1, r3
 8009f74:	4869      	ldr	r0, [pc, #420]	; (800a11c <HAL_SAI_MspInit+0x24c>)
 8009f76:	f7fb fc5f 	bl	8005838 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_9;
 8009f7a:	f44f 7360 	mov.w	r3, #896	; 0x380
 8009f7e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f82:	2302      	movs	r3, #2
 8009f84:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f88:	2300      	movs	r3, #0
 8009f8a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009f8e:	2300      	movs	r3, #0
 8009f90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8009f94:	2306      	movs	r3, #6
 8009f96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8009f9a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8009f9e:	4619      	mov	r1, r3
 8009fa0:	485f      	ldr	r0, [pc, #380]	; (800a120 <HAL_SAI_MspInit+0x250>)
 8009fa2:	f7fb fc49 	bl	8005838 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA1_Stream1;
 8009fa6:	4b5f      	ldr	r3, [pc, #380]	; (800a124 <HAL_SAI_MspInit+0x254>)
 8009fa8:	4a5f      	ldr	r2, [pc, #380]	; (800a128 <HAL_SAI_MspInit+0x258>)
 8009faa:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 8009fac:	4b5d      	ldr	r3, [pc, #372]	; (800a124 <HAL_SAI_MspInit+0x254>)
 8009fae:	2258      	movs	r2, #88	; 0x58
 8009fb0:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009fb2:	4b5c      	ldr	r3, [pc, #368]	; (800a124 <HAL_SAI_MspInit+0x254>)
 8009fb4:	2240      	movs	r2, #64	; 0x40
 8009fb6:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8009fb8:	4b5a      	ldr	r3, [pc, #360]	; (800a124 <HAL_SAI_MspInit+0x254>)
 8009fba:	2200      	movs	r2, #0
 8009fbc:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 8009fbe:	4b59      	ldr	r3, [pc, #356]	; (800a124 <HAL_SAI_MspInit+0x254>)
 8009fc0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009fc4:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8009fc6:	4b57      	ldr	r3, [pc, #348]	; (800a124 <HAL_SAI_MspInit+0x254>)
 8009fc8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009fcc:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8009fce:	4b55      	ldr	r3, [pc, #340]	; (800a124 <HAL_SAI_MspInit+0x254>)
 8009fd0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009fd4:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 8009fd6:	4b53      	ldr	r3, [pc, #332]	; (800a124 <HAL_SAI_MspInit+0x254>)
 8009fd8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009fdc:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_HIGH;
 8009fde:	4b51      	ldr	r3, [pc, #324]	; (800a124 <HAL_SAI_MspInit+0x254>)
 8009fe0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009fe4:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009fe6:	4b4f      	ldr	r3, [pc, #316]	; (800a124 <HAL_SAI_MspInit+0x254>)
 8009fe8:	2200      	movs	r2, #0
 8009fea:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8009fec:	484d      	ldr	r0, [pc, #308]	; (800a124 <HAL_SAI_MspInit+0x254>)
 8009fee:	f7f8 fb11 	bl	8002614 <HAL_DMA_Init>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d001      	beq.n	8009ffc <HAL_SAI_MspInit+0x12c>
    {
      Error_Handler();
 8009ff8:	f7ff fec4 	bl	8009d84 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 8009ffc:	2306      	movs	r3, #6
 8009ffe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 800a002:	2300      	movs	r3, #0
 800a004:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    pSyncConfig.SyncEnable = DISABLE;
 800a008:	2300      	movs	r3, #0
 800a00a:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    pSyncConfig.EventEnable = ENABLE;
 800a00e:	2301      	movs	r3, #1
 800a010:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    pSyncConfig.RequestNumber = 1;
 800a014:	2301      	movs	r3, #1
 800a016:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai1_b, &pSyncConfig) != HAL_OK)
 800a01a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800a01e:	4619      	mov	r1, r3
 800a020:	4840      	ldr	r0, [pc, #256]	; (800a124 <HAL_SAI_MspInit+0x254>)
 800a022:	f7fb faf1 	bl	8005608 <HAL_DMAEx_ConfigMuxSync>
 800a026:	4603      	mov	r3, r0
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d001      	beq.n	800a030 <HAL_SAI_MspInit+0x160>
    {
      Error_Handler();
 800a02c:	f7ff feaa 	bl	8009d84 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	4a3c      	ldr	r2, [pc, #240]	; (800a124 <HAL_SAI_MspInit+0x254>)
 800a034:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800a038:	4a3a      	ldr	r2, [pc, #232]	; (800a124 <HAL_SAI_MspInit+0x254>)
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	4a38      	ldr	r2, [pc, #224]	; (800a124 <HAL_SAI_MspInit+0x254>)
 800a042:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800a046:	4a37      	ldr	r2, [pc, #220]	; (800a124 <HAL_SAI_MspInit+0x254>)
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	6393      	str	r3, [r2, #56]	; 0x38
    }
/* SAI4 */
    if(hsai->Instance==SAI4_Block_A)
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	4a36      	ldr	r2, [pc, #216]	; (800a12c <HAL_SAI_MspInit+0x25c>)
 800a052:	4293      	cmp	r3, r2
 800a054:	d157      	bne.n	800a106 <HAL_SAI_MspInit+0x236>
    {
    /* Peripheral clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI4A;
 800a056:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a05a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Sai4AClockSelection = RCC_SAI4ACLKSOURCE_PLL;
 800a05c:	2300      	movs	r3, #0
 800a05e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a062:	f107 0310 	add.w	r3, r7, #16
 800a066:	4618      	mov	r0, r3
 800a068:	f7fc fd0e 	bl	8006a88 <HAL_RCCEx_PeriphCLKConfig>
 800a06c:	4603      	mov	r3, r0
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d001      	beq.n	800a076 <HAL_SAI_MspInit+0x1a6>
    {
      Error_Handler();
 800a072:	f7ff fe87 	bl	8009d84 <Error_Handler>
    }

    if (SAI4_client == 0)
 800a076:	4b2e      	ldr	r3, [pc, #184]	; (800a130 <HAL_SAI_MspInit+0x260>)
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d116      	bne.n	800a0ac <HAL_SAI_MspInit+0x1dc>
    {
       __HAL_RCC_SAI4_CLK_ENABLE();
 800a07e:	4b26      	ldr	r3, [pc, #152]	; (800a118 <HAL_SAI_MspInit+0x248>)
 800a080:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a084:	4a24      	ldr	r2, [pc, #144]	; (800a118 <HAL_SAI_MspInit+0x248>)
 800a086:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a08a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800a08e:	4b22      	ldr	r3, [pc, #136]	; (800a118 <HAL_SAI_MspInit+0x248>)
 800a090:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a094:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a098:	60bb      	str	r3, [r7, #8]
 800a09a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(SAI4_IRQn, 0, 0);
 800a09c:	2200      	movs	r2, #0
 800a09e:	2100      	movs	r1, #0
 800a0a0:	2092      	movs	r0, #146	; 0x92
 800a0a2:	f7f7 ff58 	bl	8001f56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI4_IRQn);
 800a0a6:	2092      	movs	r0, #146	; 0x92
 800a0a8:	f7f7 ff6f 	bl	8001f8a <HAL_NVIC_EnableIRQ>
    }
    SAI4_client ++;
 800a0ac:	4b20      	ldr	r3, [pc, #128]	; (800a130 <HAL_SAI_MspInit+0x260>)
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	3301      	adds	r3, #1
 800a0b2:	4a1f      	ldr	r2, [pc, #124]	; (800a130 <HAL_SAI_MspInit+0x260>)
 800a0b4:	6013      	str	r3, [r2, #0]
//    if (HAL_DMA_Init(&hdma_sai4_a) != HAL_OK)
//    {
//      Error_Handler();
//    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX2_SYNC_EXTI0;
 800a0b6:	230e      	movs	r3, #14
 800a0b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 800a0bc:	2300      	movs	r3, #0
 800a0be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    pSyncConfig.SyncEnable = DISABLE;
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    pSyncConfig.EventEnable = ENABLE;
 800a0c8:	2301      	movs	r3, #1
 800a0ca:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    pSyncConfig.RequestNumber = 1;
 800a0ce:	2301      	movs	r3, #1
 800a0d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai4_a, &pSyncConfig) != HAL_OK)
 800a0d4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800a0d8:	4619      	mov	r1, r3
 800a0da:	4816      	ldr	r0, [pc, #88]	; (800a134 <HAL_SAI_MspInit+0x264>)
 800a0dc:	f7fb fa94 	bl	8005608 <HAL_DMAEx_ConfigMuxSync>
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d001      	beq.n	800a0ea <HAL_SAI_MspInit+0x21a>
    {
      Error_Handler();
 800a0e6:	f7ff fe4d 	bl	8009d84 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai4_a);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	4a11      	ldr	r2, [pc, #68]	; (800a134 <HAL_SAI_MspInit+0x264>)
 800a0ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800a0f2:	4a10      	ldr	r2, [pc, #64]	; (800a134 <HAL_SAI_MspInit+0x264>)
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai4_a);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	4a0e      	ldr	r2, [pc, #56]	; (800a134 <HAL_SAI_MspInit+0x264>)
 800a0fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800a100:	4a0c      	ldr	r2, [pc, #48]	; (800a134 <HAL_SAI_MspInit+0x264>)
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	6393      	str	r3, [r2, #56]	; 0x38

    }
}
 800a106:	bf00      	nop
 800a108:	37e8      	adds	r7, #232	; 0xe8
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}
 800a10e:	bf00      	nop
 800a110:	40015824 	.word	0x40015824
 800a114:	24000a08 	.word	0x24000a08
 800a118:	58024400 	.word	0x58024400
 800a11c:	58021000 	.word	0x58021000
 800a120:	58021400 	.word	0x58021400
 800a124:	24000efc 	.word	0x24000efc
 800a128:	40020028 	.word	0x40020028
 800a12c:	58005404 	.word	0x58005404
 800a130:	24000a0c 	.word	0x24000a0c
 800a134:	24000e4c 	.word	0x24000e4c

0800a138 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a138:	b480      	push	{r7}
 800a13a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800a13c:	e7fe      	b.n	800a13c <NMI_Handler+0x4>

0800a13e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a13e:	b480      	push	{r7}
 800a140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a142:	e7fe      	b.n	800a142 <HardFault_Handler+0x4>

0800a144 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a144:	b480      	push	{r7}
 800a146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a148:	e7fe      	b.n	800a148 <MemManage_Handler+0x4>

0800a14a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a14a:	b480      	push	{r7}
 800a14c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a14e:	e7fe      	b.n	800a14e <BusFault_Handler+0x4>

0800a150 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a150:	b480      	push	{r7}
 800a152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a154:	e7fe      	b.n	800a154 <UsageFault_Handler+0x4>

0800a156 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800a156:	b480      	push	{r7}
 800a158:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800a15a:	bf00      	nop
 800a15c:	46bd      	mov	sp, r7
 800a15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a162:	4770      	bx	lr

0800a164 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a164:	b480      	push	{r7}
 800a166:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a168:	bf00      	nop
 800a16a:	46bd      	mov	sp, r7
 800a16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a170:	4770      	bx	lr

0800a172 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800a172:	b480      	push	{r7}
 800a174:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800a176:	bf00      	nop
 800a178:	46bd      	mov	sp, r7
 800a17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17e:	4770      	bx	lr

0800a180 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800a184:	f7f7 fdec 	bl	8001d60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800a188:	bf00      	nop
 800a18a:	bd80      	pop	{r7, pc}

0800a18c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 800a190:	4802      	ldr	r0, [pc, #8]	; (800a19c <DMA1_Stream1_IRQHandler+0x10>)
 800a192:	f7f9 ff1b 	bl	8003fcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800a196:	bf00      	nop
 800a198:	bd80      	pop	{r7, pc}
 800a19a:	bf00      	nop
 800a19c:	24000efc 	.word	0x24000efc

0800a1a0 <SAI1_IRQHandler>:

/**
  * @brief This function handles SAI1 global interrupt.
  */
void SAI1_IRQHandler(void)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI1_IRQn 0 */

  /* USER CODE END SAI1_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockB1);
 800a1a4:	4802      	ldr	r0, [pc, #8]	; (800a1b0 <SAI1_IRQHandler+0x10>)
 800a1a6:	f7ff f987 	bl	80094b8 <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI1_IRQn 1 */

  /* USER CODE END SAI1_IRQn 1 */
}
 800a1aa:	bf00      	nop
 800a1ac:	bd80      	pop	{r7, pc}
 800a1ae:	bf00      	nop
 800a1b0:	24000d1c 	.word	0x24000d1c

0800a1b4 <DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX1 overrun interrupt.
  */
void DMAMUX1_OVR_IRQHandler(void)
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMAMUX1_OVR_IRQn 0 */
  // Handle DMA1_Stream1
  HAL_DMAEx_MUX_IRQHandler(&hdma_sai1_b);
 800a1b8:	4802      	ldr	r0, [pc, #8]	; (800a1c4 <DMAMUX1_OVR_IRQHandler+0x10>)
 800a1ba:	f7fb faeb 	bl	8005794 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMAMUX1_OVR_IRQn 1 */
}
 800a1be:	bf00      	nop
 800a1c0:	bd80      	pop	{r7, pc}
 800a1c2:	bf00      	nop
 800a1c4:	24000efc 	.word	0x24000efc

0800a1c8 <DMAMUX2_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX2 overrun interrupt.
  */
void DMAMUX2_OVR_IRQHandler(void)
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX2_OVR_IRQn 0 */

  /* USER CODE END DMAMUX2_OVR_IRQn 0 */
  // Handle BDMA_Channel0
  HAL_DMAEx_MUX_IRQHandler(&hdma_sai4_a);
 800a1cc:	4802      	ldr	r0, [pc, #8]	; (800a1d8 <DMAMUX2_OVR_IRQHandler+0x10>)
 800a1ce:	f7fb fae1 	bl	8005794 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX2_OVR_IRQn 1 */

  /* USER CODE END DMAMUX2_OVR_IRQn 1 */
}
 800a1d2:	bf00      	nop
 800a1d4:	bd80      	pop	{r7, pc}
 800a1d6:	bf00      	nop
 800a1d8:	24000e4c 	.word	0x24000e4c

0800a1dc <BDMA_Channel1_IRQHandler>:

/**
  * @brief This function handles BDMA channel0 global interrupt.
  */
void AUDIO_IN_SAI_PDMx_DMAx_IRQHandler(void)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */
	BSP_AUDIO_IN_IRQHandler(PDM, AUDIO_IN_DEVICE_DIGITAL_MIC1);
 800a1e0:	2110      	movs	r1, #16
 800a1e2:	2001      	movs	r0, #1
 800a1e4:	f7f7 fa44 	bl	8001670 <BSP_AUDIO_IN_IRQHandler>
	BSP_LED_On(LED1);
 800a1e8:	2000      	movs	r0, #0
 800a1ea:	f7f6 f8ef 	bl	80003cc <BSP_LED_On>

	hdma_sai4_a.Init.Request = BDMA_REQUEST_SAI4_A;
 800a1ee:	4b02      	ldr	r3, [pc, #8]	; (800a1f8 <BDMA_Channel1_IRQHandler+0x1c>)
 800a1f0:	220f      	movs	r2, #15
 800a1f2:	605a      	str	r2, [r3, #4]
  //HAL_DMA_IRQHandler(&hdma_sai4_a);

  /* USER CODE BEGIN BDMA_Channel0_IRQn 1 */

  /* USER CODE END BDMA_Channel0_IRQn 1 */
}
 800a1f4:	bf00      	nop
 800a1f6:	bd80      	pop	{r7, pc}
 800a1f8:	24000e4c 	.word	0x24000e4c

0800a1fc <SAI4_IRQHandler>:

/**
  * @brief This function handles SAI4 global interrupt.
  */
void SAI4_IRQHandler(void)
{
 800a1fc:	b480      	push	{r7}
 800a1fe:	af00      	add	r7, sp, #0
  /* USER CODE END SAI4_IRQn 0 */

  /* USER CODE BEGIN SAI4_IRQn 1 */

  /* USER CODE END SAI4_IRQn 1 */
}
 800a200:	bf00      	nop
 800a202:	46bd      	mov	sp, r7
 800a204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a208:	4770      	bx	lr
	...

0800a20c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800a20c:	b480      	push	{r7}
 800a20e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800a210:	4b32      	ldr	r3, [pc, #200]	; (800a2dc <SystemInit+0xd0>)
 800a212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a216:	4a31      	ldr	r2, [pc, #196]	; (800a2dc <SystemInit+0xd0>)
 800a218:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a21c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800a220:	4b2f      	ldr	r3, [pc, #188]	; (800a2e0 <SystemInit+0xd4>)
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	f003 030f 	and.w	r3, r3, #15
 800a228:	2b06      	cmp	r3, #6
 800a22a:	d807      	bhi.n	800a23c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800a22c:	4b2c      	ldr	r3, [pc, #176]	; (800a2e0 <SystemInit+0xd4>)
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	f023 030f 	bic.w	r3, r3, #15
 800a234:	4a2a      	ldr	r2, [pc, #168]	; (800a2e0 <SystemInit+0xd4>)
 800a236:	f043 0307 	orr.w	r3, r3, #7
 800a23a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800a23c:	4b29      	ldr	r3, [pc, #164]	; (800a2e4 <SystemInit+0xd8>)
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	4a28      	ldr	r2, [pc, #160]	; (800a2e4 <SystemInit+0xd8>)
 800a242:	f043 0301 	orr.w	r3, r3, #1
 800a246:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800a248:	4b26      	ldr	r3, [pc, #152]	; (800a2e4 <SystemInit+0xd8>)
 800a24a:	2200      	movs	r2, #0
 800a24c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800a24e:	4b25      	ldr	r3, [pc, #148]	; (800a2e4 <SystemInit+0xd8>)
 800a250:	681a      	ldr	r2, [r3, #0]
 800a252:	4924      	ldr	r1, [pc, #144]	; (800a2e4 <SystemInit+0xd8>)
 800a254:	4b24      	ldr	r3, [pc, #144]	; (800a2e8 <SystemInit+0xdc>)
 800a256:	4013      	ands	r3, r2
 800a258:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800a25a:	4b21      	ldr	r3, [pc, #132]	; (800a2e0 <SystemInit+0xd4>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	f003 0308 	and.w	r3, r3, #8
 800a262:	2b00      	cmp	r3, #0
 800a264:	d007      	beq.n	800a276 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800a266:	4b1e      	ldr	r3, [pc, #120]	; (800a2e0 <SystemInit+0xd4>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	f023 030f 	bic.w	r3, r3, #15
 800a26e:	4a1c      	ldr	r2, [pc, #112]	; (800a2e0 <SystemInit+0xd4>)
 800a270:	f043 0307 	orr.w	r3, r3, #7
 800a274:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800a276:	4b1b      	ldr	r3, [pc, #108]	; (800a2e4 <SystemInit+0xd8>)
 800a278:	2200      	movs	r2, #0
 800a27a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800a27c:	4b19      	ldr	r3, [pc, #100]	; (800a2e4 <SystemInit+0xd8>)
 800a27e:	2200      	movs	r2, #0
 800a280:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800a282:	4b18      	ldr	r3, [pc, #96]	; (800a2e4 <SystemInit+0xd8>)
 800a284:	2200      	movs	r2, #0
 800a286:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800a288:	4b16      	ldr	r3, [pc, #88]	; (800a2e4 <SystemInit+0xd8>)
 800a28a:	4a18      	ldr	r2, [pc, #96]	; (800a2ec <SystemInit+0xe0>)
 800a28c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800a28e:	4b15      	ldr	r3, [pc, #84]	; (800a2e4 <SystemInit+0xd8>)
 800a290:	4a17      	ldr	r2, [pc, #92]	; (800a2f0 <SystemInit+0xe4>)
 800a292:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800a294:	4b13      	ldr	r3, [pc, #76]	; (800a2e4 <SystemInit+0xd8>)
 800a296:	4a17      	ldr	r2, [pc, #92]	; (800a2f4 <SystemInit+0xe8>)
 800a298:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800a29a:	4b12      	ldr	r3, [pc, #72]	; (800a2e4 <SystemInit+0xd8>)
 800a29c:	2200      	movs	r2, #0
 800a29e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800a2a0:	4b10      	ldr	r3, [pc, #64]	; (800a2e4 <SystemInit+0xd8>)
 800a2a2:	4a14      	ldr	r2, [pc, #80]	; (800a2f4 <SystemInit+0xe8>)
 800a2a4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800a2a6:	4b0f      	ldr	r3, [pc, #60]	; (800a2e4 <SystemInit+0xd8>)
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800a2ac:	4b0d      	ldr	r3, [pc, #52]	; (800a2e4 <SystemInit+0xd8>)
 800a2ae:	4a11      	ldr	r2, [pc, #68]	; (800a2f4 <SystemInit+0xe8>)
 800a2b0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800a2b2:	4b0c      	ldr	r3, [pc, #48]	; (800a2e4 <SystemInit+0xd8>)
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800a2b8:	4b0a      	ldr	r3, [pc, #40]	; (800a2e4 <SystemInit+0xd8>)
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	4a09      	ldr	r2, [pc, #36]	; (800a2e4 <SystemInit+0xd8>)
 800a2be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a2c2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800a2c4:	4b07      	ldr	r3, [pc, #28]	; (800a2e4 <SystemInit+0xd8>)
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800a2ca:	4b0b      	ldr	r3, [pc, #44]	; (800a2f8 <SystemInit+0xec>)
 800a2cc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800a2d0:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 800a2d2:	bf00      	nop
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2da:	4770      	bx	lr
 800a2dc:	e000ed00 	.word	0xe000ed00
 800a2e0:	52002000 	.word	0x52002000
 800a2e4:	58024400 	.word	0x58024400
 800a2e8:	eaf6ed7f 	.word	0xeaf6ed7f
 800a2ec:	02020200 	.word	0x02020200
 800a2f0:	01ff0000 	.word	0x01ff0000
 800a2f4:	01010280 	.word	0x01010280
 800a2f8:	52004000 	.word	0x52004000

0800a2fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800a2fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 800a334 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800a300:	f7ff ff84 	bl	800a20c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800a304:	480c      	ldr	r0, [pc, #48]	; (800a338 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800a306:	490d      	ldr	r1, [pc, #52]	; (800a33c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800a308:	4a0d      	ldr	r2, [pc, #52]	; (800a340 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800a30a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800a30c:	e002      	b.n	800a314 <LoopCopyDataInit>

0800a30e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800a30e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800a310:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800a312:	3304      	adds	r3, #4

0800a314 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800a314:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800a316:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800a318:	d3f9      	bcc.n	800a30e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800a31a:	4a0a      	ldr	r2, [pc, #40]	; (800a344 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800a31c:	4c0a      	ldr	r4, [pc, #40]	; (800a348 <LoopFillZerobss+0x22>)
  movs r3, #0
 800a31e:	2300      	movs	r3, #0
  b LoopFillZerobss
 800a320:	e001      	b.n	800a326 <LoopFillZerobss>

0800a322 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800a322:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800a324:	3204      	adds	r2, #4

0800a326 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800a326:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800a328:	d3fb      	bcc.n	800a322 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800a32a:	f001 fec3 	bl	800c0b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800a32e:	f7ff fb91 	bl	8009a54 <main>
  bx  lr
 800a332:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800a334:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800a338:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800a33c:	2400047c 	.word	0x2400047c
  ldr r2, =_sidata
 800a340:	0800c7f8 	.word	0x0800c7f8
  ldr r2, =_sbss
 800a344:	2400047c 	.word	0x2400047c
  ldr r4, =_ebss
 800a348:	24000fc8 	.word	0x24000fc8

0800a34c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800a34c:	e7fe      	b.n	800a34c <ADC3_IRQHandler>
	...

0800a350 <D16_GENERIC>:
 800a350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a354:	b089      	sub	sp, #36	; 0x24
 800a356:	6993      	ldr	r3, [r2, #24]
 800a358:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800a35a:	9103      	str	r1, [sp, #12]
 800a35c:	9307      	str	r3, [sp, #28]
 800a35e:	69d3      	ldr	r3, [r2, #28]
 800a360:	e9d2 c102 	ldrd	ip, r1, [r2, #8]
 800a364:	e9d2 4a04 	ldrd	r4, sl, [r2, #16]
 800a368:	9106      	str	r1, [sp, #24]
 800a36a:	e9d2 810c 	ldrd	r8, r1, [r2, #48]	; 0x30
 800a36e:	2d00      	cmp	r5, #0
 800a370:	d063      	beq.n	800a43a <D16_GENERIC+0xea>
 800a372:	f001 0520 	and.w	r5, r1, #32
 800a376:	f001 0110 	and.w	r1, r1, #16
 800a37a:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 800a45c <D16_GENERIC+0x10c>
 800a37e:	46c1      	mov	r9, r8
 800a380:	9104      	str	r1, [sp, #16]
 800a382:	2100      	movs	r1, #0
 800a384:	9505      	str	r5, [sp, #20]
 800a386:	e04d      	b.n	800a424 <D16_GENERIC+0xd4>
 800a388:	5d87      	ldrb	r7, [r0, r6]
 800a38a:	7805      	ldrb	r5, [r0, #0]
 800a38c:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 800a390:	eb05 2707 	add.w	r7, r5, r7, lsl #8
 800a394:	b2fe      	uxtb	r6, r7
 800a396:	f3c7 2707 	ubfx	r7, r7, #8, #8
 800a39a:	f85e 5026 	ldr.w	r5, [lr, r6, lsl #2]
 800a39e:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
 800a3a2:	441d      	add	r5, r3
 800a3a4:	eb06 2395 	add.w	r3, r6, r5, lsr #10
 800a3a8:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800a3ac:	f3c3 0609 	ubfx	r6, r3, #0, #10
 800a3b0:	0a9b      	lsrs	r3, r3, #10
 800a3b2:	ea46 4605 	orr.w	r6, r6, r5, lsl #16
 800a3b6:	4d27      	ldr	r5, [pc, #156]	; (800a454 <D16_GENERIC+0x104>)
 800a3b8:	fb26 c505 	smlad	r5, r6, r5, ip
 800a3bc:	4f26      	ldr	r7, [pc, #152]	; (800a458 <D16_GENERIC+0x108>)
 800a3be:	fb26 fc07 	smuad	ip, r6, r7
 800a3c2:	9e04      	ldr	r6, [sp, #16]
 800a3c4:	f101 0801 	add.w	r8, r1, #1
 800a3c8:	f5a5 6500 	sub.w	r5, r5, #2048	; 0x800
 800a3cc:	b1ae      	cbz	r6, 800a3fa <D16_GENERIC+0xaa>
 800a3ce:	442c      	add	r4, r5
 800a3d0:	f8d2 b020 	ldr.w	fp, [r2, #32]
 800a3d4:	eba4 040a 	sub.w	r4, r4, sl
 800a3d8:	46aa      	mov	sl, r5
 800a3da:	17e7      	asrs	r7, r4, #31
 800a3dc:	fba4 450b 	umull	r4, r5, r4, fp
 800a3e0:	e9cd 4500 	strd	r4, r5, [sp]
 800a3e4:	fb0b 5407 	mla	r4, fp, r7, r5
 800a3e8:	9401      	str	r4, [sp, #4]
 800a3ea:	e9dd 4500 	ldrd	r4, r5, [sp]
 800a3ee:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800a3f2:	f145 0500 	adc.w	r5, r5, #0
 800a3f6:	006c      	lsls	r4, r5, #1
 800a3f8:	4625      	mov	r5, r4
 800a3fa:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 800a3fe:	042d      	lsls	r5, r5, #16
 800a400:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a404:	2700      	movs	r7, #0
 800a406:	fb01 fb0b 	mul.w	fp, r1, fp
 800a40a:	fa1f f188 	uxth.w	r1, r8
 800a40e:	fbc9 6705 	smlal	r6, r7, r9, r5
 800a412:	9e03      	ldr	r6, [sp, #12]
 800a414:	10bd      	asrs	r5, r7, #2
 800a416:	f305 050f 	ssat	r5, #16, r5
 800a41a:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 800a41e:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800a420:	428d      	cmp	r5, r1
 800a422:	d90a      	bls.n	800a43a <D16_GENERIC+0xea>
 800a424:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800a426:	2d01      	cmp	r5, #1
 800a428:	b2ee      	uxtb	r6, r5
 800a42a:	d1ad      	bne.n	800a388 <D16_GENERIC+0x38>
 800a42c:	9d05      	ldr	r5, [sp, #20]
 800a42e:	f850 7b02 	ldr.w	r7, [r0], #2
 800a432:	2d00      	cmp	r5, #0
 800a434:	d0ae      	beq.n	800a394 <D16_GENERIC+0x44>
 800a436:	ba7f      	rev16	r7, r7
 800a438:	e7ac      	b.n	800a394 <D16_GENERIC+0x44>
 800a43a:	2000      	movs	r0, #0
 800a43c:	9906      	ldr	r1, [sp, #24]
 800a43e:	61d3      	str	r3, [r2, #28]
 800a440:	9b07      	ldr	r3, [sp, #28]
 800a442:	f8c2 c008 	str.w	ip, [r2, #8]
 800a446:	60d1      	str	r1, [r2, #12]
 800a448:	6193      	str	r3, [r2, #24]
 800a44a:	e9c2 4a04 	strd	r4, sl, [r2, #16]
 800a44e:	b009      	add	sp, #36	; 0x24
 800a450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a454:	00030001 	.word	0x00030001
 800a458:	00010003 	.word	0x00010003
 800a45c:	24000000 	.word	0x24000000

0800a460 <D24_GENERIC>:
 800a460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a464:	e9d2 4304 	ldrd	r4, r3, [r2, #16]
 800a468:	b089      	sub	sp, #36	; 0x24
 800a46a:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 800a46c:	9303      	str	r3, [sp, #12]
 800a46e:	6993      	ldr	r3, [r2, #24]
 800a470:	9104      	str	r1, [sp, #16]
 800a472:	9307      	str	r3, [sp, #28]
 800a474:	69d1      	ldr	r1, [r2, #28]
 800a476:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 800a47a:	e9d2 a50c 	ldrd	sl, r5, [r2, #48]	; 0x30
 800a47e:	2e00      	cmp	r6, #0
 800a480:	f000 8088 	beq.w	800a594 <D24_GENERIC+0x134>
 800a484:	f005 0620 	and.w	r6, r5, #32
 800a488:	f005 0510 	and.w	r5, r5, #16
 800a48c:	f04f 0c00 	mov.w	ip, #0
 800a490:	f8df e140 	ldr.w	lr, [pc, #320]	; 800a5d4 <D24_GENERIC+0x174>
 800a494:	9606      	str	r6, [sp, #24]
 800a496:	9505      	str	r5, [sp, #20]
 800a498:	e064      	b.n	800a564 <D24_GENERIC+0x104>
 800a49a:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 800a49e:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 800a4a2:	f810 b007 	ldrb.w	fp, [r0, r7]
 800a4a6:	042d      	lsls	r5, r5, #16
 800a4a8:	19f0      	adds	r0, r6, r7
 800a4aa:	eb05 250b 	add.w	r5, r5, fp, lsl #8
 800a4ae:	44a9      	add	r9, r5
 800a4b0:	fa5f f689 	uxtb.w	r6, r9
 800a4b4:	f3c9 2707 	ubfx	r7, r9, #8, #8
 800a4b8:	ea4f 4919 	mov.w	r9, r9, lsr #16
 800a4bc:	f85e 6026 	ldr.w	r6, [lr, r6, lsl #2]
 800a4c0:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
 800a4c4:	eb06 2691 	add.w	r6, r6, r1, lsr #10
 800a4c8:	f85e 1029 	ldr.w	r1, [lr, r9, lsl #2]
 800a4cc:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 800a4d0:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800a4d4:	f3c7 0509 	ubfx	r5, r7, #0, #10
 800a4d8:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 800a4dc:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 800a4e0:	4d3a      	ldr	r5, [pc, #232]	; (800a5cc <D24_GENERIC+0x16c>)
 800a4e2:	fb26 8705 	smlad	r7, r6, r5, r8
 800a4e6:	4d3a      	ldr	r5, [pc, #232]	; (800a5d0 <D24_GENERIC+0x170>)
 800a4e8:	fb26 3805 	smlad	r8, r6, r5, r3
 800a4ec:	f3c1 0309 	ubfx	r3, r1, #0, #10
 800a4f0:	eb03 0b43 	add.w	fp, r3, r3, lsl #1
 800a4f4:	2301      	movs	r3, #1
 800a4f6:	eb08 084b 	add.w	r8, r8, fp, lsl #1
 800a4fa:	fb26 f603 	smuad	r6, r6, r3
 800a4fe:	eb0c 0903 	add.w	r9, ip, r3
 800a502:	eb0b 0306 	add.w	r3, fp, r6
 800a506:	9e05      	ldr	r6, [sp, #20]
 800a508:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 800a50c:	b1ae      	cbz	r6, 800a53a <D24_GENERIC+0xda>
 800a50e:	442c      	add	r4, r5
 800a510:	9e03      	ldr	r6, [sp, #12]
 800a512:	f8d2 b020 	ldr.w	fp, [r2, #32]
 800a516:	1ba4      	subs	r4, r4, r6
 800a518:	9503      	str	r5, [sp, #12]
 800a51a:	17e7      	asrs	r7, r4, #31
 800a51c:	fba4 450b 	umull	r4, r5, r4, fp
 800a520:	e9cd 4500 	strd	r4, r5, [sp]
 800a524:	fb0b 5407 	mla	r4, fp, r7, r5
 800a528:	9401      	str	r4, [sp, #4]
 800a52a:	e9dd 4500 	ldrd	r4, r5, [sp]
 800a52e:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800a532:	f145 0500 	adc.w	r5, r5, #0
 800a536:	006c      	lsls	r4, r5, #1
 800a538:	4625      	mov	r5, r4
 800a53a:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 800a53e:	03ad      	lsls	r5, r5, #14
 800a540:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a544:	2700      	movs	r7, #0
 800a546:	fb0c fb0b 	mul.w	fp, ip, fp
 800a54a:	fa1f fc89 	uxth.w	ip, r9
 800a54e:	fbca 6705 	smlal	r6, r7, sl, r5
 800a552:	9e04      	ldr	r6, [sp, #16]
 800a554:	10bd      	asrs	r5, r7, #2
 800a556:	f305 050f 	ssat	r5, #16, r5
 800a55a:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 800a55e:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800a560:	4565      	cmp	r5, ip
 800a562:	d917      	bls.n	800a594 <D24_GENERIC+0x134>
 800a564:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800a566:	f890 9000 	ldrb.w	r9, [r0]
 800a56a:	b2ef      	uxtb	r7, r5
 800a56c:	2d01      	cmp	r5, #1
 800a56e:	b23e      	sxth	r6, r7
 800a570:	d193      	bne.n	800a49a <D24_GENERIC+0x3a>
 800a572:	9d06      	ldr	r5, [sp, #24]
 800a574:	b1dd      	cbz	r5, 800a5ae <D24_GENERIC+0x14e>
 800a576:	78c7      	ldrb	r7, [r0, #3]
 800a578:	ea4f 2609 	mov.w	r6, r9, lsl #8
 800a57c:	f01c 0f01 	tst.w	ip, #1
 800a580:	ea4f 2507 	mov.w	r5, r7, lsl #8
 800a584:	eb06 4607 	add.w	r6, r6, r7, lsl #16
 800a588:	d11a      	bne.n	800a5c0 <D24_GENERIC+0x160>
 800a58a:	f890 9001 	ldrb.w	r9, [r0, #1]
 800a58e:	3002      	adds	r0, #2
 800a590:	44b1      	add	r9, r6
 800a592:	e78d      	b.n	800a4b0 <D24_GENERIC+0x50>
 800a594:	6093      	str	r3, [r2, #8]
 800a596:	2000      	movs	r0, #0
 800a598:	9b03      	ldr	r3, [sp, #12]
 800a59a:	f8c2 800c 	str.w	r8, [r2, #12]
 800a59e:	6153      	str	r3, [r2, #20]
 800a5a0:	9b07      	ldr	r3, [sp, #28]
 800a5a2:	61d1      	str	r1, [r2, #28]
 800a5a4:	6114      	str	r4, [r2, #16]
 800a5a6:	6193      	str	r3, [r2, #24]
 800a5a8:	b009      	add	sp, #36	; 0x24
 800a5aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5ae:	7845      	ldrb	r5, [r0, #1]
 800a5b0:	3003      	adds	r0, #3
 800a5b2:	f810 6c01 	ldrb.w	r6, [r0, #-1]
 800a5b6:	022d      	lsls	r5, r5, #8
 800a5b8:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 800a5bc:	44a9      	add	r9, r5
 800a5be:	e777      	b.n	800a4b0 <D24_GENERIC+0x50>
 800a5c0:	7886      	ldrb	r6, [r0, #2]
 800a5c2:	3004      	adds	r0, #4
 800a5c4:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 800a5c8:	44a9      	add	r9, r5
 800a5ca:	e771      	b.n	800a4b0 <D24_GENERIC+0x50>
 800a5cc:	00030001 	.word	0x00030001
 800a5d0:	00060007 	.word	0x00060007
 800a5d4:	24000000 	.word	0x24000000

0800a5d8 <D32_GENERIC>:
 800a5d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5dc:	e9d2 4304 	ldrd	r4, r3, [r2, #16]
 800a5e0:	b089      	sub	sp, #36	; 0x24
 800a5e2:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800a5e4:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 800a5e6:	9302      	str	r3, [sp, #8]
 800a5e8:	6993      	ldr	r3, [r2, #24]
 800a5ea:	9104      	str	r1, [sp, #16]
 800a5ec:	9307      	str	r3, [sp, #28]
 800a5ee:	9503      	str	r5, [sp, #12]
 800a5f0:	69d1      	ldr	r1, [r2, #28]
 800a5f2:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800a5f4:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 800a5f8:	2e00      	cmp	r6, #0
 800a5fa:	f000 8097 	beq.w	800a72c <D32_GENERIC+0x154>
 800a5fe:	f005 0620 	and.w	r6, r5, #32
 800a602:	f005 0510 	and.w	r5, r5, #16
 800a606:	f04f 0e00 	mov.w	lr, #0
 800a60a:	f8df c150 	ldr.w	ip, [pc, #336]	; 800a75c <D32_GENERIC+0x184>
 800a60e:	9606      	str	r6, [sp, #24]
 800a610:	9505      	str	r5, [sp, #20]
 800a612:	e079      	b.n	800a708 <D32_GENERIC+0x130>
 800a614:	783d      	ldrb	r5, [r7, #0]
 800a616:	f810 b009 	ldrb.w	fp, [r0, r9]
 800a61a:	042d      	lsls	r5, r5, #16
 800a61c:	f810 a006 	ldrb.w	sl, [r0, r6]
 800a620:	f890 9000 	ldrb.w	r9, [r0]
 800a624:	eb07 0046 	add.w	r0, r7, r6, lsl #1
 800a628:	eb05 650b 	add.w	r5, r5, fp, lsl #24
 800a62c:	eb05 250a 	add.w	r5, r5, sl, lsl #8
 800a630:	44a9      	add	r9, r5
 800a632:	fa5f f789 	uxtb.w	r7, r9
 800a636:	f3c9 2507 	ubfx	r5, r9, #8, #8
 800a63a:	f3c9 4607 	ubfx	r6, r9, #16, #8
 800a63e:	ea4f 6919 	mov.w	r9, r9, lsr #24
 800a642:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 800a646:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 800a64a:	eb07 2191 	add.w	r1, r7, r1, lsr #10
 800a64e:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
 800a652:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
 800a656:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800a65a:	f3c1 0909 	ubfx	r9, r1, #0, #10
 800a65e:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 800a662:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800a666:	eb07 2196 	add.w	r1, r7, r6, lsr #10
 800a66a:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800a66e:	ea45 4909 	orr.w	r9, r5, r9, lsl #16
 800a672:	f3c1 0509 	ubfx	r5, r1, #0, #10
 800a676:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 800a67a:	4d34      	ldr	r5, [pc, #208]	; (800a74c <D32_GENERIC+0x174>)
 800a67c:	fb29 8805 	smlad	r8, r9, r5, r8
 800a680:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 800a684:	fb26 8705 	smlad	r7, r6, r5, r8
 800a688:	4d31      	ldr	r5, [pc, #196]	; (800a750 <D32_GENERIC+0x178>)
 800a68a:	fb29 3305 	smlad	r3, r9, r5, r3
 800a68e:	4d31      	ldr	r5, [pc, #196]	; (800a754 <D32_GENERIC+0x17c>)
 800a690:	fb26 3805 	smlad	r8, r6, r5, r3
 800a694:	2301      	movs	r3, #1
 800a696:	fb29 f903 	smuad	r9, r9, r3
 800a69a:	4b2f      	ldr	r3, [pc, #188]	; (800a758 <D32_GENERIC+0x180>)
 800a69c:	fb26 9303 	smlad	r3, r6, r3, r9
 800a6a0:	9e05      	ldr	r6, [sp, #20]
 800a6a2:	f10e 0901 	add.w	r9, lr, #1
 800a6a6:	f5a7 4580 	sub.w	r5, r7, #16384	; 0x4000
 800a6aa:	b1ae      	cbz	r6, 800a6d8 <D32_GENERIC+0x100>
 800a6ac:	442c      	add	r4, r5
 800a6ae:	9e02      	ldr	r6, [sp, #8]
 800a6b0:	f8d2 a020 	ldr.w	sl, [r2, #32]
 800a6b4:	1ba4      	subs	r4, r4, r6
 800a6b6:	9502      	str	r5, [sp, #8]
 800a6b8:	17e7      	asrs	r7, r4, #31
 800a6ba:	fba4 450a 	umull	r4, r5, r4, sl
 800a6be:	e9cd 4500 	strd	r4, r5, [sp]
 800a6c2:	fb0a 5407 	mla	r4, sl, r7, r5
 800a6c6:	9401      	str	r4, [sp, #4]
 800a6c8:	e9dd 4500 	ldrd	r4, r5, [sp]
 800a6cc:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800a6d0:	f145 0500 	adc.w	r5, r5, #0
 800a6d4:	006c      	lsls	r4, r5, #1
 800a6d6:	4625      	mov	r5, r4
 800a6d8:	f8b2 a028 	ldrh.w	sl, [r2, #40]	; 0x28
 800a6dc:	036d      	lsls	r5, r5, #13
 800a6de:	9f03      	ldr	r7, [sp, #12]
 800a6e0:	fb0e fb0a 	mul.w	fp, lr, sl
 800a6e4:	fa1f fe89 	uxth.w	lr, r9
 800a6e8:	f04f 0a00 	mov.w	sl, #0
 800a6ec:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 800a6f0:	9e04      	ldr	r6, [sp, #16]
 800a6f2:	fbc7 9a05 	smlal	r9, sl, r7, r5
 800a6f6:	4657      	mov	r7, sl
 800a6f8:	10bd      	asrs	r5, r7, #2
 800a6fa:	f305 050f 	ssat	r5, #16, r5
 800a6fe:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 800a702:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800a704:	4575      	cmp	r5, lr
 800a706:	d911      	bls.n	800a72c <D32_GENERIC+0x154>
 800a708:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800a70a:	b2ee      	uxtb	r6, r5
 800a70c:	2d01      	cmp	r5, #1
 800a70e:	eb00 0746 	add.w	r7, r0, r6, lsl #1
 800a712:	eb06 0946 	add.w	r9, r6, r6, lsl #1
 800a716:	f47f af7d 	bne.w	800a614 <D32_GENERIC+0x3c>
 800a71a:	1d05      	adds	r5, r0, #4
 800a71c:	f8d0 9000 	ldr.w	r9, [r0]
 800a720:	9806      	ldr	r0, [sp, #24]
 800a722:	b180      	cbz	r0, 800a746 <D32_GENERIC+0x16e>
 800a724:	fa99 f999 	rev16.w	r9, r9
 800a728:	4628      	mov	r0, r5
 800a72a:	e782      	b.n	800a632 <D32_GENERIC+0x5a>
 800a72c:	6093      	str	r3, [r2, #8]
 800a72e:	2000      	movs	r0, #0
 800a730:	9b02      	ldr	r3, [sp, #8]
 800a732:	f8c2 800c 	str.w	r8, [r2, #12]
 800a736:	6153      	str	r3, [r2, #20]
 800a738:	9b07      	ldr	r3, [sp, #28]
 800a73a:	61d1      	str	r1, [r2, #28]
 800a73c:	6114      	str	r4, [r2, #16]
 800a73e:	6193      	str	r3, [r2, #24]
 800a740:	b009      	add	sp, #36	; 0x24
 800a742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a746:	4628      	mov	r0, r5
 800a748:	e773      	b.n	800a632 <D32_GENERIC+0x5a>
 800a74a:	bf00      	nop
 800a74c:	00060003 	.word	0x00060003
 800a750:	000a000c 	.word	0x000a000c
 800a754:	000c000a 	.word	0x000c000a
 800a758:	00030006 	.word	0x00030006
 800a75c:	24000000 	.word	0x24000000

0800a760 <D48_GENERIC>:
 800a760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a764:	6913      	ldr	r3, [r2, #16]
 800a766:	b089      	sub	sp, #36	; 0x24
 800a768:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800a76a:	9301      	str	r3, [sp, #4]
 800a76c:	6953      	ldr	r3, [r2, #20]
 800a76e:	9104      	str	r1, [sp, #16]
 800a770:	9302      	str	r3, [sp, #8]
 800a772:	6993      	ldr	r3, [r2, #24]
 800a774:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 800a778:	9307      	str	r3, [sp, #28]
 800a77a:	e9d2 3102 	ldrd	r3, r1, [r2, #8]
 800a77e:	9100      	str	r1, [sp, #0]
 800a780:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800a782:	9103      	str	r1, [sp, #12]
 800a784:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800a786:	2c00      	cmp	r4, #0
 800a788:	f000 80be 	beq.w	800a908 <D48_GENERIC+0x1a8>
 800a78c:	f001 0420 	and.w	r4, r1, #32
 800a790:	f001 0110 	and.w	r1, r1, #16
 800a794:	f04f 0e00 	mov.w	lr, #0
 800a798:	9105      	str	r1, [sp, #20]
 800a79a:	9406      	str	r4, [sp, #24]
 800a79c:	4962      	ldr	r1, [pc, #392]	; (800a928 <D48_GENERIC+0x1c8>)
 800a79e:	e0a0      	b.n	800a8e2 <D48_GENERIC+0x182>
 800a7a0:	eb00 0608 	add.w	r6, r0, r8
 800a7a4:	f810 a008 	ldrb.w	sl, [r0, r8]
 800a7a8:	f810 9005 	ldrb.w	r9, [r0, r5]
 800a7ac:	5df4      	ldrb	r4, [r6, r7]
 800a7ae:	443e      	add	r6, r7
 800a7b0:	f890 b000 	ldrb.w	fp, [r0]
 800a7b4:	0420      	lsls	r0, r4, #16
 800a7b6:	eb06 0408 	add.w	r4, r6, r8
 800a7ba:	f816 6008 	ldrb.w	r6, [r6, r8]
 800a7be:	eb00 6a0a 	add.w	sl, r0, sl, lsl #24
 800a7c2:	f814 8007 	ldrb.w	r8, [r4, r7]
 800a7c6:	4427      	add	r7, r4
 800a7c8:	eb0a 2a09 	add.w	sl, sl, r9, lsl #8
 800a7cc:	eb08 2606 	add.w	r6, r8, r6, lsl #8
 800a7d0:	eb0a 040b 	add.w	r4, sl, fp
 800a7d4:	eb07 0045 	add.w	r0, r7, r5, lsl #1
 800a7d8:	f3c6 2807 	ubfx	r8, r6, #8, #8
 800a7dc:	b2f7      	uxtb	r7, r6
 800a7de:	b2e6      	uxtb	r6, r4
 800a7e0:	f3c4 2507 	ubfx	r5, r4, #8, #8
 800a7e4:	f3c4 4907 	ubfx	r9, r4, #16, #8
 800a7e8:	ea4f 6b14 	mov.w	fp, r4, lsr #24
 800a7ec:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800a7f0:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 800a7f4:	eb06 269c 	add.w	r6, r6, ip, lsr #10
 800a7f8:	f851 9029 	ldr.w	r9, [r1, r9, lsl #2]
 800a7fc:	f851 402b 	ldr.w	r4, [r1, fp, lsl #2]
 800a800:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 800a804:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 800a808:	f851 c028 	ldr.w	ip, [r1, r8, lsl #2]
 800a80c:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800a810:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 800a814:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800a818:	eb04 2499 	add.w	r4, r4, r9, lsr #10
 800a81c:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800a820:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 800a824:	9d00      	ldr	r5, [sp, #0]
 800a826:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 800a82a:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800a82e:	eb0c 2c97 	add.w	ip, ip, r7, lsr #10
 800a832:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800a836:	ea44 4909 	orr.w	r9, r4, r9, lsl #16
 800a83a:	f3cc 0409 	ubfx	r4, ip, #0, #10
 800a83e:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 800a842:	4c3a      	ldr	r4, [pc, #232]	; (800a92c <D48_GENERIC+0x1cc>)
 800a844:	fb26 5a04 	smlad	sl, r6, r4, r5
 800a848:	4c39      	ldr	r4, [pc, #228]	; (800a930 <D48_GENERIC+0x1d0>)
 800a84a:	fb29 aa04 	smlad	sl, r9, r4, sl
 800a84e:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 800a852:	fb27 aa04 	smlad	sl, r7, r4, sl
 800a856:	4c37      	ldr	r4, [pc, #220]	; (800a934 <D48_GENERIC+0x1d4>)
 800a858:	fb26 3304 	smlad	r3, r6, r4, r3
 800a85c:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 800a860:	fb29 3304 	smlad	r3, r9, r4, r3
 800a864:	4c34      	ldr	r4, [pc, #208]	; (800a938 <D48_GENERIC+0x1d8>)
 800a866:	fb27 3304 	smlad	r3, r7, r4, r3
 800a86a:	2501      	movs	r5, #1
 800a86c:	9300      	str	r3, [sp, #0]
 800a86e:	fb26 f605 	smuad	r6, r6, r5
 800a872:	4b32      	ldr	r3, [pc, #200]	; (800a93c <D48_GENERIC+0x1dc>)
 800a874:	fb29 6903 	smlad	r9, r9, r3, r6
 800a878:	4b31      	ldr	r3, [pc, #196]	; (800a940 <D48_GENERIC+0x1e0>)
 800a87a:	fb27 9303 	smlad	r3, r7, r3, r9
 800a87e:	9c05      	ldr	r4, [sp, #20]
 800a880:	eb0e 0805 	add.w	r8, lr, r5
 800a884:	f5aa 4a58 	sub.w	sl, sl, #55296	; 0xd800
 800a888:	b19c      	cbz	r4, 800a8b2 <D48_GENERIC+0x152>
 800a88a:	9c01      	ldr	r4, [sp, #4]
 800a88c:	9d02      	ldr	r5, [sp, #8]
 800a88e:	4454      	add	r4, sl
 800a890:	f8d2 9020 	ldr.w	r9, [r2, #32]
 800a894:	f8cd a008 	str.w	sl, [sp, #8]
 800a898:	1b64      	subs	r4, r4, r5
 800a89a:	fba4 ab09 	umull	sl, fp, r4, r9
 800a89e:	17e7      	asrs	r7, r4, #31
 800a8a0:	f11a 4400 	adds.w	r4, sl, #2147483648	; 0x80000000
 800a8a4:	fb09 bb07 	mla	fp, r9, r7, fp
 800a8a8:	f14b 0500 	adc.w	r5, fp, #0
 800a8ac:	006c      	lsls	r4, r5, #1
 800a8ae:	46a2      	mov	sl, r4
 800a8b0:	9401      	str	r4, [sp, #4]
 800a8b2:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 800a8b4:	ea4f 2aca 	mov.w	sl, sl, lsl #11
 800a8b8:	9d03      	ldr	r5, [sp, #12]
 800a8ba:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800a8be:	fb0e f606 	mul.w	r6, lr, r6
 800a8c2:	fa1f fe88 	uxth.w	lr, r8
 800a8c6:	f04f 0800 	mov.w	r8, #0
 800a8ca:	fbc5 780a 	smlal	r7, r8, r5, sl
 800a8ce:	4645      	mov	r5, r8
 800a8d0:	10ac      	asrs	r4, r5, #2
 800a8d2:	9d04      	ldr	r5, [sp, #16]
 800a8d4:	f304 040f 	ssat	r4, #16, r4
 800a8d8:	f825 4016 	strh.w	r4, [r5, r6, lsl #1]
 800a8dc:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800a8de:	4574      	cmp	r4, lr
 800a8e0:	d912      	bls.n	800a908 <D48_GENERIC+0x1a8>
 800a8e2:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 800a8e4:	b2e5      	uxtb	r5, r4
 800a8e6:	2c01      	cmp	r4, #1
 800a8e8:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 800a8ec:	f1c5 0700 	rsb	r7, r5, #0
 800a8f0:	f47f af56 	bne.w	800a7a0 <D48_GENERIC+0x40>
 800a8f4:	9d06      	ldr	r5, [sp, #24]
 800a8f6:	e9d0 4600 	ldrd	r4, r6, [r0]
 800a8fa:	3006      	adds	r0, #6
 800a8fc:	2d00      	cmp	r5, #0
 800a8fe:	f43f af6b 	beq.w	800a7d8 <D48_GENERIC+0x78>
 800a902:	ba64      	rev16	r4, r4
 800a904:	ba76      	rev16	r6, r6
 800a906:	e767      	b.n	800a7d8 <D48_GENERIC+0x78>
 800a908:	6093      	str	r3, [r2, #8]
 800a90a:	2000      	movs	r0, #0
 800a90c:	9b00      	ldr	r3, [sp, #0]
 800a90e:	f8c2 c01c 	str.w	ip, [r2, #28]
 800a912:	60d3      	str	r3, [r2, #12]
 800a914:	9b01      	ldr	r3, [sp, #4]
 800a916:	6113      	str	r3, [r2, #16]
 800a918:	9b02      	ldr	r3, [sp, #8]
 800a91a:	6153      	str	r3, [r2, #20]
 800a91c:	9b07      	ldr	r3, [sp, #28]
 800a91e:	6193      	str	r3, [r2, #24]
 800a920:	b009      	add	sp, #36	; 0x24
 800a922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a926:	bf00      	nop
 800a928:	24000000 	.word	0x24000000
 800a92c:	000f000a 	.word	0x000f000a
 800a930:	00060003 	.word	0x00060003
 800a934:	00150019 	.word	0x00150019
 800a938:	00190015 	.word	0x00190015
 800a93c:	00030006 	.word	0x00030006
 800a940:	000a000f 	.word	0x000a000f

0800a944 <D64_GENERIC>:
 800a944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a948:	6913      	ldr	r3, [r2, #16]
 800a94a:	b089      	sub	sp, #36	; 0x24
 800a94c:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800a94e:	9300      	str	r3, [sp, #0]
 800a950:	6953      	ldr	r3, [r2, #20]
 800a952:	9105      	str	r1, [sp, #20]
 800a954:	9303      	str	r3, [sp, #12]
 800a956:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 800a958:	6993      	ldr	r3, [r2, #24]
 800a95a:	69d4      	ldr	r4, [r2, #28]
 800a95c:	9307      	str	r3, [sp, #28]
 800a95e:	9504      	str	r5, [sp, #16]
 800a960:	e9d2 3602 	ldrd	r3, r6, [r2, #8]
 800a964:	2900      	cmp	r1, #0
 800a966:	f000 80e8 	beq.w	800ab3a <D64_GENERIC+0x1f6>
 800a96a:	6a11      	ldr	r1, [r2, #32]
 800a96c:	2500      	movs	r5, #0
 800a96e:	46b3      	mov	fp, r6
 800a970:	9302      	str	r3, [sp, #8]
 800a972:	9106      	str	r1, [sp, #24]
 800a974:	4978      	ldr	r1, [pc, #480]	; (800ab58 <D64_GENERIC+0x214>)
 800a976:	e0cc      	b.n	800ab12 <D64_GENERIC+0x1ce>
 800a978:	eb0e 084e 	add.w	r8, lr, lr, lsl #1
 800a97c:	f1ce 0c00 	rsb	ip, lr, #0
 800a980:	f890 9000 	ldrb.w	r9, [r0]
 800a984:	eb00 0708 	add.w	r7, r0, r8
 800a988:	f810 6008 	ldrb.w	r6, [r0, r8]
 800a98c:	eb07 0a4c 	add.w	sl, r7, ip, lsl #1
 800a990:	f817 000c 	ldrb.w	r0, [r7, ip]
 800a994:	f817 301c 	ldrb.w	r3, [r7, ip, lsl #1]
 800a998:	eb0a 0748 	add.w	r7, sl, r8, lsl #1
 800a99c:	f81a a018 	ldrb.w	sl, [sl, r8, lsl #1]
 800a9a0:	ea4f 4800 	mov.w	r8, r0, lsl #16
 800a9a4:	f817 000c 	ldrb.w	r0, [r7, ip]
 800a9a8:	eb08 6606 	add.w	r6, r8, r6, lsl #24
 800a9ac:	f817 801c 	ldrb.w	r8, [r7, ip, lsl #1]
 800a9b0:	0400      	lsls	r0, r0, #16
 800a9b2:	4467      	add	r7, ip
 800a9b4:	eb06 2603 	add.w	r6, r6, r3, lsl #8
 800a9b8:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 800a9bc:	f817 a01c 	ldrb.w	sl, [r7, ip, lsl #1]
 800a9c0:	eb07 074c 	add.w	r7, r7, ip, lsl #1
 800a9c4:	444e      	add	r6, r9
 800a9c6:	eb00 2808 	add.w	r8, r0, r8, lsl #8
 800a9ca:	eb07 008e 	add.w	r0, r7, lr, lsl #2
 800a9ce:	44c2      	add	sl, r8
 800a9d0:	b2f7      	uxtb	r7, r6
 800a9d2:	f3c6 2807 	ubfx	r8, r6, #8, #8
 800a9d6:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 800a9da:	0e36      	lsrs	r6, r6, #24
 800a9dc:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 800a9e0:	fa5f fc8a 	uxtb.w	ip, sl
 800a9e4:	f851 8028 	ldr.w	r8, [r1, r8, lsl #2]
 800a9e8:	f3ca 2907 	ubfx	r9, sl, #8, #8
 800a9ec:	443c      	add	r4, r7
 800a9ee:	f851 702e 	ldr.w	r7, [r1, lr, lsl #2]
 800a9f2:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800a9f6:	eb08 2894 	add.w	r8, r8, r4, lsr #10
 800a9fa:	f851 c02c 	ldr.w	ip, [r1, ip, lsl #2]
 800a9fe:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800aa02:	4b56      	ldr	r3, [pc, #344]	; (800ab5c <D64_GENERIC+0x218>)
 800aa04:	eb07 2e98 	add.w	lr, r7, r8, lsr #10
 800aa08:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800aa0c:	f851 7029 	ldr.w	r7, [r1, r9, lsl #2]
 800aa10:	eb06 269e 	add.w	r6, r6, lr, lsr #10
 800aa14:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800aa18:	ea48 4804 	orr.w	r8, r8, r4, lsl #16
 800aa1c:	f3ca 4407 	ubfx	r4, sl, #16, #8
 800aa20:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 800aa24:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800aa28:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800aa2c:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 800aa30:	eb07 279c 	add.w	r7, r7, ip, lsr #10
 800aa34:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800aa38:	f851 902a 	ldr.w	r9, [r1, sl, lsl #2]
 800aa3c:	ea46 460e 	orr.w	r6, r6, lr, lsl #16
 800aa40:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 800aa44:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800aa48:	eb09 299a 	add.w	r9, r9, sl, lsr #10
 800aa4c:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800aa50:	ea47 4c0c 	orr.w	ip, r7, ip, lsl #16
 800aa54:	f3c9 0709 	ubfx	r7, r9, #0, #10
 800aa58:	ea4f 2499 	mov.w	r4, r9, lsr #10
 800aa5c:	ea47 4a0a 	orr.w	sl, r7, sl, lsl #16
 800aa60:	fb28 b903 	smlad	r9, r8, r3, fp
 800aa64:	4b3e      	ldr	r3, [pc, #248]	; (800ab60 <D64_GENERIC+0x21c>)
 800aa66:	fb26 9903 	smlad	r9, r6, r3, r9
 800aa6a:	4b3e      	ldr	r3, [pc, #248]	; (800ab64 <D64_GENERIC+0x220>)
 800aa6c:	fb2c 9703 	smlad	r7, ip, r3, r9
 800aa70:	f44f 3980 	mov.w	r9, #65536	; 0x10000
 800aa74:	fb2a 7909 	smlad	r9, sl, r9, r7
 800aa78:	4f3b      	ldr	r7, [pc, #236]	; (800ab68 <D64_GENERIC+0x224>)
 800aa7a:	9b02      	ldr	r3, [sp, #8]
 800aa7c:	fb28 3307 	smlad	r3, r8, r7, r3
 800aa80:	fb2a 3317 	smladx	r3, sl, r7, r3
 800aa84:	4f39      	ldr	r7, [pc, #228]	; (800ab6c <D64_GENERIC+0x228>)
 800aa86:	fb26 3307 	smlad	r3, r6, r7, r3
 800aa8a:	fb2c 3b17 	smladx	fp, ip, r7, r3
 800aa8e:	f04f 0e01 	mov.w	lr, #1
 800aa92:	fb28 f80e 	smuad	r8, r8, lr
 800aa96:	4b36      	ldr	r3, [pc, #216]	; (800ab70 <D64_GENERIC+0x22c>)
 800aa98:	fb26 8603 	smlad	r6, r6, r3, r8
 800aa9c:	4b35      	ldr	r3, [pc, #212]	; (800ab74 <D64_GENERIC+0x230>)
 800aa9e:	fb2c 6c03 	smlad	ip, ip, r3, r6
 800aaa2:	4b35      	ldr	r3, [pc, #212]	; (800ab78 <D64_GENERIC+0x234>)
 800aaa4:	fb2a c303 	smlad	r3, sl, r3, ip
 800aaa8:	9f06      	ldr	r7, [sp, #24]
 800aaaa:	f5a9 3900 	sub.w	r9, r9, #131072	; 0x20000
 800aaae:	9302      	str	r3, [sp, #8]
 800aab0:	b1cf      	cbz	r7, 800aae6 <D64_GENERIC+0x1a2>
 800aab2:	9b00      	ldr	r3, [sp, #0]
 800aab4:	444b      	add	r3, r9
 800aab6:	461e      	mov	r6, r3
 800aab8:	9b03      	ldr	r3, [sp, #12]
 800aaba:	f8cd 900c 	str.w	r9, [sp, #12]
 800aabe:	1af6      	subs	r6, r6, r3
 800aac0:	46b0      	mov	r8, r6
 800aac2:	ea4f 79e6 	mov.w	r9, r6, asr #31
 800aac6:	e9cd 8900 	strd	r8, r9, [sp]
 800aaca:	fba6 8907 	umull	r8, r9, r6, r7
 800aace:	9e01      	ldr	r6, [sp, #4]
 800aad0:	fb07 9306 	mla	r3, r7, r6, r9
 800aad4:	4646      	mov	r6, r8
 800aad6:	f116 4600 	adds.w	r6, r6, #2147483648	; 0x80000000
 800aada:	f143 0700 	adc.w	r7, r3, #0
 800aade:	fa07 f30e 	lsl.w	r3, r7, lr
 800aae2:	4699      	mov	r9, r3
 800aae4:	9300      	str	r3, [sp, #0]
 800aae6:	f8b2 c028 	ldrh.w	ip, [r2, #40]	; 0x28
 800aaea:	ea4f 2989 	mov.w	r9, r9, lsl #10
 800aaee:	9b04      	ldr	r3, [sp, #16]
 800aaf0:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800aaf4:	2700      	movs	r7, #0
 800aaf6:	fb05 fc0c 	mul.w	ip, r5, ip
 800aafa:	3501      	adds	r5, #1
 800aafc:	fbc3 6709 	smlal	r6, r7, r3, r9
 800ab00:	9b05      	ldr	r3, [sp, #20]
 800ab02:	10be      	asrs	r6, r7, #2
 800ab04:	f306 060f 	ssat	r6, #16, r6
 800ab08:	f823 601c 	strh.w	r6, [r3, ip, lsl #1]
 800ab0c:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 800ab0e:	42ae      	cmp	r6, r5
 800ab10:	dd11      	ble.n	800ab36 <D64_GENERIC+0x1f2>
 800ab12:	f8b2 e02a 	ldrh.w	lr, [r2, #42]	; 0x2a
 800ab16:	f1be 0f01 	cmp.w	lr, #1
 800ab1a:	f47f af2d 	bne.w	800a978 <D64_GENERIC+0x34>
 800ab1e:	6b57      	ldr	r7, [r2, #52]	; 0x34
 800ab20:	f100 0c08 	add.w	ip, r0, #8
 800ab24:	06bb      	lsls	r3, r7, #26
 800ab26:	e9d0 6a00 	ldrd	r6, sl, [r0]
 800ab2a:	d513      	bpl.n	800ab54 <D64_GENERIC+0x210>
 800ab2c:	ba76      	rev16	r6, r6
 800ab2e:	fa9a fa9a 	rev16.w	sl, sl
 800ab32:	4660      	mov	r0, ip
 800ab34:	e74c      	b.n	800a9d0 <D64_GENERIC+0x8c>
 800ab36:	465e      	mov	r6, fp
 800ab38:	9b02      	ldr	r3, [sp, #8]
 800ab3a:	6093      	str	r3, [r2, #8]
 800ab3c:	2000      	movs	r0, #0
 800ab3e:	9b00      	ldr	r3, [sp, #0]
 800ab40:	60d6      	str	r6, [r2, #12]
 800ab42:	6113      	str	r3, [r2, #16]
 800ab44:	9b03      	ldr	r3, [sp, #12]
 800ab46:	61d4      	str	r4, [r2, #28]
 800ab48:	6153      	str	r3, [r2, #20]
 800ab4a:	9b07      	ldr	r3, [sp, #28]
 800ab4c:	6193      	str	r3, [r2, #24]
 800ab4e:	b009      	add	sp, #36	; 0x24
 800ab50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab54:	4660      	mov	r0, ip
 800ab56:	e73b      	b.n	800a9d0 <D64_GENERIC+0x8c>
 800ab58:	24000000 	.word	0x24000000
 800ab5c:	001c0015 	.word	0x001c0015
 800ab60:	000f000a 	.word	0x000f000a
 800ab64:	00060003 	.word	0x00060003
 800ab68:	0024002a 	.word	0x0024002a
 800ab6c:	002e0030 	.word	0x002e0030
 800ab70:	00030006 	.word	0x00030006
 800ab74:	000a000f 	.word	0x000a000f
 800ab78:	0015001c 	.word	0x0015001c

0800ab7c <D80_GENERIC>:
 800ab7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab80:	b08b      	sub	sp, #44	; 0x2c
 800ab82:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800ab84:	9107      	str	r1, [sp, #28]
 800ab86:	6911      	ldr	r1, [r2, #16]
 800ab88:	9104      	str	r1, [sp, #16]
 800ab8a:	6951      	ldr	r1, [r2, #20]
 800ab8c:	9105      	str	r1, [sp, #20]
 800ab8e:	6991      	ldr	r1, [r2, #24]
 800ab90:	9109      	str	r1, [sp, #36]	; 0x24
 800ab92:	69d1      	ldr	r1, [r2, #28]
 800ab94:	9102      	str	r1, [sp, #8]
 800ab96:	6891      	ldr	r1, [r2, #8]
 800ab98:	9103      	str	r1, [sp, #12]
 800ab9a:	68d1      	ldr	r1, [r2, #12]
 800ab9c:	9101      	str	r1, [sp, #4]
 800ab9e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800aba0:	9106      	str	r1, [sp, #24]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	f000 810b 	beq.w	800adbe <D80_GENERIC+0x242>
 800aba8:	6a13      	ldr	r3, [r2, #32]
 800abaa:	f04f 0800 	mov.w	r8, #0
 800abae:	f8df c260 	ldr.w	ip, [pc, #608]	; 800ae10 <D80_GENERIC+0x294>
 800abb2:	9308      	str	r3, [sp, #32]
 800abb4:	9200      	str	r2, [sp, #0]
 800abb6:	e0ee      	b.n	800ad96 <D80_GENERIC+0x21a>
 800abb8:	b2db      	uxtb	r3, r3
 800abba:	f890 e000 	ldrb.w	lr, [r0]
 800abbe:	b219      	sxth	r1, r3
 800abc0:	425c      	negs	r4, r3
 800abc2:	f810 9003 	ldrb.w	r9, [r0, r3]
 800abc6:	004e      	lsls	r6, r1, #1
 800abc8:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 800abcc:	4431      	add	r1, r6
 800abce:	1843      	adds	r3, r0, r1
 800abd0:	f810 b001 	ldrb.w	fp, [r0, r1]
 800abd4:	1919      	adds	r1, r3, r4
 800abd6:	5d1b      	ldrb	r3, [r3, r4]
 800abd8:	1948      	adds	r0, r1, r5
 800abda:	f811 a005 	ldrb.w	sl, [r1, r5]
 800abde:	041b      	lsls	r3, r3, #16
 800abe0:	1907      	adds	r7, r0, r4
 800abe2:	5d01      	ldrb	r1, [r0, r4]
 800abe4:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 800abe8:	f810 0014 	ldrb.w	r0, [r0, r4, lsl #1]
 800abec:	eb07 0b44 	add.w	fp, r7, r4, lsl #1
 800abf0:	f817 7014 	ldrb.w	r7, [r7, r4, lsl #1]
 800abf4:	0409      	lsls	r1, r1, #16
 800abf6:	eb03 2309 	add.w	r3, r3, r9, lsl #8
 800abfa:	eb0b 0905 	add.w	r9, fp, r5
 800abfe:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 800ac02:	f81b 5005 	ldrb.w	r5, [fp, r5]
 800ac06:	eb09 0b04 	add.w	fp, r9, r4
 800ac0a:	f819 4004 	ldrb.w	r4, [r9, r4]
 800ac0e:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 800ac12:	4473      	add	r3, lr
 800ac14:	eb0b 0006 	add.w	r0, fp, r6
 800ac18:	eb04 2505 	add.w	r5, r4, r5, lsl #8
 800ac1c:	4439      	add	r1, r7
 800ac1e:	f3c3 2407 	ubfx	r4, r3, #8, #8
 800ac22:	b2df      	uxtb	r7, r3
 800ac24:	f3c3 4607 	ubfx	r6, r3, #16, #8
 800ac28:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 800ac2c:	f85c 3027 	ldr.w	r3, [ip, r7, lsl #2]
 800ac30:	fa5f fa81 	uxtb.w	sl, r1
 800ac34:	f85c 7024 	ldr.w	r7, [ip, r4, lsl #2]
 800ac38:	9c02      	ldr	r4, [sp, #8]
 800ac3a:	f85c 9026 	ldr.w	r9, [ip, r6, lsl #2]
 800ac3e:	441c      	add	r4, r3
 800ac40:	f85c 602e 	ldr.w	r6, [ip, lr, lsl #2]
 800ac44:	f85c e02a 	ldr.w	lr, [ip, sl, lsl #2]
 800ac48:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 800ac4c:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 800ac50:	f3c4 0309 	ubfx	r3, r4, #0, #10
 800ac54:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800ac58:	b2ed      	uxtb	r5, r5
 800ac5a:	eb09 2997 	add.w	r9, r9, r7, lsr #10
 800ac5e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800ac62:	f85c 4024 	ldr.w	r4, [ip, r4, lsl #2]
 800ac66:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 800ac6a:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 800ac6e:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 800ac72:	f3c1 4707 	ubfx	r7, r1, #16, #8
 800ac76:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 800ac7a:	f85c a02a 	ldr.w	sl, [ip, sl, lsl #2]
 800ac7e:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 800ac82:	0e09      	lsrs	r1, r1, #24
 800ac84:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 800ac88:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800ac8c:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 800ac90:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800ac94:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 800ac98:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800ac9c:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800aca0:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 800aca4:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800aca8:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
 800acac:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800acb0:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800acb4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800acb8:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 800acbc:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800acc0:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 800acc4:	ea4f 229a 	mov.w	r2, sl, lsr #10
 800acc8:	f3ca 0709 	ubfx	r7, sl, #0, #10
 800accc:	9202      	str	r2, [sp, #8]
 800acce:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 800acd2:	4a43      	ldr	r2, [pc, #268]	; (800ade0 <D80_GENERIC+0x264>)
 800acd4:	9f01      	ldr	r7, [sp, #4]
 800acd6:	fb23 7a02 	smlad	sl, r3, r2, r7
 800acda:	4a42      	ldr	r2, [pc, #264]	; (800ade4 <D80_GENERIC+0x268>)
 800acdc:	fb26 aa02 	smlad	sl, r6, r2, sl
 800ace0:	4a41      	ldr	r2, [pc, #260]	; (800ade8 <D80_GENERIC+0x26c>)
 800ace2:	fb24 aa02 	smlad	sl, r4, r2, sl
 800ace6:	4a41      	ldr	r2, [pc, #260]	; (800adec <D80_GENERIC+0x270>)
 800ace8:	fb21 a702 	smlad	r7, r1, r2, sl
 800acec:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 800acf0:	fb25 7a0a 	smlad	sl, r5, sl, r7
 800acf4:	4a3e      	ldr	r2, [pc, #248]	; (800adf0 <D80_GENERIC+0x274>)
 800acf6:	9f03      	ldr	r7, [sp, #12]
 800acf8:	fb23 7e02 	smlad	lr, r3, r2, r7
 800acfc:	4a3d      	ldr	r2, [pc, #244]	; (800adf4 <D80_GENERIC+0x278>)
 800acfe:	fb26 ee02 	smlad	lr, r6, r2, lr
 800ad02:	f04f 174b 	mov.w	r7, #4915275	; 0x4b004b
 800ad06:	fb24 e707 	smlad	r7, r4, r7, lr
 800ad0a:	4a3b      	ldr	r2, [pc, #236]	; (800adf8 <D80_GENERIC+0x27c>)
 800ad0c:	fb21 7702 	smlad	r7, r1, r2, r7
 800ad10:	4a3a      	ldr	r2, [pc, #232]	; (800adfc <D80_GENERIC+0x280>)
 800ad12:	fb25 7202 	smlad	r2, r5, r2, r7
 800ad16:	f04f 0901 	mov.w	r9, #1
 800ad1a:	9201      	str	r2, [sp, #4]
 800ad1c:	fb23 f909 	smuad	r9, r3, r9
 800ad20:	4b37      	ldr	r3, [pc, #220]	; (800ae00 <D80_GENERIC+0x284>)
 800ad22:	fb26 9603 	smlad	r6, r6, r3, r9
 800ad26:	4f37      	ldr	r7, [pc, #220]	; (800ae04 <D80_GENERIC+0x288>)
 800ad28:	fb24 6407 	smlad	r4, r4, r7, r6
 800ad2c:	4f36      	ldr	r7, [pc, #216]	; (800ae08 <D80_GENERIC+0x28c>)
 800ad2e:	fb21 4707 	smlad	r7, r1, r7, r4
 800ad32:	4936      	ldr	r1, [pc, #216]	; (800ae0c <D80_GENERIC+0x290>)
 800ad34:	fb25 7301 	smlad	r3, r5, r1, r7
 800ad38:	9303      	str	r3, [sp, #12]
 800ad3a:	f5aa 3a7a 	sub.w	sl, sl, #256000	; 0x3e800
 800ad3e:	9b08      	ldr	r3, [sp, #32]
 800ad40:	b193      	cbz	r3, 800ad68 <D80_GENERIC+0x1ec>
 800ad42:	9a04      	ldr	r2, [sp, #16]
 800ad44:	4452      	add	r2, sl
 800ad46:	4614      	mov	r4, r2
 800ad48:	9a05      	ldr	r2, [sp, #20]
 800ad4a:	f8cd a014 	str.w	sl, [sp, #20]
 800ad4e:	1aa4      	subs	r4, r4, r2
 800ad50:	fba4 1203 	umull	r1, r2, r4, r3
 800ad54:	17e7      	asrs	r7, r4, #31
 800ad56:	f111 4400 	adds.w	r4, r1, #2147483648	; 0x80000000
 800ad5a:	fb03 2207 	mla	r2, r3, r7, r2
 800ad5e:	f142 0500 	adc.w	r5, r2, #0
 800ad62:	006b      	lsls	r3, r5, #1
 800ad64:	469a      	mov	sl, r3
 800ad66:	9304      	str	r3, [sp, #16]
 800ad68:	9e00      	ldr	r6, [sp, #0]
 800ad6a:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
 800ad6e:	9a06      	ldr	r2, [sp, #24]
 800ad70:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800ad74:	8d33      	ldrh	r3, [r6, #40]	; 0x28
 800ad76:	2500      	movs	r5, #0
 800ad78:	fb08 f303 	mul.w	r3, r8, r3
 800ad7c:	fbc2 450a 	smlal	r4, r5, r2, sl
 800ad80:	9a07      	ldr	r2, [sp, #28]
 800ad82:	f108 0801 	add.w	r8, r8, #1
 800ad86:	10a9      	asrs	r1, r5, #2
 800ad88:	f301 010f 	ssat	r1, #16, r1
 800ad8c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800ad90:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 800ad92:	4543      	cmp	r3, r8
 800ad94:	dd12      	ble.n	800adbc <D80_GENERIC+0x240>
 800ad96:	9b00      	ldr	r3, [sp, #0]
 800ad98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ad9a:	2b01      	cmp	r3, #1
 800ad9c:	f47f af0c 	bne.w	800abb8 <D80_GENERIC+0x3c>
 800ada0:	9b00      	ldr	r3, [sp, #0]
 800ada2:	6885      	ldr	r5, [r0, #8]
 800ada4:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 800ada6:	06b2      	lsls	r2, r6, #26
 800ada8:	e9d0 3100 	ldrd	r3, r1, [r0]
 800adac:	f100 000a 	add.w	r0, r0, #10
 800adb0:	f57f af35 	bpl.w	800ac1e <D80_GENERIC+0xa2>
 800adb4:	ba5b      	rev16	r3, r3
 800adb6:	ba49      	rev16	r1, r1
 800adb8:	ba6d      	rev16	r5, r5
 800adba:	e730      	b.n	800ac1e <D80_GENERIC+0xa2>
 800adbc:	4632      	mov	r2, r6
 800adbe:	9b03      	ldr	r3, [sp, #12]
 800adc0:	2000      	movs	r0, #0
 800adc2:	6093      	str	r3, [r2, #8]
 800adc4:	9b01      	ldr	r3, [sp, #4]
 800adc6:	60d3      	str	r3, [r2, #12]
 800adc8:	9b02      	ldr	r3, [sp, #8]
 800adca:	61d3      	str	r3, [r2, #28]
 800adcc:	9b04      	ldr	r3, [sp, #16]
 800adce:	6113      	str	r3, [r2, #16]
 800add0:	9b05      	ldr	r3, [sp, #20]
 800add2:	6153      	str	r3, [r2, #20]
 800add4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800add6:	6193      	str	r3, [r2, #24]
 800add8:	b00b      	add	sp, #44	; 0x2c
 800adda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adde:	bf00      	nop
 800ade0:	002d0024 	.word	0x002d0024
 800ade4:	001c0015 	.word	0x001c0015
 800ade8:	000f000a 	.word	0x000f000a
 800adec:	00060003 	.word	0x00060003
 800adf0:	0037003f 	.word	0x0037003f
 800adf4:	00450049 	.word	0x00450049
 800adf8:	00490045 	.word	0x00490045
 800adfc:	003f0037 	.word	0x003f0037
 800ae00:	00030006 	.word	0x00030006
 800ae04:	000a000f 	.word	0x000a000f
 800ae08:	0015001c 	.word	0x0015001c
 800ae0c:	0024002d 	.word	0x0024002d
 800ae10:	24000000 	.word	0x24000000

0800ae14 <D128_GENERIC>:
 800ae14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae18:	b08d      	sub	sp, #52	; 0x34
 800ae1a:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800ae1c:	f8d2 a01c 	ldr.w	sl, [r2, #28]
 800ae20:	9109      	str	r1, [sp, #36]	; 0x24
 800ae22:	6911      	ldr	r1, [r2, #16]
 800ae24:	9201      	str	r2, [sp, #4]
 800ae26:	9106      	str	r1, [sp, #24]
 800ae28:	6951      	ldr	r1, [r2, #20]
 800ae2a:	9107      	str	r1, [sp, #28]
 800ae2c:	6991      	ldr	r1, [r2, #24]
 800ae2e:	910b      	str	r1, [sp, #44]	; 0x2c
 800ae30:	6891      	ldr	r1, [r2, #8]
 800ae32:	9103      	str	r1, [sp, #12]
 800ae34:	68d1      	ldr	r1, [r2, #12]
 800ae36:	9102      	str	r1, [sp, #8]
 800ae38:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800ae3a:	9108      	str	r1, [sp, #32]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	f000 8183 	beq.w	800b148 <D128_GENERIC+0x334>
 800ae42:	2300      	movs	r3, #0
 800ae44:	6a12      	ldr	r2, [r2, #32]
 800ae46:	4681      	mov	r9, r0
 800ae48:	920a      	str	r2, [sp, #40]	; 0x28
 800ae4a:	e9cd a304 	strd	sl, r3, [sp, #16]
 800ae4e:	e165      	b.n	800b11c <D128_GENERIC+0x308>
 800ae50:	b2d2      	uxtb	r2, r2
 800ae52:	f899 b000 	ldrb.w	fp, [r9]
 800ae56:	b213      	sxth	r3, r2
 800ae58:	4255      	negs	r5, r2
 800ae5a:	f819 0002 	ldrb.w	r0, [r9, r2]
 800ae5e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800ae62:	009f      	lsls	r7, r3, #2
 800ae64:	eb09 0402 	add.w	r4, r9, r2
 800ae68:	ebc3 06c3 	rsb	r6, r3, r3, lsl #3
 800ae6c:	f819 8002 	ldrb.w	r8, [r9, r2]
 800ae70:	443b      	add	r3, r7
 800ae72:	1962      	adds	r2, r4, r5
 800ae74:	5d64      	ldrb	r4, [r4, r5]
 800ae76:	eb02 0c03 	add.w	ip, r2, r3
 800ae7a:	0424      	lsls	r4, r4, #16
 800ae7c:	5cd3      	ldrb	r3, [r2, r3]
 800ae7e:	eb0c 0e05 	add.w	lr, ip, r5
 800ae82:	f81c 9015 	ldrb.w	r9, [ip, r5, lsl #1]
 800ae86:	f81c 2005 	ldrb.w	r2, [ip, r5]
 800ae8a:	eb04 6408 	add.w	r4, r4, r8, lsl #24
 800ae8e:	eb0e 0c45 	add.w	ip, lr, r5, lsl #1
 800ae92:	f81e 8015 	ldrb.w	r8, [lr, r5, lsl #1]
 800ae96:	eb04 2400 	add.w	r4, r4, r0, lsl #8
 800ae9a:	eb0c 0e06 	add.w	lr, ip, r6
 800ae9e:	f81c a006 	ldrb.w	sl, [ip, r6]
 800aea2:	0412      	lsls	r2, r2, #16
 800aea4:	445c      	add	r4, fp
 800aea6:	eb0e 0c05 	add.w	ip, lr, r5
 800aeaa:	eb02 6203 	add.w	r2, r2, r3, lsl #24
 800aeae:	f81e 3005 	ldrb.w	r3, [lr, r5]
 800aeb2:	eb0c 0045 	add.w	r0, ip, r5, lsl #1
 800aeb6:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 800aeba:	041b      	lsls	r3, r3, #16
 800aebc:	f81c c015 	ldrb.w	ip, [ip, r5, lsl #1]
 800aec0:	eb00 0b06 	add.w	fp, r0, r6
 800aec4:	5d80      	ldrb	r0, [r0, r6]
 800aec6:	eb03 630a 	add.w	r3, r3, sl, lsl #24
 800aeca:	f81b 6005 	ldrb.w	r6, [fp, r5]
 800aece:	eb0b 0a05 	add.w	sl, fp, r5
 800aed2:	eb02 2209 	add.w	r2, r2, r9, lsl #8
 800aed6:	f81b b015 	ldrb.w	fp, [fp, r5, lsl #1]
 800aeda:	0436      	lsls	r6, r6, #16
 800aedc:	eb0a 0945 	add.w	r9, sl, r5, lsl #1
 800aee0:	4442      	add	r2, r8
 800aee2:	eb06 6600 	add.w	r6, r6, r0, lsl #24
 800aee6:	f81a 8015 	ldrb.w	r8, [sl, r5, lsl #1]
 800aeea:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 800aeee:	44b9      	add	r9, r7
 800aef0:	eb06 260b 	add.w	r6, r6, fp, lsl #8
 800aef4:	4463      	add	r3, ip
 800aef6:	eb06 0508 	add.w	r5, r6, r8
 800aefa:	b2e7      	uxtb	r7, r4
 800aefc:	f3c4 2607 	ubfx	r6, r4, #8, #8
 800af00:	499b      	ldr	r1, [pc, #620]	; (800b170 <D128_GENERIC+0x35c>)
 800af02:	f3c4 4007 	ubfx	r0, r4, #16, #8
 800af06:	0e24      	lsrs	r4, r4, #24
 800af08:	f851 c027 	ldr.w	ip, [r1, r7, lsl #2]
 800af0c:	b2d7      	uxtb	r7, r2
 800af0e:	f851 b026 	ldr.w	fp, [r1, r6, lsl #2]
 800af12:	f3c2 2607 	ubfx	r6, r2, #8, #8
 800af16:	9904      	ldr	r1, [sp, #16]
 800af18:	4461      	add	r1, ip
 800af1a:	468c      	mov	ip, r1
 800af1c:	4994      	ldr	r1, [pc, #592]	; (800b170 <D128_GENERIC+0x35c>)
 800af1e:	eb0b 2b9c 	add.w	fp, fp, ip, lsr #10
 800af22:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800af26:	f851 8024 	ldr.w	r8, [r1, r4, lsl #2]
 800af2a:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800af2e:	eb00 209b 	add.w	r0, r0, fp, lsr #10
 800af32:	f851 e027 	ldr.w	lr, [r1, r7, lsl #2]
 800af36:	f851 7026 	ldr.w	r7, [r1, r6, lsl #2]
 800af3a:	0e12      	lsrs	r2, r2, #24
 800af3c:	eb08 2890 	add.w	r8, r8, r0, lsr #10
 800af40:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800af44:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 800af48:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800af4c:	eb0e 2e98 	add.w	lr, lr, r8, lsr #10
 800af50:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800af54:	b2da      	uxtb	r2, r3
 800af56:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800af5a:	eb07 279e 	add.w	r7, r7, lr, lsr #10
 800af5e:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800af62:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800af66:	ea48 4800 	orr.w	r8, r8, r0, lsl #16
 800af6a:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 800af6e:	f3c3 2007 	ubfx	r0, r3, #8, #8
 800af72:	ea4b 4b0c 	orr.w	fp, fp, ip, lsl #16
 800af76:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800af7a:	eb06 269a 	add.w	r6, r6, sl, lsr #10
 800af7e:	f851 c020 	ldr.w	ip, [r1, r0, lsl #2]
 800af82:	f3c3 4007 	ubfx	r0, r3, #16, #8
 800af86:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800af8a:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 800af8e:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800af92:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 800af96:	0e1b      	lsrs	r3, r3, #24
 800af98:	eb0c 2c92 	add.w	ip, ip, r2, lsr #10
 800af9c:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800afa0:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800afa4:	ea47 470e 	orr.w	r7, r7, lr, lsl #16
 800afa8:	b2eb      	uxtb	r3, r5
 800afaa:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800afae:	eb04 2e9c 	add.w	lr, r4, ip, lsr #10
 800afb2:	f3cc 0409 	ubfx	r4, ip, #0, #10
 800afb6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800afba:	ea46 460a 	orr.w	r6, r6, sl, lsl #16
 800afbe:	eb00 209e 	add.w	r0, r0, lr, lsr #10
 800afc2:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 800afc6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800afca:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800afce:	eb03 2c90 	add.w	ip, r3, r0, lsr #10
 800afd2:	f851 202a 	ldr.w	r2, [r1, sl, lsl #2]
 800afd6:	f3c5 4307 	ubfx	r3, r5, #16, #8
 800afda:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 800afde:	eb02 229c 	add.w	r2, r2, ip, lsr #10
 800afe2:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800afe6:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
 800afea:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800afee:	f851 302a 	ldr.w	r3, [r1, sl, lsl #2]
 800aff2:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 800aff6:	eb05 2592 	add.w	r5, r5, r2, lsr #10
 800affa:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800affe:	eb03 2e95 	add.w	lr, r3, r5, lsr #10
 800b002:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800b006:	ea42 430c 	orr.w	r3, r2, ip, lsl #16
 800b00a:	ea4f 219e 	mov.w	r1, lr, lsr #10
 800b00e:	f3ce 0209 	ubfx	r2, lr, #0, #10
 800b012:	9104      	str	r1, [sp, #16]
 800b014:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800b018:	9902      	ldr	r1, [sp, #8]
 800b01a:	4a56      	ldr	r2, [pc, #344]	; (800b174 <D128_GENERIC+0x360>)
 800b01c:	fb2b 1202 	smlad	r2, fp, r2, r1
 800b020:	4955      	ldr	r1, [pc, #340]	; (800b178 <D128_GENERIC+0x364>)
 800b022:	fb28 2201 	smlad	r2, r8, r1, r2
 800b026:	4955      	ldr	r1, [pc, #340]	; (800b17c <D128_GENERIC+0x368>)
 800b028:	fb27 2201 	smlad	r2, r7, r1, r2
 800b02c:	4954      	ldr	r1, [pc, #336]	; (800b180 <D128_GENERIC+0x36c>)
 800b02e:	fb26 2201 	smlad	r2, r6, r1, r2
 800b032:	4954      	ldr	r1, [pc, #336]	; (800b184 <D128_GENERIC+0x370>)
 800b034:	fb24 2201 	smlad	r2, r4, r1, r2
 800b038:	4953      	ldr	r1, [pc, #332]	; (800b188 <D128_GENERIC+0x374>)
 800b03a:	fb20 2201 	smlad	r2, r0, r1, r2
 800b03e:	4953      	ldr	r1, [pc, #332]	; (800b18c <D128_GENERIC+0x378>)
 800b040:	fb23 2201 	smlad	r2, r3, r1, r2
 800b044:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
 800b048:	fb25 2a0c 	smlad	sl, r5, ip, r2
 800b04c:	4950      	ldr	r1, [pc, #320]	; (800b190 <D128_GENERIC+0x37c>)
 800b04e:	9a03      	ldr	r2, [sp, #12]
 800b050:	fb2b 2c01 	smlad	ip, fp, r1, r2
 800b054:	4a4f      	ldr	r2, [pc, #316]	; (800b194 <D128_GENERIC+0x380>)
 800b056:	fb28 ce02 	smlad	lr, r8, r2, ip
 800b05a:	f8df c150 	ldr.w	ip, [pc, #336]	; 800b1ac <D128_GENERIC+0x398>
 800b05e:	fb27 ec0c 	smlad	ip, r7, ip, lr
 800b062:	f8df e14c 	ldr.w	lr, [pc, #332]	; 800b1b0 <D128_GENERIC+0x39c>
 800b066:	fb26 cc0e 	smlad	ip, r6, lr, ip
 800b06a:	f8df e148 	ldr.w	lr, [pc, #328]	; 800b1b4 <D128_GENERIC+0x3a0>
 800b06e:	fb24 ce0e 	smlad	lr, r4, lr, ip
 800b072:	f8df c144 	ldr.w	ip, [pc, #324]	; 800b1b8 <D128_GENERIC+0x3a4>
 800b076:	fb20 ee0c 	smlad	lr, r0, ip, lr
 800b07a:	f8df c140 	ldr.w	ip, [pc, #320]	; 800b1bc <D128_GENERIC+0x3a8>
 800b07e:	fb23 ec0c 	smlad	ip, r3, ip, lr
 800b082:	f8df e13c 	ldr.w	lr, [pc, #316]	; 800b1c0 <D128_GENERIC+0x3ac>
 800b086:	fb25 c20e 	smlad	r2, r5, lr, ip
 800b08a:	f04f 0c01 	mov.w	ip, #1
 800b08e:	9202      	str	r2, [sp, #8]
 800b090:	fb2b fb0c 	smuad	fp, fp, ip
 800b094:	f8df c12c 	ldr.w	ip, [pc, #300]	; 800b1c4 <D128_GENERIC+0x3b0>
 800b098:	fb28 bb0c 	smlad	fp, r8, ip, fp
 800b09c:	f8df c128 	ldr.w	ip, [pc, #296]	; 800b1c8 <D128_GENERIC+0x3b4>
 800b0a0:	fb27 bb0c 	smlad	fp, r7, ip, fp
 800b0a4:	4f3c      	ldr	r7, [pc, #240]	; (800b198 <D128_GENERIC+0x384>)
 800b0a6:	fb26 bb07 	smlad	fp, r6, r7, fp
 800b0aa:	4f3c      	ldr	r7, [pc, #240]	; (800b19c <D128_GENERIC+0x388>)
 800b0ac:	fb24 bb07 	smlad	fp, r4, r7, fp
 800b0b0:	4f3b      	ldr	r7, [pc, #236]	; (800b1a0 <D128_GENERIC+0x38c>)
 800b0b2:	fb20 bb07 	smlad	fp, r0, r7, fp
 800b0b6:	4f3b      	ldr	r7, [pc, #236]	; (800b1a4 <D128_GENERIC+0x390>)
 800b0b8:	fb23 bb07 	smlad	fp, r3, r7, fp
 800b0bc:	4b3a      	ldr	r3, [pc, #232]	; (800b1a8 <D128_GENERIC+0x394>)
 800b0be:	fb25 b303 	smlad	r3, r5, r3, fp
 800b0c2:	9303      	str	r3, [sp, #12]
 800b0c4:	f5aa 1480 	sub.w	r4, sl, #1048576	; 0x100000
 800b0c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0ca:	b183      	cbz	r3, 800b0ee <D128_GENERIC+0x2da>
 800b0cc:	9a06      	ldr	r2, [sp, #24]
 800b0ce:	9907      	ldr	r1, [sp, #28]
 800b0d0:	4422      	add	r2, r4
 800b0d2:	9407      	str	r4, [sp, #28]
 800b0d4:	1a52      	subs	r2, r2, r1
 800b0d6:	fba2 0103 	umull	r0, r1, r2, r3
 800b0da:	17d5      	asrs	r5, r2, #31
 800b0dc:	f110 4200 	adds.w	r2, r0, #2147483648	; 0x80000000
 800b0e0:	fb03 1105 	mla	r1, r3, r5, r1
 800b0e4:	f141 0300 	adc.w	r3, r1, #0
 800b0e8:	005b      	lsls	r3, r3, #1
 800b0ea:	461c      	mov	r4, r3
 800b0ec:	9306      	str	r3, [sp, #24]
 800b0ee:	9d01      	ldr	r5, [sp, #4]
 800b0f0:	01e4      	lsls	r4, r4, #7
 800b0f2:	9e05      	ldr	r6, [sp, #20]
 800b0f4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b0f8:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	9908      	ldr	r1, [sp, #32]
 800b0fe:	fb06 f000 	mul.w	r0, r6, r0
 800b102:	3601      	adds	r6, #1
 800b104:	fbc1 2304 	smlal	r2, r3, r1, r4
 800b108:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b10a:	109b      	asrs	r3, r3, #2
 800b10c:	9605      	str	r6, [sp, #20]
 800b10e:	f303 030f 	ssat	r3, #16, r3
 800b112:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
 800b116:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 800b118:	42b3      	cmp	r3, r6
 800b11a:	dd13      	ble.n	800b144 <D128_GENERIC+0x330>
 800b11c:	9b01      	ldr	r3, [sp, #4]
 800b11e:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800b120:	2a01      	cmp	r2, #1
 800b122:	f47f ae95 	bne.w	800ae50 <D128_GENERIC+0x3c>
 800b126:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800b128:	f109 0610 	add.w	r6, r9, #16
 800b12c:	0681      	lsls	r1, r0, #26
 800b12e:	e9d9 4200 	ldrd	r4, r2, [r9]
 800b132:	e9d9 3502 	ldrd	r3, r5, [r9, #8]
 800b136:	d518      	bpl.n	800b16a <D128_GENERIC+0x356>
 800b138:	ba64      	rev16	r4, r4
 800b13a:	ba52      	rev16	r2, r2
 800b13c:	ba5b      	rev16	r3, r3
 800b13e:	ba6d      	rev16	r5, r5
 800b140:	46b1      	mov	r9, r6
 800b142:	e6da      	b.n	800aefa <D128_GENERIC+0xe6>
 800b144:	f8dd a010 	ldr.w	sl, [sp, #16]
 800b148:	9b01      	ldr	r3, [sp, #4]
 800b14a:	2000      	movs	r0, #0
 800b14c:	9903      	ldr	r1, [sp, #12]
 800b14e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b150:	6099      	str	r1, [r3, #8]
 800b152:	9902      	ldr	r1, [sp, #8]
 800b154:	f8c3 a01c 	str.w	sl, [r3, #28]
 800b158:	60d9      	str	r1, [r3, #12]
 800b15a:	9906      	ldr	r1, [sp, #24]
 800b15c:	619a      	str	r2, [r3, #24]
 800b15e:	6119      	str	r1, [r3, #16]
 800b160:	9907      	ldr	r1, [sp, #28]
 800b162:	6159      	str	r1, [r3, #20]
 800b164:	b00d      	add	sp, #52	; 0x34
 800b166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b16a:	46b1      	mov	r9, r6
 800b16c:	e6c5      	b.n	800aefa <D128_GENERIC+0xe6>
 800b16e:	bf00      	nop
 800b170:	24000000 	.word	0x24000000
 800b174:	00780069 	.word	0x00780069
 800b178:	005b004e 	.word	0x005b004e
 800b17c:	00420037 	.word	0x00420037
 800b180:	002d0024 	.word	0x002d0024
 800b184:	001c0015 	.word	0x001c0015
 800b188:	000f000a 	.word	0x000f000a
 800b18c:	00060003 	.word	0x00060003
 800b190:	00880096 	.word	0x00880096
 800b194:	00a200ac 	.word	0x00a200ac
 800b198:	0015001c 	.word	0x0015001c
 800b19c:	0024002d 	.word	0x0024002d
 800b1a0:	00370042 	.word	0x00370042
 800b1a4:	004e005b 	.word	0x004e005b
 800b1a8:	00690078 	.word	0x00690078
 800b1ac:	00b400ba 	.word	0x00b400ba
 800b1b0:	00be00c0 	.word	0x00be00c0
 800b1b4:	00c000be 	.word	0x00c000be
 800b1b8:	00ba00b4 	.word	0x00ba00b4
 800b1bc:	00ac00a2 	.word	0x00ac00a2
 800b1c0:	00960088 	.word	0x00960088
 800b1c4:	00030006 	.word	0x00030006
 800b1c8:	000a000f 	.word	0x000a000f

0800b1cc <D16_1CH_HTONS_VOL_HP>:
 800b1cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1d0:	6993      	ldr	r3, [r2, #24]
 800b1d2:	b087      	sub	sp, #28
 800b1d4:	4682      	mov	sl, r0
 800b1d6:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 800b1d8:	9304      	str	r3, [sp, #16]
 800b1da:	f8d2 b030 	ldr.w	fp, [r2, #48]	; 0x30
 800b1de:	69d3      	ldr	r3, [r2, #28]
 800b1e0:	f8d2 e020 	ldr.w	lr, [r2, #32]
 800b1e4:	e9d2 5402 	ldrd	r5, r4, [r2, #8]
 800b1e8:	e9d2 6c04 	ldrd	r6, ip, [r2, #16]
 800b1ec:	9403      	str	r4, [sp, #12]
 800b1ee:	2800      	cmp	r0, #0
 800b1f0:	d054      	beq.n	800b29c <D16_1CH_HTONS_VOL_HP+0xd0>
 800b1f2:	f1a1 0902 	sub.w	r9, r1, #2
 800b1f6:	eb0a 0140 	add.w	r1, sl, r0, lsl #1
 800b1fa:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 800b2a8 <D16_1CH_HTONS_VOL_HP+0xdc>
 800b1fe:	4650      	mov	r0, sl
 800b200:	9101      	str	r1, [sp, #4]
 800b202:	4619      	mov	r1, r3
 800b204:	f8cd b008 	str.w	fp, [sp, #8]
 800b208:	9205      	str	r2, [sp, #20]
 800b20a:	f850 3b02 	ldr.w	r3, [r0], #2
 800b20e:	ba5b      	rev16	r3, r3
 800b210:	b2dc      	uxtb	r4, r3
 800b212:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800b216:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b21a:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 800b21e:	4419      	add	r1, r3
 800b220:	eb04 2491 	add.w	r4, r4, r1, lsr #10
 800b224:	f3c1 0309 	ubfx	r3, r1, #0, #10
 800b228:	f3c4 0209 	ubfx	r2, r4, #0, #10
 800b22c:	0aa1      	lsrs	r1, r4, #10
 800b22e:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 800b232:	4a1b      	ldr	r2, [pc, #108]	; (800b2a0 <D16_1CH_HTONS_VOL_HP+0xd4>)
 800b234:	fb23 5402 	smlad	r4, r3, r2, r5
 800b238:	4a1a      	ldr	r2, [pc, #104]	; (800b2a4 <D16_1CH_HTONS_VOL_HP+0xd8>)
 800b23a:	fb23 f502 	smuad	r5, r3, r2
 800b23e:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 800b242:	f04f 4a00 	mov.w	sl, #2147483648	; 0x80000000
 800b246:	f04f 0b00 	mov.w	fp, #0
 800b24a:	19a2      	adds	r2, r4, r6
 800b24c:	eba2 020c 	sub.w	r2, r2, ip
 800b250:	46a4      	mov	ip, r4
 800b252:	17d7      	asrs	r7, r2, #31
 800b254:	fba2 230e 	umull	r2, r3, r2, lr
 800b258:	f112 4600 	adds.w	r6, r2, #2147483648	; 0x80000000
 800b25c:	fb0e 3307 	mla	r3, lr, r7, r3
 800b260:	f143 0700 	adc.w	r7, r3, #0
 800b264:	9b02      	ldr	r3, [sp, #8]
 800b266:	047a      	lsls	r2, r7, #17
 800b268:	007e      	lsls	r6, r7, #1
 800b26a:	fbc3 ab02 	smlal	sl, fp, r3, r2
 800b26e:	ea4f 03ab 	mov.w	r3, fp, asr #2
 800b272:	f303 030f 	ssat	r3, #16, r3
 800b276:	f829 3f02 	strh.w	r3, [r9, #2]!
 800b27a:	9b01      	ldr	r3, [sp, #4]
 800b27c:	4298      	cmp	r0, r3
 800b27e:	d1c4      	bne.n	800b20a <D16_1CH_HTONS_VOL_HP+0x3e>
 800b280:	460b      	mov	r3, r1
 800b282:	9a05      	ldr	r2, [sp, #20]
 800b284:	2000      	movs	r0, #0
 800b286:	9903      	ldr	r1, [sp, #12]
 800b288:	61d3      	str	r3, [r2, #28]
 800b28a:	9b04      	ldr	r3, [sp, #16]
 800b28c:	6095      	str	r5, [r2, #8]
 800b28e:	60d1      	str	r1, [r2, #12]
 800b290:	6193      	str	r3, [r2, #24]
 800b292:	e9c2 6404 	strd	r6, r4, [r2, #16]
 800b296:	b007      	add	sp, #28
 800b298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b29c:	4664      	mov	r4, ip
 800b29e:	e7f1      	b.n	800b284 <D16_1CH_HTONS_VOL_HP+0xb8>
 800b2a0:	00030001 	.word	0x00030001
 800b2a4:	00010003 	.word	0x00010003
 800b2a8:	24000000 	.word	0x24000000

0800b2ac <D24_1CH_HTONS_VOL_HP>:
 800b2ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2b0:	6b16      	ldr	r6, [r2, #48]	; 0x30
 800b2b2:	b089      	sub	sp, #36	; 0x24
 800b2b4:	6993      	ldr	r3, [r2, #24]
 800b2b6:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800b2b8:	9604      	str	r6, [sp, #16]
 800b2ba:	6a16      	ldr	r6, [r2, #32]
 800b2bc:	9306      	str	r3, [sp, #24]
 800b2be:	9505      	str	r5, [sp, #20]
 800b2c0:	69d3      	ldr	r3, [r2, #28]
 800b2c2:	9600      	str	r6, [sp, #0]
 800b2c4:	e9d2 4a04 	ldrd	r4, sl, [r2, #16]
 800b2c8:	e9d2 ce02 	ldrd	ip, lr, [r2, #8]
 800b2cc:	2d00      	cmp	r5, #0
 800b2ce:	f000 8083 	beq.w	800b3d8 <D24_1CH_HTONS_VOL_HP+0x12c>
 800b2d2:	9207      	str	r2, [sp, #28]
 800b2d4:	2600      	movs	r6, #0
 800b2d6:	4622      	mov	r2, r4
 800b2d8:	f1a1 0b02 	sub.w	fp, r1, #2
 800b2dc:	4f3f      	ldr	r7, [pc, #252]	; (800b3dc <D24_1CH_HTONS_VOL_HP+0x130>)
 800b2de:	461d      	mov	r5, r3
 800b2e0:	f8cd a00c 	str.w	sl, [sp, #12]
 800b2e4:	9c00      	ldr	r4, [sp, #0]
 800b2e6:	e056      	b.n	800b396 <D24_1CH_HTONS_VOL_HP+0xea>
 800b2e8:	7841      	ldrb	r1, [r0, #1]
 800b2ea:	eb08 4809 	add.w	r8, r8, r9, lsl #16
 800b2ee:	3002      	adds	r0, #2
 800b2f0:	4488      	add	r8, r1
 800b2f2:	fa5f f388 	uxtb.w	r3, r8
 800b2f6:	f3c8 2907 	ubfx	r9, r8, #8, #8
 800b2fa:	ea4f 4818 	mov.w	r8, r8, lsr #16
 800b2fe:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 800b302:	f857 3029 	ldr.w	r3, [r7, r9, lsl #2]
 800b306:	eb01 2195 	add.w	r1, r1, r5, lsr #10
 800b30a:	f857 5028 	ldr.w	r5, [r7, r8, lsl #2]
 800b30e:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 800b312:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800b316:	f3c8 0309 	ubfx	r3, r8, #0, #10
 800b31a:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 800b31e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800b322:	492f      	ldr	r1, [pc, #188]	; (800b3e0 <D24_1CH_HTONS_VOL_HP+0x134>)
 800b324:	fb23 e901 	smlad	r9, r3, r1, lr
 800b328:	492e      	ldr	r1, [pc, #184]	; (800b3e4 <D24_1CH_HTONS_VOL_HP+0x138>)
 800b32a:	fb23 ce01 	smlad	lr, r3, r1, ip
 800b32e:	f3c5 0c09 	ubfx	ip, r5, #0, #10
 800b332:	2101      	movs	r1, #1
 800b334:	eb0c 084c 	add.w	r8, ip, ip, lsl #1
 800b338:	eb0e 0e48 	add.w	lr, lr, r8, lsl #1
 800b33c:	fb23 f301 	smuad	r3, r3, r1
 800b340:	f5a9 51d8 	sub.w	r1, r9, #6912	; 0x1b00
 800b344:	eb08 0c03 	add.w	ip, r8, r3
 800b348:	9b03      	ldr	r3, [sp, #12]
 800b34a:	f04f 0a00 	mov.w	sl, #0
 800b34e:	440a      	add	r2, r1
 800b350:	3601      	adds	r6, #1
 800b352:	9103      	str	r1, [sp, #12]
 800b354:	1ad2      	subs	r2, r2, r3
 800b356:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800b35a:	fba2 2304 	umull	r2, r3, r2, r4
 800b35e:	e9cd 2300 	strd	r2, r3, [sp]
 800b362:	fb04 3309 	mla	r3, r4, r9, r3
 800b366:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 800b36a:	9301      	str	r3, [sp, #4]
 800b36c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b370:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800b374:	f143 0300 	adc.w	r3, r3, #0
 800b378:	ea4f 38c3 	mov.w	r8, r3, lsl #15
 800b37c:	005a      	lsls	r2, r3, #1
 800b37e:	9b04      	ldr	r3, [sp, #16]
 800b380:	fbc3 9a08 	smlal	r9, sl, r3, r8
 800b384:	ea4f 03aa 	mov.w	r3, sl, asr #2
 800b388:	f303 030f 	ssat	r3, #16, r3
 800b38c:	f82b 3f02 	strh.w	r3, [fp, #2]!
 800b390:	9b05      	ldr	r3, [sp, #20]
 800b392:	429e      	cmp	r6, r3
 800b394:	d010      	beq.n	800b3b8 <D24_1CH_HTONS_VOL_HP+0x10c>
 800b396:	f890 9003 	ldrb.w	r9, [r0, #3]
 800b39a:	f016 0f01 	tst.w	r6, #1
 800b39e:	7801      	ldrb	r1, [r0, #0]
 800b3a0:	ea4f 2309 	mov.w	r3, r9, lsl #8
 800b3a4:	ea4f 2801 	mov.w	r8, r1, lsl #8
 800b3a8:	d09e      	beq.n	800b2e8 <D24_1CH_HTONS_VOL_HP+0x3c>
 800b3aa:	f890 8002 	ldrb.w	r8, [r0, #2]
 800b3ae:	3004      	adds	r0, #4
 800b3b0:	eb03 4808 	add.w	r8, r3, r8, lsl #16
 800b3b4:	4488      	add	r8, r1
 800b3b6:	e79c      	b.n	800b2f2 <D24_1CH_HTONS_VOL_HP+0x46>
 800b3b8:	4614      	mov	r4, r2
 800b3ba:	462b      	mov	r3, r5
 800b3bc:	9a07      	ldr	r2, [sp, #28]
 800b3be:	2000      	movs	r0, #0
 800b3c0:	61d3      	str	r3, [r2, #28]
 800b3c2:	9b06      	ldr	r3, [sp, #24]
 800b3c4:	f8c2 c008 	str.w	ip, [r2, #8]
 800b3c8:	f8c2 e00c 	str.w	lr, [r2, #12]
 800b3cc:	6193      	str	r3, [r2, #24]
 800b3ce:	e9c2 4104 	strd	r4, r1, [r2, #16]
 800b3d2:	b009      	add	sp, #36	; 0x24
 800b3d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3d8:	4651      	mov	r1, sl
 800b3da:	e7f0      	b.n	800b3be <D24_1CH_HTONS_VOL_HP+0x112>
 800b3dc:	24000000 	.word	0x24000000
 800b3e0:	00030001 	.word	0x00030001
 800b3e4:	00060007 	.word	0x00060007

0800b3e8 <D32_1CH_HTONS_VOL_HP>:
 800b3e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3ec:	6993      	ldr	r3, [r2, #24]
 800b3ee:	b087      	sub	sp, #28
 800b3f0:	4683      	mov	fp, r0
 800b3f2:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 800b3f4:	9304      	str	r3, [sp, #16]
 800b3f6:	69d5      	ldr	r5, [r2, #28]
 800b3f8:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800b3fa:	f8d2 a020 	ldr.w	sl, [r2, #32]
 800b3fe:	e9d2 8e04 	ldrd	r8, lr, [r2, #16]
 800b402:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 800b406:	2800      	cmp	r0, #0
 800b408:	d077      	beq.n	800b4fa <D32_1CH_HTONS_VOL_HP+0x112>
 800b40a:	460f      	mov	r7, r1
 800b40c:	46f1      	mov	r9, lr
 800b40e:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 800b412:	f8cd 8000 	str.w	r8, [sp]
 800b416:	4e3a      	ldr	r6, [pc, #232]	; (800b500 <D32_1CH_HTONS_VOL_HP+0x118>)
 800b418:	469e      	mov	lr, r3
 800b41a:	46a0      	mov	r8, r4
 800b41c:	9103      	str	r1, [sp, #12]
 800b41e:	9205      	str	r2, [sp, #20]
 800b420:	f85b 4b04 	ldr.w	r4, [fp], #4
 800b424:	ba64      	rev16	r4, r4
 800b426:	b2e0      	uxtb	r0, r4
 800b428:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800b42c:	f3c4 4107 	ubfx	r1, r4, #16, #8
 800b430:	0e24      	lsrs	r4, r4, #24
 800b432:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 800b436:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800b43a:	eb00 2095 	add.w	r0, r0, r5, lsr #10
 800b43e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800b442:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
 800b446:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 800b44a:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800b44e:	eb01 2193 	add.w	r1, r1, r3, lsr #10
 800b452:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b456:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800b45a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800b45e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b462:	f3c5 0009 	ubfx	r0, r5, #0, #10
 800b466:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800b46a:	4826      	ldr	r0, [pc, #152]	; (800b504 <D32_1CH_HTONS_VOL_HP+0x11c>)
 800b46c:	fb23 c400 	smlad	r4, r3, r0, ip
 800b470:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800b474:	fb21 4402 	smlad	r4, r1, r2, r4
 800b478:	4823      	ldr	r0, [pc, #140]	; (800b508 <D32_1CH_HTONS_VOL_HP+0x120>)
 800b47a:	fb23 ec00 	smlad	ip, r3, r0, lr
 800b47e:	4823      	ldr	r0, [pc, #140]	; (800b50c <D32_1CH_HTONS_VOL_HP+0x124>)
 800b480:	fb21 cc00 	smlad	ip, r1, r0, ip
 800b484:	2201      	movs	r2, #1
 800b486:	fb23 f302 	smuad	r3, r3, r2
 800b48a:	4821      	ldr	r0, [pc, #132]	; (800b510 <D32_1CH_HTONS_VOL_HP+0x128>)
 800b48c:	fb21 3e00 	smlad	lr, r1, r0, r3
 800b490:	9b00      	ldr	r3, [sp, #0]
 800b492:	f5a4 4480 	sub.w	r4, r4, #16384	; 0x4000
 800b496:	4423      	add	r3, r4
 800b498:	eba3 0209 	sub.w	r2, r3, r9
 800b49c:	46a1      	mov	r9, r4
 800b49e:	17d1      	asrs	r1, r2, #31
 800b4a0:	fba2 230a 	umull	r2, r3, r2, sl
 800b4a4:	e9cd 2300 	strd	r2, r3, [sp]
 800b4a8:	fb0a 3301 	mla	r3, sl, r1, r3
 800b4ac:	9301      	str	r3, [sp, #4]
 800b4ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b4b2:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800b4b6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b4ba:	f143 0300 	adc.w	r3, r3, #0
 800b4be:	0399      	lsls	r1, r3, #14
 800b4c0:	005b      	lsls	r3, r3, #1
 800b4c2:	9300      	str	r3, [sp, #0]
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	fbc8 2301 	smlal	r2, r3, r8, r1
 800b4ca:	109b      	asrs	r3, r3, #2
 800b4cc:	f303 030f 	ssat	r3, #16, r3
 800b4d0:	f827 3b02 	strh.w	r3, [r7], #2
 800b4d4:	9b03      	ldr	r3, [sp, #12]
 800b4d6:	429f      	cmp	r7, r3
 800b4d8:	d1a2      	bne.n	800b420 <D32_1CH_HTONS_VOL_HP+0x38>
 800b4da:	4673      	mov	r3, lr
 800b4dc:	f8dd 8000 	ldr.w	r8, [sp]
 800b4e0:	9a05      	ldr	r2, [sp, #20]
 800b4e2:	6093      	str	r3, [r2, #8]
 800b4e4:	2000      	movs	r0, #0
 800b4e6:	9b04      	ldr	r3, [sp, #16]
 800b4e8:	f8c2 c00c 	str.w	ip, [r2, #12]
 800b4ec:	61d5      	str	r5, [r2, #28]
 800b4ee:	6193      	str	r3, [r2, #24]
 800b4f0:	e9c2 8404 	strd	r8, r4, [r2, #16]
 800b4f4:	b007      	add	sp, #28
 800b4f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4fa:	4674      	mov	r4, lr
 800b4fc:	e7f1      	b.n	800b4e2 <D32_1CH_HTONS_VOL_HP+0xfa>
 800b4fe:	bf00      	nop
 800b500:	24000000 	.word	0x24000000
 800b504:	00060003 	.word	0x00060003
 800b508:	000a000c 	.word	0x000a000c
 800b50c:	000c000a 	.word	0x000c000a
 800b510:	00030006 	.word	0x00030006

0800b514 <D48_1CH_HTONS_VOL_HP>:
 800b514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b518:	6b17      	ldr	r7, [r2, #48]	; 0x30
 800b51a:	b087      	sub	sp, #28
 800b51c:	6993      	ldr	r3, [r2, #24]
 800b51e:	9701      	str	r7, [sp, #4]
 800b520:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800b522:	6a17      	ldr	r7, [r2, #32]
 800b524:	9304      	str	r3, [sp, #16]
 800b526:	69d6      	ldr	r6, [r2, #28]
 800b528:	9702      	str	r7, [sp, #8]
 800b52a:	e9d2 4e04 	ldrd	r4, lr, [r2, #16]
 800b52e:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 800b532:	2d00      	cmp	r5, #0
 800b534:	f000 8093 	beq.w	800b65e <D48_1CH_HTONS_VOL_HP+0x14a>
 800b538:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b53c:	f1a1 0b02 	sub.w	fp, r1, #2
 800b540:	46f2      	mov	sl, lr
 800b542:	4f48      	ldr	r7, [pc, #288]	; (800b664 <D48_1CH_HTONS_VOL_HP+0x150>)
 800b544:	eb00 0145 	add.w	r1, r0, r5, lsl #1
 800b548:	469e      	mov	lr, r3
 800b54a:	9205      	str	r2, [sp, #20]
 800b54c:	9103      	str	r1, [sp, #12]
 800b54e:	e9d0 3200 	ldrd	r3, r2, [r0]
 800b552:	3006      	adds	r0, #6
 800b554:	ba5b      	rev16	r3, r3
 800b556:	fa92 f992 	rev16.w	r9, r2
 800b55a:	b2dd      	uxtb	r5, r3
 800b55c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800b560:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800b564:	0e1b      	lsrs	r3, r3, #24
 800b566:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 800b56a:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 800b56e:	eb05 2696 	add.w	r6, r5, r6, lsr #10
 800b572:	f857 5022 	ldr.w	r5, [r7, r2, lsl #2]
 800b576:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800b57a:	fa5f f289 	uxtb.w	r2, r9
 800b57e:	eb01 2196 	add.w	r1, r1, r6, lsr #10
 800b582:	f3c9 2907 	ubfx	r9, r9, #8, #8
 800b586:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800b58a:	f3c6 0809 	ubfx	r8, r6, #0, #10
 800b58e:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800b592:	f857 6029 	ldr.w	r6, [r7, r9, lsl #2]
 800b596:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800b59a:	eb03 2395 	add.w	r3, r3, r5, lsr #10
 800b59e:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800b5a2:	ea41 4808 	orr.w	r8, r1, r8, lsl #16
 800b5a6:	eb02 2293 	add.w	r2, r2, r3, lsr #10
 800b5aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b5ae:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 800b5b2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800b5b6:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 800b5ba:	f3c6 0309 	ubfx	r3, r6, #0, #10
 800b5be:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 800b5c2:	4b29      	ldr	r3, [pc, #164]	; (800b668 <D48_1CH_HTONS_VOL_HP+0x154>)
 800b5c4:	fb28 c103 	smlad	r1, r8, r3, ip
 800b5c8:	4b28      	ldr	r3, [pc, #160]	; (800b66c <D48_1CH_HTONS_VOL_HP+0x158>)
 800b5ca:	fb25 1103 	smlad	r1, r5, r3, r1
 800b5ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b5d2:	fb22 1903 	smlad	r9, r2, r3, r1
 800b5d6:	4b26      	ldr	r3, [pc, #152]	; (800b670 <D48_1CH_HTONS_VOL_HP+0x15c>)
 800b5d8:	fb28 ec03 	smlad	ip, r8, r3, lr
 800b5dc:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 800b5e0:	fb25 cc03 	smlad	ip, r5, r3, ip
 800b5e4:	4b23      	ldr	r3, [pc, #140]	; (800b674 <D48_1CH_HTONS_VOL_HP+0x160>)
 800b5e6:	fb22 cc03 	smlad	ip, r2, r3, ip
 800b5ea:	2101      	movs	r1, #1
 800b5ec:	fb28 f801 	smuad	r8, r8, r1
 800b5f0:	4b21      	ldr	r3, [pc, #132]	; (800b678 <D48_1CH_HTONS_VOL_HP+0x164>)
 800b5f2:	fb25 8503 	smlad	r5, r5, r3, r8
 800b5f6:	4b21      	ldr	r3, [pc, #132]	; (800b67c <D48_1CH_HTONS_VOL_HP+0x168>)
 800b5f8:	fb22 5e03 	smlad	lr, r2, r3, r5
 800b5fc:	f5a9 4158 	sub.w	r1, r9, #55296	; 0xd800
 800b600:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800b604:	190a      	adds	r2, r1, r4
 800b606:	9c02      	ldr	r4, [sp, #8]
 800b608:	eba2 020a 	sub.w	r2, r2, sl
 800b60c:	468a      	mov	sl, r1
 800b60e:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800b612:	fba2 2304 	umull	r2, r3, r2, r4
 800b616:	fb04 3309 	mla	r3, r4, r9, r3
 800b61a:	f112 4400 	adds.w	r4, r2, #2147483648	; 0x80000000
 800b61e:	f04f 0900 	mov.w	r9, #0
 800b622:	f143 0500 	adc.w	r5, r3, #0
 800b626:	9b01      	ldr	r3, [sp, #4]
 800b628:	032a      	lsls	r2, r5, #12
 800b62a:	006c      	lsls	r4, r5, #1
 800b62c:	fbc3 8902 	smlal	r8, r9, r3, r2
 800b630:	ea4f 03a9 	mov.w	r3, r9, asr #2
 800b634:	f303 030f 	ssat	r3, #16, r3
 800b638:	f82b 3f02 	strh.w	r3, [fp, #2]!
 800b63c:	9b03      	ldr	r3, [sp, #12]
 800b63e:	4283      	cmp	r3, r0
 800b640:	d185      	bne.n	800b54e <D48_1CH_HTONS_VOL_HP+0x3a>
 800b642:	4673      	mov	r3, lr
 800b644:	9a05      	ldr	r2, [sp, #20]
 800b646:	6093      	str	r3, [r2, #8]
 800b648:	2000      	movs	r0, #0
 800b64a:	9b04      	ldr	r3, [sp, #16]
 800b64c:	f8c2 c00c 	str.w	ip, [r2, #12]
 800b650:	61d6      	str	r6, [r2, #28]
 800b652:	6193      	str	r3, [r2, #24]
 800b654:	e9c2 4104 	strd	r4, r1, [r2, #16]
 800b658:	b007      	add	sp, #28
 800b65a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b65e:	4671      	mov	r1, lr
 800b660:	e7f1      	b.n	800b646 <D48_1CH_HTONS_VOL_HP+0x132>
 800b662:	bf00      	nop
 800b664:	24000000 	.word	0x24000000
 800b668:	000f000a 	.word	0x000f000a
 800b66c:	00060003 	.word	0x00060003
 800b670:	00150019 	.word	0x00150019
 800b674:	00190015 	.word	0x00190015
 800b678:	00030006 	.word	0x00030006
 800b67c:	000a000f 	.word	0x000a000f

0800b680 <D64_1CH_HTONS_VOL_HP>:
 800b680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b684:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800b686:	b089      	sub	sp, #36	; 0x24
 800b688:	6993      	ldr	r3, [r2, #24]
 800b68a:	4686      	mov	lr, r0
 800b68c:	9503      	str	r5, [sp, #12]
 800b68e:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 800b690:	6a15      	ldr	r5, [r2, #32]
 800b692:	9306      	str	r3, [sp, #24]
 800b694:	69d6      	ldr	r6, [r2, #28]
 800b696:	9504      	str	r5, [sp, #16]
 800b698:	e9d2 8404 	ldrd	r8, r4, [r2, #16]
 800b69c:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 800b6a0:	2800      	cmp	r0, #0
 800b6a2:	f000 80a4 	beq.w	800b7ee <D64_1CH_HTONS_VOL_HP+0x16e>
 800b6a6:	460f      	mov	r7, r1
 800b6a8:	46f1      	mov	r9, lr
 800b6aa:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 800b6ae:	4d56      	ldr	r5, [pc, #344]	; (800b808 <D64_1CH_HTONS_VOL_HP+0x188>)
 800b6b0:	46a2      	mov	sl, r4
 800b6b2:	469e      	mov	lr, r3
 800b6b4:	9105      	str	r1, [sp, #20]
 800b6b6:	9207      	str	r2, [sp, #28]
 800b6b8:	f859 1b08 	ldr.w	r1, [r9], #8
 800b6bc:	f859 3c04 	ldr.w	r3, [r9, #-4]
 800b6c0:	ba49      	rev16	r1, r1
 800b6c2:	fa93 fb93 	rev16.w	fp, r3
 800b6c6:	b2cb      	uxtb	r3, r1
 800b6c8:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800b6cc:	f3c1 4007 	ubfx	r0, r1, #16, #8
 800b6d0:	0e09      	lsrs	r1, r1, #24
 800b6d2:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
 800b6d6:	fa5f f38b 	uxtb.w	r3, fp
 800b6da:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800b6de:	4426      	add	r6, r4
 800b6e0:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 800b6e4:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 800b6e8:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 800b6ec:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 800b6f0:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800b6f4:	f3cb 2307 	ubfx	r3, fp, #8, #8
 800b6f8:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 800b6fc:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800b700:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800b704:	eb01 2194 	add.w	r1, r1, r4, lsr #10
 800b708:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800b70c:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 800b710:	f3cb 4607 	ubfx	r6, fp, #16, #8
 800b714:	eb00 2091 	add.w	r0, r0, r1, lsr #10
 800b718:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800b71c:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800b720:	ea4f 6b1b 	mov.w	fp, fp, lsr #24
 800b724:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 800b728:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800b72c:	f855 b02b 	ldr.w	fp, [r5, fp, lsl #2]
 800b730:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b734:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 800b738:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b73c:	eb0b 2b96 	add.w	fp, fp, r6, lsr #10
 800b740:	f3c6 0409 	ubfx	r4, r6, #0, #10
 800b744:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b748:	f3cb 0009 	ubfx	r0, fp, #0, #10
 800b74c:	ea4f 269b 	mov.w	r6, fp, lsr #10
 800b750:	ea40 4b04 	orr.w	fp, r0, r4, lsl #16
 800b754:	482d      	ldr	r0, [pc, #180]	; (800b80c <D64_1CH_HTONS_VOL_HP+0x18c>)
 800b756:	fb22 cc00 	smlad	ip, r2, r0, ip
 800b75a:	482d      	ldr	r0, [pc, #180]	; (800b810 <D64_1CH_HTONS_VOL_HP+0x190>)
 800b75c:	fb21 cc00 	smlad	ip, r1, r0, ip
 800b760:	482c      	ldr	r0, [pc, #176]	; (800b814 <D64_1CH_HTONS_VOL_HP+0x194>)
 800b762:	fb23 cc00 	smlad	ip, r3, r0, ip
 800b766:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 800b76a:	fb2b c404 	smlad	r4, fp, r4, ip
 800b76e:	482a      	ldr	r0, [pc, #168]	; (800b818 <D64_1CH_HTONS_VOL_HP+0x198>)
 800b770:	fb22 ec00 	smlad	ip, r2, r0, lr
 800b774:	fb2b cc10 	smladx	ip, fp, r0, ip
 800b778:	4828      	ldr	r0, [pc, #160]	; (800b81c <D64_1CH_HTONS_VOL_HP+0x19c>)
 800b77a:	fb21 cc00 	smlad	ip, r1, r0, ip
 800b77e:	fb23 cc10 	smladx	ip, r3, r0, ip
 800b782:	f04f 0e01 	mov.w	lr, #1
 800b786:	fb22 f20e 	smuad	r2, r2, lr
 800b78a:	4825      	ldr	r0, [pc, #148]	; (800b820 <D64_1CH_HTONS_VOL_HP+0x1a0>)
 800b78c:	fb21 2100 	smlad	r1, r1, r0, r2
 800b790:	4a24      	ldr	r2, [pc, #144]	; (800b824 <D64_1CH_HTONS_VOL_HP+0x1a4>)
 800b792:	fb23 1302 	smlad	r3, r3, r2, r1
 800b796:	4a24      	ldr	r2, [pc, #144]	; (800b828 <D64_1CH_HTONS_VOL_HP+0x1a8>)
 800b798:	fb2b 3e02 	smlad	lr, fp, r2, r3
 800b79c:	f5a4 3400 	sub.w	r4, r4, #131072	; 0x20000
 800b7a0:	eb04 0208 	add.w	r2, r4, r8
 800b7a4:	eba2 020a 	sub.w	r2, r2, sl
 800b7a8:	46a2      	mov	sl, r4
 800b7aa:	4610      	mov	r0, r2
 800b7ac:	17d1      	asrs	r1, r2, #31
 800b7ae:	e9cd 0100 	strd	r0, r1, [sp]
 800b7b2:	9904      	ldr	r1, [sp, #16]
 800b7b4:	9801      	ldr	r0, [sp, #4]
 800b7b6:	fba2 2301 	umull	r2, r3, r2, r1
 800b7ba:	fb01 3300 	mla	r3, r1, r0, r3
 800b7be:	f112 4000 	adds.w	r0, r2, #2147483648	; 0x80000000
 800b7c2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800b7c6:	f143 0100 	adc.w	r1, r3, #0
 800b7ca:	9b03      	ldr	r3, [sp, #12]
 800b7cc:	02ca      	lsls	r2, r1, #11
 800b7ce:	ea4f 0841 	mov.w	r8, r1, lsl #1
 800b7d2:	2100      	movs	r1, #0
 800b7d4:	fbc3 0102 	smlal	r0, r1, r3, r2
 800b7d8:	108b      	asrs	r3, r1, #2
 800b7da:	f303 030f 	ssat	r3, #16, r3
 800b7de:	f827 3b02 	strh.w	r3, [r7], #2
 800b7e2:	9b05      	ldr	r3, [sp, #20]
 800b7e4:	429f      	cmp	r7, r3
 800b7e6:	f47f af67 	bne.w	800b6b8 <D64_1CH_HTONS_VOL_HP+0x38>
 800b7ea:	4673      	mov	r3, lr
 800b7ec:	9a07      	ldr	r2, [sp, #28]
 800b7ee:	6093      	str	r3, [r2, #8]
 800b7f0:	2000      	movs	r0, #0
 800b7f2:	9b06      	ldr	r3, [sp, #24]
 800b7f4:	f8c2 c00c 	str.w	ip, [r2, #12]
 800b7f8:	61d6      	str	r6, [r2, #28]
 800b7fa:	6193      	str	r3, [r2, #24]
 800b7fc:	e9c2 8404 	strd	r8, r4, [r2, #16]
 800b800:	b009      	add	sp, #36	; 0x24
 800b802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b806:	bf00      	nop
 800b808:	24000000 	.word	0x24000000
 800b80c:	001c0015 	.word	0x001c0015
 800b810:	000f000a 	.word	0x000f000a
 800b814:	00060003 	.word	0x00060003
 800b818:	0024002a 	.word	0x0024002a
 800b81c:	002e0030 	.word	0x002e0030
 800b820:	00030006 	.word	0x00030006
 800b824:	000a000f 	.word	0x000a000f
 800b828:	0015001c 	.word	0x0015001c

0800b82c <D80_1CH_HTONS_VOL_HP>:
 800b82c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b830:	6913      	ldr	r3, [r2, #16]
 800b832:	b089      	sub	sp, #36	; 0x24
 800b834:	6b16      	ldr	r6, [r2, #48]	; 0x30
 800b836:	9301      	str	r3, [sp, #4]
 800b838:	9603      	str	r6, [sp, #12]
 800b83a:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800b83c:	6a16      	ldr	r6, [r2, #32]
 800b83e:	e9d2 5305 	ldrd	r5, r3, [r2, #20]
 800b842:	e9d2 7c02 	ldrd	r7, ip, [r2, #8]
 800b846:	9306      	str	r3, [sp, #24]
 800b848:	9604      	str	r6, [sp, #16]
 800b84a:	69d3      	ldr	r3, [r2, #28]
 800b84c:	2c00      	cmp	r4, #0
 800b84e:	f000 80ce 	beq.w	800b9ee <D80_1CH_HTONS_VOL_HP+0x1c2>
 800b852:	3902      	subs	r1, #2
 800b854:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800b858:	4e66      	ldr	r6, [pc, #408]	; (800b9f4 <D80_1CH_HTONS_VOL_HP+0x1c8>)
 800b85a:	469e      	mov	lr, r3
 800b85c:	9102      	str	r1, [sp, #8]
 800b85e:	46aa      	mov	sl, r5
 800b860:	eb00 0144 	add.w	r1, r0, r4, lsl #1
 800b864:	9207      	str	r2, [sp, #28]
 800b866:	9105      	str	r1, [sp, #20]
 800b868:	6883      	ldr	r3, [r0, #8]
 800b86a:	e9d0 4200 	ldrd	r4, r2, [r0]
 800b86e:	300a      	adds	r0, #10
 800b870:	ba64      	rev16	r4, r4
 800b872:	ba52      	rev16	r2, r2
 800b874:	fa93 fb93 	rev16.w	fp, r3
 800b878:	b2e5      	uxtb	r5, r4
 800b87a:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800b87e:	f3c4 4107 	ubfx	r1, r4, #16, #8
 800b882:	0e24      	lsrs	r4, r4, #24
 800b884:	f856 8025 	ldr.w	r8, [r6, r5, lsl #2]
 800b888:	b2d5      	uxtb	r5, r2
 800b88a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800b88e:	44c6      	add	lr, r8
 800b890:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800b894:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
 800b898:	eb03 239e 	add.w	r3, r3, lr, lsr #10
 800b89c:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 800b8a0:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800b8a4:	eb01 2993 	add.w	r9, r1, r3, lsr #10
 800b8a8:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800b8ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b8b0:	eb04 2499 	add.w	r4, r4, r9, lsr #10
 800b8b4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800b8b8:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800b8bc:	f3cb 2e07 	ubfx	lr, fp, #8, #8
 800b8c0:	eb05 2894 	add.w	r8, r5, r4, lsr #10
 800b8c4:	f3c2 4507 	ubfx	r5, r2, #16, #8
 800b8c8:	0e12      	lsrs	r2, r2, #24
 800b8ca:	f856 e02e 	ldr.w	lr, [r6, lr, lsl #2]
 800b8ce:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 800b8d2:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 800b8d6:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 800b8da:	fa5f fb8b 	uxtb.w	fp, fp
 800b8de:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800b8e2:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800b8e6:	f856 b02b 	ldr.w	fp, [r6, fp, lsl #2]
 800b8ea:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800b8ee:	eb02 2295 	add.w	r2, r2, r5, lsr #10
 800b8f2:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800b8f6:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800b8fa:	ea41 4808 	orr.w	r8, r1, r8, lsl #16
 800b8fe:	eb0b 2b92 	add.w	fp, fp, r2, lsr #10
 800b902:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800b906:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800b90a:	eb0e 2e9b 	add.w	lr, lr, fp, lsr #10
 800b90e:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800b912:	ea44 4409 	orr.w	r4, r4, r9, lsl #16
 800b916:	f3ce 0109 	ubfx	r1, lr, #0, #10
 800b91a:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 800b91e:	ea4f 2e9e 	mov.w	lr, lr, lsr #10
 800b922:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 800b926:	4934      	ldr	r1, [pc, #208]	; (800b9f8 <D80_1CH_HTONS_VOL_HP+0x1cc>)
 800b928:	fb23 cc01 	smlad	ip, r3, r1, ip
 800b92c:	4933      	ldr	r1, [pc, #204]	; (800b9fc <D80_1CH_HTONS_VOL_HP+0x1d0>)
 800b92e:	fb24 cc01 	smlad	ip, r4, r1, ip
 800b932:	4933      	ldr	r1, [pc, #204]	; (800ba00 <D80_1CH_HTONS_VOL_HP+0x1d4>)
 800b934:	fb28 cc01 	smlad	ip, r8, r1, ip
 800b938:	4932      	ldr	r1, [pc, #200]	; (800ba04 <D80_1CH_HTONS_VOL_HP+0x1d8>)
 800b93a:	fb22 cc01 	smlad	ip, r2, r1, ip
 800b93e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800b942:	fb2b c901 	smlad	r9, fp, r1, ip
 800b946:	4930      	ldr	r1, [pc, #192]	; (800ba08 <D80_1CH_HTONS_VOL_HP+0x1dc>)
 800b948:	fb23 7701 	smlad	r7, r3, r1, r7
 800b94c:	492f      	ldr	r1, [pc, #188]	; (800ba0c <D80_1CH_HTONS_VOL_HP+0x1e0>)
 800b94e:	fb24 7701 	smlad	r7, r4, r1, r7
 800b952:	f04f 1c4b 	mov.w	ip, #4915275	; 0x4b004b
 800b956:	fb28 7c0c 	smlad	ip, r8, ip, r7
 800b95a:	492d      	ldr	r1, [pc, #180]	; (800ba10 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 800b95c:	fb22 cc01 	smlad	ip, r2, r1, ip
 800b960:	492c      	ldr	r1, [pc, #176]	; (800ba14 <D80_1CH_HTONS_VOL_HP+0x1e8>)
 800b962:	fb2b cc01 	smlad	ip, fp, r1, ip
 800b966:	2101      	movs	r1, #1
 800b968:	fb23 f301 	smuad	r3, r3, r1
 800b96c:	492a      	ldr	r1, [pc, #168]	; (800ba18 <D80_1CH_HTONS_VOL_HP+0x1ec>)
 800b96e:	fb24 3401 	smlad	r4, r4, r1, r3
 800b972:	492a      	ldr	r1, [pc, #168]	; (800ba1c <D80_1CH_HTONS_VOL_HP+0x1f0>)
 800b974:	fb28 4101 	smlad	r1, r8, r1, r4
 800b978:	4f29      	ldr	r7, [pc, #164]	; (800ba20 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 800b97a:	fb22 1207 	smlad	r2, r2, r7, r1
 800b97e:	4f29      	ldr	r7, [pc, #164]	; (800ba24 <D80_1CH_HTONS_VOL_HP+0x1f8>)
 800b980:	fb2b 2707 	smlad	r7, fp, r7, r2
 800b984:	f5a9 317a 	sub.w	r1, r9, #256000	; 0x3e800
 800b988:	9b01      	ldr	r3, [sp, #4]
 800b98a:	9c04      	ldr	r4, [sp, #16]
 800b98c:	440b      	add	r3, r1
 800b98e:	eba3 020a 	sub.w	r2, r3, sl
 800b992:	468a      	mov	sl, r1
 800b994:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800b998:	fba2 2304 	umull	r2, r3, r2, r4
 800b99c:	fb04 3309 	mla	r3, r4, r9, r3
 800b9a0:	f112 4400 	adds.w	r4, r2, #2147483648	; 0x80000000
 800b9a4:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800b9a8:	f143 0500 	adc.w	r5, r3, #0
 800b9ac:	006b      	lsls	r3, r5, #1
 800b9ae:	02aa      	lsls	r2, r5, #10
 800b9b0:	2500      	movs	r5, #0
 800b9b2:	9301      	str	r3, [sp, #4]
 800b9b4:	9b03      	ldr	r3, [sp, #12]
 800b9b6:	fbc3 4502 	smlal	r4, r5, r3, r2
 800b9ba:	9a02      	ldr	r2, [sp, #8]
 800b9bc:	10ab      	asrs	r3, r5, #2
 800b9be:	f303 030f 	ssat	r3, #16, r3
 800b9c2:	f822 3f02 	strh.w	r3, [r2, #2]!
 800b9c6:	9b05      	ldr	r3, [sp, #20]
 800b9c8:	9202      	str	r2, [sp, #8]
 800b9ca:	4298      	cmp	r0, r3
 800b9cc:	f47f af4c 	bne.w	800b868 <D80_1CH_HTONS_VOL_HP+0x3c>
 800b9d0:	4673      	mov	r3, lr
 800b9d2:	9a07      	ldr	r2, [sp, #28]
 800b9d4:	61d3      	str	r3, [r2, #28]
 800b9d6:	2000      	movs	r0, #0
 800b9d8:	9b01      	ldr	r3, [sp, #4]
 800b9da:	6097      	str	r7, [r2, #8]
 800b9dc:	f8c2 c00c 	str.w	ip, [r2, #12]
 800b9e0:	e9c2 3104 	strd	r3, r1, [r2, #16]
 800b9e4:	9b06      	ldr	r3, [sp, #24]
 800b9e6:	6193      	str	r3, [r2, #24]
 800b9e8:	b009      	add	sp, #36	; 0x24
 800b9ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9ee:	4629      	mov	r1, r5
 800b9f0:	e7f0      	b.n	800b9d4 <D80_1CH_HTONS_VOL_HP+0x1a8>
 800b9f2:	bf00      	nop
 800b9f4:	24000000 	.word	0x24000000
 800b9f8:	002d0024 	.word	0x002d0024
 800b9fc:	001c0015 	.word	0x001c0015
 800ba00:	000f000a 	.word	0x000f000a
 800ba04:	00060003 	.word	0x00060003
 800ba08:	0037003f 	.word	0x0037003f
 800ba0c:	00450049 	.word	0x00450049
 800ba10:	00490045 	.word	0x00490045
 800ba14:	003f0037 	.word	0x003f0037
 800ba18:	00030006 	.word	0x00030006
 800ba1c:	000a000f 	.word	0x000a000f
 800ba20:	0015001c 	.word	0x0015001c
 800ba24:	0024002d 	.word	0x0024002d

0800ba28 <D128_1CH_HTONS_VOL_HP>:
 800ba28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba2c:	6914      	ldr	r4, [r2, #16]
 800ba2e:	b08d      	sub	sp, #52	; 0x34
 800ba30:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800ba32:	9404      	str	r4, [sp, #16]
 800ba34:	6954      	ldr	r4, [r2, #20]
 800ba36:	920b      	str	r2, [sp, #44]	; 0x2c
 800ba38:	9405      	str	r4, [sp, #20]
 800ba3a:	6994      	ldr	r4, [r2, #24]
 800ba3c:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 800ba40:	940a      	str	r4, [sp, #40]	; 0x28
 800ba42:	6894      	ldr	r4, [r2, #8]
 800ba44:	9403      	str	r4, [sp, #12]
 800ba46:	68d4      	ldr	r4, [r2, #12]
 800ba48:	9402      	str	r4, [sp, #8]
 800ba4a:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800ba4c:	6a12      	ldr	r2, [r2, #32]
 800ba4e:	9407      	str	r4, [sp, #28]
 800ba50:	9208      	str	r2, [sp, #32]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	f000 812e 	beq.w	800bcb4 <D128_1CH_HTONS_VOL_HP+0x28c>
 800ba58:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800ba5c:	f100 0b10 	add.w	fp, r0, #16
 800ba60:	f8df 9290 	ldr.w	r9, [pc, #656]	; 800bcf4 <D128_1CH_HTONS_VOL_HP+0x2cc>
 800ba64:	9106      	str	r1, [sp, #24]
 800ba66:	9309      	str	r3, [sp, #36]	; 0x24
 800ba68:	e95b 0204 	ldrd	r0, r2, [fp, #-16]
 800ba6c:	e95b 3602 	ldrd	r3, r6, [fp, #-8]
 800ba70:	ba40      	rev16	r0, r0
 800ba72:	ba52      	rev16	r2, r2
 800ba74:	ba5b      	rev16	r3, r3
 800ba76:	ba76      	rev16	r6, r6
 800ba78:	b2c5      	uxtb	r5, r0
 800ba7a:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800ba7e:	f3c0 4107 	ubfx	r1, r0, #16, #8
 800ba82:	0e00      	lsrs	r0, r0, #24
 800ba84:	f859 7025 	ldr.w	r7, [r9, r5, lsl #2]
 800ba88:	b2d5      	uxtb	r5, r2
 800ba8a:	f859 e024 	ldr.w	lr, [r9, r4, lsl #2]
 800ba8e:	f3c2 2407 	ubfx	r4, r2, #8, #8
 800ba92:	44bc      	add	ip, r7
 800ba94:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800ba98:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
 800ba9c:	f3c2 4007 	ubfx	r0, r2, #16, #8
 800baa0:	eb0e 2e9c 	add.w	lr, lr, ip, lsr #10
 800baa4:	f859 a025 	ldr.w	sl, [r9, r5, lsl #2]
 800baa8:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 800baac:	0e12      	lsrs	r2, r2, #24
 800baae:	eb01 219e 	add.w	r1, r1, lr, lsr #10
 800bab2:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 800bab6:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800baba:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800babe:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 800bac2:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 800bac6:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800baca:	b2da      	uxtb	r2, r3
 800bacc:	eb0a 2a97 	add.w	sl, sl, r7, lsr #10
 800bad0:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800bad4:	ea4e 4e0c 	orr.w	lr, lr, ip, lsl #16
 800bad8:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 800badc:	eb05 259a 	add.w	r5, r5, sl, lsr #10
 800bae0:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800bae4:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800bae8:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800baec:	eb00 2c95 	add.w	ip, r0, r5, lsr #10
 800baf0:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800baf4:	f859 8021 	ldr.w	r8, [r9, r1, lsl #2]
 800baf8:	f3c3 4107 	ubfx	r1, r3, #16, #8
 800bafc:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 800bb00:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800bb04:	f859 0021 	ldr.w	r0, [r9, r1, lsl #2]
 800bb08:	0e1b      	lsrs	r3, r3, #24
 800bb0a:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 800bb0e:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800bb12:	f859 1023 	ldr.w	r1, [r9, r3, lsl #2]
 800bb16:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 800bb1a:	eb08 2892 	add.w	r8, r8, r2, lsr #10
 800bb1e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800bb22:	b2f3      	uxtb	r3, r6
 800bb24:	eb00 2a98 	add.w	sl, r0, r8, lsr #10
 800bb28:	f3c8 0009 	ubfx	r0, r8, #0, #10
 800bb2c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800bb30:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 800bb34:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 800bb38:	f3c6 2c07 	ubfx	ip, r6, #8, #8
 800bb3c:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800bb40:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800bb44:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 800bb48:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 800bb4c:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 800bb50:	0e36      	lsrs	r6, r6, #24
 800bb52:	eb02 2298 	add.w	r2, r2, r8, lsr #10
 800bb56:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800bb5a:	f859 302c 	ldr.w	r3, [r9, ip, lsl #2]
 800bb5e:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800bb62:	f859 c026 	ldr.w	ip, [r9, r6, lsl #2]
 800bb66:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800bb6a:	eb03 2692 	add.w	r6, r3, r2, lsr #10
 800bb6e:	f3c2 0309 	ubfx	r3, r2, #0, #10
 800bb72:	9101      	str	r1, [sp, #4]
 800bb74:	ea43 4208 	orr.w	r2, r3, r8, lsl #16
 800bb78:	9b02      	ldr	r3, [sp, #8]
 800bb7a:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 800bb7e:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800bb82:	4611      	mov	r1, r2
 800bb84:	f3cc 0209 	ubfx	r2, ip, #0, #10
 800bb88:	ea4f 2c9c 	mov.w	ip, ip, lsr #10
 800bb8c:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 800bb90:	4a49      	ldr	r2, [pc, #292]	; (800bcb8 <D128_1CH_HTONS_VOL_HP+0x290>)
 800bb92:	fb2e 3202 	smlad	r2, lr, r2, r3
 800bb96:	4b49      	ldr	r3, [pc, #292]	; (800bcbc <D128_1CH_HTONS_VOL_HP+0x294>)
 800bb98:	fb27 2203 	smlad	r2, r7, r3, r2
 800bb9c:	4b48      	ldr	r3, [pc, #288]	; (800bcc0 <D128_1CH_HTONS_VOL_HP+0x298>)
 800bb9e:	fb25 2203 	smlad	r2, r5, r3, r2
 800bba2:	4b48      	ldr	r3, [pc, #288]	; (800bcc4 <D128_1CH_HTONS_VOL_HP+0x29c>)
 800bba4:	fb24 2203 	smlad	r2, r4, r3, r2
 800bba8:	4b47      	ldr	r3, [pc, #284]	; (800bcc8 <D128_1CH_HTONS_VOL_HP+0x2a0>)
 800bbaa:	fb20 2803 	smlad	r8, r0, r3, r2
 800bbae:	4b47      	ldr	r3, [pc, #284]	; (800bccc <D128_1CH_HTONS_VOL_HP+0x2a4>)
 800bbb0:	9a01      	ldr	r2, [sp, #4]
 800bbb2:	fb22 8203 	smlad	r2, r2, r3, r8
 800bbb6:	4b46      	ldr	r3, [pc, #280]	; (800bcd0 <D128_1CH_HTONS_VOL_HP+0x2a8>)
 800bbb8:	9102      	str	r1, [sp, #8]
 800bbba:	fb21 2203 	smlad	r2, r1, r3, r2
 800bbbe:	f44f 3880 	mov.w	r8, #65536	; 0x10000
 800bbc2:	fb26 2308 	smlad	r3, r6, r8, r2
 800bbc6:	4619      	mov	r1, r3
 800bbc8:	9a03      	ldr	r2, [sp, #12]
 800bbca:	4b42      	ldr	r3, [pc, #264]	; (800bcd4 <D128_1CH_HTONS_VOL_HP+0x2ac>)
 800bbcc:	fb2e 2803 	smlad	r8, lr, r3, r2
 800bbd0:	4b41      	ldr	r3, [pc, #260]	; (800bcd8 <D128_1CH_HTONS_VOL_HP+0x2b0>)
 800bbd2:	fb27 8a03 	smlad	sl, r7, r3, r8
 800bbd6:	f8df 8120 	ldr.w	r8, [pc, #288]	; 800bcf8 <D128_1CH_HTONS_VOL_HP+0x2d0>
 800bbda:	fb25 a808 	smlad	r8, r5, r8, sl
 800bbde:	f8df a11c 	ldr.w	sl, [pc, #284]	; 800bcfc <D128_1CH_HTONS_VOL_HP+0x2d4>
 800bbe2:	fb24 880a 	smlad	r8, r4, sl, r8
 800bbe6:	f8df a118 	ldr.w	sl, [pc, #280]	; 800bd00 <D128_1CH_HTONS_VOL_HP+0x2d8>
 800bbea:	fb20 8a0a 	smlad	sl, r0, sl, r8
 800bbee:	f8df 8114 	ldr.w	r8, [pc, #276]	; 800bd04 <D128_1CH_HTONS_VOL_HP+0x2dc>
 800bbf2:	9b01      	ldr	r3, [sp, #4]
 800bbf4:	fb23 aa08 	smlad	sl, r3, r8, sl
 800bbf8:	f8df 810c 	ldr.w	r8, [pc, #268]	; 800bd08 <D128_1CH_HTONS_VOL_HP+0x2e0>
 800bbfc:	9a02      	ldr	r2, [sp, #8]
 800bbfe:	fb22 a808 	smlad	r8, r2, r8, sl
 800bc02:	f8df a108 	ldr.w	sl, [pc, #264]	; 800bd0c <D128_1CH_HTONS_VOL_HP+0x2e4>
 800bc06:	fb26 830a 	smlad	r3, r6, sl, r8
 800bc0a:	f04f 0801 	mov.w	r8, #1
 800bc0e:	9302      	str	r3, [sp, #8]
 800bc10:	fb2e fe08 	smuad	lr, lr, r8
 800bc14:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 800bd10 <D128_1CH_HTONS_VOL_HP+0x2e8>
 800bc18:	fb27 ee08 	smlad	lr, r7, r8, lr
 800bc1c:	4f2f      	ldr	r7, [pc, #188]	; (800bcdc <D128_1CH_HTONS_VOL_HP+0x2b4>)
 800bc1e:	fb25 ee07 	smlad	lr, r5, r7, lr
 800bc22:	4f2f      	ldr	r7, [pc, #188]	; (800bce0 <D128_1CH_HTONS_VOL_HP+0x2b8>)
 800bc24:	fb24 ee07 	smlad	lr, r4, r7, lr
 800bc28:	4f2e      	ldr	r7, [pc, #184]	; (800bce4 <D128_1CH_HTONS_VOL_HP+0x2bc>)
 800bc2a:	fb20 ee07 	smlad	lr, r0, r7, lr
 800bc2e:	4f2e      	ldr	r7, [pc, #184]	; (800bce8 <D128_1CH_HTONS_VOL_HP+0x2c0>)
 800bc30:	9b01      	ldr	r3, [sp, #4]
 800bc32:	fb23 ee07 	smlad	lr, r3, r7, lr
 800bc36:	4f2d      	ldr	r7, [pc, #180]	; (800bcec <D128_1CH_HTONS_VOL_HP+0x2c4>)
 800bc38:	fb22 e707 	smlad	r7, r2, r7, lr
 800bc3c:	4b2c      	ldr	r3, [pc, #176]	; (800bcf0 <D128_1CH_HTONS_VOL_HP+0x2c8>)
 800bc3e:	fb26 7303 	smlad	r3, r6, r3, r7
 800bc42:	f5a1 1680 	sub.w	r6, r1, #1048576	; 0x100000
 800bc46:	9303      	str	r3, [sp, #12]
 800bc48:	9b04      	ldr	r3, [sp, #16]
 800bc4a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800bc4e:	9f08      	ldr	r7, [sp, #32]
 800bc50:	2100      	movs	r1, #0
 800bc52:	4433      	add	r3, r6
 800bc54:	f10b 0b10 	add.w	fp, fp, #16
 800bc58:	461a      	mov	r2, r3
 800bc5a:	9b05      	ldr	r3, [sp, #20]
 800bc5c:	9605      	str	r6, [sp, #20]
 800bc5e:	1ad2      	subs	r2, r2, r3
 800bc60:	17d5      	asrs	r5, r2, #31
 800bc62:	fba2 2307 	umull	r2, r3, r2, r7
 800bc66:	1814      	adds	r4, r2, r0
 800bc68:	fb07 3305 	mla	r3, r7, r5, r3
 800bc6c:	eb43 0501 	adc.w	r5, r3, r1
 800bc70:	006b      	lsls	r3, r5, #1
 800bc72:	022a      	lsls	r2, r5, #8
 800bc74:	9304      	str	r3, [sp, #16]
 800bc76:	9b07      	ldr	r3, [sp, #28]
 800bc78:	fbc3 0102 	smlal	r0, r1, r3, r2
 800bc7c:	9a06      	ldr	r2, [sp, #24]
 800bc7e:	108b      	asrs	r3, r1, #2
 800bc80:	f303 030f 	ssat	r3, #16, r3
 800bc84:	f822 3b02 	strh.w	r3, [r2], #2
 800bc88:	4613      	mov	r3, r2
 800bc8a:	9206      	str	r2, [sp, #24]
 800bc8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc8e:	4293      	cmp	r3, r2
 800bc90:	f47f aeea 	bne.w	800ba68 <D128_1CH_HTONS_VOL_HP+0x40>
 800bc94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc96:	2000      	movs	r0, #0
 800bc98:	9903      	ldr	r1, [sp, #12]
 800bc9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bc9c:	6099      	str	r1, [r3, #8]
 800bc9e:	9902      	ldr	r1, [sp, #8]
 800bca0:	f8c3 c01c 	str.w	ip, [r3, #28]
 800bca4:	60d9      	str	r1, [r3, #12]
 800bca6:	9904      	ldr	r1, [sp, #16]
 800bca8:	619a      	str	r2, [r3, #24]
 800bcaa:	e9c3 1604 	strd	r1, r6, [r3, #16]
 800bcae:	b00d      	add	sp, #52	; 0x34
 800bcb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcb4:	9e05      	ldr	r6, [sp, #20]
 800bcb6:	e7ed      	b.n	800bc94 <D128_1CH_HTONS_VOL_HP+0x26c>
 800bcb8:	00780069 	.word	0x00780069
 800bcbc:	005b004e 	.word	0x005b004e
 800bcc0:	00420037 	.word	0x00420037
 800bcc4:	002d0024 	.word	0x002d0024
 800bcc8:	001c0015 	.word	0x001c0015
 800bccc:	000f000a 	.word	0x000f000a
 800bcd0:	00060003 	.word	0x00060003
 800bcd4:	00880096 	.word	0x00880096
 800bcd8:	00a200ac 	.word	0x00a200ac
 800bcdc:	000a000f 	.word	0x000a000f
 800bce0:	0015001c 	.word	0x0015001c
 800bce4:	0024002d 	.word	0x0024002d
 800bce8:	00370042 	.word	0x00370042
 800bcec:	004e005b 	.word	0x004e005b
 800bcf0:	00690078 	.word	0x00690078
 800bcf4:	24000000 	.word	0x24000000
 800bcf8:	00b400ba 	.word	0x00b400ba
 800bcfc:	00be00c0 	.word	0x00be00c0
 800bd00:	00c000be 	.word	0x00c000be
 800bd04:	00ba00b4 	.word	0x00ba00b4
 800bd08:	00ac00a2 	.word	0x00ac00a2
 800bd0c:	00960088 	.word	0x00960088
 800bd10:	00030006 	.word	0x00030006

0800bd14 <PDM_Filter_Init>:
 800bd14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd16:	2240      	movs	r2, #64	; 0x40
 800bd18:	2100      	movs	r1, #0
 800bd1a:	4604      	mov	r4, r0
 800bd1c:	300c      	adds	r0, #12
 800bd1e:	f000 f9ed 	bl	800c0fc <memset>
 800bd22:	4a56      	ldr	r2, [pc, #344]	; (800be7c <PDM_Filter_Init+0x168>)
 800bd24:	4856      	ldr	r0, [pc, #344]	; (800be80 <PDM_Filter_Init+0x16c>)
 800bd26:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 800bd2a:	6813      	ldr	r3, [r2, #0]
 800bd2c:	f24c 2540 	movw	r5, #49728	; 0xc240
 800bd30:	f023 0301 	bic.w	r3, r3, #1
 800bd34:	6013      	str	r3, [r2, #0]
 800bd36:	6803      	ldr	r3, [r0, #0]
 800bd38:	400b      	ands	r3, r1
 800bd3a:	42ab      	cmp	r3, r5
 800bd3c:	d040      	beq.n	800bdc0 <PDM_Filter_Init+0xac>
 800bd3e:	6803      	ldr	r3, [r0, #0]
 800bd40:	f24c 2270 	movw	r2, #49776	; 0xc270
 800bd44:	4019      	ands	r1, r3
 800bd46:	4291      	cmp	r1, r2
 800bd48:	d03a      	beq.n	800bdc0 <PDM_Filter_Init+0xac>
 800bd4a:	4b4e      	ldr	r3, [pc, #312]	; (800be84 <PDM_Filter_Init+0x170>)
 800bd4c:	2101      	movs	r1, #1
 800bd4e:	461a      	mov	r2, r3
 800bd50:	6019      	str	r1, [r3, #0]
 800bd52:	6813      	ldr	r3, [r2, #0]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d1fc      	bne.n	800bd52 <PDM_Filter_Init+0x3e>
 800bd58:	4b4b      	ldr	r3, [pc, #300]	; (800be88 <PDM_Filter_Init+0x174>)
 800bd5a:	494c      	ldr	r1, [pc, #304]	; (800be8c <PDM_Filter_Init+0x178>)
 800bd5c:	4a4c      	ldr	r2, [pc, #304]	; (800be90 <PDM_Filter_Init+0x17c>)
 800bd5e:	6019      	str	r1, [r3, #0]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	8820      	ldrh	r0, [r4, #0]
 800bd64:	4293      	cmp	r3, r2
 800bd66:	8961      	ldrh	r1, [r4, #10]
 800bd68:	f04f 0300 	mov.w	r3, #0
 800bd6c:	8922      	ldrh	r2, [r4, #8]
 800bd6e:	bf14      	ite	ne
 800bd70:	2500      	movne	r5, #0
 800bd72:	4d47      	ldreq	r5, [pc, #284]	; (800be90 <PDM_Filter_Init+0x17c>)
 800bd74:	2801      	cmp	r0, #1
 800bd76:	61a3      	str	r3, [r4, #24]
 800bd78:	6465      	str	r5, [r4, #68]	; 0x44
 800bd7a:	60e3      	str	r3, [r4, #12]
 800bd7c:	6263      	str	r3, [r4, #36]	; 0x24
 800bd7e:	6423      	str	r3, [r4, #64]	; 0x40
 800bd80:	86a1      	strh	r1, [r4, #52]	; 0x34
 800bd82:	86e2      	strh	r2, [r4, #54]	; 0x36
 800bd84:	e9c4 3304 	strd	r3, r3, [r4, #16]
 800bd88:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800bd8c:	d936      	bls.n	800bdfc <PDM_Filter_Init+0xe8>
 800bd8e:	2003      	movs	r0, #3
 800bd90:	2302      	movs	r3, #2
 800bd92:	8862      	ldrh	r2, [r4, #2]
 800bd94:	2a01      	cmp	r2, #1
 800bd96:	d92e      	bls.n	800bdf6 <PDM_Filter_Init+0xe2>
 800bd98:	2140      	movs	r1, #64	; 0x40
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800bd9e:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 800bda2:	d101      	bne.n	800bda8 <PDM_Filter_Init+0x94>
 800bda4:	460b      	mov	r3, r1
 800bda6:	6421      	str	r1, [r4, #64]	; 0x40
 800bda8:	6862      	ldr	r2, [r4, #4]
 800bdaa:	b11a      	cbz	r2, 800bdb4 <PDM_Filter_Init+0xa0>
 800bdac:	f043 0310 	orr.w	r3, r3, #16
 800bdb0:	62e2      	str	r2, [r4, #44]	; 0x2c
 800bdb2:	6423      	str	r3, [r4, #64]	; 0x40
 800bdb4:	2200      	movs	r2, #0
 800bdb6:	8722      	strh	r2, [r4, #56]	; 0x38
 800bdb8:	b908      	cbnz	r0, 800bdbe <PDM_Filter_Init+0xaa>
 800bdba:	3380      	adds	r3, #128	; 0x80
 800bdbc:	6423      	str	r3, [r4, #64]	; 0x40
 800bdbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bdc0:	4b34      	ldr	r3, [pc, #208]	; (800be94 <PDM_Filter_Init+0x180>)
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d1c0      	bne.n	800bd4a <PDM_Filter_Init+0x36>
 800bdc8:	4a33      	ldr	r2, [pc, #204]	; (800be98 <PDM_Filter_Init+0x184>)
 800bdca:	6813      	ldr	r3, [r2, #0]
 800bdcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bdd0:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800bdd4:	d006      	beq.n	800bde4 <PDM_Filter_Init+0xd0>
 800bdd6:	6813      	ldr	r3, [r2, #0]
 800bdd8:	f240 4283 	movw	r2, #1155	; 0x483
 800bddc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bde0:	4293      	cmp	r3, r2
 800bde2:	d1b2      	bne.n	800bd4a <PDM_Filter_Init+0x36>
 800bde4:	4b2d      	ldr	r3, [pc, #180]	; (800be9c <PDM_Filter_Init+0x188>)
 800bde6:	2101      	movs	r1, #1
 800bde8:	461a      	mov	r2, r3
 800bdea:	6019      	str	r1, [r3, #0]
 800bdec:	6813      	ldr	r3, [r2, #0]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d1fc      	bne.n	800bdec <PDM_Filter_Init+0xd8>
 800bdf2:	4b2b      	ldr	r3, [pc, #172]	; (800bea0 <PDM_Filter_Init+0x18c>)
 800bdf4:	e7b1      	b.n	800bd5a <PDM_Filter_Init+0x46>
 800bdf6:	d03a      	beq.n	800be6e <PDM_Filter_Init+0x15a>
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	e7cd      	b.n	800bd98 <PDM_Filter_Init+0x84>
 800bdfc:	4d29      	ldr	r5, [pc, #164]	; (800bea4 <PDM_Filter_Init+0x190>)
 800bdfe:	782a      	ldrb	r2, [r5, #0]
 800be00:	d01b      	beq.n	800be3a <PDM_Filter_Init+0x126>
 800be02:	2a01      	cmp	r2, #1
 800be04:	d001      	beq.n	800be0a <PDM_Filter_Init+0xf6>
 800be06:	2001      	movs	r0, #1
 800be08:	e7c3      	b.n	800bd92 <PDM_Filter_Init+0x7e>
 800be0a:	4927      	ldr	r1, [pc, #156]	; (800bea8 <PDM_Filter_Init+0x194>)
 800be0c:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 800beb0 <PDM_Filter_Init+0x19c>
 800be10:	f501 6780 	add.w	r7, r1, #1024	; 0x400
 800be14:	4e25      	ldr	r6, [pc, #148]	; (800beac <PDM_Filter_Init+0x198>)
 800be16:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800be1a:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 800be1e:	ea02 0006 	and.w	r0, r2, r6
 800be22:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800be26:	428f      	cmp	r7, r1
 800be28:	ea43 0300 	orr.w	r3, r3, r0
 800be2c:	4413      	add	r3, r2
 800be2e:	600b      	str	r3, [r1, #0]
 800be30:	d1f1      	bne.n	800be16 <PDM_Filter_Init+0x102>
 800be32:	2300      	movs	r3, #0
 800be34:	2001      	movs	r0, #1
 800be36:	702b      	strb	r3, [r5, #0]
 800be38:	e7ab      	b.n	800bd92 <PDM_Filter_Init+0x7e>
 800be3a:	2a00      	cmp	r2, #0
 800be3c:	d1a9      	bne.n	800bd92 <PDM_Filter_Init+0x7e>
 800be3e:	491a      	ldr	r1, [pc, #104]	; (800bea8 <PDM_Filter_Init+0x194>)
 800be40:	f8df c06c 	ldr.w	ip, [pc, #108]	; 800beb0 <PDM_Filter_Init+0x19c>
 800be44:	f501 6780 	add.w	r7, r1, #1024	; 0x400
 800be48:	4e18      	ldr	r6, [pc, #96]	; (800beac <PDM_Filter_Init+0x198>)
 800be4a:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800be4e:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 800be52:	ea02 0006 	and.w	r0, r2, r6
 800be56:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800be5a:	428f      	cmp	r7, r1
 800be5c:	ea43 0300 	orr.w	r3, r3, r0
 800be60:	4413      	add	r3, r2
 800be62:	600b      	str	r3, [r1, #0]
 800be64:	d1f1      	bne.n	800be4a <PDM_Filter_Init+0x136>
 800be66:	2001      	movs	r0, #1
 800be68:	2300      	movs	r3, #0
 800be6a:	7028      	strb	r0, [r5, #0]
 800be6c:	e791      	b.n	800bd92 <PDM_Filter_Init+0x7e>
 800be6e:	2220      	movs	r2, #32
 800be70:	4618      	mov	r0, r3
 800be72:	2160      	movs	r1, #96	; 0x60
 800be74:	6422      	str	r2, [r4, #64]	; 0x40
 800be76:	4613      	mov	r3, r2
 800be78:	e790      	b.n	800bd9c <PDM_Filter_Init+0x88>
 800be7a:	bf00      	nop
 800be7c:	e0002000 	.word	0xe0002000
 800be80:	e000ed00 	.word	0xe000ed00
 800be84:	40023008 	.word	0x40023008
 800be88:	40023000 	.word	0x40023000
 800be8c:	f407a5c2 	.word	0xf407a5c2
 800be90:	b5e8b5cd 	.word	0xb5e8b5cd
 800be94:	e0042000 	.word	0xe0042000
 800be98:	5c001000 	.word	0x5c001000
 800be9c:	58024c08 	.word	0x58024c08
 800bea0:	58024c00 	.word	0x58024c00
 800bea4:	24000498 	.word	0x24000498
 800bea8:	23fffffc 	.word	0x23fffffc
 800beac:	000ffc00 	.word	0x000ffc00
 800beb0:	3ff00000 	.word	0x3ff00000

0800beb4 <PDM_Filter_setConfig>:
 800beb4:	4b67      	ldr	r3, [pc, #412]	; (800c054 <PDM_Filter_setConfig+0x1a0>)
 800beb6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800beb8:	429a      	cmp	r2, r3
 800beba:	d128      	bne.n	800bf0e <PDM_Filter_setConfig+0x5a>
 800bebc:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800bebe:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bec0:	880e      	ldrh	r6, [r1, #0]
 800bec2:	460d      	mov	r5, r1
 800bec4:	4604      	mov	r4, r0
 800bec6:	f422 7180 	bic.w	r1, r2, #256	; 0x100
 800beca:	1e73      	subs	r3, r6, #1
 800becc:	f9b5 7004 	ldrsh.w	r7, [r5, #4]
 800bed0:	f9b0 0038 	ldrsh.w	r0, [r0, #56]	; 0x38
 800bed4:	2b06      	cmp	r3, #6
 800bed6:	ed2d 8b02 	vpush	{d8}
 800beda:	6421      	str	r1, [r4, #64]	; 0x40
 800bedc:	b083      	sub	sp, #12
 800bede:	d820      	bhi.n	800bf22 <PDM_Filter_setConfig+0x6e>
 800bee0:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800bee2:	42b3      	cmp	r3, r6
 800bee4:	d03d      	beq.n	800bf62 <PDM_Filter_setConfig+0xae>
 800bee6:	4b5c      	ldr	r3, [pc, #368]	; (800c058 <PDM_Filter_setConfig+0x1a4>)
 800bee8:	4013      	ands	r3, r2
 800beea:	4333      	orrs	r3, r6
 800beec:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800bef0:	6423      	str	r3, [r4, #64]	; 0x40
 800bef2:	f003 030f 	and.w	r3, r3, #15
 800bef6:	2a70      	cmp	r2, #112	; 0x70
 800bef8:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800befc:	d009      	beq.n	800bf12 <PDM_Filter_setConfig+0x5e>
 800befe:	2b06      	cmp	r3, #6
 800bf00:	d824      	bhi.n	800bf4c <PDM_Filter_setConfig+0x98>
 800bf02:	e8df f003 	tbb	[pc, r3]
 800bf06:	878a      	.short	0x878a
 800bf08:	7b7e8184 	.word	0x7b7e8184
 800bf0c:	78          	.byte	0x78
 800bf0d:	00          	.byte	0x00
 800bf0e:	2004      	movs	r0, #4
 800bf10:	4770      	bx	lr
 800bf12:	2b06      	cmp	r3, #6
 800bf14:	d81a      	bhi.n	800bf4c <PDM_Filter_setConfig+0x98>
 800bf16:	e8df f003 	tbb	[pc, r3]
 800bf1a:	8f92      	.short	0x8f92
 800bf1c:	8617898c 	.word	0x8617898c
 800bf20:	83          	.byte	0x83
 800bf21:	00          	.byte	0x00
 800bf22:	4287      	cmp	r7, r0
 800bf24:	f000 808e 	beq.w	800c044 <PDM_Filter_setConfig+0x190>
 800bf28:	f117 0f0c 	cmn.w	r7, #12
 800bf2c:	f04f 0008 	mov.w	r0, #8
 800bf30:	da11      	bge.n	800bf56 <PDM_Filter_setConfig+0xa2>
 800bf32:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 800bf36:	3040      	adds	r0, #64	; 0x40
 800bf38:	80ab      	strh	r3, [r5, #4]
 800bf3a:	886b      	ldrh	r3, [r5, #2]
 800bf3c:	8626      	strh	r6, [r4, #48]	; 0x30
 800bf3e:	8663      	strh	r3, [r4, #50]	; 0x32
 800bf40:	b003      	add	sp, #12
 800bf42:	ecbd 8b02 	vpop	{d8}
 800bf46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf48:	4b44      	ldr	r3, [pc, #272]	; (800c05c <PDM_Filter_setConfig+0x1a8>)
 800bf4a:	64a3      	str	r3, [r4, #72]	; 0x48
 800bf4c:	f117 0f0c 	cmn.w	r7, #12
 800bf50:	f04f 0000 	mov.w	r0, #0
 800bf54:	dbed      	blt.n	800bf32 <PDM_Filter_setConfig+0x7e>
 800bf56:	2f33      	cmp	r7, #51	; 0x33
 800bf58:	dd10      	ble.n	800bf7c <PDM_Filter_setConfig+0xc8>
 800bf5a:	2333      	movs	r3, #51	; 0x33
 800bf5c:	3040      	adds	r0, #64	; 0x40
 800bf5e:	80ab      	strh	r3, [r5, #4]
 800bf60:	e7eb      	b.n	800bf3a <PDM_Filter_setConfig+0x86>
 800bf62:	4287      	cmp	r7, r0
 800bf64:	d1f2      	bne.n	800bf4c <PDM_Filter_setConfig+0x98>
 800bf66:	886b      	ldrh	r3, [r5, #2]
 800bf68:	8663      	strh	r3, [r4, #50]	; 0x32
 800bf6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bf6c:	2000      	movs	r0, #0
 800bf6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bf72:	6423      	str	r3, [r4, #64]	; 0x40
 800bf74:	b003      	add	sp, #12
 800bf76:	ecbd 8b02 	vpop	{d8}
 800bf7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf7c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bf7e:	f003 030f 	and.w	r3, r3, #15
 800bf82:	3b01      	subs	r3, #1
 800bf84:	2b06      	cmp	r3, #6
 800bf86:	d831      	bhi.n	800bfec <PDM_Filter_setConfig+0x138>
 800bf88:	4a35      	ldr	r2, [pc, #212]	; (800c060 <PDM_Filter_setConfig+0x1ac>)
 800bf8a:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800bf8e:	eddf 0a35 	vldr	s1, [pc, #212]	; 800c064 <PDM_Filter_setConfig+0x1b0>
 800bf92:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bf96:	9001      	str	r0, [sp, #4]
 800bf98:	edd3 7a07 	vldr	s15, [r3, #28]
 800bf9c:	ed93 8a00 	vldr	s16, [r3]
 800bfa0:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800bfa4:	f000 f8cc 	bl	800c140 <powf>
 800bfa8:	eef0 8a40 	vmov.f32	s17, s0
 800bfac:	9801      	ldr	r0, [sp, #4]
 800bfae:	ee07 7a90 	vmov	s15, r7
 800bfb2:	ee28 8a28 	vmul.f32	s16, s16, s17
 800bfb6:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800bfba:	9001      	str	r0, [sp, #4]
 800bfbc:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 800bfc0:	eddf 7a29 	vldr	s15, [pc, #164]	; 800c068 <PDM_Filter_setConfig+0x1b4>
 800bfc4:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800bfc8:	f000 f8ba 	bl	800c140 <powf>
 800bfcc:	ee28 8a00 	vmul.f32	s16, s16, s0
 800bfd0:	886b      	ldrh	r3, [r5, #2]
 800bfd2:	9801      	ldr	r0, [sp, #4]
 800bfd4:	feb8 8a48 	vrinta.f32	s16, s16
 800bfd8:	eebc 8ac8 	vcvt.u32.f32	s16, s16
 800bfdc:	8727      	strh	r7, [r4, #56]	; 0x38
 800bfde:	8663      	strh	r3, [r4, #50]	; 0x32
 800bfe0:	8626      	strh	r6, [r4, #48]	; 0x30
 800bfe2:	ed84 8a0f 	vstr	s16, [r4, #60]	; 0x3c
 800bfe6:	2800      	cmp	r0, #0
 800bfe8:	d0bf      	beq.n	800bf6a <PDM_Filter_setConfig+0xb6>
 800bfea:	e7a9      	b.n	800bf40 <PDM_Filter_setConfig+0x8c>
 800bfec:	eddf 8a1f 	vldr	s17, [pc, #124]	; 800c06c <PDM_Filter_setConfig+0x1b8>
 800bff0:	ed9f 8a1f 	vldr	s16, [pc, #124]	; 800c070 <PDM_Filter_setConfig+0x1bc>
 800bff4:	e7db      	b.n	800bfae <PDM_Filter_setConfig+0xfa>
 800bff6:	4b1f      	ldr	r3, [pc, #124]	; (800c074 <PDM_Filter_setConfig+0x1c0>)
 800bff8:	64a3      	str	r3, [r4, #72]	; 0x48
 800bffa:	e7a7      	b.n	800bf4c <PDM_Filter_setConfig+0x98>
 800bffc:	4b1e      	ldr	r3, [pc, #120]	; (800c078 <PDM_Filter_setConfig+0x1c4>)
 800bffe:	64a3      	str	r3, [r4, #72]	; 0x48
 800c000:	e7a4      	b.n	800bf4c <PDM_Filter_setConfig+0x98>
 800c002:	4b1e      	ldr	r3, [pc, #120]	; (800c07c <PDM_Filter_setConfig+0x1c8>)
 800c004:	64a3      	str	r3, [r4, #72]	; 0x48
 800c006:	e7a1      	b.n	800bf4c <PDM_Filter_setConfig+0x98>
 800c008:	4b1d      	ldr	r3, [pc, #116]	; (800c080 <PDM_Filter_setConfig+0x1cc>)
 800c00a:	64a3      	str	r3, [r4, #72]	; 0x48
 800c00c:	e79e      	b.n	800bf4c <PDM_Filter_setConfig+0x98>
 800c00e:	4b1d      	ldr	r3, [pc, #116]	; (800c084 <PDM_Filter_setConfig+0x1d0>)
 800c010:	64a3      	str	r3, [r4, #72]	; 0x48
 800c012:	e79b      	b.n	800bf4c <PDM_Filter_setConfig+0x98>
 800c014:	4b1c      	ldr	r3, [pc, #112]	; (800c088 <PDM_Filter_setConfig+0x1d4>)
 800c016:	64a3      	str	r3, [r4, #72]	; 0x48
 800c018:	e798      	b.n	800bf4c <PDM_Filter_setConfig+0x98>
 800c01a:	4b1c      	ldr	r3, [pc, #112]	; (800c08c <PDM_Filter_setConfig+0x1d8>)
 800c01c:	64a3      	str	r3, [r4, #72]	; 0x48
 800c01e:	e795      	b.n	800bf4c <PDM_Filter_setConfig+0x98>
 800c020:	4b1b      	ldr	r3, [pc, #108]	; (800c090 <PDM_Filter_setConfig+0x1dc>)
 800c022:	64a3      	str	r3, [r4, #72]	; 0x48
 800c024:	e792      	b.n	800bf4c <PDM_Filter_setConfig+0x98>
 800c026:	4b1b      	ldr	r3, [pc, #108]	; (800c094 <PDM_Filter_setConfig+0x1e0>)
 800c028:	64a3      	str	r3, [r4, #72]	; 0x48
 800c02a:	e78f      	b.n	800bf4c <PDM_Filter_setConfig+0x98>
 800c02c:	4b1a      	ldr	r3, [pc, #104]	; (800c098 <PDM_Filter_setConfig+0x1e4>)
 800c02e:	64a3      	str	r3, [r4, #72]	; 0x48
 800c030:	e78c      	b.n	800bf4c <PDM_Filter_setConfig+0x98>
 800c032:	4b1a      	ldr	r3, [pc, #104]	; (800c09c <PDM_Filter_setConfig+0x1e8>)
 800c034:	64a3      	str	r3, [r4, #72]	; 0x48
 800c036:	e789      	b.n	800bf4c <PDM_Filter_setConfig+0x98>
 800c038:	4b19      	ldr	r3, [pc, #100]	; (800c0a0 <PDM_Filter_setConfig+0x1ec>)
 800c03a:	64a3      	str	r3, [r4, #72]	; 0x48
 800c03c:	e786      	b.n	800bf4c <PDM_Filter_setConfig+0x98>
 800c03e:	4b19      	ldr	r3, [pc, #100]	; (800c0a4 <PDM_Filter_setConfig+0x1f0>)
 800c040:	64a3      	str	r3, [r4, #72]	; 0x48
 800c042:	e783      	b.n	800bf4c <PDM_Filter_setConfig+0x98>
 800c044:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800c046:	42b3      	cmp	r3, r6
 800c048:	f47f af6e 	bne.w	800bf28 <PDM_Filter_setConfig+0x74>
 800c04c:	886b      	ldrh	r3, [r5, #2]
 800c04e:	2008      	movs	r0, #8
 800c050:	8663      	strh	r3, [r4, #50]	; 0x32
 800c052:	e775      	b.n	800bf40 <PDM_Filter_setConfig+0x8c>
 800c054:	b5e8b5cd 	.word	0xb5e8b5cd
 800c058:	fffffef0 	.word	0xfffffef0
 800c05c:	0800b1cd 	.word	0x0800b1cd
 800c060:	0800c528 	.word	0x0800c528
 800c064:	42000000 	.word	0x42000000
 800c068:	3d4ccccd 	.word	0x3d4ccccd
 800c06c:	4f800000 	.word	0x4f800000
 800c070:	00000000 	.word	0x00000000
 800c074:	0800a5d9 	.word	0x0800a5d9
 800c078:	0800a461 	.word	0x0800a461
 800c07c:	0800a351 	.word	0x0800a351
 800c080:	0800ae15 	.word	0x0800ae15
 800c084:	0800ab7d 	.word	0x0800ab7d
 800c088:	0800a945 	.word	0x0800a945
 800c08c:	0800a761 	.word	0x0800a761
 800c090:	0800b3e9 	.word	0x0800b3e9
 800c094:	0800b2ad 	.word	0x0800b2ad
 800c098:	0800ba29 	.word	0x0800ba29
 800c09c:	0800b82d 	.word	0x0800b82d
 800c0a0:	0800b681 	.word	0x0800b681
 800c0a4:	0800b515 	.word	0x0800b515

0800c0a8 <__errno>:
 800c0a8:	4b01      	ldr	r3, [pc, #4]	; (800c0b0 <__errno+0x8>)
 800c0aa:	6818      	ldr	r0, [r3, #0]
 800c0ac:	4770      	bx	lr
 800c0ae:	bf00      	nop
 800c0b0:	24000418 	.word	0x24000418

0800c0b4 <__libc_init_array>:
 800c0b4:	b570      	push	{r4, r5, r6, lr}
 800c0b6:	4d0d      	ldr	r5, [pc, #52]	; (800c0ec <__libc_init_array+0x38>)
 800c0b8:	4c0d      	ldr	r4, [pc, #52]	; (800c0f0 <__libc_init_array+0x3c>)
 800c0ba:	1b64      	subs	r4, r4, r5
 800c0bc:	10a4      	asrs	r4, r4, #2
 800c0be:	2600      	movs	r6, #0
 800c0c0:	42a6      	cmp	r6, r4
 800c0c2:	d109      	bne.n	800c0d8 <__libc_init_array+0x24>
 800c0c4:	4d0b      	ldr	r5, [pc, #44]	; (800c0f4 <__libc_init_array+0x40>)
 800c0c6:	4c0c      	ldr	r4, [pc, #48]	; (800c0f8 <__libc_init_array+0x44>)
 800c0c8:	f000 f9e6 	bl	800c498 <_init>
 800c0cc:	1b64      	subs	r4, r4, r5
 800c0ce:	10a4      	asrs	r4, r4, #2
 800c0d0:	2600      	movs	r6, #0
 800c0d2:	42a6      	cmp	r6, r4
 800c0d4:	d105      	bne.n	800c0e2 <__libc_init_array+0x2e>
 800c0d6:	bd70      	pop	{r4, r5, r6, pc}
 800c0d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c0dc:	4798      	blx	r3
 800c0de:	3601      	adds	r6, #1
 800c0e0:	e7ee      	b.n	800c0c0 <__libc_init_array+0xc>
 800c0e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c0e6:	4798      	blx	r3
 800c0e8:	3601      	adds	r6, #1
 800c0ea:	e7f2      	b.n	800c0d2 <__libc_init_array+0x1e>
 800c0ec:	0800c7f0 	.word	0x0800c7f0
 800c0f0:	0800c7f0 	.word	0x0800c7f0
 800c0f4:	0800c7f0 	.word	0x0800c7f0
 800c0f8:	0800c7f4 	.word	0x0800c7f4

0800c0fc <memset>:
 800c0fc:	4402      	add	r2, r0
 800c0fe:	4603      	mov	r3, r0
 800c100:	4293      	cmp	r3, r2
 800c102:	d100      	bne.n	800c106 <memset+0xa>
 800c104:	4770      	bx	lr
 800c106:	f803 1b01 	strb.w	r1, [r3], #1
 800c10a:	e7f9      	b.n	800c100 <memset+0x4>

0800c10c <checkint>:
 800c10c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800c110:	2b7e      	cmp	r3, #126	; 0x7e
 800c112:	dd10      	ble.n	800c136 <checkint+0x2a>
 800c114:	2b96      	cmp	r3, #150	; 0x96
 800c116:	dc0c      	bgt.n	800c132 <checkint+0x26>
 800c118:	2201      	movs	r2, #1
 800c11a:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800c11e:	fa02 f303 	lsl.w	r3, r2, r3
 800c122:	1e5a      	subs	r2, r3, #1
 800c124:	4202      	tst	r2, r0
 800c126:	d106      	bne.n	800c136 <checkint+0x2a>
 800c128:	4203      	tst	r3, r0
 800c12a:	bf0c      	ite	eq
 800c12c:	2002      	moveq	r0, #2
 800c12e:	2001      	movne	r0, #1
 800c130:	4770      	bx	lr
 800c132:	2002      	movs	r0, #2
 800c134:	4770      	bx	lr
 800c136:	2000      	movs	r0, #0
 800c138:	4770      	bx	lr
 800c13a:	0000      	movs	r0, r0
 800c13c:	0000      	movs	r0, r0
	...

0800c140 <powf>:
 800c140:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c142:	ee10 1a10 	vmov	r1, s0
 800c146:	ee10 6a90 	vmov	r6, s1
 800c14a:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 800c14e:	0072      	lsls	r2, r6, #1
 800c150:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800c154:	b085      	sub	sp, #20
 800c156:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 800c15a:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 800c15e:	d256      	bcs.n	800c20e <powf+0xce>
 800c160:	4298      	cmp	r0, r3
 800c162:	d256      	bcs.n	800c212 <powf+0xd2>
 800c164:	2000      	movs	r0, #0
 800c166:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 800c16a:	4ea3      	ldr	r6, [pc, #652]	; (800c3f8 <powf+0x2b8>)
 800c16c:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800c170:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 800c174:	f3c2 47c3 	ubfx	r7, r2, #19, #4
 800c178:	0dd2      	lsrs	r2, r2, #23
 800c17a:	eb06 1707 	add.w	r7, r6, r7, lsl #4
 800c17e:	05d2      	lsls	r2, r2, #23
 800c180:	1a8b      	subs	r3, r1, r2
 800c182:	ed97 5b00 	vldr	d5, [r7]
 800c186:	ee07 3a90 	vmov	s15, r3
 800c18a:	15d2      	asrs	r2, r2, #23
 800c18c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800c190:	eea5 6b07 	vfma.f64	d6, d5, d7
 800c194:	ed97 5b02 	vldr	d5, [r7, #8]
 800c198:	ee26 2b06 	vmul.f64	d2, d6, d6
 800c19c:	ee22 1b02 	vmul.f64	d1, d2, d2
 800c1a0:	ee07 2a90 	vmov	s15, r2
 800c1a4:	ed96 4b40 	vldr	d4, [r6, #256]	; 0x100
 800c1a8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c1ac:	ee37 7b05 	vadd.f64	d7, d7, d5
 800c1b0:	ed96 5b42 	vldr	d5, [r6, #264]	; 0x108
 800c1b4:	ed96 3b44 	vldr	d3, [r6, #272]	; 0x110
 800c1b8:	eea6 5b04 	vfma.f64	d5, d6, d4
 800c1bc:	ed96 4b46 	vldr	d4, [r6, #280]	; 0x118
 800c1c0:	eea6 4b03 	vfma.f64	d4, d6, d3
 800c1c4:	ed96 3b48 	vldr	d3, [r6, #288]	; 0x120
 800c1c8:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 800c1cc:	eea6 7b03 	vfma.f64	d7, d6, d3
 800c1d0:	eea2 7b04 	vfma.f64	d7, d2, d4
 800c1d4:	eea5 7b01 	vfma.f64	d7, d5, d1
 800c1d8:	ee20 0b07 	vmul.f64	d0, d0, d7
 800c1dc:	ee10 1a90 	vmov	r1, s1
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	2700      	movs	r7, #0
 800c1e4:	f3c1 32cf 	ubfx	r2, r1, #15, #16
 800c1e8:	f248 06be 	movw	r6, #32958	; 0x80be
 800c1ec:	429f      	cmp	r7, r3
 800c1ee:	bf08      	it	eq
 800c1f0:	4296      	cmpeq	r6, r2
 800c1f2:	f080 80b1 	bcs.w	800c358 <powf+0x218>
 800c1f6:	ed9f 7b78 	vldr	d7, [pc, #480]	; 800c3d8 <powf+0x298>
 800c1fa:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800c1fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c202:	dd79      	ble.n	800c2f8 <powf+0x1b8>
 800c204:	b005      	add	sp, #20
 800c206:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800c20a:	f000 b91f 	b.w	800c44c <__math_oflowf>
 800c20e:	4298      	cmp	r0, r3
 800c210:	d32d      	bcc.n	800c26e <powf+0x12e>
 800c212:	b952      	cbnz	r2, 800c22a <powf+0xea>
 800c214:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 800c218:	005b      	lsls	r3, r3, #1
 800c21a:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 800c21e:	f240 80cd 	bls.w	800c3bc <powf+0x27c>
 800c222:	ee30 0a20 	vadd.f32	s0, s0, s1
 800c226:	b005      	add	sp, #20
 800c228:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c22a:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800c22e:	d105      	bne.n	800c23c <powf+0xfc>
 800c230:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 800c234:	0076      	lsls	r6, r6, #1
 800c236:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 800c23a:	e7f0      	b.n	800c21e <powf+0xde>
 800c23c:	004b      	lsls	r3, r1, #1
 800c23e:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 800c242:	d8ee      	bhi.n	800c222 <powf+0xe2>
 800c244:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 800c248:	d1eb      	bne.n	800c222 <powf+0xe2>
 800c24a:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800c24e:	f000 80b5 	beq.w	800c3bc <powf+0x27c>
 800c252:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800c256:	ea6f 0606 	mvn.w	r6, r6
 800c25a:	bf34      	ite	cc
 800c25c:	2300      	movcc	r3, #0
 800c25e:	2301      	movcs	r3, #1
 800c260:	0ff6      	lsrs	r6, r6, #31
 800c262:	42b3      	cmp	r3, r6
 800c264:	f040 80ad 	bne.w	800c3c2 <powf+0x282>
 800c268:	ee20 0aa0 	vmul.f32	s0, s1, s1
 800c26c:	e7db      	b.n	800c226 <powf+0xe6>
 800c26e:	004f      	lsls	r7, r1, #1
 800c270:	1e7a      	subs	r2, r7, #1
 800c272:	429a      	cmp	r2, r3
 800c274:	d31c      	bcc.n	800c2b0 <powf+0x170>
 800c276:	2900      	cmp	r1, #0
 800c278:	ee20 0a00 	vmul.f32	s0, s0, s0
 800c27c:	da0f      	bge.n	800c29e <powf+0x15e>
 800c27e:	ee10 0a90 	vmov	r0, s1
 800c282:	f7ff ff43 	bl	800c10c <checkint>
 800c286:	2801      	cmp	r0, #1
 800c288:	d109      	bne.n	800c29e <powf+0x15e>
 800c28a:	eeb1 0a40 	vneg.f32	s0, s0
 800c28e:	b947      	cbnz	r7, 800c2a2 <powf+0x162>
 800c290:	2e00      	cmp	r6, #0
 800c292:	dac8      	bge.n	800c226 <powf+0xe6>
 800c294:	b005      	add	sp, #20
 800c296:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800c29a:	f000 b8dd 	b.w	800c458 <__math_divzerof>
 800c29e:	2000      	movs	r0, #0
 800c2a0:	e7f5      	b.n	800c28e <powf+0x14e>
 800c2a2:	2e00      	cmp	r6, #0
 800c2a4:	dabf      	bge.n	800c226 <powf+0xe6>
 800c2a6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c2aa:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800c2ae:	e7ba      	b.n	800c226 <powf+0xe6>
 800c2b0:	2900      	cmp	r1, #0
 800c2b2:	da1f      	bge.n	800c2f4 <powf+0x1b4>
 800c2b4:	ee10 0a90 	vmov	r0, s1
 800c2b8:	f7ff ff28 	bl	800c10c <checkint>
 800c2bc:	b920      	cbnz	r0, 800c2c8 <powf+0x188>
 800c2be:	b005      	add	sp, #20
 800c2c0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800c2c4:	f000 b8d8 	b.w	800c478 <__math_invalidf>
 800c2c8:	2801      	cmp	r0, #1
 800c2ca:	bf14      	ite	ne
 800c2cc:	2000      	movne	r0, #0
 800c2ce:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800c2d2:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800c2d6:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800c2da:	f4bf af44 	bcs.w	800c166 <powf+0x26>
 800c2de:	eddf 7a47 	vldr	s15, [pc, #284]	; 800c3fc <powf+0x2bc>
 800c2e2:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c2e6:	ee10 3a10 	vmov	r3, s0
 800c2ea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c2ee:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 800c2f2:	e738      	b.n	800c166 <powf+0x26>
 800c2f4:	2000      	movs	r0, #0
 800c2f6:	e7ee      	b.n	800c2d6 <powf+0x196>
 800c2f8:	ed9f 7b39 	vldr	d7, [pc, #228]	; 800c3e0 <powf+0x2a0>
 800c2fc:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800c300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c304:	dd10      	ble.n	800c328 <powf+0x1e8>
 800c306:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 800c30a:	2800      	cmp	r0, #0
 800c30c:	d15c      	bne.n	800c3c8 <powf+0x288>
 800c30e:	9302      	str	r3, [sp, #8]
 800c310:	eddd 7a02 	vldr	s15, [sp, #8]
 800c314:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c318:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c31c:	eef4 7a47 	vcmp.f32	s15, s14
 800c320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c324:	f47f af6e 	bne.w	800c204 <powf+0xc4>
 800c328:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800c3e8 <powf+0x2a8>
 800c32c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800c330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c334:	d804      	bhi.n	800c340 <powf+0x200>
 800c336:	b005      	add	sp, #20
 800c338:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800c33c:	f000 b87a 	b.w	800c434 <__math_uflowf>
 800c340:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 800c3f0 <powf+0x2b0>
 800c344:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800c348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c34c:	d504      	bpl.n	800c358 <powf+0x218>
 800c34e:	b005      	add	sp, #20
 800c350:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800c354:	f000 b874 	b.w	800c440 <__math_may_uflowf>
 800c358:	4b29      	ldr	r3, [pc, #164]	; (800c400 <powf+0x2c0>)
 800c35a:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 800c35e:	ee30 6b07 	vadd.f64	d6, d0, d7
 800c362:	ed8d 6b00 	vstr	d6, [sp]
 800c366:	ee36 7b47 	vsub.f64	d7, d6, d7
 800c36a:	ee30 7b47 	vsub.f64	d7, d0, d7
 800c36e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c372:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800c376:	f006 011f 	and.w	r1, r6, #31
 800c37a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800c37e:	e9d1 ce00 	ldrd	ip, lr, [r1]
 800c382:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 800c386:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 800c38a:	ed93 4b46 	vldr	d4, [r3, #280]	; 0x118
 800c38e:	eea7 6b05 	vfma.f64	d6, d7, d5
 800c392:	ee27 5b07 	vmul.f64	d5, d7, d7
 800c396:	1836      	adds	r6, r6, r0
 800c398:	2300      	movs	r3, #0
 800c39a:	eb13 040c 	adds.w	r4, r3, ip
 800c39e:	ea4f 31c6 	mov.w	r1, r6, lsl #15
 800c3a2:	eb41 050e 	adc.w	r5, r1, lr
 800c3a6:	eea7 0b04 	vfma.f64	d0, d7, d4
 800c3aa:	ec45 4b17 	vmov	d7, r4, r5
 800c3ae:	eea6 0b05 	vfma.f64	d0, d6, d5
 800c3b2:	ee20 0b07 	vmul.f64	d0, d0, d7
 800c3b6:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800c3ba:	e734      	b.n	800c226 <powf+0xe6>
 800c3bc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c3c0:	e731      	b.n	800c226 <powf+0xe6>
 800c3c2:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800c404 <powf+0x2c4>
 800c3c6:	e72e      	b.n	800c226 <powf+0xe6>
 800c3c8:	9303      	str	r3, [sp, #12]
 800c3ca:	eddd 7a03 	vldr	s15, [sp, #12]
 800c3ce:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800c3d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c3d6:	e7a1      	b.n	800c31c <powf+0x1dc>
 800c3d8:	ffd1d571 	.word	0xffd1d571
 800c3dc:	405fffff 	.word	0x405fffff
 800c3e0:	ffa3aae2 	.word	0xffa3aae2
 800c3e4:	405fffff 	.word	0x405fffff
 800c3e8:	00000000 	.word	0x00000000
 800c3ec:	c062c000 	.word	0xc062c000
 800c3f0:	00000000 	.word	0x00000000
 800c3f4:	c062a000 	.word	0xc062a000
 800c3f8:	0800c580 	.word	0x0800c580
 800c3fc:	4b000000 	.word	0x4b000000
 800c400:	0800c6a8 	.word	0x0800c6a8
 800c404:	00000000 	.word	0x00000000

0800c408 <with_errnof>:
 800c408:	b513      	push	{r0, r1, r4, lr}
 800c40a:	4604      	mov	r4, r0
 800c40c:	ed8d 0a01 	vstr	s0, [sp, #4]
 800c410:	f7ff fe4a 	bl	800c0a8 <__errno>
 800c414:	ed9d 0a01 	vldr	s0, [sp, #4]
 800c418:	6004      	str	r4, [r0, #0]
 800c41a:	b002      	add	sp, #8
 800c41c:	bd10      	pop	{r4, pc}

0800c41e <xflowf>:
 800c41e:	b130      	cbz	r0, 800c42e <xflowf+0x10>
 800c420:	eef1 7a40 	vneg.f32	s15, s0
 800c424:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c428:	2022      	movs	r0, #34	; 0x22
 800c42a:	f7ff bfed 	b.w	800c408 <with_errnof>
 800c42e:	eef0 7a40 	vmov.f32	s15, s0
 800c432:	e7f7      	b.n	800c424 <xflowf+0x6>

0800c434 <__math_uflowf>:
 800c434:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c43c <__math_uflowf+0x8>
 800c438:	f7ff bff1 	b.w	800c41e <xflowf>
 800c43c:	10000000 	.word	0x10000000

0800c440 <__math_may_uflowf>:
 800c440:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c448 <__math_may_uflowf+0x8>
 800c444:	f7ff bfeb 	b.w	800c41e <xflowf>
 800c448:	1a200000 	.word	0x1a200000

0800c44c <__math_oflowf>:
 800c44c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c454 <__math_oflowf+0x8>
 800c450:	f7ff bfe5 	b.w	800c41e <xflowf>
 800c454:	70000000 	.word	0x70000000

0800c458 <__math_divzerof>:
 800c458:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c45c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800c460:	2800      	cmp	r0, #0
 800c462:	fe40 7a27 	vseleq.f32	s15, s0, s15
 800c466:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800c474 <__math_divzerof+0x1c>
 800c46a:	2022      	movs	r0, #34	; 0x22
 800c46c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800c470:	f7ff bfca 	b.w	800c408 <with_errnof>
 800c474:	00000000 	.word	0x00000000

0800c478 <__math_invalidf>:
 800c478:	eef0 7a40 	vmov.f32	s15, s0
 800c47c:	ee30 7a40 	vsub.f32	s14, s0, s0
 800c480:	eef4 7a67 	vcmp.f32	s15, s15
 800c484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c488:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800c48c:	d602      	bvs.n	800c494 <__math_invalidf+0x1c>
 800c48e:	2021      	movs	r0, #33	; 0x21
 800c490:	f7ff bfba 	b.w	800c408 <with_errnof>
 800c494:	4770      	bx	lr
	...

0800c498 <_init>:
 800c498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c49a:	bf00      	nop
 800c49c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c49e:	bc08      	pop	{r3}
 800c4a0:	469e      	mov	lr, r3
 800c4a2:	4770      	bx	lr

0800c4a4 <_fini>:
 800c4a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4a6:	bf00      	nop
 800c4a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4aa:	bc08      	pop	{r3}
 800c4ac:	469e      	mov	lr, r3
 800c4ae:	4770      	bx	lr
