
mic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bba8  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000338  0800be78  0800be78  0001be78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800c1b0  0800c1b0  0001c1b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800c1b4  0800c1b4  0001c1b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000474  24000000  0800c1b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000009e4  24000474  0800c62c  00020474  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000e58  0800c62c  00020e58  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020474  2**0
                  CONTENTS, READONLY
  9 .debug_info   000222ad  00000000  00000000  000204a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003217  00000000  00000000  0004274f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000f68  00000000  00000000  00045968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000e68  00000000  00000000  000468d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0000387e  00000000  00000000  00047738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000153dc  00000000  00000000  0004afb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00150bf8  00000000  00000000  00060392  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      000000d1  00000000  00000000  001b0f8a  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000411c  00000000  00000000  001b105c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000474 	.word	0x24000474
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800be60 	.word	0x0800be60

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000478 	.word	0x24000478
 800030c:	0800be60 	.word	0x0800be60

08000310 <MX_SAI1_Block_B_Init>:
  * @param  MXConfig SAI confiruration structure
  * @note   Being __weak it can be overwritten by the application
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SAI1_Block_B_Init(SAI_HandleTypeDef* hsai, MX_SAI_Config *MXConfig)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b084      	sub	sp, #16
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
 8000318:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800031a:	2300      	movs	r3, #0
 800031c:	73fb      	strb	r3, [r7, #15]

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(hsai);
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	681a      	ldr	r2, [r3, #0]
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800032c:	601a      	str	r2, [r3, #0]

  /* Configure SAI1_Block_B */
  hsai->Init.MonoStereoMode       = MXConfig->MonoStereoMode;
 800032e:	683b      	ldr	r3, [r7, #0]
 8000330:	68da      	ldr	r2, [r3, #12]
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai->Init.AudioFrequency       = MXConfig->AudioFrequency;
 8000336:	683b      	ldr	r3, [r7, #0]
 8000338:	681a      	ldr	r2, [r3, #0]
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	621a      	str	r2, [r3, #32]
  hsai->Init.AudioMode            = MXConfig->AudioMode;
 800033e:	683b      	ldr	r3, [r7, #0]
 8000340:	685a      	ldr	r2, [r3, #4]
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	605a      	str	r2, [r3, #4]
  hsai->Init.NoDivider            = SAI_MASTERDIVIDER_ENABLE;
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	2200      	movs	r2, #0
 800034a:	619a      	str	r2, [r3, #24]
  hsai->Init.Protocol             = SAI_FREE_PROTOCOL;
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	2200      	movs	r2, #0
 8000350:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.DataSize             = MXConfig->DataSize;
 8000352:	683b      	ldr	r3, [r7, #0]
 8000354:	689a      	ldr	r2, [r3, #8]
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->Init.FirstBit             = SAI_FIRSTBIT_MSB;
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	2200      	movs	r2, #0
 800035e:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->Init.ClockStrobing        = MXConfig->ClockStrobing;
 8000360:	683b      	ldr	r3, [r7, #0]
 8000362:	691a      	ldr	r2, [r3, #16]
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	651a      	str	r2, [r3, #80]	; 0x50
  hsai->Init.Synchro              = MXConfig->Synchro;
 8000368:	683b      	ldr	r3, [r7, #0]
 800036a:	695a      	ldr	r2, [r3, #20]
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	609a      	str	r2, [r3, #8]
  hsai->Init.OutputDrive          = MXConfig->OutputDrive;
 8000370:	683b      	ldr	r3, [r7, #0]
 8000372:	699a      	ldr	r2, [r3, #24]
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	615a      	str	r2, [r3, #20]
  hsai->Init.FIFOThreshold        = SAI_FIFOTHRESHOLD_1QF;
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	2201      	movs	r2, #1
 800037c:	61da      	str	r2, [r3, #28]
  hsai->Init.SynchroExt           = MXConfig->SynchroExt;
 800037e:	683b      	ldr	r3, [r7, #0]
 8000380:	69da      	ldr	r2, [r3, #28]
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	60da      	str	r2, [r3, #12]
  hsai->Init.CompandingMode       = SAI_NOCOMPANDING;
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	2200      	movs	r2, #0
 800038a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.TriState             = SAI_OUTPUT_NOTRELEASED;
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	2200      	movs	r2, #0
 8000390:	635a      	str	r2, [r3, #52]	; 0x34
  hsai->Init.Mckdiv               = 0;
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	2200      	movs	r2, #0
 8000396:	625a      	str	r2, [r3, #36]	; 0x24
  hsai->Init.MckOutput            = SAI_MCK_OUTPUT_ENABLE;
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800039e:	611a      	str	r2, [r3, #16]
  hsai->Init.MckOverSampling      = SAI_MCK_OVERSAMPLING_DISABLE;
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	2200      	movs	r2, #0
 80003a4:	629a      	str	r2, [r3, #40]	; 0x28
  hsai->Init.PdmInit.Activation   = DISABLE;
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	2200      	movs	r2, #0
 80003aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Configure SAI_Block_x Frame */
  hsai->FrameInit.FrameLength       = MXConfig->FrameLength;
 80003ae:	683b      	ldr	r3, [r7, #0]
 80003b0:	6a1a      	ldr	r2, [r3, #32]
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->FrameInit.ActiveFrameLength = MXConfig->ActiveFrameLength;
 80003b6:	683b      	ldr	r3, [r7, #0]
 80003b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->FrameInit.FSDefinition      = SAI_FS_CHANNEL_IDENTIFICATION;
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80003c4:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity        = SAI_FS_ACTIVE_LOW;
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	2200      	movs	r2, #0
 80003ca:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset          = SAI_FS_BEFOREFIRSTBIT;
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80003d2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure SAI Block_x Slot */
  hsai->SlotInit.FirstBitOffset     = 0;
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	2200      	movs	r2, #0
 80003d8:	669a      	str	r2, [r3, #104]	; 0x68
  if ((MXConfig->DataSize == AUDIO_RESOLUTION_24B) || (MXConfig->DataSize == AUDIO_RESOLUTION_32B))
 80003da:	683b      	ldr	r3, [r7, #0]
 80003dc:	689b      	ldr	r3, [r3, #8]
 80003de:	2b18      	cmp	r3, #24
 80003e0:	d003      	beq.n	80003ea <MX_SAI1_Block_B_Init+0xda>
 80003e2:	683b      	ldr	r3, [r7, #0]
 80003e4:	689b      	ldr	r3, [r3, #8]
 80003e6:	2b20      	cmp	r3, #32
 80003e8:	d103      	bne.n	80003f2 <MX_SAI1_Block_B_Init+0xe2>
  {
    hsai->SlotInit.SlotSize         = SAI_SLOTSIZE_32B;
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	2280      	movs	r2, #128	; 0x80
 80003ee:	66da      	str	r2, [r3, #108]	; 0x6c
 80003f0:	e002      	b.n	80003f8 <MX_SAI1_Block_B_Init+0xe8>
  }
  else
  {
    hsai->SlotInit.SlotSize         = SAI_SLOTSIZE_16B;
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	2240      	movs	r2, #64	; 0x40
 80003f6:	66da      	str	r2, [r3, #108]	; 0x6c
  }
  hsai->SlotInit.SlotNumber         = 4;
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	2204      	movs	r2, #4
 80003fc:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive         = MXConfig->SlotActive;
 80003fe:	683b      	ldr	r3, [r7, #0]
 8000400:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	675a      	str	r2, [r3, #116]	; 0x74

  if(HAL_SAI_Init(hsai) != HAL_OK)
 8000406:	6878      	ldr	r0, [r7, #4]
 8000408:	f008 fb52 	bl	8008ab0 <HAL_SAI_Init>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d001      	beq.n	8000416 <MX_SAI1_Block_B_Init+0x106>
  {
    ret = HAL_ERROR;
 8000412:	2301      	movs	r3, #1
 8000414:	73fb      	strb	r3, [r7, #15]
  }
  __HAL_SAI_ENABLE(hsai);
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	681a      	ldr	r2, [r3, #0]
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000424:	601a      	str	r2, [r3, #0]

  return ret;
 8000426:	7bfb      	ldrb	r3, [r7, #15]
}
 8000428:	4618      	mov	r0, r3
 800042a:	3710      	adds	r7, #16
 800042c:	46bd      	mov	sp, r7
 800042e:	bd80      	pop	{r7, pc}

08000430 <MX_SAI1_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SAI1_ClockConfig(SAI_HandleTypeDef *hsai, uint32_t SampleRate)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b0b0      	sub	sp, #192	; 0xc0
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
 8000438:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsai);

  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;
  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 800043a:	f107 030c 	add.w	r3, r7, #12
 800043e:	4618      	mov	r0, r3
 8000440:	f007 f850 	bl	80074e4 <HAL_RCCEx_GetPeriphCLKConfig>

  /* Set the PLL configuration according to the audio frequency */
  /* Set the PLL configuration according to the audio frequency */
  if((SampleRate == AUDIO_FREQUENCY_11K) || (SampleRate == AUDIO_FREQUENCY_22K) || (SampleRate == AUDIO_FREQUENCY_44K))
 8000444:	683b      	ldr	r3, [r7, #0]
 8000446:	f642 3211 	movw	r2, #11025	; 0x2b11
 800044a:	4293      	cmp	r3, r2
 800044c:	d009      	beq.n	8000462 <MX_SAI1_ClockConfig+0x32>
 800044e:	683b      	ldr	r3, [r7, #0]
 8000450:	f245 6222 	movw	r2, #22050	; 0x5622
 8000454:	4293      	cmp	r3, r2
 8000456:	d004      	beq.n	8000462 <MX_SAI1_ClockConfig+0x32>
 8000458:	683b      	ldr	r3, [r7, #0]
 800045a:	f64a 4244 	movw	r2, #44100	; 0xac44
 800045e:	4293      	cmp	r3, r2
 8000460:	d104      	bne.n	800046c <MX_SAI1_ClockConfig+0x3c>
  {
    rcc_ex_clk_init_struct.PLL2.PLL2P = 36;
 8000462:	2324      	movs	r3, #36	; 0x24
 8000464:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLL2.PLL2Q = 36;
 8000466:	2324      	movs	r3, #36	; 0x24
 8000468:	61fb      	str	r3, [r7, #28]
 800046a:	e003      	b.n	8000474 <MX_SAI1_ClockConfig+0x44>
  }
  else /* AUDIO_FREQUENCY_8K, AUDIO_FREQUENCY_16K, AUDIO_FREQUENCY_32K, AUDIO_FREQUENCY_48K, AUDIO_FREQUENCY_96K */
  {
    rcc_ex_clk_init_struct.PLL2.PLL2P = 8;
 800046c:	2308      	movs	r3, #8
 800046e:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLL2.PLL2Q = 8;
 8000470:	2308      	movs	r3, #8
 8000472:	61fb      	str	r3, [r7, #28]
  }
  rcc_ex_clk_init_struct.PLL2.PLL2N = 80;
 8000474:	2350      	movs	r3, #80	; 0x50
 8000476:	617b      	str	r3, [r7, #20]

  rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8000478:	f44f 7380 	mov.w	r3, #256	; 0x100
 800047c:	60fb      	str	r3, [r7, #12]
  rcc_ex_clk_init_struct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 800047e:	2301      	movs	r3, #1
 8000480:	663b      	str	r3, [r7, #96]	; 0x60
  rcc_ex_clk_init_struct.PLL2.PLL2R = 2;
 8000482:	2302      	movs	r3, #2
 8000484:	623b      	str	r3, [r7, #32]
  rcc_ex_clk_init_struct.PLL2.PLL2M = 5;
 8000486:	2305      	movs	r3, #5
 8000488:	613b      	str	r3, [r7, #16]
  rcc_ex_clk_init_struct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 800048a:	2300      	movs	r3, #0
 800048c:	627b      	str	r3, [r7, #36]	; 0x24
  rcc_ex_clk_init_struct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800048e:	2320      	movs	r3, #32
 8000490:	62bb      	str	r3, [r7, #40]	; 0x28
  rcc_ex_clk_init_struct.PLL2.PLL2FRACN = 0;
 8000492:	2300      	movs	r3, #0
 8000494:	62fb      	str	r3, [r7, #44]	; 0x2c
  return HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8000496:	f107 030c 	add.w	r3, r7, #12
 800049a:	4618      	mov	r0, r3
 800049c:	f006 f928 	bl	80066f0 <HAL_RCCEx_PeriphCLKConfig>
 80004a0:	4603      	mov	r3, r0
}
 80004a2:	4618      	mov	r0, r3
 80004a4:	37c0      	adds	r7, #192	; 0xc0
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}

080004aa <BSP_AUDIO_OUT_Error_CallBack>:
  * @brief  Manages the DMA FIFO error event
  * @param  Instance AUDIO OUT Instance. It can only be 0 (SAI)
  * @retval None
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(uint32_t Instance)
{
 80004aa:	b480      	push	{r7}
 80004ac:	b083      	sub	sp, #12
 80004ae:	af00      	add	r7, sp, #0
 80004b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Instance);
}
 80004b2:	bf00      	nop
 80004b4:	370c      	adds	r7, #12
 80004b6:	46bd      	mov	sp, r7
 80004b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004bc:	4770      	bx	lr
	...

080004c0 <SAI_MspInit>:
  * @brief  Initialize BSP_AUDIO_OUT MSP.
  * @param  hsai  SAI handle
  * @retval None
  */
static void SAI_MspInit(SAI_HandleTypeDef *hsai)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b096      	sub	sp, #88	; 0x58
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  static DMA_HandleTypeDef hdma_sai_tx, hdma_sai_rx;
    /* Enable SAI clock */
  AUDIO_OUT_SAIx_CLK_ENABLE();
 80004c8:	4b61      	ldr	r3, [pc, #388]	; (8000650 <SAI_MspInit+0x190>)
 80004ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80004ce:	4a60      	ldr	r2, [pc, #384]	; (8000650 <SAI_MspInit+0x190>)
 80004d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004d4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80004d8:	4b5d      	ldr	r3, [pc, #372]	; (8000650 <SAI_MspInit+0x190>)
 80004da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80004de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80004e2:	643b      	str	r3, [r7, #64]	; 0x40
 80004e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable GPIO clock */
  AUDIO_OUT_SAIx_MCLK_ENABLE();
 80004e6:	4b5a      	ldr	r3, [pc, #360]	; (8000650 <SAI_MspInit+0x190>)
 80004e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004ec:	4a58      	ldr	r2, [pc, #352]	; (8000650 <SAI_MspInit+0x190>)
 80004ee:	f043 0320 	orr.w	r3, r3, #32
 80004f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80004f6:	4b56      	ldr	r3, [pc, #344]	; (8000650 <SAI_MspInit+0x190>)
 80004f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004fc:	f003 0320 	and.w	r3, r3, #32
 8000500:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000502:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  AUDIO_OUT_SAIx_SCK_ENABLE();
 8000504:	4b52      	ldr	r3, [pc, #328]	; (8000650 <SAI_MspInit+0x190>)
 8000506:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800050a:	4a51      	ldr	r2, [pc, #324]	; (8000650 <SAI_MspInit+0x190>)
 800050c:	f043 0320 	orr.w	r3, r3, #32
 8000510:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000514:	4b4e      	ldr	r3, [pc, #312]	; (8000650 <SAI_MspInit+0x190>)
 8000516:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800051a:	f003 0320 	and.w	r3, r3, #32
 800051e:	63bb      	str	r3, [r7, #56]	; 0x38
 8000520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  AUDIO_OUT_SAIx_SD_ENABLE();
 8000522:	4b4b      	ldr	r3, [pc, #300]	; (8000650 <SAI_MspInit+0x190>)
 8000524:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000528:	4a49      	ldr	r2, [pc, #292]	; (8000650 <SAI_MspInit+0x190>)
 800052a:	f043 0320 	orr.w	r3, r3, #32
 800052e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000532:	4b47      	ldr	r3, [pc, #284]	; (8000650 <SAI_MspInit+0x190>)
 8000534:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000538:	f003 0320 	and.w	r3, r3, #32
 800053c:	637b      	str	r3, [r7, #52]	; 0x34
 800053e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  AUDIO_OUT_SAIx_FS_ENABLE();
 8000540:	4b43      	ldr	r3, [pc, #268]	; (8000650 <SAI_MspInit+0x190>)
 8000542:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000546:	4a42      	ldr	r2, [pc, #264]	; (8000650 <SAI_MspInit+0x190>)
 8000548:	f043 0320 	orr.w	r3, r3, #32
 800054c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000550:	4b3f      	ldr	r3, [pc, #252]	; (8000650 <SAI_MspInit+0x190>)
 8000552:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000556:	f003 0320 	and.w	r3, r3, #32
 800055a:	633b      	str	r3, [r7, #48]	; 0x30
 800055c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
 800055e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000562:	647b      	str	r3, [r7, #68]	; 0x44
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8000564:	2302      	movs	r3, #2
 8000566:	64bb      	str	r3, [r7, #72]	; 0x48
  gpio_init_structure.Pull = GPIO_NOPULL;
 8000568:	2300      	movs	r3, #0
 800056a:	64fb      	str	r3, [r7, #76]	; 0x4c
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800056c:	2303      	movs	r3, #3
 800056e:	653b      	str	r3, [r7, #80]	; 0x50
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_AF;
 8000570:	2306      	movs	r3, #6
 8000572:	657b      	str	r3, [r7, #84]	; 0x54
  HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 8000574:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000578:	4619      	mov	r1, r3
 800057a:	4836      	ldr	r0, [pc, #216]	; (8000654 <SAI_MspInit+0x194>)
 800057c:	f004 fea8 	bl	80052d0 <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 8000580:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000584:	647b      	str	r3, [r7, #68]	; 0x44
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
 8000586:	2306      	movs	r3, #6
 8000588:	657b      	str	r3, [r7, #84]	; 0x54
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_GPIO_PORT, &gpio_init_structure);
 800058a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800058e:	4619      	mov	r1, r3
 8000590:	4830      	ldr	r0, [pc, #192]	; (8000654 <SAI_MspInit+0x194>)
 8000592:	f004 fe9d 	bl	80052d0 <HAL_GPIO_Init>

  gpio_init_structure.Pin =  AUDIO_OUT_SAIx_SD_PIN;
 8000596:	2340      	movs	r3, #64	; 0x40
 8000598:	647b      	str	r3, [r7, #68]	; 0x44
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SD_AF;
 800059a:	2306      	movs	r3, #6
 800059c:	657b      	str	r3, [r7, #84]	; 0x54
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 800059e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80005a2:	4619      	mov	r1, r3
 80005a4:	482b      	ldr	r0, [pc, #172]	; (8000654 <SAI_MspInit+0x194>)
 80005a6:	f004 fe93 	bl	80052d0 <HAL_GPIO_Init>

    if(hsai->Instance != AUDIO_IN_SAI_PDMx)
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4a2a      	ldr	r2, [pc, #168]	; (8000658 <SAI_MspInit+0x198>)
 80005b0:	4293      	cmp	r3, r2
 80005b2:	d01e      	beq.n	80005f2 <SAI_MspInit+0x132>
    {
      if(haudio_in_sai[0].State != HAL_SAI_STATE_READY)
 80005b4:	4b29      	ldr	r3, [pc, #164]	; (800065c <SAI_MspInit+0x19c>)
 80005b6:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	2b01      	cmp	r3, #1
 80005be:	d018      	beq.n	80005f2 <SAI_MspInit+0x132>
      {
        AUDIO_OUT_SAIx_MCLK_ENABLE();
 80005c0:	4b23      	ldr	r3, [pc, #140]	; (8000650 <SAI_MspInit+0x190>)
 80005c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005c6:	4a22      	ldr	r2, [pc, #136]	; (8000650 <SAI_MspInit+0x190>)
 80005c8:	f043 0320 	orr.w	r3, r3, #32
 80005cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005d0:	4b1f      	ldr	r3, [pc, #124]	; (8000650 <SAI_MspInit+0x190>)
 80005d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005d6:	f003 0320 	and.w	r3, r3, #32
 80005da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80005dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
        gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 80005de:	2380      	movs	r3, #128	; 0x80
 80005e0:	647b      	str	r3, [r7, #68]	; 0x44
        gpio_init_structure.Alternate = AUDIO_OUT_SAIx_MCLK_AF;
 80005e2:	2306      	movs	r3, #6
 80005e4:	657b      	str	r3, [r7, #84]	; 0x54
        HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 80005e6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80005ea:	4619      	mov	r1, r3
 80005ec:	4819      	ldr	r0, [pc, #100]	; (8000654 <SAI_MspInit+0x194>)
 80005ee:	f004 fe6f 	bl	80052d0 <HAL_GPIO_Init>
      }
    }

  if(hsai->Instance == AUDIO_OUT_SAIx)
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	4a1a      	ldr	r2, [pc, #104]	; (8000660 <SAI_MspInit+0x1a0>)
 80005f8:	4293      	cmp	r3, r2
 80005fa:	d16b      	bne.n	80006d4 <SAI_MspInit+0x214>
  {
  /* Enable the DMA clock */
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 80005fc:	4b14      	ldr	r3, [pc, #80]	; (8000650 <SAI_MspInit+0x190>)
 80005fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000602:	4a13      	ldr	r2, [pc, #76]	; (8000650 <SAI_MspInit+0x190>)
 8000604:	f043 0302 	orr.w	r3, r3, #2
 8000608:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800060c:	4b10      	ldr	r3, [pc, #64]	; (8000650 <SAI_MspInit+0x190>)
 800060e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000612:	f003 0302 	and.w	r3, r3, #2
 8000616:	62bb      	str	r3, [r7, #40]	; 0x28
 8000618:	6abb      	ldr	r3, [r7, #40]	; 0x28

    /* Configure the hdma_saiTx handle parameters */
    hdma_sai_tx.Init.Request             = AUDIO_OUT_SAIx_DMAx_REQUEST;
 800061a:	4b12      	ldr	r3, [pc, #72]	; (8000664 <SAI_MspInit+0x1a4>)
 800061c:	2258      	movs	r2, #88	; 0x58
 800061e:	605a      	str	r2, [r3, #4]
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8000620:	4b10      	ldr	r3, [pc, #64]	; (8000664 <SAI_MspInit+0x1a4>)
 8000622:	2240      	movs	r2, #64	; 0x40
 8000624:	609a      	str	r2, [r3, #8]
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8000626:	4b0f      	ldr	r3, [pc, #60]	; (8000664 <SAI_MspInit+0x1a4>)
 8000628:	2200      	movs	r2, #0
 800062a:	60da      	str	r2, [r3, #12]
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 800062c:	4b0d      	ldr	r3, [pc, #52]	; (8000664 <SAI_MspInit+0x1a4>)
 800062e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000632:	611a      	str	r2, [r3, #16]
    if (Audio_Out_Ctx[0].BitsPerSample == AUDIO_RESOLUTION_16B)
 8000634:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <SAI_MspInit+0x1a8>)
 8000636:	68db      	ldr	r3, [r3, #12]
 8000638:	2b10      	cmp	r3, #16
 800063a:	d117      	bne.n	800066c <SAI_MspInit+0x1ac>
    {
      hdma_sai_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800063c:	4b09      	ldr	r3, [pc, #36]	; (8000664 <SAI_MspInit+0x1a4>)
 800063e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000642:	615a      	str	r2, [r3, #20]
      hdma_sai_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_HALFWORD;
 8000644:	4b07      	ldr	r3, [pc, #28]	; (8000664 <SAI_MspInit+0x1a4>)
 8000646:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800064a:	619a      	str	r2, [r3, #24]
 800064c:	e016      	b.n	800067c <SAI_MspInit+0x1bc>
 800064e:	bf00      	nop
 8000650:	58024400 	.word	0x58024400
 8000654:	58021400 	.word	0x58021400
 8000658:	58005404 	.word	0x58005404
 800065c:	2400054c 	.word	0x2400054c
 8000660:	40015824 	.word	0x40015824
 8000664:	2400093c 	.word	0x2400093c
 8000668:	24000c8c 	.word	0x24000c8c
    }
    else /* AUDIO_RESOLUTION_32B */
    {
      hdma_sai_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800066c:	4b53      	ldr	r3, [pc, #332]	; (80007bc <SAI_MspInit+0x2fc>)
 800066e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000672:	615a      	str	r2, [r3, #20]
      hdma_sai_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8000674:	4b51      	ldr	r3, [pc, #324]	; (80007bc <SAI_MspInit+0x2fc>)
 8000676:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800067a:	619a      	str	r2, [r3, #24]
    }
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 800067c:	4b4f      	ldr	r3, [pc, #316]	; (80007bc <SAI_MspInit+0x2fc>)
 800067e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000682:	61da      	str	r2, [r3, #28]
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 8000684:	4b4d      	ldr	r3, [pc, #308]	; (80007bc <SAI_MspInit+0x2fc>)
 8000686:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800068a:	621a      	str	r2, [r3, #32]
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 800068c:	4b4b      	ldr	r3, [pc, #300]	; (80007bc <SAI_MspInit+0x2fc>)
 800068e:	2204      	movs	r2, #4
 8000690:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8000692:	4b4a      	ldr	r3, [pc, #296]	; (80007bc <SAI_MspInit+0x2fc>)
 8000694:	2203      	movs	r2, #3
 8000696:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8000698:	4b48      	ldr	r3, [pc, #288]	; (80007bc <SAI_MspInit+0x2fc>)
 800069a:	2200      	movs	r2, #0
 800069c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 800069e:	4b47      	ldr	r3, [pc, #284]	; (80007bc <SAI_MspInit+0x2fc>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	631a      	str	r2, [r3, #48]	; 0x30

    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 80006a4:	4b45      	ldr	r3, [pc, #276]	; (80007bc <SAI_MspInit+0x2fc>)
 80006a6:	4a46      	ldr	r2, [pc, #280]	; (80007c0 <SAI_MspInit+0x300>)
 80006a8:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	4a43      	ldr	r2, [pc, #268]	; (80007bc <SAI_MspInit+0x2fc>)
 80006ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80006b2:	4a42      	ldr	r2, [pc, #264]	; (80007bc <SAI_MspInit+0x2fc>)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	6393      	str	r3, [r2, #56]	; 0x38

    /* Deinitialize the Stream for new transfer */
    (void)HAL_DMA_DeInit(&hdma_sai_tx);
 80006b8:	4840      	ldr	r0, [pc, #256]	; (80007bc <SAI_MspInit+0x2fc>)
 80006ba:	f002 fd87 	bl	80031cc <HAL_DMA_DeInit>

    /* Configure the DMA Stream */
    (void)HAL_DMA_Init(&hdma_sai_tx);
 80006be:	483f      	ldr	r0, [pc, #252]	; (80007bc <SAI_MspInit+0x2fc>)
 80006c0:	f002 fa2a 	bl	8002b18 <HAL_DMA_Init>

    /* SAI DMA IRQ Channel configuration */
    HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, BSP_AUDIO_OUT_IT_PRIORITY, 0);
 80006c4:	2200      	movs	r2, #0
 80006c6:	210e      	movs	r1, #14
 80006c8:	2045      	movs	r0, #69	; 0x45
 80006ca:	f001 feb8 	bl	800243e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ);
 80006ce:	2045      	movs	r0, #69	; 0x45
 80006d0:	f001 fecf 	bl	8002472 <HAL_NVIC_EnableIRQ>
  }

  /* Audio In Msp initialization */
  if(hsai->Instance == AUDIO_IN_SAIx)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a3a      	ldr	r2, [pc, #232]	; (80007c4 <SAI_MspInit+0x304>)
 80006da:	4293      	cmp	r3, r2
 80006dc:	f040 809b 	bne.w	8000816 <SAI_MspInit+0x356>
  {
    /* Enable SAI clock */
    AUDIO_IN_SAIx_CLK_ENABLE();
 80006e0:	4b39      	ldr	r3, [pc, #228]	; (80007c8 <SAI_MspInit+0x308>)
 80006e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80006e6:	4a38      	ldr	r2, [pc, #224]	; (80007c8 <SAI_MspInit+0x308>)
 80006e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006ec:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80006f0:	4b35      	ldr	r3, [pc, #212]	; (80007c8 <SAI_MspInit+0x308>)
 80006f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80006f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006fa:	627b      	str	r3, [r7, #36]	; 0x24
 80006fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    /* Enable SD GPIO clock */
    AUDIO_IN_SAIx_SD_ENABLE();
 80006fe:	4b32      	ldr	r3, [pc, #200]	; (80007c8 <SAI_MspInit+0x308>)
 8000700:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000704:	4a30      	ldr	r2, [pc, #192]	; (80007c8 <SAI_MspInit+0x308>)
 8000706:	f043 0310 	orr.w	r3, r3, #16
 800070a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800070e:	4b2e      	ldr	r3, [pc, #184]	; (80007c8 <SAI_MspInit+0x308>)
 8000710:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000714:	f003 0310 	and.w	r3, r3, #16
 8000718:	623b      	str	r3, [r7, #32]
 800071a:	6a3b      	ldr	r3, [r7, #32]
    /* CODEC_SAI pin configuration: SD pin */
    gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 800071c:	2340      	movs	r3, #64	; 0x40
 800071e:	647b      	str	r3, [r7, #68]	; 0x44
    gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8000720:	2302      	movs	r3, #2
 8000722:	64bb      	str	r3, [r7, #72]	; 0x48
    gpio_init_structure.Pull = GPIO_NOPULL;
 8000724:	2300      	movs	r3, #0
 8000726:	64fb      	str	r3, [r7, #76]	; 0x4c
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000728:	2302      	movs	r3, #2
 800072a:	653b      	str	r3, [r7, #80]	; 0x50
    gpio_init_structure.Alternate = AUDIO_IN_SAIx_AF;
 800072c:	2306      	movs	r3, #6
 800072e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 8000730:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000734:	4619      	mov	r1, r3
 8000736:	4825      	ldr	r0, [pc, #148]	; (80007cc <SAI_MspInit+0x30c>)
 8000738:	f004 fdca 	bl	80052d0 <HAL_GPIO_Init>

    /* Enable the DMA clock */
    AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 800073c:	4b22      	ldr	r3, [pc, #136]	; (80007c8 <SAI_MspInit+0x308>)
 800073e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000742:	4a21      	ldr	r2, [pc, #132]	; (80007c8 <SAI_MspInit+0x308>)
 8000744:	f043 0302 	orr.w	r3, r3, #2
 8000748:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800074c:	4b1e      	ldr	r3, [pc, #120]	; (80007c8 <SAI_MspInit+0x308>)
 800074e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000752:	f003 0302 	and.w	r3, r3, #2
 8000756:	61fb      	str	r3, [r7, #28]
 8000758:	69fb      	ldr	r3, [r7, #28]

    /* Configure the hdma_sai_rx handle parameters */
    hdma_sai_rx.Instance                 = AUDIO_IN_SAIx_DMAx_STREAM;
 800075a:	4b1d      	ldr	r3, [pc, #116]	; (80007d0 <SAI_MspInit+0x310>)
 800075c:	4a1d      	ldr	r2, [pc, #116]	; (80007d4 <SAI_MspInit+0x314>)
 800075e:	601a      	str	r2, [r3, #0]
    hdma_sai_rx.Init.Request             = AUDIO_IN_SAIx_DMAx_REQUEST;
 8000760:	4b1b      	ldr	r3, [pc, #108]	; (80007d0 <SAI_MspInit+0x310>)
 8000762:	2257      	movs	r2, #87	; 0x57
 8000764:	605a      	str	r2, [r3, #4]
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 8000766:	4b1a      	ldr	r3, [pc, #104]	; (80007d0 <SAI_MspInit+0x310>)
 8000768:	f44f 7280 	mov.w	r2, #256	; 0x100
 800076c:	61da      	str	r2, [r3, #28]
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 800076e:	4b18      	ldr	r3, [pc, #96]	; (80007d0 <SAI_MspInit+0x310>)
 8000770:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000774:	621a      	str	r2, [r3, #32]
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8000776:	4b16      	ldr	r3, [pc, #88]	; (80007d0 <SAI_MspInit+0x310>)
 8000778:	2200      	movs	r2, #0
 800077a:	609a      	str	r2, [r3, #8]
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800077c:	4b14      	ldr	r3, [pc, #80]	; (80007d0 <SAI_MspInit+0x310>)
 800077e:	2200      	movs	r2, #0
 8000780:	60da      	str	r2, [r3, #12]
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8000782:	4b13      	ldr	r3, [pc, #76]	; (80007d0 <SAI_MspInit+0x310>)
 8000784:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000788:	611a      	str	r2, [r3, #16]
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 800078a:	4b11      	ldr	r3, [pc, #68]	; (80007d0 <SAI_MspInit+0x310>)
 800078c:	2200      	movs	r2, #0
 800078e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8000790:	4b0f      	ldr	r3, [pc, #60]	; (80007d0 <SAI_MspInit+0x310>)
 8000792:	2203      	movs	r2, #3
 8000794:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8000796:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <SAI_MspInit+0x310>)
 8000798:	2200      	movs	r2, #0
 800079a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 800079c:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <SAI_MspInit+0x310>)
 800079e:	2200      	movs	r2, #0
 80007a0:	631a      	str	r2, [r3, #48]	; 0x30

    if(Audio_In_Ctx[0].BitsPerSample == AUDIO_RESOLUTION_16B)
 80007a2:	4b0d      	ldr	r3, [pc, #52]	; (80007d8 <SAI_MspInit+0x318>)
 80007a4:	68db      	ldr	r3, [r3, #12]
 80007a6:	2b10      	cmp	r3, #16
 80007a8:	d118      	bne.n	80007dc <SAI_MspInit+0x31c>
    {
      hdma_sai_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80007aa:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <SAI_MspInit+0x310>)
 80007ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80007b0:	615a      	str	r2, [r3, #20]
      hdma_sai_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_HALFWORD;
 80007b2:	4b07      	ldr	r3, [pc, #28]	; (80007d0 <SAI_MspInit+0x310>)
 80007b4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007b8:	619a      	str	r2, [r3, #24]
 80007ba:	e017      	b.n	80007ec <SAI_MspInit+0x32c>
 80007bc:	2400093c 	.word	0x2400093c
 80007c0:	400204a0 	.word	0x400204a0
 80007c4:	40015804 	.word	0x40015804
 80007c8:	58024400 	.word	0x58024400
 80007cc:	58021000 	.word	0x58021000
 80007d0:	240009b4 	.word	0x240009b4
 80007d4:	40020470 	.word	0x40020470
 80007d8:	24000cb0 	.word	0x24000cb0
    }
    else
    {
      hdma_sai_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80007dc:	4b67      	ldr	r3, [pc, #412]	; (800097c <SAI_MspInit+0x4bc>)
 80007de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007e2:	615a      	str	r2, [r3, #20]
      hdma_sai_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80007e4:	4b65      	ldr	r3, [pc, #404]	; (800097c <SAI_MspInit+0x4bc>)
 80007e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007ea:	619a      	str	r2, [r3, #24]
    }

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	4a63      	ldr	r2, [pc, #396]	; (800097c <SAI_MspInit+0x4bc>)
 80007f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80007f4:	4a61      	ldr	r2, [pc, #388]	; (800097c <SAI_MspInit+0x4bc>)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	6393      	str	r3, [r2, #56]	; 0x38

    /* Deinitialize the Stream for new transfer */
    (void)HAL_DMA_DeInit(&hdma_sai_rx);
 80007fa:	4860      	ldr	r0, [pc, #384]	; (800097c <SAI_MspInit+0x4bc>)
 80007fc:	f002 fce6 	bl	80031cc <HAL_DMA_DeInit>

    /* Configure the DMA Stream */
    (void)HAL_DMA_Init(&hdma_sai_rx);
 8000800:	485e      	ldr	r0, [pc, #376]	; (800097c <SAI_MspInit+0x4bc>)
 8000802:	f002 f989 	bl	8002b18 <HAL_DMA_Init>

    /* SAI DMA IRQ Channel configuration */
    HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, BSP_AUDIO_IN_IT_PRIORITY, 0);
 8000806:	2200      	movs	r2, #0
 8000808:	210f      	movs	r1, #15
 800080a:	203c      	movs	r0, #60	; 0x3c
 800080c:	f001 fe17 	bl	800243e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 8000810:	203c      	movs	r0, #60	; 0x3c
 8000812:	f001 fe2e 	bl	8002472 <HAL_NVIC_EnableIRQ>
  }

  if(hsai->Instance == AUDIO_IN_SAI_PDMx)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4a59      	ldr	r2, [pc, #356]	; (8000980 <SAI_MspInit+0x4c0>)
 800081c:	4293      	cmp	r3, r2
 800081e:	f040 80a9 	bne.w	8000974 <SAI_MspInit+0x4b4>
  {
     /* Enable SAI clocks */
    AUDIO_IN_SAI_PDMx_CLK_ENABLE();
 8000822:	4b58      	ldr	r3, [pc, #352]	; (8000984 <SAI_MspInit+0x4c4>)
 8000824:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000828:	4a56      	ldr	r2, [pc, #344]	; (8000984 <SAI_MspInit+0x4c4>)
 800082a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800082e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000832:	4b54      	ldr	r3, [pc, #336]	; (8000984 <SAI_MspInit+0x4c4>)
 8000834:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000838:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800083c:	61bb      	str	r3, [r7, #24]
 800083e:	69bb      	ldr	r3, [r7, #24]
    AUDIO_IN_SAI_PDMx_CLK_IN_ENABLE();
 8000840:	4b50      	ldr	r3, [pc, #320]	; (8000984 <SAI_MspInit+0x4c4>)
 8000842:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000846:	4a4f      	ldr	r2, [pc, #316]	; (8000984 <SAI_MspInit+0x4c4>)
 8000848:	f043 0310 	orr.w	r3, r3, #16
 800084c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000850:	4b4c      	ldr	r3, [pc, #304]	; (8000984 <SAI_MspInit+0x4c4>)
 8000852:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000856:	f003 0310 	and.w	r3, r3, #16
 800085a:	617b      	str	r3, [r7, #20]
 800085c:	697b      	ldr	r3, [r7, #20]
    AUDIO_IN_SAI_PDMx_DATA_IN_ENABLE();
 800085e:	4b49      	ldr	r3, [pc, #292]	; (8000984 <SAI_MspInit+0x4c4>)
 8000860:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000864:	4a47      	ldr	r2, [pc, #284]	; (8000984 <SAI_MspInit+0x4c4>)
 8000866:	f043 0304 	orr.w	r3, r3, #4
 800086a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800086e:	4b45      	ldr	r3, [pc, #276]	; (8000984 <SAI_MspInit+0x4c4>)
 8000870:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000874:	f003 0304 	and.w	r3, r3, #4
 8000878:	613b      	str	r3, [r7, #16]
 800087a:	693b      	ldr	r3, [r7, #16]

    /* Configure GPIOs */
    gpio_init_structure.Pin = AUDIO_IN_SAI_PDMx_CLK_IN_PIN;
 800087c:	2304      	movs	r3, #4
 800087e:	647b      	str	r3, [r7, #68]	; 0x44
    gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8000880:	2302      	movs	r3, #2
 8000882:	64bb      	str	r3, [r7, #72]	; 0x48
    gpio_init_structure.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	64fb      	str	r3, [r7, #76]	; 0x4c
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000888:	2302      	movs	r3, #2
 800088a:	653b      	str	r3, [r7, #80]	; 0x50
    gpio_init_structure.Alternate = AUDIO_IN_SAI_PDMx_DATA_CLK_AF;
 800088c:	230a      	movs	r3, #10
 800088e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(AUDIO_IN_SAI_PDMx_CLK_IN_PORT, &gpio_init_structure);
 8000890:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000894:	4619      	mov	r1, r3
 8000896:	483c      	ldr	r0, [pc, #240]	; (8000988 <SAI_MspInit+0x4c8>)
 8000898:	f004 fd1a 	bl	80052d0 <HAL_GPIO_Init>

    gpio_init_structure.Pull = GPIO_PULLUP;
 800089c:	2301      	movs	r3, #1
 800089e:	64fb      	str	r3, [r7, #76]	; 0x4c
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80008a0:	2301      	movs	r3, #1
 80008a2:	653b      	str	r3, [r7, #80]	; 0x50
    gpio_init_structure.Pin = AUDIO_IN_SAI_PDMx_DATA_IN_PIN;
 80008a4:	2302      	movs	r3, #2
 80008a6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(AUDIO_IN_SAI_PDMx_DATA_IN_PORT, &gpio_init_structure);
 80008a8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80008ac:	4619      	mov	r1, r3
 80008ae:	4837      	ldr	r0, [pc, #220]	; (800098c <SAI_MspInit+0x4cc>)
 80008b0:	f004 fd0e 	bl	80052d0 <HAL_GPIO_Init>

    AUDIO_IN_SAI_PDMx_FS_SCK_ENABLE();
 80008b4:	4b33      	ldr	r3, [pc, #204]	; (8000984 <SAI_MspInit+0x4c4>)
 80008b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ba:	4a32      	ldr	r2, [pc, #200]	; (8000984 <SAI_MspInit+0x4c4>)
 80008bc:	f043 0310 	orr.w	r3, r3, #16
 80008c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008c4:	4b2f      	ldr	r3, [pc, #188]	; (8000984 <SAI_MspInit+0x4c4>)
 80008c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ca:	f003 0310 	and.w	r3, r3, #16
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	68fb      	ldr	r3, [r7, #12]

    /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
    gpio_init_structure.Pin = AUDIO_IN_SAI_PDMx_FS_PIN | AUDIO_IN_SAI_PDMx_SCK_PIN;
 80008d2:	2330      	movs	r3, #48	; 0x30
 80008d4:	647b      	str	r3, [r7, #68]	; 0x44
    gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80008d6:	2302      	movs	r3, #2
 80008d8:	64bb      	str	r3, [r7, #72]	; 0x48
    gpio_init_structure.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	64fb      	str	r3, [r7, #76]	; 0x4c
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80008de:	2302      	movs	r3, #2
 80008e0:	653b      	str	r3, [r7, #80]	; 0x50
    gpio_init_structure.Alternate = AUDIO_IN_SAI_PDMx_FS_SCK_AF;
 80008e2:	2308      	movs	r3, #8
 80008e4:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(AUDIO_IN_SAI_PDMx_FS_SCK_GPIO_PORT, &gpio_init_structure);
 80008e6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80008ea:	4619      	mov	r1, r3
 80008ec:	4826      	ldr	r0, [pc, #152]	; (8000988 <SAI_MspInit+0x4c8>)
 80008ee:	f004 fcef 	bl	80052d0 <HAL_GPIO_Init>


    /* Configure the hdma_sai_rx handle parameters */
    hdma_sai_rx.Init.Request             = AUDIO_IN_SAI_PDMx_DMAx_REQUEST;
 80008f2:	4b22      	ldr	r3, [pc, #136]	; (800097c <SAI_MspInit+0x4bc>)
 80008f4:	220f      	movs	r2, #15
 80008f6:	605a      	str	r2, [r3, #4]
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 80008f8:	4b20      	ldr	r3, [pc, #128]	; (800097c <SAI_MspInit+0x4bc>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	609a      	str	r2, [r3, #8]
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 80008fe:	4b1f      	ldr	r3, [pc, #124]	; (800097c <SAI_MspInit+0x4bc>)
 8000900:	2200      	movs	r2, #0
 8000902:	60da      	str	r2, [r3, #12]
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8000904:	4b1d      	ldr	r3, [pc, #116]	; (800097c <SAI_MspInit+0x4bc>)
 8000906:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800090a:	611a      	str	r2, [r3, #16]
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAI_PDMx_DMAx_PERIPH_DATA_SIZE;
 800090c:	4b1b      	ldr	r3, [pc, #108]	; (800097c <SAI_MspInit+0x4bc>)
 800090e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000912:	615a      	str	r2, [r3, #20]
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAI_PDMx_DMAx_MEM_DATA_SIZE;
 8000914:	4b19      	ldr	r3, [pc, #100]	; (800097c <SAI_MspInit+0x4bc>)
 8000916:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800091a:	619a      	str	r2, [r3, #24]
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 800091c:	4b17      	ldr	r3, [pc, #92]	; (800097c <SAI_MspInit+0x4bc>)
 800091e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000922:	61da      	str	r2, [r3, #28]
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8000924:	4b15      	ldr	r3, [pc, #84]	; (800097c <SAI_MspInit+0x4bc>)
 8000926:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800092a:	621a      	str	r2, [r3, #32]
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 800092c:	4b13      	ldr	r3, [pc, #76]	; (800097c <SAI_MspInit+0x4bc>)
 800092e:	2200      	movs	r2, #0
 8000930:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8000932:	4b12      	ldr	r3, [pc, #72]	; (800097c <SAI_MspInit+0x4bc>)
 8000934:	2203      	movs	r2, #3
 8000936:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8000938:	4b10      	ldr	r3, [pc, #64]	; (800097c <SAI_MspInit+0x4bc>)
 800093a:	2200      	movs	r2, #0
 800093c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 800093e:	4b0f      	ldr	r3, [pc, #60]	; (800097c <SAI_MspInit+0x4bc>)
 8000940:	2200      	movs	r2, #0
 8000942:	631a      	str	r2, [r3, #48]	; 0x30

    hdma_sai_rx.Instance = AUDIO_IN_SAI_PDMx_DMAx_STREAM;
 8000944:	4b0d      	ldr	r3, [pc, #52]	; (800097c <SAI_MspInit+0x4bc>)
 8000946:	4a12      	ldr	r2, [pc, #72]	; (8000990 <SAI_MspInit+0x4d0>)
 8000948:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	4a0b      	ldr	r2, [pc, #44]	; (800097c <SAI_MspInit+0x4bc>)
 800094e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8000952:	4a0a      	ldr	r2, [pc, #40]	; (800097c <SAI_MspInit+0x4bc>)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	6393      	str	r3, [r2, #56]	; 0x38

    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_rx);
 8000958:	4808      	ldr	r0, [pc, #32]	; (800097c <SAI_MspInit+0x4bc>)
 800095a:	f002 fc37 	bl	80031cc <HAL_DMA_DeInit>

    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_rx);
 800095e:	4807      	ldr	r0, [pc, #28]	; (800097c <SAI_MspInit+0x4bc>)
 8000960:	f002 f8da 	bl	8002b18 <HAL_DMA_Init>

    /* SAI DMA IRQ Channel configuration */
    HAL_NVIC_SetPriority(AUDIO_IN_SAI_PDMx_DMAx_IRQ, BSP_AUDIO_IN_IT_PRIORITY, 0);
 8000964:	2200      	movs	r2, #0
 8000966:	210f      	movs	r1, #15
 8000968:	2082      	movs	r0, #130	; 0x82
 800096a:	f001 fd68 	bl	800243e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AUDIO_IN_SAI_PDMx_DMAx_IRQ);
 800096e:	2082      	movs	r0, #130	; 0x82
 8000970:	f001 fd7f 	bl	8002472 <HAL_NVIC_EnableIRQ>
  }
}
 8000974:	bf00      	nop
 8000976:	3758      	adds	r7, #88	; 0x58
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	240009b4 	.word	0x240009b4
 8000980:	58005404 	.word	0x58005404
 8000984:	58024400 	.word	0x58024400
 8000988:	58021000 	.word	0x58021000
 800098c:	58020800 	.word	0x58020800
 8000990:	5802541c 	.word	0x5802541c

08000994 <SAI_MspDeInit>:
  * @brief  Deinitializes SAI MSP.
  * @param  hsai  SAI handle
  * @retval HAL status
  */
static void SAI_MspDeInit(SAI_HandleTypeDef *hsai)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  if(hsai->Instance == AUDIO_OUT_SAIx)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a1d      	ldr	r2, [pc, #116]	; (8000a18 <SAI_MspDeInit+0x84>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d11a      	bne.n	80009dc <SAI_MspDeInit+0x48>
  {
    /* SAI DMA IRQ Channel deactivation */
    HAL_NVIC_DisableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ);
 80009a6:	2045      	movs	r0, #69	; 0x45
 80009a8:	f001 fd71 	bl	800248e <HAL_NVIC_DisableIRQ>

    /* Deinitialize the DMA stream */
    (void)HAL_DMA_DeInit(hsai->hdmatx);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80009b2:	4618      	mov	r0, r3
 80009b4:	f002 fc0a 	bl	80031cc <HAL_DMA_DeInit>

    /* De-initialize FS, SCK, MCK and SD pins */
    HAL_GPIO_DeInit(AUDIO_OUT_SAIx_FS_GPIO_PORT, AUDIO_OUT_SAIx_FS_PIN);
 80009b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009bc:	4817      	ldr	r0, [pc, #92]	; (8000a1c <SAI_MspDeInit+0x88>)
 80009be:	f004 fe2f 	bl	8005620 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(AUDIO_OUT_SAIx_SCK_GPIO_PORT, AUDIO_OUT_SAIx_SCK_PIN);
 80009c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009c6:	4815      	ldr	r0, [pc, #84]	; (8000a1c <SAI_MspDeInit+0x88>)
 80009c8:	f004 fe2a 	bl	8005620 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(AUDIO_OUT_SAIx_SD_GPIO_PORT, AUDIO_OUT_SAIx_SD_PIN);
 80009cc:	2140      	movs	r1, #64	; 0x40
 80009ce:	4813      	ldr	r0, [pc, #76]	; (8000a1c <SAI_MspDeInit+0x88>)
 80009d0:	f004 fe26 	bl	8005620 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, AUDIO_OUT_SAIx_MCLK_PIN);
 80009d4:	2180      	movs	r1, #128	; 0x80
 80009d6:	4811      	ldr	r0, [pc, #68]	; (8000a1c <SAI_MspDeInit+0x88>)
 80009d8:	f004 fe22 	bl	8005620 <HAL_GPIO_DeInit>
  }
  if(hsai->Instance == AUDIO_IN_SAIx)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a0f      	ldr	r2, [pc, #60]	; (8000a20 <SAI_MspDeInit+0x8c>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d114      	bne.n	8000a10 <SAI_MspDeInit+0x7c>
  {
    /* SAI DMA IRQ Channel deactivation */
    HAL_NVIC_DisableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 80009e6:	203c      	movs	r0, #60	; 0x3c
 80009e8:	f001 fd51 	bl	800248e <HAL_NVIC_DisableIRQ>

    /* Deinitialize the DMA stream */
    (void)HAL_DMA_DeInit(hsai->hdmarx);
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80009f2:	4618      	mov	r0, r3
 80009f4:	f002 fbea 	bl	80031cc <HAL_DMA_DeInit>

    /* De-initialize SD pin */
    HAL_GPIO_DeInit(AUDIO_IN_SAIx_SD_GPIO_PORT, AUDIO_IN_SAIx_SD_PIN);
 80009f8:	2140      	movs	r1, #64	; 0x40
 80009fa:	480a      	ldr	r0, [pc, #40]	; (8000a24 <SAI_MspDeInit+0x90>)
 80009fc:	f004 fe10 	bl	8005620 <HAL_GPIO_DeInit>

    /* Disable SAI clock */
    AUDIO_IN_SAIx_CLK_DISABLE();
 8000a00:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <SAI_MspDeInit+0x94>)
 8000a02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000a06:	4a08      	ldr	r2, [pc, #32]	; (8000a28 <SAI_MspDeInit+0x94>)
 8000a08:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000a0c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
  }
}
 8000a10:	bf00      	nop
 8000a12:	3708      	adds	r7, #8
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	40015824 	.word	0x40015824
 8000a1c:	58021400 	.word	0x58021400
 8000a20:	40015804 	.word	0x40015804
 8000a24:	58021000 	.word	0x58021000
 8000a28:	58024400 	.word	0x58024400

08000a2c <SAI_ErrorCallback>:
  * @brief  SAI error callbacks.
  * @param  hsai SAI handle
  * @retval None
  */
static void SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  if(hsai->Instance == AUDIO_OUT_SAIx)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a06      	ldr	r2, [pc, #24]	; (8000a54 <SAI_ErrorCallback+0x28>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d103      	bne.n	8000a46 <SAI_ErrorCallback+0x1a>
  {
    BSP_AUDIO_OUT_Error_CallBack(0);
 8000a3e:	2000      	movs	r0, #0
 8000a40:	f7ff fd33 	bl	80004aa <BSP_AUDIO_OUT_Error_CallBack>
  }
  else
  {
    BSP_AUDIO_IN_Error_CallBack(0);
  }
}
 8000a44:	e002      	b.n	8000a4c <SAI_ErrorCallback+0x20>
    BSP_AUDIO_IN_Error_CallBack(0);
 8000a46:	2000      	movs	r0, #0
 8000a48:	f001 f8c2 	bl	8001bd0 <BSP_AUDIO_IN_Error_CallBack>
}
 8000a4c:	bf00      	nop
 8000a4e:	3708      	adds	r7, #8
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	40015824 	.word	0x40015824

08000a58 <BSP_AUDIO_IN_Init>:
  * @param  Instance  Audio IN instance: 0 for SAI, 1 for SAI PDM and 2 for DFSDM
  * @param  AudioInit Init structure
  * @retval BSP status
  */
int32_t BSP_AUDIO_IN_Init(uint32_t Instance, BSP_AUDIO_Init_t* AudioInit)
{
 8000a58:	b590      	push	{r4, r7, lr}
 8000a5a:	b0a9      	sub	sp, #164	; 0xa4
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
 8000a60:	6039      	str	r1, [r7, #0]
  uint32_t i;
  int32_t ret = BSP_ERROR_NONE;
 8000a62:	2300      	movs	r3, #0
 8000a64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if(Instance >= PDMS_NBR)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	2b02      	cmp	r3, #2
 8000a6c:	d905      	bls.n	8000a7a <BSP_AUDIO_IN_Init+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000a6e:	f06f 0301 	mvn.w	r3, #1
 8000a72:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000a76:	f000 bca7 	b.w	80013c8 <BSP_AUDIO_IN_Init+0x970>
  }
  else
  {
    /* Store the audio record context */
    Audio_In_Ctx[Instance].Device          = AudioInit->Device;
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	6819      	ldr	r1, [r3, #0]
 8000a7e:	48b6      	ldr	r0, [pc, #728]	; (8000d58 <BSP_AUDIO_IN_Init+0x300>)
 8000a80:	687a      	ldr	r2, [r7, #4]
 8000a82:	4613      	mov	r3, r2
 8000a84:	005b      	lsls	r3, r3, #1
 8000a86:	4413      	add	r3, r2
 8000a88:	011b      	lsls	r3, r3, #4
 8000a8a:	4403      	add	r3, r0
 8000a8c:	3304      	adds	r3, #4
 8000a8e:	6019      	str	r1, [r3, #0]
    Audio_In_Ctx[Instance].ChannelsNbr     = AudioInit->ChannelsNbr;
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	68d9      	ldr	r1, [r3, #12]
 8000a94:	48b0      	ldr	r0, [pc, #704]	; (8000d58 <BSP_AUDIO_IN_Init+0x300>)
 8000a96:	687a      	ldr	r2, [r7, #4]
 8000a98:	4613      	mov	r3, r2
 8000a9a:	005b      	lsls	r3, r3, #1
 8000a9c:	4413      	add	r3, r2
 8000a9e:	011b      	lsls	r3, r3, #4
 8000aa0:	4403      	add	r3, r0
 8000aa2:	3310      	adds	r3, #16
 8000aa4:	6019      	str	r1, [r3, #0]
    Audio_In_Ctx[Instance].SampleRate      = AudioInit->SampleRate;
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	6859      	ldr	r1, [r3, #4]
 8000aaa:	48ab      	ldr	r0, [pc, #684]	; (8000d58 <BSP_AUDIO_IN_Init+0x300>)
 8000aac:	687a      	ldr	r2, [r7, #4]
 8000aae:	4613      	mov	r3, r2
 8000ab0:	005b      	lsls	r3, r3, #1
 8000ab2:	4413      	add	r3, r2
 8000ab4:	011b      	lsls	r3, r3, #4
 8000ab6:	4403      	add	r3, r0
 8000ab8:	3308      	adds	r3, #8
 8000aba:	6019      	str	r1, [r3, #0]
    Audio_In_Ctx[Instance].BitsPerSample   = AudioInit->BitsPerSample;
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	6899      	ldr	r1, [r3, #8]
 8000ac0:	48a5      	ldr	r0, [pc, #660]	; (8000d58 <BSP_AUDIO_IN_Init+0x300>)
 8000ac2:	687a      	ldr	r2, [r7, #4]
 8000ac4:	4613      	mov	r3, r2
 8000ac6:	005b      	lsls	r3, r3, #1
 8000ac8:	4413      	add	r3, r2
 8000aca:	011b      	lsls	r3, r3, #4
 8000acc:	4403      	add	r3, r0
 8000ace:	330c      	adds	r3, #12
 8000ad0:	6019      	str	r1, [r3, #0]
    Audio_In_Ctx[Instance].Volume          = AudioInit->Volume;
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	6919      	ldr	r1, [r3, #16]
 8000ad6:	48a0      	ldr	r0, [pc, #640]	; (8000d58 <BSP_AUDIO_IN_Init+0x300>)
 8000ad8:	687a      	ldr	r2, [r7, #4]
 8000ada:	4613      	mov	r3, r2
 8000adc:	005b      	lsls	r3, r3, #1
 8000ade:	4413      	add	r3, r2
 8000ae0:	011b      	lsls	r3, r3, #4
 8000ae2:	4403      	add	r3, r0
 8000ae4:	3320      	adds	r3, #32
 8000ae6:	6019      	str	r1, [r3, #0]
    Audio_In_Ctx[Instance].State           = AUDIO_IN_STATE_RESET;
 8000ae8:	499b      	ldr	r1, [pc, #620]	; (8000d58 <BSP_AUDIO_IN_Init+0x300>)
 8000aea:	687a      	ldr	r2, [r7, #4]
 8000aec:	4613      	mov	r3, r2
 8000aee:	005b      	lsls	r3, r3, #1
 8000af0:	4413      	add	r3, r2
 8000af2:	011b      	lsls	r3, r3, #4
 8000af4:	440b      	add	r3, r1
 8000af6:	3324      	adds	r3, #36	; 0x24
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]

    if(Instance == 0U)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	f040 8115 	bne.w	8000d2e <BSP_AUDIO_IN_Init+0x2d6>
    {
      /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */
      if(MX_SAI1_ClockConfig(&haudio_in_sai[Instance], AudioInit->SampleRate) != HAL_OK)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	22b4      	movs	r2, #180	; 0xb4
 8000b08:	fb02 f303 	mul.w	r3, r2, r3
 8000b0c:	4a93      	ldr	r2, [pc, #588]	; (8000d5c <BSP_AUDIO_IN_Init+0x304>)
 8000b0e:	441a      	add	r2, r3
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	4619      	mov	r1, r3
 8000b16:	4610      	mov	r0, r2
 8000b18:	f7ff fc8a 	bl	8000430 <MX_SAI1_ClockConfig>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d005      	beq.n	8000b2e <BSP_AUDIO_IN_Init+0xd6>
      {
        ret = BSP_ERROR_CLOCK_FAILURE;
 8000b22:	f06f 0308 	mvn.w	r3, #8
 8000b26:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000b2a:	f000 bc43 	b.w	80013b4 <BSP_AUDIO_IN_Init+0x95c>
      }
      else
      {
        haudio_in_sai[Instance].Instance    = AUDIO_IN_SAIx;
 8000b2e:	4a8b      	ldr	r2, [pc, #556]	; (8000d5c <BSP_AUDIO_IN_Init+0x304>)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	21b4      	movs	r1, #180	; 0xb4
 8000b34:	fb01 f303 	mul.w	r3, r1, r3
 8000b38:	4413      	add	r3, r2
 8000b3a:	4a89      	ldr	r2, [pc, #548]	; (8000d60 <BSP_AUDIO_IN_Init+0x308>)
 8000b3c:	601a      	str	r2, [r3, #0]
        haudio_out_sai.Instance   = AUDIO_OUT_SAIx;
 8000b3e:	4b89      	ldr	r3, [pc, #548]	; (8000d64 <BSP_AUDIO_IN_Init+0x30c>)
 8000b40:	4a89      	ldr	r2, [pc, #548]	; (8000d68 <BSP_AUDIO_IN_Init+0x310>)
 8000b42:	601a      	str	r2, [r3, #0]
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        /* Register the default SAI MSP callbacks */
        if(Audio_In_Ctx[Instance].IsMspCallbacksValid == 0U)
 8000b44:	4984      	ldr	r1, [pc, #528]	; (8000d58 <BSP_AUDIO_IN_Init+0x300>)
 8000b46:	687a      	ldr	r2, [r7, #4]
 8000b48:	4613      	mov	r3, r2
 8000b4a:	005b      	lsls	r3, r3, #1
 8000b4c:	4413      	add	r3, r2
 8000b4e:	011b      	lsls	r3, r3, #4
 8000b50:	440b      	add	r3, r1
 8000b52:	332c      	adds	r3, #44	; 0x2c
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d109      	bne.n	8000b6e <BSP_AUDIO_IN_Init+0x116>
        {
          if(BSP_AUDIO_IN_RegisterDefaultMspCallbacks(Instance) != BSP_ERROR_NONE)
 8000b5a:	6878      	ldr	r0, [r7, #4]
 8000b5c:	f000 fe3a 	bl	80017d4 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d003      	beq.n	8000b6e <BSP_AUDIO_IN_Init+0x116>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
 8000b66:	f06f 0303 	mvn.w	r3, #3
 8000b6a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
          }
        }
#else
        SAI_MspInit(&haudio_in_sai[Instance]);
#endif /* (USE_HAL_SAI_REGISTER_CALLBACKS == 1) */
        if (ret == BSP_ERROR_NONE)
 8000b6e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	f040 841e 	bne.w	80013b4 <BSP_AUDIO_IN_Init+0x95c>
        {
          MX_SAI_Config mx_config;

          /* Prepare haudio_in_sai handle */
          mx_config.AudioFrequency        = Audio_In_Ctx[Instance].SampleRate;
 8000b78:	4977      	ldr	r1, [pc, #476]	; (8000d58 <BSP_AUDIO_IN_Init+0x300>)
 8000b7a:	687a      	ldr	r2, [r7, #4]
 8000b7c:	4613      	mov	r3, r2
 8000b7e:	005b      	lsls	r3, r3, #1
 8000b80:	4413      	add	r3, r2
 8000b82:	011b      	lsls	r3, r3, #4
 8000b84:	440b      	add	r3, r1
 8000b86:	3308      	adds	r3, #8
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	60bb      	str	r3, [r7, #8]
          mx_config.AudioMode             = SAI_MODESLAVE_RX;
 8000b8c:	2303      	movs	r3, #3
 8000b8e:	60fb      	str	r3, [r7, #12]
          mx_config.ClockStrobing         = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000b90:	2300      	movs	r3, #0
 8000b92:	61bb      	str	r3, [r7, #24]
          mx_config.MonoStereoMode        = (AudioInit->ChannelsNbr == 1U) ? SAI_MONOMODE : SAI_STEREOMODE;
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	68db      	ldr	r3, [r3, #12]
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	d102      	bne.n	8000ba2 <BSP_AUDIO_IN_Init+0x14a>
 8000b9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ba0:	e000      	b.n	8000ba4 <BSP_AUDIO_IN_Init+0x14c>
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	617b      	str	r3, [r7, #20]
          mx_config.DataSize              = SAI_DATASIZE_16;
 8000ba6:	2380      	movs	r3, #128	; 0x80
 8000ba8:	613b      	str	r3, [r7, #16]
          mx_config.FrameLength           = 128;
 8000baa:	2380      	movs	r3, #128	; 0x80
 8000bac:	62bb      	str	r3, [r7, #40]	; 0x28
          mx_config.ActiveFrameLength     = 64;
 8000bae:	2340      	movs	r3, #64	; 0x40
 8000bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
          mx_config.OutputDrive           = SAI_OUTPUTDRIVE_ENABLE;
 8000bb2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bb6:	623b      	str	r3, [r7, #32]
          mx_config.Synchro               = SAI_SYNCHRONOUS;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	61fb      	str	r3, [r7, #28]
          mx_config.SynchroExt            = SAI_SYNCEXT_DISABLE;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	627b      	str	r3, [r7, #36]	; 0x24
          mx_config.SlotActive            = SAI_SLOTACTIVE_0 | SAI_SLOTACTIVE_1;
 8000bc0:	2303      	movs	r3, #3
 8000bc2:	633b      	str	r3, [r7, #48]	; 0x30

          if(MX_SAI1_Block_A_Init(&haudio_in_sai[Instance], &mx_config) != HAL_OK)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	22b4      	movs	r2, #180	; 0xb4
 8000bc8:	fb02 f303 	mul.w	r3, r2, r3
 8000bcc:	4a63      	ldr	r2, [pc, #396]	; (8000d5c <BSP_AUDIO_IN_Init+0x304>)
 8000bce:	4413      	add	r3, r2
 8000bd0:	f107 0208 	add.w	r2, r7, #8
 8000bd4:	4611      	mov	r1, r2
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f000 fcee 	bl	80015b8 <MX_SAI1_Block_A_Init>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d004      	beq.n	8000bec <BSP_AUDIO_IN_Init+0x194>
          {
            /* Return BSP_ERROR_PERIPH_FAILURE when operations are not correctly done */
            ret = BSP_ERROR_PERIPH_FAILURE;
 8000be2:	f06f 0303 	mvn.w	r3, #3
 8000be6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000bea:	e010      	b.n	8000c0e <BSP_AUDIO_IN_Init+0x1b6>
          }
          else
          {
            /* Prepare haudio_out_sai handle */
            mx_config.AudioMode         = SAI_MODEMASTER_TX;
 8000bec:	2300      	movs	r3, #0
 8000bee:	60fb      	str	r3, [r7, #12]
            mx_config.Synchro           = SAI_ASYNCHRONOUS;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	61fb      	str	r3, [r7, #28]

            if(MX_SAI1_Block_B_Init(&haudio_out_sai, &mx_config) != HAL_OK)
 8000bf4:	f107 0308 	add.w	r3, r7, #8
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	485a      	ldr	r0, [pc, #360]	; (8000d64 <BSP_AUDIO_IN_Init+0x30c>)
 8000bfc:	f7ff fb88 	bl	8000310 <MX_SAI1_Block_B_Init>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d003      	beq.n	8000c0e <BSP_AUDIO_IN_Init+0x1b6>
            {
              /* Return BSP_ERROR_PERIPH_FAILURE when operations are not correctly done */
              ret = BSP_ERROR_PERIPH_FAILURE;
 8000c06:	f06f 0303 	mvn.w	r3, #3
 8000c0a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
            }
          }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
          if (ret == BSP_ERROR_NONE)
 8000c0e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d137      	bne.n	8000c86 <BSP_AUDIO_IN_Init+0x22e>
          {
            /* Register SAI TC, HT and Error callbacks */
            if(HAL_SAI_RegisterCallback(&haudio_in_sai[Instance], HAL_SAI_RX_COMPLETE_CB_ID, SAI_RxCpltCallback) != HAL_OK)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	22b4      	movs	r2, #180	; 0xb4
 8000c1a:	fb02 f303 	mul.w	r3, r2, r3
 8000c1e:	4a4f      	ldr	r2, [pc, #316]	; (8000d5c <BSP_AUDIO_IN_Init+0x304>)
 8000c20:	4413      	add	r3, r2
 8000c22:	4a52      	ldr	r2, [pc, #328]	; (8000d6c <BSP_AUDIO_IN_Init+0x314>)
 8000c24:	2100      	movs	r1, #0
 8000c26:	4618      	mov	r0, r3
 8000c28:	f008 f97e 	bl	8008f28 <HAL_SAI_RegisterCallback>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d004      	beq.n	8000c3c <BSP_AUDIO_IN_Init+0x1e4>
            {
              ret = BSP_ERROR_PERIPH_FAILURE;
 8000c32:	f06f 0303 	mvn.w	r3, #3
 8000c36:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000c3a:	e024      	b.n	8000c86 <BSP_AUDIO_IN_Init+0x22e>
            }
            else if(HAL_SAI_RegisterCallback(&haudio_in_sai[Instance], HAL_SAI_RX_HALFCOMPLETE_CB_ID, SAI_RxHalfCpltCallback) != HAL_OK)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	22b4      	movs	r2, #180	; 0xb4
 8000c40:	fb02 f303 	mul.w	r3, r2, r3
 8000c44:	4a45      	ldr	r2, [pc, #276]	; (8000d5c <BSP_AUDIO_IN_Init+0x304>)
 8000c46:	4413      	add	r3, r2
 8000c48:	4a49      	ldr	r2, [pc, #292]	; (8000d70 <BSP_AUDIO_IN_Init+0x318>)
 8000c4a:	2101      	movs	r1, #1
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f008 f96b 	bl	8008f28 <HAL_SAI_RegisterCallback>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d004      	beq.n	8000c62 <BSP_AUDIO_IN_Init+0x20a>
            {
              ret = BSP_ERROR_PERIPH_FAILURE;
 8000c58:	f06f 0303 	mvn.w	r3, #3
 8000c5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000c60:	e011      	b.n	8000c86 <BSP_AUDIO_IN_Init+0x22e>
            }
            else
            {
              if(HAL_SAI_RegisterCallback(&haudio_in_sai[Instance], HAL_SAI_ERROR_CB_ID, SAI_ErrorCallback) != HAL_OK)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	22b4      	movs	r2, #180	; 0xb4
 8000c66:	fb02 f303 	mul.w	r3, r2, r3
 8000c6a:	4a3c      	ldr	r2, [pc, #240]	; (8000d5c <BSP_AUDIO_IN_Init+0x304>)
 8000c6c:	4413      	add	r3, r2
 8000c6e:	4a41      	ldr	r2, [pc, #260]	; (8000d74 <BSP_AUDIO_IN_Init+0x31c>)
 8000c70:	2104      	movs	r1, #4
 8000c72:	4618      	mov	r0, r3
 8000c74:	f008 f958 	bl	8008f28 <HAL_SAI_RegisterCallback>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d003      	beq.n	8000c86 <BSP_AUDIO_IN_Init+0x22e>
              {
                ret = BSP_ERROR_PERIPH_FAILURE;
 8000c7e:	f06f 0303 	mvn.w	r3, #3
 8000c82:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
              }
            }
          }
#endif /* (USE_HAL_SAI_REGISTER_CALLBACKS == 1) */
#if (USE_AUDIO_CODEC_WM8994 == 1)
          if (ret == BSP_ERROR_NONE)
 8000c86:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	f040 8392 	bne.w	80013b4 <BSP_AUDIO_IN_Init+0x95c>
          {
            WM8994_Init_t codec_init;

            /* Fill codec_init structure */
            codec_init.OutputDevice = (Audio_Out_Ctx[0].State == AUDIO_OUT_STATE_RESET) ? WM8994_OUT_NONE : WM8994_OUT_HEADPHONE;
 8000c90:	4b39      	ldr	r3, [pc, #228]	; (8000d78 <BSP_AUDIO_IN_Init+0x320>)
 8000c92:	69db      	ldr	r3, [r3, #28]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d101      	bne.n	8000c9c <BSP_AUDIO_IN_Init+0x244>
 8000c98:	2300      	movs	r3, #0
 8000c9a:	e000      	b.n	8000c9e <BSP_AUDIO_IN_Init+0x246>
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            codec_init.Frequency    = AudioInit->SampleRate;
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
            codec_init.Resolution   = (AudioInit->BitsPerSample == AUDIO_RESOLUTION_32B) ? WM8994_RESOLUTION_32b : WM8994_RESOLUTION_16b;
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	689b      	ldr	r3, [r3, #8]
 8000cae:	2b20      	cmp	r3, #32
 8000cb0:	d101      	bne.n	8000cb6 <BSP_AUDIO_IN_Init+0x25e>
 8000cb2:	2303      	movs	r3, #3
 8000cb4:	e000      	b.n	8000cb8 <BSP_AUDIO_IN_Init+0x260>
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
            codec_init.InputDevice  = (AudioInit->Device == AUDIO_IN_DEVICE_ANALOG_MIC) ? WM8994_IN_LINE1 : WM8994_IN_MIC2;
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d101      	bne.n	8000cc8 <BSP_AUDIO_IN_Init+0x270>
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	e000      	b.n	8000cca <BSP_AUDIO_IN_Init+0x272>
 8000cc8:	2302      	movs	r3, #2
 8000cca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

            /* Convert volume before sending to the codec */
            codec_init.Volume       = VOLUME_IN_CONVERT(AudioInit->Volume);
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	691b      	ldr	r3, [r3, #16]
 8000cd2:	2b63      	cmp	r3, #99	; 0x63
 8000cd4:	d80c      	bhi.n	8000cf0 <BSP_AUDIO_IN_Init+0x298>
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	691a      	ldr	r2, [r3, #16]
 8000cda:	4613      	mov	r3, r2
 8000cdc:	011b      	lsls	r3, r3, #4
 8000cde:	1a9b      	subs	r3, r3, r2
 8000ce0:	011b      	lsls	r3, r3, #4
 8000ce2:	1a9b      	subs	r3, r3, r2
 8000ce4:	4a25      	ldr	r2, [pc, #148]	; (8000d7c <BSP_AUDIO_IN_Init+0x324>)
 8000ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8000cea:	095b      	lsrs	r3, r3, #5
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	e000      	b.n	8000cf2 <BSP_AUDIO_IN_Init+0x29a>
 8000cf0:	23ef      	movs	r3, #239	; 0xef
 8000cf2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
            /* Initialize the codec internal registers */
            if(Audio_Drv->Init(Audio_CompObj, &codec_init) < 0)
 8000cf6:	4b22      	ldr	r3, [pc, #136]	; (8000d80 <BSP_AUDIO_IN_Init+0x328>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a21      	ldr	r2, [pc, #132]	; (8000d84 <BSP_AUDIO_IN_Init+0x32c>)
 8000cfe:	6812      	ldr	r2, [r2, #0]
 8000d00:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8000d04:	4610      	mov	r0, r2
 8000d06:	4798      	blx	r3
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	da04      	bge.n	8000d18 <BSP_AUDIO_IN_Init+0x2c0>
            {
              ret = BSP_ERROR_COMPONENT_FAILURE;
 8000d0e:	f06f 0304 	mvn.w	r3, #4
 8000d12:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000d16:	e34d      	b.n	80013b4 <BSP_AUDIO_IN_Init+0x95c>
            }
            else
            {
              /* Update audio in context state */
              Audio_In_Ctx[Instance].State = AUDIO_IN_STATE_STOP;
 8000d18:	490f      	ldr	r1, [pc, #60]	; (8000d58 <BSP_AUDIO_IN_Init+0x300>)
 8000d1a:	687a      	ldr	r2, [r7, #4]
 8000d1c:	4613      	mov	r3, r2
 8000d1e:	005b      	lsls	r3, r3, #1
 8000d20:	4413      	add	r3, r2
 8000d22:	011b      	lsls	r3, r3, #4
 8000d24:	440b      	add	r3, r1
 8000d26:	3324      	adds	r3, #36	; 0x24
 8000d28:	2202      	movs	r2, #2
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	e342      	b.n	80013b4 <BSP_AUDIO_IN_Init+0x95c>
          }
#endif  /*USE_AUDIO_CODEC_WM8994 == 1)*/
        }
      }
    }
    else if(Instance == 1)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	f040 80da 	bne.w	8000eea <BSP_AUDIO_IN_Init+0x492>
    {
      if(Audio_In_Ctx[Instance].Device != AUDIO_IN_DEVICE_DIGITAL_MIC1)
 8000d36:	4908      	ldr	r1, [pc, #32]	; (8000d58 <BSP_AUDIO_IN_Init+0x300>)
 8000d38:	687a      	ldr	r2, [r7, #4]
 8000d3a:	4613      	mov	r3, r2
 8000d3c:	005b      	lsls	r3, r3, #1
 8000d3e:	4413      	add	r3, r2
 8000d40:	011b      	lsls	r3, r3, #4
 8000d42:	440b      	add	r3, r1
 8000d44:	3304      	adds	r3, #4
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2b10      	cmp	r3, #16
 8000d4a:	d01d      	beq.n	8000d88 <BSP_AUDIO_IN_Init+0x330>
      {
        ret = BSP_ERROR_WRONG_PARAM;
 8000d4c:	f06f 0301 	mvn.w	r3, #1
 8000d50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000d54:	e32e      	b.n	80013b4 <BSP_AUDIO_IN_Init+0x95c>
 8000d56:	bf00      	nop
 8000d58:	24000cb0 	.word	0x24000cb0
 8000d5c:	2400054c 	.word	0x2400054c
 8000d60:	40015804 	.word	0x40015804
 8000d64:	24000498 	.word	0x24000498
 8000d68:	40015824 	.word	0x40015824
 8000d6c:	08001bfb 	.word	0x08001bfb
 8000d70:	08001be5 	.word	0x08001be5
 8000d74:	08000a2d 	.word	0x08000a2d
 8000d78:	24000c8c 	.word	0x24000c8c
 8000d7c:	51eb851f 	.word	0x51eb851f
 8000d80:	240006b4 	.word	0x240006b4
 8000d84:	24000494 	.word	0x24000494
      }
      else
      {
      /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */
      if(MX_SAI4_ClockConfig(&haudio_in_sai[Instance], AudioInit->SampleRate) != HAL_OK)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	22b4      	movs	r2, #180	; 0xb4
 8000d8c:	fb02 f303 	mul.w	r3, r2, r3
 8000d90:	4a75      	ldr	r2, [pc, #468]	; (8000f68 <BSP_AUDIO_IN_Init+0x510>)
 8000d92:	441a      	add	r2, r3
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4610      	mov	r0, r2
 8000d9c:	f000 fb48 	bl	8001430 <MX_SAI4_ClockConfig>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d002      	beq.n	8000dac <BSP_AUDIO_IN_Init+0x354>
      {
        return BSP_ERROR_CLOCK_FAILURE;
 8000da6:	f06f 0308 	mvn.w	r3, #8
 8000daa:	e30f      	b.n	80013cc <BSP_AUDIO_IN_Init+0x974>
      }
      haudio_in_sai[Instance].Instance = AUDIO_IN_SAI_PDMx;
 8000dac:	4a6e      	ldr	r2, [pc, #440]	; (8000f68 <BSP_AUDIO_IN_Init+0x510>)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	21b4      	movs	r1, #180	; 0xb4
 8000db2:	fb01 f303 	mul.w	r3, r1, r3
 8000db6:	4413      	add	r3, r2
 8000db8:	4a6c      	ldr	r2, [pc, #432]	; (8000f6c <BSP_AUDIO_IN_Init+0x514>)
 8000dba:	601a      	str	r2, [r3, #0]
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1U)
      /* Register the default SAI MSP callbacks */
      if(Audio_In_Ctx[Instance].IsMspCallbacksValid == 0U)
 8000dbc:	496c      	ldr	r1, [pc, #432]	; (8000f70 <BSP_AUDIO_IN_Init+0x518>)
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	4613      	mov	r3, r2
 8000dc2:	005b      	lsls	r3, r3, #1
 8000dc4:	4413      	add	r3, r2
 8000dc6:	011b      	lsls	r3, r3, #4
 8000dc8:	440b      	add	r3, r1
 8000dca:	332c      	adds	r3, #44	; 0x2c
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d108      	bne.n	8000de4 <BSP_AUDIO_IN_Init+0x38c>
      {
        if(BSP_AUDIO_IN_RegisterDefaultMspCallbacks(Instance) != BSP_ERROR_NONE)
 8000dd2:	6878      	ldr	r0, [r7, #4]
 8000dd4:	f000 fcfe 	bl	80017d4 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d002      	beq.n	8000de4 <BSP_AUDIO_IN_Init+0x38c>
        {
          return BSP_ERROR_PERIPH_FAILURE;
 8000dde:	f06f 0303 	mvn.w	r3, #3
 8000de2:	e2f3      	b.n	80013cc <BSP_AUDIO_IN_Init+0x974>
      SAI_MspInit(&haudio_in_sai[Instance]);
#endif /* (USE_HAL_SAI_REGISTER_CALLBACKS == 1U) */
      MX_SAI_Config mx_config;

      /* Prepare haudio_in_sai handle */
      mx_config.MonoStereoMode    = SAI_STEREOMODE;
 8000de4:	2300      	movs	r3, #0
 8000de6:	617b      	str	r3, [r7, #20]
      mx_config.DataSize          = SAI_DATASIZE_16;
 8000de8:	2380      	movs	r3, #128	; 0x80
 8000dea:	613b      	str	r3, [r7, #16]
      mx_config.FrameLength       = 16;
 8000dec:	2310      	movs	r3, #16
 8000dee:	62bb      	str	r3, [r7, #40]	; 0x28
      mx_config.ActiveFrameLength = 1;
 8000df0:	2301      	movs	r3, #1
 8000df2:	62fb      	str	r3, [r7, #44]	; 0x2c
      mx_config.OutputDrive       = SAI_OUTPUTDRIVE_DISABLE;
 8000df4:	2300      	movs	r3, #0
 8000df6:	623b      	str	r3, [r7, #32]
      mx_config.SlotActive        = SAI_SLOTACTIVE_0;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	633b      	str	r3, [r7, #48]	; 0x30
      mx_config.AudioFrequency    = Audio_In_Ctx[Instance].SampleRate*8;
 8000dfc:	495c      	ldr	r1, [pc, #368]	; (8000f70 <BSP_AUDIO_IN_Init+0x518>)
 8000dfe:	687a      	ldr	r2, [r7, #4]
 8000e00:	4613      	mov	r3, r2
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	4413      	add	r3, r2
 8000e06:	011b      	lsls	r3, r3, #4
 8000e08:	440b      	add	r3, r1
 8000e0a:	3308      	adds	r3, #8
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	00db      	lsls	r3, r3, #3
 8000e10:	60bb      	str	r3, [r7, #8]
      mx_config.AudioMode         = SAI_MODEMASTER_RX;
 8000e12:	2301      	movs	r3, #1
 8000e14:	60fb      	str	r3, [r7, #12]
      mx_config.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000e16:	2300      	movs	r3, #0
 8000e18:	61bb      	str	r3, [r7, #24]
      mx_config.Synchro           = SAI_ASYNCHRONOUS;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	61fb      	str	r3, [r7, #28]
      mx_config.SynchroExt        = SAI_SYNCEXT_DISABLE;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	627b      	str	r3, [r7, #36]	; 0x24

      if(MX_SAI4_Block_A_Init(&haudio_in_sai[Instance], &mx_config) != HAL_OK)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	22b4      	movs	r2, #180	; 0xb4
 8000e26:	fb02 f303 	mul.w	r3, r2, r3
 8000e2a:	4a4f      	ldr	r2, [pc, #316]	; (8000f68 <BSP_AUDIO_IN_Init+0x510>)
 8000e2c:	4413      	add	r3, r2
 8000e2e:	f107 0208 	add.w	r2, r7, #8
 8000e32:	4611      	mov	r1, r2
 8000e34:	4618      	mov	r0, r3
 8000e36:	f000 fc47 	bl	80016c8 <MX_SAI4_Block_A_Init>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d002      	beq.n	8000e46 <BSP_AUDIO_IN_Init+0x3ee>
      {
        /* Return BSP_ERROR_PERIPH_FAILURE when operations are not correctly done */
        return BSP_ERROR_PERIPH_FAILURE;
 8000e40:	f06f 0303 	mvn.w	r3, #3
 8000e44:	e2c2      	b.n	80013cc <BSP_AUDIO_IN_Init+0x974>
      }

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1U)
      /* Register SAI TC, HT and Error callbacks */
      if(HAL_SAI_RegisterCallback(&haudio_in_sai[Instance], HAL_SAI_RX_COMPLETE_CB_ID, SAI_RxCpltCallback) != HAL_OK)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	22b4      	movs	r2, #180	; 0xb4
 8000e4a:	fb02 f303 	mul.w	r3, r2, r3
 8000e4e:	4a46      	ldr	r2, [pc, #280]	; (8000f68 <BSP_AUDIO_IN_Init+0x510>)
 8000e50:	4413      	add	r3, r2
 8000e52:	4a48      	ldr	r2, [pc, #288]	; (8000f74 <BSP_AUDIO_IN_Init+0x51c>)
 8000e54:	2100      	movs	r1, #0
 8000e56:	4618      	mov	r0, r3
 8000e58:	f008 f866 	bl	8008f28 <HAL_SAI_RegisterCallback>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d002      	beq.n	8000e68 <BSP_AUDIO_IN_Init+0x410>
      {
        return BSP_ERROR_PERIPH_FAILURE;
 8000e62:	f06f 0303 	mvn.w	r3, #3
 8000e66:	e2b1      	b.n	80013cc <BSP_AUDIO_IN_Init+0x974>
      }
      if(HAL_SAI_RegisterCallback(&haudio_in_sai[Instance], HAL_SAI_RX_HALFCOMPLETE_CB_ID, SAI_RxHalfCpltCallback) != HAL_OK)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	22b4      	movs	r2, #180	; 0xb4
 8000e6c:	fb02 f303 	mul.w	r3, r2, r3
 8000e70:	4a3d      	ldr	r2, [pc, #244]	; (8000f68 <BSP_AUDIO_IN_Init+0x510>)
 8000e72:	4413      	add	r3, r2
 8000e74:	4a40      	ldr	r2, [pc, #256]	; (8000f78 <BSP_AUDIO_IN_Init+0x520>)
 8000e76:	2101      	movs	r1, #1
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f008 f855 	bl	8008f28 <HAL_SAI_RegisterCallback>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d002      	beq.n	8000e8a <BSP_AUDIO_IN_Init+0x432>
      {
        return BSP_ERROR_PERIPH_FAILURE;
 8000e84:	f06f 0303 	mvn.w	r3, #3
 8000e88:	e2a0      	b.n	80013cc <BSP_AUDIO_IN_Init+0x974>
      }
      if(HAL_SAI_RegisterCallback(&haudio_in_sai[Instance], HAL_SAI_ERROR_CB_ID, SAI_ErrorCallback) != HAL_OK)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	22b4      	movs	r2, #180	; 0xb4
 8000e8e:	fb02 f303 	mul.w	r3, r2, r3
 8000e92:	4a35      	ldr	r2, [pc, #212]	; (8000f68 <BSP_AUDIO_IN_Init+0x510>)
 8000e94:	4413      	add	r3, r2
 8000e96:	4a39      	ldr	r2, [pc, #228]	; (8000f7c <BSP_AUDIO_IN_Init+0x524>)
 8000e98:	2104      	movs	r1, #4
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f008 f844 	bl	8008f28 <HAL_SAI_RegisterCallback>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d002      	beq.n	8000eac <BSP_AUDIO_IN_Init+0x454>
      {
        return BSP_ERROR_PERIPH_FAILURE;
 8000ea6:	f06f 0303 	mvn.w	r3, #3
 8000eaa:	e28f      	b.n	80013cc <BSP_AUDIO_IN_Init+0x974>
      }
#endif /* (USE_HAL_SAI_REGISTER_CALLBACKS == 1U) */
#if (USE_BSP_PDM_LIB_FEATURE > 0U)
      if(BSP_AUDIO_IN_PDMToPCM_Init(Instance, AudioInit->SampleRate, Audio_In_Ctx[Instance].ChannelsNbr, Audio_In_Ctx[Instance].ChannelsNbr) != BSP_ERROR_NONE)
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	6859      	ldr	r1, [r3, #4]
 8000eb0:	482f      	ldr	r0, [pc, #188]	; (8000f70 <BSP_AUDIO_IN_Init+0x518>)
 8000eb2:	687a      	ldr	r2, [r7, #4]
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	4413      	add	r3, r2
 8000eba:	011b      	lsls	r3, r3, #4
 8000ebc:	4403      	add	r3, r0
 8000ebe:	3310      	adds	r3, #16
 8000ec0:	6818      	ldr	r0, [r3, #0]
 8000ec2:	4c2b      	ldr	r4, [pc, #172]	; (8000f70 <BSP_AUDIO_IN_Init+0x518>)
 8000ec4:	687a      	ldr	r2, [r7, #4]
 8000ec6:	4613      	mov	r3, r2
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	4413      	add	r3, r2
 8000ecc:	011b      	lsls	r3, r3, #4
 8000ece:	4423      	add	r3, r4
 8000ed0:	3310      	adds	r3, #16
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	6878      	ldr	r0, [r7, #4]
 8000ed8:	f000 fd3c 	bl	8001954 <BSP_AUDIO_IN_PDMToPCM_Init>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	f000 8268 	beq.w	80013b4 <BSP_AUDIO_IN_Init+0x95c>
      {
        return BSP_ERROR_NO_INIT;
 8000ee4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ee8:	e270      	b.n	80013cc <BSP_AUDIO_IN_Init+0x974>
#endif
    }
    }
    else /* (Instance == 2U) */
    {
      DFSDM_Filter_TypeDef* FilterInstnace[DFSDM_MIC_NUMBER] = {AUDIO_DFSDMx_MIC1_FILTER, AUDIO_DFSDMx_MIC2_FILTER,AUDIO_DFSDMx_MIC3_FILTER,AUDIO_DFSDMx_MIC4_FILTER};
 8000eea:	4b25      	ldr	r3, [pc, #148]	; (8000f80 <BSP_AUDIO_IN_Init+0x528>)
 8000eec:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8000ef0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ef2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      DFSDM_Channel_TypeDef* ChannelInstance[DFSDM_MIC_NUMBER] = {AUDIO_DFSDMx_MIC1_CHANNEL, AUDIO_DFSDMx_MIC2_CHANNEL,AUDIO_DFSDMx_MIC3_CHANNEL,AUDIO_DFSDMx_MIC4_CHANNEL};
 8000ef6:	4b23      	ldr	r3, [pc, #140]	; (8000f84 <BSP_AUDIO_IN_Init+0x52c>)
 8000ef8:	f107 0464 	add.w	r4, r7, #100	; 0x64
 8000efc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000efe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      uint32_t DigitalMicPins[DFSDM_MIC_NUMBER] = {DFSDM_CHANNEL_SAME_CHANNEL_PINS, DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS, DFSDM_CHANNEL_SAME_CHANNEL_PINS, DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS};
 8000f02:	4b21      	ldr	r3, [pc, #132]	; (8000f88 <BSP_AUDIO_IN_Init+0x530>)
 8000f04:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000f08:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f0a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      uint32_t DigitalMicType[DFSDM_MIC_NUMBER] = {DFSDM_CHANNEL_SPI_RISING, DFSDM_CHANNEL_SPI_FALLING, DFSDM_CHANNEL_SPI_RISING, DFSDM_CHANNEL_SPI_FALLING};
 8000f0e:	4b1f      	ldr	r3, [pc, #124]	; (8000f8c <BSP_AUDIO_IN_Init+0x534>)
 8000f10:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8000f14:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f16:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      uint32_t Channel4Filter[DFSDM_MIC_NUMBER] = {AUDIO_DFSDMx_MIC1_CHANNEL_FOR_FILTER, AUDIO_DFSDMx_MIC2_CHANNEL_FOR_FILTER,AUDIO_DFSDMx_MIC3_CHANNEL_FOR_FILTER,AUDIO_DFSDMx_MIC4_CHANNEL_FOR_FILTER};
 8000f1a:	4b1d      	ldr	r3, [pc, #116]	; (8000f90 <BSP_AUDIO_IN_Init+0x538>)
 8000f1c:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8000f20:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f22:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      MX_DFSDM_Config dfsdm_config;

      /* PLL clock is set depending on the AudioFreq (44.1khz vs 48khz groups) */
      if(MX_DFSDM1_ClockConfig(&haudio_in_dfsdm_channel[0], AudioInit->SampleRate) != HAL_OK)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4819      	ldr	r0, [pc, #100]	; (8000f94 <BSP_AUDIO_IN_Init+0x53c>)
 8000f2e:	f000 fa57 	bl	80013e0 <MX_DFSDM1_ClockConfig>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d003      	beq.n	8000f40 <BSP_AUDIO_IN_Init+0x4e8>
      {
        ret = BSP_ERROR_CLOCK_FAILURE;
 8000f38:	f06f 0308 	mvn.w	r3, #8
 8000f3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
      }

      if(ret == BSP_ERROR_NONE)
 8000f40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	f040 8235 	bne.w	80013b4 <BSP_AUDIO_IN_Init+0x95c>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
          }
        }
#else
        DFSDM_FilterMspInit(&haudio_in_dfsdm_filter[1]);
 8000f4a:	4813      	ldr	r0, [pc, #76]	; (8000f98 <BSP_AUDIO_IN_Init+0x540>)
 8000f4c:	f000 ff04 	bl	8001d58 <DFSDM_FilterMspInit>
        DFSDM_ChannelMspInit(&haudio_in_dfsdm_channel[1]);
 8000f50:	4812      	ldr	r0, [pc, #72]	; (8000f9c <BSP_AUDIO_IN_Init+0x544>)
 8000f52:	f000 fe5d 	bl	8001c10 <DFSDM_ChannelMspInit>
#endif /* (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1) */
        if(ret == BSP_ERROR_NONE)
 8000f56:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	f040 822a 	bne.w	80013b4 <BSP_AUDIO_IN_Init+0x95c>
        {
          for(i = 0; i < DFSDM_MIC_NUMBER; i ++)
 8000f60:	2300      	movs	r3, #0
 8000f62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000f66:	e21e      	b.n	80013a6 <BSP_AUDIO_IN_Init+0x94e>
 8000f68:	2400054c 	.word	0x2400054c
 8000f6c:	58005404 	.word	0x58005404
 8000f70:	24000cb0 	.word	0x24000cb0
 8000f74:	08001bfb 	.word	0x08001bfb
 8000f78:	08001be5 	.word	0x08001be5
 8000f7c:	08000a2d 	.word	0x08000a2d
 8000f80:	0800be78 	.word	0x0800be78
 8000f84:	0800be88 	.word	0x0800be88
 8000f88:	0800be98 	.word	0x0800be98
 8000f8c:	0800bea8 	.word	0x0800bea8
 8000f90:	0800beb8 	.word	0x0800beb8
 8000f94:	24000a5c 	.word	0x24000a5c
 8000f98:	24000b90 	.word	0x24000b90
 8000f9c:	24000a94 	.word	0x24000a94
          {
            dfsdm_config.FilterInstance  = FilterInstnace[i];
 8000fa0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8000faa:	4413      	add	r3, r2
 8000fac:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8000fb0:	60bb      	str	r3, [r7, #8]
            dfsdm_config.ChannelInstance = ChannelInstance[i];
 8000fb2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8000fbc:	4413      	add	r3, r2
 8000fbe:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8000fc2:	61bb      	str	r3, [r7, #24]
            dfsdm_config.DigitalMicPins  = DigitalMicPins[i];
 8000fc4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8000fce:	4413      	add	r3, r2
 8000fd0:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8000fd4:	61fb      	str	r3, [r7, #28]
            dfsdm_config.DigitalMicType  = DigitalMicType[i];
 8000fd6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8000fe0:	4413      	add	r3, r2
 8000fe2:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8000fe6:	623b      	str	r3, [r7, #32]
            dfsdm_config.Channel4Filter  = Channel4Filter[i];
 8000fe8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8000ff2:	4413      	add	r3, r2
 8000ff4:	f853 3c6c 	ldr.w	r3, [r3, #-108]
 8000ff8:	627b      	str	r3, [r7, #36]	; 0x24
            dfsdm_config.RegularTrigger  = DFSDM_FILTER_SW_TRIGGER;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60fb      	str	r3, [r7, #12]
            /* MIC2, MIC3 and MIC4 should be synchronized to MIC1 if it's used */
            if((i >= 1U) && (i < 4U) && ((Audio_In_Ctx[Instance].Device & AUDIO_IN_DEVICE_DIGITAL_MIC1) == AUDIO_IN_DEVICE_DIGITAL_MIC1))
 8000ffe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001002:	2b00      	cmp	r3, #0
 8001004:	d012      	beq.n	800102c <BSP_AUDIO_IN_Init+0x5d4>
 8001006:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800100a:	2b03      	cmp	r3, #3
 800100c:	d80e      	bhi.n	800102c <BSP_AUDIO_IN_Init+0x5d4>
 800100e:	49a0      	ldr	r1, [pc, #640]	; (8001290 <BSP_AUDIO_IN_Init+0x838>)
 8001010:	687a      	ldr	r2, [r7, #4]
 8001012:	4613      	mov	r3, r2
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	4413      	add	r3, r2
 8001018:	011b      	lsls	r3, r3, #4
 800101a:	440b      	add	r3, r1
 800101c:	3304      	adds	r3, #4
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f003 0310 	and.w	r3, r3, #16
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <BSP_AUDIO_IN_Init+0x5d4>
            {
              dfsdm_config.RegularTrigger = DFSDM_FILTER_SYNC_TRIGGER;
 8001028:	2301      	movs	r3, #1
 800102a:	60fb      	str	r3, [r7, #12]
            }
            dfsdm_config.SincOrder       = DFSDM_FILTER_ORDER(Audio_In_Ctx[Instance].SampleRate);
 800102c:	4998      	ldr	r1, [pc, #608]	; (8001290 <BSP_AUDIO_IN_Init+0x838>)
 800102e:	687a      	ldr	r2, [r7, #4]
 8001030:	4613      	mov	r3, r2
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	4413      	add	r3, r2
 8001036:	011b      	lsls	r3, r3, #4
 8001038:	440b      	add	r3, r1
 800103a:	3308      	adds	r3, #8
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8001042:	d060      	beq.n	8001106 <BSP_AUDIO_IN_Init+0x6ae>
 8001044:	4992      	ldr	r1, [pc, #584]	; (8001290 <BSP_AUDIO_IN_Init+0x838>)
 8001046:	687a      	ldr	r2, [r7, #4]
 8001048:	4613      	mov	r3, r2
 800104a:	005b      	lsls	r3, r3, #1
 800104c:	4413      	add	r3, r2
 800104e:	011b      	lsls	r3, r3, #4
 8001050:	440b      	add	r3, r1
 8001052:	3308      	adds	r3, #8
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f642 3211 	movw	r2, #11025	; 0x2b11
 800105a:	4293      	cmp	r3, r2
 800105c:	d050      	beq.n	8001100 <BSP_AUDIO_IN_Init+0x6a8>
 800105e:	498c      	ldr	r1, [pc, #560]	; (8001290 <BSP_AUDIO_IN_Init+0x838>)
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	4613      	mov	r3, r2
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	4413      	add	r3, r2
 8001068:	011b      	lsls	r3, r3, #4
 800106a:	440b      	add	r3, r1
 800106c:	3308      	adds	r3, #8
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8001074:	d041      	beq.n	80010fa <BSP_AUDIO_IN_Init+0x6a2>
 8001076:	4986      	ldr	r1, [pc, #536]	; (8001290 <BSP_AUDIO_IN_Init+0x838>)
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	4613      	mov	r3, r2
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	4413      	add	r3, r2
 8001080:	011b      	lsls	r3, r3, #4
 8001082:	440b      	add	r3, r1
 8001084:	3308      	adds	r3, #8
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f245 6222 	movw	r2, #22050	; 0x5622
 800108c:	4293      	cmp	r3, r2
 800108e:	d031      	beq.n	80010f4 <BSP_AUDIO_IN_Init+0x69c>
 8001090:	497f      	ldr	r1, [pc, #508]	; (8001290 <BSP_AUDIO_IN_Init+0x838>)
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	4613      	mov	r3, r2
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	4413      	add	r3, r2
 800109a:	011b      	lsls	r3, r3, #4
 800109c:	440b      	add	r3, r1
 800109e:	3308      	adds	r3, #8
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80010a6:	d022      	beq.n	80010ee <BSP_AUDIO_IN_Init+0x696>
 80010a8:	4979      	ldr	r1, [pc, #484]	; (8001290 <BSP_AUDIO_IN_Init+0x838>)
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	4613      	mov	r3, r2
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	4413      	add	r3, r2
 80010b2:	011b      	lsls	r3, r3, #4
 80010b4:	440b      	add	r3, r1
 80010b6:	3308      	adds	r3, #8
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f64a 4244 	movw	r2, #44100	; 0xac44
 80010be:	4293      	cmp	r3, r2
 80010c0:	d012      	beq.n	80010e8 <BSP_AUDIO_IN_Init+0x690>
 80010c2:	4973      	ldr	r1, [pc, #460]	; (8001290 <BSP_AUDIO_IN_Init+0x838>)
 80010c4:	687a      	ldr	r2, [r7, #4]
 80010c6:	4613      	mov	r3, r2
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	4413      	add	r3, r2
 80010cc:	011b      	lsls	r3, r3, #4
 80010ce:	440b      	add	r3, r1
 80010d0:	3308      	adds	r3, #8
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80010d8:	4293      	cmp	r3, r2
 80010da:	d102      	bne.n	80010e2 <BSP_AUDIO_IN_Init+0x68a>
 80010dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80010e0:	e013      	b.n	800110a <BSP_AUDIO_IN_Init+0x6b2>
 80010e2:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 80010e6:	e010      	b.n	800110a <BSP_AUDIO_IN_Init+0x6b2>
 80010e8:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80010ec:	e00d      	b.n	800110a <BSP_AUDIO_IN_Init+0x6b2>
 80010ee:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80010f2:	e00a      	b.n	800110a <BSP_AUDIO_IN_Init+0x6b2>
 80010f4:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80010f8:	e007      	b.n	800110a <BSP_AUDIO_IN_Init+0x6b2>
 80010fa:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80010fe:	e004      	b.n	800110a <BSP_AUDIO_IN_Init+0x6b2>
 8001100:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8001104:	e001      	b.n	800110a <BSP_AUDIO_IN_Init+0x6b2>
 8001106:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800110a:	613b      	str	r3, [r7, #16]
            dfsdm_config.Oversampling    = DFSDM_OVER_SAMPLING(Audio_In_Ctx[Instance].SampleRate);
 800110c:	4960      	ldr	r1, [pc, #384]	; (8001290 <BSP_AUDIO_IN_Init+0x838>)
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	4613      	mov	r3, r2
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	4413      	add	r3, r2
 8001116:	011b      	lsls	r3, r3, #4
 8001118:	440b      	add	r3, r1
 800111a:	3308      	adds	r3, #8
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8001122:	d05a      	beq.n	80011da <BSP_AUDIO_IN_Init+0x782>
 8001124:	495a      	ldr	r1, [pc, #360]	; (8001290 <BSP_AUDIO_IN_Init+0x838>)
 8001126:	687a      	ldr	r2, [r7, #4]
 8001128:	4613      	mov	r3, r2
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	4413      	add	r3, r2
 800112e:	011b      	lsls	r3, r3, #4
 8001130:	440b      	add	r3, r1
 8001132:	3308      	adds	r3, #8
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f642 3211 	movw	r2, #11025	; 0x2b11
 800113a:	4293      	cmp	r3, r2
 800113c:	d04a      	beq.n	80011d4 <BSP_AUDIO_IN_Init+0x77c>
 800113e:	4954      	ldr	r1, [pc, #336]	; (8001290 <BSP_AUDIO_IN_Init+0x838>)
 8001140:	687a      	ldr	r2, [r7, #4]
 8001142:	4613      	mov	r3, r2
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	4413      	add	r3, r2
 8001148:	011b      	lsls	r3, r3, #4
 800114a:	440b      	add	r3, r1
 800114c:	3308      	adds	r3, #8
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8001154:	d03c      	beq.n	80011d0 <BSP_AUDIO_IN_Init+0x778>
 8001156:	494e      	ldr	r1, [pc, #312]	; (8001290 <BSP_AUDIO_IN_Init+0x838>)
 8001158:	687a      	ldr	r2, [r7, #4]
 800115a:	4613      	mov	r3, r2
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	4413      	add	r3, r2
 8001160:	011b      	lsls	r3, r3, #4
 8001162:	440b      	add	r3, r1
 8001164:	3308      	adds	r3, #8
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f245 6222 	movw	r2, #22050	; 0x5622
 800116c:	4293      	cmp	r3, r2
 800116e:	d02d      	beq.n	80011cc <BSP_AUDIO_IN_Init+0x774>
 8001170:	4947      	ldr	r1, [pc, #284]	; (8001290 <BSP_AUDIO_IN_Init+0x838>)
 8001172:	687a      	ldr	r2, [r7, #4]
 8001174:	4613      	mov	r3, r2
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	4413      	add	r3, r2
 800117a:	011b      	lsls	r3, r3, #4
 800117c:	440b      	add	r3, r1
 800117e:	3308      	adds	r3, #8
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8001186:	d01f      	beq.n	80011c8 <BSP_AUDIO_IN_Init+0x770>
 8001188:	4941      	ldr	r1, [pc, #260]	; (8001290 <BSP_AUDIO_IN_Init+0x838>)
 800118a:	687a      	ldr	r2, [r7, #4]
 800118c:	4613      	mov	r3, r2
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	4413      	add	r3, r2
 8001192:	011b      	lsls	r3, r3, #4
 8001194:	440b      	add	r3, r1
 8001196:	3308      	adds	r3, #8
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f64a 4244 	movw	r2, #44100	; 0xac44
 800119e:	4293      	cmp	r3, r2
 80011a0:	d010      	beq.n	80011c4 <BSP_AUDIO_IN_Init+0x76c>
 80011a2:	493b      	ldr	r1, [pc, #236]	; (8001290 <BSP_AUDIO_IN_Init+0x838>)
 80011a4:	687a      	ldr	r2, [r7, #4]
 80011a6:	4613      	mov	r3, r2
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	4413      	add	r3, r2
 80011ac:	011b      	lsls	r3, r3, #4
 80011ae:	440b      	add	r3, r1
 80011b0:	3308      	adds	r3, #8
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d101      	bne.n	80011c0 <BSP_AUDIO_IN_Init+0x768>
 80011bc:	2320      	movs	r3, #32
 80011be:	e00e      	b.n	80011de <BSP_AUDIO_IN_Init+0x786>
 80011c0:	2310      	movs	r3, #16
 80011c2:	e00c      	b.n	80011de <BSP_AUDIO_IN_Init+0x786>
 80011c4:	2340      	movs	r3, #64	; 0x40
 80011c6:	e00a      	b.n	80011de <BSP_AUDIO_IN_Init+0x786>
 80011c8:	2340      	movs	r3, #64	; 0x40
 80011ca:	e008      	b.n	80011de <BSP_AUDIO_IN_Init+0x786>
 80011cc:	2380      	movs	r3, #128	; 0x80
 80011ce:	e006      	b.n	80011de <BSP_AUDIO_IN_Init+0x786>
 80011d0:	2380      	movs	r3, #128	; 0x80
 80011d2:	e004      	b.n	80011de <BSP_AUDIO_IN_Init+0x786>
 80011d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011d8:	e001      	b.n	80011de <BSP_AUDIO_IN_Init+0x786>
 80011da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011de:	617b      	str	r3, [r7, #20]
            dfsdm_config.ClockDivider    = DFSDM_CLOCK_DIVIDER(Audio_In_Ctx[Instance].SampleRate);
 80011e0:	492b      	ldr	r1, [pc, #172]	; (8001290 <BSP_AUDIO_IN_Init+0x838>)
 80011e2:	687a      	ldr	r2, [r7, #4]
 80011e4:	4613      	mov	r3, r2
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	4413      	add	r3, r2
 80011ea:	011b      	lsls	r3, r3, #4
 80011ec:	440b      	add	r3, r1
 80011ee:	3308      	adds	r3, #8
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80011f6:	d04d      	beq.n	8001294 <BSP_AUDIO_IN_Init+0x83c>
 80011f8:	4925      	ldr	r1, [pc, #148]	; (8001290 <BSP_AUDIO_IN_Init+0x838>)
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	4613      	mov	r3, r2
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	4413      	add	r3, r2
 8001202:	011b      	lsls	r3, r3, #4
 8001204:	440b      	add	r3, r1
 8001206:	3308      	adds	r3, #8
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f642 3211 	movw	r2, #11025	; 0x2b11
 800120e:	4293      	cmp	r3, r2
 8001210:	d03b      	beq.n	800128a <BSP_AUDIO_IN_Init+0x832>
 8001212:	491f      	ldr	r1, [pc, #124]	; (8001290 <BSP_AUDIO_IN_Init+0x838>)
 8001214:	687a      	ldr	r2, [r7, #4]
 8001216:	4613      	mov	r3, r2
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	4413      	add	r3, r2
 800121c:	011b      	lsls	r3, r3, #4
 800121e:	440b      	add	r3, r1
 8001220:	3308      	adds	r3, #8
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8001228:	d02d      	beq.n	8001286 <BSP_AUDIO_IN_Init+0x82e>
 800122a:	4919      	ldr	r1, [pc, #100]	; (8001290 <BSP_AUDIO_IN_Init+0x838>)
 800122c:	687a      	ldr	r2, [r7, #4]
 800122e:	4613      	mov	r3, r2
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	4413      	add	r3, r2
 8001234:	011b      	lsls	r3, r3, #4
 8001236:	440b      	add	r3, r1
 8001238:	3308      	adds	r3, #8
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f245 6222 	movw	r2, #22050	; 0x5622
 8001240:	4293      	cmp	r3, r2
 8001242:	d01e      	beq.n	8001282 <BSP_AUDIO_IN_Init+0x82a>
 8001244:	4912      	ldr	r1, [pc, #72]	; (8001290 <BSP_AUDIO_IN_Init+0x838>)
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	4613      	mov	r3, r2
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	4413      	add	r3, r2
 800124e:	011b      	lsls	r3, r3, #4
 8001250:	440b      	add	r3, r1
 8001252:	3308      	adds	r3, #8
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 800125a:	d010      	beq.n	800127e <BSP_AUDIO_IN_Init+0x826>
 800125c:	490c      	ldr	r1, [pc, #48]	; (8001290 <BSP_AUDIO_IN_Init+0x838>)
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	4613      	mov	r3, r2
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	4413      	add	r3, r2
 8001266:	011b      	lsls	r3, r3, #4
 8001268:	440b      	add	r3, r1
 800126a:	3308      	adds	r3, #8
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f64a 4244 	movw	r2, #44100	; 0xac44
 8001272:	4293      	cmp	r3, r2
 8001274:	d101      	bne.n	800127a <BSP_AUDIO_IN_Init+0x822>
 8001276:	2304      	movs	r3, #4
 8001278:	e00d      	b.n	8001296 <BSP_AUDIO_IN_Init+0x83e>
 800127a:	2320      	movs	r3, #32
 800127c:	e00b      	b.n	8001296 <BSP_AUDIO_IN_Init+0x83e>
 800127e:	2318      	movs	r3, #24
 8001280:	e009      	b.n	8001296 <BSP_AUDIO_IN_Init+0x83e>
 8001282:	2304      	movs	r3, #4
 8001284:	e007      	b.n	8001296 <BSP_AUDIO_IN_Init+0x83e>
 8001286:	2318      	movs	r3, #24
 8001288:	e005      	b.n	8001296 <BSP_AUDIO_IN_Init+0x83e>
 800128a:	2304      	movs	r3, #4
 800128c:	e003      	b.n	8001296 <BSP_AUDIO_IN_Init+0x83e>
 800128e:	bf00      	nop
 8001290:	24000cb0 	.word	0x24000cb0
 8001294:	2318      	movs	r3, #24
 8001296:	62bb      	str	r3, [r7, #40]	; 0x28
            dfsdm_config.RightBitShift   = DFSDM_MIC_BIT_SHIFT(Audio_In_Ctx[Instance].SampleRate);
 8001298:	494e      	ldr	r1, [pc, #312]	; (80013d4 <BSP_AUDIO_IN_Init+0x97c>)
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	4613      	mov	r3, r2
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	4413      	add	r3, r2
 80012a2:	011b      	lsls	r3, r3, #4
 80012a4:	440b      	add	r3, r1
 80012a6:	3308      	adds	r3, #8
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80012ae:	d04a      	beq.n	8001346 <BSP_AUDIO_IN_Init+0x8ee>
 80012b0:	4948      	ldr	r1, [pc, #288]	; (80013d4 <BSP_AUDIO_IN_Init+0x97c>)
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	4613      	mov	r3, r2
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	4413      	add	r3, r2
 80012ba:	011b      	lsls	r3, r3, #4
 80012bc:	440b      	add	r3, r1
 80012be:	3308      	adds	r3, #8
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f642 3211 	movw	r2, #11025	; 0x2b11
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d03b      	beq.n	8001342 <BSP_AUDIO_IN_Init+0x8ea>
 80012ca:	4942      	ldr	r1, [pc, #264]	; (80013d4 <BSP_AUDIO_IN_Init+0x97c>)
 80012cc:	687a      	ldr	r2, [r7, #4]
 80012ce:	4613      	mov	r3, r2
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	4413      	add	r3, r2
 80012d4:	011b      	lsls	r3, r3, #4
 80012d6:	440b      	add	r3, r1
 80012d8:	3308      	adds	r3, #8
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80012e0:	d02d      	beq.n	800133e <BSP_AUDIO_IN_Init+0x8e6>
 80012e2:	493c      	ldr	r1, [pc, #240]	; (80013d4 <BSP_AUDIO_IN_Init+0x97c>)
 80012e4:	687a      	ldr	r2, [r7, #4]
 80012e6:	4613      	mov	r3, r2
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	4413      	add	r3, r2
 80012ec:	011b      	lsls	r3, r3, #4
 80012ee:	440b      	add	r3, r1
 80012f0:	3308      	adds	r3, #8
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f245 6222 	movw	r2, #22050	; 0x5622
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d01e      	beq.n	800133a <BSP_AUDIO_IN_Init+0x8e2>
 80012fc:	4935      	ldr	r1, [pc, #212]	; (80013d4 <BSP_AUDIO_IN_Init+0x97c>)
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	4613      	mov	r3, r2
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	4413      	add	r3, r2
 8001306:	011b      	lsls	r3, r3, #4
 8001308:	440b      	add	r3, r1
 800130a:	3308      	adds	r3, #8
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8001312:	d010      	beq.n	8001336 <BSP_AUDIO_IN_Init+0x8de>
 8001314:	492f      	ldr	r1, [pc, #188]	; (80013d4 <BSP_AUDIO_IN_Init+0x97c>)
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	4613      	mov	r3, r2
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	4413      	add	r3, r2
 800131e:	011b      	lsls	r3, r3, #4
 8001320:	440b      	add	r3, r1
 8001322:	3308      	adds	r3, #8
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f64a 4244 	movw	r2, #44100	; 0xac44
 800132a:	4293      	cmp	r3, r2
 800132c:	d101      	bne.n	8001332 <BSP_AUDIO_IN_Init+0x8da>
 800132e:	2300      	movs	r3, #0
 8001330:	e00a      	b.n	8001348 <BSP_AUDIO_IN_Init+0x8f0>
 8001332:	2302      	movs	r3, #2
 8001334:	e008      	b.n	8001348 <BSP_AUDIO_IN_Init+0x8f0>
 8001336:	2306      	movs	r3, #6
 8001338:	e006      	b.n	8001348 <BSP_AUDIO_IN_Init+0x8f0>
 800133a:	2303      	movs	r3, #3
 800133c:	e004      	b.n	8001348 <BSP_AUDIO_IN_Init+0x8f0>
 800133e:	2303      	movs	r3, #3
 8001340:	e002      	b.n	8001348 <BSP_AUDIO_IN_Init+0x8f0>
 8001342:	2306      	movs	r3, #6
 8001344:	e000      	b.n	8001348 <BSP_AUDIO_IN_Init+0x8f0>
 8001346:	2305      	movs	r3, #5
 8001348:	62fb      	str	r3, [r7, #44]	; 0x2c

            if(((AudioInit->Device >> i) & AUDIO_IN_DEVICE_DIGITAL_MIC1) == AUDIO_IN_DEVICE_DIGITAL_MIC1)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001352:	fa22 f303 	lsr.w	r3, r2, r3
 8001356:	f003 0310 	and.w	r3, r3, #16
 800135a:	2b00      	cmp	r3, #0
 800135c:	d01a      	beq.n	8001394 <BSP_AUDIO_IN_Init+0x93c>
            {
              /* Default configuration of DFSDM filters and channels */
              if(MX_DFSDM1_Init(&haudio_in_dfsdm_filter[i], &haudio_in_dfsdm_channel[i], &dfsdm_config) != HAL_OK)
 800135e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001362:	2254      	movs	r2, #84	; 0x54
 8001364:	fb02 f303 	mul.w	r3, r2, r3
 8001368:	4a1b      	ldr	r2, [pc, #108]	; (80013d8 <BSP_AUDIO_IN_Init+0x980>)
 800136a:	1898      	adds	r0, r3, r2
 800136c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8001370:	4613      	mov	r3, r2
 8001372:	00db      	lsls	r3, r3, #3
 8001374:	1a9b      	subs	r3, r3, r2
 8001376:	00db      	lsls	r3, r3, #3
 8001378:	4a18      	ldr	r2, [pc, #96]	; (80013dc <BSP_AUDIO_IN_Init+0x984>)
 800137a:	4413      	add	r3, r2
 800137c:	f107 0208 	add.w	r2, r7, #8
 8001380:	4619      	mov	r1, r3
 8001382:	f000 f89a 	bl	80014ba <MX_DFSDM1_Init>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d003      	beq.n	8001394 <BSP_AUDIO_IN_Init+0x93c>
              {
                /* Return BSP_ERROR_PERIPH_FAILURE when operations are not correctly done */
                ret = BSP_ERROR_PERIPH_FAILURE;
 800138c:	f06f 0303 	mvn.w	r3, #3
 8001390:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                  ret = BSP_ERROR_PERIPH_FAILURE;
                }
              }
#endif /* (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1) */
            }
            if(ret != BSP_ERROR_NONE)
 8001394:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001398:	2b00      	cmp	r3, #0
 800139a:	d10a      	bne.n	80013b2 <BSP_AUDIO_IN_Init+0x95a>
          for(i = 0; i < DFSDM_MIC_NUMBER; i ++)
 800139c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80013a0:	3301      	adds	r3, #1
 80013a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80013a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80013aa:	2b03      	cmp	r3, #3
 80013ac:	f67f adf8 	bls.w	8000fa0 <BSP_AUDIO_IN_Init+0x548>
 80013b0:	e000      	b.n	80013b4 <BSP_AUDIO_IN_Init+0x95c>
            {
              break;
 80013b2:	bf00      	nop
        }
      }
    }

    /* Update BSP AUDIO IN state */
    Audio_In_Ctx[Instance].State = AUDIO_IN_STATE_STOP;
 80013b4:	4907      	ldr	r1, [pc, #28]	; (80013d4 <BSP_AUDIO_IN_Init+0x97c>)
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	4613      	mov	r3, r2
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	4413      	add	r3, r2
 80013be:	011b      	lsls	r3, r3, #4
 80013c0:	440b      	add	r3, r1
 80013c2:	3324      	adds	r3, #36	; 0x24
 80013c4:	2202      	movs	r2, #2
 80013c6:	601a      	str	r2, [r3, #0]
  }

  /* Return BSP status */
  return ret;
 80013c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	37a4      	adds	r7, #164	; 0xa4
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd90      	pop	{r4, r7, pc}
 80013d4:	24000cb0 	.word	0x24000cb0
 80013d8:	24000b3c 	.word	0x24000b3c
 80013dc:	24000a5c 	.word	0x24000a5c

080013e0 <MX_DFSDM1_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_IN_Init()
  *         Being __weak it can be overwritten by the application
  * @retval HAL_status
  */
__weak HAL_StatusTypeDef MX_DFSDM1_ClockConfig(DFSDM_Channel_HandleTypeDef *hDfsdmChannel, uint32_t SampleRate)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b0b0      	sub	sp, #192	; 0xc0
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hDfsdmChannel);

  HAL_StatusTypeDef ret = HAL_OK;
 80013ea:	2300      	movs	r3, #0
 80013ec:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;

  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 80013f0:	f107 0308 	add.w	r3, r7, #8
 80013f4:	4618      	mov	r0, r3
 80013f6:	f006 f875 	bl	80074e4 <HAL_RCCEx_GetPeriphCLKConfig>

  /* Configure the PLL2 according to the requested audio frequency if not already done by other instances */
  if ((Audio_Out_Ctx[0].State == AUDIO_OUT_STATE_RESET) && (Audio_In_Ctx[0].State == AUDIO_IN_STATE_RESET))
 80013fa:	4b0a      	ldr	r3, [pc, #40]	; (8001424 <MX_DFSDM1_ClockConfig+0x44>)
 80013fc:	69db      	ldr	r3, [r3, #28]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d10a      	bne.n	8001418 <MX_DFSDM1_ClockConfig+0x38>
 8001402:	4b09      	ldr	r3, [pc, #36]	; (8001428 <MX_DFSDM1_ClockConfig+0x48>)
 8001404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001406:	2b00      	cmp	r3, #0
 8001408:	d106      	bne.n	8001418 <MX_DFSDM1_ClockConfig+0x38>
  {
    ret = MX_SAI1_ClockConfig(&haudio_in_sai[0], SampleRate);
 800140a:	6839      	ldr	r1, [r7, #0]
 800140c:	4807      	ldr	r0, [pc, #28]	; (800142c <MX_DFSDM1_ClockConfig+0x4c>)
 800140e:	f7ff f80f 	bl	8000430 <MX_SAI1_ClockConfig>
 8001412:	4603      	mov	r3, r0
 8001414:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
  }

  return ret;
 8001418:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
}
 800141c:	4618      	mov	r0, r3
 800141e:	37c0      	adds	r7, #192	; 0xc0
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	24000c8c 	.word	0x24000c8c
 8001428:	24000cb0 	.word	0x24000cb0
 800142c:	2400054c 	.word	0x2400054c

08001430 <MX_SAI4_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SAI4_ClockConfig(SAI_HandleTypeDef *hsai, uint32_t SampleRate)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b0b0      	sub	sp, #192	; 0xc0
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsai);

  HAL_StatusTypeDef ret = HAL_OK;
 800143a:	2300      	movs	r3, #0
 800143c:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;
  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 8001440:	f107 0308 	add.w	r3, r7, #8
 8001444:	4618      	mov	r0, r3
 8001446:	f006 f84d 	bl	80074e4 <HAL_RCCEx_GetPeriphCLKConfig>

  /* Set the PLL configuration according to the audio frequency */
  if((SampleRate == AUDIO_FREQUENCY_11K) || (SampleRate == AUDIO_FREQUENCY_22K) || (SampleRate == AUDIO_FREQUENCY_44K))
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	f642 3211 	movw	r2, #11025	; 0x2b11
 8001450:	4293      	cmp	r3, r2
 8001452:	d009      	beq.n	8001468 <MX_SAI4_ClockConfig+0x38>
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	f245 6222 	movw	r2, #22050	; 0x5622
 800145a:	4293      	cmp	r3, r2
 800145c:	d004      	beq.n	8001468 <MX_SAI4_ClockConfig+0x38>
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	f64a 4244 	movw	r2, #44100	; 0xac44
 8001464:	4293      	cmp	r3, r2
 8001466:	d105      	bne.n	8001474 <MX_SAI4_ClockConfig+0x44>
  {
    rcc_ex_clk_init_struct.PLL2.PLL2P = 24;
 8001468:	2318      	movs	r3, #24
 800146a:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.PLL2.PLL2N = 271;
 800146c:	f240 130f 	movw	r3, #271	; 0x10f
 8001470:	613b      	str	r3, [r7, #16]
 8001472:	e004      	b.n	800147e <MX_SAI4_ClockConfig+0x4e>
  }
  else /* AUDIO_FREQUENCY_8K, AUDIO_FREQUENCY_16K, AUDIO_FREQUENCY_32K, AUDIO_FREQUENCY_48K, AUDIO_FREQUENCY_96K */
  {
    rcc_ex_clk_init_struct.PLL2.PLL2P = 7;
 8001474:	2307      	movs	r3, #7
 8001476:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.PLL2.PLL2N = 344;
 8001478:	f44f 73ac 	mov.w	r3, #344	; 0x158
 800147c:	613b      	str	r3, [r7, #16]
  }

  /* SAI clock config */
  rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI4A;
 800147e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001482:	60bb      	str	r3, [r7, #8]
  rcc_ex_clk_init_struct.Sai4AClockSelection = RCC_SAI4ACLKSOURCE_PLL2;
 8001484:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001488:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  rcc_ex_clk_init_struct.PLL2.PLL2Q = 1;
 800148c:	2301      	movs	r3, #1
 800148e:	61bb      	str	r3, [r7, #24]
  rcc_ex_clk_init_struct.PLL2.PLL2R = 1;
 8001490:	2301      	movs	r3, #1
 8001492:	61fb      	str	r3, [r7, #28]
  rcc_ex_clk_init_struct.PLL2.PLL2M = 25;
 8001494:	2319      	movs	r3, #25
 8001496:	60fb      	str	r3, [r7, #12]
  if(HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct) != HAL_OK)
 8001498:	f107 0308 	add.w	r3, r7, #8
 800149c:	4618      	mov	r0, r3
 800149e:	f005 f927 	bl	80066f0 <HAL_RCCEx_PeriphCLKConfig>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d002      	beq.n	80014ae <MX_SAI4_ClockConfig+0x7e>
  {
    ret = HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
  }

  return ret;
 80014ae:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	37c0      	adds	r7, #192	; 0xc0
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <MX_DFSDM1_Init>:
  *           1MHZ < CLK(micro) < 3.2MHZ (TYP 2.4MHZ for MP34DT01TR)
  *         - Oversampling = CLK(input DFSDM)/(Clock_Divider * AudioFreq)
  * @retval HAL_status
  */
__weak HAL_StatusTypeDef MX_DFSDM1_Init(DFSDM_Filter_HandleTypeDef *hDfsdmFilter, DFSDM_Channel_HandleTypeDef *hDfsdmChannel, MX_DFSDM_Config *MXConfig)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b084      	sub	sp, #16
 80014be:	af00      	add	r7, sp, #0
 80014c0:	60f8      	str	r0, [r7, #12]
 80014c2:	60b9      	str	r1, [r7, #8]
 80014c4:	607a      	str	r2, [r7, #4]
  /* MIC filters  initialization */
  hDfsdmFilter->Instance                          = MXConfig->FilterInstance;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	601a      	str	r2, [r3, #0]
  hDfsdmFilter->Init.RegularParam.Trigger         = MXConfig->RegularTrigger;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685a      	ldr	r2, [r3, #4]
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	605a      	str	r2, [r3, #4]
  hDfsdmFilter->Init.RegularParam.FastMode        = ENABLE;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	2201      	movs	r2, #1
 80014da:	721a      	strb	r2, [r3, #8]
  hDfsdmFilter->Init.RegularParam.DmaMode         = ENABLE;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	2201      	movs	r2, #1
 80014e0:	725a      	strb	r2, [r3, #9]
  hDfsdmFilter->Init.InjectedParam.Trigger        = DFSDM_FILTER_SW_TRIGGER;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	2200      	movs	r2, #0
 80014e6:	60da      	str	r2, [r3, #12]
  hDfsdmFilter->Init.InjectedParam.ScanMode       = DISABLE;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	2200      	movs	r2, #0
 80014ec:	741a      	strb	r2, [r3, #16]
  hDfsdmFilter->Init.InjectedParam.DmaMode        = DISABLE;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	2200      	movs	r2, #0
 80014f2:	745a      	strb	r2, [r3, #17]
  hDfsdmFilter->Init.InjectedParam.ExtTrigger     = DFSDM_FILTER_EXT_TRIG_TIM8_TRGO;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014fa:	615a      	str	r2, [r3, #20]
  hDfsdmFilter->Init.InjectedParam.ExtTriggerEdge = DFSDM_FILTER_EXT_TRIG_BOTH_EDGES;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8001502:	619a      	str	r2, [r3, #24]
  hDfsdmFilter->Init.FilterParam.SincOrder        = MXConfig->SincOrder;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	689a      	ldr	r2, [r3, #8]
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	61da      	str	r2, [r3, #28]
  hDfsdmFilter->Init.FilterParam.Oversampling     = MXConfig->Oversampling;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	68da      	ldr	r2, [r3, #12]
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	621a      	str	r2, [r3, #32]
  hDfsdmFilter->Init.FilterParam.IntOversampling  = 1;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	2201      	movs	r2, #1
 8001518:	625a      	str	r2, [r3, #36]	; 0x24

  if(HAL_DFSDM_FilterInit(hDfsdmFilter) != HAL_OK)
 800151a:	68f8      	ldr	r0, [r7, #12]
 800151c:	f001 f984 	bl	8002828 <HAL_DFSDM_FilterInit>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_DFSDM1_Init+0x70>
  {
    return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e042      	b.n	80015b0 <MX_DFSDM1_Init+0xf6>
  }

  /* MIC channels initialization */
  hDfsdmChannel->Instance                      = MXConfig->ChannelInstance;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	691a      	ldr	r2, [r3, #16]
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	601a      	str	r2, [r3, #0]
  hDfsdmChannel->Init.OutputClock.Activation   = ENABLE;
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	2201      	movs	r2, #1
 8001536:	711a      	strb	r2, [r3, #4]
  hDfsdmChannel->Init.OutputClock.Selection    = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800153e:	609a      	str	r2, [r3, #8]
  hDfsdmChannel->Init.OutputClock.Divider      = MXConfig->ClockDivider;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6a1a      	ldr	r2, [r3, #32]
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	60da      	str	r2, [r3, #12]
  hDfsdmChannel->Init.Input.Multiplexer        = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	2200      	movs	r2, #0
 800154c:	611a      	str	r2, [r3, #16]
  hDfsdmChannel->Init.Input.DataPacking        = DFSDM_CHANNEL_STANDARD_MODE;
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	2200      	movs	r2, #0
 8001552:	615a      	str	r2, [r3, #20]
  hDfsdmChannel->Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	2204      	movs	r2, #4
 8001558:	621a      	str	r2, [r3, #32]
  hDfsdmChannel->Init.Awd.FilterOrder          = DFSDM_CHANNEL_SINC1_ORDER;
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001560:	625a      	str	r2, [r3, #36]	; 0x24
  hDfsdmChannel->Init.Awd.Oversampling         = 10;
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	220a      	movs	r2, #10
 8001566:	629a      	str	r2, [r3, #40]	; 0x28
  hDfsdmChannel->Init.Offset                   = 0;
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	2200      	movs	r2, #0
 800156c:	62da      	str	r2, [r3, #44]	; 0x2c
  hDfsdmChannel->Init.RightBitShift            = MXConfig->RightBitShift;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	631a      	str	r2, [r3, #48]	; 0x30
  hDfsdmChannel->Init.Input.Pins               = MXConfig->DigitalMicPins;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	695a      	ldr	r2, [r3, #20]
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	619a      	str	r2, [r3, #24]
  hDfsdmChannel->Init.SerialInterface.Type     = MXConfig->DigitalMicType;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	699a      	ldr	r2, [r3, #24]
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	61da      	str	r2, [r3, #28]

  if(HAL_OK != HAL_DFSDM_ChannelInit(hDfsdmChannel))
 8001586:	68b8      	ldr	r0, [r7, #8]
 8001588:	f001 f886 	bl	8002698 <HAL_DFSDM_ChannelInit>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_DFSDM1_Init+0xdc>
  {
    return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e00c      	b.n	80015b0 <MX_DFSDM1_Init+0xf6>
  }

  /* Configure injected channel */
  if(HAL_DFSDM_FilterConfigRegChannel(hDfsdmFilter, MXConfig->Channel4Filter, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	69db      	ldr	r3, [r3, #28]
 800159a:	2201      	movs	r2, #1
 800159c:	4619      	mov	r1, r3
 800159e:	68f8      	ldr	r0, [r7, #12]
 80015a0:	f001 fa28 	bl	80029f4 <HAL_DFSDM_FilterConfigRegChannel>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_DFSDM1_Init+0xf4>
  {
    return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e000      	b.n	80015b0 <MX_DFSDM1_Init+0xf6>
  }

  return HAL_OK;
 80015ae:	2300      	movs	r3, #0
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3710      	adds	r7, #16
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <MX_SAI1_Block_A_Init>:
  * @param  MXConfig SAI configuration structure
  * @note   Being __weak it can be overwritten by the application
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SAI1_Block_A_Init(SAI_HandleTypeDef* hsai, MX_SAI_Config *MXConfig)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80015c2:	2300      	movs	r3, #0
 80015c4:	73fb      	strb	r3, [r7, #15]

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(hsai);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80015d4:	601a      	str	r2, [r3, #0]

  /* Configure SAI1_Block_B */
  hsai->Init.AudioFrequency         = MXConfig->AudioFrequency;
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	621a      	str	r2, [r3, #32]
  hsai->Init.MonoStereoMode         = MXConfig->MonoStereoMode;
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	68da      	ldr	r2, [r3, #12]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai->Init.AudioMode              = MXConfig->AudioMode;
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685a      	ldr	r2, [r3, #4]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	605a      	str	r2, [r3, #4]
  hsai->Init.NoDivider              = SAI_MASTERDIVIDER_ENABLE;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2200      	movs	r2, #0
 80015f2:	619a      	str	r2, [r3, #24]
  hsai->Init.Protocol               = SAI_FREE_PROTOCOL;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2200      	movs	r2, #0
 80015f8:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.DataSize               = MXConfig->DataSize;
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	689a      	ldr	r2, [r3, #8]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->Init.FirstBit               = SAI_FIRSTBIT_MSB;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2200      	movs	r2, #0
 8001606:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->Init.ClockStrobing          = MXConfig->ClockStrobing;
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	691a      	ldr	r2, [r3, #16]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	651a      	str	r2, [r3, #80]	; 0x50
  hsai->Init.Synchro                = MXConfig->Synchro;
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	695a      	ldr	r2, [r3, #20]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	609a      	str	r2, [r3, #8]
  hsai->Init.OutputDrive            = MXConfig->OutputDrive;
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	699a      	ldr	r2, [r3, #24]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	615a      	str	r2, [r3, #20]
  hsai->Init.FIFOThreshold          = SAI_FIFOTHRESHOLD_1QF;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2201      	movs	r2, #1
 8001624:	61da      	str	r2, [r3, #28]
  hsai->Init.SynchroExt             = MXConfig->SynchroExt;
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	69da      	ldr	r2, [r3, #28]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	60da      	str	r2, [r3, #12]
  hsai->Init.CompandingMode         = SAI_NOCOMPANDING;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.TriState               = SAI_OUTPUT_RELEASED;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2210      	movs	r2, #16
 8001638:	635a      	str	r2, [r3, #52]	; 0x34
  hsai->Init.Mckdiv                 = 0;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2200      	movs	r2, #0
 800163e:	625a      	str	r2, [r3, #36]	; 0x24
  hsai->Init.MckOutput              = SAI_MCK_OUTPUT_ENABLE;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001646:	611a      	str	r2, [r3, #16]
  hsai->Init.MckOverSampling        = SAI_MCK_OVERSAMPLING_DISABLE;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2200      	movs	r2, #0
 800164c:	629a      	str	r2, [r3, #40]	; 0x28
  hsai->Init.PdmInit.Activation     = DISABLE;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2200      	movs	r2, #0
 8001652:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Configure SAI_Block_x Frame */
  hsai->FrameInit.FrameLength       = MXConfig->FrameLength;
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	6a1a      	ldr	r2, [r3, #32]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->FrameInit.ActiveFrameLength = MXConfig->ActiveFrameLength;
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->FrameInit.FSDefinition      = SAI_FS_CHANNEL_IDENTIFICATION;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800166c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity        = SAI_FS_ACTIVE_LOW;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2200      	movs	r2, #0
 8001672:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset          = SAI_FS_BEFOREFIRSTBIT;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800167a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure SAI Block_x Slot */
  hsai->SlotInit.FirstBitOffset     = 0;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2200      	movs	r2, #0
 8001680:	669a      	str	r2, [r3, #104]	; 0x68
  if ((MXConfig->DataSize == AUDIO_RESOLUTION_24B) || (MXConfig->DataSize == AUDIO_RESOLUTION_32B))
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	2b18      	cmp	r3, #24
 8001688:	d003      	beq.n	8001692 <MX_SAI1_Block_A_Init+0xda>
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	2b20      	cmp	r3, #32
 8001690:	d103      	bne.n	800169a <MX_SAI1_Block_A_Init+0xe2>
  {
    hsai->SlotInit.SlotSize         = SAI_SLOTSIZE_32B;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2280      	movs	r2, #128	; 0x80
 8001696:	66da      	str	r2, [r3, #108]	; 0x6c
 8001698:	e002      	b.n	80016a0 <MX_SAI1_Block_A_Init+0xe8>
  }
  else
  {
    hsai->SlotInit.SlotSize         = SAI_SLOTSIZE_16B;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2240      	movs	r2, #64	; 0x40
 800169e:	66da      	str	r2, [r3, #108]	; 0x6c
  }
  hsai->SlotInit.SlotNumber         = 2;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2202      	movs	r2, #2
 80016a4:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive        = MXConfig->SlotActive;
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	675a      	str	r2, [r3, #116]	; 0x74

  if(HAL_SAI_Init(hsai) != HAL_OK)
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f007 f9fe 	bl	8008ab0 <HAL_SAI_Init>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <MX_SAI1_Block_A_Init+0x106>
  {
    ret = HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80016be:	7bfb      	ldrb	r3, [r7, #15]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3710      	adds	r7, #16
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <MX_SAI4_Block_A_Init>:
  * @param  MXConfig SAI configuration structure
  * @note   Being __weak it can be overwritten by the application
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SAI4_Block_A_Init(SAI_HandleTypeDef* hsai, MX_SAI_Config *MXConfig)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80016d2:	2300      	movs	r3, #0
 80016d4:	73fb      	strb	r3, [r7, #15]

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(hsai);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80016e4:	601a      	str	r2, [r3, #0]

  /* Configure SAI4_Block_A */
  hsai->Init.AudioFrequency         = MXConfig->AudioFrequency;
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	621a      	str	r2, [r3, #32]
  hsai->Init.MonoStereoMode         = MXConfig->MonoStereoMode;
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	68da      	ldr	r2, [r3, #12]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai->Init.AudioMode              = MXConfig->AudioMode;
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	685a      	ldr	r2, [r3, #4]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	605a      	str	r2, [r3, #4]
  hsai->Init.NoDivider              = SAI_MASTERDIVIDER_DISABLE;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001704:	619a      	str	r2, [r3, #24]
  hsai->Init.Protocol               = SAI_FREE_PROTOCOL;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.DataSize               = MXConfig->DataSize;
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	689a      	ldr	r2, [r3, #8]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->Init.FirstBit               = SAI_FIRSTBIT_LSB;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f44f 7280 	mov.w	r2, #256	; 0x100
 800171a:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->Init.ClockStrobing          = MXConfig->ClockStrobing;
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	691a      	ldr	r2, [r3, #16]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	651a      	str	r2, [r3, #80]	; 0x50
  hsai->Init.Synchro                = MXConfig->Synchro;
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	695a      	ldr	r2, [r3, #20]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	609a      	str	r2, [r3, #8]
  hsai->Init.OutputDrive            = MXConfig->OutputDrive;
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	699a      	ldr	r2, [r3, #24]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	615a      	str	r2, [r3, #20]
  hsai->Init.FIFOThreshold          = SAI_FIFOTHRESHOLD_1QF;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2201      	movs	r2, #1
 8001738:	61da      	str	r2, [r3, #28]
  hsai->Init.SynchroExt             = MXConfig->SynchroExt;
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	69da      	ldr	r2, [r3, #28]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	60da      	str	r2, [r3, #12]
  hsai->Init.CompandingMode         = SAI_NOCOMPANDING;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2200      	movs	r2, #0
 8001746:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.TriState               = SAI_OUTPUT_RELEASED;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2210      	movs	r2, #16
 800174c:	635a      	str	r2, [r3, #52]	; 0x34
  hsai->Init.Mckdiv                 = 0;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2200      	movs	r2, #0
 8001752:	625a      	str	r2, [r3, #36]	; 0x24
  hsai->Init.PdmInit.Activation     = ENABLE;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2201      	movs	r2, #1
 8001758:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai->Init.PdmInit.MicPairsNbr    = 1;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2201      	movs	r2, #1
 8001760:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai->Init.PdmInit.ClockEnable    = SAI_PDM_CLOCK1_ENABLE;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001768:	641a      	str	r2, [r3, #64]	; 0x40


  /* Configure SAI_Block_x Frame */
  hsai->FrameInit.FrameLength       = MXConfig->FrameLength;
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	6a1a      	ldr	r2, [r3, #32]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->FrameInit.ActiveFrameLength = MXConfig->ActiveFrameLength;
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->FrameInit.FSDefinition      = SAI_FS_STARTFRAME;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2200      	movs	r2, #0
 800177e:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity        = SAI_FS_ACTIVE_HIGH;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001786:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset          = SAI_FS_FIRSTBIT;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2200      	movs	r2, #0
 800178c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure SAI Block_x Slot */
  hsai->SlotInit.FirstBitOffset     = 0;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2200      	movs	r2, #0
 8001792:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotSize           = SAI_SLOTSIZE_DATASIZE;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2200      	movs	r2, #0
 8001798:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai->SlotInit.SlotNumber         = 1;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2201      	movs	r2, #1
 800179e:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive        = MXConfig->SlotActive;
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	675a      	str	r2, [r3, #116]	; 0x74

  if(HAL_SAI_Init(hsai) != HAL_OK)
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f007 f981 	bl	8008ab0 <HAL_SAI_Init>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_SAI4_Block_A_Init+0xf0>
  {
    ret = HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	73fb      	strb	r3, [r7, #15]
  }
/* Enable SAI peripheral */
  __HAL_SAI_ENABLE(hsai);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80017c6:	601a      	str	r2, [r3, #0]

  return ret;
 80017c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3710      	adds	r7, #16
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
	...

080017d4 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks>:
  * @brief Default BSP AUDIO IN Msp Callbacks
  * @param Instance BSP AUDIO IN Instance
  * @retval BSP status
  */
int32_t BSP_AUDIO_IN_RegisterDefaultMspCallbacks (uint32_t Instance)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80017dc:	2300      	movs	r3, #0
 80017de:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  if(Instance == 1U)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d12c      	bne.n	8001840 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x6c>
  {
    for(i = 0; i < DFSDM_MIC_NUMBER; i ++)
 80017e6:	2300      	movs	r3, #0
 80017e8:	60bb      	str	r3, [r7, #8]
 80017ea:	e025      	b.n	8001838 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x64>
    {
      if(((Audio_In_Ctx[Instance].Device >> i) & AUDIO_IN_DEVICE_DIGITAL_MIC1) == AUDIO_IN_DEVICE_DIGITAL_MIC1)
 80017ec:	4952      	ldr	r1, [pc, #328]	; (8001938 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x164>)
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	4613      	mov	r3, r2
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	4413      	add	r3, r2
 80017f6:	011b      	lsls	r3, r3, #4
 80017f8:	440b      	add	r3, r1
 80017fa:	3304      	adds	r3, #4
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	fa22 f303 	lsr.w	r3, r2, r3
 8001804:	f003 0310 	and.w	r3, r3, #16
 8001808:	2b00      	cmp	r3, #0
 800180a:	d012      	beq.n	8001832 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x5e>
      {
        __HAL_DFSDM_CHANNEL_RESET_HANDLE_STATE(&haudio_in_dfsdm_channel[i]);
 800180c:	494b      	ldr	r1, [pc, #300]	; (800193c <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x168>)
 800180e:	68ba      	ldr	r2, [r7, #8]
 8001810:	4613      	mov	r3, r2
 8001812:	00db      	lsls	r3, r3, #3
 8001814:	1a9b      	subs	r3, r3, r2
 8001816:	00db      	lsls	r3, r3, #3
 8001818:	440b      	add	r3, r1
 800181a:	3334      	adds	r3, #52	; 0x34
 800181c:	2200      	movs	r2, #0
 800181e:	701a      	strb	r2, [r3, #0]
        __HAL_DFSDM_FILTER_RESET_HANDLE_STATE(&haudio_in_dfsdm_filter[i]);
 8001820:	4a47      	ldr	r2, [pc, #284]	; (8001940 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x16c>)
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	2154      	movs	r1, #84	; 0x54
 8001826:	fb01 f303 	mul.w	r3, r1, r3
 800182a:	4413      	add	r3, r2
 800182c:	334c      	adds	r3, #76	; 0x4c
 800182e:	2200      	movs	r2, #0
 8001830:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < DFSDM_MIC_NUMBER; i ++)
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	3301      	adds	r3, #1
 8001836:	60bb      	str	r3, [r7, #8]
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	2b03      	cmp	r3, #3
 800183c:	d9d6      	bls.n	80017ec <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x18>
 800183e:	e068      	b.n	8001912 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x13e>
        }
#endif /* (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)  */
      }
    }
  }
  else if(Instance == 0U)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d162      	bne.n	800190c <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x138>
  {
    __HAL_SAI_RESET_HANDLE_STATE(&haudio_in_sai[Instance]);
 8001846:	4a3f      	ldr	r2, [pc, #252]	; (8001944 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x170>)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	21b4      	movs	r1, #180	; 0xb4
 800184c:	fb01 f303 	mul.w	r3, r1, r3
 8001850:	4413      	add	r3, r2
 8001852:	3391      	adds	r3, #145	; 0x91
 8001854:	2200      	movs	r2, #0
 8001856:	701a      	strb	r2, [r3, #0]
 8001858:	4a3a      	ldr	r2, [pc, #232]	; (8001944 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x170>)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	21b4      	movs	r1, #180	; 0xb4
 800185e:	fb01 f303 	mul.w	r3, r1, r3
 8001862:	4413      	add	r3, r2
 8001864:	33ac      	adds	r3, #172	; 0xac
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	4a36      	ldr	r2, [pc, #216]	; (8001944 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x170>)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	21b4      	movs	r1, #180	; 0xb4
 8001870:	fb01 f303 	mul.w	r3, r1, r3
 8001874:	4413      	add	r3, r2
 8001876:	33b0      	adds	r3, #176	; 0xb0
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
    __HAL_SAI_RESET_HANDLE_STATE(&haudio_out_sai);
 800187c:	4b32      	ldr	r3, [pc, #200]	; (8001948 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x174>)
 800187e:	2200      	movs	r2, #0
 8001880:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
 8001884:	4b30      	ldr	r3, [pc, #192]	; (8001948 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x174>)
 8001886:	2200      	movs	r2, #0
 8001888:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 800188c:	4b2e      	ldr	r3, [pc, #184]	; (8001948 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x174>)
 800188e:	2200      	movs	r2, #0
 8001890:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1U)
    /* Register MspInit/MspDeInit Callbacks */
    if(HAL_SAI_RegisterCallback(&haudio_in_sai[Instance], HAL_SAI_MSPINIT_CB_ID, SAI_MspInit) != HAL_OK)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	22b4      	movs	r2, #180	; 0xb4
 8001898:	fb02 f303 	mul.w	r3, r2, r3
 800189c:	4a29      	ldr	r2, [pc, #164]	; (8001944 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x170>)
 800189e:	4413      	add	r3, r2
 80018a0:	4a2a      	ldr	r2, [pc, #168]	; (800194c <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x178>)
 80018a2:	2105      	movs	r1, #5
 80018a4:	4618      	mov	r0, r3
 80018a6:	f007 fb3f 	bl	8008f28 <HAL_SAI_RegisterCallback>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d003      	beq.n	80018b8 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0xe4>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80018b0:	f06f 0303 	mvn.w	r3, #3
 80018b4:	60fb      	str	r3, [r7, #12]
 80018b6:	e02c      	b.n	8001912 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x13e>
    }
    else if(HAL_SAI_RegisterCallback(&haudio_out_sai, HAL_SAI_MSPINIT_CB_ID, SAI_MspInit) != HAL_OK)
 80018b8:	4a24      	ldr	r2, [pc, #144]	; (800194c <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x178>)
 80018ba:	2105      	movs	r1, #5
 80018bc:	4822      	ldr	r0, [pc, #136]	; (8001948 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x174>)
 80018be:	f007 fb33 	bl	8008f28 <HAL_SAI_RegisterCallback>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d003      	beq.n	80018d0 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0xfc>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80018c8:	f06f 0303 	mvn.w	r3, #3
 80018cc:	60fb      	str	r3, [r7, #12]
 80018ce:	e020      	b.n	8001912 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x13e>
    }
    else if(HAL_SAI_RegisterCallback(&haudio_in_sai[Instance], HAL_SAI_MSPDEINIT_CB_ID, SAI_MspDeInit) != HAL_OK)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	22b4      	movs	r2, #180	; 0xb4
 80018d4:	fb02 f303 	mul.w	r3, r2, r3
 80018d8:	4a1a      	ldr	r2, [pc, #104]	; (8001944 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x170>)
 80018da:	4413      	add	r3, r2
 80018dc:	4a1c      	ldr	r2, [pc, #112]	; (8001950 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x17c>)
 80018de:	2106      	movs	r1, #6
 80018e0:	4618      	mov	r0, r3
 80018e2:	f007 fb21 	bl	8008f28 <HAL_SAI_RegisterCallback>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d003      	beq.n	80018f4 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x120>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80018ec:	f06f 0303 	mvn.w	r3, #3
 80018f0:	60fb      	str	r3, [r7, #12]
 80018f2:	e00e      	b.n	8001912 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x13e>
    }
    else if(HAL_SAI_RegisterCallback(&haudio_out_sai, HAL_SAI_MSPDEINIT_CB_ID, SAI_MspDeInit) != HAL_OK)
 80018f4:	4a16      	ldr	r2, [pc, #88]	; (8001950 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x17c>)
 80018f6:	2106      	movs	r1, #6
 80018f8:	4813      	ldr	r0, [pc, #76]	; (8001948 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x174>)
 80018fa:	f007 fb15 	bl	8008f28 <HAL_SAI_RegisterCallback>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d006      	beq.n	8001912 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x13e>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001904:	f06f 0303 	mvn.w	r3, #3
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	e002      	b.n	8001912 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x13e>
    }
#endif /* (USE_HAL_SAI_REGISTER_CALLBACKS == 1U) */
  }
  else
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800190c:	f06f 0301 	mvn.w	r3, #1
 8001910:	60fb      	str	r3, [r7, #12]
  }

  if(ret == BSP_ERROR_NONE)
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d109      	bne.n	800192c <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x158>
  {
    Audio_In_Ctx[Instance].IsMspCallbacksValid = 1;
 8001918:	4907      	ldr	r1, [pc, #28]	; (8001938 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x164>)
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	4613      	mov	r3, r2
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	4413      	add	r3, r2
 8001922:	011b      	lsls	r3, r3, #4
 8001924:	440b      	add	r3, r1
 8001926:	332c      	adds	r3, #44	; 0x2c
 8001928:	2201      	movs	r2, #1
 800192a:	601a      	str	r2, [r3, #0]
  }

  /* Return BSP status */
  return ret;
 800192c:	68fb      	ldr	r3, [r7, #12]
}
 800192e:	4618      	mov	r0, r3
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	24000cb0 	.word	0x24000cb0
 800193c:	24000a5c 	.word	0x24000a5c
 8001940:	24000b3c 	.word	0x24000b3c
 8001944:	2400054c 	.word	0x2400054c
 8001948:	24000498 	.word	0x24000498
 800194c:	080004c1 	.word	0x080004c1
 8001950:	08000995 	.word	0x08000995

08001954 <BSP_AUDIO_IN_PDMToPCM_Init>:
  * @param  ChnlNbrIn  Number of input audio channels in the PDM buffer
  * @param  ChnlNbrOut Number of desired output audio channels in the  resulting PCM buffer
  * @retval BSP status
  */
int32_t BSP_AUDIO_IN_PDMToPCM_Init(uint32_t Instance, uint32_t AudioFreq, uint32_t ChnlNbrIn, uint32_t ChnlNbrOut)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b086      	sub	sp, #24
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	607a      	str	r2, [r7, #4]
 8001960:	603b      	str	r3, [r7, #0]
  uint32_t index = 0;
 8001962:	2300      	movs	r3, #0
 8001964:	617b      	str	r3, [r7, #20]

  if(Instance != 1U)
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2b01      	cmp	r3, #1
 800196a:	d002      	beq.n	8001972 <BSP_AUDIO_IN_PDMToPCM_Init+0x1e>
  {
    return BSP_ERROR_WRONG_PARAM;
 800196c:	f06f 0301 	mvn.w	r3, #1
 8001970:	e085      	b.n	8001a7e <BSP_AUDIO_IN_PDMToPCM_Init+0x12a>
  }
  else
  {
    /* Enable CRC peripheral to unlock the PDM library */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001972:	4b45      	ldr	r3, [pc, #276]	; (8001a88 <BSP_AUDIO_IN_PDMToPCM_Init+0x134>)
 8001974:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001978:	4a43      	ldr	r2, [pc, #268]	; (8001a88 <BSP_AUDIO_IN_PDMToPCM_Init+0x134>)
 800197a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800197e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001982:	4b41      	ldr	r3, [pc, #260]	; (8001a88 <BSP_AUDIO_IN_PDMToPCM_Init+0x134>)
 8001984:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001988:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800198c:	613b      	str	r3, [r7, #16]
 800198e:	693b      	ldr	r3, [r7, #16]

    for(index = 0; index < ChnlNbrIn; index++)
 8001990:	2300      	movs	r3, #0
 8001992:	617b      	str	r3, [r7, #20]
 8001994:	e06e      	b.n	8001a74 <BSP_AUDIO_IN_PDMToPCM_Init+0x120>
    {
      /* Init PDM filters */
      PDM_FilterHandler[index].bit_order  = PDM_FILTER_BIT_ORDER_MSB;
 8001996:	4a3d      	ldr	r2, [pc, #244]	; (8001a8c <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	214c      	movs	r1, #76	; 0x4c
 800199c:	fb01 f303 	mul.w	r3, r1, r3
 80019a0:	4413      	add	r3, r2
 80019a2:	2201      	movs	r2, #1
 80019a4:	801a      	strh	r2, [r3, #0]
      PDM_FilterHandler[index].endianness = PDM_FILTER_ENDIANNESS_LE;
 80019a6:	4a39      	ldr	r2, [pc, #228]	; (8001a8c <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	214c      	movs	r1, #76	; 0x4c
 80019ac:	fb01 f303 	mul.w	r3, r1, r3
 80019b0:	4413      	add	r3, r2
 80019b2:	3302      	adds	r3, #2
 80019b4:	2200      	movs	r2, #0
 80019b6:	801a      	strh	r2, [r3, #0]
      PDM_FilterHandler[index].high_pass_tap = 2122358088;
 80019b8:	4a34      	ldr	r2, [pc, #208]	; (8001a8c <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	214c      	movs	r1, #76	; 0x4c
 80019be:	fb01 f303 	mul.w	r3, r1, r3
 80019c2:	4413      	add	r3, r2
 80019c4:	3304      	adds	r3, #4
 80019c6:	4a32      	ldr	r2, [pc, #200]	; (8001a90 <BSP_AUDIO_IN_PDMToPCM_Init+0x13c>)
 80019c8:	601a      	str	r2, [r3, #0]
      PDM_FilterHandler[index].out_ptr_channels = ChnlNbrOut;
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	b298      	uxth	r0, r3
 80019ce:	4a2f      	ldr	r2, [pc, #188]	; (8001a8c <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	214c      	movs	r1, #76	; 0x4c
 80019d4:	fb01 f303 	mul.w	r3, r1, r3
 80019d8:	4413      	add	r3, r2
 80019da:	330a      	adds	r3, #10
 80019dc:	4602      	mov	r2, r0
 80019de:	801a      	strh	r2, [r3, #0]
      PDM_FilterHandler[index].in_ptr_channels  = ChnlNbrIn;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	b298      	uxth	r0, r3
 80019e4:	4a29      	ldr	r2, [pc, #164]	; (8001a8c <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	214c      	movs	r1, #76	; 0x4c
 80019ea:	fb01 f303 	mul.w	r3, r1, r3
 80019ee:	4413      	add	r3, r2
 80019f0:	3308      	adds	r3, #8
 80019f2:	4602      	mov	r2, r0
 80019f4:	801a      	strh	r2, [r3, #0]
      PDM_Filter_Init((PDM_Filter_Handler_t *)(&PDM_FilterHandler[index]));
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	224c      	movs	r2, #76	; 0x4c
 80019fa:	fb02 f303 	mul.w	r3, r2, r3
 80019fe:	4a23      	ldr	r2, [pc, #140]	; (8001a8c <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 8001a00:	4413      	add	r3, r2
 8001a02:	4618      	mov	r0, r3
 8001a04:	f009 fe6a 	bl	800b6dc <PDM_Filter_Init>

      /* PDM lib config phase */
      PDM_FilterConfig[index].output_samples_number = AudioFreq/1000;
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	4a22      	ldr	r2, [pc, #136]	; (8001a94 <BSP_AUDIO_IN_PDMToPCM_Init+0x140>)
 8001a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a10:	099b      	lsrs	r3, r3, #6
 8001a12:	b298      	uxth	r0, r3
 8001a14:	4920      	ldr	r1, [pc, #128]	; (8001a98 <BSP_AUDIO_IN_PDMToPCM_Init+0x144>)
 8001a16:	697a      	ldr	r2, [r7, #20]
 8001a18:	4613      	mov	r3, r2
 8001a1a:	005b      	lsls	r3, r3, #1
 8001a1c:	4413      	add	r3, r2
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	440b      	add	r3, r1
 8001a22:	3302      	adds	r3, #2
 8001a24:	4602      	mov	r2, r0
 8001a26:	801a      	strh	r2, [r3, #0]
      PDM_FilterConfig[index].mic_gain = 24;
 8001a28:	491b      	ldr	r1, [pc, #108]	; (8001a98 <BSP_AUDIO_IN_PDMToPCM_Init+0x144>)
 8001a2a:	697a      	ldr	r2, [r7, #20]
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	4413      	add	r3, r2
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	440b      	add	r3, r1
 8001a36:	3304      	adds	r3, #4
 8001a38:	2218      	movs	r2, #24
 8001a3a:	801a      	strh	r2, [r3, #0]
      PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_32;
 8001a3c:	4916      	ldr	r1, [pc, #88]	; (8001a98 <BSP_AUDIO_IN_PDMToPCM_Init+0x144>)
 8001a3e:	697a      	ldr	r2, [r7, #20]
 8001a40:	4613      	mov	r3, r2
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	4413      	add	r3, r2
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	440b      	add	r3, r1
 8001a4a:	2207      	movs	r2, #7
 8001a4c:	801a      	strh	r2, [r3, #0]
      PDM_Filter_setConfig((PDM_Filter_Handler_t *)&PDM_FilterHandler[index], &PDM_FilterConfig[index]);
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	224c      	movs	r2, #76	; 0x4c
 8001a52:	fb02 f303 	mul.w	r3, r2, r3
 8001a56:	4a0d      	ldr	r2, [pc, #52]	; (8001a8c <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 8001a58:	1898      	adds	r0, r3, r2
 8001a5a:	697a      	ldr	r2, [r7, #20]
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	4413      	add	r3, r2
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	4a0c      	ldr	r2, [pc, #48]	; (8001a98 <BSP_AUDIO_IN_PDMToPCM_Init+0x144>)
 8001a66:	4413      	add	r3, r2
 8001a68:	4619      	mov	r1, r3
 8001a6a:	f009 ff07 	bl	800b87c <PDM_Filter_setConfig>
    for(index = 0; index < ChnlNbrIn; index++)
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	3301      	adds	r3, #1
 8001a72:	617b      	str	r3, [r7, #20]
 8001a74:	697a      	ldr	r2, [r7, #20]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d38c      	bcc.n	8001996 <BSP_AUDIO_IN_PDMToPCM_Init+0x42>
    }
  }

  return BSP_ERROR_NONE;
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3718      	adds	r7, #24
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	58024400 	.word	0x58024400
 8001a8c:	24000898 	.word	0x24000898
 8001a90:	7e809d48 	.word	0x7e809d48
 8001a94:	10624dd3 	.word	0x10624dd3
 8001a98:	24000930 	.word	0x24000930

08001a9c <BSP_AUDIO_IN_RecordPDM>:
  * @param  pbuf     Main buffer pointer for the recorded data storing
  * @param  Size     Size of the record buffer
  * @retval BSP status
  */ // TODO
int32_t BSP_AUDIO_IN_RecordPDM(uint32_t Instance, uint8_t* pBuf, uint32_t NbrOfBytes)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b086      	sub	sp, #24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	607a      	str	r2, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	617b      	str	r3, [r7, #20]

  if(Instance != 1U)
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d003      	beq.n	8001aba <BSP_AUDIO_IN_RecordPDM+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001ab2:	f06f 0301 	mvn.w	r3, #1
 8001ab6:	617b      	str	r3, [r7, #20]
 8001ab8:	e01d      	b.n	8001af6 <BSP_AUDIO_IN_RecordPDM+0x5a>
  }
  else
  {
    /* Start the process receive DMA */
    if(HAL_SAI_Receive_DMA(&haudio_in_sai[Instance], (uint8_t*)pBuf, (uint16_t)(NbrOfBytes/(Audio_In_Ctx[Instance].BitsPerSample/8U))) != HAL_OK)
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	22b4      	movs	r2, #180	; 0xb4
 8001abe:	fb02 f303 	mul.w	r3, r2, r3
 8001ac2:	4a0f      	ldr	r2, [pc, #60]	; (8001b00 <BSP_AUDIO_IN_RecordPDM+0x64>)
 8001ac4:	1898      	adds	r0, r3, r2
 8001ac6:	490f      	ldr	r1, [pc, #60]	; (8001b04 <BSP_AUDIO_IN_RecordPDM+0x68>)
 8001ac8:	68fa      	ldr	r2, [r7, #12]
 8001aca:	4613      	mov	r3, r2
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	4413      	add	r3, r2
 8001ad0:	011b      	lsls	r3, r3, #4
 8001ad2:	440b      	add	r3, r1
 8001ad4:	330c      	adds	r3, #12
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	08db      	lsrs	r3, r3, #3
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	68b9      	ldr	r1, [r7, #8]
 8001ae6:	f007 fab1 	bl	800904c <HAL_SAI_Receive_DMA>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d002      	beq.n	8001af6 <BSP_AUDIO_IN_RecordPDM+0x5a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001af0:	f06f 0303 	mvn.w	r3, #3
 8001af4:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return BSP status */
  return ret;
 8001af6:	697b      	ldr	r3, [r7, #20]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3718      	adds	r7, #24
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	2400054c 	.word	0x2400054c
 8001b04:	24000cb0 	.word	0x24000cb0

08001b08 <BSP_AUDIO_IN_IRQHandler>:
  *         - AUDIO_IN_DEVICE_DIGITAL_MIC3
  *         - AUDIO_IN_DEVICE_DIGITAL_MIC4
  * @retval None
  */
void BSP_AUDIO_IN_IRQHandler(uint32_t Instance, uint32_t InputDevice)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b086      	sub	sp, #24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	6039      	str	r1, [r7, #0]
  if(((Instance == 0U) && (InputDevice == AUDIO_IN_DEVICE_DIGITAL_MIC1)) ||\
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d102      	bne.n	8001b1e <BSP_AUDIO_IN_IRQHandler+0x16>
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	2b10      	cmp	r3, #16
 8001b1c:	d00b      	beq.n	8001b36 <BSP_AUDIO_IN_IRQHandler+0x2e>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d102      	bne.n	8001b2a <BSP_AUDIO_IN_IRQHandler+0x22>
     ((Instance == 0U) && (InputDevice == AUDIO_IN_DEVICE_ANALOG_MIC)) ||\
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d005      	beq.n	8001b36 <BSP_AUDIO_IN_IRQHandler+0x2e>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d10e      	bne.n	8001b4e <BSP_AUDIO_IN_IRQHandler+0x46>
     ((Instance == 1U) && (InputDevice == AUDIO_IN_DEVICE_DIGITAL_MIC1)))
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	2b10      	cmp	r3, #16
 8001b34:	d10b      	bne.n	8001b4e <BSP_AUDIO_IN_IRQHandler+0x46>
  {
    HAL_DMA_IRQHandler(haudio_in_sai[Instance].hdmarx);
 8001b36:	4a1a      	ldr	r2, [pc, #104]	; (8001ba0 <BSP_AUDIO_IN_IRQHandler+0x98>)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	21b4      	movs	r1, #180	; 0xb4
 8001b3c:	fb01 f303 	mul.w	r3, r1, r3
 8001b40:	4413      	add	r3, r2
 8001b42:	3384      	adds	r3, #132	; 0x84
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f001 ff64 	bl	8003a14 <HAL_DMA_IRQHandler>
      (InputDevice <= AUDIO_IN_DEVICE_DIGITAL_MIC_LAST))
    {
    HAL_DMA_IRQHandler(haudio_in_dfsdm_filter[POS_VAL(InputDevice)].hdmaReg);
    }
  }
}
 8001b4c:	e024      	b.n	8001b98 <BSP_AUDIO_IN_IRQHandler+0x90>
    if((Instance == 2U) && (InputDevice >= AUDIO_IN_DEVICE_DIGITAL_MIC1) &&\
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d121      	bne.n	8001b98 <BSP_AUDIO_IN_IRQHandler+0x90>
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	2b0f      	cmp	r3, #15
 8001b58:	d91e      	bls.n	8001b98 <BSP_AUDIO_IN_IRQHandler+0x90>
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	2b80      	cmp	r3, #128	; 0x80
 8001b5e:	d81b      	bhi.n	8001b98 <BSP_AUDIO_IN_IRQHandler+0x90>
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	fa93 f3a3 	rbit	r3, r3
 8001b6a:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d101      	bne.n	8001b7a <BSP_AUDIO_IN_IRQHandler+0x72>
  {
    return 32U;
 8001b76:	2320      	movs	r3, #32
 8001b78:	e003      	b.n	8001b82 <BSP_AUDIO_IN_IRQHandler+0x7a>
  }
  return __builtin_clz(value);
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	fab3 f383 	clz	r3, r3
 8001b80:	b2db      	uxtb	r3, r3
    HAL_DMA_IRQHandler(haudio_in_dfsdm_filter[POS_VAL(InputDevice)].hdmaReg);
 8001b82:	3b04      	subs	r3, #4
 8001b84:	4a07      	ldr	r2, [pc, #28]	; (8001ba4 <BSP_AUDIO_IN_IRQHandler+0x9c>)
 8001b86:	2154      	movs	r1, #84	; 0x54
 8001b88:	fb01 f303 	mul.w	r3, r1, r3
 8001b8c:	4413      	add	r3, r2
 8001b8e:	3328      	adds	r3, #40	; 0x28
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f001 ff3e 	bl	8003a14 <HAL_DMA_IRQHandler>
}
 8001b98:	bf00      	nop
 8001b9a:	3718      	adds	r7, #24
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	2400054c 	.word	0x2400054c
 8001ba4:	24000b3c 	.word	0x24000b3c

08001ba8 <BSP_AUDIO_IN_TransferComplete_CallBack>:
/**
  * @brief  User callback when record buffer is filled.
  * @retval None
  */
__weak void BSP_AUDIO_IN_TransferComplete_CallBack(uint32_t Instance)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* This function should be implemented by the user application.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <BSP_AUDIO_IN_HalfTransfer_CallBack>:
/**
  * @brief  Manages the DMA Half Transfer complete event.
  * @retval None
  */
__weak void BSP_AUDIO_IN_HalfTransfer_CallBack(uint32_t Instance)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* This function should be implemented by the user application.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <BSP_AUDIO_IN_Error_CallBack>:
/**
  * @brief  Audio IN Error callback function.
  * @retval None
  */
__weak void BSP_AUDIO_IN_Error_CallBack(uint32_t Instance)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Instance);

  /* This function is called when an Interrupt due to transfer error on or peripheral
     error occurs. */
}
 8001bd8:	bf00      	nop
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <SAI_RxHalfCpltCallback>:
  * @brief  Half reception complete callback.
  * @param  hsai   SAI handle.
  * @retval None
  */
static void SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsai);

  /* Call the record update function to get the first half */
  BSP_AUDIO_IN_HalfTransfer_CallBack(0);
 8001bec:	2000      	movs	r0, #0
 8001bee:	f7ff ffe5 	bl	8001bbc <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 8001bf2:	bf00      	nop
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <SAI_RxCpltCallback>:
  * @brief  Reception complete callback.
  * @param  hsai   SAI handle.
  * @retval None
  */
static void SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b082      	sub	sp, #8
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsai);

  /* Call the record update function to get the second half */
  BSP_AUDIO_IN_TransferComplete_CallBack(0);
 8001c02:	2000      	movs	r0, #0
 8001c04:	f7ff ffd0 	bl	8001ba8 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8001c08:	bf00      	nop
 8001c0a:	3708      	adds	r7, #8
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <DFSDM_ChannelMspInit>:
  * @brief  Initialize the DFSDM channel MSP.
  * @param  hDfsdmChannel DFSDM Channel handle
  * @retval None
  */
static void DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef *hDfsdmChannel)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b08e      	sub	sp, #56	; 0x38
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hDfsdmChannel);

  /* DFSDM pins configuration: DFSDM_CKOUT, DMIC_DATIN pins ------------------*/
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c18:	2302      	movs	r3, #2
 8001c1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c20:	2303      	movs	r3, #3
 8001c22:	633b      	str	r3, [r7, #48]	; 0x30

  /* Enable DFSDM clock */
  AUDIO_DFSDM1_CLK_ENABLE();
 8001c24:	4b49      	ldr	r3, [pc, #292]	; (8001d4c <DFSDM_ChannelMspInit+0x13c>)
 8001c26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c2a:	4a48      	ldr	r2, [pc, #288]	; (8001d4c <DFSDM_ChannelMspInit+0x13c>)
 8001c2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001c30:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001c34:	4b45      	ldr	r3, [pc, #276]	; (8001d4c <DFSDM_ChannelMspInit+0x13c>)
 8001c36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c3a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001c3e:	623b      	str	r3, [r7, #32]
 8001c40:	6a3b      	ldr	r3, [r7, #32]

  /* Enable GPIO clock */
  AUDIO_DFSDM1_CKOUT_GPIO_CLK_ENABLE();
 8001c42:	4b42      	ldr	r3, [pc, #264]	; (8001d4c <DFSDM_ChannelMspInit+0x13c>)
 8001c44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c48:	4a40      	ldr	r2, [pc, #256]	; (8001d4c <DFSDM_ChannelMspInit+0x13c>)
 8001c4a:	f043 0310 	orr.w	r3, r3, #16
 8001c4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c52:	4b3e      	ldr	r3, [pc, #248]	; (8001d4c <DFSDM_ChannelMspInit+0x13c>)
 8001c54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c58:	f003 0310 	and.w	r3, r3, #16
 8001c5c:	61fb      	str	r3, [r7, #28]
 8001c5e:	69fb      	ldr	r3, [r7, #28]
  AUDIO_DFSDMx_DATIN_MIC1_GPIO_CLK_ENABLE();
 8001c60:	4b3a      	ldr	r3, [pc, #232]	; (8001d4c <DFSDM_ChannelMspInit+0x13c>)
 8001c62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c66:	4a39      	ldr	r2, [pc, #228]	; (8001d4c <DFSDM_ChannelMspInit+0x13c>)
 8001c68:	f043 0310 	orr.w	r3, r3, #16
 8001c6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c70:	4b36      	ldr	r3, [pc, #216]	; (8001d4c <DFSDM_ChannelMspInit+0x13c>)
 8001c72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c76:	f003 0310 	and.w	r3, r3, #16
 8001c7a:	61bb      	str	r3, [r7, #24]
 8001c7c:	69bb      	ldr	r3, [r7, #24]
  AUDIO_DFSDMx_DATIN_MIC2_GPIO_CLK_ENABLE();
 8001c7e:	4b33      	ldr	r3, [pc, #204]	; (8001d4c <DFSDM_ChannelMspInit+0x13c>)
 8001c80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c84:	4a31      	ldr	r2, [pc, #196]	; (8001d4c <DFSDM_ChannelMspInit+0x13c>)
 8001c86:	f043 0310 	orr.w	r3, r3, #16
 8001c8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c8e:	4b2f      	ldr	r3, [pc, #188]	; (8001d4c <DFSDM_ChannelMspInit+0x13c>)
 8001c90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c94:	f003 0310 	and.w	r3, r3, #16
 8001c98:	617b      	str	r3, [r7, #20]
 8001c9a:	697b      	ldr	r3, [r7, #20]
  AUDIO_DFSDMx_DATIN_MIC3_GPIO_CLK_ENABLE();
 8001c9c:	4b2b      	ldr	r3, [pc, #172]	; (8001d4c <DFSDM_ChannelMspInit+0x13c>)
 8001c9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ca2:	4a2a      	ldr	r2, [pc, #168]	; (8001d4c <DFSDM_ChannelMspInit+0x13c>)
 8001ca4:	f043 0320 	orr.w	r3, r3, #32
 8001ca8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cac:	4b27      	ldr	r3, [pc, #156]	; (8001d4c <DFSDM_ChannelMspInit+0x13c>)
 8001cae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cb2:	f003 0320 	and.w	r3, r3, #32
 8001cb6:	613b      	str	r3, [r7, #16]
 8001cb8:	693b      	ldr	r3, [r7, #16]
  AUDIO_DFSDMx_DATIN_MIC4_GPIO_CLK_ENABLE();
 8001cba:	4b24      	ldr	r3, [pc, #144]	; (8001d4c <DFSDM_ChannelMspInit+0x13c>)
 8001cbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cc0:	4a22      	ldr	r2, [pc, #136]	; (8001d4c <DFSDM_ChannelMspInit+0x13c>)
 8001cc2:	f043 0320 	orr.w	r3, r3, #32
 8001cc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cca:	4b20      	ldr	r3, [pc, #128]	; (8001d4c <DFSDM_ChannelMspInit+0x13c>)
 8001ccc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cd0:	f003 0320 	and.w	r3, r3, #32
 8001cd4:	60fb      	str	r3, [r7, #12]
 8001cd6:	68fb      	ldr	r3, [r7, #12]

  GPIO_InitStruct.Pin = AUDIO_DFSDM1_CKOUT_PIN;
 8001cd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cdc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Alternate = AUDIO_DFSDM1_CKOUT_AF;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(AUDIO_DFSDM1_CKOUT_GPIO_PORT, &GPIO_InitStruct);
 8001ce2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4819      	ldr	r0, [pc, #100]	; (8001d50 <DFSDM_ChannelMspInit+0x140>)
 8001cea:	f003 faf1 	bl	80052d0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = AUDIO_DFSDMx_DATIN_MIC1_PIN;
 8001cee:	2380      	movs	r3, #128	; 0x80
 8001cf0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Alternate = AUDIO_DFSDMx_DATIN_MIC1_AF;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(AUDIO_DFSDMx_DATIN_MIC1_GPIO_PORT, &GPIO_InitStruct);
 8001cf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4814      	ldr	r0, [pc, #80]	; (8001d50 <DFSDM_ChannelMspInit+0x140>)
 8001cfe:	f003 fae7 	bl	80052d0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = AUDIO_DFSDMx_DATIN_MIC2_PIN;
 8001d02:	2380      	movs	r3, #128	; 0x80
 8001d04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Alternate = AUDIO_DFSDMx_DATIN_MIC2_AF;
 8001d06:	2303      	movs	r3, #3
 8001d08:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(AUDIO_DFSDMx_DATIN_MIC2_GPIO_PORT, &GPIO_InitStruct);
 8001d0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d0e:	4619      	mov	r1, r3
 8001d10:	480f      	ldr	r0, [pc, #60]	; (8001d50 <DFSDM_ChannelMspInit+0x140>)
 8001d12:	f003 fadd 	bl	80052d0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = AUDIO_DFSDMx_DATIN_MIC3_PIN;
 8001d16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Alternate = AUDIO_DFSDMx_DATIN_MIC3_AF;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(AUDIO_DFSDMx_DATIN_MIC3_GPIO_PORT, &GPIO_InitStruct);
 8001d20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d24:	4619      	mov	r1, r3
 8001d26:	480b      	ldr	r0, [pc, #44]	; (8001d54 <DFSDM_ChannelMspInit+0x144>)
 8001d28:	f003 fad2 	bl	80052d0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = AUDIO_DFSDMx_DATIN_MIC4_PIN;
 8001d2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Alternate = AUDIO_DFSDMx_DATIN_MIC4_AF;
 8001d32:	2303      	movs	r3, #3
 8001d34:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(AUDIO_DFSDMx_DATIN_MIC4_GPIO_PORT, &GPIO_InitStruct);
 8001d36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	4805      	ldr	r0, [pc, #20]	; (8001d54 <DFSDM_ChannelMspInit+0x144>)
 8001d3e:	f003 fac7 	bl	80052d0 <HAL_GPIO_Init>

}
 8001d42:	bf00      	nop
 8001d44:	3738      	adds	r7, #56	; 0x38
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	58024400 	.word	0x58024400
 8001d50:	58021000 	.word	0x58021000
 8001d54:	58021400 	.word	0x58021400

08001d58 <DFSDM_FilterMspInit>:
  * @brief  Initialize the DFSDM filter MSP.
  * @param  hDfsdmFilter DFSDM Filter handle
  * @retval None
  */
static void DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef *hDfsdmFilter)
{
 8001d58:	b590      	push	{r4, r7, lr}
 8001d5a:	b0a1      	sub	sp, #132	; 0x84
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  uint32_t i, mic_num, mic_init[DFSDM_MIC_NUMBER] = {0};
 8001d60:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	605a      	str	r2, [r3, #4]
 8001d6a:	609a      	str	r2, [r3, #8]
 8001d6c:	60da      	str	r2, [r3, #12]
  IRQn_Type AUDIO_DFSDM_DMAx_MIC_IRQHandler[DFSDM_MIC_NUMBER] = {AUDIO_DFSDMx_DMAx_MIC1_IRQ, AUDIO_DFSDMx_DMAx_MIC2_IRQ, AUDIO_DFSDMx_DMAx_MIC3_IRQ, AUDIO_DFSDMx_DMAx_MIC4_IRQ};
 8001d6e:	4a61      	ldr	r2, [pc, #388]	; (8001ef4 <DFSDM_FilterMspInit+0x19c>)
 8001d70:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d74:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d78:	e883 0003 	stmia.w	r3, {r0, r1}
  DMA_Stream_TypeDef* AUDIO_DFSDMx_DMAx_MIC_STREAM[DFSDM_MIC_NUMBER] = {AUDIO_DFSDMx_DMAx_MIC1_STREAM, AUDIO_DFSDMx_DMAx_MIC2_STREAM, AUDIO_DFSDMx_DMAx_MIC3_STREAM, AUDIO_DFSDMx_DMAx_MIC4_STREAM};
 8001d7c:	4b5e      	ldr	r3, [pc, #376]	; (8001ef8 <DFSDM_FilterMspInit+0x1a0>)
 8001d7e:	f107 0420 	add.w	r4, r7, #32
 8001d82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t AUDIO_DFSDMx_DMAx_MIC_REQUEST[DFSDM_MIC_NUMBER] = {AUDIO_DFSDMx_DMAx_MIC1_REQUEST, AUDIO_DFSDMx_DMAx_MIC2_REQUEST, AUDIO_DFSDMx_DMAx_MIC3_REQUEST, AUDIO_DFSDMx_DMAx_MIC4_REQUEST};
 8001d88:	4b5c      	ldr	r3, [pc, #368]	; (8001efc <DFSDM_FilterMspInit+0x1a4>)
 8001d8a:	f107 0410 	add.w	r4, r7, #16
 8001d8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hDfsdmFilter);

  /* Enable DFSDM clock */
  AUDIO_DFSDM1_CLK_ENABLE();
 8001d94:	4b5a      	ldr	r3, [pc, #360]	; (8001f00 <DFSDM_FilterMspInit+0x1a8>)
 8001d96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d9a:	4a59      	ldr	r2, [pc, #356]	; (8001f00 <DFSDM_FilterMspInit+0x1a8>)
 8001d9c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001da0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001da4:	4b56      	ldr	r3, [pc, #344]	; (8001f00 <DFSDM_FilterMspInit+0x1a8>)
 8001da6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001daa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001dae:	60fb      	str	r3, [r7, #12]
 8001db0:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DMA clock */
  AUDIO_DFSDM1_DMAx_CLK_ENABLE();
 8001db2:	4b53      	ldr	r3, [pc, #332]	; (8001f00 <DFSDM_FilterMspInit+0x1a8>)
 8001db4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001db8:	4a51      	ldr	r2, [pc, #324]	; (8001f00 <DFSDM_FilterMspInit+0x1a8>)
 8001dba:	f043 0302 	orr.w	r3, r3, #2
 8001dbe:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001dc2:	4b4f      	ldr	r3, [pc, #316]	; (8001f00 <DFSDM_FilterMspInit+0x1a8>)
 8001dc4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001dc8:	f003 0302 	and.w	r3, r3, #2
 8001dcc:	60bb      	str	r3, [r7, #8]
 8001dce:	68bb      	ldr	r3, [r7, #8]

  for(i = 0; i < DFSDM_MIC_NUMBER; i++)
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001dd4:	e194      	b.n	8002100 <DFSDM_FilterMspInit+0x3a8>
 8001dd6:	2310      	movs	r3, #16
 8001dd8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ddc:	fa93 f3a3 	rbit	r3, r3
 8001de0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001de2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001de4:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8001de6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d101      	bne.n	8001df0 <DFSDM_FilterMspInit+0x98>
    return 32U;
 8001dec:	2320      	movs	r3, #32
 8001dee:	e003      	b.n	8001df8 <DFSDM_FilterMspInit+0xa0>
  return __builtin_clz(value);
 8001df0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001df2:	fab3 f383 	clz	r3, r3
 8001df6:	b2db      	uxtb	r3, r3
  {
    if((mic_init[POS_VAL(AUDIO_IN_DEVICE_DIGITAL_MIC1)] != 1U) && ((Audio_In_Ctx[2].Device & AUDIO_IN_DEVICE_DIGITAL_MIC1) == AUDIO_IN_DEVICE_DIGITAL_MIC1))
 8001df8:	3b04      	subs	r3, #4
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001e00:	4413      	add	r3, r2
 8001e02:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d010      	beq.n	8001e2c <DFSDM_FilterMspInit+0xd4>
 8001e0a:	4b3e      	ldr	r3, [pc, #248]	; (8001f04 <DFSDM_FilterMspInit+0x1ac>)
 8001e0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e0e:	f003 0310 	and.w	r3, r3, #16
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d00a      	beq.n	8001e2c <DFSDM_FilterMspInit+0xd4>
    {
      mic_num = 0U;
 8001e16:	2300      	movs	r3, #0
 8001e18:	67bb      	str	r3, [r7, #120]	; 0x78
      mic_init[mic_num] = 1;
 8001e1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001e22:	4413      	add	r3, r2
 8001e24:	2201      	movs	r2, #1
 8001e26:	f843 2c48 	str.w	r2, [r3, #-72]
 8001e2a:	e08c      	b.n	8001f46 <DFSDM_FilterMspInit+0x1ee>
 8001e2c:	2320      	movs	r3, #32
 8001e2e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e32:	fa93 f3a3 	rbit	r3, r3
 8001e36:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8001e38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e3a:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8001e3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d101      	bne.n	8001e46 <DFSDM_FilterMspInit+0xee>
    return 32U;
 8001e42:	2320      	movs	r3, #32
 8001e44:	e003      	b.n	8001e4e <DFSDM_FilterMspInit+0xf6>
  return __builtin_clz(value);
 8001e46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e48:	fab3 f383 	clz	r3, r3
 8001e4c:	b2db      	uxtb	r3, r3
    }
    else if((mic_init[POS_VAL(AUDIO_IN_DEVICE_DIGITAL_MIC2)] != 1U) && ((Audio_In_Ctx[2].Device & AUDIO_IN_DEVICE_DIGITAL_MIC2) == AUDIO_IN_DEVICE_DIGITAL_MIC2))
 8001e4e:	3b04      	subs	r3, #4
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001e56:	4413      	add	r3, r2
 8001e58:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d010      	beq.n	8001e82 <DFSDM_FilterMspInit+0x12a>
 8001e60:	4b28      	ldr	r3, [pc, #160]	; (8001f04 <DFSDM_FilterMspInit+0x1ac>)
 8001e62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e64:	f003 0320 	and.w	r3, r3, #32
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d00a      	beq.n	8001e82 <DFSDM_FilterMspInit+0x12a>
    {
      mic_num = 1U;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	67bb      	str	r3, [r7, #120]	; 0x78
      mic_init[mic_num] = 1;
 8001e70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001e78:	4413      	add	r3, r2
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f843 2c48 	str.w	r2, [r3, #-72]
 8001e80:	e061      	b.n	8001f46 <DFSDM_FilterMspInit+0x1ee>
 8001e82:	2340      	movs	r3, #64	; 0x40
 8001e84:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e88:	fa93 f3a3 	rbit	r3, r3
 8001e8c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001e8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e90:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8001e92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d101      	bne.n	8001e9c <DFSDM_FilterMspInit+0x144>
    return 32U;
 8001e98:	2320      	movs	r3, #32
 8001e9a:	e003      	b.n	8001ea4 <DFSDM_FilterMspInit+0x14c>
  return __builtin_clz(value);
 8001e9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e9e:	fab3 f383 	clz	r3, r3
 8001ea2:	b2db      	uxtb	r3, r3
    }
    else if((mic_init[POS_VAL(AUDIO_IN_DEVICE_DIGITAL_MIC3)] != 1U) &&((Audio_In_Ctx[2].Device & AUDIO_IN_DEVICE_DIGITAL_MIC3) == AUDIO_IN_DEVICE_DIGITAL_MIC3))
 8001ea4:	3b04      	subs	r3, #4
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001eac:	4413      	add	r3, r2
 8001eae:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d010      	beq.n	8001ed8 <DFSDM_FilterMspInit+0x180>
 8001eb6:	4b13      	ldr	r3, [pc, #76]	; (8001f04 <DFSDM_FilterMspInit+0x1ac>)
 8001eb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d00a      	beq.n	8001ed8 <DFSDM_FilterMspInit+0x180>
    {
      mic_num = 2U;
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	67bb      	str	r3, [r7, #120]	; 0x78
      mic_init[mic_num] = 1;
 8001ec6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001ece:	4413      	add	r3, r2
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	f843 2c48 	str.w	r2, [r3, #-72]
 8001ed6:	e036      	b.n	8001f46 <DFSDM_FilterMspInit+0x1ee>
 8001ed8:	2380      	movs	r3, #128	; 0x80
 8001eda:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001edc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ede:	fa93 f3a3 	rbit	r3, r3
 8001ee2:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8001ee4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ee6:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8001ee8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d10c      	bne.n	8001f08 <DFSDM_FilterMspInit+0x1b0>
    return 32U;
 8001eee:	2320      	movs	r3, #32
 8001ef0:	e00e      	b.n	8001f10 <DFSDM_FilterMspInit+0x1b8>
 8001ef2:	bf00      	nop
 8001ef4:	0800bec8 	.word	0x0800bec8
 8001ef8:	0800bed0 	.word	0x0800bed0
 8001efc:	0800bee0 	.word	0x0800bee0
 8001f00:	58024400 	.word	0x58024400
 8001f04:	24000cb0 	.word	0x24000cb0
  return __builtin_clz(value);
 8001f08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f0a:	fab3 f383 	clz	r3, r3
 8001f0e:	b2db      	uxtb	r3, r3
    }
    else if((mic_init[POS_VAL(AUDIO_IN_DEVICE_DIGITAL_MIC4)] != 1U) && ((Audio_In_Ctx[2].Device & AUDIO_IN_DEVICE_DIGITAL_MIC4) == AUDIO_IN_DEVICE_DIGITAL_MIC4))
 8001f10:	3b04      	subs	r3, #4
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001f18:	4413      	add	r3, r2
 8001f1a:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	f000 80f2 	beq.w	8002108 <DFSDM_FilterMspInit+0x3b0>
 8001f24:	4b7a      	ldr	r3, [pc, #488]	; (8002110 <DFSDM_FilterMspInit+0x3b8>)
 8001f26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	f000 80eb 	beq.w	8002108 <DFSDM_FilterMspInit+0x3b0>
    {
      mic_num = 3U;
 8001f32:	2303      	movs	r3, #3
 8001f34:	67bb      	str	r3, [r7, #120]	; 0x78
      mic_init[mic_num] = 1;
 8001f36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001f3e:	4413      	add	r3, r2
 8001f40:	2201      	movs	r2, #1
 8001f42:	f843 2c48 	str.w	r2, [r3, #-72]
    else
    {
      break;
    }
    /* Configure the hDmaDfsdm[i] handle parameters */
    hDmaDfsdm[mic_num].Init.Request             = AUDIO_DFSDMx_DMAx_MIC_REQUEST[mic_num];
 8001f46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001f4e:	4413      	add	r3, r2
 8001f50:	f853 1c70 	ldr.w	r1, [r3, #-112]
 8001f54:	486f      	ldr	r0, [pc, #444]	; (8002114 <DFSDM_FilterMspInit+0x3bc>)
 8001f56:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001f58:	4613      	mov	r3, r2
 8001f5a:	011b      	lsls	r3, r3, #4
 8001f5c:	1a9b      	subs	r3, r3, r2
 8001f5e:	00db      	lsls	r3, r3, #3
 8001f60:	4403      	add	r3, r0
 8001f62:	3304      	adds	r3, #4
 8001f64:	6019      	str	r1, [r3, #0]
    hDmaDfsdm[mic_num].Instance                 = AUDIO_DFSDMx_DMAx_MIC_STREAM[mic_num];
 8001f66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001f6e:	4413      	add	r3, r2
 8001f70:	f853 1c60 	ldr.w	r1, [r3, #-96]
 8001f74:	4867      	ldr	r0, [pc, #412]	; (8002114 <DFSDM_FilterMspInit+0x3bc>)
 8001f76:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001f78:	4613      	mov	r3, r2
 8001f7a:	011b      	lsls	r3, r3, #4
 8001f7c:	1a9b      	subs	r3, r3, r2
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	4403      	add	r3, r0
 8001f82:	6019      	str	r1, [r3, #0]
    hDmaDfsdm[mic_num].Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8001f84:	4963      	ldr	r1, [pc, #396]	; (8002114 <DFSDM_FilterMspInit+0x3bc>)
 8001f86:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001f88:	4613      	mov	r3, r2
 8001f8a:	011b      	lsls	r3, r3, #4
 8001f8c:	1a9b      	subs	r3, r3, r2
 8001f8e:	00db      	lsls	r3, r3, #3
 8001f90:	440b      	add	r3, r1
 8001f92:	3308      	adds	r3, #8
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]
    hDmaDfsdm[mic_num].Init.PeriphInc           = DMA_PINC_DISABLE;
 8001f98:	495e      	ldr	r1, [pc, #376]	; (8002114 <DFSDM_FilterMspInit+0x3bc>)
 8001f9a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	011b      	lsls	r3, r3, #4
 8001fa0:	1a9b      	subs	r3, r3, r2
 8001fa2:	00db      	lsls	r3, r3, #3
 8001fa4:	440b      	add	r3, r1
 8001fa6:	330c      	adds	r3, #12
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]
    hDmaDfsdm[mic_num].Init.MemInc              = DMA_MINC_ENABLE;
 8001fac:	4959      	ldr	r1, [pc, #356]	; (8002114 <DFSDM_FilterMspInit+0x3bc>)
 8001fae:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	011b      	lsls	r3, r3, #4
 8001fb4:	1a9b      	subs	r3, r3, r2
 8001fb6:	00db      	lsls	r3, r3, #3
 8001fb8:	440b      	add	r3, r1
 8001fba:	3310      	adds	r3, #16
 8001fbc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fc0:	601a      	str	r2, [r3, #0]
    hDmaDfsdm[mic_num].Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001fc2:	4954      	ldr	r1, [pc, #336]	; (8002114 <DFSDM_FilterMspInit+0x3bc>)
 8001fc4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	011b      	lsls	r3, r3, #4
 8001fca:	1a9b      	subs	r3, r3, r2
 8001fcc:	00db      	lsls	r3, r3, #3
 8001fce:	440b      	add	r3, r1
 8001fd0:	3314      	adds	r3, #20
 8001fd2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001fd6:	601a      	str	r2, [r3, #0]
    hDmaDfsdm[mic_num].Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8001fd8:	494e      	ldr	r1, [pc, #312]	; (8002114 <DFSDM_FilterMspInit+0x3bc>)
 8001fda:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001fdc:	4613      	mov	r3, r2
 8001fde:	011b      	lsls	r3, r3, #4
 8001fe0:	1a9b      	subs	r3, r3, r2
 8001fe2:	00db      	lsls	r3, r3, #3
 8001fe4:	440b      	add	r3, r1
 8001fe6:	3318      	adds	r3, #24
 8001fe8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001fec:	601a      	str	r2, [r3, #0]
    hDmaDfsdm[mic_num].Init.Mode                = DMA_CIRCULAR;
 8001fee:	4949      	ldr	r1, [pc, #292]	; (8002114 <DFSDM_FilterMspInit+0x3bc>)
 8001ff0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	011b      	lsls	r3, r3, #4
 8001ff6:	1a9b      	subs	r3, r3, r2
 8001ff8:	00db      	lsls	r3, r3, #3
 8001ffa:	440b      	add	r3, r1
 8001ffc:	331c      	adds	r3, #28
 8001ffe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002002:	601a      	str	r2, [r3, #0]
    hDmaDfsdm[mic_num].Init.Priority            = DMA_PRIORITY_HIGH;
 8002004:	4943      	ldr	r1, [pc, #268]	; (8002114 <DFSDM_FilterMspInit+0x3bc>)
 8002006:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002008:	4613      	mov	r3, r2
 800200a:	011b      	lsls	r3, r3, #4
 800200c:	1a9b      	subs	r3, r3, r2
 800200e:	00db      	lsls	r3, r3, #3
 8002010:	440b      	add	r3, r1
 8002012:	3320      	adds	r3, #32
 8002014:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002018:	601a      	str	r2, [r3, #0]
    hDmaDfsdm[mic_num].Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 800201a:	493e      	ldr	r1, [pc, #248]	; (8002114 <DFSDM_FilterMspInit+0x3bc>)
 800201c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800201e:	4613      	mov	r3, r2
 8002020:	011b      	lsls	r3, r3, #4
 8002022:	1a9b      	subs	r3, r3, r2
 8002024:	00db      	lsls	r3, r3, #3
 8002026:	440b      	add	r3, r1
 8002028:	3324      	adds	r3, #36	; 0x24
 800202a:	2200      	movs	r2, #0
 800202c:	601a      	str	r2, [r3, #0]
    hDmaDfsdm[mic_num].Init.MemBurst            = DMA_MBURST_SINGLE;
 800202e:	4939      	ldr	r1, [pc, #228]	; (8002114 <DFSDM_FilterMspInit+0x3bc>)
 8002030:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002032:	4613      	mov	r3, r2
 8002034:	011b      	lsls	r3, r3, #4
 8002036:	1a9b      	subs	r3, r3, r2
 8002038:	00db      	lsls	r3, r3, #3
 800203a:	440b      	add	r3, r1
 800203c:	332c      	adds	r3, #44	; 0x2c
 800203e:	2200      	movs	r2, #0
 8002040:	601a      	str	r2, [r3, #0]
    hDmaDfsdm[mic_num].Init.PeriphBurst         = DMA_PBURST_SINGLE;
 8002042:	4934      	ldr	r1, [pc, #208]	; (8002114 <DFSDM_FilterMspInit+0x3bc>)
 8002044:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002046:	4613      	mov	r3, r2
 8002048:	011b      	lsls	r3, r3, #4
 800204a:	1a9b      	subs	r3, r3, r2
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	440b      	add	r3, r1
 8002050:	3330      	adds	r3, #48	; 0x30
 8002052:	2200      	movs	r2, #0
 8002054:	601a      	str	r2, [r3, #0]
    hDmaDfsdm[mic_num].State                    = HAL_DMA_STATE_RESET;
 8002056:	492f      	ldr	r1, [pc, #188]	; (8002114 <DFSDM_FilterMspInit+0x3bc>)
 8002058:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800205a:	4613      	mov	r3, r2
 800205c:	011b      	lsls	r3, r3, #4
 800205e:	1a9b      	subs	r3, r3, r2
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	440b      	add	r3, r1
 8002064:	3335      	adds	r3, #53	; 0x35
 8002066:	2200      	movs	r2, #0
 8002068:	701a      	strb	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(&haudio_in_dfsdm_filter[mic_num], hdmaReg, hDmaDfsdm[mic_num]);
 800206a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800206c:	4613      	mov	r3, r2
 800206e:	011b      	lsls	r3, r3, #4
 8002070:	1a9b      	subs	r3, r3, r2
 8002072:	00db      	lsls	r3, r3, #3
 8002074:	4a27      	ldr	r2, [pc, #156]	; (8002114 <DFSDM_FilterMspInit+0x3bc>)
 8002076:	441a      	add	r2, r3
 8002078:	4927      	ldr	r1, [pc, #156]	; (8002118 <DFSDM_FilterMspInit+0x3c0>)
 800207a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800207c:	2054      	movs	r0, #84	; 0x54
 800207e:	fb00 f303 	mul.w	r3, r0, r3
 8002082:	440b      	add	r3, r1
 8002084:	3328      	adds	r3, #40	; 0x28
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800208a:	2254      	movs	r2, #84	; 0x54
 800208c:	fb02 f303 	mul.w	r3, r2, r3
 8002090:	4a21      	ldr	r2, [pc, #132]	; (8002118 <DFSDM_FilterMspInit+0x3c0>)
 8002092:	1899      	adds	r1, r3, r2
 8002094:	481f      	ldr	r0, [pc, #124]	; (8002114 <DFSDM_FilterMspInit+0x3bc>)
 8002096:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002098:	4613      	mov	r3, r2
 800209a:	011b      	lsls	r3, r3, #4
 800209c:	1a9b      	subs	r3, r3, r2
 800209e:	00db      	lsls	r3, r3, #3
 80020a0:	4403      	add	r3, r0
 80020a2:	3338      	adds	r3, #56	; 0x38
 80020a4:	6019      	str	r1, [r3, #0]

    /* Reset DMA handle state */
    __HAL_DMA_RESET_HANDLE_STATE(&hDmaDfsdm[mic_num]);
 80020a6:	491b      	ldr	r1, [pc, #108]	; (8002114 <DFSDM_FilterMspInit+0x3bc>)
 80020a8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80020aa:	4613      	mov	r3, r2
 80020ac:	011b      	lsls	r3, r3, #4
 80020ae:	1a9b      	subs	r3, r3, r2
 80020b0:	00db      	lsls	r3, r3, #3
 80020b2:	440b      	add	r3, r1
 80020b4:	3335      	adds	r3, #53	; 0x35
 80020b6:	2200      	movs	r2, #0
 80020b8:	701a      	strb	r2, [r3, #0]

    /* Configure the DMA Channel */
    (void)HAL_DMA_Init(&hDmaDfsdm[mic_num]);
 80020ba:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80020bc:	4613      	mov	r3, r2
 80020be:	011b      	lsls	r3, r3, #4
 80020c0:	1a9b      	subs	r3, r3, r2
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	4a13      	ldr	r2, [pc, #76]	; (8002114 <DFSDM_FilterMspInit+0x3bc>)
 80020c6:	4413      	add	r3, r2
 80020c8:	4618      	mov	r0, r3
 80020ca:	f000 fd25 	bl	8002b18 <HAL_DMA_Init>

    /* DMA IRQ Channel configuration */
    HAL_NVIC_SetPriority(AUDIO_DFSDM_DMAx_MIC_IRQHandler[mic_num], BSP_AUDIO_IN_IT_PRIORITY, 0);
 80020ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020d0:	005b      	lsls	r3, r3, #1
 80020d2:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80020d6:	4413      	add	r3, r2
 80020d8:	f933 3c50 	ldrsh.w	r3, [r3, #-80]
 80020dc:	2200      	movs	r2, #0
 80020de:	210f      	movs	r1, #15
 80020e0:	4618      	mov	r0, r3
 80020e2:	f000 f9ac 	bl	800243e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AUDIO_DFSDM_DMAx_MIC_IRQHandler[mic_num]);
 80020e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80020ee:	4413      	add	r3, r2
 80020f0:	f933 3c50 	ldrsh.w	r3, [r3, #-80]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f000 f9bc 	bl	8002472 <HAL_NVIC_EnableIRQ>
  for(i = 0; i < DFSDM_MIC_NUMBER; i++)
 80020fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80020fc:	3301      	adds	r3, #1
 80020fe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002100:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002102:	2b03      	cmp	r3, #3
 8002104:	f67f ae67 	bls.w	8001dd6 <DFSDM_FilterMspInit+0x7e>
  }
}
 8002108:	bf00      	nop
 800210a:	3784      	adds	r7, #132	; 0x84
 800210c:	46bd      	mov	sp, r7
 800210e:	bd90      	pop	{r4, r7, pc}
 8002110:	24000cb0 	.word	0x24000cb0
 8002114:	240006b8 	.word	0x240006b8
 8002118:	24000b3c 	.word	0x24000b3c

0800211c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002122:	2003      	movs	r0, #3
 8002124:	f000 f980 	bl	8002428 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002128:	f004 f938 	bl	800639c <HAL_RCC_GetSysClockFreq>
 800212c:	4602      	mov	r2, r0
 800212e:	4b15      	ldr	r3, [pc, #84]	; (8002184 <HAL_Init+0x68>)
 8002130:	699b      	ldr	r3, [r3, #24]
 8002132:	0a1b      	lsrs	r3, r3, #8
 8002134:	f003 030f 	and.w	r3, r3, #15
 8002138:	4913      	ldr	r1, [pc, #76]	; (8002188 <HAL_Init+0x6c>)
 800213a:	5ccb      	ldrb	r3, [r1, r3]
 800213c:	f003 031f 	and.w	r3, r3, #31
 8002140:	fa22 f303 	lsr.w	r3, r2, r3
 8002144:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002146:	4b0f      	ldr	r3, [pc, #60]	; (8002184 <HAL_Init+0x68>)
 8002148:	699b      	ldr	r3, [r3, #24]
 800214a:	f003 030f 	and.w	r3, r3, #15
 800214e:	4a0e      	ldr	r2, [pc, #56]	; (8002188 <HAL_Init+0x6c>)
 8002150:	5cd3      	ldrb	r3, [r2, r3]
 8002152:	f003 031f 	and.w	r3, r3, #31
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	fa22 f303 	lsr.w	r3, r2, r3
 800215c:	4a0b      	ldr	r2, [pc, #44]	; (800218c <HAL_Init+0x70>)
 800215e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002160:	4a0b      	ldr	r2, [pc, #44]	; (8002190 <HAL_Init+0x74>)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002166:	2000      	movs	r0, #0
 8002168:	f000 f814 	bl	8002194 <HAL_InitTick>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e002      	b.n	800217c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002176:	f007 faef 	bl	8009758 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800217a:	2300      	movs	r3, #0
}
 800217c:	4618      	mov	r0, r3
 800217e:	3708      	adds	r7, #8
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	58024400 	.word	0x58024400
 8002188:	0800bf30 	.word	0x0800bf30
 800218c:	2400040c 	.word	0x2400040c
 8002190:	24000408 	.word	0x24000408

08002194 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800219c:	4b15      	ldr	r3, [pc, #84]	; (80021f4 <HAL_InitTick+0x60>)
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d101      	bne.n	80021a8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e021      	b.n	80021ec <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80021a8:	4b13      	ldr	r3, [pc, #76]	; (80021f8 <HAL_InitTick+0x64>)
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	4b11      	ldr	r3, [pc, #68]	; (80021f4 <HAL_InitTick+0x60>)
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	4619      	mov	r1, r3
 80021b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80021ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80021be:	4618      	mov	r0, r3
 80021c0:	f000 f973 	bl	80024aa <HAL_SYSTICK_Config>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e00e      	b.n	80021ec <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2b0f      	cmp	r3, #15
 80021d2:	d80a      	bhi.n	80021ea <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021d4:	2200      	movs	r2, #0
 80021d6:	6879      	ldr	r1, [r7, #4]
 80021d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021dc:	f000 f92f 	bl	800243e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021e0:	4a06      	ldr	r2, [pc, #24]	; (80021fc <HAL_InitTick+0x68>)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021e6:	2300      	movs	r3, #0
 80021e8:	e000      	b.n	80021ec <HAL_InitTick+0x58>
    return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3708      	adds	r7, #8
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	24000404 	.word	0x24000404
 80021f8:	24000408 	.word	0x24000408
 80021fc:	24000400 	.word	0x24000400

08002200 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002204:	4b06      	ldr	r3, [pc, #24]	; (8002220 <HAL_IncTick+0x20>)
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	461a      	mov	r2, r3
 800220a:	4b06      	ldr	r3, [pc, #24]	; (8002224 <HAL_IncTick+0x24>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4413      	add	r3, r2
 8002210:	4a04      	ldr	r2, [pc, #16]	; (8002224 <HAL_IncTick+0x24>)
 8002212:	6013      	str	r3, [r2, #0]
}
 8002214:	bf00      	nop
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	24000404 	.word	0x24000404
 8002224:	24000d40 	.word	0x24000d40

08002228 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  return uwTick;
 800222c:	4b03      	ldr	r3, [pc, #12]	; (800223c <HAL_GetTick+0x14>)
 800222e:	681b      	ldr	r3, [r3, #0]
}
 8002230:	4618      	mov	r0, r3
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	24000d40 	.word	0x24000d40

08002240 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002240:	b480      	push	{r7}
 8002242:	b085      	sub	sp, #20
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f003 0307 	and.w	r3, r3, #7
 800224e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002250:	4b0b      	ldr	r3, [pc, #44]	; (8002280 <__NVIC_SetPriorityGrouping+0x40>)
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002256:	68ba      	ldr	r2, [r7, #8]
 8002258:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800225c:	4013      	ands	r3, r2
 800225e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002268:	4b06      	ldr	r3, [pc, #24]	; (8002284 <__NVIC_SetPriorityGrouping+0x44>)
 800226a:	4313      	orrs	r3, r2
 800226c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800226e:	4a04      	ldr	r2, [pc, #16]	; (8002280 <__NVIC_SetPriorityGrouping+0x40>)
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	60d3      	str	r3, [r2, #12]
}
 8002274:	bf00      	nop
 8002276:	3714      	adds	r7, #20
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr
 8002280:	e000ed00 	.word	0xe000ed00
 8002284:	05fa0000 	.word	0x05fa0000

08002288 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800228c:	4b04      	ldr	r3, [pc, #16]	; (80022a0 <__NVIC_GetPriorityGrouping+0x18>)
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	0a1b      	lsrs	r3, r3, #8
 8002292:	f003 0307 	and.w	r3, r3, #7
}
 8002296:	4618      	mov	r0, r3
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr
 80022a0:	e000ed00 	.word	0xe000ed00

080022a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	4603      	mov	r3, r0
 80022ac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80022ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	db0b      	blt.n	80022ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022b6:	88fb      	ldrh	r3, [r7, #6]
 80022b8:	f003 021f 	and.w	r2, r3, #31
 80022bc:	4907      	ldr	r1, [pc, #28]	; (80022dc <__NVIC_EnableIRQ+0x38>)
 80022be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022c2:	095b      	lsrs	r3, r3, #5
 80022c4:	2001      	movs	r0, #1
 80022c6:	fa00 f202 	lsl.w	r2, r0, r2
 80022ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022ce:	bf00      	nop
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	e000e100 	.word	0xe000e100

080022e0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	4603      	mov	r3, r0
 80022e8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80022ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	db12      	blt.n	8002318 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022f2:	88fb      	ldrh	r3, [r7, #6]
 80022f4:	f003 021f 	and.w	r2, r3, #31
 80022f8:	490a      	ldr	r1, [pc, #40]	; (8002324 <__NVIC_DisableIRQ+0x44>)
 80022fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022fe:	095b      	lsrs	r3, r3, #5
 8002300:	2001      	movs	r0, #1
 8002302:	fa00 f202 	lsl.w	r2, r0, r2
 8002306:	3320      	adds	r3, #32
 8002308:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800230c:	f3bf 8f4f 	dsb	sy
}
 8002310:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002312:	f3bf 8f6f 	isb	sy
}
 8002316:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002318:	bf00      	nop
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr
 8002324:	e000e100 	.word	0xe000e100

08002328 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	4603      	mov	r3, r0
 8002330:	6039      	str	r1, [r7, #0]
 8002332:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002334:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002338:	2b00      	cmp	r3, #0
 800233a:	db0a      	blt.n	8002352 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	b2da      	uxtb	r2, r3
 8002340:	490c      	ldr	r1, [pc, #48]	; (8002374 <__NVIC_SetPriority+0x4c>)
 8002342:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002346:	0112      	lsls	r2, r2, #4
 8002348:	b2d2      	uxtb	r2, r2
 800234a:	440b      	add	r3, r1
 800234c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002350:	e00a      	b.n	8002368 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	b2da      	uxtb	r2, r3
 8002356:	4908      	ldr	r1, [pc, #32]	; (8002378 <__NVIC_SetPriority+0x50>)
 8002358:	88fb      	ldrh	r3, [r7, #6]
 800235a:	f003 030f 	and.w	r3, r3, #15
 800235e:	3b04      	subs	r3, #4
 8002360:	0112      	lsls	r2, r2, #4
 8002362:	b2d2      	uxtb	r2, r2
 8002364:	440b      	add	r3, r1
 8002366:	761a      	strb	r2, [r3, #24]
}
 8002368:	bf00      	nop
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr
 8002374:	e000e100 	.word	0xe000e100
 8002378:	e000ed00 	.word	0xe000ed00

0800237c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800237c:	b480      	push	{r7}
 800237e:	b089      	sub	sp, #36	; 0x24
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f003 0307 	and.w	r3, r3, #7
 800238e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	f1c3 0307 	rsb	r3, r3, #7
 8002396:	2b04      	cmp	r3, #4
 8002398:	bf28      	it	cs
 800239a:	2304      	movcs	r3, #4
 800239c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	3304      	adds	r3, #4
 80023a2:	2b06      	cmp	r3, #6
 80023a4:	d902      	bls.n	80023ac <NVIC_EncodePriority+0x30>
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	3b03      	subs	r3, #3
 80023aa:	e000      	b.n	80023ae <NVIC_EncodePriority+0x32>
 80023ac:	2300      	movs	r3, #0
 80023ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ba:	43da      	mvns	r2, r3
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	401a      	ands	r2, r3
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	fa01 f303 	lsl.w	r3, r1, r3
 80023ce:	43d9      	mvns	r1, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d4:	4313      	orrs	r3, r2
         );
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3724      	adds	r7, #36	; 0x24
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
	...

080023e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	3b01      	subs	r3, #1
 80023f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023f4:	d301      	bcc.n	80023fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023f6:	2301      	movs	r3, #1
 80023f8:	e00f      	b.n	800241a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023fa:	4a0a      	ldr	r2, [pc, #40]	; (8002424 <SysTick_Config+0x40>)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	3b01      	subs	r3, #1
 8002400:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002402:	210f      	movs	r1, #15
 8002404:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002408:	f7ff ff8e 	bl	8002328 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800240c:	4b05      	ldr	r3, [pc, #20]	; (8002424 <SysTick_Config+0x40>)
 800240e:	2200      	movs	r2, #0
 8002410:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002412:	4b04      	ldr	r3, [pc, #16]	; (8002424 <SysTick_Config+0x40>)
 8002414:	2207      	movs	r2, #7
 8002416:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	e000e010 	.word	0xe000e010

08002428 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f7ff ff05 	bl	8002240 <__NVIC_SetPriorityGrouping>
}
 8002436:	bf00      	nop
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b086      	sub	sp, #24
 8002442:	af00      	add	r7, sp, #0
 8002444:	4603      	mov	r3, r0
 8002446:	60b9      	str	r1, [r7, #8]
 8002448:	607a      	str	r2, [r7, #4]
 800244a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800244c:	f7ff ff1c 	bl	8002288 <__NVIC_GetPriorityGrouping>
 8002450:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	68b9      	ldr	r1, [r7, #8]
 8002456:	6978      	ldr	r0, [r7, #20]
 8002458:	f7ff ff90 	bl	800237c <NVIC_EncodePriority>
 800245c:	4602      	mov	r2, r0
 800245e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002462:	4611      	mov	r1, r2
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff ff5f 	bl	8002328 <__NVIC_SetPriority>
}
 800246a:	bf00      	nop
 800246c:	3718      	adds	r7, #24
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002472:	b580      	push	{r7, lr}
 8002474:	b082      	sub	sp, #8
 8002476:	af00      	add	r7, sp, #0
 8002478:	4603      	mov	r3, r0
 800247a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800247c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002480:	4618      	mov	r0, r3
 8002482:	f7ff ff0f 	bl	80022a4 <__NVIC_EnableIRQ>
}
 8002486:	bf00      	nop
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800248e:	b580      	push	{r7, lr}
 8002490:	b082      	sub	sp, #8
 8002492:	af00      	add	r7, sp, #0
 8002494:	4603      	mov	r3, r0
 8002496:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002498:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800249c:	4618      	mov	r0, r3
 800249e:	f7ff ff1f 	bl	80022e0 <__NVIC_DisableIRQ>
}
 80024a2:	bf00      	nop
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b082      	sub	sp, #8
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f7ff ff96 	bl	80023e4 <SysTick_Config>
 80024b8:	4603      	mov	r3, r0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
	...

080024c4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d101      	bne.n	80024d6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e054      	b.n	8002580 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	7f5b      	ldrb	r3, [r3, #29]
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d105      	bne.n	80024ec <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2200      	movs	r2, #0
 80024e4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f007 f950 	bl	800978c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2202      	movs	r2, #2
 80024f0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	791b      	ldrb	r3, [r3, #4]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d10c      	bne.n	8002514 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a22      	ldr	r2, [pc, #136]	; (8002588 <HAL_CRC_Init+0xc4>)
 8002500:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	689a      	ldr	r2, [r3, #8]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f022 0218 	bic.w	r2, r2, #24
 8002510:	609a      	str	r2, [r3, #8]
 8002512:	e00c      	b.n	800252e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6899      	ldr	r1, [r3, #8]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	461a      	mov	r2, r3
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f000 f834 	bl	800258c <HAL_CRCEx_Polynomial_Set>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e028      	b.n	8002580 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	795b      	ldrb	r3, [r3, #5]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d105      	bne.n	8002542 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800253e:	611a      	str	r2, [r3, #16]
 8002540:	e004      	b.n	800254c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	6912      	ldr	r2, [r2, #16]
 800254a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	695a      	ldr	r2, [r3, #20]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	430a      	orrs	r2, r1
 8002560:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	699a      	ldr	r2, [r3, #24]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	430a      	orrs	r2, r1
 8002576:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800257e:	2300      	movs	r3, #0
}
 8002580:	4618      	mov	r0, r3
 8002582:	3708      	adds	r7, #8
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	04c11db7 	.word	0x04c11db7

0800258c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800258c:	b480      	push	{r7}
 800258e:	b087      	sub	sp, #28
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002598:	2300      	movs	r3, #0
 800259a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800259c:	231f      	movs	r3, #31
 800259e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80025a0:	bf00      	nop
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	1e5a      	subs	r2, r3, #1
 80025a6:	613a      	str	r2, [r7, #16]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d009      	beq.n	80025c0 <HAL_CRCEx_Polynomial_Set+0x34>
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	f003 031f 	and.w	r3, r3, #31
 80025b2:	68ba      	ldr	r2, [r7, #8]
 80025b4:	fa22 f303 	lsr.w	r3, r2, r3
 80025b8:	f003 0301 	and.w	r3, r3, #1
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d0f0      	beq.n	80025a2 <HAL_CRCEx_Polynomial_Set+0x16>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2b18      	cmp	r3, #24
 80025c4:	d846      	bhi.n	8002654 <HAL_CRCEx_Polynomial_Set+0xc8>
 80025c6:	a201      	add	r2, pc, #4	; (adr r2, 80025cc <HAL_CRCEx_Polynomial_Set+0x40>)
 80025c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025cc:	0800265b 	.word	0x0800265b
 80025d0:	08002655 	.word	0x08002655
 80025d4:	08002655 	.word	0x08002655
 80025d8:	08002655 	.word	0x08002655
 80025dc:	08002655 	.word	0x08002655
 80025e0:	08002655 	.word	0x08002655
 80025e4:	08002655 	.word	0x08002655
 80025e8:	08002655 	.word	0x08002655
 80025ec:	08002649 	.word	0x08002649
 80025f0:	08002655 	.word	0x08002655
 80025f4:	08002655 	.word	0x08002655
 80025f8:	08002655 	.word	0x08002655
 80025fc:	08002655 	.word	0x08002655
 8002600:	08002655 	.word	0x08002655
 8002604:	08002655 	.word	0x08002655
 8002608:	08002655 	.word	0x08002655
 800260c:	0800263d 	.word	0x0800263d
 8002610:	08002655 	.word	0x08002655
 8002614:	08002655 	.word	0x08002655
 8002618:	08002655 	.word	0x08002655
 800261c:	08002655 	.word	0x08002655
 8002620:	08002655 	.word	0x08002655
 8002624:	08002655 	.word	0x08002655
 8002628:	08002655 	.word	0x08002655
 800262c:	08002631 	.word	0x08002631
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	2b06      	cmp	r3, #6
 8002634:	d913      	bls.n	800265e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800263a:	e010      	b.n	800265e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	2b07      	cmp	r3, #7
 8002640:	d90f      	bls.n	8002662 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002646:	e00c      	b.n	8002662 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	2b0f      	cmp	r3, #15
 800264c:	d90b      	bls.n	8002666 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002652:	e008      	b.n	8002666 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	75fb      	strb	r3, [r7, #23]
      break;
 8002658:	e006      	b.n	8002668 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800265a:	bf00      	nop
 800265c:	e004      	b.n	8002668 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800265e:	bf00      	nop
 8002660:	e002      	b.n	8002668 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002662:	bf00      	nop
 8002664:	e000      	b.n	8002668 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002666:	bf00      	nop
  }
  if (status == HAL_OK)
 8002668:	7dfb      	ldrb	r3, [r7, #23]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d10d      	bne.n	800268a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68ba      	ldr	r2, [r7, #8]
 8002674:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f023 0118 	bic.w	r1, r3, #24
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	430a      	orrs	r2, r1
 8002688:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800268a:	7dfb      	ldrb	r3, [r7, #23]
}
 800268c:	4618      	mov	r0, r3
 800268e:	371c      	adds	r7, #28
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b086      	sub	sp, #24
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  __IO uint32_t               *channelCounterPtr;
  DFSDM_Channel_HandleTypeDef **channelHandleTable;
  DFSDM_Channel_TypeDef       *channel0Instance;

  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d101      	bne.n	80026aa <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e0b4      	b.n	8002814 <HAL_DFSDM_ChannelInit+0x17c>
    channelCounterPtr  = &v_dfsdm2ChannelCounter;
    channelHandleTable = a_dfsdm2ChannelHandle;
    channel0Instance   = DFSDM2_Channel0;
  }
#else /* DFSDM2_Channel0 */
  channelCounterPtr  = &v_dfsdm1ChannelCounter;
 80026aa:	4b5c      	ldr	r3, [pc, #368]	; (800281c <HAL_DFSDM_ChannelInit+0x184>)
 80026ac:	617b      	str	r3, [r7, #20]
  channelHandleTable = a_dfsdm1ChannelHandle;
 80026ae:	4b5c      	ldr	r3, [pc, #368]	; (8002820 <HAL_DFSDM_ChannelInit+0x188>)
 80026b0:	613b      	str	r3, [r7, #16]
  channel0Instance   = DFSDM1_Channel0;
 80026b2:	4b5c      	ldr	r3, [pc, #368]	; (8002824 <HAL_DFSDM_ChannelInit+0x18c>)
 80026b4:	60fb      	str	r3, [r7, #12]
#endif /* DFSDM2_Channel0 */

  /* Check that channel has not been already initialized */
  if (channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f000 f9e0 	bl	8002a80 <DFSDM_GetChannelFromInstance>
 80026c0:	4603      	mov	r3, r0
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	693a      	ldr	r2, [r7, #16]
 80026c6:	4413      	add	r3, r2
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <HAL_DFSDM_ChannelInit+0x3a>
  {
    return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e0a0      	b.n	8002814 <HAL_DFSDM_ChannelInit+0x17c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f007 f87c 	bl	80097d0 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  (*channelCounterPtr)++;
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	1c5a      	adds	r2, r3, #1
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	601a      	str	r2, [r3, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(*channelCounterPtr == 1U)
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d125      	bne.n	8002736 <HAL_DFSDM_ChannelInit+0x9e>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	601a      	str	r2, [r3, #0]
    channel0Instance->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	431a      	orrs	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	601a      	str	r2, [r3, #0]

    /* Reset clock divider */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	791b      	ldrb	r3, [r3, #4]
 8002714:	2b01      	cmp	r3, #1
 8002716:	d108      	bne.n	800272a <HAL_DFSDM_ChannelInit+0x92>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      channel0Instance->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	3b01      	subs	r3, #1
 8002722:	041b      	lsls	r3, r3, #16
 8002724:	431a      	orrs	r2, r3
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	601a      	str	r2, [r3, #0]
                                              DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    channel0Instance->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	601a      	str	r2, [r3, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8002744:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	6819      	ldr	r1, [r3, #0]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002754:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800275a:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	430a      	orrs	r2, r1
 8002762:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f022 020f 	bic.w	r2, r2, #15
 8002772:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	6819      	ldr	r1, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002782:	431a      	orrs	r2, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	430a      	orrs	r2, r1
 800278a:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	689a      	ldr	r2, [r3, #8]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 800279a:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	6899      	ldr	r1, [r3, #8]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027aa:	3b01      	subs	r3, #1
 80027ac:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80027ae:	431a      	orrs	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	430a      	orrs	r2, r1
 80027b6:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	685a      	ldr	r2, [r3, #4]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f002 0207 	and.w	r2, r2, #7
 80027c6:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	6859      	ldr	r1, [r3, #4]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d2:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d8:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80027da:	431a      	orrs	r2, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	430a      	orrs	r2, r1
 80027e2:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80027f2:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4618      	mov	r0, r3
 8002802:	f000 f93d 	bl	8002a80 <DFSDM_GetChannelFromInstance>
 8002806:	4603      	mov	r3, r0
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	693a      	ldr	r2, [r7, #16]
 800280c:	4413      	add	r3, r2
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002812:	2300      	movs	r3, #0
}
 8002814:	4618      	mov	r0, r3
 8002816:	3718      	adds	r7, #24
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	24000a2c 	.word	0x24000a2c
 8002820:	24000a30 	.word	0x24000a30
 8002824:	40017800 	.word	0x40017800

08002828 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  const DFSDM_Filter_TypeDef *filter0Instance;

  /* Check DFSDM Channel handle */
  if(hdfsdm_filter == NULL)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d101      	bne.n	800283a <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e0c8      	b.n	80029cc <HAL_DFSDM_FilterInit+0x1a4>
  else
  {
    filter0Instance = DFSDM2_Filter0;
  }
#else /* DFSDM2_Channel0 */
  filter0Instance = DFSDM1_Filter0;
 800283a:	4b66      	ldr	r3, [pc, #408]	; (80029d4 <HAL_DFSDM_FilterInit+0x1ac>)
 800283c:	60fb      	str	r3, [r7, #12]
#endif /* DFSDM2_Channel0 */

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == filter0Instance) &&
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	429a      	cmp	r2, r3
 8002846:	d109      	bne.n	800285c <HAL_DFSDM_FilterInit+0x34>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == filter0Instance) &&
 800284c:	2b01      	cmp	r3, #1
 800284e:	d003      	beq.n	8002858 <HAL_DFSDM_FilterInit+0x30>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8002854:	2b01      	cmp	r3, #1
 8002856:	d101      	bne.n	800285c <HAL_DFSDM_FilterInit+0x34>
  {
    return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e0b7      	b.n	80029cc <HAL_DFSDM_FilterInit+0x1a4>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2201      	movs	r2, #1
 8002866:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f000 f8b3 	bl	80029e0 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8002888:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	7a1b      	ldrb	r3, [r3, #8]
 800288e:	2b01      	cmp	r3, #1
 8002890:	d108      	bne.n	80028a4 <HAL_DFSDM_FilterInit+0x7c>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80028a0:	601a      	str	r2, [r3, #0]
 80028a2:	e007      	b.n	80028b4 <HAL_DFSDM_FilterInit+0x8c>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80028b2:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	7a5b      	ldrb	r3, [r3, #9]
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d108      	bne.n	80028ce <HAL_DFSDM_FilterInit+0xa6>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80028ca:	601a      	str	r2, [r3, #0]
 80028cc:	e007      	b.n	80028de <HAL_DFSDM_FilterInit+0xb6>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80028dc:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	6819      	ldr	r1, [r3, #0]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	4b3b      	ldr	r3, [pc, #236]	; (80029d8 <HAL_DFSDM_FilterInit+0x1b0>)
 80028ea:	400b      	ands	r3, r1
 80028ec:	6013      	str	r3, [r2, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d108      	bne.n	8002908 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	6819      	ldr	r1, [r3, #0]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	695a      	ldr	r2, [r3, #20]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	430a      	orrs	r2, r1
 8002906:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	7c1b      	ldrb	r3, [r3, #16]
 800290c:	2b01      	cmp	r3, #1
 800290e:	d108      	bne.n	8002922 <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f042 0210 	orr.w	r2, r2, #16
 800291e:	601a      	str	r2, [r3, #0]
 8002920:	e007      	b.n	8002932 <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f022 0210 	bic.w	r2, r2, #16
 8002930:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	7c5b      	ldrb	r3, [r3, #17]
 8002936:	2b01      	cmp	r3, #1
 8002938:	d108      	bne.n	800294c <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f042 0220 	orr.w	r2, r2, #32
 8002948:	601a      	str	r2, [r3, #0]
 800294a:	e007      	b.n	800295c <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f022 0220 	bic.w	r2, r2, #32
 800295a:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	6959      	ldr	r1, [r3, #20]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	4b1d      	ldr	r3, [pc, #116]	; (80029dc <HAL_DFSDM_FilterInit+0x1b4>)
 8002968:	400b      	ands	r3, r1
 800296a:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	6959      	ldr	r1, [r3, #20]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a1b      	ldr	r3, [r3, #32]
 800297a:	3b01      	subs	r3, #1
 800297c:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 800297e:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002984:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8002986:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	430a      	orrs	r2, r1
 800298e:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685a      	ldr	r2, [r3, #4]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	68da      	ldr	r2, [r3, #12]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	699a      	ldr	r2, [r3, #24]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	7c1a      	ldrb	r2, [r3, #16]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f042 0201 	orr.w	r2, r2, #1
 80029c0:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2201      	movs	r2, #1
 80029c6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 80029ca:	2300      	movs	r3, #0
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3710      	adds	r7, #16
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	40017900 	.word	0x40017900
 80029d8:	ffff80f7 	.word	0xffff80f7
 80029dc:	1c00ff00 	.word	0x1c00ff00

080029e0 <HAL_DFSDM_FilterMspInit>:
  * @brief  Initializes the DFSDM filter MSP.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the function is needed,
            the HAL_DFSDM_FilterMspInit could be implemented in the user file.
   */
}
 80029e8:	bf00      	nop
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr

080029f4 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b087      	sub	sp, #28
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a00:	2300      	movs	r3, #0
 8002a02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d02c      	beq.n	8002a68 <HAL_DFSDM_FilterConfigRegChannel+0x74>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8002a14:	2bff      	cmp	r3, #255	; 0xff
 8002a16:	d027      	beq.n	8002a68 <HAL_DFSDM_FilterConfigRegChannel+0x74>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	6819      	ldr	r1, [r3, #0]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	4b16      	ldr	r3, [pc, #88]	; (8002a7c <HAL_DFSDM_FilterConfigRegChannel+0x88>)
 8002a24:	400b      	ands	r3, r1
 8002a26:	6013      	str	r3, [r2, #0]
    if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d10d      	bne.n	8002a4a <HAL_DFSDM_FilterConfigRegChannel+0x56>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	021b      	lsls	r3, r3, #8
 8002a38:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002a3c:	431a      	orrs	r2, r3
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002a46:	601a      	str	r2, [r3, #0]
 8002a48:	e00a      	b.n	8002a60 <HAL_DFSDM_FilterConfigRegChannel+0x6c>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) ((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	6819      	ldr	r1, [r3, #0]
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	021b      	lsls	r3, r3, #8
 8002a54:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	631a      	str	r2, [r3, #48]	; 0x30
 8002a66:	e001      	b.n	8002a6c <HAL_DFSDM_FilterConfigRegChannel+0x78>
  }
  else
  {
    status = HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8002a6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	371c      	adds	r7, #28
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	f8fbffff 	.word	0xf8fbffff

08002a80 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef* Instance)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b085      	sub	sp, #20
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if(Instance == DFSDM1_Channel0)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	4a1c      	ldr	r2, [pc, #112]	; (8002afc <DFSDM_GetChannelFromInstance+0x7c>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d102      	bne.n	8002a96 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002a90:	2300      	movs	r3, #0
 8002a92:	60fb      	str	r3, [r7, #12]
 8002a94:	e02b      	b.n	8002aee <DFSDM_GetChannelFromInstance+0x6e>
  else if (Instance == DFSDM2_Channel1)
  {
    channel = 1;
  }
#endif /* DFSDM2_Channel0 */
  else if(Instance == DFSDM1_Channel1)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a19      	ldr	r2, [pc, #100]	; (8002b00 <DFSDM_GetChannelFromInstance+0x80>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d102      	bne.n	8002aa4 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	60fb      	str	r3, [r7, #12]
 8002aa2:	e024      	b.n	8002aee <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel2)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4a17      	ldr	r2, [pc, #92]	; (8002b04 <DFSDM_GetChannelFromInstance+0x84>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d102      	bne.n	8002ab2 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002aac:	2302      	movs	r3, #2
 8002aae:	60fb      	str	r3, [r7, #12]
 8002ab0:	e01d      	b.n	8002aee <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel3)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a14      	ldr	r2, [pc, #80]	; (8002b08 <DFSDM_GetChannelFromInstance+0x88>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d102      	bne.n	8002ac0 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 3;
 8002aba:	2303      	movs	r3, #3
 8002abc:	60fb      	str	r3, [r7, #12]
 8002abe:	e016      	b.n	8002aee <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel4)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	4a12      	ldr	r2, [pc, #72]	; (8002b0c <DFSDM_GetChannelFromInstance+0x8c>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d102      	bne.n	8002ace <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 4;
 8002ac8:	2304      	movs	r3, #4
 8002aca:	60fb      	str	r3, [r7, #12]
 8002acc:	e00f      	b.n	8002aee <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel5)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a0f      	ldr	r2, [pc, #60]	; (8002b10 <DFSDM_GetChannelFromInstance+0x90>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d102      	bne.n	8002adc <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 5;
 8002ad6:	2305      	movs	r3, #5
 8002ad8:	60fb      	str	r3, [r7, #12]
 8002ada:	e008      	b.n	8002aee <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel6)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	4a0d      	ldr	r2, [pc, #52]	; (8002b14 <DFSDM_GetChannelFromInstance+0x94>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d102      	bne.n	8002aea <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 6;
 8002ae4:	2306      	movs	r3, #6
 8002ae6:	60fb      	str	r3, [r7, #12]
 8002ae8:	e001      	b.n	8002aee <DFSDM_GetChannelFromInstance+0x6e>
  }
  else /* DFSDM1_Channel7 */
  {
    channel = 7;
 8002aea:	2307      	movs	r3, #7
 8002aec:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002aee:	68fb      	ldr	r3, [r7, #12]
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3714      	adds	r7, #20
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr
 8002afc:	40017800 	.word	0x40017800
 8002b00:	40017820 	.word	0x40017820
 8002b04:	40017840 	.word	0x40017840
 8002b08:	40017860 	.word	0x40017860
 8002b0c:	40017880 	.word	0x40017880
 8002b10:	400178a0 	.word	0x400178a0
 8002b14:	400178c0 	.word	0x400178c0

08002b18 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b086      	sub	sp, #24
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002b20:	f7ff fb82 	bl	8002228 <HAL_GetTick>
 8002b24:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d101      	bne.n	8002b30 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e314      	b.n	800315a <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a66      	ldr	r2, [pc, #408]	; (8002cd0 <HAL_DMA_Init+0x1b8>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d04a      	beq.n	8002bd0 <HAL_DMA_Init+0xb8>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a65      	ldr	r2, [pc, #404]	; (8002cd4 <HAL_DMA_Init+0x1bc>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d045      	beq.n	8002bd0 <HAL_DMA_Init+0xb8>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a63      	ldr	r2, [pc, #396]	; (8002cd8 <HAL_DMA_Init+0x1c0>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d040      	beq.n	8002bd0 <HAL_DMA_Init+0xb8>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a62      	ldr	r2, [pc, #392]	; (8002cdc <HAL_DMA_Init+0x1c4>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d03b      	beq.n	8002bd0 <HAL_DMA_Init+0xb8>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a60      	ldr	r2, [pc, #384]	; (8002ce0 <HAL_DMA_Init+0x1c8>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d036      	beq.n	8002bd0 <HAL_DMA_Init+0xb8>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a5f      	ldr	r2, [pc, #380]	; (8002ce4 <HAL_DMA_Init+0x1cc>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d031      	beq.n	8002bd0 <HAL_DMA_Init+0xb8>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a5d      	ldr	r2, [pc, #372]	; (8002ce8 <HAL_DMA_Init+0x1d0>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d02c      	beq.n	8002bd0 <HAL_DMA_Init+0xb8>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a5c      	ldr	r2, [pc, #368]	; (8002cec <HAL_DMA_Init+0x1d4>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d027      	beq.n	8002bd0 <HAL_DMA_Init+0xb8>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a5a      	ldr	r2, [pc, #360]	; (8002cf0 <HAL_DMA_Init+0x1d8>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d022      	beq.n	8002bd0 <HAL_DMA_Init+0xb8>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a59      	ldr	r2, [pc, #356]	; (8002cf4 <HAL_DMA_Init+0x1dc>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d01d      	beq.n	8002bd0 <HAL_DMA_Init+0xb8>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a57      	ldr	r2, [pc, #348]	; (8002cf8 <HAL_DMA_Init+0x1e0>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d018      	beq.n	8002bd0 <HAL_DMA_Init+0xb8>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a56      	ldr	r2, [pc, #344]	; (8002cfc <HAL_DMA_Init+0x1e4>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d013      	beq.n	8002bd0 <HAL_DMA_Init+0xb8>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a54      	ldr	r2, [pc, #336]	; (8002d00 <HAL_DMA_Init+0x1e8>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d00e      	beq.n	8002bd0 <HAL_DMA_Init+0xb8>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a53      	ldr	r2, [pc, #332]	; (8002d04 <HAL_DMA_Init+0x1ec>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d009      	beq.n	8002bd0 <HAL_DMA_Init+0xb8>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a51      	ldr	r2, [pc, #324]	; (8002d08 <HAL_DMA_Init+0x1f0>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d004      	beq.n	8002bd0 <HAL_DMA_Init+0xb8>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a50      	ldr	r2, [pc, #320]	; (8002d0c <HAL_DMA_Init+0x1f4>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d101      	bne.n	8002bd4 <HAL_DMA_Init+0xbc>
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e000      	b.n	8002bd6 <HAL_DMA_Init+0xbe>
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	f000 813c 	beq.w	8002e54 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2202      	movs	r2, #2
 8002be0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a37      	ldr	r2, [pc, #220]	; (8002cd0 <HAL_DMA_Init+0x1b8>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d04a      	beq.n	8002c8c <HAL_DMA_Init+0x174>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a36      	ldr	r2, [pc, #216]	; (8002cd4 <HAL_DMA_Init+0x1bc>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d045      	beq.n	8002c8c <HAL_DMA_Init+0x174>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a34      	ldr	r2, [pc, #208]	; (8002cd8 <HAL_DMA_Init+0x1c0>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d040      	beq.n	8002c8c <HAL_DMA_Init+0x174>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a33      	ldr	r2, [pc, #204]	; (8002cdc <HAL_DMA_Init+0x1c4>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d03b      	beq.n	8002c8c <HAL_DMA_Init+0x174>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a31      	ldr	r2, [pc, #196]	; (8002ce0 <HAL_DMA_Init+0x1c8>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d036      	beq.n	8002c8c <HAL_DMA_Init+0x174>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a30      	ldr	r2, [pc, #192]	; (8002ce4 <HAL_DMA_Init+0x1cc>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d031      	beq.n	8002c8c <HAL_DMA_Init+0x174>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a2e      	ldr	r2, [pc, #184]	; (8002ce8 <HAL_DMA_Init+0x1d0>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d02c      	beq.n	8002c8c <HAL_DMA_Init+0x174>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a2d      	ldr	r2, [pc, #180]	; (8002cec <HAL_DMA_Init+0x1d4>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d027      	beq.n	8002c8c <HAL_DMA_Init+0x174>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a2b      	ldr	r2, [pc, #172]	; (8002cf0 <HAL_DMA_Init+0x1d8>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d022      	beq.n	8002c8c <HAL_DMA_Init+0x174>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a2a      	ldr	r2, [pc, #168]	; (8002cf4 <HAL_DMA_Init+0x1dc>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d01d      	beq.n	8002c8c <HAL_DMA_Init+0x174>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a28      	ldr	r2, [pc, #160]	; (8002cf8 <HAL_DMA_Init+0x1e0>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d018      	beq.n	8002c8c <HAL_DMA_Init+0x174>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a27      	ldr	r2, [pc, #156]	; (8002cfc <HAL_DMA_Init+0x1e4>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d013      	beq.n	8002c8c <HAL_DMA_Init+0x174>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a25      	ldr	r2, [pc, #148]	; (8002d00 <HAL_DMA_Init+0x1e8>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d00e      	beq.n	8002c8c <HAL_DMA_Init+0x174>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a24      	ldr	r2, [pc, #144]	; (8002d04 <HAL_DMA_Init+0x1ec>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d009      	beq.n	8002c8c <HAL_DMA_Init+0x174>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a22      	ldr	r2, [pc, #136]	; (8002d08 <HAL_DMA_Init+0x1f0>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d004      	beq.n	8002c8c <HAL_DMA_Init+0x174>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a21      	ldr	r2, [pc, #132]	; (8002d0c <HAL_DMA_Init+0x1f4>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d108      	bne.n	8002c9e <HAL_DMA_Init+0x186>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f022 0201 	bic.w	r2, r2, #1
 8002c9a:	601a      	str	r2, [r3, #0]
 8002c9c:	e007      	b.n	8002cae <HAL_DMA_Init+0x196>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f022 0201 	bic.w	r2, r2, #1
 8002cac:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002cae:	e02f      	b.n	8002d10 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002cb0:	f7ff faba 	bl	8002228 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b05      	cmp	r3, #5
 8002cbc:	d928      	bls.n	8002d10 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2220      	movs	r2, #32
 8002cc2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2203      	movs	r2, #3
 8002cc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e244      	b.n	800315a <HAL_DMA_Init+0x642>
 8002cd0:	40020010 	.word	0x40020010
 8002cd4:	40020028 	.word	0x40020028
 8002cd8:	40020040 	.word	0x40020040
 8002cdc:	40020058 	.word	0x40020058
 8002ce0:	40020070 	.word	0x40020070
 8002ce4:	40020088 	.word	0x40020088
 8002ce8:	400200a0 	.word	0x400200a0
 8002cec:	400200b8 	.word	0x400200b8
 8002cf0:	40020410 	.word	0x40020410
 8002cf4:	40020428 	.word	0x40020428
 8002cf8:	40020440 	.word	0x40020440
 8002cfc:	40020458 	.word	0x40020458
 8002d00:	40020470 	.word	0x40020470
 8002d04:	40020488 	.word	0x40020488
 8002d08:	400204a0 	.word	0x400204a0
 8002d0c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d1c8      	bne.n	8002cb0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002d26:	697a      	ldr	r2, [r7, #20]
 8002d28:	4b84      	ldr	r3, [pc, #528]	; (8002f3c <HAL_DMA_Init+0x424>)
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002d36:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	691b      	ldr	r3, [r3, #16]
 8002d3c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d42:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	699b      	ldr	r3, [r3, #24]
 8002d48:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d4e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a1b      	ldr	r3, [r3, #32]
 8002d54:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002d56:	697a      	ldr	r2, [r7, #20]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d60:	2b04      	cmp	r3, #4
 8002d62:	d107      	bne.n	8002d74 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	697a      	ldr	r2, [r7, #20]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	2b28      	cmp	r3, #40	; 0x28
 8002d7a:	d903      	bls.n	8002d84 <HAL_DMA_Init+0x26c>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	2b2e      	cmp	r3, #46	; 0x2e
 8002d82:	d91f      	bls.n	8002dc4 <HAL_DMA_Init+0x2ac>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	2b3e      	cmp	r3, #62	; 0x3e
 8002d8a:	d903      	bls.n	8002d94 <HAL_DMA_Init+0x27c>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	2b42      	cmp	r3, #66	; 0x42
 8002d92:	d917      	bls.n	8002dc4 <HAL_DMA_Init+0x2ac>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	2b46      	cmp	r3, #70	; 0x46
 8002d9a:	d903      	bls.n	8002da4 <HAL_DMA_Init+0x28c>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	2b48      	cmp	r3, #72	; 0x48
 8002da2:	d90f      	bls.n	8002dc4 <HAL_DMA_Init+0x2ac>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	2b4e      	cmp	r3, #78	; 0x4e
 8002daa:	d903      	bls.n	8002db4 <HAL_DMA_Init+0x29c>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	2b52      	cmp	r3, #82	; 0x52
 8002db2:	d907      	bls.n	8002dc4 <HAL_DMA_Init+0x2ac>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	2b73      	cmp	r3, #115	; 0x73
 8002dba:	d905      	bls.n	8002dc8 <HAL_DMA_Init+0x2b0>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	2b77      	cmp	r3, #119	; 0x77
 8002dc2:	d801      	bhi.n	8002dc8 <HAL_DMA_Init+0x2b0>
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e000      	b.n	8002dca <HAL_DMA_Init+0x2b2>
 8002dc8:	2300      	movs	r3, #0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d003      	beq.n	8002dd6 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002dd4:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	697a      	ldr	r2, [r7, #20]
 8002ddc:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	695b      	ldr	r3, [r3, #20]
 8002de4:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	f023 0307 	bic.w	r3, r3, #7
 8002dec:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df2:	697a      	ldr	r2, [r7, #20]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfc:	2b04      	cmp	r3, #4
 8002dfe:	d117      	bne.n	8002e30 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e04:	697a      	ldr	r2, [r7, #20]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00e      	beq.n	8002e30 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f001 ff9a 	bl	8004d4c <DMA_CheckFifoParam>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d008      	beq.n	8002e30 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2240      	movs	r2, #64	; 0x40
 8002e22:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e194      	b.n	800315a <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	697a      	ldr	r2, [r7, #20]
 8002e36:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f001 fed5 	bl	8004be8 <DMA_CalcBaseAndBitshift>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e46:	f003 031f 	and.w	r3, r3, #31
 8002e4a:	223f      	movs	r2, #63	; 0x3f
 8002e4c:	409a      	lsls	r2, r3
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	609a      	str	r2, [r3, #8]
 8002e52:	e0ca      	b.n	8002fea <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a39      	ldr	r2, [pc, #228]	; (8002f40 <HAL_DMA_Init+0x428>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d022      	beq.n	8002ea4 <HAL_DMA_Init+0x38c>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a38      	ldr	r2, [pc, #224]	; (8002f44 <HAL_DMA_Init+0x42c>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d01d      	beq.n	8002ea4 <HAL_DMA_Init+0x38c>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a36      	ldr	r2, [pc, #216]	; (8002f48 <HAL_DMA_Init+0x430>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d018      	beq.n	8002ea4 <HAL_DMA_Init+0x38c>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a35      	ldr	r2, [pc, #212]	; (8002f4c <HAL_DMA_Init+0x434>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d013      	beq.n	8002ea4 <HAL_DMA_Init+0x38c>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a33      	ldr	r2, [pc, #204]	; (8002f50 <HAL_DMA_Init+0x438>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d00e      	beq.n	8002ea4 <HAL_DMA_Init+0x38c>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a32      	ldr	r2, [pc, #200]	; (8002f54 <HAL_DMA_Init+0x43c>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d009      	beq.n	8002ea4 <HAL_DMA_Init+0x38c>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a30      	ldr	r2, [pc, #192]	; (8002f58 <HAL_DMA_Init+0x440>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d004      	beq.n	8002ea4 <HAL_DMA_Init+0x38c>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a2f      	ldr	r2, [pc, #188]	; (8002f5c <HAL_DMA_Init+0x444>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d101      	bne.n	8002ea8 <HAL_DMA_Init+0x390>
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e000      	b.n	8002eaa <HAL_DMA_Init+0x392>
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	f000 8094 	beq.w	8002fd8 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a22      	ldr	r2, [pc, #136]	; (8002f40 <HAL_DMA_Init+0x428>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d021      	beq.n	8002efe <HAL_DMA_Init+0x3e6>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a21      	ldr	r2, [pc, #132]	; (8002f44 <HAL_DMA_Init+0x42c>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d01c      	beq.n	8002efe <HAL_DMA_Init+0x3e6>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a1f      	ldr	r2, [pc, #124]	; (8002f48 <HAL_DMA_Init+0x430>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d017      	beq.n	8002efe <HAL_DMA_Init+0x3e6>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a1e      	ldr	r2, [pc, #120]	; (8002f4c <HAL_DMA_Init+0x434>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d012      	beq.n	8002efe <HAL_DMA_Init+0x3e6>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a1c      	ldr	r2, [pc, #112]	; (8002f50 <HAL_DMA_Init+0x438>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d00d      	beq.n	8002efe <HAL_DMA_Init+0x3e6>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a1b      	ldr	r2, [pc, #108]	; (8002f54 <HAL_DMA_Init+0x43c>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d008      	beq.n	8002efe <HAL_DMA_Init+0x3e6>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a19      	ldr	r2, [pc, #100]	; (8002f58 <HAL_DMA_Init+0x440>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d003      	beq.n	8002efe <HAL_DMA_Init+0x3e6>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a18      	ldr	r2, [pc, #96]	; (8002f5c <HAL_DMA_Init+0x444>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2202      	movs	r2, #2
 8002f04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002f18:	697a      	ldr	r2, [r7, #20]
 8002f1a:	4b11      	ldr	r3, [pc, #68]	; (8002f60 <HAL_DMA_Init+0x448>)
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	2b40      	cmp	r3, #64	; 0x40
 8002f26:	d01d      	beq.n	8002f64 <HAL_DMA_Init+0x44c>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	2b80      	cmp	r3, #128	; 0x80
 8002f2e:	d102      	bne.n	8002f36 <HAL_DMA_Init+0x41e>
 8002f30:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002f34:	e017      	b.n	8002f66 <HAL_DMA_Init+0x44e>
 8002f36:	2300      	movs	r3, #0
 8002f38:	e015      	b.n	8002f66 <HAL_DMA_Init+0x44e>
 8002f3a:	bf00      	nop
 8002f3c:	fe10803f 	.word	0xfe10803f
 8002f40:	58025408 	.word	0x58025408
 8002f44:	5802541c 	.word	0x5802541c
 8002f48:	58025430 	.word	0x58025430
 8002f4c:	58025444 	.word	0x58025444
 8002f50:	58025458 	.word	0x58025458
 8002f54:	5802546c 	.word	0x5802546c
 8002f58:	58025480 	.word	0x58025480
 8002f5c:	58025494 	.word	0x58025494
 8002f60:	fffe000f 	.word	0xfffe000f
 8002f64:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	68d2      	ldr	r2, [r2, #12]
 8002f6a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002f6c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002f74:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002f7c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	699b      	ldr	r3, [r3, #24]
 8002f82:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002f84:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	69db      	ldr	r3, [r3, #28]
 8002f8a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002f8c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a1b      	ldr	r3, [r3, #32]
 8002f92:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002f94:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002f96:	697a      	ldr	r2, [r7, #20]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	697a      	ldr	r2, [r7, #20]
 8002fa2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	461a      	mov	r2, r3
 8002faa:	4b6e      	ldr	r3, [pc, #440]	; (8003164 <HAL_DMA_Init+0x64c>)
 8002fac:	4413      	add	r3, r2
 8002fae:	4a6e      	ldr	r2, [pc, #440]	; (8003168 <HAL_DMA_Init+0x650>)
 8002fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb4:	091b      	lsrs	r3, r3, #4
 8002fb6:	009a      	lsls	r2, r3, #2
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f001 fe13 	bl	8004be8 <DMA_CalcBaseAndBitshift>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fca:	f003 031f 	and.w	r3, r3, #31
 8002fce:	2201      	movs	r2, #1
 8002fd0:	409a      	lsls	r2, r3
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	605a      	str	r2, [r3, #4]
 8002fd6:	e008      	b.n	8002fea <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2240      	movs	r2, #64	; 0x40
 8002fdc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2203      	movs	r2, #3
 8002fe2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e0b7      	b.n	800315a <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a5f      	ldr	r2, [pc, #380]	; (800316c <HAL_DMA_Init+0x654>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d072      	beq.n	80030da <HAL_DMA_Init+0x5c2>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a5d      	ldr	r2, [pc, #372]	; (8003170 <HAL_DMA_Init+0x658>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d06d      	beq.n	80030da <HAL_DMA_Init+0x5c2>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a5c      	ldr	r2, [pc, #368]	; (8003174 <HAL_DMA_Init+0x65c>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d068      	beq.n	80030da <HAL_DMA_Init+0x5c2>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a5a      	ldr	r2, [pc, #360]	; (8003178 <HAL_DMA_Init+0x660>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d063      	beq.n	80030da <HAL_DMA_Init+0x5c2>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a59      	ldr	r2, [pc, #356]	; (800317c <HAL_DMA_Init+0x664>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d05e      	beq.n	80030da <HAL_DMA_Init+0x5c2>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a57      	ldr	r2, [pc, #348]	; (8003180 <HAL_DMA_Init+0x668>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d059      	beq.n	80030da <HAL_DMA_Init+0x5c2>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a56      	ldr	r2, [pc, #344]	; (8003184 <HAL_DMA_Init+0x66c>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d054      	beq.n	80030da <HAL_DMA_Init+0x5c2>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a54      	ldr	r2, [pc, #336]	; (8003188 <HAL_DMA_Init+0x670>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d04f      	beq.n	80030da <HAL_DMA_Init+0x5c2>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a53      	ldr	r2, [pc, #332]	; (800318c <HAL_DMA_Init+0x674>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d04a      	beq.n	80030da <HAL_DMA_Init+0x5c2>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a51      	ldr	r2, [pc, #324]	; (8003190 <HAL_DMA_Init+0x678>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d045      	beq.n	80030da <HAL_DMA_Init+0x5c2>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a50      	ldr	r2, [pc, #320]	; (8003194 <HAL_DMA_Init+0x67c>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d040      	beq.n	80030da <HAL_DMA_Init+0x5c2>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a4e      	ldr	r2, [pc, #312]	; (8003198 <HAL_DMA_Init+0x680>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d03b      	beq.n	80030da <HAL_DMA_Init+0x5c2>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a4d      	ldr	r2, [pc, #308]	; (800319c <HAL_DMA_Init+0x684>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d036      	beq.n	80030da <HAL_DMA_Init+0x5c2>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a4b      	ldr	r2, [pc, #300]	; (80031a0 <HAL_DMA_Init+0x688>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d031      	beq.n	80030da <HAL_DMA_Init+0x5c2>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a4a      	ldr	r2, [pc, #296]	; (80031a4 <HAL_DMA_Init+0x68c>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d02c      	beq.n	80030da <HAL_DMA_Init+0x5c2>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a48      	ldr	r2, [pc, #288]	; (80031a8 <HAL_DMA_Init+0x690>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d027      	beq.n	80030da <HAL_DMA_Init+0x5c2>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a47      	ldr	r2, [pc, #284]	; (80031ac <HAL_DMA_Init+0x694>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d022      	beq.n	80030da <HAL_DMA_Init+0x5c2>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a45      	ldr	r2, [pc, #276]	; (80031b0 <HAL_DMA_Init+0x698>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d01d      	beq.n	80030da <HAL_DMA_Init+0x5c2>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a44      	ldr	r2, [pc, #272]	; (80031b4 <HAL_DMA_Init+0x69c>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d018      	beq.n	80030da <HAL_DMA_Init+0x5c2>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a42      	ldr	r2, [pc, #264]	; (80031b8 <HAL_DMA_Init+0x6a0>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d013      	beq.n	80030da <HAL_DMA_Init+0x5c2>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a41      	ldr	r2, [pc, #260]	; (80031bc <HAL_DMA_Init+0x6a4>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d00e      	beq.n	80030da <HAL_DMA_Init+0x5c2>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a3f      	ldr	r2, [pc, #252]	; (80031c0 <HAL_DMA_Init+0x6a8>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d009      	beq.n	80030da <HAL_DMA_Init+0x5c2>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a3e      	ldr	r2, [pc, #248]	; (80031c4 <HAL_DMA_Init+0x6ac>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d004      	beq.n	80030da <HAL_DMA_Init+0x5c2>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a3c      	ldr	r2, [pc, #240]	; (80031c8 <HAL_DMA_Init+0x6b0>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d101      	bne.n	80030de <HAL_DMA_Init+0x5c6>
 80030da:	2301      	movs	r3, #1
 80030dc:	e000      	b.n	80030e0 <HAL_DMA_Init+0x5c8>
 80030de:	2300      	movs	r3, #0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d032      	beq.n	800314a <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f001 fead 	bl	8004e44 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	2b80      	cmp	r3, #128	; 0x80
 80030f0:	d102      	bne.n	80030f8 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685a      	ldr	r2, [r3, #4]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003100:	b2d2      	uxtb	r2, r2
 8003102:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800310c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d010      	beq.n	8003138 <HAL_DMA_Init+0x620>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	2b08      	cmp	r3, #8
 800311c:	d80c      	bhi.n	8003138 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f001 ff2a 	bl	8004f78 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003128:	2200      	movs	r2, #0
 800312a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003134:	605a      	str	r2, [r3, #4]
 8003136:	e008      	b.n	800314a <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	3718      	adds	r7, #24
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	a7fdabf8 	.word	0xa7fdabf8
 8003168:	cccccccd 	.word	0xcccccccd
 800316c:	40020010 	.word	0x40020010
 8003170:	40020028 	.word	0x40020028
 8003174:	40020040 	.word	0x40020040
 8003178:	40020058 	.word	0x40020058
 800317c:	40020070 	.word	0x40020070
 8003180:	40020088 	.word	0x40020088
 8003184:	400200a0 	.word	0x400200a0
 8003188:	400200b8 	.word	0x400200b8
 800318c:	40020410 	.word	0x40020410
 8003190:	40020428 	.word	0x40020428
 8003194:	40020440 	.word	0x40020440
 8003198:	40020458 	.word	0x40020458
 800319c:	40020470 	.word	0x40020470
 80031a0:	40020488 	.word	0x40020488
 80031a4:	400204a0 	.word	0x400204a0
 80031a8:	400204b8 	.word	0x400204b8
 80031ac:	58025408 	.word	0x58025408
 80031b0:	5802541c 	.word	0x5802541c
 80031b4:	58025430 	.word	0x58025430
 80031b8:	58025444 	.word	0x58025444
 80031bc:	58025458 	.word	0x58025458
 80031c0:	5802546c 	.word	0x5802546c
 80031c4:	58025480 	.word	0x58025480
 80031c8:	58025494 	.word	0x58025494

080031cc <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d101      	bne.n	80031de <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e1a8      	b.n	8003530 <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a82      	ldr	r2, [pc, #520]	; (80033ec <HAL_DMA_DeInit+0x220>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d04a      	beq.n	800327e <HAL_DMA_DeInit+0xb2>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a80      	ldr	r2, [pc, #512]	; (80033f0 <HAL_DMA_DeInit+0x224>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d045      	beq.n	800327e <HAL_DMA_DeInit+0xb2>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a7f      	ldr	r2, [pc, #508]	; (80033f4 <HAL_DMA_DeInit+0x228>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d040      	beq.n	800327e <HAL_DMA_DeInit+0xb2>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a7d      	ldr	r2, [pc, #500]	; (80033f8 <HAL_DMA_DeInit+0x22c>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d03b      	beq.n	800327e <HAL_DMA_DeInit+0xb2>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a7c      	ldr	r2, [pc, #496]	; (80033fc <HAL_DMA_DeInit+0x230>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d036      	beq.n	800327e <HAL_DMA_DeInit+0xb2>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a7a      	ldr	r2, [pc, #488]	; (8003400 <HAL_DMA_DeInit+0x234>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d031      	beq.n	800327e <HAL_DMA_DeInit+0xb2>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a79      	ldr	r2, [pc, #484]	; (8003404 <HAL_DMA_DeInit+0x238>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d02c      	beq.n	800327e <HAL_DMA_DeInit+0xb2>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a77      	ldr	r2, [pc, #476]	; (8003408 <HAL_DMA_DeInit+0x23c>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d027      	beq.n	800327e <HAL_DMA_DeInit+0xb2>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a76      	ldr	r2, [pc, #472]	; (800340c <HAL_DMA_DeInit+0x240>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d022      	beq.n	800327e <HAL_DMA_DeInit+0xb2>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a74      	ldr	r2, [pc, #464]	; (8003410 <HAL_DMA_DeInit+0x244>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d01d      	beq.n	800327e <HAL_DMA_DeInit+0xb2>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a73      	ldr	r2, [pc, #460]	; (8003414 <HAL_DMA_DeInit+0x248>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d018      	beq.n	800327e <HAL_DMA_DeInit+0xb2>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a71      	ldr	r2, [pc, #452]	; (8003418 <HAL_DMA_DeInit+0x24c>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d013      	beq.n	800327e <HAL_DMA_DeInit+0xb2>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a70      	ldr	r2, [pc, #448]	; (800341c <HAL_DMA_DeInit+0x250>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d00e      	beq.n	800327e <HAL_DMA_DeInit+0xb2>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a6e      	ldr	r2, [pc, #440]	; (8003420 <HAL_DMA_DeInit+0x254>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d009      	beq.n	800327e <HAL_DMA_DeInit+0xb2>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a6d      	ldr	r2, [pc, #436]	; (8003424 <HAL_DMA_DeInit+0x258>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d004      	beq.n	800327e <HAL_DMA_DeInit+0xb2>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a6b      	ldr	r2, [pc, #428]	; (8003428 <HAL_DMA_DeInit+0x25c>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d108      	bne.n	8003290 <HAL_DMA_DeInit+0xc4>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f022 0201 	bic.w	r2, r2, #1
 800328c:	601a      	str	r2, [r3, #0]
 800328e:	e007      	b.n	80032a0 <HAL_DMA_DeInit+0xd4>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f022 0201 	bic.w	r2, r2, #1
 800329e:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a51      	ldr	r2, [pc, #324]	; (80033ec <HAL_DMA_DeInit+0x220>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d04a      	beq.n	8003340 <HAL_DMA_DeInit+0x174>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a50      	ldr	r2, [pc, #320]	; (80033f0 <HAL_DMA_DeInit+0x224>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d045      	beq.n	8003340 <HAL_DMA_DeInit+0x174>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a4e      	ldr	r2, [pc, #312]	; (80033f4 <HAL_DMA_DeInit+0x228>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d040      	beq.n	8003340 <HAL_DMA_DeInit+0x174>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a4d      	ldr	r2, [pc, #308]	; (80033f8 <HAL_DMA_DeInit+0x22c>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d03b      	beq.n	8003340 <HAL_DMA_DeInit+0x174>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a4b      	ldr	r2, [pc, #300]	; (80033fc <HAL_DMA_DeInit+0x230>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d036      	beq.n	8003340 <HAL_DMA_DeInit+0x174>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a4a      	ldr	r2, [pc, #296]	; (8003400 <HAL_DMA_DeInit+0x234>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d031      	beq.n	8003340 <HAL_DMA_DeInit+0x174>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a48      	ldr	r2, [pc, #288]	; (8003404 <HAL_DMA_DeInit+0x238>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d02c      	beq.n	8003340 <HAL_DMA_DeInit+0x174>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a47      	ldr	r2, [pc, #284]	; (8003408 <HAL_DMA_DeInit+0x23c>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d027      	beq.n	8003340 <HAL_DMA_DeInit+0x174>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a45      	ldr	r2, [pc, #276]	; (800340c <HAL_DMA_DeInit+0x240>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d022      	beq.n	8003340 <HAL_DMA_DeInit+0x174>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a44      	ldr	r2, [pc, #272]	; (8003410 <HAL_DMA_DeInit+0x244>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d01d      	beq.n	8003340 <HAL_DMA_DeInit+0x174>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a42      	ldr	r2, [pc, #264]	; (8003414 <HAL_DMA_DeInit+0x248>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d018      	beq.n	8003340 <HAL_DMA_DeInit+0x174>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a41      	ldr	r2, [pc, #260]	; (8003418 <HAL_DMA_DeInit+0x24c>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d013      	beq.n	8003340 <HAL_DMA_DeInit+0x174>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a3f      	ldr	r2, [pc, #252]	; (800341c <HAL_DMA_DeInit+0x250>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d00e      	beq.n	8003340 <HAL_DMA_DeInit+0x174>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a3e      	ldr	r2, [pc, #248]	; (8003420 <HAL_DMA_DeInit+0x254>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d009      	beq.n	8003340 <HAL_DMA_DeInit+0x174>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a3c      	ldr	r2, [pc, #240]	; (8003424 <HAL_DMA_DeInit+0x258>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d004      	beq.n	8003340 <HAL_DMA_DeInit+0x174>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a3b      	ldr	r2, [pc, #236]	; (8003428 <HAL_DMA_DeInit+0x25c>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d101      	bne.n	8003344 <HAL_DMA_DeInit+0x178>
 8003340:	2301      	movs	r3, #1
 8003342:	e000      	b.n	8003346 <HAL_DMA_DeInit+0x17a>
 8003344:	2300      	movs	r3, #0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d025      	beq.n	8003396 <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	2200      	movs	r2, #0
 8003350:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2200      	movs	r2, #0
 8003358:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2200      	movs	r2, #0
 8003360:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2200      	movs	r2, #0
 8003368:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2200      	movs	r2, #0
 8003370:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2221      	movs	r2, #33	; 0x21
 8003378:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f001 fc34 	bl	8004be8 <DMA_CalcBaseAndBitshift>
 8003380:	4603      	mov	r3, r0
 8003382:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003388:	f003 031f 	and.w	r3, r3, #31
 800338c:	223f      	movs	r2, #63	; 0x3f
 800338e:	409a      	lsls	r2, r3
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	609a      	str	r2, [r3, #8]
 8003394:	e081      	b.n	800349a <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a24      	ldr	r2, [pc, #144]	; (800342c <HAL_DMA_DeInit+0x260>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d022      	beq.n	80033e6 <HAL_DMA_DeInit+0x21a>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a22      	ldr	r2, [pc, #136]	; (8003430 <HAL_DMA_DeInit+0x264>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d01d      	beq.n	80033e6 <HAL_DMA_DeInit+0x21a>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a21      	ldr	r2, [pc, #132]	; (8003434 <HAL_DMA_DeInit+0x268>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d018      	beq.n	80033e6 <HAL_DMA_DeInit+0x21a>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a1f      	ldr	r2, [pc, #124]	; (8003438 <HAL_DMA_DeInit+0x26c>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d013      	beq.n	80033e6 <HAL_DMA_DeInit+0x21a>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a1e      	ldr	r2, [pc, #120]	; (800343c <HAL_DMA_DeInit+0x270>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d00e      	beq.n	80033e6 <HAL_DMA_DeInit+0x21a>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a1c      	ldr	r2, [pc, #112]	; (8003440 <HAL_DMA_DeInit+0x274>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d009      	beq.n	80033e6 <HAL_DMA_DeInit+0x21a>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a1b      	ldr	r2, [pc, #108]	; (8003444 <HAL_DMA_DeInit+0x278>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d004      	beq.n	80033e6 <HAL_DMA_DeInit+0x21a>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a19      	ldr	r2, [pc, #100]	; (8003448 <HAL_DMA_DeInit+0x27c>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d132      	bne.n	800344c <HAL_DMA_DeInit+0x280>
 80033e6:	2301      	movs	r3, #1
 80033e8:	e031      	b.n	800344e <HAL_DMA_DeInit+0x282>
 80033ea:	bf00      	nop
 80033ec:	40020010 	.word	0x40020010
 80033f0:	40020028 	.word	0x40020028
 80033f4:	40020040 	.word	0x40020040
 80033f8:	40020058 	.word	0x40020058
 80033fc:	40020070 	.word	0x40020070
 8003400:	40020088 	.word	0x40020088
 8003404:	400200a0 	.word	0x400200a0
 8003408:	400200b8 	.word	0x400200b8
 800340c:	40020410 	.word	0x40020410
 8003410:	40020428 	.word	0x40020428
 8003414:	40020440 	.word	0x40020440
 8003418:	40020458 	.word	0x40020458
 800341c:	40020470 	.word	0x40020470
 8003420:	40020488 	.word	0x40020488
 8003424:	400204a0 	.word	0x400204a0
 8003428:	400204b8 	.word	0x400204b8
 800342c:	58025408 	.word	0x58025408
 8003430:	5802541c 	.word	0x5802541c
 8003434:	58025430 	.word	0x58025430
 8003438:	58025444 	.word	0x58025444
 800343c:	58025458 	.word	0x58025458
 8003440:	5802546c 	.word	0x5802546c
 8003444:	58025480 	.word	0x58025480
 8003448:	58025494 	.word	0x58025494
 800344c:	2300      	movs	r3, #0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d021      	beq.n	8003496 <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2200      	movs	r2, #0
 8003458:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2200      	movs	r2, #0
 8003460:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	2200      	movs	r2, #0
 8003468:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2200      	movs	r2, #0
 8003470:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2200      	movs	r2, #0
 8003478:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f001 fbb4 	bl	8004be8 <DMA_CalcBaseAndBitshift>
 8003480:	4603      	mov	r3, r0
 8003482:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003488:	f003 031f 	and.w	r3, r3, #31
 800348c:	2201      	movs	r2, #1
 800348e:	409a      	lsls	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	605a      	str	r2, [r3, #4]
 8003494:	e001      	b.n	800349a <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e04a      	b.n	8003530 <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f001 fcd2 	bl	8004e44 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d008      	beq.n	80034ba <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034ac:	2200      	movs	r2, #0
 80034ae:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80034b8:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00f      	beq.n	80034e2 <HAL_DMA_DeInit+0x316>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	2b08      	cmp	r3, #8
 80034c8:	d80b      	bhi.n	80034e2 <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f001 fd54 	bl	8004f78 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034d4:	2200      	movs	r2, #0
 80034d6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80034e0:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	671a      	str	r2, [r3, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	675a      	str	r2, [r3, #116]	; 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback     = NULL;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback      = NULL;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback      = NULL;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	651a      	str	r2, [r3, #80]	; 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800352e:	2300      	movs	r3, #0
}
 8003530:	4618      	mov	r0, r3
 8003532:	3710      	adds	r7, #16
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b086      	sub	sp, #24
 800353c:	af00      	add	r7, sp, #0
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	60b9      	str	r1, [r7, #8]
 8003542:	607a      	str	r2, [r7, #4]
 8003544:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003546:	2300      	movs	r3, #0
 8003548:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d101      	bne.n	8003554 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e22b      	b.n	80039ac <HAL_DMA_Start_IT+0x474>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800355a:	2b01      	cmp	r3, #1
 800355c:	d101      	bne.n	8003562 <HAL_DMA_Start_IT+0x2a>
 800355e:	2302      	movs	r3, #2
 8003560:	e224      	b.n	80039ac <HAL_DMA_Start_IT+0x474>
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2201      	movs	r2, #1
 8003566:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003570:	b2db      	uxtb	r3, r3
 8003572:	2b01      	cmp	r3, #1
 8003574:	f040 820f 	bne.w	8003996 <HAL_DMA_Start_IT+0x45e>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2202      	movs	r2, #2
 800357c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2200      	movs	r2, #0
 8003584:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a68      	ldr	r2, [pc, #416]	; (800372c <HAL_DMA_Start_IT+0x1f4>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d04a      	beq.n	8003626 <HAL_DMA_Start_IT+0xee>
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a66      	ldr	r2, [pc, #408]	; (8003730 <HAL_DMA_Start_IT+0x1f8>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d045      	beq.n	8003626 <HAL_DMA_Start_IT+0xee>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a65      	ldr	r2, [pc, #404]	; (8003734 <HAL_DMA_Start_IT+0x1fc>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d040      	beq.n	8003626 <HAL_DMA_Start_IT+0xee>
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a63      	ldr	r2, [pc, #396]	; (8003738 <HAL_DMA_Start_IT+0x200>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d03b      	beq.n	8003626 <HAL_DMA_Start_IT+0xee>
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a62      	ldr	r2, [pc, #392]	; (800373c <HAL_DMA_Start_IT+0x204>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d036      	beq.n	8003626 <HAL_DMA_Start_IT+0xee>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a60      	ldr	r2, [pc, #384]	; (8003740 <HAL_DMA_Start_IT+0x208>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d031      	beq.n	8003626 <HAL_DMA_Start_IT+0xee>
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a5f      	ldr	r2, [pc, #380]	; (8003744 <HAL_DMA_Start_IT+0x20c>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d02c      	beq.n	8003626 <HAL_DMA_Start_IT+0xee>
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a5d      	ldr	r2, [pc, #372]	; (8003748 <HAL_DMA_Start_IT+0x210>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d027      	beq.n	8003626 <HAL_DMA_Start_IT+0xee>
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a5c      	ldr	r2, [pc, #368]	; (800374c <HAL_DMA_Start_IT+0x214>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d022      	beq.n	8003626 <HAL_DMA_Start_IT+0xee>
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a5a      	ldr	r2, [pc, #360]	; (8003750 <HAL_DMA_Start_IT+0x218>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d01d      	beq.n	8003626 <HAL_DMA_Start_IT+0xee>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a59      	ldr	r2, [pc, #356]	; (8003754 <HAL_DMA_Start_IT+0x21c>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d018      	beq.n	8003626 <HAL_DMA_Start_IT+0xee>
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a57      	ldr	r2, [pc, #348]	; (8003758 <HAL_DMA_Start_IT+0x220>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d013      	beq.n	8003626 <HAL_DMA_Start_IT+0xee>
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a56      	ldr	r2, [pc, #344]	; (800375c <HAL_DMA_Start_IT+0x224>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d00e      	beq.n	8003626 <HAL_DMA_Start_IT+0xee>
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a54      	ldr	r2, [pc, #336]	; (8003760 <HAL_DMA_Start_IT+0x228>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d009      	beq.n	8003626 <HAL_DMA_Start_IT+0xee>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a53      	ldr	r2, [pc, #332]	; (8003764 <HAL_DMA_Start_IT+0x22c>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d004      	beq.n	8003626 <HAL_DMA_Start_IT+0xee>
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a51      	ldr	r2, [pc, #324]	; (8003768 <HAL_DMA_Start_IT+0x230>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d108      	bne.n	8003638 <HAL_DMA_Start_IT+0x100>
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f022 0201 	bic.w	r2, r2, #1
 8003634:	601a      	str	r2, [r3, #0]
 8003636:	e007      	b.n	8003648 <HAL_DMA_Start_IT+0x110>
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f022 0201 	bic.w	r2, r2, #1
 8003646:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003648:	68f8      	ldr	r0, [r7, #12]
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	68b9      	ldr	r1, [r7, #8]
 8003650:	f001 f916 	bl	8004880 <DMA_SetConfig>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a34      	ldr	r2, [pc, #208]	; (800372c <HAL_DMA_Start_IT+0x1f4>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d04a      	beq.n	80036f4 <HAL_DMA_Start_IT+0x1bc>
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a33      	ldr	r2, [pc, #204]	; (8003730 <HAL_DMA_Start_IT+0x1f8>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d045      	beq.n	80036f4 <HAL_DMA_Start_IT+0x1bc>
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a31      	ldr	r2, [pc, #196]	; (8003734 <HAL_DMA_Start_IT+0x1fc>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d040      	beq.n	80036f4 <HAL_DMA_Start_IT+0x1bc>
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a30      	ldr	r2, [pc, #192]	; (8003738 <HAL_DMA_Start_IT+0x200>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d03b      	beq.n	80036f4 <HAL_DMA_Start_IT+0x1bc>
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a2e      	ldr	r2, [pc, #184]	; (800373c <HAL_DMA_Start_IT+0x204>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d036      	beq.n	80036f4 <HAL_DMA_Start_IT+0x1bc>
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a2d      	ldr	r2, [pc, #180]	; (8003740 <HAL_DMA_Start_IT+0x208>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d031      	beq.n	80036f4 <HAL_DMA_Start_IT+0x1bc>
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a2b      	ldr	r2, [pc, #172]	; (8003744 <HAL_DMA_Start_IT+0x20c>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d02c      	beq.n	80036f4 <HAL_DMA_Start_IT+0x1bc>
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a2a      	ldr	r2, [pc, #168]	; (8003748 <HAL_DMA_Start_IT+0x210>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d027      	beq.n	80036f4 <HAL_DMA_Start_IT+0x1bc>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a28      	ldr	r2, [pc, #160]	; (800374c <HAL_DMA_Start_IT+0x214>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d022      	beq.n	80036f4 <HAL_DMA_Start_IT+0x1bc>
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a27      	ldr	r2, [pc, #156]	; (8003750 <HAL_DMA_Start_IT+0x218>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d01d      	beq.n	80036f4 <HAL_DMA_Start_IT+0x1bc>
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a25      	ldr	r2, [pc, #148]	; (8003754 <HAL_DMA_Start_IT+0x21c>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d018      	beq.n	80036f4 <HAL_DMA_Start_IT+0x1bc>
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a24      	ldr	r2, [pc, #144]	; (8003758 <HAL_DMA_Start_IT+0x220>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d013      	beq.n	80036f4 <HAL_DMA_Start_IT+0x1bc>
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a22      	ldr	r2, [pc, #136]	; (800375c <HAL_DMA_Start_IT+0x224>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d00e      	beq.n	80036f4 <HAL_DMA_Start_IT+0x1bc>
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a21      	ldr	r2, [pc, #132]	; (8003760 <HAL_DMA_Start_IT+0x228>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d009      	beq.n	80036f4 <HAL_DMA_Start_IT+0x1bc>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a1f      	ldr	r2, [pc, #124]	; (8003764 <HAL_DMA_Start_IT+0x22c>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d004      	beq.n	80036f4 <HAL_DMA_Start_IT+0x1bc>
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a1e      	ldr	r2, [pc, #120]	; (8003768 <HAL_DMA_Start_IT+0x230>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d101      	bne.n	80036f8 <HAL_DMA_Start_IT+0x1c0>
 80036f4:	2301      	movs	r3, #1
 80036f6:	e000      	b.n	80036fa <HAL_DMA_Start_IT+0x1c2>
 80036f8:	2300      	movs	r3, #0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d036      	beq.n	800376c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f023 021e 	bic.w	r2, r3, #30
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f042 0216 	orr.w	r2, r2, #22
 8003710:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003716:	2b00      	cmp	r3, #0
 8003718:	d043      	beq.n	80037a2 <HAL_DMA_Start_IT+0x26a>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f042 0208 	orr.w	r2, r2, #8
 8003728:	601a      	str	r2, [r3, #0]
 800372a:	e03a      	b.n	80037a2 <HAL_DMA_Start_IT+0x26a>
 800372c:	40020010 	.word	0x40020010
 8003730:	40020028 	.word	0x40020028
 8003734:	40020040 	.word	0x40020040
 8003738:	40020058 	.word	0x40020058
 800373c:	40020070 	.word	0x40020070
 8003740:	40020088 	.word	0x40020088
 8003744:	400200a0 	.word	0x400200a0
 8003748:	400200b8 	.word	0x400200b8
 800374c:	40020410 	.word	0x40020410
 8003750:	40020428 	.word	0x40020428
 8003754:	40020440 	.word	0x40020440
 8003758:	40020458 	.word	0x40020458
 800375c:	40020470 	.word	0x40020470
 8003760:	40020488 	.word	0x40020488
 8003764:	400204a0 	.word	0x400204a0
 8003768:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f023 020e 	bic.w	r2, r3, #14
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f042 020a 	orr.w	r2, r2, #10
 800377e:	601a      	str	r2, [r3, #0]
      //TODO: added enable for mux request generator
      HAL_DMAEx_EnableMuxRequestGenerator(&hdma);
 8003780:	f107 030c 	add.w	r3, r7, #12
 8003784:	4618      	mov	r0, r3
 8003786:	f001 fd31 	bl	80051ec <HAL_DMAEx_EnableMuxRequestGenerator>
      if(hdma->XferHalfCpltCallback != NULL)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378e:	2b00      	cmp	r3, #0
 8003790:	d007      	beq.n	80037a2 <HAL_DMA_Start_IT+0x26a>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f042 0204 	orr.w	r2, r2, #4
 80037a0:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a83      	ldr	r2, [pc, #524]	; (80039b4 <HAL_DMA_Start_IT+0x47c>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d072      	beq.n	8003892 <HAL_DMA_Start_IT+0x35a>
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a81      	ldr	r2, [pc, #516]	; (80039b8 <HAL_DMA_Start_IT+0x480>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d06d      	beq.n	8003892 <HAL_DMA_Start_IT+0x35a>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a80      	ldr	r2, [pc, #512]	; (80039bc <HAL_DMA_Start_IT+0x484>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d068      	beq.n	8003892 <HAL_DMA_Start_IT+0x35a>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a7e      	ldr	r2, [pc, #504]	; (80039c0 <HAL_DMA_Start_IT+0x488>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d063      	beq.n	8003892 <HAL_DMA_Start_IT+0x35a>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a7d      	ldr	r2, [pc, #500]	; (80039c4 <HAL_DMA_Start_IT+0x48c>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d05e      	beq.n	8003892 <HAL_DMA_Start_IT+0x35a>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a7b      	ldr	r2, [pc, #492]	; (80039c8 <HAL_DMA_Start_IT+0x490>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d059      	beq.n	8003892 <HAL_DMA_Start_IT+0x35a>
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a7a      	ldr	r2, [pc, #488]	; (80039cc <HAL_DMA_Start_IT+0x494>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d054      	beq.n	8003892 <HAL_DMA_Start_IT+0x35a>
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a78      	ldr	r2, [pc, #480]	; (80039d0 <HAL_DMA_Start_IT+0x498>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d04f      	beq.n	8003892 <HAL_DMA_Start_IT+0x35a>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a77      	ldr	r2, [pc, #476]	; (80039d4 <HAL_DMA_Start_IT+0x49c>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d04a      	beq.n	8003892 <HAL_DMA_Start_IT+0x35a>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a75      	ldr	r2, [pc, #468]	; (80039d8 <HAL_DMA_Start_IT+0x4a0>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d045      	beq.n	8003892 <HAL_DMA_Start_IT+0x35a>
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a74      	ldr	r2, [pc, #464]	; (80039dc <HAL_DMA_Start_IT+0x4a4>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d040      	beq.n	8003892 <HAL_DMA_Start_IT+0x35a>
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a72      	ldr	r2, [pc, #456]	; (80039e0 <HAL_DMA_Start_IT+0x4a8>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d03b      	beq.n	8003892 <HAL_DMA_Start_IT+0x35a>
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a71      	ldr	r2, [pc, #452]	; (80039e4 <HAL_DMA_Start_IT+0x4ac>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d036      	beq.n	8003892 <HAL_DMA_Start_IT+0x35a>
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a6f      	ldr	r2, [pc, #444]	; (80039e8 <HAL_DMA_Start_IT+0x4b0>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d031      	beq.n	8003892 <HAL_DMA_Start_IT+0x35a>
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a6e      	ldr	r2, [pc, #440]	; (80039ec <HAL_DMA_Start_IT+0x4b4>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d02c      	beq.n	8003892 <HAL_DMA_Start_IT+0x35a>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a6c      	ldr	r2, [pc, #432]	; (80039f0 <HAL_DMA_Start_IT+0x4b8>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d027      	beq.n	8003892 <HAL_DMA_Start_IT+0x35a>
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a6b      	ldr	r2, [pc, #428]	; (80039f4 <HAL_DMA_Start_IT+0x4bc>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d022      	beq.n	8003892 <HAL_DMA_Start_IT+0x35a>
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a69      	ldr	r2, [pc, #420]	; (80039f8 <HAL_DMA_Start_IT+0x4c0>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d01d      	beq.n	8003892 <HAL_DMA_Start_IT+0x35a>
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a68      	ldr	r2, [pc, #416]	; (80039fc <HAL_DMA_Start_IT+0x4c4>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d018      	beq.n	8003892 <HAL_DMA_Start_IT+0x35a>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a66      	ldr	r2, [pc, #408]	; (8003a00 <HAL_DMA_Start_IT+0x4c8>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d013      	beq.n	8003892 <HAL_DMA_Start_IT+0x35a>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a65      	ldr	r2, [pc, #404]	; (8003a04 <HAL_DMA_Start_IT+0x4cc>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d00e      	beq.n	8003892 <HAL_DMA_Start_IT+0x35a>
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a63      	ldr	r2, [pc, #396]	; (8003a08 <HAL_DMA_Start_IT+0x4d0>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d009      	beq.n	8003892 <HAL_DMA_Start_IT+0x35a>
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a62      	ldr	r2, [pc, #392]	; (8003a0c <HAL_DMA_Start_IT+0x4d4>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d004      	beq.n	8003892 <HAL_DMA_Start_IT+0x35a>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a60      	ldr	r2, [pc, #384]	; (8003a10 <HAL_DMA_Start_IT+0x4d8>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d101      	bne.n	8003896 <HAL_DMA_Start_IT+0x35e>
 8003892:	2301      	movs	r3, #1
 8003894:	e000      	b.n	8003898 <HAL_DMA_Start_IT+0x360>
 8003896:	2300      	movs	r3, #0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d01a      	beq.n	80038d2 <HAL_DMA_Start_IT+0x39a>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d007      	beq.n	80038ba <HAL_DMA_Start_IT+0x382>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038b8:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d007      	beq.n	80038d2 <HAL_DMA_Start_IT+0x39a>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038d0:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a37      	ldr	r2, [pc, #220]	; (80039b4 <HAL_DMA_Start_IT+0x47c>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d04a      	beq.n	8003972 <HAL_DMA_Start_IT+0x43a>
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a35      	ldr	r2, [pc, #212]	; (80039b8 <HAL_DMA_Start_IT+0x480>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d045      	beq.n	8003972 <HAL_DMA_Start_IT+0x43a>
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a34      	ldr	r2, [pc, #208]	; (80039bc <HAL_DMA_Start_IT+0x484>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d040      	beq.n	8003972 <HAL_DMA_Start_IT+0x43a>
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a32      	ldr	r2, [pc, #200]	; (80039c0 <HAL_DMA_Start_IT+0x488>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d03b      	beq.n	8003972 <HAL_DMA_Start_IT+0x43a>
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a31      	ldr	r2, [pc, #196]	; (80039c4 <HAL_DMA_Start_IT+0x48c>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d036      	beq.n	8003972 <HAL_DMA_Start_IT+0x43a>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a2f      	ldr	r2, [pc, #188]	; (80039c8 <HAL_DMA_Start_IT+0x490>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d031      	beq.n	8003972 <HAL_DMA_Start_IT+0x43a>
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a2e      	ldr	r2, [pc, #184]	; (80039cc <HAL_DMA_Start_IT+0x494>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d02c      	beq.n	8003972 <HAL_DMA_Start_IT+0x43a>
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a2c      	ldr	r2, [pc, #176]	; (80039d0 <HAL_DMA_Start_IT+0x498>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d027      	beq.n	8003972 <HAL_DMA_Start_IT+0x43a>
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a2b      	ldr	r2, [pc, #172]	; (80039d4 <HAL_DMA_Start_IT+0x49c>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d022      	beq.n	8003972 <HAL_DMA_Start_IT+0x43a>
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a29      	ldr	r2, [pc, #164]	; (80039d8 <HAL_DMA_Start_IT+0x4a0>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d01d      	beq.n	8003972 <HAL_DMA_Start_IT+0x43a>
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a28      	ldr	r2, [pc, #160]	; (80039dc <HAL_DMA_Start_IT+0x4a4>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d018      	beq.n	8003972 <HAL_DMA_Start_IT+0x43a>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a26      	ldr	r2, [pc, #152]	; (80039e0 <HAL_DMA_Start_IT+0x4a8>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d013      	beq.n	8003972 <HAL_DMA_Start_IT+0x43a>
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a25      	ldr	r2, [pc, #148]	; (80039e4 <HAL_DMA_Start_IT+0x4ac>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d00e      	beq.n	8003972 <HAL_DMA_Start_IT+0x43a>
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a23      	ldr	r2, [pc, #140]	; (80039e8 <HAL_DMA_Start_IT+0x4b0>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d009      	beq.n	8003972 <HAL_DMA_Start_IT+0x43a>
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a22      	ldr	r2, [pc, #136]	; (80039ec <HAL_DMA_Start_IT+0x4b4>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d004      	beq.n	8003972 <HAL_DMA_Start_IT+0x43a>
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a20      	ldr	r2, [pc, #128]	; (80039f0 <HAL_DMA_Start_IT+0x4b8>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d108      	bne.n	8003984 <HAL_DMA_Start_IT+0x44c>
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f042 0201 	orr.w	r2, r2, #1
 8003980:	601a      	str	r2, [r3, #0]
 8003982:	e012      	b.n	80039aa <HAL_DMA_Start_IT+0x472>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f042 0201 	orr.w	r2, r2, #1
 8003992:	601a      	str	r2, [r3, #0]
 8003994:	e009      	b.n	80039aa <HAL_DMA_Start_IT+0x472>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800399c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80039aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3718      	adds	r7, #24
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	40020010 	.word	0x40020010
 80039b8:	40020028 	.word	0x40020028
 80039bc:	40020040 	.word	0x40020040
 80039c0:	40020058 	.word	0x40020058
 80039c4:	40020070 	.word	0x40020070
 80039c8:	40020088 	.word	0x40020088
 80039cc:	400200a0 	.word	0x400200a0
 80039d0:	400200b8 	.word	0x400200b8
 80039d4:	40020410 	.word	0x40020410
 80039d8:	40020428 	.word	0x40020428
 80039dc:	40020440 	.word	0x40020440
 80039e0:	40020458 	.word	0x40020458
 80039e4:	40020470 	.word	0x40020470
 80039e8:	40020488 	.word	0x40020488
 80039ec:	400204a0 	.word	0x400204a0
 80039f0:	400204b8 	.word	0x400204b8
 80039f4:	58025408 	.word	0x58025408
 80039f8:	5802541c 	.word	0x5802541c
 80039fc:	58025430 	.word	0x58025430
 8003a00:	58025444 	.word	0x58025444
 8003a04:	58025458 	.word	0x58025458
 8003a08:	5802546c 	.word	0x5802546c
 8003a0c:	58025480 	.word	0x58025480
 8003a10:	58025494 	.word	0x58025494

08003a14 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b08a      	sub	sp, #40	; 0x28
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003a20:	4b67      	ldr	r3, [pc, #412]	; (8003bc0 <HAL_DMA_IRQHandler+0x1ac>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a67      	ldr	r2, [pc, #412]	; (8003bc4 <HAL_DMA_IRQHandler+0x1b0>)
 8003a26:	fba2 2303 	umull	r2, r3, r2, r3
 8003a2a:	0a9b      	lsrs	r3, r3, #10
 8003a2c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a32:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a38:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003a3a:	6a3b      	ldr	r3, [r7, #32]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a5f      	ldr	r2, [pc, #380]	; (8003bc8 <HAL_DMA_IRQHandler+0x1b4>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d04a      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0xd2>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a5d      	ldr	r2, [pc, #372]	; (8003bcc <HAL_DMA_IRQHandler+0x1b8>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d045      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0xd2>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a5c      	ldr	r2, [pc, #368]	; (8003bd0 <HAL_DMA_IRQHandler+0x1bc>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d040      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0xd2>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a5a      	ldr	r2, [pc, #360]	; (8003bd4 <HAL_DMA_IRQHandler+0x1c0>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d03b      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0xd2>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a59      	ldr	r2, [pc, #356]	; (8003bd8 <HAL_DMA_IRQHandler+0x1c4>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d036      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0xd2>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a57      	ldr	r2, [pc, #348]	; (8003bdc <HAL_DMA_IRQHandler+0x1c8>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d031      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0xd2>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a56      	ldr	r2, [pc, #344]	; (8003be0 <HAL_DMA_IRQHandler+0x1cc>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d02c      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0xd2>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a54      	ldr	r2, [pc, #336]	; (8003be4 <HAL_DMA_IRQHandler+0x1d0>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d027      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0xd2>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a53      	ldr	r2, [pc, #332]	; (8003be8 <HAL_DMA_IRQHandler+0x1d4>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d022      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0xd2>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a51      	ldr	r2, [pc, #324]	; (8003bec <HAL_DMA_IRQHandler+0x1d8>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d01d      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0xd2>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a50      	ldr	r2, [pc, #320]	; (8003bf0 <HAL_DMA_IRQHandler+0x1dc>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d018      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0xd2>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a4e      	ldr	r2, [pc, #312]	; (8003bf4 <HAL_DMA_IRQHandler+0x1e0>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d013      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0xd2>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a4d      	ldr	r2, [pc, #308]	; (8003bf8 <HAL_DMA_IRQHandler+0x1e4>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d00e      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0xd2>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a4b      	ldr	r2, [pc, #300]	; (8003bfc <HAL_DMA_IRQHandler+0x1e8>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d009      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0xd2>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a4a      	ldr	r2, [pc, #296]	; (8003c00 <HAL_DMA_IRQHandler+0x1ec>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d004      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0xd2>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a48      	ldr	r2, [pc, #288]	; (8003c04 <HAL_DMA_IRQHandler+0x1f0>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d101      	bne.n	8003aea <HAL_DMA_IRQHandler+0xd6>
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e000      	b.n	8003aec <HAL_DMA_IRQHandler+0xd8>
 8003aea:	2300      	movs	r3, #0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	f000 842b 	beq.w	8004348 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003af6:	f003 031f 	and.w	r3, r3, #31
 8003afa:	2208      	movs	r2, #8
 8003afc:	409a      	lsls	r2, r3
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	4013      	ands	r3, r2
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	f000 80a2 	beq.w	8003c4c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a2e      	ldr	r2, [pc, #184]	; (8003bc8 <HAL_DMA_IRQHandler+0x1b4>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d04a      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x194>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a2d      	ldr	r2, [pc, #180]	; (8003bcc <HAL_DMA_IRQHandler+0x1b8>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d045      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x194>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a2b      	ldr	r2, [pc, #172]	; (8003bd0 <HAL_DMA_IRQHandler+0x1bc>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d040      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x194>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a2a      	ldr	r2, [pc, #168]	; (8003bd4 <HAL_DMA_IRQHandler+0x1c0>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d03b      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x194>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a28      	ldr	r2, [pc, #160]	; (8003bd8 <HAL_DMA_IRQHandler+0x1c4>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d036      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x194>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a27      	ldr	r2, [pc, #156]	; (8003bdc <HAL_DMA_IRQHandler+0x1c8>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d031      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x194>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a25      	ldr	r2, [pc, #148]	; (8003be0 <HAL_DMA_IRQHandler+0x1cc>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d02c      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x194>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a24      	ldr	r2, [pc, #144]	; (8003be4 <HAL_DMA_IRQHandler+0x1d0>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d027      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x194>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a22      	ldr	r2, [pc, #136]	; (8003be8 <HAL_DMA_IRQHandler+0x1d4>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d022      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x194>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a21      	ldr	r2, [pc, #132]	; (8003bec <HAL_DMA_IRQHandler+0x1d8>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d01d      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x194>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a1f      	ldr	r2, [pc, #124]	; (8003bf0 <HAL_DMA_IRQHandler+0x1dc>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d018      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x194>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a1e      	ldr	r2, [pc, #120]	; (8003bf4 <HAL_DMA_IRQHandler+0x1e0>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d013      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x194>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a1c      	ldr	r2, [pc, #112]	; (8003bf8 <HAL_DMA_IRQHandler+0x1e4>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d00e      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x194>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a1b      	ldr	r2, [pc, #108]	; (8003bfc <HAL_DMA_IRQHandler+0x1e8>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d009      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x194>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a19      	ldr	r2, [pc, #100]	; (8003c00 <HAL_DMA_IRQHandler+0x1ec>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d004      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x194>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a18      	ldr	r2, [pc, #96]	; (8003c04 <HAL_DMA_IRQHandler+0x1f0>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d12f      	bne.n	8003c08 <HAL_DMA_IRQHandler+0x1f4>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0304 	and.w	r3, r3, #4
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	bf14      	ite	ne
 8003bb6:	2301      	movne	r3, #1
 8003bb8:	2300      	moveq	r3, #0
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	e02e      	b.n	8003c1c <HAL_DMA_IRQHandler+0x208>
 8003bbe:	bf00      	nop
 8003bc0:	24000408 	.word	0x24000408
 8003bc4:	1b4e81b5 	.word	0x1b4e81b5
 8003bc8:	40020010 	.word	0x40020010
 8003bcc:	40020028 	.word	0x40020028
 8003bd0:	40020040 	.word	0x40020040
 8003bd4:	40020058 	.word	0x40020058
 8003bd8:	40020070 	.word	0x40020070
 8003bdc:	40020088 	.word	0x40020088
 8003be0:	400200a0 	.word	0x400200a0
 8003be4:	400200b8 	.word	0x400200b8
 8003be8:	40020410 	.word	0x40020410
 8003bec:	40020428 	.word	0x40020428
 8003bf0:	40020440 	.word	0x40020440
 8003bf4:	40020458 	.word	0x40020458
 8003bf8:	40020470 	.word	0x40020470
 8003bfc:	40020488 	.word	0x40020488
 8003c00:	400204a0 	.word	0x400204a0
 8003c04:	400204b8 	.word	0x400204b8
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0308 	and.w	r3, r3, #8
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	bf14      	ite	ne
 8003c16:	2301      	movne	r3, #1
 8003c18:	2300      	moveq	r3, #0
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d015      	beq.n	8003c4c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f022 0204 	bic.w	r2, r2, #4
 8003c2e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c34:	f003 031f 	and.w	r3, r3, #31
 8003c38:	2208      	movs	r2, #8
 8003c3a:	409a      	lsls	r2, r3
 8003c3c:	6a3b      	ldr	r3, [r7, #32]
 8003c3e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c44:	f043 0201 	orr.w	r2, r3, #1
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c50:	f003 031f 	and.w	r3, r3, #31
 8003c54:	69ba      	ldr	r2, [r7, #24]
 8003c56:	fa22 f303 	lsr.w	r3, r2, r3
 8003c5a:	f003 0301 	and.w	r3, r3, #1
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d06e      	beq.n	8003d40 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a69      	ldr	r2, [pc, #420]	; (8003e0c <HAL_DMA_IRQHandler+0x3f8>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d04a      	beq.n	8003d02 <HAL_DMA_IRQHandler+0x2ee>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a67      	ldr	r2, [pc, #412]	; (8003e10 <HAL_DMA_IRQHandler+0x3fc>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d045      	beq.n	8003d02 <HAL_DMA_IRQHandler+0x2ee>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a66      	ldr	r2, [pc, #408]	; (8003e14 <HAL_DMA_IRQHandler+0x400>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d040      	beq.n	8003d02 <HAL_DMA_IRQHandler+0x2ee>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a64      	ldr	r2, [pc, #400]	; (8003e18 <HAL_DMA_IRQHandler+0x404>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d03b      	beq.n	8003d02 <HAL_DMA_IRQHandler+0x2ee>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a63      	ldr	r2, [pc, #396]	; (8003e1c <HAL_DMA_IRQHandler+0x408>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d036      	beq.n	8003d02 <HAL_DMA_IRQHandler+0x2ee>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a61      	ldr	r2, [pc, #388]	; (8003e20 <HAL_DMA_IRQHandler+0x40c>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d031      	beq.n	8003d02 <HAL_DMA_IRQHandler+0x2ee>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a60      	ldr	r2, [pc, #384]	; (8003e24 <HAL_DMA_IRQHandler+0x410>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d02c      	beq.n	8003d02 <HAL_DMA_IRQHandler+0x2ee>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a5e      	ldr	r2, [pc, #376]	; (8003e28 <HAL_DMA_IRQHandler+0x414>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d027      	beq.n	8003d02 <HAL_DMA_IRQHandler+0x2ee>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a5d      	ldr	r2, [pc, #372]	; (8003e2c <HAL_DMA_IRQHandler+0x418>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d022      	beq.n	8003d02 <HAL_DMA_IRQHandler+0x2ee>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a5b      	ldr	r2, [pc, #364]	; (8003e30 <HAL_DMA_IRQHandler+0x41c>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d01d      	beq.n	8003d02 <HAL_DMA_IRQHandler+0x2ee>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a5a      	ldr	r2, [pc, #360]	; (8003e34 <HAL_DMA_IRQHandler+0x420>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d018      	beq.n	8003d02 <HAL_DMA_IRQHandler+0x2ee>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a58      	ldr	r2, [pc, #352]	; (8003e38 <HAL_DMA_IRQHandler+0x424>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d013      	beq.n	8003d02 <HAL_DMA_IRQHandler+0x2ee>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a57      	ldr	r2, [pc, #348]	; (8003e3c <HAL_DMA_IRQHandler+0x428>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d00e      	beq.n	8003d02 <HAL_DMA_IRQHandler+0x2ee>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a55      	ldr	r2, [pc, #340]	; (8003e40 <HAL_DMA_IRQHandler+0x42c>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d009      	beq.n	8003d02 <HAL_DMA_IRQHandler+0x2ee>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a54      	ldr	r2, [pc, #336]	; (8003e44 <HAL_DMA_IRQHandler+0x430>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d004      	beq.n	8003d02 <HAL_DMA_IRQHandler+0x2ee>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a52      	ldr	r2, [pc, #328]	; (8003e48 <HAL_DMA_IRQHandler+0x434>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d10a      	bne.n	8003d18 <HAL_DMA_IRQHandler+0x304>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	695b      	ldr	r3, [r3, #20]
 8003d08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	bf14      	ite	ne
 8003d10:	2301      	movne	r3, #1
 8003d12:	2300      	moveq	r3, #0
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	e003      	b.n	8003d20 <HAL_DMA_IRQHandler+0x30c>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2300      	movs	r3, #0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d00d      	beq.n	8003d40 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d28:	f003 031f 	and.w	r3, r3, #31
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	409a      	lsls	r2, r3
 8003d30:	6a3b      	ldr	r3, [r7, #32]
 8003d32:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d38:	f043 0202 	orr.w	r2, r3, #2
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d44:	f003 031f 	and.w	r3, r3, #31
 8003d48:	2204      	movs	r2, #4
 8003d4a:	409a      	lsls	r2, r3
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	4013      	ands	r3, r2
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	f000 808f 	beq.w	8003e74 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a2c      	ldr	r2, [pc, #176]	; (8003e0c <HAL_DMA_IRQHandler+0x3f8>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d04a      	beq.n	8003df6 <HAL_DMA_IRQHandler+0x3e2>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a2a      	ldr	r2, [pc, #168]	; (8003e10 <HAL_DMA_IRQHandler+0x3fc>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d045      	beq.n	8003df6 <HAL_DMA_IRQHandler+0x3e2>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a29      	ldr	r2, [pc, #164]	; (8003e14 <HAL_DMA_IRQHandler+0x400>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d040      	beq.n	8003df6 <HAL_DMA_IRQHandler+0x3e2>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a27      	ldr	r2, [pc, #156]	; (8003e18 <HAL_DMA_IRQHandler+0x404>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d03b      	beq.n	8003df6 <HAL_DMA_IRQHandler+0x3e2>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a26      	ldr	r2, [pc, #152]	; (8003e1c <HAL_DMA_IRQHandler+0x408>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d036      	beq.n	8003df6 <HAL_DMA_IRQHandler+0x3e2>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a24      	ldr	r2, [pc, #144]	; (8003e20 <HAL_DMA_IRQHandler+0x40c>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d031      	beq.n	8003df6 <HAL_DMA_IRQHandler+0x3e2>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a23      	ldr	r2, [pc, #140]	; (8003e24 <HAL_DMA_IRQHandler+0x410>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d02c      	beq.n	8003df6 <HAL_DMA_IRQHandler+0x3e2>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a21      	ldr	r2, [pc, #132]	; (8003e28 <HAL_DMA_IRQHandler+0x414>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d027      	beq.n	8003df6 <HAL_DMA_IRQHandler+0x3e2>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a20      	ldr	r2, [pc, #128]	; (8003e2c <HAL_DMA_IRQHandler+0x418>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d022      	beq.n	8003df6 <HAL_DMA_IRQHandler+0x3e2>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a1e      	ldr	r2, [pc, #120]	; (8003e30 <HAL_DMA_IRQHandler+0x41c>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d01d      	beq.n	8003df6 <HAL_DMA_IRQHandler+0x3e2>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a1d      	ldr	r2, [pc, #116]	; (8003e34 <HAL_DMA_IRQHandler+0x420>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d018      	beq.n	8003df6 <HAL_DMA_IRQHandler+0x3e2>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a1b      	ldr	r2, [pc, #108]	; (8003e38 <HAL_DMA_IRQHandler+0x424>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d013      	beq.n	8003df6 <HAL_DMA_IRQHandler+0x3e2>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a1a      	ldr	r2, [pc, #104]	; (8003e3c <HAL_DMA_IRQHandler+0x428>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d00e      	beq.n	8003df6 <HAL_DMA_IRQHandler+0x3e2>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a18      	ldr	r2, [pc, #96]	; (8003e40 <HAL_DMA_IRQHandler+0x42c>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d009      	beq.n	8003df6 <HAL_DMA_IRQHandler+0x3e2>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a17      	ldr	r2, [pc, #92]	; (8003e44 <HAL_DMA_IRQHandler+0x430>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d004      	beq.n	8003df6 <HAL_DMA_IRQHandler+0x3e2>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a15      	ldr	r2, [pc, #84]	; (8003e48 <HAL_DMA_IRQHandler+0x434>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d12a      	bne.n	8003e4c <HAL_DMA_IRQHandler+0x438>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0302 	and.w	r3, r3, #2
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	bf14      	ite	ne
 8003e04:	2301      	movne	r3, #1
 8003e06:	2300      	moveq	r3, #0
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	e023      	b.n	8003e54 <HAL_DMA_IRQHandler+0x440>
 8003e0c:	40020010 	.word	0x40020010
 8003e10:	40020028 	.word	0x40020028
 8003e14:	40020040 	.word	0x40020040
 8003e18:	40020058 	.word	0x40020058
 8003e1c:	40020070 	.word	0x40020070
 8003e20:	40020088 	.word	0x40020088
 8003e24:	400200a0 	.word	0x400200a0
 8003e28:	400200b8 	.word	0x400200b8
 8003e2c:	40020410 	.word	0x40020410
 8003e30:	40020428 	.word	0x40020428
 8003e34:	40020440 	.word	0x40020440
 8003e38:	40020458 	.word	0x40020458
 8003e3c:	40020470 	.word	0x40020470
 8003e40:	40020488 	.word	0x40020488
 8003e44:	400204a0 	.word	0x400204a0
 8003e48:	400204b8 	.word	0x400204b8
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2300      	movs	r3, #0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d00d      	beq.n	8003e74 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e5c:	f003 031f 	and.w	r3, r3, #31
 8003e60:	2204      	movs	r2, #4
 8003e62:	409a      	lsls	r2, r3
 8003e64:	6a3b      	ldr	r3, [r7, #32]
 8003e66:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e6c:	f043 0204 	orr.w	r2, r3, #4
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e78:	f003 031f 	and.w	r3, r3, #31
 8003e7c:	2210      	movs	r2, #16
 8003e7e:	409a      	lsls	r2, r3
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	4013      	ands	r3, r2
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	f000 80a6 	beq.w	8003fd6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a85      	ldr	r2, [pc, #532]	; (80040a4 <HAL_DMA_IRQHandler+0x690>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d04a      	beq.n	8003f2a <HAL_DMA_IRQHandler+0x516>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a83      	ldr	r2, [pc, #524]	; (80040a8 <HAL_DMA_IRQHandler+0x694>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d045      	beq.n	8003f2a <HAL_DMA_IRQHandler+0x516>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a82      	ldr	r2, [pc, #520]	; (80040ac <HAL_DMA_IRQHandler+0x698>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d040      	beq.n	8003f2a <HAL_DMA_IRQHandler+0x516>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a80      	ldr	r2, [pc, #512]	; (80040b0 <HAL_DMA_IRQHandler+0x69c>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d03b      	beq.n	8003f2a <HAL_DMA_IRQHandler+0x516>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a7f      	ldr	r2, [pc, #508]	; (80040b4 <HAL_DMA_IRQHandler+0x6a0>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d036      	beq.n	8003f2a <HAL_DMA_IRQHandler+0x516>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a7d      	ldr	r2, [pc, #500]	; (80040b8 <HAL_DMA_IRQHandler+0x6a4>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d031      	beq.n	8003f2a <HAL_DMA_IRQHandler+0x516>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a7c      	ldr	r2, [pc, #496]	; (80040bc <HAL_DMA_IRQHandler+0x6a8>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d02c      	beq.n	8003f2a <HAL_DMA_IRQHandler+0x516>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a7a      	ldr	r2, [pc, #488]	; (80040c0 <HAL_DMA_IRQHandler+0x6ac>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d027      	beq.n	8003f2a <HAL_DMA_IRQHandler+0x516>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a79      	ldr	r2, [pc, #484]	; (80040c4 <HAL_DMA_IRQHandler+0x6b0>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d022      	beq.n	8003f2a <HAL_DMA_IRQHandler+0x516>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a77      	ldr	r2, [pc, #476]	; (80040c8 <HAL_DMA_IRQHandler+0x6b4>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d01d      	beq.n	8003f2a <HAL_DMA_IRQHandler+0x516>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a76      	ldr	r2, [pc, #472]	; (80040cc <HAL_DMA_IRQHandler+0x6b8>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d018      	beq.n	8003f2a <HAL_DMA_IRQHandler+0x516>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a74      	ldr	r2, [pc, #464]	; (80040d0 <HAL_DMA_IRQHandler+0x6bc>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d013      	beq.n	8003f2a <HAL_DMA_IRQHandler+0x516>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a73      	ldr	r2, [pc, #460]	; (80040d4 <HAL_DMA_IRQHandler+0x6c0>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d00e      	beq.n	8003f2a <HAL_DMA_IRQHandler+0x516>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a71      	ldr	r2, [pc, #452]	; (80040d8 <HAL_DMA_IRQHandler+0x6c4>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d009      	beq.n	8003f2a <HAL_DMA_IRQHandler+0x516>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a70      	ldr	r2, [pc, #448]	; (80040dc <HAL_DMA_IRQHandler+0x6c8>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d004      	beq.n	8003f2a <HAL_DMA_IRQHandler+0x516>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a6e      	ldr	r2, [pc, #440]	; (80040e0 <HAL_DMA_IRQHandler+0x6cc>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d10a      	bne.n	8003f40 <HAL_DMA_IRQHandler+0x52c>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0308 	and.w	r3, r3, #8
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	bf14      	ite	ne
 8003f38:	2301      	movne	r3, #1
 8003f3a:	2300      	moveq	r3, #0
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	e009      	b.n	8003f54 <HAL_DMA_IRQHandler+0x540>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0304 	and.w	r3, r3, #4
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	bf14      	ite	ne
 8003f4e:	2301      	movne	r3, #1
 8003f50:	2300      	moveq	r3, #0
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d03e      	beq.n	8003fd6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f5c:	f003 031f 	and.w	r3, r3, #31
 8003f60:	2210      	movs	r2, #16
 8003f62:	409a      	lsls	r2, r3
 8003f64:	6a3b      	ldr	r3, [r7, #32]
 8003f66:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d018      	beq.n	8003fa8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d108      	bne.n	8003f96 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d024      	beq.n	8003fd6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	4798      	blx	r3
 8003f94:	e01f      	b.n	8003fd6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d01b      	beq.n	8003fd6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	4798      	blx	r3
 8003fa6:	e016      	b.n	8003fd6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d107      	bne.n	8003fc6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f022 0208 	bic.w	r2, r2, #8
 8003fc4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d003      	beq.n	8003fd6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fda:	f003 031f 	and.w	r3, r3, #31
 8003fde:	2220      	movs	r2, #32
 8003fe0:	409a      	lsls	r2, r3
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	f000 8110 	beq.w	800420c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a2c      	ldr	r2, [pc, #176]	; (80040a4 <HAL_DMA_IRQHandler+0x690>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d04a      	beq.n	800408c <HAL_DMA_IRQHandler+0x678>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a2b      	ldr	r2, [pc, #172]	; (80040a8 <HAL_DMA_IRQHandler+0x694>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d045      	beq.n	800408c <HAL_DMA_IRQHandler+0x678>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a29      	ldr	r2, [pc, #164]	; (80040ac <HAL_DMA_IRQHandler+0x698>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d040      	beq.n	800408c <HAL_DMA_IRQHandler+0x678>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a28      	ldr	r2, [pc, #160]	; (80040b0 <HAL_DMA_IRQHandler+0x69c>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d03b      	beq.n	800408c <HAL_DMA_IRQHandler+0x678>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a26      	ldr	r2, [pc, #152]	; (80040b4 <HAL_DMA_IRQHandler+0x6a0>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d036      	beq.n	800408c <HAL_DMA_IRQHandler+0x678>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a25      	ldr	r2, [pc, #148]	; (80040b8 <HAL_DMA_IRQHandler+0x6a4>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d031      	beq.n	800408c <HAL_DMA_IRQHandler+0x678>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a23      	ldr	r2, [pc, #140]	; (80040bc <HAL_DMA_IRQHandler+0x6a8>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d02c      	beq.n	800408c <HAL_DMA_IRQHandler+0x678>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a22      	ldr	r2, [pc, #136]	; (80040c0 <HAL_DMA_IRQHandler+0x6ac>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d027      	beq.n	800408c <HAL_DMA_IRQHandler+0x678>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a20      	ldr	r2, [pc, #128]	; (80040c4 <HAL_DMA_IRQHandler+0x6b0>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d022      	beq.n	800408c <HAL_DMA_IRQHandler+0x678>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a1f      	ldr	r2, [pc, #124]	; (80040c8 <HAL_DMA_IRQHandler+0x6b4>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d01d      	beq.n	800408c <HAL_DMA_IRQHandler+0x678>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a1d      	ldr	r2, [pc, #116]	; (80040cc <HAL_DMA_IRQHandler+0x6b8>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d018      	beq.n	800408c <HAL_DMA_IRQHandler+0x678>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a1c      	ldr	r2, [pc, #112]	; (80040d0 <HAL_DMA_IRQHandler+0x6bc>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d013      	beq.n	800408c <HAL_DMA_IRQHandler+0x678>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a1a      	ldr	r2, [pc, #104]	; (80040d4 <HAL_DMA_IRQHandler+0x6c0>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d00e      	beq.n	800408c <HAL_DMA_IRQHandler+0x678>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a19      	ldr	r2, [pc, #100]	; (80040d8 <HAL_DMA_IRQHandler+0x6c4>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d009      	beq.n	800408c <HAL_DMA_IRQHandler+0x678>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a17      	ldr	r2, [pc, #92]	; (80040dc <HAL_DMA_IRQHandler+0x6c8>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d004      	beq.n	800408c <HAL_DMA_IRQHandler+0x678>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a16      	ldr	r2, [pc, #88]	; (80040e0 <HAL_DMA_IRQHandler+0x6cc>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d12b      	bne.n	80040e4 <HAL_DMA_IRQHandler+0x6d0>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0310 	and.w	r3, r3, #16
 8004096:	2b00      	cmp	r3, #0
 8004098:	bf14      	ite	ne
 800409a:	2301      	movne	r3, #1
 800409c:	2300      	moveq	r3, #0
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	e02a      	b.n	80040f8 <HAL_DMA_IRQHandler+0x6e4>
 80040a2:	bf00      	nop
 80040a4:	40020010 	.word	0x40020010
 80040a8:	40020028 	.word	0x40020028
 80040ac:	40020040 	.word	0x40020040
 80040b0:	40020058 	.word	0x40020058
 80040b4:	40020070 	.word	0x40020070
 80040b8:	40020088 	.word	0x40020088
 80040bc:	400200a0 	.word	0x400200a0
 80040c0:	400200b8 	.word	0x400200b8
 80040c4:	40020410 	.word	0x40020410
 80040c8:	40020428 	.word	0x40020428
 80040cc:	40020440 	.word	0x40020440
 80040d0:	40020458 	.word	0x40020458
 80040d4:	40020470 	.word	0x40020470
 80040d8:	40020488 	.word	0x40020488
 80040dc:	400204a0 	.word	0x400204a0
 80040e0:	400204b8 	.word	0x400204b8
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0302 	and.w	r3, r3, #2
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	bf14      	ite	ne
 80040f2:	2301      	movne	r3, #1
 80040f4:	2300      	moveq	r3, #0
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	f000 8087 	beq.w	800420c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004102:	f003 031f 	and.w	r3, r3, #31
 8004106:	2220      	movs	r2, #32
 8004108:	409a      	lsls	r2, r3
 800410a:	6a3b      	ldr	r3, [r7, #32]
 800410c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004114:	b2db      	uxtb	r3, r3
 8004116:	2b04      	cmp	r3, #4
 8004118:	d139      	bne.n	800418e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f022 0216 	bic.w	r2, r2, #22
 8004128:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	695a      	ldr	r2, [r3, #20]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004138:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413e:	2b00      	cmp	r3, #0
 8004140:	d103      	bne.n	800414a <HAL_DMA_IRQHandler+0x736>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004146:	2b00      	cmp	r3, #0
 8004148:	d007      	beq.n	800415a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f022 0208 	bic.w	r2, r2, #8
 8004158:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800415e:	f003 031f 	and.w	r3, r3, #31
 8004162:	223f      	movs	r2, #63	; 0x3f
 8004164:	409a      	lsls	r2, r3
 8004166:	6a3b      	ldr	r3, [r7, #32]
 8004168:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2201      	movs	r2, #1
 800416e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800417e:	2b00      	cmp	r3, #0
 8004180:	f000 834a 	beq.w	8004818 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	4798      	blx	r3
          }
          return;
 800418c:	e344      	b.n	8004818 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d018      	beq.n	80041ce <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d108      	bne.n	80041bc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d02c      	beq.n	800420c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	4798      	blx	r3
 80041ba:	e027      	b.n	800420c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d023      	beq.n	800420c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	4798      	blx	r3
 80041cc:	e01e      	b.n	800420c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d10f      	bne.n	80041fc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f022 0210 	bic.w	r2, r2, #16
 80041ea:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004200:	2b00      	cmp	r3, #0
 8004202:	d003      	beq.n	800420c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004210:	2b00      	cmp	r3, #0
 8004212:	f000 8306 	beq.w	8004822 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800421a:	f003 0301 	and.w	r3, r3, #1
 800421e:	2b00      	cmp	r3, #0
 8004220:	f000 8088 	beq.w	8004334 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2204      	movs	r2, #4
 8004228:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a7a      	ldr	r2, [pc, #488]	; (800441c <HAL_DMA_IRQHandler+0xa08>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d04a      	beq.n	80042cc <HAL_DMA_IRQHandler+0x8b8>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a79      	ldr	r2, [pc, #484]	; (8004420 <HAL_DMA_IRQHandler+0xa0c>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d045      	beq.n	80042cc <HAL_DMA_IRQHandler+0x8b8>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a77      	ldr	r2, [pc, #476]	; (8004424 <HAL_DMA_IRQHandler+0xa10>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d040      	beq.n	80042cc <HAL_DMA_IRQHandler+0x8b8>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a76      	ldr	r2, [pc, #472]	; (8004428 <HAL_DMA_IRQHandler+0xa14>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d03b      	beq.n	80042cc <HAL_DMA_IRQHandler+0x8b8>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a74      	ldr	r2, [pc, #464]	; (800442c <HAL_DMA_IRQHandler+0xa18>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d036      	beq.n	80042cc <HAL_DMA_IRQHandler+0x8b8>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a73      	ldr	r2, [pc, #460]	; (8004430 <HAL_DMA_IRQHandler+0xa1c>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d031      	beq.n	80042cc <HAL_DMA_IRQHandler+0x8b8>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a71      	ldr	r2, [pc, #452]	; (8004434 <HAL_DMA_IRQHandler+0xa20>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d02c      	beq.n	80042cc <HAL_DMA_IRQHandler+0x8b8>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a70      	ldr	r2, [pc, #448]	; (8004438 <HAL_DMA_IRQHandler+0xa24>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d027      	beq.n	80042cc <HAL_DMA_IRQHandler+0x8b8>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a6e      	ldr	r2, [pc, #440]	; (800443c <HAL_DMA_IRQHandler+0xa28>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d022      	beq.n	80042cc <HAL_DMA_IRQHandler+0x8b8>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a6d      	ldr	r2, [pc, #436]	; (8004440 <HAL_DMA_IRQHandler+0xa2c>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d01d      	beq.n	80042cc <HAL_DMA_IRQHandler+0x8b8>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a6b      	ldr	r2, [pc, #428]	; (8004444 <HAL_DMA_IRQHandler+0xa30>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d018      	beq.n	80042cc <HAL_DMA_IRQHandler+0x8b8>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a6a      	ldr	r2, [pc, #424]	; (8004448 <HAL_DMA_IRQHandler+0xa34>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d013      	beq.n	80042cc <HAL_DMA_IRQHandler+0x8b8>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a68      	ldr	r2, [pc, #416]	; (800444c <HAL_DMA_IRQHandler+0xa38>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d00e      	beq.n	80042cc <HAL_DMA_IRQHandler+0x8b8>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a67      	ldr	r2, [pc, #412]	; (8004450 <HAL_DMA_IRQHandler+0xa3c>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d009      	beq.n	80042cc <HAL_DMA_IRQHandler+0x8b8>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a65      	ldr	r2, [pc, #404]	; (8004454 <HAL_DMA_IRQHandler+0xa40>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d004      	beq.n	80042cc <HAL_DMA_IRQHandler+0x8b8>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a64      	ldr	r2, [pc, #400]	; (8004458 <HAL_DMA_IRQHandler+0xa44>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d108      	bne.n	80042de <HAL_DMA_IRQHandler+0x8ca>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f022 0201 	bic.w	r2, r2, #1
 80042da:	601a      	str	r2, [r3, #0]
 80042dc:	e007      	b.n	80042ee <HAL_DMA_IRQHandler+0x8da>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f022 0201 	bic.w	r2, r2, #1
 80042ec:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	3301      	adds	r3, #1
 80042f2:	60fb      	str	r3, [r7, #12]
 80042f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d307      	bcc.n	800430a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0301 	and.w	r3, r3, #1
 8004304:	2b00      	cmp	r3, #0
 8004306:	d1f2      	bne.n	80042ee <HAL_DMA_IRQHandler+0x8da>
 8004308:	e000      	b.n	800430c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800430a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0301 	and.w	r3, r3, #1
 8004316:	2b00      	cmp	r3, #0
 8004318:	d004      	beq.n	8004324 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2203      	movs	r2, #3
 800431e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004322:	e003      	b.n	800432c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004338:	2b00      	cmp	r3, #0
 800433a:	f000 8272 	beq.w	8004822 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	4798      	blx	r3
 8004346:	e26c      	b.n	8004822 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a43      	ldr	r2, [pc, #268]	; (800445c <HAL_DMA_IRQHandler+0xa48>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d022      	beq.n	8004398 <HAL_DMA_IRQHandler+0x984>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a42      	ldr	r2, [pc, #264]	; (8004460 <HAL_DMA_IRQHandler+0xa4c>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d01d      	beq.n	8004398 <HAL_DMA_IRQHandler+0x984>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a40      	ldr	r2, [pc, #256]	; (8004464 <HAL_DMA_IRQHandler+0xa50>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d018      	beq.n	8004398 <HAL_DMA_IRQHandler+0x984>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a3f      	ldr	r2, [pc, #252]	; (8004468 <HAL_DMA_IRQHandler+0xa54>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d013      	beq.n	8004398 <HAL_DMA_IRQHandler+0x984>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a3d      	ldr	r2, [pc, #244]	; (800446c <HAL_DMA_IRQHandler+0xa58>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d00e      	beq.n	8004398 <HAL_DMA_IRQHandler+0x984>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a3c      	ldr	r2, [pc, #240]	; (8004470 <HAL_DMA_IRQHandler+0xa5c>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d009      	beq.n	8004398 <HAL_DMA_IRQHandler+0x984>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a3a      	ldr	r2, [pc, #232]	; (8004474 <HAL_DMA_IRQHandler+0xa60>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d004      	beq.n	8004398 <HAL_DMA_IRQHandler+0x984>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a39      	ldr	r2, [pc, #228]	; (8004478 <HAL_DMA_IRQHandler+0xa64>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d101      	bne.n	800439c <HAL_DMA_IRQHandler+0x988>
 8004398:	2301      	movs	r3, #1
 800439a:	e000      	b.n	800439e <HAL_DMA_IRQHandler+0x98a>
 800439c:	2300      	movs	r3, #0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	f000 823f 	beq.w	8004822 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043b0:	f003 031f 	and.w	r3, r3, #31
 80043b4:	2204      	movs	r2, #4
 80043b6:	409a      	lsls	r2, r3
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	4013      	ands	r3, r2
 80043bc:	2b00      	cmp	r3, #0
 80043be:	f000 80cd 	beq.w	800455c <HAL_DMA_IRQHandler+0xb48>
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	f003 0304 	and.w	r3, r3, #4
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	f000 80c7 	beq.w	800455c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043d2:	f003 031f 	and.w	r3, r3, #31
 80043d6:	2204      	movs	r2, #4
 80043d8:	409a      	lsls	r2, r3
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d049      	beq.n	800447c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d109      	bne.n	8004406 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	f000 8210 	beq.w	800481c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004404:	e20a      	b.n	800481c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440a:	2b00      	cmp	r3, #0
 800440c:	f000 8206 	beq.w	800481c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004418:	e200      	b.n	800481c <HAL_DMA_IRQHandler+0xe08>
 800441a:	bf00      	nop
 800441c:	40020010 	.word	0x40020010
 8004420:	40020028 	.word	0x40020028
 8004424:	40020040 	.word	0x40020040
 8004428:	40020058 	.word	0x40020058
 800442c:	40020070 	.word	0x40020070
 8004430:	40020088 	.word	0x40020088
 8004434:	400200a0 	.word	0x400200a0
 8004438:	400200b8 	.word	0x400200b8
 800443c:	40020410 	.word	0x40020410
 8004440:	40020428 	.word	0x40020428
 8004444:	40020440 	.word	0x40020440
 8004448:	40020458 	.word	0x40020458
 800444c:	40020470 	.word	0x40020470
 8004450:	40020488 	.word	0x40020488
 8004454:	400204a0 	.word	0x400204a0
 8004458:	400204b8 	.word	0x400204b8
 800445c:	58025408 	.word	0x58025408
 8004460:	5802541c 	.word	0x5802541c
 8004464:	58025430 	.word	0x58025430
 8004468:	58025444 	.word	0x58025444
 800446c:	58025458 	.word	0x58025458
 8004470:	5802546c 	.word	0x5802546c
 8004474:	58025480 	.word	0x58025480
 8004478:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	f003 0320 	and.w	r3, r3, #32
 8004482:	2b00      	cmp	r3, #0
 8004484:	d160      	bne.n	8004548 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a8c      	ldr	r2, [pc, #560]	; (80046bc <HAL_DMA_IRQHandler+0xca8>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d04a      	beq.n	8004526 <HAL_DMA_IRQHandler+0xb12>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a8a      	ldr	r2, [pc, #552]	; (80046c0 <HAL_DMA_IRQHandler+0xcac>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d045      	beq.n	8004526 <HAL_DMA_IRQHandler+0xb12>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a89      	ldr	r2, [pc, #548]	; (80046c4 <HAL_DMA_IRQHandler+0xcb0>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d040      	beq.n	8004526 <HAL_DMA_IRQHandler+0xb12>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a87      	ldr	r2, [pc, #540]	; (80046c8 <HAL_DMA_IRQHandler+0xcb4>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d03b      	beq.n	8004526 <HAL_DMA_IRQHandler+0xb12>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a86      	ldr	r2, [pc, #536]	; (80046cc <HAL_DMA_IRQHandler+0xcb8>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d036      	beq.n	8004526 <HAL_DMA_IRQHandler+0xb12>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a84      	ldr	r2, [pc, #528]	; (80046d0 <HAL_DMA_IRQHandler+0xcbc>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d031      	beq.n	8004526 <HAL_DMA_IRQHandler+0xb12>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a83      	ldr	r2, [pc, #524]	; (80046d4 <HAL_DMA_IRQHandler+0xcc0>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d02c      	beq.n	8004526 <HAL_DMA_IRQHandler+0xb12>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a81      	ldr	r2, [pc, #516]	; (80046d8 <HAL_DMA_IRQHandler+0xcc4>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d027      	beq.n	8004526 <HAL_DMA_IRQHandler+0xb12>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a80      	ldr	r2, [pc, #512]	; (80046dc <HAL_DMA_IRQHandler+0xcc8>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d022      	beq.n	8004526 <HAL_DMA_IRQHandler+0xb12>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a7e      	ldr	r2, [pc, #504]	; (80046e0 <HAL_DMA_IRQHandler+0xccc>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d01d      	beq.n	8004526 <HAL_DMA_IRQHandler+0xb12>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a7d      	ldr	r2, [pc, #500]	; (80046e4 <HAL_DMA_IRQHandler+0xcd0>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d018      	beq.n	8004526 <HAL_DMA_IRQHandler+0xb12>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a7b      	ldr	r2, [pc, #492]	; (80046e8 <HAL_DMA_IRQHandler+0xcd4>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d013      	beq.n	8004526 <HAL_DMA_IRQHandler+0xb12>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a7a      	ldr	r2, [pc, #488]	; (80046ec <HAL_DMA_IRQHandler+0xcd8>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d00e      	beq.n	8004526 <HAL_DMA_IRQHandler+0xb12>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a78      	ldr	r2, [pc, #480]	; (80046f0 <HAL_DMA_IRQHandler+0xcdc>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d009      	beq.n	8004526 <HAL_DMA_IRQHandler+0xb12>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a77      	ldr	r2, [pc, #476]	; (80046f4 <HAL_DMA_IRQHandler+0xce0>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d004      	beq.n	8004526 <HAL_DMA_IRQHandler+0xb12>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a75      	ldr	r2, [pc, #468]	; (80046f8 <HAL_DMA_IRQHandler+0xce4>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d108      	bne.n	8004538 <HAL_DMA_IRQHandler+0xb24>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f022 0208 	bic.w	r2, r2, #8
 8004534:	601a      	str	r2, [r3, #0]
 8004536:	e007      	b.n	8004548 <HAL_DMA_IRQHandler+0xb34>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f022 0204 	bic.w	r2, r2, #4
 8004546:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454c:	2b00      	cmp	r3, #0
 800454e:	f000 8165 	beq.w	800481c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800455a:	e15f      	b.n	800481c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004560:	f003 031f 	and.w	r3, r3, #31
 8004564:	2202      	movs	r2, #2
 8004566:	409a      	lsls	r2, r3
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	4013      	ands	r3, r2
 800456c:	2b00      	cmp	r3, #0
 800456e:	f000 80c5 	beq.w	80046fc <HAL_DMA_IRQHandler+0xce8>
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	f003 0302 	and.w	r3, r3, #2
 8004578:	2b00      	cmp	r3, #0
 800457a:	f000 80bf 	beq.w	80046fc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004582:	f003 031f 	and.w	r3, r3, #31
 8004586:	2202      	movs	r2, #2
 8004588:	409a      	lsls	r2, r3
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004594:	2b00      	cmp	r3, #0
 8004596:	d018      	beq.n	80045ca <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d109      	bne.n	80045b6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	f000 813a 	beq.w	8004820 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045b4:	e134      	b.n	8004820 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	f000 8130 	beq.w	8004820 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045c8:	e12a      	b.n	8004820 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	f003 0320 	and.w	r3, r3, #32
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d168      	bne.n	80046a6 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a38      	ldr	r2, [pc, #224]	; (80046bc <HAL_DMA_IRQHandler+0xca8>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d04a      	beq.n	8004674 <HAL_DMA_IRQHandler+0xc60>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a37      	ldr	r2, [pc, #220]	; (80046c0 <HAL_DMA_IRQHandler+0xcac>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d045      	beq.n	8004674 <HAL_DMA_IRQHandler+0xc60>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a35      	ldr	r2, [pc, #212]	; (80046c4 <HAL_DMA_IRQHandler+0xcb0>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d040      	beq.n	8004674 <HAL_DMA_IRQHandler+0xc60>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a34      	ldr	r2, [pc, #208]	; (80046c8 <HAL_DMA_IRQHandler+0xcb4>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d03b      	beq.n	8004674 <HAL_DMA_IRQHandler+0xc60>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a32      	ldr	r2, [pc, #200]	; (80046cc <HAL_DMA_IRQHandler+0xcb8>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d036      	beq.n	8004674 <HAL_DMA_IRQHandler+0xc60>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a31      	ldr	r2, [pc, #196]	; (80046d0 <HAL_DMA_IRQHandler+0xcbc>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d031      	beq.n	8004674 <HAL_DMA_IRQHandler+0xc60>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a2f      	ldr	r2, [pc, #188]	; (80046d4 <HAL_DMA_IRQHandler+0xcc0>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d02c      	beq.n	8004674 <HAL_DMA_IRQHandler+0xc60>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a2e      	ldr	r2, [pc, #184]	; (80046d8 <HAL_DMA_IRQHandler+0xcc4>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d027      	beq.n	8004674 <HAL_DMA_IRQHandler+0xc60>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a2c      	ldr	r2, [pc, #176]	; (80046dc <HAL_DMA_IRQHandler+0xcc8>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d022      	beq.n	8004674 <HAL_DMA_IRQHandler+0xc60>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a2b      	ldr	r2, [pc, #172]	; (80046e0 <HAL_DMA_IRQHandler+0xccc>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d01d      	beq.n	8004674 <HAL_DMA_IRQHandler+0xc60>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a29      	ldr	r2, [pc, #164]	; (80046e4 <HAL_DMA_IRQHandler+0xcd0>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d018      	beq.n	8004674 <HAL_DMA_IRQHandler+0xc60>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a28      	ldr	r2, [pc, #160]	; (80046e8 <HAL_DMA_IRQHandler+0xcd4>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d013      	beq.n	8004674 <HAL_DMA_IRQHandler+0xc60>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a26      	ldr	r2, [pc, #152]	; (80046ec <HAL_DMA_IRQHandler+0xcd8>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d00e      	beq.n	8004674 <HAL_DMA_IRQHandler+0xc60>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a25      	ldr	r2, [pc, #148]	; (80046f0 <HAL_DMA_IRQHandler+0xcdc>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d009      	beq.n	8004674 <HAL_DMA_IRQHandler+0xc60>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a23      	ldr	r2, [pc, #140]	; (80046f4 <HAL_DMA_IRQHandler+0xce0>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d004      	beq.n	8004674 <HAL_DMA_IRQHandler+0xc60>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a22      	ldr	r2, [pc, #136]	; (80046f8 <HAL_DMA_IRQHandler+0xce4>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d108      	bne.n	8004686 <HAL_DMA_IRQHandler+0xc72>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f022 0214 	bic.w	r2, r2, #20
 8004682:	601a      	str	r2, [r3, #0]
 8004684:	e007      	b.n	8004696 <HAL_DMA_IRQHandler+0xc82>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f022 020a 	bic.w	r2, r2, #10
 8004694:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2201      	movs	r2, #1
 800469a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	f000 80b8 	beq.w	8004820 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046b8:	e0b2      	b.n	8004820 <HAL_DMA_IRQHandler+0xe0c>
 80046ba:	bf00      	nop
 80046bc:	40020010 	.word	0x40020010
 80046c0:	40020028 	.word	0x40020028
 80046c4:	40020040 	.word	0x40020040
 80046c8:	40020058 	.word	0x40020058
 80046cc:	40020070 	.word	0x40020070
 80046d0:	40020088 	.word	0x40020088
 80046d4:	400200a0 	.word	0x400200a0
 80046d8:	400200b8 	.word	0x400200b8
 80046dc:	40020410 	.word	0x40020410
 80046e0:	40020428 	.word	0x40020428
 80046e4:	40020440 	.word	0x40020440
 80046e8:	40020458 	.word	0x40020458
 80046ec:	40020470 	.word	0x40020470
 80046f0:	40020488 	.word	0x40020488
 80046f4:	400204a0 	.word	0x400204a0
 80046f8:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004700:	f003 031f 	and.w	r3, r3, #31
 8004704:	2208      	movs	r2, #8
 8004706:	409a      	lsls	r2, r3
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	4013      	ands	r3, r2
 800470c:	2b00      	cmp	r3, #0
 800470e:	f000 8088 	beq.w	8004822 <HAL_DMA_IRQHandler+0xe0e>
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	f003 0308 	and.w	r3, r3, #8
 8004718:	2b00      	cmp	r3, #0
 800471a:	f000 8082 	beq.w	8004822 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a41      	ldr	r2, [pc, #260]	; (8004828 <HAL_DMA_IRQHandler+0xe14>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d04a      	beq.n	80047be <HAL_DMA_IRQHandler+0xdaa>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a3f      	ldr	r2, [pc, #252]	; (800482c <HAL_DMA_IRQHandler+0xe18>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d045      	beq.n	80047be <HAL_DMA_IRQHandler+0xdaa>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a3e      	ldr	r2, [pc, #248]	; (8004830 <HAL_DMA_IRQHandler+0xe1c>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d040      	beq.n	80047be <HAL_DMA_IRQHandler+0xdaa>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a3c      	ldr	r2, [pc, #240]	; (8004834 <HAL_DMA_IRQHandler+0xe20>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d03b      	beq.n	80047be <HAL_DMA_IRQHandler+0xdaa>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a3b      	ldr	r2, [pc, #236]	; (8004838 <HAL_DMA_IRQHandler+0xe24>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d036      	beq.n	80047be <HAL_DMA_IRQHandler+0xdaa>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a39      	ldr	r2, [pc, #228]	; (800483c <HAL_DMA_IRQHandler+0xe28>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d031      	beq.n	80047be <HAL_DMA_IRQHandler+0xdaa>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a38      	ldr	r2, [pc, #224]	; (8004840 <HAL_DMA_IRQHandler+0xe2c>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d02c      	beq.n	80047be <HAL_DMA_IRQHandler+0xdaa>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a36      	ldr	r2, [pc, #216]	; (8004844 <HAL_DMA_IRQHandler+0xe30>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d027      	beq.n	80047be <HAL_DMA_IRQHandler+0xdaa>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a35      	ldr	r2, [pc, #212]	; (8004848 <HAL_DMA_IRQHandler+0xe34>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d022      	beq.n	80047be <HAL_DMA_IRQHandler+0xdaa>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a33      	ldr	r2, [pc, #204]	; (800484c <HAL_DMA_IRQHandler+0xe38>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d01d      	beq.n	80047be <HAL_DMA_IRQHandler+0xdaa>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a32      	ldr	r2, [pc, #200]	; (8004850 <HAL_DMA_IRQHandler+0xe3c>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d018      	beq.n	80047be <HAL_DMA_IRQHandler+0xdaa>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a30      	ldr	r2, [pc, #192]	; (8004854 <HAL_DMA_IRQHandler+0xe40>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d013      	beq.n	80047be <HAL_DMA_IRQHandler+0xdaa>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a2f      	ldr	r2, [pc, #188]	; (8004858 <HAL_DMA_IRQHandler+0xe44>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d00e      	beq.n	80047be <HAL_DMA_IRQHandler+0xdaa>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a2d      	ldr	r2, [pc, #180]	; (800485c <HAL_DMA_IRQHandler+0xe48>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d009      	beq.n	80047be <HAL_DMA_IRQHandler+0xdaa>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a2c      	ldr	r2, [pc, #176]	; (8004860 <HAL_DMA_IRQHandler+0xe4c>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d004      	beq.n	80047be <HAL_DMA_IRQHandler+0xdaa>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a2a      	ldr	r2, [pc, #168]	; (8004864 <HAL_DMA_IRQHandler+0xe50>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d108      	bne.n	80047d0 <HAL_DMA_IRQHandler+0xdbc>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f022 021c 	bic.w	r2, r2, #28
 80047cc:	601a      	str	r2, [r3, #0]
 80047ce:	e007      	b.n	80047e0 <HAL_DMA_IRQHandler+0xdcc>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f022 020e 	bic.w	r2, r2, #14
 80047de:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047e4:	f003 031f 	and.w	r3, r3, #31
 80047e8:	2201      	movs	r2, #1
 80047ea:	409a      	lsls	r2, r3
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2201      	movs	r2, #1
 80047fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800480a:	2b00      	cmp	r3, #0
 800480c:	d009      	beq.n	8004822 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	4798      	blx	r3
 8004816:	e004      	b.n	8004822 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004818:	bf00      	nop
 800481a:	e002      	b.n	8004822 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800481c:	bf00      	nop
 800481e:	e000      	b.n	8004822 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004820:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004822:	3728      	adds	r7, #40	; 0x28
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}
 8004828:	40020010 	.word	0x40020010
 800482c:	40020028 	.word	0x40020028
 8004830:	40020040 	.word	0x40020040
 8004834:	40020058 	.word	0x40020058
 8004838:	40020070 	.word	0x40020070
 800483c:	40020088 	.word	0x40020088
 8004840:	400200a0 	.word	0x400200a0
 8004844:	400200b8 	.word	0x400200b8
 8004848:	40020410 	.word	0x40020410
 800484c:	40020428 	.word	0x40020428
 8004850:	40020440 	.word	0x40020440
 8004854:	40020458 	.word	0x40020458
 8004858:	40020470 	.word	0x40020470
 800485c:	40020488 	.word	0x40020488
 8004860:	400204a0 	.word	0x400204a0
 8004864:	400204b8 	.word	0x400204b8

08004868 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004874:	4618      	mov	r0, r3
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004880:	b480      	push	{r7}
 8004882:	b08b      	sub	sp, #44	; 0x2c
 8004884:	af00      	add	r7, sp, #0
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	607a      	str	r2, [r7, #4]
 800488c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004892:	627b      	str	r3, [r7, #36]	; 0x24
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004898:	623b      	str	r3, [r7, #32]

  uint32_t srcdata = &SrcAddress;
 800489a:	f107 0308 	add.w	r3, r7, #8
 800489e:	61fb      	str	r3, [r7, #28]
  uint32_t srcaddr = SrcAddress;
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	61bb      	str	r3, [r7, #24]
  uint32_t destdata = &DstAddress;
 80048a4:	1d3b      	adds	r3, r7, #4
 80048a6:	617b      	str	r3, [r7, #20]
  uint32_t destaddr = DstAddress;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	613b      	str	r3, [r7, #16]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a83      	ldr	r2, [pc, #524]	; (8004ac0 <DMA_SetConfig+0x240>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d072      	beq.n	800499c <DMA_SetConfig+0x11c>
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a82      	ldr	r2, [pc, #520]	; (8004ac4 <DMA_SetConfig+0x244>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d06d      	beq.n	800499c <DMA_SetConfig+0x11c>
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a80      	ldr	r2, [pc, #512]	; (8004ac8 <DMA_SetConfig+0x248>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d068      	beq.n	800499c <DMA_SetConfig+0x11c>
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a7f      	ldr	r2, [pc, #508]	; (8004acc <DMA_SetConfig+0x24c>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d063      	beq.n	800499c <DMA_SetConfig+0x11c>
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a7d      	ldr	r2, [pc, #500]	; (8004ad0 <DMA_SetConfig+0x250>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d05e      	beq.n	800499c <DMA_SetConfig+0x11c>
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a7c      	ldr	r2, [pc, #496]	; (8004ad4 <DMA_SetConfig+0x254>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d059      	beq.n	800499c <DMA_SetConfig+0x11c>
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a7a      	ldr	r2, [pc, #488]	; (8004ad8 <DMA_SetConfig+0x258>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d054      	beq.n	800499c <DMA_SetConfig+0x11c>
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a79      	ldr	r2, [pc, #484]	; (8004adc <DMA_SetConfig+0x25c>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d04f      	beq.n	800499c <DMA_SetConfig+0x11c>
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a77      	ldr	r2, [pc, #476]	; (8004ae0 <DMA_SetConfig+0x260>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d04a      	beq.n	800499c <DMA_SetConfig+0x11c>
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a76      	ldr	r2, [pc, #472]	; (8004ae4 <DMA_SetConfig+0x264>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d045      	beq.n	800499c <DMA_SetConfig+0x11c>
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a74      	ldr	r2, [pc, #464]	; (8004ae8 <DMA_SetConfig+0x268>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d040      	beq.n	800499c <DMA_SetConfig+0x11c>
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a73      	ldr	r2, [pc, #460]	; (8004aec <DMA_SetConfig+0x26c>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d03b      	beq.n	800499c <DMA_SetConfig+0x11c>
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a71      	ldr	r2, [pc, #452]	; (8004af0 <DMA_SetConfig+0x270>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d036      	beq.n	800499c <DMA_SetConfig+0x11c>
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a70      	ldr	r2, [pc, #448]	; (8004af4 <DMA_SetConfig+0x274>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d031      	beq.n	800499c <DMA_SetConfig+0x11c>
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a6e      	ldr	r2, [pc, #440]	; (8004af8 <DMA_SetConfig+0x278>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d02c      	beq.n	800499c <DMA_SetConfig+0x11c>
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a6d      	ldr	r2, [pc, #436]	; (8004afc <DMA_SetConfig+0x27c>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d027      	beq.n	800499c <DMA_SetConfig+0x11c>
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a6b      	ldr	r2, [pc, #428]	; (8004b00 <DMA_SetConfig+0x280>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d022      	beq.n	800499c <DMA_SetConfig+0x11c>
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a6a      	ldr	r2, [pc, #424]	; (8004b04 <DMA_SetConfig+0x284>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d01d      	beq.n	800499c <DMA_SetConfig+0x11c>
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a68      	ldr	r2, [pc, #416]	; (8004b08 <DMA_SetConfig+0x288>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d018      	beq.n	800499c <DMA_SetConfig+0x11c>
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a67      	ldr	r2, [pc, #412]	; (8004b0c <DMA_SetConfig+0x28c>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d013      	beq.n	800499c <DMA_SetConfig+0x11c>
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a65      	ldr	r2, [pc, #404]	; (8004b10 <DMA_SetConfig+0x290>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d00e      	beq.n	800499c <DMA_SetConfig+0x11c>
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a64      	ldr	r2, [pc, #400]	; (8004b14 <DMA_SetConfig+0x294>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d009      	beq.n	800499c <DMA_SetConfig+0x11c>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a62      	ldr	r2, [pc, #392]	; (8004b18 <DMA_SetConfig+0x298>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d004      	beq.n	800499c <DMA_SetConfig+0x11c>
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a61      	ldr	r2, [pc, #388]	; (8004b1c <DMA_SetConfig+0x29c>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d101      	bne.n	80049a0 <DMA_SetConfig+0x120>
 800499c:	2301      	movs	r3, #1
 800499e:	e000      	b.n	80049a2 <DMA_SetConfig+0x122>
 80049a0:	2300      	movs	r3, #0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d00d      	beq.n	80049c2 <DMA_SetConfig+0x142>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049aa:	68fa      	ldr	r2, [r7, #12]
 80049ac:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80049ae:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d004      	beq.n	80049c2 <DMA_SetConfig+0x142>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049bc:	68fa      	ldr	r2, [r7, #12]
 80049be:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80049c0:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a3e      	ldr	r2, [pc, #248]	; (8004ac0 <DMA_SetConfig+0x240>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d04a      	beq.n	8004a62 <DMA_SetConfig+0x1e2>
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a3c      	ldr	r2, [pc, #240]	; (8004ac4 <DMA_SetConfig+0x244>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d045      	beq.n	8004a62 <DMA_SetConfig+0x1e2>
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a3b      	ldr	r2, [pc, #236]	; (8004ac8 <DMA_SetConfig+0x248>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d040      	beq.n	8004a62 <DMA_SetConfig+0x1e2>
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a39      	ldr	r2, [pc, #228]	; (8004acc <DMA_SetConfig+0x24c>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d03b      	beq.n	8004a62 <DMA_SetConfig+0x1e2>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a38      	ldr	r2, [pc, #224]	; (8004ad0 <DMA_SetConfig+0x250>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d036      	beq.n	8004a62 <DMA_SetConfig+0x1e2>
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a36      	ldr	r2, [pc, #216]	; (8004ad4 <DMA_SetConfig+0x254>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d031      	beq.n	8004a62 <DMA_SetConfig+0x1e2>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a35      	ldr	r2, [pc, #212]	; (8004ad8 <DMA_SetConfig+0x258>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d02c      	beq.n	8004a62 <DMA_SetConfig+0x1e2>
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a33      	ldr	r2, [pc, #204]	; (8004adc <DMA_SetConfig+0x25c>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d027      	beq.n	8004a62 <DMA_SetConfig+0x1e2>
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a32      	ldr	r2, [pc, #200]	; (8004ae0 <DMA_SetConfig+0x260>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d022      	beq.n	8004a62 <DMA_SetConfig+0x1e2>
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a30      	ldr	r2, [pc, #192]	; (8004ae4 <DMA_SetConfig+0x264>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d01d      	beq.n	8004a62 <DMA_SetConfig+0x1e2>
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a2f      	ldr	r2, [pc, #188]	; (8004ae8 <DMA_SetConfig+0x268>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d018      	beq.n	8004a62 <DMA_SetConfig+0x1e2>
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a2d      	ldr	r2, [pc, #180]	; (8004aec <DMA_SetConfig+0x26c>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d013      	beq.n	8004a62 <DMA_SetConfig+0x1e2>
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a2c      	ldr	r2, [pc, #176]	; (8004af0 <DMA_SetConfig+0x270>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d00e      	beq.n	8004a62 <DMA_SetConfig+0x1e2>
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a2a      	ldr	r2, [pc, #168]	; (8004af4 <DMA_SetConfig+0x274>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d009      	beq.n	8004a62 <DMA_SetConfig+0x1e2>
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a29      	ldr	r2, [pc, #164]	; (8004af8 <DMA_SetConfig+0x278>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d004      	beq.n	8004a62 <DMA_SetConfig+0x1e2>
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a27      	ldr	r2, [pc, #156]	; (8004afc <DMA_SetConfig+0x27c>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d101      	bne.n	8004a66 <DMA_SetConfig+0x1e6>
 8004a62:	2301      	movs	r3, #1
 8004a64:	e000      	b.n	8004a68 <DMA_SetConfig+0x1e8>
 8004a66:	2300      	movs	r3, #0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d059      	beq.n	8004b20 <DMA_SetConfig+0x2a0>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a70:	f003 031f 	and.w	r3, r3, #31
 8004a74:	223f      	movs	r2, #63	; 0x3f
 8004a76:	409a      	lsls	r2, r3
 8004a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7a:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004a8a:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	683a      	ldr	r2, [r7, #0]
 8004a92:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	2b40      	cmp	r3, #64	; 0x40
 8004a9a:	d108      	bne.n	8004aae <DMA_SetConfig+0x22e>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68ba      	ldr	r2, [r7, #8]
 8004aaa:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004aac:	e086      	b.n	8004bbc <DMA_SetConfig+0x33c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	68ba      	ldr	r2, [r7, #8]
 8004ab4:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	60da      	str	r2, [r3, #12]
}
 8004abe:	e07d      	b.n	8004bbc <DMA_SetConfig+0x33c>
 8004ac0:	40020010 	.word	0x40020010
 8004ac4:	40020028 	.word	0x40020028
 8004ac8:	40020040 	.word	0x40020040
 8004acc:	40020058 	.word	0x40020058
 8004ad0:	40020070 	.word	0x40020070
 8004ad4:	40020088 	.word	0x40020088
 8004ad8:	400200a0 	.word	0x400200a0
 8004adc:	400200b8 	.word	0x400200b8
 8004ae0:	40020410 	.word	0x40020410
 8004ae4:	40020428 	.word	0x40020428
 8004ae8:	40020440 	.word	0x40020440
 8004aec:	40020458 	.word	0x40020458
 8004af0:	40020470 	.word	0x40020470
 8004af4:	40020488 	.word	0x40020488
 8004af8:	400204a0 	.word	0x400204a0
 8004afc:	400204b8 	.word	0x400204b8
 8004b00:	58025408 	.word	0x58025408
 8004b04:	5802541c 	.word	0x5802541c
 8004b08:	58025430 	.word	0x58025430
 8004b0c:	58025444 	.word	0x58025444
 8004b10:	58025458 	.word	0x58025458
 8004b14:	5802546c 	.word	0x5802546c
 8004b18:	58025480 	.word	0x58025480
 8004b1c:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a28      	ldr	r2, [pc, #160]	; (8004bc8 <DMA_SetConfig+0x348>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d022      	beq.n	8004b70 <DMA_SetConfig+0x2f0>
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a27      	ldr	r2, [pc, #156]	; (8004bcc <DMA_SetConfig+0x34c>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d01d      	beq.n	8004b70 <DMA_SetConfig+0x2f0>
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a25      	ldr	r2, [pc, #148]	; (8004bd0 <DMA_SetConfig+0x350>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d018      	beq.n	8004b70 <DMA_SetConfig+0x2f0>
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a24      	ldr	r2, [pc, #144]	; (8004bd4 <DMA_SetConfig+0x354>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d013      	beq.n	8004b70 <DMA_SetConfig+0x2f0>
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a22      	ldr	r2, [pc, #136]	; (8004bd8 <DMA_SetConfig+0x358>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d00e      	beq.n	8004b70 <DMA_SetConfig+0x2f0>
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a21      	ldr	r2, [pc, #132]	; (8004bdc <DMA_SetConfig+0x35c>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d009      	beq.n	8004b70 <DMA_SetConfig+0x2f0>
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a1f      	ldr	r2, [pc, #124]	; (8004be0 <DMA_SetConfig+0x360>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d004      	beq.n	8004b70 <DMA_SetConfig+0x2f0>
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a1e      	ldr	r2, [pc, #120]	; (8004be4 <DMA_SetConfig+0x364>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d101      	bne.n	8004b74 <DMA_SetConfig+0x2f4>
 8004b70:	2301      	movs	r3, #1
 8004b72:	e000      	b.n	8004b76 <DMA_SetConfig+0x2f6>
 8004b74:	2300      	movs	r3, #0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d020      	beq.n	8004bbc <DMA_SetConfig+0x33c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b7e:	f003 031f 	and.w	r3, r3, #31
 8004b82:	2201      	movs	r2, #1
 8004b84:	409a      	lsls	r2, r3
 8004b86:	6a3b      	ldr	r3, [r7, #32]
 8004b88:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	683a      	ldr	r2, [r7, #0]
 8004b90:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	2b40      	cmp	r3, #64	; 0x40
 8004b98:	d108      	bne.n	8004bac <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68ba      	ldr	r2, [r7, #8]
 8004ba8:	60da      	str	r2, [r3, #12]
}
 8004baa:	e007      	b.n	8004bbc <DMA_SetConfig+0x33c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68ba      	ldr	r2, [r7, #8]
 8004bb2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	60da      	str	r2, [r3, #12]
}
 8004bbc:	bf00      	nop
 8004bbe:	372c      	adds	r7, #44	; 0x2c
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr
 8004bc8:	58025408 	.word	0x58025408
 8004bcc:	5802541c 	.word	0x5802541c
 8004bd0:	58025430 	.word	0x58025430
 8004bd4:	58025444 	.word	0x58025444
 8004bd8:	58025458 	.word	0x58025458
 8004bdc:	5802546c 	.word	0x5802546c
 8004be0:	58025480 	.word	0x58025480
 8004be4:	58025494 	.word	0x58025494

08004be8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b085      	sub	sp, #20
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a42      	ldr	r2, [pc, #264]	; (8004d00 <DMA_CalcBaseAndBitshift+0x118>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d04a      	beq.n	8004c90 <DMA_CalcBaseAndBitshift+0xa8>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a41      	ldr	r2, [pc, #260]	; (8004d04 <DMA_CalcBaseAndBitshift+0x11c>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d045      	beq.n	8004c90 <DMA_CalcBaseAndBitshift+0xa8>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a3f      	ldr	r2, [pc, #252]	; (8004d08 <DMA_CalcBaseAndBitshift+0x120>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d040      	beq.n	8004c90 <DMA_CalcBaseAndBitshift+0xa8>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a3e      	ldr	r2, [pc, #248]	; (8004d0c <DMA_CalcBaseAndBitshift+0x124>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d03b      	beq.n	8004c90 <DMA_CalcBaseAndBitshift+0xa8>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a3c      	ldr	r2, [pc, #240]	; (8004d10 <DMA_CalcBaseAndBitshift+0x128>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d036      	beq.n	8004c90 <DMA_CalcBaseAndBitshift+0xa8>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a3b      	ldr	r2, [pc, #236]	; (8004d14 <DMA_CalcBaseAndBitshift+0x12c>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d031      	beq.n	8004c90 <DMA_CalcBaseAndBitshift+0xa8>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a39      	ldr	r2, [pc, #228]	; (8004d18 <DMA_CalcBaseAndBitshift+0x130>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d02c      	beq.n	8004c90 <DMA_CalcBaseAndBitshift+0xa8>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a38      	ldr	r2, [pc, #224]	; (8004d1c <DMA_CalcBaseAndBitshift+0x134>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d027      	beq.n	8004c90 <DMA_CalcBaseAndBitshift+0xa8>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a36      	ldr	r2, [pc, #216]	; (8004d20 <DMA_CalcBaseAndBitshift+0x138>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d022      	beq.n	8004c90 <DMA_CalcBaseAndBitshift+0xa8>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a35      	ldr	r2, [pc, #212]	; (8004d24 <DMA_CalcBaseAndBitshift+0x13c>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d01d      	beq.n	8004c90 <DMA_CalcBaseAndBitshift+0xa8>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a33      	ldr	r2, [pc, #204]	; (8004d28 <DMA_CalcBaseAndBitshift+0x140>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d018      	beq.n	8004c90 <DMA_CalcBaseAndBitshift+0xa8>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a32      	ldr	r2, [pc, #200]	; (8004d2c <DMA_CalcBaseAndBitshift+0x144>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d013      	beq.n	8004c90 <DMA_CalcBaseAndBitshift+0xa8>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a30      	ldr	r2, [pc, #192]	; (8004d30 <DMA_CalcBaseAndBitshift+0x148>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d00e      	beq.n	8004c90 <DMA_CalcBaseAndBitshift+0xa8>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a2f      	ldr	r2, [pc, #188]	; (8004d34 <DMA_CalcBaseAndBitshift+0x14c>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d009      	beq.n	8004c90 <DMA_CalcBaseAndBitshift+0xa8>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a2d      	ldr	r2, [pc, #180]	; (8004d38 <DMA_CalcBaseAndBitshift+0x150>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d004      	beq.n	8004c90 <DMA_CalcBaseAndBitshift+0xa8>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a2c      	ldr	r2, [pc, #176]	; (8004d3c <DMA_CalcBaseAndBitshift+0x154>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d101      	bne.n	8004c94 <DMA_CalcBaseAndBitshift+0xac>
 8004c90:	2301      	movs	r3, #1
 8004c92:	e000      	b.n	8004c96 <DMA_CalcBaseAndBitshift+0xae>
 8004c94:	2300      	movs	r3, #0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d024      	beq.n	8004ce4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	3b10      	subs	r3, #16
 8004ca2:	4a27      	ldr	r2, [pc, #156]	; (8004d40 <DMA_CalcBaseAndBitshift+0x158>)
 8004ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca8:	091b      	lsrs	r3, r3, #4
 8004caa:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f003 0307 	and.w	r3, r3, #7
 8004cb2:	4a24      	ldr	r2, [pc, #144]	; (8004d44 <DMA_CalcBaseAndBitshift+0x15c>)
 8004cb4:	5cd3      	ldrb	r3, [r2, r3]
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2b03      	cmp	r3, #3
 8004cc0:	d908      	bls.n	8004cd4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	4b1f      	ldr	r3, [pc, #124]	; (8004d48 <DMA_CalcBaseAndBitshift+0x160>)
 8004cca:	4013      	ands	r3, r2
 8004ccc:	1d1a      	adds	r2, r3, #4
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	659a      	str	r2, [r3, #88]	; 0x58
 8004cd2:	e00d      	b.n	8004cf0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	461a      	mov	r2, r3
 8004cda:	4b1b      	ldr	r3, [pc, #108]	; (8004d48 <DMA_CalcBaseAndBitshift+0x160>)
 8004cdc:	4013      	ands	r3, r2
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	6593      	str	r3, [r2, #88]	; 0x58
 8004ce2:	e005      	b.n	8004cf0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3714      	adds	r7, #20
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr
 8004d00:	40020010 	.word	0x40020010
 8004d04:	40020028 	.word	0x40020028
 8004d08:	40020040 	.word	0x40020040
 8004d0c:	40020058 	.word	0x40020058
 8004d10:	40020070 	.word	0x40020070
 8004d14:	40020088 	.word	0x40020088
 8004d18:	400200a0 	.word	0x400200a0
 8004d1c:	400200b8 	.word	0x400200b8
 8004d20:	40020410 	.word	0x40020410
 8004d24:	40020428 	.word	0x40020428
 8004d28:	40020440 	.word	0x40020440
 8004d2c:	40020458 	.word	0x40020458
 8004d30:	40020470 	.word	0x40020470
 8004d34:	40020488 	.word	0x40020488
 8004d38:	400204a0 	.word	0x400204a0
 8004d3c:	400204b8 	.word	0x400204b8
 8004d40:	aaaaaaab 	.word	0xaaaaaaab
 8004d44:	0800bf28 	.word	0x0800bf28
 8004d48:	fffffc00 	.word	0xfffffc00

08004d4c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b085      	sub	sp, #20
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d54:	2300      	movs	r3, #0
 8004d56:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	699b      	ldr	r3, [r3, #24]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d120      	bne.n	8004da2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d64:	2b03      	cmp	r3, #3
 8004d66:	d858      	bhi.n	8004e1a <DMA_CheckFifoParam+0xce>
 8004d68:	a201      	add	r2, pc, #4	; (adr r2, 8004d70 <DMA_CheckFifoParam+0x24>)
 8004d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d6e:	bf00      	nop
 8004d70:	08004d81 	.word	0x08004d81
 8004d74:	08004d93 	.word	0x08004d93
 8004d78:	08004d81 	.word	0x08004d81
 8004d7c:	08004e1b 	.word	0x08004e1b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d048      	beq.n	8004e1e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004d90:	e045      	b.n	8004e1e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d96:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004d9a:	d142      	bne.n	8004e22 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004da0:	e03f      	b.n	8004e22 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	699b      	ldr	r3, [r3, #24]
 8004da6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004daa:	d123      	bne.n	8004df4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db0:	2b03      	cmp	r3, #3
 8004db2:	d838      	bhi.n	8004e26 <DMA_CheckFifoParam+0xda>
 8004db4:	a201      	add	r2, pc, #4	; (adr r2, 8004dbc <DMA_CheckFifoParam+0x70>)
 8004db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dba:	bf00      	nop
 8004dbc:	08004dcd 	.word	0x08004dcd
 8004dc0:	08004dd3 	.word	0x08004dd3
 8004dc4:	08004dcd 	.word	0x08004dcd
 8004dc8:	08004de5 	.word	0x08004de5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	73fb      	strb	r3, [r7, #15]
        break;
 8004dd0:	e030      	b.n	8004e34 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d025      	beq.n	8004e2a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004de2:	e022      	b.n	8004e2a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004dec:	d11f      	bne.n	8004e2e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004df2:	e01c      	b.n	8004e2e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	d902      	bls.n	8004e02 <DMA_CheckFifoParam+0xb6>
 8004dfc:	2b03      	cmp	r3, #3
 8004dfe:	d003      	beq.n	8004e08 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004e00:	e018      	b.n	8004e34 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	73fb      	strb	r3, [r7, #15]
        break;
 8004e06:	e015      	b.n	8004e34 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d00e      	beq.n	8004e32 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	73fb      	strb	r3, [r7, #15]
    break;
 8004e18:	e00b      	b.n	8004e32 <DMA_CheckFifoParam+0xe6>
        break;
 8004e1a:	bf00      	nop
 8004e1c:	e00a      	b.n	8004e34 <DMA_CheckFifoParam+0xe8>
        break;
 8004e1e:	bf00      	nop
 8004e20:	e008      	b.n	8004e34 <DMA_CheckFifoParam+0xe8>
        break;
 8004e22:	bf00      	nop
 8004e24:	e006      	b.n	8004e34 <DMA_CheckFifoParam+0xe8>
        break;
 8004e26:	bf00      	nop
 8004e28:	e004      	b.n	8004e34 <DMA_CheckFifoParam+0xe8>
        break;
 8004e2a:	bf00      	nop
 8004e2c:	e002      	b.n	8004e34 <DMA_CheckFifoParam+0xe8>
        break;
 8004e2e:	bf00      	nop
 8004e30:	e000      	b.n	8004e34 <DMA_CheckFifoParam+0xe8>
    break;
 8004e32:	bf00      	nop
    }
  }

  return status;
 8004e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3714      	adds	r7, #20
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr
 8004e42:	bf00      	nop

08004e44 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b085      	sub	sp, #20
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a38      	ldr	r2, [pc, #224]	; (8004f38 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d022      	beq.n	8004ea2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a36      	ldr	r2, [pc, #216]	; (8004f3c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d01d      	beq.n	8004ea2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a35      	ldr	r2, [pc, #212]	; (8004f40 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d018      	beq.n	8004ea2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a33      	ldr	r2, [pc, #204]	; (8004f44 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d013      	beq.n	8004ea2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a32      	ldr	r2, [pc, #200]	; (8004f48 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d00e      	beq.n	8004ea2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a30      	ldr	r2, [pc, #192]	; (8004f4c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d009      	beq.n	8004ea2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a2f      	ldr	r2, [pc, #188]	; (8004f50 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d004      	beq.n	8004ea2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a2d      	ldr	r2, [pc, #180]	; (8004f54 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d101      	bne.n	8004ea6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e000      	b.n	8004ea8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d01a      	beq.n	8004ee2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	3b08      	subs	r3, #8
 8004eb4:	4a28      	ldr	r2, [pc, #160]	; (8004f58 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eba:	091b      	lsrs	r3, r3, #4
 8004ebc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004ebe:	68fa      	ldr	r2, [r7, #12]
 8004ec0:	4b26      	ldr	r3, [pc, #152]	; (8004f5c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004ec2:	4413      	add	r3, r2
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4a24      	ldr	r2, [pc, #144]	; (8004f60 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004ed0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	f003 031f 	and.w	r3, r3, #31
 8004ed8:	2201      	movs	r2, #1
 8004eda:	409a      	lsls	r2, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004ee0:	e024      	b.n	8004f2c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	3b10      	subs	r3, #16
 8004eea:	4a1e      	ldr	r2, [pc, #120]	; (8004f64 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004eec:	fba2 2303 	umull	r2, r3, r2, r3
 8004ef0:	091b      	lsrs	r3, r3, #4
 8004ef2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	4a1c      	ldr	r2, [pc, #112]	; (8004f68 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d806      	bhi.n	8004f0a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	4a1b      	ldr	r2, [pc, #108]	; (8004f6c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d902      	bls.n	8004f0a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	3308      	adds	r3, #8
 8004f08:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004f0a:	68fa      	ldr	r2, [r7, #12]
 8004f0c:	4b18      	ldr	r3, [pc, #96]	; (8004f70 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004f0e:	4413      	add	r3, r2
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	461a      	mov	r2, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a16      	ldr	r2, [pc, #88]	; (8004f74 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004f1c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f003 031f 	and.w	r3, r3, #31
 8004f24:	2201      	movs	r2, #1
 8004f26:	409a      	lsls	r2, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004f2c:	bf00      	nop
 8004f2e:	3714      	adds	r7, #20
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr
 8004f38:	58025408 	.word	0x58025408
 8004f3c:	5802541c 	.word	0x5802541c
 8004f40:	58025430 	.word	0x58025430
 8004f44:	58025444 	.word	0x58025444
 8004f48:	58025458 	.word	0x58025458
 8004f4c:	5802546c 	.word	0x5802546c
 8004f50:	58025480 	.word	0x58025480
 8004f54:	58025494 	.word	0x58025494
 8004f58:	cccccccd 	.word	0xcccccccd
 8004f5c:	16009600 	.word	0x16009600
 8004f60:	58025880 	.word	0x58025880
 8004f64:	aaaaaaab 	.word	0xaaaaaaab
 8004f68:	400204b8 	.word	0x400204b8
 8004f6c:	4002040f 	.word	0x4002040f
 8004f70:	10008200 	.word	0x10008200
 8004f74:	40020880 	.word	0x40020880

08004f78 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b085      	sub	sp, #20
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d04a      	beq.n	8005024 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2b08      	cmp	r3, #8
 8004f92:	d847      	bhi.n	8005024 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a25      	ldr	r2, [pc, #148]	; (8005030 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d022      	beq.n	8004fe4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a24      	ldr	r2, [pc, #144]	; (8005034 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d01d      	beq.n	8004fe4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a22      	ldr	r2, [pc, #136]	; (8005038 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d018      	beq.n	8004fe4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a21      	ldr	r2, [pc, #132]	; (800503c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d013      	beq.n	8004fe4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a1f      	ldr	r2, [pc, #124]	; (8005040 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d00e      	beq.n	8004fe4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a1e      	ldr	r2, [pc, #120]	; (8005044 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d009      	beq.n	8004fe4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a1c      	ldr	r2, [pc, #112]	; (8005048 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d004      	beq.n	8004fe4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a1b      	ldr	r2, [pc, #108]	; (800504c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d101      	bne.n	8004fe8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e000      	b.n	8004fea <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004fe8:	2300      	movs	r3, #0
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d00a      	beq.n	8005004 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004fee:	68fa      	ldr	r2, [r7, #12]
 8004ff0:	4b17      	ldr	r3, [pc, #92]	; (8005050 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004ff2:	4413      	add	r3, r2
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	4a15      	ldr	r2, [pc, #84]	; (8005054 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005000:	671a      	str	r2, [r3, #112]	; 0x70
 8005002:	e009      	b.n	8005018 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005004:	68fa      	ldr	r2, [r7, #12]
 8005006:	4b14      	ldr	r3, [pc, #80]	; (8005058 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005008:	4413      	add	r3, r2
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	461a      	mov	r2, r3
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a11      	ldr	r2, [pc, #68]	; (800505c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005016:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	3b01      	subs	r3, #1
 800501c:	2201      	movs	r2, #1
 800501e:	409a      	lsls	r2, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005024:	bf00      	nop
 8005026:	3714      	adds	r7, #20
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr
 8005030:	58025408 	.word	0x58025408
 8005034:	5802541c 	.word	0x5802541c
 8005038:	58025430 	.word	0x58025430
 800503c:	58025444 	.word	0x58025444
 8005040:	58025458 	.word	0x58025458
 8005044:	5802546c 	.word	0x5802546c
 8005048:	58025480 	.word	0x58025480
 800504c:	58025494 	.word	0x58025494
 8005050:	1600963f 	.word	0x1600963f
 8005054:	58025940 	.word	0x58025940
 8005058:	1000823f 	.word	0x1000823f
 800505c:	40020940 	.word	0x40020940

08005060 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA Stream.
  * @param  pSyncConfig : pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 8005060:	b480      	push	{r7}
 8005062:	b085      	sub	sp, #20
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]
  uint32_t syncSignalID = 0;
 800506a:	2300      	movs	r3, #0
 800506c:	60fb      	str	r3, [r7, #12]
  uint32_t syncPolarity = 0;
 800506e:	2300      	movs	r3, #0
 8005070:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  if(pSyncConfig->SyncEnable == ENABLE)
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	7a1b      	ldrb	r3, [r3, #8]
 8005076:	2b01      	cmp	r3, #1
 8005078:	d155      	bne.n	8005126 <HAL_DMAEx_ConfigMuxSync+0xc6>
  {
    assert_param(IS_DMAMUX_SYNC_POLARITY(pSyncConfig->SyncPolarity));

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a4b      	ldr	r2, [pc, #300]	; (80051ac <HAL_DMAEx_ConfigMuxSync+0x14c>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d049      	beq.n	8005118 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a49      	ldr	r2, [pc, #292]	; (80051b0 <HAL_DMAEx_ConfigMuxSync+0x150>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d044      	beq.n	8005118 <HAL_DMAEx_ConfigMuxSync+0xb8>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a48      	ldr	r2, [pc, #288]	; (80051b4 <HAL_DMAEx_ConfigMuxSync+0x154>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d03f      	beq.n	8005118 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a46      	ldr	r2, [pc, #280]	; (80051b8 <HAL_DMAEx_ConfigMuxSync+0x158>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d03a      	beq.n	8005118 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a45      	ldr	r2, [pc, #276]	; (80051bc <HAL_DMAEx_ConfigMuxSync+0x15c>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d035      	beq.n	8005118 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a43      	ldr	r2, [pc, #268]	; (80051c0 <HAL_DMAEx_ConfigMuxSync+0x160>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d030      	beq.n	8005118 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a42      	ldr	r2, [pc, #264]	; (80051c4 <HAL_DMAEx_ConfigMuxSync+0x164>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d02b      	beq.n	8005118 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a40      	ldr	r2, [pc, #256]	; (80051c8 <HAL_DMAEx_ConfigMuxSync+0x168>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d026      	beq.n	8005118 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a3f      	ldr	r2, [pc, #252]	; (80051cc <HAL_DMAEx_ConfigMuxSync+0x16c>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d021      	beq.n	8005118 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a3d      	ldr	r2, [pc, #244]	; (80051d0 <HAL_DMAEx_ConfigMuxSync+0x170>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d01c      	beq.n	8005118 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a3c      	ldr	r2, [pc, #240]	; (80051d4 <HAL_DMAEx_ConfigMuxSync+0x174>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d017      	beq.n	8005118 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a3a      	ldr	r2, [pc, #232]	; (80051d8 <HAL_DMAEx_ConfigMuxSync+0x178>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d012      	beq.n	8005118 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a39      	ldr	r2, [pc, #228]	; (80051dc <HAL_DMAEx_ConfigMuxSync+0x17c>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d00d      	beq.n	8005118 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a37      	ldr	r2, [pc, #220]	; (80051e0 <HAL_DMAEx_ConfigMuxSync+0x180>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d008      	beq.n	8005118 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a36      	ldr	r2, [pc, #216]	; (80051e4 <HAL_DMAEx_ConfigMuxSync+0x184>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d003      	beq.n	8005118 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a34      	ldr	r2, [pc, #208]	; (80051e8 <HAL_DMAEx_ConfigMuxSync+0x188>)
 8005116:	4293      	cmp	r3, r2
 8005118:	bf00      	nop
    }
    else
    {
      assert_param(IS_BDMA_DMAMUX_SYNC_SIGNAL_ID(pSyncConfig->SyncSignalID));
    }
    syncSignalID = pSyncConfig->SyncSignalID;
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	60fb      	str	r3, [r7, #12]
    syncPolarity = pSyncConfig->SyncPolarity;
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	60bb      	str	r3, [r7, #8]
  }

  /*Check if the DMA state is ready */
  if(hdma->State == HAL_DMA_STATE_READY)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800512c:	b2db      	uxtb	r3, r3
 800512e:	2b01      	cmp	r3, #1
 8005130:	d131      	bne.n	8005196 <HAL_DMAEx_ConfigMuxSync+0x136>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005138:	2b01      	cmp	r3, #1
 800513a:	d101      	bne.n	8005140 <HAL_DMAEx_ConfigMuxSync+0xe0>
 800513c:	2302      	movs	r3, #2
 800513e:	e02f      	b.n	80051a0 <HAL_DMAEx_ConfigMuxSync+0x140>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the synchronization and event generation before applying a new config */
    CLEAR_BIT(hdma->DMAmuxChannel->CCR,(DMAMUX_CxCR_SE | DMAMUX_CxCR_EGE));
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005152:	f422 3281 	bic.w	r2, r2, #66048	; 0x10200
 8005156:	601a      	str	r2, [r3, #0]

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG( hdma->DMAmuxChannel->CCR, \
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	b2d9      	uxtb	r1, r3
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	061a      	lsls	r2, r3, #24
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	3b01      	subs	r3, #1
 800516a:	04db      	lsls	r3, r3, #19
 800516c:	431a      	orrs	r2, r3
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	431a      	orrs	r2, r3
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	7a1b      	ldrb	r3, [r3, #8]
 8005176:	041b      	lsls	r3, r3, #16
 8005178:	431a      	orrs	r2, r3
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	7a5b      	ldrb	r3, [r3, #9]
 800517e:	025b      	lsls	r3, r3, #9
 8005180:	431a      	orrs	r2, r3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005186:	430a      	orrs	r2, r1
 8005188:	601a      	str	r2, [r3, #0]
               ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
               syncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)    | \
               ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos));

      /* Process Locked */
    __HAL_UNLOCK(hdma);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8005192:	2300      	movs	r3, #0
 8005194:	e004      	b.n	80051a0 <HAL_DMAEx_ConfigMuxSync+0x140>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800519c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
  }
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3714      	adds	r7, #20
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr
 80051ac:	40020010 	.word	0x40020010
 80051b0:	40020028 	.word	0x40020028
 80051b4:	40020040 	.word	0x40020040
 80051b8:	40020058 	.word	0x40020058
 80051bc:	40020070 	.word	0x40020070
 80051c0:	40020088 	.word	0x40020088
 80051c4:	400200a0 	.word	0x400200a0
 80051c8:	400200b8 	.word	0x400200b8
 80051cc:	40020410 	.word	0x40020410
 80051d0:	40020428 	.word	0x40020428
 80051d4:	40020440 	.word	0x40020440
 80051d8:	40020458 	.word	0x40020458
 80051dc:	40020470 	.word	0x40020470
 80051e0:	40020488 	.word	0x40020488
 80051e4:	400204a0 	.word	0x400204a0
 80051e8:	400204b8 	.word	0x400204b8

080051ec <HAL_DMAEx_EnableMuxRequestGenerator>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_EnableMuxRequestGenerator (DMA_HandleTypeDef *hdma)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b083      	sub	sp, #12
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));

  /* check if the DMA state is ready
     and DMA is using a DMAMUX request generator block */
  if((hdma->State != HAL_DMA_STATE_RESET) && (hdma->DMAmuxRequestGen != 0U))
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d00d      	beq.n	800521c <HAL_DMAEx_EnableMuxRequestGenerator+0x30>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005204:	2b00      	cmp	r3, #0
 8005206:	d009      	beq.n	800521c <HAL_DMAEx_EnableMuxRequestGenerator+0x30>
  {
    /* Enable the request generator*/
    hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_GE;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005212:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005216:	601a      	str	r2, [r3, #0]

   return HAL_OK;
 8005218:	2300      	movs	r3, #0
 800521a:	e000      	b.n	800521e <HAL_DMAEx_EnableMuxRequestGenerator+0x32>
 }
 else
 {
   return HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 }
}
 800521e:	4618      	mov	r0, r3
 8005220:	370c      	adds	r7, #12
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr

0800522a <HAL_DMAEx_MUX_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800522a:	b580      	push	{r7, lr}
 800522c:	b082      	sub	sp, #8
 800522e:	af00      	add	r7, sp, #0
 8005230:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800523c:	4013      	ands	r3, r2
 800523e:	2b00      	cmp	r3, #0
 8005240:	d01a      	beq.n	8005278 <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800524c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005250:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800525a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005260:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	655a      	str	r2, [r3, #84]	; 0x54

    if(hdma->XferErrorCallback != NULL)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800526c:	2b00      	cmp	r3, #0
 800526e:	d003      	beq.n	8005278 <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	4798      	blx	r3
    }
  }

  if(hdma->DMAmuxRequestGen != 0)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800527c:	2b00      	cmp	r3, #0
 800527e:	d022      	beq.n	80052c6 <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
   /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800528a:	4013      	ands	r3, r2
 800528c:	2b00      	cmp	r3, #0
 800528e:	d01a      	beq.n	80052c6 <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800529a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800529e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052a4:	687a      	ldr	r2, [r7, #4]
 80052a6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80052a8:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ae:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	655a      	str	r2, [r3, #84]	; 0x54

      if(hdma->XferErrorCallback != NULL)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d003      	beq.n	80052c6 <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	4798      	blx	r3
      }
    }
  }
}
 80052c6:	bf00      	nop
 80052c8:	3708      	adds	r7, #8
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
	...

080052d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b089      	sub	sp, #36	; 0x24
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80052da:	2300      	movs	r3, #0
 80052dc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80052de:	4b86      	ldr	r3, [pc, #536]	; (80054f8 <HAL_GPIO_Init+0x228>)
 80052e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80052e2:	e18c      	b.n	80055fe <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	2101      	movs	r1, #1
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	fa01 f303 	lsl.w	r3, r1, r3
 80052f0:	4013      	ands	r3, r2
 80052f2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	f000 817e 	beq.w	80055f8 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	f003 0303 	and.w	r3, r3, #3
 8005304:	2b01      	cmp	r3, #1
 8005306:	d005      	beq.n	8005314 <HAL_GPIO_Init+0x44>
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	f003 0303 	and.w	r3, r3, #3
 8005310:	2b02      	cmp	r3, #2
 8005312:	d130      	bne.n	8005376 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800531a:	69fb      	ldr	r3, [r7, #28]
 800531c:	005b      	lsls	r3, r3, #1
 800531e:	2203      	movs	r2, #3
 8005320:	fa02 f303 	lsl.w	r3, r2, r3
 8005324:	43db      	mvns	r3, r3
 8005326:	69ba      	ldr	r2, [r7, #24]
 8005328:	4013      	ands	r3, r2
 800532a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	68da      	ldr	r2, [r3, #12]
 8005330:	69fb      	ldr	r3, [r7, #28]
 8005332:	005b      	lsls	r3, r3, #1
 8005334:	fa02 f303 	lsl.w	r3, r2, r3
 8005338:	69ba      	ldr	r2, [r7, #24]
 800533a:	4313      	orrs	r3, r2
 800533c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	69ba      	ldr	r2, [r7, #24]
 8005342:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800534a:	2201      	movs	r2, #1
 800534c:	69fb      	ldr	r3, [r7, #28]
 800534e:	fa02 f303 	lsl.w	r3, r2, r3
 8005352:	43db      	mvns	r3, r3
 8005354:	69ba      	ldr	r2, [r7, #24]
 8005356:	4013      	ands	r3, r2
 8005358:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	091b      	lsrs	r3, r3, #4
 8005360:	f003 0201 	and.w	r2, r3, #1
 8005364:	69fb      	ldr	r3, [r7, #28]
 8005366:	fa02 f303 	lsl.w	r3, r2, r3
 800536a:	69ba      	ldr	r2, [r7, #24]
 800536c:	4313      	orrs	r3, r2
 800536e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	69ba      	ldr	r2, [r7, #24]
 8005374:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	f003 0303 	and.w	r3, r3, #3
 800537e:	2b03      	cmp	r3, #3
 8005380:	d017      	beq.n	80053b2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005388:	69fb      	ldr	r3, [r7, #28]
 800538a:	005b      	lsls	r3, r3, #1
 800538c:	2203      	movs	r2, #3
 800538e:	fa02 f303 	lsl.w	r3, r2, r3
 8005392:	43db      	mvns	r3, r3
 8005394:	69ba      	ldr	r2, [r7, #24]
 8005396:	4013      	ands	r3, r2
 8005398:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	689a      	ldr	r2, [r3, #8]
 800539e:	69fb      	ldr	r3, [r7, #28]
 80053a0:	005b      	lsls	r3, r3, #1
 80053a2:	fa02 f303 	lsl.w	r3, r2, r3
 80053a6:	69ba      	ldr	r2, [r7, #24]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	69ba      	ldr	r2, [r7, #24]
 80053b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	f003 0303 	and.w	r3, r3, #3
 80053ba:	2b02      	cmp	r3, #2
 80053bc:	d123      	bne.n	8005406 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80053be:	69fb      	ldr	r3, [r7, #28]
 80053c0:	08da      	lsrs	r2, r3, #3
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	3208      	adds	r2, #8
 80053c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80053cc:	69fb      	ldr	r3, [r7, #28]
 80053ce:	f003 0307 	and.w	r3, r3, #7
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	220f      	movs	r2, #15
 80053d6:	fa02 f303 	lsl.w	r3, r2, r3
 80053da:	43db      	mvns	r3, r3
 80053dc:	69ba      	ldr	r2, [r7, #24]
 80053de:	4013      	ands	r3, r2
 80053e0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	691a      	ldr	r2, [r3, #16]
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	f003 0307 	and.w	r3, r3, #7
 80053ec:	009b      	lsls	r3, r3, #2
 80053ee:	fa02 f303 	lsl.w	r3, r2, r3
 80053f2:	69ba      	ldr	r2, [r7, #24]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	08da      	lsrs	r2, r3, #3
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	3208      	adds	r2, #8
 8005400:	69b9      	ldr	r1, [r7, #24]
 8005402:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800540c:	69fb      	ldr	r3, [r7, #28]
 800540e:	005b      	lsls	r3, r3, #1
 8005410:	2203      	movs	r2, #3
 8005412:	fa02 f303 	lsl.w	r3, r2, r3
 8005416:	43db      	mvns	r3, r3
 8005418:	69ba      	ldr	r2, [r7, #24]
 800541a:	4013      	ands	r3, r2
 800541c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	f003 0203 	and.w	r2, r3, #3
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	005b      	lsls	r3, r3, #1
 800542a:	fa02 f303 	lsl.w	r3, r2, r3
 800542e:	69ba      	ldr	r2, [r7, #24]
 8005430:	4313      	orrs	r3, r2
 8005432:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	69ba      	ldr	r2, [r7, #24]
 8005438:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005442:	2b00      	cmp	r3, #0
 8005444:	f000 80d8 	beq.w	80055f8 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005448:	4b2c      	ldr	r3, [pc, #176]	; (80054fc <HAL_GPIO_Init+0x22c>)
 800544a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800544e:	4a2b      	ldr	r2, [pc, #172]	; (80054fc <HAL_GPIO_Init+0x22c>)
 8005450:	f043 0302 	orr.w	r3, r3, #2
 8005454:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005458:	4b28      	ldr	r3, [pc, #160]	; (80054fc <HAL_GPIO_Init+0x22c>)
 800545a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800545e:	f003 0302 	and.w	r3, r3, #2
 8005462:	60fb      	str	r3, [r7, #12]
 8005464:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005466:	4a26      	ldr	r2, [pc, #152]	; (8005500 <HAL_GPIO_Init+0x230>)
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	089b      	lsrs	r3, r3, #2
 800546c:	3302      	adds	r3, #2
 800546e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005472:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005474:	69fb      	ldr	r3, [r7, #28]
 8005476:	f003 0303 	and.w	r3, r3, #3
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	220f      	movs	r2, #15
 800547e:	fa02 f303 	lsl.w	r3, r2, r3
 8005482:	43db      	mvns	r3, r3
 8005484:	69ba      	ldr	r2, [r7, #24]
 8005486:	4013      	ands	r3, r2
 8005488:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a1d      	ldr	r2, [pc, #116]	; (8005504 <HAL_GPIO_Init+0x234>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d04a      	beq.n	8005528 <HAL_GPIO_Init+0x258>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4a1c      	ldr	r2, [pc, #112]	; (8005508 <HAL_GPIO_Init+0x238>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d02b      	beq.n	80054f2 <HAL_GPIO_Init+0x222>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4a1b      	ldr	r2, [pc, #108]	; (800550c <HAL_GPIO_Init+0x23c>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d025      	beq.n	80054ee <HAL_GPIO_Init+0x21e>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4a1a      	ldr	r2, [pc, #104]	; (8005510 <HAL_GPIO_Init+0x240>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d01f      	beq.n	80054ea <HAL_GPIO_Init+0x21a>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4a19      	ldr	r2, [pc, #100]	; (8005514 <HAL_GPIO_Init+0x244>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d019      	beq.n	80054e6 <HAL_GPIO_Init+0x216>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4a18      	ldr	r2, [pc, #96]	; (8005518 <HAL_GPIO_Init+0x248>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d013      	beq.n	80054e2 <HAL_GPIO_Init+0x212>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4a17      	ldr	r2, [pc, #92]	; (800551c <HAL_GPIO_Init+0x24c>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d00d      	beq.n	80054de <HAL_GPIO_Init+0x20e>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4a16      	ldr	r2, [pc, #88]	; (8005520 <HAL_GPIO_Init+0x250>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d007      	beq.n	80054da <HAL_GPIO_Init+0x20a>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4a15      	ldr	r2, [pc, #84]	; (8005524 <HAL_GPIO_Init+0x254>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d101      	bne.n	80054d6 <HAL_GPIO_Init+0x206>
 80054d2:	2309      	movs	r3, #9
 80054d4:	e029      	b.n	800552a <HAL_GPIO_Init+0x25a>
 80054d6:	230a      	movs	r3, #10
 80054d8:	e027      	b.n	800552a <HAL_GPIO_Init+0x25a>
 80054da:	2307      	movs	r3, #7
 80054dc:	e025      	b.n	800552a <HAL_GPIO_Init+0x25a>
 80054de:	2306      	movs	r3, #6
 80054e0:	e023      	b.n	800552a <HAL_GPIO_Init+0x25a>
 80054e2:	2305      	movs	r3, #5
 80054e4:	e021      	b.n	800552a <HAL_GPIO_Init+0x25a>
 80054e6:	2304      	movs	r3, #4
 80054e8:	e01f      	b.n	800552a <HAL_GPIO_Init+0x25a>
 80054ea:	2303      	movs	r3, #3
 80054ec:	e01d      	b.n	800552a <HAL_GPIO_Init+0x25a>
 80054ee:	2302      	movs	r3, #2
 80054f0:	e01b      	b.n	800552a <HAL_GPIO_Init+0x25a>
 80054f2:	2301      	movs	r3, #1
 80054f4:	e019      	b.n	800552a <HAL_GPIO_Init+0x25a>
 80054f6:	bf00      	nop
 80054f8:	58000080 	.word	0x58000080
 80054fc:	58024400 	.word	0x58024400
 8005500:	58000400 	.word	0x58000400
 8005504:	58020000 	.word	0x58020000
 8005508:	58020400 	.word	0x58020400
 800550c:	58020800 	.word	0x58020800
 8005510:	58020c00 	.word	0x58020c00
 8005514:	58021000 	.word	0x58021000
 8005518:	58021400 	.word	0x58021400
 800551c:	58021800 	.word	0x58021800
 8005520:	58021c00 	.word	0x58021c00
 8005524:	58022400 	.word	0x58022400
 8005528:	2300      	movs	r3, #0
 800552a:	69fa      	ldr	r2, [r7, #28]
 800552c:	f002 0203 	and.w	r2, r2, #3
 8005530:	0092      	lsls	r2, r2, #2
 8005532:	4093      	lsls	r3, r2
 8005534:	69ba      	ldr	r2, [r7, #24]
 8005536:	4313      	orrs	r3, r2
 8005538:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800553a:	4938      	ldr	r1, [pc, #224]	; (800561c <HAL_GPIO_Init+0x34c>)
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	089b      	lsrs	r3, r3, #2
 8005540:	3302      	adds	r3, #2
 8005542:	69ba      	ldr	r2, [r7, #24]
 8005544:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005548:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	43db      	mvns	r3, r3
 8005554:	69ba      	ldr	r2, [r7, #24]
 8005556:	4013      	ands	r3, r2
 8005558:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005562:	2b00      	cmp	r3, #0
 8005564:	d003      	beq.n	800556e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8005566:	69ba      	ldr	r2, [r7, #24]
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	4313      	orrs	r3, r2
 800556c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800556e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005572:	69bb      	ldr	r3, [r7, #24]
 8005574:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005576:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	43db      	mvns	r3, r3
 8005582:	69ba      	ldr	r2, [r7, #24]
 8005584:	4013      	ands	r3, r2
 8005586:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005590:	2b00      	cmp	r3, #0
 8005592:	d003      	beq.n	800559c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8005594:	69ba      	ldr	r2, [r7, #24]
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	4313      	orrs	r3, r2
 800559a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800559c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80055a0:	69bb      	ldr	r3, [r7, #24]
 80055a2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	43db      	mvns	r3, r3
 80055ae:	69ba      	ldr	r2, [r7, #24]
 80055b0:	4013      	ands	r3, r2
 80055b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d003      	beq.n	80055c8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80055c0:	69ba      	ldr	r2, [r7, #24]
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	4313      	orrs	r3, r2
 80055c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	69ba      	ldr	r2, [r7, #24]
 80055cc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	43db      	mvns	r3, r3
 80055d8:	69ba      	ldr	r2, [r7, #24]
 80055da:	4013      	ands	r3, r2
 80055dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d003      	beq.n	80055f2 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80055ea:	69ba      	ldr	r2, [r7, #24]
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	69ba      	ldr	r2, [r7, #24]
 80055f6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80055f8:	69fb      	ldr	r3, [r7, #28]
 80055fa:	3301      	adds	r3, #1
 80055fc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	fa22 f303 	lsr.w	r3, r2, r3
 8005608:	2b00      	cmp	r3, #0
 800560a:	f47f ae6b 	bne.w	80052e4 <HAL_GPIO_Init+0x14>
  }
}
 800560e:	bf00      	nop
 8005610:	bf00      	nop
 8005612:	3724      	adds	r7, #36	; 0x24
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr
 800561c:	58000400 	.word	0x58000400

08005620 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005620:	b480      	push	{r7}
 8005622:	b087      	sub	sp, #28
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800562a:	2300      	movs	r3, #0
 800562c:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800562e:	4b72      	ldr	r3, [pc, #456]	; (80057f8 <HAL_GPIO_DeInit+0x1d8>)
 8005630:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8005632:	e0d3      	b.n	80057dc <HAL_GPIO_DeInit+0x1bc>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8005634:	2201      	movs	r2, #1
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	fa02 f303 	lsl.w	r3, r2, r3
 800563c:	683a      	ldr	r2, [r7, #0]
 800563e:	4013      	ands	r3, r2
 8005640:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2b00      	cmp	r3, #0
 8005646:	f000 80c6 	beq.w	80057d6 <HAL_GPIO_DeInit+0x1b6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 800564a:	4a6c      	ldr	r2, [pc, #432]	; (80057fc <HAL_GPIO_DeInit+0x1dc>)
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	089b      	lsrs	r3, r3, #2
 8005650:	3302      	adds	r3, #2
 8005652:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005656:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	f003 0303 	and.w	r3, r3, #3
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	220f      	movs	r2, #15
 8005662:	fa02 f303 	lsl.w	r3, r2, r3
 8005666:	68ba      	ldr	r2, [r7, #8]
 8005668:	4013      	ands	r3, r2
 800566a:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4a64      	ldr	r2, [pc, #400]	; (8005800 <HAL_GPIO_DeInit+0x1e0>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d031      	beq.n	80056d8 <HAL_GPIO_DeInit+0xb8>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4a63      	ldr	r2, [pc, #396]	; (8005804 <HAL_GPIO_DeInit+0x1e4>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d02b      	beq.n	80056d4 <HAL_GPIO_DeInit+0xb4>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	4a62      	ldr	r2, [pc, #392]	; (8005808 <HAL_GPIO_DeInit+0x1e8>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d025      	beq.n	80056d0 <HAL_GPIO_DeInit+0xb0>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	4a61      	ldr	r2, [pc, #388]	; (800580c <HAL_GPIO_DeInit+0x1ec>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d01f      	beq.n	80056cc <HAL_GPIO_DeInit+0xac>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4a60      	ldr	r2, [pc, #384]	; (8005810 <HAL_GPIO_DeInit+0x1f0>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d019      	beq.n	80056c8 <HAL_GPIO_DeInit+0xa8>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a5f      	ldr	r2, [pc, #380]	; (8005814 <HAL_GPIO_DeInit+0x1f4>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d013      	beq.n	80056c4 <HAL_GPIO_DeInit+0xa4>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	4a5e      	ldr	r2, [pc, #376]	; (8005818 <HAL_GPIO_DeInit+0x1f8>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d00d      	beq.n	80056c0 <HAL_GPIO_DeInit+0xa0>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4a5d      	ldr	r2, [pc, #372]	; (800581c <HAL_GPIO_DeInit+0x1fc>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d007      	beq.n	80056bc <HAL_GPIO_DeInit+0x9c>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	4a5c      	ldr	r2, [pc, #368]	; (8005820 <HAL_GPIO_DeInit+0x200>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d101      	bne.n	80056b8 <HAL_GPIO_DeInit+0x98>
 80056b4:	2309      	movs	r3, #9
 80056b6:	e010      	b.n	80056da <HAL_GPIO_DeInit+0xba>
 80056b8:	230a      	movs	r3, #10
 80056ba:	e00e      	b.n	80056da <HAL_GPIO_DeInit+0xba>
 80056bc:	2307      	movs	r3, #7
 80056be:	e00c      	b.n	80056da <HAL_GPIO_DeInit+0xba>
 80056c0:	2306      	movs	r3, #6
 80056c2:	e00a      	b.n	80056da <HAL_GPIO_DeInit+0xba>
 80056c4:	2305      	movs	r3, #5
 80056c6:	e008      	b.n	80056da <HAL_GPIO_DeInit+0xba>
 80056c8:	2304      	movs	r3, #4
 80056ca:	e006      	b.n	80056da <HAL_GPIO_DeInit+0xba>
 80056cc:	2303      	movs	r3, #3
 80056ce:	e004      	b.n	80056da <HAL_GPIO_DeInit+0xba>
 80056d0:	2302      	movs	r3, #2
 80056d2:	e002      	b.n	80056da <HAL_GPIO_DeInit+0xba>
 80056d4:	2301      	movs	r3, #1
 80056d6:	e000      	b.n	80056da <HAL_GPIO_DeInit+0xba>
 80056d8:	2300      	movs	r3, #0
 80056da:	697a      	ldr	r2, [r7, #20]
 80056dc:	f002 0203 	and.w	r2, r2, #3
 80056e0:	0092      	lsls	r2, r2, #2
 80056e2:	4093      	lsls	r3, r2
 80056e4:	68ba      	ldr	r2, [r7, #8]
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d136      	bne.n	8005758 <HAL_GPIO_DeInit+0x138>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	43db      	mvns	r3, r3
 80056f2:	401a      	ands	r2, r3
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	685a      	ldr	r2, [r3, #4]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	43db      	mvns	r3, r3
 8005700:	401a      	ands	r2, r3
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8005706:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800570a:	685a      	ldr	r2, [r3, #4]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	43db      	mvns	r3, r3
 8005710:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005714:	4013      	ands	r3, r2
 8005716:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8005718:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	43db      	mvns	r3, r3
 8005722:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005726:	4013      	ands	r3, r2
 8005728:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	f003 0303 	and.w	r3, r3, #3
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	220f      	movs	r2, #15
 8005734:	fa02 f303 	lsl.w	r3, r2, r3
 8005738:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800573a:	4a30      	ldr	r2, [pc, #192]	; (80057fc <HAL_GPIO_DeInit+0x1dc>)
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	089b      	lsrs	r3, r3, #2
 8005740:	3302      	adds	r3, #2
 8005742:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	43da      	mvns	r2, r3
 800574a:	482c      	ldr	r0, [pc, #176]	; (80057fc <HAL_GPIO_DeInit+0x1dc>)
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	089b      	lsrs	r3, r3, #2
 8005750:	400a      	ands	r2, r1
 8005752:	3302      	adds	r3, #2
 8005754:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	005b      	lsls	r3, r3, #1
 8005760:	2103      	movs	r1, #3
 8005762:	fa01 f303 	lsl.w	r3, r1, r3
 8005766:	431a      	orrs	r2, r3
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	08da      	lsrs	r2, r3, #3
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	3208      	adds	r2, #8
 8005774:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	f003 0307 	and.w	r3, r3, #7
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	220f      	movs	r2, #15
 8005782:	fa02 f303 	lsl.w	r3, r2, r3
 8005786:	43db      	mvns	r3, r3
 8005788:	697a      	ldr	r2, [r7, #20]
 800578a:	08d2      	lsrs	r2, r2, #3
 800578c:	4019      	ands	r1, r3
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	3208      	adds	r2, #8
 8005792:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	68da      	ldr	r2, [r3, #12]
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	005b      	lsls	r3, r3, #1
 800579e:	2103      	movs	r1, #3
 80057a0:	fa01 f303 	lsl.w	r3, r1, r3
 80057a4:	43db      	mvns	r3, r3
 80057a6:	401a      	ands	r2, r3
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	685a      	ldr	r2, [r3, #4]
 80057b0:	2101      	movs	r1, #1
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	fa01 f303 	lsl.w	r3, r1, r3
 80057b8:	43db      	mvns	r3, r3
 80057ba:	401a      	ands	r2, r3
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	689a      	ldr	r2, [r3, #8]
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	005b      	lsls	r3, r3, #1
 80057c8:	2103      	movs	r1, #3
 80057ca:	fa01 f303 	lsl.w	r3, r1, r3
 80057ce:	43db      	mvns	r3, r3
 80057d0:	401a      	ands	r2, r3
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	609a      	str	r2, [r3, #8]
    }

    position++;
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	3301      	adds	r3, #1
 80057da:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 80057dc:	683a      	ldr	r2, [r7, #0]
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	fa22 f303 	lsr.w	r3, r2, r3
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	f47f af25 	bne.w	8005634 <HAL_GPIO_DeInit+0x14>
  }
}
 80057ea:	bf00      	nop
 80057ec:	bf00      	nop
 80057ee:	371c      	adds	r7, #28
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr
 80057f8:	58000080 	.word	0x58000080
 80057fc:	58000400 	.word	0x58000400
 8005800:	58020000 	.word	0x58020000
 8005804:	58020400 	.word	0x58020400
 8005808:	58020800 	.word	0x58020800
 800580c:	58020c00 	.word	0x58020c00
 8005810:	58021000 	.word	0x58021000
 8005814:	58021400 	.word	0x58021400
 8005818:	58021800 	.word	0x58021800
 800581c:	58021c00 	.word	0x58021c00
 8005820:	58022400 	.word	0x58022400

08005824 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b084      	sub	sp, #16
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800582c:	4b29      	ldr	r3, [pc, #164]	; (80058d4 <HAL_PWREx_ConfigSupply+0xb0>)
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	f003 0307 	and.w	r3, r3, #7
 8005834:	2b06      	cmp	r3, #6
 8005836:	d00a      	beq.n	800584e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005838:	4b26      	ldr	r3, [pc, #152]	; (80058d4 <HAL_PWREx_ConfigSupply+0xb0>)
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	429a      	cmp	r2, r3
 8005844:	d001      	beq.n	800584a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	e03f      	b.n	80058ca <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800584a:	2300      	movs	r3, #0
 800584c:	e03d      	b.n	80058ca <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800584e:	4b21      	ldr	r3, [pc, #132]	; (80058d4 <HAL_PWREx_ConfigSupply+0xb0>)
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8005856:	491f      	ldr	r1, [pc, #124]	; (80058d4 <HAL_PWREx_ConfigSupply+0xb0>)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4313      	orrs	r3, r2
 800585c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800585e:	f7fc fce3 	bl	8002228 <HAL_GetTick>
 8005862:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005864:	e009      	b.n	800587a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005866:	f7fc fcdf 	bl	8002228 <HAL_GetTick>
 800586a:	4602      	mov	r2, r0
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	1ad3      	subs	r3, r2, r3
 8005870:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005874:	d901      	bls.n	800587a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	e027      	b.n	80058ca <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800587a:	4b16      	ldr	r3, [pc, #88]	; (80058d4 <HAL_PWREx_ConfigSupply+0xb0>)
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005882:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005886:	d1ee      	bne.n	8005866 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2b1e      	cmp	r3, #30
 800588c:	d008      	beq.n	80058a0 <HAL_PWREx_ConfigSupply+0x7c>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2b2e      	cmp	r3, #46	; 0x2e
 8005892:	d005      	beq.n	80058a0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2b1d      	cmp	r3, #29
 8005898:	d002      	beq.n	80058a0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2b2d      	cmp	r3, #45	; 0x2d
 800589e:	d113      	bne.n	80058c8 <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80058a0:	f7fc fcc2 	bl	8002228 <HAL_GetTick>
 80058a4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80058a6:	e009      	b.n	80058bc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80058a8:	f7fc fcbe 	bl	8002228 <HAL_GetTick>
 80058ac:	4602      	mov	r2, r0
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	1ad3      	subs	r3, r2, r3
 80058b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80058b6:	d901      	bls.n	80058bc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	e006      	b.n	80058ca <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80058bc:	4b05      	ldr	r3, [pc, #20]	; (80058d4 <HAL_PWREx_ConfigSupply+0xb0>)
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	f003 0311 	and.w	r3, r3, #17
 80058c4:	2b11      	cmp	r3, #17
 80058c6:	d1ef      	bne.n	80058a8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80058c8:	2300      	movs	r3, #0
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3710      	adds	r7, #16
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}
 80058d2:	bf00      	nop
 80058d4:	58024800 	.word	0x58024800

080058d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b08c      	sub	sp, #48	; 0x30
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d101      	bne.n	80058ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e397      	b.n	800601a <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 0301 	and.w	r3, r3, #1
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	f000 8087 	beq.w	8005a06 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058f8:	4b9e      	ldr	r3, [pc, #632]	; (8005b74 <HAL_RCC_OscConfig+0x29c>)
 80058fa:	691b      	ldr	r3, [r3, #16]
 80058fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005900:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005902:	4b9c      	ldr	r3, [pc, #624]	; (8005b74 <HAL_RCC_OscConfig+0x29c>)
 8005904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005906:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800590a:	2b10      	cmp	r3, #16
 800590c:	d007      	beq.n	800591e <HAL_RCC_OscConfig+0x46>
 800590e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005910:	2b18      	cmp	r3, #24
 8005912:	d110      	bne.n	8005936 <HAL_RCC_OscConfig+0x5e>
 8005914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005916:	f003 0303 	and.w	r3, r3, #3
 800591a:	2b02      	cmp	r3, #2
 800591c:	d10b      	bne.n	8005936 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800591e:	4b95      	ldr	r3, [pc, #596]	; (8005b74 <HAL_RCC_OscConfig+0x29c>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005926:	2b00      	cmp	r3, #0
 8005928:	d06c      	beq.n	8005a04 <HAL_RCC_OscConfig+0x12c>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d168      	bne.n	8005a04 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	e371      	b.n	800601a <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800593e:	d106      	bne.n	800594e <HAL_RCC_OscConfig+0x76>
 8005940:	4b8c      	ldr	r3, [pc, #560]	; (8005b74 <HAL_RCC_OscConfig+0x29c>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a8b      	ldr	r2, [pc, #556]	; (8005b74 <HAL_RCC_OscConfig+0x29c>)
 8005946:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800594a:	6013      	str	r3, [r2, #0]
 800594c:	e02e      	b.n	80059ac <HAL_RCC_OscConfig+0xd4>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d10c      	bne.n	8005970 <HAL_RCC_OscConfig+0x98>
 8005956:	4b87      	ldr	r3, [pc, #540]	; (8005b74 <HAL_RCC_OscConfig+0x29c>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a86      	ldr	r2, [pc, #536]	; (8005b74 <HAL_RCC_OscConfig+0x29c>)
 800595c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005960:	6013      	str	r3, [r2, #0]
 8005962:	4b84      	ldr	r3, [pc, #528]	; (8005b74 <HAL_RCC_OscConfig+0x29c>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a83      	ldr	r2, [pc, #524]	; (8005b74 <HAL_RCC_OscConfig+0x29c>)
 8005968:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800596c:	6013      	str	r3, [r2, #0]
 800596e:	e01d      	b.n	80059ac <HAL_RCC_OscConfig+0xd4>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005978:	d10c      	bne.n	8005994 <HAL_RCC_OscConfig+0xbc>
 800597a:	4b7e      	ldr	r3, [pc, #504]	; (8005b74 <HAL_RCC_OscConfig+0x29c>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a7d      	ldr	r2, [pc, #500]	; (8005b74 <HAL_RCC_OscConfig+0x29c>)
 8005980:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005984:	6013      	str	r3, [r2, #0]
 8005986:	4b7b      	ldr	r3, [pc, #492]	; (8005b74 <HAL_RCC_OscConfig+0x29c>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a7a      	ldr	r2, [pc, #488]	; (8005b74 <HAL_RCC_OscConfig+0x29c>)
 800598c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005990:	6013      	str	r3, [r2, #0]
 8005992:	e00b      	b.n	80059ac <HAL_RCC_OscConfig+0xd4>
 8005994:	4b77      	ldr	r3, [pc, #476]	; (8005b74 <HAL_RCC_OscConfig+0x29c>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a76      	ldr	r2, [pc, #472]	; (8005b74 <HAL_RCC_OscConfig+0x29c>)
 800599a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800599e:	6013      	str	r3, [r2, #0]
 80059a0:	4b74      	ldr	r3, [pc, #464]	; (8005b74 <HAL_RCC_OscConfig+0x29c>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a73      	ldr	r2, [pc, #460]	; (8005b74 <HAL_RCC_OscConfig+0x29c>)
 80059a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d013      	beq.n	80059dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059b4:	f7fc fc38 	bl	8002228 <HAL_GetTick>
 80059b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80059ba:	e008      	b.n	80059ce <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80059bc:	f7fc fc34 	bl	8002228 <HAL_GetTick>
 80059c0:	4602      	mov	r2, r0
 80059c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c4:	1ad3      	subs	r3, r2, r3
 80059c6:	2b64      	cmp	r3, #100	; 0x64
 80059c8:	d901      	bls.n	80059ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80059ca:	2303      	movs	r3, #3
 80059cc:	e325      	b.n	800601a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80059ce:	4b69      	ldr	r3, [pc, #420]	; (8005b74 <HAL_RCC_OscConfig+0x29c>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d0f0      	beq.n	80059bc <HAL_RCC_OscConfig+0xe4>
 80059da:	e014      	b.n	8005a06 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059dc:	f7fc fc24 	bl	8002228 <HAL_GetTick>
 80059e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80059e2:	e008      	b.n	80059f6 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80059e4:	f7fc fc20 	bl	8002228 <HAL_GetTick>
 80059e8:	4602      	mov	r2, r0
 80059ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ec:	1ad3      	subs	r3, r2, r3
 80059ee:	2b64      	cmp	r3, #100	; 0x64
 80059f0:	d901      	bls.n	80059f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80059f2:	2303      	movs	r3, #3
 80059f4:	e311      	b.n	800601a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80059f6:	4b5f      	ldr	r3, [pc, #380]	; (8005b74 <HAL_RCC_OscConfig+0x29c>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d1f0      	bne.n	80059e4 <HAL_RCC_OscConfig+0x10c>
 8005a02:	e000      	b.n	8005a06 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f003 0302 	and.w	r3, r3, #2
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	f000 808a 	beq.w	8005b28 <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a14:	4b57      	ldr	r3, [pc, #348]	; (8005b74 <HAL_RCC_OscConfig+0x29c>)
 8005a16:	691b      	ldr	r3, [r3, #16]
 8005a18:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a1c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005a1e:	4b55      	ldr	r3, [pc, #340]	; (8005b74 <HAL_RCC_OscConfig+0x29c>)
 8005a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a22:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005a24:	6a3b      	ldr	r3, [r7, #32]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d007      	beq.n	8005a3a <HAL_RCC_OscConfig+0x162>
 8005a2a:	6a3b      	ldr	r3, [r7, #32]
 8005a2c:	2b18      	cmp	r3, #24
 8005a2e:	d137      	bne.n	8005aa0 <HAL_RCC_OscConfig+0x1c8>
 8005a30:	69fb      	ldr	r3, [r7, #28]
 8005a32:	f003 0303 	and.w	r3, r3, #3
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d132      	bne.n	8005aa0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a3a:	4b4e      	ldr	r3, [pc, #312]	; (8005b74 <HAL_RCC_OscConfig+0x29c>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 0304 	and.w	r3, r3, #4
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d005      	beq.n	8005a52 <HAL_RCC_OscConfig+0x17a>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d101      	bne.n	8005a52 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e2e3      	b.n	800601a <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005a52:	4b48      	ldr	r3, [pc, #288]	; (8005b74 <HAL_RCC_OscConfig+0x29c>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f023 0219 	bic.w	r2, r3, #25
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	4945      	ldr	r1, [pc, #276]	; (8005b74 <HAL_RCC_OscConfig+0x29c>)
 8005a60:	4313      	orrs	r3, r2
 8005a62:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005a64:	f7fc fbe0 	bl	8002228 <HAL_GetTick>
 8005a68:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005a6a:	e008      	b.n	8005a7e <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a6c:	f7fc fbdc 	bl	8002228 <HAL_GetTick>
 8005a70:	4602      	mov	r2, r0
 8005a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a74:	1ad3      	subs	r3, r2, r3
 8005a76:	2b02      	cmp	r3, #2
 8005a78:	d901      	bls.n	8005a7e <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8005a7a:	2303      	movs	r3, #3
 8005a7c:	e2cd      	b.n	800601a <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005a7e:	4b3d      	ldr	r3, [pc, #244]	; (8005b74 <HAL_RCC_OscConfig+0x29c>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f003 0304 	and.w	r3, r3, #4
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d0f0      	beq.n	8005a6c <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a8a:	4b3a      	ldr	r3, [pc, #232]	; (8005b74 <HAL_RCC_OscConfig+0x29c>)
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	061b      	lsls	r3, r3, #24
 8005a98:	4936      	ldr	r1, [pc, #216]	; (8005b74 <HAL_RCC_OscConfig+0x29c>)
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a9e:	e043      	b.n	8005b28 <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d026      	beq.n	8005af6 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005aa8:	4b32      	ldr	r3, [pc, #200]	; (8005b74 <HAL_RCC_OscConfig+0x29c>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f023 0219 	bic.w	r2, r3, #25
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	492f      	ldr	r1, [pc, #188]	; (8005b74 <HAL_RCC_OscConfig+0x29c>)
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aba:	f7fc fbb5 	bl	8002228 <HAL_GetTick>
 8005abe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ac0:	e008      	b.n	8005ad4 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ac2:	f7fc fbb1 	bl	8002228 <HAL_GetTick>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aca:	1ad3      	subs	r3, r2, r3
 8005acc:	2b02      	cmp	r3, #2
 8005ace:	d901      	bls.n	8005ad4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005ad0:	2303      	movs	r3, #3
 8005ad2:	e2a2      	b.n	800601a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ad4:	4b27      	ldr	r3, [pc, #156]	; (8005b74 <HAL_RCC_OscConfig+0x29c>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 0304 	and.w	r3, r3, #4
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d0f0      	beq.n	8005ac2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ae0:	4b24      	ldr	r3, [pc, #144]	; (8005b74 <HAL_RCC_OscConfig+0x29c>)
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	691b      	ldr	r3, [r3, #16]
 8005aec:	061b      	lsls	r3, r3, #24
 8005aee:	4921      	ldr	r1, [pc, #132]	; (8005b74 <HAL_RCC_OscConfig+0x29c>)
 8005af0:	4313      	orrs	r3, r2
 8005af2:	604b      	str	r3, [r1, #4]
 8005af4:	e018      	b.n	8005b28 <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005af6:	4b1f      	ldr	r3, [pc, #124]	; (8005b74 <HAL_RCC_OscConfig+0x29c>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a1e      	ldr	r2, [pc, #120]	; (8005b74 <HAL_RCC_OscConfig+0x29c>)
 8005afc:	f023 0301 	bic.w	r3, r3, #1
 8005b00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b02:	f7fc fb91 	bl	8002228 <HAL_GetTick>
 8005b06:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005b08:	e008      	b.n	8005b1c <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b0a:	f7fc fb8d 	bl	8002228 <HAL_GetTick>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b12:	1ad3      	subs	r3, r2, r3
 8005b14:	2b02      	cmp	r3, #2
 8005b16:	d901      	bls.n	8005b1c <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 8005b18:	2303      	movs	r3, #3
 8005b1a:	e27e      	b.n	800601a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005b1c:	4b15      	ldr	r3, [pc, #84]	; (8005b74 <HAL_RCC_OscConfig+0x29c>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 0304 	and.w	r3, r3, #4
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d1f0      	bne.n	8005b0a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f003 0310 	and.w	r3, r3, #16
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d06d      	beq.n	8005c10 <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b34:	4b0f      	ldr	r3, [pc, #60]	; (8005b74 <HAL_RCC_OscConfig+0x29c>)
 8005b36:	691b      	ldr	r3, [r3, #16]
 8005b38:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b3c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005b3e:	4b0d      	ldr	r3, [pc, #52]	; (8005b74 <HAL_RCC_OscConfig+0x29c>)
 8005b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b42:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005b44:	69bb      	ldr	r3, [r7, #24]
 8005b46:	2b08      	cmp	r3, #8
 8005b48:	d007      	beq.n	8005b5a <HAL_RCC_OscConfig+0x282>
 8005b4a:	69bb      	ldr	r3, [r7, #24]
 8005b4c:	2b18      	cmp	r3, #24
 8005b4e:	d11e      	bne.n	8005b8e <HAL_RCC_OscConfig+0x2b6>
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	f003 0303 	and.w	r3, r3, #3
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d119      	bne.n	8005b8e <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005b5a:	4b06      	ldr	r3, [pc, #24]	; (8005b74 <HAL_RCC_OscConfig+0x29c>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d008      	beq.n	8005b78 <HAL_RCC_OscConfig+0x2a0>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	69db      	ldr	r3, [r3, #28]
 8005b6a:	2b80      	cmp	r3, #128	; 0x80
 8005b6c:	d004      	beq.n	8005b78 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e253      	b.n	800601a <HAL_RCC_OscConfig+0x742>
 8005b72:	bf00      	nop
 8005b74:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005b78:	4ba3      	ldr	r3, [pc, #652]	; (8005e08 <HAL_RCC_OscConfig+0x530>)
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6a1b      	ldr	r3, [r3, #32]
 8005b84:	061b      	lsls	r3, r3, #24
 8005b86:	49a0      	ldr	r1, [pc, #640]	; (8005e08 <HAL_RCC_OscConfig+0x530>)
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005b8c:	e040      	b.n	8005c10 <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	69db      	ldr	r3, [r3, #28]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d023      	beq.n	8005bde <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005b96:	4b9c      	ldr	r3, [pc, #624]	; (8005e08 <HAL_RCC_OscConfig+0x530>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a9b      	ldr	r2, [pc, #620]	; (8005e08 <HAL_RCC_OscConfig+0x530>)
 8005b9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ba0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ba2:	f7fc fb41 	bl	8002228 <HAL_GetTick>
 8005ba6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005ba8:	e008      	b.n	8005bbc <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005baa:	f7fc fb3d 	bl	8002228 <HAL_GetTick>
 8005bae:	4602      	mov	r2, r0
 8005bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb2:	1ad3      	subs	r3, r2, r3
 8005bb4:	2b02      	cmp	r3, #2
 8005bb6:	d901      	bls.n	8005bbc <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 8005bb8:	2303      	movs	r3, #3
 8005bba:	e22e      	b.n	800601a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005bbc:	4b92      	ldr	r3, [pc, #584]	; (8005e08 <HAL_RCC_OscConfig+0x530>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d0f0      	beq.n	8005baa <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005bc8:	4b8f      	ldr	r3, [pc, #572]	; (8005e08 <HAL_RCC_OscConfig+0x530>)
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6a1b      	ldr	r3, [r3, #32]
 8005bd4:	061b      	lsls	r3, r3, #24
 8005bd6:	498c      	ldr	r1, [pc, #560]	; (8005e08 <HAL_RCC_OscConfig+0x530>)
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	60cb      	str	r3, [r1, #12]
 8005bdc:	e018      	b.n	8005c10 <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005bde:	4b8a      	ldr	r3, [pc, #552]	; (8005e08 <HAL_RCC_OscConfig+0x530>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a89      	ldr	r2, [pc, #548]	; (8005e08 <HAL_RCC_OscConfig+0x530>)
 8005be4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005be8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bea:	f7fc fb1d 	bl	8002228 <HAL_GetTick>
 8005bee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005bf0:	e008      	b.n	8005c04 <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005bf2:	f7fc fb19 	bl	8002228 <HAL_GetTick>
 8005bf6:	4602      	mov	r2, r0
 8005bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfa:	1ad3      	subs	r3, r2, r3
 8005bfc:	2b02      	cmp	r3, #2
 8005bfe:	d901      	bls.n	8005c04 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8005c00:	2303      	movs	r3, #3
 8005c02:	e20a      	b.n	800601a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005c04:	4b80      	ldr	r3, [pc, #512]	; (8005e08 <HAL_RCC_OscConfig+0x530>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d1f0      	bne.n	8005bf2 <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f003 0308 	and.w	r3, r3, #8
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d036      	beq.n	8005c8a <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	695b      	ldr	r3, [r3, #20]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d019      	beq.n	8005c58 <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c24:	4b78      	ldr	r3, [pc, #480]	; (8005e08 <HAL_RCC_OscConfig+0x530>)
 8005c26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c28:	4a77      	ldr	r2, [pc, #476]	; (8005e08 <HAL_RCC_OscConfig+0x530>)
 8005c2a:	f043 0301 	orr.w	r3, r3, #1
 8005c2e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c30:	f7fc fafa 	bl	8002228 <HAL_GetTick>
 8005c34:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005c36:	e008      	b.n	8005c4a <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c38:	f7fc faf6 	bl	8002228 <HAL_GetTick>
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c40:	1ad3      	subs	r3, r2, r3
 8005c42:	2b02      	cmp	r3, #2
 8005c44:	d901      	bls.n	8005c4a <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 8005c46:	2303      	movs	r3, #3
 8005c48:	e1e7      	b.n	800601a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005c4a:	4b6f      	ldr	r3, [pc, #444]	; (8005e08 <HAL_RCC_OscConfig+0x530>)
 8005c4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c4e:	f003 0302 	and.w	r3, r3, #2
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d0f0      	beq.n	8005c38 <HAL_RCC_OscConfig+0x360>
 8005c56:	e018      	b.n	8005c8a <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c58:	4b6b      	ldr	r3, [pc, #428]	; (8005e08 <HAL_RCC_OscConfig+0x530>)
 8005c5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c5c:	4a6a      	ldr	r2, [pc, #424]	; (8005e08 <HAL_RCC_OscConfig+0x530>)
 8005c5e:	f023 0301 	bic.w	r3, r3, #1
 8005c62:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c64:	f7fc fae0 	bl	8002228 <HAL_GetTick>
 8005c68:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005c6a:	e008      	b.n	8005c7e <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c6c:	f7fc fadc 	bl	8002228 <HAL_GetTick>
 8005c70:	4602      	mov	r2, r0
 8005c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c74:	1ad3      	subs	r3, r2, r3
 8005c76:	2b02      	cmp	r3, #2
 8005c78:	d901      	bls.n	8005c7e <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8005c7a:	2303      	movs	r3, #3
 8005c7c:	e1cd      	b.n	800601a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005c7e:	4b62      	ldr	r3, [pc, #392]	; (8005e08 <HAL_RCC_OscConfig+0x530>)
 8005c80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c82:	f003 0302 	and.w	r3, r3, #2
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d1f0      	bne.n	8005c6c <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f003 0320 	and.w	r3, r3, #32
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d036      	beq.n	8005d04 <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	699b      	ldr	r3, [r3, #24]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d019      	beq.n	8005cd2 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005c9e:	4b5a      	ldr	r3, [pc, #360]	; (8005e08 <HAL_RCC_OscConfig+0x530>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a59      	ldr	r2, [pc, #356]	; (8005e08 <HAL_RCC_OscConfig+0x530>)
 8005ca4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005ca8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005caa:	f7fc fabd 	bl	8002228 <HAL_GetTick>
 8005cae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005cb0:	e008      	b.n	8005cc4 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005cb2:	f7fc fab9 	bl	8002228 <HAL_GetTick>
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cba:	1ad3      	subs	r3, r2, r3
 8005cbc:	2b02      	cmp	r3, #2
 8005cbe:	d901      	bls.n	8005cc4 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8005cc0:	2303      	movs	r3, #3
 8005cc2:	e1aa      	b.n	800601a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005cc4:	4b50      	ldr	r3, [pc, #320]	; (8005e08 <HAL_RCC_OscConfig+0x530>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d0f0      	beq.n	8005cb2 <HAL_RCC_OscConfig+0x3da>
 8005cd0:	e018      	b.n	8005d04 <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005cd2:	4b4d      	ldr	r3, [pc, #308]	; (8005e08 <HAL_RCC_OscConfig+0x530>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a4c      	ldr	r2, [pc, #304]	; (8005e08 <HAL_RCC_OscConfig+0x530>)
 8005cd8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005cdc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005cde:	f7fc faa3 	bl	8002228 <HAL_GetTick>
 8005ce2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005ce4:	e008      	b.n	8005cf8 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005ce6:	f7fc fa9f 	bl	8002228 <HAL_GetTick>
 8005cea:	4602      	mov	r2, r0
 8005cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cee:	1ad3      	subs	r3, r2, r3
 8005cf0:	2b02      	cmp	r3, #2
 8005cf2:	d901      	bls.n	8005cf8 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 8005cf4:	2303      	movs	r3, #3
 8005cf6:	e190      	b.n	800601a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005cf8:	4b43      	ldr	r3, [pc, #268]	; (8005e08 <HAL_RCC_OscConfig+0x530>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d1f0      	bne.n	8005ce6 <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f003 0304 	and.w	r3, r3, #4
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	f000 8085 	beq.w	8005e1c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005d12:	4b3e      	ldr	r3, [pc, #248]	; (8005e0c <HAL_RCC_OscConfig+0x534>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a3d      	ldr	r2, [pc, #244]	; (8005e0c <HAL_RCC_OscConfig+0x534>)
 8005d18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d1c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005d1e:	f7fc fa83 	bl	8002228 <HAL_GetTick>
 8005d22:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d24:	e008      	b.n	8005d38 <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005d26:	f7fc fa7f 	bl	8002228 <HAL_GetTick>
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2e:	1ad3      	subs	r3, r2, r3
 8005d30:	2b64      	cmp	r3, #100	; 0x64
 8005d32:	d901      	bls.n	8005d38 <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 8005d34:	2303      	movs	r3, #3
 8005d36:	e170      	b.n	800601a <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d38:	4b34      	ldr	r3, [pc, #208]	; (8005e0c <HAL_RCC_OscConfig+0x534>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d0f0      	beq.n	8005d26 <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d106      	bne.n	8005d5a <HAL_RCC_OscConfig+0x482>
 8005d4c:	4b2e      	ldr	r3, [pc, #184]	; (8005e08 <HAL_RCC_OscConfig+0x530>)
 8005d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d50:	4a2d      	ldr	r2, [pc, #180]	; (8005e08 <HAL_RCC_OscConfig+0x530>)
 8005d52:	f043 0301 	orr.w	r3, r3, #1
 8005d56:	6713      	str	r3, [r2, #112]	; 0x70
 8005d58:	e02d      	b.n	8005db6 <HAL_RCC_OscConfig+0x4de>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d10c      	bne.n	8005d7c <HAL_RCC_OscConfig+0x4a4>
 8005d62:	4b29      	ldr	r3, [pc, #164]	; (8005e08 <HAL_RCC_OscConfig+0x530>)
 8005d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d66:	4a28      	ldr	r2, [pc, #160]	; (8005e08 <HAL_RCC_OscConfig+0x530>)
 8005d68:	f023 0301 	bic.w	r3, r3, #1
 8005d6c:	6713      	str	r3, [r2, #112]	; 0x70
 8005d6e:	4b26      	ldr	r3, [pc, #152]	; (8005e08 <HAL_RCC_OscConfig+0x530>)
 8005d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d72:	4a25      	ldr	r2, [pc, #148]	; (8005e08 <HAL_RCC_OscConfig+0x530>)
 8005d74:	f023 0304 	bic.w	r3, r3, #4
 8005d78:	6713      	str	r3, [r2, #112]	; 0x70
 8005d7a:	e01c      	b.n	8005db6 <HAL_RCC_OscConfig+0x4de>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	2b05      	cmp	r3, #5
 8005d82:	d10c      	bne.n	8005d9e <HAL_RCC_OscConfig+0x4c6>
 8005d84:	4b20      	ldr	r3, [pc, #128]	; (8005e08 <HAL_RCC_OscConfig+0x530>)
 8005d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d88:	4a1f      	ldr	r2, [pc, #124]	; (8005e08 <HAL_RCC_OscConfig+0x530>)
 8005d8a:	f043 0304 	orr.w	r3, r3, #4
 8005d8e:	6713      	str	r3, [r2, #112]	; 0x70
 8005d90:	4b1d      	ldr	r3, [pc, #116]	; (8005e08 <HAL_RCC_OscConfig+0x530>)
 8005d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d94:	4a1c      	ldr	r2, [pc, #112]	; (8005e08 <HAL_RCC_OscConfig+0x530>)
 8005d96:	f043 0301 	orr.w	r3, r3, #1
 8005d9a:	6713      	str	r3, [r2, #112]	; 0x70
 8005d9c:	e00b      	b.n	8005db6 <HAL_RCC_OscConfig+0x4de>
 8005d9e:	4b1a      	ldr	r3, [pc, #104]	; (8005e08 <HAL_RCC_OscConfig+0x530>)
 8005da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005da2:	4a19      	ldr	r2, [pc, #100]	; (8005e08 <HAL_RCC_OscConfig+0x530>)
 8005da4:	f023 0301 	bic.w	r3, r3, #1
 8005da8:	6713      	str	r3, [r2, #112]	; 0x70
 8005daa:	4b17      	ldr	r3, [pc, #92]	; (8005e08 <HAL_RCC_OscConfig+0x530>)
 8005dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dae:	4a16      	ldr	r2, [pc, #88]	; (8005e08 <HAL_RCC_OscConfig+0x530>)
 8005db0:	f023 0304 	bic.w	r3, r3, #4
 8005db4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d015      	beq.n	8005dea <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dbe:	f7fc fa33 	bl	8002228 <HAL_GetTick>
 8005dc2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005dc4:	e00a      	b.n	8005ddc <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005dc6:	f7fc fa2f 	bl	8002228 <HAL_GetTick>
 8005dca:	4602      	mov	r2, r0
 8005dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dce:	1ad3      	subs	r3, r2, r3
 8005dd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d901      	bls.n	8005ddc <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8005dd8:	2303      	movs	r3, #3
 8005dda:	e11e      	b.n	800601a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ddc:	4b0a      	ldr	r3, [pc, #40]	; (8005e08 <HAL_RCC_OscConfig+0x530>)
 8005dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005de0:	f003 0302 	and.w	r3, r3, #2
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d0ee      	beq.n	8005dc6 <HAL_RCC_OscConfig+0x4ee>
 8005de8:	e018      	b.n	8005e1c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dea:	f7fc fa1d 	bl	8002228 <HAL_GetTick>
 8005dee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005df0:	e00e      	b.n	8005e10 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005df2:	f7fc fa19 	bl	8002228 <HAL_GetTick>
 8005df6:	4602      	mov	r2, r0
 8005df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfa:	1ad3      	subs	r3, r2, r3
 8005dfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d905      	bls.n	8005e10 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8005e04:	2303      	movs	r3, #3
 8005e06:	e108      	b.n	800601a <HAL_RCC_OscConfig+0x742>
 8005e08:	58024400 	.word	0x58024400
 8005e0c:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005e10:	4b84      	ldr	r3, [pc, #528]	; (8006024 <HAL_RCC_OscConfig+0x74c>)
 8005e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e14:	f003 0302 	and.w	r3, r3, #2
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d1ea      	bne.n	8005df2 <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	f000 80f9 	beq.w	8006018 <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005e26:	4b7f      	ldr	r3, [pc, #508]	; (8006024 <HAL_RCC_OscConfig+0x74c>)
 8005e28:	691b      	ldr	r3, [r3, #16]
 8005e2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e2e:	2b18      	cmp	r3, #24
 8005e30:	f000 80b4 	beq.w	8005f9c <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e38:	2b02      	cmp	r3, #2
 8005e3a:	f040 8095 	bne.w	8005f68 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e3e:	4b79      	ldr	r3, [pc, #484]	; (8006024 <HAL_RCC_OscConfig+0x74c>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a78      	ldr	r2, [pc, #480]	; (8006024 <HAL_RCC_OscConfig+0x74c>)
 8005e44:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e4a:	f7fc f9ed 	bl	8002228 <HAL_GetTick>
 8005e4e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005e50:	e008      	b.n	8005e64 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e52:	f7fc f9e9 	bl	8002228 <HAL_GetTick>
 8005e56:	4602      	mov	r2, r0
 8005e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5a:	1ad3      	subs	r3, r2, r3
 8005e5c:	2b02      	cmp	r3, #2
 8005e5e:	d901      	bls.n	8005e64 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8005e60:	2303      	movs	r3, #3
 8005e62:	e0da      	b.n	800601a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005e64:	4b6f      	ldr	r3, [pc, #444]	; (8006024 <HAL_RCC_OscConfig+0x74c>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d1f0      	bne.n	8005e52 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e70:	4b6c      	ldr	r3, [pc, #432]	; (8006024 <HAL_RCC_OscConfig+0x74c>)
 8005e72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e74:	4b6c      	ldr	r3, [pc, #432]	; (8006028 <HAL_RCC_OscConfig+0x750>)
 8005e76:	4013      	ands	r3, r2
 8005e78:	687a      	ldr	r2, [r7, #4]
 8005e7a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005e7c:	687a      	ldr	r2, [r7, #4]
 8005e7e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005e80:	0112      	lsls	r2, r2, #4
 8005e82:	430a      	orrs	r2, r1
 8005e84:	4967      	ldr	r1, [pc, #412]	; (8006024 <HAL_RCC_OscConfig+0x74c>)
 8005e86:	4313      	orrs	r3, r2
 8005e88:	628b      	str	r3, [r1, #40]	; 0x28
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e8e:	3b01      	subs	r3, #1
 8005e90:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e98:	3b01      	subs	r3, #1
 8005e9a:	025b      	lsls	r3, r3, #9
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	431a      	orrs	r2, r3
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ea4:	3b01      	subs	r3, #1
 8005ea6:	041b      	lsls	r3, r3, #16
 8005ea8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005eac:	431a      	orrs	r2, r3
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eb2:	3b01      	subs	r3, #1
 8005eb4:	061b      	lsls	r3, r3, #24
 8005eb6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005eba:	495a      	ldr	r1, [pc, #360]	; (8006024 <HAL_RCC_OscConfig+0x74c>)
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005ec0:	4b58      	ldr	r3, [pc, #352]	; (8006024 <HAL_RCC_OscConfig+0x74c>)
 8005ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec4:	4a57      	ldr	r2, [pc, #348]	; (8006024 <HAL_RCC_OscConfig+0x74c>)
 8005ec6:	f023 0301 	bic.w	r3, r3, #1
 8005eca:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005ecc:	4b55      	ldr	r3, [pc, #340]	; (8006024 <HAL_RCC_OscConfig+0x74c>)
 8005ece:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ed0:	4b56      	ldr	r3, [pc, #344]	; (800602c <HAL_RCC_OscConfig+0x754>)
 8005ed2:	4013      	ands	r3, r2
 8005ed4:	687a      	ldr	r2, [r7, #4]
 8005ed6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005ed8:	00d2      	lsls	r2, r2, #3
 8005eda:	4952      	ldr	r1, [pc, #328]	; (8006024 <HAL_RCC_OscConfig+0x74c>)
 8005edc:	4313      	orrs	r3, r2
 8005ede:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005ee0:	4b50      	ldr	r3, [pc, #320]	; (8006024 <HAL_RCC_OscConfig+0x74c>)
 8005ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee4:	f023 020c 	bic.w	r2, r3, #12
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eec:	494d      	ldr	r1, [pc, #308]	; (8006024 <HAL_RCC_OscConfig+0x74c>)
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005ef2:	4b4c      	ldr	r3, [pc, #304]	; (8006024 <HAL_RCC_OscConfig+0x74c>)
 8005ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ef6:	f023 0202 	bic.w	r2, r3, #2
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005efe:	4949      	ldr	r1, [pc, #292]	; (8006024 <HAL_RCC_OscConfig+0x74c>)
 8005f00:	4313      	orrs	r3, r2
 8005f02:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005f04:	4b47      	ldr	r3, [pc, #284]	; (8006024 <HAL_RCC_OscConfig+0x74c>)
 8005f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f08:	4a46      	ldr	r2, [pc, #280]	; (8006024 <HAL_RCC_OscConfig+0x74c>)
 8005f0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f0e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f10:	4b44      	ldr	r3, [pc, #272]	; (8006024 <HAL_RCC_OscConfig+0x74c>)
 8005f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f14:	4a43      	ldr	r2, [pc, #268]	; (8006024 <HAL_RCC_OscConfig+0x74c>)
 8005f16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005f1c:	4b41      	ldr	r3, [pc, #260]	; (8006024 <HAL_RCC_OscConfig+0x74c>)
 8005f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f20:	4a40      	ldr	r2, [pc, #256]	; (8006024 <HAL_RCC_OscConfig+0x74c>)
 8005f22:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005f28:	4b3e      	ldr	r3, [pc, #248]	; (8006024 <HAL_RCC_OscConfig+0x74c>)
 8005f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f2c:	4a3d      	ldr	r2, [pc, #244]	; (8006024 <HAL_RCC_OscConfig+0x74c>)
 8005f2e:	f043 0301 	orr.w	r3, r3, #1
 8005f32:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f34:	4b3b      	ldr	r3, [pc, #236]	; (8006024 <HAL_RCC_OscConfig+0x74c>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a3a      	ldr	r2, [pc, #232]	; (8006024 <HAL_RCC_OscConfig+0x74c>)
 8005f3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f40:	f7fc f972 	bl	8002228 <HAL_GetTick>
 8005f44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005f46:	e008      	b.n	8005f5a <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f48:	f7fc f96e 	bl	8002228 <HAL_GetTick>
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f50:	1ad3      	subs	r3, r2, r3
 8005f52:	2b02      	cmp	r3, #2
 8005f54:	d901      	bls.n	8005f5a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8005f56:	2303      	movs	r3, #3
 8005f58:	e05f      	b.n	800601a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005f5a:	4b32      	ldr	r3, [pc, #200]	; (8006024 <HAL_RCC_OscConfig+0x74c>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d0f0      	beq.n	8005f48 <HAL_RCC_OscConfig+0x670>
 8005f66:	e057      	b.n	8006018 <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f68:	4b2e      	ldr	r3, [pc, #184]	; (8006024 <HAL_RCC_OscConfig+0x74c>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a2d      	ldr	r2, [pc, #180]	; (8006024 <HAL_RCC_OscConfig+0x74c>)
 8005f6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f74:	f7fc f958 	bl	8002228 <HAL_GetTick>
 8005f78:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005f7a:	e008      	b.n	8005f8e <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f7c:	f7fc f954 	bl	8002228 <HAL_GetTick>
 8005f80:	4602      	mov	r2, r0
 8005f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f84:	1ad3      	subs	r3, r2, r3
 8005f86:	2b02      	cmp	r3, #2
 8005f88:	d901      	bls.n	8005f8e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8005f8a:	2303      	movs	r3, #3
 8005f8c:	e045      	b.n	800601a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005f8e:	4b25      	ldr	r3, [pc, #148]	; (8006024 <HAL_RCC_OscConfig+0x74c>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d1f0      	bne.n	8005f7c <HAL_RCC_OscConfig+0x6a4>
 8005f9a:	e03d      	b.n	8006018 <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005f9c:	4b21      	ldr	r3, [pc, #132]	; (8006024 <HAL_RCC_OscConfig+0x74c>)
 8005f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fa0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005fa2:	4b20      	ldr	r3, [pc, #128]	; (8006024 <HAL_RCC_OscConfig+0x74c>)
 8005fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fa6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d031      	beq.n	8006014 <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	f003 0203 	and.w	r2, r3, #3
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d12a      	bne.n	8006014 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	091b      	lsrs	r3, r3, #4
 8005fc2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d122      	bne.n	8006014 <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fd8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d11a      	bne.n	8006014 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	0a5b      	lsrs	r3, r3, #9
 8005fe2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fea:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d111      	bne.n	8006014 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	0c1b      	lsrs	r3, r3, #16
 8005ff4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ffc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005ffe:	429a      	cmp	r2, r3
 8006000:	d108      	bne.n	8006014 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	0e1b      	lsrs	r3, r3, #24
 8006006:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800600e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006010:	429a      	cmp	r2, r3
 8006012:	d001      	beq.n	8006018 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 8006014:	2301      	movs	r3, #1
 8006016:	e000      	b.n	800601a <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 8006018:	2300      	movs	r3, #0
}
 800601a:	4618      	mov	r0, r3
 800601c:	3730      	adds	r7, #48	; 0x30
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}
 8006022:	bf00      	nop
 8006024:	58024400 	.word	0x58024400
 8006028:	fffffc0c 	.word	0xfffffc0c
 800602c:	ffff0007 	.word	0xffff0007

08006030 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b086      	sub	sp, #24
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d101      	bne.n	8006044 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006040:	2301      	movs	r3, #1
 8006042:	e19c      	b.n	800637e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006044:	4b8a      	ldr	r3, [pc, #552]	; (8006270 <HAL_RCC_ClockConfig+0x240>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f003 030f 	and.w	r3, r3, #15
 800604c:	683a      	ldr	r2, [r7, #0]
 800604e:	429a      	cmp	r2, r3
 8006050:	d910      	bls.n	8006074 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006052:	4b87      	ldr	r3, [pc, #540]	; (8006270 <HAL_RCC_ClockConfig+0x240>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f023 020f 	bic.w	r2, r3, #15
 800605a:	4985      	ldr	r1, [pc, #532]	; (8006270 <HAL_RCC_ClockConfig+0x240>)
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	4313      	orrs	r3, r2
 8006060:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006062:	4b83      	ldr	r3, [pc, #524]	; (8006270 <HAL_RCC_ClockConfig+0x240>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f003 030f 	and.w	r3, r3, #15
 800606a:	683a      	ldr	r2, [r7, #0]
 800606c:	429a      	cmp	r2, r3
 800606e:	d001      	beq.n	8006074 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	e184      	b.n	800637e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f003 0304 	and.w	r3, r3, #4
 800607c:	2b00      	cmp	r3, #0
 800607e:	d010      	beq.n	80060a2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	691a      	ldr	r2, [r3, #16]
 8006084:	4b7b      	ldr	r3, [pc, #492]	; (8006274 <HAL_RCC_ClockConfig+0x244>)
 8006086:	699b      	ldr	r3, [r3, #24]
 8006088:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800608c:	429a      	cmp	r2, r3
 800608e:	d908      	bls.n	80060a2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006090:	4b78      	ldr	r3, [pc, #480]	; (8006274 <HAL_RCC_ClockConfig+0x244>)
 8006092:	699b      	ldr	r3, [r3, #24]
 8006094:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	691b      	ldr	r3, [r3, #16]
 800609c:	4975      	ldr	r1, [pc, #468]	; (8006274 <HAL_RCC_ClockConfig+0x244>)
 800609e:	4313      	orrs	r3, r2
 80060a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f003 0308 	and.w	r3, r3, #8
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d010      	beq.n	80060d0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	695a      	ldr	r2, [r3, #20]
 80060b2:	4b70      	ldr	r3, [pc, #448]	; (8006274 <HAL_RCC_ClockConfig+0x244>)
 80060b4:	69db      	ldr	r3, [r3, #28]
 80060b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d908      	bls.n	80060d0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80060be:	4b6d      	ldr	r3, [pc, #436]	; (8006274 <HAL_RCC_ClockConfig+0x244>)
 80060c0:	69db      	ldr	r3, [r3, #28]
 80060c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	695b      	ldr	r3, [r3, #20]
 80060ca:	496a      	ldr	r1, [pc, #424]	; (8006274 <HAL_RCC_ClockConfig+0x244>)
 80060cc:	4313      	orrs	r3, r2
 80060ce:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 0310 	and.w	r3, r3, #16
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d010      	beq.n	80060fe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	699a      	ldr	r2, [r3, #24]
 80060e0:	4b64      	ldr	r3, [pc, #400]	; (8006274 <HAL_RCC_ClockConfig+0x244>)
 80060e2:	69db      	ldr	r3, [r3, #28]
 80060e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d908      	bls.n	80060fe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80060ec:	4b61      	ldr	r3, [pc, #388]	; (8006274 <HAL_RCC_ClockConfig+0x244>)
 80060ee:	69db      	ldr	r3, [r3, #28]
 80060f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	699b      	ldr	r3, [r3, #24]
 80060f8:	495e      	ldr	r1, [pc, #376]	; (8006274 <HAL_RCC_ClockConfig+0x244>)
 80060fa:	4313      	orrs	r3, r2
 80060fc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f003 0320 	and.w	r3, r3, #32
 8006106:	2b00      	cmp	r3, #0
 8006108:	d010      	beq.n	800612c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	69da      	ldr	r2, [r3, #28]
 800610e:	4b59      	ldr	r3, [pc, #356]	; (8006274 <HAL_RCC_ClockConfig+0x244>)
 8006110:	6a1b      	ldr	r3, [r3, #32]
 8006112:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006116:	429a      	cmp	r2, r3
 8006118:	d908      	bls.n	800612c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800611a:	4b56      	ldr	r3, [pc, #344]	; (8006274 <HAL_RCC_ClockConfig+0x244>)
 800611c:	6a1b      	ldr	r3, [r3, #32]
 800611e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	69db      	ldr	r3, [r3, #28]
 8006126:	4953      	ldr	r1, [pc, #332]	; (8006274 <HAL_RCC_ClockConfig+0x244>)
 8006128:	4313      	orrs	r3, r2
 800612a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f003 0302 	and.w	r3, r3, #2
 8006134:	2b00      	cmp	r3, #0
 8006136:	d010      	beq.n	800615a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	68da      	ldr	r2, [r3, #12]
 800613c:	4b4d      	ldr	r3, [pc, #308]	; (8006274 <HAL_RCC_ClockConfig+0x244>)
 800613e:	699b      	ldr	r3, [r3, #24]
 8006140:	f003 030f 	and.w	r3, r3, #15
 8006144:	429a      	cmp	r2, r3
 8006146:	d908      	bls.n	800615a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006148:	4b4a      	ldr	r3, [pc, #296]	; (8006274 <HAL_RCC_ClockConfig+0x244>)
 800614a:	699b      	ldr	r3, [r3, #24]
 800614c:	f023 020f 	bic.w	r2, r3, #15
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	68db      	ldr	r3, [r3, #12]
 8006154:	4947      	ldr	r1, [pc, #284]	; (8006274 <HAL_RCC_ClockConfig+0x244>)
 8006156:	4313      	orrs	r3, r2
 8006158:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f003 0301 	and.w	r3, r3, #1
 8006162:	2b00      	cmp	r3, #0
 8006164:	d055      	beq.n	8006212 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006166:	4b43      	ldr	r3, [pc, #268]	; (8006274 <HAL_RCC_ClockConfig+0x244>)
 8006168:	699b      	ldr	r3, [r3, #24]
 800616a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	4940      	ldr	r1, [pc, #256]	; (8006274 <HAL_RCC_ClockConfig+0x244>)
 8006174:	4313      	orrs	r3, r2
 8006176:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	2b02      	cmp	r3, #2
 800617e:	d107      	bne.n	8006190 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006180:	4b3c      	ldr	r3, [pc, #240]	; (8006274 <HAL_RCC_ClockConfig+0x244>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006188:	2b00      	cmp	r3, #0
 800618a:	d121      	bne.n	80061d0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	e0f6      	b.n	800637e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	2b03      	cmp	r3, #3
 8006196:	d107      	bne.n	80061a8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006198:	4b36      	ldr	r3, [pc, #216]	; (8006274 <HAL_RCC_ClockConfig+0x244>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d115      	bne.n	80061d0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80061a4:	2301      	movs	r3, #1
 80061a6:	e0ea      	b.n	800637e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d107      	bne.n	80061c0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80061b0:	4b30      	ldr	r3, [pc, #192]	; (8006274 <HAL_RCC_ClockConfig+0x244>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d109      	bne.n	80061d0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80061bc:	2301      	movs	r3, #1
 80061be:	e0de      	b.n	800637e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80061c0:	4b2c      	ldr	r3, [pc, #176]	; (8006274 <HAL_RCC_ClockConfig+0x244>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f003 0304 	and.w	r3, r3, #4
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d101      	bne.n	80061d0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	e0d6      	b.n	800637e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80061d0:	4b28      	ldr	r3, [pc, #160]	; (8006274 <HAL_RCC_ClockConfig+0x244>)
 80061d2:	691b      	ldr	r3, [r3, #16]
 80061d4:	f023 0207 	bic.w	r2, r3, #7
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	4925      	ldr	r1, [pc, #148]	; (8006274 <HAL_RCC_ClockConfig+0x244>)
 80061de:	4313      	orrs	r3, r2
 80061e0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061e2:	f7fc f821 	bl	8002228 <HAL_GetTick>
 80061e6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061e8:	e00a      	b.n	8006200 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061ea:	f7fc f81d 	bl	8002228 <HAL_GetTick>
 80061ee:	4602      	mov	r2, r0
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	1ad3      	subs	r3, r2, r3
 80061f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d901      	bls.n	8006200 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80061fc:	2303      	movs	r3, #3
 80061fe:	e0be      	b.n	800637e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006200:	4b1c      	ldr	r3, [pc, #112]	; (8006274 <HAL_RCC_ClockConfig+0x244>)
 8006202:	691b      	ldr	r3, [r3, #16]
 8006204:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	00db      	lsls	r3, r3, #3
 800620e:	429a      	cmp	r2, r3
 8006210:	d1eb      	bne.n	80061ea <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f003 0302 	and.w	r3, r3, #2
 800621a:	2b00      	cmp	r3, #0
 800621c:	d010      	beq.n	8006240 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	68da      	ldr	r2, [r3, #12]
 8006222:	4b14      	ldr	r3, [pc, #80]	; (8006274 <HAL_RCC_ClockConfig+0x244>)
 8006224:	699b      	ldr	r3, [r3, #24]
 8006226:	f003 030f 	and.w	r3, r3, #15
 800622a:	429a      	cmp	r2, r3
 800622c:	d208      	bcs.n	8006240 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800622e:	4b11      	ldr	r3, [pc, #68]	; (8006274 <HAL_RCC_ClockConfig+0x244>)
 8006230:	699b      	ldr	r3, [r3, #24]
 8006232:	f023 020f 	bic.w	r2, r3, #15
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	68db      	ldr	r3, [r3, #12]
 800623a:	490e      	ldr	r1, [pc, #56]	; (8006274 <HAL_RCC_ClockConfig+0x244>)
 800623c:	4313      	orrs	r3, r2
 800623e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006240:	4b0b      	ldr	r3, [pc, #44]	; (8006270 <HAL_RCC_ClockConfig+0x240>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f003 030f 	and.w	r3, r3, #15
 8006248:	683a      	ldr	r2, [r7, #0]
 800624a:	429a      	cmp	r2, r3
 800624c:	d214      	bcs.n	8006278 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800624e:	4b08      	ldr	r3, [pc, #32]	; (8006270 <HAL_RCC_ClockConfig+0x240>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f023 020f 	bic.w	r2, r3, #15
 8006256:	4906      	ldr	r1, [pc, #24]	; (8006270 <HAL_RCC_ClockConfig+0x240>)
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	4313      	orrs	r3, r2
 800625c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800625e:	4b04      	ldr	r3, [pc, #16]	; (8006270 <HAL_RCC_ClockConfig+0x240>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f003 030f 	and.w	r3, r3, #15
 8006266:	683a      	ldr	r2, [r7, #0]
 8006268:	429a      	cmp	r2, r3
 800626a:	d005      	beq.n	8006278 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800626c:	2301      	movs	r3, #1
 800626e:	e086      	b.n	800637e <HAL_RCC_ClockConfig+0x34e>
 8006270:	52002000 	.word	0x52002000
 8006274:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f003 0304 	and.w	r3, r3, #4
 8006280:	2b00      	cmp	r3, #0
 8006282:	d010      	beq.n	80062a6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	691a      	ldr	r2, [r3, #16]
 8006288:	4b3f      	ldr	r3, [pc, #252]	; (8006388 <HAL_RCC_ClockConfig+0x358>)
 800628a:	699b      	ldr	r3, [r3, #24]
 800628c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006290:	429a      	cmp	r2, r3
 8006292:	d208      	bcs.n	80062a6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006294:	4b3c      	ldr	r3, [pc, #240]	; (8006388 <HAL_RCC_ClockConfig+0x358>)
 8006296:	699b      	ldr	r3, [r3, #24]
 8006298:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	691b      	ldr	r3, [r3, #16]
 80062a0:	4939      	ldr	r1, [pc, #228]	; (8006388 <HAL_RCC_ClockConfig+0x358>)
 80062a2:	4313      	orrs	r3, r2
 80062a4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f003 0308 	and.w	r3, r3, #8
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d010      	beq.n	80062d4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	695a      	ldr	r2, [r3, #20]
 80062b6:	4b34      	ldr	r3, [pc, #208]	; (8006388 <HAL_RCC_ClockConfig+0x358>)
 80062b8:	69db      	ldr	r3, [r3, #28]
 80062ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80062be:	429a      	cmp	r2, r3
 80062c0:	d208      	bcs.n	80062d4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80062c2:	4b31      	ldr	r3, [pc, #196]	; (8006388 <HAL_RCC_ClockConfig+0x358>)
 80062c4:	69db      	ldr	r3, [r3, #28]
 80062c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	695b      	ldr	r3, [r3, #20]
 80062ce:	492e      	ldr	r1, [pc, #184]	; (8006388 <HAL_RCC_ClockConfig+0x358>)
 80062d0:	4313      	orrs	r3, r2
 80062d2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f003 0310 	and.w	r3, r3, #16
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d010      	beq.n	8006302 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	699a      	ldr	r2, [r3, #24]
 80062e4:	4b28      	ldr	r3, [pc, #160]	; (8006388 <HAL_RCC_ClockConfig+0x358>)
 80062e6:	69db      	ldr	r3, [r3, #28]
 80062e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d208      	bcs.n	8006302 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80062f0:	4b25      	ldr	r3, [pc, #148]	; (8006388 <HAL_RCC_ClockConfig+0x358>)
 80062f2:	69db      	ldr	r3, [r3, #28]
 80062f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	699b      	ldr	r3, [r3, #24]
 80062fc:	4922      	ldr	r1, [pc, #136]	; (8006388 <HAL_RCC_ClockConfig+0x358>)
 80062fe:	4313      	orrs	r3, r2
 8006300:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f003 0320 	and.w	r3, r3, #32
 800630a:	2b00      	cmp	r3, #0
 800630c:	d010      	beq.n	8006330 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	69da      	ldr	r2, [r3, #28]
 8006312:	4b1d      	ldr	r3, [pc, #116]	; (8006388 <HAL_RCC_ClockConfig+0x358>)
 8006314:	6a1b      	ldr	r3, [r3, #32]
 8006316:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800631a:	429a      	cmp	r2, r3
 800631c:	d208      	bcs.n	8006330 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800631e:	4b1a      	ldr	r3, [pc, #104]	; (8006388 <HAL_RCC_ClockConfig+0x358>)
 8006320:	6a1b      	ldr	r3, [r3, #32]
 8006322:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	69db      	ldr	r3, [r3, #28]
 800632a:	4917      	ldr	r1, [pc, #92]	; (8006388 <HAL_RCC_ClockConfig+0x358>)
 800632c:	4313      	orrs	r3, r2
 800632e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006330:	f000 f834 	bl	800639c <HAL_RCC_GetSysClockFreq>
 8006334:	4602      	mov	r2, r0
 8006336:	4b14      	ldr	r3, [pc, #80]	; (8006388 <HAL_RCC_ClockConfig+0x358>)
 8006338:	699b      	ldr	r3, [r3, #24]
 800633a:	0a1b      	lsrs	r3, r3, #8
 800633c:	f003 030f 	and.w	r3, r3, #15
 8006340:	4912      	ldr	r1, [pc, #72]	; (800638c <HAL_RCC_ClockConfig+0x35c>)
 8006342:	5ccb      	ldrb	r3, [r1, r3]
 8006344:	f003 031f 	and.w	r3, r3, #31
 8006348:	fa22 f303 	lsr.w	r3, r2, r3
 800634c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800634e:	4b0e      	ldr	r3, [pc, #56]	; (8006388 <HAL_RCC_ClockConfig+0x358>)
 8006350:	699b      	ldr	r3, [r3, #24]
 8006352:	f003 030f 	and.w	r3, r3, #15
 8006356:	4a0d      	ldr	r2, [pc, #52]	; (800638c <HAL_RCC_ClockConfig+0x35c>)
 8006358:	5cd3      	ldrb	r3, [r2, r3]
 800635a:	f003 031f 	and.w	r3, r3, #31
 800635e:	693a      	ldr	r2, [r7, #16]
 8006360:	fa22 f303 	lsr.w	r3, r2, r3
 8006364:	4a0a      	ldr	r2, [pc, #40]	; (8006390 <HAL_RCC_ClockConfig+0x360>)
 8006366:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006368:	4a0a      	ldr	r2, [pc, #40]	; (8006394 <HAL_RCC_ClockConfig+0x364>)
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800636e:	4b0a      	ldr	r3, [pc, #40]	; (8006398 <HAL_RCC_ClockConfig+0x368>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4618      	mov	r0, r3
 8006374:	f7fb ff0e 	bl	8002194 <HAL_InitTick>
 8006378:	4603      	mov	r3, r0
 800637a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800637c:	7bfb      	ldrb	r3, [r7, #15]
}
 800637e:	4618      	mov	r0, r3
 8006380:	3718      	adds	r7, #24
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}
 8006386:	bf00      	nop
 8006388:	58024400 	.word	0x58024400
 800638c:	0800bf30 	.word	0x0800bf30
 8006390:	2400040c 	.word	0x2400040c
 8006394:	24000408 	.word	0x24000408
 8006398:	24000400 	.word	0x24000400

0800639c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800639c:	b480      	push	{r7}
 800639e:	b089      	sub	sp, #36	; 0x24
 80063a0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80063a2:	4bb3      	ldr	r3, [pc, #716]	; (8006670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063a4:	691b      	ldr	r3, [r3, #16]
 80063a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80063aa:	2b18      	cmp	r3, #24
 80063ac:	f200 8155 	bhi.w	800665a <HAL_RCC_GetSysClockFreq+0x2be>
 80063b0:	a201      	add	r2, pc, #4	; (adr r2, 80063b8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80063b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063b6:	bf00      	nop
 80063b8:	0800641d 	.word	0x0800641d
 80063bc:	0800665b 	.word	0x0800665b
 80063c0:	0800665b 	.word	0x0800665b
 80063c4:	0800665b 	.word	0x0800665b
 80063c8:	0800665b 	.word	0x0800665b
 80063cc:	0800665b 	.word	0x0800665b
 80063d0:	0800665b 	.word	0x0800665b
 80063d4:	0800665b 	.word	0x0800665b
 80063d8:	08006443 	.word	0x08006443
 80063dc:	0800665b 	.word	0x0800665b
 80063e0:	0800665b 	.word	0x0800665b
 80063e4:	0800665b 	.word	0x0800665b
 80063e8:	0800665b 	.word	0x0800665b
 80063ec:	0800665b 	.word	0x0800665b
 80063f0:	0800665b 	.word	0x0800665b
 80063f4:	0800665b 	.word	0x0800665b
 80063f8:	08006449 	.word	0x08006449
 80063fc:	0800665b 	.word	0x0800665b
 8006400:	0800665b 	.word	0x0800665b
 8006404:	0800665b 	.word	0x0800665b
 8006408:	0800665b 	.word	0x0800665b
 800640c:	0800665b 	.word	0x0800665b
 8006410:	0800665b 	.word	0x0800665b
 8006414:	0800665b 	.word	0x0800665b
 8006418:	0800644f 	.word	0x0800644f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800641c:	4b94      	ldr	r3, [pc, #592]	; (8006670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f003 0320 	and.w	r3, r3, #32
 8006424:	2b00      	cmp	r3, #0
 8006426:	d009      	beq.n	800643c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006428:	4b91      	ldr	r3, [pc, #580]	; (8006670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	08db      	lsrs	r3, r3, #3
 800642e:	f003 0303 	and.w	r3, r3, #3
 8006432:	4a90      	ldr	r2, [pc, #576]	; (8006674 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006434:	fa22 f303 	lsr.w	r3, r2, r3
 8006438:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800643a:	e111      	b.n	8006660 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800643c:	4b8d      	ldr	r3, [pc, #564]	; (8006674 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800643e:	61bb      	str	r3, [r7, #24]
    break;
 8006440:	e10e      	b.n	8006660 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006442:	4b8d      	ldr	r3, [pc, #564]	; (8006678 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006444:	61bb      	str	r3, [r7, #24]
    break;
 8006446:	e10b      	b.n	8006660 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006448:	4b8c      	ldr	r3, [pc, #560]	; (800667c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800644a:	61bb      	str	r3, [r7, #24]
    break;
 800644c:	e108      	b.n	8006660 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800644e:	4b88      	ldr	r3, [pc, #544]	; (8006670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006452:	f003 0303 	and.w	r3, r3, #3
 8006456:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006458:	4b85      	ldr	r3, [pc, #532]	; (8006670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800645a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800645c:	091b      	lsrs	r3, r3, #4
 800645e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006462:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006464:	4b82      	ldr	r3, [pc, #520]	; (8006670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006468:	f003 0301 	and.w	r3, r3, #1
 800646c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800646e:	4b80      	ldr	r3, [pc, #512]	; (8006670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006472:	08db      	lsrs	r3, r3, #3
 8006474:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006478:	68fa      	ldr	r2, [r7, #12]
 800647a:	fb02 f303 	mul.w	r3, r2, r3
 800647e:	ee07 3a90 	vmov	s15, r3
 8006482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006486:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	2b00      	cmp	r3, #0
 800648e:	f000 80e1 	beq.w	8006654 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	2b02      	cmp	r3, #2
 8006496:	f000 8083 	beq.w	80065a0 <HAL_RCC_GetSysClockFreq+0x204>
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	2b02      	cmp	r3, #2
 800649e:	f200 80a1 	bhi.w	80065e4 <HAL_RCC_GetSysClockFreq+0x248>
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d003      	beq.n	80064b0 <HAL_RCC_GetSysClockFreq+0x114>
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d056      	beq.n	800655c <HAL_RCC_GetSysClockFreq+0x1c0>
 80064ae:	e099      	b.n	80065e4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80064b0:	4b6f      	ldr	r3, [pc, #444]	; (8006670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f003 0320 	and.w	r3, r3, #32
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d02d      	beq.n	8006518 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80064bc:	4b6c      	ldr	r3, [pc, #432]	; (8006670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	08db      	lsrs	r3, r3, #3
 80064c2:	f003 0303 	and.w	r3, r3, #3
 80064c6:	4a6b      	ldr	r2, [pc, #428]	; (8006674 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80064c8:	fa22 f303 	lsr.w	r3, r2, r3
 80064cc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	ee07 3a90 	vmov	s15, r3
 80064d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	ee07 3a90 	vmov	s15, r3
 80064de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064e6:	4b62      	ldr	r3, [pc, #392]	; (8006670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064ee:	ee07 3a90 	vmov	s15, r3
 80064f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80064fa:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006680 <HAL_RCC_GetSysClockFreq+0x2e4>
 80064fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006502:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006506:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800650a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800650e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006512:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006516:	e087      	b.n	8006628 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	ee07 3a90 	vmov	s15, r3
 800651e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006522:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006684 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006526:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800652a:	4b51      	ldr	r3, [pc, #324]	; (8006670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800652c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800652e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006532:	ee07 3a90 	vmov	s15, r3
 8006536:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800653a:	ed97 6a02 	vldr	s12, [r7, #8]
 800653e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006680 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006542:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006546:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800654a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800654e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006552:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006556:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800655a:	e065      	b.n	8006628 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	ee07 3a90 	vmov	s15, r3
 8006562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006566:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006688 <HAL_RCC_GetSysClockFreq+0x2ec>
 800656a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800656e:	4b40      	ldr	r3, [pc, #256]	; (8006670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006572:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006576:	ee07 3a90 	vmov	s15, r3
 800657a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800657e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006582:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006680 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006586:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800658a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800658e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006592:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006596:	ee67 7a27 	vmul.f32	s15, s14, s15
 800659a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800659e:	e043      	b.n	8006628 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	ee07 3a90 	vmov	s15, r3
 80065a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065aa:	eddf 6a38 	vldr	s13, [pc, #224]	; 800668c <HAL_RCC_GetSysClockFreq+0x2f0>
 80065ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065b2:	4b2f      	ldr	r3, [pc, #188]	; (8006670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065ba:	ee07 3a90 	vmov	s15, r3
 80065be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80065c6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006680 <HAL_RCC_GetSysClockFreq+0x2e4>
 80065ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80065e2:	e021      	b.n	8006628 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	ee07 3a90 	vmov	s15, r3
 80065ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065ee:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006688 <HAL_RCC_GetSysClockFreq+0x2ec>
 80065f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065f6:	4b1e      	ldr	r3, [pc, #120]	; (8006670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065fe:	ee07 3a90 	vmov	s15, r3
 8006602:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006606:	ed97 6a02 	vldr	s12, [r7, #8]
 800660a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006680 <HAL_RCC_GetSysClockFreq+0x2e4>
 800660e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006612:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006616:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800661a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800661e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006622:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006626:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006628:	4b11      	ldr	r3, [pc, #68]	; (8006670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800662a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800662c:	0a5b      	lsrs	r3, r3, #9
 800662e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006632:	3301      	adds	r3, #1
 8006634:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	ee07 3a90 	vmov	s15, r3
 800663c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006640:	edd7 6a07 	vldr	s13, [r7, #28]
 8006644:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006648:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800664c:	ee17 3a90 	vmov	r3, s15
 8006650:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006652:	e005      	b.n	8006660 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006654:	2300      	movs	r3, #0
 8006656:	61bb      	str	r3, [r7, #24]
    break;
 8006658:	e002      	b.n	8006660 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800665a:	4b07      	ldr	r3, [pc, #28]	; (8006678 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800665c:	61bb      	str	r3, [r7, #24]
    break;
 800665e:	bf00      	nop
  }

  return sysclockfreq;
 8006660:	69bb      	ldr	r3, [r7, #24]
}
 8006662:	4618      	mov	r0, r3
 8006664:	3724      	adds	r7, #36	; 0x24
 8006666:	46bd      	mov	sp, r7
 8006668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666c:	4770      	bx	lr
 800666e:	bf00      	nop
 8006670:	58024400 	.word	0x58024400
 8006674:	03d09000 	.word	0x03d09000
 8006678:	003d0900 	.word	0x003d0900
 800667c:	017d7840 	.word	0x017d7840
 8006680:	46000000 	.word	0x46000000
 8006684:	4c742400 	.word	0x4c742400
 8006688:	4a742400 	.word	0x4a742400
 800668c:	4bbebc20 	.word	0x4bbebc20

08006690 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b082      	sub	sp, #8
 8006694:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006696:	f7ff fe81 	bl	800639c <HAL_RCC_GetSysClockFreq>
 800669a:	4602      	mov	r2, r0
 800669c:	4b10      	ldr	r3, [pc, #64]	; (80066e0 <HAL_RCC_GetHCLKFreq+0x50>)
 800669e:	699b      	ldr	r3, [r3, #24]
 80066a0:	0a1b      	lsrs	r3, r3, #8
 80066a2:	f003 030f 	and.w	r3, r3, #15
 80066a6:	490f      	ldr	r1, [pc, #60]	; (80066e4 <HAL_RCC_GetHCLKFreq+0x54>)
 80066a8:	5ccb      	ldrb	r3, [r1, r3]
 80066aa:	f003 031f 	and.w	r3, r3, #31
 80066ae:	fa22 f303 	lsr.w	r3, r2, r3
 80066b2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80066b4:	4b0a      	ldr	r3, [pc, #40]	; (80066e0 <HAL_RCC_GetHCLKFreq+0x50>)
 80066b6:	699b      	ldr	r3, [r3, #24]
 80066b8:	f003 030f 	and.w	r3, r3, #15
 80066bc:	4a09      	ldr	r2, [pc, #36]	; (80066e4 <HAL_RCC_GetHCLKFreq+0x54>)
 80066be:	5cd3      	ldrb	r3, [r2, r3]
 80066c0:	f003 031f 	and.w	r3, r3, #31
 80066c4:	687a      	ldr	r2, [r7, #4]
 80066c6:	fa22 f303 	lsr.w	r3, r2, r3
 80066ca:	4a07      	ldr	r2, [pc, #28]	; (80066e8 <HAL_RCC_GetHCLKFreq+0x58>)
 80066cc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80066ce:	4a07      	ldr	r2, [pc, #28]	; (80066ec <HAL_RCC_GetHCLKFreq+0x5c>)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80066d4:	4b04      	ldr	r3, [pc, #16]	; (80066e8 <HAL_RCC_GetHCLKFreq+0x58>)
 80066d6:	681b      	ldr	r3, [r3, #0]
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3708      	adds	r7, #8
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}
 80066e0:	58024400 	.word	0x58024400
 80066e4:	0800bf30 	.word	0x0800bf30
 80066e8:	2400040c 	.word	0x2400040c
 80066ec:	24000408 	.word	0x24000408

080066f0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b086      	sub	sp, #24
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80066f8:	2300      	movs	r3, #0
 80066fa:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80066fc:	2300      	movs	r3, #0
 80066fe:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006708:	2b00      	cmp	r3, #0
 800670a:	d03f      	beq.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006710:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006714:	d02a      	beq.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006716:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800671a:	d824      	bhi.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800671c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006720:	d018      	beq.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006722:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006726:	d81e      	bhi.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006728:	2b00      	cmp	r3, #0
 800672a:	d003      	beq.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800672c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006730:	d007      	beq.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006732:	e018      	b.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006734:	4bab      	ldr	r3, [pc, #684]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006738:	4aaa      	ldr	r2, [pc, #680]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800673a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800673e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006740:	e015      	b.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	3304      	adds	r3, #4
 8006746:	2102      	movs	r1, #2
 8006748:	4618      	mov	r0, r3
 800674a:	f002 f84d 	bl	80087e8 <RCCEx_PLL2_Config>
 800674e:	4603      	mov	r3, r0
 8006750:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006752:	e00c      	b.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	3324      	adds	r3, #36	; 0x24
 8006758:	2102      	movs	r1, #2
 800675a:	4618      	mov	r0, r3
 800675c:	f002 f8f6 	bl	800894c <RCCEx_PLL3_Config>
 8006760:	4603      	mov	r3, r0
 8006762:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006764:	e003      	b.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	75fb      	strb	r3, [r7, #23]
      break;
 800676a:	e000      	b.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800676c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800676e:	7dfb      	ldrb	r3, [r7, #23]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d109      	bne.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006774:	4b9b      	ldr	r3, [pc, #620]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006776:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006778:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006780:	4998      	ldr	r1, [pc, #608]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006782:	4313      	orrs	r3, r2
 8006784:	650b      	str	r3, [r1, #80]	; 0x50
 8006786:	e001      	b.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006788:	7dfb      	ldrb	r3, [r7, #23]
 800678a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006794:	2b00      	cmp	r3, #0
 8006796:	d03d      	beq.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800679c:	2b04      	cmp	r3, #4
 800679e:	d826      	bhi.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80067a0:	a201      	add	r2, pc, #4	; (adr r2, 80067a8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80067a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067a6:	bf00      	nop
 80067a8:	080067bd 	.word	0x080067bd
 80067ac:	080067cb 	.word	0x080067cb
 80067b0:	080067dd 	.word	0x080067dd
 80067b4:	080067f5 	.word	0x080067f5
 80067b8:	080067f5 	.word	0x080067f5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067bc:	4b89      	ldr	r3, [pc, #548]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80067be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067c0:	4a88      	ldr	r2, [pc, #544]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80067c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80067c8:	e015      	b.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	3304      	adds	r3, #4
 80067ce:	2100      	movs	r1, #0
 80067d0:	4618      	mov	r0, r3
 80067d2:	f002 f809 	bl	80087e8 <RCCEx_PLL2_Config>
 80067d6:	4603      	mov	r3, r0
 80067d8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80067da:	e00c      	b.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	3324      	adds	r3, #36	; 0x24
 80067e0:	2100      	movs	r1, #0
 80067e2:	4618      	mov	r0, r3
 80067e4:	f002 f8b2 	bl	800894c <RCCEx_PLL3_Config>
 80067e8:	4603      	mov	r3, r0
 80067ea:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80067ec:	e003      	b.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80067ee:	2301      	movs	r3, #1
 80067f0:	75fb      	strb	r3, [r7, #23]
      break;
 80067f2:	e000      	b.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80067f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067f6:	7dfb      	ldrb	r3, [r7, #23]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d109      	bne.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80067fc:	4b79      	ldr	r3, [pc, #484]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80067fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006800:	f023 0207 	bic.w	r2, r3, #7
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006808:	4976      	ldr	r1, [pc, #472]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800680a:	4313      	orrs	r3, r2
 800680c:	650b      	str	r3, [r1, #80]	; 0x50
 800680e:	e001      	b.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006810:	7dfb      	ldrb	r3, [r7, #23]
 8006812:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800681c:	2b00      	cmp	r3, #0
 800681e:	d051      	beq.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006826:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800682a:	d036      	beq.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800682c:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8006830:	d830      	bhi.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8006832:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006836:	d032      	beq.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8006838:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800683c:	d82a      	bhi.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800683e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006842:	d02e      	beq.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8006844:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006848:	d824      	bhi.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800684a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800684e:	d018      	beq.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8006850:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006854:	d81e      	bhi.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8006856:	2b00      	cmp	r3, #0
 8006858:	d003      	beq.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0x172>
 800685a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800685e:	d007      	beq.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8006860:	e018      	b.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006862:	4b60      	ldr	r3, [pc, #384]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006866:	4a5f      	ldr	r2, [pc, #380]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006868:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800686c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800686e:	e019      	b.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	3304      	adds	r3, #4
 8006874:	2100      	movs	r1, #0
 8006876:	4618      	mov	r0, r3
 8006878:	f001 ffb6 	bl	80087e8 <RCCEx_PLL2_Config>
 800687c:	4603      	mov	r3, r0
 800687e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006880:	e010      	b.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	3324      	adds	r3, #36	; 0x24
 8006886:	2100      	movs	r1, #0
 8006888:	4618      	mov	r0, r3
 800688a:	f002 f85f 	bl	800894c <RCCEx_PLL3_Config>
 800688e:	4603      	mov	r3, r0
 8006890:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006892:	e007      	b.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	75fb      	strb	r3, [r7, #23]
      break;
 8006898:	e004      	b.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800689a:	bf00      	nop
 800689c:	e002      	b.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800689e:	bf00      	nop
 80068a0:	e000      	b.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80068a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068a4:	7dfb      	ldrb	r3, [r7, #23]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d10a      	bne.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80068aa:	4b4e      	ldr	r3, [pc, #312]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80068ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068ae:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80068b8:	494a      	ldr	r1, [pc, #296]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80068ba:	4313      	orrs	r3, r2
 80068bc:	658b      	str	r3, [r1, #88]	; 0x58
 80068be:	e001      	b.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068c0:	7dfb      	ldrb	r3, [r7, #23]
 80068c2:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d051      	beq.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80068d6:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80068da:	d036      	beq.n	800694a <HAL_RCCEx_PeriphCLKConfig+0x25a>
 80068dc:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80068e0:	d830      	bhi.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80068e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80068e6:	d032      	beq.n	800694e <HAL_RCCEx_PeriphCLKConfig+0x25e>
 80068e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80068ec:	d82a      	bhi.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80068ee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80068f2:	d02e      	beq.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0x262>
 80068f4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80068f8:	d824      	bhi.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80068fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80068fe:	d018      	beq.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8006900:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006904:	d81e      	bhi.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8006906:	2b00      	cmp	r3, #0
 8006908:	d003      	beq.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0x222>
 800690a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800690e:	d007      	beq.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8006910:	e018      	b.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006912:	4b34      	ldr	r3, [pc, #208]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006916:	4a33      	ldr	r2, [pc, #204]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006918:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800691c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800691e:	e019      	b.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	3304      	adds	r3, #4
 8006924:	2100      	movs	r1, #0
 8006926:	4618      	mov	r0, r3
 8006928:	f001 ff5e 	bl	80087e8 <RCCEx_PLL2_Config>
 800692c:	4603      	mov	r3, r0
 800692e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006930:	e010      	b.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	3324      	adds	r3, #36	; 0x24
 8006936:	2100      	movs	r1, #0
 8006938:	4618      	mov	r0, r3
 800693a:	f002 f807 	bl	800894c <RCCEx_PLL3_Config>
 800693e:	4603      	mov	r3, r0
 8006940:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006942:	e007      	b.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006944:	2301      	movs	r3, #1
 8006946:	75fb      	strb	r3, [r7, #23]
      break;
 8006948:	e004      	b.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800694a:	bf00      	nop
 800694c:	e002      	b.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800694e:	bf00      	nop
 8006950:	e000      	b.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8006952:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006954:	7dfb      	ldrb	r3, [r7, #23]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d10a      	bne.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800695a:	4b22      	ldr	r3, [pc, #136]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800695c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800695e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006968:	491e      	ldr	r1, [pc, #120]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800696a:	4313      	orrs	r3, r2
 800696c:	658b      	str	r3, [r1, #88]	; 0x58
 800696e:	e001      	b.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006970:	7dfb      	ldrb	r3, [r7, #23]
 8006972:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800697c:	2b00      	cmp	r3, #0
 800697e:	d035      	beq.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006984:	2b30      	cmp	r3, #48	; 0x30
 8006986:	d01c      	beq.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006988:	2b30      	cmp	r3, #48	; 0x30
 800698a:	d817      	bhi.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800698c:	2b20      	cmp	r3, #32
 800698e:	d00c      	beq.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8006990:	2b20      	cmp	r3, #32
 8006992:	d813      	bhi.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8006994:	2b00      	cmp	r3, #0
 8006996:	d016      	beq.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8006998:	2b10      	cmp	r3, #16
 800699a:	d10f      	bne.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800699c:	4b11      	ldr	r3, [pc, #68]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800699e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069a0:	4a10      	ldr	r2, [pc, #64]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80069a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80069a8:	e00e      	b.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	3304      	adds	r3, #4
 80069ae:	2102      	movs	r1, #2
 80069b0:	4618      	mov	r0, r3
 80069b2:	f001 ff19 	bl	80087e8 <RCCEx_PLL2_Config>
 80069b6:	4603      	mov	r3, r0
 80069b8:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80069ba:	e005      	b.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80069bc:	2301      	movs	r3, #1
 80069be:	75fb      	strb	r3, [r7, #23]
      break;
 80069c0:	e002      	b.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 80069c2:	bf00      	nop
 80069c4:	e000      	b.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 80069c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069c8:	7dfb      	ldrb	r3, [r7, #23]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d10c      	bne.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80069ce:	4b05      	ldr	r3, [pc, #20]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80069d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069d2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069da:	4902      	ldr	r1, [pc, #8]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80069dc:	4313      	orrs	r3, r2
 80069de:	64cb      	str	r3, [r1, #76]	; 0x4c
 80069e0:	e004      	b.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80069e2:	bf00      	nop
 80069e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069e8:	7dfb      	ldrb	r3, [r7, #23]
 80069ea:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d047      	beq.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a00:	d030      	beq.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8006a02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a06:	d82a      	bhi.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8006a08:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006a0c:	d02c      	beq.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8006a0e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006a12:	d824      	bhi.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8006a14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a18:	d018      	beq.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006a1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a1e:	d81e      	bhi.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d003      	beq.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006a24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a28:	d007      	beq.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006a2a:	e018      	b.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a2c:	4bac      	ldr	r3, [pc, #688]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a30:	4aab      	ldr	r2, [pc, #684]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006a32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a36:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006a38:	e017      	b.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	3304      	adds	r3, #4
 8006a3e:	2100      	movs	r1, #0
 8006a40:	4618      	mov	r0, r3
 8006a42:	f001 fed1 	bl	80087e8 <RCCEx_PLL2_Config>
 8006a46:	4603      	mov	r3, r0
 8006a48:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006a4a:	e00e      	b.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	3324      	adds	r3, #36	; 0x24
 8006a50:	2100      	movs	r1, #0
 8006a52:	4618      	mov	r0, r3
 8006a54:	f001 ff7a 	bl	800894c <RCCEx_PLL3_Config>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006a5c:	e005      	b.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	75fb      	strb	r3, [r7, #23]
      break;
 8006a62:	e002      	b.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8006a64:	bf00      	nop
 8006a66:	e000      	b.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8006a68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a6a:	7dfb      	ldrb	r3, [r7, #23]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d109      	bne.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006a70:	4b9b      	ldr	r3, [pc, #620]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006a72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a74:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a7c:	4998      	ldr	r1, [pc, #608]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	650b      	str	r3, [r1, #80]	; 0x50
 8006a82:	e001      	b.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a84:	7dfb      	ldrb	r3, [r7, #23]
 8006a86:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d049      	beq.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a9c:	d02e      	beq.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8006a9e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006aa2:	d828      	bhi.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8006aa4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006aa8:	d02a      	beq.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8006aaa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006aae:	d822      	bhi.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8006ab0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006ab4:	d026      	beq.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8006ab6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006aba:	d81c      	bhi.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8006abc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ac0:	d010      	beq.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8006ac2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ac6:	d816      	bhi.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d01d      	beq.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8006acc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ad0:	d111      	bne.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	3304      	adds	r3, #4
 8006ad6:	2101      	movs	r1, #1
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f001 fe85 	bl	80087e8 <RCCEx_PLL2_Config>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006ae2:	e012      	b.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	3324      	adds	r3, #36	; 0x24
 8006ae8:	2101      	movs	r1, #1
 8006aea:	4618      	mov	r0, r3
 8006aec:	f001 ff2e 	bl	800894c <RCCEx_PLL3_Config>
 8006af0:	4603      	mov	r3, r0
 8006af2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006af4:	e009      	b.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006af6:	2301      	movs	r3, #1
 8006af8:	75fb      	strb	r3, [r7, #23]
      break;
 8006afa:	e006      	b.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8006afc:	bf00      	nop
 8006afe:	e004      	b.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8006b00:	bf00      	nop
 8006b02:	e002      	b.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8006b04:	bf00      	nop
 8006b06:	e000      	b.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8006b08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b0a:	7dfb      	ldrb	r3, [r7, #23]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d109      	bne.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006b10:	4b73      	ldr	r3, [pc, #460]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006b12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b14:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b1c:	4970      	ldr	r1, [pc, #448]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	650b      	str	r3, [r1, #80]	; 0x50
 8006b22:	e001      	b.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b24:	7dfb      	ldrb	r3, [r7, #23]
 8006b26:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d04b      	beq.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006b3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b3e:	d02e      	beq.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8006b40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b44:	d828      	bhi.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006b46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b4a:	d02a      	beq.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8006b4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b50:	d822      	bhi.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006b52:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006b56:	d026      	beq.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8006b58:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006b5c:	d81c      	bhi.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006b5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b62:	d010      	beq.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x496>
 8006b64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b68:	d816      	bhi.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d01d      	beq.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8006b6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b72:	d111      	bne.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	3304      	adds	r3, #4
 8006b78:	2101      	movs	r1, #1
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f001 fe34 	bl	80087e8 <RCCEx_PLL2_Config>
 8006b80:	4603      	mov	r3, r0
 8006b82:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006b84:	e012      	b.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	3324      	adds	r3, #36	; 0x24
 8006b8a:	2101      	movs	r1, #1
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f001 fedd 	bl	800894c <RCCEx_PLL3_Config>
 8006b92:	4603      	mov	r3, r0
 8006b94:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006b96:	e009      	b.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	75fb      	strb	r3, [r7, #23]
      break;
 8006b9c:	e006      	b.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8006b9e:	bf00      	nop
 8006ba0:	e004      	b.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8006ba2:	bf00      	nop
 8006ba4:	e002      	b.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8006ba6:	bf00      	nop
 8006ba8:	e000      	b.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8006baa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006bac:	7dfb      	ldrb	r3, [r7, #23]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d10a      	bne.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006bb2:	4b4b      	ldr	r3, [pc, #300]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bb6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006bc0:	4947      	ldr	r1, [pc, #284]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	658b      	str	r3, [r1, #88]	; 0x58
 8006bc6:	e001      	b.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bc8:	7dfb      	ldrb	r3, [r7, #23]
 8006bca:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d02f      	beq.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006bdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006be0:	d00e      	beq.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8006be2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006be6:	d814      	bhi.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d015      	beq.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8006bec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006bf0:	d10f      	bne.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bf2:	4b3b      	ldr	r3, [pc, #236]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bf6:	4a3a      	ldr	r2, [pc, #232]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006bf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bfc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006bfe:	e00c      	b.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	3304      	adds	r3, #4
 8006c04:	2101      	movs	r1, #1
 8006c06:	4618      	mov	r0, r3
 8006c08:	f001 fdee 	bl	80087e8 <RCCEx_PLL2_Config>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006c10:	e003      	b.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c12:	2301      	movs	r3, #1
 8006c14:	75fb      	strb	r3, [r7, #23]
      break;
 8006c16:	e000      	b.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8006c18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c1a:	7dfb      	ldrb	r3, [r7, #23]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d109      	bne.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006c20:	4b2f      	ldr	r3, [pc, #188]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006c22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c24:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c2c:	492c      	ldr	r1, [pc, #176]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	650b      	str	r3, [r1, #80]	; 0x50
 8006c32:	e001      	b.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c34:	7dfb      	ldrb	r3, [r7, #23]
 8006c36:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d032      	beq.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c48:	2b03      	cmp	r3, #3
 8006c4a:	d81b      	bhi.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8006c4c:	a201      	add	r2, pc, #4	; (adr r2, 8006c54 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8006c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c52:	bf00      	nop
 8006c54:	08006c8b 	.word	0x08006c8b
 8006c58:	08006c65 	.word	0x08006c65
 8006c5c:	08006c73 	.word	0x08006c73
 8006c60:	08006c8b 	.word	0x08006c8b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c64:	4b1e      	ldr	r3, [pc, #120]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c68:	4a1d      	ldr	r2, [pc, #116]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006c6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c6e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006c70:	e00c      	b.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	3304      	adds	r3, #4
 8006c76:	2102      	movs	r1, #2
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f001 fdb5 	bl	80087e8 <RCCEx_PLL2_Config>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006c82:	e003      	b.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006c84:	2301      	movs	r3, #1
 8006c86:	75fb      	strb	r3, [r7, #23]
      break;
 8006c88:	e000      	b.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8006c8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c8c:	7dfb      	ldrb	r3, [r7, #23]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d109      	bne.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006c92:	4b13      	ldr	r3, [pc, #76]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c96:	f023 0203 	bic.w	r2, r3, #3
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c9e:	4910      	ldr	r1, [pc, #64]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006ca4:	e001      	b.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ca6:	7dfb      	ldrb	r3, [r7, #23]
 8006ca8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	f000 808a 	beq.w	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006cb8:	4b0a      	ldr	r3, [pc, #40]	; (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a09      	ldr	r2, [pc, #36]	; (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8006cbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cc2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006cc4:	f7fb fab0 	bl	8002228 <HAL_GetTick>
 8006cc8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006cca:	e00d      	b.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ccc:	f7fb faac 	bl	8002228 <HAL_GetTick>
 8006cd0:	4602      	mov	r2, r0
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	1ad3      	subs	r3, r2, r3
 8006cd6:	2b64      	cmp	r3, #100	; 0x64
 8006cd8:	d906      	bls.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 8006cda:	2303      	movs	r3, #3
 8006cdc:	75fb      	strb	r3, [r7, #23]
        break;
 8006cde:	e009      	b.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8006ce0:	58024400 	.word	0x58024400
 8006ce4:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006ce8:	4bb9      	ldr	r3, [pc, #740]	; (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d0eb      	beq.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8006cf4:	7dfb      	ldrb	r3, [r7, #23]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d166      	bne.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006cfa:	4bb6      	ldr	r3, [pc, #728]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006cfc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006d04:	4053      	eors	r3, r2
 8006d06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d013      	beq.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006d0e:	4bb1      	ldr	r3, [pc, #708]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d16:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006d18:	4bae      	ldr	r3, [pc, #696]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d1c:	4aad      	ldr	r2, [pc, #692]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006d1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d22:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006d24:	4bab      	ldr	r3, [pc, #684]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d28:	4aaa      	ldr	r2, [pc, #680]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006d2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d2e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006d30:	4aa8      	ldr	r2, [pc, #672]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006d3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d40:	d115      	bne.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d42:	f7fb fa71 	bl	8002228 <HAL_GetTick>
 8006d46:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006d48:	e00b      	b.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d4a:	f7fb fa6d 	bl	8002228 <HAL_GetTick>
 8006d4e:	4602      	mov	r2, r0
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	1ad3      	subs	r3, r2, r3
 8006d54:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d902      	bls.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8006d5c:	2303      	movs	r3, #3
 8006d5e:	75fb      	strb	r3, [r7, #23]
            break;
 8006d60:	e005      	b.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006d62:	4b9c      	ldr	r3, [pc, #624]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d66:	f003 0302 	and.w	r3, r3, #2
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d0ed      	beq.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 8006d6e:	7dfb      	ldrb	r3, [r7, #23]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d126      	bne.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006d7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d82:	d10d      	bne.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8006d84:	4b93      	ldr	r3, [pc, #588]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006d86:	691b      	ldr	r3, [r3, #16]
 8006d88:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006d92:	0919      	lsrs	r1, r3, #4
 8006d94:	4b90      	ldr	r3, [pc, #576]	; (8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006d96:	400b      	ands	r3, r1
 8006d98:	498e      	ldr	r1, [pc, #568]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	610b      	str	r3, [r1, #16]
 8006d9e:	e005      	b.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 8006da0:	4b8c      	ldr	r3, [pc, #560]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006da2:	691b      	ldr	r3, [r3, #16]
 8006da4:	4a8b      	ldr	r2, [pc, #556]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006da6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006daa:	6113      	str	r3, [r2, #16]
 8006dac:	4b89      	ldr	r3, [pc, #548]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006dae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006db6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006dba:	4986      	ldr	r1, [pc, #536]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	670b      	str	r3, [r1, #112]	; 0x70
 8006dc0:	e004      	b.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006dc2:	7dfb      	ldrb	r3, [r7, #23]
 8006dc4:	75bb      	strb	r3, [r7, #22]
 8006dc6:	e001      	b.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dc8:	7dfb      	ldrb	r3, [r7, #23]
 8006dca:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f003 0301 	and.w	r3, r3, #1
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d07e      	beq.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ddc:	2b28      	cmp	r3, #40	; 0x28
 8006dde:	d867      	bhi.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8006de0:	a201      	add	r2, pc, #4	; (adr r2, 8006de8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 8006de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006de6:	bf00      	nop
 8006de8:	08006eb7 	.word	0x08006eb7
 8006dec:	08006eb1 	.word	0x08006eb1
 8006df0:	08006eb1 	.word	0x08006eb1
 8006df4:	08006eb1 	.word	0x08006eb1
 8006df8:	08006eb1 	.word	0x08006eb1
 8006dfc:	08006eb1 	.word	0x08006eb1
 8006e00:	08006eb1 	.word	0x08006eb1
 8006e04:	08006eb1 	.word	0x08006eb1
 8006e08:	08006e8d 	.word	0x08006e8d
 8006e0c:	08006eb1 	.word	0x08006eb1
 8006e10:	08006eb1 	.word	0x08006eb1
 8006e14:	08006eb1 	.word	0x08006eb1
 8006e18:	08006eb1 	.word	0x08006eb1
 8006e1c:	08006eb1 	.word	0x08006eb1
 8006e20:	08006eb1 	.word	0x08006eb1
 8006e24:	08006eb1 	.word	0x08006eb1
 8006e28:	08006e9f 	.word	0x08006e9f
 8006e2c:	08006eb1 	.word	0x08006eb1
 8006e30:	08006eb1 	.word	0x08006eb1
 8006e34:	08006eb1 	.word	0x08006eb1
 8006e38:	08006eb1 	.word	0x08006eb1
 8006e3c:	08006eb1 	.word	0x08006eb1
 8006e40:	08006eb1 	.word	0x08006eb1
 8006e44:	08006eb1 	.word	0x08006eb1
 8006e48:	08006eb7 	.word	0x08006eb7
 8006e4c:	08006eb1 	.word	0x08006eb1
 8006e50:	08006eb1 	.word	0x08006eb1
 8006e54:	08006eb1 	.word	0x08006eb1
 8006e58:	08006eb1 	.word	0x08006eb1
 8006e5c:	08006eb1 	.word	0x08006eb1
 8006e60:	08006eb1 	.word	0x08006eb1
 8006e64:	08006eb1 	.word	0x08006eb1
 8006e68:	08006eb7 	.word	0x08006eb7
 8006e6c:	08006eb1 	.word	0x08006eb1
 8006e70:	08006eb1 	.word	0x08006eb1
 8006e74:	08006eb1 	.word	0x08006eb1
 8006e78:	08006eb1 	.word	0x08006eb1
 8006e7c:	08006eb1 	.word	0x08006eb1
 8006e80:	08006eb1 	.word	0x08006eb1
 8006e84:	08006eb1 	.word	0x08006eb1
 8006e88:	08006eb7 	.word	0x08006eb7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	3304      	adds	r3, #4
 8006e90:	2101      	movs	r1, #1
 8006e92:	4618      	mov	r0, r3
 8006e94:	f001 fca8 	bl	80087e8 <RCCEx_PLL2_Config>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006e9c:	e00c      	b.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	3324      	adds	r3, #36	; 0x24
 8006ea2:	2101      	movs	r1, #1
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	f001 fd51 	bl	800894c <RCCEx_PLL3_Config>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006eae:	e003      	b.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	75fb      	strb	r3, [r7, #23]
      break;
 8006eb4:	e000      	b.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 8006eb6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006eb8:	7dfb      	ldrb	r3, [r7, #23]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d109      	bne.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006ebe:	4b45      	ldr	r3, [pc, #276]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ec2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006eca:	4942      	ldr	r1, [pc, #264]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	654b      	str	r3, [r1, #84]	; 0x54
 8006ed0:	e001      	b.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ed2:	7dfb      	ldrb	r3, [r7, #23]
 8006ed4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f003 0302 	and.w	r3, r3, #2
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d037      	beq.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ee6:	2b05      	cmp	r3, #5
 8006ee8:	d820      	bhi.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8006eea:	a201      	add	r2, pc, #4	; (adr r2, 8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8006eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ef0:	08006f33 	.word	0x08006f33
 8006ef4:	08006f09 	.word	0x08006f09
 8006ef8:	08006f1b 	.word	0x08006f1b
 8006efc:	08006f33 	.word	0x08006f33
 8006f00:	08006f33 	.word	0x08006f33
 8006f04:	08006f33 	.word	0x08006f33
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	3304      	adds	r3, #4
 8006f0c:	2101      	movs	r1, #1
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f001 fc6a 	bl	80087e8 <RCCEx_PLL2_Config>
 8006f14:	4603      	mov	r3, r0
 8006f16:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006f18:	e00c      	b.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	3324      	adds	r3, #36	; 0x24
 8006f1e:	2101      	movs	r1, #1
 8006f20:	4618      	mov	r0, r3
 8006f22:	f001 fd13 	bl	800894c <RCCEx_PLL3_Config>
 8006f26:	4603      	mov	r3, r0
 8006f28:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006f2a:	e003      	b.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	75fb      	strb	r3, [r7, #23]
      break;
 8006f30:	e000      	b.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8006f32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f34:	7dfb      	ldrb	r3, [r7, #23]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d109      	bne.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006f3a:	4b26      	ldr	r3, [pc, #152]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f3e:	f023 0207 	bic.w	r2, r3, #7
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f46:	4923      	ldr	r1, [pc, #140]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	654b      	str	r3, [r1, #84]	; 0x54
 8006f4c:	e001      	b.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f4e:	7dfb      	ldrb	r3, [r7, #23]
 8006f50:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f003 0304 	and.w	r3, r3, #4
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d040      	beq.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f64:	2b05      	cmp	r3, #5
 8006f66:	d821      	bhi.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8006f68:	a201      	add	r2, pc, #4	; (adr r2, 8006f70 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8006f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f6e:	bf00      	nop
 8006f70:	08006fb3 	.word	0x08006fb3
 8006f74:	08006f89 	.word	0x08006f89
 8006f78:	08006f9b 	.word	0x08006f9b
 8006f7c:	08006fb3 	.word	0x08006fb3
 8006f80:	08006fb3 	.word	0x08006fb3
 8006f84:	08006fb3 	.word	0x08006fb3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	3304      	adds	r3, #4
 8006f8c:	2101      	movs	r1, #1
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f001 fc2a 	bl	80087e8 <RCCEx_PLL2_Config>
 8006f94:	4603      	mov	r3, r0
 8006f96:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006f98:	e00c      	b.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	3324      	adds	r3, #36	; 0x24
 8006f9e:	2101      	movs	r1, #1
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f001 fcd3 	bl	800894c <RCCEx_PLL3_Config>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006faa:	e003      	b.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006fac:	2301      	movs	r3, #1
 8006fae:	75fb      	strb	r3, [r7, #23]
      break;
 8006fb0:	e000      	b.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8006fb2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006fb4:	7dfb      	ldrb	r3, [r7, #23]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d110      	bne.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006fba:	4b06      	ldr	r3, [pc, #24]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fbe:	f023 0207 	bic.w	r2, r3, #7
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fc8:	4902      	ldr	r1, [pc, #8]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	658b      	str	r3, [r1, #88]	; 0x58
 8006fce:	e007      	b.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8006fd0:	58024800 	.word	0x58024800
 8006fd4:	58024400 	.word	0x58024400
 8006fd8:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fdc:	7dfb      	ldrb	r3, [r7, #23]
 8006fde:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f003 0320 	and.w	r3, r3, #32
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d04b      	beq.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ff2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006ff6:	d02e      	beq.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8006ff8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006ffc:	d828      	bhi.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8006ffe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007002:	d02a      	beq.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8007004:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007008:	d822      	bhi.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800700a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800700e:	d026      	beq.n	800705e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8007010:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007014:	d81c      	bhi.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8007016:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800701a:	d010      	beq.n	800703e <HAL_RCCEx_PeriphCLKConfig+0x94e>
 800701c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007020:	d816      	bhi.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8007022:	2b00      	cmp	r3, #0
 8007024:	d01d      	beq.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0x972>
 8007026:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800702a:	d111      	bne.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	3304      	adds	r3, #4
 8007030:	2100      	movs	r1, #0
 8007032:	4618      	mov	r0, r3
 8007034:	f001 fbd8 	bl	80087e8 <RCCEx_PLL2_Config>
 8007038:	4603      	mov	r3, r0
 800703a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800703c:	e012      	b.n	8007064 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	3324      	adds	r3, #36	; 0x24
 8007042:	2102      	movs	r1, #2
 8007044:	4618      	mov	r0, r3
 8007046:	f001 fc81 	bl	800894c <RCCEx_PLL3_Config>
 800704a:	4603      	mov	r3, r0
 800704c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800704e:	e009      	b.n	8007064 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007050:	2301      	movs	r3, #1
 8007052:	75fb      	strb	r3, [r7, #23]
      break;
 8007054:	e006      	b.n	8007064 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8007056:	bf00      	nop
 8007058:	e004      	b.n	8007064 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800705a:	bf00      	nop
 800705c:	e002      	b.n	8007064 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800705e:	bf00      	nop
 8007060:	e000      	b.n	8007064 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8007062:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007064:	7dfb      	ldrb	r3, [r7, #23]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d10a      	bne.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800706a:	4bb2      	ldr	r3, [pc, #712]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800706c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800706e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007078:	49ae      	ldr	r1, [pc, #696]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800707a:	4313      	orrs	r3, r2
 800707c:	654b      	str	r3, [r1, #84]	; 0x54
 800707e:	e001      	b.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007080:	7dfb      	ldrb	r3, [r7, #23]
 8007082:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800708c:	2b00      	cmp	r3, #0
 800708e:	d04b      	beq.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007096:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800709a:	d02e      	beq.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800709c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80070a0:	d828      	bhi.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80070a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070a6:	d02a      	beq.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 80070a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070ac:	d822      	bhi.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80070ae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80070b2:	d026      	beq.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80070b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80070b8:	d81c      	bhi.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80070ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070be:	d010      	beq.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 80070c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070c4:	d816      	bhi.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d01d      	beq.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80070ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070ce:	d111      	bne.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	3304      	adds	r3, #4
 80070d4:	2100      	movs	r1, #0
 80070d6:	4618      	mov	r0, r3
 80070d8:	f001 fb86 	bl	80087e8 <RCCEx_PLL2_Config>
 80070dc:	4603      	mov	r3, r0
 80070de:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80070e0:	e012      	b.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	3324      	adds	r3, #36	; 0x24
 80070e6:	2102      	movs	r1, #2
 80070e8:	4618      	mov	r0, r3
 80070ea:	f001 fc2f 	bl	800894c <RCCEx_PLL3_Config>
 80070ee:	4603      	mov	r3, r0
 80070f0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80070f2:	e009      	b.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80070f4:	2301      	movs	r3, #1
 80070f6:	75fb      	strb	r3, [r7, #23]
      break;
 80070f8:	e006      	b.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80070fa:	bf00      	nop
 80070fc:	e004      	b.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80070fe:	bf00      	nop
 8007100:	e002      	b.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8007102:	bf00      	nop
 8007104:	e000      	b.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8007106:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007108:	7dfb      	ldrb	r3, [r7, #23]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d10a      	bne.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800710e:	4b89      	ldr	r3, [pc, #548]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007112:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800711c:	4985      	ldr	r1, [pc, #532]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800711e:	4313      	orrs	r3, r2
 8007120:	658b      	str	r3, [r1, #88]	; 0x58
 8007122:	e001      	b.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007124:	7dfb      	ldrb	r3, [r7, #23]
 8007126:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007130:	2b00      	cmp	r3, #0
 8007132:	d04b      	beq.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800713a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800713e:	d02e      	beq.n	800719e <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8007140:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007144:	d828      	bhi.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8007146:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800714a:	d02a      	beq.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800714c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007150:	d822      	bhi.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8007152:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007156:	d026      	beq.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8007158:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800715c:	d81c      	bhi.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800715e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007162:	d010      	beq.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8007164:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007168:	d816      	bhi.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800716a:	2b00      	cmp	r3, #0
 800716c:	d01d      	beq.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0xaba>
 800716e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007172:	d111      	bne.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	3304      	adds	r3, #4
 8007178:	2100      	movs	r1, #0
 800717a:	4618      	mov	r0, r3
 800717c:	f001 fb34 	bl	80087e8 <RCCEx_PLL2_Config>
 8007180:	4603      	mov	r3, r0
 8007182:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007184:	e012      	b.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	3324      	adds	r3, #36	; 0x24
 800718a:	2102      	movs	r1, #2
 800718c:	4618      	mov	r0, r3
 800718e:	f001 fbdd 	bl	800894c <RCCEx_PLL3_Config>
 8007192:	4603      	mov	r3, r0
 8007194:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007196:	e009      	b.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007198:	2301      	movs	r3, #1
 800719a:	75fb      	strb	r3, [r7, #23]
      break;
 800719c:	e006      	b.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800719e:	bf00      	nop
 80071a0:	e004      	b.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80071a2:	bf00      	nop
 80071a4:	e002      	b.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80071a6:	bf00      	nop
 80071a8:	e000      	b.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80071aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071ac:	7dfb      	ldrb	r3, [r7, #23]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d10a      	bne.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80071b2:	4b60      	ldr	r3, [pc, #384]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80071b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80071c0:	495c      	ldr	r1, [pc, #368]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80071c2:	4313      	orrs	r3, r2
 80071c4:	658b      	str	r3, [r1, #88]	; 0x58
 80071c6:	e001      	b.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071c8:	7dfb      	ldrb	r3, [r7, #23]
 80071ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f003 0308 	and.w	r3, r3, #8
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d018      	beq.n	800720a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071e0:	d10a      	bne.n	80071f8 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	3324      	adds	r3, #36	; 0x24
 80071e6:	2102      	movs	r1, #2
 80071e8:	4618      	mov	r0, r3
 80071ea:	f001 fbaf 	bl	800894c <RCCEx_PLL3_Config>
 80071ee:	4603      	mov	r3, r0
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d001      	beq.n	80071f8 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 80071f4:	2301      	movs	r3, #1
 80071f6:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80071f8:	4b4e      	ldr	r3, [pc, #312]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80071fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071fc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007204:	494b      	ldr	r1, [pc, #300]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007206:	4313      	orrs	r3, r2
 8007208:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f003 0310 	and.w	r3, r3, #16
 8007212:	2b00      	cmp	r3, #0
 8007214:	d01a      	beq.n	800724c <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800721c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007220:	d10a      	bne.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	3324      	adds	r3, #36	; 0x24
 8007226:	2102      	movs	r1, #2
 8007228:	4618      	mov	r0, r3
 800722a:	f001 fb8f 	bl	800894c <RCCEx_PLL3_Config>
 800722e:	4603      	mov	r3, r0
 8007230:	2b00      	cmp	r3, #0
 8007232:	d001      	beq.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8007234:	2301      	movs	r3, #1
 8007236:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007238:	4b3e      	ldr	r3, [pc, #248]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800723a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800723c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007246:	493b      	ldr	r1, [pc, #236]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007248:	4313      	orrs	r3, r2
 800724a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007254:	2b00      	cmp	r3, #0
 8007256:	d034      	beq.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800725e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007262:	d01d      	beq.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8007264:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007268:	d817      	bhi.n	800729a <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800726a:	2b00      	cmp	r3, #0
 800726c:	d003      	beq.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800726e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007272:	d009      	beq.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007274:	e011      	b.n	800729a <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	3304      	adds	r3, #4
 800727a:	2100      	movs	r1, #0
 800727c:	4618      	mov	r0, r3
 800727e:	f001 fab3 	bl	80087e8 <RCCEx_PLL2_Config>
 8007282:	4603      	mov	r3, r0
 8007284:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007286:	e00c      	b.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	3324      	adds	r3, #36	; 0x24
 800728c:	2102      	movs	r1, #2
 800728e:	4618      	mov	r0, r3
 8007290:	f001 fb5c 	bl	800894c <RCCEx_PLL3_Config>
 8007294:	4603      	mov	r3, r0
 8007296:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007298:	e003      	b.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800729a:	2301      	movs	r3, #1
 800729c:	75fb      	strb	r3, [r7, #23]
      break;
 800729e:	e000      	b.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 80072a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072a2:	7dfb      	ldrb	r3, [r7, #23]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d10a      	bne.n	80072be <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80072a8:	4b22      	ldr	r3, [pc, #136]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80072aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80072b6:	491f      	ldr	r1, [pc, #124]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80072b8:	4313      	orrs	r3, r2
 80072ba:	658b      	str	r3, [r1, #88]	; 0x58
 80072bc:	e001      	b.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072be:	7dfb      	ldrb	r3, [r7, #23]
 80072c0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d036      	beq.n	800733c <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80072d4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80072d8:	d01c      	beq.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80072da:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80072de:	d816      	bhi.n	800730e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80072e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072e4:	d003      	beq.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80072e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80072ea:	d007      	beq.n	80072fc <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 80072ec:	e00f      	b.n	800730e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072ee:	4b11      	ldr	r3, [pc, #68]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80072f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072f2:	4a10      	ldr	r2, [pc, #64]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80072f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80072f8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80072fa:	e00c      	b.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	3324      	adds	r3, #36	; 0x24
 8007300:	2101      	movs	r1, #1
 8007302:	4618      	mov	r0, r3
 8007304:	f001 fb22 	bl	800894c <RCCEx_PLL3_Config>
 8007308:	4603      	mov	r3, r0
 800730a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800730c:	e003      	b.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800730e:	2301      	movs	r3, #1
 8007310:	75fb      	strb	r3, [r7, #23]
      break;
 8007312:	e000      	b.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8007314:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007316:	7dfb      	ldrb	r3, [r7, #23]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d10d      	bne.n	8007338 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800731c:	4b05      	ldr	r3, [pc, #20]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800731e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007320:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800732a:	4902      	ldr	r1, [pc, #8]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800732c:	4313      	orrs	r3, r2
 800732e:	654b      	str	r3, [r1, #84]	; 0x54
 8007330:	e004      	b.n	800733c <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 8007332:	bf00      	nop
 8007334:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007338:	7dfb      	ldrb	r3, [r7, #23]
 800733a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007344:	2b00      	cmp	r3, #0
 8007346:	d029      	beq.n	800739c <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800734c:	2b00      	cmp	r3, #0
 800734e:	d003      	beq.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007350:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007354:	d007      	beq.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8007356:	e00f      	b.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007358:	4b61      	ldr	r3, [pc, #388]	; (80074e0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800735a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800735c:	4a60      	ldr	r2, [pc, #384]	; (80074e0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800735e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007362:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007364:	e00b      	b.n	800737e <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	3304      	adds	r3, #4
 800736a:	2102      	movs	r1, #2
 800736c:	4618      	mov	r0, r3
 800736e:	f001 fa3b 	bl	80087e8 <RCCEx_PLL2_Config>
 8007372:	4603      	mov	r3, r0
 8007374:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007376:	e002      	b.n	800737e <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 8007378:	2301      	movs	r3, #1
 800737a:	75fb      	strb	r3, [r7, #23]
      break;
 800737c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800737e:	7dfb      	ldrb	r3, [r7, #23]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d109      	bne.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007384:	4b56      	ldr	r3, [pc, #344]	; (80074e0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007388:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007390:	4953      	ldr	r1, [pc, #332]	; (80074e0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007392:	4313      	orrs	r3, r2
 8007394:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007396:	e001      	b.n	800739c <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007398:	7dfb      	ldrb	r3, [r7, #23]
 800739a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d00a      	beq.n	80073be <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	3324      	adds	r3, #36	; 0x24
 80073ac:	2102      	movs	r1, #2
 80073ae:	4618      	mov	r0, r3
 80073b0:	f001 facc 	bl	800894c <RCCEx_PLL3_Config>
 80073b4:	4603      	mov	r3, r0
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d001      	beq.n	80073be <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 80073ba:	2301      	movs	r3, #1
 80073bc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d030      	beq.n	800742c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80073ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80073d2:	d017      	beq.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80073d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80073d8:	d811      	bhi.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 80073da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073de:	d013      	beq.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 80073e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073e4:	d80b      	bhi.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d010      	beq.n	800740c <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 80073ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073ee:	d106      	bne.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073f0:	4b3b      	ldr	r3, [pc, #236]	; (80074e0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80073f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073f4:	4a3a      	ldr	r2, [pc, #232]	; (80074e0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80073f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80073fc:	e007      	b.n	800740e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80073fe:	2301      	movs	r3, #1
 8007400:	75fb      	strb	r3, [r7, #23]
      break;
 8007402:	e004      	b.n	800740e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8007404:	bf00      	nop
 8007406:	e002      	b.n	800740e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8007408:	bf00      	nop
 800740a:	e000      	b.n	800740e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800740c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800740e:	7dfb      	ldrb	r3, [r7, #23]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d109      	bne.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007414:	4b32      	ldr	r3, [pc, #200]	; (80074e0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007418:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007420:	492f      	ldr	r1, [pc, #188]	; (80074e0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007422:	4313      	orrs	r3, r2
 8007424:	654b      	str	r3, [r1, #84]	; 0x54
 8007426:	e001      	b.n	800742c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007428:	7dfb      	ldrb	r3, [r7, #23]
 800742a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007434:	2b00      	cmp	r3, #0
 8007436:	d008      	beq.n	800744a <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007438:	4b29      	ldr	r3, [pc, #164]	; (80074e0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800743a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800743c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007444:	4926      	ldr	r1, [pc, #152]	; (80074e0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007446:	4313      	orrs	r3, r2
 8007448:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007452:	2b00      	cmp	r3, #0
 8007454:	d008      	beq.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007456:	4b22      	ldr	r3, [pc, #136]	; (80074e0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007458:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800745a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007462:	491f      	ldr	r1, [pc, #124]	; (80074e0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007464:	4313      	orrs	r3, r2
 8007466:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007470:	2b00      	cmp	r3, #0
 8007472:	d00d      	beq.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007474:	4b1a      	ldr	r3, [pc, #104]	; (80074e0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007476:	691b      	ldr	r3, [r3, #16]
 8007478:	4a19      	ldr	r2, [pc, #100]	; (80074e0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800747a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800747e:	6113      	str	r3, [r2, #16]
 8007480:	4b17      	ldr	r3, [pc, #92]	; (80074e0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007482:	691a      	ldr	r2, [r3, #16]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800748a:	4915      	ldr	r1, [pc, #84]	; (80074e0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800748c:	4313      	orrs	r3, r2
 800748e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	2b00      	cmp	r3, #0
 8007496:	da08      	bge.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007498:	4b11      	ldr	r3, [pc, #68]	; (80074e0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800749a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800749c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074a4:	490e      	ldr	r1, [pc, #56]	; (80074e0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80074a6:	4313      	orrs	r3, r2
 80074a8:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d009      	beq.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80074b6:	4b0a      	ldr	r3, [pc, #40]	; (80074e0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80074b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074ba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074c4:	4906      	ldr	r1, [pc, #24]	; (80074e0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80074c6:	4313      	orrs	r3, r2
 80074c8:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80074ca:	7dbb      	ldrb	r3, [r7, #22]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d101      	bne.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 80074d0:	2300      	movs	r3, #0
 80074d2:	e000      	b.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 80074d4:	2301      	movs	r3, #1
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3718      	adds	r7, #24
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}
 80074de:	bf00      	nop
 80074e0:	58024400 	.word	0x58024400

080074e4 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @retval None
  *
  *   (*) : Available on some STM32H7 lines only.
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b083      	sub	sp, #12
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection =
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	4aa2      	ldr	r2, [pc, #648]	; (8007778 <HAL_RCCEx_GetPeriphCLKConfig+0x294>)
 80074f0:	601a      	str	r2, [r3, #0]
	         RCC_PERIPHCLK_ADC     | RCC_PERIPHCLK_SWPMI1      | RCC_PERIPHCLK_DFSDM1  | RCC_PERIPHCLK_RTC      |
	         RCC_PERIPHCLK_CEC     | RCC_PERIPHCLK_FMC         | RCC_PERIPHCLK_SPDIFRX | RCC_PERIPHCLK_TIM      |
	         RCC_PERIPHCLK_CKPER;

#if defined(I2C5)
PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_I2C1235;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f043 0208 	orr.w	r2, r3, #8
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	601a      	str	r2, [r3, #0]
#endif /* RCC_CDCCIP1R_SAI2BSEL */
#if defined(SAI3)	 
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SAI23;
#endif /* SAI3 */
#if defined(SAI4)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SAI4A;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	601a      	str	r2, [r3, #0]
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SAI4B;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	601a      	str	r2, [r3, #0]
#endif /* DFSDM2 */
#if defined(QUADSPI)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_QSPI;
#endif /* QUADSPI */
#if defined(OCTOSPI1) || defined(OCTOSPI2)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_OSPI;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	601a      	str	r2, [r3, #0]
#endif /* OCTOSPI1 || OCTOSPI2 */
#if defined(HRTIM1)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_HRTIM1;
#endif /* HRTIM1 */
#if defined(LTDC)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_LTDC;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	601a      	str	r2, [r3, #0]
#if defined(DSI)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_DSI;
#endif /* DSI */

  /* Get the PLL3 Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLL3.PLL3M = (uint32_t)((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> RCC_PLLCKSELR_DIVM3_Pos);
 800752e:	4b93      	ldr	r3, [pc, #588]	; (800777c <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007532:	0d1b      	lsrs	r3, r3, #20
 8007534:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	625a      	str	r2, [r3, #36]	; 0x24
  PeriphClkInit->PLL3.PLL3N = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) >> RCC_PLL3DIVR_N3_Pos)+ 1U;
 800753c:	4b8f      	ldr	r3, [pc, #572]	; (800777c <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800753e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007540:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007544:	1c5a      	adds	r2, r3, #1
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInit->PLL3.PLL3R = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> RCC_PLL3DIVR_R3_Pos)+ 1U;
 800754a:	4b8c      	ldr	r3, [pc, #560]	; (800777c <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800754c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800754e:	0e1b      	lsrs	r3, r3, #24
 8007550:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007554:	1c5a      	adds	r2, r3, #1
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	635a      	str	r2, [r3, #52]	; 0x34
  PeriphClkInit->PLL3.PLL3P = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> RCC_PLL3DIVR_P3_Pos)+ 1U;
 800755a:	4b88      	ldr	r3, [pc, #544]	; (800777c <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800755c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800755e:	0a5b      	lsrs	r3, r3, #9
 8007560:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007564:	1c5a      	adds	r2, r3, #1
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	62da      	str	r2, [r3, #44]	; 0x2c
  PeriphClkInit->PLL3.PLL3Q = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> RCC_PLL3DIVR_Q3_Pos)+ 1U;
 800756a:	4b84      	ldr	r3, [pc, #528]	; (800777c <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800756c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800756e:	0c1b      	lsrs	r3, r3, #16
 8007570:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007574:	1c5a      	adds	r2, r3, #1
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	631a      	str	r2, [r3, #48]	; 0x30
  PeriphClkInit->PLL3.PLL3RGE = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL3RGE) >> RCC_PLLCFGR_PLL3RGE_Pos);
 800757a:	4b80      	ldr	r3, [pc, #512]	; (800777c <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800757c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800757e:	0a9b      	lsrs	r3, r3, #10
 8007580:	f003 0203 	and.w	r2, r3, #3
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	639a      	str	r2, [r3, #56]	; 0x38
  PeriphClkInit->PLL3.PLL3VCOSEL = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL3VCOSEL) >> RCC_PLLCFGR_PLL3VCOSEL_Pos);
 8007588:	4b7c      	ldr	r3, [pc, #496]	; (800777c <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800758a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800758c:	0a5b      	lsrs	r3, r3, #9
 800758e:	f003 0201 	and.w	r2, r3, #1
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Get the PLL2 Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLL2.PLL2M = (uint32_t)((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> RCC_PLLCKSELR_DIVM2_Pos);
 8007596:	4b79      	ldr	r3, [pc, #484]	; (800777c <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800759a:	0b1b      	lsrs	r3, r3, #12
 800759c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLL2.PLL2N = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) >> RCC_PLL2DIVR_N2_Pos)+ 1U;
 80075a4:	4b75      	ldr	r3, [pc, #468]	; (800777c <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 80075a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075ac:	1c5a      	adds	r2, r3, #1
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	609a      	str	r2, [r3, #8]
  PeriphClkInit->PLL2.PLL2R = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> RCC_PLL2DIVR_R2_Pos)+ 1U;
 80075b2:	4b72      	ldr	r3, [pc, #456]	; (800777c <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 80075b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075b6:	0e1b      	lsrs	r3, r3, #24
 80075b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075bc:	1c5a      	adds	r2, r3, #1
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLL2.PLL2P = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> RCC_PLL2DIVR_P2_Pos)+ 1U;
 80075c2:	4b6e      	ldr	r3, [pc, #440]	; (800777c <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 80075c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075c6:	0a5b      	lsrs	r3, r3, #9
 80075c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075cc:	1c5a      	adds	r2, r3, #1
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLL2.PLL2Q = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> RCC_PLL2DIVR_Q2_Pos)+ 1U;
 80075d2:	4b6a      	ldr	r3, [pc, #424]	; (800777c <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 80075d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075d6:	0c1b      	lsrs	r3, r3, #16
 80075d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075dc:	1c5a      	adds	r2, r3, #1
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLL2.PLL2RGE = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL2RGE) >> RCC_PLLCFGR_PLL2RGE_Pos);
 80075e2:	4b66      	ldr	r3, [pc, #408]	; (800777c <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 80075e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075e6:	099b      	lsrs	r3, r3, #6
 80075e8:	f003 0203 	and.w	r2, r3, #3
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLL2.PLL2VCOSEL = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL2VCOSEL) >> RCC_PLLCFGR_PLL2VCOSEL_Pos);
 80075f0:	4b62      	ldr	r3, [pc, #392]	; (800777c <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 80075f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075f4:	095b      	lsrs	r3, r3, #5
 80075f6:	f003 0201 	and.w	r2, r3, #1
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	61da      	str	r2, [r3, #28]

  /* Get the USART1 configuration --------------------------------------------*/
  PeriphClkInit->Usart16ClockSelection      = __HAL_RCC_GET_USART16_SOURCE();
 80075fe:	4b5f      	ldr	r3, [pc, #380]	; (800777c <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007602:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	675a      	str	r2, [r3, #116]	; 0x74
  /* Get the USART2/3/4/5/7/8 clock source -----------------------------------*/
  PeriphClkInit->Usart234578ClockSelection  = __HAL_RCC_GET_USART234578_SOURCE();
 800760a:	4b5c      	ldr	r3, [pc, #368]	; (800777c <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800760c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800760e:	f003 0207 	and.w	r2, r3, #7
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	671a      	str	r2, [r3, #112]	; 0x70
  /* Get the LPUART1 clock source --------------------------------------------*/
  PeriphClkInit->Lpuart1ClockSelection      = __HAL_RCC_GET_LPUART1_SOURCE();
 8007616:	4b59      	ldr	r3, [pc, #356]	; (800777c <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800761a:	f003 0207 	and.w	r2, r3, #7
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if defined(I2C5)
  /* Get the I2C1/2/3/5 clock source -----------------------------------------*/
  PeriphClkInit->I2c1235ClockSelection       = __HAL_RCC_GET_I2C1_SOURCE();
 8007624:	4b55      	ldr	r3, [pc, #340]	; (800777c <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007628:	f403 5240 	and.w	r2, r3, #12288	; 0x3000
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	67da      	str	r2, [r3, #124]	; 0x7c
#else
  /* Get the I2C1/2/3 clock source -------------------------------------------*/
  PeriphClkInit->I2c123ClockSelection       = __HAL_RCC_GET_I2C1_SOURCE();
#endif /*I2C5*/
  /* Get the LPTIM1 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection       = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007630:	4b52      	ldr	r3, [pc, #328]	; (800777c <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007634:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  /* Get the LPTIM2 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim2ClockSelection       = __HAL_RCC_GET_LPTIM2_SOURCE();
 800763e:	4b4f      	ldr	r3, [pc, #316]	; (800777c <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007642:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  /* Get the LPTIM3/4/5 clock source -----------------------------------------*/
  PeriphClkInit->Lptim345ClockSelection     = __HAL_RCC_GET_LPTIM345_SOURCE();
 800764c:	4b4b      	ldr	r3, [pc, #300]	; (800777c <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800764e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007650:	f403 4260 	and.w	r2, r3, #57344	; 0xe000
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  /* Get the SAI1 clock source -----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection         = __HAL_RCC_GET_SAI1_SOURCE();
 800765a:	4b48      	ldr	r3, [pc, #288]	; (800777c <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800765c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800765e:	f003 0207 	and.w	r2, r3, #7
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	655a      	str	r2, [r3, #84]	; 0x54
  /* Get the SAI2B clock source ---------------------------------------------*/
  PeriphClkInit->Sai2BClockSelection        = __HAL_RCC_GET_SAI2B_SOURCE();
#endif  /*SAI2B*/
#if defined(SAI4)
  /* Get the SAI4A clock source ----------------------------------------------*/
  PeriphClkInit->Sai4AClockSelection        = __HAL_RCC_GET_SAI4A_SOURCE();
 8007666:	4b45      	ldr	r3, [pc, #276]	; (800777c <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800766a:	f403 0260 	and.w	r2, r3, #14680064	; 0xe00000
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  /* Get the SAI4B clock source ----------------------------------------------*/
  PeriphClkInit->Sai4BClockSelection        = __HAL_RCC_GET_SAI4B_SOURCE();
 8007674:	4b41      	ldr	r3, [pc, #260]	; (800777c <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007678:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
#endif  /*SAI4*/
  /* Get the RTC clock source ------------------------------------------------*/
  PeriphClkInit->RTCClockSelection          = __HAL_RCC_GET_RTC_SOURCE();
 8007682:	4b3e      	ldr	r3, [pc, #248]	; (800777c <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007686:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  /* Get the USB clock source ------------------------------------------------*/
  PeriphClkInit->UsbClockSelection          = __HAL_RCC_GET_USB_SOURCE();
 8007690:	4b3a      	ldr	r3, [pc, #232]	; (800777c <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007694:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  /* Get the SDMMC clock source ----------------------------------------------*/
  PeriphClkInit->SdmmcClockSelection        = __HAL_RCC_GET_SDMMC_SOURCE();
 800769e:	4b37      	ldr	r3, [pc, #220]	; (800777c <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 80076a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076a2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Get the RNG clock source ------------------------------------------------*/
  PeriphClkInit->RngClockSelection          = __HAL_RCC_GET_RNG_SOURCE();
 80076aa:	4b34      	ldr	r3, [pc, #208]	; (800777c <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 80076ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076ae:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	679a      	str	r2, [r3, #120]	; 0x78
#if defined(HRTIM1)
  /* Get the HRTIM1 clock source ---------------------------------------------*/
  PeriphClkInit->Hrtim1ClockSelection       = __HAL_RCC_GET_HRTIM1_SOURCE();
#endif /* HRTIM1 */
  /* Get the ADC clock source ------------------------------------------------*/
  PeriphClkInit->AdcClockSelection          = __HAL_RCC_GET_ADC_SOURCE();
 80076b6:	4b31      	ldr	r3, [pc, #196]	; (800777c <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 80076b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  /* Get the SWPMI1 clock source ---------------------------------------------*/
  PeriphClkInit->Swpmi1ClockSelection       = __HAL_RCC_GET_SWPMI1_SOURCE();
 80076c4:	4b2d      	ldr	r3, [pc, #180]	; (800777c <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 80076c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076c8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	66da      	str	r2, [r3, #108]	; 0x6c
  /* Get the DFSDM1 clock source ---------------------------------------------*/
  PeriphClkInit->Dfsdm1ClockSelection       = __HAL_RCC_GET_DFSDM1_SOURCE();
 80076d0:	4b2a      	ldr	r3, [pc, #168]	; (800777c <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 80076d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076d4:	f003 7280 	and.w	r2, r3, #16777216	; 0x1000000
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	665a      	str	r2, [r3, #100]	; 0x64
#if defined(DFSDM2_BASE)
  /* Get the DFSDM2 clock source ---------------------------------------------*/
  PeriphClkInit->Dfsdm2ClockSelection       = __HAL_RCC_GET_DFSDM2_SOURCE();
#endif /* DFSDM2 */
  /* Get the SPDIFRX clock source --------------------------------------------*/
  PeriphClkInit->SpdifrxClockSelection      = __HAL_RCC_GET_SPDIFRX_SOURCE();
 80076dc:	4b27      	ldr	r3, [pc, #156]	; (800777c <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 80076de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076e0:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	661a      	str	r2, [r3, #96]	; 0x60
  /* Get the SPI1/2/3 clock source -------------------------------------------*/
  PeriphClkInit->Spi123ClockSelection       = __HAL_RCC_GET_SPI123_SOURCE();
 80076e8:	4b24      	ldr	r3, [pc, #144]	; (800777c <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 80076ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076ec:	f403 42e0 	and.w	r2, r3, #28672	; 0x7000
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	659a      	str	r2, [r3, #88]	; 0x58
  /* Get the SPI4/5 clock source ---------------------------------------------*/
  PeriphClkInit->Spi45ClockSelection        = __HAL_RCC_GET_SPI45_SOURCE();
 80076f4:	4b21      	ldr	r3, [pc, #132]	; (800777c <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 80076f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076f8:	f403 22e0 	and.w	r2, r3, #458752	; 0x70000
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Get the SPI6 clock source -----------------------------------------------*/
  PeriphClkInit->Spi6ClockSelection         = __HAL_RCC_GET_SPI6_SOURCE();
 8007700:	4b1e      	ldr	r3, [pc, #120]	; (800777c <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007704:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  /* Get the FDCAN clock source ----------------------------------------------*/
  PeriphClkInit->FdcanClockSelection        = __HAL_RCC_GET_FDCAN_SOURCE();
 800770e:	4b1b      	ldr	r3, [pc, #108]	; (800777c <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007710:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007712:	f003 5240 	and.w	r2, r3, #805306368	; 0x30000000
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	669a      	str	r2, [r3, #104]	; 0x68
  /* Get the CEC clock source ------------------------------------------------*/
  PeriphClkInit->CecClockSelection          = __HAL_RCC_GET_CEC_SOURCE();
 800771a:	4b18      	ldr	r3, [pc, #96]	; (800777c <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800771c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800771e:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  /* Get the FMC clock source ------------------------------------------------*/
  PeriphClkInit->FmcClockSelection          = __HAL_RCC_GET_FMC_SOURCE();
 8007728:	4b14      	ldr	r3, [pc, #80]	; (800777c <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800772a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800772c:	f003 0203 	and.w	r2, r3, #3
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	645a      	str	r2, [r3, #68]	; 0x44
  /* Get the QSPI clock source -----------------------------------------------*/
  PeriphClkInit->QspiClockSelection         = __HAL_RCC_GET_QSPI_SOURCE();
#endif /* QUADSPI */
#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /* Get the OSPI clock source -----------------------------------------------*/
  PeriphClkInit->OspiClockSelection         = __HAL_RCC_GET_OSPI_SOURCE();
 8007734:	4b11      	ldr	r3, [pc, #68]	; (800777c <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007736:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007738:	f003 0230 	and.w	r2, r3, #48	; 0x30
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	649a      	str	r2, [r3, #72]	; 0x48
  /* Get the DSI clock source ------------------------------------------------*/
  PeriphClkInit->DsiClockSelection          = __HAL_RCC_GET_DSI_SOURCE();
#endif /*DSI*/

  /* Get the CKPER clock source ----------------------------------------------*/
  PeriphClkInit->CkperClockSelection        = __HAL_RCC_GET_CLKP_SOURCE();
 8007740:	4b0e      	ldr	r3, [pc, #56]	; (800777c <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007742:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007744:	f003 5240 	and.w	r2, r3, #805306368	; 0x30000000
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Get the TIM Prescaler configuration -------------------------------------*/
  if ((RCC->CFGR & RCC_CFGR_TIMPRE) == 0U)
 800774c:	4b0b      	ldr	r3, [pc, #44]	; (800777c <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800774e:	691b      	ldr	r3, [r3, #16]
 8007750:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007754:	2b00      	cmp	r3, #0
 8007756:	d104      	bne.n	8007762 <HAL_RCCEx_GetPeriphCLKConfig+0x27e>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2200      	movs	r2, #0
 800775c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 8007760:	e004      	b.n	800776c <HAL_RCCEx_GetPeriphCLKConfig+0x288>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8007768:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800776c:	bf00      	nop
 800776e:	370c      	adds	r7, #12
 8007770:	46bd      	mov	sp, r7
 8007772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007776:	4770      	bx	lr
 8007778:	c9fff1f7 	.word	0xc9fff1f7
 800777c:	58024400 	.word	0x58024400

08007780 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b090      	sub	sp, #64	; 0x40
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800778e:	f040 8089 	bne.w	80078a4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8007792:	4b95      	ldr	r3, [pc, #596]	; (80079e8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007794:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007796:	f003 0307 	and.w	r3, r3, #7
 800779a:	633b      	str	r3, [r7, #48]	; 0x30
 800779c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800779e:	2b04      	cmp	r3, #4
 80077a0:	d87d      	bhi.n	800789e <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 80077a2:	a201      	add	r2, pc, #4	; (adr r2, 80077a8 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 80077a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077a8:	080077bd 	.word	0x080077bd
 80077ac:	080077e1 	.word	0x080077e1
 80077b0:	08007805 	.word	0x08007805
 80077b4:	08007899 	.word	0x08007899
 80077b8:	08007829 	.word	0x08007829

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80077bc:	4b8a      	ldr	r3, [pc, #552]	; (80079e8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80077c8:	d107      	bne.n	80077da <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80077ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80077ce:	4618      	mov	r0, r3
 80077d0:	f000 feb8 	bl	8008544 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 80077d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077d6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80077d8:	e3ed      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80077da:	2300      	movs	r3, #0
 80077dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80077de:	e3ea      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80077e0:	4b81      	ldr	r3, [pc, #516]	; (80079e8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80077e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80077ec:	d107      	bne.n	80077fe <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80077ee:	f107 0318 	add.w	r3, r7, #24
 80077f2:	4618      	mov	r0, r3
 80077f4:	f000 fbfe 	bl	8007ff4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80077f8:	69bb      	ldr	r3, [r7, #24]
 80077fa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80077fc:	e3db      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80077fe:	2300      	movs	r3, #0
 8007800:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007802:	e3d8      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007804:	4b78      	ldr	r3, [pc, #480]	; (80079e8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800780c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007810:	d107      	bne.n	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007812:	f107 030c 	add.w	r3, r7, #12
 8007816:	4618      	mov	r0, r3
 8007818:	f000 fd40 	bl	800829c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007820:	e3c9      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007822:	2300      	movs	r3, #0
 8007824:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007826:	e3c6      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007828:	4b6f      	ldr	r3, [pc, #444]	; (80079e8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800782a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800782c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007830:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007832:	4b6d      	ldr	r3, [pc, #436]	; (80079e8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f003 0304 	and.w	r3, r3, #4
 800783a:	2b04      	cmp	r3, #4
 800783c:	d10c      	bne.n	8007858 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800783e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007840:	2b00      	cmp	r3, #0
 8007842:	d109      	bne.n	8007858 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007844:	4b68      	ldr	r3, [pc, #416]	; (80079e8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	08db      	lsrs	r3, r3, #3
 800784a:	f003 0303 	and.w	r3, r3, #3
 800784e:	4a67      	ldr	r2, [pc, #412]	; (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8007850:	fa22 f303 	lsr.w	r3, r2, r3
 8007854:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007856:	e01e      	b.n	8007896 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007858:	4b63      	ldr	r3, [pc, #396]	; (80079e8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007860:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007864:	d106      	bne.n	8007874 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8007866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007868:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800786c:	d102      	bne.n	8007874 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800786e:	4b60      	ldr	r3, [pc, #384]	; (80079f0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007870:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007872:	e010      	b.n	8007896 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007874:	4b5c      	ldr	r3, [pc, #368]	; (80079e8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800787c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007880:	d106      	bne.n	8007890 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8007882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007884:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007888:	d102      	bne.n	8007890 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800788a:	4b5a      	ldr	r3, [pc, #360]	; (80079f4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800788c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800788e:	e002      	b.n	8007896 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007890:	2300      	movs	r3, #0
 8007892:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007894:	e38f      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8007896:	e38e      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007898:	4b57      	ldr	r3, [pc, #348]	; (80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800789a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800789c:	e38b      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800789e:	2300      	movs	r3, #0
 80078a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80078a2:	e388      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078aa:	f040 80a7 	bne.w	80079fc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 80078ae:	4b4e      	ldr	r3, [pc, #312]	; (80079e8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80078b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078b2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80078b6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80078b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80078be:	d054      	beq.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 80078c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80078c6:	f200 808b 	bhi.w	80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 80078ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078cc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80078d0:	f000 8083 	beq.w	80079da <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80078d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078d6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80078da:	f200 8081 	bhi.w	80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 80078de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80078e4:	d02f      	beq.n	8007946 <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 80078e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80078ec:	d878      	bhi.n	80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 80078ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d004      	beq.n	80078fe <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 80078f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80078fa:	d012      	beq.n	8007922 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 80078fc:	e070      	b.n	80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80078fe:	4b3a      	ldr	r3, [pc, #232]	; (80079e8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007906:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800790a:	d107      	bne.n	800791c <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800790c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007910:	4618      	mov	r0, r3
 8007912:	f000 fe17 	bl	8008544 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007918:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800791a:	e34c      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800791c:	2300      	movs	r3, #0
 800791e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007920:	e349      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007922:	4b31      	ldr	r3, [pc, #196]	; (80079e8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800792a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800792e:	d107      	bne.n	8007940 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007930:	f107 0318 	add.w	r3, r7, #24
 8007934:	4618      	mov	r0, r3
 8007936:	f000 fb5d 	bl	8007ff4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800793a:	69bb      	ldr	r3, [r7, #24]
 800793c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800793e:	e33a      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007940:	2300      	movs	r3, #0
 8007942:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007944:	e337      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007946:	4b28      	ldr	r3, [pc, #160]	; (80079e8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800794e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007952:	d107      	bne.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007954:	f107 030c 	add.w	r3, r7, #12
 8007958:	4618      	mov	r0, r3
 800795a:	f000 fc9f 	bl	800829c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007962:	e328      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007964:	2300      	movs	r3, #0
 8007966:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007968:	e325      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800796a:	4b1f      	ldr	r3, [pc, #124]	; (80079e8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800796c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800796e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007972:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007974:	4b1c      	ldr	r3, [pc, #112]	; (80079e8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f003 0304 	and.w	r3, r3, #4
 800797c:	2b04      	cmp	r3, #4
 800797e:	d10c      	bne.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 8007980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007982:	2b00      	cmp	r3, #0
 8007984:	d109      	bne.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007986:	4b18      	ldr	r3, [pc, #96]	; (80079e8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	08db      	lsrs	r3, r3, #3
 800798c:	f003 0303 	and.w	r3, r3, #3
 8007990:	4a16      	ldr	r2, [pc, #88]	; (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8007992:	fa22 f303 	lsr.w	r3, r2, r3
 8007996:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007998:	e01e      	b.n	80079d8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800799a:	4b13      	ldr	r3, [pc, #76]	; (80079e8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079a6:	d106      	bne.n	80079b6 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 80079a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80079ae:	d102      	bne.n	80079b6 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80079b0:	4b0f      	ldr	r3, [pc, #60]	; (80079f0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80079b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80079b4:	e010      	b.n	80079d8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80079b6:	4b0c      	ldr	r3, [pc, #48]	; (80079e8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80079c2:	d106      	bne.n	80079d2 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 80079c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079ca:	d102      	bne.n	80079d2 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80079cc:	4b09      	ldr	r3, [pc, #36]	; (80079f4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80079ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80079d0:	e002      	b.n	80079d8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80079d2:	2300      	movs	r3, #0
 80079d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80079d6:	e2ee      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80079d8:	e2ed      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80079da:	4b07      	ldr	r3, [pc, #28]	; (80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80079dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80079de:	e2ea      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 80079e0:	2300      	movs	r3, #0
 80079e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80079e4:	e2e7      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80079e6:	bf00      	nop
 80079e8:	58024400 	.word	0x58024400
 80079ec:	03d09000 	.word	0x03d09000
 80079f0:	003d0900 	.word	0x003d0900
 80079f4:	017d7840 	.word	0x017d7840
 80079f8:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a02:	f040 809c 	bne.w	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8007a06:	4b9e      	ldr	r3, [pc, #632]	; (8007c80 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a0a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007a0e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a12:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007a16:	d054      	beq.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8007a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a1a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007a1e:	f200 808b 	bhi.w	8007b38 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8007a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a24:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007a28:	f000 8083 	beq.w	8007b32 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8007a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a2e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007a32:	f200 8081 	bhi.w	8007b38 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8007a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a3c:	d02f      	beq.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8007a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a44:	d878      	bhi.n	8007b38 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8007a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d004      	beq.n	8007a56 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8007a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a4e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007a52:	d012      	beq.n	8007a7a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8007a54:	e070      	b.n	8007b38 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007a56:	4b8a      	ldr	r3, [pc, #552]	; (8007c80 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a62:	d107      	bne.n	8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f000 fd6b 	bl	8008544 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a70:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007a72:	e2a0      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007a74:	2300      	movs	r3, #0
 8007a76:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a78:	e29d      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007a7a:	4b81      	ldr	r3, [pc, #516]	; (8007c80 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007a86:	d107      	bne.n	8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a88:	f107 0318 	add.w	r3, r7, #24
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	f000 fab1 	bl	8007ff4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007a92:	69bb      	ldr	r3, [r7, #24]
 8007a94:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8007a96:	e28e      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a9c:	e28b      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007a9e:	4b78      	ldr	r3, [pc, #480]	; (8007c80 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007aa6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007aaa:	d107      	bne.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007aac:	f107 030c 	add.w	r3, r7, #12
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f000 fbf3 	bl	800829c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007aba:	e27c      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007abc:	2300      	movs	r3, #0
 8007abe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ac0:	e279      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007ac2:	4b6f      	ldr	r3, [pc, #444]	; (8007c80 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ac6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007aca:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007acc:	4b6c      	ldr	r3, [pc, #432]	; (8007c80 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f003 0304 	and.w	r3, r3, #4
 8007ad4:	2b04      	cmp	r3, #4
 8007ad6:	d10c      	bne.n	8007af2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8007ad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d109      	bne.n	8007af2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007ade:	4b68      	ldr	r3, [pc, #416]	; (8007c80 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	08db      	lsrs	r3, r3, #3
 8007ae4:	f003 0303 	and.w	r3, r3, #3
 8007ae8:	4a66      	ldr	r2, [pc, #408]	; (8007c84 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007aea:	fa22 f303 	lsr.w	r3, r2, r3
 8007aee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007af0:	e01e      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007af2:	4b63      	ldr	r3, [pc, #396]	; (8007c80 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007afa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007afe:	d106      	bne.n	8007b0e <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 8007b00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b06:	d102      	bne.n	8007b0e <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007b08:	4b5f      	ldr	r3, [pc, #380]	; (8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8007b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b0c:	e010      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007b0e:	4b5c      	ldr	r3, [pc, #368]	; (8007c80 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b16:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b1a:	d106      	bne.n	8007b2a <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8007b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b22:	d102      	bne.n	8007b2a <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007b24:	4b59      	ldr	r3, [pc, #356]	; (8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8007b26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b28:	e002      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007b2e:	e242      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8007b30:	e241      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007b32:	4b57      	ldr	r3, [pc, #348]	; (8007c90 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8007b34:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b36:	e23e      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8007b38:	2300      	movs	r3, #0
 8007b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b3c:	e23b      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b44:	f040 80a6 	bne.w	8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8007b48:	4b4d      	ldr	r3, [pc, #308]	; (8007c80 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007b4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b4c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007b50:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b58:	d054      	beq.n	8007c04 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8007b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b60:	f200 808b 	bhi.w	8007c7a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8007b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b66:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007b6a:	f000 8083 	beq.w	8007c74 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 8007b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b70:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007b74:	f200 8081 	bhi.w	8007c7a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8007b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b7e:	d02f      	beq.n	8007be0 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 8007b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b86:	d878      	bhi.n	8007c7a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8007b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d004      	beq.n	8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8007b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b94:	d012      	beq.n	8007bbc <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 8007b96:	e070      	b.n	8007c7a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007b98:	4b39      	ldr	r3, [pc, #228]	; (8007c80 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ba0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007ba4:	d107      	bne.n	8007bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007ba6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007baa:	4618      	mov	r0, r3
 8007bac:	f000 fcca 	bl	8008544 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007bb4:	e1ff      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007bba:	e1fc      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007bbc:	4b30      	ldr	r3, [pc, #192]	; (8007c80 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007bc4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007bc8:	d107      	bne.n	8007bda <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007bca:	f107 0318 	add.w	r3, r7, #24
 8007bce:	4618      	mov	r0, r3
 8007bd0:	f000 fa10 	bl	8007ff4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007bd4:	69bb      	ldr	r3, [r7, #24]
 8007bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007bd8:	e1ed      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007bde:	e1ea      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007be0:	4b27      	ldr	r3, [pc, #156]	; (8007c80 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007be8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007bec:	d107      	bne.n	8007bfe <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007bee:	f107 030c 	add.w	r3, r7, #12
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f000 fb52 	bl	800829c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007bfc:	e1db      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c02:	e1d8      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007c04:	4b1e      	ldr	r3, [pc, #120]	; (8007c80 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007c06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c08:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007c0c:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007c0e:	4b1c      	ldr	r3, [pc, #112]	; (8007c80 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f003 0304 	and.w	r3, r3, #4
 8007c16:	2b04      	cmp	r3, #4
 8007c18:	d10c      	bne.n	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 8007c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d109      	bne.n	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007c20:	4b17      	ldr	r3, [pc, #92]	; (8007c80 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	08db      	lsrs	r3, r3, #3
 8007c26:	f003 0303 	and.w	r3, r3, #3
 8007c2a:	4a16      	ldr	r2, [pc, #88]	; (8007c84 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007c2c:	fa22 f303 	lsr.w	r3, r2, r3
 8007c30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c32:	e01e      	b.n	8007c72 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007c34:	4b12      	ldr	r3, [pc, #72]	; (8007c80 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c40:	d106      	bne.n	8007c50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8007c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c48:	d102      	bne.n	8007c50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007c4a:	4b0f      	ldr	r3, [pc, #60]	; (8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8007c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c4e:	e010      	b.n	8007c72 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007c50:	4b0b      	ldr	r3, [pc, #44]	; (8007c80 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c5c:	d106      	bne.n	8007c6c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8007c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c64:	d102      	bne.n	8007c6c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007c66:	4b09      	ldr	r3, [pc, #36]	; (8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8007c68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c6a:	e002      	b.n	8007c72 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007c70:	e1a1      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8007c72:	e1a0      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007c74:	4b06      	ldr	r3, [pc, #24]	; (8007c90 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8007c76:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c78:	e19d      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c7e:	e19a      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8007c80:	58024400 	.word	0x58024400
 8007c84:	03d09000 	.word	0x03d09000
 8007c88:	003d0900 	.word	0x003d0900
 8007c8c:	017d7840 	.word	0x017d7840
 8007c90:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007c9a:	d173      	bne.n	8007d84 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8007c9c:	4b9a      	ldr	r3, [pc, #616]	; (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ca0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007ca4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ca8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007cac:	d02f      	beq.n	8007d0e <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8007cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007cb4:	d863      	bhi.n	8007d7e <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8007cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d004      	beq.n	8007cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 8007cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cc2:	d012      	beq.n	8007cea <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 8007cc4:	e05b      	b.n	8007d7e <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007cc6:	4b90      	ldr	r3, [pc, #576]	; (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007cce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007cd2:	d107      	bne.n	8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007cd4:	f107 0318 	add.w	r3, r7, #24
 8007cd8:	4618      	mov	r0, r3
 8007cda:	f000 f98b 	bl	8007ff4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007cde:	69bb      	ldr	r3, [r7, #24]
 8007ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007ce2:	e168      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ce8:	e165      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007cea:	4b87      	ldr	r3, [pc, #540]	; (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007cf2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007cf6:	d107      	bne.n	8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007cf8:	f107 030c 	add.w	r3, r7, #12
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	f000 facd 	bl	800829c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007d06:	e156      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d0c:	e153      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007d0e:	4b7e      	ldr	r3, [pc, #504]	; (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d12:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007d16:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007d18:	4b7b      	ldr	r3, [pc, #492]	; (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f003 0304 	and.w	r3, r3, #4
 8007d20:	2b04      	cmp	r3, #4
 8007d22:	d10c      	bne.n	8007d3e <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 8007d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d109      	bne.n	8007d3e <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007d2a:	4b77      	ldr	r3, [pc, #476]	; (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	08db      	lsrs	r3, r3, #3
 8007d30:	f003 0303 	and.w	r3, r3, #3
 8007d34:	4a75      	ldr	r2, [pc, #468]	; (8007f0c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8007d36:	fa22 f303 	lsr.w	r3, r2, r3
 8007d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d3c:	e01e      	b.n	8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007d3e:	4b72      	ldr	r3, [pc, #456]	; (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d4a:	d106      	bne.n	8007d5a <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8007d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d52:	d102      	bne.n	8007d5a <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007d54:	4b6e      	ldr	r3, [pc, #440]	; (8007f10 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8007d56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d58:	e010      	b.n	8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007d5a:	4b6b      	ldr	r3, [pc, #428]	; (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d62:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d66:	d106      	bne.n	8007d76 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8007d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d6e:	d102      	bne.n	8007d76 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007d70:	4b68      	ldr	r3, [pc, #416]	; (8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8007d72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d74:	e002      	b.n	8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007d76:	2300      	movs	r3, #0
 8007d78:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007d7a:	e11c      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8007d7c:	e11b      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8007d7e:	2300      	movs	r3, #0
 8007d80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d82:	e118      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d8a:	d133      	bne.n	8007df4 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8007d8c:	4b5e      	ldr	r3, [pc, #376]	; (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007d8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d94:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d004      	beq.n	8007da6 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8007d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007da2:	d012      	beq.n	8007dca <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 8007da4:	e023      	b.n	8007dee <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007da6:	4b58      	ldr	r3, [pc, #352]	; (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007dae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007db2:	d107      	bne.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007db4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007db8:	4618      	mov	r0, r3
 8007dba:	f000 fbc3 	bl	8008544 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007dc2:	e0f8      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007dc8:	e0f5      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007dca:	4b4f      	ldr	r3, [pc, #316]	; (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007dd2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007dd6:	d107      	bne.n	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007dd8:	f107 0318 	add.w	r3, r7, #24
 8007ddc:	4618      	mov	r0, r3
 8007dde:	f000 f909 	bl	8007ff4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007de2:	6a3b      	ldr	r3, [r7, #32]
 8007de4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007de6:	e0e6      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8007de8:	2300      	movs	r3, #0
 8007dea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007dec:	e0e3      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8007dee:	2300      	movs	r3, #0
 8007df0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007df2:	e0e0      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007dfa:	f040 808d 	bne.w	8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8007dfe:	4b42      	ldr	r3, [pc, #264]	; (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e02:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8007e06:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e0e:	d06b      	beq.n	8007ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 8007e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e16:	d874      	bhi.n	8007f02 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8007e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e1e:	d056      	beq.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8007e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e26:	d86c      	bhi.n	8007f02 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8007e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e2a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007e2e:	d03b      	beq.n	8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 8007e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e32:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007e36:	d864      	bhi.n	8007f02 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8007e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e3e:	d021      	beq.n	8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8007e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e46:	d85c      	bhi.n	8007f02 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8007e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d004      	beq.n	8007e58 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8007e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e54:	d004      	beq.n	8007e60 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8007e56:	e054      	b.n	8007f02 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007e58:	f000 f8b6 	bl	8007fc8 <HAL_RCCEx_GetD3PCLK1Freq>
 8007e5c:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8007e5e:	e0aa      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007e60:	4b29      	ldr	r3, [pc, #164]	; (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e6c:	d107      	bne.n	8007e7e <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e6e:	f107 0318 	add.w	r3, r7, #24
 8007e72:	4618      	mov	r0, r3
 8007e74:	f000 f8be 	bl	8007ff4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007e78:	69fb      	ldr	r3, [r7, #28]
 8007e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007e7c:	e09b      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e82:	e098      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007e84:	4b20      	ldr	r3, [pc, #128]	; (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e90:	d107      	bne.n	8007ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e92:	f107 030c 	add.w	r3, r7, #12
 8007e96:	4618      	mov	r0, r3
 8007e98:	f000 fa00 	bl	800829c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007e9c:	693b      	ldr	r3, [r7, #16]
 8007e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007ea0:	e089      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ea6:	e086      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007ea8:	4b17      	ldr	r3, [pc, #92]	; (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f003 0304 	and.w	r3, r3, #4
 8007eb0:	2b04      	cmp	r3, #4
 8007eb2:	d109      	bne.n	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007eb4:	4b14      	ldr	r3, [pc, #80]	; (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	08db      	lsrs	r3, r3, #3
 8007eba:	f003 0303 	and.w	r3, r3, #3
 8007ebe:	4a13      	ldr	r2, [pc, #76]	; (8007f0c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8007ec0:	fa22 f303 	lsr.w	r3, r2, r3
 8007ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007ec6:	e076      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8007ec8:	2300      	movs	r3, #0
 8007eca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ecc:	e073      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007ece:	4b0e      	ldr	r3, [pc, #56]	; (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ed6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007eda:	d102      	bne.n	8007ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 8007edc:	4b0c      	ldr	r3, [pc, #48]	; (8007f10 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8007ede:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007ee0:	e069      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ee6:	e066      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007ee8:	4b07      	ldr	r3, [pc, #28]	; (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ef0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ef4:	d102      	bne.n	8007efc <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 8007ef6:	4b07      	ldr	r3, [pc, #28]	; (8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8007ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007efa:	e05c      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8007efc:	2300      	movs	r3, #0
 8007efe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f00:	e059      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8007f02:	2300      	movs	r3, #0
 8007f04:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f06:	e056      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8007f08:	58024400 	.word	0x58024400
 8007f0c:	03d09000 	.word	0x03d09000
 8007f10:	003d0900 	.word	0x003d0900
 8007f14:	017d7840 	.word	0x017d7840
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f1e:	d148      	bne.n	8007fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8007f20:	4b27      	ldr	r3, [pc, #156]	; (8007fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007f22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f24:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007f28:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f30:	d02a      	beq.n	8007f88 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 8007f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f38:	d838      	bhi.n	8007fac <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 8007f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d004      	beq.n	8007f4a <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 8007f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f46:	d00d      	beq.n	8007f64 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 8007f48:	e030      	b.n	8007fac <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007f4a:	4b1d      	ldr	r3, [pc, #116]	; (8007fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f56:	d102      	bne.n	8007f5e <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 8007f58:	4b1a      	ldr	r3, [pc, #104]	; (8007fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8007f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007f5c:	e02b      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f62:	e028      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007f64:	4b16      	ldr	r3, [pc, #88]	; (8007fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f6c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f70:	d107      	bne.n	8007f82 <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007f72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f76:	4618      	mov	r0, r3
 8007f78:	f000 fae4 	bl	8008544 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007f80:	e019      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8007f82:	2300      	movs	r3, #0
 8007f84:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f86:	e016      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007f88:	4b0d      	ldr	r3, [pc, #52]	; (8007fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f94:	d107      	bne.n	8007fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f96:	f107 0318 	add.w	r3, r7, #24
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f000 f82a 	bl	8007ff4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007fa0:	69fb      	ldr	r3, [r7, #28]
 8007fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007fa4:	e007      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007faa:	e004      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8007fac:	2300      	movs	r3, #0
 8007fae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007fb0:	e001      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8007fb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	3740      	adds	r7, #64	; 0x40
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}
 8007fc0:	58024400 	.word	0x58024400
 8007fc4:	017d7840 	.word	0x017d7840

08007fc8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007fcc:	f7fe fb60 	bl	8006690 <HAL_RCC_GetHCLKFreq>
 8007fd0:	4602      	mov	r2, r0
 8007fd2:	4b06      	ldr	r3, [pc, #24]	; (8007fec <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007fd4:	6a1b      	ldr	r3, [r3, #32]
 8007fd6:	091b      	lsrs	r3, r3, #4
 8007fd8:	f003 0307 	and.w	r3, r3, #7
 8007fdc:	4904      	ldr	r1, [pc, #16]	; (8007ff0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007fde:	5ccb      	ldrb	r3, [r1, r3]
 8007fe0:	f003 031f 	and.w	r3, r3, #31
 8007fe4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	bd80      	pop	{r7, pc}
 8007fec:	58024400 	.word	0x58024400
 8007ff0:	0800bf30 	.word	0x0800bf30

08007ff4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b089      	sub	sp, #36	; 0x24
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007ffc:	4ba1      	ldr	r3, [pc, #644]	; (8008284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008000:	f003 0303 	and.w	r3, r3, #3
 8008004:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8008006:	4b9f      	ldr	r3, [pc, #636]	; (8008284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800800a:	0b1b      	lsrs	r3, r3, #12
 800800c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008010:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008012:	4b9c      	ldr	r3, [pc, #624]	; (8008284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008016:	091b      	lsrs	r3, r3, #4
 8008018:	f003 0301 	and.w	r3, r3, #1
 800801c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800801e:	4b99      	ldr	r3, [pc, #612]	; (8008284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008022:	08db      	lsrs	r3, r3, #3
 8008024:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008028:	693a      	ldr	r2, [r7, #16]
 800802a:	fb02 f303 	mul.w	r3, r2, r3
 800802e:	ee07 3a90 	vmov	s15, r3
 8008032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008036:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	2b00      	cmp	r3, #0
 800803e:	f000 8111 	beq.w	8008264 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008042:	69bb      	ldr	r3, [r7, #24]
 8008044:	2b02      	cmp	r3, #2
 8008046:	f000 8083 	beq.w	8008150 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800804a:	69bb      	ldr	r3, [r7, #24]
 800804c:	2b02      	cmp	r3, #2
 800804e:	f200 80a1 	bhi.w	8008194 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008052:	69bb      	ldr	r3, [r7, #24]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d003      	beq.n	8008060 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008058:	69bb      	ldr	r3, [r7, #24]
 800805a:	2b01      	cmp	r3, #1
 800805c:	d056      	beq.n	800810c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800805e:	e099      	b.n	8008194 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008060:	4b88      	ldr	r3, [pc, #544]	; (8008284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f003 0320 	and.w	r3, r3, #32
 8008068:	2b00      	cmp	r3, #0
 800806a:	d02d      	beq.n	80080c8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800806c:	4b85      	ldr	r3, [pc, #532]	; (8008284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	08db      	lsrs	r3, r3, #3
 8008072:	f003 0303 	and.w	r3, r3, #3
 8008076:	4a84      	ldr	r2, [pc, #528]	; (8008288 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008078:	fa22 f303 	lsr.w	r3, r2, r3
 800807c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	ee07 3a90 	vmov	s15, r3
 8008084:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008088:	697b      	ldr	r3, [r7, #20]
 800808a:	ee07 3a90 	vmov	s15, r3
 800808e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008092:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008096:	4b7b      	ldr	r3, [pc, #492]	; (8008284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800809a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800809e:	ee07 3a90 	vmov	s15, r3
 80080a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80080aa:	eddf 5a78 	vldr	s11, [pc, #480]	; 800828c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80080ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080c2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80080c6:	e087      	b.n	80081d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	ee07 3a90 	vmov	s15, r3
 80080ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080d2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008290 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80080d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080da:	4b6a      	ldr	r3, [pc, #424]	; (8008284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080e2:	ee07 3a90 	vmov	s15, r3
 80080e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80080ee:	eddf 5a67 	vldr	s11, [pc, #412]	; 800828c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80080f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008102:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008106:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800810a:	e065      	b.n	80081d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800810c:	697b      	ldr	r3, [r7, #20]
 800810e:	ee07 3a90 	vmov	s15, r3
 8008112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008116:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008294 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800811a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800811e:	4b59      	ldr	r3, [pc, #356]	; (8008284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008126:	ee07 3a90 	vmov	s15, r3
 800812a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800812e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008132:	eddf 5a56 	vldr	s11, [pc, #344]	; 800828c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008136:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800813a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800813e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008142:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008146:	ee67 7a27 	vmul.f32	s15, s14, s15
 800814a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800814e:	e043      	b.n	80081d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	ee07 3a90 	vmov	s15, r3
 8008156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800815a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008298 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800815e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008162:	4b48      	ldr	r3, [pc, #288]	; (8008284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008166:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800816a:	ee07 3a90 	vmov	s15, r3
 800816e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008172:	ed97 6a03 	vldr	s12, [r7, #12]
 8008176:	eddf 5a45 	vldr	s11, [pc, #276]	; 800828c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800817a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800817e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008182:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008186:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800818a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800818e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008192:	e021      	b.n	80081d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	ee07 3a90 	vmov	s15, r3
 800819a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800819e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008294 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80081a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081a6:	4b37      	ldr	r3, [pc, #220]	; (8008284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081ae:	ee07 3a90 	vmov	s15, r3
 80081b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80081ba:	eddf 5a34 	vldr	s11, [pc, #208]	; 800828c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80081be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80081d6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80081d8:	4b2a      	ldr	r3, [pc, #168]	; (8008284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081dc:	0a5b      	lsrs	r3, r3, #9
 80081de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081e2:	ee07 3a90 	vmov	s15, r3
 80081e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80081ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80081f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80081f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80081fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80081fe:	ee17 2a90 	vmov	r2, s15
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008206:	4b1f      	ldr	r3, [pc, #124]	; (8008284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800820a:	0c1b      	lsrs	r3, r3, #16
 800820c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008210:	ee07 3a90 	vmov	s15, r3
 8008214:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008218:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800821c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008220:	edd7 6a07 	vldr	s13, [r7, #28]
 8008224:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008228:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800822c:	ee17 2a90 	vmov	r2, s15
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008234:	4b13      	ldr	r3, [pc, #76]	; (8008284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008238:	0e1b      	lsrs	r3, r3, #24
 800823a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800823e:	ee07 3a90 	vmov	s15, r3
 8008242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008246:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800824a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800824e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008252:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008256:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800825a:	ee17 2a90 	vmov	r2, s15
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008262:	e008      	b.n	8008276 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2200      	movs	r2, #0
 8008268:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2200      	movs	r2, #0
 800826e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2200      	movs	r2, #0
 8008274:	609a      	str	r2, [r3, #8]
}
 8008276:	bf00      	nop
 8008278:	3724      	adds	r7, #36	; 0x24
 800827a:	46bd      	mov	sp, r7
 800827c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008280:	4770      	bx	lr
 8008282:	bf00      	nop
 8008284:	58024400 	.word	0x58024400
 8008288:	03d09000 	.word	0x03d09000
 800828c:	46000000 	.word	0x46000000
 8008290:	4c742400 	.word	0x4c742400
 8008294:	4a742400 	.word	0x4a742400
 8008298:	4bbebc20 	.word	0x4bbebc20

0800829c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800829c:	b480      	push	{r7}
 800829e:	b089      	sub	sp, #36	; 0x24
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80082a4:	4ba1      	ldr	r3, [pc, #644]	; (800852c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082a8:	f003 0303 	and.w	r3, r3, #3
 80082ac:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80082ae:	4b9f      	ldr	r3, [pc, #636]	; (800852c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082b2:	0d1b      	lsrs	r3, r3, #20
 80082b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80082b8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80082ba:	4b9c      	ldr	r3, [pc, #624]	; (800852c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082be:	0a1b      	lsrs	r3, r3, #8
 80082c0:	f003 0301 	and.w	r3, r3, #1
 80082c4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80082c6:	4b99      	ldr	r3, [pc, #612]	; (800852c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082ca:	08db      	lsrs	r3, r3, #3
 80082cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80082d0:	693a      	ldr	r2, [r7, #16]
 80082d2:	fb02 f303 	mul.w	r3, r2, r3
 80082d6:	ee07 3a90 	vmov	s15, r3
 80082da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082de:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	f000 8111 	beq.w	800850c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80082ea:	69bb      	ldr	r3, [r7, #24]
 80082ec:	2b02      	cmp	r3, #2
 80082ee:	f000 8083 	beq.w	80083f8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80082f2:	69bb      	ldr	r3, [r7, #24]
 80082f4:	2b02      	cmp	r3, #2
 80082f6:	f200 80a1 	bhi.w	800843c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80082fa:	69bb      	ldr	r3, [r7, #24]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d003      	beq.n	8008308 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008300:	69bb      	ldr	r3, [r7, #24]
 8008302:	2b01      	cmp	r3, #1
 8008304:	d056      	beq.n	80083b4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008306:	e099      	b.n	800843c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008308:	4b88      	ldr	r3, [pc, #544]	; (800852c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f003 0320 	and.w	r3, r3, #32
 8008310:	2b00      	cmp	r3, #0
 8008312:	d02d      	beq.n	8008370 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008314:	4b85      	ldr	r3, [pc, #532]	; (800852c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	08db      	lsrs	r3, r3, #3
 800831a:	f003 0303 	and.w	r3, r3, #3
 800831e:	4a84      	ldr	r2, [pc, #528]	; (8008530 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008320:	fa22 f303 	lsr.w	r3, r2, r3
 8008324:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	ee07 3a90 	vmov	s15, r3
 800832c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	ee07 3a90 	vmov	s15, r3
 8008336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800833a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800833e:	4b7b      	ldr	r3, [pc, #492]	; (800852c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008346:	ee07 3a90 	vmov	s15, r3
 800834a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800834e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008352:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008534 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008356:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800835a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800835e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008362:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800836a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800836e:	e087      	b.n	8008480 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	ee07 3a90 	vmov	s15, r3
 8008376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800837a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008538 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800837e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008382:	4b6a      	ldr	r3, [pc, #424]	; (800852c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800838a:	ee07 3a90 	vmov	s15, r3
 800838e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008392:	ed97 6a03 	vldr	s12, [r7, #12]
 8008396:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008534 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800839a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800839e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80083b2:	e065      	b.n	8008480 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	ee07 3a90 	vmov	s15, r3
 80083ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083be:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800853c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80083c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083c6:	4b59      	ldr	r3, [pc, #356]	; (800852c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083ce:	ee07 3a90 	vmov	s15, r3
 80083d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80083da:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008534 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80083de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80083f6:	e043      	b.n	8008480 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	ee07 3a90 	vmov	s15, r3
 80083fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008402:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008540 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008406:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800840a:	4b48      	ldr	r3, [pc, #288]	; (800852c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800840c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800840e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008412:	ee07 3a90 	vmov	s15, r3
 8008416:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800841a:	ed97 6a03 	vldr	s12, [r7, #12]
 800841e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008534 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008422:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008426:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800842a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800842e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008436:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800843a:	e021      	b.n	8008480 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	ee07 3a90 	vmov	s15, r3
 8008442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008446:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800853c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800844a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800844e:	4b37      	ldr	r3, [pc, #220]	; (800852c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008456:	ee07 3a90 	vmov	s15, r3
 800845a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800845e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008462:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008534 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008466:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800846a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800846e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008472:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800847a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800847e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008480:	4b2a      	ldr	r3, [pc, #168]	; (800852c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008484:	0a5b      	lsrs	r3, r3, #9
 8008486:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800848a:	ee07 3a90 	vmov	s15, r3
 800848e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008492:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008496:	ee37 7a87 	vadd.f32	s14, s15, s14
 800849a:	edd7 6a07 	vldr	s13, [r7, #28]
 800849e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084a6:	ee17 2a90 	vmov	r2, s15
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80084ae:	4b1f      	ldr	r3, [pc, #124]	; (800852c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084b2:	0c1b      	lsrs	r3, r3, #16
 80084b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084b8:	ee07 3a90 	vmov	s15, r3
 80084bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80084c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80084c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80084cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084d4:	ee17 2a90 	vmov	r2, s15
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80084dc:	4b13      	ldr	r3, [pc, #76]	; (800852c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084e0:	0e1b      	lsrs	r3, r3, #24
 80084e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084e6:	ee07 3a90 	vmov	s15, r3
 80084ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80084f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80084f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80084fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008502:	ee17 2a90 	vmov	r2, s15
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800850a:	e008      	b.n	800851e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2200      	movs	r2, #0
 8008510:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2200      	movs	r2, #0
 8008516:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2200      	movs	r2, #0
 800851c:	609a      	str	r2, [r3, #8]
}
 800851e:	bf00      	nop
 8008520:	3724      	adds	r7, #36	; 0x24
 8008522:	46bd      	mov	sp, r7
 8008524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008528:	4770      	bx	lr
 800852a:	bf00      	nop
 800852c:	58024400 	.word	0x58024400
 8008530:	03d09000 	.word	0x03d09000
 8008534:	46000000 	.word	0x46000000
 8008538:	4c742400 	.word	0x4c742400
 800853c:	4a742400 	.word	0x4a742400
 8008540:	4bbebc20 	.word	0x4bbebc20

08008544 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8008544:	b480      	push	{r7}
 8008546:	b089      	sub	sp, #36	; 0x24
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800854c:	4ba0      	ldr	r3, [pc, #640]	; (80087d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800854e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008550:	f003 0303 	and.w	r3, r3, #3
 8008554:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8008556:	4b9e      	ldr	r3, [pc, #632]	; (80087d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800855a:	091b      	lsrs	r3, r3, #4
 800855c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008560:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008562:	4b9b      	ldr	r3, [pc, #620]	; (80087d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008566:	f003 0301 	and.w	r3, r3, #1
 800856a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800856c:	4b98      	ldr	r3, [pc, #608]	; (80087d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800856e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008570:	08db      	lsrs	r3, r3, #3
 8008572:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008576:	693a      	ldr	r2, [r7, #16]
 8008578:	fb02 f303 	mul.w	r3, r2, r3
 800857c:	ee07 3a90 	vmov	s15, r3
 8008580:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008584:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	2b00      	cmp	r3, #0
 800858c:	f000 8111 	beq.w	80087b2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008590:	69bb      	ldr	r3, [r7, #24]
 8008592:	2b02      	cmp	r3, #2
 8008594:	f000 8083 	beq.w	800869e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008598:	69bb      	ldr	r3, [r7, #24]
 800859a:	2b02      	cmp	r3, #2
 800859c:	f200 80a1 	bhi.w	80086e2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80085a0:	69bb      	ldr	r3, [r7, #24]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d003      	beq.n	80085ae <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80085a6:	69bb      	ldr	r3, [r7, #24]
 80085a8:	2b01      	cmp	r3, #1
 80085aa:	d056      	beq.n	800865a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80085ac:	e099      	b.n	80086e2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80085ae:	4b88      	ldr	r3, [pc, #544]	; (80087d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f003 0320 	and.w	r3, r3, #32
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d02d      	beq.n	8008616 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80085ba:	4b85      	ldr	r3, [pc, #532]	; (80087d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	08db      	lsrs	r3, r3, #3
 80085c0:	f003 0303 	and.w	r3, r3, #3
 80085c4:	4a83      	ldr	r2, [pc, #524]	; (80087d4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80085c6:	fa22 f303 	lsr.w	r3, r2, r3
 80085ca:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	ee07 3a90 	vmov	s15, r3
 80085d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	ee07 3a90 	vmov	s15, r3
 80085dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085e4:	4b7a      	ldr	r3, [pc, #488]	; (80087d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80085e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085ec:	ee07 3a90 	vmov	s15, r3
 80085f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085f4:	ed97 6a03 	vldr	s12, [r7, #12]
 80085f8:	eddf 5a77 	vldr	s11, [pc, #476]	; 80087d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80085fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008600:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008604:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008608:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800860c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008610:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008614:	e087      	b.n	8008726 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	ee07 3a90 	vmov	s15, r3
 800861c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008620:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80087dc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008624:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008628:	4b69      	ldr	r3, [pc, #420]	; (80087d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800862a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800862c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008630:	ee07 3a90 	vmov	s15, r3
 8008634:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008638:	ed97 6a03 	vldr	s12, [r7, #12]
 800863c:	eddf 5a66 	vldr	s11, [pc, #408]	; 80087d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008640:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008644:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008648:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800864c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008650:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008654:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008658:	e065      	b.n	8008726 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	ee07 3a90 	vmov	s15, r3
 8008660:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008664:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80087e0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008668:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800866c:	4b58      	ldr	r3, [pc, #352]	; (80087d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800866e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008670:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008674:	ee07 3a90 	vmov	s15, r3
 8008678:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800867c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008680:	eddf 5a55 	vldr	s11, [pc, #340]	; 80087d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008684:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008688:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800868c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008690:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008694:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008698:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800869c:	e043      	b.n	8008726 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	ee07 3a90 	vmov	s15, r3
 80086a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086a8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80087e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80086ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086b0:	4b47      	ldr	r3, [pc, #284]	; (80087d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80086b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086b8:	ee07 3a90 	vmov	s15, r3
 80086bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086c0:	ed97 6a03 	vldr	s12, [r7, #12]
 80086c4:	eddf 5a44 	vldr	s11, [pc, #272]	; 80087d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80086c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086dc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80086e0:	e021      	b.n	8008726 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	ee07 3a90 	vmov	s15, r3
 80086e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086ec:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80087dc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80086f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086f4:	4b36      	ldr	r3, [pc, #216]	; (80087d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80086f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086fc:	ee07 3a90 	vmov	s15, r3
 8008700:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008704:	ed97 6a03 	vldr	s12, [r7, #12]
 8008708:	eddf 5a33 	vldr	s11, [pc, #204]	; 80087d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800870c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008710:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008714:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008718:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800871c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008720:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008724:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8008726:	4b2a      	ldr	r3, [pc, #168]	; (80087d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800872a:	0a5b      	lsrs	r3, r3, #9
 800872c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008730:	ee07 3a90 	vmov	s15, r3
 8008734:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008738:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800873c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008740:	edd7 6a07 	vldr	s13, [r7, #28]
 8008744:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008748:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800874c:	ee17 2a90 	vmov	r2, s15
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8008754:	4b1e      	ldr	r3, [pc, #120]	; (80087d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008758:	0c1b      	lsrs	r3, r3, #16
 800875a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800875e:	ee07 3a90 	vmov	s15, r3
 8008762:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008766:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800876a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800876e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008772:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008776:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800877a:	ee17 2a90 	vmov	r2, s15
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8008782:	4b13      	ldr	r3, [pc, #76]	; (80087d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008786:	0e1b      	lsrs	r3, r3, #24
 8008788:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800878c:	ee07 3a90 	vmov	s15, r3
 8008790:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008794:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008798:	ee37 7a87 	vadd.f32	s14, s15, s14
 800879c:	edd7 6a07 	vldr	s13, [r7, #28]
 80087a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087a8:	ee17 2a90 	vmov	r2, s15
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80087b0:	e008      	b.n	80087c4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2200      	movs	r2, #0
 80087b6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2200      	movs	r2, #0
 80087bc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2200      	movs	r2, #0
 80087c2:	609a      	str	r2, [r3, #8]
}
 80087c4:	bf00      	nop
 80087c6:	3724      	adds	r7, #36	; 0x24
 80087c8:	46bd      	mov	sp, r7
 80087ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ce:	4770      	bx	lr
 80087d0:	58024400 	.word	0x58024400
 80087d4:	03d09000 	.word	0x03d09000
 80087d8:	46000000 	.word	0x46000000
 80087dc:	4c742400 	.word	0x4c742400
 80087e0:	4a742400 	.word	0x4a742400
 80087e4:	4bbebc20 	.word	0x4bbebc20

080087e8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b084      	sub	sp, #16
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
 80087f0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80087f2:	2300      	movs	r3, #0
 80087f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80087f6:	4b53      	ldr	r3, [pc, #332]	; (8008944 <RCCEx_PLL2_Config+0x15c>)
 80087f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087fa:	f003 0303 	and.w	r3, r3, #3
 80087fe:	2b03      	cmp	r3, #3
 8008800:	d101      	bne.n	8008806 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008802:	2301      	movs	r3, #1
 8008804:	e099      	b.n	800893a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008806:	4b4f      	ldr	r3, [pc, #316]	; (8008944 <RCCEx_PLL2_Config+0x15c>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	4a4e      	ldr	r2, [pc, #312]	; (8008944 <RCCEx_PLL2_Config+0x15c>)
 800880c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008810:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008812:	f7f9 fd09 	bl	8002228 <HAL_GetTick>
 8008816:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008818:	e008      	b.n	800882c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800881a:	f7f9 fd05 	bl	8002228 <HAL_GetTick>
 800881e:	4602      	mov	r2, r0
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	1ad3      	subs	r3, r2, r3
 8008824:	2b02      	cmp	r3, #2
 8008826:	d901      	bls.n	800882c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008828:	2303      	movs	r3, #3
 800882a:	e086      	b.n	800893a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800882c:	4b45      	ldr	r3, [pc, #276]	; (8008944 <RCCEx_PLL2_Config+0x15c>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008834:	2b00      	cmp	r3, #0
 8008836:	d1f0      	bne.n	800881a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008838:	4b42      	ldr	r3, [pc, #264]	; (8008944 <RCCEx_PLL2_Config+0x15c>)
 800883a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800883c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	031b      	lsls	r3, r3, #12
 8008846:	493f      	ldr	r1, [pc, #252]	; (8008944 <RCCEx_PLL2_Config+0x15c>)
 8008848:	4313      	orrs	r3, r2
 800884a:	628b      	str	r3, [r1, #40]	; 0x28
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	685b      	ldr	r3, [r3, #4]
 8008850:	3b01      	subs	r3, #1
 8008852:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	689b      	ldr	r3, [r3, #8]
 800885a:	3b01      	subs	r3, #1
 800885c:	025b      	lsls	r3, r3, #9
 800885e:	b29b      	uxth	r3, r3
 8008860:	431a      	orrs	r2, r3
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	68db      	ldr	r3, [r3, #12]
 8008866:	3b01      	subs	r3, #1
 8008868:	041b      	lsls	r3, r3, #16
 800886a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800886e:	431a      	orrs	r2, r3
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	691b      	ldr	r3, [r3, #16]
 8008874:	3b01      	subs	r3, #1
 8008876:	061b      	lsls	r3, r3, #24
 8008878:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800887c:	4931      	ldr	r1, [pc, #196]	; (8008944 <RCCEx_PLL2_Config+0x15c>)
 800887e:	4313      	orrs	r3, r2
 8008880:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008882:	4b30      	ldr	r3, [pc, #192]	; (8008944 <RCCEx_PLL2_Config+0x15c>)
 8008884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008886:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	695b      	ldr	r3, [r3, #20]
 800888e:	492d      	ldr	r1, [pc, #180]	; (8008944 <RCCEx_PLL2_Config+0x15c>)
 8008890:	4313      	orrs	r3, r2
 8008892:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008894:	4b2b      	ldr	r3, [pc, #172]	; (8008944 <RCCEx_PLL2_Config+0x15c>)
 8008896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008898:	f023 0220 	bic.w	r2, r3, #32
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	699b      	ldr	r3, [r3, #24]
 80088a0:	4928      	ldr	r1, [pc, #160]	; (8008944 <RCCEx_PLL2_Config+0x15c>)
 80088a2:	4313      	orrs	r3, r2
 80088a4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80088a6:	4b27      	ldr	r3, [pc, #156]	; (8008944 <RCCEx_PLL2_Config+0x15c>)
 80088a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088aa:	4a26      	ldr	r2, [pc, #152]	; (8008944 <RCCEx_PLL2_Config+0x15c>)
 80088ac:	f023 0310 	bic.w	r3, r3, #16
 80088b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80088b2:	4b24      	ldr	r3, [pc, #144]	; (8008944 <RCCEx_PLL2_Config+0x15c>)
 80088b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80088b6:	4b24      	ldr	r3, [pc, #144]	; (8008948 <RCCEx_PLL2_Config+0x160>)
 80088b8:	4013      	ands	r3, r2
 80088ba:	687a      	ldr	r2, [r7, #4]
 80088bc:	69d2      	ldr	r2, [r2, #28]
 80088be:	00d2      	lsls	r2, r2, #3
 80088c0:	4920      	ldr	r1, [pc, #128]	; (8008944 <RCCEx_PLL2_Config+0x15c>)
 80088c2:	4313      	orrs	r3, r2
 80088c4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80088c6:	4b1f      	ldr	r3, [pc, #124]	; (8008944 <RCCEx_PLL2_Config+0x15c>)
 80088c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ca:	4a1e      	ldr	r2, [pc, #120]	; (8008944 <RCCEx_PLL2_Config+0x15c>)
 80088cc:	f043 0310 	orr.w	r3, r3, #16
 80088d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d106      	bne.n	80088e6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80088d8:	4b1a      	ldr	r3, [pc, #104]	; (8008944 <RCCEx_PLL2_Config+0x15c>)
 80088da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088dc:	4a19      	ldr	r2, [pc, #100]	; (8008944 <RCCEx_PLL2_Config+0x15c>)
 80088de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80088e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80088e4:	e00f      	b.n	8008906 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	2b01      	cmp	r3, #1
 80088ea:	d106      	bne.n	80088fa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80088ec:	4b15      	ldr	r3, [pc, #84]	; (8008944 <RCCEx_PLL2_Config+0x15c>)
 80088ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088f0:	4a14      	ldr	r2, [pc, #80]	; (8008944 <RCCEx_PLL2_Config+0x15c>)
 80088f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80088f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80088f8:	e005      	b.n	8008906 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80088fa:	4b12      	ldr	r3, [pc, #72]	; (8008944 <RCCEx_PLL2_Config+0x15c>)
 80088fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088fe:	4a11      	ldr	r2, [pc, #68]	; (8008944 <RCCEx_PLL2_Config+0x15c>)
 8008900:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008904:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008906:	4b0f      	ldr	r3, [pc, #60]	; (8008944 <RCCEx_PLL2_Config+0x15c>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4a0e      	ldr	r2, [pc, #56]	; (8008944 <RCCEx_PLL2_Config+0x15c>)
 800890c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008910:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008912:	f7f9 fc89 	bl	8002228 <HAL_GetTick>
 8008916:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008918:	e008      	b.n	800892c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800891a:	f7f9 fc85 	bl	8002228 <HAL_GetTick>
 800891e:	4602      	mov	r2, r0
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	1ad3      	subs	r3, r2, r3
 8008924:	2b02      	cmp	r3, #2
 8008926:	d901      	bls.n	800892c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008928:	2303      	movs	r3, #3
 800892a:	e006      	b.n	800893a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800892c:	4b05      	ldr	r3, [pc, #20]	; (8008944 <RCCEx_PLL2_Config+0x15c>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008934:	2b00      	cmp	r3, #0
 8008936:	d0f0      	beq.n	800891a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008938:	7bfb      	ldrb	r3, [r7, #15]
}
 800893a:	4618      	mov	r0, r3
 800893c:	3710      	adds	r7, #16
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}
 8008942:	bf00      	nop
 8008944:	58024400 	.word	0x58024400
 8008948:	ffff0007 	.word	0xffff0007

0800894c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b084      	sub	sp, #16
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
 8008954:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008956:	2300      	movs	r3, #0
 8008958:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800895a:	4b53      	ldr	r3, [pc, #332]	; (8008aa8 <RCCEx_PLL3_Config+0x15c>)
 800895c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800895e:	f003 0303 	and.w	r3, r3, #3
 8008962:	2b03      	cmp	r3, #3
 8008964:	d101      	bne.n	800896a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008966:	2301      	movs	r3, #1
 8008968:	e099      	b.n	8008a9e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800896a:	4b4f      	ldr	r3, [pc, #316]	; (8008aa8 <RCCEx_PLL3_Config+0x15c>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	4a4e      	ldr	r2, [pc, #312]	; (8008aa8 <RCCEx_PLL3_Config+0x15c>)
 8008970:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008974:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008976:	f7f9 fc57 	bl	8002228 <HAL_GetTick>
 800897a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800897c:	e008      	b.n	8008990 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800897e:	f7f9 fc53 	bl	8002228 <HAL_GetTick>
 8008982:	4602      	mov	r2, r0
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	1ad3      	subs	r3, r2, r3
 8008988:	2b02      	cmp	r3, #2
 800898a:	d901      	bls.n	8008990 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800898c:	2303      	movs	r3, #3
 800898e:	e086      	b.n	8008a9e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008990:	4b45      	ldr	r3, [pc, #276]	; (8008aa8 <RCCEx_PLL3_Config+0x15c>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008998:	2b00      	cmp	r3, #0
 800899a:	d1f0      	bne.n	800897e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800899c:	4b42      	ldr	r3, [pc, #264]	; (8008aa8 <RCCEx_PLL3_Config+0x15c>)
 800899e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089a0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	051b      	lsls	r3, r3, #20
 80089aa:	493f      	ldr	r1, [pc, #252]	; (8008aa8 <RCCEx_PLL3_Config+0x15c>)
 80089ac:	4313      	orrs	r3, r2
 80089ae:	628b      	str	r3, [r1, #40]	; 0x28
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	685b      	ldr	r3, [r3, #4]
 80089b4:	3b01      	subs	r3, #1
 80089b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	689b      	ldr	r3, [r3, #8]
 80089be:	3b01      	subs	r3, #1
 80089c0:	025b      	lsls	r3, r3, #9
 80089c2:	b29b      	uxth	r3, r3
 80089c4:	431a      	orrs	r2, r3
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	68db      	ldr	r3, [r3, #12]
 80089ca:	3b01      	subs	r3, #1
 80089cc:	041b      	lsls	r3, r3, #16
 80089ce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80089d2:	431a      	orrs	r2, r3
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	691b      	ldr	r3, [r3, #16]
 80089d8:	3b01      	subs	r3, #1
 80089da:	061b      	lsls	r3, r3, #24
 80089dc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80089e0:	4931      	ldr	r1, [pc, #196]	; (8008aa8 <RCCEx_PLL3_Config+0x15c>)
 80089e2:	4313      	orrs	r3, r2
 80089e4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80089e6:	4b30      	ldr	r3, [pc, #192]	; (8008aa8 <RCCEx_PLL3_Config+0x15c>)
 80089e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	695b      	ldr	r3, [r3, #20]
 80089f2:	492d      	ldr	r1, [pc, #180]	; (8008aa8 <RCCEx_PLL3_Config+0x15c>)
 80089f4:	4313      	orrs	r3, r2
 80089f6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80089f8:	4b2b      	ldr	r3, [pc, #172]	; (8008aa8 <RCCEx_PLL3_Config+0x15c>)
 80089fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089fc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	699b      	ldr	r3, [r3, #24]
 8008a04:	4928      	ldr	r1, [pc, #160]	; (8008aa8 <RCCEx_PLL3_Config+0x15c>)
 8008a06:	4313      	orrs	r3, r2
 8008a08:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008a0a:	4b27      	ldr	r3, [pc, #156]	; (8008aa8 <RCCEx_PLL3_Config+0x15c>)
 8008a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a0e:	4a26      	ldr	r2, [pc, #152]	; (8008aa8 <RCCEx_PLL3_Config+0x15c>)
 8008a10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a14:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008a16:	4b24      	ldr	r3, [pc, #144]	; (8008aa8 <RCCEx_PLL3_Config+0x15c>)
 8008a18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a1a:	4b24      	ldr	r3, [pc, #144]	; (8008aac <RCCEx_PLL3_Config+0x160>)
 8008a1c:	4013      	ands	r3, r2
 8008a1e:	687a      	ldr	r2, [r7, #4]
 8008a20:	69d2      	ldr	r2, [r2, #28]
 8008a22:	00d2      	lsls	r2, r2, #3
 8008a24:	4920      	ldr	r1, [pc, #128]	; (8008aa8 <RCCEx_PLL3_Config+0x15c>)
 8008a26:	4313      	orrs	r3, r2
 8008a28:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008a2a:	4b1f      	ldr	r3, [pc, #124]	; (8008aa8 <RCCEx_PLL3_Config+0x15c>)
 8008a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a2e:	4a1e      	ldr	r2, [pc, #120]	; (8008aa8 <RCCEx_PLL3_Config+0x15c>)
 8008a30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a34:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d106      	bne.n	8008a4a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008a3c:	4b1a      	ldr	r3, [pc, #104]	; (8008aa8 <RCCEx_PLL3_Config+0x15c>)
 8008a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a40:	4a19      	ldr	r2, [pc, #100]	; (8008aa8 <RCCEx_PLL3_Config+0x15c>)
 8008a42:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008a46:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008a48:	e00f      	b.n	8008a6a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	2b01      	cmp	r3, #1
 8008a4e:	d106      	bne.n	8008a5e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008a50:	4b15      	ldr	r3, [pc, #84]	; (8008aa8 <RCCEx_PLL3_Config+0x15c>)
 8008a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a54:	4a14      	ldr	r2, [pc, #80]	; (8008aa8 <RCCEx_PLL3_Config+0x15c>)
 8008a56:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008a5a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008a5c:	e005      	b.n	8008a6a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008a5e:	4b12      	ldr	r3, [pc, #72]	; (8008aa8 <RCCEx_PLL3_Config+0x15c>)
 8008a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a62:	4a11      	ldr	r2, [pc, #68]	; (8008aa8 <RCCEx_PLL3_Config+0x15c>)
 8008a64:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008a68:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008a6a:	4b0f      	ldr	r3, [pc, #60]	; (8008aa8 <RCCEx_PLL3_Config+0x15c>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	4a0e      	ldr	r2, [pc, #56]	; (8008aa8 <RCCEx_PLL3_Config+0x15c>)
 8008a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a76:	f7f9 fbd7 	bl	8002228 <HAL_GetTick>
 8008a7a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008a7c:	e008      	b.n	8008a90 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008a7e:	f7f9 fbd3 	bl	8002228 <HAL_GetTick>
 8008a82:	4602      	mov	r2, r0
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	1ad3      	subs	r3, r2, r3
 8008a88:	2b02      	cmp	r3, #2
 8008a8a:	d901      	bls.n	8008a90 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008a8c:	2303      	movs	r3, #3
 8008a8e:	e006      	b.n	8008a9e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008a90:	4b05      	ldr	r3, [pc, #20]	; (8008aa8 <RCCEx_PLL3_Config+0x15c>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d0f0      	beq.n	8008a7e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	3710      	adds	r7, #16
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}
 8008aa6:	bf00      	nop
 8008aa8:	58024400 	.word	0x58024400
 8008aac:	ffff0007 	.word	0xffff0007

08008ab0 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b08a      	sub	sp, #40	; 0x28
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d101      	bne.n	8008ac2 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8008abe:	2301      	movs	r3, #1
 8008ac0:	e224      	b.n	8008f0c <HAL_SAI_Init+0x45c>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008ac8:	2b01      	cmp	r3, #1
 8008aca:	d113      	bne.n	8008af4 <HAL_SAI_Init+0x44>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4aa1      	ldr	r2, [pc, #644]	; (8008d58 <HAL_SAI_Init+0x2a8>)
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d004      	beq.n	8008ae0 <HAL_SAI_Init+0x30>
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	4aa0      	ldr	r2, [pc, #640]	; (8008d5c <HAL_SAI_Init+0x2ac>)
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d107      	bne.n	8008af0 <HAL_SAI_Init+0x40>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8008ae4:	2b01      	cmp	r3, #1
 8008ae6:	d103      	bne.n	8008af0 <HAL_SAI_Init+0x40>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d001      	beq.n	8008af4 <HAL_SAI_Init+0x44>
    {
      return HAL_ERROR;
 8008af0:	2301      	movs	r3, #1
 8008af2:	e20b      	b.n	8008f0c <HAL_SAI_Init+0x45c>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	4a97      	ldr	r2, [pc, #604]	; (8008d58 <HAL_SAI_Init+0x2a8>)
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d004      	beq.n	8008b08 <HAL_SAI_Init+0x58>
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	4a97      	ldr	r2, [pc, #604]	; (8008d60 <HAL_SAI_Init+0x2b0>)
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d102      	bne.n	8008b0e <HAL_SAI_Init+0x5e>
  {
    SaiBaseAddress = SAI1;
 8008b08:	4b96      	ldr	r3, [pc, #600]	; (8008d64 <HAL_SAI_Init+0x2b4>)
 8008b0a:	61bb      	str	r3, [r7, #24]
 8008b0c:	e00e      	b.n	8008b2c <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI3;
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	4a92      	ldr	r2, [pc, #584]	; (8008d5c <HAL_SAI_Init+0x2ac>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d004      	beq.n	8008b22 <HAL_SAI_Init+0x72>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	4a92      	ldr	r2, [pc, #584]	; (8008d68 <HAL_SAI_Init+0x2b8>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d102      	bne.n	8008b28 <HAL_SAI_Init+0x78>
  {
    SaiBaseAddress = SAI4;
 8008b22:	4b92      	ldr	r3, [pc, #584]	; (8008d6c <HAL_SAI_Init+0x2bc>)
 8008b24:	61bb      	str	r3, [r7, #24]
 8008b26:	e001      	b.n	8008b2c <HAL_SAI_Init+0x7c>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8008b28:	2301      	movs	r3, #1
 8008b2a:	e1ef      	b.n	8008f0c <HAL_SAI_Init+0x45c>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8008b32:	b2db      	uxtb	r3, r3
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d125      	bne.n	8008b84 <HAL_SAI_Init+0xd4>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    /* Reset callback pointers to the weak predefined callbacks */
    hsai->RxCpltCallback     = HAL_SAI_RxCpltCallback;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	4a8b      	ldr	r2, [pc, #556]	; (8008d70 <HAL_SAI_Init+0x2c0>)
 8008b44:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    hsai->RxHalfCpltCallback = HAL_SAI_RxHalfCpltCallback;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	4a8a      	ldr	r2, [pc, #552]	; (8008d74 <HAL_SAI_Init+0x2c4>)
 8008b4c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    hsai->TxCpltCallback     = HAL_SAI_TxCpltCallback;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	4a89      	ldr	r2, [pc, #548]	; (8008d78 <HAL_SAI_Init+0x2c8>)
 8008b54:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    hsai->TxHalfCpltCallback = HAL_SAI_TxHalfCpltCallback;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	4a88      	ldr	r2, [pc, #544]	; (8008d7c <HAL_SAI_Init+0x2cc>)
 8008b5c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    hsai->ErrorCallback      = HAL_SAI_ErrorCallback;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	4a87      	ldr	r2, [pc, #540]	; (8008d80 <HAL_SAI_Init+0x2d0>)
 8008b64:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    if (hsai->MspInitCallback == NULL)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d103      	bne.n	8008b7a <HAL_SAI_Init+0xca>
    {
      hsai->MspInitCallback = HAL_SAI_MspInit;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	4a83      	ldr	r2, [pc, #524]	; (8008d84 <HAL_SAI_Init+0x2d4>)
 8008b76:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    }
    hsai->MspInitCallback(hsai);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	4798      	blx	r3
    HAL_SAI_MspInit(hsai);
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 8008b84:	6878      	ldr	r0, [r7, #4]
 8008b86:	f000 fb5d 	bl	8009244 <SAI_Disable>
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d001      	beq.n	8008b94 <HAL_SAI_Init+0xe4>
  {
    return HAL_ERROR;
 8008b90:	2301      	movs	r3, #1
 8008b92:	e1bb      	b.n	8008f0c <HAL_SAI_Init+0x45c>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2202      	movs	r2, #2
 8008b98:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	68db      	ldr	r3, [r3, #12]
 8008ba0:	2b02      	cmp	r3, #2
 8008ba2:	d00c      	beq.n	8008bbe <HAL_SAI_Init+0x10e>
 8008ba4:	2b02      	cmp	r3, #2
 8008ba6:	d80d      	bhi.n	8008bc4 <HAL_SAI_Init+0x114>
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d002      	beq.n	8008bb2 <HAL_SAI_Init+0x102>
 8008bac:	2b01      	cmp	r3, #1
 8008bae:	d003      	beq.n	8008bb8 <HAL_SAI_Init+0x108>
 8008bb0:	e008      	b.n	8008bc4 <HAL_SAI_Init+0x114>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8008bb6:	e008      	b.n	8008bca <HAL_SAI_Init+0x11a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8008bb8:	2310      	movs	r3, #16
 8008bba:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8008bbc:	e005      	b.n	8008bca <HAL_SAI_Init+0x11a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8008bbe:	2320      	movs	r3, #32
 8008bc0:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8008bc2:	e002      	b.n	8008bca <HAL_SAI_Init+0x11a>
    default:
      tmpregisterGCR = 0;
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8008bc8:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	689b      	ldr	r3, [r3, #8]
 8008bce:	2b05      	cmp	r3, #5
 8008bd0:	d821      	bhi.n	8008c16 <HAL_SAI_Init+0x166>
 8008bd2:	a201      	add	r2, pc, #4	; (adr r2, 8008bd8 <HAL_SAI_Init+0x128>)
 8008bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bd8:	08008bf1 	.word	0x08008bf1
 8008bdc:	08008bf7 	.word	0x08008bf7
 8008be0:	08008bff 	.word	0x08008bff
 8008be4:	08008c17 	.word	0x08008c17
 8008be8:	08008c17 	.word	0x08008c17
 8008bec:	08008c07 	.word	0x08008c07
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	61fb      	str	r3, [r7, #28]
      break;
 8008bf4:	e012      	b.n	8008c1c <HAL_SAI_Init+0x16c>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8008bf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008bfa:	61fb      	str	r3, [r7, #28]
      break;
 8008bfc:	e00e      	b.n	8008c1c <HAL_SAI_Init+0x16c>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008bfe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008c02:	61fb      	str	r3, [r7, #28]
      break;
 8008c04:	e00a      	b.n	8008c1c <HAL_SAI_Init+0x16c>
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
      break;
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008c06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008c0a:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8008c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c0e:	f043 0303 	orr.w	r3, r3, #3
 8008c12:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8008c14:	e002      	b.n	8008c1c <HAL_SAI_Init+0x16c>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 8008c16:	2300      	movs	r3, #0
 8008c18:	61fb      	str	r3, [r7, #28]
      break;
 8008c1a:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 8008c1c:	69bb      	ldr	r3, [r7, #24]
 8008c1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c20:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6a1b      	ldr	r3, [r3, #32]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	f000 8084 	beq.w	8008d34 <HAL_SAI_Init+0x284>
  {
    uint32_t freq = 0;
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	4a48      	ldr	r2, [pc, #288]	; (8008d58 <HAL_SAI_Init+0x2a8>)
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d004      	beq.n	8008c44 <HAL_SAI_Init+0x194>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	4a48      	ldr	r2, [pc, #288]	; (8008d60 <HAL_SAI_Init+0x2b0>)
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d104      	bne.n	8008c4e <HAL_SAI_Init+0x19e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8008c44:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008c48:	f7fe fd9a 	bl	8007780 <HAL_RCCEx_GetPeriphCLKFreq>
 8008c4c:	6178      	str	r0, [r7, #20]
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	4a42      	ldr	r2, [pc, #264]	; (8008d5c <HAL_SAI_Init+0x2ac>)
 8008c54:	4293      	cmp	r3, r2
 8008c56:	d104      	bne.n	8008c62 <HAL_SAI_Init+0x1b2>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8008c58:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8008c5c:	f7fe fd90 	bl	8007780 <HAL_RCCEx_GetPeriphCLKFreq>
 8008c60:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	4a40      	ldr	r2, [pc, #256]	; (8008d68 <HAL_SAI_Init+0x2b8>)
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d104      	bne.n	8008c76 <HAL_SAI_Init+0x1c6>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8008c6c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008c70:	f7fe fd86 	bl	8007780 <HAL_RCCEx_GetPeriphCLKFreq>
 8008c74:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	699b      	ldr	r3, [r3, #24]
 8008c7a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008c7e:	d120      	bne.n	8008cc2 <HAL_SAI_Init+0x212>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c84:	2b04      	cmp	r3, #4
 8008c86:	d102      	bne.n	8008c8e <HAL_SAI_Init+0x1de>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 8008c88:	2340      	movs	r3, #64	; 0x40
 8008c8a:	60fb      	str	r3, [r7, #12]
 8008c8c:	e00a      	b.n	8008ca4 <HAL_SAI_Init+0x1f4>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c92:	2b08      	cmp	r3, #8
 8008c94:	d103      	bne.n	8008c9e <HAL_SAI_Init+0x1ee>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 8008c96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008c9a:	60fb      	str	r3, [r7, #12]
 8008c9c:	e002      	b.n	8008ca4 <HAL_SAI_Init+0x1f4>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ca2:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8008ca4:	697a      	ldr	r2, [r7, #20]
 8008ca6:	4613      	mov	r3, r2
 8008ca8:	009b      	lsls	r3, r3, #2
 8008caa:	4413      	add	r3, r2
 8008cac:	005b      	lsls	r3, r3, #1
 8008cae:	4619      	mov	r1, r3
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6a1b      	ldr	r3, [r3, #32]
 8008cb4:	68fa      	ldr	r2, [r7, #12]
 8008cb6:	fb02 f303 	mul.w	r3, r2, r3
 8008cba:	fbb1 f3f3 	udiv	r3, r1, r3
 8008cbe:	613b      	str	r3, [r7, #16]
 8008cc0:	e017      	b.n	8008cf2 <HAL_SAI_Init+0x242>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cc6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008cca:	d101      	bne.n	8008cd0 <HAL_SAI_Init+0x220>
 8008ccc:	2302      	movs	r3, #2
 8008cce:	e000      	b.n	8008cd2 <HAL_SAI_Init+0x222>
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8008cd4:	697a      	ldr	r2, [r7, #20]
 8008cd6:	4613      	mov	r3, r2
 8008cd8:	009b      	lsls	r3, r3, #2
 8008cda:	4413      	add	r3, r2
 8008cdc:	005b      	lsls	r3, r3, #1
 8008cde:	4619      	mov	r1, r3
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6a1b      	ldr	r3, [r3, #32]
 8008ce4:	68ba      	ldr	r2, [r7, #8]
 8008ce6:	fb02 f303 	mul.w	r3, r2, r3
 8008cea:	021b      	lsls	r3, r3, #8
 8008cec:	fbb1 f3f3 	udiv	r3, r1, r3
 8008cf0:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8008cf2:	693b      	ldr	r3, [r7, #16]
 8008cf4:	4a24      	ldr	r2, [pc, #144]	; (8008d88 <HAL_SAI_Init+0x2d8>)
 8008cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8008cfa:	08da      	lsrs	r2, r3, #3
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8008d00:	6939      	ldr	r1, [r7, #16]
 8008d02:	4b21      	ldr	r3, [pc, #132]	; (8008d88 <HAL_SAI_Init+0x2d8>)
 8008d04:	fba3 2301 	umull	r2, r3, r3, r1
 8008d08:	08da      	lsrs	r2, r3, #3
 8008d0a:	4613      	mov	r3, r2
 8008d0c:	009b      	lsls	r3, r3, #2
 8008d0e:	4413      	add	r3, r2
 8008d10:	005b      	lsls	r3, r3, #1
 8008d12:	1aca      	subs	r2, r1, r3
 8008d14:	2a08      	cmp	r2, #8
 8008d16:	d904      	bls.n	8008d22 <HAL_SAI_Init+0x272>
    {
      hsai->Init.Mckdiv += 1U;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d1c:	1c5a      	adds	r2, r3, #1
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d26:	2b04      	cmp	r3, #4
 8008d28:	d104      	bne.n	8008d34 <HAL_SAI_Init+0x284>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d2e:	085a      	lsrs	r2, r3, #1
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	685b      	ldr	r3, [r3, #4]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d003      	beq.n	8008d44 <HAL_SAI_Init+0x294>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	685b      	ldr	r3, [r3, #4]
 8008d40:	2b02      	cmp	r3, #2
 8008d42:	d123      	bne.n	8008d8c <HAL_SAI_Init+0x2dc>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d48:	2b01      	cmp	r3, #1
 8008d4a:	d101      	bne.n	8008d50 <HAL_SAI_Init+0x2a0>
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	e001      	b.n	8008d54 <HAL_SAI_Init+0x2a4>
 8008d50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d54:	623b      	str	r3, [r7, #32]
 8008d56:	e022      	b.n	8008d9e <HAL_SAI_Init+0x2ee>
 8008d58:	40015804 	.word	0x40015804
 8008d5c:	58005404 	.word	0x58005404
 8008d60:	40015824 	.word	0x40015824
 8008d64:	40015800 	.word	0x40015800
 8008d68:	58005424 	.word	0x58005424
 8008d6c:	58005400 	.word	0x58005400
 8008d70:	08009199 	.word	0x08009199
 8008d74:	080091ad 	.word	0x080091ad
 8008d78:	08009171 	.word	0x08009171
 8008d7c:	08009185 	.word	0x08009185
 8008d80:	080091c1 	.word	0x080091c1
 8008d84:	08009845 	.word	0x08009845
 8008d88:	cccccccd 	.word	0xcccccccd
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d90:	2b01      	cmp	r3, #1
 8008d92:	d102      	bne.n	8008d9a <HAL_SAI_Init+0x2ea>
 8008d94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d98:	e000      	b.n	8008d9c <HAL_SAI_Init+0x2ec>
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	623b      	str	r3, [r7, #32]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                            hsai->Init.MckOverSampling);
  }
#else /* SAI_VER_V2_1*/
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	6819      	ldr	r1, [r3, #0]
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681a      	ldr	r2, [r3, #0]
 8008da8:	4b5a      	ldr	r3, [pc, #360]	; (8008f14 <HAL_SAI_Init+0x464>)
 8008daa:	400b      	ands	r3, r1
 8008dac:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	6819      	ldr	r1, [r3, #0]
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	685a      	ldr	r2, [r3, #4]
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dbc:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008dc2:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008dc8:	431a      	orrs	r2, r3
 8008dca:	6a3b      	ldr	r3, [r7, #32]
 8008dcc:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8008dce:	69fb      	ldr	r3, [r7, #28]
 8008dd0:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                          ckstr_bits | syncen_bits |                             \
 8008dd6:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	695b      	ldr	r3, [r3, #20]
 8008ddc:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008de2:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008de8:	051b      	lsls	r3, r3, #20
 8008dea:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008df0:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	691b      	ldr	r3, [r3, #16]
 8008df6:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	430a      	orrs	r2, r1
 8008dfe:	601a      	str	r2, [r3, #0]
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	6859      	ldr	r1, [r3, #4]
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681a      	ldr	r2, [r3, #0]
 8008e0a:	4b43      	ldr	r3, [pc, #268]	; (8008f18 <HAL_SAI_Init+0x468>)
 8008e0c:	400b      	ands	r3, r1
 8008e0e:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	6859      	ldr	r1, [r3, #4]
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	69da      	ldr	r2, [r3, #28]
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e1e:	431a      	orrs	r2, r3
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e24:	431a      	orrs	r2, r3
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	430a      	orrs	r2, r1
 8008e2c:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	6899      	ldr	r1, [r3, #8]
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681a      	ldr	r2, [r3, #0]
 8008e38:	4b38      	ldr	r3, [pc, #224]	; (8008f1c <HAL_SAI_Init+0x46c>)
 8008e3a:	400b      	ands	r3, r1
 8008e3c:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	6899      	ldr	r1, [r3, #8]
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e48:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008e4e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 8008e54:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 8008e5a:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e60:	3b01      	subs	r3, #1
 8008e62:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8008e64:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	430a      	orrs	r2, r1
 8008e6c:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	68d9      	ldr	r1, [r3, #12]
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681a      	ldr	r2, [r3, #0]
 8008e78:	f24f 0320 	movw	r3, #61472	; 0xf020
 8008e7c:	400b      	ands	r3, r1
 8008e7e:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	68d9      	ldr	r1, [r3, #12]
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e8e:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e94:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008e96:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e9c:	3b01      	subs	r3, #1
 8008e9e:	021b      	lsls	r3, r3, #8
 8008ea0:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	430a      	orrs	r2, r1
 8008ea8:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	4a1c      	ldr	r2, [pc, #112]	; (8008f20 <HAL_SAI_Init+0x470>)
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	d004      	beq.n	8008ebe <HAL_SAI_Init+0x40e>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	4a1a      	ldr	r2, [pc, #104]	; (8008f24 <HAL_SAI_Init+0x474>)
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	d119      	bne.n	8008ef2 <HAL_SAI_Init+0x442>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8008ebe:	69bb      	ldr	r3, [r7, #24]
 8008ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ec2:	f023 0201 	bic.w	r2, r3, #1
 8008ec6:	69bb      	ldr	r3, [r7, #24]
 8008ec8:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008ed0:	2b01      	cmp	r3, #1
 8008ed2:	d10e      	bne.n	8008ef2 <HAL_SAI_Init+0x442>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008edc:	3b01      	subs	r3, #1
 8008ede:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8008ee0:	431a      	orrs	r2, r3
 8008ee2:	69bb      	ldr	r3, [r7, #24]
 8008ee4:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 8008ee6:	69bb      	ldr	r3, [r7, #24]
 8008ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008eea:	f043 0201 	orr.w	r2, r3, #1
 8008eee:	69bb      	ldr	r3, [r7, #24]
 8008ef0:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2201      	movs	r2, #1
 8008efe:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2200      	movs	r2, #0
 8008f06:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 8008f0a:	2300      	movs	r3, #0
}
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	3728      	adds	r7, #40	; 0x28
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}
 8008f14:	f005c010 	.word	0xf005c010
 8008f18:	ffff1ff0 	.word	0xffff1ff0
 8008f1c:	fff88000 	.word	0xfff88000
 8008f20:	40015804 	.word	0x40015804
 8008f24:	58005404 	.word	0x58005404

08008f28 <HAL_SAI_RegisterCallback>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_SAI_RegisterCallback(SAI_HandleTypeDef        *hsai,
                                           HAL_SAI_CallbackIDTypeDef CallbackID,
                                           pSAI_CallbackTypeDef      pCallback)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b087      	sub	sp, #28
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	60f8      	str	r0, [r7, #12]
 8008f30:	460b      	mov	r3, r1
 8008f32:	607a      	str	r2, [r7, #4]
 8008f34:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8008f36:	2300      	movs	r3, #0
 8008f38:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d10a      	bne.n	8008f56 <HAL_SAI_RegisterCallback+0x2e>
  {
    /* update the error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_INVALID_CALLBACK;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008f46:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    /* update return status */
    status = HAL_ERROR;
 8008f50:	2301      	movs	r3, #1
 8008f52:	75fb      	strb	r3, [r7, #23]
 8008f54:	e073      	b.n	800903e <HAL_SAI_RegisterCallback+0x116>
  }
  else
  {
    if (HAL_SAI_STATE_READY == hsai->State)
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8008f5c:	b2db      	uxtb	r3, r3
 8008f5e:	2b01      	cmp	r3, #1
 8008f60:	d142      	bne.n	8008fe8 <HAL_SAI_RegisterCallback+0xc0>
    {
      switch (CallbackID)
 8008f62:	7afb      	ldrb	r3, [r7, #11]
 8008f64:	2b06      	cmp	r3, #6
 8008f66:	d834      	bhi.n	8008fd2 <HAL_SAI_RegisterCallback+0xaa>
 8008f68:	a201      	add	r2, pc, #4	; (adr r2, 8008f70 <HAL_SAI_RegisterCallback+0x48>)
 8008f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f6e:	bf00      	nop
 8008f70:	08008f8d 	.word	0x08008f8d
 8008f74:	08008f97 	.word	0x08008f97
 8008f78:	08008fa1 	.word	0x08008fa1
 8008f7c:	08008fab 	.word	0x08008fab
 8008f80:	08008fb5 	.word	0x08008fb5
 8008f84:	08008fbf 	.word	0x08008fbf
 8008f88:	08008fc9 	.word	0x08008fc9
      {
        case HAL_SAI_RX_COMPLETE_CB_ID :
          hsai->RxCpltCallback = pCallback;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	687a      	ldr	r2, [r7, #4]
 8008f90:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
          break;
 8008f94:	e053      	b.n	800903e <HAL_SAI_RegisterCallback+0x116>
        case HAL_SAI_RX_HALFCOMPLETE_CB_ID :
          hsai->RxHalfCpltCallback = pCallback;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	687a      	ldr	r2, [r7, #4]
 8008f9a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
          break;
 8008f9e:	e04e      	b.n	800903e <HAL_SAI_RegisterCallback+0x116>
        case HAL_SAI_TX_COMPLETE_CB_ID :
          hsai->TxCpltCallback = pCallback;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	687a      	ldr	r2, [r7, #4]
 8008fa4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
          break;
 8008fa8:	e049      	b.n	800903e <HAL_SAI_RegisterCallback+0x116>
        case HAL_SAI_TX_HALFCOMPLETE_CB_ID :
          hsai->TxHalfCpltCallback = pCallback;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	687a      	ldr	r2, [r7, #4]
 8008fae:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
          break;
 8008fb2:	e044      	b.n	800903e <HAL_SAI_RegisterCallback+0x116>
        case HAL_SAI_ERROR_CB_ID :
          hsai->ErrorCallback = pCallback;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	687a      	ldr	r2, [r7, #4]
 8008fb8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
          break;
 8008fbc:	e03f      	b.n	800903e <HAL_SAI_RegisterCallback+0x116>
        case HAL_SAI_MSPINIT_CB_ID :
          hsai->MspInitCallback = pCallback;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	687a      	ldr	r2, [r7, #4]
 8008fc2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
          break;
 8008fc6:	e03a      	b.n	800903e <HAL_SAI_RegisterCallback+0x116>
        case HAL_SAI_MSPDEINIT_CB_ID :
          hsai->MspDeInitCallback = pCallback;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	687a      	ldr	r2, [r7, #4]
 8008fcc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
          break;
 8008fd0:	e035      	b.n	800903e <HAL_SAI_RegisterCallback+0x116>
        default :
          /* update the error code */
          hsai->ErrorCode |= HAL_SAI_ERROR_INVALID_CALLBACK;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008fd8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
          /* update return status */
          status = HAL_ERROR;
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	75fb      	strb	r3, [r7, #23]
          break;
 8008fe6:	e02a      	b.n	800903e <HAL_SAI_RegisterCallback+0x116>
      }
    }
    else if (HAL_SAI_STATE_RESET == hsai->State)
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8008fee:	b2db      	uxtb	r3, r3
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d11a      	bne.n	800902a <HAL_SAI_RegisterCallback+0x102>
    {
      switch (CallbackID)
 8008ff4:	7afb      	ldrb	r3, [r7, #11]
 8008ff6:	2b05      	cmp	r3, #5
 8008ff8:	d002      	beq.n	8009000 <HAL_SAI_RegisterCallback+0xd8>
 8008ffa:	2b06      	cmp	r3, #6
 8008ffc:	d005      	beq.n	800900a <HAL_SAI_RegisterCallback+0xe2>
 8008ffe:	e009      	b.n	8009014 <HAL_SAI_RegisterCallback+0xec>
      {
        case HAL_SAI_MSPINIT_CB_ID :
          hsai->MspInitCallback = pCallback;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	687a      	ldr	r2, [r7, #4]
 8009004:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
          break;
 8009008:	e019      	b.n	800903e <HAL_SAI_RegisterCallback+0x116>
        case HAL_SAI_MSPDEINIT_CB_ID :
          hsai->MspDeInitCallback = pCallback;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	687a      	ldr	r2, [r7, #4]
 800900e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
          break;
 8009012:	e014      	b.n	800903e <HAL_SAI_RegisterCallback+0x116>
        default :
          /* update the error code */
          hsai->ErrorCode |= HAL_SAI_ERROR_INVALID_CALLBACK;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800901a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
          /* update return status */
          status = HAL_ERROR;
 8009024:	2301      	movs	r3, #1
 8009026:	75fb      	strb	r3, [r7, #23]
          break;
 8009028:	e009      	b.n	800903e <HAL_SAI_RegisterCallback+0x116>
      }
    }
    else
    {
      /* update the error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_INVALID_CALLBACK;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009030:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      /* update return status */
      status = HAL_ERROR;
 800903a:	2301      	movs	r3, #1
 800903c:	75fb      	strb	r3, [r7, #23]
    }
  }
  return status;
 800903e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009040:	4618      	mov	r0, r3
 8009042:	371c      	adds	r7, #28
 8009044:	46bd      	mov	sp, r7
 8009046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904a:	4770      	bx	lr

0800904c <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b084      	sub	sp, #16
 8009050:	af00      	add	r7, sp, #0
 8009052:	60f8      	str	r0, [r7, #12]
 8009054:	60b9      	str	r1, [r7, #8]
 8009056:	4613      	mov	r3, r2
 8009058:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 800905a:	68bb      	ldr	r3, [r7, #8]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d002      	beq.n	8009066 <HAL_SAI_Receive_DMA+0x1a>
 8009060:	88fb      	ldrh	r3, [r7, #6]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d101      	bne.n	800906a <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8009066:	2301      	movs	r3, #1
 8009068:	e078      	b.n	800915c <HAL_SAI_Receive_DMA+0x110>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8009070:	b2db      	uxtb	r3, r3
 8009072:	2b01      	cmp	r3, #1
 8009074:	d171      	bne.n	800915a <HAL_SAI_Receive_DMA+0x10e>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800907c:	2b01      	cmp	r3, #1
 800907e:	d101      	bne.n	8009084 <HAL_SAI_Receive_DMA+0x38>
 8009080:	2302      	movs	r3, #2
 8009082:	e06b      	b.n	800915c <HAL_SAI_Receive_DMA+0x110>
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	2201      	movs	r2, #1
 8009088:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	68ba      	ldr	r2, [r7, #8]
 8009090:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	88fa      	ldrh	r2, [r7, #6]
 8009096:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	88fa      	ldrh	r2, [r7, #6]
 800909e:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	2200      	movs	r2, #0
 80090a6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	2222      	movs	r2, #34	; 0x22
 80090ae:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090b8:	4a2a      	ldr	r2, [pc, #168]	; (8009164 <HAL_SAI_Receive_DMA+0x118>)
 80090ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090c2:	4a29      	ldr	r2, [pc, #164]	; (8009168 <HAL_SAI_Receive_DMA+0x11c>)
 80090c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090cc:	4a27      	ldr	r2, [pc, #156]	; (800916c <HAL_SAI_Receive_DMA+0x120>)
 80090ce:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090d6:	2200      	movs	r2, #0
 80090d8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)&hsai->pBuffPtr, (uint32_t)&hsai->XferSize) != HAL_OK)
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	331c      	adds	r3, #28
 80090e6:	4619      	mov	r1, r3
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	3378      	adds	r3, #120	; 0x78
 80090ec:	461a      	mov	r2, r3
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	337c      	adds	r3, #124	; 0x7c
 80090f2:	f7fa fa21 	bl	8003538 <HAL_DMA_Start_IT>
 80090f6:	4603      	mov	r3, r0
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d005      	beq.n	8009108 <HAL_SAI_Receive_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	2200      	movs	r2, #0
 8009100:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 8009104:	2301      	movs	r3, #1
 8009106:	e029      	b.n	800915c <HAL_SAI_Receive_DMA+0x110>
    }

    /* DMA polling...nvm */
    //HAL_DMA_PollForTransfer(hsai->hdmarx, HAL_DMA_FULL_TRANSFER, 2000);
    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8009108:	2100      	movs	r1, #0
 800910a:	68f8      	ldr	r0, [r7, #12]
 800910c:	f000 f862 	bl	80091d4 <SAI_InterruptFlag>
 8009110:	4601      	mov	r1, r0
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	691a      	ldr	r2, [r3, #16]
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	430a      	orrs	r2, r1
 800911e:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	681a      	ldr	r2, [r3, #0]
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800912e:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800913a:	2b00      	cmp	r3, #0
 800913c:	d107      	bne.n	800914e <HAL_SAI_Receive_DMA+0x102>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	681a      	ldr	r2, [r3, #0]
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800914c:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	2200      	movs	r2, #0
 8009152:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 8009156:	2300      	movs	r3, #0
 8009158:	e000      	b.n	800915c <HAL_SAI_Receive_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800915a:	2302      	movs	r3, #2
  }
}
 800915c:	4618      	mov	r0, r3
 800915e:	3710      	adds	r7, #16
 8009160:	46bd      	mov	sp, r7
 8009162:	bd80      	pop	{r7, pc}
 8009164:	0800931d 	.word	0x0800931d
 8009168:	080092b9 	.word	0x080092b9
 800916c:	0800933d 	.word	0x0800933d

08009170 <HAL_SAI_TxCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8009170:	b480      	push	{r7}
 8009172:	b083      	sub	sp, #12
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxCpltCallback could be implemented in the user file
   */
}
 8009178:	bf00      	nop
 800917a:	370c      	adds	r7, #12
 800917c:	46bd      	mov	sp, r7
 800917e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009182:	4770      	bx	lr

08009184 <HAL_SAI_TxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8009184:	b480      	push	{r7}
 8009186:	b083      	sub	sp, #12
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxHalfCpltCallback could be implemented in the user file
   */
}
 800918c:	bf00      	nop
 800918e:	370c      	adds	r7, #12
 8009190:	46bd      	mov	sp, r7
 8009192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009196:	4770      	bx	lr

08009198 <HAL_SAI_RxCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8009198:	b480      	push	{r7}
 800919a:	b083      	sub	sp, #12
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_RxCpltCallback could be implemented in the user file
   */
}
 80091a0:	bf00      	nop
 80091a2:	370c      	adds	r7, #12
 80091a4:	46bd      	mov	sp, r7
 80091a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091aa:	4770      	bx	lr

080091ac <HAL_SAI_RxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 80091ac:	b480      	push	{r7}
 80091ae:	b083      	sub	sp, #12
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_RxHalfCpltCallback could be implemented in the user file
   */
}
 80091b4:	bf00      	nop
 80091b6:	370c      	adds	r7, #12
 80091b8:	46bd      	mov	sp, r7
 80091ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091be:	4770      	bx	lr

080091c0 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 80091c0:	b480      	push	{r7}
 80091c2:	b083      	sub	sp, #12
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 80091c8:	bf00      	nop
 80091ca:	370c      	adds	r7, #12
 80091cc:	46bd      	mov	sp, r7
 80091ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d2:	4770      	bx	lr

080091d4 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 80091d4:	b480      	push	{r7}
 80091d6:	b085      	sub	sp, #20
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
 80091dc:	460b      	mov	r3, r1
 80091de:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 80091e0:	2301      	movs	r3, #1
 80091e2:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 80091e4:	78fb      	ldrb	r3, [r7, #3]
 80091e6:	2b01      	cmp	r3, #1
 80091e8:	d103      	bne.n	80091f2 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	f043 0308 	orr.w	r3, r3, #8
 80091f0:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091f6:	2b08      	cmp	r3, #8
 80091f8:	d10b      	bne.n	8009212 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80091fe:	2b03      	cmp	r3, #3
 8009200:	d003      	beq.n	800920a <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	685b      	ldr	r3, [r3, #4]
 8009206:	2b01      	cmp	r3, #1
 8009208:	d103      	bne.n	8009212 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	f043 0310 	orr.w	r3, r3, #16
 8009210:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	685b      	ldr	r3, [r3, #4]
 8009216:	2b03      	cmp	r3, #3
 8009218:	d003      	beq.n	8009222 <SAI_InterruptFlag+0x4e>
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	685b      	ldr	r3, [r3, #4]
 800921e:	2b02      	cmp	r3, #2
 8009220:	d104      	bne.n	800922c <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009228:	60fb      	str	r3, [r7, #12]
 800922a:	e003      	b.n	8009234 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	f043 0304 	orr.w	r3, r3, #4
 8009232:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8009234:	68fb      	ldr	r3, [r7, #12]
}
 8009236:	4618      	mov	r0, r3
 8009238:	3714      	adds	r7, #20
 800923a:	46bd      	mov	sp, r7
 800923c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009240:	4770      	bx	lr
	...

08009244 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8009244:	b480      	push	{r7}
 8009246:	b085      	sub	sp, #20
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800924c:	4b18      	ldr	r3, [pc, #96]	; (80092b0 <SAI_Disable+0x6c>)
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	4a18      	ldr	r2, [pc, #96]	; (80092b4 <SAI_Disable+0x70>)
 8009252:	fba2 2303 	umull	r2, r3, r2, r3
 8009256:	0b1b      	lsrs	r3, r3, #12
 8009258:	009b      	lsls	r3, r3, #2
 800925a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800925c:	2300      	movs	r3, #0
 800925e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	681a      	ldr	r2, [r3, #0]
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800926e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d10a      	bne.n	800928c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800927c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 8009286:	2303      	movs	r3, #3
 8009288:	72fb      	strb	r3, [r7, #11]
      break;
 800928a:	e009      	b.n	80092a0 <SAI_Disable+0x5c>
    }
    count--;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	3b01      	subs	r3, #1
 8009290:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800929c:	2b00      	cmp	r3, #0
 800929e:	d1e7      	bne.n	8009270 <SAI_Disable+0x2c>

  return status;
 80092a0:	7afb      	ldrb	r3, [r7, #11]
}
 80092a2:	4618      	mov	r0, r3
 80092a4:	3714      	adds	r7, #20
 80092a6:	46bd      	mov	sp, r7
 80092a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ac:	4770      	bx	lr
 80092ae:	bf00      	nop
 80092b0:	24000408 	.word	0x24000408
 80092b4:	95cbec1b 	.word	0x95cbec1b

080092b8 <SAI_DMARxCplt>:
  *              the configuration information for the specified DMA module.
  * @retval None
  */
// TODO: Add a function for when it's complete
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b084      	sub	sp, #16
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092c4:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	69db      	ldr	r3, [r3, #28]
 80092ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092ce:	d01c      	beq.n	800930a <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	681a      	ldr	r2, [r3, #0]
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80092de:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	2200      	movs	r2, #0
 80092e4:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80092e8:	2100      	movs	r1, #0
 80092ea:	68f8      	ldr	r0, [r7, #12]
 80092ec:	f7ff ff72 	bl	80091d4 <SAI_InterruptFlag>
 80092f0:	4603      	mov	r3, r0
 80092f2:	43d9      	mvns	r1, r3
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	691a      	ldr	r2, [r3, #16]
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	400a      	ands	r2, r1
 8009300:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	2201      	movs	r2, #1
 8009306:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009310:	68f8      	ldr	r0, [r7, #12]
 8009312:	4798      	blx	r3
#else
  HAL_SAI_RxCpltCallback(hsai);
#endif
}
 8009314:	bf00      	nop
 8009316:	3710      	adds	r7, #16
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}

0800931c <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b084      	sub	sp, #16
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009328:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009330:	68f8      	ldr	r0, [r7, #12]
 8009332:	4798      	blx	r3
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
#endif
}
 8009334:	bf00      	nop
 8009336:	3710      	adds	r7, #16
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}

0800933c <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b084      	sub	sp, #16
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009348:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	f7fb fa8c 	bl	8004868 <HAL_DMA_GetError>
 8009350:	4603      	mov	r3, r0
 8009352:	2b02      	cmp	r3, #2
 8009354:	d01f      	beq.n	8009396 <SAI_DMAError+0x5a>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800935c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	681a      	ldr	r2, [r3, #0]
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8009374:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 8009376:	68f8      	ldr	r0, [r7, #12]
 8009378:	f7ff ff64 	bl	8009244 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	2201      	movs	r2, #1
 8009380:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	2200      	movs	r2, #0
 8009388:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009392:	68f8      	ldr	r0, [r7, #12]
 8009394:	4798      	blx	r3
#else
    HAL_SAI_ErrorCallback(hsai);
#endif
  }
}
 8009396:	bf00      	nop
 8009398:	3710      	adds	r7, #16
 800939a:	46bd      	mov	sp, r7
 800939c:	bd80      	pop	{r7, pc}

0800939e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800939e:	b580      	push	{r7, lr}
 80093a0:	b0c6      	sub	sp, #280	; 0x118
 80093a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80093a4:	f7f8 feba 	bl	800211c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80093a8:	f000 f836 	bl	8009418 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80093ac:	f000 f986 	bl	80096bc <MX_GPIO_Init>
  MX_CRC_Init();
 80093b0:	f000 f8a0 	bl	80094f4 <MX_CRC_Init>

  MX_SAI4_Init();
 80093b4:	f000 f8e0 	bl	8009578 <MX_SAI4_Init>
  MX_BDMA_Init();
 80093b8:	f000 f958 	bl	800966c <MX_BDMA_Init>
  //MX_PDM2PCM_Init();
  //MX_DFSDM1_Init();

  /* USER CODE BEGIN 2 */
  BSP_AUDIO_Init_t haudio_in;
  haudio_in.Device = AUDIO_IN_DEVICE_DIGITAL_MIC1;
 80093bc:	2310      	movs	r3, #16
 80093be:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  haudio_in.ChannelsNbr = 1;
 80093c2:	2301      	movs	r3, #1
 80093c4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  haudio_in.SampleRate = AUDIO_FREQUENCY_16K;
 80093c8:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 80093cc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  haudio_in.BitsPerSample = AUDIO_RESOLUTION_8B;
 80093d0:	2308      	movs	r3, #8
 80093d2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  haudio_in.Volume = 50;
 80093d6:	2332      	movs	r3, #50	; 0x32
 80093d8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  BSP_AUDIO_IN_Init(PDM, &haudio_in);
 80093dc:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80093e0:	4619      	mov	r1, r3
 80093e2:	2001      	movs	r0, #1
 80093e4:	f7f7 fb38 	bl	8000a58 <BSP_AUDIO_IN_Init>
  BSP_AUDIO_IN_PDMToPCM_Init(PDM, SAI_AUDIO_FREQUENCY_16K, 1, 1);
 80093e8:	2301      	movs	r3, #1
 80093ea:	2201      	movs	r2, #1
 80093ec:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
 80093f0:	2001      	movs	r0, #1
 80093f2:	f7f8 faaf 	bl	8001954 <BSP_AUDIO_IN_PDMToPCM_Init>

  uint8_t mic_buffer[PDM_BUFFER_SIZE] = {0};
 80093f6:	1d3b      	adds	r3, r7, #4
 80093f8:	2200      	movs	r2, #0
 80093fa:	601a      	str	r2, [r3, #0]
 80093fc:	3304      	adds	r3, #4
 80093fe:	22fc      	movs	r2, #252	; 0xfc
 8009400:	2100      	movs	r1, #0
 8009402:	4618      	mov	r0, r3
 8009404:	f002 fb5e 	bl	800bac4 <memset>
  // uint16_t speaker_buffer[PCM_BUFFER_SIZE] = {0};
  // @param  Instance  Audio IN instance: 0 for SAI, 1 for SAI PDM and 2 for DFSDM
  BSP_AUDIO_IN_RecordPDM(PDM, mic_buffer, 64);
 8009408:	1d3b      	adds	r3, r7, #4
 800940a:	2240      	movs	r2, #64	; 0x40
 800940c:	4619      	mov	r1, r3
 800940e:	2001      	movs	r0, #1
 8009410:	f7f8 fb44 	bl	8001a9c <BSP_AUDIO_IN_RecordPDM>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8009414:	e7fe      	b.n	8009414 <main+0x76>
	...

08009418 <SystemClock_Config>:
  }
  /* USER CODE END 3 */
}

void SystemClock_Config(void)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b09c      	sub	sp, #112	; 0x70
 800941c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800941e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009422:	224c      	movs	r2, #76	; 0x4c
 8009424:	2100      	movs	r1, #0
 8009426:	4618      	mov	r0, r3
 8009428:	f002 fb4c 	bl	800bac4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800942c:	1d3b      	adds	r3, r7, #4
 800942e:	2220      	movs	r2, #32
 8009430:	2100      	movs	r1, #0
 8009432:	4618      	mov	r0, r3
 8009434:	f002 fb46 	bl	800bac4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8009438:	2004      	movs	r0, #4
 800943a:	f7fc f9f3 	bl	8005824 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800943e:	2300      	movs	r3, #0
 8009440:	603b      	str	r3, [r7, #0]
 8009442:	4b2b      	ldr	r3, [pc, #172]	; (80094f0 <SystemClock_Config+0xd8>)
 8009444:	699b      	ldr	r3, [r3, #24]
 8009446:	4a2a      	ldr	r2, [pc, #168]	; (80094f0 <SystemClock_Config+0xd8>)
 8009448:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800944c:	6193      	str	r3, [r2, #24]
 800944e:	4b28      	ldr	r3, [pc, #160]	; (80094f0 <SystemClock_Config+0xd8>)
 8009450:	699b      	ldr	r3, [r3, #24]
 8009452:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009456:	603b      	str	r3, [r7, #0]
 8009458:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800945a:	bf00      	nop
 800945c:	4b24      	ldr	r3, [pc, #144]	; (80094f0 <SystemClock_Config+0xd8>)
 800945e:	699b      	ldr	r3, [r3, #24]
 8009460:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009464:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009468:	d1f8      	bne.n	800945c <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800946a:	2302      	movs	r3, #2
 800946c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800946e:	2301      	movs	r3, #1
 8009470:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8009472:	2340      	movs	r3, #64	; 0x40
 8009474:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009476:	2302      	movs	r3, #2
 8009478:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800947a:	2300      	movs	r3, #0
 800947c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800947e:	2304      	movs	r3, #4
 8009480:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8009482:	2318      	movs	r3, #24
 8009484:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8009486:	2301      	movs	r3, #1
 8009488:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 125;
 800948a:	237d      	movs	r3, #125	; 0x7d
 800948c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800948e:	2302      	movs	r3, #2
 8009490:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8009492:	230c      	movs	r3, #12
 8009494:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8009496:	2300      	movs	r3, #0
 8009498:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800949a:	2300      	movs	r3, #0
 800949c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800949e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80094a2:	4618      	mov	r0, r3
 80094a4:	f7fc fa18 	bl	80058d8 <HAL_RCC_OscConfig>
 80094a8:	4603      	mov	r3, r0
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d001      	beq.n	80094b2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80094ae:	f000 f94d 	bl	800974c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80094b2:	233f      	movs	r3, #63	; 0x3f
 80094b4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80094b6:	2303      	movs	r3, #3
 80094b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80094ba:	2300      	movs	r3, #0
 80094bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80094be:	2308      	movs	r3, #8
 80094c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80094c2:	2340      	movs	r3, #64	; 0x40
 80094c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80094c6:	2340      	movs	r3, #64	; 0x40
 80094c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80094ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094ce:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80094d0:	2340      	movs	r3, #64	; 0x40
 80094d2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80094d4:	1d3b      	adds	r3, r7, #4
 80094d6:	2102      	movs	r1, #2
 80094d8:	4618      	mov	r0, r3
 80094da:	f7fc fda9 	bl	8006030 <HAL_RCC_ClockConfig>
 80094de:	4603      	mov	r3, r0
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d001      	beq.n	80094e8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80094e4:	f000 f932 	bl	800974c <Error_Handler>
  }
}
 80094e8:	bf00      	nop
 80094ea:	3770      	adds	r7, #112	; 0x70
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bd80      	pop	{r7, pc}
 80094f0:	58024800 	.word	0x58024800

080094f4 <MX_CRC_Init>:


static void MX_CRC_Init(void)
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b082      	sub	sp, #8
 80094f8:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80094fa:	4b1c      	ldr	r3, [pc, #112]	; (800956c <MX_CRC_Init+0x78>)
 80094fc:	4a1c      	ldr	r2, [pc, #112]	; (8009570 <MX_CRC_Init+0x7c>)
 80094fe:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8009500:	4b1a      	ldr	r3, [pc, #104]	; (800956c <MX_CRC_Init+0x78>)
 8009502:	2200      	movs	r2, #0
 8009504:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8009506:	4b19      	ldr	r3, [pc, #100]	; (800956c <MX_CRC_Init+0x78>)
 8009508:	2200      	movs	r2, #0
 800950a:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800950c:	4b17      	ldr	r3, [pc, #92]	; (800956c <MX_CRC_Init+0x78>)
 800950e:	2200      	movs	r2, #0
 8009510:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8009512:	4b16      	ldr	r3, [pc, #88]	; (800956c <MX_CRC_Init+0x78>)
 8009514:	2200      	movs	r2, #0
 8009516:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8009518:	4b14      	ldr	r3, [pc, #80]	; (800956c <MX_CRC_Init+0x78>)
 800951a:	2201      	movs	r2, #1
 800951c:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800951e:	4813      	ldr	r0, [pc, #76]	; (800956c <MX_CRC_Init+0x78>)
 8009520:	f7f8 ffd0 	bl	80024c4 <HAL_CRC_Init>
 8009524:	4603      	mov	r3, r0
 8009526:	2b00      	cmp	r3, #0
 8009528:	d001      	beq.n	800952e <MX_CRC_Init+0x3a>
  {
    Error_Handler();
 800952a:	f000 f90f 	bl	800974c <Error_Handler>
  }
  __HAL_CRC_DR_RESET(&hcrc);
 800952e:	4b0f      	ldr	r3, [pc, #60]	; (800956c <MX_CRC_Init+0x78>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	689a      	ldr	r2, [r3, #8]
 8009534:	4b0d      	ldr	r3, [pc, #52]	; (800956c <MX_CRC_Init+0x78>)
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f042 0201 	orr.w	r2, r2, #1
 800953c:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN CRC_Init 2 */

  __HAL_RCC_CRC_CLK_ENABLE();
 800953e:	4b0d      	ldr	r3, [pc, #52]	; (8009574 <MX_CRC_Init+0x80>)
 8009540:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009544:	4a0b      	ldr	r2, [pc, #44]	; (8009574 <MX_CRC_Init+0x80>)
 8009546:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800954a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800954e:	4b09      	ldr	r3, [pc, #36]	; (8009574 <MX_CRC_Init+0x80>)
 8009550:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009554:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009558:	607b      	str	r3, [r7, #4]
 800955a:	687b      	ldr	r3, [r7, #4]
  HAL_CRC_MspInit(&hcrc);
 800955c:	4803      	ldr	r0, [pc, #12]	; (800956c <MX_CRC_Init+0x78>)
 800955e:	f000 f915 	bl	800978c <HAL_CRC_MspInit>

  /* USER CODE END CRC_Init 2 */

}
 8009562:	bf00      	nop
 8009564:	3708      	adds	r7, #8
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}
 800956a:	bf00      	nop
 800956c:	24000d44 	.word	0x24000d44
 8009570:	58024c00 	.word	0x58024c00
 8009574:	58024400 	.word	0x58024400

08009578 <MX_SAI4_Init>:

}


static void MX_SAI4_Init(void)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI4_Init 1 */
  /* USER CODE END SAI4_Init 1 */

  /* USER CODE BEGIN SAI4_Init 2 */
  haudio_in_sai[PDM].Instance = AUDIO_IN_SAI_PDMx;
 800957c:	4b38      	ldr	r3, [pc, #224]	; (8009660 <MX_SAI4_Init+0xe8>)
 800957e:	4a39      	ldr	r2, [pc, #228]	; (8009664 <MX_SAI4_Init+0xec>)
 8009580:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  haudio_in_sai[PDM].Init.Protocol = SAI_FREE_PROTOCOL;
 8009584:	4b36      	ldr	r3, [pc, #216]	; (8009660 <MX_SAI4_Init+0xe8>)
 8009586:	2200      	movs	r2, #0
 8009588:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
  haudio_in_sai[PDM].Init.AudioMode = SAI_MODEMASTER_RX;
 800958c:	4b34      	ldr	r3, [pc, #208]	; (8009660 <MX_SAI4_Init+0xe8>)
 800958e:	2201      	movs	r2, #1
 8009590:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  haudio_in_sai[PDM].Init.DataSize = SAI_DATASIZE_16;
 8009594:	4b32      	ldr	r3, [pc, #200]	; (8009660 <MX_SAI4_Init+0xe8>)
 8009596:	2280      	movs	r2, #128	; 0x80
 8009598:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
  haudio_in_sai[PDM].Init.FirstBit = SAI_FIRSTBIT_MSB;
 800959c:	4b30      	ldr	r3, [pc, #192]	; (8009660 <MX_SAI4_Init+0xe8>)
 800959e:	2200      	movs	r2, #0
 80095a0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  haudio_in_sai[PDM].Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80095a4:	4b2e      	ldr	r3, [pc, #184]	; (8009660 <MX_SAI4_Init+0xe8>)
 80095a6:	2200      	movs	r2, #0
 80095a8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
  haudio_in_sai[PDM].Init.Synchro = SAI_ASYNCHRONOUS;
 80095ac:	4b2c      	ldr	r3, [pc, #176]	; (8009660 <MX_SAI4_Init+0xe8>)
 80095ae:	2200      	movs	r2, #0
 80095b0:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  haudio_in_sai[PDM].Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80095b4:	4b2a      	ldr	r3, [pc, #168]	; (8009660 <MX_SAI4_Init+0xe8>)
 80095b6:	2200      	movs	r2, #0
 80095b8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  haudio_in_sai[PDM].Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80095bc:	4b28      	ldr	r3, [pc, #160]	; (8009660 <MX_SAI4_Init+0xe8>)
 80095be:	2200      	movs	r2, #0
 80095c0:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  haudio_in_sai[PDM].Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80095c4:	4b26      	ldr	r3, [pc, #152]	; (8009660 <MX_SAI4_Init+0xe8>)
 80095c6:	2200      	movs	r2, #0
 80095c8:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  haudio_in_sai[PDM].Init.AudioFrequency = SAI_AUDIO_FREQUENCY_16K;
 80095cc:	4b24      	ldr	r3, [pc, #144]	; (8009660 <MX_SAI4_Init+0xe8>)
 80095ce:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80095d2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  haudio_in_sai[PDM].Init.MonoStereoMode = SAI_MONOMODE;
 80095d6:	4b22      	ldr	r3, [pc, #136]	; (8009660 <MX_SAI4_Init+0xe8>)
 80095d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80095dc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  haudio_in_sai[PDM].Init.CompandingMode = SAI_NOCOMPANDING;
 80095e0:	4b1f      	ldr	r3, [pc, #124]	; (8009660 <MX_SAI4_Init+0xe8>)
 80095e2:	2200      	movs	r2, #0
 80095e4:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4

  haudio_in_sai[PDM].FrameInit.FrameLength = 16;
 80095e8:	4b1d      	ldr	r3, [pc, #116]	; (8009660 <MX_SAI4_Init+0xe8>)
 80095ea:	2210      	movs	r2, #16
 80095ec:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  haudio_in_sai[PDM].FrameInit.ActiveFrameLength = 1;
 80095f0:	4b1b      	ldr	r3, [pc, #108]	; (8009660 <MX_SAI4_Init+0xe8>)
 80095f2:	2201      	movs	r2, #1
 80095f4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  haudio_in_sai[PDM].FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80095f8:	4b19      	ldr	r3, [pc, #100]	; (8009660 <MX_SAI4_Init+0xe8>)
 80095fa:	2200      	movs	r2, #0
 80095fc:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  haudio_in_sai[PDM].FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8009600:	4b17      	ldr	r3, [pc, #92]	; (8009660 <MX_SAI4_Init+0xe8>)
 8009602:	2200      	movs	r2, #0
 8009604:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  haudio_in_sai[PDM].FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8009608:	4b15      	ldr	r3, [pc, #84]	; (8009660 <MX_SAI4_Init+0xe8>)
 800960a:	2200      	movs	r2, #0
 800960c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

  haudio_in_sai[PDM].SlotInit.FirstBitOffset = 0;
 8009610:	4b13      	ldr	r3, [pc, #76]	; (8009660 <MX_SAI4_Init+0xe8>)
 8009612:	2200      	movs	r2, #0
 8009614:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
  haudio_in_sai[PDM].SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8009618:	4b11      	ldr	r3, [pc, #68]	; (8009660 <MX_SAI4_Init+0xe8>)
 800961a:	2200      	movs	r2, #0
 800961c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  haudio_in_sai[PDM].SlotInit.SlotNumber = 0;
 8009620:	4b0f      	ldr	r3, [pc, #60]	; (8009660 <MX_SAI4_Init+0xe8>)
 8009622:	2200      	movs	r2, #0
 8009624:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  haudio_in_sai[PDM].SlotInit.SlotActive = 0x0000FFFF;
 8009628:	4b0d      	ldr	r3, [pc, #52]	; (8009660 <MX_SAI4_Init+0xe8>)
 800962a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800962e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

  haudio_in_sai[PDM].Init.PdmInit.Activation = ENABLE;
 8009632:	4b0b      	ldr	r3, [pc, #44]	; (8009660 <MX_SAI4_Init+0xe8>)
 8009634:	2201      	movs	r2, #1
 8009636:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
  haudio_in_sai[PDM].Init.PdmInit.MicPairsNbr = 1;
 800963a:	4b09      	ldr	r3, [pc, #36]	; (8009660 <MX_SAI4_Init+0xe8>)
 800963c:	2201      	movs	r2, #1
 800963e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  haudio_in_sai[PDM].Init.PdmInit.ClockEnable = SAI_PDM_CLOCK2_ENABLE;
 8009642:	4b07      	ldr	r3, [pc, #28]	; (8009660 <MX_SAI4_Init+0xe8>)
 8009644:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009648:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4

  if (HAL_SAI_Init(&haudio_in_sai[PDM]) != HAL_OK)
 800964c:	4806      	ldr	r0, [pc, #24]	; (8009668 <MX_SAI4_Init+0xf0>)
 800964e:	f7ff fa2f 	bl	8008ab0 <HAL_SAI_Init>
 8009652:	4603      	mov	r3, r0
 8009654:	2b00      	cmp	r3, #0
 8009656:	d001      	beq.n	800965c <MX_SAI4_Init+0xe4>
  {
    Error_Handler();
 8009658:	f000 f878 	bl	800974c <Error_Handler>
  }

  /* USER CODE END SAI4_Init 2 */

}
 800965c:	bf00      	nop
 800965e:	bd80      	pop	{r7, pc}
 8009660:	2400054c 	.word	0x2400054c
 8009664:	58005404 	.word	0x58005404
 8009668:	24000600 	.word	0x24000600

0800966c <MX_BDMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_BDMA_Init(void)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b082      	sub	sp, #8
 8009670:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 8009672:	4b11      	ldr	r3, [pc, #68]	; (80096b8 <MX_BDMA_Init+0x4c>)
 8009674:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009678:	4a0f      	ldr	r2, [pc, #60]	; (80096b8 <MX_BDMA_Init+0x4c>)
 800967a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800967e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009682:	4b0d      	ldr	r3, [pc, #52]	; (80096b8 <MX_BDMA_Init+0x4c>)
 8009684:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009688:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800968c:	607b      	str	r3, [r7, #4]
 800968e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMAMUX2_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX2_OVR_IRQn, 0, 0);
 8009690:	2200      	movs	r2, #0
 8009692:	2100      	movs	r1, #0
 8009694:	2080      	movs	r0, #128	; 0x80
 8009696:	f7f8 fed2 	bl	800243e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX2_OVR_IRQn);
 800969a:	2080      	movs	r0, #128	; 0x80
 800969c:	f7f8 fee9 	bl	8002472 <HAL_NVIC_EnableIRQ>
  /* BDMA_Channel0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 0, 0);
 80096a0:	2200      	movs	r2, #0
 80096a2:	2100      	movs	r1, #0
 80096a4:	2081      	movs	r0, #129	; 0x81
 80096a6:	f7f8 feca 	bl	800243e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
 80096aa:	2081      	movs	r0, #129	; 0x81
 80096ac:	f7f8 fee1 	bl	8002472 <HAL_NVIC_EnableIRQ>

}
 80096b0:	bf00      	nop
 80096b2:	3708      	adds	r7, #8
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}
 80096b8:	58024400 	.word	0x58024400

080096bc <MX_GPIO_Init>:
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);

}

static void MX_GPIO_Init(void)
{
 80096bc:	b480      	push	{r7}
 80096be:	b085      	sub	sp, #20
 80096c0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80096c2:	4b21      	ldr	r3, [pc, #132]	; (8009748 <MX_GPIO_Init+0x8c>)
 80096c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80096c8:	4a1f      	ldr	r2, [pc, #124]	; (8009748 <MX_GPIO_Init+0x8c>)
 80096ca:	f043 0301 	orr.w	r3, r3, #1
 80096ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80096d2:	4b1d      	ldr	r3, [pc, #116]	; (8009748 <MX_GPIO_Init+0x8c>)
 80096d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80096d8:	f003 0301 	and.w	r3, r3, #1
 80096dc:	60fb      	str	r3, [r7, #12]
 80096de:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80096e0:	4b19      	ldr	r3, [pc, #100]	; (8009748 <MX_GPIO_Init+0x8c>)
 80096e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80096e6:	4a18      	ldr	r2, [pc, #96]	; (8009748 <MX_GPIO_Init+0x8c>)
 80096e8:	f043 0310 	orr.w	r3, r3, #16
 80096ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80096f0:	4b15      	ldr	r3, [pc, #84]	; (8009748 <MX_GPIO_Init+0x8c>)
 80096f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80096f6:	f003 0310 	and.w	r3, r3, #16
 80096fa:	60bb      	str	r3, [r7, #8]
 80096fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80096fe:	4b12      	ldr	r3, [pc, #72]	; (8009748 <MX_GPIO_Init+0x8c>)
 8009700:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009704:	4a10      	ldr	r2, [pc, #64]	; (8009748 <MX_GPIO_Init+0x8c>)
 8009706:	f043 0308 	orr.w	r3, r3, #8
 800970a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800970e:	4b0e      	ldr	r3, [pc, #56]	; (8009748 <MX_GPIO_Init+0x8c>)
 8009710:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009714:	f003 0308 	and.w	r3, r3, #8
 8009718:	607b      	str	r3, [r7, #4]
 800971a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800971c:	4b0a      	ldr	r3, [pc, #40]	; (8009748 <MX_GPIO_Init+0x8c>)
 800971e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009722:	4a09      	ldr	r2, [pc, #36]	; (8009748 <MX_GPIO_Init+0x8c>)
 8009724:	f043 0320 	orr.w	r3, r3, #32
 8009728:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800972c:	4b06      	ldr	r3, [pc, #24]	; (8009748 <MX_GPIO_Init+0x8c>)
 800972e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009732:	f003 0320 	and.w	r3, r3, #32
 8009736:	603b      	str	r3, [r7, #0]
 8009738:	683b      	ldr	r3, [r7, #0]

}
 800973a:	bf00      	nop
 800973c:	3714      	adds	r7, #20
 800973e:	46bd      	mov	sp, r7
 8009740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009744:	4770      	bx	lr
 8009746:	bf00      	nop
 8009748:	58024400 	.word	0x58024400

0800974c <Error_Handler>:
/* USER CODE BEGIN 4 */
/* USER CODE END 4 */


void Error_Handler(void)
{
 800974c:	b480      	push	{r7}
 800974e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8009750:	b672      	cpsid	i
}
 8009752:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8009754:	e7fe      	b.n	8009754 <Error_Handler+0x8>
	...

08009758 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009758:	b480      	push	{r7}
 800975a:	b083      	sub	sp, #12
 800975c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800975e:	4b0a      	ldr	r3, [pc, #40]	; (8009788 <HAL_MspInit+0x30>)
 8009760:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009764:	4a08      	ldr	r2, [pc, #32]	; (8009788 <HAL_MspInit+0x30>)
 8009766:	f043 0302 	orr.w	r3, r3, #2
 800976a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800976e:	4b06      	ldr	r3, [pc, #24]	; (8009788 <HAL_MspInit+0x30>)
 8009770:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009774:	f003 0302 	and.w	r3, r3, #2
 8009778:	607b      	str	r3, [r7, #4]
 800977a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800977c:	bf00      	nop
 800977e:	370c      	adds	r7, #12
 8009780:	46bd      	mov	sp, r7
 8009782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009786:	4770      	bx	lr
 8009788:	58024400 	.word	0x58024400

0800978c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800978c:	b480      	push	{r7}
 800978e:	b085      	sub	sp, #20
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	4a0b      	ldr	r2, [pc, #44]	; (80097c8 <HAL_CRC_MspInit+0x3c>)
 800979a:	4293      	cmp	r3, r2
 800979c:	d10e      	bne.n	80097bc <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800979e:	4b0b      	ldr	r3, [pc, #44]	; (80097cc <HAL_CRC_MspInit+0x40>)
 80097a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80097a4:	4a09      	ldr	r2, [pc, #36]	; (80097cc <HAL_CRC_MspInit+0x40>)
 80097a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80097aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80097ae:	4b07      	ldr	r3, [pc, #28]	; (80097cc <HAL_CRC_MspInit+0x40>)
 80097b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80097b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80097b8:	60fb      	str	r3, [r7, #12]
 80097ba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80097bc:	bf00      	nop
 80097be:	3714      	adds	r7, #20
 80097c0:	46bd      	mov	sp, r7
 80097c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c6:	4770      	bx	lr
 80097c8:	58024c00 	.word	0x58024c00
 80097cc:	58024400 	.word	0x58024400

080097d0 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b0b0      	sub	sp, #192	; 0xc0
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80097d8:	f107 030c 	add.w	r3, r7, #12
 80097dc:	22b4      	movs	r2, #180	; 0xb4
 80097de:	2100      	movs	r1, #0
 80097e0:	4618      	mov	r0, r3
 80097e2:	f002 f96f 	bl	800bac4 <memset>
  if(DFSDM1_Init == 0)
 80097e6:	4b15      	ldr	r3, [pc, #84]	; (800983c <HAL_DFSDM_ChannelMspInit+0x6c>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d122      	bne.n	8009834 <HAL_DFSDM_ChannelMspInit+0x64>
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 80097ee:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80097f2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_D2PCLK1;
 80097f4:	2300      	movs	r3, #0
 80097f6:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80097f8:	f107 030c 	add.w	r3, r7, #12
 80097fc:	4618      	mov	r0, r3
 80097fe:	f7fc ff77 	bl	80066f0 <HAL_RCCEx_PeriphCLKConfig>
 8009802:	4603      	mov	r3, r0
 8009804:	2b00      	cmp	r3, #0
 8009806:	d001      	beq.n	800980c <HAL_DFSDM_ChannelMspInit+0x3c>
    {
      Error_Handler();
 8009808:	f7ff ffa0 	bl	800974c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800980c:	4b0c      	ldr	r3, [pc, #48]	; (8009840 <HAL_DFSDM_ChannelMspInit+0x70>)
 800980e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009812:	4a0b      	ldr	r2, [pc, #44]	; (8009840 <HAL_DFSDM_ChannelMspInit+0x70>)
 8009814:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009818:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800981c:	4b08      	ldr	r3, [pc, #32]	; (8009840 <HAL_DFSDM_ChannelMspInit+0x70>)
 800981e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009822:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009826:	60bb      	str	r3, [r7, #8]
 8009828:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 800982a:	4b04      	ldr	r3, [pc, #16]	; (800983c <HAL_DFSDM_ChannelMspInit+0x6c>)
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	3301      	adds	r3, #1
 8009830:	4a02      	ldr	r2, [pc, #8]	; (800983c <HAL_DFSDM_ChannelMspInit+0x6c>)
 8009832:	6013      	str	r3, [r2, #0]
  }

}
 8009834:	bf00      	nop
 8009836:	37c0      	adds	r7, #192	; 0xc0
 8009838:	46bd      	mov	sp, r7
 800983a:	bd80      	pop	{r7, pc}
 800983c:	24000a50 	.word	0x24000a50
 8009840:	58024400 	.word	0x58024400

08009844 <HAL_SAI_MspInit>:

static uint32_t SAI1_client =0;
static uint32_t SAI4_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b0ba      	sub	sp, #232	; 0xe8
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800984c:	f107 0310 	add.w	r3, r7, #16
 8009850:	22b4      	movs	r2, #180	; 0xb4
 8009852:	2100      	movs	r1, #0
 8009854:	4618      	mov	r0, r3
 8009856:	f002 f935 	bl	800bac4 <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_B)
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	4aa9      	ldr	r2, [pc, #676]	; (8009b04 <HAL_SAI_MspInit+0x2c0>)
 8009860:	4293      	cmp	r3, r2
 8009862:	f040 80a5 	bne.w	80099b0 <HAL_SAI_MspInit+0x16c>
    {
      /* Peripheral clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8009866:	f44f 7380 	mov.w	r3, #256	; 0x100
 800986a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 800986c:	2300      	movs	r3, #0
 800986e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009870:	f107 0310 	add.w	r3, r7, #16
 8009874:	4618      	mov	r0, r3
 8009876:	f7fc ff3b 	bl	80066f0 <HAL_RCCEx_PeriphCLKConfig>
 800987a:	4603      	mov	r3, r0
 800987c:	2b00      	cmp	r3, #0
 800987e:	d001      	beq.n	8009884 <HAL_SAI_MspInit+0x40>
    {
      Error_Handler();
 8009880:	f7ff ff64 	bl	800974c <Error_Handler>
    }

      if (SAI1_client == 0)
 8009884:	4ba0      	ldr	r3, [pc, #640]	; (8009b08 <HAL_SAI_MspInit+0x2c4>)
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d10e      	bne.n	80098aa <HAL_SAI_MspInit+0x66>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800988c:	4b9f      	ldr	r3, [pc, #636]	; (8009b0c <HAL_SAI_MspInit+0x2c8>)
 800988e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009892:	4a9e      	ldr	r2, [pc, #632]	; (8009b0c <HAL_SAI_MspInit+0x2c8>)
 8009894:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009898:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800989c:	4b9b      	ldr	r3, [pc, #620]	; (8009b0c <HAL_SAI_MspInit+0x2c8>)
 800989e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80098a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80098a6:	60fb      	str	r3, [r7, #12]
 80098a8:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 80098aa:	4b97      	ldr	r3, [pc, #604]	; (8009b08 <HAL_SAI_MspInit+0x2c4>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	3301      	adds	r3, #1
 80098b0:	4a95      	ldr	r2, [pc, #596]	; (8009b08 <HAL_SAI_MspInit+0x2c4>)
 80098b2:	6013      	str	r3, [r2, #0]
    PE3     ------> SAI1_SD_B
    PF8     ------> SAI1_SCK_B
    PF7     ------> SAI1_MCLK_B
    PF9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80098b4:	2308      	movs	r3, #8
 80098b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80098ba:	2302      	movs	r3, #2
 80098bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80098c0:	2300      	movs	r3, #0
 80098c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80098c6:	2300      	movs	r3, #0
 80098c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80098cc:	2306      	movs	r3, #6
 80098ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80098d2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80098d6:	4619      	mov	r1, r3
 80098d8:	488d      	ldr	r0, [pc, #564]	; (8009b10 <HAL_SAI_MspInit+0x2cc>)
 80098da:	f7fb fcf9 	bl	80052d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_9;
 80098de:	f44f 7360 	mov.w	r3, #896	; 0x380
 80098e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80098e6:	2302      	movs	r3, #2
 80098e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80098ec:	2300      	movs	r3, #0
 80098ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80098f2:	2300      	movs	r3, #0
 80098f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80098f8:	2306      	movs	r3, #6
 80098fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80098fe:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8009902:	4619      	mov	r1, r3
 8009904:	4883      	ldr	r0, [pc, #524]	; (8009b14 <HAL_SAI_MspInit+0x2d0>)
 8009906:	f7fb fce3 	bl	80052d0 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA1_Stream1;
 800990a:	4b83      	ldr	r3, [pc, #524]	; (8009b18 <HAL_SAI_MspInit+0x2d4>)
 800990c:	4a83      	ldr	r2, [pc, #524]	; (8009b1c <HAL_SAI_MspInit+0x2d8>)
 800990e:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 8009910:	4b81      	ldr	r3, [pc, #516]	; (8009b18 <HAL_SAI_MspInit+0x2d4>)
 8009912:	2258      	movs	r2, #88	; 0x58
 8009914:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009916:	4b80      	ldr	r3, [pc, #512]	; (8009b18 <HAL_SAI_MspInit+0x2d4>)
 8009918:	2240      	movs	r2, #64	; 0x40
 800991a:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 800991c:	4b7e      	ldr	r3, [pc, #504]	; (8009b18 <HAL_SAI_MspInit+0x2d4>)
 800991e:	2200      	movs	r2, #0
 8009920:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 8009922:	4b7d      	ldr	r3, [pc, #500]	; (8009b18 <HAL_SAI_MspInit+0x2d4>)
 8009924:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009928:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800992a:	4b7b      	ldr	r3, [pc, #492]	; (8009b18 <HAL_SAI_MspInit+0x2d4>)
 800992c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009930:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8009932:	4b79      	ldr	r3, [pc, #484]	; (8009b18 <HAL_SAI_MspInit+0x2d4>)
 8009934:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009938:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 800993a:	4b77      	ldr	r3, [pc, #476]	; (8009b18 <HAL_SAI_MspInit+0x2d4>)
 800993c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009940:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_HIGH;
 8009942:	4b75      	ldr	r3, [pc, #468]	; (8009b18 <HAL_SAI_MspInit+0x2d4>)
 8009944:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009948:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800994a:	4b73      	ldr	r3, [pc, #460]	; (8009b18 <HAL_SAI_MspInit+0x2d4>)
 800994c:	2200      	movs	r2, #0
 800994e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8009950:	4871      	ldr	r0, [pc, #452]	; (8009b18 <HAL_SAI_MspInit+0x2d4>)
 8009952:	f7f9 f8e1 	bl	8002b18 <HAL_DMA_Init>
 8009956:	4603      	mov	r3, r0
 8009958:	2b00      	cmp	r3, #0
 800995a:	d001      	beq.n	8009960 <HAL_SAI_MspInit+0x11c>
    {
      Error_Handler();
 800995c:	f7ff fef6 	bl	800974c <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 8009960:	2306      	movs	r3, #6
 8009962:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 8009966:	2300      	movs	r3, #0
 8009968:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    pSyncConfig.SyncEnable = DISABLE;
 800996c:	2300      	movs	r3, #0
 800996e:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    pSyncConfig.EventEnable = ENABLE;
 8009972:	2301      	movs	r3, #1
 8009974:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    pSyncConfig.RequestNumber = 1;
 8009978:	2301      	movs	r3, #1
 800997a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai1_b, &pSyncConfig) != HAL_OK)
 800997e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8009982:	4619      	mov	r1, r3
 8009984:	4864      	ldr	r0, [pc, #400]	; (8009b18 <HAL_SAI_MspInit+0x2d4>)
 8009986:	f7fb fb6b 	bl	8005060 <HAL_DMAEx_ConfigMuxSync>
 800998a:	4603      	mov	r3, r0
 800998c:	2b00      	cmp	r3, #0
 800998e:	d001      	beq.n	8009994 <HAL_SAI_MspInit+0x150>
    {
      Error_Handler();
 8009990:	f7ff fedc 	bl	800974c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	4a60      	ldr	r2, [pc, #384]	; (8009b18 <HAL_SAI_MspInit+0x2d4>)
 8009998:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800999c:	4a5e      	ldr	r2, [pc, #376]	; (8009b18 <HAL_SAI_MspInit+0x2d4>)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	4a5c      	ldr	r2, [pc, #368]	; (8009b18 <HAL_SAI_MspInit+0x2d4>)
 80099a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80099aa:	4a5b      	ldr	r2, [pc, #364]	; (8009b18 <HAL_SAI_MspInit+0x2d4>)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	6393      	str	r3, [r2, #56]	; 0x38
    }
/* SAI4 */
    if(hsai->Instance==SAI4_Block_A)
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	4a5a      	ldr	r2, [pc, #360]	; (8009b20 <HAL_SAI_MspInit+0x2dc>)
 80099b6:	4293      	cmp	r3, r2
 80099b8:	f040 80a0 	bne.w	8009afc <HAL_SAI_MspInit+0x2b8>
    {
    /* Peripheral clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI4A;
 80099bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80099c0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Sai4AClockSelection = RCC_SAI4ACLKSOURCE_PLL;
 80099c2:	2300      	movs	r3, #0
 80099c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80099c8:	f107 0310 	add.w	r3, r7, #16
 80099cc:	4618      	mov	r0, r3
 80099ce:	f7fc fe8f 	bl	80066f0 <HAL_RCCEx_PeriphCLKConfig>
 80099d2:	4603      	mov	r3, r0
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d001      	beq.n	80099dc <HAL_SAI_MspInit+0x198>
    {
      Error_Handler();
 80099d8:	f7ff feb8 	bl	800974c <Error_Handler>
    }

    if (SAI4_client == 0)
 80099dc:	4b51      	ldr	r3, [pc, #324]	; (8009b24 <HAL_SAI_MspInit+0x2e0>)
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d10e      	bne.n	8009a02 <HAL_SAI_MspInit+0x1be>
    {
       __HAL_RCC_SAI4_CLK_ENABLE();
 80099e4:	4b49      	ldr	r3, [pc, #292]	; (8009b0c <HAL_SAI_MspInit+0x2c8>)
 80099e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80099ea:	4a48      	ldr	r2, [pc, #288]	; (8009b0c <HAL_SAI_MspInit+0x2c8>)
 80099ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80099f0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80099f4:	4b45      	ldr	r3, [pc, #276]	; (8009b0c <HAL_SAI_MspInit+0x2c8>)
 80099f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80099fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80099fe:	60bb      	str	r3, [r7, #8]
 8009a00:	68bb      	ldr	r3, [r7, #8]
    }
    SAI4_client ++;
 8009a02:	4b48      	ldr	r3, [pc, #288]	; (8009b24 <HAL_SAI_MspInit+0x2e0>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	3301      	adds	r3, #1
 8009a08:	4a46      	ldr	r2, [pc, #280]	; (8009b24 <HAL_SAI_MspInit+0x2e0>)
 8009a0a:	6013      	str	r3, [r2, #0]
    /**SAI4_A_Block_A GPIO Configuration
    PE4     ------> SAI4_D2
    PE5     ------> SAI4_CK2
    PD6     ------> SAI4_D1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8009a0c:	2330      	movs	r3, #48	; 0x30
 8009a0e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009a12:	2302      	movs	r3, #2
 8009a14:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a18:	2300      	movs	r3, #0
 8009a1a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009a1e:	2300      	movs	r3, #0
 8009a20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 8009a24:	230a      	movs	r3, #10
 8009a26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009a2a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8009a2e:	4619      	mov	r1, r3
 8009a30:	4837      	ldr	r0, [pc, #220]	; (8009b10 <HAL_SAI_MspInit+0x2cc>)
 8009a32:	f7fb fc4d 	bl	80052d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8009a36:	2340      	movs	r3, #64	; 0x40
 8009a38:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009a3c:	2302      	movs	r3, #2
 8009a3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a42:	2300      	movs	r3, #0
 8009a44:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009a48:	2300      	movs	r3, #0
 8009a4a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF1_SAI4;
 8009a4e:	2301      	movs	r3, #1
 8009a50:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009a54:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8009a58:	4619      	mov	r1, r3
 8009a5a:	4833      	ldr	r0, [pc, #204]	; (8009b28 <HAL_SAI_MspInit+0x2e4>)
 8009a5c:	f7fb fc38 	bl	80052d0 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai4_a.Instance = BDMA_Channel0;
 8009a60:	4b32      	ldr	r3, [pc, #200]	; (8009b2c <HAL_SAI_MspInit+0x2e8>)
 8009a62:	4a33      	ldr	r2, [pc, #204]	; (8009b30 <HAL_SAI_MspInit+0x2ec>)
 8009a64:	601a      	str	r2, [r3, #0]
    hdma_sai4_a.Init.Request = BDMA_REQUEST_SAI4_A;
 8009a66:	4b31      	ldr	r3, [pc, #196]	; (8009b2c <HAL_SAI_MspInit+0x2e8>)
 8009a68:	220f      	movs	r2, #15
 8009a6a:	605a      	str	r2, [r3, #4]
    hdma_sai4_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009a6c:	4b2f      	ldr	r3, [pc, #188]	; (8009b2c <HAL_SAI_MspInit+0x2e8>)
 8009a6e:	2200      	movs	r2, #0
 8009a70:	609a      	str	r2, [r3, #8]
    hdma_sai4_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8009a72:	4b2e      	ldr	r3, [pc, #184]	; (8009b2c <HAL_SAI_MspInit+0x2e8>)
 8009a74:	2200      	movs	r2, #0
 8009a76:	60da      	str	r2, [r3, #12]
    hdma_sai4_a.Init.MemInc = DMA_MINC_ENABLE;
 8009a78:	4b2c      	ldr	r3, [pc, #176]	; (8009b2c <HAL_SAI_MspInit+0x2e8>)
 8009a7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009a7e:	611a      	str	r2, [r3, #16]
    hdma_sai4_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009a80:	4b2a      	ldr	r3, [pc, #168]	; (8009b2c <HAL_SAI_MspInit+0x2e8>)
 8009a82:	2200      	movs	r2, #0
 8009a84:	615a      	str	r2, [r3, #20]
    hdma_sai4_a.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009a86:	4b29      	ldr	r3, [pc, #164]	; (8009b2c <HAL_SAI_MspInit+0x2e8>)
 8009a88:	2200      	movs	r2, #0
 8009a8a:	619a      	str	r2, [r3, #24]
    hdma_sai4_a.Init.Mode = DMA_CIRCULAR;
 8009a8c:	4b27      	ldr	r3, [pc, #156]	; (8009b2c <HAL_SAI_MspInit+0x2e8>)
 8009a8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009a92:	61da      	str	r2, [r3, #28]
    hdma_sai4_a.Init.Priority = DMA_PRIORITY_HIGH;
 8009a94:	4b25      	ldr	r3, [pc, #148]	; (8009b2c <HAL_SAI_MspInit+0x2e8>)
 8009a96:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009a9a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai4_a) != HAL_OK)
 8009a9c:	4823      	ldr	r0, [pc, #140]	; (8009b2c <HAL_SAI_MspInit+0x2e8>)
 8009a9e:	f7f9 f83b 	bl	8002b18 <HAL_DMA_Init>
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d001      	beq.n	8009aac <HAL_SAI_MspInit+0x268>
    {
      Error_Handler();
 8009aa8:	f7ff fe50 	bl	800974c <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX2_SYNC_EXTI0;
 8009aac:	230e      	movs	r3, #14
 8009aae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    pSyncConfig.SyncEnable = DISABLE;
 8009ab8:	2300      	movs	r3, #0
 8009aba:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    pSyncConfig.EventEnable = ENABLE;
 8009abe:	2301      	movs	r3, #1
 8009ac0:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    pSyncConfig.RequestNumber = 1;
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai4_a, &pSyncConfig) != HAL_OK)
 8009aca:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8009ace:	4619      	mov	r1, r3
 8009ad0:	4816      	ldr	r0, [pc, #88]	; (8009b2c <HAL_SAI_MspInit+0x2e8>)
 8009ad2:	f7fb fac5 	bl	8005060 <HAL_DMAEx_ConfigMuxSync>
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d001      	beq.n	8009ae0 <HAL_SAI_MspInit+0x29c>
    {
      Error_Handler();
 8009adc:	f7ff fe36 	bl	800974c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai4_a);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	4a12      	ldr	r2, [pc, #72]	; (8009b2c <HAL_SAI_MspInit+0x2e8>)
 8009ae4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8009ae8:	4a10      	ldr	r2, [pc, #64]	; (8009b2c <HAL_SAI_MspInit+0x2e8>)
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai4_a);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	4a0e      	ldr	r2, [pc, #56]	; (8009b2c <HAL_SAI_MspInit+0x2e8>)
 8009af2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8009af6:	4a0d      	ldr	r2, [pc, #52]	; (8009b2c <HAL_SAI_MspInit+0x2e8>)
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	6393      	str	r3, [r2, #56]	; 0x38

    }
}
 8009afc:	bf00      	nop
 8009afe:	37e8      	adds	r7, #232	; 0xe8
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bd80      	pop	{r7, pc}
 8009b04:	40015824 	.word	0x40015824
 8009b08:	24000a54 	.word	0x24000a54
 8009b0c:	58024400 	.word	0x58024400
 8009b10:	58021000 	.word	0x58021000
 8009b14:	58021400 	.word	0x58021400
 8009b18:	24000de0 	.word	0x24000de0
 8009b1c:	40020028 	.word	0x40020028
 8009b20:	58005404 	.word	0x58005404
 8009b24:	24000a58 	.word	0x24000a58
 8009b28:	58020c00 	.word	0x58020c00
 8009b2c:	24000d68 	.word	0x24000d68
 8009b30:	58025408 	.word	0x58025408

08009b34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009b34:	b480      	push	{r7}
 8009b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8009b38:	e7fe      	b.n	8009b38 <NMI_Handler+0x4>

08009b3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009b3a:	b480      	push	{r7}
 8009b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009b3e:	e7fe      	b.n	8009b3e <HardFault_Handler+0x4>

08009b40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009b40:	b480      	push	{r7}
 8009b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009b44:	e7fe      	b.n	8009b44 <MemManage_Handler+0x4>

08009b46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009b46:	b480      	push	{r7}
 8009b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009b4a:	e7fe      	b.n	8009b4a <BusFault_Handler+0x4>

08009b4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009b50:	e7fe      	b.n	8009b50 <UsageFault_Handler+0x4>

08009b52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009b52:	b480      	push	{r7}
 8009b54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009b56:	bf00      	nop
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5e:	4770      	bx	lr

08009b60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009b60:	b480      	push	{r7}
 8009b62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009b64:	bf00      	nop
 8009b66:	46bd      	mov	sp, r7
 8009b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6c:	4770      	bx	lr

08009b6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009b6e:	b480      	push	{r7}
 8009b70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009b72:	bf00      	nop
 8009b74:	46bd      	mov	sp, r7
 8009b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7a:	4770      	bx	lr

08009b7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009b80:	f7f8 fb3e 	bl	8002200 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009b84:	bf00      	nop
 8009b86:	bd80      	pop	{r7, pc}

08009b88 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 8009b8c:	4802      	ldr	r0, [pc, #8]	; (8009b98 <DMA1_Stream1_IRQHandler+0x10>)
 8009b8e:	f7f9 ff41 	bl	8003a14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8009b92:	bf00      	nop
 8009b94:	bd80      	pop	{r7, pc}
 8009b96:	bf00      	nop
 8009b98:	24000de0 	.word	0x24000de0

08009b9c <DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX1 overrun interrupt.
  */
void DMAMUX1_OVR_IRQHandler(void)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMAMUX1_OVR_IRQn 0 */
  // Handle DMA1_Stream1
  HAL_DMAEx_MUX_IRQHandler(&hdma_sai1_b);
 8009ba0:	4802      	ldr	r0, [pc, #8]	; (8009bac <DMAMUX1_OVR_IRQHandler+0x10>)
 8009ba2:	f7fb fb42 	bl	800522a <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMAMUX1_OVR_IRQn 1 */
}
 8009ba6:	bf00      	nop
 8009ba8:	bd80      	pop	{r7, pc}
 8009baa:	bf00      	nop
 8009bac:	24000de0 	.word	0x24000de0

08009bb0 <DMAMUX2_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX2 overrun interrupt.
  */
void DMAMUX2_OVR_IRQHandler(void)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX2_OVR_IRQn 0 */

  /* USER CODE END DMAMUX2_OVR_IRQn 0 */
  // Handle BDMA_Channel0
  HAL_DMAEx_MUX_IRQHandler(&hdma_sai4_a);
 8009bb4:	4802      	ldr	r0, [pc, #8]	; (8009bc0 <DMAMUX2_OVR_IRQHandler+0x10>)
 8009bb6:	f7fb fb38 	bl	800522a <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX2_OVR_IRQn 1 */

  /* USER CODE END DMAMUX2_OVR_IRQn 1 */
}
 8009bba:	bf00      	nop
 8009bbc:	bd80      	pop	{r7, pc}
 8009bbe:	bf00      	nop
 8009bc0:	24000d68 	.word	0x24000d68

08009bc4 <BDMA_Channel0_IRQHandler>:

/**
  * @brief This function handles BDMA channel0 global interrupt.
  */
void BDMA_Channel0_IRQHandler(void)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  //HAL_DMA_IRQHandler(&hdma_sai4_a);
//	HAL_DMA_IRQHandler(&haudio_in_sai[PDM].hdmarx);
	BSP_AUDIO_IN_IRQHandler(PDM, AUDIO_IN_DEVICE_DIGITAL_MIC1);
 8009bc8:	2110      	movs	r1, #16
 8009bca:	2001      	movs	r0, #1
 8009bcc:	f7f7 ff9c 	bl	8001b08 <BSP_AUDIO_IN_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel0_IRQn 1 */

  /* USER CODE END BDMA_Channel0_IRQn 1 */
}
 8009bd0:	bf00      	nop
 8009bd2:	bd80      	pop	{r7, pc}

08009bd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8009bd4:	b480      	push	{r7}
 8009bd6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8009bd8:	4b32      	ldr	r3, [pc, #200]	; (8009ca4 <SystemInit+0xd0>)
 8009bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bde:	4a31      	ldr	r2, [pc, #196]	; (8009ca4 <SystemInit+0xd0>)
 8009be0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009be4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8009be8:	4b2f      	ldr	r3, [pc, #188]	; (8009ca8 <SystemInit+0xd4>)
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f003 030f 	and.w	r3, r3, #15
 8009bf0:	2b06      	cmp	r3, #6
 8009bf2:	d807      	bhi.n	8009c04 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8009bf4:	4b2c      	ldr	r3, [pc, #176]	; (8009ca8 <SystemInit+0xd4>)
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	f023 030f 	bic.w	r3, r3, #15
 8009bfc:	4a2a      	ldr	r2, [pc, #168]	; (8009ca8 <SystemInit+0xd4>)
 8009bfe:	f043 0307 	orr.w	r3, r3, #7
 8009c02:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8009c04:	4b29      	ldr	r3, [pc, #164]	; (8009cac <SystemInit+0xd8>)
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	4a28      	ldr	r2, [pc, #160]	; (8009cac <SystemInit+0xd8>)
 8009c0a:	f043 0301 	orr.w	r3, r3, #1
 8009c0e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8009c10:	4b26      	ldr	r3, [pc, #152]	; (8009cac <SystemInit+0xd8>)
 8009c12:	2200      	movs	r2, #0
 8009c14:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8009c16:	4b25      	ldr	r3, [pc, #148]	; (8009cac <SystemInit+0xd8>)
 8009c18:	681a      	ldr	r2, [r3, #0]
 8009c1a:	4924      	ldr	r1, [pc, #144]	; (8009cac <SystemInit+0xd8>)
 8009c1c:	4b24      	ldr	r3, [pc, #144]	; (8009cb0 <SystemInit+0xdc>)
 8009c1e:	4013      	ands	r3, r2
 8009c20:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8009c22:	4b21      	ldr	r3, [pc, #132]	; (8009ca8 <SystemInit+0xd4>)
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	f003 0308 	and.w	r3, r3, #8
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d007      	beq.n	8009c3e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8009c2e:	4b1e      	ldr	r3, [pc, #120]	; (8009ca8 <SystemInit+0xd4>)
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	f023 030f 	bic.w	r3, r3, #15
 8009c36:	4a1c      	ldr	r2, [pc, #112]	; (8009ca8 <SystemInit+0xd4>)
 8009c38:	f043 0307 	orr.w	r3, r3, #7
 8009c3c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8009c3e:	4b1b      	ldr	r3, [pc, #108]	; (8009cac <SystemInit+0xd8>)
 8009c40:	2200      	movs	r2, #0
 8009c42:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8009c44:	4b19      	ldr	r3, [pc, #100]	; (8009cac <SystemInit+0xd8>)
 8009c46:	2200      	movs	r2, #0
 8009c48:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8009c4a:	4b18      	ldr	r3, [pc, #96]	; (8009cac <SystemInit+0xd8>)
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8009c50:	4b16      	ldr	r3, [pc, #88]	; (8009cac <SystemInit+0xd8>)
 8009c52:	4a18      	ldr	r2, [pc, #96]	; (8009cb4 <SystemInit+0xe0>)
 8009c54:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8009c56:	4b15      	ldr	r3, [pc, #84]	; (8009cac <SystemInit+0xd8>)
 8009c58:	4a17      	ldr	r2, [pc, #92]	; (8009cb8 <SystemInit+0xe4>)
 8009c5a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8009c5c:	4b13      	ldr	r3, [pc, #76]	; (8009cac <SystemInit+0xd8>)
 8009c5e:	4a17      	ldr	r2, [pc, #92]	; (8009cbc <SystemInit+0xe8>)
 8009c60:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8009c62:	4b12      	ldr	r3, [pc, #72]	; (8009cac <SystemInit+0xd8>)
 8009c64:	2200      	movs	r2, #0
 8009c66:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8009c68:	4b10      	ldr	r3, [pc, #64]	; (8009cac <SystemInit+0xd8>)
 8009c6a:	4a14      	ldr	r2, [pc, #80]	; (8009cbc <SystemInit+0xe8>)
 8009c6c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8009c6e:	4b0f      	ldr	r3, [pc, #60]	; (8009cac <SystemInit+0xd8>)
 8009c70:	2200      	movs	r2, #0
 8009c72:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8009c74:	4b0d      	ldr	r3, [pc, #52]	; (8009cac <SystemInit+0xd8>)
 8009c76:	4a11      	ldr	r2, [pc, #68]	; (8009cbc <SystemInit+0xe8>)
 8009c78:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8009c7a:	4b0c      	ldr	r3, [pc, #48]	; (8009cac <SystemInit+0xd8>)
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8009c80:	4b0a      	ldr	r3, [pc, #40]	; (8009cac <SystemInit+0xd8>)
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	4a09      	ldr	r2, [pc, #36]	; (8009cac <SystemInit+0xd8>)
 8009c86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009c8a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8009c8c:	4b07      	ldr	r3, [pc, #28]	; (8009cac <SystemInit+0xd8>)
 8009c8e:	2200      	movs	r2, #0
 8009c90:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8009c92:	4b0b      	ldr	r3, [pc, #44]	; (8009cc0 <SystemInit+0xec>)
 8009c94:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8009c98:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8009c9a:	bf00      	nop
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca2:	4770      	bx	lr
 8009ca4:	e000ed00 	.word	0xe000ed00
 8009ca8:	52002000 	.word	0x52002000
 8009cac:	58024400 	.word	0x58024400
 8009cb0:	eaf6ed7f 	.word	0xeaf6ed7f
 8009cb4:	02020200 	.word	0x02020200
 8009cb8:	01ff0000 	.word	0x01ff0000
 8009cbc:	01010280 	.word	0x01010280
 8009cc0:	52004000 	.word	0x52004000

08009cc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8009cc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009cfc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8009cc8:	f7ff ff84 	bl	8009bd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009ccc:	480c      	ldr	r0, [pc, #48]	; (8009d00 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8009cce:	490d      	ldr	r1, [pc, #52]	; (8009d04 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8009cd0:	4a0d      	ldr	r2, [pc, #52]	; (8009d08 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8009cd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009cd4:	e002      	b.n	8009cdc <LoopCopyDataInit>

08009cd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009cd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009cd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009cda:	3304      	adds	r3, #4

08009cdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009cdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009cde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009ce0:	d3f9      	bcc.n	8009cd6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009ce2:	4a0a      	ldr	r2, [pc, #40]	; (8009d0c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8009ce4:	4c0a      	ldr	r4, [pc, #40]	; (8009d10 <LoopFillZerobss+0x22>)
  movs r3, #0
 8009ce6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009ce8:	e001      	b.n	8009cee <LoopFillZerobss>

08009cea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009cea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009cec:	3204      	adds	r2, #4

08009cee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009cee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009cf0:	d3fb      	bcc.n	8009cea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8009cf2:	f001 fec3 	bl	800ba7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009cf6:	f7ff fb52 	bl	800939e <main>
  bx  lr
 8009cfa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8009cfc:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8009d00:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8009d04:	24000474 	.word	0x24000474
  ldr r2, =_sidata
 8009d08:	0800c1b8 	.word	0x0800c1b8
  ldr r2, =_sbss
 8009d0c:	24000474 	.word	0x24000474
  ldr r4, =_ebss
 8009d10:	24000e58 	.word	0x24000e58

08009d14 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009d14:	e7fe      	b.n	8009d14 <ADC3_IRQHandler>
	...

08009d18 <D16_GENERIC>:
 8009d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d1c:	b089      	sub	sp, #36	; 0x24
 8009d1e:	6993      	ldr	r3, [r2, #24]
 8009d20:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8009d22:	9103      	str	r1, [sp, #12]
 8009d24:	9307      	str	r3, [sp, #28]
 8009d26:	69d3      	ldr	r3, [r2, #28]
 8009d28:	e9d2 c102 	ldrd	ip, r1, [r2, #8]
 8009d2c:	e9d2 4a04 	ldrd	r4, sl, [r2, #16]
 8009d30:	9106      	str	r1, [sp, #24]
 8009d32:	e9d2 810c 	ldrd	r8, r1, [r2, #48]	; 0x30
 8009d36:	2d00      	cmp	r5, #0
 8009d38:	d063      	beq.n	8009e02 <D16_GENERIC+0xea>
 8009d3a:	f001 0520 	and.w	r5, r1, #32
 8009d3e:	f001 0110 	and.w	r1, r1, #16
 8009d42:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 8009e24 <D16_GENERIC+0x10c>
 8009d46:	46c1      	mov	r9, r8
 8009d48:	9104      	str	r1, [sp, #16]
 8009d4a:	2100      	movs	r1, #0
 8009d4c:	9505      	str	r5, [sp, #20]
 8009d4e:	e04d      	b.n	8009dec <D16_GENERIC+0xd4>
 8009d50:	5d87      	ldrb	r7, [r0, r6]
 8009d52:	7805      	ldrb	r5, [r0, #0]
 8009d54:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 8009d58:	eb05 2707 	add.w	r7, r5, r7, lsl #8
 8009d5c:	b2fe      	uxtb	r6, r7
 8009d5e:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8009d62:	f85e 5026 	ldr.w	r5, [lr, r6, lsl #2]
 8009d66:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
 8009d6a:	441d      	add	r5, r3
 8009d6c:	eb06 2395 	add.w	r3, r6, r5, lsr #10
 8009d70:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8009d74:	f3c3 0609 	ubfx	r6, r3, #0, #10
 8009d78:	0a9b      	lsrs	r3, r3, #10
 8009d7a:	ea46 4605 	orr.w	r6, r6, r5, lsl #16
 8009d7e:	4d27      	ldr	r5, [pc, #156]	; (8009e1c <D16_GENERIC+0x104>)
 8009d80:	fb26 c505 	smlad	r5, r6, r5, ip
 8009d84:	4f26      	ldr	r7, [pc, #152]	; (8009e20 <D16_GENERIC+0x108>)
 8009d86:	fb26 fc07 	smuad	ip, r6, r7
 8009d8a:	9e04      	ldr	r6, [sp, #16]
 8009d8c:	f101 0801 	add.w	r8, r1, #1
 8009d90:	f5a5 6500 	sub.w	r5, r5, #2048	; 0x800
 8009d94:	b1ae      	cbz	r6, 8009dc2 <D16_GENERIC+0xaa>
 8009d96:	442c      	add	r4, r5
 8009d98:	f8d2 b020 	ldr.w	fp, [r2, #32]
 8009d9c:	eba4 040a 	sub.w	r4, r4, sl
 8009da0:	46aa      	mov	sl, r5
 8009da2:	17e7      	asrs	r7, r4, #31
 8009da4:	fba4 450b 	umull	r4, r5, r4, fp
 8009da8:	e9cd 4500 	strd	r4, r5, [sp]
 8009dac:	fb0b 5407 	mla	r4, fp, r7, r5
 8009db0:	9401      	str	r4, [sp, #4]
 8009db2:	e9dd 4500 	ldrd	r4, r5, [sp]
 8009db6:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 8009dba:	f145 0500 	adc.w	r5, r5, #0
 8009dbe:	006c      	lsls	r4, r5, #1
 8009dc0:	4625      	mov	r5, r4
 8009dc2:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 8009dc6:	042d      	lsls	r5, r5, #16
 8009dc8:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009dcc:	2700      	movs	r7, #0
 8009dce:	fb01 fb0b 	mul.w	fp, r1, fp
 8009dd2:	fa1f f188 	uxth.w	r1, r8
 8009dd6:	fbc9 6705 	smlal	r6, r7, r9, r5
 8009dda:	9e03      	ldr	r6, [sp, #12]
 8009ddc:	10bd      	asrs	r5, r7, #2
 8009dde:	f305 050f 	ssat	r5, #16, r5
 8009de2:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 8009de6:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8009de8:	428d      	cmp	r5, r1
 8009dea:	d90a      	bls.n	8009e02 <D16_GENERIC+0xea>
 8009dec:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 8009dee:	2d01      	cmp	r5, #1
 8009df0:	b2ee      	uxtb	r6, r5
 8009df2:	d1ad      	bne.n	8009d50 <D16_GENERIC+0x38>
 8009df4:	9d05      	ldr	r5, [sp, #20]
 8009df6:	f850 7b02 	ldr.w	r7, [r0], #2
 8009dfa:	2d00      	cmp	r5, #0
 8009dfc:	d0ae      	beq.n	8009d5c <D16_GENERIC+0x44>
 8009dfe:	ba7f      	rev16	r7, r7
 8009e00:	e7ac      	b.n	8009d5c <D16_GENERIC+0x44>
 8009e02:	2000      	movs	r0, #0
 8009e04:	9906      	ldr	r1, [sp, #24]
 8009e06:	61d3      	str	r3, [r2, #28]
 8009e08:	9b07      	ldr	r3, [sp, #28]
 8009e0a:	f8c2 c008 	str.w	ip, [r2, #8]
 8009e0e:	60d1      	str	r1, [r2, #12]
 8009e10:	6193      	str	r3, [r2, #24]
 8009e12:	e9c2 4a04 	strd	r4, sl, [r2, #16]
 8009e16:	b009      	add	sp, #36	; 0x24
 8009e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e1c:	00030001 	.word	0x00030001
 8009e20:	00010003 	.word	0x00010003
 8009e24:	24000000 	.word	0x24000000

08009e28 <D24_GENERIC>:
 8009e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e2c:	e9d2 4304 	ldrd	r4, r3, [r2, #16]
 8009e30:	b089      	sub	sp, #36	; 0x24
 8009e32:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 8009e34:	9303      	str	r3, [sp, #12]
 8009e36:	6993      	ldr	r3, [r2, #24]
 8009e38:	9104      	str	r1, [sp, #16]
 8009e3a:	9307      	str	r3, [sp, #28]
 8009e3c:	69d1      	ldr	r1, [r2, #28]
 8009e3e:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 8009e42:	e9d2 a50c 	ldrd	sl, r5, [r2, #48]	; 0x30
 8009e46:	2e00      	cmp	r6, #0
 8009e48:	f000 8088 	beq.w	8009f5c <D24_GENERIC+0x134>
 8009e4c:	f005 0620 	and.w	r6, r5, #32
 8009e50:	f005 0510 	and.w	r5, r5, #16
 8009e54:	f04f 0c00 	mov.w	ip, #0
 8009e58:	f8df e140 	ldr.w	lr, [pc, #320]	; 8009f9c <D24_GENERIC+0x174>
 8009e5c:	9606      	str	r6, [sp, #24]
 8009e5e:	9505      	str	r5, [sp, #20]
 8009e60:	e064      	b.n	8009f2c <D24_GENERIC+0x104>
 8009e62:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 8009e66:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8009e6a:	f810 b007 	ldrb.w	fp, [r0, r7]
 8009e6e:	042d      	lsls	r5, r5, #16
 8009e70:	19f0      	adds	r0, r6, r7
 8009e72:	eb05 250b 	add.w	r5, r5, fp, lsl #8
 8009e76:	44a9      	add	r9, r5
 8009e78:	fa5f f689 	uxtb.w	r6, r9
 8009e7c:	f3c9 2707 	ubfx	r7, r9, #8, #8
 8009e80:	ea4f 4919 	mov.w	r9, r9, lsr #16
 8009e84:	f85e 6026 	ldr.w	r6, [lr, r6, lsl #2]
 8009e88:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
 8009e8c:	eb06 2691 	add.w	r6, r6, r1, lsr #10
 8009e90:	f85e 1029 	ldr.w	r1, [lr, r9, lsl #2]
 8009e94:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 8009e98:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8009e9c:	f3c7 0509 	ubfx	r5, r7, #0, #10
 8009ea0:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 8009ea4:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 8009ea8:	4d3a      	ldr	r5, [pc, #232]	; (8009f94 <D24_GENERIC+0x16c>)
 8009eaa:	fb26 8705 	smlad	r7, r6, r5, r8
 8009eae:	4d3a      	ldr	r5, [pc, #232]	; (8009f98 <D24_GENERIC+0x170>)
 8009eb0:	fb26 3805 	smlad	r8, r6, r5, r3
 8009eb4:	f3c1 0309 	ubfx	r3, r1, #0, #10
 8009eb8:	eb03 0b43 	add.w	fp, r3, r3, lsl #1
 8009ebc:	2301      	movs	r3, #1
 8009ebe:	eb08 084b 	add.w	r8, r8, fp, lsl #1
 8009ec2:	fb26 f603 	smuad	r6, r6, r3
 8009ec6:	eb0c 0903 	add.w	r9, ip, r3
 8009eca:	eb0b 0306 	add.w	r3, fp, r6
 8009ece:	9e05      	ldr	r6, [sp, #20]
 8009ed0:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 8009ed4:	b1ae      	cbz	r6, 8009f02 <D24_GENERIC+0xda>
 8009ed6:	442c      	add	r4, r5
 8009ed8:	9e03      	ldr	r6, [sp, #12]
 8009eda:	f8d2 b020 	ldr.w	fp, [r2, #32]
 8009ede:	1ba4      	subs	r4, r4, r6
 8009ee0:	9503      	str	r5, [sp, #12]
 8009ee2:	17e7      	asrs	r7, r4, #31
 8009ee4:	fba4 450b 	umull	r4, r5, r4, fp
 8009ee8:	e9cd 4500 	strd	r4, r5, [sp]
 8009eec:	fb0b 5407 	mla	r4, fp, r7, r5
 8009ef0:	9401      	str	r4, [sp, #4]
 8009ef2:	e9dd 4500 	ldrd	r4, r5, [sp]
 8009ef6:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 8009efa:	f145 0500 	adc.w	r5, r5, #0
 8009efe:	006c      	lsls	r4, r5, #1
 8009f00:	4625      	mov	r5, r4
 8009f02:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 8009f06:	03ad      	lsls	r5, r5, #14
 8009f08:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009f0c:	2700      	movs	r7, #0
 8009f0e:	fb0c fb0b 	mul.w	fp, ip, fp
 8009f12:	fa1f fc89 	uxth.w	ip, r9
 8009f16:	fbca 6705 	smlal	r6, r7, sl, r5
 8009f1a:	9e04      	ldr	r6, [sp, #16]
 8009f1c:	10bd      	asrs	r5, r7, #2
 8009f1e:	f305 050f 	ssat	r5, #16, r5
 8009f22:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 8009f26:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8009f28:	4565      	cmp	r5, ip
 8009f2a:	d917      	bls.n	8009f5c <D24_GENERIC+0x134>
 8009f2c:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 8009f2e:	f890 9000 	ldrb.w	r9, [r0]
 8009f32:	b2ef      	uxtb	r7, r5
 8009f34:	2d01      	cmp	r5, #1
 8009f36:	b23e      	sxth	r6, r7
 8009f38:	d193      	bne.n	8009e62 <D24_GENERIC+0x3a>
 8009f3a:	9d06      	ldr	r5, [sp, #24]
 8009f3c:	b1dd      	cbz	r5, 8009f76 <D24_GENERIC+0x14e>
 8009f3e:	78c7      	ldrb	r7, [r0, #3]
 8009f40:	ea4f 2609 	mov.w	r6, r9, lsl #8
 8009f44:	f01c 0f01 	tst.w	ip, #1
 8009f48:	ea4f 2507 	mov.w	r5, r7, lsl #8
 8009f4c:	eb06 4607 	add.w	r6, r6, r7, lsl #16
 8009f50:	d11a      	bne.n	8009f88 <D24_GENERIC+0x160>
 8009f52:	f890 9001 	ldrb.w	r9, [r0, #1]
 8009f56:	3002      	adds	r0, #2
 8009f58:	44b1      	add	r9, r6
 8009f5a:	e78d      	b.n	8009e78 <D24_GENERIC+0x50>
 8009f5c:	6093      	str	r3, [r2, #8]
 8009f5e:	2000      	movs	r0, #0
 8009f60:	9b03      	ldr	r3, [sp, #12]
 8009f62:	f8c2 800c 	str.w	r8, [r2, #12]
 8009f66:	6153      	str	r3, [r2, #20]
 8009f68:	9b07      	ldr	r3, [sp, #28]
 8009f6a:	61d1      	str	r1, [r2, #28]
 8009f6c:	6114      	str	r4, [r2, #16]
 8009f6e:	6193      	str	r3, [r2, #24]
 8009f70:	b009      	add	sp, #36	; 0x24
 8009f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f76:	7845      	ldrb	r5, [r0, #1]
 8009f78:	3003      	adds	r0, #3
 8009f7a:	f810 6c01 	ldrb.w	r6, [r0, #-1]
 8009f7e:	022d      	lsls	r5, r5, #8
 8009f80:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 8009f84:	44a9      	add	r9, r5
 8009f86:	e777      	b.n	8009e78 <D24_GENERIC+0x50>
 8009f88:	7886      	ldrb	r6, [r0, #2]
 8009f8a:	3004      	adds	r0, #4
 8009f8c:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 8009f90:	44a9      	add	r9, r5
 8009f92:	e771      	b.n	8009e78 <D24_GENERIC+0x50>
 8009f94:	00030001 	.word	0x00030001
 8009f98:	00060007 	.word	0x00060007
 8009f9c:	24000000 	.word	0x24000000

08009fa0 <D32_GENERIC>:
 8009fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fa4:	e9d2 4304 	ldrd	r4, r3, [r2, #16]
 8009fa8:	b089      	sub	sp, #36	; 0x24
 8009faa:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8009fac:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 8009fae:	9302      	str	r3, [sp, #8]
 8009fb0:	6993      	ldr	r3, [r2, #24]
 8009fb2:	9104      	str	r1, [sp, #16]
 8009fb4:	9307      	str	r3, [sp, #28]
 8009fb6:	9503      	str	r5, [sp, #12]
 8009fb8:	69d1      	ldr	r1, [r2, #28]
 8009fba:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8009fbc:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 8009fc0:	2e00      	cmp	r6, #0
 8009fc2:	f000 8097 	beq.w	800a0f4 <D32_GENERIC+0x154>
 8009fc6:	f005 0620 	and.w	r6, r5, #32
 8009fca:	f005 0510 	and.w	r5, r5, #16
 8009fce:	f04f 0e00 	mov.w	lr, #0
 8009fd2:	f8df c150 	ldr.w	ip, [pc, #336]	; 800a124 <D32_GENERIC+0x184>
 8009fd6:	9606      	str	r6, [sp, #24]
 8009fd8:	9505      	str	r5, [sp, #20]
 8009fda:	e079      	b.n	800a0d0 <D32_GENERIC+0x130>
 8009fdc:	783d      	ldrb	r5, [r7, #0]
 8009fde:	f810 b009 	ldrb.w	fp, [r0, r9]
 8009fe2:	042d      	lsls	r5, r5, #16
 8009fe4:	f810 a006 	ldrb.w	sl, [r0, r6]
 8009fe8:	f890 9000 	ldrb.w	r9, [r0]
 8009fec:	eb07 0046 	add.w	r0, r7, r6, lsl #1
 8009ff0:	eb05 650b 	add.w	r5, r5, fp, lsl #24
 8009ff4:	eb05 250a 	add.w	r5, r5, sl, lsl #8
 8009ff8:	44a9      	add	r9, r5
 8009ffa:	fa5f f789 	uxtb.w	r7, r9
 8009ffe:	f3c9 2507 	ubfx	r5, r9, #8, #8
 800a002:	f3c9 4607 	ubfx	r6, r9, #16, #8
 800a006:	ea4f 6919 	mov.w	r9, r9, lsr #24
 800a00a:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 800a00e:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 800a012:	eb07 2191 	add.w	r1, r7, r1, lsr #10
 800a016:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
 800a01a:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
 800a01e:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800a022:	f3c1 0909 	ubfx	r9, r1, #0, #10
 800a026:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 800a02a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800a02e:	eb07 2196 	add.w	r1, r7, r6, lsr #10
 800a032:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800a036:	ea45 4909 	orr.w	r9, r5, r9, lsl #16
 800a03a:	f3c1 0509 	ubfx	r5, r1, #0, #10
 800a03e:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 800a042:	4d34      	ldr	r5, [pc, #208]	; (800a114 <D32_GENERIC+0x174>)
 800a044:	fb29 8805 	smlad	r8, r9, r5, r8
 800a048:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 800a04c:	fb26 8705 	smlad	r7, r6, r5, r8
 800a050:	4d31      	ldr	r5, [pc, #196]	; (800a118 <D32_GENERIC+0x178>)
 800a052:	fb29 3305 	smlad	r3, r9, r5, r3
 800a056:	4d31      	ldr	r5, [pc, #196]	; (800a11c <D32_GENERIC+0x17c>)
 800a058:	fb26 3805 	smlad	r8, r6, r5, r3
 800a05c:	2301      	movs	r3, #1
 800a05e:	fb29 f903 	smuad	r9, r9, r3
 800a062:	4b2f      	ldr	r3, [pc, #188]	; (800a120 <D32_GENERIC+0x180>)
 800a064:	fb26 9303 	smlad	r3, r6, r3, r9
 800a068:	9e05      	ldr	r6, [sp, #20]
 800a06a:	f10e 0901 	add.w	r9, lr, #1
 800a06e:	f5a7 4580 	sub.w	r5, r7, #16384	; 0x4000
 800a072:	b1ae      	cbz	r6, 800a0a0 <D32_GENERIC+0x100>
 800a074:	442c      	add	r4, r5
 800a076:	9e02      	ldr	r6, [sp, #8]
 800a078:	f8d2 a020 	ldr.w	sl, [r2, #32]
 800a07c:	1ba4      	subs	r4, r4, r6
 800a07e:	9502      	str	r5, [sp, #8]
 800a080:	17e7      	asrs	r7, r4, #31
 800a082:	fba4 450a 	umull	r4, r5, r4, sl
 800a086:	e9cd 4500 	strd	r4, r5, [sp]
 800a08a:	fb0a 5407 	mla	r4, sl, r7, r5
 800a08e:	9401      	str	r4, [sp, #4]
 800a090:	e9dd 4500 	ldrd	r4, r5, [sp]
 800a094:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800a098:	f145 0500 	adc.w	r5, r5, #0
 800a09c:	006c      	lsls	r4, r5, #1
 800a09e:	4625      	mov	r5, r4
 800a0a0:	f8b2 a028 	ldrh.w	sl, [r2, #40]	; 0x28
 800a0a4:	036d      	lsls	r5, r5, #13
 800a0a6:	9f03      	ldr	r7, [sp, #12]
 800a0a8:	fb0e fb0a 	mul.w	fp, lr, sl
 800a0ac:	fa1f fe89 	uxth.w	lr, r9
 800a0b0:	f04f 0a00 	mov.w	sl, #0
 800a0b4:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 800a0b8:	9e04      	ldr	r6, [sp, #16]
 800a0ba:	fbc7 9a05 	smlal	r9, sl, r7, r5
 800a0be:	4657      	mov	r7, sl
 800a0c0:	10bd      	asrs	r5, r7, #2
 800a0c2:	f305 050f 	ssat	r5, #16, r5
 800a0c6:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 800a0ca:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800a0cc:	4575      	cmp	r5, lr
 800a0ce:	d911      	bls.n	800a0f4 <D32_GENERIC+0x154>
 800a0d0:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800a0d2:	b2ee      	uxtb	r6, r5
 800a0d4:	2d01      	cmp	r5, #1
 800a0d6:	eb00 0746 	add.w	r7, r0, r6, lsl #1
 800a0da:	eb06 0946 	add.w	r9, r6, r6, lsl #1
 800a0de:	f47f af7d 	bne.w	8009fdc <D32_GENERIC+0x3c>
 800a0e2:	1d05      	adds	r5, r0, #4
 800a0e4:	f8d0 9000 	ldr.w	r9, [r0]
 800a0e8:	9806      	ldr	r0, [sp, #24]
 800a0ea:	b180      	cbz	r0, 800a10e <D32_GENERIC+0x16e>
 800a0ec:	fa99 f999 	rev16.w	r9, r9
 800a0f0:	4628      	mov	r0, r5
 800a0f2:	e782      	b.n	8009ffa <D32_GENERIC+0x5a>
 800a0f4:	6093      	str	r3, [r2, #8]
 800a0f6:	2000      	movs	r0, #0
 800a0f8:	9b02      	ldr	r3, [sp, #8]
 800a0fa:	f8c2 800c 	str.w	r8, [r2, #12]
 800a0fe:	6153      	str	r3, [r2, #20]
 800a100:	9b07      	ldr	r3, [sp, #28]
 800a102:	61d1      	str	r1, [r2, #28]
 800a104:	6114      	str	r4, [r2, #16]
 800a106:	6193      	str	r3, [r2, #24]
 800a108:	b009      	add	sp, #36	; 0x24
 800a10a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a10e:	4628      	mov	r0, r5
 800a110:	e773      	b.n	8009ffa <D32_GENERIC+0x5a>
 800a112:	bf00      	nop
 800a114:	00060003 	.word	0x00060003
 800a118:	000a000c 	.word	0x000a000c
 800a11c:	000c000a 	.word	0x000c000a
 800a120:	00030006 	.word	0x00030006
 800a124:	24000000 	.word	0x24000000

0800a128 <D48_GENERIC>:
 800a128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a12c:	6913      	ldr	r3, [r2, #16]
 800a12e:	b089      	sub	sp, #36	; 0x24
 800a130:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800a132:	9301      	str	r3, [sp, #4]
 800a134:	6953      	ldr	r3, [r2, #20]
 800a136:	9104      	str	r1, [sp, #16]
 800a138:	9302      	str	r3, [sp, #8]
 800a13a:	6993      	ldr	r3, [r2, #24]
 800a13c:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 800a140:	9307      	str	r3, [sp, #28]
 800a142:	e9d2 3102 	ldrd	r3, r1, [r2, #8]
 800a146:	9100      	str	r1, [sp, #0]
 800a148:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800a14a:	9103      	str	r1, [sp, #12]
 800a14c:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800a14e:	2c00      	cmp	r4, #0
 800a150:	f000 80be 	beq.w	800a2d0 <D48_GENERIC+0x1a8>
 800a154:	f001 0420 	and.w	r4, r1, #32
 800a158:	f001 0110 	and.w	r1, r1, #16
 800a15c:	f04f 0e00 	mov.w	lr, #0
 800a160:	9105      	str	r1, [sp, #20]
 800a162:	9406      	str	r4, [sp, #24]
 800a164:	4962      	ldr	r1, [pc, #392]	; (800a2f0 <D48_GENERIC+0x1c8>)
 800a166:	e0a0      	b.n	800a2aa <D48_GENERIC+0x182>
 800a168:	eb00 0608 	add.w	r6, r0, r8
 800a16c:	f810 a008 	ldrb.w	sl, [r0, r8]
 800a170:	f810 9005 	ldrb.w	r9, [r0, r5]
 800a174:	5df4      	ldrb	r4, [r6, r7]
 800a176:	443e      	add	r6, r7
 800a178:	f890 b000 	ldrb.w	fp, [r0]
 800a17c:	0420      	lsls	r0, r4, #16
 800a17e:	eb06 0408 	add.w	r4, r6, r8
 800a182:	f816 6008 	ldrb.w	r6, [r6, r8]
 800a186:	eb00 6a0a 	add.w	sl, r0, sl, lsl #24
 800a18a:	f814 8007 	ldrb.w	r8, [r4, r7]
 800a18e:	4427      	add	r7, r4
 800a190:	eb0a 2a09 	add.w	sl, sl, r9, lsl #8
 800a194:	eb08 2606 	add.w	r6, r8, r6, lsl #8
 800a198:	eb0a 040b 	add.w	r4, sl, fp
 800a19c:	eb07 0045 	add.w	r0, r7, r5, lsl #1
 800a1a0:	f3c6 2807 	ubfx	r8, r6, #8, #8
 800a1a4:	b2f7      	uxtb	r7, r6
 800a1a6:	b2e6      	uxtb	r6, r4
 800a1a8:	f3c4 2507 	ubfx	r5, r4, #8, #8
 800a1ac:	f3c4 4907 	ubfx	r9, r4, #16, #8
 800a1b0:	ea4f 6b14 	mov.w	fp, r4, lsr #24
 800a1b4:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800a1b8:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 800a1bc:	eb06 269c 	add.w	r6, r6, ip, lsr #10
 800a1c0:	f851 9029 	ldr.w	r9, [r1, r9, lsl #2]
 800a1c4:	f851 402b 	ldr.w	r4, [r1, fp, lsl #2]
 800a1c8:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 800a1cc:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 800a1d0:	f851 c028 	ldr.w	ip, [r1, r8, lsl #2]
 800a1d4:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800a1d8:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 800a1dc:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800a1e0:	eb04 2499 	add.w	r4, r4, r9, lsr #10
 800a1e4:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800a1e8:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 800a1ec:	9d00      	ldr	r5, [sp, #0]
 800a1ee:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 800a1f2:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800a1f6:	eb0c 2c97 	add.w	ip, ip, r7, lsr #10
 800a1fa:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800a1fe:	ea44 4909 	orr.w	r9, r4, r9, lsl #16
 800a202:	f3cc 0409 	ubfx	r4, ip, #0, #10
 800a206:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 800a20a:	4c3a      	ldr	r4, [pc, #232]	; (800a2f4 <D48_GENERIC+0x1cc>)
 800a20c:	fb26 5a04 	smlad	sl, r6, r4, r5
 800a210:	4c39      	ldr	r4, [pc, #228]	; (800a2f8 <D48_GENERIC+0x1d0>)
 800a212:	fb29 aa04 	smlad	sl, r9, r4, sl
 800a216:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 800a21a:	fb27 aa04 	smlad	sl, r7, r4, sl
 800a21e:	4c37      	ldr	r4, [pc, #220]	; (800a2fc <D48_GENERIC+0x1d4>)
 800a220:	fb26 3304 	smlad	r3, r6, r4, r3
 800a224:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 800a228:	fb29 3304 	smlad	r3, r9, r4, r3
 800a22c:	4c34      	ldr	r4, [pc, #208]	; (800a300 <D48_GENERIC+0x1d8>)
 800a22e:	fb27 3304 	smlad	r3, r7, r4, r3
 800a232:	2501      	movs	r5, #1
 800a234:	9300      	str	r3, [sp, #0]
 800a236:	fb26 f605 	smuad	r6, r6, r5
 800a23a:	4b32      	ldr	r3, [pc, #200]	; (800a304 <D48_GENERIC+0x1dc>)
 800a23c:	fb29 6903 	smlad	r9, r9, r3, r6
 800a240:	4b31      	ldr	r3, [pc, #196]	; (800a308 <D48_GENERIC+0x1e0>)
 800a242:	fb27 9303 	smlad	r3, r7, r3, r9
 800a246:	9c05      	ldr	r4, [sp, #20]
 800a248:	eb0e 0805 	add.w	r8, lr, r5
 800a24c:	f5aa 4a58 	sub.w	sl, sl, #55296	; 0xd800
 800a250:	b19c      	cbz	r4, 800a27a <D48_GENERIC+0x152>
 800a252:	9c01      	ldr	r4, [sp, #4]
 800a254:	9d02      	ldr	r5, [sp, #8]
 800a256:	4454      	add	r4, sl
 800a258:	f8d2 9020 	ldr.w	r9, [r2, #32]
 800a25c:	f8cd a008 	str.w	sl, [sp, #8]
 800a260:	1b64      	subs	r4, r4, r5
 800a262:	fba4 ab09 	umull	sl, fp, r4, r9
 800a266:	17e7      	asrs	r7, r4, #31
 800a268:	f11a 4400 	adds.w	r4, sl, #2147483648	; 0x80000000
 800a26c:	fb09 bb07 	mla	fp, r9, r7, fp
 800a270:	f14b 0500 	adc.w	r5, fp, #0
 800a274:	006c      	lsls	r4, r5, #1
 800a276:	46a2      	mov	sl, r4
 800a278:	9401      	str	r4, [sp, #4]
 800a27a:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 800a27c:	ea4f 2aca 	mov.w	sl, sl, lsl #11
 800a280:	9d03      	ldr	r5, [sp, #12]
 800a282:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800a286:	fb0e f606 	mul.w	r6, lr, r6
 800a28a:	fa1f fe88 	uxth.w	lr, r8
 800a28e:	f04f 0800 	mov.w	r8, #0
 800a292:	fbc5 780a 	smlal	r7, r8, r5, sl
 800a296:	4645      	mov	r5, r8
 800a298:	10ac      	asrs	r4, r5, #2
 800a29a:	9d04      	ldr	r5, [sp, #16]
 800a29c:	f304 040f 	ssat	r4, #16, r4
 800a2a0:	f825 4016 	strh.w	r4, [r5, r6, lsl #1]
 800a2a4:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800a2a6:	4574      	cmp	r4, lr
 800a2a8:	d912      	bls.n	800a2d0 <D48_GENERIC+0x1a8>
 800a2aa:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 800a2ac:	b2e5      	uxtb	r5, r4
 800a2ae:	2c01      	cmp	r4, #1
 800a2b0:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 800a2b4:	f1c5 0700 	rsb	r7, r5, #0
 800a2b8:	f47f af56 	bne.w	800a168 <D48_GENERIC+0x40>
 800a2bc:	9d06      	ldr	r5, [sp, #24]
 800a2be:	e9d0 4600 	ldrd	r4, r6, [r0]
 800a2c2:	3006      	adds	r0, #6
 800a2c4:	2d00      	cmp	r5, #0
 800a2c6:	f43f af6b 	beq.w	800a1a0 <D48_GENERIC+0x78>
 800a2ca:	ba64      	rev16	r4, r4
 800a2cc:	ba76      	rev16	r6, r6
 800a2ce:	e767      	b.n	800a1a0 <D48_GENERIC+0x78>
 800a2d0:	6093      	str	r3, [r2, #8]
 800a2d2:	2000      	movs	r0, #0
 800a2d4:	9b00      	ldr	r3, [sp, #0]
 800a2d6:	f8c2 c01c 	str.w	ip, [r2, #28]
 800a2da:	60d3      	str	r3, [r2, #12]
 800a2dc:	9b01      	ldr	r3, [sp, #4]
 800a2de:	6113      	str	r3, [r2, #16]
 800a2e0:	9b02      	ldr	r3, [sp, #8]
 800a2e2:	6153      	str	r3, [r2, #20]
 800a2e4:	9b07      	ldr	r3, [sp, #28]
 800a2e6:	6193      	str	r3, [r2, #24]
 800a2e8:	b009      	add	sp, #36	; 0x24
 800a2ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2ee:	bf00      	nop
 800a2f0:	24000000 	.word	0x24000000
 800a2f4:	000f000a 	.word	0x000f000a
 800a2f8:	00060003 	.word	0x00060003
 800a2fc:	00150019 	.word	0x00150019
 800a300:	00190015 	.word	0x00190015
 800a304:	00030006 	.word	0x00030006
 800a308:	000a000f 	.word	0x000a000f

0800a30c <D64_GENERIC>:
 800a30c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a310:	6913      	ldr	r3, [r2, #16]
 800a312:	b089      	sub	sp, #36	; 0x24
 800a314:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800a316:	9300      	str	r3, [sp, #0]
 800a318:	6953      	ldr	r3, [r2, #20]
 800a31a:	9105      	str	r1, [sp, #20]
 800a31c:	9303      	str	r3, [sp, #12]
 800a31e:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 800a320:	6993      	ldr	r3, [r2, #24]
 800a322:	69d4      	ldr	r4, [r2, #28]
 800a324:	9307      	str	r3, [sp, #28]
 800a326:	9504      	str	r5, [sp, #16]
 800a328:	e9d2 3602 	ldrd	r3, r6, [r2, #8]
 800a32c:	2900      	cmp	r1, #0
 800a32e:	f000 80e8 	beq.w	800a502 <D64_GENERIC+0x1f6>
 800a332:	6a11      	ldr	r1, [r2, #32]
 800a334:	2500      	movs	r5, #0
 800a336:	46b3      	mov	fp, r6
 800a338:	9302      	str	r3, [sp, #8]
 800a33a:	9106      	str	r1, [sp, #24]
 800a33c:	4978      	ldr	r1, [pc, #480]	; (800a520 <D64_GENERIC+0x214>)
 800a33e:	e0cc      	b.n	800a4da <D64_GENERIC+0x1ce>
 800a340:	eb0e 084e 	add.w	r8, lr, lr, lsl #1
 800a344:	f1ce 0c00 	rsb	ip, lr, #0
 800a348:	f890 9000 	ldrb.w	r9, [r0]
 800a34c:	eb00 0708 	add.w	r7, r0, r8
 800a350:	f810 6008 	ldrb.w	r6, [r0, r8]
 800a354:	eb07 0a4c 	add.w	sl, r7, ip, lsl #1
 800a358:	f817 000c 	ldrb.w	r0, [r7, ip]
 800a35c:	f817 301c 	ldrb.w	r3, [r7, ip, lsl #1]
 800a360:	eb0a 0748 	add.w	r7, sl, r8, lsl #1
 800a364:	f81a a018 	ldrb.w	sl, [sl, r8, lsl #1]
 800a368:	ea4f 4800 	mov.w	r8, r0, lsl #16
 800a36c:	f817 000c 	ldrb.w	r0, [r7, ip]
 800a370:	eb08 6606 	add.w	r6, r8, r6, lsl #24
 800a374:	f817 801c 	ldrb.w	r8, [r7, ip, lsl #1]
 800a378:	0400      	lsls	r0, r0, #16
 800a37a:	4467      	add	r7, ip
 800a37c:	eb06 2603 	add.w	r6, r6, r3, lsl #8
 800a380:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 800a384:	f817 a01c 	ldrb.w	sl, [r7, ip, lsl #1]
 800a388:	eb07 074c 	add.w	r7, r7, ip, lsl #1
 800a38c:	444e      	add	r6, r9
 800a38e:	eb00 2808 	add.w	r8, r0, r8, lsl #8
 800a392:	eb07 008e 	add.w	r0, r7, lr, lsl #2
 800a396:	44c2      	add	sl, r8
 800a398:	b2f7      	uxtb	r7, r6
 800a39a:	f3c6 2807 	ubfx	r8, r6, #8, #8
 800a39e:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 800a3a2:	0e36      	lsrs	r6, r6, #24
 800a3a4:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 800a3a8:	fa5f fc8a 	uxtb.w	ip, sl
 800a3ac:	f851 8028 	ldr.w	r8, [r1, r8, lsl #2]
 800a3b0:	f3ca 2907 	ubfx	r9, sl, #8, #8
 800a3b4:	443c      	add	r4, r7
 800a3b6:	f851 702e 	ldr.w	r7, [r1, lr, lsl #2]
 800a3ba:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800a3be:	eb08 2894 	add.w	r8, r8, r4, lsr #10
 800a3c2:	f851 c02c 	ldr.w	ip, [r1, ip, lsl #2]
 800a3c6:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800a3ca:	4b56      	ldr	r3, [pc, #344]	; (800a524 <D64_GENERIC+0x218>)
 800a3cc:	eb07 2e98 	add.w	lr, r7, r8, lsr #10
 800a3d0:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800a3d4:	f851 7029 	ldr.w	r7, [r1, r9, lsl #2]
 800a3d8:	eb06 269e 	add.w	r6, r6, lr, lsr #10
 800a3dc:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800a3e0:	ea48 4804 	orr.w	r8, r8, r4, lsl #16
 800a3e4:	f3ca 4407 	ubfx	r4, sl, #16, #8
 800a3e8:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 800a3ec:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800a3f0:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800a3f4:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 800a3f8:	eb07 279c 	add.w	r7, r7, ip, lsr #10
 800a3fc:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800a400:	f851 902a 	ldr.w	r9, [r1, sl, lsl #2]
 800a404:	ea46 460e 	orr.w	r6, r6, lr, lsl #16
 800a408:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 800a40c:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800a410:	eb09 299a 	add.w	r9, r9, sl, lsr #10
 800a414:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800a418:	ea47 4c0c 	orr.w	ip, r7, ip, lsl #16
 800a41c:	f3c9 0709 	ubfx	r7, r9, #0, #10
 800a420:	ea4f 2499 	mov.w	r4, r9, lsr #10
 800a424:	ea47 4a0a 	orr.w	sl, r7, sl, lsl #16
 800a428:	fb28 b903 	smlad	r9, r8, r3, fp
 800a42c:	4b3e      	ldr	r3, [pc, #248]	; (800a528 <D64_GENERIC+0x21c>)
 800a42e:	fb26 9903 	smlad	r9, r6, r3, r9
 800a432:	4b3e      	ldr	r3, [pc, #248]	; (800a52c <D64_GENERIC+0x220>)
 800a434:	fb2c 9703 	smlad	r7, ip, r3, r9
 800a438:	f44f 3980 	mov.w	r9, #65536	; 0x10000
 800a43c:	fb2a 7909 	smlad	r9, sl, r9, r7
 800a440:	4f3b      	ldr	r7, [pc, #236]	; (800a530 <D64_GENERIC+0x224>)
 800a442:	9b02      	ldr	r3, [sp, #8]
 800a444:	fb28 3307 	smlad	r3, r8, r7, r3
 800a448:	fb2a 3317 	smladx	r3, sl, r7, r3
 800a44c:	4f39      	ldr	r7, [pc, #228]	; (800a534 <D64_GENERIC+0x228>)
 800a44e:	fb26 3307 	smlad	r3, r6, r7, r3
 800a452:	fb2c 3b17 	smladx	fp, ip, r7, r3
 800a456:	f04f 0e01 	mov.w	lr, #1
 800a45a:	fb28 f80e 	smuad	r8, r8, lr
 800a45e:	4b36      	ldr	r3, [pc, #216]	; (800a538 <D64_GENERIC+0x22c>)
 800a460:	fb26 8603 	smlad	r6, r6, r3, r8
 800a464:	4b35      	ldr	r3, [pc, #212]	; (800a53c <D64_GENERIC+0x230>)
 800a466:	fb2c 6c03 	smlad	ip, ip, r3, r6
 800a46a:	4b35      	ldr	r3, [pc, #212]	; (800a540 <D64_GENERIC+0x234>)
 800a46c:	fb2a c303 	smlad	r3, sl, r3, ip
 800a470:	9f06      	ldr	r7, [sp, #24]
 800a472:	f5a9 3900 	sub.w	r9, r9, #131072	; 0x20000
 800a476:	9302      	str	r3, [sp, #8]
 800a478:	b1cf      	cbz	r7, 800a4ae <D64_GENERIC+0x1a2>
 800a47a:	9b00      	ldr	r3, [sp, #0]
 800a47c:	444b      	add	r3, r9
 800a47e:	461e      	mov	r6, r3
 800a480:	9b03      	ldr	r3, [sp, #12]
 800a482:	f8cd 900c 	str.w	r9, [sp, #12]
 800a486:	1af6      	subs	r6, r6, r3
 800a488:	46b0      	mov	r8, r6
 800a48a:	ea4f 79e6 	mov.w	r9, r6, asr #31
 800a48e:	e9cd 8900 	strd	r8, r9, [sp]
 800a492:	fba6 8907 	umull	r8, r9, r6, r7
 800a496:	9e01      	ldr	r6, [sp, #4]
 800a498:	fb07 9306 	mla	r3, r7, r6, r9
 800a49c:	4646      	mov	r6, r8
 800a49e:	f116 4600 	adds.w	r6, r6, #2147483648	; 0x80000000
 800a4a2:	f143 0700 	adc.w	r7, r3, #0
 800a4a6:	fa07 f30e 	lsl.w	r3, r7, lr
 800a4aa:	4699      	mov	r9, r3
 800a4ac:	9300      	str	r3, [sp, #0]
 800a4ae:	f8b2 c028 	ldrh.w	ip, [r2, #40]	; 0x28
 800a4b2:	ea4f 2989 	mov.w	r9, r9, lsl #10
 800a4b6:	9b04      	ldr	r3, [sp, #16]
 800a4b8:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a4bc:	2700      	movs	r7, #0
 800a4be:	fb05 fc0c 	mul.w	ip, r5, ip
 800a4c2:	3501      	adds	r5, #1
 800a4c4:	fbc3 6709 	smlal	r6, r7, r3, r9
 800a4c8:	9b05      	ldr	r3, [sp, #20]
 800a4ca:	10be      	asrs	r6, r7, #2
 800a4cc:	f306 060f 	ssat	r6, #16, r6
 800a4d0:	f823 601c 	strh.w	r6, [r3, ip, lsl #1]
 800a4d4:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 800a4d6:	42ae      	cmp	r6, r5
 800a4d8:	dd11      	ble.n	800a4fe <D64_GENERIC+0x1f2>
 800a4da:	f8b2 e02a 	ldrh.w	lr, [r2, #42]	; 0x2a
 800a4de:	f1be 0f01 	cmp.w	lr, #1
 800a4e2:	f47f af2d 	bne.w	800a340 <D64_GENERIC+0x34>
 800a4e6:	6b57      	ldr	r7, [r2, #52]	; 0x34
 800a4e8:	f100 0c08 	add.w	ip, r0, #8
 800a4ec:	06bb      	lsls	r3, r7, #26
 800a4ee:	e9d0 6a00 	ldrd	r6, sl, [r0]
 800a4f2:	d513      	bpl.n	800a51c <D64_GENERIC+0x210>
 800a4f4:	ba76      	rev16	r6, r6
 800a4f6:	fa9a fa9a 	rev16.w	sl, sl
 800a4fa:	4660      	mov	r0, ip
 800a4fc:	e74c      	b.n	800a398 <D64_GENERIC+0x8c>
 800a4fe:	465e      	mov	r6, fp
 800a500:	9b02      	ldr	r3, [sp, #8]
 800a502:	6093      	str	r3, [r2, #8]
 800a504:	2000      	movs	r0, #0
 800a506:	9b00      	ldr	r3, [sp, #0]
 800a508:	60d6      	str	r6, [r2, #12]
 800a50a:	6113      	str	r3, [r2, #16]
 800a50c:	9b03      	ldr	r3, [sp, #12]
 800a50e:	61d4      	str	r4, [r2, #28]
 800a510:	6153      	str	r3, [r2, #20]
 800a512:	9b07      	ldr	r3, [sp, #28]
 800a514:	6193      	str	r3, [r2, #24]
 800a516:	b009      	add	sp, #36	; 0x24
 800a518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a51c:	4660      	mov	r0, ip
 800a51e:	e73b      	b.n	800a398 <D64_GENERIC+0x8c>
 800a520:	24000000 	.word	0x24000000
 800a524:	001c0015 	.word	0x001c0015
 800a528:	000f000a 	.word	0x000f000a
 800a52c:	00060003 	.word	0x00060003
 800a530:	0024002a 	.word	0x0024002a
 800a534:	002e0030 	.word	0x002e0030
 800a538:	00030006 	.word	0x00030006
 800a53c:	000a000f 	.word	0x000a000f
 800a540:	0015001c 	.word	0x0015001c

0800a544 <D80_GENERIC>:
 800a544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a548:	b08b      	sub	sp, #44	; 0x2c
 800a54a:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800a54c:	9107      	str	r1, [sp, #28]
 800a54e:	6911      	ldr	r1, [r2, #16]
 800a550:	9104      	str	r1, [sp, #16]
 800a552:	6951      	ldr	r1, [r2, #20]
 800a554:	9105      	str	r1, [sp, #20]
 800a556:	6991      	ldr	r1, [r2, #24]
 800a558:	9109      	str	r1, [sp, #36]	; 0x24
 800a55a:	69d1      	ldr	r1, [r2, #28]
 800a55c:	9102      	str	r1, [sp, #8]
 800a55e:	6891      	ldr	r1, [r2, #8]
 800a560:	9103      	str	r1, [sp, #12]
 800a562:	68d1      	ldr	r1, [r2, #12]
 800a564:	9101      	str	r1, [sp, #4]
 800a566:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800a568:	9106      	str	r1, [sp, #24]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	f000 810b 	beq.w	800a786 <D80_GENERIC+0x242>
 800a570:	6a13      	ldr	r3, [r2, #32]
 800a572:	f04f 0800 	mov.w	r8, #0
 800a576:	f8df c260 	ldr.w	ip, [pc, #608]	; 800a7d8 <D80_GENERIC+0x294>
 800a57a:	9308      	str	r3, [sp, #32]
 800a57c:	9200      	str	r2, [sp, #0]
 800a57e:	e0ee      	b.n	800a75e <D80_GENERIC+0x21a>
 800a580:	b2db      	uxtb	r3, r3
 800a582:	f890 e000 	ldrb.w	lr, [r0]
 800a586:	b219      	sxth	r1, r3
 800a588:	425c      	negs	r4, r3
 800a58a:	f810 9003 	ldrb.w	r9, [r0, r3]
 800a58e:	004e      	lsls	r6, r1, #1
 800a590:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 800a594:	4431      	add	r1, r6
 800a596:	1843      	adds	r3, r0, r1
 800a598:	f810 b001 	ldrb.w	fp, [r0, r1]
 800a59c:	1919      	adds	r1, r3, r4
 800a59e:	5d1b      	ldrb	r3, [r3, r4]
 800a5a0:	1948      	adds	r0, r1, r5
 800a5a2:	f811 a005 	ldrb.w	sl, [r1, r5]
 800a5a6:	041b      	lsls	r3, r3, #16
 800a5a8:	1907      	adds	r7, r0, r4
 800a5aa:	5d01      	ldrb	r1, [r0, r4]
 800a5ac:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 800a5b0:	f810 0014 	ldrb.w	r0, [r0, r4, lsl #1]
 800a5b4:	eb07 0b44 	add.w	fp, r7, r4, lsl #1
 800a5b8:	f817 7014 	ldrb.w	r7, [r7, r4, lsl #1]
 800a5bc:	0409      	lsls	r1, r1, #16
 800a5be:	eb03 2309 	add.w	r3, r3, r9, lsl #8
 800a5c2:	eb0b 0905 	add.w	r9, fp, r5
 800a5c6:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 800a5ca:	f81b 5005 	ldrb.w	r5, [fp, r5]
 800a5ce:	eb09 0b04 	add.w	fp, r9, r4
 800a5d2:	f819 4004 	ldrb.w	r4, [r9, r4]
 800a5d6:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 800a5da:	4473      	add	r3, lr
 800a5dc:	eb0b 0006 	add.w	r0, fp, r6
 800a5e0:	eb04 2505 	add.w	r5, r4, r5, lsl #8
 800a5e4:	4439      	add	r1, r7
 800a5e6:	f3c3 2407 	ubfx	r4, r3, #8, #8
 800a5ea:	b2df      	uxtb	r7, r3
 800a5ec:	f3c3 4607 	ubfx	r6, r3, #16, #8
 800a5f0:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 800a5f4:	f85c 3027 	ldr.w	r3, [ip, r7, lsl #2]
 800a5f8:	fa5f fa81 	uxtb.w	sl, r1
 800a5fc:	f85c 7024 	ldr.w	r7, [ip, r4, lsl #2]
 800a600:	9c02      	ldr	r4, [sp, #8]
 800a602:	f85c 9026 	ldr.w	r9, [ip, r6, lsl #2]
 800a606:	441c      	add	r4, r3
 800a608:	f85c 602e 	ldr.w	r6, [ip, lr, lsl #2]
 800a60c:	f85c e02a 	ldr.w	lr, [ip, sl, lsl #2]
 800a610:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 800a614:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 800a618:	f3c4 0309 	ubfx	r3, r4, #0, #10
 800a61c:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800a620:	b2ed      	uxtb	r5, r5
 800a622:	eb09 2997 	add.w	r9, r9, r7, lsr #10
 800a626:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800a62a:	f85c 4024 	ldr.w	r4, [ip, r4, lsl #2]
 800a62e:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 800a632:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 800a636:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 800a63a:	f3c1 4707 	ubfx	r7, r1, #16, #8
 800a63e:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 800a642:	f85c a02a 	ldr.w	sl, [ip, sl, lsl #2]
 800a646:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 800a64a:	0e09      	lsrs	r1, r1, #24
 800a64c:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 800a650:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800a654:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 800a658:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800a65c:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 800a660:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800a664:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800a668:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 800a66c:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800a670:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
 800a674:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800a678:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800a67c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800a680:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 800a684:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800a688:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 800a68c:	ea4f 229a 	mov.w	r2, sl, lsr #10
 800a690:	f3ca 0709 	ubfx	r7, sl, #0, #10
 800a694:	9202      	str	r2, [sp, #8]
 800a696:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 800a69a:	4a43      	ldr	r2, [pc, #268]	; (800a7a8 <D80_GENERIC+0x264>)
 800a69c:	9f01      	ldr	r7, [sp, #4]
 800a69e:	fb23 7a02 	smlad	sl, r3, r2, r7
 800a6a2:	4a42      	ldr	r2, [pc, #264]	; (800a7ac <D80_GENERIC+0x268>)
 800a6a4:	fb26 aa02 	smlad	sl, r6, r2, sl
 800a6a8:	4a41      	ldr	r2, [pc, #260]	; (800a7b0 <D80_GENERIC+0x26c>)
 800a6aa:	fb24 aa02 	smlad	sl, r4, r2, sl
 800a6ae:	4a41      	ldr	r2, [pc, #260]	; (800a7b4 <D80_GENERIC+0x270>)
 800a6b0:	fb21 a702 	smlad	r7, r1, r2, sl
 800a6b4:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 800a6b8:	fb25 7a0a 	smlad	sl, r5, sl, r7
 800a6bc:	4a3e      	ldr	r2, [pc, #248]	; (800a7b8 <D80_GENERIC+0x274>)
 800a6be:	9f03      	ldr	r7, [sp, #12]
 800a6c0:	fb23 7e02 	smlad	lr, r3, r2, r7
 800a6c4:	4a3d      	ldr	r2, [pc, #244]	; (800a7bc <D80_GENERIC+0x278>)
 800a6c6:	fb26 ee02 	smlad	lr, r6, r2, lr
 800a6ca:	f04f 174b 	mov.w	r7, #4915275	; 0x4b004b
 800a6ce:	fb24 e707 	smlad	r7, r4, r7, lr
 800a6d2:	4a3b      	ldr	r2, [pc, #236]	; (800a7c0 <D80_GENERIC+0x27c>)
 800a6d4:	fb21 7702 	smlad	r7, r1, r2, r7
 800a6d8:	4a3a      	ldr	r2, [pc, #232]	; (800a7c4 <D80_GENERIC+0x280>)
 800a6da:	fb25 7202 	smlad	r2, r5, r2, r7
 800a6de:	f04f 0901 	mov.w	r9, #1
 800a6e2:	9201      	str	r2, [sp, #4]
 800a6e4:	fb23 f909 	smuad	r9, r3, r9
 800a6e8:	4b37      	ldr	r3, [pc, #220]	; (800a7c8 <D80_GENERIC+0x284>)
 800a6ea:	fb26 9603 	smlad	r6, r6, r3, r9
 800a6ee:	4f37      	ldr	r7, [pc, #220]	; (800a7cc <D80_GENERIC+0x288>)
 800a6f0:	fb24 6407 	smlad	r4, r4, r7, r6
 800a6f4:	4f36      	ldr	r7, [pc, #216]	; (800a7d0 <D80_GENERIC+0x28c>)
 800a6f6:	fb21 4707 	smlad	r7, r1, r7, r4
 800a6fa:	4936      	ldr	r1, [pc, #216]	; (800a7d4 <D80_GENERIC+0x290>)
 800a6fc:	fb25 7301 	smlad	r3, r5, r1, r7
 800a700:	9303      	str	r3, [sp, #12]
 800a702:	f5aa 3a7a 	sub.w	sl, sl, #256000	; 0x3e800
 800a706:	9b08      	ldr	r3, [sp, #32]
 800a708:	b193      	cbz	r3, 800a730 <D80_GENERIC+0x1ec>
 800a70a:	9a04      	ldr	r2, [sp, #16]
 800a70c:	4452      	add	r2, sl
 800a70e:	4614      	mov	r4, r2
 800a710:	9a05      	ldr	r2, [sp, #20]
 800a712:	f8cd a014 	str.w	sl, [sp, #20]
 800a716:	1aa4      	subs	r4, r4, r2
 800a718:	fba4 1203 	umull	r1, r2, r4, r3
 800a71c:	17e7      	asrs	r7, r4, #31
 800a71e:	f111 4400 	adds.w	r4, r1, #2147483648	; 0x80000000
 800a722:	fb03 2207 	mla	r2, r3, r7, r2
 800a726:	f142 0500 	adc.w	r5, r2, #0
 800a72a:	006b      	lsls	r3, r5, #1
 800a72c:	469a      	mov	sl, r3
 800a72e:	9304      	str	r3, [sp, #16]
 800a730:	9e00      	ldr	r6, [sp, #0]
 800a732:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
 800a736:	9a06      	ldr	r2, [sp, #24]
 800a738:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800a73c:	8d33      	ldrh	r3, [r6, #40]	; 0x28
 800a73e:	2500      	movs	r5, #0
 800a740:	fb08 f303 	mul.w	r3, r8, r3
 800a744:	fbc2 450a 	smlal	r4, r5, r2, sl
 800a748:	9a07      	ldr	r2, [sp, #28]
 800a74a:	f108 0801 	add.w	r8, r8, #1
 800a74e:	10a9      	asrs	r1, r5, #2
 800a750:	f301 010f 	ssat	r1, #16, r1
 800a754:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800a758:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 800a75a:	4543      	cmp	r3, r8
 800a75c:	dd12      	ble.n	800a784 <D80_GENERIC+0x240>
 800a75e:	9b00      	ldr	r3, [sp, #0]
 800a760:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a762:	2b01      	cmp	r3, #1
 800a764:	f47f af0c 	bne.w	800a580 <D80_GENERIC+0x3c>
 800a768:	9b00      	ldr	r3, [sp, #0]
 800a76a:	6885      	ldr	r5, [r0, #8]
 800a76c:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 800a76e:	06b2      	lsls	r2, r6, #26
 800a770:	e9d0 3100 	ldrd	r3, r1, [r0]
 800a774:	f100 000a 	add.w	r0, r0, #10
 800a778:	f57f af35 	bpl.w	800a5e6 <D80_GENERIC+0xa2>
 800a77c:	ba5b      	rev16	r3, r3
 800a77e:	ba49      	rev16	r1, r1
 800a780:	ba6d      	rev16	r5, r5
 800a782:	e730      	b.n	800a5e6 <D80_GENERIC+0xa2>
 800a784:	4632      	mov	r2, r6
 800a786:	9b03      	ldr	r3, [sp, #12]
 800a788:	2000      	movs	r0, #0
 800a78a:	6093      	str	r3, [r2, #8]
 800a78c:	9b01      	ldr	r3, [sp, #4]
 800a78e:	60d3      	str	r3, [r2, #12]
 800a790:	9b02      	ldr	r3, [sp, #8]
 800a792:	61d3      	str	r3, [r2, #28]
 800a794:	9b04      	ldr	r3, [sp, #16]
 800a796:	6113      	str	r3, [r2, #16]
 800a798:	9b05      	ldr	r3, [sp, #20]
 800a79a:	6153      	str	r3, [r2, #20]
 800a79c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a79e:	6193      	str	r3, [r2, #24]
 800a7a0:	b00b      	add	sp, #44	; 0x2c
 800a7a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7a6:	bf00      	nop
 800a7a8:	002d0024 	.word	0x002d0024
 800a7ac:	001c0015 	.word	0x001c0015
 800a7b0:	000f000a 	.word	0x000f000a
 800a7b4:	00060003 	.word	0x00060003
 800a7b8:	0037003f 	.word	0x0037003f
 800a7bc:	00450049 	.word	0x00450049
 800a7c0:	00490045 	.word	0x00490045
 800a7c4:	003f0037 	.word	0x003f0037
 800a7c8:	00030006 	.word	0x00030006
 800a7cc:	000a000f 	.word	0x000a000f
 800a7d0:	0015001c 	.word	0x0015001c
 800a7d4:	0024002d 	.word	0x0024002d
 800a7d8:	24000000 	.word	0x24000000

0800a7dc <D128_GENERIC>:
 800a7dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7e0:	b08d      	sub	sp, #52	; 0x34
 800a7e2:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800a7e4:	f8d2 a01c 	ldr.w	sl, [r2, #28]
 800a7e8:	9109      	str	r1, [sp, #36]	; 0x24
 800a7ea:	6911      	ldr	r1, [r2, #16]
 800a7ec:	9201      	str	r2, [sp, #4]
 800a7ee:	9106      	str	r1, [sp, #24]
 800a7f0:	6951      	ldr	r1, [r2, #20]
 800a7f2:	9107      	str	r1, [sp, #28]
 800a7f4:	6991      	ldr	r1, [r2, #24]
 800a7f6:	910b      	str	r1, [sp, #44]	; 0x2c
 800a7f8:	6891      	ldr	r1, [r2, #8]
 800a7fa:	9103      	str	r1, [sp, #12]
 800a7fc:	68d1      	ldr	r1, [r2, #12]
 800a7fe:	9102      	str	r1, [sp, #8]
 800a800:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800a802:	9108      	str	r1, [sp, #32]
 800a804:	2b00      	cmp	r3, #0
 800a806:	f000 8183 	beq.w	800ab10 <D128_GENERIC+0x334>
 800a80a:	2300      	movs	r3, #0
 800a80c:	6a12      	ldr	r2, [r2, #32]
 800a80e:	4681      	mov	r9, r0
 800a810:	920a      	str	r2, [sp, #40]	; 0x28
 800a812:	e9cd a304 	strd	sl, r3, [sp, #16]
 800a816:	e165      	b.n	800aae4 <D128_GENERIC+0x308>
 800a818:	b2d2      	uxtb	r2, r2
 800a81a:	f899 b000 	ldrb.w	fp, [r9]
 800a81e:	b213      	sxth	r3, r2
 800a820:	4255      	negs	r5, r2
 800a822:	f819 0002 	ldrb.w	r0, [r9, r2]
 800a826:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800a82a:	009f      	lsls	r7, r3, #2
 800a82c:	eb09 0402 	add.w	r4, r9, r2
 800a830:	ebc3 06c3 	rsb	r6, r3, r3, lsl #3
 800a834:	f819 8002 	ldrb.w	r8, [r9, r2]
 800a838:	443b      	add	r3, r7
 800a83a:	1962      	adds	r2, r4, r5
 800a83c:	5d64      	ldrb	r4, [r4, r5]
 800a83e:	eb02 0c03 	add.w	ip, r2, r3
 800a842:	0424      	lsls	r4, r4, #16
 800a844:	5cd3      	ldrb	r3, [r2, r3]
 800a846:	eb0c 0e05 	add.w	lr, ip, r5
 800a84a:	f81c 9015 	ldrb.w	r9, [ip, r5, lsl #1]
 800a84e:	f81c 2005 	ldrb.w	r2, [ip, r5]
 800a852:	eb04 6408 	add.w	r4, r4, r8, lsl #24
 800a856:	eb0e 0c45 	add.w	ip, lr, r5, lsl #1
 800a85a:	f81e 8015 	ldrb.w	r8, [lr, r5, lsl #1]
 800a85e:	eb04 2400 	add.w	r4, r4, r0, lsl #8
 800a862:	eb0c 0e06 	add.w	lr, ip, r6
 800a866:	f81c a006 	ldrb.w	sl, [ip, r6]
 800a86a:	0412      	lsls	r2, r2, #16
 800a86c:	445c      	add	r4, fp
 800a86e:	eb0e 0c05 	add.w	ip, lr, r5
 800a872:	eb02 6203 	add.w	r2, r2, r3, lsl #24
 800a876:	f81e 3005 	ldrb.w	r3, [lr, r5]
 800a87a:	eb0c 0045 	add.w	r0, ip, r5, lsl #1
 800a87e:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 800a882:	041b      	lsls	r3, r3, #16
 800a884:	f81c c015 	ldrb.w	ip, [ip, r5, lsl #1]
 800a888:	eb00 0b06 	add.w	fp, r0, r6
 800a88c:	5d80      	ldrb	r0, [r0, r6]
 800a88e:	eb03 630a 	add.w	r3, r3, sl, lsl #24
 800a892:	f81b 6005 	ldrb.w	r6, [fp, r5]
 800a896:	eb0b 0a05 	add.w	sl, fp, r5
 800a89a:	eb02 2209 	add.w	r2, r2, r9, lsl #8
 800a89e:	f81b b015 	ldrb.w	fp, [fp, r5, lsl #1]
 800a8a2:	0436      	lsls	r6, r6, #16
 800a8a4:	eb0a 0945 	add.w	r9, sl, r5, lsl #1
 800a8a8:	4442      	add	r2, r8
 800a8aa:	eb06 6600 	add.w	r6, r6, r0, lsl #24
 800a8ae:	f81a 8015 	ldrb.w	r8, [sl, r5, lsl #1]
 800a8b2:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 800a8b6:	44b9      	add	r9, r7
 800a8b8:	eb06 260b 	add.w	r6, r6, fp, lsl #8
 800a8bc:	4463      	add	r3, ip
 800a8be:	eb06 0508 	add.w	r5, r6, r8
 800a8c2:	b2e7      	uxtb	r7, r4
 800a8c4:	f3c4 2607 	ubfx	r6, r4, #8, #8
 800a8c8:	499b      	ldr	r1, [pc, #620]	; (800ab38 <D128_GENERIC+0x35c>)
 800a8ca:	f3c4 4007 	ubfx	r0, r4, #16, #8
 800a8ce:	0e24      	lsrs	r4, r4, #24
 800a8d0:	f851 c027 	ldr.w	ip, [r1, r7, lsl #2]
 800a8d4:	b2d7      	uxtb	r7, r2
 800a8d6:	f851 b026 	ldr.w	fp, [r1, r6, lsl #2]
 800a8da:	f3c2 2607 	ubfx	r6, r2, #8, #8
 800a8de:	9904      	ldr	r1, [sp, #16]
 800a8e0:	4461      	add	r1, ip
 800a8e2:	468c      	mov	ip, r1
 800a8e4:	4994      	ldr	r1, [pc, #592]	; (800ab38 <D128_GENERIC+0x35c>)
 800a8e6:	eb0b 2b9c 	add.w	fp, fp, ip, lsr #10
 800a8ea:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800a8ee:	f851 8024 	ldr.w	r8, [r1, r4, lsl #2]
 800a8f2:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800a8f6:	eb00 209b 	add.w	r0, r0, fp, lsr #10
 800a8fa:	f851 e027 	ldr.w	lr, [r1, r7, lsl #2]
 800a8fe:	f851 7026 	ldr.w	r7, [r1, r6, lsl #2]
 800a902:	0e12      	lsrs	r2, r2, #24
 800a904:	eb08 2890 	add.w	r8, r8, r0, lsr #10
 800a908:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800a90c:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 800a910:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800a914:	eb0e 2e98 	add.w	lr, lr, r8, lsr #10
 800a918:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800a91c:	b2da      	uxtb	r2, r3
 800a91e:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800a922:	eb07 279e 	add.w	r7, r7, lr, lsr #10
 800a926:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800a92a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800a92e:	ea48 4800 	orr.w	r8, r8, r0, lsl #16
 800a932:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 800a936:	f3c3 2007 	ubfx	r0, r3, #8, #8
 800a93a:	ea4b 4b0c 	orr.w	fp, fp, ip, lsl #16
 800a93e:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800a942:	eb06 269a 	add.w	r6, r6, sl, lsr #10
 800a946:	f851 c020 	ldr.w	ip, [r1, r0, lsl #2]
 800a94a:	f3c3 4007 	ubfx	r0, r3, #16, #8
 800a94e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800a952:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 800a956:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800a95a:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 800a95e:	0e1b      	lsrs	r3, r3, #24
 800a960:	eb0c 2c92 	add.w	ip, ip, r2, lsr #10
 800a964:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800a968:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800a96c:	ea47 470e 	orr.w	r7, r7, lr, lsl #16
 800a970:	b2eb      	uxtb	r3, r5
 800a972:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800a976:	eb04 2e9c 	add.w	lr, r4, ip, lsr #10
 800a97a:	f3cc 0409 	ubfx	r4, ip, #0, #10
 800a97e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a982:	ea46 460a 	orr.w	r6, r6, sl, lsl #16
 800a986:	eb00 209e 	add.w	r0, r0, lr, lsr #10
 800a98a:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 800a98e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800a992:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800a996:	eb03 2c90 	add.w	ip, r3, r0, lsr #10
 800a99a:	f851 202a 	ldr.w	r2, [r1, sl, lsl #2]
 800a99e:	f3c5 4307 	ubfx	r3, r5, #16, #8
 800a9a2:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 800a9a6:	eb02 229c 	add.w	r2, r2, ip, lsr #10
 800a9aa:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800a9ae:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
 800a9b2:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800a9b6:	f851 302a 	ldr.w	r3, [r1, sl, lsl #2]
 800a9ba:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 800a9be:	eb05 2592 	add.w	r5, r5, r2, lsr #10
 800a9c2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800a9c6:	eb03 2e95 	add.w	lr, r3, r5, lsr #10
 800a9ca:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800a9ce:	ea42 430c 	orr.w	r3, r2, ip, lsl #16
 800a9d2:	ea4f 219e 	mov.w	r1, lr, lsr #10
 800a9d6:	f3ce 0209 	ubfx	r2, lr, #0, #10
 800a9da:	9104      	str	r1, [sp, #16]
 800a9dc:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800a9e0:	9902      	ldr	r1, [sp, #8]
 800a9e2:	4a56      	ldr	r2, [pc, #344]	; (800ab3c <D128_GENERIC+0x360>)
 800a9e4:	fb2b 1202 	smlad	r2, fp, r2, r1
 800a9e8:	4955      	ldr	r1, [pc, #340]	; (800ab40 <D128_GENERIC+0x364>)
 800a9ea:	fb28 2201 	smlad	r2, r8, r1, r2
 800a9ee:	4955      	ldr	r1, [pc, #340]	; (800ab44 <D128_GENERIC+0x368>)
 800a9f0:	fb27 2201 	smlad	r2, r7, r1, r2
 800a9f4:	4954      	ldr	r1, [pc, #336]	; (800ab48 <D128_GENERIC+0x36c>)
 800a9f6:	fb26 2201 	smlad	r2, r6, r1, r2
 800a9fa:	4954      	ldr	r1, [pc, #336]	; (800ab4c <D128_GENERIC+0x370>)
 800a9fc:	fb24 2201 	smlad	r2, r4, r1, r2
 800aa00:	4953      	ldr	r1, [pc, #332]	; (800ab50 <D128_GENERIC+0x374>)
 800aa02:	fb20 2201 	smlad	r2, r0, r1, r2
 800aa06:	4953      	ldr	r1, [pc, #332]	; (800ab54 <D128_GENERIC+0x378>)
 800aa08:	fb23 2201 	smlad	r2, r3, r1, r2
 800aa0c:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
 800aa10:	fb25 2a0c 	smlad	sl, r5, ip, r2
 800aa14:	4950      	ldr	r1, [pc, #320]	; (800ab58 <D128_GENERIC+0x37c>)
 800aa16:	9a03      	ldr	r2, [sp, #12]
 800aa18:	fb2b 2c01 	smlad	ip, fp, r1, r2
 800aa1c:	4a4f      	ldr	r2, [pc, #316]	; (800ab5c <D128_GENERIC+0x380>)
 800aa1e:	fb28 ce02 	smlad	lr, r8, r2, ip
 800aa22:	f8df c150 	ldr.w	ip, [pc, #336]	; 800ab74 <D128_GENERIC+0x398>
 800aa26:	fb27 ec0c 	smlad	ip, r7, ip, lr
 800aa2a:	f8df e14c 	ldr.w	lr, [pc, #332]	; 800ab78 <D128_GENERIC+0x39c>
 800aa2e:	fb26 cc0e 	smlad	ip, r6, lr, ip
 800aa32:	f8df e148 	ldr.w	lr, [pc, #328]	; 800ab7c <D128_GENERIC+0x3a0>
 800aa36:	fb24 ce0e 	smlad	lr, r4, lr, ip
 800aa3a:	f8df c144 	ldr.w	ip, [pc, #324]	; 800ab80 <D128_GENERIC+0x3a4>
 800aa3e:	fb20 ee0c 	smlad	lr, r0, ip, lr
 800aa42:	f8df c140 	ldr.w	ip, [pc, #320]	; 800ab84 <D128_GENERIC+0x3a8>
 800aa46:	fb23 ec0c 	smlad	ip, r3, ip, lr
 800aa4a:	f8df e13c 	ldr.w	lr, [pc, #316]	; 800ab88 <D128_GENERIC+0x3ac>
 800aa4e:	fb25 c20e 	smlad	r2, r5, lr, ip
 800aa52:	f04f 0c01 	mov.w	ip, #1
 800aa56:	9202      	str	r2, [sp, #8]
 800aa58:	fb2b fb0c 	smuad	fp, fp, ip
 800aa5c:	f8df c12c 	ldr.w	ip, [pc, #300]	; 800ab8c <D128_GENERIC+0x3b0>
 800aa60:	fb28 bb0c 	smlad	fp, r8, ip, fp
 800aa64:	f8df c128 	ldr.w	ip, [pc, #296]	; 800ab90 <D128_GENERIC+0x3b4>
 800aa68:	fb27 bb0c 	smlad	fp, r7, ip, fp
 800aa6c:	4f3c      	ldr	r7, [pc, #240]	; (800ab60 <D128_GENERIC+0x384>)
 800aa6e:	fb26 bb07 	smlad	fp, r6, r7, fp
 800aa72:	4f3c      	ldr	r7, [pc, #240]	; (800ab64 <D128_GENERIC+0x388>)
 800aa74:	fb24 bb07 	smlad	fp, r4, r7, fp
 800aa78:	4f3b      	ldr	r7, [pc, #236]	; (800ab68 <D128_GENERIC+0x38c>)
 800aa7a:	fb20 bb07 	smlad	fp, r0, r7, fp
 800aa7e:	4f3b      	ldr	r7, [pc, #236]	; (800ab6c <D128_GENERIC+0x390>)
 800aa80:	fb23 bb07 	smlad	fp, r3, r7, fp
 800aa84:	4b3a      	ldr	r3, [pc, #232]	; (800ab70 <D128_GENERIC+0x394>)
 800aa86:	fb25 b303 	smlad	r3, r5, r3, fp
 800aa8a:	9303      	str	r3, [sp, #12]
 800aa8c:	f5aa 1480 	sub.w	r4, sl, #1048576	; 0x100000
 800aa90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa92:	b183      	cbz	r3, 800aab6 <D128_GENERIC+0x2da>
 800aa94:	9a06      	ldr	r2, [sp, #24]
 800aa96:	9907      	ldr	r1, [sp, #28]
 800aa98:	4422      	add	r2, r4
 800aa9a:	9407      	str	r4, [sp, #28]
 800aa9c:	1a52      	subs	r2, r2, r1
 800aa9e:	fba2 0103 	umull	r0, r1, r2, r3
 800aaa2:	17d5      	asrs	r5, r2, #31
 800aaa4:	f110 4200 	adds.w	r2, r0, #2147483648	; 0x80000000
 800aaa8:	fb03 1105 	mla	r1, r3, r5, r1
 800aaac:	f141 0300 	adc.w	r3, r1, #0
 800aab0:	005b      	lsls	r3, r3, #1
 800aab2:	461c      	mov	r4, r3
 800aab4:	9306      	str	r3, [sp, #24]
 800aab6:	9d01      	ldr	r5, [sp, #4]
 800aab8:	01e4      	lsls	r4, r4, #7
 800aaba:	9e05      	ldr	r6, [sp, #20]
 800aabc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800aac0:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 800aac2:	2300      	movs	r3, #0
 800aac4:	9908      	ldr	r1, [sp, #32]
 800aac6:	fb06 f000 	mul.w	r0, r6, r0
 800aaca:	3601      	adds	r6, #1
 800aacc:	fbc1 2304 	smlal	r2, r3, r1, r4
 800aad0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aad2:	109b      	asrs	r3, r3, #2
 800aad4:	9605      	str	r6, [sp, #20]
 800aad6:	f303 030f 	ssat	r3, #16, r3
 800aada:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
 800aade:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 800aae0:	42b3      	cmp	r3, r6
 800aae2:	dd13      	ble.n	800ab0c <D128_GENERIC+0x330>
 800aae4:	9b01      	ldr	r3, [sp, #4]
 800aae6:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800aae8:	2a01      	cmp	r2, #1
 800aaea:	f47f ae95 	bne.w	800a818 <D128_GENERIC+0x3c>
 800aaee:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800aaf0:	f109 0610 	add.w	r6, r9, #16
 800aaf4:	0681      	lsls	r1, r0, #26
 800aaf6:	e9d9 4200 	ldrd	r4, r2, [r9]
 800aafa:	e9d9 3502 	ldrd	r3, r5, [r9, #8]
 800aafe:	d518      	bpl.n	800ab32 <D128_GENERIC+0x356>
 800ab00:	ba64      	rev16	r4, r4
 800ab02:	ba52      	rev16	r2, r2
 800ab04:	ba5b      	rev16	r3, r3
 800ab06:	ba6d      	rev16	r5, r5
 800ab08:	46b1      	mov	r9, r6
 800ab0a:	e6da      	b.n	800a8c2 <D128_GENERIC+0xe6>
 800ab0c:	f8dd a010 	ldr.w	sl, [sp, #16]
 800ab10:	9b01      	ldr	r3, [sp, #4]
 800ab12:	2000      	movs	r0, #0
 800ab14:	9903      	ldr	r1, [sp, #12]
 800ab16:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ab18:	6099      	str	r1, [r3, #8]
 800ab1a:	9902      	ldr	r1, [sp, #8]
 800ab1c:	f8c3 a01c 	str.w	sl, [r3, #28]
 800ab20:	60d9      	str	r1, [r3, #12]
 800ab22:	9906      	ldr	r1, [sp, #24]
 800ab24:	619a      	str	r2, [r3, #24]
 800ab26:	6119      	str	r1, [r3, #16]
 800ab28:	9907      	ldr	r1, [sp, #28]
 800ab2a:	6159      	str	r1, [r3, #20]
 800ab2c:	b00d      	add	sp, #52	; 0x34
 800ab2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab32:	46b1      	mov	r9, r6
 800ab34:	e6c5      	b.n	800a8c2 <D128_GENERIC+0xe6>
 800ab36:	bf00      	nop
 800ab38:	24000000 	.word	0x24000000
 800ab3c:	00780069 	.word	0x00780069
 800ab40:	005b004e 	.word	0x005b004e
 800ab44:	00420037 	.word	0x00420037
 800ab48:	002d0024 	.word	0x002d0024
 800ab4c:	001c0015 	.word	0x001c0015
 800ab50:	000f000a 	.word	0x000f000a
 800ab54:	00060003 	.word	0x00060003
 800ab58:	00880096 	.word	0x00880096
 800ab5c:	00a200ac 	.word	0x00a200ac
 800ab60:	0015001c 	.word	0x0015001c
 800ab64:	0024002d 	.word	0x0024002d
 800ab68:	00370042 	.word	0x00370042
 800ab6c:	004e005b 	.word	0x004e005b
 800ab70:	00690078 	.word	0x00690078
 800ab74:	00b400ba 	.word	0x00b400ba
 800ab78:	00be00c0 	.word	0x00be00c0
 800ab7c:	00c000be 	.word	0x00c000be
 800ab80:	00ba00b4 	.word	0x00ba00b4
 800ab84:	00ac00a2 	.word	0x00ac00a2
 800ab88:	00960088 	.word	0x00960088
 800ab8c:	00030006 	.word	0x00030006
 800ab90:	000a000f 	.word	0x000a000f

0800ab94 <D16_1CH_HTONS_VOL_HP>:
 800ab94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab98:	6993      	ldr	r3, [r2, #24]
 800ab9a:	b087      	sub	sp, #28
 800ab9c:	4682      	mov	sl, r0
 800ab9e:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 800aba0:	9304      	str	r3, [sp, #16]
 800aba2:	f8d2 b030 	ldr.w	fp, [r2, #48]	; 0x30
 800aba6:	69d3      	ldr	r3, [r2, #28]
 800aba8:	f8d2 e020 	ldr.w	lr, [r2, #32]
 800abac:	e9d2 5402 	ldrd	r5, r4, [r2, #8]
 800abb0:	e9d2 6c04 	ldrd	r6, ip, [r2, #16]
 800abb4:	9403      	str	r4, [sp, #12]
 800abb6:	2800      	cmp	r0, #0
 800abb8:	d054      	beq.n	800ac64 <D16_1CH_HTONS_VOL_HP+0xd0>
 800abba:	f1a1 0902 	sub.w	r9, r1, #2
 800abbe:	eb0a 0140 	add.w	r1, sl, r0, lsl #1
 800abc2:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 800ac70 <D16_1CH_HTONS_VOL_HP+0xdc>
 800abc6:	4650      	mov	r0, sl
 800abc8:	9101      	str	r1, [sp, #4]
 800abca:	4619      	mov	r1, r3
 800abcc:	f8cd b008 	str.w	fp, [sp, #8]
 800abd0:	9205      	str	r2, [sp, #20]
 800abd2:	f850 3b02 	ldr.w	r3, [r0], #2
 800abd6:	ba5b      	rev16	r3, r3
 800abd8:	b2dc      	uxtb	r4, r3
 800abda:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800abde:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800abe2:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 800abe6:	4419      	add	r1, r3
 800abe8:	eb04 2491 	add.w	r4, r4, r1, lsr #10
 800abec:	f3c1 0309 	ubfx	r3, r1, #0, #10
 800abf0:	f3c4 0209 	ubfx	r2, r4, #0, #10
 800abf4:	0aa1      	lsrs	r1, r4, #10
 800abf6:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 800abfa:	4a1b      	ldr	r2, [pc, #108]	; (800ac68 <D16_1CH_HTONS_VOL_HP+0xd4>)
 800abfc:	fb23 5402 	smlad	r4, r3, r2, r5
 800ac00:	4a1a      	ldr	r2, [pc, #104]	; (800ac6c <D16_1CH_HTONS_VOL_HP+0xd8>)
 800ac02:	fb23 f502 	smuad	r5, r3, r2
 800ac06:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 800ac0a:	f04f 4a00 	mov.w	sl, #2147483648	; 0x80000000
 800ac0e:	f04f 0b00 	mov.w	fp, #0
 800ac12:	19a2      	adds	r2, r4, r6
 800ac14:	eba2 020c 	sub.w	r2, r2, ip
 800ac18:	46a4      	mov	ip, r4
 800ac1a:	17d7      	asrs	r7, r2, #31
 800ac1c:	fba2 230e 	umull	r2, r3, r2, lr
 800ac20:	f112 4600 	adds.w	r6, r2, #2147483648	; 0x80000000
 800ac24:	fb0e 3307 	mla	r3, lr, r7, r3
 800ac28:	f143 0700 	adc.w	r7, r3, #0
 800ac2c:	9b02      	ldr	r3, [sp, #8]
 800ac2e:	047a      	lsls	r2, r7, #17
 800ac30:	007e      	lsls	r6, r7, #1
 800ac32:	fbc3 ab02 	smlal	sl, fp, r3, r2
 800ac36:	ea4f 03ab 	mov.w	r3, fp, asr #2
 800ac3a:	f303 030f 	ssat	r3, #16, r3
 800ac3e:	f829 3f02 	strh.w	r3, [r9, #2]!
 800ac42:	9b01      	ldr	r3, [sp, #4]
 800ac44:	4298      	cmp	r0, r3
 800ac46:	d1c4      	bne.n	800abd2 <D16_1CH_HTONS_VOL_HP+0x3e>
 800ac48:	460b      	mov	r3, r1
 800ac4a:	9a05      	ldr	r2, [sp, #20]
 800ac4c:	2000      	movs	r0, #0
 800ac4e:	9903      	ldr	r1, [sp, #12]
 800ac50:	61d3      	str	r3, [r2, #28]
 800ac52:	9b04      	ldr	r3, [sp, #16]
 800ac54:	6095      	str	r5, [r2, #8]
 800ac56:	60d1      	str	r1, [r2, #12]
 800ac58:	6193      	str	r3, [r2, #24]
 800ac5a:	e9c2 6404 	strd	r6, r4, [r2, #16]
 800ac5e:	b007      	add	sp, #28
 800ac60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac64:	4664      	mov	r4, ip
 800ac66:	e7f1      	b.n	800ac4c <D16_1CH_HTONS_VOL_HP+0xb8>
 800ac68:	00030001 	.word	0x00030001
 800ac6c:	00010003 	.word	0x00010003
 800ac70:	24000000 	.word	0x24000000

0800ac74 <D24_1CH_HTONS_VOL_HP>:
 800ac74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac78:	6b16      	ldr	r6, [r2, #48]	; 0x30
 800ac7a:	b089      	sub	sp, #36	; 0x24
 800ac7c:	6993      	ldr	r3, [r2, #24]
 800ac7e:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800ac80:	9604      	str	r6, [sp, #16]
 800ac82:	6a16      	ldr	r6, [r2, #32]
 800ac84:	9306      	str	r3, [sp, #24]
 800ac86:	9505      	str	r5, [sp, #20]
 800ac88:	69d3      	ldr	r3, [r2, #28]
 800ac8a:	9600      	str	r6, [sp, #0]
 800ac8c:	e9d2 4a04 	ldrd	r4, sl, [r2, #16]
 800ac90:	e9d2 ce02 	ldrd	ip, lr, [r2, #8]
 800ac94:	2d00      	cmp	r5, #0
 800ac96:	f000 8083 	beq.w	800ada0 <D24_1CH_HTONS_VOL_HP+0x12c>
 800ac9a:	9207      	str	r2, [sp, #28]
 800ac9c:	2600      	movs	r6, #0
 800ac9e:	4622      	mov	r2, r4
 800aca0:	f1a1 0b02 	sub.w	fp, r1, #2
 800aca4:	4f3f      	ldr	r7, [pc, #252]	; (800ada4 <D24_1CH_HTONS_VOL_HP+0x130>)
 800aca6:	461d      	mov	r5, r3
 800aca8:	f8cd a00c 	str.w	sl, [sp, #12]
 800acac:	9c00      	ldr	r4, [sp, #0]
 800acae:	e056      	b.n	800ad5e <D24_1CH_HTONS_VOL_HP+0xea>
 800acb0:	7841      	ldrb	r1, [r0, #1]
 800acb2:	eb08 4809 	add.w	r8, r8, r9, lsl #16
 800acb6:	3002      	adds	r0, #2
 800acb8:	4488      	add	r8, r1
 800acba:	fa5f f388 	uxtb.w	r3, r8
 800acbe:	f3c8 2907 	ubfx	r9, r8, #8, #8
 800acc2:	ea4f 4818 	mov.w	r8, r8, lsr #16
 800acc6:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 800acca:	f857 3029 	ldr.w	r3, [r7, r9, lsl #2]
 800acce:	eb01 2195 	add.w	r1, r1, r5, lsr #10
 800acd2:	f857 5028 	ldr.w	r5, [r7, r8, lsl #2]
 800acd6:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 800acda:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800acde:	f3c8 0309 	ubfx	r3, r8, #0, #10
 800ace2:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 800ace6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800acea:	492f      	ldr	r1, [pc, #188]	; (800ada8 <D24_1CH_HTONS_VOL_HP+0x134>)
 800acec:	fb23 e901 	smlad	r9, r3, r1, lr
 800acf0:	492e      	ldr	r1, [pc, #184]	; (800adac <D24_1CH_HTONS_VOL_HP+0x138>)
 800acf2:	fb23 ce01 	smlad	lr, r3, r1, ip
 800acf6:	f3c5 0c09 	ubfx	ip, r5, #0, #10
 800acfa:	2101      	movs	r1, #1
 800acfc:	eb0c 084c 	add.w	r8, ip, ip, lsl #1
 800ad00:	eb0e 0e48 	add.w	lr, lr, r8, lsl #1
 800ad04:	fb23 f301 	smuad	r3, r3, r1
 800ad08:	f5a9 51d8 	sub.w	r1, r9, #6912	; 0x1b00
 800ad0c:	eb08 0c03 	add.w	ip, r8, r3
 800ad10:	9b03      	ldr	r3, [sp, #12]
 800ad12:	f04f 0a00 	mov.w	sl, #0
 800ad16:	440a      	add	r2, r1
 800ad18:	3601      	adds	r6, #1
 800ad1a:	9103      	str	r1, [sp, #12]
 800ad1c:	1ad2      	subs	r2, r2, r3
 800ad1e:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800ad22:	fba2 2304 	umull	r2, r3, r2, r4
 800ad26:	e9cd 2300 	strd	r2, r3, [sp]
 800ad2a:	fb04 3309 	mla	r3, r4, r9, r3
 800ad2e:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 800ad32:	9301      	str	r3, [sp, #4]
 800ad34:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ad38:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800ad3c:	f143 0300 	adc.w	r3, r3, #0
 800ad40:	ea4f 38c3 	mov.w	r8, r3, lsl #15
 800ad44:	005a      	lsls	r2, r3, #1
 800ad46:	9b04      	ldr	r3, [sp, #16]
 800ad48:	fbc3 9a08 	smlal	r9, sl, r3, r8
 800ad4c:	ea4f 03aa 	mov.w	r3, sl, asr #2
 800ad50:	f303 030f 	ssat	r3, #16, r3
 800ad54:	f82b 3f02 	strh.w	r3, [fp, #2]!
 800ad58:	9b05      	ldr	r3, [sp, #20]
 800ad5a:	429e      	cmp	r6, r3
 800ad5c:	d010      	beq.n	800ad80 <D24_1CH_HTONS_VOL_HP+0x10c>
 800ad5e:	f890 9003 	ldrb.w	r9, [r0, #3]
 800ad62:	f016 0f01 	tst.w	r6, #1
 800ad66:	7801      	ldrb	r1, [r0, #0]
 800ad68:	ea4f 2309 	mov.w	r3, r9, lsl #8
 800ad6c:	ea4f 2801 	mov.w	r8, r1, lsl #8
 800ad70:	d09e      	beq.n	800acb0 <D24_1CH_HTONS_VOL_HP+0x3c>
 800ad72:	f890 8002 	ldrb.w	r8, [r0, #2]
 800ad76:	3004      	adds	r0, #4
 800ad78:	eb03 4808 	add.w	r8, r3, r8, lsl #16
 800ad7c:	4488      	add	r8, r1
 800ad7e:	e79c      	b.n	800acba <D24_1CH_HTONS_VOL_HP+0x46>
 800ad80:	4614      	mov	r4, r2
 800ad82:	462b      	mov	r3, r5
 800ad84:	9a07      	ldr	r2, [sp, #28]
 800ad86:	2000      	movs	r0, #0
 800ad88:	61d3      	str	r3, [r2, #28]
 800ad8a:	9b06      	ldr	r3, [sp, #24]
 800ad8c:	f8c2 c008 	str.w	ip, [r2, #8]
 800ad90:	f8c2 e00c 	str.w	lr, [r2, #12]
 800ad94:	6193      	str	r3, [r2, #24]
 800ad96:	e9c2 4104 	strd	r4, r1, [r2, #16]
 800ad9a:	b009      	add	sp, #36	; 0x24
 800ad9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ada0:	4651      	mov	r1, sl
 800ada2:	e7f0      	b.n	800ad86 <D24_1CH_HTONS_VOL_HP+0x112>
 800ada4:	24000000 	.word	0x24000000
 800ada8:	00030001 	.word	0x00030001
 800adac:	00060007 	.word	0x00060007

0800adb0 <D32_1CH_HTONS_VOL_HP>:
 800adb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adb4:	6993      	ldr	r3, [r2, #24]
 800adb6:	b087      	sub	sp, #28
 800adb8:	4683      	mov	fp, r0
 800adba:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 800adbc:	9304      	str	r3, [sp, #16]
 800adbe:	69d5      	ldr	r5, [r2, #28]
 800adc0:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800adc2:	f8d2 a020 	ldr.w	sl, [r2, #32]
 800adc6:	e9d2 8e04 	ldrd	r8, lr, [r2, #16]
 800adca:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 800adce:	2800      	cmp	r0, #0
 800add0:	d077      	beq.n	800aec2 <D32_1CH_HTONS_VOL_HP+0x112>
 800add2:	460f      	mov	r7, r1
 800add4:	46f1      	mov	r9, lr
 800add6:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 800adda:	f8cd 8000 	str.w	r8, [sp]
 800adde:	4e3a      	ldr	r6, [pc, #232]	; (800aec8 <D32_1CH_HTONS_VOL_HP+0x118>)
 800ade0:	469e      	mov	lr, r3
 800ade2:	46a0      	mov	r8, r4
 800ade4:	9103      	str	r1, [sp, #12]
 800ade6:	9205      	str	r2, [sp, #20]
 800ade8:	f85b 4b04 	ldr.w	r4, [fp], #4
 800adec:	ba64      	rev16	r4, r4
 800adee:	b2e0      	uxtb	r0, r4
 800adf0:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800adf4:	f3c4 4107 	ubfx	r1, r4, #16, #8
 800adf8:	0e24      	lsrs	r4, r4, #24
 800adfa:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 800adfe:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800ae02:	eb00 2095 	add.w	r0, r0, r5, lsr #10
 800ae06:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800ae0a:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
 800ae0e:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 800ae12:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800ae16:	eb01 2193 	add.w	r1, r1, r3, lsr #10
 800ae1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ae1e:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800ae22:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800ae26:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ae2a:	f3c5 0009 	ubfx	r0, r5, #0, #10
 800ae2e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800ae32:	4826      	ldr	r0, [pc, #152]	; (800aecc <D32_1CH_HTONS_VOL_HP+0x11c>)
 800ae34:	fb23 c400 	smlad	r4, r3, r0, ip
 800ae38:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800ae3c:	fb21 4402 	smlad	r4, r1, r2, r4
 800ae40:	4823      	ldr	r0, [pc, #140]	; (800aed0 <D32_1CH_HTONS_VOL_HP+0x120>)
 800ae42:	fb23 ec00 	smlad	ip, r3, r0, lr
 800ae46:	4823      	ldr	r0, [pc, #140]	; (800aed4 <D32_1CH_HTONS_VOL_HP+0x124>)
 800ae48:	fb21 cc00 	smlad	ip, r1, r0, ip
 800ae4c:	2201      	movs	r2, #1
 800ae4e:	fb23 f302 	smuad	r3, r3, r2
 800ae52:	4821      	ldr	r0, [pc, #132]	; (800aed8 <D32_1CH_HTONS_VOL_HP+0x128>)
 800ae54:	fb21 3e00 	smlad	lr, r1, r0, r3
 800ae58:	9b00      	ldr	r3, [sp, #0]
 800ae5a:	f5a4 4480 	sub.w	r4, r4, #16384	; 0x4000
 800ae5e:	4423      	add	r3, r4
 800ae60:	eba3 0209 	sub.w	r2, r3, r9
 800ae64:	46a1      	mov	r9, r4
 800ae66:	17d1      	asrs	r1, r2, #31
 800ae68:	fba2 230a 	umull	r2, r3, r2, sl
 800ae6c:	e9cd 2300 	strd	r2, r3, [sp]
 800ae70:	fb0a 3301 	mla	r3, sl, r1, r3
 800ae74:	9301      	str	r3, [sp, #4]
 800ae76:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ae7a:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800ae7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ae82:	f143 0300 	adc.w	r3, r3, #0
 800ae86:	0399      	lsls	r1, r3, #14
 800ae88:	005b      	lsls	r3, r3, #1
 800ae8a:	9300      	str	r3, [sp, #0]
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	fbc8 2301 	smlal	r2, r3, r8, r1
 800ae92:	109b      	asrs	r3, r3, #2
 800ae94:	f303 030f 	ssat	r3, #16, r3
 800ae98:	f827 3b02 	strh.w	r3, [r7], #2
 800ae9c:	9b03      	ldr	r3, [sp, #12]
 800ae9e:	429f      	cmp	r7, r3
 800aea0:	d1a2      	bne.n	800ade8 <D32_1CH_HTONS_VOL_HP+0x38>
 800aea2:	4673      	mov	r3, lr
 800aea4:	f8dd 8000 	ldr.w	r8, [sp]
 800aea8:	9a05      	ldr	r2, [sp, #20]
 800aeaa:	6093      	str	r3, [r2, #8]
 800aeac:	2000      	movs	r0, #0
 800aeae:	9b04      	ldr	r3, [sp, #16]
 800aeb0:	f8c2 c00c 	str.w	ip, [r2, #12]
 800aeb4:	61d5      	str	r5, [r2, #28]
 800aeb6:	6193      	str	r3, [r2, #24]
 800aeb8:	e9c2 8404 	strd	r8, r4, [r2, #16]
 800aebc:	b007      	add	sp, #28
 800aebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aec2:	4674      	mov	r4, lr
 800aec4:	e7f1      	b.n	800aeaa <D32_1CH_HTONS_VOL_HP+0xfa>
 800aec6:	bf00      	nop
 800aec8:	24000000 	.word	0x24000000
 800aecc:	00060003 	.word	0x00060003
 800aed0:	000a000c 	.word	0x000a000c
 800aed4:	000c000a 	.word	0x000c000a
 800aed8:	00030006 	.word	0x00030006

0800aedc <D48_1CH_HTONS_VOL_HP>:
 800aedc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aee0:	6b17      	ldr	r7, [r2, #48]	; 0x30
 800aee2:	b087      	sub	sp, #28
 800aee4:	6993      	ldr	r3, [r2, #24]
 800aee6:	9701      	str	r7, [sp, #4]
 800aee8:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800aeea:	6a17      	ldr	r7, [r2, #32]
 800aeec:	9304      	str	r3, [sp, #16]
 800aeee:	69d6      	ldr	r6, [r2, #28]
 800aef0:	9702      	str	r7, [sp, #8]
 800aef2:	e9d2 4e04 	ldrd	r4, lr, [r2, #16]
 800aef6:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 800aefa:	2d00      	cmp	r5, #0
 800aefc:	f000 8093 	beq.w	800b026 <D48_1CH_HTONS_VOL_HP+0x14a>
 800af00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800af04:	f1a1 0b02 	sub.w	fp, r1, #2
 800af08:	46f2      	mov	sl, lr
 800af0a:	4f48      	ldr	r7, [pc, #288]	; (800b02c <D48_1CH_HTONS_VOL_HP+0x150>)
 800af0c:	eb00 0145 	add.w	r1, r0, r5, lsl #1
 800af10:	469e      	mov	lr, r3
 800af12:	9205      	str	r2, [sp, #20]
 800af14:	9103      	str	r1, [sp, #12]
 800af16:	e9d0 3200 	ldrd	r3, r2, [r0]
 800af1a:	3006      	adds	r0, #6
 800af1c:	ba5b      	rev16	r3, r3
 800af1e:	fa92 f992 	rev16.w	r9, r2
 800af22:	b2dd      	uxtb	r5, r3
 800af24:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800af28:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800af2c:	0e1b      	lsrs	r3, r3, #24
 800af2e:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 800af32:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 800af36:	eb05 2696 	add.w	r6, r5, r6, lsr #10
 800af3a:	f857 5022 	ldr.w	r5, [r7, r2, lsl #2]
 800af3e:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800af42:	fa5f f289 	uxtb.w	r2, r9
 800af46:	eb01 2196 	add.w	r1, r1, r6, lsr #10
 800af4a:	f3c9 2907 	ubfx	r9, r9, #8, #8
 800af4e:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800af52:	f3c6 0809 	ubfx	r8, r6, #0, #10
 800af56:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800af5a:	f857 6029 	ldr.w	r6, [r7, r9, lsl #2]
 800af5e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800af62:	eb03 2395 	add.w	r3, r3, r5, lsr #10
 800af66:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800af6a:	ea41 4808 	orr.w	r8, r1, r8, lsl #16
 800af6e:	eb02 2293 	add.w	r2, r2, r3, lsr #10
 800af72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800af76:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 800af7a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800af7e:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 800af82:	f3c6 0309 	ubfx	r3, r6, #0, #10
 800af86:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 800af8a:	4b29      	ldr	r3, [pc, #164]	; (800b030 <D48_1CH_HTONS_VOL_HP+0x154>)
 800af8c:	fb28 c103 	smlad	r1, r8, r3, ip
 800af90:	4b28      	ldr	r3, [pc, #160]	; (800b034 <D48_1CH_HTONS_VOL_HP+0x158>)
 800af92:	fb25 1103 	smlad	r1, r5, r3, r1
 800af96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800af9a:	fb22 1903 	smlad	r9, r2, r3, r1
 800af9e:	4b26      	ldr	r3, [pc, #152]	; (800b038 <D48_1CH_HTONS_VOL_HP+0x15c>)
 800afa0:	fb28 ec03 	smlad	ip, r8, r3, lr
 800afa4:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 800afa8:	fb25 cc03 	smlad	ip, r5, r3, ip
 800afac:	4b23      	ldr	r3, [pc, #140]	; (800b03c <D48_1CH_HTONS_VOL_HP+0x160>)
 800afae:	fb22 cc03 	smlad	ip, r2, r3, ip
 800afb2:	2101      	movs	r1, #1
 800afb4:	fb28 f801 	smuad	r8, r8, r1
 800afb8:	4b21      	ldr	r3, [pc, #132]	; (800b040 <D48_1CH_HTONS_VOL_HP+0x164>)
 800afba:	fb25 8503 	smlad	r5, r5, r3, r8
 800afbe:	4b21      	ldr	r3, [pc, #132]	; (800b044 <D48_1CH_HTONS_VOL_HP+0x168>)
 800afc0:	fb22 5e03 	smlad	lr, r2, r3, r5
 800afc4:	f5a9 4158 	sub.w	r1, r9, #55296	; 0xd800
 800afc8:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800afcc:	190a      	adds	r2, r1, r4
 800afce:	9c02      	ldr	r4, [sp, #8]
 800afd0:	eba2 020a 	sub.w	r2, r2, sl
 800afd4:	468a      	mov	sl, r1
 800afd6:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800afda:	fba2 2304 	umull	r2, r3, r2, r4
 800afde:	fb04 3309 	mla	r3, r4, r9, r3
 800afe2:	f112 4400 	adds.w	r4, r2, #2147483648	; 0x80000000
 800afe6:	f04f 0900 	mov.w	r9, #0
 800afea:	f143 0500 	adc.w	r5, r3, #0
 800afee:	9b01      	ldr	r3, [sp, #4]
 800aff0:	032a      	lsls	r2, r5, #12
 800aff2:	006c      	lsls	r4, r5, #1
 800aff4:	fbc3 8902 	smlal	r8, r9, r3, r2
 800aff8:	ea4f 03a9 	mov.w	r3, r9, asr #2
 800affc:	f303 030f 	ssat	r3, #16, r3
 800b000:	f82b 3f02 	strh.w	r3, [fp, #2]!
 800b004:	9b03      	ldr	r3, [sp, #12]
 800b006:	4283      	cmp	r3, r0
 800b008:	d185      	bne.n	800af16 <D48_1CH_HTONS_VOL_HP+0x3a>
 800b00a:	4673      	mov	r3, lr
 800b00c:	9a05      	ldr	r2, [sp, #20]
 800b00e:	6093      	str	r3, [r2, #8]
 800b010:	2000      	movs	r0, #0
 800b012:	9b04      	ldr	r3, [sp, #16]
 800b014:	f8c2 c00c 	str.w	ip, [r2, #12]
 800b018:	61d6      	str	r6, [r2, #28]
 800b01a:	6193      	str	r3, [r2, #24]
 800b01c:	e9c2 4104 	strd	r4, r1, [r2, #16]
 800b020:	b007      	add	sp, #28
 800b022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b026:	4671      	mov	r1, lr
 800b028:	e7f1      	b.n	800b00e <D48_1CH_HTONS_VOL_HP+0x132>
 800b02a:	bf00      	nop
 800b02c:	24000000 	.word	0x24000000
 800b030:	000f000a 	.word	0x000f000a
 800b034:	00060003 	.word	0x00060003
 800b038:	00150019 	.word	0x00150019
 800b03c:	00190015 	.word	0x00190015
 800b040:	00030006 	.word	0x00030006
 800b044:	000a000f 	.word	0x000a000f

0800b048 <D64_1CH_HTONS_VOL_HP>:
 800b048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b04c:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800b04e:	b089      	sub	sp, #36	; 0x24
 800b050:	6993      	ldr	r3, [r2, #24]
 800b052:	4686      	mov	lr, r0
 800b054:	9503      	str	r5, [sp, #12]
 800b056:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 800b058:	6a15      	ldr	r5, [r2, #32]
 800b05a:	9306      	str	r3, [sp, #24]
 800b05c:	69d6      	ldr	r6, [r2, #28]
 800b05e:	9504      	str	r5, [sp, #16]
 800b060:	e9d2 8404 	ldrd	r8, r4, [r2, #16]
 800b064:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 800b068:	2800      	cmp	r0, #0
 800b06a:	f000 80a4 	beq.w	800b1b6 <D64_1CH_HTONS_VOL_HP+0x16e>
 800b06e:	460f      	mov	r7, r1
 800b070:	46f1      	mov	r9, lr
 800b072:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 800b076:	4d56      	ldr	r5, [pc, #344]	; (800b1d0 <D64_1CH_HTONS_VOL_HP+0x188>)
 800b078:	46a2      	mov	sl, r4
 800b07a:	469e      	mov	lr, r3
 800b07c:	9105      	str	r1, [sp, #20]
 800b07e:	9207      	str	r2, [sp, #28]
 800b080:	f859 1b08 	ldr.w	r1, [r9], #8
 800b084:	f859 3c04 	ldr.w	r3, [r9, #-4]
 800b088:	ba49      	rev16	r1, r1
 800b08a:	fa93 fb93 	rev16.w	fp, r3
 800b08e:	b2cb      	uxtb	r3, r1
 800b090:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800b094:	f3c1 4007 	ubfx	r0, r1, #16, #8
 800b098:	0e09      	lsrs	r1, r1, #24
 800b09a:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
 800b09e:	fa5f f38b 	uxtb.w	r3, fp
 800b0a2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800b0a6:	4426      	add	r6, r4
 800b0a8:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 800b0ac:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 800b0b0:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 800b0b4:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 800b0b8:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800b0bc:	f3cb 2307 	ubfx	r3, fp, #8, #8
 800b0c0:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 800b0c4:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800b0c8:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800b0cc:	eb01 2194 	add.w	r1, r1, r4, lsr #10
 800b0d0:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800b0d4:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 800b0d8:	f3cb 4607 	ubfx	r6, fp, #16, #8
 800b0dc:	eb00 2091 	add.w	r0, r0, r1, lsr #10
 800b0e0:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800b0e4:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800b0e8:	ea4f 6b1b 	mov.w	fp, fp, lsr #24
 800b0ec:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 800b0f0:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800b0f4:	f855 b02b 	ldr.w	fp, [r5, fp, lsl #2]
 800b0f8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b0fc:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 800b100:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b104:	eb0b 2b96 	add.w	fp, fp, r6, lsr #10
 800b108:	f3c6 0409 	ubfx	r4, r6, #0, #10
 800b10c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b110:	f3cb 0009 	ubfx	r0, fp, #0, #10
 800b114:	ea4f 269b 	mov.w	r6, fp, lsr #10
 800b118:	ea40 4b04 	orr.w	fp, r0, r4, lsl #16
 800b11c:	482d      	ldr	r0, [pc, #180]	; (800b1d4 <D64_1CH_HTONS_VOL_HP+0x18c>)
 800b11e:	fb22 cc00 	smlad	ip, r2, r0, ip
 800b122:	482d      	ldr	r0, [pc, #180]	; (800b1d8 <D64_1CH_HTONS_VOL_HP+0x190>)
 800b124:	fb21 cc00 	smlad	ip, r1, r0, ip
 800b128:	482c      	ldr	r0, [pc, #176]	; (800b1dc <D64_1CH_HTONS_VOL_HP+0x194>)
 800b12a:	fb23 cc00 	smlad	ip, r3, r0, ip
 800b12e:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 800b132:	fb2b c404 	smlad	r4, fp, r4, ip
 800b136:	482a      	ldr	r0, [pc, #168]	; (800b1e0 <D64_1CH_HTONS_VOL_HP+0x198>)
 800b138:	fb22 ec00 	smlad	ip, r2, r0, lr
 800b13c:	fb2b cc10 	smladx	ip, fp, r0, ip
 800b140:	4828      	ldr	r0, [pc, #160]	; (800b1e4 <D64_1CH_HTONS_VOL_HP+0x19c>)
 800b142:	fb21 cc00 	smlad	ip, r1, r0, ip
 800b146:	fb23 cc10 	smladx	ip, r3, r0, ip
 800b14a:	f04f 0e01 	mov.w	lr, #1
 800b14e:	fb22 f20e 	smuad	r2, r2, lr
 800b152:	4825      	ldr	r0, [pc, #148]	; (800b1e8 <D64_1CH_HTONS_VOL_HP+0x1a0>)
 800b154:	fb21 2100 	smlad	r1, r1, r0, r2
 800b158:	4a24      	ldr	r2, [pc, #144]	; (800b1ec <D64_1CH_HTONS_VOL_HP+0x1a4>)
 800b15a:	fb23 1302 	smlad	r3, r3, r2, r1
 800b15e:	4a24      	ldr	r2, [pc, #144]	; (800b1f0 <D64_1CH_HTONS_VOL_HP+0x1a8>)
 800b160:	fb2b 3e02 	smlad	lr, fp, r2, r3
 800b164:	f5a4 3400 	sub.w	r4, r4, #131072	; 0x20000
 800b168:	eb04 0208 	add.w	r2, r4, r8
 800b16c:	eba2 020a 	sub.w	r2, r2, sl
 800b170:	46a2      	mov	sl, r4
 800b172:	4610      	mov	r0, r2
 800b174:	17d1      	asrs	r1, r2, #31
 800b176:	e9cd 0100 	strd	r0, r1, [sp]
 800b17a:	9904      	ldr	r1, [sp, #16]
 800b17c:	9801      	ldr	r0, [sp, #4]
 800b17e:	fba2 2301 	umull	r2, r3, r2, r1
 800b182:	fb01 3300 	mla	r3, r1, r0, r3
 800b186:	f112 4000 	adds.w	r0, r2, #2147483648	; 0x80000000
 800b18a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800b18e:	f143 0100 	adc.w	r1, r3, #0
 800b192:	9b03      	ldr	r3, [sp, #12]
 800b194:	02ca      	lsls	r2, r1, #11
 800b196:	ea4f 0841 	mov.w	r8, r1, lsl #1
 800b19a:	2100      	movs	r1, #0
 800b19c:	fbc3 0102 	smlal	r0, r1, r3, r2
 800b1a0:	108b      	asrs	r3, r1, #2
 800b1a2:	f303 030f 	ssat	r3, #16, r3
 800b1a6:	f827 3b02 	strh.w	r3, [r7], #2
 800b1aa:	9b05      	ldr	r3, [sp, #20]
 800b1ac:	429f      	cmp	r7, r3
 800b1ae:	f47f af67 	bne.w	800b080 <D64_1CH_HTONS_VOL_HP+0x38>
 800b1b2:	4673      	mov	r3, lr
 800b1b4:	9a07      	ldr	r2, [sp, #28]
 800b1b6:	6093      	str	r3, [r2, #8]
 800b1b8:	2000      	movs	r0, #0
 800b1ba:	9b06      	ldr	r3, [sp, #24]
 800b1bc:	f8c2 c00c 	str.w	ip, [r2, #12]
 800b1c0:	61d6      	str	r6, [r2, #28]
 800b1c2:	6193      	str	r3, [r2, #24]
 800b1c4:	e9c2 8404 	strd	r8, r4, [r2, #16]
 800b1c8:	b009      	add	sp, #36	; 0x24
 800b1ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1ce:	bf00      	nop
 800b1d0:	24000000 	.word	0x24000000
 800b1d4:	001c0015 	.word	0x001c0015
 800b1d8:	000f000a 	.word	0x000f000a
 800b1dc:	00060003 	.word	0x00060003
 800b1e0:	0024002a 	.word	0x0024002a
 800b1e4:	002e0030 	.word	0x002e0030
 800b1e8:	00030006 	.word	0x00030006
 800b1ec:	000a000f 	.word	0x000a000f
 800b1f0:	0015001c 	.word	0x0015001c

0800b1f4 <D80_1CH_HTONS_VOL_HP>:
 800b1f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1f8:	6913      	ldr	r3, [r2, #16]
 800b1fa:	b089      	sub	sp, #36	; 0x24
 800b1fc:	6b16      	ldr	r6, [r2, #48]	; 0x30
 800b1fe:	9301      	str	r3, [sp, #4]
 800b200:	9603      	str	r6, [sp, #12]
 800b202:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800b204:	6a16      	ldr	r6, [r2, #32]
 800b206:	e9d2 5305 	ldrd	r5, r3, [r2, #20]
 800b20a:	e9d2 7c02 	ldrd	r7, ip, [r2, #8]
 800b20e:	9306      	str	r3, [sp, #24]
 800b210:	9604      	str	r6, [sp, #16]
 800b212:	69d3      	ldr	r3, [r2, #28]
 800b214:	2c00      	cmp	r4, #0
 800b216:	f000 80ce 	beq.w	800b3b6 <D80_1CH_HTONS_VOL_HP+0x1c2>
 800b21a:	3902      	subs	r1, #2
 800b21c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800b220:	4e66      	ldr	r6, [pc, #408]	; (800b3bc <D80_1CH_HTONS_VOL_HP+0x1c8>)
 800b222:	469e      	mov	lr, r3
 800b224:	9102      	str	r1, [sp, #8]
 800b226:	46aa      	mov	sl, r5
 800b228:	eb00 0144 	add.w	r1, r0, r4, lsl #1
 800b22c:	9207      	str	r2, [sp, #28]
 800b22e:	9105      	str	r1, [sp, #20]
 800b230:	6883      	ldr	r3, [r0, #8]
 800b232:	e9d0 4200 	ldrd	r4, r2, [r0]
 800b236:	300a      	adds	r0, #10
 800b238:	ba64      	rev16	r4, r4
 800b23a:	ba52      	rev16	r2, r2
 800b23c:	fa93 fb93 	rev16.w	fp, r3
 800b240:	b2e5      	uxtb	r5, r4
 800b242:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800b246:	f3c4 4107 	ubfx	r1, r4, #16, #8
 800b24a:	0e24      	lsrs	r4, r4, #24
 800b24c:	f856 8025 	ldr.w	r8, [r6, r5, lsl #2]
 800b250:	b2d5      	uxtb	r5, r2
 800b252:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800b256:	44c6      	add	lr, r8
 800b258:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800b25c:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
 800b260:	eb03 239e 	add.w	r3, r3, lr, lsr #10
 800b264:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 800b268:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800b26c:	eb01 2993 	add.w	r9, r1, r3, lsr #10
 800b270:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800b274:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b278:	eb04 2499 	add.w	r4, r4, r9, lsr #10
 800b27c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800b280:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800b284:	f3cb 2e07 	ubfx	lr, fp, #8, #8
 800b288:	eb05 2894 	add.w	r8, r5, r4, lsr #10
 800b28c:	f3c2 4507 	ubfx	r5, r2, #16, #8
 800b290:	0e12      	lsrs	r2, r2, #24
 800b292:	f856 e02e 	ldr.w	lr, [r6, lr, lsl #2]
 800b296:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 800b29a:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 800b29e:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 800b2a2:	fa5f fb8b 	uxtb.w	fp, fp
 800b2a6:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800b2aa:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800b2ae:	f856 b02b 	ldr.w	fp, [r6, fp, lsl #2]
 800b2b2:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800b2b6:	eb02 2295 	add.w	r2, r2, r5, lsr #10
 800b2ba:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800b2be:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800b2c2:	ea41 4808 	orr.w	r8, r1, r8, lsl #16
 800b2c6:	eb0b 2b92 	add.w	fp, fp, r2, lsr #10
 800b2ca:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800b2ce:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800b2d2:	eb0e 2e9b 	add.w	lr, lr, fp, lsr #10
 800b2d6:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800b2da:	ea44 4409 	orr.w	r4, r4, r9, lsl #16
 800b2de:	f3ce 0109 	ubfx	r1, lr, #0, #10
 800b2e2:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 800b2e6:	ea4f 2e9e 	mov.w	lr, lr, lsr #10
 800b2ea:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 800b2ee:	4934      	ldr	r1, [pc, #208]	; (800b3c0 <D80_1CH_HTONS_VOL_HP+0x1cc>)
 800b2f0:	fb23 cc01 	smlad	ip, r3, r1, ip
 800b2f4:	4933      	ldr	r1, [pc, #204]	; (800b3c4 <D80_1CH_HTONS_VOL_HP+0x1d0>)
 800b2f6:	fb24 cc01 	smlad	ip, r4, r1, ip
 800b2fa:	4933      	ldr	r1, [pc, #204]	; (800b3c8 <D80_1CH_HTONS_VOL_HP+0x1d4>)
 800b2fc:	fb28 cc01 	smlad	ip, r8, r1, ip
 800b300:	4932      	ldr	r1, [pc, #200]	; (800b3cc <D80_1CH_HTONS_VOL_HP+0x1d8>)
 800b302:	fb22 cc01 	smlad	ip, r2, r1, ip
 800b306:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800b30a:	fb2b c901 	smlad	r9, fp, r1, ip
 800b30e:	4930      	ldr	r1, [pc, #192]	; (800b3d0 <D80_1CH_HTONS_VOL_HP+0x1dc>)
 800b310:	fb23 7701 	smlad	r7, r3, r1, r7
 800b314:	492f      	ldr	r1, [pc, #188]	; (800b3d4 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 800b316:	fb24 7701 	smlad	r7, r4, r1, r7
 800b31a:	f04f 1c4b 	mov.w	ip, #4915275	; 0x4b004b
 800b31e:	fb28 7c0c 	smlad	ip, r8, ip, r7
 800b322:	492d      	ldr	r1, [pc, #180]	; (800b3d8 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 800b324:	fb22 cc01 	smlad	ip, r2, r1, ip
 800b328:	492c      	ldr	r1, [pc, #176]	; (800b3dc <D80_1CH_HTONS_VOL_HP+0x1e8>)
 800b32a:	fb2b cc01 	smlad	ip, fp, r1, ip
 800b32e:	2101      	movs	r1, #1
 800b330:	fb23 f301 	smuad	r3, r3, r1
 800b334:	492a      	ldr	r1, [pc, #168]	; (800b3e0 <D80_1CH_HTONS_VOL_HP+0x1ec>)
 800b336:	fb24 3401 	smlad	r4, r4, r1, r3
 800b33a:	492a      	ldr	r1, [pc, #168]	; (800b3e4 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 800b33c:	fb28 4101 	smlad	r1, r8, r1, r4
 800b340:	4f29      	ldr	r7, [pc, #164]	; (800b3e8 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 800b342:	fb22 1207 	smlad	r2, r2, r7, r1
 800b346:	4f29      	ldr	r7, [pc, #164]	; (800b3ec <D80_1CH_HTONS_VOL_HP+0x1f8>)
 800b348:	fb2b 2707 	smlad	r7, fp, r7, r2
 800b34c:	f5a9 317a 	sub.w	r1, r9, #256000	; 0x3e800
 800b350:	9b01      	ldr	r3, [sp, #4]
 800b352:	9c04      	ldr	r4, [sp, #16]
 800b354:	440b      	add	r3, r1
 800b356:	eba3 020a 	sub.w	r2, r3, sl
 800b35a:	468a      	mov	sl, r1
 800b35c:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800b360:	fba2 2304 	umull	r2, r3, r2, r4
 800b364:	fb04 3309 	mla	r3, r4, r9, r3
 800b368:	f112 4400 	adds.w	r4, r2, #2147483648	; 0x80000000
 800b36c:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800b370:	f143 0500 	adc.w	r5, r3, #0
 800b374:	006b      	lsls	r3, r5, #1
 800b376:	02aa      	lsls	r2, r5, #10
 800b378:	2500      	movs	r5, #0
 800b37a:	9301      	str	r3, [sp, #4]
 800b37c:	9b03      	ldr	r3, [sp, #12]
 800b37e:	fbc3 4502 	smlal	r4, r5, r3, r2
 800b382:	9a02      	ldr	r2, [sp, #8]
 800b384:	10ab      	asrs	r3, r5, #2
 800b386:	f303 030f 	ssat	r3, #16, r3
 800b38a:	f822 3f02 	strh.w	r3, [r2, #2]!
 800b38e:	9b05      	ldr	r3, [sp, #20]
 800b390:	9202      	str	r2, [sp, #8]
 800b392:	4298      	cmp	r0, r3
 800b394:	f47f af4c 	bne.w	800b230 <D80_1CH_HTONS_VOL_HP+0x3c>
 800b398:	4673      	mov	r3, lr
 800b39a:	9a07      	ldr	r2, [sp, #28]
 800b39c:	61d3      	str	r3, [r2, #28]
 800b39e:	2000      	movs	r0, #0
 800b3a0:	9b01      	ldr	r3, [sp, #4]
 800b3a2:	6097      	str	r7, [r2, #8]
 800b3a4:	f8c2 c00c 	str.w	ip, [r2, #12]
 800b3a8:	e9c2 3104 	strd	r3, r1, [r2, #16]
 800b3ac:	9b06      	ldr	r3, [sp, #24]
 800b3ae:	6193      	str	r3, [r2, #24]
 800b3b0:	b009      	add	sp, #36	; 0x24
 800b3b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3b6:	4629      	mov	r1, r5
 800b3b8:	e7f0      	b.n	800b39c <D80_1CH_HTONS_VOL_HP+0x1a8>
 800b3ba:	bf00      	nop
 800b3bc:	24000000 	.word	0x24000000
 800b3c0:	002d0024 	.word	0x002d0024
 800b3c4:	001c0015 	.word	0x001c0015
 800b3c8:	000f000a 	.word	0x000f000a
 800b3cc:	00060003 	.word	0x00060003
 800b3d0:	0037003f 	.word	0x0037003f
 800b3d4:	00450049 	.word	0x00450049
 800b3d8:	00490045 	.word	0x00490045
 800b3dc:	003f0037 	.word	0x003f0037
 800b3e0:	00030006 	.word	0x00030006
 800b3e4:	000a000f 	.word	0x000a000f
 800b3e8:	0015001c 	.word	0x0015001c
 800b3ec:	0024002d 	.word	0x0024002d

0800b3f0 <D128_1CH_HTONS_VOL_HP>:
 800b3f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3f4:	6914      	ldr	r4, [r2, #16]
 800b3f6:	b08d      	sub	sp, #52	; 0x34
 800b3f8:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800b3fa:	9404      	str	r4, [sp, #16]
 800b3fc:	6954      	ldr	r4, [r2, #20]
 800b3fe:	920b      	str	r2, [sp, #44]	; 0x2c
 800b400:	9405      	str	r4, [sp, #20]
 800b402:	6994      	ldr	r4, [r2, #24]
 800b404:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 800b408:	940a      	str	r4, [sp, #40]	; 0x28
 800b40a:	6894      	ldr	r4, [r2, #8]
 800b40c:	9403      	str	r4, [sp, #12]
 800b40e:	68d4      	ldr	r4, [r2, #12]
 800b410:	9402      	str	r4, [sp, #8]
 800b412:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800b414:	6a12      	ldr	r2, [r2, #32]
 800b416:	9407      	str	r4, [sp, #28]
 800b418:	9208      	str	r2, [sp, #32]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	f000 812e 	beq.w	800b67c <D128_1CH_HTONS_VOL_HP+0x28c>
 800b420:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800b424:	f100 0b10 	add.w	fp, r0, #16
 800b428:	f8df 9290 	ldr.w	r9, [pc, #656]	; 800b6bc <D128_1CH_HTONS_VOL_HP+0x2cc>
 800b42c:	9106      	str	r1, [sp, #24]
 800b42e:	9309      	str	r3, [sp, #36]	; 0x24
 800b430:	e95b 0204 	ldrd	r0, r2, [fp, #-16]
 800b434:	e95b 3602 	ldrd	r3, r6, [fp, #-8]
 800b438:	ba40      	rev16	r0, r0
 800b43a:	ba52      	rev16	r2, r2
 800b43c:	ba5b      	rev16	r3, r3
 800b43e:	ba76      	rev16	r6, r6
 800b440:	b2c5      	uxtb	r5, r0
 800b442:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800b446:	f3c0 4107 	ubfx	r1, r0, #16, #8
 800b44a:	0e00      	lsrs	r0, r0, #24
 800b44c:	f859 7025 	ldr.w	r7, [r9, r5, lsl #2]
 800b450:	b2d5      	uxtb	r5, r2
 800b452:	f859 e024 	ldr.w	lr, [r9, r4, lsl #2]
 800b456:	f3c2 2407 	ubfx	r4, r2, #8, #8
 800b45a:	44bc      	add	ip, r7
 800b45c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b460:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
 800b464:	f3c2 4007 	ubfx	r0, r2, #16, #8
 800b468:	eb0e 2e9c 	add.w	lr, lr, ip, lsr #10
 800b46c:	f859 a025 	ldr.w	sl, [r9, r5, lsl #2]
 800b470:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 800b474:	0e12      	lsrs	r2, r2, #24
 800b476:	eb01 219e 	add.w	r1, r1, lr, lsr #10
 800b47a:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 800b47e:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800b482:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800b486:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 800b48a:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 800b48e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800b492:	b2da      	uxtb	r2, r3
 800b494:	eb0a 2a97 	add.w	sl, sl, r7, lsr #10
 800b498:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800b49c:	ea4e 4e0c 	orr.w	lr, lr, ip, lsl #16
 800b4a0:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 800b4a4:	eb05 259a 	add.w	r5, r5, sl, lsr #10
 800b4a8:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800b4ac:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800b4b0:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800b4b4:	eb00 2c95 	add.w	ip, r0, r5, lsr #10
 800b4b8:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800b4bc:	f859 8021 	ldr.w	r8, [r9, r1, lsl #2]
 800b4c0:	f3c3 4107 	ubfx	r1, r3, #16, #8
 800b4c4:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 800b4c8:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800b4cc:	f859 0021 	ldr.w	r0, [r9, r1, lsl #2]
 800b4d0:	0e1b      	lsrs	r3, r3, #24
 800b4d2:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 800b4d6:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800b4da:	f859 1023 	ldr.w	r1, [r9, r3, lsl #2]
 800b4de:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 800b4e2:	eb08 2892 	add.w	r8, r8, r2, lsr #10
 800b4e6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800b4ea:	b2f3      	uxtb	r3, r6
 800b4ec:	eb00 2a98 	add.w	sl, r0, r8, lsr #10
 800b4f0:	f3c8 0009 	ubfx	r0, r8, #0, #10
 800b4f4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b4f8:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 800b4fc:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 800b500:	f3c6 2c07 	ubfx	ip, r6, #8, #8
 800b504:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800b508:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800b50c:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 800b510:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 800b514:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 800b518:	0e36      	lsrs	r6, r6, #24
 800b51a:	eb02 2298 	add.w	r2, r2, r8, lsr #10
 800b51e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800b522:	f859 302c 	ldr.w	r3, [r9, ip, lsl #2]
 800b526:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800b52a:	f859 c026 	ldr.w	ip, [r9, r6, lsl #2]
 800b52e:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b532:	eb03 2692 	add.w	r6, r3, r2, lsr #10
 800b536:	f3c2 0309 	ubfx	r3, r2, #0, #10
 800b53a:	9101      	str	r1, [sp, #4]
 800b53c:	ea43 4208 	orr.w	r2, r3, r8, lsl #16
 800b540:	9b02      	ldr	r3, [sp, #8]
 800b542:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 800b546:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800b54a:	4611      	mov	r1, r2
 800b54c:	f3cc 0209 	ubfx	r2, ip, #0, #10
 800b550:	ea4f 2c9c 	mov.w	ip, ip, lsr #10
 800b554:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 800b558:	4a49      	ldr	r2, [pc, #292]	; (800b680 <D128_1CH_HTONS_VOL_HP+0x290>)
 800b55a:	fb2e 3202 	smlad	r2, lr, r2, r3
 800b55e:	4b49      	ldr	r3, [pc, #292]	; (800b684 <D128_1CH_HTONS_VOL_HP+0x294>)
 800b560:	fb27 2203 	smlad	r2, r7, r3, r2
 800b564:	4b48      	ldr	r3, [pc, #288]	; (800b688 <D128_1CH_HTONS_VOL_HP+0x298>)
 800b566:	fb25 2203 	smlad	r2, r5, r3, r2
 800b56a:	4b48      	ldr	r3, [pc, #288]	; (800b68c <D128_1CH_HTONS_VOL_HP+0x29c>)
 800b56c:	fb24 2203 	smlad	r2, r4, r3, r2
 800b570:	4b47      	ldr	r3, [pc, #284]	; (800b690 <D128_1CH_HTONS_VOL_HP+0x2a0>)
 800b572:	fb20 2803 	smlad	r8, r0, r3, r2
 800b576:	4b47      	ldr	r3, [pc, #284]	; (800b694 <D128_1CH_HTONS_VOL_HP+0x2a4>)
 800b578:	9a01      	ldr	r2, [sp, #4]
 800b57a:	fb22 8203 	smlad	r2, r2, r3, r8
 800b57e:	4b46      	ldr	r3, [pc, #280]	; (800b698 <D128_1CH_HTONS_VOL_HP+0x2a8>)
 800b580:	9102      	str	r1, [sp, #8]
 800b582:	fb21 2203 	smlad	r2, r1, r3, r2
 800b586:	f44f 3880 	mov.w	r8, #65536	; 0x10000
 800b58a:	fb26 2308 	smlad	r3, r6, r8, r2
 800b58e:	4619      	mov	r1, r3
 800b590:	9a03      	ldr	r2, [sp, #12]
 800b592:	4b42      	ldr	r3, [pc, #264]	; (800b69c <D128_1CH_HTONS_VOL_HP+0x2ac>)
 800b594:	fb2e 2803 	smlad	r8, lr, r3, r2
 800b598:	4b41      	ldr	r3, [pc, #260]	; (800b6a0 <D128_1CH_HTONS_VOL_HP+0x2b0>)
 800b59a:	fb27 8a03 	smlad	sl, r7, r3, r8
 800b59e:	f8df 8120 	ldr.w	r8, [pc, #288]	; 800b6c0 <D128_1CH_HTONS_VOL_HP+0x2d0>
 800b5a2:	fb25 a808 	smlad	r8, r5, r8, sl
 800b5a6:	f8df a11c 	ldr.w	sl, [pc, #284]	; 800b6c4 <D128_1CH_HTONS_VOL_HP+0x2d4>
 800b5aa:	fb24 880a 	smlad	r8, r4, sl, r8
 800b5ae:	f8df a118 	ldr.w	sl, [pc, #280]	; 800b6c8 <D128_1CH_HTONS_VOL_HP+0x2d8>
 800b5b2:	fb20 8a0a 	smlad	sl, r0, sl, r8
 800b5b6:	f8df 8114 	ldr.w	r8, [pc, #276]	; 800b6cc <D128_1CH_HTONS_VOL_HP+0x2dc>
 800b5ba:	9b01      	ldr	r3, [sp, #4]
 800b5bc:	fb23 aa08 	smlad	sl, r3, r8, sl
 800b5c0:	f8df 810c 	ldr.w	r8, [pc, #268]	; 800b6d0 <D128_1CH_HTONS_VOL_HP+0x2e0>
 800b5c4:	9a02      	ldr	r2, [sp, #8]
 800b5c6:	fb22 a808 	smlad	r8, r2, r8, sl
 800b5ca:	f8df a108 	ldr.w	sl, [pc, #264]	; 800b6d4 <D128_1CH_HTONS_VOL_HP+0x2e4>
 800b5ce:	fb26 830a 	smlad	r3, r6, sl, r8
 800b5d2:	f04f 0801 	mov.w	r8, #1
 800b5d6:	9302      	str	r3, [sp, #8]
 800b5d8:	fb2e fe08 	smuad	lr, lr, r8
 800b5dc:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 800b6d8 <D128_1CH_HTONS_VOL_HP+0x2e8>
 800b5e0:	fb27 ee08 	smlad	lr, r7, r8, lr
 800b5e4:	4f2f      	ldr	r7, [pc, #188]	; (800b6a4 <D128_1CH_HTONS_VOL_HP+0x2b4>)
 800b5e6:	fb25 ee07 	smlad	lr, r5, r7, lr
 800b5ea:	4f2f      	ldr	r7, [pc, #188]	; (800b6a8 <D128_1CH_HTONS_VOL_HP+0x2b8>)
 800b5ec:	fb24 ee07 	smlad	lr, r4, r7, lr
 800b5f0:	4f2e      	ldr	r7, [pc, #184]	; (800b6ac <D128_1CH_HTONS_VOL_HP+0x2bc>)
 800b5f2:	fb20 ee07 	smlad	lr, r0, r7, lr
 800b5f6:	4f2e      	ldr	r7, [pc, #184]	; (800b6b0 <D128_1CH_HTONS_VOL_HP+0x2c0>)
 800b5f8:	9b01      	ldr	r3, [sp, #4]
 800b5fa:	fb23 ee07 	smlad	lr, r3, r7, lr
 800b5fe:	4f2d      	ldr	r7, [pc, #180]	; (800b6b4 <D128_1CH_HTONS_VOL_HP+0x2c4>)
 800b600:	fb22 e707 	smlad	r7, r2, r7, lr
 800b604:	4b2c      	ldr	r3, [pc, #176]	; (800b6b8 <D128_1CH_HTONS_VOL_HP+0x2c8>)
 800b606:	fb26 7303 	smlad	r3, r6, r3, r7
 800b60a:	f5a1 1680 	sub.w	r6, r1, #1048576	; 0x100000
 800b60e:	9303      	str	r3, [sp, #12]
 800b610:	9b04      	ldr	r3, [sp, #16]
 800b612:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800b616:	9f08      	ldr	r7, [sp, #32]
 800b618:	2100      	movs	r1, #0
 800b61a:	4433      	add	r3, r6
 800b61c:	f10b 0b10 	add.w	fp, fp, #16
 800b620:	461a      	mov	r2, r3
 800b622:	9b05      	ldr	r3, [sp, #20]
 800b624:	9605      	str	r6, [sp, #20]
 800b626:	1ad2      	subs	r2, r2, r3
 800b628:	17d5      	asrs	r5, r2, #31
 800b62a:	fba2 2307 	umull	r2, r3, r2, r7
 800b62e:	1814      	adds	r4, r2, r0
 800b630:	fb07 3305 	mla	r3, r7, r5, r3
 800b634:	eb43 0501 	adc.w	r5, r3, r1
 800b638:	006b      	lsls	r3, r5, #1
 800b63a:	022a      	lsls	r2, r5, #8
 800b63c:	9304      	str	r3, [sp, #16]
 800b63e:	9b07      	ldr	r3, [sp, #28]
 800b640:	fbc3 0102 	smlal	r0, r1, r3, r2
 800b644:	9a06      	ldr	r2, [sp, #24]
 800b646:	108b      	asrs	r3, r1, #2
 800b648:	f303 030f 	ssat	r3, #16, r3
 800b64c:	f822 3b02 	strh.w	r3, [r2], #2
 800b650:	4613      	mov	r3, r2
 800b652:	9206      	str	r2, [sp, #24]
 800b654:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b656:	4293      	cmp	r3, r2
 800b658:	f47f aeea 	bne.w	800b430 <D128_1CH_HTONS_VOL_HP+0x40>
 800b65c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b65e:	2000      	movs	r0, #0
 800b660:	9903      	ldr	r1, [sp, #12]
 800b662:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b664:	6099      	str	r1, [r3, #8]
 800b666:	9902      	ldr	r1, [sp, #8]
 800b668:	f8c3 c01c 	str.w	ip, [r3, #28]
 800b66c:	60d9      	str	r1, [r3, #12]
 800b66e:	9904      	ldr	r1, [sp, #16]
 800b670:	619a      	str	r2, [r3, #24]
 800b672:	e9c3 1604 	strd	r1, r6, [r3, #16]
 800b676:	b00d      	add	sp, #52	; 0x34
 800b678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b67c:	9e05      	ldr	r6, [sp, #20]
 800b67e:	e7ed      	b.n	800b65c <D128_1CH_HTONS_VOL_HP+0x26c>
 800b680:	00780069 	.word	0x00780069
 800b684:	005b004e 	.word	0x005b004e
 800b688:	00420037 	.word	0x00420037
 800b68c:	002d0024 	.word	0x002d0024
 800b690:	001c0015 	.word	0x001c0015
 800b694:	000f000a 	.word	0x000f000a
 800b698:	00060003 	.word	0x00060003
 800b69c:	00880096 	.word	0x00880096
 800b6a0:	00a200ac 	.word	0x00a200ac
 800b6a4:	000a000f 	.word	0x000a000f
 800b6a8:	0015001c 	.word	0x0015001c
 800b6ac:	0024002d 	.word	0x0024002d
 800b6b0:	00370042 	.word	0x00370042
 800b6b4:	004e005b 	.word	0x004e005b
 800b6b8:	00690078 	.word	0x00690078
 800b6bc:	24000000 	.word	0x24000000
 800b6c0:	00b400ba 	.word	0x00b400ba
 800b6c4:	00be00c0 	.word	0x00be00c0
 800b6c8:	00c000be 	.word	0x00c000be
 800b6cc:	00ba00b4 	.word	0x00ba00b4
 800b6d0:	00ac00a2 	.word	0x00ac00a2
 800b6d4:	00960088 	.word	0x00960088
 800b6d8:	00030006 	.word	0x00030006

0800b6dc <PDM_Filter_Init>:
 800b6dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6de:	2240      	movs	r2, #64	; 0x40
 800b6e0:	2100      	movs	r1, #0
 800b6e2:	4604      	mov	r4, r0
 800b6e4:	300c      	adds	r0, #12
 800b6e6:	f000 f9ed 	bl	800bac4 <memset>
 800b6ea:	4a56      	ldr	r2, [pc, #344]	; (800b844 <PDM_Filter_Init+0x168>)
 800b6ec:	4856      	ldr	r0, [pc, #344]	; (800b848 <PDM_Filter_Init+0x16c>)
 800b6ee:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 800b6f2:	6813      	ldr	r3, [r2, #0]
 800b6f4:	f24c 2540 	movw	r5, #49728	; 0xc240
 800b6f8:	f023 0301 	bic.w	r3, r3, #1
 800b6fc:	6013      	str	r3, [r2, #0]
 800b6fe:	6803      	ldr	r3, [r0, #0]
 800b700:	400b      	ands	r3, r1
 800b702:	42ab      	cmp	r3, r5
 800b704:	d040      	beq.n	800b788 <PDM_Filter_Init+0xac>
 800b706:	6803      	ldr	r3, [r0, #0]
 800b708:	f24c 2270 	movw	r2, #49776	; 0xc270
 800b70c:	4019      	ands	r1, r3
 800b70e:	4291      	cmp	r1, r2
 800b710:	d03a      	beq.n	800b788 <PDM_Filter_Init+0xac>
 800b712:	4b4e      	ldr	r3, [pc, #312]	; (800b84c <PDM_Filter_Init+0x170>)
 800b714:	2101      	movs	r1, #1
 800b716:	461a      	mov	r2, r3
 800b718:	6019      	str	r1, [r3, #0]
 800b71a:	6813      	ldr	r3, [r2, #0]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d1fc      	bne.n	800b71a <PDM_Filter_Init+0x3e>
 800b720:	4b4b      	ldr	r3, [pc, #300]	; (800b850 <PDM_Filter_Init+0x174>)
 800b722:	494c      	ldr	r1, [pc, #304]	; (800b854 <PDM_Filter_Init+0x178>)
 800b724:	4a4c      	ldr	r2, [pc, #304]	; (800b858 <PDM_Filter_Init+0x17c>)
 800b726:	6019      	str	r1, [r3, #0]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	8820      	ldrh	r0, [r4, #0]
 800b72c:	4293      	cmp	r3, r2
 800b72e:	8961      	ldrh	r1, [r4, #10]
 800b730:	f04f 0300 	mov.w	r3, #0
 800b734:	8922      	ldrh	r2, [r4, #8]
 800b736:	bf14      	ite	ne
 800b738:	2500      	movne	r5, #0
 800b73a:	4d47      	ldreq	r5, [pc, #284]	; (800b858 <PDM_Filter_Init+0x17c>)
 800b73c:	2801      	cmp	r0, #1
 800b73e:	61a3      	str	r3, [r4, #24]
 800b740:	6465      	str	r5, [r4, #68]	; 0x44
 800b742:	60e3      	str	r3, [r4, #12]
 800b744:	6263      	str	r3, [r4, #36]	; 0x24
 800b746:	6423      	str	r3, [r4, #64]	; 0x40
 800b748:	86a1      	strh	r1, [r4, #52]	; 0x34
 800b74a:	86e2      	strh	r2, [r4, #54]	; 0x36
 800b74c:	e9c4 3304 	strd	r3, r3, [r4, #16]
 800b750:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800b754:	d936      	bls.n	800b7c4 <PDM_Filter_Init+0xe8>
 800b756:	2003      	movs	r0, #3
 800b758:	2302      	movs	r3, #2
 800b75a:	8862      	ldrh	r2, [r4, #2]
 800b75c:	2a01      	cmp	r2, #1
 800b75e:	d92e      	bls.n	800b7be <PDM_Filter_Init+0xe2>
 800b760:	2140      	movs	r1, #64	; 0x40
 800b762:	2300      	movs	r3, #0
 800b764:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800b766:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 800b76a:	d101      	bne.n	800b770 <PDM_Filter_Init+0x94>
 800b76c:	460b      	mov	r3, r1
 800b76e:	6421      	str	r1, [r4, #64]	; 0x40
 800b770:	6862      	ldr	r2, [r4, #4]
 800b772:	b11a      	cbz	r2, 800b77c <PDM_Filter_Init+0xa0>
 800b774:	f043 0310 	orr.w	r3, r3, #16
 800b778:	62e2      	str	r2, [r4, #44]	; 0x2c
 800b77a:	6423      	str	r3, [r4, #64]	; 0x40
 800b77c:	2200      	movs	r2, #0
 800b77e:	8722      	strh	r2, [r4, #56]	; 0x38
 800b780:	b908      	cbnz	r0, 800b786 <PDM_Filter_Init+0xaa>
 800b782:	3380      	adds	r3, #128	; 0x80
 800b784:	6423      	str	r3, [r4, #64]	; 0x40
 800b786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b788:	4b34      	ldr	r3, [pc, #208]	; (800b85c <PDM_Filter_Init+0x180>)
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d1c0      	bne.n	800b712 <PDM_Filter_Init+0x36>
 800b790:	4a33      	ldr	r2, [pc, #204]	; (800b860 <PDM_Filter_Init+0x184>)
 800b792:	6813      	ldr	r3, [r2, #0]
 800b794:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b798:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800b79c:	d006      	beq.n	800b7ac <PDM_Filter_Init+0xd0>
 800b79e:	6813      	ldr	r3, [r2, #0]
 800b7a0:	f240 4283 	movw	r2, #1155	; 0x483
 800b7a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b7a8:	4293      	cmp	r3, r2
 800b7aa:	d1b2      	bne.n	800b712 <PDM_Filter_Init+0x36>
 800b7ac:	4b2d      	ldr	r3, [pc, #180]	; (800b864 <PDM_Filter_Init+0x188>)
 800b7ae:	2101      	movs	r1, #1
 800b7b0:	461a      	mov	r2, r3
 800b7b2:	6019      	str	r1, [r3, #0]
 800b7b4:	6813      	ldr	r3, [r2, #0]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d1fc      	bne.n	800b7b4 <PDM_Filter_Init+0xd8>
 800b7ba:	4b2b      	ldr	r3, [pc, #172]	; (800b868 <PDM_Filter_Init+0x18c>)
 800b7bc:	e7b1      	b.n	800b722 <PDM_Filter_Init+0x46>
 800b7be:	d03a      	beq.n	800b836 <PDM_Filter_Init+0x15a>
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	e7cd      	b.n	800b760 <PDM_Filter_Init+0x84>
 800b7c4:	4d29      	ldr	r5, [pc, #164]	; (800b86c <PDM_Filter_Init+0x190>)
 800b7c6:	782a      	ldrb	r2, [r5, #0]
 800b7c8:	d01b      	beq.n	800b802 <PDM_Filter_Init+0x126>
 800b7ca:	2a01      	cmp	r2, #1
 800b7cc:	d001      	beq.n	800b7d2 <PDM_Filter_Init+0xf6>
 800b7ce:	2001      	movs	r0, #1
 800b7d0:	e7c3      	b.n	800b75a <PDM_Filter_Init+0x7e>
 800b7d2:	4927      	ldr	r1, [pc, #156]	; (800b870 <PDM_Filter_Init+0x194>)
 800b7d4:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 800b878 <PDM_Filter_Init+0x19c>
 800b7d8:	f501 6780 	add.w	r7, r1, #1024	; 0x400
 800b7dc:	4e25      	ldr	r6, [pc, #148]	; (800b874 <PDM_Filter_Init+0x198>)
 800b7de:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800b7e2:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 800b7e6:	ea02 0006 	and.w	r0, r2, r6
 800b7ea:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800b7ee:	428f      	cmp	r7, r1
 800b7f0:	ea43 0300 	orr.w	r3, r3, r0
 800b7f4:	4413      	add	r3, r2
 800b7f6:	600b      	str	r3, [r1, #0]
 800b7f8:	d1f1      	bne.n	800b7de <PDM_Filter_Init+0x102>
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	2001      	movs	r0, #1
 800b7fe:	702b      	strb	r3, [r5, #0]
 800b800:	e7ab      	b.n	800b75a <PDM_Filter_Init+0x7e>
 800b802:	2a00      	cmp	r2, #0
 800b804:	d1a9      	bne.n	800b75a <PDM_Filter_Init+0x7e>
 800b806:	491a      	ldr	r1, [pc, #104]	; (800b870 <PDM_Filter_Init+0x194>)
 800b808:	f8df c06c 	ldr.w	ip, [pc, #108]	; 800b878 <PDM_Filter_Init+0x19c>
 800b80c:	f501 6780 	add.w	r7, r1, #1024	; 0x400
 800b810:	4e18      	ldr	r6, [pc, #96]	; (800b874 <PDM_Filter_Init+0x198>)
 800b812:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800b816:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 800b81a:	ea02 0006 	and.w	r0, r2, r6
 800b81e:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800b822:	428f      	cmp	r7, r1
 800b824:	ea43 0300 	orr.w	r3, r3, r0
 800b828:	4413      	add	r3, r2
 800b82a:	600b      	str	r3, [r1, #0]
 800b82c:	d1f1      	bne.n	800b812 <PDM_Filter_Init+0x136>
 800b82e:	2001      	movs	r0, #1
 800b830:	2300      	movs	r3, #0
 800b832:	7028      	strb	r0, [r5, #0]
 800b834:	e791      	b.n	800b75a <PDM_Filter_Init+0x7e>
 800b836:	2220      	movs	r2, #32
 800b838:	4618      	mov	r0, r3
 800b83a:	2160      	movs	r1, #96	; 0x60
 800b83c:	6422      	str	r2, [r4, #64]	; 0x40
 800b83e:	4613      	mov	r3, r2
 800b840:	e790      	b.n	800b764 <PDM_Filter_Init+0x88>
 800b842:	bf00      	nop
 800b844:	e0002000 	.word	0xe0002000
 800b848:	e000ed00 	.word	0xe000ed00
 800b84c:	40023008 	.word	0x40023008
 800b850:	40023000 	.word	0x40023000
 800b854:	f407a5c2 	.word	0xf407a5c2
 800b858:	b5e8b5cd 	.word	0xb5e8b5cd
 800b85c:	e0042000 	.word	0xe0042000
 800b860:	5c001000 	.word	0x5c001000
 800b864:	58024c08 	.word	0x58024c08
 800b868:	58024c00 	.word	0x58024c00
 800b86c:	24000490 	.word	0x24000490
 800b870:	23fffffc 	.word	0x23fffffc
 800b874:	000ffc00 	.word	0x000ffc00
 800b878:	3ff00000 	.word	0x3ff00000

0800b87c <PDM_Filter_setConfig>:
 800b87c:	4b67      	ldr	r3, [pc, #412]	; (800ba1c <PDM_Filter_setConfig+0x1a0>)
 800b87e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b880:	429a      	cmp	r2, r3
 800b882:	d128      	bne.n	800b8d6 <PDM_Filter_setConfig+0x5a>
 800b884:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800b886:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b888:	880e      	ldrh	r6, [r1, #0]
 800b88a:	460d      	mov	r5, r1
 800b88c:	4604      	mov	r4, r0
 800b88e:	f422 7180 	bic.w	r1, r2, #256	; 0x100
 800b892:	1e73      	subs	r3, r6, #1
 800b894:	f9b5 7004 	ldrsh.w	r7, [r5, #4]
 800b898:	f9b0 0038 	ldrsh.w	r0, [r0, #56]	; 0x38
 800b89c:	2b06      	cmp	r3, #6
 800b89e:	ed2d 8b02 	vpush	{d8}
 800b8a2:	6421      	str	r1, [r4, #64]	; 0x40
 800b8a4:	b083      	sub	sp, #12
 800b8a6:	d820      	bhi.n	800b8ea <PDM_Filter_setConfig+0x6e>
 800b8a8:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800b8aa:	42b3      	cmp	r3, r6
 800b8ac:	d03d      	beq.n	800b92a <PDM_Filter_setConfig+0xae>
 800b8ae:	4b5c      	ldr	r3, [pc, #368]	; (800ba20 <PDM_Filter_setConfig+0x1a4>)
 800b8b0:	4013      	ands	r3, r2
 800b8b2:	4333      	orrs	r3, r6
 800b8b4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800b8b8:	6423      	str	r3, [r4, #64]	; 0x40
 800b8ba:	f003 030f 	and.w	r3, r3, #15
 800b8be:	2a70      	cmp	r2, #112	; 0x70
 800b8c0:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800b8c4:	d009      	beq.n	800b8da <PDM_Filter_setConfig+0x5e>
 800b8c6:	2b06      	cmp	r3, #6
 800b8c8:	d824      	bhi.n	800b914 <PDM_Filter_setConfig+0x98>
 800b8ca:	e8df f003 	tbb	[pc, r3]
 800b8ce:	878a      	.short	0x878a
 800b8d0:	7b7e8184 	.word	0x7b7e8184
 800b8d4:	78          	.byte	0x78
 800b8d5:	00          	.byte	0x00
 800b8d6:	2004      	movs	r0, #4
 800b8d8:	4770      	bx	lr
 800b8da:	2b06      	cmp	r3, #6
 800b8dc:	d81a      	bhi.n	800b914 <PDM_Filter_setConfig+0x98>
 800b8de:	e8df f003 	tbb	[pc, r3]
 800b8e2:	8f92      	.short	0x8f92
 800b8e4:	8617898c 	.word	0x8617898c
 800b8e8:	83          	.byte	0x83
 800b8e9:	00          	.byte	0x00
 800b8ea:	4287      	cmp	r7, r0
 800b8ec:	f000 808e 	beq.w	800ba0c <PDM_Filter_setConfig+0x190>
 800b8f0:	f117 0f0c 	cmn.w	r7, #12
 800b8f4:	f04f 0008 	mov.w	r0, #8
 800b8f8:	da11      	bge.n	800b91e <PDM_Filter_setConfig+0xa2>
 800b8fa:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 800b8fe:	3040      	adds	r0, #64	; 0x40
 800b900:	80ab      	strh	r3, [r5, #4]
 800b902:	886b      	ldrh	r3, [r5, #2]
 800b904:	8626      	strh	r6, [r4, #48]	; 0x30
 800b906:	8663      	strh	r3, [r4, #50]	; 0x32
 800b908:	b003      	add	sp, #12
 800b90a:	ecbd 8b02 	vpop	{d8}
 800b90e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b910:	4b44      	ldr	r3, [pc, #272]	; (800ba24 <PDM_Filter_setConfig+0x1a8>)
 800b912:	64a3      	str	r3, [r4, #72]	; 0x48
 800b914:	f117 0f0c 	cmn.w	r7, #12
 800b918:	f04f 0000 	mov.w	r0, #0
 800b91c:	dbed      	blt.n	800b8fa <PDM_Filter_setConfig+0x7e>
 800b91e:	2f33      	cmp	r7, #51	; 0x33
 800b920:	dd10      	ble.n	800b944 <PDM_Filter_setConfig+0xc8>
 800b922:	2333      	movs	r3, #51	; 0x33
 800b924:	3040      	adds	r0, #64	; 0x40
 800b926:	80ab      	strh	r3, [r5, #4]
 800b928:	e7eb      	b.n	800b902 <PDM_Filter_setConfig+0x86>
 800b92a:	4287      	cmp	r7, r0
 800b92c:	d1f2      	bne.n	800b914 <PDM_Filter_setConfig+0x98>
 800b92e:	886b      	ldrh	r3, [r5, #2]
 800b930:	8663      	strh	r3, [r4, #50]	; 0x32
 800b932:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b934:	2000      	movs	r0, #0
 800b936:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b93a:	6423      	str	r3, [r4, #64]	; 0x40
 800b93c:	b003      	add	sp, #12
 800b93e:	ecbd 8b02 	vpop	{d8}
 800b942:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b944:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b946:	f003 030f 	and.w	r3, r3, #15
 800b94a:	3b01      	subs	r3, #1
 800b94c:	2b06      	cmp	r3, #6
 800b94e:	d831      	bhi.n	800b9b4 <PDM_Filter_setConfig+0x138>
 800b950:	4a35      	ldr	r2, [pc, #212]	; (800ba28 <PDM_Filter_setConfig+0x1ac>)
 800b952:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800b956:	eddf 0a35 	vldr	s1, [pc, #212]	; 800ba2c <PDM_Filter_setConfig+0x1b0>
 800b95a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b95e:	9001      	str	r0, [sp, #4]
 800b960:	edd3 7a07 	vldr	s15, [r3, #28]
 800b964:	ed93 8a00 	vldr	s16, [r3]
 800b968:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800b96c:	f000 f8cc 	bl	800bb08 <powf>
 800b970:	eef0 8a40 	vmov.f32	s17, s0
 800b974:	9801      	ldr	r0, [sp, #4]
 800b976:	ee07 7a90 	vmov	s15, r7
 800b97a:	ee28 8a28 	vmul.f32	s16, s16, s17
 800b97e:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800b982:	9001      	str	r0, [sp, #4]
 800b984:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 800b988:	eddf 7a29 	vldr	s15, [pc, #164]	; 800ba30 <PDM_Filter_setConfig+0x1b4>
 800b98c:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800b990:	f000 f8ba 	bl	800bb08 <powf>
 800b994:	ee28 8a00 	vmul.f32	s16, s16, s0
 800b998:	886b      	ldrh	r3, [r5, #2]
 800b99a:	9801      	ldr	r0, [sp, #4]
 800b99c:	feb8 8a48 	vrinta.f32	s16, s16
 800b9a0:	eebc 8ac8 	vcvt.u32.f32	s16, s16
 800b9a4:	8727      	strh	r7, [r4, #56]	; 0x38
 800b9a6:	8663      	strh	r3, [r4, #50]	; 0x32
 800b9a8:	8626      	strh	r6, [r4, #48]	; 0x30
 800b9aa:	ed84 8a0f 	vstr	s16, [r4, #60]	; 0x3c
 800b9ae:	2800      	cmp	r0, #0
 800b9b0:	d0bf      	beq.n	800b932 <PDM_Filter_setConfig+0xb6>
 800b9b2:	e7a9      	b.n	800b908 <PDM_Filter_setConfig+0x8c>
 800b9b4:	eddf 8a1f 	vldr	s17, [pc, #124]	; 800ba34 <PDM_Filter_setConfig+0x1b8>
 800b9b8:	ed9f 8a1f 	vldr	s16, [pc, #124]	; 800ba38 <PDM_Filter_setConfig+0x1bc>
 800b9bc:	e7db      	b.n	800b976 <PDM_Filter_setConfig+0xfa>
 800b9be:	4b1f      	ldr	r3, [pc, #124]	; (800ba3c <PDM_Filter_setConfig+0x1c0>)
 800b9c0:	64a3      	str	r3, [r4, #72]	; 0x48
 800b9c2:	e7a7      	b.n	800b914 <PDM_Filter_setConfig+0x98>
 800b9c4:	4b1e      	ldr	r3, [pc, #120]	; (800ba40 <PDM_Filter_setConfig+0x1c4>)
 800b9c6:	64a3      	str	r3, [r4, #72]	; 0x48
 800b9c8:	e7a4      	b.n	800b914 <PDM_Filter_setConfig+0x98>
 800b9ca:	4b1e      	ldr	r3, [pc, #120]	; (800ba44 <PDM_Filter_setConfig+0x1c8>)
 800b9cc:	64a3      	str	r3, [r4, #72]	; 0x48
 800b9ce:	e7a1      	b.n	800b914 <PDM_Filter_setConfig+0x98>
 800b9d0:	4b1d      	ldr	r3, [pc, #116]	; (800ba48 <PDM_Filter_setConfig+0x1cc>)
 800b9d2:	64a3      	str	r3, [r4, #72]	; 0x48
 800b9d4:	e79e      	b.n	800b914 <PDM_Filter_setConfig+0x98>
 800b9d6:	4b1d      	ldr	r3, [pc, #116]	; (800ba4c <PDM_Filter_setConfig+0x1d0>)
 800b9d8:	64a3      	str	r3, [r4, #72]	; 0x48
 800b9da:	e79b      	b.n	800b914 <PDM_Filter_setConfig+0x98>
 800b9dc:	4b1c      	ldr	r3, [pc, #112]	; (800ba50 <PDM_Filter_setConfig+0x1d4>)
 800b9de:	64a3      	str	r3, [r4, #72]	; 0x48
 800b9e0:	e798      	b.n	800b914 <PDM_Filter_setConfig+0x98>
 800b9e2:	4b1c      	ldr	r3, [pc, #112]	; (800ba54 <PDM_Filter_setConfig+0x1d8>)
 800b9e4:	64a3      	str	r3, [r4, #72]	; 0x48
 800b9e6:	e795      	b.n	800b914 <PDM_Filter_setConfig+0x98>
 800b9e8:	4b1b      	ldr	r3, [pc, #108]	; (800ba58 <PDM_Filter_setConfig+0x1dc>)
 800b9ea:	64a3      	str	r3, [r4, #72]	; 0x48
 800b9ec:	e792      	b.n	800b914 <PDM_Filter_setConfig+0x98>
 800b9ee:	4b1b      	ldr	r3, [pc, #108]	; (800ba5c <PDM_Filter_setConfig+0x1e0>)
 800b9f0:	64a3      	str	r3, [r4, #72]	; 0x48
 800b9f2:	e78f      	b.n	800b914 <PDM_Filter_setConfig+0x98>
 800b9f4:	4b1a      	ldr	r3, [pc, #104]	; (800ba60 <PDM_Filter_setConfig+0x1e4>)
 800b9f6:	64a3      	str	r3, [r4, #72]	; 0x48
 800b9f8:	e78c      	b.n	800b914 <PDM_Filter_setConfig+0x98>
 800b9fa:	4b1a      	ldr	r3, [pc, #104]	; (800ba64 <PDM_Filter_setConfig+0x1e8>)
 800b9fc:	64a3      	str	r3, [r4, #72]	; 0x48
 800b9fe:	e789      	b.n	800b914 <PDM_Filter_setConfig+0x98>
 800ba00:	4b19      	ldr	r3, [pc, #100]	; (800ba68 <PDM_Filter_setConfig+0x1ec>)
 800ba02:	64a3      	str	r3, [r4, #72]	; 0x48
 800ba04:	e786      	b.n	800b914 <PDM_Filter_setConfig+0x98>
 800ba06:	4b19      	ldr	r3, [pc, #100]	; (800ba6c <PDM_Filter_setConfig+0x1f0>)
 800ba08:	64a3      	str	r3, [r4, #72]	; 0x48
 800ba0a:	e783      	b.n	800b914 <PDM_Filter_setConfig+0x98>
 800ba0c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800ba0e:	42b3      	cmp	r3, r6
 800ba10:	f47f af6e 	bne.w	800b8f0 <PDM_Filter_setConfig+0x74>
 800ba14:	886b      	ldrh	r3, [r5, #2]
 800ba16:	2008      	movs	r0, #8
 800ba18:	8663      	strh	r3, [r4, #50]	; 0x32
 800ba1a:	e775      	b.n	800b908 <PDM_Filter_setConfig+0x8c>
 800ba1c:	b5e8b5cd 	.word	0xb5e8b5cd
 800ba20:	fffffef0 	.word	0xfffffef0
 800ba24:	0800ab95 	.word	0x0800ab95
 800ba28:	0800bef0 	.word	0x0800bef0
 800ba2c:	42000000 	.word	0x42000000
 800ba30:	3d4ccccd 	.word	0x3d4ccccd
 800ba34:	4f800000 	.word	0x4f800000
 800ba38:	00000000 	.word	0x00000000
 800ba3c:	08009fa1 	.word	0x08009fa1
 800ba40:	08009e29 	.word	0x08009e29
 800ba44:	08009d19 	.word	0x08009d19
 800ba48:	0800a7dd 	.word	0x0800a7dd
 800ba4c:	0800a545 	.word	0x0800a545
 800ba50:	0800a30d 	.word	0x0800a30d
 800ba54:	0800a129 	.word	0x0800a129
 800ba58:	0800adb1 	.word	0x0800adb1
 800ba5c:	0800ac75 	.word	0x0800ac75
 800ba60:	0800b3f1 	.word	0x0800b3f1
 800ba64:	0800b1f5 	.word	0x0800b1f5
 800ba68:	0800b049 	.word	0x0800b049
 800ba6c:	0800aedd 	.word	0x0800aedd

0800ba70 <__errno>:
 800ba70:	4b01      	ldr	r3, [pc, #4]	; (800ba78 <__errno+0x8>)
 800ba72:	6818      	ldr	r0, [r3, #0]
 800ba74:	4770      	bx	lr
 800ba76:	bf00      	nop
 800ba78:	24000410 	.word	0x24000410

0800ba7c <__libc_init_array>:
 800ba7c:	b570      	push	{r4, r5, r6, lr}
 800ba7e:	4d0d      	ldr	r5, [pc, #52]	; (800bab4 <__libc_init_array+0x38>)
 800ba80:	4c0d      	ldr	r4, [pc, #52]	; (800bab8 <__libc_init_array+0x3c>)
 800ba82:	1b64      	subs	r4, r4, r5
 800ba84:	10a4      	asrs	r4, r4, #2
 800ba86:	2600      	movs	r6, #0
 800ba88:	42a6      	cmp	r6, r4
 800ba8a:	d109      	bne.n	800baa0 <__libc_init_array+0x24>
 800ba8c:	4d0b      	ldr	r5, [pc, #44]	; (800babc <__libc_init_array+0x40>)
 800ba8e:	4c0c      	ldr	r4, [pc, #48]	; (800bac0 <__libc_init_array+0x44>)
 800ba90:	f000 f9e6 	bl	800be60 <_init>
 800ba94:	1b64      	subs	r4, r4, r5
 800ba96:	10a4      	asrs	r4, r4, #2
 800ba98:	2600      	movs	r6, #0
 800ba9a:	42a6      	cmp	r6, r4
 800ba9c:	d105      	bne.n	800baaa <__libc_init_array+0x2e>
 800ba9e:	bd70      	pop	{r4, r5, r6, pc}
 800baa0:	f855 3b04 	ldr.w	r3, [r5], #4
 800baa4:	4798      	blx	r3
 800baa6:	3601      	adds	r6, #1
 800baa8:	e7ee      	b.n	800ba88 <__libc_init_array+0xc>
 800baaa:	f855 3b04 	ldr.w	r3, [r5], #4
 800baae:	4798      	blx	r3
 800bab0:	3601      	adds	r6, #1
 800bab2:	e7f2      	b.n	800ba9a <__libc_init_array+0x1e>
 800bab4:	0800c1b0 	.word	0x0800c1b0
 800bab8:	0800c1b0 	.word	0x0800c1b0
 800babc:	0800c1b0 	.word	0x0800c1b0
 800bac0:	0800c1b4 	.word	0x0800c1b4

0800bac4 <memset>:
 800bac4:	4402      	add	r2, r0
 800bac6:	4603      	mov	r3, r0
 800bac8:	4293      	cmp	r3, r2
 800baca:	d100      	bne.n	800bace <memset+0xa>
 800bacc:	4770      	bx	lr
 800bace:	f803 1b01 	strb.w	r1, [r3], #1
 800bad2:	e7f9      	b.n	800bac8 <memset+0x4>

0800bad4 <checkint>:
 800bad4:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800bad8:	2b7e      	cmp	r3, #126	; 0x7e
 800bada:	dd10      	ble.n	800bafe <checkint+0x2a>
 800badc:	2b96      	cmp	r3, #150	; 0x96
 800bade:	dc0c      	bgt.n	800bafa <checkint+0x26>
 800bae0:	2201      	movs	r2, #1
 800bae2:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800bae6:	fa02 f303 	lsl.w	r3, r2, r3
 800baea:	1e5a      	subs	r2, r3, #1
 800baec:	4202      	tst	r2, r0
 800baee:	d106      	bne.n	800bafe <checkint+0x2a>
 800baf0:	4203      	tst	r3, r0
 800baf2:	bf0c      	ite	eq
 800baf4:	2002      	moveq	r0, #2
 800baf6:	2001      	movne	r0, #1
 800baf8:	4770      	bx	lr
 800bafa:	2002      	movs	r0, #2
 800bafc:	4770      	bx	lr
 800bafe:	2000      	movs	r0, #0
 800bb00:	4770      	bx	lr
 800bb02:	0000      	movs	r0, r0
 800bb04:	0000      	movs	r0, r0
	...

0800bb08 <powf>:
 800bb08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb0a:	ee10 1a10 	vmov	r1, s0
 800bb0e:	ee10 6a90 	vmov	r6, s1
 800bb12:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 800bb16:	0072      	lsls	r2, r6, #1
 800bb18:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800bb1c:	b085      	sub	sp, #20
 800bb1e:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 800bb22:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 800bb26:	d256      	bcs.n	800bbd6 <powf+0xce>
 800bb28:	4298      	cmp	r0, r3
 800bb2a:	d256      	bcs.n	800bbda <powf+0xd2>
 800bb2c:	2000      	movs	r0, #0
 800bb2e:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 800bb32:	4ea3      	ldr	r6, [pc, #652]	; (800bdc0 <powf+0x2b8>)
 800bb34:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800bb38:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 800bb3c:	f3c2 47c3 	ubfx	r7, r2, #19, #4
 800bb40:	0dd2      	lsrs	r2, r2, #23
 800bb42:	eb06 1707 	add.w	r7, r6, r7, lsl #4
 800bb46:	05d2      	lsls	r2, r2, #23
 800bb48:	1a8b      	subs	r3, r1, r2
 800bb4a:	ed97 5b00 	vldr	d5, [r7]
 800bb4e:	ee07 3a90 	vmov	s15, r3
 800bb52:	15d2      	asrs	r2, r2, #23
 800bb54:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800bb58:	eea5 6b07 	vfma.f64	d6, d5, d7
 800bb5c:	ed97 5b02 	vldr	d5, [r7, #8]
 800bb60:	ee26 2b06 	vmul.f64	d2, d6, d6
 800bb64:	ee22 1b02 	vmul.f64	d1, d2, d2
 800bb68:	ee07 2a90 	vmov	s15, r2
 800bb6c:	ed96 4b40 	vldr	d4, [r6, #256]	; 0x100
 800bb70:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800bb74:	ee37 7b05 	vadd.f64	d7, d7, d5
 800bb78:	ed96 5b42 	vldr	d5, [r6, #264]	; 0x108
 800bb7c:	ed96 3b44 	vldr	d3, [r6, #272]	; 0x110
 800bb80:	eea6 5b04 	vfma.f64	d5, d6, d4
 800bb84:	ed96 4b46 	vldr	d4, [r6, #280]	; 0x118
 800bb88:	eea6 4b03 	vfma.f64	d4, d6, d3
 800bb8c:	ed96 3b48 	vldr	d3, [r6, #288]	; 0x120
 800bb90:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 800bb94:	eea6 7b03 	vfma.f64	d7, d6, d3
 800bb98:	eea2 7b04 	vfma.f64	d7, d2, d4
 800bb9c:	eea5 7b01 	vfma.f64	d7, d5, d1
 800bba0:	ee20 0b07 	vmul.f64	d0, d0, d7
 800bba4:	ee10 1a90 	vmov	r1, s1
 800bba8:	2300      	movs	r3, #0
 800bbaa:	2700      	movs	r7, #0
 800bbac:	f3c1 32cf 	ubfx	r2, r1, #15, #16
 800bbb0:	f248 06be 	movw	r6, #32958	; 0x80be
 800bbb4:	429f      	cmp	r7, r3
 800bbb6:	bf08      	it	eq
 800bbb8:	4296      	cmpeq	r6, r2
 800bbba:	f080 80b1 	bcs.w	800bd20 <powf+0x218>
 800bbbe:	ed9f 7b78 	vldr	d7, [pc, #480]	; 800bda0 <powf+0x298>
 800bbc2:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800bbc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbca:	dd79      	ble.n	800bcc0 <powf+0x1b8>
 800bbcc:	b005      	add	sp, #20
 800bbce:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800bbd2:	f000 b91f 	b.w	800be14 <__math_oflowf>
 800bbd6:	4298      	cmp	r0, r3
 800bbd8:	d32d      	bcc.n	800bc36 <powf+0x12e>
 800bbda:	b952      	cbnz	r2, 800bbf2 <powf+0xea>
 800bbdc:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 800bbe0:	005b      	lsls	r3, r3, #1
 800bbe2:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 800bbe6:	f240 80cd 	bls.w	800bd84 <powf+0x27c>
 800bbea:	ee30 0a20 	vadd.f32	s0, s0, s1
 800bbee:	b005      	add	sp, #20
 800bbf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bbf2:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800bbf6:	d105      	bne.n	800bc04 <powf+0xfc>
 800bbf8:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 800bbfc:	0076      	lsls	r6, r6, #1
 800bbfe:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 800bc02:	e7f0      	b.n	800bbe6 <powf+0xde>
 800bc04:	004b      	lsls	r3, r1, #1
 800bc06:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 800bc0a:	d8ee      	bhi.n	800bbea <powf+0xe2>
 800bc0c:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 800bc10:	d1eb      	bne.n	800bbea <powf+0xe2>
 800bc12:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800bc16:	f000 80b5 	beq.w	800bd84 <powf+0x27c>
 800bc1a:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800bc1e:	ea6f 0606 	mvn.w	r6, r6
 800bc22:	bf34      	ite	cc
 800bc24:	2300      	movcc	r3, #0
 800bc26:	2301      	movcs	r3, #1
 800bc28:	0ff6      	lsrs	r6, r6, #31
 800bc2a:	42b3      	cmp	r3, r6
 800bc2c:	f040 80ad 	bne.w	800bd8a <powf+0x282>
 800bc30:	ee20 0aa0 	vmul.f32	s0, s1, s1
 800bc34:	e7db      	b.n	800bbee <powf+0xe6>
 800bc36:	004f      	lsls	r7, r1, #1
 800bc38:	1e7a      	subs	r2, r7, #1
 800bc3a:	429a      	cmp	r2, r3
 800bc3c:	d31c      	bcc.n	800bc78 <powf+0x170>
 800bc3e:	2900      	cmp	r1, #0
 800bc40:	ee20 0a00 	vmul.f32	s0, s0, s0
 800bc44:	da0f      	bge.n	800bc66 <powf+0x15e>
 800bc46:	ee10 0a90 	vmov	r0, s1
 800bc4a:	f7ff ff43 	bl	800bad4 <checkint>
 800bc4e:	2801      	cmp	r0, #1
 800bc50:	d109      	bne.n	800bc66 <powf+0x15e>
 800bc52:	eeb1 0a40 	vneg.f32	s0, s0
 800bc56:	b947      	cbnz	r7, 800bc6a <powf+0x162>
 800bc58:	2e00      	cmp	r6, #0
 800bc5a:	dac8      	bge.n	800bbee <powf+0xe6>
 800bc5c:	b005      	add	sp, #20
 800bc5e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800bc62:	f000 b8dd 	b.w	800be20 <__math_divzerof>
 800bc66:	2000      	movs	r0, #0
 800bc68:	e7f5      	b.n	800bc56 <powf+0x14e>
 800bc6a:	2e00      	cmp	r6, #0
 800bc6c:	dabf      	bge.n	800bbee <powf+0xe6>
 800bc6e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800bc72:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800bc76:	e7ba      	b.n	800bbee <powf+0xe6>
 800bc78:	2900      	cmp	r1, #0
 800bc7a:	da1f      	bge.n	800bcbc <powf+0x1b4>
 800bc7c:	ee10 0a90 	vmov	r0, s1
 800bc80:	f7ff ff28 	bl	800bad4 <checkint>
 800bc84:	b920      	cbnz	r0, 800bc90 <powf+0x188>
 800bc86:	b005      	add	sp, #20
 800bc88:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800bc8c:	f000 b8d8 	b.w	800be40 <__math_invalidf>
 800bc90:	2801      	cmp	r0, #1
 800bc92:	bf14      	ite	ne
 800bc94:	2000      	movne	r0, #0
 800bc96:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800bc9a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800bc9e:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800bca2:	f4bf af44 	bcs.w	800bb2e <powf+0x26>
 800bca6:	eddf 7a47 	vldr	s15, [pc, #284]	; 800bdc4 <powf+0x2bc>
 800bcaa:	ee20 0a27 	vmul.f32	s0, s0, s15
 800bcae:	ee10 3a10 	vmov	r3, s0
 800bcb2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bcb6:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 800bcba:	e738      	b.n	800bb2e <powf+0x26>
 800bcbc:	2000      	movs	r0, #0
 800bcbe:	e7ee      	b.n	800bc9e <powf+0x196>
 800bcc0:	ed9f 7b39 	vldr	d7, [pc, #228]	; 800bda8 <powf+0x2a0>
 800bcc4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800bcc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bccc:	dd10      	ble.n	800bcf0 <powf+0x1e8>
 800bcce:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 800bcd2:	2800      	cmp	r0, #0
 800bcd4:	d15c      	bne.n	800bd90 <powf+0x288>
 800bcd6:	9302      	str	r3, [sp, #8]
 800bcd8:	eddd 7a02 	vldr	s15, [sp, #8]
 800bcdc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bce0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bce4:	eef4 7a47 	vcmp.f32	s15, s14
 800bce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcec:	f47f af6e 	bne.w	800bbcc <powf+0xc4>
 800bcf0:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800bdb0 <powf+0x2a8>
 800bcf4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800bcf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcfc:	d804      	bhi.n	800bd08 <powf+0x200>
 800bcfe:	b005      	add	sp, #20
 800bd00:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800bd04:	f000 b87a 	b.w	800bdfc <__math_uflowf>
 800bd08:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 800bdb8 <powf+0x2b0>
 800bd0c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800bd10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd14:	d504      	bpl.n	800bd20 <powf+0x218>
 800bd16:	b005      	add	sp, #20
 800bd18:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800bd1c:	f000 b874 	b.w	800be08 <__math_may_uflowf>
 800bd20:	4b29      	ldr	r3, [pc, #164]	; (800bdc8 <powf+0x2c0>)
 800bd22:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 800bd26:	ee30 6b07 	vadd.f64	d6, d0, d7
 800bd2a:	ed8d 6b00 	vstr	d6, [sp]
 800bd2e:	ee36 7b47 	vsub.f64	d7, d6, d7
 800bd32:	ee30 7b47 	vsub.f64	d7, d0, d7
 800bd36:	e9dd 6700 	ldrd	r6, r7, [sp]
 800bd3a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800bd3e:	f006 011f 	and.w	r1, r6, #31
 800bd42:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800bd46:	e9d1 ce00 	ldrd	ip, lr, [r1]
 800bd4a:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 800bd4e:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 800bd52:	ed93 4b46 	vldr	d4, [r3, #280]	; 0x118
 800bd56:	eea7 6b05 	vfma.f64	d6, d7, d5
 800bd5a:	ee27 5b07 	vmul.f64	d5, d7, d7
 800bd5e:	1836      	adds	r6, r6, r0
 800bd60:	2300      	movs	r3, #0
 800bd62:	eb13 040c 	adds.w	r4, r3, ip
 800bd66:	ea4f 31c6 	mov.w	r1, r6, lsl #15
 800bd6a:	eb41 050e 	adc.w	r5, r1, lr
 800bd6e:	eea7 0b04 	vfma.f64	d0, d7, d4
 800bd72:	ec45 4b17 	vmov	d7, r4, r5
 800bd76:	eea6 0b05 	vfma.f64	d0, d6, d5
 800bd7a:	ee20 0b07 	vmul.f64	d0, d0, d7
 800bd7e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800bd82:	e734      	b.n	800bbee <powf+0xe6>
 800bd84:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800bd88:	e731      	b.n	800bbee <powf+0xe6>
 800bd8a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800bdcc <powf+0x2c4>
 800bd8e:	e72e      	b.n	800bbee <powf+0xe6>
 800bd90:	9303      	str	r3, [sp, #12]
 800bd92:	eddd 7a03 	vldr	s15, [sp, #12]
 800bd96:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800bd9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bd9e:	e7a1      	b.n	800bce4 <powf+0x1dc>
 800bda0:	ffd1d571 	.word	0xffd1d571
 800bda4:	405fffff 	.word	0x405fffff
 800bda8:	ffa3aae2 	.word	0xffa3aae2
 800bdac:	405fffff 	.word	0x405fffff
 800bdb0:	00000000 	.word	0x00000000
 800bdb4:	c062c000 	.word	0xc062c000
 800bdb8:	00000000 	.word	0x00000000
 800bdbc:	c062a000 	.word	0xc062a000
 800bdc0:	0800bf40 	.word	0x0800bf40
 800bdc4:	4b000000 	.word	0x4b000000
 800bdc8:	0800c068 	.word	0x0800c068
 800bdcc:	00000000 	.word	0x00000000

0800bdd0 <with_errnof>:
 800bdd0:	b513      	push	{r0, r1, r4, lr}
 800bdd2:	4604      	mov	r4, r0
 800bdd4:	ed8d 0a01 	vstr	s0, [sp, #4]
 800bdd8:	f7ff fe4a 	bl	800ba70 <__errno>
 800bddc:	ed9d 0a01 	vldr	s0, [sp, #4]
 800bde0:	6004      	str	r4, [r0, #0]
 800bde2:	b002      	add	sp, #8
 800bde4:	bd10      	pop	{r4, pc}

0800bde6 <xflowf>:
 800bde6:	b130      	cbz	r0, 800bdf6 <xflowf+0x10>
 800bde8:	eef1 7a40 	vneg.f32	s15, s0
 800bdec:	ee27 0a80 	vmul.f32	s0, s15, s0
 800bdf0:	2022      	movs	r0, #34	; 0x22
 800bdf2:	f7ff bfed 	b.w	800bdd0 <with_errnof>
 800bdf6:	eef0 7a40 	vmov.f32	s15, s0
 800bdfa:	e7f7      	b.n	800bdec <xflowf+0x6>

0800bdfc <__math_uflowf>:
 800bdfc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800be04 <__math_uflowf+0x8>
 800be00:	f7ff bff1 	b.w	800bde6 <xflowf>
 800be04:	10000000 	.word	0x10000000

0800be08 <__math_may_uflowf>:
 800be08:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800be10 <__math_may_uflowf+0x8>
 800be0c:	f7ff bfeb 	b.w	800bde6 <xflowf>
 800be10:	1a200000 	.word	0x1a200000

0800be14 <__math_oflowf>:
 800be14:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800be1c <__math_oflowf+0x8>
 800be18:	f7ff bfe5 	b.w	800bde6 <xflowf>
 800be1c:	70000000 	.word	0x70000000

0800be20 <__math_divzerof>:
 800be20:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800be24:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800be28:	2800      	cmp	r0, #0
 800be2a:	fe40 7a27 	vseleq.f32	s15, s0, s15
 800be2e:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800be3c <__math_divzerof+0x1c>
 800be32:	2022      	movs	r0, #34	; 0x22
 800be34:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800be38:	f7ff bfca 	b.w	800bdd0 <with_errnof>
 800be3c:	00000000 	.word	0x00000000

0800be40 <__math_invalidf>:
 800be40:	eef0 7a40 	vmov.f32	s15, s0
 800be44:	ee30 7a40 	vsub.f32	s14, s0, s0
 800be48:	eef4 7a67 	vcmp.f32	s15, s15
 800be4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be50:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800be54:	d602      	bvs.n	800be5c <__math_invalidf+0x1c>
 800be56:	2021      	movs	r0, #33	; 0x21
 800be58:	f7ff bfba 	b.w	800bdd0 <with_errnof>
 800be5c:	4770      	bx	lr
	...

0800be60 <_init>:
 800be60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be62:	bf00      	nop
 800be64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be66:	bc08      	pop	{r3}
 800be68:	469e      	mov	lr, r3
 800be6a:	4770      	bx	lr

0800be6c <_fini>:
 800be6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be6e:	bf00      	nop
 800be70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be72:	bc08      	pop	{r3}
 800be74:	469e      	mov	lr, r3
 800be76:	4770      	bx	lr
