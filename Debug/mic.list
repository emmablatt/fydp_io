
mic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009fa0  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e8  0800a270  0800a270  0001a270  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a558  0800a558  0001a558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a560  0800a560  0001a560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a564  0800a564  0001a564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000474  24000000  0800a568  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000444  24000474  0800a9dc  00020474  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240008b8  0800a9dc  000208b8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020474  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002911e  00000000  00000000  000204a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000037d9  00000000  00000000  000495c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001018  00000000  00000000  0004cda0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000f28  00000000  00000000  0004ddb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00004000  00000000  00000000  0004ece0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00018d4b  00000000  00000000  00052ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001573ff  00000000  00000000  0006ba2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      000000d1  00000000  00000000  001c2e2a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004400  00000000  00000000  001c2efc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000474 	.word	0x24000474
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800a258 	.word	0x0800a258

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000478 	.word	0x24000478
 800030c:	0800a258 	.word	0x0800a258

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000320:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000324:	f000 b96e 	b.w	8000604 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468c      	mov	ip, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	f040 8083 	bne.w	8000456 <__udivmoddi4+0x116>
 8000350:	428a      	cmp	r2, r1
 8000352:	4617      	mov	r7, r2
 8000354:	d947      	bls.n	80003e6 <__udivmoddi4+0xa6>
 8000356:	fab2 f282 	clz	r2, r2
 800035a:	b142      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035c:	f1c2 0020 	rsb	r0, r2, #32
 8000360:	fa24 f000 	lsr.w	r0, r4, r0
 8000364:	4091      	lsls	r1, r2
 8000366:	4097      	lsls	r7, r2
 8000368:	ea40 0c01 	orr.w	ip, r0, r1
 800036c:	4094      	lsls	r4, r2
 800036e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fbbc f6f8 	udiv	r6, ip, r8
 8000378:	fa1f fe87 	uxth.w	lr, r7
 800037c:	fb08 c116 	mls	r1, r8, r6, ip
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f10e 	mul.w	r1, r6, lr
 8000388:	4299      	cmp	r1, r3
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x60>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000392:	f080 8119 	bcs.w	80005c8 <__udivmoddi4+0x288>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 8116 	bls.w	80005c8 <__udivmoddi4+0x288>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003a8:	fb08 3310 	mls	r3, r8, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003b4:	45a6      	cmp	lr, r4
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x8c>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003be:	f080 8105 	bcs.w	80005cc <__udivmoddi4+0x28c>
 80003c2:	45a6      	cmp	lr, r4
 80003c4:	f240 8102 	bls.w	80005cc <__udivmoddi4+0x28c>
 80003c8:	3802      	subs	r0, #2
 80003ca:	443c      	add	r4, r7
 80003cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d0:	eba4 040e 	sub.w	r4, r4, lr
 80003d4:	2600      	movs	r6, #0
 80003d6:	b11d      	cbz	r5, 80003e0 <__udivmoddi4+0xa0>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c5 4300 	strd	r4, r3, [r5]
 80003e0:	4631      	mov	r1, r6
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	b902      	cbnz	r2, 80003ea <__udivmoddi4+0xaa>
 80003e8:	deff      	udf	#255	; 0xff
 80003ea:	fab2 f282 	clz	r2, r2
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	d150      	bne.n	8000494 <__udivmoddi4+0x154>
 80003f2:	1bcb      	subs	r3, r1, r7
 80003f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f8:	fa1f f887 	uxth.w	r8, r7
 80003fc:	2601      	movs	r6, #1
 80003fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000402:	0c21      	lsrs	r1, r4, #16
 8000404:	fb0e 331c 	mls	r3, lr, ip, r3
 8000408:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800040c:	fb08 f30c 	mul.w	r3, r8, ip
 8000410:	428b      	cmp	r3, r1
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0xe4>
 8000414:	1879      	adds	r1, r7, r1
 8000416:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0xe2>
 800041c:	428b      	cmp	r3, r1
 800041e:	f200 80e9 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 8000422:	4684      	mov	ip, r0
 8000424:	1ac9      	subs	r1, r1, r3
 8000426:	b2a3      	uxth	r3, r4
 8000428:	fbb1 f0fe 	udiv	r0, r1, lr
 800042c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000430:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000434:	fb08 f800 	mul.w	r8, r8, r0
 8000438:	45a0      	cmp	r8, r4
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x10c>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x10a>
 8000444:	45a0      	cmp	r8, r4
 8000446:	f200 80d9 	bhi.w	80005fc <__udivmoddi4+0x2bc>
 800044a:	4618      	mov	r0, r3
 800044c:	eba4 0408 	sub.w	r4, r4, r8
 8000450:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000454:	e7bf      	b.n	80003d6 <__udivmoddi4+0x96>
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0x12e>
 800045a:	2d00      	cmp	r5, #0
 800045c:	f000 80b1 	beq.w	80005c2 <__udivmoddi4+0x282>
 8000460:	2600      	movs	r6, #0
 8000462:	e9c5 0100 	strd	r0, r1, [r5]
 8000466:	4630      	mov	r0, r6
 8000468:	4631      	mov	r1, r6
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f683 	clz	r6, r3
 8000472:	2e00      	cmp	r6, #0
 8000474:	d14a      	bne.n	800050c <__udivmoddi4+0x1cc>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0x140>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80b8 	bhi.w	80005f0 <__udivmoddi4+0x2b0>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0103 	sbc.w	r1, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	468c      	mov	ip, r1
 800048a:	2d00      	cmp	r5, #0
 800048c:	d0a8      	beq.n	80003e0 <__udivmoddi4+0xa0>
 800048e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000492:	e7a5      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000494:	f1c2 0320 	rsb	r3, r2, #32
 8000498:	fa20 f603 	lsr.w	r6, r0, r3
 800049c:	4097      	lsls	r7, r2
 800049e:	fa01 f002 	lsl.w	r0, r1, r2
 80004a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a6:	40d9      	lsrs	r1, r3
 80004a8:	4330      	orrs	r0, r6
 80004aa:	0c03      	lsrs	r3, r0, #16
 80004ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80004b0:	fa1f f887 	uxth.w	r8, r7
 80004b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb06 f108 	mul.w	r1, r6, r8
 80004c0:	4299      	cmp	r1, r3
 80004c2:	fa04 f402 	lsl.w	r4, r4, r2
 80004c6:	d909      	bls.n	80004dc <__udivmoddi4+0x19c>
 80004c8:	18fb      	adds	r3, r7, r3
 80004ca:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80004ce:	f080 808d 	bcs.w	80005ec <__udivmoddi4+0x2ac>
 80004d2:	4299      	cmp	r1, r3
 80004d4:	f240 808a 	bls.w	80005ec <__udivmoddi4+0x2ac>
 80004d8:	3e02      	subs	r6, #2
 80004da:	443b      	add	r3, r7
 80004dc:	1a5b      	subs	r3, r3, r1
 80004de:	b281      	uxth	r1, r0
 80004e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ec:	fb00 f308 	mul.w	r3, r0, r8
 80004f0:	428b      	cmp	r3, r1
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x1c4>
 80004f4:	1879      	adds	r1, r7, r1
 80004f6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004fa:	d273      	bcs.n	80005e4 <__udivmoddi4+0x2a4>
 80004fc:	428b      	cmp	r3, r1
 80004fe:	d971      	bls.n	80005e4 <__udivmoddi4+0x2a4>
 8000500:	3802      	subs	r0, #2
 8000502:	4439      	add	r1, r7
 8000504:	1acb      	subs	r3, r1, r3
 8000506:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800050a:	e778      	b.n	80003fe <__udivmoddi4+0xbe>
 800050c:	f1c6 0c20 	rsb	ip, r6, #32
 8000510:	fa03 f406 	lsl.w	r4, r3, r6
 8000514:	fa22 f30c 	lsr.w	r3, r2, ip
 8000518:	431c      	orrs	r4, r3
 800051a:	fa20 f70c 	lsr.w	r7, r0, ip
 800051e:	fa01 f306 	lsl.w	r3, r1, r6
 8000522:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000526:	fa21 f10c 	lsr.w	r1, r1, ip
 800052a:	431f      	orrs	r7, r3
 800052c:	0c3b      	lsrs	r3, r7, #16
 800052e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000532:	fa1f f884 	uxth.w	r8, r4
 8000536:	fb0e 1119 	mls	r1, lr, r9, r1
 800053a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800053e:	fb09 fa08 	mul.w	sl, r9, r8
 8000542:	458a      	cmp	sl, r1
 8000544:	fa02 f206 	lsl.w	r2, r2, r6
 8000548:	fa00 f306 	lsl.w	r3, r0, r6
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x220>
 800054e:	1861      	adds	r1, r4, r1
 8000550:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000554:	d248      	bcs.n	80005e8 <__udivmoddi4+0x2a8>
 8000556:	458a      	cmp	sl, r1
 8000558:	d946      	bls.n	80005e8 <__udivmoddi4+0x2a8>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4421      	add	r1, r4
 8000560:	eba1 010a 	sub.w	r1, r1, sl
 8000564:	b2bf      	uxth	r7, r7
 8000566:	fbb1 f0fe 	udiv	r0, r1, lr
 800056a:	fb0e 1110 	mls	r1, lr, r0, r1
 800056e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000572:	fb00 f808 	mul.w	r8, r0, r8
 8000576:	45b8      	cmp	r8, r7
 8000578:	d907      	bls.n	800058a <__udivmoddi4+0x24a>
 800057a:	19e7      	adds	r7, r4, r7
 800057c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000580:	d22e      	bcs.n	80005e0 <__udivmoddi4+0x2a0>
 8000582:	45b8      	cmp	r8, r7
 8000584:	d92c      	bls.n	80005e0 <__udivmoddi4+0x2a0>
 8000586:	3802      	subs	r0, #2
 8000588:	4427      	add	r7, r4
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	eba7 0708 	sub.w	r7, r7, r8
 8000592:	fba0 8902 	umull	r8, r9, r0, r2
 8000596:	454f      	cmp	r7, r9
 8000598:	46c6      	mov	lr, r8
 800059a:	4649      	mov	r1, r9
 800059c:	d31a      	bcc.n	80005d4 <__udivmoddi4+0x294>
 800059e:	d017      	beq.n	80005d0 <__udivmoddi4+0x290>
 80005a0:	b15d      	cbz	r5, 80005ba <__udivmoddi4+0x27a>
 80005a2:	ebb3 020e 	subs.w	r2, r3, lr
 80005a6:	eb67 0701 	sbc.w	r7, r7, r1
 80005aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005ae:	40f2      	lsrs	r2, r6
 80005b0:	ea4c 0202 	orr.w	r2, ip, r2
 80005b4:	40f7      	lsrs	r7, r6
 80005b6:	e9c5 2700 	strd	r2, r7, [r5]
 80005ba:	2600      	movs	r6, #0
 80005bc:	4631      	mov	r1, r6
 80005be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c2:	462e      	mov	r6, r5
 80005c4:	4628      	mov	r0, r5
 80005c6:	e70b      	b.n	80003e0 <__udivmoddi4+0xa0>
 80005c8:	4606      	mov	r6, r0
 80005ca:	e6e9      	b.n	80003a0 <__udivmoddi4+0x60>
 80005cc:	4618      	mov	r0, r3
 80005ce:	e6fd      	b.n	80003cc <__udivmoddi4+0x8c>
 80005d0:	4543      	cmp	r3, r8
 80005d2:	d2e5      	bcs.n	80005a0 <__udivmoddi4+0x260>
 80005d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005d8:	eb69 0104 	sbc.w	r1, r9, r4
 80005dc:	3801      	subs	r0, #1
 80005de:	e7df      	b.n	80005a0 <__udivmoddi4+0x260>
 80005e0:	4608      	mov	r0, r1
 80005e2:	e7d2      	b.n	800058a <__udivmoddi4+0x24a>
 80005e4:	4660      	mov	r0, ip
 80005e6:	e78d      	b.n	8000504 <__udivmoddi4+0x1c4>
 80005e8:	4681      	mov	r9, r0
 80005ea:	e7b9      	b.n	8000560 <__udivmoddi4+0x220>
 80005ec:	4666      	mov	r6, ip
 80005ee:	e775      	b.n	80004dc <__udivmoddi4+0x19c>
 80005f0:	4630      	mov	r0, r6
 80005f2:	e74a      	b.n	800048a <__udivmoddi4+0x14a>
 80005f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f8:	4439      	add	r1, r7
 80005fa:	e713      	b.n	8000424 <__udivmoddi4+0xe4>
 80005fc:	3802      	subs	r0, #2
 80005fe:	443c      	add	r4, r7
 8000600:	e724      	b.n	800044c <__udivmoddi4+0x10c>
 8000602:	bf00      	nop

08000604 <__aeabi_idiv0>:
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <BSP_AUDIO_IN_PDMToPCM_Init>:
  * @param  ChnlNbrIn  Number of input audio channels in the PDM buffer
  * @param  ChnlNbrOut Number of desired output audio channels in the  resulting PCM buffer
  * @retval BSP status
  */
int32_t BSP_AUDIO_IN_PDMToPCM_Init(uint32_t Instance, uint32_t AudioFreq, uint32_t ChnlNbrIn, uint32_t ChnlNbrOut)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b086      	sub	sp, #24
 800060c:	af00      	add	r7, sp, #0
 800060e:	60f8      	str	r0, [r7, #12]
 8000610:	60b9      	str	r1, [r7, #8]
 8000612:	607a      	str	r2, [r7, #4]
 8000614:	603b      	str	r3, [r7, #0]
  uint32_t index = 0;
 8000616:	2300      	movs	r3, #0
 8000618:	617b      	str	r3, [r7, #20]

  if(Instance != 1U)
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	2b01      	cmp	r3, #1
 800061e:	d002      	beq.n	8000626 <BSP_AUDIO_IN_PDMToPCM_Init+0x1e>
  {
    return BSP_ERROR_WRONG_PARAM;
 8000620:	f06f 0301 	mvn.w	r3, #1
 8000624:	e085      	b.n	8000732 <BSP_AUDIO_IN_PDMToPCM_Init+0x12a>
  }
  else
  {
    /* Enable CRC peripheral to unlock the PDM library */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000626:	4b45      	ldr	r3, [pc, #276]	; (800073c <BSP_AUDIO_IN_PDMToPCM_Init+0x134>)
 8000628:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800062c:	4a43      	ldr	r2, [pc, #268]	; (800073c <BSP_AUDIO_IN_PDMToPCM_Init+0x134>)
 800062e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000632:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000636:	4b41      	ldr	r3, [pc, #260]	; (800073c <BSP_AUDIO_IN_PDMToPCM_Init+0x134>)
 8000638:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800063c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000640:	613b      	str	r3, [r7, #16]
 8000642:	693b      	ldr	r3, [r7, #16]

    for(index = 0; index < ChnlNbrIn; index++)
 8000644:	2300      	movs	r3, #0
 8000646:	617b      	str	r3, [r7, #20]
 8000648:	e06e      	b.n	8000728 <BSP_AUDIO_IN_PDMToPCM_Init+0x120>
    {
      /* Init PDM filters */
      PDM_FilterHandler[index].bit_order  = PDM_FILTER_BIT_ORDER_MSB;
 800064a:	4a3d      	ldr	r2, [pc, #244]	; (8000740 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 800064c:	697b      	ldr	r3, [r7, #20]
 800064e:	214c      	movs	r1, #76	; 0x4c
 8000650:	fb01 f303 	mul.w	r3, r1, r3
 8000654:	4413      	add	r3, r2
 8000656:	2201      	movs	r2, #1
 8000658:	801a      	strh	r2, [r3, #0]
      PDM_FilterHandler[index].endianness = PDM_FILTER_ENDIANNESS_LE;
 800065a:	4a39      	ldr	r2, [pc, #228]	; (8000740 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 800065c:	697b      	ldr	r3, [r7, #20]
 800065e:	214c      	movs	r1, #76	; 0x4c
 8000660:	fb01 f303 	mul.w	r3, r1, r3
 8000664:	4413      	add	r3, r2
 8000666:	3302      	adds	r3, #2
 8000668:	2200      	movs	r2, #0
 800066a:	801a      	strh	r2, [r3, #0]
      PDM_FilterHandler[index].high_pass_tap = 2122358088;
 800066c:	4a34      	ldr	r2, [pc, #208]	; (8000740 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 800066e:	697b      	ldr	r3, [r7, #20]
 8000670:	214c      	movs	r1, #76	; 0x4c
 8000672:	fb01 f303 	mul.w	r3, r1, r3
 8000676:	4413      	add	r3, r2
 8000678:	3304      	adds	r3, #4
 800067a:	4a32      	ldr	r2, [pc, #200]	; (8000744 <BSP_AUDIO_IN_PDMToPCM_Init+0x13c>)
 800067c:	601a      	str	r2, [r3, #0]
      PDM_FilterHandler[index].out_ptr_channels = ChnlNbrOut;
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	b298      	uxth	r0, r3
 8000682:	4a2f      	ldr	r2, [pc, #188]	; (8000740 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 8000684:	697b      	ldr	r3, [r7, #20]
 8000686:	214c      	movs	r1, #76	; 0x4c
 8000688:	fb01 f303 	mul.w	r3, r1, r3
 800068c:	4413      	add	r3, r2
 800068e:	330a      	adds	r3, #10
 8000690:	4602      	mov	r2, r0
 8000692:	801a      	strh	r2, [r3, #0]
      PDM_FilterHandler[index].in_ptr_channels  = ChnlNbrIn;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	b298      	uxth	r0, r3
 8000698:	4a29      	ldr	r2, [pc, #164]	; (8000740 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 800069a:	697b      	ldr	r3, [r7, #20]
 800069c:	214c      	movs	r1, #76	; 0x4c
 800069e:	fb01 f303 	mul.w	r3, r1, r3
 80006a2:	4413      	add	r3, r2
 80006a4:	3308      	adds	r3, #8
 80006a6:	4602      	mov	r2, r0
 80006a8:	801a      	strh	r2, [r3, #0]
      PDM_Filter_Init((PDM_Filter_Handler_t *)(&PDM_FilterHandler[index]));
 80006aa:	697b      	ldr	r3, [r7, #20]
 80006ac:	224c      	movs	r2, #76	; 0x4c
 80006ae:	fb02 f303 	mul.w	r3, r2, r3
 80006b2:	4a23      	ldr	r2, [pc, #140]	; (8000740 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 80006b4:	4413      	add	r3, r2
 80006b6:	4618      	mov	r0, r3
 80006b8:	f009 fa0e 	bl	8009ad8 <PDM_Filter_Init>

      /* PDM lib config phase */
      PDM_FilterConfig[index].output_samples_number = AudioFreq/1000;
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	4a22      	ldr	r2, [pc, #136]	; (8000748 <BSP_AUDIO_IN_PDMToPCM_Init+0x140>)
 80006c0:	fba2 2303 	umull	r2, r3, r2, r3
 80006c4:	099b      	lsrs	r3, r3, #6
 80006c6:	b298      	uxth	r0, r3
 80006c8:	4920      	ldr	r1, [pc, #128]	; (800074c <BSP_AUDIO_IN_PDMToPCM_Init+0x144>)
 80006ca:	697a      	ldr	r2, [r7, #20]
 80006cc:	4613      	mov	r3, r2
 80006ce:	005b      	lsls	r3, r3, #1
 80006d0:	4413      	add	r3, r2
 80006d2:	005b      	lsls	r3, r3, #1
 80006d4:	440b      	add	r3, r1
 80006d6:	3302      	adds	r3, #2
 80006d8:	4602      	mov	r2, r0
 80006da:	801a      	strh	r2, [r3, #0]
      PDM_FilterConfig[index].mic_gain = 24;
 80006dc:	491b      	ldr	r1, [pc, #108]	; (800074c <BSP_AUDIO_IN_PDMToPCM_Init+0x144>)
 80006de:	697a      	ldr	r2, [r7, #20]
 80006e0:	4613      	mov	r3, r2
 80006e2:	005b      	lsls	r3, r3, #1
 80006e4:	4413      	add	r3, r2
 80006e6:	005b      	lsls	r3, r3, #1
 80006e8:	440b      	add	r3, r1
 80006ea:	3304      	adds	r3, #4
 80006ec:	2218      	movs	r2, #24
 80006ee:	801a      	strh	r2, [r3, #0]
      PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 80006f0:	4916      	ldr	r1, [pc, #88]	; (800074c <BSP_AUDIO_IN_PDMToPCM_Init+0x144>)
 80006f2:	697a      	ldr	r2, [r7, #20]
 80006f4:	4613      	mov	r3, r2
 80006f6:	005b      	lsls	r3, r3, #1
 80006f8:	4413      	add	r3, r2
 80006fa:	005b      	lsls	r3, r3, #1
 80006fc:	440b      	add	r3, r1
 80006fe:	2202      	movs	r2, #2
 8000700:	801a      	strh	r2, [r3, #0]
      PDM_Filter_setConfig((PDM_Filter_Handler_t *)&PDM_FilterHandler[index], &PDM_FilterConfig[index]);
 8000702:	697b      	ldr	r3, [r7, #20]
 8000704:	224c      	movs	r2, #76	; 0x4c
 8000706:	fb02 f303 	mul.w	r3, r2, r3
 800070a:	4a0d      	ldr	r2, [pc, #52]	; (8000740 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 800070c:	1898      	adds	r0, r3, r2
 800070e:	697a      	ldr	r2, [r7, #20]
 8000710:	4613      	mov	r3, r2
 8000712:	005b      	lsls	r3, r3, #1
 8000714:	4413      	add	r3, r2
 8000716:	005b      	lsls	r3, r3, #1
 8000718:	4a0c      	ldr	r2, [pc, #48]	; (800074c <BSP_AUDIO_IN_PDMToPCM_Init+0x144>)
 800071a:	4413      	add	r3, r2
 800071c:	4619      	mov	r1, r3
 800071e:	f009 faab 	bl	8009c78 <PDM_Filter_setConfig>
    for(index = 0; index < ChnlNbrIn; index++)
 8000722:	697b      	ldr	r3, [r7, #20]
 8000724:	3301      	adds	r3, #1
 8000726:	617b      	str	r3, [r7, #20]
 8000728:	697a      	ldr	r2, [r7, #20]
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	429a      	cmp	r2, r3
 800072e:	d38c      	bcc.n	800064a <BSP_AUDIO_IN_PDMToPCM_Init+0x42>
    }
  }

  return BSP_ERROR_NONE;
 8000730:	2300      	movs	r3, #0
}
 8000732:	4618      	mov	r0, r3
 8000734:	3718      	adds	r7, #24
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	58024400 	.word	0x58024400
 8000740:	24000494 	.word	0x24000494
 8000744:	7e809d48 	.word	0x7e809d48
 8000748:	10624dd3 	.word	0x10624dd3
 800074c:	2400052c 	.word	0x2400052c

08000750 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000756:	2003      	movs	r0, #3
 8000758:	f000 f95c 	bl	8000a14 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800075c:	f002 ffc0 	bl	80036e0 <HAL_RCC_GetSysClockFreq>
 8000760:	4602      	mov	r2, r0
 8000762:	4b15      	ldr	r3, [pc, #84]	; (80007b8 <HAL_Init+0x68>)
 8000764:	699b      	ldr	r3, [r3, #24]
 8000766:	0a1b      	lsrs	r3, r3, #8
 8000768:	f003 030f 	and.w	r3, r3, #15
 800076c:	4913      	ldr	r1, [pc, #76]	; (80007bc <HAL_Init+0x6c>)
 800076e:	5ccb      	ldrb	r3, [r1, r3]
 8000770:	f003 031f 	and.w	r3, r3, #31
 8000774:	fa22 f303 	lsr.w	r3, r2, r3
 8000778:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800077a:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <HAL_Init+0x68>)
 800077c:	699b      	ldr	r3, [r3, #24]
 800077e:	f003 030f 	and.w	r3, r3, #15
 8000782:	4a0e      	ldr	r2, [pc, #56]	; (80007bc <HAL_Init+0x6c>)
 8000784:	5cd3      	ldrb	r3, [r2, r3]
 8000786:	f003 031f 	and.w	r3, r3, #31
 800078a:	687a      	ldr	r2, [r7, #4]
 800078c:	fa22 f303 	lsr.w	r3, r2, r3
 8000790:	4a0b      	ldr	r2, [pc, #44]	; (80007c0 <HAL_Init+0x70>)
 8000792:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000794:	4a0b      	ldr	r2, [pc, #44]	; (80007c4 <HAL_Init+0x74>)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800079a:	2000      	movs	r0, #0
 800079c:	f000 f814 	bl	80007c8 <HAL_InitTick>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80007a6:	2301      	movs	r3, #1
 80007a8:	e002      	b.n	80007b0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80007aa:	f007 f9a3 	bl	8007af4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007ae:	2300      	movs	r3, #0
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	58024400 	.word	0x58024400
 80007bc:	0800a2d8 	.word	0x0800a2d8
 80007c0:	2400040c 	.word	0x2400040c
 80007c4:	24000408 	.word	0x24000408

080007c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80007d0:	4b15      	ldr	r3, [pc, #84]	; (8000828 <HAL_InitTick+0x60>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d101      	bne.n	80007dc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80007d8:	2301      	movs	r3, #1
 80007da:	e021      	b.n	8000820 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80007dc:	4b13      	ldr	r3, [pc, #76]	; (800082c <HAL_InitTick+0x64>)
 80007de:	681a      	ldr	r2, [r3, #0]
 80007e0:	4b11      	ldr	r3, [pc, #68]	; (8000828 <HAL_InitTick+0x60>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	4619      	mov	r1, r3
 80007e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80007ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80007f2:	4618      	mov	r0, r3
 80007f4:	f000 f941 	bl	8000a7a <HAL_SYSTICK_Config>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80007fe:	2301      	movs	r3, #1
 8000800:	e00e      	b.n	8000820 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	2b0f      	cmp	r3, #15
 8000806:	d80a      	bhi.n	800081e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000808:	2200      	movs	r2, #0
 800080a:	6879      	ldr	r1, [r7, #4]
 800080c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000810:	f000 f90b 	bl	8000a2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000814:	4a06      	ldr	r2, [pc, #24]	; (8000830 <HAL_InitTick+0x68>)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800081a:	2300      	movs	r3, #0
 800081c:	e000      	b.n	8000820 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800081e:	2301      	movs	r3, #1
}
 8000820:	4618      	mov	r0, r3
 8000822:	3708      	adds	r7, #8
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	24000404 	.word	0x24000404
 800082c:	24000408 	.word	0x24000408
 8000830:	24000400 	.word	0x24000400

08000834 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000838:	4b06      	ldr	r3, [pc, #24]	; (8000854 <HAL_IncTick+0x20>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	461a      	mov	r2, r3
 800083e:	4b06      	ldr	r3, [pc, #24]	; (8000858 <HAL_IncTick+0x24>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	4413      	add	r3, r2
 8000844:	4a04      	ldr	r2, [pc, #16]	; (8000858 <HAL_IncTick+0x24>)
 8000846:	6013      	str	r3, [r2, #0]
}
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	24000404 	.word	0x24000404
 8000858:	24000540 	.word	0x24000540

0800085c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  return uwTick;
 8000860:	4b03      	ldr	r3, [pc, #12]	; (8000870 <HAL_GetTick+0x14>)
 8000862:	681b      	ldr	r3, [r3, #0]
}
 8000864:	4618      	mov	r0, r3
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	24000540 	.word	0x24000540

08000874 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000874:	b480      	push	{r7}
 8000876:	b085      	sub	sp, #20
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	f003 0307 	and.w	r3, r3, #7
 8000882:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000884:	4b0b      	ldr	r3, [pc, #44]	; (80008b4 <__NVIC_SetPriorityGrouping+0x40>)
 8000886:	68db      	ldr	r3, [r3, #12]
 8000888:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800088a:	68ba      	ldr	r2, [r7, #8]
 800088c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000890:	4013      	ands	r3, r2
 8000892:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000898:	68bb      	ldr	r3, [r7, #8]
 800089a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800089c:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <__NVIC_SetPriorityGrouping+0x44>)
 800089e:	4313      	orrs	r3, r2
 80008a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008a2:	4a04      	ldr	r2, [pc, #16]	; (80008b4 <__NVIC_SetPriorityGrouping+0x40>)
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	60d3      	str	r3, [r2, #12]
}
 80008a8:	bf00      	nop
 80008aa:	3714      	adds	r7, #20
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr
 80008b4:	e000ed00 	.word	0xe000ed00
 80008b8:	05fa0000 	.word	0x05fa0000

080008bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008c0:	4b04      	ldr	r3, [pc, #16]	; (80008d4 <__NVIC_GetPriorityGrouping+0x18>)
 80008c2:	68db      	ldr	r3, [r3, #12]
 80008c4:	0a1b      	lsrs	r3, r3, #8
 80008c6:	f003 0307 	and.w	r3, r3, #7
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr
 80008d4:	e000ed00 	.word	0xe000ed00

080008d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
 80008de:	4603      	mov	r3, r0
 80008e0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80008e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	db0b      	blt.n	8000902 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008ea:	88fb      	ldrh	r3, [r7, #6]
 80008ec:	f003 021f 	and.w	r2, r3, #31
 80008f0:	4907      	ldr	r1, [pc, #28]	; (8000910 <__NVIC_EnableIRQ+0x38>)
 80008f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008f6:	095b      	lsrs	r3, r3, #5
 80008f8:	2001      	movs	r0, #1
 80008fa:	fa00 f202 	lsl.w	r2, r0, r2
 80008fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000902:	bf00      	nop
 8000904:	370c      	adds	r7, #12
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	e000e100 	.word	0xe000e100

08000914 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
 800091a:	4603      	mov	r3, r0
 800091c:	6039      	str	r1, [r7, #0]
 800091e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000920:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000924:	2b00      	cmp	r3, #0
 8000926:	db0a      	blt.n	800093e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	b2da      	uxtb	r2, r3
 800092c:	490c      	ldr	r1, [pc, #48]	; (8000960 <__NVIC_SetPriority+0x4c>)
 800092e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000932:	0112      	lsls	r2, r2, #4
 8000934:	b2d2      	uxtb	r2, r2
 8000936:	440b      	add	r3, r1
 8000938:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800093c:	e00a      	b.n	8000954 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	b2da      	uxtb	r2, r3
 8000942:	4908      	ldr	r1, [pc, #32]	; (8000964 <__NVIC_SetPriority+0x50>)
 8000944:	88fb      	ldrh	r3, [r7, #6]
 8000946:	f003 030f 	and.w	r3, r3, #15
 800094a:	3b04      	subs	r3, #4
 800094c:	0112      	lsls	r2, r2, #4
 800094e:	b2d2      	uxtb	r2, r2
 8000950:	440b      	add	r3, r1
 8000952:	761a      	strb	r2, [r3, #24]
}
 8000954:	bf00      	nop
 8000956:	370c      	adds	r7, #12
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr
 8000960:	e000e100 	.word	0xe000e100
 8000964:	e000ed00 	.word	0xe000ed00

08000968 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000968:	b480      	push	{r7}
 800096a:	b089      	sub	sp, #36	; 0x24
 800096c:	af00      	add	r7, sp, #0
 800096e:	60f8      	str	r0, [r7, #12]
 8000970:	60b9      	str	r1, [r7, #8]
 8000972:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	f003 0307 	and.w	r3, r3, #7
 800097a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800097c:	69fb      	ldr	r3, [r7, #28]
 800097e:	f1c3 0307 	rsb	r3, r3, #7
 8000982:	2b04      	cmp	r3, #4
 8000984:	bf28      	it	cs
 8000986:	2304      	movcs	r3, #4
 8000988:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800098a:	69fb      	ldr	r3, [r7, #28]
 800098c:	3304      	adds	r3, #4
 800098e:	2b06      	cmp	r3, #6
 8000990:	d902      	bls.n	8000998 <NVIC_EncodePriority+0x30>
 8000992:	69fb      	ldr	r3, [r7, #28]
 8000994:	3b03      	subs	r3, #3
 8000996:	e000      	b.n	800099a <NVIC_EncodePriority+0x32>
 8000998:	2300      	movs	r3, #0
 800099a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800099c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80009a0:	69bb      	ldr	r3, [r7, #24]
 80009a2:	fa02 f303 	lsl.w	r3, r2, r3
 80009a6:	43da      	mvns	r2, r3
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	401a      	ands	r2, r3
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	fa01 f303 	lsl.w	r3, r1, r3
 80009ba:	43d9      	mvns	r1, r3
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009c0:	4313      	orrs	r3, r2
         );
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	3724      	adds	r7, #36	; 0x24
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
	...

080009d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	3b01      	subs	r3, #1
 80009dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009e0:	d301      	bcc.n	80009e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009e2:	2301      	movs	r3, #1
 80009e4:	e00f      	b.n	8000a06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009e6:	4a0a      	ldr	r2, [pc, #40]	; (8000a10 <SysTick_Config+0x40>)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	3b01      	subs	r3, #1
 80009ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009ee:	210f      	movs	r1, #15
 80009f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009f4:	f7ff ff8e 	bl	8000914 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009f8:	4b05      	ldr	r3, [pc, #20]	; (8000a10 <SysTick_Config+0x40>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009fe:	4b04      	ldr	r3, [pc, #16]	; (8000a10 <SysTick_Config+0x40>)
 8000a00:	2207      	movs	r2, #7
 8000a02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a04:	2300      	movs	r3, #0
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	e000e010 	.word	0xe000e010

08000a14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a1c:	6878      	ldr	r0, [r7, #4]
 8000a1e:	f7ff ff29 	bl	8000874 <__NVIC_SetPriorityGrouping>
}
 8000a22:	bf00      	nop
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}

08000a2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a2a:	b580      	push	{r7, lr}
 8000a2c:	b086      	sub	sp, #24
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	4603      	mov	r3, r0
 8000a32:	60b9      	str	r1, [r7, #8]
 8000a34:	607a      	str	r2, [r7, #4]
 8000a36:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a38:	f7ff ff40 	bl	80008bc <__NVIC_GetPriorityGrouping>
 8000a3c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a3e:	687a      	ldr	r2, [r7, #4]
 8000a40:	68b9      	ldr	r1, [r7, #8]
 8000a42:	6978      	ldr	r0, [r7, #20]
 8000a44:	f7ff ff90 	bl	8000968 <NVIC_EncodePriority>
 8000a48:	4602      	mov	r2, r0
 8000a4a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a4e:	4611      	mov	r1, r2
 8000a50:	4618      	mov	r0, r3
 8000a52:	f7ff ff5f 	bl	8000914 <__NVIC_SetPriority>
}
 8000a56:	bf00      	nop
 8000a58:	3718      	adds	r7, #24
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}

08000a5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	b082      	sub	sp, #8
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	4603      	mov	r3, r0
 8000a66:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff ff33 	bl	80008d8 <__NVIC_EnableIRQ>
}
 8000a72:	bf00      	nop
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	b082      	sub	sp, #8
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a82:	6878      	ldr	r0, [r7, #4]
 8000a84:	f7ff ffa4 	bl	80009d0 <SysTick_Config>
 8000a88:	4603      	mov	r3, r0
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
	...

08000a94 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d101      	bne.n	8000aa6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	e054      	b.n	8000b50 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	7f5b      	ldrb	r3, [r3, #29]
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d105      	bne.n	8000abc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000ab6:	6878      	ldr	r0, [r7, #4]
 8000ab8:	f007 f836 	bl	8007b28 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2202      	movs	r2, #2
 8000ac0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	791b      	ldrb	r3, [r3, #4]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d10c      	bne.n	8000ae4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4a22      	ldr	r2, [pc, #136]	; (8000b58 <HAL_CRC_Init+0xc4>)
 8000ad0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	689a      	ldr	r2, [r3, #8]
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	f022 0218 	bic.w	r2, r2, #24
 8000ae0:	609a      	str	r2, [r3, #8]
 8000ae2:	e00c      	b.n	8000afe <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	6899      	ldr	r1, [r3, #8]
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	461a      	mov	r2, r3
 8000aee:	6878      	ldr	r0, [r7, #4]
 8000af0:	f000 f834 	bl	8000b5c <HAL_CRCEx_Polynomial_Set>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8000afa:	2301      	movs	r3, #1
 8000afc:	e028      	b.n	8000b50 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	795b      	ldrb	r3, [r3, #5]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d105      	bne.n	8000b12 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b0e:	611a      	str	r2, [r3, #16]
 8000b10:	e004      	b.n	8000b1c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	687a      	ldr	r2, [r7, #4]
 8000b18:	6912      	ldr	r2, [r2, #16]
 8000b1a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	689b      	ldr	r3, [r3, #8]
 8000b22:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	695a      	ldr	r2, [r3, #20]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	430a      	orrs	r2, r1
 8000b30:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	689b      	ldr	r3, [r3, #8]
 8000b38:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	699a      	ldr	r2, [r3, #24]
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	430a      	orrs	r2, r1
 8000b46:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8000b4e:	2300      	movs	r3, #0
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	04c11db7 	.word	0x04c11db7

08000b5c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b087      	sub	sp, #28
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	60f8      	str	r0, [r7, #12]
 8000b64:	60b9      	str	r1, [r7, #8]
 8000b66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8000b6c:	231f      	movs	r3, #31
 8000b6e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8000b70:	bf00      	nop
 8000b72:	693b      	ldr	r3, [r7, #16]
 8000b74:	1e5a      	subs	r2, r3, #1
 8000b76:	613a      	str	r2, [r7, #16]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d009      	beq.n	8000b90 <HAL_CRCEx_Polynomial_Set+0x34>
 8000b7c:	693b      	ldr	r3, [r7, #16]
 8000b7e:	f003 031f 	and.w	r3, r3, #31
 8000b82:	68ba      	ldr	r2, [r7, #8]
 8000b84:	fa22 f303 	lsr.w	r3, r2, r3
 8000b88:	f003 0301 	and.w	r3, r3, #1
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d0f0      	beq.n	8000b72 <HAL_CRCEx_Polynomial_Set+0x16>
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	2b18      	cmp	r3, #24
 8000b94:	d846      	bhi.n	8000c24 <HAL_CRCEx_Polynomial_Set+0xc8>
 8000b96:	a201      	add	r2, pc, #4	; (adr r2, 8000b9c <HAL_CRCEx_Polynomial_Set+0x40>)
 8000b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b9c:	08000c2b 	.word	0x08000c2b
 8000ba0:	08000c25 	.word	0x08000c25
 8000ba4:	08000c25 	.word	0x08000c25
 8000ba8:	08000c25 	.word	0x08000c25
 8000bac:	08000c25 	.word	0x08000c25
 8000bb0:	08000c25 	.word	0x08000c25
 8000bb4:	08000c25 	.word	0x08000c25
 8000bb8:	08000c25 	.word	0x08000c25
 8000bbc:	08000c19 	.word	0x08000c19
 8000bc0:	08000c25 	.word	0x08000c25
 8000bc4:	08000c25 	.word	0x08000c25
 8000bc8:	08000c25 	.word	0x08000c25
 8000bcc:	08000c25 	.word	0x08000c25
 8000bd0:	08000c25 	.word	0x08000c25
 8000bd4:	08000c25 	.word	0x08000c25
 8000bd8:	08000c25 	.word	0x08000c25
 8000bdc:	08000c0d 	.word	0x08000c0d
 8000be0:	08000c25 	.word	0x08000c25
 8000be4:	08000c25 	.word	0x08000c25
 8000be8:	08000c25 	.word	0x08000c25
 8000bec:	08000c25 	.word	0x08000c25
 8000bf0:	08000c25 	.word	0x08000c25
 8000bf4:	08000c25 	.word	0x08000c25
 8000bf8:	08000c25 	.word	0x08000c25
 8000bfc:	08000c01 	.word	0x08000c01
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8000c00:	693b      	ldr	r3, [r7, #16]
 8000c02:	2b06      	cmp	r3, #6
 8000c04:	d913      	bls.n	8000c2e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8000c06:	2301      	movs	r3, #1
 8000c08:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8000c0a:	e010      	b.n	8000c2e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8000c0c:	693b      	ldr	r3, [r7, #16]
 8000c0e:	2b07      	cmp	r3, #7
 8000c10:	d90f      	bls.n	8000c32 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8000c12:	2301      	movs	r3, #1
 8000c14:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8000c16:	e00c      	b.n	8000c32 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8000c18:	693b      	ldr	r3, [r7, #16]
 8000c1a:	2b0f      	cmp	r3, #15
 8000c1c:	d90b      	bls.n	8000c36 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8000c22:	e008      	b.n	8000c36 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8000c24:	2301      	movs	r3, #1
 8000c26:	75fb      	strb	r3, [r7, #23]
      break;
 8000c28:	e006      	b.n	8000c38 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000c2a:	bf00      	nop
 8000c2c:	e004      	b.n	8000c38 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000c2e:	bf00      	nop
 8000c30:	e002      	b.n	8000c38 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000c32:	bf00      	nop
 8000c34:	e000      	b.n	8000c38 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000c36:	bf00      	nop
  }
  if (status == HAL_OK)
 8000c38:	7dfb      	ldrb	r3, [r7, #23]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d10d      	bne.n	8000c5a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	68ba      	ldr	r2, [r7, #8]
 8000c44:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	689b      	ldr	r3, [r3, #8]
 8000c4c:	f023 0118 	bic.w	r1, r3, #24
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	687a      	ldr	r2, [r7, #4]
 8000c56:	430a      	orrs	r2, r1
 8000c58:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8000c5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	371c      	adds	r7, #28
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr

08000c68 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b086      	sub	sp, #24
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8000c70:	f7ff fdf4 	bl	800085c <HAL_GetTick>
 8000c74:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d101      	bne.n	8000c80 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	e314      	b.n	80012aa <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a66      	ldr	r2, [pc, #408]	; (8000e20 <HAL_DMA_Init+0x1b8>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d04a      	beq.n	8000d20 <HAL_DMA_Init+0xb8>
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4a65      	ldr	r2, [pc, #404]	; (8000e24 <HAL_DMA_Init+0x1bc>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d045      	beq.n	8000d20 <HAL_DMA_Init+0xb8>
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a63      	ldr	r2, [pc, #396]	; (8000e28 <HAL_DMA_Init+0x1c0>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d040      	beq.n	8000d20 <HAL_DMA_Init+0xb8>
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4a62      	ldr	r2, [pc, #392]	; (8000e2c <HAL_DMA_Init+0x1c4>)
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d03b      	beq.n	8000d20 <HAL_DMA_Init+0xb8>
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a60      	ldr	r2, [pc, #384]	; (8000e30 <HAL_DMA_Init+0x1c8>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d036      	beq.n	8000d20 <HAL_DMA_Init+0xb8>
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a5f      	ldr	r2, [pc, #380]	; (8000e34 <HAL_DMA_Init+0x1cc>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d031      	beq.n	8000d20 <HAL_DMA_Init+0xb8>
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a5d      	ldr	r2, [pc, #372]	; (8000e38 <HAL_DMA_Init+0x1d0>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d02c      	beq.n	8000d20 <HAL_DMA_Init+0xb8>
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4a5c      	ldr	r2, [pc, #368]	; (8000e3c <HAL_DMA_Init+0x1d4>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d027      	beq.n	8000d20 <HAL_DMA_Init+0xb8>
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a5a      	ldr	r2, [pc, #360]	; (8000e40 <HAL_DMA_Init+0x1d8>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d022      	beq.n	8000d20 <HAL_DMA_Init+0xb8>
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4a59      	ldr	r2, [pc, #356]	; (8000e44 <HAL_DMA_Init+0x1dc>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d01d      	beq.n	8000d20 <HAL_DMA_Init+0xb8>
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a57      	ldr	r2, [pc, #348]	; (8000e48 <HAL_DMA_Init+0x1e0>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d018      	beq.n	8000d20 <HAL_DMA_Init+0xb8>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a56      	ldr	r2, [pc, #344]	; (8000e4c <HAL_DMA_Init+0x1e4>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d013      	beq.n	8000d20 <HAL_DMA_Init+0xb8>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a54      	ldr	r2, [pc, #336]	; (8000e50 <HAL_DMA_Init+0x1e8>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d00e      	beq.n	8000d20 <HAL_DMA_Init+0xb8>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a53      	ldr	r2, [pc, #332]	; (8000e54 <HAL_DMA_Init+0x1ec>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d009      	beq.n	8000d20 <HAL_DMA_Init+0xb8>
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a51      	ldr	r2, [pc, #324]	; (8000e58 <HAL_DMA_Init+0x1f0>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d004      	beq.n	8000d20 <HAL_DMA_Init+0xb8>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4a50      	ldr	r2, [pc, #320]	; (8000e5c <HAL_DMA_Init+0x1f4>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d101      	bne.n	8000d24 <HAL_DMA_Init+0xbc>
 8000d20:	2301      	movs	r3, #1
 8000d22:	e000      	b.n	8000d26 <HAL_DMA_Init+0xbe>
 8000d24:	2300      	movs	r3, #0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	f000 813c 	beq.w	8000fa4 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2202      	movs	r2, #2
 8000d30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2200      	movs	r2, #0
 8000d38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a37      	ldr	r2, [pc, #220]	; (8000e20 <HAL_DMA_Init+0x1b8>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d04a      	beq.n	8000ddc <HAL_DMA_Init+0x174>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4a36      	ldr	r2, [pc, #216]	; (8000e24 <HAL_DMA_Init+0x1bc>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d045      	beq.n	8000ddc <HAL_DMA_Init+0x174>
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a34      	ldr	r2, [pc, #208]	; (8000e28 <HAL_DMA_Init+0x1c0>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d040      	beq.n	8000ddc <HAL_DMA_Init+0x174>
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a33      	ldr	r2, [pc, #204]	; (8000e2c <HAL_DMA_Init+0x1c4>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d03b      	beq.n	8000ddc <HAL_DMA_Init+0x174>
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a31      	ldr	r2, [pc, #196]	; (8000e30 <HAL_DMA_Init+0x1c8>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d036      	beq.n	8000ddc <HAL_DMA_Init+0x174>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a30      	ldr	r2, [pc, #192]	; (8000e34 <HAL_DMA_Init+0x1cc>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d031      	beq.n	8000ddc <HAL_DMA_Init+0x174>
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a2e      	ldr	r2, [pc, #184]	; (8000e38 <HAL_DMA_Init+0x1d0>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d02c      	beq.n	8000ddc <HAL_DMA_Init+0x174>
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a2d      	ldr	r2, [pc, #180]	; (8000e3c <HAL_DMA_Init+0x1d4>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d027      	beq.n	8000ddc <HAL_DMA_Init+0x174>
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a2b      	ldr	r2, [pc, #172]	; (8000e40 <HAL_DMA_Init+0x1d8>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d022      	beq.n	8000ddc <HAL_DMA_Init+0x174>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a2a      	ldr	r2, [pc, #168]	; (8000e44 <HAL_DMA_Init+0x1dc>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d01d      	beq.n	8000ddc <HAL_DMA_Init+0x174>
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a28      	ldr	r2, [pc, #160]	; (8000e48 <HAL_DMA_Init+0x1e0>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d018      	beq.n	8000ddc <HAL_DMA_Init+0x174>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a27      	ldr	r2, [pc, #156]	; (8000e4c <HAL_DMA_Init+0x1e4>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d013      	beq.n	8000ddc <HAL_DMA_Init+0x174>
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a25      	ldr	r2, [pc, #148]	; (8000e50 <HAL_DMA_Init+0x1e8>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d00e      	beq.n	8000ddc <HAL_DMA_Init+0x174>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a24      	ldr	r2, [pc, #144]	; (8000e54 <HAL_DMA_Init+0x1ec>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d009      	beq.n	8000ddc <HAL_DMA_Init+0x174>
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a22      	ldr	r2, [pc, #136]	; (8000e58 <HAL_DMA_Init+0x1f0>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d004      	beq.n	8000ddc <HAL_DMA_Init+0x174>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a21      	ldr	r2, [pc, #132]	; (8000e5c <HAL_DMA_Init+0x1f4>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d108      	bne.n	8000dee <HAL_DMA_Init+0x186>
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f022 0201 	bic.w	r2, r2, #1
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	e007      	b.n	8000dfe <HAL_DMA_Init+0x196>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f022 0201 	bic.w	r2, r2, #1
 8000dfc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8000dfe:	e02f      	b.n	8000e60 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000e00:	f7ff fd2c 	bl	800085c <HAL_GetTick>
 8000e04:	4602      	mov	r2, r0
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	1ad3      	subs	r3, r2, r3
 8000e0a:	2b05      	cmp	r3, #5
 8000e0c:	d928      	bls.n	8000e60 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2220      	movs	r2, #32
 8000e12:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2203      	movs	r2, #3
 8000e18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	e244      	b.n	80012aa <HAL_DMA_Init+0x642>
 8000e20:	40020010 	.word	0x40020010
 8000e24:	40020028 	.word	0x40020028
 8000e28:	40020040 	.word	0x40020040
 8000e2c:	40020058 	.word	0x40020058
 8000e30:	40020070 	.word	0x40020070
 8000e34:	40020088 	.word	0x40020088
 8000e38:	400200a0 	.word	0x400200a0
 8000e3c:	400200b8 	.word	0x400200b8
 8000e40:	40020410 	.word	0x40020410
 8000e44:	40020428 	.word	0x40020428
 8000e48:	40020440 	.word	0x40020440
 8000e4c:	40020458 	.word	0x40020458
 8000e50:	40020470 	.word	0x40020470
 8000e54:	40020488 	.word	0x40020488
 8000e58:	400204a0 	.word	0x400204a0
 8000e5c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f003 0301 	and.w	r3, r3, #1
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d1c8      	bne.n	8000e00 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000e76:	697a      	ldr	r2, [r7, #20]
 8000e78:	4b84      	ldr	r3, [pc, #528]	; (800108c <HAL_DMA_Init+0x424>)
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8000e86:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	691b      	ldr	r3, [r3, #16]
 8000e8c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e92:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	699b      	ldr	r3, [r3, #24]
 8000e98:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e9e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6a1b      	ldr	r3, [r3, #32]
 8000ea4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8000ea6:	697a      	ldr	r2, [r7, #20]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eb0:	2b04      	cmp	r3, #4
 8000eb2:	d107      	bne.n	8000ec4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	697a      	ldr	r2, [r7, #20]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	2b28      	cmp	r3, #40	; 0x28
 8000eca:	d903      	bls.n	8000ed4 <HAL_DMA_Init+0x26c>
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	2b2e      	cmp	r3, #46	; 0x2e
 8000ed2:	d91f      	bls.n	8000f14 <HAL_DMA_Init+0x2ac>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	2b3e      	cmp	r3, #62	; 0x3e
 8000eda:	d903      	bls.n	8000ee4 <HAL_DMA_Init+0x27c>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	2b42      	cmp	r3, #66	; 0x42
 8000ee2:	d917      	bls.n	8000f14 <HAL_DMA_Init+0x2ac>
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	2b46      	cmp	r3, #70	; 0x46
 8000eea:	d903      	bls.n	8000ef4 <HAL_DMA_Init+0x28c>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	2b48      	cmp	r3, #72	; 0x48
 8000ef2:	d90f      	bls.n	8000f14 <HAL_DMA_Init+0x2ac>
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	2b4e      	cmp	r3, #78	; 0x4e
 8000efa:	d903      	bls.n	8000f04 <HAL_DMA_Init+0x29c>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	2b52      	cmp	r3, #82	; 0x52
 8000f02:	d907      	bls.n	8000f14 <HAL_DMA_Init+0x2ac>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	2b73      	cmp	r3, #115	; 0x73
 8000f0a:	d905      	bls.n	8000f18 <HAL_DMA_Init+0x2b0>
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	2b77      	cmp	r3, #119	; 0x77
 8000f12:	d801      	bhi.n	8000f18 <HAL_DMA_Init+0x2b0>
 8000f14:	2301      	movs	r3, #1
 8000f16:	e000      	b.n	8000f1a <HAL_DMA_Init+0x2b2>
 8000f18:	2300      	movs	r3, #0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d003      	beq.n	8000f26 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000f24:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	697a      	ldr	r2, [r7, #20]
 8000f2c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	695b      	ldr	r3, [r3, #20]
 8000f34:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	f023 0307 	bic.w	r3, r3, #7
 8000f3c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f42:	697a      	ldr	r2, [r7, #20]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f4c:	2b04      	cmp	r3, #4
 8000f4e:	d117      	bne.n	8000f80 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f54:	697a      	ldr	r2, [r7, #20]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d00e      	beq.n	8000f80 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f001 f9b6 	bl	80022d4 <DMA_CheckFifoParam>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d008      	beq.n	8000f80 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2240      	movs	r2, #64	; 0x40
 8000f72:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2201      	movs	r2, #1
 8000f78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	e194      	b.n	80012aa <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	697a      	ldr	r2, [r7, #20]
 8000f86:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f001 f8f1 	bl	8002170 <DMA_CalcBaseAndBitshift>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f96:	f003 031f 	and.w	r3, r3, #31
 8000f9a:	223f      	movs	r2, #63	; 0x3f
 8000f9c:	409a      	lsls	r2, r3
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	609a      	str	r2, [r3, #8]
 8000fa2:	e0ca      	b.n	800113a <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a39      	ldr	r2, [pc, #228]	; (8001090 <HAL_DMA_Init+0x428>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d022      	beq.n	8000ff4 <HAL_DMA_Init+0x38c>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a38      	ldr	r2, [pc, #224]	; (8001094 <HAL_DMA_Init+0x42c>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d01d      	beq.n	8000ff4 <HAL_DMA_Init+0x38c>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a36      	ldr	r2, [pc, #216]	; (8001098 <HAL_DMA_Init+0x430>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d018      	beq.n	8000ff4 <HAL_DMA_Init+0x38c>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a35      	ldr	r2, [pc, #212]	; (800109c <HAL_DMA_Init+0x434>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d013      	beq.n	8000ff4 <HAL_DMA_Init+0x38c>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a33      	ldr	r2, [pc, #204]	; (80010a0 <HAL_DMA_Init+0x438>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d00e      	beq.n	8000ff4 <HAL_DMA_Init+0x38c>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a32      	ldr	r2, [pc, #200]	; (80010a4 <HAL_DMA_Init+0x43c>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d009      	beq.n	8000ff4 <HAL_DMA_Init+0x38c>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a30      	ldr	r2, [pc, #192]	; (80010a8 <HAL_DMA_Init+0x440>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d004      	beq.n	8000ff4 <HAL_DMA_Init+0x38c>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a2f      	ldr	r2, [pc, #188]	; (80010ac <HAL_DMA_Init+0x444>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d101      	bne.n	8000ff8 <HAL_DMA_Init+0x390>
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	e000      	b.n	8000ffa <HAL_DMA_Init+0x392>
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	f000 8094 	beq.w	8001128 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a22      	ldr	r2, [pc, #136]	; (8001090 <HAL_DMA_Init+0x428>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d021      	beq.n	800104e <HAL_DMA_Init+0x3e6>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a21      	ldr	r2, [pc, #132]	; (8001094 <HAL_DMA_Init+0x42c>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d01c      	beq.n	800104e <HAL_DMA_Init+0x3e6>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a1f      	ldr	r2, [pc, #124]	; (8001098 <HAL_DMA_Init+0x430>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d017      	beq.n	800104e <HAL_DMA_Init+0x3e6>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a1e      	ldr	r2, [pc, #120]	; (800109c <HAL_DMA_Init+0x434>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d012      	beq.n	800104e <HAL_DMA_Init+0x3e6>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a1c      	ldr	r2, [pc, #112]	; (80010a0 <HAL_DMA_Init+0x438>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d00d      	beq.n	800104e <HAL_DMA_Init+0x3e6>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a1b      	ldr	r2, [pc, #108]	; (80010a4 <HAL_DMA_Init+0x43c>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d008      	beq.n	800104e <HAL_DMA_Init+0x3e6>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a19      	ldr	r2, [pc, #100]	; (80010a8 <HAL_DMA_Init+0x440>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d003      	beq.n	800104e <HAL_DMA_Init+0x3e6>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a18      	ldr	r2, [pc, #96]	; (80010ac <HAL_DMA_Init+0x444>)
 800104c:	4293      	cmp	r3, r2
 800104e:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2202      	movs	r2, #2
 8001054:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2200      	movs	r2, #0
 800105c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001068:	697a      	ldr	r2, [r7, #20]
 800106a:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <HAL_DMA_Init+0x448>)
 800106c:	4013      	ands	r3, r2
 800106e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	2b40      	cmp	r3, #64	; 0x40
 8001076:	d01d      	beq.n	80010b4 <HAL_DMA_Init+0x44c>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	689b      	ldr	r3, [r3, #8]
 800107c:	2b80      	cmp	r3, #128	; 0x80
 800107e:	d102      	bne.n	8001086 <HAL_DMA_Init+0x41e>
 8001080:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001084:	e017      	b.n	80010b6 <HAL_DMA_Init+0x44e>
 8001086:	2300      	movs	r3, #0
 8001088:	e015      	b.n	80010b6 <HAL_DMA_Init+0x44e>
 800108a:	bf00      	nop
 800108c:	fe10803f 	.word	0xfe10803f
 8001090:	58025408 	.word	0x58025408
 8001094:	5802541c 	.word	0x5802541c
 8001098:	58025430 	.word	0x58025430
 800109c:	58025444 	.word	0x58025444
 80010a0:	58025458 	.word	0x58025458
 80010a4:	5802546c 	.word	0x5802546c
 80010a8:	58025480 	.word	0x58025480
 80010ac:	58025494 	.word	0x58025494
 80010b0:	fffe000f 	.word	0xfffe000f
 80010b4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	68d2      	ldr	r2, [r2, #12]
 80010ba:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80010bc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	691b      	ldr	r3, [r3, #16]
 80010c2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80010c4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	695b      	ldr	r3, [r3, #20]
 80010ca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80010cc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	699b      	ldr	r3, [r3, #24]
 80010d2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80010d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	69db      	ldr	r3, [r3, #28]
 80010da:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80010dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6a1b      	ldr	r3, [r3, #32]
 80010e2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80010e4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80010e6:	697a      	ldr	r2, [r7, #20]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	697a      	ldr	r2, [r7, #20]
 80010f2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	461a      	mov	r2, r3
 80010fa:	4b6e      	ldr	r3, [pc, #440]	; (80012b4 <HAL_DMA_Init+0x64c>)
 80010fc:	4413      	add	r3, r2
 80010fe:	4a6e      	ldr	r2, [pc, #440]	; (80012b8 <HAL_DMA_Init+0x650>)
 8001100:	fba2 2303 	umull	r2, r3, r2, r3
 8001104:	091b      	lsrs	r3, r3, #4
 8001106:	009a      	lsls	r2, r3, #2
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f001 f82f 	bl	8002170 <DMA_CalcBaseAndBitshift>
 8001112:	4603      	mov	r3, r0
 8001114:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800111a:	f003 031f 	and.w	r3, r3, #31
 800111e:	2201      	movs	r2, #1
 8001120:	409a      	lsls	r2, r3
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	e008      	b.n	800113a <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2240      	movs	r2, #64	; 0x40
 800112c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2203      	movs	r2, #3
 8001132:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e0b7      	b.n	80012aa <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a5f      	ldr	r2, [pc, #380]	; (80012bc <HAL_DMA_Init+0x654>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d072      	beq.n	800122a <HAL_DMA_Init+0x5c2>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a5d      	ldr	r2, [pc, #372]	; (80012c0 <HAL_DMA_Init+0x658>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d06d      	beq.n	800122a <HAL_DMA_Init+0x5c2>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a5c      	ldr	r2, [pc, #368]	; (80012c4 <HAL_DMA_Init+0x65c>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d068      	beq.n	800122a <HAL_DMA_Init+0x5c2>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a5a      	ldr	r2, [pc, #360]	; (80012c8 <HAL_DMA_Init+0x660>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d063      	beq.n	800122a <HAL_DMA_Init+0x5c2>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a59      	ldr	r2, [pc, #356]	; (80012cc <HAL_DMA_Init+0x664>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d05e      	beq.n	800122a <HAL_DMA_Init+0x5c2>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a57      	ldr	r2, [pc, #348]	; (80012d0 <HAL_DMA_Init+0x668>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d059      	beq.n	800122a <HAL_DMA_Init+0x5c2>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a56      	ldr	r2, [pc, #344]	; (80012d4 <HAL_DMA_Init+0x66c>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d054      	beq.n	800122a <HAL_DMA_Init+0x5c2>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a54      	ldr	r2, [pc, #336]	; (80012d8 <HAL_DMA_Init+0x670>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d04f      	beq.n	800122a <HAL_DMA_Init+0x5c2>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a53      	ldr	r2, [pc, #332]	; (80012dc <HAL_DMA_Init+0x674>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d04a      	beq.n	800122a <HAL_DMA_Init+0x5c2>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a51      	ldr	r2, [pc, #324]	; (80012e0 <HAL_DMA_Init+0x678>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d045      	beq.n	800122a <HAL_DMA_Init+0x5c2>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a50      	ldr	r2, [pc, #320]	; (80012e4 <HAL_DMA_Init+0x67c>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d040      	beq.n	800122a <HAL_DMA_Init+0x5c2>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a4e      	ldr	r2, [pc, #312]	; (80012e8 <HAL_DMA_Init+0x680>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d03b      	beq.n	800122a <HAL_DMA_Init+0x5c2>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a4d      	ldr	r2, [pc, #308]	; (80012ec <HAL_DMA_Init+0x684>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d036      	beq.n	800122a <HAL_DMA_Init+0x5c2>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a4b      	ldr	r2, [pc, #300]	; (80012f0 <HAL_DMA_Init+0x688>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d031      	beq.n	800122a <HAL_DMA_Init+0x5c2>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a4a      	ldr	r2, [pc, #296]	; (80012f4 <HAL_DMA_Init+0x68c>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d02c      	beq.n	800122a <HAL_DMA_Init+0x5c2>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a48      	ldr	r2, [pc, #288]	; (80012f8 <HAL_DMA_Init+0x690>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d027      	beq.n	800122a <HAL_DMA_Init+0x5c2>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a47      	ldr	r2, [pc, #284]	; (80012fc <HAL_DMA_Init+0x694>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d022      	beq.n	800122a <HAL_DMA_Init+0x5c2>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a45      	ldr	r2, [pc, #276]	; (8001300 <HAL_DMA_Init+0x698>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d01d      	beq.n	800122a <HAL_DMA_Init+0x5c2>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a44      	ldr	r2, [pc, #272]	; (8001304 <HAL_DMA_Init+0x69c>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d018      	beq.n	800122a <HAL_DMA_Init+0x5c2>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a42      	ldr	r2, [pc, #264]	; (8001308 <HAL_DMA_Init+0x6a0>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d013      	beq.n	800122a <HAL_DMA_Init+0x5c2>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a41      	ldr	r2, [pc, #260]	; (800130c <HAL_DMA_Init+0x6a4>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d00e      	beq.n	800122a <HAL_DMA_Init+0x5c2>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a3f      	ldr	r2, [pc, #252]	; (8001310 <HAL_DMA_Init+0x6a8>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d009      	beq.n	800122a <HAL_DMA_Init+0x5c2>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a3e      	ldr	r2, [pc, #248]	; (8001314 <HAL_DMA_Init+0x6ac>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d004      	beq.n	800122a <HAL_DMA_Init+0x5c2>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a3c      	ldr	r2, [pc, #240]	; (8001318 <HAL_DMA_Init+0x6b0>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d101      	bne.n	800122e <HAL_DMA_Init+0x5c6>
 800122a:	2301      	movs	r3, #1
 800122c:	e000      	b.n	8001230 <HAL_DMA_Init+0x5c8>
 800122e:	2300      	movs	r3, #0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d032      	beq.n	800129a <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f001 f8c9 	bl	80023cc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	2b80      	cmp	r3, #128	; 0x80
 8001240:	d102      	bne.n	8001248 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2200      	movs	r2, #0
 8001246:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	685a      	ldr	r2, [r3, #4]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001250:	b2d2      	uxtb	r2, r2
 8001252:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001258:	687a      	ldr	r2, [r7, #4]
 800125a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800125c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d010      	beq.n	8001288 <HAL_DMA_Init+0x620>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	2b08      	cmp	r3, #8
 800126c:	d80c      	bhi.n	8001288 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f001 f946 	bl	8002500 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	e008      	b.n	800129a <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2200      	movs	r2, #0
 800128c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2200      	movs	r2, #0
 8001292:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2200      	movs	r2, #0
 8001298:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2200      	movs	r2, #0
 800129e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2201      	movs	r2, #1
 80012a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80012a8:	2300      	movs	r3, #0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3718      	adds	r7, #24
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	a7fdabf8 	.word	0xa7fdabf8
 80012b8:	cccccccd 	.word	0xcccccccd
 80012bc:	40020010 	.word	0x40020010
 80012c0:	40020028 	.word	0x40020028
 80012c4:	40020040 	.word	0x40020040
 80012c8:	40020058 	.word	0x40020058
 80012cc:	40020070 	.word	0x40020070
 80012d0:	40020088 	.word	0x40020088
 80012d4:	400200a0 	.word	0x400200a0
 80012d8:	400200b8 	.word	0x400200b8
 80012dc:	40020410 	.word	0x40020410
 80012e0:	40020428 	.word	0x40020428
 80012e4:	40020440 	.word	0x40020440
 80012e8:	40020458 	.word	0x40020458
 80012ec:	40020470 	.word	0x40020470
 80012f0:	40020488 	.word	0x40020488
 80012f4:	400204a0 	.word	0x400204a0
 80012f8:	400204b8 	.word	0x400204b8
 80012fc:	58025408 	.word	0x58025408
 8001300:	5802541c 	.word	0x5802541c
 8001304:	58025430 	.word	0x58025430
 8001308:	58025444 	.word	0x58025444
 800130c:	58025458 	.word	0x58025458
 8001310:	5802546c 	.word	0x5802546c
 8001314:	58025480 	.word	0x58025480
 8001318:	58025494 	.word	0x58025494

0800131c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b08a      	sub	sp, #40	; 0x28
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8001324:	2300      	movs	r3, #0
 8001326:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001328:	4b67      	ldr	r3, [pc, #412]	; (80014c8 <HAL_DMA_IRQHandler+0x1ac>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a67      	ldr	r2, [pc, #412]	; (80014cc <HAL_DMA_IRQHandler+0x1b0>)
 800132e:	fba2 2303 	umull	r2, r3, r2, r3
 8001332:	0a9b      	lsrs	r3, r3, #10
 8001334:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800133a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001340:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8001342:	6a3b      	ldr	r3, [r7, #32]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a5f      	ldr	r2, [pc, #380]	; (80014d0 <HAL_DMA_IRQHandler+0x1b4>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d04a      	beq.n	80013ee <HAL_DMA_IRQHandler+0xd2>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a5d      	ldr	r2, [pc, #372]	; (80014d4 <HAL_DMA_IRQHandler+0x1b8>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d045      	beq.n	80013ee <HAL_DMA_IRQHandler+0xd2>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a5c      	ldr	r2, [pc, #368]	; (80014d8 <HAL_DMA_IRQHandler+0x1bc>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d040      	beq.n	80013ee <HAL_DMA_IRQHandler+0xd2>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a5a      	ldr	r2, [pc, #360]	; (80014dc <HAL_DMA_IRQHandler+0x1c0>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d03b      	beq.n	80013ee <HAL_DMA_IRQHandler+0xd2>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a59      	ldr	r2, [pc, #356]	; (80014e0 <HAL_DMA_IRQHandler+0x1c4>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d036      	beq.n	80013ee <HAL_DMA_IRQHandler+0xd2>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a57      	ldr	r2, [pc, #348]	; (80014e4 <HAL_DMA_IRQHandler+0x1c8>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d031      	beq.n	80013ee <HAL_DMA_IRQHandler+0xd2>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a56      	ldr	r2, [pc, #344]	; (80014e8 <HAL_DMA_IRQHandler+0x1cc>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d02c      	beq.n	80013ee <HAL_DMA_IRQHandler+0xd2>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a54      	ldr	r2, [pc, #336]	; (80014ec <HAL_DMA_IRQHandler+0x1d0>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d027      	beq.n	80013ee <HAL_DMA_IRQHandler+0xd2>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a53      	ldr	r2, [pc, #332]	; (80014f0 <HAL_DMA_IRQHandler+0x1d4>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d022      	beq.n	80013ee <HAL_DMA_IRQHandler+0xd2>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a51      	ldr	r2, [pc, #324]	; (80014f4 <HAL_DMA_IRQHandler+0x1d8>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d01d      	beq.n	80013ee <HAL_DMA_IRQHandler+0xd2>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a50      	ldr	r2, [pc, #320]	; (80014f8 <HAL_DMA_IRQHandler+0x1dc>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d018      	beq.n	80013ee <HAL_DMA_IRQHandler+0xd2>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a4e      	ldr	r2, [pc, #312]	; (80014fc <HAL_DMA_IRQHandler+0x1e0>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d013      	beq.n	80013ee <HAL_DMA_IRQHandler+0xd2>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a4d      	ldr	r2, [pc, #308]	; (8001500 <HAL_DMA_IRQHandler+0x1e4>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d00e      	beq.n	80013ee <HAL_DMA_IRQHandler+0xd2>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a4b      	ldr	r2, [pc, #300]	; (8001504 <HAL_DMA_IRQHandler+0x1e8>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d009      	beq.n	80013ee <HAL_DMA_IRQHandler+0xd2>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a4a      	ldr	r2, [pc, #296]	; (8001508 <HAL_DMA_IRQHandler+0x1ec>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d004      	beq.n	80013ee <HAL_DMA_IRQHandler+0xd2>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a48      	ldr	r2, [pc, #288]	; (800150c <HAL_DMA_IRQHandler+0x1f0>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d101      	bne.n	80013f2 <HAL_DMA_IRQHandler+0xd6>
 80013ee:	2301      	movs	r3, #1
 80013f0:	e000      	b.n	80013f4 <HAL_DMA_IRQHandler+0xd8>
 80013f2:	2300      	movs	r3, #0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	f000 842b 	beq.w	8001c50 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013fe:	f003 031f 	and.w	r3, r3, #31
 8001402:	2208      	movs	r2, #8
 8001404:	409a      	lsls	r2, r3
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	4013      	ands	r3, r2
 800140a:	2b00      	cmp	r3, #0
 800140c:	f000 80a2 	beq.w	8001554 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a2e      	ldr	r2, [pc, #184]	; (80014d0 <HAL_DMA_IRQHandler+0x1b4>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d04a      	beq.n	80014b0 <HAL_DMA_IRQHandler+0x194>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a2d      	ldr	r2, [pc, #180]	; (80014d4 <HAL_DMA_IRQHandler+0x1b8>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d045      	beq.n	80014b0 <HAL_DMA_IRQHandler+0x194>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a2b      	ldr	r2, [pc, #172]	; (80014d8 <HAL_DMA_IRQHandler+0x1bc>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d040      	beq.n	80014b0 <HAL_DMA_IRQHandler+0x194>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a2a      	ldr	r2, [pc, #168]	; (80014dc <HAL_DMA_IRQHandler+0x1c0>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d03b      	beq.n	80014b0 <HAL_DMA_IRQHandler+0x194>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a28      	ldr	r2, [pc, #160]	; (80014e0 <HAL_DMA_IRQHandler+0x1c4>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d036      	beq.n	80014b0 <HAL_DMA_IRQHandler+0x194>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a27      	ldr	r2, [pc, #156]	; (80014e4 <HAL_DMA_IRQHandler+0x1c8>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d031      	beq.n	80014b0 <HAL_DMA_IRQHandler+0x194>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a25      	ldr	r2, [pc, #148]	; (80014e8 <HAL_DMA_IRQHandler+0x1cc>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d02c      	beq.n	80014b0 <HAL_DMA_IRQHandler+0x194>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a24      	ldr	r2, [pc, #144]	; (80014ec <HAL_DMA_IRQHandler+0x1d0>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d027      	beq.n	80014b0 <HAL_DMA_IRQHandler+0x194>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a22      	ldr	r2, [pc, #136]	; (80014f0 <HAL_DMA_IRQHandler+0x1d4>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d022      	beq.n	80014b0 <HAL_DMA_IRQHandler+0x194>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a21      	ldr	r2, [pc, #132]	; (80014f4 <HAL_DMA_IRQHandler+0x1d8>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d01d      	beq.n	80014b0 <HAL_DMA_IRQHandler+0x194>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a1f      	ldr	r2, [pc, #124]	; (80014f8 <HAL_DMA_IRQHandler+0x1dc>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d018      	beq.n	80014b0 <HAL_DMA_IRQHandler+0x194>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a1e      	ldr	r2, [pc, #120]	; (80014fc <HAL_DMA_IRQHandler+0x1e0>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d013      	beq.n	80014b0 <HAL_DMA_IRQHandler+0x194>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a1c      	ldr	r2, [pc, #112]	; (8001500 <HAL_DMA_IRQHandler+0x1e4>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d00e      	beq.n	80014b0 <HAL_DMA_IRQHandler+0x194>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a1b      	ldr	r2, [pc, #108]	; (8001504 <HAL_DMA_IRQHandler+0x1e8>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d009      	beq.n	80014b0 <HAL_DMA_IRQHandler+0x194>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a19      	ldr	r2, [pc, #100]	; (8001508 <HAL_DMA_IRQHandler+0x1ec>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d004      	beq.n	80014b0 <HAL_DMA_IRQHandler+0x194>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a18      	ldr	r2, [pc, #96]	; (800150c <HAL_DMA_IRQHandler+0x1f0>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d12f      	bne.n	8001510 <HAL_DMA_IRQHandler+0x1f4>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0304 	and.w	r3, r3, #4
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	bf14      	ite	ne
 80014be:	2301      	movne	r3, #1
 80014c0:	2300      	moveq	r3, #0
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	e02e      	b.n	8001524 <HAL_DMA_IRQHandler+0x208>
 80014c6:	bf00      	nop
 80014c8:	24000408 	.word	0x24000408
 80014cc:	1b4e81b5 	.word	0x1b4e81b5
 80014d0:	40020010 	.word	0x40020010
 80014d4:	40020028 	.word	0x40020028
 80014d8:	40020040 	.word	0x40020040
 80014dc:	40020058 	.word	0x40020058
 80014e0:	40020070 	.word	0x40020070
 80014e4:	40020088 	.word	0x40020088
 80014e8:	400200a0 	.word	0x400200a0
 80014ec:	400200b8 	.word	0x400200b8
 80014f0:	40020410 	.word	0x40020410
 80014f4:	40020428 	.word	0x40020428
 80014f8:	40020440 	.word	0x40020440
 80014fc:	40020458 	.word	0x40020458
 8001500:	40020470 	.word	0x40020470
 8001504:	40020488 	.word	0x40020488
 8001508:	400204a0 	.word	0x400204a0
 800150c:	400204b8 	.word	0x400204b8
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0308 	and.w	r3, r3, #8
 800151a:	2b00      	cmp	r3, #0
 800151c:	bf14      	ite	ne
 800151e:	2301      	movne	r3, #1
 8001520:	2300      	moveq	r3, #0
 8001522:	b2db      	uxtb	r3, r3
 8001524:	2b00      	cmp	r3, #0
 8001526:	d015      	beq.n	8001554 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f022 0204 	bic.w	r2, r2, #4
 8001536:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800153c:	f003 031f 	and.w	r3, r3, #31
 8001540:	2208      	movs	r2, #8
 8001542:	409a      	lsls	r2, r3
 8001544:	6a3b      	ldr	r3, [r7, #32]
 8001546:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800154c:	f043 0201 	orr.w	r2, r3, #1
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001558:	f003 031f 	and.w	r3, r3, #31
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	fa22 f303 	lsr.w	r3, r2, r3
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	2b00      	cmp	r3, #0
 8001568:	d06e      	beq.n	8001648 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a69      	ldr	r2, [pc, #420]	; (8001714 <HAL_DMA_IRQHandler+0x3f8>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d04a      	beq.n	800160a <HAL_DMA_IRQHandler+0x2ee>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a67      	ldr	r2, [pc, #412]	; (8001718 <HAL_DMA_IRQHandler+0x3fc>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d045      	beq.n	800160a <HAL_DMA_IRQHandler+0x2ee>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a66      	ldr	r2, [pc, #408]	; (800171c <HAL_DMA_IRQHandler+0x400>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d040      	beq.n	800160a <HAL_DMA_IRQHandler+0x2ee>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a64      	ldr	r2, [pc, #400]	; (8001720 <HAL_DMA_IRQHandler+0x404>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d03b      	beq.n	800160a <HAL_DMA_IRQHandler+0x2ee>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a63      	ldr	r2, [pc, #396]	; (8001724 <HAL_DMA_IRQHandler+0x408>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d036      	beq.n	800160a <HAL_DMA_IRQHandler+0x2ee>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a61      	ldr	r2, [pc, #388]	; (8001728 <HAL_DMA_IRQHandler+0x40c>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d031      	beq.n	800160a <HAL_DMA_IRQHandler+0x2ee>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a60      	ldr	r2, [pc, #384]	; (800172c <HAL_DMA_IRQHandler+0x410>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d02c      	beq.n	800160a <HAL_DMA_IRQHandler+0x2ee>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a5e      	ldr	r2, [pc, #376]	; (8001730 <HAL_DMA_IRQHandler+0x414>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d027      	beq.n	800160a <HAL_DMA_IRQHandler+0x2ee>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a5d      	ldr	r2, [pc, #372]	; (8001734 <HAL_DMA_IRQHandler+0x418>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d022      	beq.n	800160a <HAL_DMA_IRQHandler+0x2ee>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a5b      	ldr	r2, [pc, #364]	; (8001738 <HAL_DMA_IRQHandler+0x41c>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d01d      	beq.n	800160a <HAL_DMA_IRQHandler+0x2ee>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a5a      	ldr	r2, [pc, #360]	; (800173c <HAL_DMA_IRQHandler+0x420>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d018      	beq.n	800160a <HAL_DMA_IRQHandler+0x2ee>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a58      	ldr	r2, [pc, #352]	; (8001740 <HAL_DMA_IRQHandler+0x424>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d013      	beq.n	800160a <HAL_DMA_IRQHandler+0x2ee>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a57      	ldr	r2, [pc, #348]	; (8001744 <HAL_DMA_IRQHandler+0x428>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d00e      	beq.n	800160a <HAL_DMA_IRQHandler+0x2ee>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a55      	ldr	r2, [pc, #340]	; (8001748 <HAL_DMA_IRQHandler+0x42c>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d009      	beq.n	800160a <HAL_DMA_IRQHandler+0x2ee>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a54      	ldr	r2, [pc, #336]	; (800174c <HAL_DMA_IRQHandler+0x430>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d004      	beq.n	800160a <HAL_DMA_IRQHandler+0x2ee>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a52      	ldr	r2, [pc, #328]	; (8001750 <HAL_DMA_IRQHandler+0x434>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d10a      	bne.n	8001620 <HAL_DMA_IRQHandler+0x304>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	695b      	ldr	r3, [r3, #20]
 8001610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001614:	2b00      	cmp	r3, #0
 8001616:	bf14      	ite	ne
 8001618:	2301      	movne	r3, #1
 800161a:	2300      	moveq	r3, #0
 800161c:	b2db      	uxtb	r3, r3
 800161e:	e003      	b.n	8001628 <HAL_DMA_IRQHandler+0x30c>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	2300      	movs	r3, #0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d00d      	beq.n	8001648 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001630:	f003 031f 	and.w	r3, r3, #31
 8001634:	2201      	movs	r2, #1
 8001636:	409a      	lsls	r2, r3
 8001638:	6a3b      	ldr	r3, [r7, #32]
 800163a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001640:	f043 0202 	orr.w	r2, r3, #2
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800164c:	f003 031f 	and.w	r3, r3, #31
 8001650:	2204      	movs	r2, #4
 8001652:	409a      	lsls	r2, r3
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	4013      	ands	r3, r2
 8001658:	2b00      	cmp	r3, #0
 800165a:	f000 808f 	beq.w	800177c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a2c      	ldr	r2, [pc, #176]	; (8001714 <HAL_DMA_IRQHandler+0x3f8>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d04a      	beq.n	80016fe <HAL_DMA_IRQHandler+0x3e2>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a2a      	ldr	r2, [pc, #168]	; (8001718 <HAL_DMA_IRQHandler+0x3fc>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d045      	beq.n	80016fe <HAL_DMA_IRQHandler+0x3e2>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a29      	ldr	r2, [pc, #164]	; (800171c <HAL_DMA_IRQHandler+0x400>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d040      	beq.n	80016fe <HAL_DMA_IRQHandler+0x3e2>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a27      	ldr	r2, [pc, #156]	; (8001720 <HAL_DMA_IRQHandler+0x404>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d03b      	beq.n	80016fe <HAL_DMA_IRQHandler+0x3e2>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a26      	ldr	r2, [pc, #152]	; (8001724 <HAL_DMA_IRQHandler+0x408>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d036      	beq.n	80016fe <HAL_DMA_IRQHandler+0x3e2>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a24      	ldr	r2, [pc, #144]	; (8001728 <HAL_DMA_IRQHandler+0x40c>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d031      	beq.n	80016fe <HAL_DMA_IRQHandler+0x3e2>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a23      	ldr	r2, [pc, #140]	; (800172c <HAL_DMA_IRQHandler+0x410>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d02c      	beq.n	80016fe <HAL_DMA_IRQHandler+0x3e2>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a21      	ldr	r2, [pc, #132]	; (8001730 <HAL_DMA_IRQHandler+0x414>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d027      	beq.n	80016fe <HAL_DMA_IRQHandler+0x3e2>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a20      	ldr	r2, [pc, #128]	; (8001734 <HAL_DMA_IRQHandler+0x418>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d022      	beq.n	80016fe <HAL_DMA_IRQHandler+0x3e2>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a1e      	ldr	r2, [pc, #120]	; (8001738 <HAL_DMA_IRQHandler+0x41c>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d01d      	beq.n	80016fe <HAL_DMA_IRQHandler+0x3e2>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a1d      	ldr	r2, [pc, #116]	; (800173c <HAL_DMA_IRQHandler+0x420>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d018      	beq.n	80016fe <HAL_DMA_IRQHandler+0x3e2>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a1b      	ldr	r2, [pc, #108]	; (8001740 <HAL_DMA_IRQHandler+0x424>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d013      	beq.n	80016fe <HAL_DMA_IRQHandler+0x3e2>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a1a      	ldr	r2, [pc, #104]	; (8001744 <HAL_DMA_IRQHandler+0x428>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d00e      	beq.n	80016fe <HAL_DMA_IRQHandler+0x3e2>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a18      	ldr	r2, [pc, #96]	; (8001748 <HAL_DMA_IRQHandler+0x42c>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d009      	beq.n	80016fe <HAL_DMA_IRQHandler+0x3e2>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a17      	ldr	r2, [pc, #92]	; (800174c <HAL_DMA_IRQHandler+0x430>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d004      	beq.n	80016fe <HAL_DMA_IRQHandler+0x3e2>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a15      	ldr	r2, [pc, #84]	; (8001750 <HAL_DMA_IRQHandler+0x434>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d12a      	bne.n	8001754 <HAL_DMA_IRQHandler+0x438>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0302 	and.w	r3, r3, #2
 8001708:	2b00      	cmp	r3, #0
 800170a:	bf14      	ite	ne
 800170c:	2301      	movne	r3, #1
 800170e:	2300      	moveq	r3, #0
 8001710:	b2db      	uxtb	r3, r3
 8001712:	e023      	b.n	800175c <HAL_DMA_IRQHandler+0x440>
 8001714:	40020010 	.word	0x40020010
 8001718:	40020028 	.word	0x40020028
 800171c:	40020040 	.word	0x40020040
 8001720:	40020058 	.word	0x40020058
 8001724:	40020070 	.word	0x40020070
 8001728:	40020088 	.word	0x40020088
 800172c:	400200a0 	.word	0x400200a0
 8001730:	400200b8 	.word	0x400200b8
 8001734:	40020410 	.word	0x40020410
 8001738:	40020428 	.word	0x40020428
 800173c:	40020440 	.word	0x40020440
 8001740:	40020458 	.word	0x40020458
 8001744:	40020470 	.word	0x40020470
 8001748:	40020488 	.word	0x40020488
 800174c:	400204a0 	.word	0x400204a0
 8001750:	400204b8 	.word	0x400204b8
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2300      	movs	r3, #0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d00d      	beq.n	800177c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001764:	f003 031f 	and.w	r3, r3, #31
 8001768:	2204      	movs	r2, #4
 800176a:	409a      	lsls	r2, r3
 800176c:	6a3b      	ldr	r3, [r7, #32]
 800176e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001774:	f043 0204 	orr.w	r2, r3, #4
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001780:	f003 031f 	and.w	r3, r3, #31
 8001784:	2210      	movs	r2, #16
 8001786:	409a      	lsls	r2, r3
 8001788:	69bb      	ldr	r3, [r7, #24]
 800178a:	4013      	ands	r3, r2
 800178c:	2b00      	cmp	r3, #0
 800178e:	f000 80a6 	beq.w	80018de <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a85      	ldr	r2, [pc, #532]	; (80019ac <HAL_DMA_IRQHandler+0x690>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d04a      	beq.n	8001832 <HAL_DMA_IRQHandler+0x516>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a83      	ldr	r2, [pc, #524]	; (80019b0 <HAL_DMA_IRQHandler+0x694>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d045      	beq.n	8001832 <HAL_DMA_IRQHandler+0x516>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a82      	ldr	r2, [pc, #520]	; (80019b4 <HAL_DMA_IRQHandler+0x698>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d040      	beq.n	8001832 <HAL_DMA_IRQHandler+0x516>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a80      	ldr	r2, [pc, #512]	; (80019b8 <HAL_DMA_IRQHandler+0x69c>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d03b      	beq.n	8001832 <HAL_DMA_IRQHandler+0x516>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a7f      	ldr	r2, [pc, #508]	; (80019bc <HAL_DMA_IRQHandler+0x6a0>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d036      	beq.n	8001832 <HAL_DMA_IRQHandler+0x516>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a7d      	ldr	r2, [pc, #500]	; (80019c0 <HAL_DMA_IRQHandler+0x6a4>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d031      	beq.n	8001832 <HAL_DMA_IRQHandler+0x516>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a7c      	ldr	r2, [pc, #496]	; (80019c4 <HAL_DMA_IRQHandler+0x6a8>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d02c      	beq.n	8001832 <HAL_DMA_IRQHandler+0x516>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a7a      	ldr	r2, [pc, #488]	; (80019c8 <HAL_DMA_IRQHandler+0x6ac>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d027      	beq.n	8001832 <HAL_DMA_IRQHandler+0x516>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a79      	ldr	r2, [pc, #484]	; (80019cc <HAL_DMA_IRQHandler+0x6b0>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d022      	beq.n	8001832 <HAL_DMA_IRQHandler+0x516>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a77      	ldr	r2, [pc, #476]	; (80019d0 <HAL_DMA_IRQHandler+0x6b4>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d01d      	beq.n	8001832 <HAL_DMA_IRQHandler+0x516>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a76      	ldr	r2, [pc, #472]	; (80019d4 <HAL_DMA_IRQHandler+0x6b8>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d018      	beq.n	8001832 <HAL_DMA_IRQHandler+0x516>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a74      	ldr	r2, [pc, #464]	; (80019d8 <HAL_DMA_IRQHandler+0x6bc>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d013      	beq.n	8001832 <HAL_DMA_IRQHandler+0x516>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a73      	ldr	r2, [pc, #460]	; (80019dc <HAL_DMA_IRQHandler+0x6c0>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d00e      	beq.n	8001832 <HAL_DMA_IRQHandler+0x516>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a71      	ldr	r2, [pc, #452]	; (80019e0 <HAL_DMA_IRQHandler+0x6c4>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d009      	beq.n	8001832 <HAL_DMA_IRQHandler+0x516>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a70      	ldr	r2, [pc, #448]	; (80019e4 <HAL_DMA_IRQHandler+0x6c8>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d004      	beq.n	8001832 <HAL_DMA_IRQHandler+0x516>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a6e      	ldr	r2, [pc, #440]	; (80019e8 <HAL_DMA_IRQHandler+0x6cc>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d10a      	bne.n	8001848 <HAL_DMA_IRQHandler+0x52c>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0308 	and.w	r3, r3, #8
 800183c:	2b00      	cmp	r3, #0
 800183e:	bf14      	ite	ne
 8001840:	2301      	movne	r3, #1
 8001842:	2300      	moveq	r3, #0
 8001844:	b2db      	uxtb	r3, r3
 8001846:	e009      	b.n	800185c <HAL_DMA_IRQHandler+0x540>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0304 	and.w	r3, r3, #4
 8001852:	2b00      	cmp	r3, #0
 8001854:	bf14      	ite	ne
 8001856:	2301      	movne	r3, #1
 8001858:	2300      	moveq	r3, #0
 800185a:	b2db      	uxtb	r3, r3
 800185c:	2b00      	cmp	r3, #0
 800185e:	d03e      	beq.n	80018de <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001864:	f003 031f 	and.w	r3, r3, #31
 8001868:	2210      	movs	r2, #16
 800186a:	409a      	lsls	r2, r3
 800186c:	6a3b      	ldr	r3, [r7, #32]
 800186e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d018      	beq.n	80018b0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001888:	2b00      	cmp	r3, #0
 800188a:	d108      	bne.n	800189e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001890:	2b00      	cmp	r3, #0
 8001892:	d024      	beq.n	80018de <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	4798      	blx	r3
 800189c:	e01f      	b.n	80018de <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d01b      	beq.n	80018de <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	4798      	blx	r3
 80018ae:	e016      	b.n	80018de <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d107      	bne.n	80018ce <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f022 0208 	bic.w	r2, r2, #8
 80018cc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d003      	beq.n	80018de <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018e2:	f003 031f 	and.w	r3, r3, #31
 80018e6:	2220      	movs	r2, #32
 80018e8:	409a      	lsls	r2, r3
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	4013      	ands	r3, r2
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	f000 8110 	beq.w	8001b14 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a2c      	ldr	r2, [pc, #176]	; (80019ac <HAL_DMA_IRQHandler+0x690>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d04a      	beq.n	8001994 <HAL_DMA_IRQHandler+0x678>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a2b      	ldr	r2, [pc, #172]	; (80019b0 <HAL_DMA_IRQHandler+0x694>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d045      	beq.n	8001994 <HAL_DMA_IRQHandler+0x678>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a29      	ldr	r2, [pc, #164]	; (80019b4 <HAL_DMA_IRQHandler+0x698>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d040      	beq.n	8001994 <HAL_DMA_IRQHandler+0x678>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a28      	ldr	r2, [pc, #160]	; (80019b8 <HAL_DMA_IRQHandler+0x69c>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d03b      	beq.n	8001994 <HAL_DMA_IRQHandler+0x678>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a26      	ldr	r2, [pc, #152]	; (80019bc <HAL_DMA_IRQHandler+0x6a0>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d036      	beq.n	8001994 <HAL_DMA_IRQHandler+0x678>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a25      	ldr	r2, [pc, #148]	; (80019c0 <HAL_DMA_IRQHandler+0x6a4>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d031      	beq.n	8001994 <HAL_DMA_IRQHandler+0x678>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a23      	ldr	r2, [pc, #140]	; (80019c4 <HAL_DMA_IRQHandler+0x6a8>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d02c      	beq.n	8001994 <HAL_DMA_IRQHandler+0x678>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a22      	ldr	r2, [pc, #136]	; (80019c8 <HAL_DMA_IRQHandler+0x6ac>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d027      	beq.n	8001994 <HAL_DMA_IRQHandler+0x678>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a20      	ldr	r2, [pc, #128]	; (80019cc <HAL_DMA_IRQHandler+0x6b0>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d022      	beq.n	8001994 <HAL_DMA_IRQHandler+0x678>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a1f      	ldr	r2, [pc, #124]	; (80019d0 <HAL_DMA_IRQHandler+0x6b4>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d01d      	beq.n	8001994 <HAL_DMA_IRQHandler+0x678>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a1d      	ldr	r2, [pc, #116]	; (80019d4 <HAL_DMA_IRQHandler+0x6b8>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d018      	beq.n	8001994 <HAL_DMA_IRQHandler+0x678>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a1c      	ldr	r2, [pc, #112]	; (80019d8 <HAL_DMA_IRQHandler+0x6bc>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d013      	beq.n	8001994 <HAL_DMA_IRQHandler+0x678>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a1a      	ldr	r2, [pc, #104]	; (80019dc <HAL_DMA_IRQHandler+0x6c0>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d00e      	beq.n	8001994 <HAL_DMA_IRQHandler+0x678>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a19      	ldr	r2, [pc, #100]	; (80019e0 <HAL_DMA_IRQHandler+0x6c4>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d009      	beq.n	8001994 <HAL_DMA_IRQHandler+0x678>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a17      	ldr	r2, [pc, #92]	; (80019e4 <HAL_DMA_IRQHandler+0x6c8>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d004      	beq.n	8001994 <HAL_DMA_IRQHandler+0x678>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a16      	ldr	r2, [pc, #88]	; (80019e8 <HAL_DMA_IRQHandler+0x6cc>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d12b      	bne.n	80019ec <HAL_DMA_IRQHandler+0x6d0>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0310 	and.w	r3, r3, #16
 800199e:	2b00      	cmp	r3, #0
 80019a0:	bf14      	ite	ne
 80019a2:	2301      	movne	r3, #1
 80019a4:	2300      	moveq	r3, #0
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	e02a      	b.n	8001a00 <HAL_DMA_IRQHandler+0x6e4>
 80019aa:	bf00      	nop
 80019ac:	40020010 	.word	0x40020010
 80019b0:	40020028 	.word	0x40020028
 80019b4:	40020040 	.word	0x40020040
 80019b8:	40020058 	.word	0x40020058
 80019bc:	40020070 	.word	0x40020070
 80019c0:	40020088 	.word	0x40020088
 80019c4:	400200a0 	.word	0x400200a0
 80019c8:	400200b8 	.word	0x400200b8
 80019cc:	40020410 	.word	0x40020410
 80019d0:	40020428 	.word	0x40020428
 80019d4:	40020440 	.word	0x40020440
 80019d8:	40020458 	.word	0x40020458
 80019dc:	40020470 	.word	0x40020470
 80019e0:	40020488 	.word	0x40020488
 80019e4:	400204a0 	.word	0x400204a0
 80019e8:	400204b8 	.word	0x400204b8
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0302 	and.w	r3, r3, #2
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	bf14      	ite	ne
 80019fa:	2301      	movne	r3, #1
 80019fc:	2300      	moveq	r3, #0
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	f000 8087 	beq.w	8001b14 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a0a:	f003 031f 	and.w	r3, r3, #31
 8001a0e:	2220      	movs	r2, #32
 8001a10:	409a      	lsls	r2, r3
 8001a12:	6a3b      	ldr	r3, [r7, #32]
 8001a14:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	2b04      	cmp	r3, #4
 8001a20:	d139      	bne.n	8001a96 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f022 0216 	bic.w	r2, r2, #22
 8001a30:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	695a      	ldr	r2, [r3, #20]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a40:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d103      	bne.n	8001a52 <HAL_DMA_IRQHandler+0x736>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d007      	beq.n	8001a62 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f022 0208 	bic.w	r2, r2, #8
 8001a60:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a66:	f003 031f 	and.w	r3, r3, #31
 8001a6a:	223f      	movs	r2, #63	; 0x3f
 8001a6c:	409a      	lsls	r2, r3
 8001a6e:	6a3b      	ldr	r3, [r7, #32]
 8001a70:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2201      	movs	r2, #1
 8001a76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	f000 834a 	beq.w	8002120 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	4798      	blx	r3
          }
          return;
 8001a94:	e344      	b.n	8002120 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d018      	beq.n	8001ad6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d108      	bne.n	8001ac4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d02c      	beq.n	8001b14 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	4798      	blx	r3
 8001ac2:	e027      	b.n	8001b14 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d023      	beq.n	8001b14 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	4798      	blx	r3
 8001ad4:	e01e      	b.n	8001b14 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d10f      	bne.n	8001b04 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f022 0210 	bic.w	r2, r2, #16
 8001af2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2201      	movs	r2, #1
 8001af8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2200      	movs	r2, #0
 8001b00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d003      	beq.n	8001b14 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	f000 8306 	beq.w	800212a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	f000 8088 	beq.w	8001c3c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2204      	movs	r2, #4
 8001b30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a7a      	ldr	r2, [pc, #488]	; (8001d24 <HAL_DMA_IRQHandler+0xa08>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d04a      	beq.n	8001bd4 <HAL_DMA_IRQHandler+0x8b8>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a79      	ldr	r2, [pc, #484]	; (8001d28 <HAL_DMA_IRQHandler+0xa0c>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d045      	beq.n	8001bd4 <HAL_DMA_IRQHandler+0x8b8>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a77      	ldr	r2, [pc, #476]	; (8001d2c <HAL_DMA_IRQHandler+0xa10>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d040      	beq.n	8001bd4 <HAL_DMA_IRQHandler+0x8b8>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a76      	ldr	r2, [pc, #472]	; (8001d30 <HAL_DMA_IRQHandler+0xa14>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d03b      	beq.n	8001bd4 <HAL_DMA_IRQHandler+0x8b8>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a74      	ldr	r2, [pc, #464]	; (8001d34 <HAL_DMA_IRQHandler+0xa18>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d036      	beq.n	8001bd4 <HAL_DMA_IRQHandler+0x8b8>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a73      	ldr	r2, [pc, #460]	; (8001d38 <HAL_DMA_IRQHandler+0xa1c>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d031      	beq.n	8001bd4 <HAL_DMA_IRQHandler+0x8b8>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a71      	ldr	r2, [pc, #452]	; (8001d3c <HAL_DMA_IRQHandler+0xa20>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d02c      	beq.n	8001bd4 <HAL_DMA_IRQHandler+0x8b8>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a70      	ldr	r2, [pc, #448]	; (8001d40 <HAL_DMA_IRQHandler+0xa24>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d027      	beq.n	8001bd4 <HAL_DMA_IRQHandler+0x8b8>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a6e      	ldr	r2, [pc, #440]	; (8001d44 <HAL_DMA_IRQHandler+0xa28>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d022      	beq.n	8001bd4 <HAL_DMA_IRQHandler+0x8b8>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a6d      	ldr	r2, [pc, #436]	; (8001d48 <HAL_DMA_IRQHandler+0xa2c>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d01d      	beq.n	8001bd4 <HAL_DMA_IRQHandler+0x8b8>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a6b      	ldr	r2, [pc, #428]	; (8001d4c <HAL_DMA_IRQHandler+0xa30>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d018      	beq.n	8001bd4 <HAL_DMA_IRQHandler+0x8b8>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a6a      	ldr	r2, [pc, #424]	; (8001d50 <HAL_DMA_IRQHandler+0xa34>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d013      	beq.n	8001bd4 <HAL_DMA_IRQHandler+0x8b8>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a68      	ldr	r2, [pc, #416]	; (8001d54 <HAL_DMA_IRQHandler+0xa38>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d00e      	beq.n	8001bd4 <HAL_DMA_IRQHandler+0x8b8>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a67      	ldr	r2, [pc, #412]	; (8001d58 <HAL_DMA_IRQHandler+0xa3c>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d009      	beq.n	8001bd4 <HAL_DMA_IRQHandler+0x8b8>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a65      	ldr	r2, [pc, #404]	; (8001d5c <HAL_DMA_IRQHandler+0xa40>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d004      	beq.n	8001bd4 <HAL_DMA_IRQHandler+0x8b8>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a64      	ldr	r2, [pc, #400]	; (8001d60 <HAL_DMA_IRQHandler+0xa44>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d108      	bne.n	8001be6 <HAL_DMA_IRQHandler+0x8ca>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f022 0201 	bic.w	r2, r2, #1
 8001be2:	601a      	str	r2, [r3, #0]
 8001be4:	e007      	b.n	8001bf6 <HAL_DMA_IRQHandler+0x8da>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f022 0201 	bic.w	r2, r2, #1
 8001bf4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	60fb      	str	r3, [r7, #12]
 8001bfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d307      	bcc.n	8001c12 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0301 	and.w	r3, r3, #1
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d1f2      	bne.n	8001bf6 <HAL_DMA_IRQHandler+0x8da>
 8001c10:	e000      	b.n	8001c14 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8001c12:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d004      	beq.n	8001c2c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2203      	movs	r2, #3
 8001c26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8001c2a:	e003      	b.n	8001c34 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2200      	movs	r2, #0
 8001c38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	f000 8272 	beq.w	800212a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	4798      	blx	r3
 8001c4e:	e26c      	b.n	800212a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a43      	ldr	r2, [pc, #268]	; (8001d64 <HAL_DMA_IRQHandler+0xa48>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d022      	beq.n	8001ca0 <HAL_DMA_IRQHandler+0x984>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a42      	ldr	r2, [pc, #264]	; (8001d68 <HAL_DMA_IRQHandler+0xa4c>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d01d      	beq.n	8001ca0 <HAL_DMA_IRQHandler+0x984>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a40      	ldr	r2, [pc, #256]	; (8001d6c <HAL_DMA_IRQHandler+0xa50>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d018      	beq.n	8001ca0 <HAL_DMA_IRQHandler+0x984>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a3f      	ldr	r2, [pc, #252]	; (8001d70 <HAL_DMA_IRQHandler+0xa54>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d013      	beq.n	8001ca0 <HAL_DMA_IRQHandler+0x984>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a3d      	ldr	r2, [pc, #244]	; (8001d74 <HAL_DMA_IRQHandler+0xa58>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d00e      	beq.n	8001ca0 <HAL_DMA_IRQHandler+0x984>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a3c      	ldr	r2, [pc, #240]	; (8001d78 <HAL_DMA_IRQHandler+0xa5c>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d009      	beq.n	8001ca0 <HAL_DMA_IRQHandler+0x984>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a3a      	ldr	r2, [pc, #232]	; (8001d7c <HAL_DMA_IRQHandler+0xa60>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d004      	beq.n	8001ca0 <HAL_DMA_IRQHandler+0x984>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a39      	ldr	r2, [pc, #228]	; (8001d80 <HAL_DMA_IRQHandler+0xa64>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d101      	bne.n	8001ca4 <HAL_DMA_IRQHandler+0x988>
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e000      	b.n	8001ca6 <HAL_DMA_IRQHandler+0x98a>
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	f000 823f 	beq.w	800212a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cb8:	f003 031f 	and.w	r3, r3, #31
 8001cbc:	2204      	movs	r2, #4
 8001cbe:	409a      	lsls	r2, r3
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	f000 80cd 	beq.w	8001e64 <HAL_DMA_IRQHandler+0xb48>
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	f003 0304 	and.w	r3, r3, #4
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	f000 80c7 	beq.w	8001e64 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cda:	f003 031f 	and.w	r3, r3, #31
 8001cde:	2204      	movs	r2, #4
 8001ce0:	409a      	lsls	r2, r3
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d049      	beq.n	8001d84 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d109      	bne.n	8001d0e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	f000 8210 	beq.w	8002124 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001d0c:	e20a      	b.n	8002124 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	f000 8206 	beq.w	8002124 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001d20:	e200      	b.n	8002124 <HAL_DMA_IRQHandler+0xe08>
 8001d22:	bf00      	nop
 8001d24:	40020010 	.word	0x40020010
 8001d28:	40020028 	.word	0x40020028
 8001d2c:	40020040 	.word	0x40020040
 8001d30:	40020058 	.word	0x40020058
 8001d34:	40020070 	.word	0x40020070
 8001d38:	40020088 	.word	0x40020088
 8001d3c:	400200a0 	.word	0x400200a0
 8001d40:	400200b8 	.word	0x400200b8
 8001d44:	40020410 	.word	0x40020410
 8001d48:	40020428 	.word	0x40020428
 8001d4c:	40020440 	.word	0x40020440
 8001d50:	40020458 	.word	0x40020458
 8001d54:	40020470 	.word	0x40020470
 8001d58:	40020488 	.word	0x40020488
 8001d5c:	400204a0 	.word	0x400204a0
 8001d60:	400204b8 	.word	0x400204b8
 8001d64:	58025408 	.word	0x58025408
 8001d68:	5802541c 	.word	0x5802541c
 8001d6c:	58025430 	.word	0x58025430
 8001d70:	58025444 	.word	0x58025444
 8001d74:	58025458 	.word	0x58025458
 8001d78:	5802546c 	.word	0x5802546c
 8001d7c:	58025480 	.word	0x58025480
 8001d80:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	f003 0320 	and.w	r3, r3, #32
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d160      	bne.n	8001e50 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a8c      	ldr	r2, [pc, #560]	; (8001fc4 <HAL_DMA_IRQHandler+0xca8>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d04a      	beq.n	8001e2e <HAL_DMA_IRQHandler+0xb12>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a8a      	ldr	r2, [pc, #552]	; (8001fc8 <HAL_DMA_IRQHandler+0xcac>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d045      	beq.n	8001e2e <HAL_DMA_IRQHandler+0xb12>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a89      	ldr	r2, [pc, #548]	; (8001fcc <HAL_DMA_IRQHandler+0xcb0>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d040      	beq.n	8001e2e <HAL_DMA_IRQHandler+0xb12>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a87      	ldr	r2, [pc, #540]	; (8001fd0 <HAL_DMA_IRQHandler+0xcb4>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d03b      	beq.n	8001e2e <HAL_DMA_IRQHandler+0xb12>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a86      	ldr	r2, [pc, #536]	; (8001fd4 <HAL_DMA_IRQHandler+0xcb8>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d036      	beq.n	8001e2e <HAL_DMA_IRQHandler+0xb12>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a84      	ldr	r2, [pc, #528]	; (8001fd8 <HAL_DMA_IRQHandler+0xcbc>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d031      	beq.n	8001e2e <HAL_DMA_IRQHandler+0xb12>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a83      	ldr	r2, [pc, #524]	; (8001fdc <HAL_DMA_IRQHandler+0xcc0>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d02c      	beq.n	8001e2e <HAL_DMA_IRQHandler+0xb12>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a81      	ldr	r2, [pc, #516]	; (8001fe0 <HAL_DMA_IRQHandler+0xcc4>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d027      	beq.n	8001e2e <HAL_DMA_IRQHandler+0xb12>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a80      	ldr	r2, [pc, #512]	; (8001fe4 <HAL_DMA_IRQHandler+0xcc8>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d022      	beq.n	8001e2e <HAL_DMA_IRQHandler+0xb12>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a7e      	ldr	r2, [pc, #504]	; (8001fe8 <HAL_DMA_IRQHandler+0xccc>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d01d      	beq.n	8001e2e <HAL_DMA_IRQHandler+0xb12>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a7d      	ldr	r2, [pc, #500]	; (8001fec <HAL_DMA_IRQHandler+0xcd0>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d018      	beq.n	8001e2e <HAL_DMA_IRQHandler+0xb12>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a7b      	ldr	r2, [pc, #492]	; (8001ff0 <HAL_DMA_IRQHandler+0xcd4>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d013      	beq.n	8001e2e <HAL_DMA_IRQHandler+0xb12>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a7a      	ldr	r2, [pc, #488]	; (8001ff4 <HAL_DMA_IRQHandler+0xcd8>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d00e      	beq.n	8001e2e <HAL_DMA_IRQHandler+0xb12>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a78      	ldr	r2, [pc, #480]	; (8001ff8 <HAL_DMA_IRQHandler+0xcdc>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d009      	beq.n	8001e2e <HAL_DMA_IRQHandler+0xb12>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a77      	ldr	r2, [pc, #476]	; (8001ffc <HAL_DMA_IRQHandler+0xce0>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d004      	beq.n	8001e2e <HAL_DMA_IRQHandler+0xb12>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a75      	ldr	r2, [pc, #468]	; (8002000 <HAL_DMA_IRQHandler+0xce4>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d108      	bne.n	8001e40 <HAL_DMA_IRQHandler+0xb24>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f022 0208 	bic.w	r2, r2, #8
 8001e3c:	601a      	str	r2, [r3, #0]
 8001e3e:	e007      	b.n	8001e50 <HAL_DMA_IRQHandler+0xb34>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f022 0204 	bic.w	r2, r2, #4
 8001e4e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	f000 8165 	beq.w	8002124 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001e62:	e15f      	b.n	8002124 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e68:	f003 031f 	and.w	r3, r3, #31
 8001e6c:	2202      	movs	r2, #2
 8001e6e:	409a      	lsls	r2, r3
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	4013      	ands	r3, r2
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	f000 80c5 	beq.w	8002004 <HAL_DMA_IRQHandler+0xce8>
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	f003 0302 	and.w	r3, r3, #2
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	f000 80bf 	beq.w	8002004 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e8a:	f003 031f 	and.w	r3, r3, #31
 8001e8e:	2202      	movs	r2, #2
 8001e90:	409a      	lsls	r2, r3
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d018      	beq.n	8001ed2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d109      	bne.n	8001ebe <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f000 813a 	beq.w	8002128 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001ebc:	e134      	b.n	8002128 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	f000 8130 	beq.w	8002128 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001ed0:	e12a      	b.n	8002128 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	f003 0320 	and.w	r3, r3, #32
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d168      	bne.n	8001fae <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a38      	ldr	r2, [pc, #224]	; (8001fc4 <HAL_DMA_IRQHandler+0xca8>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d04a      	beq.n	8001f7c <HAL_DMA_IRQHandler+0xc60>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a37      	ldr	r2, [pc, #220]	; (8001fc8 <HAL_DMA_IRQHandler+0xcac>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d045      	beq.n	8001f7c <HAL_DMA_IRQHandler+0xc60>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a35      	ldr	r2, [pc, #212]	; (8001fcc <HAL_DMA_IRQHandler+0xcb0>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d040      	beq.n	8001f7c <HAL_DMA_IRQHandler+0xc60>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a34      	ldr	r2, [pc, #208]	; (8001fd0 <HAL_DMA_IRQHandler+0xcb4>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d03b      	beq.n	8001f7c <HAL_DMA_IRQHandler+0xc60>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a32      	ldr	r2, [pc, #200]	; (8001fd4 <HAL_DMA_IRQHandler+0xcb8>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d036      	beq.n	8001f7c <HAL_DMA_IRQHandler+0xc60>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a31      	ldr	r2, [pc, #196]	; (8001fd8 <HAL_DMA_IRQHandler+0xcbc>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d031      	beq.n	8001f7c <HAL_DMA_IRQHandler+0xc60>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a2f      	ldr	r2, [pc, #188]	; (8001fdc <HAL_DMA_IRQHandler+0xcc0>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d02c      	beq.n	8001f7c <HAL_DMA_IRQHandler+0xc60>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a2e      	ldr	r2, [pc, #184]	; (8001fe0 <HAL_DMA_IRQHandler+0xcc4>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d027      	beq.n	8001f7c <HAL_DMA_IRQHandler+0xc60>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a2c      	ldr	r2, [pc, #176]	; (8001fe4 <HAL_DMA_IRQHandler+0xcc8>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d022      	beq.n	8001f7c <HAL_DMA_IRQHandler+0xc60>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a2b      	ldr	r2, [pc, #172]	; (8001fe8 <HAL_DMA_IRQHandler+0xccc>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d01d      	beq.n	8001f7c <HAL_DMA_IRQHandler+0xc60>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a29      	ldr	r2, [pc, #164]	; (8001fec <HAL_DMA_IRQHandler+0xcd0>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d018      	beq.n	8001f7c <HAL_DMA_IRQHandler+0xc60>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a28      	ldr	r2, [pc, #160]	; (8001ff0 <HAL_DMA_IRQHandler+0xcd4>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d013      	beq.n	8001f7c <HAL_DMA_IRQHandler+0xc60>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a26      	ldr	r2, [pc, #152]	; (8001ff4 <HAL_DMA_IRQHandler+0xcd8>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d00e      	beq.n	8001f7c <HAL_DMA_IRQHandler+0xc60>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a25      	ldr	r2, [pc, #148]	; (8001ff8 <HAL_DMA_IRQHandler+0xcdc>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d009      	beq.n	8001f7c <HAL_DMA_IRQHandler+0xc60>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a23      	ldr	r2, [pc, #140]	; (8001ffc <HAL_DMA_IRQHandler+0xce0>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d004      	beq.n	8001f7c <HAL_DMA_IRQHandler+0xc60>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a22      	ldr	r2, [pc, #136]	; (8002000 <HAL_DMA_IRQHandler+0xce4>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d108      	bne.n	8001f8e <HAL_DMA_IRQHandler+0xc72>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f022 0214 	bic.w	r2, r2, #20
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	e007      	b.n	8001f9e <HAL_DMA_IRQHandler+0xc82>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f022 020a 	bic.w	r2, r2, #10
 8001f9c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	f000 80b8 	beq.w	8002128 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001fc0:	e0b2      	b.n	8002128 <HAL_DMA_IRQHandler+0xe0c>
 8001fc2:	bf00      	nop
 8001fc4:	40020010 	.word	0x40020010
 8001fc8:	40020028 	.word	0x40020028
 8001fcc:	40020040 	.word	0x40020040
 8001fd0:	40020058 	.word	0x40020058
 8001fd4:	40020070 	.word	0x40020070
 8001fd8:	40020088 	.word	0x40020088
 8001fdc:	400200a0 	.word	0x400200a0
 8001fe0:	400200b8 	.word	0x400200b8
 8001fe4:	40020410 	.word	0x40020410
 8001fe8:	40020428 	.word	0x40020428
 8001fec:	40020440 	.word	0x40020440
 8001ff0:	40020458 	.word	0x40020458
 8001ff4:	40020470 	.word	0x40020470
 8001ff8:	40020488 	.word	0x40020488
 8001ffc:	400204a0 	.word	0x400204a0
 8002000:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002008:	f003 031f 	and.w	r3, r3, #31
 800200c:	2208      	movs	r2, #8
 800200e:	409a      	lsls	r2, r3
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	4013      	ands	r3, r2
 8002014:	2b00      	cmp	r3, #0
 8002016:	f000 8088 	beq.w	800212a <HAL_DMA_IRQHandler+0xe0e>
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	f003 0308 	and.w	r3, r3, #8
 8002020:	2b00      	cmp	r3, #0
 8002022:	f000 8082 	beq.w	800212a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a41      	ldr	r2, [pc, #260]	; (8002130 <HAL_DMA_IRQHandler+0xe14>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d04a      	beq.n	80020c6 <HAL_DMA_IRQHandler+0xdaa>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a3f      	ldr	r2, [pc, #252]	; (8002134 <HAL_DMA_IRQHandler+0xe18>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d045      	beq.n	80020c6 <HAL_DMA_IRQHandler+0xdaa>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a3e      	ldr	r2, [pc, #248]	; (8002138 <HAL_DMA_IRQHandler+0xe1c>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d040      	beq.n	80020c6 <HAL_DMA_IRQHandler+0xdaa>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a3c      	ldr	r2, [pc, #240]	; (800213c <HAL_DMA_IRQHandler+0xe20>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d03b      	beq.n	80020c6 <HAL_DMA_IRQHandler+0xdaa>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a3b      	ldr	r2, [pc, #236]	; (8002140 <HAL_DMA_IRQHandler+0xe24>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d036      	beq.n	80020c6 <HAL_DMA_IRQHandler+0xdaa>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a39      	ldr	r2, [pc, #228]	; (8002144 <HAL_DMA_IRQHandler+0xe28>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d031      	beq.n	80020c6 <HAL_DMA_IRQHandler+0xdaa>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a38      	ldr	r2, [pc, #224]	; (8002148 <HAL_DMA_IRQHandler+0xe2c>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d02c      	beq.n	80020c6 <HAL_DMA_IRQHandler+0xdaa>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a36      	ldr	r2, [pc, #216]	; (800214c <HAL_DMA_IRQHandler+0xe30>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d027      	beq.n	80020c6 <HAL_DMA_IRQHandler+0xdaa>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a35      	ldr	r2, [pc, #212]	; (8002150 <HAL_DMA_IRQHandler+0xe34>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d022      	beq.n	80020c6 <HAL_DMA_IRQHandler+0xdaa>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a33      	ldr	r2, [pc, #204]	; (8002154 <HAL_DMA_IRQHandler+0xe38>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d01d      	beq.n	80020c6 <HAL_DMA_IRQHandler+0xdaa>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a32      	ldr	r2, [pc, #200]	; (8002158 <HAL_DMA_IRQHandler+0xe3c>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d018      	beq.n	80020c6 <HAL_DMA_IRQHandler+0xdaa>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a30      	ldr	r2, [pc, #192]	; (800215c <HAL_DMA_IRQHandler+0xe40>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d013      	beq.n	80020c6 <HAL_DMA_IRQHandler+0xdaa>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a2f      	ldr	r2, [pc, #188]	; (8002160 <HAL_DMA_IRQHandler+0xe44>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d00e      	beq.n	80020c6 <HAL_DMA_IRQHandler+0xdaa>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a2d      	ldr	r2, [pc, #180]	; (8002164 <HAL_DMA_IRQHandler+0xe48>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d009      	beq.n	80020c6 <HAL_DMA_IRQHandler+0xdaa>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a2c      	ldr	r2, [pc, #176]	; (8002168 <HAL_DMA_IRQHandler+0xe4c>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d004      	beq.n	80020c6 <HAL_DMA_IRQHandler+0xdaa>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a2a      	ldr	r2, [pc, #168]	; (800216c <HAL_DMA_IRQHandler+0xe50>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d108      	bne.n	80020d8 <HAL_DMA_IRQHandler+0xdbc>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f022 021c 	bic.w	r2, r2, #28
 80020d4:	601a      	str	r2, [r3, #0]
 80020d6:	e007      	b.n	80020e8 <HAL_DMA_IRQHandler+0xdcc>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f022 020e 	bic.w	r2, r2, #14
 80020e6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ec:	f003 031f 	and.w	r3, r3, #31
 80020f0:	2201      	movs	r2, #1
 80020f2:	409a      	lsls	r2, r3
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2201      	movs	r2, #1
 80020fc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2201      	movs	r2, #1
 8002102:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002112:	2b00      	cmp	r3, #0
 8002114:	d009      	beq.n	800212a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	4798      	blx	r3
 800211e:	e004      	b.n	800212a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8002120:	bf00      	nop
 8002122:	e002      	b.n	800212a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002124:	bf00      	nop
 8002126:	e000      	b.n	800212a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002128:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800212a:	3728      	adds	r7, #40	; 0x28
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	40020010 	.word	0x40020010
 8002134:	40020028 	.word	0x40020028
 8002138:	40020040 	.word	0x40020040
 800213c:	40020058 	.word	0x40020058
 8002140:	40020070 	.word	0x40020070
 8002144:	40020088 	.word	0x40020088
 8002148:	400200a0 	.word	0x400200a0
 800214c:	400200b8 	.word	0x400200b8
 8002150:	40020410 	.word	0x40020410
 8002154:	40020428 	.word	0x40020428
 8002158:	40020440 	.word	0x40020440
 800215c:	40020458 	.word	0x40020458
 8002160:	40020470 	.word	0x40020470
 8002164:	40020488 	.word	0x40020488
 8002168:	400204a0 	.word	0x400204a0
 800216c:	400204b8 	.word	0x400204b8

08002170 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a42      	ldr	r2, [pc, #264]	; (8002288 <DMA_CalcBaseAndBitshift+0x118>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d04a      	beq.n	8002218 <DMA_CalcBaseAndBitshift+0xa8>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a41      	ldr	r2, [pc, #260]	; (800228c <DMA_CalcBaseAndBitshift+0x11c>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d045      	beq.n	8002218 <DMA_CalcBaseAndBitshift+0xa8>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a3f      	ldr	r2, [pc, #252]	; (8002290 <DMA_CalcBaseAndBitshift+0x120>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d040      	beq.n	8002218 <DMA_CalcBaseAndBitshift+0xa8>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a3e      	ldr	r2, [pc, #248]	; (8002294 <DMA_CalcBaseAndBitshift+0x124>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d03b      	beq.n	8002218 <DMA_CalcBaseAndBitshift+0xa8>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a3c      	ldr	r2, [pc, #240]	; (8002298 <DMA_CalcBaseAndBitshift+0x128>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d036      	beq.n	8002218 <DMA_CalcBaseAndBitshift+0xa8>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a3b      	ldr	r2, [pc, #236]	; (800229c <DMA_CalcBaseAndBitshift+0x12c>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d031      	beq.n	8002218 <DMA_CalcBaseAndBitshift+0xa8>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a39      	ldr	r2, [pc, #228]	; (80022a0 <DMA_CalcBaseAndBitshift+0x130>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d02c      	beq.n	8002218 <DMA_CalcBaseAndBitshift+0xa8>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a38      	ldr	r2, [pc, #224]	; (80022a4 <DMA_CalcBaseAndBitshift+0x134>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d027      	beq.n	8002218 <DMA_CalcBaseAndBitshift+0xa8>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a36      	ldr	r2, [pc, #216]	; (80022a8 <DMA_CalcBaseAndBitshift+0x138>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d022      	beq.n	8002218 <DMA_CalcBaseAndBitshift+0xa8>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a35      	ldr	r2, [pc, #212]	; (80022ac <DMA_CalcBaseAndBitshift+0x13c>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d01d      	beq.n	8002218 <DMA_CalcBaseAndBitshift+0xa8>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a33      	ldr	r2, [pc, #204]	; (80022b0 <DMA_CalcBaseAndBitshift+0x140>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d018      	beq.n	8002218 <DMA_CalcBaseAndBitshift+0xa8>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a32      	ldr	r2, [pc, #200]	; (80022b4 <DMA_CalcBaseAndBitshift+0x144>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d013      	beq.n	8002218 <DMA_CalcBaseAndBitshift+0xa8>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a30      	ldr	r2, [pc, #192]	; (80022b8 <DMA_CalcBaseAndBitshift+0x148>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d00e      	beq.n	8002218 <DMA_CalcBaseAndBitshift+0xa8>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a2f      	ldr	r2, [pc, #188]	; (80022bc <DMA_CalcBaseAndBitshift+0x14c>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d009      	beq.n	8002218 <DMA_CalcBaseAndBitshift+0xa8>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a2d      	ldr	r2, [pc, #180]	; (80022c0 <DMA_CalcBaseAndBitshift+0x150>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d004      	beq.n	8002218 <DMA_CalcBaseAndBitshift+0xa8>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a2c      	ldr	r2, [pc, #176]	; (80022c4 <DMA_CalcBaseAndBitshift+0x154>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d101      	bne.n	800221c <DMA_CalcBaseAndBitshift+0xac>
 8002218:	2301      	movs	r3, #1
 800221a:	e000      	b.n	800221e <DMA_CalcBaseAndBitshift+0xae>
 800221c:	2300      	movs	r3, #0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d024      	beq.n	800226c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	b2db      	uxtb	r3, r3
 8002228:	3b10      	subs	r3, #16
 800222a:	4a27      	ldr	r2, [pc, #156]	; (80022c8 <DMA_CalcBaseAndBitshift+0x158>)
 800222c:	fba2 2303 	umull	r2, r3, r2, r3
 8002230:	091b      	lsrs	r3, r3, #4
 8002232:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f003 0307 	and.w	r3, r3, #7
 800223a:	4a24      	ldr	r2, [pc, #144]	; (80022cc <DMA_CalcBaseAndBitshift+0x15c>)
 800223c:	5cd3      	ldrb	r3, [r2, r3]
 800223e:	461a      	mov	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2b03      	cmp	r3, #3
 8002248:	d908      	bls.n	800225c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	461a      	mov	r2, r3
 8002250:	4b1f      	ldr	r3, [pc, #124]	; (80022d0 <DMA_CalcBaseAndBitshift+0x160>)
 8002252:	4013      	ands	r3, r2
 8002254:	1d1a      	adds	r2, r3, #4
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	659a      	str	r2, [r3, #88]	; 0x58
 800225a:	e00d      	b.n	8002278 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	461a      	mov	r2, r3
 8002262:	4b1b      	ldr	r3, [pc, #108]	; (80022d0 <DMA_CalcBaseAndBitshift+0x160>)
 8002264:	4013      	ands	r3, r2
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	6593      	str	r3, [r2, #88]	; 0x58
 800226a:	e005      	b.n	8002278 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800227c:	4618      	mov	r0, r3
 800227e:	3714      	adds	r7, #20
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr
 8002288:	40020010 	.word	0x40020010
 800228c:	40020028 	.word	0x40020028
 8002290:	40020040 	.word	0x40020040
 8002294:	40020058 	.word	0x40020058
 8002298:	40020070 	.word	0x40020070
 800229c:	40020088 	.word	0x40020088
 80022a0:	400200a0 	.word	0x400200a0
 80022a4:	400200b8 	.word	0x400200b8
 80022a8:	40020410 	.word	0x40020410
 80022ac:	40020428 	.word	0x40020428
 80022b0:	40020440 	.word	0x40020440
 80022b4:	40020458 	.word	0x40020458
 80022b8:	40020470 	.word	0x40020470
 80022bc:	40020488 	.word	0x40020488
 80022c0:	400204a0 	.word	0x400204a0
 80022c4:	400204b8 	.word	0x400204b8
 80022c8:	aaaaaaab 	.word	0xaaaaaaab
 80022cc:	0800a2a8 	.word	0x0800a2a8
 80022d0:	fffffc00 	.word	0xfffffc00

080022d4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022dc:	2300      	movs	r3, #0
 80022de:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	699b      	ldr	r3, [r3, #24]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d120      	bne.n	800232a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ec:	2b03      	cmp	r3, #3
 80022ee:	d858      	bhi.n	80023a2 <DMA_CheckFifoParam+0xce>
 80022f0:	a201      	add	r2, pc, #4	; (adr r2, 80022f8 <DMA_CheckFifoParam+0x24>)
 80022f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022f6:	bf00      	nop
 80022f8:	08002309 	.word	0x08002309
 80022fc:	0800231b 	.word	0x0800231b
 8002300:	08002309 	.word	0x08002309
 8002304:	080023a3 	.word	0x080023a3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800230c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d048      	beq.n	80023a6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002318:	e045      	b.n	80023a6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800231e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002322:	d142      	bne.n	80023aa <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002328:	e03f      	b.n	80023aa <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	699b      	ldr	r3, [r3, #24]
 800232e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002332:	d123      	bne.n	800237c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002338:	2b03      	cmp	r3, #3
 800233a:	d838      	bhi.n	80023ae <DMA_CheckFifoParam+0xda>
 800233c:	a201      	add	r2, pc, #4	; (adr r2, 8002344 <DMA_CheckFifoParam+0x70>)
 800233e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002342:	bf00      	nop
 8002344:	08002355 	.word	0x08002355
 8002348:	0800235b 	.word	0x0800235b
 800234c:	08002355 	.word	0x08002355
 8002350:	0800236d 	.word	0x0800236d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	73fb      	strb	r3, [r7, #15]
        break;
 8002358:	e030      	b.n	80023bc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800235e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d025      	beq.n	80023b2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800236a:	e022      	b.n	80023b2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002370:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002374:	d11f      	bne.n	80023b6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800237a:	e01c      	b.n	80023b6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002380:	2b02      	cmp	r3, #2
 8002382:	d902      	bls.n	800238a <DMA_CheckFifoParam+0xb6>
 8002384:	2b03      	cmp	r3, #3
 8002386:	d003      	beq.n	8002390 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8002388:	e018      	b.n	80023bc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	73fb      	strb	r3, [r7, #15]
        break;
 800238e:	e015      	b.n	80023bc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002394:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d00e      	beq.n	80023ba <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	73fb      	strb	r3, [r7, #15]
    break;
 80023a0:	e00b      	b.n	80023ba <DMA_CheckFifoParam+0xe6>
        break;
 80023a2:	bf00      	nop
 80023a4:	e00a      	b.n	80023bc <DMA_CheckFifoParam+0xe8>
        break;
 80023a6:	bf00      	nop
 80023a8:	e008      	b.n	80023bc <DMA_CheckFifoParam+0xe8>
        break;
 80023aa:	bf00      	nop
 80023ac:	e006      	b.n	80023bc <DMA_CheckFifoParam+0xe8>
        break;
 80023ae:	bf00      	nop
 80023b0:	e004      	b.n	80023bc <DMA_CheckFifoParam+0xe8>
        break;
 80023b2:	bf00      	nop
 80023b4:	e002      	b.n	80023bc <DMA_CheckFifoParam+0xe8>
        break;
 80023b6:	bf00      	nop
 80023b8:	e000      	b.n	80023bc <DMA_CheckFifoParam+0xe8>
    break;
 80023ba:	bf00      	nop
    }
  }

  return status;
 80023bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3714      	adds	r7, #20
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop

080023cc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a38      	ldr	r2, [pc, #224]	; (80024c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d022      	beq.n	800242a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a36      	ldr	r2, [pc, #216]	; (80024c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d01d      	beq.n	800242a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a35      	ldr	r2, [pc, #212]	; (80024c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d018      	beq.n	800242a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a33      	ldr	r2, [pc, #204]	; (80024cc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d013      	beq.n	800242a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a32      	ldr	r2, [pc, #200]	; (80024d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d00e      	beq.n	800242a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a30      	ldr	r2, [pc, #192]	; (80024d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d009      	beq.n	800242a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a2f      	ldr	r2, [pc, #188]	; (80024d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d004      	beq.n	800242a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a2d      	ldr	r2, [pc, #180]	; (80024dc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d101      	bne.n	800242e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800242a:	2301      	movs	r3, #1
 800242c:	e000      	b.n	8002430 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800242e:	2300      	movs	r3, #0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d01a      	beq.n	800246a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	b2db      	uxtb	r3, r3
 800243a:	3b08      	subs	r3, #8
 800243c:	4a28      	ldr	r2, [pc, #160]	; (80024e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800243e:	fba2 2303 	umull	r2, r3, r2, r3
 8002442:	091b      	lsrs	r3, r3, #4
 8002444:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8002446:	68fa      	ldr	r2, [r7, #12]
 8002448:	4b26      	ldr	r3, [pc, #152]	; (80024e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800244a:	4413      	add	r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	461a      	mov	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4a24      	ldr	r2, [pc, #144]	; (80024e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8002458:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	f003 031f 	and.w	r3, r3, #31
 8002460:	2201      	movs	r2, #1
 8002462:	409a      	lsls	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8002468:	e024      	b.n	80024b4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	b2db      	uxtb	r3, r3
 8002470:	3b10      	subs	r3, #16
 8002472:	4a1e      	ldr	r2, [pc, #120]	; (80024ec <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8002474:	fba2 2303 	umull	r2, r3, r2, r3
 8002478:	091b      	lsrs	r3, r3, #4
 800247a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	4a1c      	ldr	r2, [pc, #112]	; (80024f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d806      	bhi.n	8002492 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	4a1b      	ldr	r2, [pc, #108]	; (80024f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d902      	bls.n	8002492 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	3308      	adds	r3, #8
 8002490:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8002492:	68fa      	ldr	r2, [r7, #12]
 8002494:	4b18      	ldr	r3, [pc, #96]	; (80024f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8002496:	4413      	add	r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	461a      	mov	r2, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	4a16      	ldr	r2, [pc, #88]	; (80024fc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80024a4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	f003 031f 	and.w	r3, r3, #31
 80024ac:	2201      	movs	r2, #1
 80024ae:	409a      	lsls	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80024b4:	bf00      	nop
 80024b6:	3714      	adds	r7, #20
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr
 80024c0:	58025408 	.word	0x58025408
 80024c4:	5802541c 	.word	0x5802541c
 80024c8:	58025430 	.word	0x58025430
 80024cc:	58025444 	.word	0x58025444
 80024d0:	58025458 	.word	0x58025458
 80024d4:	5802546c 	.word	0x5802546c
 80024d8:	58025480 	.word	0x58025480
 80024dc:	58025494 	.word	0x58025494
 80024e0:	cccccccd 	.word	0xcccccccd
 80024e4:	16009600 	.word	0x16009600
 80024e8:	58025880 	.word	0x58025880
 80024ec:	aaaaaaab 	.word	0xaaaaaaab
 80024f0:	400204b8 	.word	0x400204b8
 80024f4:	4002040f 	.word	0x4002040f
 80024f8:	10008200 	.word	0x10008200
 80024fc:	40020880 	.word	0x40020880

08002500 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002500:	b480      	push	{r7}
 8002502:	b085      	sub	sp, #20
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	b2db      	uxtb	r3, r3
 800250e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d04a      	beq.n	80025ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2b08      	cmp	r3, #8
 800251a:	d847      	bhi.n	80025ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a25      	ldr	r2, [pc, #148]	; (80025b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d022      	beq.n	800256c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a24      	ldr	r2, [pc, #144]	; (80025bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d01d      	beq.n	800256c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a22      	ldr	r2, [pc, #136]	; (80025c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d018      	beq.n	800256c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a21      	ldr	r2, [pc, #132]	; (80025c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d013      	beq.n	800256c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a1f      	ldr	r2, [pc, #124]	; (80025c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d00e      	beq.n	800256c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a1e      	ldr	r2, [pc, #120]	; (80025cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d009      	beq.n	800256c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a1c      	ldr	r2, [pc, #112]	; (80025d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d004      	beq.n	800256c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a1b      	ldr	r2, [pc, #108]	; (80025d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d101      	bne.n	8002570 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800256c:	2301      	movs	r3, #1
 800256e:	e000      	b.n	8002572 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8002570:	2300      	movs	r3, #0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d00a      	beq.n	800258c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8002576:	68fa      	ldr	r2, [r7, #12]
 8002578:	4b17      	ldr	r3, [pc, #92]	; (80025d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800257a:	4413      	add	r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	461a      	mov	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	4a15      	ldr	r2, [pc, #84]	; (80025dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8002588:	671a      	str	r2, [r3, #112]	; 0x70
 800258a:	e009      	b.n	80025a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800258c:	68fa      	ldr	r2, [r7, #12]
 800258e:	4b14      	ldr	r3, [pc, #80]	; (80025e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8002590:	4413      	add	r3, r2
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	461a      	mov	r2, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a11      	ldr	r2, [pc, #68]	; (80025e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800259e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	3b01      	subs	r3, #1
 80025a4:	2201      	movs	r2, #1
 80025a6:	409a      	lsls	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80025ac:	bf00      	nop
 80025ae:	3714      	adds	r7, #20
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr
 80025b8:	58025408 	.word	0x58025408
 80025bc:	5802541c 	.word	0x5802541c
 80025c0:	58025430 	.word	0x58025430
 80025c4:	58025444 	.word	0x58025444
 80025c8:	58025458 	.word	0x58025458
 80025cc:	5802546c 	.word	0x5802546c
 80025d0:	58025480 	.word	0x58025480
 80025d4:	58025494 	.word	0x58025494
 80025d8:	1600963f 	.word	0x1600963f
 80025dc:	58025940 	.word	0x58025940
 80025e0:	1000823f 	.word	0x1000823f
 80025e4:	40020940 	.word	0x40020940

080025e8 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA Stream.
  * @param  pSyncConfig : pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b085      	sub	sp, #20
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]
  uint32_t syncSignalID = 0;
 80025f2:	2300      	movs	r3, #0
 80025f4:	60fb      	str	r3, [r7, #12]
  uint32_t syncPolarity = 0;
 80025f6:	2300      	movs	r3, #0
 80025f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  if(pSyncConfig->SyncEnable == ENABLE)
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	7a1b      	ldrb	r3, [r3, #8]
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d155      	bne.n	80026ae <HAL_DMAEx_ConfigMuxSync+0xc6>
  {
    assert_param(IS_DMAMUX_SYNC_POLARITY(pSyncConfig->SyncPolarity));

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a4b      	ldr	r2, [pc, #300]	; (8002734 <HAL_DMAEx_ConfigMuxSync+0x14c>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d049      	beq.n	80026a0 <HAL_DMAEx_ConfigMuxSync+0xb8>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a49      	ldr	r2, [pc, #292]	; (8002738 <HAL_DMAEx_ConfigMuxSync+0x150>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d044      	beq.n	80026a0 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a48      	ldr	r2, [pc, #288]	; (800273c <HAL_DMAEx_ConfigMuxSync+0x154>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d03f      	beq.n	80026a0 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a46      	ldr	r2, [pc, #280]	; (8002740 <HAL_DMAEx_ConfigMuxSync+0x158>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d03a      	beq.n	80026a0 <HAL_DMAEx_ConfigMuxSync+0xb8>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a45      	ldr	r2, [pc, #276]	; (8002744 <HAL_DMAEx_ConfigMuxSync+0x15c>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d035      	beq.n	80026a0 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a43      	ldr	r2, [pc, #268]	; (8002748 <HAL_DMAEx_ConfigMuxSync+0x160>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d030      	beq.n	80026a0 <HAL_DMAEx_ConfigMuxSync+0xb8>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a42      	ldr	r2, [pc, #264]	; (800274c <HAL_DMAEx_ConfigMuxSync+0x164>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d02b      	beq.n	80026a0 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a40      	ldr	r2, [pc, #256]	; (8002750 <HAL_DMAEx_ConfigMuxSync+0x168>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d026      	beq.n	80026a0 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a3f      	ldr	r2, [pc, #252]	; (8002754 <HAL_DMAEx_ConfigMuxSync+0x16c>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d021      	beq.n	80026a0 <HAL_DMAEx_ConfigMuxSync+0xb8>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a3d      	ldr	r2, [pc, #244]	; (8002758 <HAL_DMAEx_ConfigMuxSync+0x170>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d01c      	beq.n	80026a0 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a3c      	ldr	r2, [pc, #240]	; (800275c <HAL_DMAEx_ConfigMuxSync+0x174>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d017      	beq.n	80026a0 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a3a      	ldr	r2, [pc, #232]	; (8002760 <HAL_DMAEx_ConfigMuxSync+0x178>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d012      	beq.n	80026a0 <HAL_DMAEx_ConfigMuxSync+0xb8>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a39      	ldr	r2, [pc, #228]	; (8002764 <HAL_DMAEx_ConfigMuxSync+0x17c>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d00d      	beq.n	80026a0 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a37      	ldr	r2, [pc, #220]	; (8002768 <HAL_DMAEx_ConfigMuxSync+0x180>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d008      	beq.n	80026a0 <HAL_DMAEx_ConfigMuxSync+0xb8>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a36      	ldr	r2, [pc, #216]	; (800276c <HAL_DMAEx_ConfigMuxSync+0x184>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d003      	beq.n	80026a0 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a34      	ldr	r2, [pc, #208]	; (8002770 <HAL_DMAEx_ConfigMuxSync+0x188>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	bf00      	nop
    }
    else
    {
      assert_param(IS_BDMA_DMAMUX_SYNC_SIGNAL_ID(pSyncConfig->SyncSignalID));
    }
    syncSignalID = pSyncConfig->SyncSignalID;
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	60fb      	str	r3, [r7, #12]
    syncPolarity = pSyncConfig->SyncPolarity;
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	60bb      	str	r3, [r7, #8]
  }

  /*Check if the DMA state is ready */
  if(hdma->State == HAL_DMA_STATE_READY)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d131      	bne.n	800271e <HAL_DMAEx_ConfigMuxSync+0x136>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d101      	bne.n	80026c8 <HAL_DMAEx_ConfigMuxSync+0xe0>
 80026c4:	2302      	movs	r3, #2
 80026c6:	e02f      	b.n	8002728 <HAL_DMAEx_ConfigMuxSync+0x140>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the synchronization and event generation before applying a new config */
    CLEAR_BIT(hdma->DMAmuxChannel->CCR,(DMAMUX_CxCR_SE | DMAMUX_CxCR_EGE));
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026da:	f422 3281 	bic.w	r2, r2, #66048	; 0x10200
 80026de:	601a      	str	r2, [r3, #0]

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG( hdma->DMAmuxChannel->CCR, \
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	b2d9      	uxtb	r1, r3
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	061a      	lsls	r2, r3, #24
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	3b01      	subs	r3, #1
 80026f2:	04db      	lsls	r3, r3, #19
 80026f4:	431a      	orrs	r2, r3
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	431a      	orrs	r2, r3
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	7a1b      	ldrb	r3, [r3, #8]
 80026fe:	041b      	lsls	r3, r3, #16
 8002700:	431a      	orrs	r2, r3
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	7a5b      	ldrb	r3, [r3, #9]
 8002706:	025b      	lsls	r3, r3, #9
 8002708:	431a      	orrs	r2, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800270e:	430a      	orrs	r2, r1
 8002710:	601a      	str	r2, [r3, #0]
               ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
               syncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)    | \
               ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos));

      /* Process Locked */
    __HAL_UNLOCK(hdma);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800271a:	2300      	movs	r3, #0
 800271c:	e004      	b.n	8002728 <HAL_DMAEx_ConfigMuxSync+0x140>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002724:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
  }
}
 8002728:	4618      	mov	r0, r3
 800272a:	3714      	adds	r7, #20
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr
 8002734:	40020010 	.word	0x40020010
 8002738:	40020028 	.word	0x40020028
 800273c:	40020040 	.word	0x40020040
 8002740:	40020058 	.word	0x40020058
 8002744:	40020070 	.word	0x40020070
 8002748:	40020088 	.word	0x40020088
 800274c:	400200a0 	.word	0x400200a0
 8002750:	400200b8 	.word	0x400200b8
 8002754:	40020410 	.word	0x40020410
 8002758:	40020428 	.word	0x40020428
 800275c:	40020440 	.word	0x40020440
 8002760:	40020458 	.word	0x40020458
 8002764:	40020470 	.word	0x40020470
 8002768:	40020488 	.word	0x40020488
 800276c:	400204a0 	.word	0x400204a0
 8002770:	400204b8 	.word	0x400204b8

08002774 <HAL_DMAEx_MUX_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002786:	4013      	ands	r3, r2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d01a      	beq.n	80027c2 <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002796:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800279a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80027a4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027aa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	655a      	str	r2, [r3, #84]	; 0x54

    if(hdma->XferErrorCallback != NULL)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d003      	beq.n	80027c2 <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	4798      	blx	r3
    }
  }

  if(hdma->DMAmuxRequestGen != 0)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d022      	beq.n	8002810 <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
   /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027d4:	4013      	ands	r3, r2
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d01a      	beq.n	8002810 <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027e8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80027f2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027f8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	655a      	str	r2, [r3, #84]	; 0x54

      if(hdma->XferErrorCallback != NULL)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002804:	2b00      	cmp	r3, #0
 8002806:	d003      	beq.n	8002810 <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	4798      	blx	r3
      }
    }
  }
}
 8002810:	bf00      	nop
 8002812:	3708      	adds	r7, #8
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002818:	b480      	push	{r7}
 800281a:	b089      	sub	sp, #36	; 0x24
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002822:	2300      	movs	r3, #0
 8002824:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002826:	4b86      	ldr	r3, [pc, #536]	; (8002a40 <HAL_GPIO_Init+0x228>)
 8002828:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800282a:	e18c      	b.n	8002b46 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	2101      	movs	r1, #1
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	fa01 f303 	lsl.w	r3, r1, r3
 8002838:	4013      	ands	r3, r2
 800283a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	2b00      	cmp	r3, #0
 8002840:	f000 817e 	beq.w	8002b40 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f003 0303 	and.w	r3, r3, #3
 800284c:	2b01      	cmp	r3, #1
 800284e:	d005      	beq.n	800285c <HAL_GPIO_Init+0x44>
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f003 0303 	and.w	r3, r3, #3
 8002858:	2b02      	cmp	r3, #2
 800285a:	d130      	bne.n	80028be <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	2203      	movs	r2, #3
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	43db      	mvns	r3, r3
 800286e:	69ba      	ldr	r2, [r7, #24]
 8002870:	4013      	ands	r3, r2
 8002872:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	68da      	ldr	r2, [r3, #12]
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	005b      	lsls	r3, r3, #1
 800287c:	fa02 f303 	lsl.w	r3, r2, r3
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	4313      	orrs	r3, r2
 8002884:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002892:	2201      	movs	r2, #1
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	fa02 f303 	lsl.w	r3, r2, r3
 800289a:	43db      	mvns	r3, r3
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	4013      	ands	r3, r2
 80028a0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	091b      	lsrs	r3, r3, #4
 80028a8:	f003 0201 	and.w	r2, r3, #1
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	fa02 f303 	lsl.w	r3, r2, r3
 80028b2:	69ba      	ldr	r2, [r7, #24]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	69ba      	ldr	r2, [r7, #24]
 80028bc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f003 0303 	and.w	r3, r3, #3
 80028c6:	2b03      	cmp	r3, #3
 80028c8:	d017      	beq.n	80028fa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	2203      	movs	r2, #3
 80028d6:	fa02 f303 	lsl.w	r3, r2, r3
 80028da:	43db      	mvns	r3, r3
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	4013      	ands	r3, r2
 80028e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	689a      	ldr	r2, [r3, #8]
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	fa02 f303 	lsl.w	r3, r2, r3
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	69ba      	ldr	r2, [r7, #24]
 80028f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f003 0303 	and.w	r3, r3, #3
 8002902:	2b02      	cmp	r3, #2
 8002904:	d123      	bne.n	800294e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	08da      	lsrs	r2, r3, #3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	3208      	adds	r2, #8
 800290e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002912:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	f003 0307 	and.w	r3, r3, #7
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	220f      	movs	r2, #15
 800291e:	fa02 f303 	lsl.w	r3, r2, r3
 8002922:	43db      	mvns	r3, r3
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	4013      	ands	r3, r2
 8002928:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	691a      	ldr	r2, [r3, #16]
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	f003 0307 	and.w	r3, r3, #7
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	fa02 f303 	lsl.w	r3, r2, r3
 800293a:	69ba      	ldr	r2, [r7, #24]
 800293c:	4313      	orrs	r3, r2
 800293e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	08da      	lsrs	r2, r3, #3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	3208      	adds	r2, #8
 8002948:	69b9      	ldr	r1, [r7, #24]
 800294a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	005b      	lsls	r3, r3, #1
 8002958:	2203      	movs	r2, #3
 800295a:	fa02 f303 	lsl.w	r3, r2, r3
 800295e:	43db      	mvns	r3, r3
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	4013      	ands	r3, r2
 8002964:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f003 0203 	and.w	r2, r3, #3
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	005b      	lsls	r3, r3, #1
 8002972:	fa02 f303 	lsl.w	r3, r2, r3
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	4313      	orrs	r3, r2
 800297a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800298a:	2b00      	cmp	r3, #0
 800298c:	f000 80d8 	beq.w	8002b40 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002990:	4b2c      	ldr	r3, [pc, #176]	; (8002a44 <HAL_GPIO_Init+0x22c>)
 8002992:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002996:	4a2b      	ldr	r2, [pc, #172]	; (8002a44 <HAL_GPIO_Init+0x22c>)
 8002998:	f043 0302 	orr.w	r3, r3, #2
 800299c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80029a0:	4b28      	ldr	r3, [pc, #160]	; (8002a44 <HAL_GPIO_Init+0x22c>)
 80029a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	60fb      	str	r3, [r7, #12]
 80029ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029ae:	4a26      	ldr	r2, [pc, #152]	; (8002a48 <HAL_GPIO_Init+0x230>)
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	089b      	lsrs	r3, r3, #2
 80029b4:	3302      	adds	r3, #2
 80029b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	f003 0303 	and.w	r3, r3, #3
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	220f      	movs	r2, #15
 80029c6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ca:	43db      	mvns	r3, r3
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	4013      	ands	r3, r2
 80029d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a1d      	ldr	r2, [pc, #116]	; (8002a4c <HAL_GPIO_Init+0x234>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d04a      	beq.n	8002a70 <HAL_GPIO_Init+0x258>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a1c      	ldr	r2, [pc, #112]	; (8002a50 <HAL_GPIO_Init+0x238>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d02b      	beq.n	8002a3a <HAL_GPIO_Init+0x222>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a1b      	ldr	r2, [pc, #108]	; (8002a54 <HAL_GPIO_Init+0x23c>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d025      	beq.n	8002a36 <HAL_GPIO_Init+0x21e>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a1a      	ldr	r2, [pc, #104]	; (8002a58 <HAL_GPIO_Init+0x240>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d01f      	beq.n	8002a32 <HAL_GPIO_Init+0x21a>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a19      	ldr	r2, [pc, #100]	; (8002a5c <HAL_GPIO_Init+0x244>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d019      	beq.n	8002a2e <HAL_GPIO_Init+0x216>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a18      	ldr	r2, [pc, #96]	; (8002a60 <HAL_GPIO_Init+0x248>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d013      	beq.n	8002a2a <HAL_GPIO_Init+0x212>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a17      	ldr	r2, [pc, #92]	; (8002a64 <HAL_GPIO_Init+0x24c>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d00d      	beq.n	8002a26 <HAL_GPIO_Init+0x20e>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a16      	ldr	r2, [pc, #88]	; (8002a68 <HAL_GPIO_Init+0x250>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d007      	beq.n	8002a22 <HAL_GPIO_Init+0x20a>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a15      	ldr	r2, [pc, #84]	; (8002a6c <HAL_GPIO_Init+0x254>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d101      	bne.n	8002a1e <HAL_GPIO_Init+0x206>
 8002a1a:	2309      	movs	r3, #9
 8002a1c:	e029      	b.n	8002a72 <HAL_GPIO_Init+0x25a>
 8002a1e:	230a      	movs	r3, #10
 8002a20:	e027      	b.n	8002a72 <HAL_GPIO_Init+0x25a>
 8002a22:	2307      	movs	r3, #7
 8002a24:	e025      	b.n	8002a72 <HAL_GPIO_Init+0x25a>
 8002a26:	2306      	movs	r3, #6
 8002a28:	e023      	b.n	8002a72 <HAL_GPIO_Init+0x25a>
 8002a2a:	2305      	movs	r3, #5
 8002a2c:	e021      	b.n	8002a72 <HAL_GPIO_Init+0x25a>
 8002a2e:	2304      	movs	r3, #4
 8002a30:	e01f      	b.n	8002a72 <HAL_GPIO_Init+0x25a>
 8002a32:	2303      	movs	r3, #3
 8002a34:	e01d      	b.n	8002a72 <HAL_GPIO_Init+0x25a>
 8002a36:	2302      	movs	r3, #2
 8002a38:	e01b      	b.n	8002a72 <HAL_GPIO_Init+0x25a>
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e019      	b.n	8002a72 <HAL_GPIO_Init+0x25a>
 8002a3e:	bf00      	nop
 8002a40:	58000080 	.word	0x58000080
 8002a44:	58024400 	.word	0x58024400
 8002a48:	58000400 	.word	0x58000400
 8002a4c:	58020000 	.word	0x58020000
 8002a50:	58020400 	.word	0x58020400
 8002a54:	58020800 	.word	0x58020800
 8002a58:	58020c00 	.word	0x58020c00
 8002a5c:	58021000 	.word	0x58021000
 8002a60:	58021400 	.word	0x58021400
 8002a64:	58021800 	.word	0x58021800
 8002a68:	58021c00 	.word	0x58021c00
 8002a6c:	58022400 	.word	0x58022400
 8002a70:	2300      	movs	r3, #0
 8002a72:	69fa      	ldr	r2, [r7, #28]
 8002a74:	f002 0203 	and.w	r2, r2, #3
 8002a78:	0092      	lsls	r2, r2, #2
 8002a7a:	4093      	lsls	r3, r2
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a82:	4938      	ldr	r1, [pc, #224]	; (8002b64 <HAL_GPIO_Init+0x34c>)
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	089b      	lsrs	r3, r3, #2
 8002a88:	3302      	adds	r3, #2
 8002a8a:	69ba      	ldr	r2, [r7, #24]
 8002a8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	43db      	mvns	r3, r3
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d003      	beq.n	8002ab6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8002aae:	69ba      	ldr	r2, [r7, #24]
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002ab6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002abe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	43db      	mvns	r3, r3
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	4013      	ands	r3, r2
 8002ace:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d003      	beq.n	8002ae4 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002ae4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	43db      	mvns	r3, r3
 8002af6:	69ba      	ldr	r2, [r7, #24]
 8002af8:	4013      	ands	r3, r2
 8002afa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d003      	beq.n	8002b10 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	69ba      	ldr	r2, [r7, #24]
 8002b14:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	43db      	mvns	r3, r3
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	4013      	ands	r3, r2
 8002b24:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d003      	beq.n	8002b3a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8002b32:	69ba      	ldr	r2, [r7, #24]
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	3301      	adds	r3, #1
 8002b44:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	f47f ae6b 	bne.w	800282c <HAL_GPIO_Init+0x14>
  }
}
 8002b56:	bf00      	nop
 8002b58:	bf00      	nop
 8002b5a:	3724      	adds	r7, #36	; 0x24
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr
 8002b64:	58000400 	.word	0x58000400

08002b68 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002b70:	4b29      	ldr	r3, [pc, #164]	; (8002c18 <HAL_PWREx_ConfigSupply+0xb0>)
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	f003 0307 	and.w	r3, r3, #7
 8002b78:	2b06      	cmp	r3, #6
 8002b7a:	d00a      	beq.n	8002b92 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002b7c:	4b26      	ldr	r3, [pc, #152]	; (8002c18 <HAL_PWREx_ConfigSupply+0xb0>)
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d001      	beq.n	8002b8e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e03f      	b.n	8002c0e <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	e03d      	b.n	8002c0e <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002b92:	4b21      	ldr	r3, [pc, #132]	; (8002c18 <HAL_PWREx_ConfigSupply+0xb0>)
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002b9a:	491f      	ldr	r1, [pc, #124]	; (8002c18 <HAL_PWREx_ConfigSupply+0xb0>)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002ba2:	f7fd fe5b 	bl	800085c <HAL_GetTick>
 8002ba6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002ba8:	e009      	b.n	8002bbe <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002baa:	f7fd fe57 	bl	800085c <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bb8:	d901      	bls.n	8002bbe <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e027      	b.n	8002c0e <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002bbe:	4b16      	ldr	r3, [pc, #88]	; (8002c18 <HAL_PWREx_ConfigSupply+0xb0>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bca:	d1ee      	bne.n	8002baa <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2b1e      	cmp	r3, #30
 8002bd0:	d008      	beq.n	8002be4 <HAL_PWREx_ConfigSupply+0x7c>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2b2e      	cmp	r3, #46	; 0x2e
 8002bd6:	d005      	beq.n	8002be4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2b1d      	cmp	r3, #29
 8002bdc:	d002      	beq.n	8002be4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2b2d      	cmp	r3, #45	; 0x2d
 8002be2:	d113      	bne.n	8002c0c <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002be4:	f7fd fe3a 	bl	800085c <HAL_GetTick>
 8002be8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002bea:	e009      	b.n	8002c00 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002bec:	f7fd fe36 	bl	800085c <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bfa:	d901      	bls.n	8002c00 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e006      	b.n	8002c0e <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002c00:	4b05      	ldr	r3, [pc, #20]	; (8002c18 <HAL_PWREx_ConfigSupply+0xb0>)
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	f003 0311 	and.w	r3, r3, #17
 8002c08:	2b11      	cmp	r3, #17
 8002c0a:	d1ef      	bne.n	8002bec <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3710      	adds	r7, #16
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	58024800 	.word	0x58024800

08002c1c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b08c      	sub	sp, #48	; 0x30
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d101      	bne.n	8002c2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e397      	b.n	800335e <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0301 	and.w	r3, r3, #1
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	f000 8087 	beq.w	8002d4a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c3c:	4b9e      	ldr	r3, [pc, #632]	; (8002eb8 <HAL_RCC_OscConfig+0x29c>)
 8002c3e:	691b      	ldr	r3, [r3, #16]
 8002c40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c44:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002c46:	4b9c      	ldr	r3, [pc, #624]	; (8002eb8 <HAL_RCC_OscConfig+0x29c>)
 8002c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c4a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c4e:	2b10      	cmp	r3, #16
 8002c50:	d007      	beq.n	8002c62 <HAL_RCC_OscConfig+0x46>
 8002c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c54:	2b18      	cmp	r3, #24
 8002c56:	d110      	bne.n	8002c7a <HAL_RCC_OscConfig+0x5e>
 8002c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c5a:	f003 0303 	and.w	r3, r3, #3
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d10b      	bne.n	8002c7a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c62:	4b95      	ldr	r3, [pc, #596]	; (8002eb8 <HAL_RCC_OscConfig+0x29c>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d06c      	beq.n	8002d48 <HAL_RCC_OscConfig+0x12c>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d168      	bne.n	8002d48 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e371      	b.n	800335e <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c82:	d106      	bne.n	8002c92 <HAL_RCC_OscConfig+0x76>
 8002c84:	4b8c      	ldr	r3, [pc, #560]	; (8002eb8 <HAL_RCC_OscConfig+0x29c>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a8b      	ldr	r2, [pc, #556]	; (8002eb8 <HAL_RCC_OscConfig+0x29c>)
 8002c8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c8e:	6013      	str	r3, [r2, #0]
 8002c90:	e02e      	b.n	8002cf0 <HAL_RCC_OscConfig+0xd4>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d10c      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x98>
 8002c9a:	4b87      	ldr	r3, [pc, #540]	; (8002eb8 <HAL_RCC_OscConfig+0x29c>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a86      	ldr	r2, [pc, #536]	; (8002eb8 <HAL_RCC_OscConfig+0x29c>)
 8002ca0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ca4:	6013      	str	r3, [r2, #0]
 8002ca6:	4b84      	ldr	r3, [pc, #528]	; (8002eb8 <HAL_RCC_OscConfig+0x29c>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a83      	ldr	r2, [pc, #524]	; (8002eb8 <HAL_RCC_OscConfig+0x29c>)
 8002cac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cb0:	6013      	str	r3, [r2, #0]
 8002cb2:	e01d      	b.n	8002cf0 <HAL_RCC_OscConfig+0xd4>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cbc:	d10c      	bne.n	8002cd8 <HAL_RCC_OscConfig+0xbc>
 8002cbe:	4b7e      	ldr	r3, [pc, #504]	; (8002eb8 <HAL_RCC_OscConfig+0x29c>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a7d      	ldr	r2, [pc, #500]	; (8002eb8 <HAL_RCC_OscConfig+0x29c>)
 8002cc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cc8:	6013      	str	r3, [r2, #0]
 8002cca:	4b7b      	ldr	r3, [pc, #492]	; (8002eb8 <HAL_RCC_OscConfig+0x29c>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a7a      	ldr	r2, [pc, #488]	; (8002eb8 <HAL_RCC_OscConfig+0x29c>)
 8002cd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cd4:	6013      	str	r3, [r2, #0]
 8002cd6:	e00b      	b.n	8002cf0 <HAL_RCC_OscConfig+0xd4>
 8002cd8:	4b77      	ldr	r3, [pc, #476]	; (8002eb8 <HAL_RCC_OscConfig+0x29c>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a76      	ldr	r2, [pc, #472]	; (8002eb8 <HAL_RCC_OscConfig+0x29c>)
 8002cde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ce2:	6013      	str	r3, [r2, #0]
 8002ce4:	4b74      	ldr	r3, [pc, #464]	; (8002eb8 <HAL_RCC_OscConfig+0x29c>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a73      	ldr	r2, [pc, #460]	; (8002eb8 <HAL_RCC_OscConfig+0x29c>)
 8002cea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d013      	beq.n	8002d20 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf8:	f7fd fdb0 	bl	800085c <HAL_GetTick>
 8002cfc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002cfe:	e008      	b.n	8002d12 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d00:	f7fd fdac 	bl	800085c <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	2b64      	cmp	r3, #100	; 0x64
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e325      	b.n	800335e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d12:	4b69      	ldr	r3, [pc, #420]	; (8002eb8 <HAL_RCC_OscConfig+0x29c>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d0f0      	beq.n	8002d00 <HAL_RCC_OscConfig+0xe4>
 8002d1e:	e014      	b.n	8002d4a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d20:	f7fd fd9c 	bl	800085c <HAL_GetTick>
 8002d24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002d26:	e008      	b.n	8002d3a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d28:	f7fd fd98 	bl	800085c <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b64      	cmp	r3, #100	; 0x64
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e311      	b.n	800335e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002d3a:	4b5f      	ldr	r3, [pc, #380]	; (8002eb8 <HAL_RCC_OscConfig+0x29c>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d1f0      	bne.n	8002d28 <HAL_RCC_OscConfig+0x10c>
 8002d46:	e000      	b.n	8002d4a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	f000 808a 	beq.w	8002e6c <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d58:	4b57      	ldr	r3, [pc, #348]	; (8002eb8 <HAL_RCC_OscConfig+0x29c>)
 8002d5a:	691b      	ldr	r3, [r3, #16]
 8002d5c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d60:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002d62:	4b55      	ldr	r3, [pc, #340]	; (8002eb8 <HAL_RCC_OscConfig+0x29c>)
 8002d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d66:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002d68:	6a3b      	ldr	r3, [r7, #32]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d007      	beq.n	8002d7e <HAL_RCC_OscConfig+0x162>
 8002d6e:	6a3b      	ldr	r3, [r7, #32]
 8002d70:	2b18      	cmp	r3, #24
 8002d72:	d137      	bne.n	8002de4 <HAL_RCC_OscConfig+0x1c8>
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	f003 0303 	and.w	r3, r3, #3
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d132      	bne.n	8002de4 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d7e:	4b4e      	ldr	r3, [pc, #312]	; (8002eb8 <HAL_RCC_OscConfig+0x29c>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0304 	and.w	r3, r3, #4
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d005      	beq.n	8002d96 <HAL_RCC_OscConfig+0x17a>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d101      	bne.n	8002d96 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e2e3      	b.n	800335e <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002d96:	4b48      	ldr	r3, [pc, #288]	; (8002eb8 <HAL_RCC_OscConfig+0x29c>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f023 0219 	bic.w	r2, r3, #25
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	4945      	ldr	r1, [pc, #276]	; (8002eb8 <HAL_RCC_OscConfig+0x29c>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002da8:	f7fd fd58 	bl	800085c <HAL_GetTick>
 8002dac:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002dae:	e008      	b.n	8002dc2 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002db0:	f7fd fd54 	bl	800085c <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e2cd      	b.n	800335e <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002dc2:	4b3d      	ldr	r3, [pc, #244]	; (8002eb8 <HAL_RCC_OscConfig+0x29c>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0304 	and.w	r3, r3, #4
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d0f0      	beq.n	8002db0 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dce:	4b3a      	ldr	r3, [pc, #232]	; (8002eb8 <HAL_RCC_OscConfig+0x29c>)
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	061b      	lsls	r3, r3, #24
 8002ddc:	4936      	ldr	r1, [pc, #216]	; (8002eb8 <HAL_RCC_OscConfig+0x29c>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002de2:	e043      	b.n	8002e6c <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d026      	beq.n	8002e3a <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002dec:	4b32      	ldr	r3, [pc, #200]	; (8002eb8 <HAL_RCC_OscConfig+0x29c>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f023 0219 	bic.w	r2, r3, #25
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	492f      	ldr	r1, [pc, #188]	; (8002eb8 <HAL_RCC_OscConfig+0x29c>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dfe:	f7fd fd2d 	bl	800085c <HAL_GetTick>
 8002e02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e04:	e008      	b.n	8002e18 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e06:	f7fd fd29 	bl	800085c <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d901      	bls.n	8002e18 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	e2a2      	b.n	800335e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e18:	4b27      	ldr	r3, [pc, #156]	; (8002eb8 <HAL_RCC_OscConfig+0x29c>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0304 	and.w	r3, r3, #4
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d0f0      	beq.n	8002e06 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e24:	4b24      	ldr	r3, [pc, #144]	; (8002eb8 <HAL_RCC_OscConfig+0x29c>)
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	691b      	ldr	r3, [r3, #16]
 8002e30:	061b      	lsls	r3, r3, #24
 8002e32:	4921      	ldr	r1, [pc, #132]	; (8002eb8 <HAL_RCC_OscConfig+0x29c>)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	604b      	str	r3, [r1, #4]
 8002e38:	e018      	b.n	8002e6c <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e3a:	4b1f      	ldr	r3, [pc, #124]	; (8002eb8 <HAL_RCC_OscConfig+0x29c>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a1e      	ldr	r2, [pc, #120]	; (8002eb8 <HAL_RCC_OscConfig+0x29c>)
 8002e40:	f023 0301 	bic.w	r3, r3, #1
 8002e44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e46:	f7fd fd09 	bl	800085c <HAL_GetTick>
 8002e4a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002e4c:	e008      	b.n	8002e60 <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e4e:	f7fd fd05 	bl	800085c <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d901      	bls.n	8002e60 <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e27e      	b.n	800335e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002e60:	4b15      	ldr	r3, [pc, #84]	; (8002eb8 <HAL_RCC_OscConfig+0x29c>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0304 	and.w	r3, r3, #4
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d1f0      	bne.n	8002e4e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0310 	and.w	r3, r3, #16
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d06d      	beq.n	8002f54 <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e78:	4b0f      	ldr	r3, [pc, #60]	; (8002eb8 <HAL_RCC_OscConfig+0x29c>)
 8002e7a:	691b      	ldr	r3, [r3, #16]
 8002e7c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e80:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002e82:	4b0d      	ldr	r3, [pc, #52]	; (8002eb8 <HAL_RCC_OscConfig+0x29c>)
 8002e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e86:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	2b08      	cmp	r3, #8
 8002e8c:	d007      	beq.n	8002e9e <HAL_RCC_OscConfig+0x282>
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	2b18      	cmp	r3, #24
 8002e92:	d11e      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x2b6>
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	f003 0303 	and.w	r3, r3, #3
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d119      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002e9e:	4b06      	ldr	r3, [pc, #24]	; (8002eb8 <HAL_RCC_OscConfig+0x29c>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d008      	beq.n	8002ebc <HAL_RCC_OscConfig+0x2a0>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	69db      	ldr	r3, [r3, #28]
 8002eae:	2b80      	cmp	r3, #128	; 0x80
 8002eb0:	d004      	beq.n	8002ebc <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e253      	b.n	800335e <HAL_RCC_OscConfig+0x742>
 8002eb6:	bf00      	nop
 8002eb8:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ebc:	4ba3      	ldr	r3, [pc, #652]	; (800314c <HAL_RCC_OscConfig+0x530>)
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6a1b      	ldr	r3, [r3, #32]
 8002ec8:	061b      	lsls	r3, r3, #24
 8002eca:	49a0      	ldr	r1, [pc, #640]	; (800314c <HAL_RCC_OscConfig+0x530>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ed0:	e040      	b.n	8002f54 <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	69db      	ldr	r3, [r3, #28]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d023      	beq.n	8002f22 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002eda:	4b9c      	ldr	r3, [pc, #624]	; (800314c <HAL_RCC_OscConfig+0x530>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a9b      	ldr	r2, [pc, #620]	; (800314c <HAL_RCC_OscConfig+0x530>)
 8002ee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ee4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee6:	f7fd fcb9 	bl	800085c <HAL_GetTick>
 8002eea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002eec:	e008      	b.n	8002f00 <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002eee:	f7fd fcb5 	bl	800085c <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d901      	bls.n	8002f00 <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e22e      	b.n	800335e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002f00:	4b92      	ldr	r3, [pc, #584]	; (800314c <HAL_RCC_OscConfig+0x530>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d0f0      	beq.n	8002eee <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002f0c:	4b8f      	ldr	r3, [pc, #572]	; (800314c <HAL_RCC_OscConfig+0x530>)
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a1b      	ldr	r3, [r3, #32]
 8002f18:	061b      	lsls	r3, r3, #24
 8002f1a:	498c      	ldr	r1, [pc, #560]	; (800314c <HAL_RCC_OscConfig+0x530>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	60cb      	str	r3, [r1, #12]
 8002f20:	e018      	b.n	8002f54 <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002f22:	4b8a      	ldr	r3, [pc, #552]	; (800314c <HAL_RCC_OscConfig+0x530>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a89      	ldr	r2, [pc, #548]	; (800314c <HAL_RCC_OscConfig+0x530>)
 8002f28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f2e:	f7fd fc95 	bl	800085c <HAL_GetTick>
 8002f32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002f34:	e008      	b.n	8002f48 <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002f36:	f7fd fc91 	bl	800085c <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d901      	bls.n	8002f48 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e20a      	b.n	800335e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002f48:	4b80      	ldr	r3, [pc, #512]	; (800314c <HAL_RCC_OscConfig+0x530>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d1f0      	bne.n	8002f36 <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0308 	and.w	r3, r3, #8
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d036      	beq.n	8002fce <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	695b      	ldr	r3, [r3, #20]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d019      	beq.n	8002f9c <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f68:	4b78      	ldr	r3, [pc, #480]	; (800314c <HAL_RCC_OscConfig+0x530>)
 8002f6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f6c:	4a77      	ldr	r2, [pc, #476]	; (800314c <HAL_RCC_OscConfig+0x530>)
 8002f6e:	f043 0301 	orr.w	r3, r3, #1
 8002f72:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f74:	f7fd fc72 	bl	800085c <HAL_GetTick>
 8002f78:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002f7a:	e008      	b.n	8002f8e <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f7c:	f7fd fc6e 	bl	800085c <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e1e7      	b.n	800335e <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002f8e:	4b6f      	ldr	r3, [pc, #444]	; (800314c <HAL_RCC_OscConfig+0x530>)
 8002f90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d0f0      	beq.n	8002f7c <HAL_RCC_OscConfig+0x360>
 8002f9a:	e018      	b.n	8002fce <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f9c:	4b6b      	ldr	r3, [pc, #428]	; (800314c <HAL_RCC_OscConfig+0x530>)
 8002f9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fa0:	4a6a      	ldr	r2, [pc, #424]	; (800314c <HAL_RCC_OscConfig+0x530>)
 8002fa2:	f023 0301 	bic.w	r3, r3, #1
 8002fa6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fa8:	f7fd fc58 	bl	800085c <HAL_GetTick>
 8002fac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002fae:	e008      	b.n	8002fc2 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fb0:	f7fd fc54 	bl	800085c <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e1cd      	b.n	800335e <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002fc2:	4b62      	ldr	r3, [pc, #392]	; (800314c <HAL_RCC_OscConfig+0x530>)
 8002fc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d1f0      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0320 	and.w	r3, r3, #32
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d036      	beq.n	8003048 <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	699b      	ldr	r3, [r3, #24]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d019      	beq.n	8003016 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002fe2:	4b5a      	ldr	r3, [pc, #360]	; (800314c <HAL_RCC_OscConfig+0x530>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a59      	ldr	r2, [pc, #356]	; (800314c <HAL_RCC_OscConfig+0x530>)
 8002fe8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002fec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002fee:	f7fd fc35 	bl	800085c <HAL_GetTick>
 8002ff2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002ff4:	e008      	b.n	8003008 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002ff6:	f7fd fc31 	bl	800085c <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	2b02      	cmp	r3, #2
 8003002:	d901      	bls.n	8003008 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e1aa      	b.n	800335e <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003008:	4b50      	ldr	r3, [pc, #320]	; (800314c <HAL_RCC_OscConfig+0x530>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d0f0      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x3da>
 8003014:	e018      	b.n	8003048 <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003016:	4b4d      	ldr	r3, [pc, #308]	; (800314c <HAL_RCC_OscConfig+0x530>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a4c      	ldr	r2, [pc, #304]	; (800314c <HAL_RCC_OscConfig+0x530>)
 800301c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003020:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003022:	f7fd fc1b 	bl	800085c <HAL_GetTick>
 8003026:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003028:	e008      	b.n	800303c <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800302a:	f7fd fc17 	bl	800085c <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	2b02      	cmp	r3, #2
 8003036:	d901      	bls.n	800303c <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e190      	b.n	800335e <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800303c:	4b43      	ldr	r3, [pc, #268]	; (800314c <HAL_RCC_OscConfig+0x530>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d1f0      	bne.n	800302a <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0304 	and.w	r3, r3, #4
 8003050:	2b00      	cmp	r3, #0
 8003052:	f000 8085 	beq.w	8003160 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003056:	4b3e      	ldr	r3, [pc, #248]	; (8003150 <HAL_RCC_OscConfig+0x534>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a3d      	ldr	r2, [pc, #244]	; (8003150 <HAL_RCC_OscConfig+0x534>)
 800305c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003060:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003062:	f7fd fbfb 	bl	800085c <HAL_GetTick>
 8003066:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003068:	e008      	b.n	800307c <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800306a:	f7fd fbf7 	bl	800085c <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	2b64      	cmp	r3, #100	; 0x64
 8003076:	d901      	bls.n	800307c <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e170      	b.n	800335e <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800307c:	4b34      	ldr	r3, [pc, #208]	; (8003150 <HAL_RCC_OscConfig+0x534>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003084:	2b00      	cmp	r3, #0
 8003086:	d0f0      	beq.n	800306a <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	2b01      	cmp	r3, #1
 800308e:	d106      	bne.n	800309e <HAL_RCC_OscConfig+0x482>
 8003090:	4b2e      	ldr	r3, [pc, #184]	; (800314c <HAL_RCC_OscConfig+0x530>)
 8003092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003094:	4a2d      	ldr	r2, [pc, #180]	; (800314c <HAL_RCC_OscConfig+0x530>)
 8003096:	f043 0301 	orr.w	r3, r3, #1
 800309a:	6713      	str	r3, [r2, #112]	; 0x70
 800309c:	e02d      	b.n	80030fa <HAL_RCC_OscConfig+0x4de>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d10c      	bne.n	80030c0 <HAL_RCC_OscConfig+0x4a4>
 80030a6:	4b29      	ldr	r3, [pc, #164]	; (800314c <HAL_RCC_OscConfig+0x530>)
 80030a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030aa:	4a28      	ldr	r2, [pc, #160]	; (800314c <HAL_RCC_OscConfig+0x530>)
 80030ac:	f023 0301 	bic.w	r3, r3, #1
 80030b0:	6713      	str	r3, [r2, #112]	; 0x70
 80030b2:	4b26      	ldr	r3, [pc, #152]	; (800314c <HAL_RCC_OscConfig+0x530>)
 80030b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030b6:	4a25      	ldr	r2, [pc, #148]	; (800314c <HAL_RCC_OscConfig+0x530>)
 80030b8:	f023 0304 	bic.w	r3, r3, #4
 80030bc:	6713      	str	r3, [r2, #112]	; 0x70
 80030be:	e01c      	b.n	80030fa <HAL_RCC_OscConfig+0x4de>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	2b05      	cmp	r3, #5
 80030c6:	d10c      	bne.n	80030e2 <HAL_RCC_OscConfig+0x4c6>
 80030c8:	4b20      	ldr	r3, [pc, #128]	; (800314c <HAL_RCC_OscConfig+0x530>)
 80030ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030cc:	4a1f      	ldr	r2, [pc, #124]	; (800314c <HAL_RCC_OscConfig+0x530>)
 80030ce:	f043 0304 	orr.w	r3, r3, #4
 80030d2:	6713      	str	r3, [r2, #112]	; 0x70
 80030d4:	4b1d      	ldr	r3, [pc, #116]	; (800314c <HAL_RCC_OscConfig+0x530>)
 80030d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d8:	4a1c      	ldr	r2, [pc, #112]	; (800314c <HAL_RCC_OscConfig+0x530>)
 80030da:	f043 0301 	orr.w	r3, r3, #1
 80030de:	6713      	str	r3, [r2, #112]	; 0x70
 80030e0:	e00b      	b.n	80030fa <HAL_RCC_OscConfig+0x4de>
 80030e2:	4b1a      	ldr	r3, [pc, #104]	; (800314c <HAL_RCC_OscConfig+0x530>)
 80030e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030e6:	4a19      	ldr	r2, [pc, #100]	; (800314c <HAL_RCC_OscConfig+0x530>)
 80030e8:	f023 0301 	bic.w	r3, r3, #1
 80030ec:	6713      	str	r3, [r2, #112]	; 0x70
 80030ee:	4b17      	ldr	r3, [pc, #92]	; (800314c <HAL_RCC_OscConfig+0x530>)
 80030f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f2:	4a16      	ldr	r2, [pc, #88]	; (800314c <HAL_RCC_OscConfig+0x530>)
 80030f4:	f023 0304 	bic.w	r3, r3, #4
 80030f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d015      	beq.n	800312e <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003102:	f7fd fbab 	bl	800085c <HAL_GetTick>
 8003106:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003108:	e00a      	b.n	8003120 <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800310a:	f7fd fba7 	bl	800085c <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	f241 3288 	movw	r2, #5000	; 0x1388
 8003118:	4293      	cmp	r3, r2
 800311a:	d901      	bls.n	8003120 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e11e      	b.n	800335e <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003120:	4b0a      	ldr	r3, [pc, #40]	; (800314c <HAL_RCC_OscConfig+0x530>)
 8003122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003124:	f003 0302 	and.w	r3, r3, #2
 8003128:	2b00      	cmp	r3, #0
 800312a:	d0ee      	beq.n	800310a <HAL_RCC_OscConfig+0x4ee>
 800312c:	e018      	b.n	8003160 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800312e:	f7fd fb95 	bl	800085c <HAL_GetTick>
 8003132:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003134:	e00e      	b.n	8003154 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003136:	f7fd fb91 	bl	800085c <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	f241 3288 	movw	r2, #5000	; 0x1388
 8003144:	4293      	cmp	r3, r2
 8003146:	d905      	bls.n	8003154 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	e108      	b.n	800335e <HAL_RCC_OscConfig+0x742>
 800314c:	58024400 	.word	0x58024400
 8003150:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003154:	4b84      	ldr	r3, [pc, #528]	; (8003368 <HAL_RCC_OscConfig+0x74c>)
 8003156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003158:	f003 0302 	and.w	r3, r3, #2
 800315c:	2b00      	cmp	r3, #0
 800315e:	d1ea      	bne.n	8003136 <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003164:	2b00      	cmp	r3, #0
 8003166:	f000 80f9 	beq.w	800335c <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800316a:	4b7f      	ldr	r3, [pc, #508]	; (8003368 <HAL_RCC_OscConfig+0x74c>)
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003172:	2b18      	cmp	r3, #24
 8003174:	f000 80b4 	beq.w	80032e0 <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317c:	2b02      	cmp	r3, #2
 800317e:	f040 8095 	bne.w	80032ac <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003182:	4b79      	ldr	r3, [pc, #484]	; (8003368 <HAL_RCC_OscConfig+0x74c>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a78      	ldr	r2, [pc, #480]	; (8003368 <HAL_RCC_OscConfig+0x74c>)
 8003188:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800318c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800318e:	f7fd fb65 	bl	800085c <HAL_GetTick>
 8003192:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003194:	e008      	b.n	80031a8 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003196:	f7fd fb61 	bl	800085c <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d901      	bls.n	80031a8 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e0da      	b.n	800335e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031a8:	4b6f      	ldr	r3, [pc, #444]	; (8003368 <HAL_RCC_OscConfig+0x74c>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d1f0      	bne.n	8003196 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031b4:	4b6c      	ldr	r3, [pc, #432]	; (8003368 <HAL_RCC_OscConfig+0x74c>)
 80031b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031b8:	4b6c      	ldr	r3, [pc, #432]	; (800336c <HAL_RCC_OscConfig+0x750>)
 80031ba:	4013      	ands	r3, r2
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80031c4:	0112      	lsls	r2, r2, #4
 80031c6:	430a      	orrs	r2, r1
 80031c8:	4967      	ldr	r1, [pc, #412]	; (8003368 <HAL_RCC_OscConfig+0x74c>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	628b      	str	r3, [r1, #40]	; 0x28
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d2:	3b01      	subs	r3, #1
 80031d4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031dc:	3b01      	subs	r3, #1
 80031de:	025b      	lsls	r3, r3, #9
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	431a      	orrs	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e8:	3b01      	subs	r3, #1
 80031ea:	041b      	lsls	r3, r3, #16
 80031ec:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80031f0:	431a      	orrs	r2, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031f6:	3b01      	subs	r3, #1
 80031f8:	061b      	lsls	r3, r3, #24
 80031fa:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80031fe:	495a      	ldr	r1, [pc, #360]	; (8003368 <HAL_RCC_OscConfig+0x74c>)
 8003200:	4313      	orrs	r3, r2
 8003202:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003204:	4b58      	ldr	r3, [pc, #352]	; (8003368 <HAL_RCC_OscConfig+0x74c>)
 8003206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003208:	4a57      	ldr	r2, [pc, #348]	; (8003368 <HAL_RCC_OscConfig+0x74c>)
 800320a:	f023 0301 	bic.w	r3, r3, #1
 800320e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003210:	4b55      	ldr	r3, [pc, #340]	; (8003368 <HAL_RCC_OscConfig+0x74c>)
 8003212:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003214:	4b56      	ldr	r3, [pc, #344]	; (8003370 <HAL_RCC_OscConfig+0x754>)
 8003216:	4013      	ands	r3, r2
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800321c:	00d2      	lsls	r2, r2, #3
 800321e:	4952      	ldr	r1, [pc, #328]	; (8003368 <HAL_RCC_OscConfig+0x74c>)
 8003220:	4313      	orrs	r3, r2
 8003222:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003224:	4b50      	ldr	r3, [pc, #320]	; (8003368 <HAL_RCC_OscConfig+0x74c>)
 8003226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003228:	f023 020c 	bic.w	r2, r3, #12
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003230:	494d      	ldr	r1, [pc, #308]	; (8003368 <HAL_RCC_OscConfig+0x74c>)
 8003232:	4313      	orrs	r3, r2
 8003234:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003236:	4b4c      	ldr	r3, [pc, #304]	; (8003368 <HAL_RCC_OscConfig+0x74c>)
 8003238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800323a:	f023 0202 	bic.w	r2, r3, #2
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003242:	4949      	ldr	r1, [pc, #292]	; (8003368 <HAL_RCC_OscConfig+0x74c>)
 8003244:	4313      	orrs	r3, r2
 8003246:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003248:	4b47      	ldr	r3, [pc, #284]	; (8003368 <HAL_RCC_OscConfig+0x74c>)
 800324a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800324c:	4a46      	ldr	r2, [pc, #280]	; (8003368 <HAL_RCC_OscConfig+0x74c>)
 800324e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003252:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003254:	4b44      	ldr	r3, [pc, #272]	; (8003368 <HAL_RCC_OscConfig+0x74c>)
 8003256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003258:	4a43      	ldr	r2, [pc, #268]	; (8003368 <HAL_RCC_OscConfig+0x74c>)
 800325a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800325e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003260:	4b41      	ldr	r3, [pc, #260]	; (8003368 <HAL_RCC_OscConfig+0x74c>)
 8003262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003264:	4a40      	ldr	r2, [pc, #256]	; (8003368 <HAL_RCC_OscConfig+0x74c>)
 8003266:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800326a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800326c:	4b3e      	ldr	r3, [pc, #248]	; (8003368 <HAL_RCC_OscConfig+0x74c>)
 800326e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003270:	4a3d      	ldr	r2, [pc, #244]	; (8003368 <HAL_RCC_OscConfig+0x74c>)
 8003272:	f043 0301 	orr.w	r3, r3, #1
 8003276:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003278:	4b3b      	ldr	r3, [pc, #236]	; (8003368 <HAL_RCC_OscConfig+0x74c>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a3a      	ldr	r2, [pc, #232]	; (8003368 <HAL_RCC_OscConfig+0x74c>)
 800327e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003282:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003284:	f7fd faea 	bl	800085c <HAL_GetTick>
 8003288:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800328a:	e008      	b.n	800329e <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800328c:	f7fd fae6 	bl	800085c <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b02      	cmp	r3, #2
 8003298:	d901      	bls.n	800329e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e05f      	b.n	800335e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800329e:	4b32      	ldr	r3, [pc, #200]	; (8003368 <HAL_RCC_OscConfig+0x74c>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d0f0      	beq.n	800328c <HAL_RCC_OscConfig+0x670>
 80032aa:	e057      	b.n	800335c <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ac:	4b2e      	ldr	r3, [pc, #184]	; (8003368 <HAL_RCC_OscConfig+0x74c>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a2d      	ldr	r2, [pc, #180]	; (8003368 <HAL_RCC_OscConfig+0x74c>)
 80032b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b8:	f7fd fad0 	bl	800085c <HAL_GetTick>
 80032bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80032be:	e008      	b.n	80032d2 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032c0:	f7fd facc 	bl	800085c <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d901      	bls.n	80032d2 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e045      	b.n	800335e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80032d2:	4b25      	ldr	r3, [pc, #148]	; (8003368 <HAL_RCC_OscConfig+0x74c>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d1f0      	bne.n	80032c0 <HAL_RCC_OscConfig+0x6a4>
 80032de:	e03d      	b.n	800335c <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80032e0:	4b21      	ldr	r3, [pc, #132]	; (8003368 <HAL_RCC_OscConfig+0x74c>)
 80032e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80032e6:	4b20      	ldr	r3, [pc, #128]	; (8003368 <HAL_RCC_OscConfig+0x74c>)
 80032e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ea:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d031      	beq.n	8003358 <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	f003 0203 	and.w	r2, r3, #3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032fe:	429a      	cmp	r2, r3
 8003300:	d12a      	bne.n	8003358 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	091b      	lsrs	r3, r3, #4
 8003306:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800330e:	429a      	cmp	r2, r3
 8003310:	d122      	bne.n	8003358 <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800331e:	429a      	cmp	r2, r3
 8003320:	d11a      	bne.n	8003358 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	0a5b      	lsrs	r3, r3, #9
 8003326:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800332e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003330:	429a      	cmp	r2, r3
 8003332:	d111      	bne.n	8003358 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	0c1b      	lsrs	r3, r3, #16
 8003338:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003340:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003342:	429a      	cmp	r2, r3
 8003344:	d108      	bne.n	8003358 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	0e1b      	lsrs	r3, r3, #24
 800334a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003352:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003354:	429a      	cmp	r2, r3
 8003356:	d001      	beq.n	800335c <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e000      	b.n	800335e <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3730      	adds	r7, #48	; 0x30
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	58024400 	.word	0x58024400
 800336c:	fffffc0c 	.word	0xfffffc0c
 8003370:	ffff0007 	.word	0xffff0007

08003374 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b086      	sub	sp, #24
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d101      	bne.n	8003388 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e19c      	b.n	80036c2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003388:	4b8a      	ldr	r3, [pc, #552]	; (80035b4 <HAL_RCC_ClockConfig+0x240>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 030f 	and.w	r3, r3, #15
 8003390:	683a      	ldr	r2, [r7, #0]
 8003392:	429a      	cmp	r2, r3
 8003394:	d910      	bls.n	80033b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003396:	4b87      	ldr	r3, [pc, #540]	; (80035b4 <HAL_RCC_ClockConfig+0x240>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f023 020f 	bic.w	r2, r3, #15
 800339e:	4985      	ldr	r1, [pc, #532]	; (80035b4 <HAL_RCC_ClockConfig+0x240>)
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033a6:	4b83      	ldr	r3, [pc, #524]	; (80035b4 <HAL_RCC_ClockConfig+0x240>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 030f 	and.w	r3, r3, #15
 80033ae:	683a      	ldr	r2, [r7, #0]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d001      	beq.n	80033b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e184      	b.n	80036c2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0304 	and.w	r3, r3, #4
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d010      	beq.n	80033e6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	691a      	ldr	r2, [r3, #16]
 80033c8:	4b7b      	ldr	r3, [pc, #492]	; (80035b8 <HAL_RCC_ClockConfig+0x244>)
 80033ca:	699b      	ldr	r3, [r3, #24]
 80033cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d908      	bls.n	80033e6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80033d4:	4b78      	ldr	r3, [pc, #480]	; (80035b8 <HAL_RCC_ClockConfig+0x244>)
 80033d6:	699b      	ldr	r3, [r3, #24]
 80033d8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	691b      	ldr	r3, [r3, #16]
 80033e0:	4975      	ldr	r1, [pc, #468]	; (80035b8 <HAL_RCC_ClockConfig+0x244>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0308 	and.w	r3, r3, #8
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d010      	beq.n	8003414 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	695a      	ldr	r2, [r3, #20]
 80033f6:	4b70      	ldr	r3, [pc, #448]	; (80035b8 <HAL_RCC_ClockConfig+0x244>)
 80033f8:	69db      	ldr	r3, [r3, #28]
 80033fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80033fe:	429a      	cmp	r2, r3
 8003400:	d908      	bls.n	8003414 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003402:	4b6d      	ldr	r3, [pc, #436]	; (80035b8 <HAL_RCC_ClockConfig+0x244>)
 8003404:	69db      	ldr	r3, [r3, #28]
 8003406:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	496a      	ldr	r1, [pc, #424]	; (80035b8 <HAL_RCC_ClockConfig+0x244>)
 8003410:	4313      	orrs	r3, r2
 8003412:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0310 	and.w	r3, r3, #16
 800341c:	2b00      	cmp	r3, #0
 800341e:	d010      	beq.n	8003442 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	699a      	ldr	r2, [r3, #24]
 8003424:	4b64      	ldr	r3, [pc, #400]	; (80035b8 <HAL_RCC_ClockConfig+0x244>)
 8003426:	69db      	ldr	r3, [r3, #28]
 8003428:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800342c:	429a      	cmp	r2, r3
 800342e:	d908      	bls.n	8003442 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003430:	4b61      	ldr	r3, [pc, #388]	; (80035b8 <HAL_RCC_ClockConfig+0x244>)
 8003432:	69db      	ldr	r3, [r3, #28]
 8003434:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	699b      	ldr	r3, [r3, #24]
 800343c:	495e      	ldr	r1, [pc, #376]	; (80035b8 <HAL_RCC_ClockConfig+0x244>)
 800343e:	4313      	orrs	r3, r2
 8003440:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0320 	and.w	r3, r3, #32
 800344a:	2b00      	cmp	r3, #0
 800344c:	d010      	beq.n	8003470 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	69da      	ldr	r2, [r3, #28]
 8003452:	4b59      	ldr	r3, [pc, #356]	; (80035b8 <HAL_RCC_ClockConfig+0x244>)
 8003454:	6a1b      	ldr	r3, [r3, #32]
 8003456:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800345a:	429a      	cmp	r2, r3
 800345c:	d908      	bls.n	8003470 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800345e:	4b56      	ldr	r3, [pc, #344]	; (80035b8 <HAL_RCC_ClockConfig+0x244>)
 8003460:	6a1b      	ldr	r3, [r3, #32]
 8003462:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	69db      	ldr	r3, [r3, #28]
 800346a:	4953      	ldr	r1, [pc, #332]	; (80035b8 <HAL_RCC_ClockConfig+0x244>)
 800346c:	4313      	orrs	r3, r2
 800346e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0302 	and.w	r3, r3, #2
 8003478:	2b00      	cmp	r3, #0
 800347a:	d010      	beq.n	800349e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	68da      	ldr	r2, [r3, #12]
 8003480:	4b4d      	ldr	r3, [pc, #308]	; (80035b8 <HAL_RCC_ClockConfig+0x244>)
 8003482:	699b      	ldr	r3, [r3, #24]
 8003484:	f003 030f 	and.w	r3, r3, #15
 8003488:	429a      	cmp	r2, r3
 800348a:	d908      	bls.n	800349e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800348c:	4b4a      	ldr	r3, [pc, #296]	; (80035b8 <HAL_RCC_ClockConfig+0x244>)
 800348e:	699b      	ldr	r3, [r3, #24]
 8003490:	f023 020f 	bic.w	r2, r3, #15
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	4947      	ldr	r1, [pc, #284]	; (80035b8 <HAL_RCC_ClockConfig+0x244>)
 800349a:	4313      	orrs	r3, r2
 800349c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d055      	beq.n	8003556 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80034aa:	4b43      	ldr	r3, [pc, #268]	; (80035b8 <HAL_RCC_ClockConfig+0x244>)
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	4940      	ldr	r1, [pc, #256]	; (80035b8 <HAL_RCC_ClockConfig+0x244>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d107      	bne.n	80034d4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80034c4:	4b3c      	ldr	r3, [pc, #240]	; (80035b8 <HAL_RCC_ClockConfig+0x244>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d121      	bne.n	8003514 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e0f6      	b.n	80036c2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	2b03      	cmp	r3, #3
 80034da:	d107      	bne.n	80034ec <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80034dc:	4b36      	ldr	r3, [pc, #216]	; (80035b8 <HAL_RCC_ClockConfig+0x244>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d115      	bne.n	8003514 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e0ea      	b.n	80036c2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d107      	bne.n	8003504 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80034f4:	4b30      	ldr	r3, [pc, #192]	; (80035b8 <HAL_RCC_ClockConfig+0x244>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d109      	bne.n	8003514 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e0de      	b.n	80036c2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003504:	4b2c      	ldr	r3, [pc, #176]	; (80035b8 <HAL_RCC_ClockConfig+0x244>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0304 	and.w	r3, r3, #4
 800350c:	2b00      	cmp	r3, #0
 800350e:	d101      	bne.n	8003514 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e0d6      	b.n	80036c2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003514:	4b28      	ldr	r3, [pc, #160]	; (80035b8 <HAL_RCC_ClockConfig+0x244>)
 8003516:	691b      	ldr	r3, [r3, #16]
 8003518:	f023 0207 	bic.w	r2, r3, #7
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	4925      	ldr	r1, [pc, #148]	; (80035b8 <HAL_RCC_ClockConfig+0x244>)
 8003522:	4313      	orrs	r3, r2
 8003524:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003526:	f7fd f999 	bl	800085c <HAL_GetTick>
 800352a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800352c:	e00a      	b.n	8003544 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800352e:	f7fd f995 	bl	800085c <HAL_GetTick>
 8003532:	4602      	mov	r2, r0
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	f241 3288 	movw	r2, #5000	; 0x1388
 800353c:	4293      	cmp	r3, r2
 800353e:	d901      	bls.n	8003544 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003540:	2303      	movs	r3, #3
 8003542:	e0be      	b.n	80036c2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003544:	4b1c      	ldr	r3, [pc, #112]	; (80035b8 <HAL_RCC_ClockConfig+0x244>)
 8003546:	691b      	ldr	r3, [r3, #16]
 8003548:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	00db      	lsls	r3, r3, #3
 8003552:	429a      	cmp	r2, r3
 8003554:	d1eb      	bne.n	800352e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	2b00      	cmp	r3, #0
 8003560:	d010      	beq.n	8003584 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	68da      	ldr	r2, [r3, #12]
 8003566:	4b14      	ldr	r3, [pc, #80]	; (80035b8 <HAL_RCC_ClockConfig+0x244>)
 8003568:	699b      	ldr	r3, [r3, #24]
 800356a:	f003 030f 	and.w	r3, r3, #15
 800356e:	429a      	cmp	r2, r3
 8003570:	d208      	bcs.n	8003584 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003572:	4b11      	ldr	r3, [pc, #68]	; (80035b8 <HAL_RCC_ClockConfig+0x244>)
 8003574:	699b      	ldr	r3, [r3, #24]
 8003576:	f023 020f 	bic.w	r2, r3, #15
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	490e      	ldr	r1, [pc, #56]	; (80035b8 <HAL_RCC_ClockConfig+0x244>)
 8003580:	4313      	orrs	r3, r2
 8003582:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003584:	4b0b      	ldr	r3, [pc, #44]	; (80035b4 <HAL_RCC_ClockConfig+0x240>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 030f 	and.w	r3, r3, #15
 800358c:	683a      	ldr	r2, [r7, #0]
 800358e:	429a      	cmp	r2, r3
 8003590:	d214      	bcs.n	80035bc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003592:	4b08      	ldr	r3, [pc, #32]	; (80035b4 <HAL_RCC_ClockConfig+0x240>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f023 020f 	bic.w	r2, r3, #15
 800359a:	4906      	ldr	r1, [pc, #24]	; (80035b4 <HAL_RCC_ClockConfig+0x240>)
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	4313      	orrs	r3, r2
 80035a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035a2:	4b04      	ldr	r3, [pc, #16]	; (80035b4 <HAL_RCC_ClockConfig+0x240>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 030f 	and.w	r3, r3, #15
 80035aa:	683a      	ldr	r2, [r7, #0]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d005      	beq.n	80035bc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e086      	b.n	80036c2 <HAL_RCC_ClockConfig+0x34e>
 80035b4:	52002000 	.word	0x52002000
 80035b8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0304 	and.w	r3, r3, #4
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d010      	beq.n	80035ea <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	691a      	ldr	r2, [r3, #16]
 80035cc:	4b3f      	ldr	r3, [pc, #252]	; (80036cc <HAL_RCC_ClockConfig+0x358>)
 80035ce:	699b      	ldr	r3, [r3, #24]
 80035d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d208      	bcs.n	80035ea <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80035d8:	4b3c      	ldr	r3, [pc, #240]	; (80036cc <HAL_RCC_ClockConfig+0x358>)
 80035da:	699b      	ldr	r3, [r3, #24]
 80035dc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	691b      	ldr	r3, [r3, #16]
 80035e4:	4939      	ldr	r1, [pc, #228]	; (80036cc <HAL_RCC_ClockConfig+0x358>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0308 	and.w	r3, r3, #8
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d010      	beq.n	8003618 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	695a      	ldr	r2, [r3, #20]
 80035fa:	4b34      	ldr	r3, [pc, #208]	; (80036cc <HAL_RCC_ClockConfig+0x358>)
 80035fc:	69db      	ldr	r3, [r3, #28]
 80035fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003602:	429a      	cmp	r2, r3
 8003604:	d208      	bcs.n	8003618 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003606:	4b31      	ldr	r3, [pc, #196]	; (80036cc <HAL_RCC_ClockConfig+0x358>)
 8003608:	69db      	ldr	r3, [r3, #28]
 800360a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	695b      	ldr	r3, [r3, #20]
 8003612:	492e      	ldr	r1, [pc, #184]	; (80036cc <HAL_RCC_ClockConfig+0x358>)
 8003614:	4313      	orrs	r3, r2
 8003616:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0310 	and.w	r3, r3, #16
 8003620:	2b00      	cmp	r3, #0
 8003622:	d010      	beq.n	8003646 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	699a      	ldr	r2, [r3, #24]
 8003628:	4b28      	ldr	r3, [pc, #160]	; (80036cc <HAL_RCC_ClockConfig+0x358>)
 800362a:	69db      	ldr	r3, [r3, #28]
 800362c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003630:	429a      	cmp	r2, r3
 8003632:	d208      	bcs.n	8003646 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003634:	4b25      	ldr	r3, [pc, #148]	; (80036cc <HAL_RCC_ClockConfig+0x358>)
 8003636:	69db      	ldr	r3, [r3, #28]
 8003638:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	699b      	ldr	r3, [r3, #24]
 8003640:	4922      	ldr	r1, [pc, #136]	; (80036cc <HAL_RCC_ClockConfig+0x358>)
 8003642:	4313      	orrs	r3, r2
 8003644:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0320 	and.w	r3, r3, #32
 800364e:	2b00      	cmp	r3, #0
 8003650:	d010      	beq.n	8003674 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	69da      	ldr	r2, [r3, #28]
 8003656:	4b1d      	ldr	r3, [pc, #116]	; (80036cc <HAL_RCC_ClockConfig+0x358>)
 8003658:	6a1b      	ldr	r3, [r3, #32]
 800365a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800365e:	429a      	cmp	r2, r3
 8003660:	d208      	bcs.n	8003674 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003662:	4b1a      	ldr	r3, [pc, #104]	; (80036cc <HAL_RCC_ClockConfig+0x358>)
 8003664:	6a1b      	ldr	r3, [r3, #32]
 8003666:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	69db      	ldr	r3, [r3, #28]
 800366e:	4917      	ldr	r1, [pc, #92]	; (80036cc <HAL_RCC_ClockConfig+0x358>)
 8003670:	4313      	orrs	r3, r2
 8003672:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003674:	f000 f834 	bl	80036e0 <HAL_RCC_GetSysClockFreq>
 8003678:	4602      	mov	r2, r0
 800367a:	4b14      	ldr	r3, [pc, #80]	; (80036cc <HAL_RCC_ClockConfig+0x358>)
 800367c:	699b      	ldr	r3, [r3, #24]
 800367e:	0a1b      	lsrs	r3, r3, #8
 8003680:	f003 030f 	and.w	r3, r3, #15
 8003684:	4912      	ldr	r1, [pc, #72]	; (80036d0 <HAL_RCC_ClockConfig+0x35c>)
 8003686:	5ccb      	ldrb	r3, [r1, r3]
 8003688:	f003 031f 	and.w	r3, r3, #31
 800368c:	fa22 f303 	lsr.w	r3, r2, r3
 8003690:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003692:	4b0e      	ldr	r3, [pc, #56]	; (80036cc <HAL_RCC_ClockConfig+0x358>)
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	f003 030f 	and.w	r3, r3, #15
 800369a:	4a0d      	ldr	r2, [pc, #52]	; (80036d0 <HAL_RCC_ClockConfig+0x35c>)
 800369c:	5cd3      	ldrb	r3, [r2, r3]
 800369e:	f003 031f 	and.w	r3, r3, #31
 80036a2:	693a      	ldr	r2, [r7, #16]
 80036a4:	fa22 f303 	lsr.w	r3, r2, r3
 80036a8:	4a0a      	ldr	r2, [pc, #40]	; (80036d4 <HAL_RCC_ClockConfig+0x360>)
 80036aa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80036ac:	4a0a      	ldr	r2, [pc, #40]	; (80036d8 <HAL_RCC_ClockConfig+0x364>)
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80036b2:	4b0a      	ldr	r3, [pc, #40]	; (80036dc <HAL_RCC_ClockConfig+0x368>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4618      	mov	r0, r3
 80036b8:	f7fd f886 	bl	80007c8 <HAL_InitTick>
 80036bc:	4603      	mov	r3, r0
 80036be:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80036c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3718      	adds	r7, #24
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	58024400 	.word	0x58024400
 80036d0:	0800a2d8 	.word	0x0800a2d8
 80036d4:	2400040c 	.word	0x2400040c
 80036d8:	24000408 	.word	0x24000408
 80036dc:	24000400 	.word	0x24000400

080036e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b089      	sub	sp, #36	; 0x24
 80036e4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036e6:	4bb3      	ldr	r3, [pc, #716]	; (80039b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80036ee:	2b18      	cmp	r3, #24
 80036f0:	f200 8155 	bhi.w	800399e <HAL_RCC_GetSysClockFreq+0x2be>
 80036f4:	a201      	add	r2, pc, #4	; (adr r2, 80036fc <HAL_RCC_GetSysClockFreq+0x1c>)
 80036f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036fa:	bf00      	nop
 80036fc:	08003761 	.word	0x08003761
 8003700:	0800399f 	.word	0x0800399f
 8003704:	0800399f 	.word	0x0800399f
 8003708:	0800399f 	.word	0x0800399f
 800370c:	0800399f 	.word	0x0800399f
 8003710:	0800399f 	.word	0x0800399f
 8003714:	0800399f 	.word	0x0800399f
 8003718:	0800399f 	.word	0x0800399f
 800371c:	08003787 	.word	0x08003787
 8003720:	0800399f 	.word	0x0800399f
 8003724:	0800399f 	.word	0x0800399f
 8003728:	0800399f 	.word	0x0800399f
 800372c:	0800399f 	.word	0x0800399f
 8003730:	0800399f 	.word	0x0800399f
 8003734:	0800399f 	.word	0x0800399f
 8003738:	0800399f 	.word	0x0800399f
 800373c:	0800378d 	.word	0x0800378d
 8003740:	0800399f 	.word	0x0800399f
 8003744:	0800399f 	.word	0x0800399f
 8003748:	0800399f 	.word	0x0800399f
 800374c:	0800399f 	.word	0x0800399f
 8003750:	0800399f 	.word	0x0800399f
 8003754:	0800399f 	.word	0x0800399f
 8003758:	0800399f 	.word	0x0800399f
 800375c:	08003793 	.word	0x08003793
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003760:	4b94      	ldr	r3, [pc, #592]	; (80039b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0320 	and.w	r3, r3, #32
 8003768:	2b00      	cmp	r3, #0
 800376a:	d009      	beq.n	8003780 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800376c:	4b91      	ldr	r3, [pc, #580]	; (80039b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	08db      	lsrs	r3, r3, #3
 8003772:	f003 0303 	and.w	r3, r3, #3
 8003776:	4a90      	ldr	r2, [pc, #576]	; (80039b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003778:	fa22 f303 	lsr.w	r3, r2, r3
 800377c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800377e:	e111      	b.n	80039a4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003780:	4b8d      	ldr	r3, [pc, #564]	; (80039b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003782:	61bb      	str	r3, [r7, #24]
    break;
 8003784:	e10e      	b.n	80039a4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003786:	4b8d      	ldr	r3, [pc, #564]	; (80039bc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003788:	61bb      	str	r3, [r7, #24]
    break;
 800378a:	e10b      	b.n	80039a4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800378c:	4b8c      	ldr	r3, [pc, #560]	; (80039c0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800378e:	61bb      	str	r3, [r7, #24]
    break;
 8003790:	e108      	b.n	80039a4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003792:	4b88      	ldr	r3, [pc, #544]	; (80039b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003796:	f003 0303 	and.w	r3, r3, #3
 800379a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800379c:	4b85      	ldr	r3, [pc, #532]	; (80039b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800379e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a0:	091b      	lsrs	r3, r3, #4
 80037a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037a6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80037a8:	4b82      	ldr	r3, [pc, #520]	; (80039b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ac:	f003 0301 	and.w	r3, r3, #1
 80037b0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80037b2:	4b80      	ldr	r3, [pc, #512]	; (80039b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037b6:	08db      	lsrs	r3, r3, #3
 80037b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80037bc:	68fa      	ldr	r2, [r7, #12]
 80037be:	fb02 f303 	mul.w	r3, r2, r3
 80037c2:	ee07 3a90 	vmov	s15, r3
 80037c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037ca:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	f000 80e1 	beq.w	8003998 <HAL_RCC_GetSysClockFreq+0x2b8>
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	2b02      	cmp	r3, #2
 80037da:	f000 8083 	beq.w	80038e4 <HAL_RCC_GetSysClockFreq+0x204>
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	2b02      	cmp	r3, #2
 80037e2:	f200 80a1 	bhi.w	8003928 <HAL_RCC_GetSysClockFreq+0x248>
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d003      	beq.n	80037f4 <HAL_RCC_GetSysClockFreq+0x114>
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d056      	beq.n	80038a0 <HAL_RCC_GetSysClockFreq+0x1c0>
 80037f2:	e099      	b.n	8003928 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80037f4:	4b6f      	ldr	r3, [pc, #444]	; (80039b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0320 	and.w	r3, r3, #32
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d02d      	beq.n	800385c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003800:	4b6c      	ldr	r3, [pc, #432]	; (80039b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	08db      	lsrs	r3, r3, #3
 8003806:	f003 0303 	and.w	r3, r3, #3
 800380a:	4a6b      	ldr	r2, [pc, #428]	; (80039b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800380c:	fa22 f303 	lsr.w	r3, r2, r3
 8003810:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	ee07 3a90 	vmov	s15, r3
 8003818:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	ee07 3a90 	vmov	s15, r3
 8003822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003826:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800382a:	4b62      	ldr	r3, [pc, #392]	; (80039b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800382c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003832:	ee07 3a90 	vmov	s15, r3
 8003836:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800383a:	ed97 6a02 	vldr	s12, [r7, #8]
 800383e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80039c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003842:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003846:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800384a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800384e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003852:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003856:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800385a:	e087      	b.n	800396c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	ee07 3a90 	vmov	s15, r3
 8003862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003866:	eddf 6a58 	vldr	s13, [pc, #352]	; 80039c8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800386a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800386e:	4b51      	ldr	r3, [pc, #324]	; (80039b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003872:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003876:	ee07 3a90 	vmov	s15, r3
 800387a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800387e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003882:	eddf 5a50 	vldr	s11, [pc, #320]	; 80039c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003886:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800388a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800388e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003892:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003896:	ee67 7a27 	vmul.f32	s15, s14, s15
 800389a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800389e:	e065      	b.n	800396c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	ee07 3a90 	vmov	s15, r3
 80038a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038aa:	eddf 6a48 	vldr	s13, [pc, #288]	; 80039cc <HAL_RCC_GetSysClockFreq+0x2ec>
 80038ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038b2:	4b40      	ldr	r3, [pc, #256]	; (80039b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038ba:	ee07 3a90 	vmov	s15, r3
 80038be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80038c6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80039c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80038ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80038e2:	e043      	b.n	800396c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	ee07 3a90 	vmov	s15, r3
 80038ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038ee:	eddf 6a38 	vldr	s13, [pc, #224]	; 80039d0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80038f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038f6:	4b2f      	ldr	r3, [pc, #188]	; (80039b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038fe:	ee07 3a90 	vmov	s15, r3
 8003902:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003906:	ed97 6a02 	vldr	s12, [r7, #8]
 800390a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80039c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800390e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003912:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003916:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800391a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800391e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003922:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003926:	e021      	b.n	800396c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	ee07 3a90 	vmov	s15, r3
 800392e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003932:	eddf 6a26 	vldr	s13, [pc, #152]	; 80039cc <HAL_RCC_GetSysClockFreq+0x2ec>
 8003936:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800393a:	4b1e      	ldr	r3, [pc, #120]	; (80039b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800393c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003942:	ee07 3a90 	vmov	s15, r3
 8003946:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800394a:	ed97 6a02 	vldr	s12, [r7, #8]
 800394e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80039c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003952:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003956:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800395a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800395e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003962:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003966:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800396a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800396c:	4b11      	ldr	r3, [pc, #68]	; (80039b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800396e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003970:	0a5b      	lsrs	r3, r3, #9
 8003972:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003976:	3301      	adds	r3, #1
 8003978:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	ee07 3a90 	vmov	s15, r3
 8003980:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003984:	edd7 6a07 	vldr	s13, [r7, #28]
 8003988:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800398c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003990:	ee17 3a90 	vmov	r3, s15
 8003994:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003996:	e005      	b.n	80039a4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003998:	2300      	movs	r3, #0
 800399a:	61bb      	str	r3, [r7, #24]
    break;
 800399c:	e002      	b.n	80039a4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800399e:	4b07      	ldr	r3, [pc, #28]	; (80039bc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80039a0:	61bb      	str	r3, [r7, #24]
    break;
 80039a2:	bf00      	nop
  }

  return sysclockfreq;
 80039a4:	69bb      	ldr	r3, [r7, #24]
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3724      	adds	r7, #36	; 0x24
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop
 80039b4:	58024400 	.word	0x58024400
 80039b8:	03d09000 	.word	0x03d09000
 80039bc:	003d0900 	.word	0x003d0900
 80039c0:	017d7840 	.word	0x017d7840
 80039c4:	46000000 	.word	0x46000000
 80039c8:	4c742400 	.word	0x4c742400
 80039cc:	4a742400 	.word	0x4a742400
 80039d0:	4bbebc20 	.word	0x4bbebc20

080039d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80039da:	f7ff fe81 	bl	80036e0 <HAL_RCC_GetSysClockFreq>
 80039de:	4602      	mov	r2, r0
 80039e0:	4b10      	ldr	r3, [pc, #64]	; (8003a24 <HAL_RCC_GetHCLKFreq+0x50>)
 80039e2:	699b      	ldr	r3, [r3, #24]
 80039e4:	0a1b      	lsrs	r3, r3, #8
 80039e6:	f003 030f 	and.w	r3, r3, #15
 80039ea:	490f      	ldr	r1, [pc, #60]	; (8003a28 <HAL_RCC_GetHCLKFreq+0x54>)
 80039ec:	5ccb      	ldrb	r3, [r1, r3]
 80039ee:	f003 031f 	and.w	r3, r3, #31
 80039f2:	fa22 f303 	lsr.w	r3, r2, r3
 80039f6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80039f8:	4b0a      	ldr	r3, [pc, #40]	; (8003a24 <HAL_RCC_GetHCLKFreq+0x50>)
 80039fa:	699b      	ldr	r3, [r3, #24]
 80039fc:	f003 030f 	and.w	r3, r3, #15
 8003a00:	4a09      	ldr	r2, [pc, #36]	; (8003a28 <HAL_RCC_GetHCLKFreq+0x54>)
 8003a02:	5cd3      	ldrb	r3, [r2, r3]
 8003a04:	f003 031f 	and.w	r3, r3, #31
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a0e:	4a07      	ldr	r2, [pc, #28]	; (8003a2c <HAL_RCC_GetHCLKFreq+0x58>)
 8003a10:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003a12:	4a07      	ldr	r2, [pc, #28]	; (8003a30 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003a18:	4b04      	ldr	r3, [pc, #16]	; (8003a2c <HAL_RCC_GetHCLKFreq+0x58>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3708      	adds	r7, #8
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	58024400 	.word	0x58024400
 8003a28:	0800a2d8 	.word	0x0800a2d8
 8003a2c:	2400040c 	.word	0x2400040c
 8003a30:	24000408 	.word	0x24000408

08003a34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003a38:	f7ff ffcc 	bl	80039d4 <HAL_RCC_GetHCLKFreq>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	4b06      	ldr	r3, [pc, #24]	; (8003a58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a40:	69db      	ldr	r3, [r3, #28]
 8003a42:	091b      	lsrs	r3, r3, #4
 8003a44:	f003 0307 	and.w	r3, r3, #7
 8003a48:	4904      	ldr	r1, [pc, #16]	; (8003a5c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a4a:	5ccb      	ldrb	r3, [r1, r3]
 8003a4c:	f003 031f 	and.w	r3, r3, #31
 8003a50:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	58024400 	.word	0x58024400
 8003a5c:	0800a2d8 	.word	0x0800a2d8

08003a60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003a64:	f7ff ffb6 	bl	80039d4 <HAL_RCC_GetHCLKFreq>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	4b06      	ldr	r3, [pc, #24]	; (8003a84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a6c:	69db      	ldr	r3, [r3, #28]
 8003a6e:	0a1b      	lsrs	r3, r3, #8
 8003a70:	f003 0307 	and.w	r3, r3, #7
 8003a74:	4904      	ldr	r1, [pc, #16]	; (8003a88 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a76:	5ccb      	ldrb	r3, [r1, r3]
 8003a78:	f003 031f 	and.w	r3, r3, #31
 8003a7c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	58024400 	.word	0x58024400
 8003a88:	0800a2d8 	.word	0x0800a2d8

08003a8c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b086      	sub	sp, #24
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a94:	2300      	movs	r3, #0
 8003a96:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a98:	2300      	movs	r3, #0
 8003a9a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d03f      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003ab0:	d02a      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003ab2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003ab6:	d824      	bhi.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003ab8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003abc:	d018      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003abe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ac2:	d81e      	bhi.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d003      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003ac8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003acc:	d007      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003ace:	e018      	b.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ad0:	4bab      	ldr	r3, [pc, #684]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad4:	4aaa      	ldr	r2, [pc, #680]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ad6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ada:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003adc:	e015      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	3304      	adds	r3, #4
 8003ae2:	2102      	movs	r1, #2
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f001 feff 	bl	80058e8 <RCCEx_PLL2_Config>
 8003aea:	4603      	mov	r3, r0
 8003aec:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003aee:	e00c      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	3324      	adds	r3, #36	; 0x24
 8003af4:	2102      	movs	r1, #2
 8003af6:	4618      	mov	r0, r3
 8003af8:	f001 ffa8 	bl	8005a4c <RCCEx_PLL3_Config>
 8003afc:	4603      	mov	r3, r0
 8003afe:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003b00:	e003      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	75fb      	strb	r3, [r7, #23]
      break;
 8003b06:	e000      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003b08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b0a:	7dfb      	ldrb	r3, [r7, #23]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d109      	bne.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003b10:	4b9b      	ldr	r3, [pc, #620]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b14:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b1c:	4998      	ldr	r1, [pc, #608]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	650b      	str	r3, [r1, #80]	; 0x50
 8003b22:	e001      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b24:	7dfb      	ldrb	r3, [r7, #23]
 8003b26:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d03d      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b38:	2b04      	cmp	r3, #4
 8003b3a:	d826      	bhi.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003b3c:	a201      	add	r2, pc, #4	; (adr r2, 8003b44 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b42:	bf00      	nop
 8003b44:	08003b59 	.word	0x08003b59
 8003b48:	08003b67 	.word	0x08003b67
 8003b4c:	08003b79 	.word	0x08003b79
 8003b50:	08003b91 	.word	0x08003b91
 8003b54:	08003b91 	.word	0x08003b91
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b58:	4b89      	ldr	r3, [pc, #548]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5c:	4a88      	ldr	r2, [pc, #544]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b62:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003b64:	e015      	b.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	3304      	adds	r3, #4
 8003b6a:	2100      	movs	r1, #0
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f001 febb 	bl	80058e8 <RCCEx_PLL2_Config>
 8003b72:	4603      	mov	r3, r0
 8003b74:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003b76:	e00c      	b.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	3324      	adds	r3, #36	; 0x24
 8003b7c:	2100      	movs	r1, #0
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f001 ff64 	bl	8005a4c <RCCEx_PLL3_Config>
 8003b84:	4603      	mov	r3, r0
 8003b86:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003b88:	e003      	b.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	75fb      	strb	r3, [r7, #23]
      break;
 8003b8e:	e000      	b.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003b90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b92:	7dfb      	ldrb	r3, [r7, #23]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d109      	bne.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b98:	4b79      	ldr	r3, [pc, #484]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b9c:	f023 0207 	bic.w	r2, r3, #7
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ba4:	4976      	ldr	r1, [pc, #472]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	650b      	str	r3, [r1, #80]	; 0x50
 8003baa:	e001      	b.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bac:	7dfb      	ldrb	r3, [r7, #23]
 8003bae:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d051      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003bc2:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8003bc6:	d036      	beq.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003bc8:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8003bcc:	d830      	bhi.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8003bce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003bd2:	d032      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8003bd4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003bd8:	d82a      	bhi.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8003bda:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003bde:	d02e      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8003be0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003be4:	d824      	bhi.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8003be6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bea:	d018      	beq.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003bec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bf0:	d81e      	bhi.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d003      	beq.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x172>
 8003bf6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003bfa:	d007      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x180>
 8003bfc:	e018      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bfe:	4b60      	ldr	r3, [pc, #384]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c02:	4a5f      	ldr	r2, [pc, #380]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c08:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003c0a:	e019      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	3304      	adds	r3, #4
 8003c10:	2100      	movs	r1, #0
 8003c12:	4618      	mov	r0, r3
 8003c14:	f001 fe68 	bl	80058e8 <RCCEx_PLL2_Config>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003c1c:	e010      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	3324      	adds	r3, #36	; 0x24
 8003c22:	2100      	movs	r1, #0
 8003c24:	4618      	mov	r0, r3
 8003c26:	f001 ff11 	bl	8005a4c <RCCEx_PLL3_Config>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003c2e:	e007      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	75fb      	strb	r3, [r7, #23]
      break;
 8003c34:	e004      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8003c36:	bf00      	nop
 8003c38:	e002      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8003c3a:	bf00      	nop
 8003c3c:	e000      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8003c3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c40:	7dfb      	ldrb	r3, [r7, #23]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d10a      	bne.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003c46:	4b4e      	ldr	r3, [pc, #312]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c4a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003c54:	494a      	ldr	r1, [pc, #296]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	658b      	str	r3, [r1, #88]	; 0x58
 8003c5a:	e001      	b.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c5c:	7dfb      	ldrb	r3, [r7, #23]
 8003c5e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d051      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003c72:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003c76:	d036      	beq.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8003c78:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003c7c:	d830      	bhi.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8003c7e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c82:	d032      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8003c84:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c88:	d82a      	bhi.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8003c8a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003c8e:	d02e      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x262>
 8003c90:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003c94:	d824      	bhi.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8003c96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c9a:	d018      	beq.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x242>
 8003c9c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ca0:	d81e      	bhi.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d003      	beq.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x222>
 8003ca6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003caa:	d007      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003cac:	e018      	b.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cae:	4b34      	ldr	r3, [pc, #208]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb2:	4a33      	ldr	r2, [pc, #204]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003cb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cb8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003cba:	e019      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	3304      	adds	r3, #4
 8003cc0:	2100      	movs	r1, #0
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f001 fe10 	bl	80058e8 <RCCEx_PLL2_Config>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003ccc:	e010      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	3324      	adds	r3, #36	; 0x24
 8003cd2:	2100      	movs	r1, #0
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f001 feb9 	bl	8005a4c <RCCEx_PLL3_Config>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003cde:	e007      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	75fb      	strb	r3, [r7, #23]
      break;
 8003ce4:	e004      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8003ce6:	bf00      	nop
 8003ce8:	e002      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8003cea:	bf00      	nop
 8003cec:	e000      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8003cee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cf0:	7dfb      	ldrb	r3, [r7, #23]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d10a      	bne.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003cf6:	4b22      	ldr	r3, [pc, #136]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cfa:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003d04:	491e      	ldr	r1, [pc, #120]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	658b      	str	r3, [r1, #88]	; 0x58
 8003d0a:	e001      	b.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d0c:	7dfb      	ldrb	r3, [r7, #23]
 8003d0e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d035      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d20:	2b30      	cmp	r3, #48	; 0x30
 8003d22:	d01c      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003d24:	2b30      	cmp	r3, #48	; 0x30
 8003d26:	d817      	bhi.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8003d28:	2b20      	cmp	r3, #32
 8003d2a:	d00c      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003d2c:	2b20      	cmp	r3, #32
 8003d2e:	d813      	bhi.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d016      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8003d34:	2b10      	cmp	r3, #16
 8003d36:	d10f      	bne.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d38:	4b11      	ldr	r3, [pc, #68]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d3c:	4a10      	ldr	r2, [pc, #64]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d42:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8003d44:	e00e      	b.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	3304      	adds	r3, #4
 8003d4a:	2102      	movs	r1, #2
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f001 fdcb 	bl	80058e8 <RCCEx_PLL2_Config>
 8003d52:	4603      	mov	r3, r0
 8003d54:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8003d56:	e005      	b.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	75fb      	strb	r3, [r7, #23]
      break;
 8003d5c:	e002      	b.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8003d5e:	bf00      	nop
 8003d60:	e000      	b.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8003d62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d64:	7dfb      	ldrb	r3, [r7, #23]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d10c      	bne.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003d6a:	4b05      	ldr	r3, [pc, #20]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d6e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d76:	4902      	ldr	r1, [pc, #8]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003d7c:	e004      	b.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8003d7e:	bf00      	nop
 8003d80:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d84:	7dfb      	ldrb	r3, [r7, #23]
 8003d86:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d047      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d9c:	d030      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8003d9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003da2:	d82a      	bhi.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003da4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003da8:	d02c      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8003daa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003dae:	d824      	bhi.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003db0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003db4:	d018      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003db6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dba:	d81e      	bhi.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d003      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003dc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dc4:	d007      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003dc6:	e018      	b.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dc8:	4bac      	ldr	r3, [pc, #688]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dcc:	4aab      	ldr	r2, [pc, #684]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003dce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dd2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003dd4:	e017      	b.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	3304      	adds	r3, #4
 8003dda:	2100      	movs	r1, #0
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f001 fd83 	bl	80058e8 <RCCEx_PLL2_Config>
 8003de2:	4603      	mov	r3, r0
 8003de4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003de6:	e00e      	b.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	3324      	adds	r3, #36	; 0x24
 8003dec:	2100      	movs	r1, #0
 8003dee:	4618      	mov	r0, r3
 8003df0:	f001 fe2c 	bl	8005a4c <RCCEx_PLL3_Config>
 8003df4:	4603      	mov	r3, r0
 8003df6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003df8:	e005      	b.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	75fb      	strb	r3, [r7, #23]
      break;
 8003dfe:	e002      	b.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8003e00:	bf00      	nop
 8003e02:	e000      	b.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8003e04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e06:	7dfb      	ldrb	r3, [r7, #23]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d109      	bne.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003e0c:	4b9b      	ldr	r3, [pc, #620]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003e0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e10:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e18:	4998      	ldr	r1, [pc, #608]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	650b      	str	r3, [r1, #80]	; 0x50
 8003e1e:	e001      	b.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e20:	7dfb      	ldrb	r3, [r7, #23]
 8003e22:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d049      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e38:	d02e      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8003e3a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e3e:	d828      	bhi.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8003e40:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e44:	d02a      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8003e46:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e4a:	d822      	bhi.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8003e4c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003e50:	d026      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8003e52:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003e56:	d81c      	bhi.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8003e58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e5c:	d010      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8003e5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e62:	d816      	bhi.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d01d      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8003e68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e6c:	d111      	bne.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	3304      	adds	r3, #4
 8003e72:	2101      	movs	r1, #1
 8003e74:	4618      	mov	r0, r3
 8003e76:	f001 fd37 	bl	80058e8 <RCCEx_PLL2_Config>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003e7e:	e012      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	3324      	adds	r3, #36	; 0x24
 8003e84:	2101      	movs	r1, #1
 8003e86:	4618      	mov	r0, r3
 8003e88:	f001 fde0 	bl	8005a4c <RCCEx_PLL3_Config>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003e90:	e009      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	75fb      	strb	r3, [r7, #23]
      break;
 8003e96:	e006      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003e98:	bf00      	nop
 8003e9a:	e004      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003e9c:	bf00      	nop
 8003e9e:	e002      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003ea0:	bf00      	nop
 8003ea2:	e000      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003ea4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ea6:	7dfb      	ldrb	r3, [r7, #23]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d109      	bne.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003eac:	4b73      	ldr	r3, [pc, #460]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003eae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eb0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eb8:	4970      	ldr	r1, [pc, #448]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	650b      	str	r3, [r1, #80]	; 0x50
 8003ebe:	e001      	b.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ec0:	7dfb      	ldrb	r3, [r7, #23]
 8003ec2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d04b      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003ed6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003eda:	d02e      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8003edc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ee0:	d828      	bhi.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ee6:	d02a      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8003ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eec:	d822      	bhi.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003eee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003ef2:	d026      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8003ef4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003ef8:	d81c      	bhi.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003efa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003efe:	d010      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x496>
 8003f00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f04:	d816      	bhi.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d01d      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8003f0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f0e:	d111      	bne.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	3304      	adds	r3, #4
 8003f14:	2101      	movs	r1, #1
 8003f16:	4618      	mov	r0, r3
 8003f18:	f001 fce6 	bl	80058e8 <RCCEx_PLL2_Config>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003f20:	e012      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	3324      	adds	r3, #36	; 0x24
 8003f26:	2101      	movs	r1, #1
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f001 fd8f 	bl	8005a4c <RCCEx_PLL3_Config>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003f32:	e009      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	75fb      	strb	r3, [r7, #23]
      break;
 8003f38:	e006      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003f3a:	bf00      	nop
 8003f3c:	e004      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003f3e:	bf00      	nop
 8003f40:	e002      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003f42:	bf00      	nop
 8003f44:	e000      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003f46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f48:	7dfb      	ldrb	r3, [r7, #23]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d10a      	bne.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003f4e:	4b4b      	ldr	r3, [pc, #300]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f52:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003f5c:	4947      	ldr	r1, [pc, #284]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	658b      	str	r3, [r1, #88]	; 0x58
 8003f62:	e001      	b.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f64:	7dfb      	ldrb	r3, [r7, #23]
 8003f66:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d02f      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f7c:	d00e      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x510>
 8003f7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f82:	d814      	bhi.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x522>
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d015      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8003f88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f8c:	d10f      	bne.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f8e:	4b3b      	ldr	r3, [pc, #236]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f92:	4a3a      	ldr	r2, [pc, #232]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003f94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f98:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003f9a:	e00c      	b.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	3304      	adds	r3, #4
 8003fa0:	2101      	movs	r1, #1
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f001 fca0 	bl	80058e8 <RCCEx_PLL2_Config>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003fac:	e003      	b.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	75fb      	strb	r3, [r7, #23]
      break;
 8003fb2:	e000      	b.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8003fb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fb6:	7dfb      	ldrb	r3, [r7, #23]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d109      	bne.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003fbc:	4b2f      	ldr	r3, [pc, #188]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003fbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fc0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fc8:	492c      	ldr	r1, [pc, #176]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	650b      	str	r3, [r1, #80]	; 0x50
 8003fce:	e001      	b.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fd0:	7dfb      	ldrb	r3, [r7, #23]
 8003fd2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d032      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fe4:	2b03      	cmp	r3, #3
 8003fe6:	d81b      	bhi.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8003fe8:	a201      	add	r2, pc, #4	; (adr r2, 8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8003fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fee:	bf00      	nop
 8003ff0:	08004027 	.word	0x08004027
 8003ff4:	08004001 	.word	0x08004001
 8003ff8:	0800400f 	.word	0x0800400f
 8003ffc:	08004027 	.word	0x08004027
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004000:	4b1e      	ldr	r3, [pc, #120]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004004:	4a1d      	ldr	r2, [pc, #116]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004006:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800400a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800400c:	e00c      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	3304      	adds	r3, #4
 8004012:	2102      	movs	r1, #2
 8004014:	4618      	mov	r0, r3
 8004016:	f001 fc67 	bl	80058e8 <RCCEx_PLL2_Config>
 800401a:	4603      	mov	r3, r0
 800401c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800401e:	e003      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	75fb      	strb	r3, [r7, #23]
      break;
 8004024:	e000      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8004026:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004028:	7dfb      	ldrb	r3, [r7, #23]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d109      	bne.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800402e:	4b13      	ldr	r3, [pc, #76]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004032:	f023 0203 	bic.w	r2, r3, #3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800403a:	4910      	ldr	r1, [pc, #64]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800403c:	4313      	orrs	r3, r2
 800403e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004040:	e001      	b.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004042:	7dfb      	ldrb	r3, [r7, #23]
 8004044:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800404e:	2b00      	cmp	r3, #0
 8004050:	f000 808a 	beq.w	8004168 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004054:	4b0a      	ldr	r3, [pc, #40]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a09      	ldr	r2, [pc, #36]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800405a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800405e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004060:	f7fc fbfc 	bl	800085c <HAL_GetTick>
 8004064:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004066:	e00d      	b.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004068:	f7fc fbf8 	bl	800085c <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	2b64      	cmp	r3, #100	; 0x64
 8004074:	d906      	bls.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	75fb      	strb	r3, [r7, #23]
        break;
 800407a:	e009      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800407c:	58024400 	.word	0x58024400
 8004080:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004084:	4bb9      	ldr	r3, [pc, #740]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800408c:	2b00      	cmp	r3, #0
 800408e:	d0eb      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8004090:	7dfb      	ldrb	r3, [r7, #23]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d166      	bne.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004096:	4bb6      	ldr	r3, [pc, #728]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004098:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80040a0:	4053      	eors	r3, r2
 80040a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d013      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040aa:	4bb1      	ldr	r3, [pc, #708]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80040ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040b2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80040b4:	4bae      	ldr	r3, [pc, #696]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80040b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b8:	4aad      	ldr	r2, [pc, #692]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80040ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040be:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80040c0:	4bab      	ldr	r3, [pc, #684]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80040c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c4:	4aaa      	ldr	r2, [pc, #680]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80040c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040ca:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80040cc:	4aa8      	ldr	r2, [pc, #672]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80040d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040dc:	d115      	bne.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040de:	f7fc fbbd 	bl	800085c <HAL_GetTick>
 80040e2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80040e4:	e00b      	b.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040e6:	f7fc fbb9 	bl	800085c <HAL_GetTick>
 80040ea:	4602      	mov	r2, r0
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d902      	bls.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 80040f8:	2303      	movs	r3, #3
 80040fa:	75fb      	strb	r3, [r7, #23]
            break;
 80040fc:	e005      	b.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80040fe:	4b9c      	ldr	r3, [pc, #624]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004102:	f003 0302 	and.w	r3, r3, #2
 8004106:	2b00      	cmp	r3, #0
 8004108:	d0ed      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 800410a:	7dfb      	ldrb	r3, [r7, #23]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d126      	bne.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004116:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800411a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800411e:	d10d      	bne.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8004120:	4b93      	ldr	r3, [pc, #588]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004122:	691b      	ldr	r3, [r3, #16]
 8004124:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800412e:	0919      	lsrs	r1, r3, #4
 8004130:	4b90      	ldr	r3, [pc, #576]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004132:	400b      	ands	r3, r1
 8004134:	498e      	ldr	r1, [pc, #568]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004136:	4313      	orrs	r3, r2
 8004138:	610b      	str	r3, [r1, #16]
 800413a:	e005      	b.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 800413c:	4b8c      	ldr	r3, [pc, #560]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800413e:	691b      	ldr	r3, [r3, #16]
 8004140:	4a8b      	ldr	r2, [pc, #556]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004142:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004146:	6113      	str	r3, [r2, #16]
 8004148:	4b89      	ldr	r3, [pc, #548]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800414a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004152:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004156:	4986      	ldr	r1, [pc, #536]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004158:	4313      	orrs	r3, r2
 800415a:	670b      	str	r3, [r1, #112]	; 0x70
 800415c:	e004      	b.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800415e:	7dfb      	ldrb	r3, [r7, #23]
 8004160:	75bb      	strb	r3, [r7, #22]
 8004162:	e001      	b.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004164:	7dfb      	ldrb	r3, [r7, #23]
 8004166:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0301 	and.w	r3, r3, #1
 8004170:	2b00      	cmp	r3, #0
 8004172:	d07e      	beq.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004178:	2b28      	cmp	r3, #40	; 0x28
 800417a:	d867      	bhi.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 800417c:	a201      	add	r2, pc, #4	; (adr r2, 8004184 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 800417e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004182:	bf00      	nop
 8004184:	08004253 	.word	0x08004253
 8004188:	0800424d 	.word	0x0800424d
 800418c:	0800424d 	.word	0x0800424d
 8004190:	0800424d 	.word	0x0800424d
 8004194:	0800424d 	.word	0x0800424d
 8004198:	0800424d 	.word	0x0800424d
 800419c:	0800424d 	.word	0x0800424d
 80041a0:	0800424d 	.word	0x0800424d
 80041a4:	08004229 	.word	0x08004229
 80041a8:	0800424d 	.word	0x0800424d
 80041ac:	0800424d 	.word	0x0800424d
 80041b0:	0800424d 	.word	0x0800424d
 80041b4:	0800424d 	.word	0x0800424d
 80041b8:	0800424d 	.word	0x0800424d
 80041bc:	0800424d 	.word	0x0800424d
 80041c0:	0800424d 	.word	0x0800424d
 80041c4:	0800423b 	.word	0x0800423b
 80041c8:	0800424d 	.word	0x0800424d
 80041cc:	0800424d 	.word	0x0800424d
 80041d0:	0800424d 	.word	0x0800424d
 80041d4:	0800424d 	.word	0x0800424d
 80041d8:	0800424d 	.word	0x0800424d
 80041dc:	0800424d 	.word	0x0800424d
 80041e0:	0800424d 	.word	0x0800424d
 80041e4:	08004253 	.word	0x08004253
 80041e8:	0800424d 	.word	0x0800424d
 80041ec:	0800424d 	.word	0x0800424d
 80041f0:	0800424d 	.word	0x0800424d
 80041f4:	0800424d 	.word	0x0800424d
 80041f8:	0800424d 	.word	0x0800424d
 80041fc:	0800424d 	.word	0x0800424d
 8004200:	0800424d 	.word	0x0800424d
 8004204:	08004253 	.word	0x08004253
 8004208:	0800424d 	.word	0x0800424d
 800420c:	0800424d 	.word	0x0800424d
 8004210:	0800424d 	.word	0x0800424d
 8004214:	0800424d 	.word	0x0800424d
 8004218:	0800424d 	.word	0x0800424d
 800421c:	0800424d 	.word	0x0800424d
 8004220:	0800424d 	.word	0x0800424d
 8004224:	08004253 	.word	0x08004253
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	3304      	adds	r3, #4
 800422c:	2101      	movs	r1, #1
 800422e:	4618      	mov	r0, r3
 8004230:	f001 fb5a 	bl	80058e8 <RCCEx_PLL2_Config>
 8004234:	4603      	mov	r3, r0
 8004236:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004238:	e00c      	b.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	3324      	adds	r3, #36	; 0x24
 800423e:	2101      	movs	r1, #1
 8004240:	4618      	mov	r0, r3
 8004242:	f001 fc03 	bl	8005a4c <RCCEx_PLL3_Config>
 8004246:	4603      	mov	r3, r0
 8004248:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800424a:	e003      	b.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	75fb      	strb	r3, [r7, #23]
      break;
 8004250:	e000      	b.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 8004252:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004254:	7dfb      	ldrb	r3, [r7, #23]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d109      	bne.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800425a:	4b45      	ldr	r3, [pc, #276]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800425c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800425e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004266:	4942      	ldr	r1, [pc, #264]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004268:	4313      	orrs	r3, r2
 800426a:	654b      	str	r3, [r1, #84]	; 0x54
 800426c:	e001      	b.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800426e:	7dfb      	ldrb	r3, [r7, #23]
 8004270:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0302 	and.w	r3, r3, #2
 800427a:	2b00      	cmp	r3, #0
 800427c:	d037      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004282:	2b05      	cmp	r3, #5
 8004284:	d820      	bhi.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8004286:	a201      	add	r2, pc, #4	; (adr r2, 800428c <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8004288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800428c:	080042cf 	.word	0x080042cf
 8004290:	080042a5 	.word	0x080042a5
 8004294:	080042b7 	.word	0x080042b7
 8004298:	080042cf 	.word	0x080042cf
 800429c:	080042cf 	.word	0x080042cf
 80042a0:	080042cf 	.word	0x080042cf
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	3304      	adds	r3, #4
 80042a8:	2101      	movs	r1, #1
 80042aa:	4618      	mov	r0, r3
 80042ac:	f001 fb1c 	bl	80058e8 <RCCEx_PLL2_Config>
 80042b0:	4603      	mov	r3, r0
 80042b2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80042b4:	e00c      	b.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	3324      	adds	r3, #36	; 0x24
 80042ba:	2101      	movs	r1, #1
 80042bc:	4618      	mov	r0, r3
 80042be:	f001 fbc5 	bl	8005a4c <RCCEx_PLL3_Config>
 80042c2:	4603      	mov	r3, r0
 80042c4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80042c6:	e003      	b.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	75fb      	strb	r3, [r7, #23]
      break;
 80042cc:	e000      	b.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 80042ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042d0:	7dfb      	ldrb	r3, [r7, #23]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d109      	bne.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80042d6:	4b26      	ldr	r3, [pc, #152]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80042d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042da:	f023 0207 	bic.w	r2, r3, #7
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042e2:	4923      	ldr	r1, [pc, #140]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	654b      	str	r3, [r1, #84]	; 0x54
 80042e8:	e001      	b.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042ea:	7dfb      	ldrb	r3, [r7, #23]
 80042ec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0304 	and.w	r3, r3, #4
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d040      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004300:	2b05      	cmp	r3, #5
 8004302:	d821      	bhi.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8004304:	a201      	add	r2, pc, #4	; (adr r2, 800430c <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8004306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800430a:	bf00      	nop
 800430c:	0800434f 	.word	0x0800434f
 8004310:	08004325 	.word	0x08004325
 8004314:	08004337 	.word	0x08004337
 8004318:	0800434f 	.word	0x0800434f
 800431c:	0800434f 	.word	0x0800434f
 8004320:	0800434f 	.word	0x0800434f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	3304      	adds	r3, #4
 8004328:	2101      	movs	r1, #1
 800432a:	4618      	mov	r0, r3
 800432c:	f001 fadc 	bl	80058e8 <RCCEx_PLL2_Config>
 8004330:	4603      	mov	r3, r0
 8004332:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004334:	e00c      	b.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	3324      	adds	r3, #36	; 0x24
 800433a:	2101      	movs	r1, #1
 800433c:	4618      	mov	r0, r3
 800433e:	f001 fb85 	bl	8005a4c <RCCEx_PLL3_Config>
 8004342:	4603      	mov	r3, r0
 8004344:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004346:	e003      	b.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	75fb      	strb	r3, [r7, #23]
      break;
 800434c:	e000      	b.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 800434e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004350:	7dfb      	ldrb	r3, [r7, #23]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d110      	bne.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004356:	4b06      	ldr	r3, [pc, #24]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800435a:	f023 0207 	bic.w	r2, r3, #7
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004364:	4902      	ldr	r1, [pc, #8]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004366:	4313      	orrs	r3, r2
 8004368:	658b      	str	r3, [r1, #88]	; 0x58
 800436a:	e007      	b.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 800436c:	58024800 	.word	0x58024800
 8004370:	58024400 	.word	0x58024400
 8004374:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004378:	7dfb      	ldrb	r3, [r7, #23]
 800437a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0320 	and.w	r3, r3, #32
 8004384:	2b00      	cmp	r3, #0
 8004386:	d04b      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800438e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004392:	d02e      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8004394:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004398:	d828      	bhi.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x960>
 800439a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800439e:	d02a      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80043a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043a4:	d822      	bhi.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x960>
 80043a6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80043aa:	d026      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80043ac:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80043b0:	d81c      	bhi.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x960>
 80043b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043b6:	d010      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x94e>
 80043b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043bc:	d816      	bhi.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x960>
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d01d      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x972>
 80043c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043c6:	d111      	bne.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	3304      	adds	r3, #4
 80043cc:	2100      	movs	r1, #0
 80043ce:	4618      	mov	r0, r3
 80043d0:	f001 fa8a 	bl	80058e8 <RCCEx_PLL2_Config>
 80043d4:	4603      	mov	r3, r0
 80043d6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80043d8:	e012      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	3324      	adds	r3, #36	; 0x24
 80043de:	2102      	movs	r1, #2
 80043e0:	4618      	mov	r0, r3
 80043e2:	f001 fb33 	bl	8005a4c <RCCEx_PLL3_Config>
 80043e6:	4603      	mov	r3, r0
 80043e8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80043ea:	e009      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	75fb      	strb	r3, [r7, #23]
      break;
 80043f0:	e006      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80043f2:	bf00      	nop
 80043f4:	e004      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80043f6:	bf00      	nop
 80043f8:	e002      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80043fa:	bf00      	nop
 80043fc:	e000      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80043fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004400:	7dfb      	ldrb	r3, [r7, #23]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d10a      	bne.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004406:	4bb2      	ldr	r3, [pc, #712]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800440a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004414:	49ae      	ldr	r1, [pc, #696]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004416:	4313      	orrs	r3, r2
 8004418:	654b      	str	r3, [r1, #84]	; 0x54
 800441a:	e001      	b.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800441c:	7dfb      	ldrb	r3, [r7, #23]
 800441e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004428:	2b00      	cmp	r3, #0
 800442a:	d04b      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004432:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004436:	d02e      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8004438:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800443c:	d828      	bhi.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800443e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004442:	d02a      	beq.n	800449a <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8004444:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004448:	d822      	bhi.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800444a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800444e:	d026      	beq.n	800449e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8004450:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004454:	d81c      	bhi.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004456:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800445a:	d010      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 800445c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004460:	d816      	bhi.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004462:	2b00      	cmp	r3, #0
 8004464:	d01d      	beq.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8004466:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800446a:	d111      	bne.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	3304      	adds	r3, #4
 8004470:	2100      	movs	r1, #0
 8004472:	4618      	mov	r0, r3
 8004474:	f001 fa38 	bl	80058e8 <RCCEx_PLL2_Config>
 8004478:	4603      	mov	r3, r0
 800447a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800447c:	e012      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	3324      	adds	r3, #36	; 0x24
 8004482:	2102      	movs	r1, #2
 8004484:	4618      	mov	r0, r3
 8004486:	f001 fae1 	bl	8005a4c <RCCEx_PLL3_Config>
 800448a:	4603      	mov	r3, r0
 800448c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800448e:	e009      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	75fb      	strb	r3, [r7, #23]
      break;
 8004494:	e006      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004496:	bf00      	nop
 8004498:	e004      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800449a:	bf00      	nop
 800449c:	e002      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800449e:	bf00      	nop
 80044a0:	e000      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80044a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044a4:	7dfb      	ldrb	r3, [r7, #23]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d10a      	bne.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80044aa:	4b89      	ldr	r3, [pc, #548]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80044ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044ae:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044b8:	4985      	ldr	r1, [pc, #532]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80044ba:	4313      	orrs	r3, r2
 80044bc:	658b      	str	r3, [r1, #88]	; 0x58
 80044be:	e001      	b.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044c0:	7dfb      	ldrb	r3, [r7, #23]
 80044c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d04b      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044d6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80044da:	d02e      	beq.n	800453a <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80044dc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80044e0:	d828      	bhi.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80044e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044e6:	d02a      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80044e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044ec:	d822      	bhi.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80044ee:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80044f2:	d026      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 80044f4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80044f8:	d81c      	bhi.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80044fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044fe:	d010      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8004500:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004504:	d816      	bhi.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004506:	2b00      	cmp	r3, #0
 8004508:	d01d      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 800450a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800450e:	d111      	bne.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	3304      	adds	r3, #4
 8004514:	2100      	movs	r1, #0
 8004516:	4618      	mov	r0, r3
 8004518:	f001 f9e6 	bl	80058e8 <RCCEx_PLL2_Config>
 800451c:	4603      	mov	r3, r0
 800451e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004520:	e012      	b.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	3324      	adds	r3, #36	; 0x24
 8004526:	2102      	movs	r1, #2
 8004528:	4618      	mov	r0, r3
 800452a:	f001 fa8f 	bl	8005a4c <RCCEx_PLL3_Config>
 800452e:	4603      	mov	r3, r0
 8004530:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004532:	e009      	b.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	75fb      	strb	r3, [r7, #23]
      break;
 8004538:	e006      	b.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800453a:	bf00      	nop
 800453c:	e004      	b.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800453e:	bf00      	nop
 8004540:	e002      	b.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004542:	bf00      	nop
 8004544:	e000      	b.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004546:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004548:	7dfb      	ldrb	r3, [r7, #23]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d10a      	bne.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800454e:	4b60      	ldr	r3, [pc, #384]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004552:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800455c:	495c      	ldr	r1, [pc, #368]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800455e:	4313      	orrs	r3, r2
 8004560:	658b      	str	r3, [r1, #88]	; 0x58
 8004562:	e001      	b.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004564:	7dfb      	ldrb	r3, [r7, #23]
 8004566:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0308 	and.w	r3, r3, #8
 8004570:	2b00      	cmp	r3, #0
 8004572:	d018      	beq.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004578:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800457c:	d10a      	bne.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	3324      	adds	r3, #36	; 0x24
 8004582:	2102      	movs	r1, #2
 8004584:	4618      	mov	r0, r3
 8004586:	f001 fa61 	bl	8005a4c <RCCEx_PLL3_Config>
 800458a:	4603      	mov	r3, r0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d001      	beq.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8004594:	4b4e      	ldr	r3, [pc, #312]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004598:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045a0:	494b      	ldr	r1, [pc, #300]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0310 	and.w	r3, r3, #16
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d01a      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045bc:	d10a      	bne.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	3324      	adds	r3, #36	; 0x24
 80045c2:	2102      	movs	r1, #2
 80045c4:	4618      	mov	r0, r3
 80045c6:	f001 fa41 	bl	8005a4c <RCCEx_PLL3_Config>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d001      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80045d4:	4b3e      	ldr	r3, [pc, #248]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80045d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045e2:	493b      	ldr	r1, [pc, #236]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80045e4:	4313      	orrs	r3, r2
 80045e6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d034      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80045fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80045fe:	d01d      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8004600:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004604:	d817      	bhi.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8004606:	2b00      	cmp	r3, #0
 8004608:	d003      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800460a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800460e:	d009      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004610:	e011      	b.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	3304      	adds	r3, #4
 8004616:	2100      	movs	r1, #0
 8004618:	4618      	mov	r0, r3
 800461a:	f001 f965 	bl	80058e8 <RCCEx_PLL2_Config>
 800461e:	4603      	mov	r3, r0
 8004620:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004622:	e00c      	b.n	800463e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	3324      	adds	r3, #36	; 0x24
 8004628:	2102      	movs	r1, #2
 800462a:	4618      	mov	r0, r3
 800462c:	f001 fa0e 	bl	8005a4c <RCCEx_PLL3_Config>
 8004630:	4603      	mov	r3, r0
 8004632:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004634:	e003      	b.n	800463e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	75fb      	strb	r3, [r7, #23]
      break;
 800463a:	e000      	b.n	800463e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 800463c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800463e:	7dfb      	ldrb	r3, [r7, #23]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d10a      	bne.n	800465a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004644:	4b22      	ldr	r3, [pc, #136]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004648:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004652:	491f      	ldr	r1, [pc, #124]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004654:	4313      	orrs	r3, r2
 8004656:	658b      	str	r3, [r1, #88]	; 0x58
 8004658:	e001      	b.n	800465e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800465a:	7dfb      	ldrb	r3, [r7, #23]
 800465c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d036      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004670:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004674:	d01c      	beq.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8004676:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800467a:	d816      	bhi.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800467c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004680:	d003      	beq.n	800468a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8004682:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004686:	d007      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8004688:	e00f      	b.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800468a:	4b11      	ldr	r3, [pc, #68]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800468c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468e:	4a10      	ldr	r2, [pc, #64]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004690:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004694:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004696:	e00c      	b.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	3324      	adds	r3, #36	; 0x24
 800469c:	2101      	movs	r1, #1
 800469e:	4618      	mov	r0, r3
 80046a0:	f001 f9d4 	bl	8005a4c <RCCEx_PLL3_Config>
 80046a4:	4603      	mov	r3, r0
 80046a6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80046a8:	e003      	b.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	75fb      	strb	r3, [r7, #23]
      break;
 80046ae:	e000      	b.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 80046b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046b2:	7dfb      	ldrb	r3, [r7, #23]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d10d      	bne.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80046b8:	4b05      	ldr	r3, [pc, #20]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80046ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046c6:	4902      	ldr	r1, [pc, #8]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80046c8:	4313      	orrs	r3, r2
 80046ca:	654b      	str	r3, [r1, #84]	; 0x54
 80046cc:	e004      	b.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 80046ce:	bf00      	nop
 80046d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046d4:	7dfb      	ldrb	r3, [r7, #23]
 80046d6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d029      	beq.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d003      	beq.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80046ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046f0:	d007      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80046f2:	e00f      	b.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046f4:	4b61      	ldr	r3, [pc, #388]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80046f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f8:	4a60      	ldr	r2, [pc, #384]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80046fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004700:	e00b      	b.n	800471a <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	3304      	adds	r3, #4
 8004706:	2102      	movs	r1, #2
 8004708:	4618      	mov	r0, r3
 800470a:	f001 f8ed 	bl	80058e8 <RCCEx_PLL2_Config>
 800470e:	4603      	mov	r3, r0
 8004710:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004712:	e002      	b.n	800471a <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	75fb      	strb	r3, [r7, #23]
      break;
 8004718:	bf00      	nop
    }

    if(ret == HAL_OK)
 800471a:	7dfb      	ldrb	r3, [r7, #23]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d109      	bne.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004720:	4b56      	ldr	r3, [pc, #344]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004722:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004724:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800472c:	4953      	ldr	r1, [pc, #332]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800472e:	4313      	orrs	r3, r2
 8004730:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004732:	e001      	b.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004734:	7dfb      	ldrb	r3, [r7, #23]
 8004736:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d00a      	beq.n	800475a <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	3324      	adds	r3, #36	; 0x24
 8004748:	2102      	movs	r1, #2
 800474a:	4618      	mov	r0, r3
 800474c:	f001 f97e 	bl	8005a4c <RCCEx_PLL3_Config>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d001      	beq.n	800475a <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d030      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800476a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800476e:	d017      	beq.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004770:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004774:	d811      	bhi.n	800479a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8004776:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800477a:	d013      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 800477c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004780:	d80b      	bhi.n	800479a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8004782:	2b00      	cmp	r3, #0
 8004784:	d010      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8004786:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800478a:	d106      	bne.n	800479a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800478c:	4b3b      	ldr	r3, [pc, #236]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800478e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004790:	4a3a      	ldr	r2, [pc, #232]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004792:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004796:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004798:	e007      	b.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	75fb      	strb	r3, [r7, #23]
      break;
 800479e:	e004      	b.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80047a0:	bf00      	nop
 80047a2:	e002      	b.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80047a4:	bf00      	nop
 80047a6:	e000      	b.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80047a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047aa:	7dfb      	ldrb	r3, [r7, #23]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d109      	bne.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80047b0:	4b32      	ldr	r3, [pc, #200]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80047b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047bc:	492f      	ldr	r1, [pc, #188]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80047be:	4313      	orrs	r3, r2
 80047c0:	654b      	str	r3, [r1, #84]	; 0x54
 80047c2:	e001      	b.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047c4:	7dfb      	ldrb	r3, [r7, #23]
 80047c6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d008      	beq.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80047d4:	4b29      	ldr	r3, [pc, #164]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80047d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047d8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047e0:	4926      	ldr	r1, [pc, #152]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80047e2:	4313      	orrs	r3, r2
 80047e4:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d008      	beq.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80047f2:	4b22      	ldr	r3, [pc, #136]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80047f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047f6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047fe:	491f      	ldr	r1, [pc, #124]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004800:	4313      	orrs	r3, r2
 8004802:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800480c:	2b00      	cmp	r3, #0
 800480e:	d00d      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004810:	4b1a      	ldr	r3, [pc, #104]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004812:	691b      	ldr	r3, [r3, #16]
 8004814:	4a19      	ldr	r2, [pc, #100]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004816:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800481a:	6113      	str	r3, [r2, #16]
 800481c:	4b17      	ldr	r3, [pc, #92]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800481e:	691a      	ldr	r2, [r3, #16]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004826:	4915      	ldr	r1, [pc, #84]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004828:	4313      	orrs	r3, r2
 800482a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2b00      	cmp	r3, #0
 8004832:	da08      	bge.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004834:	4b11      	ldr	r3, [pc, #68]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004836:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004838:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004840:	490e      	ldr	r1, [pc, #56]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004842:	4313      	orrs	r3, r2
 8004844:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d009      	beq.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004852:	4b0a      	ldr	r3, [pc, #40]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004856:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004860:	4906      	ldr	r1, [pc, #24]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004862:	4313      	orrs	r3, r2
 8004864:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004866:	7dbb      	ldrb	r3, [r7, #22]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d101      	bne.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 800486c:	2300      	movs	r3, #0
 800486e:	e000      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8004870:	2301      	movs	r3, #1
}
 8004872:	4618      	mov	r0, r3
 8004874:	3718      	adds	r7, #24
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	58024400 	.word	0x58024400

08004880 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b090      	sub	sp, #64	; 0x40
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800488e:	f040 8089 	bne.w	80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8004892:	4b95      	ldr	r3, [pc, #596]	; (8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004894:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004896:	f003 0307 	and.w	r3, r3, #7
 800489a:	633b      	str	r3, [r7, #48]	; 0x30
 800489c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800489e:	2b04      	cmp	r3, #4
 80048a0:	d87d      	bhi.n	800499e <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 80048a2:	a201      	add	r2, pc, #4	; (adr r2, 80048a8 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 80048a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048a8:	080048bd 	.word	0x080048bd
 80048ac:	080048e1 	.word	0x080048e1
 80048b0:	08004905 	.word	0x08004905
 80048b4:	08004999 	.word	0x08004999
 80048b8:	08004929 	.word	0x08004929

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80048bc:	4b8a      	ldr	r3, [pc, #552]	; (8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80048c8:	d107      	bne.n	80048da <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80048ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80048ce:	4618      	mov	r0, r3
 80048d0:	f000 feb8 	bl	8005644 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 80048d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80048d8:	e3ed      	b.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80048da:	2300      	movs	r3, #0
 80048dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80048de:	e3ea      	b.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80048e0:	4b81      	ldr	r3, [pc, #516]	; (8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048ec:	d107      	bne.n	80048fe <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80048ee:	f107 0318 	add.w	r3, r7, #24
 80048f2:	4618      	mov	r0, r3
 80048f4:	f000 fbfe 	bl	80050f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80048fc:	e3db      	b.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80048fe:	2300      	movs	r3, #0
 8004900:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004902:	e3d8      	b.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004904:	4b78      	ldr	r3, [pc, #480]	; (8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800490c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004910:	d107      	bne.n	8004922 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004912:	f107 030c 	add.w	r3, r7, #12
 8004916:	4618      	mov	r0, r3
 8004918:	f000 fd40 	bl	800539c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004920:	e3c9      	b.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004922:	2300      	movs	r3, #0
 8004924:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004926:	e3c6      	b.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004928:	4b6f      	ldr	r3, [pc, #444]	; (8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800492a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800492c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004930:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004932:	4b6d      	ldr	r3, [pc, #436]	; (8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0304 	and.w	r3, r3, #4
 800493a:	2b04      	cmp	r3, #4
 800493c:	d10c      	bne.n	8004958 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800493e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004940:	2b00      	cmp	r3, #0
 8004942:	d109      	bne.n	8004958 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004944:	4b68      	ldr	r3, [pc, #416]	; (8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	08db      	lsrs	r3, r3, #3
 800494a:	f003 0303 	and.w	r3, r3, #3
 800494e:	4a67      	ldr	r2, [pc, #412]	; (8004aec <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8004950:	fa22 f303 	lsr.w	r3, r2, r3
 8004954:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004956:	e01e      	b.n	8004996 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004958:	4b63      	ldr	r3, [pc, #396]	; (8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004960:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004964:	d106      	bne.n	8004974 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8004966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004968:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800496c:	d102      	bne.n	8004974 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800496e:	4b60      	ldr	r3, [pc, #384]	; (8004af0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004970:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004972:	e010      	b.n	8004996 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004974:	4b5c      	ldr	r3, [pc, #368]	; (8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800497c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004980:	d106      	bne.n	8004990 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8004982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004984:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004988:	d102      	bne.n	8004990 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800498a:	4b5a      	ldr	r3, [pc, #360]	; (8004af4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800498c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800498e:	e002      	b.n	8004996 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004990:	2300      	movs	r3, #0
 8004992:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004994:	e38f      	b.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8004996:	e38e      	b.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004998:	4b57      	ldr	r3, [pc, #348]	; (8004af8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800499a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800499c:	e38b      	b.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800499e:	2300      	movs	r3, #0
 80049a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80049a2:	e388      	b.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049aa:	f040 80a7 	bne.w	8004afc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 80049ae:	4b4e      	ldr	r3, [pc, #312]	; (8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80049b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049b2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80049b6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80049b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80049be:	d054      	beq.n	8004a6a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 80049c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80049c6:	f200 808b 	bhi.w	8004ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 80049ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049cc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80049d0:	f000 8083 	beq.w	8004ada <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80049d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80049da:	f200 8081 	bhi.w	8004ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 80049de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049e4:	d02f      	beq.n	8004a46 <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 80049e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049ec:	d878      	bhi.n	8004ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 80049ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d004      	beq.n	80049fe <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 80049f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049fa:	d012      	beq.n	8004a22 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 80049fc:	e070      	b.n	8004ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80049fe:	4b3a      	ldr	r3, [pc, #232]	; (8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a06:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a0a:	d107      	bne.n	8004a1c <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a10:	4618      	mov	r0, r3
 8004a12:	f000 fe17 	bl	8005644 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a18:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004a1a:	e34c      	b.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004a20:	e349      	b.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004a22:	4b31      	ldr	r3, [pc, #196]	; (8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a2e:	d107      	bne.n	8004a40 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004a30:	f107 0318 	add.w	r3, r7, #24
 8004a34:	4618      	mov	r0, r3
 8004a36:	f000 fb5d 	bl	80050f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004a3e:	e33a      	b.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004a40:	2300      	movs	r3, #0
 8004a42:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004a44:	e337      	b.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004a46:	4b28      	ldr	r3, [pc, #160]	; (8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a52:	d107      	bne.n	8004a64 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004a54:	f107 030c 	add.w	r3, r7, #12
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f000 fc9f 	bl	800539c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004a62:	e328      	b.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004a64:	2300      	movs	r3, #0
 8004a66:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004a68:	e325      	b.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004a6a:	4b1f      	ldr	r3, [pc, #124]	; (8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a6e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004a72:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004a74:	4b1c      	ldr	r3, [pc, #112]	; (8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 0304 	and.w	r3, r3, #4
 8004a7c:	2b04      	cmp	r3, #4
 8004a7e:	d10c      	bne.n	8004a9a <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 8004a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d109      	bne.n	8004a9a <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004a86:	4b18      	ldr	r3, [pc, #96]	; (8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	08db      	lsrs	r3, r3, #3
 8004a8c:	f003 0303 	and.w	r3, r3, #3
 8004a90:	4a16      	ldr	r2, [pc, #88]	; (8004aec <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8004a92:	fa22 f303 	lsr.w	r3, r2, r3
 8004a96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a98:	e01e      	b.n	8004ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004a9a:	4b13      	ldr	r3, [pc, #76]	; (8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004aa6:	d106      	bne.n	8004ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8004aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aaa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004aae:	d102      	bne.n	8004ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004ab0:	4b0f      	ldr	r3, [pc, #60]	; (8004af0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ab4:	e010      	b.n	8004ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004ab6:	4b0c      	ldr	r3, [pc, #48]	; (8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004abe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ac2:	d106      	bne.n	8004ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8004ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ac6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004aca:	d102      	bne.n	8004ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004acc:	4b09      	ldr	r3, [pc, #36]	; (8004af4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8004ace:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ad0:	e002      	b.n	8004ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004ad6:	e2ee      	b.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8004ad8:	e2ed      	b.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004ada:	4b07      	ldr	r3, [pc, #28]	; (8004af8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004adc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ade:	e2ea      	b.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ae4:	e2e7      	b.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8004ae6:	bf00      	nop
 8004ae8:	58024400 	.word	0x58024400
 8004aec:	03d09000 	.word	0x03d09000
 8004af0:	003d0900 	.word	0x003d0900
 8004af4:	017d7840 	.word	0x017d7840
 8004af8:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b02:	f040 809c 	bne.w	8004c3e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8004b06:	4b9e      	ldr	r3, [pc, #632]	; (8004d80 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b0a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8004b0e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b12:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b16:	d054      	beq.n	8004bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8004b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b1a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b1e:	f200 808b 	bhi.w	8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8004b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b24:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004b28:	f000 8083 	beq.w	8004c32 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8004b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b2e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004b32:	f200 8081 	bhi.w	8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8004b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b3c:	d02f      	beq.n	8004b9e <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8004b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b44:	d878      	bhi.n	8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8004b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d004      	beq.n	8004b56 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8004b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b4e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b52:	d012      	beq.n	8004b7a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8004b54:	e070      	b.n	8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004b56:	4b8a      	ldr	r3, [pc, #552]	; (8004d80 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b62:	d107      	bne.n	8004b74 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004b64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f000 fd6b 	bl	8005644 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b70:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004b72:	e2a0      	b.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004b74:	2300      	movs	r3, #0
 8004b76:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b78:	e29d      	b.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004b7a:	4b81      	ldr	r3, [pc, #516]	; (8004d80 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b86:	d107      	bne.n	8004b98 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b88:	f107 0318 	add.w	r3, r7, #24
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f000 fab1 	bl	80050f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004b92:	69bb      	ldr	r3, [r7, #24]
 8004b94:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8004b96:	e28e      	b.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b9c:	e28b      	b.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004b9e:	4b78      	ldr	r3, [pc, #480]	; (8004d80 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ba6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004baa:	d107      	bne.n	8004bbc <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004bac:	f107 030c 	add.w	r3, r7, #12
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f000 fbf3 	bl	800539c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004bba:	e27c      	b.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004bc0:	e279      	b.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004bc2:	4b6f      	ldr	r3, [pc, #444]	; (8004d80 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bc6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004bca:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004bcc:	4b6c      	ldr	r3, [pc, #432]	; (8004d80 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 0304 	and.w	r3, r3, #4
 8004bd4:	2b04      	cmp	r3, #4
 8004bd6:	d10c      	bne.n	8004bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8004bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d109      	bne.n	8004bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004bde:	4b68      	ldr	r3, [pc, #416]	; (8004d80 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	08db      	lsrs	r3, r3, #3
 8004be4:	f003 0303 	and.w	r3, r3, #3
 8004be8:	4a66      	ldr	r2, [pc, #408]	; (8004d84 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8004bea:	fa22 f303 	lsr.w	r3, r2, r3
 8004bee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bf0:	e01e      	b.n	8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004bf2:	4b63      	ldr	r3, [pc, #396]	; (8004d80 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bfe:	d106      	bne.n	8004c0e <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 8004c00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c06:	d102      	bne.n	8004c0e <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004c08:	4b5f      	ldr	r3, [pc, #380]	; (8004d88 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8004c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c0c:	e010      	b.n	8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004c0e:	4b5c      	ldr	r3, [pc, #368]	; (8004d80 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c16:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c1a:	d106      	bne.n	8004c2a <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8004c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c22:	d102      	bne.n	8004c2a <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004c24:	4b59      	ldr	r3, [pc, #356]	; (8004d8c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8004c26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c28:	e002      	b.n	8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004c2e:	e242      	b.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8004c30:	e241      	b.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004c32:	4b57      	ldr	r3, [pc, #348]	; (8004d90 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8004c34:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c36:	e23e      	b.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c3c:	e23b      	b.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c44:	f040 80a6 	bne.w	8004d94 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8004c48:	4b4d      	ldr	r3, [pc, #308]	; (8004d80 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004c4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c4c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8004c50:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c58:	d054      	beq.n	8004d04 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8004c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c60:	f200 808b 	bhi.w	8004d7a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8004c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c66:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004c6a:	f000 8083 	beq.w	8004d74 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 8004c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c70:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004c74:	f200 8081 	bhi.w	8004d7a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8004c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c7e:	d02f      	beq.n	8004ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 8004c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c86:	d878      	bhi.n	8004d7a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8004c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d004      	beq.n	8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8004c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c94:	d012      	beq.n	8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 8004c96:	e070      	b.n	8004d7a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004c98:	4b39      	ldr	r3, [pc, #228]	; (8004d80 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ca0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ca4:	d107      	bne.n	8004cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004ca6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004caa:	4618      	mov	r0, r3
 8004cac:	f000 fcca 	bl	8005644 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004cb4:	e1ff      	b.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004cba:	e1fc      	b.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004cbc:	4b30      	ldr	r3, [pc, #192]	; (8004d80 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cc4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cc8:	d107      	bne.n	8004cda <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004cca:	f107 0318 	add.w	r3, r7, #24
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f000 fa10 	bl	80050f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004cd4:	69bb      	ldr	r3, [r7, #24]
 8004cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004cd8:	e1ed      	b.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004cde:	e1ea      	b.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004ce0:	4b27      	ldr	r3, [pc, #156]	; (8004d80 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ce8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cec:	d107      	bne.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004cee:	f107 030c 	add.w	r3, r7, #12
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f000 fb52 	bl	800539c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004cfc:	e1db      	b.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d02:	e1d8      	b.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004d04:	4b1e      	ldr	r3, [pc, #120]	; (8004d80 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004d06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d08:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004d0c:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004d0e:	4b1c      	ldr	r3, [pc, #112]	; (8004d80 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 0304 	and.w	r3, r3, #4
 8004d16:	2b04      	cmp	r3, #4
 8004d18:	d10c      	bne.n	8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 8004d1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d109      	bne.n	8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004d20:	4b17      	ldr	r3, [pc, #92]	; (8004d80 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	08db      	lsrs	r3, r3, #3
 8004d26:	f003 0303 	and.w	r3, r3, #3
 8004d2a:	4a16      	ldr	r2, [pc, #88]	; (8004d84 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8004d2c:	fa22 f303 	lsr.w	r3, r2, r3
 8004d30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d32:	e01e      	b.n	8004d72 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004d34:	4b12      	ldr	r3, [pc, #72]	; (8004d80 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d40:	d106      	bne.n	8004d50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8004d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d48:	d102      	bne.n	8004d50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004d4a:	4b0f      	ldr	r3, [pc, #60]	; (8004d88 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8004d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d4e:	e010      	b.n	8004d72 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004d50:	4b0b      	ldr	r3, [pc, #44]	; (8004d80 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d5c:	d106      	bne.n	8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8004d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d64:	d102      	bne.n	8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004d66:	4b09      	ldr	r3, [pc, #36]	; (8004d8c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8004d68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d6a:	e002      	b.n	8004d72 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004d70:	e1a1      	b.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8004d72:	e1a0      	b.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004d74:	4b06      	ldr	r3, [pc, #24]	; (8004d90 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8004d76:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d78:	e19d      	b.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d7e:	e19a      	b.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8004d80:	58024400 	.word	0x58024400
 8004d84:	03d09000 	.word	0x03d09000
 8004d88:	003d0900 	.word	0x003d0900
 8004d8c:	017d7840 	.word	0x017d7840
 8004d90:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004d9a:	d173      	bne.n	8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8004d9c:	4b9a      	ldr	r3, [pc, #616]	; (8005008 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004d9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004da0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004da4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004da8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004dac:	d02f      	beq.n	8004e0e <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8004dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004db4:	d863      	bhi.n	8004e7e <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8004db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d004      	beq.n	8004dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 8004dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dc2:	d012      	beq.n	8004dea <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 8004dc4:	e05b      	b.n	8004e7e <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004dc6:	4b90      	ldr	r3, [pc, #576]	; (8005008 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004dce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004dd2:	d107      	bne.n	8004de4 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004dd4:	f107 0318 	add.w	r3, r7, #24
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f000 f98b 	bl	80050f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004dde:	69bb      	ldr	r3, [r7, #24]
 8004de0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004de2:	e168      	b.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004de4:	2300      	movs	r3, #0
 8004de6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004de8:	e165      	b.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004dea:	4b87      	ldr	r3, [pc, #540]	; (8005008 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004df2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004df6:	d107      	bne.n	8004e08 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004df8:	f107 030c 	add.w	r3, r7, #12
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f000 facd 	bl	800539c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004e06:	e156      	b.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e0c:	e153      	b.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004e0e:	4b7e      	ldr	r3, [pc, #504]	; (8005008 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e12:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004e16:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004e18:	4b7b      	ldr	r3, [pc, #492]	; (8005008 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 0304 	and.w	r3, r3, #4
 8004e20:	2b04      	cmp	r3, #4
 8004e22:	d10c      	bne.n	8004e3e <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 8004e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d109      	bne.n	8004e3e <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004e2a:	4b77      	ldr	r3, [pc, #476]	; (8005008 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	08db      	lsrs	r3, r3, #3
 8004e30:	f003 0303 	and.w	r3, r3, #3
 8004e34:	4a75      	ldr	r2, [pc, #468]	; (800500c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8004e36:	fa22 f303 	lsr.w	r3, r2, r3
 8004e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e3c:	e01e      	b.n	8004e7c <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004e3e:	4b72      	ldr	r3, [pc, #456]	; (8005008 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e4a:	d106      	bne.n	8004e5a <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8004e4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e52:	d102      	bne.n	8004e5a <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004e54:	4b6e      	ldr	r3, [pc, #440]	; (8005010 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8004e56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e58:	e010      	b.n	8004e7c <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004e5a:	4b6b      	ldr	r3, [pc, #428]	; (8005008 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e62:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e66:	d106      	bne.n	8004e76 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8004e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e6e:	d102      	bne.n	8004e76 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004e70:	4b68      	ldr	r3, [pc, #416]	; (8005014 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8004e72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e74:	e002      	b.n	8004e7c <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004e76:	2300      	movs	r3, #0
 8004e78:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004e7a:	e11c      	b.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8004e7c:	e11b      	b.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e82:	e118      	b.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e8a:	d133      	bne.n	8004ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8004e8c:	4b5e      	ldr	r3, [pc, #376]	; (8005008 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004e8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e94:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d004      	beq.n	8004ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8004e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ea2:	d012      	beq.n	8004eca <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 8004ea4:	e023      	b.n	8004eee <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004ea6:	4b58      	ldr	r3, [pc, #352]	; (8005008 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004eb2:	d107      	bne.n	8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004eb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f000 fbc3 	bl	8005644 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004ec2:	e0f8      	b.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ec8:	e0f5      	b.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004eca:	4b4f      	ldr	r3, [pc, #316]	; (8005008 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ed2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ed6:	d107      	bne.n	8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ed8:	f107 0318 	add.w	r3, r7, #24
 8004edc:	4618      	mov	r0, r3
 8004ede:	f000 f909 	bl	80050f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004ee2:	6a3b      	ldr	r3, [r7, #32]
 8004ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004ee6:	e0e6      	b.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004eec:	e0e3      	b.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ef2:	e0e0      	b.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004efa:	f040 808d 	bne.w	8005018 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8004efe:	4b42      	ldr	r3, [pc, #264]	; (8005008 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f02:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8004f06:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f0e:	d06b      	beq.n	8004fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 8004f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f16:	d874      	bhi.n	8005002 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8004f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f1e:	d056      	beq.n	8004fce <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8004f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f26:	d86c      	bhi.n	8005002 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8004f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f2a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004f2e:	d03b      	beq.n	8004fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 8004f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f32:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004f36:	d864      	bhi.n	8005002 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8004f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f3e:	d021      	beq.n	8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8004f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f46:	d85c      	bhi.n	8005002 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8004f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d004      	beq.n	8004f58 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8004f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f54:	d004      	beq.n	8004f60 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8004f56:	e054      	b.n	8005002 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8004f58:	f000 f8b6 	bl	80050c8 <HAL_RCCEx_GetD3PCLK1Freq>
 8004f5c:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8004f5e:	e0aa      	b.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004f60:	4b29      	ldr	r3, [pc, #164]	; (8005008 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f6c:	d107      	bne.n	8004f7e <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f6e:	f107 0318 	add.w	r3, r7, #24
 8004f72:	4618      	mov	r0, r3
 8004f74:	f000 f8be 	bl	80050f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004f7c:	e09b      	b.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f82:	e098      	b.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004f84:	4b20      	ldr	r3, [pc, #128]	; (8005008 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f90:	d107      	bne.n	8004fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f92:	f107 030c 	add.w	r3, r7, #12
 8004f96:	4618      	mov	r0, r3
 8004f98:	f000 fa00 	bl	800539c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004fa0:	e089      	b.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004fa6:	e086      	b.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004fa8:	4b17      	ldr	r3, [pc, #92]	; (8005008 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 0304 	and.w	r3, r3, #4
 8004fb0:	2b04      	cmp	r3, #4
 8004fb2:	d109      	bne.n	8004fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004fb4:	4b14      	ldr	r3, [pc, #80]	; (8005008 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	08db      	lsrs	r3, r3, #3
 8004fba:	f003 0303 	and.w	r3, r3, #3
 8004fbe:	4a13      	ldr	r2, [pc, #76]	; (800500c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8004fc0:	fa22 f303 	lsr.w	r3, r2, r3
 8004fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004fc6:	e076      	b.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004fcc:	e073      	b.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8004fce:	4b0e      	ldr	r3, [pc, #56]	; (8005008 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fda:	d102      	bne.n	8004fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 8004fdc:	4b0c      	ldr	r3, [pc, #48]	; (8005010 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8004fde:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004fe0:	e069      	b.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004fe6:	e066      	b.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004fe8:	4b07      	ldr	r3, [pc, #28]	; (8005008 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ff0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ff4:	d102      	bne.n	8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 8004ff6:	4b07      	ldr	r3, [pc, #28]	; (8005014 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8004ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004ffa:	e05c      	b.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005000:	e059      	b.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8005002:	2300      	movs	r3, #0
 8005004:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005006:	e056      	b.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8005008:	58024400 	.word	0x58024400
 800500c:	03d09000 	.word	0x03d09000
 8005010:	003d0900 	.word	0x003d0900
 8005014:	017d7840 	.word	0x017d7840
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800501e:	d148      	bne.n	80050b2 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8005020:	4b27      	ldr	r3, [pc, #156]	; (80050c0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005022:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005024:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005028:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800502a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800502c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005030:	d02a      	beq.n	8005088 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 8005032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005034:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005038:	d838      	bhi.n	80050ac <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 800503a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800503c:	2b00      	cmp	r3, #0
 800503e:	d004      	beq.n	800504a <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 8005040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005042:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005046:	d00d      	beq.n	8005064 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 8005048:	e030      	b.n	80050ac <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800504a:	4b1d      	ldr	r3, [pc, #116]	; (80050c0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005052:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005056:	d102      	bne.n	800505e <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 8005058:	4b1a      	ldr	r3, [pc, #104]	; (80050c4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800505a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800505c:	e02b      	b.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800505e:	2300      	movs	r3, #0
 8005060:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005062:	e028      	b.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005064:	4b16      	ldr	r3, [pc, #88]	; (80050c0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800506c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005070:	d107      	bne.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005072:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005076:	4618      	mov	r0, r3
 8005078:	f000 fae4 	bl	8005644 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800507c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800507e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005080:	e019      	b.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8005082:	2300      	movs	r3, #0
 8005084:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005086:	e016      	b.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005088:	4b0d      	ldr	r3, [pc, #52]	; (80050c0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005090:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005094:	d107      	bne.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005096:	f107 0318 	add.w	r3, r7, #24
 800509a:	4618      	mov	r0, r3
 800509c:	f000 f82a 	bl	80050f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80050a0:	69fb      	ldr	r3, [r7, #28]
 80050a2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80050a4:	e007      	b.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80050a6:	2300      	movs	r3, #0
 80050a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80050aa:	e004      	b.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 80050ac:	2300      	movs	r3, #0
 80050ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80050b0:	e001      	b.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 80050b2:	2300      	movs	r3, #0
 80050b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80050b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3740      	adds	r7, #64	; 0x40
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}
 80050c0:	58024400 	.word	0x58024400
 80050c4:	017d7840 	.word	0x017d7840

080050c8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80050cc:	f7fe fc82 	bl	80039d4 <HAL_RCC_GetHCLKFreq>
 80050d0:	4602      	mov	r2, r0
 80050d2:	4b06      	ldr	r3, [pc, #24]	; (80050ec <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80050d4:	6a1b      	ldr	r3, [r3, #32]
 80050d6:	091b      	lsrs	r3, r3, #4
 80050d8:	f003 0307 	and.w	r3, r3, #7
 80050dc:	4904      	ldr	r1, [pc, #16]	; (80050f0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80050de:	5ccb      	ldrb	r3, [r1, r3]
 80050e0:	f003 031f 	and.w	r3, r3, #31
 80050e4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	bd80      	pop	{r7, pc}
 80050ec:	58024400 	.word	0x58024400
 80050f0:	0800a2d8 	.word	0x0800a2d8

080050f4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b089      	sub	sp, #36	; 0x24
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80050fc:	4ba1      	ldr	r3, [pc, #644]	; (8005384 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005100:	f003 0303 	and.w	r3, r3, #3
 8005104:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005106:	4b9f      	ldr	r3, [pc, #636]	; (8005384 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800510a:	0b1b      	lsrs	r3, r3, #12
 800510c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005110:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005112:	4b9c      	ldr	r3, [pc, #624]	; (8005384 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005116:	091b      	lsrs	r3, r3, #4
 8005118:	f003 0301 	and.w	r3, r3, #1
 800511c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800511e:	4b99      	ldr	r3, [pc, #612]	; (8005384 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005122:	08db      	lsrs	r3, r3, #3
 8005124:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005128:	693a      	ldr	r2, [r7, #16]
 800512a:	fb02 f303 	mul.w	r3, r2, r3
 800512e:	ee07 3a90 	vmov	s15, r3
 8005132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005136:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	2b00      	cmp	r3, #0
 800513e:	f000 8111 	beq.w	8005364 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005142:	69bb      	ldr	r3, [r7, #24]
 8005144:	2b02      	cmp	r3, #2
 8005146:	f000 8083 	beq.w	8005250 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	2b02      	cmp	r3, #2
 800514e:	f200 80a1 	bhi.w	8005294 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005152:	69bb      	ldr	r3, [r7, #24]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d003      	beq.n	8005160 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005158:	69bb      	ldr	r3, [r7, #24]
 800515a:	2b01      	cmp	r3, #1
 800515c:	d056      	beq.n	800520c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800515e:	e099      	b.n	8005294 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005160:	4b88      	ldr	r3, [pc, #544]	; (8005384 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 0320 	and.w	r3, r3, #32
 8005168:	2b00      	cmp	r3, #0
 800516a:	d02d      	beq.n	80051c8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800516c:	4b85      	ldr	r3, [pc, #532]	; (8005384 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	08db      	lsrs	r3, r3, #3
 8005172:	f003 0303 	and.w	r3, r3, #3
 8005176:	4a84      	ldr	r2, [pc, #528]	; (8005388 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005178:	fa22 f303 	lsr.w	r3, r2, r3
 800517c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	ee07 3a90 	vmov	s15, r3
 8005184:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	ee07 3a90 	vmov	s15, r3
 800518e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005192:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005196:	4b7b      	ldr	r3, [pc, #492]	; (8005384 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800519a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800519e:	ee07 3a90 	vmov	s15, r3
 80051a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80051aa:	eddf 5a78 	vldr	s11, [pc, #480]	; 800538c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80051ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051c2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80051c6:	e087      	b.n	80052d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	ee07 3a90 	vmov	s15, r3
 80051ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051d2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005390 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80051d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051da:	4b6a      	ldr	r3, [pc, #424]	; (8005384 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051e2:	ee07 3a90 	vmov	s15, r3
 80051e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80051ee:	eddf 5a67 	vldr	s11, [pc, #412]	; 800538c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80051f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005202:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005206:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800520a:	e065      	b.n	80052d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	ee07 3a90 	vmov	s15, r3
 8005212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005216:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005394 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800521a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800521e:	4b59      	ldr	r3, [pc, #356]	; (8005384 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005222:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005226:	ee07 3a90 	vmov	s15, r3
 800522a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800522e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005232:	eddf 5a56 	vldr	s11, [pc, #344]	; 800538c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005236:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800523a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800523e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005242:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005246:	ee67 7a27 	vmul.f32	s15, s14, s15
 800524a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800524e:	e043      	b.n	80052d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	ee07 3a90 	vmov	s15, r3
 8005256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800525a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005398 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800525e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005262:	4b48      	ldr	r3, [pc, #288]	; (8005384 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005266:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800526a:	ee07 3a90 	vmov	s15, r3
 800526e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005272:	ed97 6a03 	vldr	s12, [r7, #12]
 8005276:	eddf 5a45 	vldr	s11, [pc, #276]	; 800538c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800527a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800527e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005282:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005286:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800528a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800528e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005292:	e021      	b.n	80052d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	ee07 3a90 	vmov	s15, r3
 800529a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800529e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005394 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80052a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052a6:	4b37      	ldr	r3, [pc, #220]	; (8005384 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052ae:	ee07 3a90 	vmov	s15, r3
 80052b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80052ba:	eddf 5a34 	vldr	s11, [pc, #208]	; 800538c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80052be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80052d6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80052d8:	4b2a      	ldr	r3, [pc, #168]	; (8005384 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052dc:	0a5b      	lsrs	r3, r3, #9
 80052de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052e2:	ee07 3a90 	vmov	s15, r3
 80052e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80052ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80052f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80052f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052fe:	ee17 2a90 	vmov	r2, s15
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005306:	4b1f      	ldr	r3, [pc, #124]	; (8005384 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800530a:	0c1b      	lsrs	r3, r3, #16
 800530c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005310:	ee07 3a90 	vmov	s15, r3
 8005314:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005318:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800531c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005320:	edd7 6a07 	vldr	s13, [r7, #28]
 8005324:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005328:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800532c:	ee17 2a90 	vmov	r2, s15
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005334:	4b13      	ldr	r3, [pc, #76]	; (8005384 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005338:	0e1b      	lsrs	r3, r3, #24
 800533a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800533e:	ee07 3a90 	vmov	s15, r3
 8005342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005346:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800534a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800534e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005352:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005356:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800535a:	ee17 2a90 	vmov	r2, s15
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005362:	e008      	b.n	8005376 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	609a      	str	r2, [r3, #8]
}
 8005376:	bf00      	nop
 8005378:	3724      	adds	r7, #36	; 0x24
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr
 8005382:	bf00      	nop
 8005384:	58024400 	.word	0x58024400
 8005388:	03d09000 	.word	0x03d09000
 800538c:	46000000 	.word	0x46000000
 8005390:	4c742400 	.word	0x4c742400
 8005394:	4a742400 	.word	0x4a742400
 8005398:	4bbebc20 	.word	0x4bbebc20

0800539c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800539c:	b480      	push	{r7}
 800539e:	b089      	sub	sp, #36	; 0x24
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80053a4:	4ba1      	ldr	r3, [pc, #644]	; (800562c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053a8:	f003 0303 	and.w	r3, r3, #3
 80053ac:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80053ae:	4b9f      	ldr	r3, [pc, #636]	; (800562c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053b2:	0d1b      	lsrs	r3, r3, #20
 80053b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053b8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80053ba:	4b9c      	ldr	r3, [pc, #624]	; (800562c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053be:	0a1b      	lsrs	r3, r3, #8
 80053c0:	f003 0301 	and.w	r3, r3, #1
 80053c4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80053c6:	4b99      	ldr	r3, [pc, #612]	; (800562c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ca:	08db      	lsrs	r3, r3, #3
 80053cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80053d0:	693a      	ldr	r2, [r7, #16]
 80053d2:	fb02 f303 	mul.w	r3, r2, r3
 80053d6:	ee07 3a90 	vmov	s15, r3
 80053da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053de:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	f000 8111 	beq.w	800560c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80053ea:	69bb      	ldr	r3, [r7, #24]
 80053ec:	2b02      	cmp	r3, #2
 80053ee:	f000 8083 	beq.w	80054f8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80053f2:	69bb      	ldr	r3, [r7, #24]
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	f200 80a1 	bhi.w	800553c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80053fa:	69bb      	ldr	r3, [r7, #24]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d003      	beq.n	8005408 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005400:	69bb      	ldr	r3, [r7, #24]
 8005402:	2b01      	cmp	r3, #1
 8005404:	d056      	beq.n	80054b4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005406:	e099      	b.n	800553c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005408:	4b88      	ldr	r3, [pc, #544]	; (800562c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 0320 	and.w	r3, r3, #32
 8005410:	2b00      	cmp	r3, #0
 8005412:	d02d      	beq.n	8005470 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005414:	4b85      	ldr	r3, [pc, #532]	; (800562c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	08db      	lsrs	r3, r3, #3
 800541a:	f003 0303 	and.w	r3, r3, #3
 800541e:	4a84      	ldr	r2, [pc, #528]	; (8005630 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005420:	fa22 f303 	lsr.w	r3, r2, r3
 8005424:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	ee07 3a90 	vmov	s15, r3
 800542c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	ee07 3a90 	vmov	s15, r3
 8005436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800543a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800543e:	4b7b      	ldr	r3, [pc, #492]	; (800562c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005442:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005446:	ee07 3a90 	vmov	s15, r3
 800544a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800544e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005452:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005634 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005456:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800545a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800545e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005462:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005466:	ee67 7a27 	vmul.f32	s15, s14, s15
 800546a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800546e:	e087      	b.n	8005580 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	ee07 3a90 	vmov	s15, r3
 8005476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800547a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005638 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800547e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005482:	4b6a      	ldr	r3, [pc, #424]	; (800562c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005486:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800548a:	ee07 3a90 	vmov	s15, r3
 800548e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005492:	ed97 6a03 	vldr	s12, [r7, #12]
 8005496:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005634 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800549a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800549e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80054b2:	e065      	b.n	8005580 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	ee07 3a90 	vmov	s15, r3
 80054ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054be:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800563c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80054c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054c6:	4b59      	ldr	r3, [pc, #356]	; (800562c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054ce:	ee07 3a90 	vmov	s15, r3
 80054d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80054da:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005634 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80054de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80054f6:	e043      	b.n	8005580 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	ee07 3a90 	vmov	s15, r3
 80054fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005502:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005640 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005506:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800550a:	4b48      	ldr	r3, [pc, #288]	; (800562c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800550c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800550e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005512:	ee07 3a90 	vmov	s15, r3
 8005516:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800551a:	ed97 6a03 	vldr	s12, [r7, #12]
 800551e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005634 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005522:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005526:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800552a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800552e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005532:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005536:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800553a:	e021      	b.n	8005580 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	ee07 3a90 	vmov	s15, r3
 8005542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005546:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800563c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800554a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800554e:	4b37      	ldr	r3, [pc, #220]	; (800562c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005552:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005556:	ee07 3a90 	vmov	s15, r3
 800555a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800555e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005562:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005634 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005566:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800556a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800556e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005572:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005576:	ee67 7a27 	vmul.f32	s15, s14, s15
 800557a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800557e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005580:	4b2a      	ldr	r3, [pc, #168]	; (800562c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005584:	0a5b      	lsrs	r3, r3, #9
 8005586:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800558a:	ee07 3a90 	vmov	s15, r3
 800558e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005592:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005596:	ee37 7a87 	vadd.f32	s14, s15, s14
 800559a:	edd7 6a07 	vldr	s13, [r7, #28]
 800559e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055a6:	ee17 2a90 	vmov	r2, s15
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80055ae:	4b1f      	ldr	r3, [pc, #124]	; (800562c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b2:	0c1b      	lsrs	r3, r3, #16
 80055b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055b8:	ee07 3a90 	vmov	s15, r3
 80055bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80055c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80055c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80055cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055d4:	ee17 2a90 	vmov	r2, s15
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80055dc:	4b13      	ldr	r3, [pc, #76]	; (800562c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e0:	0e1b      	lsrs	r3, r3, #24
 80055e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055e6:	ee07 3a90 	vmov	s15, r3
 80055ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80055f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80055f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80055fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005602:	ee17 2a90 	vmov	r2, s15
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800560a:	e008      	b.n	800561e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	609a      	str	r2, [r3, #8]
}
 800561e:	bf00      	nop
 8005620:	3724      	adds	r7, #36	; 0x24
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr
 800562a:	bf00      	nop
 800562c:	58024400 	.word	0x58024400
 8005630:	03d09000 	.word	0x03d09000
 8005634:	46000000 	.word	0x46000000
 8005638:	4c742400 	.word	0x4c742400
 800563c:	4a742400 	.word	0x4a742400
 8005640:	4bbebc20 	.word	0x4bbebc20

08005644 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8005644:	b480      	push	{r7}
 8005646:	b089      	sub	sp, #36	; 0x24
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800564c:	4ba0      	ldr	r3, [pc, #640]	; (80058d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800564e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005650:	f003 0303 	and.w	r3, r3, #3
 8005654:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8005656:	4b9e      	ldr	r3, [pc, #632]	; (80058d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800565a:	091b      	lsrs	r3, r3, #4
 800565c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005660:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8005662:	4b9b      	ldr	r3, [pc, #620]	; (80058d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005666:	f003 0301 	and.w	r3, r3, #1
 800566a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800566c:	4b98      	ldr	r3, [pc, #608]	; (80058d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800566e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005670:	08db      	lsrs	r3, r3, #3
 8005672:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005676:	693a      	ldr	r2, [r7, #16]
 8005678:	fb02 f303 	mul.w	r3, r2, r3
 800567c:	ee07 3a90 	vmov	s15, r3
 8005680:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005684:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	2b00      	cmp	r3, #0
 800568c:	f000 8111 	beq.w	80058b2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8005690:	69bb      	ldr	r3, [r7, #24]
 8005692:	2b02      	cmp	r3, #2
 8005694:	f000 8083 	beq.w	800579e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	2b02      	cmp	r3, #2
 800569c:	f200 80a1 	bhi.w	80057e2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80056a0:	69bb      	ldr	r3, [r7, #24]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d003      	beq.n	80056ae <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80056a6:	69bb      	ldr	r3, [r7, #24]
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d056      	beq.n	800575a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80056ac:	e099      	b.n	80057e2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80056ae:	4b88      	ldr	r3, [pc, #544]	; (80058d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f003 0320 	and.w	r3, r3, #32
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d02d      	beq.n	8005716 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80056ba:	4b85      	ldr	r3, [pc, #532]	; (80058d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	08db      	lsrs	r3, r3, #3
 80056c0:	f003 0303 	and.w	r3, r3, #3
 80056c4:	4a83      	ldr	r2, [pc, #524]	; (80058d4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80056c6:	fa22 f303 	lsr.w	r3, r2, r3
 80056ca:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	ee07 3a90 	vmov	s15, r3
 80056d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	ee07 3a90 	vmov	s15, r3
 80056dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056e4:	4b7a      	ldr	r3, [pc, #488]	; (80058d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80056e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056ec:	ee07 3a90 	vmov	s15, r3
 80056f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056f4:	ed97 6a03 	vldr	s12, [r7, #12]
 80056f8:	eddf 5a77 	vldr	s11, [pc, #476]	; 80058d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80056fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005700:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005704:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005708:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800570c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005710:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005714:	e087      	b.n	8005826 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	ee07 3a90 	vmov	s15, r3
 800571c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005720:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80058dc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005724:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005728:	4b69      	ldr	r3, [pc, #420]	; (80058d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800572a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800572c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005730:	ee07 3a90 	vmov	s15, r3
 8005734:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005738:	ed97 6a03 	vldr	s12, [r7, #12]
 800573c:	eddf 5a66 	vldr	s11, [pc, #408]	; 80058d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005740:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005744:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005748:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800574c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005750:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005754:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005758:	e065      	b.n	8005826 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	ee07 3a90 	vmov	s15, r3
 8005760:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005764:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80058e0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8005768:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800576c:	4b58      	ldr	r3, [pc, #352]	; (80058d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800576e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005770:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005774:	ee07 3a90 	vmov	s15, r3
 8005778:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800577c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005780:	eddf 5a55 	vldr	s11, [pc, #340]	; 80058d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005784:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005788:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800578c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005790:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005794:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005798:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800579c:	e043      	b.n	8005826 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	ee07 3a90 	vmov	s15, r3
 80057a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057a8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80058e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80057ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057b0:	4b47      	ldr	r3, [pc, #284]	; (80058d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80057b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057b8:	ee07 3a90 	vmov	s15, r3
 80057bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057c0:	ed97 6a03 	vldr	s12, [r7, #12]
 80057c4:	eddf 5a44 	vldr	s11, [pc, #272]	; 80058d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80057c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057dc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80057e0:	e021      	b.n	8005826 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	ee07 3a90 	vmov	s15, r3
 80057e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057ec:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80058dc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80057f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057f4:	4b36      	ldr	r3, [pc, #216]	; (80058d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80057f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057fc:	ee07 3a90 	vmov	s15, r3
 8005800:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005804:	ed97 6a03 	vldr	s12, [r7, #12]
 8005808:	eddf 5a33 	vldr	s11, [pc, #204]	; 80058d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800580c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005810:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005814:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005818:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800581c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005820:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005824:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8005826:	4b2a      	ldr	r3, [pc, #168]	; (80058d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800582a:	0a5b      	lsrs	r3, r3, #9
 800582c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005830:	ee07 3a90 	vmov	s15, r3
 8005834:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005838:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800583c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005840:	edd7 6a07 	vldr	s13, [r7, #28]
 8005844:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005848:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800584c:	ee17 2a90 	vmov	r2, s15
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8005854:	4b1e      	ldr	r3, [pc, #120]	; (80058d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005858:	0c1b      	lsrs	r3, r3, #16
 800585a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800585e:	ee07 3a90 	vmov	s15, r3
 8005862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005866:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800586a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800586e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005872:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005876:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800587a:	ee17 2a90 	vmov	r2, s15
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8005882:	4b13      	ldr	r3, [pc, #76]	; (80058d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005886:	0e1b      	lsrs	r3, r3, #24
 8005888:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800588c:	ee07 3a90 	vmov	s15, r3
 8005890:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005894:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005898:	ee37 7a87 	vadd.f32	s14, s15, s14
 800589c:	edd7 6a07 	vldr	s13, [r7, #28]
 80058a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058a8:	ee17 2a90 	vmov	r2, s15
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80058b0:	e008      	b.n	80058c4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2200      	movs	r2, #0
 80058c2:	609a      	str	r2, [r3, #8]
}
 80058c4:	bf00      	nop
 80058c6:	3724      	adds	r7, #36	; 0x24
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr
 80058d0:	58024400 	.word	0x58024400
 80058d4:	03d09000 	.word	0x03d09000
 80058d8:	46000000 	.word	0x46000000
 80058dc:	4c742400 	.word	0x4c742400
 80058e0:	4a742400 	.word	0x4a742400
 80058e4:	4bbebc20 	.word	0x4bbebc20

080058e8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b084      	sub	sp, #16
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80058f2:	2300      	movs	r3, #0
 80058f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80058f6:	4b53      	ldr	r3, [pc, #332]	; (8005a44 <RCCEx_PLL2_Config+0x15c>)
 80058f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058fa:	f003 0303 	and.w	r3, r3, #3
 80058fe:	2b03      	cmp	r3, #3
 8005900:	d101      	bne.n	8005906 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e099      	b.n	8005a3a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005906:	4b4f      	ldr	r3, [pc, #316]	; (8005a44 <RCCEx_PLL2_Config+0x15c>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a4e      	ldr	r2, [pc, #312]	; (8005a44 <RCCEx_PLL2_Config+0x15c>)
 800590c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005910:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005912:	f7fa ffa3 	bl	800085c <HAL_GetTick>
 8005916:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005918:	e008      	b.n	800592c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800591a:	f7fa ff9f 	bl	800085c <HAL_GetTick>
 800591e:	4602      	mov	r2, r0
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	1ad3      	subs	r3, r2, r3
 8005924:	2b02      	cmp	r3, #2
 8005926:	d901      	bls.n	800592c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005928:	2303      	movs	r3, #3
 800592a:	e086      	b.n	8005a3a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800592c:	4b45      	ldr	r3, [pc, #276]	; (8005a44 <RCCEx_PLL2_Config+0x15c>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005934:	2b00      	cmp	r3, #0
 8005936:	d1f0      	bne.n	800591a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005938:	4b42      	ldr	r3, [pc, #264]	; (8005a44 <RCCEx_PLL2_Config+0x15c>)
 800593a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800593c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	031b      	lsls	r3, r3, #12
 8005946:	493f      	ldr	r1, [pc, #252]	; (8005a44 <RCCEx_PLL2_Config+0x15c>)
 8005948:	4313      	orrs	r3, r2
 800594a:	628b      	str	r3, [r1, #40]	; 0x28
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	3b01      	subs	r3, #1
 8005952:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	3b01      	subs	r3, #1
 800595c:	025b      	lsls	r3, r3, #9
 800595e:	b29b      	uxth	r3, r3
 8005960:	431a      	orrs	r2, r3
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	3b01      	subs	r3, #1
 8005968:	041b      	lsls	r3, r3, #16
 800596a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800596e:	431a      	orrs	r2, r3
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	691b      	ldr	r3, [r3, #16]
 8005974:	3b01      	subs	r3, #1
 8005976:	061b      	lsls	r3, r3, #24
 8005978:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800597c:	4931      	ldr	r1, [pc, #196]	; (8005a44 <RCCEx_PLL2_Config+0x15c>)
 800597e:	4313      	orrs	r3, r2
 8005980:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005982:	4b30      	ldr	r3, [pc, #192]	; (8005a44 <RCCEx_PLL2_Config+0x15c>)
 8005984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005986:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	695b      	ldr	r3, [r3, #20]
 800598e:	492d      	ldr	r1, [pc, #180]	; (8005a44 <RCCEx_PLL2_Config+0x15c>)
 8005990:	4313      	orrs	r3, r2
 8005992:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005994:	4b2b      	ldr	r3, [pc, #172]	; (8005a44 <RCCEx_PLL2_Config+0x15c>)
 8005996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005998:	f023 0220 	bic.w	r2, r3, #32
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	699b      	ldr	r3, [r3, #24]
 80059a0:	4928      	ldr	r1, [pc, #160]	; (8005a44 <RCCEx_PLL2_Config+0x15c>)
 80059a2:	4313      	orrs	r3, r2
 80059a4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80059a6:	4b27      	ldr	r3, [pc, #156]	; (8005a44 <RCCEx_PLL2_Config+0x15c>)
 80059a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059aa:	4a26      	ldr	r2, [pc, #152]	; (8005a44 <RCCEx_PLL2_Config+0x15c>)
 80059ac:	f023 0310 	bic.w	r3, r3, #16
 80059b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80059b2:	4b24      	ldr	r3, [pc, #144]	; (8005a44 <RCCEx_PLL2_Config+0x15c>)
 80059b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059b6:	4b24      	ldr	r3, [pc, #144]	; (8005a48 <RCCEx_PLL2_Config+0x160>)
 80059b8:	4013      	ands	r3, r2
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	69d2      	ldr	r2, [r2, #28]
 80059be:	00d2      	lsls	r2, r2, #3
 80059c0:	4920      	ldr	r1, [pc, #128]	; (8005a44 <RCCEx_PLL2_Config+0x15c>)
 80059c2:	4313      	orrs	r3, r2
 80059c4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80059c6:	4b1f      	ldr	r3, [pc, #124]	; (8005a44 <RCCEx_PLL2_Config+0x15c>)
 80059c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ca:	4a1e      	ldr	r2, [pc, #120]	; (8005a44 <RCCEx_PLL2_Config+0x15c>)
 80059cc:	f043 0310 	orr.w	r3, r3, #16
 80059d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d106      	bne.n	80059e6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80059d8:	4b1a      	ldr	r3, [pc, #104]	; (8005a44 <RCCEx_PLL2_Config+0x15c>)
 80059da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059dc:	4a19      	ldr	r2, [pc, #100]	; (8005a44 <RCCEx_PLL2_Config+0x15c>)
 80059de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80059e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80059e4:	e00f      	b.n	8005a06 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d106      	bne.n	80059fa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80059ec:	4b15      	ldr	r3, [pc, #84]	; (8005a44 <RCCEx_PLL2_Config+0x15c>)
 80059ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f0:	4a14      	ldr	r2, [pc, #80]	; (8005a44 <RCCEx_PLL2_Config+0x15c>)
 80059f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80059f8:	e005      	b.n	8005a06 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80059fa:	4b12      	ldr	r3, [pc, #72]	; (8005a44 <RCCEx_PLL2_Config+0x15c>)
 80059fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059fe:	4a11      	ldr	r2, [pc, #68]	; (8005a44 <RCCEx_PLL2_Config+0x15c>)
 8005a00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005a04:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005a06:	4b0f      	ldr	r3, [pc, #60]	; (8005a44 <RCCEx_PLL2_Config+0x15c>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a0e      	ldr	r2, [pc, #56]	; (8005a44 <RCCEx_PLL2_Config+0x15c>)
 8005a0c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005a10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a12:	f7fa ff23 	bl	800085c <HAL_GetTick>
 8005a16:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005a18:	e008      	b.n	8005a2c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005a1a:	f7fa ff1f 	bl	800085c <HAL_GetTick>
 8005a1e:	4602      	mov	r2, r0
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	1ad3      	subs	r3, r2, r3
 8005a24:	2b02      	cmp	r3, #2
 8005a26:	d901      	bls.n	8005a2c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005a28:	2303      	movs	r3, #3
 8005a2a:	e006      	b.n	8005a3a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005a2c:	4b05      	ldr	r3, [pc, #20]	; (8005a44 <RCCEx_PLL2_Config+0x15c>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d0f0      	beq.n	8005a1a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3710      	adds	r7, #16
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	bf00      	nop
 8005a44:	58024400 	.word	0x58024400
 8005a48:	ffff0007 	.word	0xffff0007

08005a4c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b084      	sub	sp, #16
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a56:	2300      	movs	r3, #0
 8005a58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005a5a:	4b53      	ldr	r3, [pc, #332]	; (8005ba8 <RCCEx_PLL3_Config+0x15c>)
 8005a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a5e:	f003 0303 	and.w	r3, r3, #3
 8005a62:	2b03      	cmp	r3, #3
 8005a64:	d101      	bne.n	8005a6a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	e099      	b.n	8005b9e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005a6a:	4b4f      	ldr	r3, [pc, #316]	; (8005ba8 <RCCEx_PLL3_Config+0x15c>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a4e      	ldr	r2, [pc, #312]	; (8005ba8 <RCCEx_PLL3_Config+0x15c>)
 8005a70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a76:	f7fa fef1 	bl	800085c <HAL_GetTick>
 8005a7a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005a7c:	e008      	b.n	8005a90 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005a7e:	f7fa feed 	bl	800085c <HAL_GetTick>
 8005a82:	4602      	mov	r2, r0
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	1ad3      	subs	r3, r2, r3
 8005a88:	2b02      	cmp	r3, #2
 8005a8a:	d901      	bls.n	8005a90 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005a8c:	2303      	movs	r3, #3
 8005a8e:	e086      	b.n	8005b9e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005a90:	4b45      	ldr	r3, [pc, #276]	; (8005ba8 <RCCEx_PLL3_Config+0x15c>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d1f0      	bne.n	8005a7e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005a9c:	4b42      	ldr	r3, [pc, #264]	; (8005ba8 <RCCEx_PLL3_Config+0x15c>)
 8005a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	051b      	lsls	r3, r3, #20
 8005aaa:	493f      	ldr	r1, [pc, #252]	; (8005ba8 <RCCEx_PLL3_Config+0x15c>)
 8005aac:	4313      	orrs	r3, r2
 8005aae:	628b      	str	r3, [r1, #40]	; 0x28
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	3b01      	subs	r3, #1
 8005ab6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	3b01      	subs	r3, #1
 8005ac0:	025b      	lsls	r3, r3, #9
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	431a      	orrs	r2, r3
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	68db      	ldr	r3, [r3, #12]
 8005aca:	3b01      	subs	r3, #1
 8005acc:	041b      	lsls	r3, r3, #16
 8005ace:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005ad2:	431a      	orrs	r2, r3
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	691b      	ldr	r3, [r3, #16]
 8005ad8:	3b01      	subs	r3, #1
 8005ada:	061b      	lsls	r3, r3, #24
 8005adc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005ae0:	4931      	ldr	r1, [pc, #196]	; (8005ba8 <RCCEx_PLL3_Config+0x15c>)
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005ae6:	4b30      	ldr	r3, [pc, #192]	; (8005ba8 <RCCEx_PLL3_Config+0x15c>)
 8005ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	695b      	ldr	r3, [r3, #20]
 8005af2:	492d      	ldr	r1, [pc, #180]	; (8005ba8 <RCCEx_PLL3_Config+0x15c>)
 8005af4:	4313      	orrs	r3, r2
 8005af6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005af8:	4b2b      	ldr	r3, [pc, #172]	; (8005ba8 <RCCEx_PLL3_Config+0x15c>)
 8005afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005afc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	699b      	ldr	r3, [r3, #24]
 8005b04:	4928      	ldr	r1, [pc, #160]	; (8005ba8 <RCCEx_PLL3_Config+0x15c>)
 8005b06:	4313      	orrs	r3, r2
 8005b08:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005b0a:	4b27      	ldr	r3, [pc, #156]	; (8005ba8 <RCCEx_PLL3_Config+0x15c>)
 8005b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b0e:	4a26      	ldr	r2, [pc, #152]	; (8005ba8 <RCCEx_PLL3_Config+0x15c>)
 8005b10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b14:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005b16:	4b24      	ldr	r3, [pc, #144]	; (8005ba8 <RCCEx_PLL3_Config+0x15c>)
 8005b18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b1a:	4b24      	ldr	r3, [pc, #144]	; (8005bac <RCCEx_PLL3_Config+0x160>)
 8005b1c:	4013      	ands	r3, r2
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	69d2      	ldr	r2, [r2, #28]
 8005b22:	00d2      	lsls	r2, r2, #3
 8005b24:	4920      	ldr	r1, [pc, #128]	; (8005ba8 <RCCEx_PLL3_Config+0x15c>)
 8005b26:	4313      	orrs	r3, r2
 8005b28:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005b2a:	4b1f      	ldr	r3, [pc, #124]	; (8005ba8 <RCCEx_PLL3_Config+0x15c>)
 8005b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b2e:	4a1e      	ldr	r2, [pc, #120]	; (8005ba8 <RCCEx_PLL3_Config+0x15c>)
 8005b30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b34:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d106      	bne.n	8005b4a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005b3c:	4b1a      	ldr	r3, [pc, #104]	; (8005ba8 <RCCEx_PLL3_Config+0x15c>)
 8005b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b40:	4a19      	ldr	r2, [pc, #100]	; (8005ba8 <RCCEx_PLL3_Config+0x15c>)
 8005b42:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005b46:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005b48:	e00f      	b.n	8005b6a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d106      	bne.n	8005b5e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005b50:	4b15      	ldr	r3, [pc, #84]	; (8005ba8 <RCCEx_PLL3_Config+0x15c>)
 8005b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b54:	4a14      	ldr	r2, [pc, #80]	; (8005ba8 <RCCEx_PLL3_Config+0x15c>)
 8005b56:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005b5a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005b5c:	e005      	b.n	8005b6a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005b5e:	4b12      	ldr	r3, [pc, #72]	; (8005ba8 <RCCEx_PLL3_Config+0x15c>)
 8005b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b62:	4a11      	ldr	r2, [pc, #68]	; (8005ba8 <RCCEx_PLL3_Config+0x15c>)
 8005b64:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b68:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005b6a:	4b0f      	ldr	r3, [pc, #60]	; (8005ba8 <RCCEx_PLL3_Config+0x15c>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a0e      	ldr	r2, [pc, #56]	; (8005ba8 <RCCEx_PLL3_Config+0x15c>)
 8005b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b76:	f7fa fe71 	bl	800085c <HAL_GetTick>
 8005b7a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005b7c:	e008      	b.n	8005b90 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005b7e:	f7fa fe6d 	bl	800085c <HAL_GetTick>
 8005b82:	4602      	mov	r2, r0
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	1ad3      	subs	r3, r2, r3
 8005b88:	2b02      	cmp	r3, #2
 8005b8a:	d901      	bls.n	8005b90 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005b8c:	2303      	movs	r3, #3
 8005b8e:	e006      	b.n	8005b9e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005b90:	4b05      	ldr	r3, [pc, #20]	; (8005ba8 <RCCEx_PLL3_Config+0x15c>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d0f0      	beq.n	8005b7e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3710      	adds	r7, #16
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}
 8005ba6:	bf00      	nop
 8005ba8:	58024400 	.word	0x58024400
 8005bac:	ffff0007 	.word	0xffff0007

08005bb0 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b086      	sub	sp, #24
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	60b9      	str	r1, [r7, #8]
 8005bba:	607a      	str	r2, [r7, #4]
 8005bbc:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	2b02      	cmp	r3, #2
 8005bc2:	d904      	bls.n	8005bce <HAL_SAI_InitProtocol+0x1e>
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	3b03      	subs	r3, #3
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d812      	bhi.n	8005bf2 <HAL_SAI_InitProtocol+0x42>
 8005bcc:	e008      	b.n	8005be0 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	687a      	ldr	r2, [r7, #4]
 8005bd2:	68b9      	ldr	r1, [r7, #8]
 8005bd4:	68f8      	ldr	r0, [r7, #12]
 8005bd6:	f000 fa31 	bl	800603c <SAI_InitI2S>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	75fb      	strb	r3, [r7, #23]
      break;
 8005bde:	e00b      	b.n	8005bf8 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	68b9      	ldr	r1, [r7, #8]
 8005be6:	68f8      	ldr	r0, [r7, #12]
 8005be8:	f000 fada 	bl	80061a0 <SAI_InitPCM>
 8005bec:	4603      	mov	r3, r0
 8005bee:	75fb      	strb	r3, [r7, #23]
      break;
 8005bf0:	e002      	b.n	8005bf8 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	75fb      	strb	r3, [r7, #23]
      break;
 8005bf6:	bf00      	nop
  }

  if (status == HAL_OK)
 8005bf8:	7dfb      	ldrb	r3, [r7, #23]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d104      	bne.n	8005c08 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 8005bfe:	68f8      	ldr	r0, [r7, #12]
 8005c00:	f000 f808 	bl	8005c14 <HAL_SAI_Init>
 8005c04:	4603      	mov	r3, r0
 8005c06:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005c08:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3718      	adds	r7, #24
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
	...

08005c14 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b08a      	sub	sp, #40	; 0x28
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d101      	bne.n	8005c26 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	e1fb      	b.n	800601e <HAL_SAI_Init+0x40a>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d113      	bne.n	8005c58 <HAL_SAI_Init+0x44>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a96      	ldr	r2, [pc, #600]	; (8005e90 <HAL_SAI_Init+0x27c>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d004      	beq.n	8005c44 <HAL_SAI_Init+0x30>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a95      	ldr	r2, [pc, #596]	; (8005e94 <HAL_SAI_Init+0x280>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d107      	bne.n	8005c54 <HAL_SAI_Init+0x40>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d103      	bne.n	8005c54 <HAL_SAI_Init+0x40>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d001      	beq.n	8005c58 <HAL_SAI_Init+0x44>
    {
      return HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	e1e2      	b.n	800601e <HAL_SAI_Init+0x40a>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a8c      	ldr	r2, [pc, #560]	; (8005e90 <HAL_SAI_Init+0x27c>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d004      	beq.n	8005c6c <HAL_SAI_Init+0x58>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a8c      	ldr	r2, [pc, #560]	; (8005e98 <HAL_SAI_Init+0x284>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d102      	bne.n	8005c72 <HAL_SAI_Init+0x5e>
  {
    SaiBaseAddress = SAI1;
 8005c6c:	4b8b      	ldr	r3, [pc, #556]	; (8005e9c <HAL_SAI_Init+0x288>)
 8005c6e:	61bb      	str	r3, [r7, #24]
 8005c70:	e00e      	b.n	8005c90 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI3;
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a87      	ldr	r2, [pc, #540]	; (8005e94 <HAL_SAI_Init+0x280>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d004      	beq.n	8005c86 <HAL_SAI_Init+0x72>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a87      	ldr	r2, [pc, #540]	; (8005ea0 <HAL_SAI_Init+0x28c>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d102      	bne.n	8005c8c <HAL_SAI_Init+0x78>
  {
    SaiBaseAddress = SAI4;
 8005c86:	4b87      	ldr	r3, [pc, #540]	; (8005ea4 <HAL_SAI_Init+0x290>)
 8005c88:	61bb      	str	r3, [r7, #24]
 8005c8a:	e001      	b.n	8005c90 <HAL_SAI_Init+0x7c>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e1c6      	b.n	800601e <HAL_SAI_Init+0x40a>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d106      	bne.n	8005caa <HAL_SAI_Init+0x96>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f001 ffc7 	bl	8007c38 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f000 fafa 	bl	80062a4 <SAI_Disable>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d001      	beq.n	8005cba <HAL_SAI_Init+0xa6>
  {
    return HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e1b1      	b.n	800601e <HAL_SAI_Init+0x40a>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2202      	movs	r2, #2
 8005cbe:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	68db      	ldr	r3, [r3, #12]
 8005cc6:	2b02      	cmp	r3, #2
 8005cc8:	d00c      	beq.n	8005ce4 <HAL_SAI_Init+0xd0>
 8005cca:	2b02      	cmp	r3, #2
 8005ccc:	d80d      	bhi.n	8005cea <HAL_SAI_Init+0xd6>
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d002      	beq.n	8005cd8 <HAL_SAI_Init+0xc4>
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d003      	beq.n	8005cde <HAL_SAI_Init+0xca>
 8005cd6:	e008      	b.n	8005cea <HAL_SAI_Init+0xd6>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8005cdc:	e008      	b.n	8005cf0 <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8005cde:	2310      	movs	r3, #16
 8005ce0:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8005ce2:	e005      	b.n	8005cf0 <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8005ce4:	2320      	movs	r3, #32
 8005ce6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8005ce8:	e002      	b.n	8005cf0 <HAL_SAI_Init+0xdc>
    default:
      tmpregisterGCR = 0;
 8005cea:	2300      	movs	r3, #0
 8005cec:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8005cee:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	2b05      	cmp	r3, #5
 8005cf6:	d822      	bhi.n	8005d3e <HAL_SAI_Init+0x12a>
 8005cf8:	a201      	add	r2, pc, #4	; (adr r2, 8005d00 <HAL_SAI_Init+0xec>)
 8005cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cfe:	bf00      	nop
 8005d00:	08005d19 	.word	0x08005d19
 8005d04:	08005d1f 	.word	0x08005d1f
 8005d08:	08005d27 	.word	0x08005d27
 8005d0c:	08005d3f 	.word	0x08005d3f
 8005d10:	08005d3f 	.word	0x08005d3f
 8005d14:	08005d2f 	.word	0x08005d2f
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	61fb      	str	r3, [r7, #28]
      break;
 8005d1c:	e012      	b.n	8005d44 <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8005d1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d22:	61fb      	str	r3, [r7, #28]
      break;
 8005d24:	e00e      	b.n	8005d44 <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005d26:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005d2a:	61fb      	str	r3, [r7, #28]
      break;
 8005d2c:	e00a      	b.n	8005d44 <HAL_SAI_Init+0x130>
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
      break;
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005d2e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005d32:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8005d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d36:	f043 0303 	orr.w	r3, r3, #3
 8005d3a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8005d3c:	e002      	b.n	8005d44 <HAL_SAI_Init+0x130>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	61fb      	str	r3, [r7, #28]
      break;
 8005d42:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 8005d44:	69bb      	ldr	r3, [r7, #24]
 8005d46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d48:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6a1b      	ldr	r3, [r3, #32]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	f000 8084 	beq.w	8005e5c <HAL_SAI_Init+0x248>
  {
    uint32_t freq = 0;
 8005d54:	2300      	movs	r3, #0
 8005d56:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a4c      	ldr	r2, [pc, #304]	; (8005e90 <HAL_SAI_Init+0x27c>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d004      	beq.n	8005d6c <HAL_SAI_Init+0x158>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a4c      	ldr	r2, [pc, #304]	; (8005e98 <HAL_SAI_Init+0x284>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d104      	bne.n	8005d76 <HAL_SAI_Init+0x162>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8005d6c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005d70:	f7fe fd86 	bl	8004880 <HAL_RCCEx_GetPeriphCLKFreq>
 8005d74:	6178      	str	r0, [r7, #20]
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a46      	ldr	r2, [pc, #280]	; (8005e94 <HAL_SAI_Init+0x280>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d104      	bne.n	8005d8a <HAL_SAI_Init+0x176>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8005d80:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8005d84:	f7fe fd7c 	bl	8004880 <HAL_RCCEx_GetPeriphCLKFreq>
 8005d88:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a44      	ldr	r2, [pc, #272]	; (8005ea0 <HAL_SAI_Init+0x28c>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d104      	bne.n	8005d9e <HAL_SAI_Init+0x18a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8005d94:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005d98:	f7fe fd72 	bl	8004880 <HAL_RCCEx_GetPeriphCLKFreq>
 8005d9c:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	699b      	ldr	r3, [r3, #24]
 8005da2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005da6:	d120      	bne.n	8005dea <HAL_SAI_Init+0x1d6>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dac:	2b04      	cmp	r3, #4
 8005dae:	d102      	bne.n	8005db6 <HAL_SAI_Init+0x1a2>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 8005db0:	2340      	movs	r3, #64	; 0x40
 8005db2:	60fb      	str	r3, [r7, #12]
 8005db4:	e00a      	b.n	8005dcc <HAL_SAI_Init+0x1b8>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dba:	2b08      	cmp	r3, #8
 8005dbc:	d103      	bne.n	8005dc6 <HAL_SAI_Init+0x1b2>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 8005dbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005dc2:	60fb      	str	r3, [r7, #12]
 8005dc4:	e002      	b.n	8005dcc <HAL_SAI_Init+0x1b8>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dca:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8005dcc:	697a      	ldr	r2, [r7, #20]
 8005dce:	4613      	mov	r3, r2
 8005dd0:	009b      	lsls	r3, r3, #2
 8005dd2:	4413      	add	r3, r2
 8005dd4:	005b      	lsls	r3, r3, #1
 8005dd6:	4619      	mov	r1, r3
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6a1b      	ldr	r3, [r3, #32]
 8005ddc:	68fa      	ldr	r2, [r7, #12]
 8005dde:	fb02 f303 	mul.w	r3, r2, r3
 8005de2:	fbb1 f3f3 	udiv	r3, r1, r3
 8005de6:	613b      	str	r3, [r7, #16]
 8005de8:	e017      	b.n	8005e1a <HAL_SAI_Init+0x206>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005df2:	d101      	bne.n	8005df8 <HAL_SAI_Init+0x1e4>
 8005df4:	2302      	movs	r3, #2
 8005df6:	e000      	b.n	8005dfa <HAL_SAI_Init+0x1e6>
 8005df8:	2301      	movs	r3, #1
 8005dfa:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8005dfc:	697a      	ldr	r2, [r7, #20]
 8005dfe:	4613      	mov	r3, r2
 8005e00:	009b      	lsls	r3, r3, #2
 8005e02:	4413      	add	r3, r2
 8005e04:	005b      	lsls	r3, r3, #1
 8005e06:	4619      	mov	r1, r3
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6a1b      	ldr	r3, [r3, #32]
 8005e0c:	68ba      	ldr	r2, [r7, #8]
 8005e0e:	fb02 f303 	mul.w	r3, r2, r3
 8005e12:	021b      	lsls	r3, r3, #8
 8005e14:	fbb1 f3f3 	udiv	r3, r1, r3
 8005e18:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	4a22      	ldr	r2, [pc, #136]	; (8005ea8 <HAL_SAI_Init+0x294>)
 8005e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e22:	08da      	lsrs	r2, r3, #3
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8005e28:	6939      	ldr	r1, [r7, #16]
 8005e2a:	4b1f      	ldr	r3, [pc, #124]	; (8005ea8 <HAL_SAI_Init+0x294>)
 8005e2c:	fba3 2301 	umull	r2, r3, r3, r1
 8005e30:	08da      	lsrs	r2, r3, #3
 8005e32:	4613      	mov	r3, r2
 8005e34:	009b      	lsls	r3, r3, #2
 8005e36:	4413      	add	r3, r2
 8005e38:	005b      	lsls	r3, r3, #1
 8005e3a:	1aca      	subs	r2, r1, r3
 8005e3c:	2a08      	cmp	r2, #8
 8005e3e:	d904      	bls.n	8005e4a <HAL_SAI_Init+0x236>
    {
      hsai->Init.Mckdiv += 1U;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e44:	1c5a      	adds	r2, r3, #1
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e4e:	2b04      	cmp	r3, #4
 8005e50:	d104      	bne.n	8005e5c <HAL_SAI_Init+0x248>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e56:	085a      	lsrs	r2, r3, #1
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d003      	beq.n	8005e6c <HAL_SAI_Init+0x258>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	2b02      	cmp	r3, #2
 8005e6a:	d109      	bne.n	8005e80 <HAL_SAI_Init+0x26c>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d101      	bne.n	8005e78 <HAL_SAI_Init+0x264>
 8005e74:	2300      	movs	r3, #0
 8005e76:	e001      	b.n	8005e7c <HAL_SAI_Init+0x268>
 8005e78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e7c:	623b      	str	r3, [r7, #32]
 8005e7e:	e017      	b.n	8005eb0 <HAL_SAI_Init+0x29c>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d111      	bne.n	8005eac <HAL_SAI_Init+0x298>
 8005e88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e8c:	e00f      	b.n	8005eae <HAL_SAI_Init+0x29a>
 8005e8e:	bf00      	nop
 8005e90:	40015804 	.word	0x40015804
 8005e94:	58005404 	.word	0x58005404
 8005e98:	40015824 	.word	0x40015824
 8005e9c:	40015800 	.word	0x40015800
 8005ea0:	58005424 	.word	0x58005424
 8005ea4:	58005400 	.word	0x58005400
 8005ea8:	cccccccd 	.word	0xcccccccd
 8005eac:	2300      	movs	r3, #0
 8005eae:	623b      	str	r3, [r7, #32]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                            hsai->Init.MckOverSampling);
  }
#else /* SAI_VER_V2_1*/
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	6819      	ldr	r1, [r3, #0]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	4b5b      	ldr	r3, [pc, #364]	; (8006028 <HAL_SAI_Init+0x414>)
 8005ebc:	400b      	ands	r3, r1
 8005ebe:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	6819      	ldr	r1, [r3, #0]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	685a      	ldr	r2, [r3, #4]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ece:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005ed4:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005eda:	431a      	orrs	r2, r3
 8005edc:	6a3b      	ldr	r3, [r7, #32]
 8005ede:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8005ee0:	69fb      	ldr	r3, [r7, #28]
 8005ee2:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                          ckstr_bits | syncen_bits |                             \
 8005ee8:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	695b      	ldr	r3, [r3, #20]
 8005eee:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005ef4:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005efa:	051b      	lsls	r3, r3, #20
 8005efc:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8005f02:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	691b      	ldr	r3, [r3, #16]
 8005f08:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	430a      	orrs	r2, r1
 8005f10:	601a      	str	r2, [r3, #0]
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	6859      	ldr	r1, [r3, #4]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	4b43      	ldr	r3, [pc, #268]	; (800602c <HAL_SAI_Init+0x418>)
 8005f1e:	400b      	ands	r3, r1
 8005f20:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	6859      	ldr	r1, [r3, #4]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	69da      	ldr	r2, [r3, #28]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f30:	431a      	orrs	r2, r3
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f36:	431a      	orrs	r2, r3
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	430a      	orrs	r2, r1
 8005f3e:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	6899      	ldr	r1, [r3, #8]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681a      	ldr	r2, [r3, #0]
 8005f4a:	4b39      	ldr	r3, [pc, #228]	; (8006030 <HAL_SAI_Init+0x41c>)
 8005f4c:	400b      	ands	r3, r1
 8005f4e:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	6899      	ldr	r1, [r3, #8]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f5a:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005f60:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 8005f66:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 8005f6c:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f72:	3b01      	subs	r3, #1
 8005f74:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8005f76:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	430a      	orrs	r2, r1
 8005f7e:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	68d9      	ldr	r1, [r3, #12]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	f24f 0320 	movw	r3, #61472	; 0xf020
 8005f8e:	400b      	ands	r3, r1
 8005f90:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	68d9      	ldr	r1, [r3, #12]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fa0:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fa6:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005fa8:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fae:	3b01      	subs	r3, #1
 8005fb0:	021b      	lsls	r3, r3, #8
 8005fb2:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	430a      	orrs	r2, r1
 8005fba:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a1c      	ldr	r2, [pc, #112]	; (8006034 <HAL_SAI_Init+0x420>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d004      	beq.n	8005fd0 <HAL_SAI_Init+0x3bc>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a1b      	ldr	r2, [pc, #108]	; (8006038 <HAL_SAI_Init+0x424>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d119      	bne.n	8006004 <HAL_SAI_Init+0x3f0>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fd4:	f023 0201 	bic.w	r2, r3, #1
 8005fd8:	69bb      	ldr	r3, [r7, #24]
 8005fda:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	d10e      	bne.n	8006004 <HAL_SAI_Init+0x3f0>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fee:	3b01      	subs	r3, #1
 8005ff0:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8005ff2:	431a      	orrs	r2, r3
 8005ff4:	69bb      	ldr	r3, [r7, #24]
 8005ff6:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 8005ff8:	69bb      	ldr	r3, [r7, #24]
 8005ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ffc:	f043 0201 	orr.w	r2, r3, #1
 8006000:	69bb      	ldr	r3, [r7, #24]
 8006002:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2200      	movs	r2, #0
 8006008:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2200      	movs	r2, #0
 8006018:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 800601c:	2300      	movs	r3, #0
}
 800601e:	4618      	mov	r0, r3
 8006020:	3728      	adds	r7, #40	; 0x28
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}
 8006026:	bf00      	nop
 8006028:	f005c010 	.word	0xf005c010
 800602c:	ffff1ff0 	.word	0xffff1ff0
 8006030:	fff88000 	.word	0xfff88000
 8006034:	40015804 	.word	0x40015804
 8006038:	58005404 	.word	0x58005404

0800603c <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800603c:	b480      	push	{r7}
 800603e:	b087      	sub	sp, #28
 8006040:	af00      	add	r7, sp, #0
 8006042:	60f8      	str	r0, [r7, #12]
 8006044:	60b9      	str	r1, [r7, #8]
 8006046:	607a      	str	r2, [r7, #4]
 8006048:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800604a:	2300      	movs	r3, #0
 800604c:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2200      	movs	r2, #0
 8006052:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2200      	movs	r2, #0
 8006058:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d003      	beq.n	800606a <SAI_InitI2S+0x2e>
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	2b02      	cmp	r3, #2
 8006068:	d103      	bne.n	8006072 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2200      	movs	r2, #0
 800606e:	651a      	str	r2, [r3, #80]	; 0x50
 8006070:	e002      	b.n	8006078 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2201      	movs	r2, #1
 8006076:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800607e:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006086:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2200      	movs	r2, #0
 800608c:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	683a      	ldr	r2, [r7, #0]
 8006092:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	f003 0301 	and.w	r3, r3, #1
 800609a:	2b00      	cmp	r3, #0
 800609c:	d001      	beq.n	80060a2 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	e077      	b.n	8006192 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d107      	bne.n	80060b8 <SAI_InitI2S+0x7c>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2200      	movs	r2, #0
 80060ac:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80060b4:	665a      	str	r2, [r3, #100]	; 0x64
 80060b6:	e006      	b.n	80060c6 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80060be:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2200      	movs	r2, #0
 80060c4:	665a      	str	r2, [r3, #100]	; 0x64
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2b03      	cmp	r3, #3
 80060ca:	d84f      	bhi.n	800616c <SAI_InitI2S+0x130>
 80060cc:	a201      	add	r2, pc, #4	; (adr r2, 80060d4 <SAI_InitI2S+0x98>)
 80060ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060d2:	bf00      	nop
 80060d4:	080060e5 	.word	0x080060e5
 80060d8:	08006107 	.word	0x08006107
 80060dc:	08006129 	.word	0x08006129
 80060e0:	0800614b 	.word	0x0800614b

  /* Frame definition */
  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2280      	movs	r2, #128	; 0x80
 80060e8:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	085b      	lsrs	r3, r3, #1
 80060ee:	015a      	lsls	r2, r3, #5
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	085b      	lsrs	r3, r3, #1
 80060f8:	011a      	lsls	r2, r3, #4
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2240      	movs	r2, #64	; 0x40
 8006102:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8006104:	e035      	b.n	8006172 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2280      	movs	r2, #128	; 0x80
 800610a:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	085b      	lsrs	r3, r3, #1
 8006110:	019a      	lsls	r2, r3, #6
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	085b      	lsrs	r3, r3, #1
 800611a:	015a      	lsls	r2, r3, #5
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2280      	movs	r2, #128	; 0x80
 8006124:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8006126:	e024      	b.n	8006172 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	22c0      	movs	r2, #192	; 0xc0
 800612c:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	085b      	lsrs	r3, r3, #1
 8006132:	019a      	lsls	r2, r3, #6
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	085b      	lsrs	r3, r3, #1
 800613c:	015a      	lsls	r2, r3, #5
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2280      	movs	r2, #128	; 0x80
 8006146:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8006148:	e013      	b.n	8006172 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	22e0      	movs	r2, #224	; 0xe0
 800614e:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	085b      	lsrs	r3, r3, #1
 8006154:	019a      	lsls	r2, r3, #6
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	085b      	lsrs	r3, r3, #1
 800615e:	015a      	lsls	r2, r3, #5
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2280      	movs	r2, #128	; 0x80
 8006168:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800616a:	e002      	b.n	8006172 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800616c:	2301      	movs	r3, #1
 800616e:	75fb      	strb	r3, [r7, #23]
      break;
 8006170:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	2b02      	cmp	r3, #2
 8006176:	d10b      	bne.n	8006190 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2b01      	cmp	r3, #1
 800617c:	d102      	bne.n	8006184 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2210      	movs	r2, #16
 8006182:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2b02      	cmp	r3, #2
 8006188:	d102      	bne.n	8006190 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2208      	movs	r2, #8
 800618e:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
 8006190:	7dfb      	ldrb	r3, [r7, #23]
}
 8006192:	4618      	mov	r0, r3
 8006194:	371c      	adds	r7, #28
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr
 800619e:	bf00      	nop

080061a0 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b087      	sub	sp, #28
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	60f8      	str	r0, [r7, #12]
 80061a8:	60b9      	str	r1, [r7, #8]
 80061aa:	607a      	str	r2, [r7, #4]
 80061ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80061ae:	2300      	movs	r3, #0
 80061b0:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2200      	movs	r2, #0
 80061b6:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2200      	movs	r2, #0
 80061bc:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d003      	beq.n	80061ce <SAI_InitPCM+0x2e>
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	2b02      	cmp	r3, #2
 80061cc:	d103      	bne.n	80061d6 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2201      	movs	r2, #1
 80061d2:	651a      	str	r2, [r3, #80]	; 0x50
 80061d4:	e002      	b.n	80061dc <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2200      	movs	r2, #0
 80061da:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2200      	movs	r2, #0
 80061e0:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80061e8:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80061f0:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2200      	movs	r2, #0
 80061f6:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	683a      	ldr	r2, [r7, #0]
 80061fc:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006204:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	2b04      	cmp	r3, #4
 800620a:	d103      	bne.n	8006214 <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2201      	movs	r2, #1
 8006210:	659a      	str	r2, [r3, #88]	; 0x58
 8006212:	e002      	b.n	800621a <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	220d      	movs	r2, #13
 8006218:	659a      	str	r2, [r3, #88]	; 0x58
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2b03      	cmp	r3, #3
 800621e:	d837      	bhi.n	8006290 <SAI_InitPCM+0xf0>
 8006220:	a201      	add	r2, pc, #4	; (adr r2, 8006228 <SAI_InitPCM+0x88>)
 8006222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006226:	bf00      	nop
 8006228:	08006239 	.word	0x08006239
 800622c:	0800624f 	.word	0x0800624f
 8006230:	08006265 	.word	0x08006265
 8006234:	0800627b 	.word	0x0800627b
  }

  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2280      	movs	r2, #128	; 0x80
 800623c:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	011a      	lsls	r2, r3, #4
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2240      	movs	r2, #64	; 0x40
 800624a:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800624c:	e023      	b.n	8006296 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2280      	movs	r2, #128	; 0x80
 8006252:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	015a      	lsls	r2, r3, #5
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2280      	movs	r2, #128	; 0x80
 8006260:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8006262:	e018      	b.n	8006296 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	22c0      	movs	r2, #192	; 0xc0
 8006268:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	015a      	lsls	r2, r3, #5
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2280      	movs	r2, #128	; 0x80
 8006276:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8006278:	e00d      	b.n	8006296 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	22e0      	movs	r2, #224	; 0xe0
 800627e:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	015a      	lsls	r2, r3, #5
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2280      	movs	r2, #128	; 0x80
 800628c:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800628e:	e002      	b.n	8006296 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	75fb      	strb	r3, [r7, #23]
      break;
 8006294:	bf00      	nop
  }

  return status;
 8006296:	7dfb      	ldrb	r3, [r7, #23]
}
 8006298:	4618      	mov	r0, r3
 800629a:	371c      	adds	r7, #28
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr

080062a4 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b085      	sub	sp, #20
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80062ac:	4b18      	ldr	r3, [pc, #96]	; (8006310 <SAI_Disable+0x6c>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a18      	ldr	r2, [pc, #96]	; (8006314 <SAI_Disable+0x70>)
 80062b2:	fba2 2303 	umull	r2, r3, r2, r3
 80062b6:	0b1b      	lsrs	r3, r3, #12
 80062b8:	009b      	lsls	r3, r3, #2
 80062ba:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80062bc:	2300      	movs	r3, #0
 80062be:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80062ce:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d10a      	bne.n	80062ec <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80062dc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 80062e6:	2303      	movs	r3, #3
 80062e8:	72fb      	strb	r3, [r7, #11]
      break;
 80062ea:	e009      	b.n	8006300 <SAI_Disable+0x5c>
    }
    count--;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	3b01      	subs	r3, #1
 80062f0:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d1e7      	bne.n	80062d0 <SAI_Disable+0x2c>

  return status;
 8006300:	7afb      	ldrb	r3, [r7, #11]
}
 8006302:	4618      	mov	r0, r3
 8006304:	3714      	adds	r7, #20
 8006306:	46bd      	mov	sp, r7
 8006308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630c:	4770      	bx	lr
 800630e:	bf00      	nop
 8006310:	24000408 	.word	0x24000408
 8006314:	95cbec1b 	.word	0x95cbec1b

08006318 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b082      	sub	sp, #8
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d101      	bne.n	800632a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	e042      	b.n	80063b0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006330:	2b00      	cmp	r3, #0
 8006332:	d106      	bne.n	8006342 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2200      	movs	r2, #0
 8006338:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f001 fc15 	bl	8007b6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2224      	movs	r2, #36	; 0x24
 8006346:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	681a      	ldr	r2, [r3, #0]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f022 0201 	bic.w	r2, r2, #1
 8006358:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f000 f82c 	bl	80063b8 <UART_SetConfig>
 8006360:	4603      	mov	r3, r0
 8006362:	2b01      	cmp	r3, #1
 8006364:	d101      	bne.n	800636a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	e022      	b.n	80063b0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800636e:	2b00      	cmp	r3, #0
 8006370:	d002      	beq.n	8006378 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f000 fe7e 	bl	8007074 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	685a      	ldr	r2, [r3, #4]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006386:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	689a      	ldr	r2, [r3, #8]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006396:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f042 0201 	orr.w	r2, r2, #1
 80063a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f000 ff05 	bl	80071b8 <UART_CheckIdleState>
 80063ae:	4603      	mov	r3, r0
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3708      	adds	r7, #8
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063b8:	b5b0      	push	{r4, r5, r7, lr}
 80063ba:	b08e      	sub	sp, #56	; 0x38
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80063c0:	2300      	movs	r3, #0
 80063c2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	689a      	ldr	r2, [r3, #8]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	691b      	ldr	r3, [r3, #16]
 80063ce:	431a      	orrs	r2, r3
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	695b      	ldr	r3, [r3, #20]
 80063d4:	431a      	orrs	r2, r3
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	69db      	ldr	r3, [r3, #28]
 80063da:	4313      	orrs	r3, r2
 80063dc:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	4bbf      	ldr	r3, [pc, #764]	; (80066e4 <UART_SetConfig+0x32c>)
 80063e6:	4013      	ands	r3, r2
 80063e8:	687a      	ldr	r2, [r7, #4]
 80063ea:	6812      	ldr	r2, [r2, #0]
 80063ec:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80063ee:	430b      	orrs	r3, r1
 80063f0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	68da      	ldr	r2, [r3, #12]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	430a      	orrs	r2, r1
 8006406:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	699b      	ldr	r3, [r3, #24]
 800640c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4ab5      	ldr	r2, [pc, #724]	; (80066e8 <UART_SetConfig+0x330>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d004      	beq.n	8006422 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6a1b      	ldr	r3, [r3, #32]
 800641c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800641e:	4313      	orrs	r3, r2
 8006420:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	689a      	ldr	r2, [r3, #8]
 8006428:	4bb0      	ldr	r3, [pc, #704]	; (80066ec <UART_SetConfig+0x334>)
 800642a:	4013      	ands	r3, r2
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	6812      	ldr	r2, [r2, #0]
 8006430:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006432:	430b      	orrs	r3, r1
 8006434:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800643c:	f023 010f 	bic.w	r1, r3, #15
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	430a      	orrs	r2, r1
 800644a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4aa7      	ldr	r2, [pc, #668]	; (80066f0 <UART_SetConfig+0x338>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d176      	bne.n	8006544 <UART_SetConfig+0x18c>
 8006456:	4ba7      	ldr	r3, [pc, #668]	; (80066f4 <UART_SetConfig+0x33c>)
 8006458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800645a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800645e:	2b28      	cmp	r3, #40	; 0x28
 8006460:	d86c      	bhi.n	800653c <UART_SetConfig+0x184>
 8006462:	a201      	add	r2, pc, #4	; (adr r2, 8006468 <UART_SetConfig+0xb0>)
 8006464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006468:	0800650d 	.word	0x0800650d
 800646c:	0800653d 	.word	0x0800653d
 8006470:	0800653d 	.word	0x0800653d
 8006474:	0800653d 	.word	0x0800653d
 8006478:	0800653d 	.word	0x0800653d
 800647c:	0800653d 	.word	0x0800653d
 8006480:	0800653d 	.word	0x0800653d
 8006484:	0800653d 	.word	0x0800653d
 8006488:	08006515 	.word	0x08006515
 800648c:	0800653d 	.word	0x0800653d
 8006490:	0800653d 	.word	0x0800653d
 8006494:	0800653d 	.word	0x0800653d
 8006498:	0800653d 	.word	0x0800653d
 800649c:	0800653d 	.word	0x0800653d
 80064a0:	0800653d 	.word	0x0800653d
 80064a4:	0800653d 	.word	0x0800653d
 80064a8:	0800651d 	.word	0x0800651d
 80064ac:	0800653d 	.word	0x0800653d
 80064b0:	0800653d 	.word	0x0800653d
 80064b4:	0800653d 	.word	0x0800653d
 80064b8:	0800653d 	.word	0x0800653d
 80064bc:	0800653d 	.word	0x0800653d
 80064c0:	0800653d 	.word	0x0800653d
 80064c4:	0800653d 	.word	0x0800653d
 80064c8:	08006525 	.word	0x08006525
 80064cc:	0800653d 	.word	0x0800653d
 80064d0:	0800653d 	.word	0x0800653d
 80064d4:	0800653d 	.word	0x0800653d
 80064d8:	0800653d 	.word	0x0800653d
 80064dc:	0800653d 	.word	0x0800653d
 80064e0:	0800653d 	.word	0x0800653d
 80064e4:	0800653d 	.word	0x0800653d
 80064e8:	0800652d 	.word	0x0800652d
 80064ec:	0800653d 	.word	0x0800653d
 80064f0:	0800653d 	.word	0x0800653d
 80064f4:	0800653d 	.word	0x0800653d
 80064f8:	0800653d 	.word	0x0800653d
 80064fc:	0800653d 	.word	0x0800653d
 8006500:	0800653d 	.word	0x0800653d
 8006504:	0800653d 	.word	0x0800653d
 8006508:	08006535 	.word	0x08006535
 800650c:	2301      	movs	r3, #1
 800650e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006512:	e326      	b.n	8006b62 <UART_SetConfig+0x7aa>
 8006514:	2304      	movs	r3, #4
 8006516:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800651a:	e322      	b.n	8006b62 <UART_SetConfig+0x7aa>
 800651c:	2308      	movs	r3, #8
 800651e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006522:	e31e      	b.n	8006b62 <UART_SetConfig+0x7aa>
 8006524:	2310      	movs	r3, #16
 8006526:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800652a:	e31a      	b.n	8006b62 <UART_SetConfig+0x7aa>
 800652c:	2320      	movs	r3, #32
 800652e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006532:	e316      	b.n	8006b62 <UART_SetConfig+0x7aa>
 8006534:	2340      	movs	r3, #64	; 0x40
 8006536:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800653a:	e312      	b.n	8006b62 <UART_SetConfig+0x7aa>
 800653c:	2380      	movs	r3, #128	; 0x80
 800653e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006542:	e30e      	b.n	8006b62 <UART_SetConfig+0x7aa>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a6b      	ldr	r2, [pc, #428]	; (80066f8 <UART_SetConfig+0x340>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d130      	bne.n	80065b0 <UART_SetConfig+0x1f8>
 800654e:	4b69      	ldr	r3, [pc, #420]	; (80066f4 <UART_SetConfig+0x33c>)
 8006550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006552:	f003 0307 	and.w	r3, r3, #7
 8006556:	2b05      	cmp	r3, #5
 8006558:	d826      	bhi.n	80065a8 <UART_SetConfig+0x1f0>
 800655a:	a201      	add	r2, pc, #4	; (adr r2, 8006560 <UART_SetConfig+0x1a8>)
 800655c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006560:	08006579 	.word	0x08006579
 8006564:	08006581 	.word	0x08006581
 8006568:	08006589 	.word	0x08006589
 800656c:	08006591 	.word	0x08006591
 8006570:	08006599 	.word	0x08006599
 8006574:	080065a1 	.word	0x080065a1
 8006578:	2300      	movs	r3, #0
 800657a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800657e:	e2f0      	b.n	8006b62 <UART_SetConfig+0x7aa>
 8006580:	2304      	movs	r3, #4
 8006582:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006586:	e2ec      	b.n	8006b62 <UART_SetConfig+0x7aa>
 8006588:	2308      	movs	r3, #8
 800658a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800658e:	e2e8      	b.n	8006b62 <UART_SetConfig+0x7aa>
 8006590:	2310      	movs	r3, #16
 8006592:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006596:	e2e4      	b.n	8006b62 <UART_SetConfig+0x7aa>
 8006598:	2320      	movs	r3, #32
 800659a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800659e:	e2e0      	b.n	8006b62 <UART_SetConfig+0x7aa>
 80065a0:	2340      	movs	r3, #64	; 0x40
 80065a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065a6:	e2dc      	b.n	8006b62 <UART_SetConfig+0x7aa>
 80065a8:	2380      	movs	r3, #128	; 0x80
 80065aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065ae:	e2d8      	b.n	8006b62 <UART_SetConfig+0x7aa>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a51      	ldr	r2, [pc, #324]	; (80066fc <UART_SetConfig+0x344>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d130      	bne.n	800661c <UART_SetConfig+0x264>
 80065ba:	4b4e      	ldr	r3, [pc, #312]	; (80066f4 <UART_SetConfig+0x33c>)
 80065bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065be:	f003 0307 	and.w	r3, r3, #7
 80065c2:	2b05      	cmp	r3, #5
 80065c4:	d826      	bhi.n	8006614 <UART_SetConfig+0x25c>
 80065c6:	a201      	add	r2, pc, #4	; (adr r2, 80065cc <UART_SetConfig+0x214>)
 80065c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065cc:	080065e5 	.word	0x080065e5
 80065d0:	080065ed 	.word	0x080065ed
 80065d4:	080065f5 	.word	0x080065f5
 80065d8:	080065fd 	.word	0x080065fd
 80065dc:	08006605 	.word	0x08006605
 80065e0:	0800660d 	.word	0x0800660d
 80065e4:	2300      	movs	r3, #0
 80065e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065ea:	e2ba      	b.n	8006b62 <UART_SetConfig+0x7aa>
 80065ec:	2304      	movs	r3, #4
 80065ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065f2:	e2b6      	b.n	8006b62 <UART_SetConfig+0x7aa>
 80065f4:	2308      	movs	r3, #8
 80065f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065fa:	e2b2      	b.n	8006b62 <UART_SetConfig+0x7aa>
 80065fc:	2310      	movs	r3, #16
 80065fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006602:	e2ae      	b.n	8006b62 <UART_SetConfig+0x7aa>
 8006604:	2320      	movs	r3, #32
 8006606:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800660a:	e2aa      	b.n	8006b62 <UART_SetConfig+0x7aa>
 800660c:	2340      	movs	r3, #64	; 0x40
 800660e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006612:	e2a6      	b.n	8006b62 <UART_SetConfig+0x7aa>
 8006614:	2380      	movs	r3, #128	; 0x80
 8006616:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800661a:	e2a2      	b.n	8006b62 <UART_SetConfig+0x7aa>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a37      	ldr	r2, [pc, #220]	; (8006700 <UART_SetConfig+0x348>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d130      	bne.n	8006688 <UART_SetConfig+0x2d0>
 8006626:	4b33      	ldr	r3, [pc, #204]	; (80066f4 <UART_SetConfig+0x33c>)
 8006628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800662a:	f003 0307 	and.w	r3, r3, #7
 800662e:	2b05      	cmp	r3, #5
 8006630:	d826      	bhi.n	8006680 <UART_SetConfig+0x2c8>
 8006632:	a201      	add	r2, pc, #4	; (adr r2, 8006638 <UART_SetConfig+0x280>)
 8006634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006638:	08006651 	.word	0x08006651
 800663c:	08006659 	.word	0x08006659
 8006640:	08006661 	.word	0x08006661
 8006644:	08006669 	.word	0x08006669
 8006648:	08006671 	.word	0x08006671
 800664c:	08006679 	.word	0x08006679
 8006650:	2300      	movs	r3, #0
 8006652:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006656:	e284      	b.n	8006b62 <UART_SetConfig+0x7aa>
 8006658:	2304      	movs	r3, #4
 800665a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800665e:	e280      	b.n	8006b62 <UART_SetConfig+0x7aa>
 8006660:	2308      	movs	r3, #8
 8006662:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006666:	e27c      	b.n	8006b62 <UART_SetConfig+0x7aa>
 8006668:	2310      	movs	r3, #16
 800666a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800666e:	e278      	b.n	8006b62 <UART_SetConfig+0x7aa>
 8006670:	2320      	movs	r3, #32
 8006672:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006676:	e274      	b.n	8006b62 <UART_SetConfig+0x7aa>
 8006678:	2340      	movs	r3, #64	; 0x40
 800667a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800667e:	e270      	b.n	8006b62 <UART_SetConfig+0x7aa>
 8006680:	2380      	movs	r3, #128	; 0x80
 8006682:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006686:	e26c      	b.n	8006b62 <UART_SetConfig+0x7aa>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a1d      	ldr	r2, [pc, #116]	; (8006704 <UART_SetConfig+0x34c>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d142      	bne.n	8006718 <UART_SetConfig+0x360>
 8006692:	4b18      	ldr	r3, [pc, #96]	; (80066f4 <UART_SetConfig+0x33c>)
 8006694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006696:	f003 0307 	and.w	r3, r3, #7
 800669a:	2b05      	cmp	r3, #5
 800669c:	d838      	bhi.n	8006710 <UART_SetConfig+0x358>
 800669e:	a201      	add	r2, pc, #4	; (adr r2, 80066a4 <UART_SetConfig+0x2ec>)
 80066a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066a4:	080066bd 	.word	0x080066bd
 80066a8:	080066c5 	.word	0x080066c5
 80066ac:	080066cd 	.word	0x080066cd
 80066b0:	080066d5 	.word	0x080066d5
 80066b4:	080066dd 	.word	0x080066dd
 80066b8:	08006709 	.word	0x08006709
 80066bc:	2300      	movs	r3, #0
 80066be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066c2:	e24e      	b.n	8006b62 <UART_SetConfig+0x7aa>
 80066c4:	2304      	movs	r3, #4
 80066c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066ca:	e24a      	b.n	8006b62 <UART_SetConfig+0x7aa>
 80066cc:	2308      	movs	r3, #8
 80066ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066d2:	e246      	b.n	8006b62 <UART_SetConfig+0x7aa>
 80066d4:	2310      	movs	r3, #16
 80066d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066da:	e242      	b.n	8006b62 <UART_SetConfig+0x7aa>
 80066dc:	2320      	movs	r3, #32
 80066de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066e2:	e23e      	b.n	8006b62 <UART_SetConfig+0x7aa>
 80066e4:	cfff69f3 	.word	0xcfff69f3
 80066e8:	58000c00 	.word	0x58000c00
 80066ec:	11fff4ff 	.word	0x11fff4ff
 80066f0:	40011000 	.word	0x40011000
 80066f4:	58024400 	.word	0x58024400
 80066f8:	40004400 	.word	0x40004400
 80066fc:	40004800 	.word	0x40004800
 8006700:	40004c00 	.word	0x40004c00
 8006704:	40005000 	.word	0x40005000
 8006708:	2340      	movs	r3, #64	; 0x40
 800670a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800670e:	e228      	b.n	8006b62 <UART_SetConfig+0x7aa>
 8006710:	2380      	movs	r3, #128	; 0x80
 8006712:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006716:	e224      	b.n	8006b62 <UART_SetConfig+0x7aa>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4ab1      	ldr	r2, [pc, #708]	; (80069e4 <UART_SetConfig+0x62c>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d176      	bne.n	8006810 <UART_SetConfig+0x458>
 8006722:	4bb1      	ldr	r3, [pc, #708]	; (80069e8 <UART_SetConfig+0x630>)
 8006724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006726:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800672a:	2b28      	cmp	r3, #40	; 0x28
 800672c:	d86c      	bhi.n	8006808 <UART_SetConfig+0x450>
 800672e:	a201      	add	r2, pc, #4	; (adr r2, 8006734 <UART_SetConfig+0x37c>)
 8006730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006734:	080067d9 	.word	0x080067d9
 8006738:	08006809 	.word	0x08006809
 800673c:	08006809 	.word	0x08006809
 8006740:	08006809 	.word	0x08006809
 8006744:	08006809 	.word	0x08006809
 8006748:	08006809 	.word	0x08006809
 800674c:	08006809 	.word	0x08006809
 8006750:	08006809 	.word	0x08006809
 8006754:	080067e1 	.word	0x080067e1
 8006758:	08006809 	.word	0x08006809
 800675c:	08006809 	.word	0x08006809
 8006760:	08006809 	.word	0x08006809
 8006764:	08006809 	.word	0x08006809
 8006768:	08006809 	.word	0x08006809
 800676c:	08006809 	.word	0x08006809
 8006770:	08006809 	.word	0x08006809
 8006774:	080067e9 	.word	0x080067e9
 8006778:	08006809 	.word	0x08006809
 800677c:	08006809 	.word	0x08006809
 8006780:	08006809 	.word	0x08006809
 8006784:	08006809 	.word	0x08006809
 8006788:	08006809 	.word	0x08006809
 800678c:	08006809 	.word	0x08006809
 8006790:	08006809 	.word	0x08006809
 8006794:	080067f1 	.word	0x080067f1
 8006798:	08006809 	.word	0x08006809
 800679c:	08006809 	.word	0x08006809
 80067a0:	08006809 	.word	0x08006809
 80067a4:	08006809 	.word	0x08006809
 80067a8:	08006809 	.word	0x08006809
 80067ac:	08006809 	.word	0x08006809
 80067b0:	08006809 	.word	0x08006809
 80067b4:	080067f9 	.word	0x080067f9
 80067b8:	08006809 	.word	0x08006809
 80067bc:	08006809 	.word	0x08006809
 80067c0:	08006809 	.word	0x08006809
 80067c4:	08006809 	.word	0x08006809
 80067c8:	08006809 	.word	0x08006809
 80067cc:	08006809 	.word	0x08006809
 80067d0:	08006809 	.word	0x08006809
 80067d4:	08006801 	.word	0x08006801
 80067d8:	2301      	movs	r3, #1
 80067da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067de:	e1c0      	b.n	8006b62 <UART_SetConfig+0x7aa>
 80067e0:	2304      	movs	r3, #4
 80067e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067e6:	e1bc      	b.n	8006b62 <UART_SetConfig+0x7aa>
 80067e8:	2308      	movs	r3, #8
 80067ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067ee:	e1b8      	b.n	8006b62 <UART_SetConfig+0x7aa>
 80067f0:	2310      	movs	r3, #16
 80067f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067f6:	e1b4      	b.n	8006b62 <UART_SetConfig+0x7aa>
 80067f8:	2320      	movs	r3, #32
 80067fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067fe:	e1b0      	b.n	8006b62 <UART_SetConfig+0x7aa>
 8006800:	2340      	movs	r3, #64	; 0x40
 8006802:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006806:	e1ac      	b.n	8006b62 <UART_SetConfig+0x7aa>
 8006808:	2380      	movs	r3, #128	; 0x80
 800680a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800680e:	e1a8      	b.n	8006b62 <UART_SetConfig+0x7aa>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a75      	ldr	r2, [pc, #468]	; (80069ec <UART_SetConfig+0x634>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d130      	bne.n	800687c <UART_SetConfig+0x4c4>
 800681a:	4b73      	ldr	r3, [pc, #460]	; (80069e8 <UART_SetConfig+0x630>)
 800681c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800681e:	f003 0307 	and.w	r3, r3, #7
 8006822:	2b05      	cmp	r3, #5
 8006824:	d826      	bhi.n	8006874 <UART_SetConfig+0x4bc>
 8006826:	a201      	add	r2, pc, #4	; (adr r2, 800682c <UART_SetConfig+0x474>)
 8006828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800682c:	08006845 	.word	0x08006845
 8006830:	0800684d 	.word	0x0800684d
 8006834:	08006855 	.word	0x08006855
 8006838:	0800685d 	.word	0x0800685d
 800683c:	08006865 	.word	0x08006865
 8006840:	0800686d 	.word	0x0800686d
 8006844:	2300      	movs	r3, #0
 8006846:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800684a:	e18a      	b.n	8006b62 <UART_SetConfig+0x7aa>
 800684c:	2304      	movs	r3, #4
 800684e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006852:	e186      	b.n	8006b62 <UART_SetConfig+0x7aa>
 8006854:	2308      	movs	r3, #8
 8006856:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800685a:	e182      	b.n	8006b62 <UART_SetConfig+0x7aa>
 800685c:	2310      	movs	r3, #16
 800685e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006862:	e17e      	b.n	8006b62 <UART_SetConfig+0x7aa>
 8006864:	2320      	movs	r3, #32
 8006866:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800686a:	e17a      	b.n	8006b62 <UART_SetConfig+0x7aa>
 800686c:	2340      	movs	r3, #64	; 0x40
 800686e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006872:	e176      	b.n	8006b62 <UART_SetConfig+0x7aa>
 8006874:	2380      	movs	r3, #128	; 0x80
 8006876:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800687a:	e172      	b.n	8006b62 <UART_SetConfig+0x7aa>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a5b      	ldr	r2, [pc, #364]	; (80069f0 <UART_SetConfig+0x638>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d130      	bne.n	80068e8 <UART_SetConfig+0x530>
 8006886:	4b58      	ldr	r3, [pc, #352]	; (80069e8 <UART_SetConfig+0x630>)
 8006888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800688a:	f003 0307 	and.w	r3, r3, #7
 800688e:	2b05      	cmp	r3, #5
 8006890:	d826      	bhi.n	80068e0 <UART_SetConfig+0x528>
 8006892:	a201      	add	r2, pc, #4	; (adr r2, 8006898 <UART_SetConfig+0x4e0>)
 8006894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006898:	080068b1 	.word	0x080068b1
 800689c:	080068b9 	.word	0x080068b9
 80068a0:	080068c1 	.word	0x080068c1
 80068a4:	080068c9 	.word	0x080068c9
 80068a8:	080068d1 	.word	0x080068d1
 80068ac:	080068d9 	.word	0x080068d9
 80068b0:	2300      	movs	r3, #0
 80068b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068b6:	e154      	b.n	8006b62 <UART_SetConfig+0x7aa>
 80068b8:	2304      	movs	r3, #4
 80068ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068be:	e150      	b.n	8006b62 <UART_SetConfig+0x7aa>
 80068c0:	2308      	movs	r3, #8
 80068c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068c6:	e14c      	b.n	8006b62 <UART_SetConfig+0x7aa>
 80068c8:	2310      	movs	r3, #16
 80068ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068ce:	e148      	b.n	8006b62 <UART_SetConfig+0x7aa>
 80068d0:	2320      	movs	r3, #32
 80068d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068d6:	e144      	b.n	8006b62 <UART_SetConfig+0x7aa>
 80068d8:	2340      	movs	r3, #64	; 0x40
 80068da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068de:	e140      	b.n	8006b62 <UART_SetConfig+0x7aa>
 80068e0:	2380      	movs	r3, #128	; 0x80
 80068e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068e6:	e13c      	b.n	8006b62 <UART_SetConfig+0x7aa>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a41      	ldr	r2, [pc, #260]	; (80069f4 <UART_SetConfig+0x63c>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	f040 8082 	bne.w	80069f8 <UART_SetConfig+0x640>
 80068f4:	4b3c      	ldr	r3, [pc, #240]	; (80069e8 <UART_SetConfig+0x630>)
 80068f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80068fc:	2b28      	cmp	r3, #40	; 0x28
 80068fe:	d86d      	bhi.n	80069dc <UART_SetConfig+0x624>
 8006900:	a201      	add	r2, pc, #4	; (adr r2, 8006908 <UART_SetConfig+0x550>)
 8006902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006906:	bf00      	nop
 8006908:	080069ad 	.word	0x080069ad
 800690c:	080069dd 	.word	0x080069dd
 8006910:	080069dd 	.word	0x080069dd
 8006914:	080069dd 	.word	0x080069dd
 8006918:	080069dd 	.word	0x080069dd
 800691c:	080069dd 	.word	0x080069dd
 8006920:	080069dd 	.word	0x080069dd
 8006924:	080069dd 	.word	0x080069dd
 8006928:	080069b5 	.word	0x080069b5
 800692c:	080069dd 	.word	0x080069dd
 8006930:	080069dd 	.word	0x080069dd
 8006934:	080069dd 	.word	0x080069dd
 8006938:	080069dd 	.word	0x080069dd
 800693c:	080069dd 	.word	0x080069dd
 8006940:	080069dd 	.word	0x080069dd
 8006944:	080069dd 	.word	0x080069dd
 8006948:	080069bd 	.word	0x080069bd
 800694c:	080069dd 	.word	0x080069dd
 8006950:	080069dd 	.word	0x080069dd
 8006954:	080069dd 	.word	0x080069dd
 8006958:	080069dd 	.word	0x080069dd
 800695c:	080069dd 	.word	0x080069dd
 8006960:	080069dd 	.word	0x080069dd
 8006964:	080069dd 	.word	0x080069dd
 8006968:	080069c5 	.word	0x080069c5
 800696c:	080069dd 	.word	0x080069dd
 8006970:	080069dd 	.word	0x080069dd
 8006974:	080069dd 	.word	0x080069dd
 8006978:	080069dd 	.word	0x080069dd
 800697c:	080069dd 	.word	0x080069dd
 8006980:	080069dd 	.word	0x080069dd
 8006984:	080069dd 	.word	0x080069dd
 8006988:	080069cd 	.word	0x080069cd
 800698c:	080069dd 	.word	0x080069dd
 8006990:	080069dd 	.word	0x080069dd
 8006994:	080069dd 	.word	0x080069dd
 8006998:	080069dd 	.word	0x080069dd
 800699c:	080069dd 	.word	0x080069dd
 80069a0:	080069dd 	.word	0x080069dd
 80069a4:	080069dd 	.word	0x080069dd
 80069a8:	080069d5 	.word	0x080069d5
 80069ac:	2301      	movs	r3, #1
 80069ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069b2:	e0d6      	b.n	8006b62 <UART_SetConfig+0x7aa>
 80069b4:	2304      	movs	r3, #4
 80069b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069ba:	e0d2      	b.n	8006b62 <UART_SetConfig+0x7aa>
 80069bc:	2308      	movs	r3, #8
 80069be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069c2:	e0ce      	b.n	8006b62 <UART_SetConfig+0x7aa>
 80069c4:	2310      	movs	r3, #16
 80069c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069ca:	e0ca      	b.n	8006b62 <UART_SetConfig+0x7aa>
 80069cc:	2320      	movs	r3, #32
 80069ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069d2:	e0c6      	b.n	8006b62 <UART_SetConfig+0x7aa>
 80069d4:	2340      	movs	r3, #64	; 0x40
 80069d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069da:	e0c2      	b.n	8006b62 <UART_SetConfig+0x7aa>
 80069dc:	2380      	movs	r3, #128	; 0x80
 80069de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069e2:	e0be      	b.n	8006b62 <UART_SetConfig+0x7aa>
 80069e4:	40011400 	.word	0x40011400
 80069e8:	58024400 	.word	0x58024400
 80069ec:	40007800 	.word	0x40007800
 80069f0:	40007c00 	.word	0x40007c00
 80069f4:	40011800 	.word	0x40011800
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4aad      	ldr	r2, [pc, #692]	; (8006cb4 <UART_SetConfig+0x8fc>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d176      	bne.n	8006af0 <UART_SetConfig+0x738>
 8006a02:	4bad      	ldr	r3, [pc, #692]	; (8006cb8 <UART_SetConfig+0x900>)
 8006a04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a0a:	2b28      	cmp	r3, #40	; 0x28
 8006a0c:	d86c      	bhi.n	8006ae8 <UART_SetConfig+0x730>
 8006a0e:	a201      	add	r2, pc, #4	; (adr r2, 8006a14 <UART_SetConfig+0x65c>)
 8006a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a14:	08006ab9 	.word	0x08006ab9
 8006a18:	08006ae9 	.word	0x08006ae9
 8006a1c:	08006ae9 	.word	0x08006ae9
 8006a20:	08006ae9 	.word	0x08006ae9
 8006a24:	08006ae9 	.word	0x08006ae9
 8006a28:	08006ae9 	.word	0x08006ae9
 8006a2c:	08006ae9 	.word	0x08006ae9
 8006a30:	08006ae9 	.word	0x08006ae9
 8006a34:	08006ac1 	.word	0x08006ac1
 8006a38:	08006ae9 	.word	0x08006ae9
 8006a3c:	08006ae9 	.word	0x08006ae9
 8006a40:	08006ae9 	.word	0x08006ae9
 8006a44:	08006ae9 	.word	0x08006ae9
 8006a48:	08006ae9 	.word	0x08006ae9
 8006a4c:	08006ae9 	.word	0x08006ae9
 8006a50:	08006ae9 	.word	0x08006ae9
 8006a54:	08006ac9 	.word	0x08006ac9
 8006a58:	08006ae9 	.word	0x08006ae9
 8006a5c:	08006ae9 	.word	0x08006ae9
 8006a60:	08006ae9 	.word	0x08006ae9
 8006a64:	08006ae9 	.word	0x08006ae9
 8006a68:	08006ae9 	.word	0x08006ae9
 8006a6c:	08006ae9 	.word	0x08006ae9
 8006a70:	08006ae9 	.word	0x08006ae9
 8006a74:	08006ad1 	.word	0x08006ad1
 8006a78:	08006ae9 	.word	0x08006ae9
 8006a7c:	08006ae9 	.word	0x08006ae9
 8006a80:	08006ae9 	.word	0x08006ae9
 8006a84:	08006ae9 	.word	0x08006ae9
 8006a88:	08006ae9 	.word	0x08006ae9
 8006a8c:	08006ae9 	.word	0x08006ae9
 8006a90:	08006ae9 	.word	0x08006ae9
 8006a94:	08006ad9 	.word	0x08006ad9
 8006a98:	08006ae9 	.word	0x08006ae9
 8006a9c:	08006ae9 	.word	0x08006ae9
 8006aa0:	08006ae9 	.word	0x08006ae9
 8006aa4:	08006ae9 	.word	0x08006ae9
 8006aa8:	08006ae9 	.word	0x08006ae9
 8006aac:	08006ae9 	.word	0x08006ae9
 8006ab0:	08006ae9 	.word	0x08006ae9
 8006ab4:	08006ae1 	.word	0x08006ae1
 8006ab8:	2301      	movs	r3, #1
 8006aba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006abe:	e050      	b.n	8006b62 <UART_SetConfig+0x7aa>
 8006ac0:	2304      	movs	r3, #4
 8006ac2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ac6:	e04c      	b.n	8006b62 <UART_SetConfig+0x7aa>
 8006ac8:	2308      	movs	r3, #8
 8006aca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ace:	e048      	b.n	8006b62 <UART_SetConfig+0x7aa>
 8006ad0:	2310      	movs	r3, #16
 8006ad2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ad6:	e044      	b.n	8006b62 <UART_SetConfig+0x7aa>
 8006ad8:	2320      	movs	r3, #32
 8006ada:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ade:	e040      	b.n	8006b62 <UART_SetConfig+0x7aa>
 8006ae0:	2340      	movs	r3, #64	; 0x40
 8006ae2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ae6:	e03c      	b.n	8006b62 <UART_SetConfig+0x7aa>
 8006ae8:	2380      	movs	r3, #128	; 0x80
 8006aea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006aee:	e038      	b.n	8006b62 <UART_SetConfig+0x7aa>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a71      	ldr	r2, [pc, #452]	; (8006cbc <UART_SetConfig+0x904>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d130      	bne.n	8006b5c <UART_SetConfig+0x7a4>
 8006afa:	4b6f      	ldr	r3, [pc, #444]	; (8006cb8 <UART_SetConfig+0x900>)
 8006afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006afe:	f003 0307 	and.w	r3, r3, #7
 8006b02:	2b05      	cmp	r3, #5
 8006b04:	d826      	bhi.n	8006b54 <UART_SetConfig+0x79c>
 8006b06:	a201      	add	r2, pc, #4	; (adr r2, 8006b0c <UART_SetConfig+0x754>)
 8006b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b0c:	08006b25 	.word	0x08006b25
 8006b10:	08006b2d 	.word	0x08006b2d
 8006b14:	08006b35 	.word	0x08006b35
 8006b18:	08006b3d 	.word	0x08006b3d
 8006b1c:	08006b45 	.word	0x08006b45
 8006b20:	08006b4d 	.word	0x08006b4d
 8006b24:	2302      	movs	r3, #2
 8006b26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b2a:	e01a      	b.n	8006b62 <UART_SetConfig+0x7aa>
 8006b2c:	2304      	movs	r3, #4
 8006b2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b32:	e016      	b.n	8006b62 <UART_SetConfig+0x7aa>
 8006b34:	2308      	movs	r3, #8
 8006b36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b3a:	e012      	b.n	8006b62 <UART_SetConfig+0x7aa>
 8006b3c:	2310      	movs	r3, #16
 8006b3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b42:	e00e      	b.n	8006b62 <UART_SetConfig+0x7aa>
 8006b44:	2320      	movs	r3, #32
 8006b46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b4a:	e00a      	b.n	8006b62 <UART_SetConfig+0x7aa>
 8006b4c:	2340      	movs	r3, #64	; 0x40
 8006b4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b52:	e006      	b.n	8006b62 <UART_SetConfig+0x7aa>
 8006b54:	2380      	movs	r3, #128	; 0x80
 8006b56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b5a:	e002      	b.n	8006b62 <UART_SetConfig+0x7aa>
 8006b5c:	2380      	movs	r3, #128	; 0x80
 8006b5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a55      	ldr	r2, [pc, #340]	; (8006cbc <UART_SetConfig+0x904>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	f040 80f0 	bne.w	8006d4e <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006b6e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006b72:	2b20      	cmp	r3, #32
 8006b74:	dc46      	bgt.n	8006c04 <UART_SetConfig+0x84c>
 8006b76:	2b02      	cmp	r3, #2
 8006b78:	db75      	blt.n	8006c66 <UART_SetConfig+0x8ae>
 8006b7a:	3b02      	subs	r3, #2
 8006b7c:	2b1e      	cmp	r3, #30
 8006b7e:	d872      	bhi.n	8006c66 <UART_SetConfig+0x8ae>
 8006b80:	a201      	add	r2, pc, #4	; (adr r2, 8006b88 <UART_SetConfig+0x7d0>)
 8006b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b86:	bf00      	nop
 8006b88:	08006c0b 	.word	0x08006c0b
 8006b8c:	08006c67 	.word	0x08006c67
 8006b90:	08006c13 	.word	0x08006c13
 8006b94:	08006c67 	.word	0x08006c67
 8006b98:	08006c67 	.word	0x08006c67
 8006b9c:	08006c67 	.word	0x08006c67
 8006ba0:	08006c23 	.word	0x08006c23
 8006ba4:	08006c67 	.word	0x08006c67
 8006ba8:	08006c67 	.word	0x08006c67
 8006bac:	08006c67 	.word	0x08006c67
 8006bb0:	08006c67 	.word	0x08006c67
 8006bb4:	08006c67 	.word	0x08006c67
 8006bb8:	08006c67 	.word	0x08006c67
 8006bbc:	08006c67 	.word	0x08006c67
 8006bc0:	08006c33 	.word	0x08006c33
 8006bc4:	08006c67 	.word	0x08006c67
 8006bc8:	08006c67 	.word	0x08006c67
 8006bcc:	08006c67 	.word	0x08006c67
 8006bd0:	08006c67 	.word	0x08006c67
 8006bd4:	08006c67 	.word	0x08006c67
 8006bd8:	08006c67 	.word	0x08006c67
 8006bdc:	08006c67 	.word	0x08006c67
 8006be0:	08006c67 	.word	0x08006c67
 8006be4:	08006c67 	.word	0x08006c67
 8006be8:	08006c67 	.word	0x08006c67
 8006bec:	08006c67 	.word	0x08006c67
 8006bf0:	08006c67 	.word	0x08006c67
 8006bf4:	08006c67 	.word	0x08006c67
 8006bf8:	08006c67 	.word	0x08006c67
 8006bfc:	08006c67 	.word	0x08006c67
 8006c00:	08006c59 	.word	0x08006c59
 8006c04:	2b40      	cmp	r3, #64	; 0x40
 8006c06:	d02a      	beq.n	8006c5e <UART_SetConfig+0x8a6>
 8006c08:	e02d      	b.n	8006c66 <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006c0a:	f7fe fa5d 	bl	80050c8 <HAL_RCCEx_GetD3PCLK1Freq>
 8006c0e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006c10:	e02f      	b.n	8006c72 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c12:	f107 0314 	add.w	r3, r7, #20
 8006c16:	4618      	mov	r0, r3
 8006c18:	f7fe fa6c 	bl	80050f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006c1c:	69bb      	ldr	r3, [r7, #24]
 8006c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c20:	e027      	b.n	8006c72 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c22:	f107 0308 	add.w	r3, r7, #8
 8006c26:	4618      	mov	r0, r3
 8006c28:	f7fe fbb8 	bl	800539c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c30:	e01f      	b.n	8006c72 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c32:	4b21      	ldr	r3, [pc, #132]	; (8006cb8 <UART_SetConfig+0x900>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f003 0320 	and.w	r3, r3, #32
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d009      	beq.n	8006c52 <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006c3e:	4b1e      	ldr	r3, [pc, #120]	; (8006cb8 <UART_SetConfig+0x900>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	08db      	lsrs	r3, r3, #3
 8006c44:	f003 0303 	and.w	r3, r3, #3
 8006c48:	4a1d      	ldr	r2, [pc, #116]	; (8006cc0 <UART_SetConfig+0x908>)
 8006c4a:	fa22 f303 	lsr.w	r3, r2, r3
 8006c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006c50:	e00f      	b.n	8006c72 <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 8006c52:	4b1b      	ldr	r3, [pc, #108]	; (8006cc0 <UART_SetConfig+0x908>)
 8006c54:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c56:	e00c      	b.n	8006c72 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006c58:	4b1a      	ldr	r3, [pc, #104]	; (8006cc4 <UART_SetConfig+0x90c>)
 8006c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c5c:	e009      	b.n	8006c72 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c62:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c64:	e005      	b.n	8006c72 <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 8006c66:	2300      	movs	r3, #0
 8006c68:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006c70:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	f000 81e6 	beq.w	8007046 <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c7e:	4a12      	ldr	r2, [pc, #72]	; (8006cc8 <UART_SetConfig+0x910>)
 8006c80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c84:	461a      	mov	r2, r3
 8006c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c88:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c8c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	685a      	ldr	r2, [r3, #4]
 8006c92:	4613      	mov	r3, r2
 8006c94:	005b      	lsls	r3, r3, #1
 8006c96:	4413      	add	r3, r2
 8006c98:	6a3a      	ldr	r2, [r7, #32]
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	d305      	bcc.n	8006caa <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006ca4:	6a3a      	ldr	r2, [r7, #32]
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d910      	bls.n	8006ccc <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 8006caa:	2301      	movs	r3, #1
 8006cac:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006cb0:	e1c9      	b.n	8007046 <UART_SetConfig+0xc8e>
 8006cb2:	bf00      	nop
 8006cb4:	40011c00 	.word	0x40011c00
 8006cb8:	58024400 	.word	0x58024400
 8006cbc:	58000c00 	.word	0x58000c00
 8006cc0:	03d09000 	.word	0x03d09000
 8006cc4:	003d0900 	.word	0x003d0900
 8006cc8:	0800a2b0 	.word	0x0800a2b0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f04f 0100 	mov.w	r1, #0
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd8:	4ac1      	ldr	r2, [pc, #772]	; (8006fe0 <UART_SetConfig+0xc28>)
 8006cda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006cde:	b29a      	uxth	r2, r3
 8006ce0:	f04f 0300 	mov.w	r3, #0
 8006ce4:	f7f9 fb14 	bl	8000310 <__aeabi_uldivmod>
 8006ce8:	4602      	mov	r2, r0
 8006cea:	460b      	mov	r3, r1
 8006cec:	4610      	mov	r0, r2
 8006cee:	4619      	mov	r1, r3
 8006cf0:	f04f 0200 	mov.w	r2, #0
 8006cf4:	f04f 0300 	mov.w	r3, #0
 8006cf8:	020b      	lsls	r3, r1, #8
 8006cfa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006cfe:	0202      	lsls	r2, r0, #8
 8006d00:	6879      	ldr	r1, [r7, #4]
 8006d02:	6849      	ldr	r1, [r1, #4]
 8006d04:	0849      	lsrs	r1, r1, #1
 8006d06:	4608      	mov	r0, r1
 8006d08:	f04f 0100 	mov.w	r1, #0
 8006d0c:	1814      	adds	r4, r2, r0
 8006d0e:	eb43 0501 	adc.w	r5, r3, r1
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	461a      	mov	r2, r3
 8006d18:	f04f 0300 	mov.w	r3, #0
 8006d1c:	4620      	mov	r0, r4
 8006d1e:	4629      	mov	r1, r5
 8006d20:	f7f9 faf6 	bl	8000310 <__aeabi_uldivmod>
 8006d24:	4602      	mov	r2, r0
 8006d26:	460b      	mov	r3, r1
 8006d28:	4613      	mov	r3, r2
 8006d2a:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d32:	d308      	bcc.n	8006d46 <UART_SetConfig+0x98e>
 8006d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d3a:	d204      	bcs.n	8006d46 <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d42:	60da      	str	r2, [r3, #12]
 8006d44:	e17f      	b.n	8007046 <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 8006d46:	2301      	movs	r3, #1
 8006d48:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006d4c:	e17b      	b.n	8007046 <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	69db      	ldr	r3, [r3, #28]
 8006d52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d56:	f040 80bd 	bne.w	8006ed4 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 8006d5a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006d5e:	2b20      	cmp	r3, #32
 8006d60:	dc48      	bgt.n	8006df4 <UART_SetConfig+0xa3c>
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	db7b      	blt.n	8006e5e <UART_SetConfig+0xaa6>
 8006d66:	2b20      	cmp	r3, #32
 8006d68:	d879      	bhi.n	8006e5e <UART_SetConfig+0xaa6>
 8006d6a:	a201      	add	r2, pc, #4	; (adr r2, 8006d70 <UART_SetConfig+0x9b8>)
 8006d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d70:	08006dfb 	.word	0x08006dfb
 8006d74:	08006e03 	.word	0x08006e03
 8006d78:	08006e5f 	.word	0x08006e5f
 8006d7c:	08006e5f 	.word	0x08006e5f
 8006d80:	08006e0b 	.word	0x08006e0b
 8006d84:	08006e5f 	.word	0x08006e5f
 8006d88:	08006e5f 	.word	0x08006e5f
 8006d8c:	08006e5f 	.word	0x08006e5f
 8006d90:	08006e1b 	.word	0x08006e1b
 8006d94:	08006e5f 	.word	0x08006e5f
 8006d98:	08006e5f 	.word	0x08006e5f
 8006d9c:	08006e5f 	.word	0x08006e5f
 8006da0:	08006e5f 	.word	0x08006e5f
 8006da4:	08006e5f 	.word	0x08006e5f
 8006da8:	08006e5f 	.word	0x08006e5f
 8006dac:	08006e5f 	.word	0x08006e5f
 8006db0:	08006e2b 	.word	0x08006e2b
 8006db4:	08006e5f 	.word	0x08006e5f
 8006db8:	08006e5f 	.word	0x08006e5f
 8006dbc:	08006e5f 	.word	0x08006e5f
 8006dc0:	08006e5f 	.word	0x08006e5f
 8006dc4:	08006e5f 	.word	0x08006e5f
 8006dc8:	08006e5f 	.word	0x08006e5f
 8006dcc:	08006e5f 	.word	0x08006e5f
 8006dd0:	08006e5f 	.word	0x08006e5f
 8006dd4:	08006e5f 	.word	0x08006e5f
 8006dd8:	08006e5f 	.word	0x08006e5f
 8006ddc:	08006e5f 	.word	0x08006e5f
 8006de0:	08006e5f 	.word	0x08006e5f
 8006de4:	08006e5f 	.word	0x08006e5f
 8006de8:	08006e5f 	.word	0x08006e5f
 8006dec:	08006e5f 	.word	0x08006e5f
 8006df0:	08006e51 	.word	0x08006e51
 8006df4:	2b40      	cmp	r3, #64	; 0x40
 8006df6:	d02e      	beq.n	8006e56 <UART_SetConfig+0xa9e>
 8006df8:	e031      	b.n	8006e5e <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006dfa:	f7fc fe1b 	bl	8003a34 <HAL_RCC_GetPCLK1Freq>
 8006dfe:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006e00:	e033      	b.n	8006e6a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e02:	f7fc fe2d 	bl	8003a60 <HAL_RCC_GetPCLK2Freq>
 8006e06:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006e08:	e02f      	b.n	8006e6a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e0a:	f107 0314 	add.w	r3, r7, #20
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f7fe f970 	bl	80050f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006e14:	69bb      	ldr	r3, [r7, #24]
 8006e16:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006e18:	e027      	b.n	8006e6a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e1a:	f107 0308 	add.w	r3, r7, #8
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f7fe fabc 	bl	800539c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006e28:	e01f      	b.n	8006e6a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e2a:	4b6e      	ldr	r3, [pc, #440]	; (8006fe4 <UART_SetConfig+0xc2c>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f003 0320 	and.w	r3, r3, #32
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d009      	beq.n	8006e4a <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006e36:	4b6b      	ldr	r3, [pc, #428]	; (8006fe4 <UART_SetConfig+0xc2c>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	08db      	lsrs	r3, r3, #3
 8006e3c:	f003 0303 	and.w	r3, r3, #3
 8006e40:	4a69      	ldr	r2, [pc, #420]	; (8006fe8 <UART_SetConfig+0xc30>)
 8006e42:	fa22 f303 	lsr.w	r3, r2, r3
 8006e46:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006e48:	e00f      	b.n	8006e6a <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 8006e4a:	4b67      	ldr	r3, [pc, #412]	; (8006fe8 <UART_SetConfig+0xc30>)
 8006e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006e4e:	e00c      	b.n	8006e6a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006e50:	4b66      	ldr	r3, [pc, #408]	; (8006fec <UART_SetConfig+0xc34>)
 8006e52:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006e54:	e009      	b.n	8006e6a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006e5c:	e005      	b.n	8006e6a <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006e62:	2301      	movs	r3, #1
 8006e64:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006e68:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	f000 80ea 	beq.w	8007046 <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e76:	4a5a      	ldr	r2, [pc, #360]	; (8006fe0 <UART_SetConfig+0xc28>)
 8006e78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e7c:	461a      	mov	r2, r3
 8006e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e80:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e84:	005a      	lsls	r2, r3, #1
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	085b      	lsrs	r3, r3, #1
 8006e8c:	441a      	add	r2, r3
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e96:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e9a:	2b0f      	cmp	r3, #15
 8006e9c:	d916      	bls.n	8006ecc <UART_SetConfig+0xb14>
 8006e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ea0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ea4:	d212      	bcs.n	8006ecc <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	f023 030f 	bic.w	r3, r3, #15
 8006eae:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eb2:	085b      	lsrs	r3, r3, #1
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	f003 0307 	and.w	r3, r3, #7
 8006eba:	b29a      	uxth	r2, r3
 8006ebc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006ec8:	60da      	str	r2, [r3, #12]
 8006eca:	e0bc      	b.n	8007046 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006ed2:	e0b8      	b.n	8007046 <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006ed4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006ed8:	2b20      	cmp	r3, #32
 8006eda:	dc4b      	bgt.n	8006f74 <UART_SetConfig+0xbbc>
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	f2c0 8087 	blt.w	8006ff0 <UART_SetConfig+0xc38>
 8006ee2:	2b20      	cmp	r3, #32
 8006ee4:	f200 8084 	bhi.w	8006ff0 <UART_SetConfig+0xc38>
 8006ee8:	a201      	add	r2, pc, #4	; (adr r2, 8006ef0 <UART_SetConfig+0xb38>)
 8006eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eee:	bf00      	nop
 8006ef0:	08006f7b 	.word	0x08006f7b
 8006ef4:	08006f83 	.word	0x08006f83
 8006ef8:	08006ff1 	.word	0x08006ff1
 8006efc:	08006ff1 	.word	0x08006ff1
 8006f00:	08006f8b 	.word	0x08006f8b
 8006f04:	08006ff1 	.word	0x08006ff1
 8006f08:	08006ff1 	.word	0x08006ff1
 8006f0c:	08006ff1 	.word	0x08006ff1
 8006f10:	08006f9b 	.word	0x08006f9b
 8006f14:	08006ff1 	.word	0x08006ff1
 8006f18:	08006ff1 	.word	0x08006ff1
 8006f1c:	08006ff1 	.word	0x08006ff1
 8006f20:	08006ff1 	.word	0x08006ff1
 8006f24:	08006ff1 	.word	0x08006ff1
 8006f28:	08006ff1 	.word	0x08006ff1
 8006f2c:	08006ff1 	.word	0x08006ff1
 8006f30:	08006fab 	.word	0x08006fab
 8006f34:	08006ff1 	.word	0x08006ff1
 8006f38:	08006ff1 	.word	0x08006ff1
 8006f3c:	08006ff1 	.word	0x08006ff1
 8006f40:	08006ff1 	.word	0x08006ff1
 8006f44:	08006ff1 	.word	0x08006ff1
 8006f48:	08006ff1 	.word	0x08006ff1
 8006f4c:	08006ff1 	.word	0x08006ff1
 8006f50:	08006ff1 	.word	0x08006ff1
 8006f54:	08006ff1 	.word	0x08006ff1
 8006f58:	08006ff1 	.word	0x08006ff1
 8006f5c:	08006ff1 	.word	0x08006ff1
 8006f60:	08006ff1 	.word	0x08006ff1
 8006f64:	08006ff1 	.word	0x08006ff1
 8006f68:	08006ff1 	.word	0x08006ff1
 8006f6c:	08006ff1 	.word	0x08006ff1
 8006f70:	08006fd1 	.word	0x08006fd1
 8006f74:	2b40      	cmp	r3, #64	; 0x40
 8006f76:	d02e      	beq.n	8006fd6 <UART_SetConfig+0xc1e>
 8006f78:	e03a      	b.n	8006ff0 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f7a:	f7fc fd5b 	bl	8003a34 <HAL_RCC_GetPCLK1Freq>
 8006f7e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006f80:	e03c      	b.n	8006ffc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f82:	f7fc fd6d 	bl	8003a60 <HAL_RCC_GetPCLK2Freq>
 8006f86:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006f88:	e038      	b.n	8006ffc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f8a:	f107 0314 	add.w	r3, r7, #20
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f7fe f8b0 	bl	80050f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006f94:	69bb      	ldr	r3, [r7, #24]
 8006f96:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006f98:	e030      	b.n	8006ffc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f9a:	f107 0308 	add.w	r3, r7, #8
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f7fe f9fc 	bl	800539c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006fa8:	e028      	b.n	8006ffc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006faa:	4b0e      	ldr	r3, [pc, #56]	; (8006fe4 <UART_SetConfig+0xc2c>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f003 0320 	and.w	r3, r3, #32
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d009      	beq.n	8006fca <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006fb6:	4b0b      	ldr	r3, [pc, #44]	; (8006fe4 <UART_SetConfig+0xc2c>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	08db      	lsrs	r3, r3, #3
 8006fbc:	f003 0303 	and.w	r3, r3, #3
 8006fc0:	4a09      	ldr	r2, [pc, #36]	; (8006fe8 <UART_SetConfig+0xc30>)
 8006fc2:	fa22 f303 	lsr.w	r3, r2, r3
 8006fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006fc8:	e018      	b.n	8006ffc <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 8006fca:	4b07      	ldr	r3, [pc, #28]	; (8006fe8 <UART_SetConfig+0xc30>)
 8006fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006fce:	e015      	b.n	8006ffc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006fd0:	4b06      	ldr	r3, [pc, #24]	; (8006fec <UART_SetConfig+0xc34>)
 8006fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006fd4:	e012      	b.n	8006ffc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006fd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fda:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006fdc:	e00e      	b.n	8006ffc <UART_SetConfig+0xc44>
 8006fde:	bf00      	nop
 8006fe0:	0800a2b0 	.word	0x0800a2b0
 8006fe4:	58024400 	.word	0x58024400
 8006fe8:	03d09000 	.word	0x03d09000
 8006fec:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006ffa:	bf00      	nop
    }

    if (pclk != 0U)
 8006ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d021      	beq.n	8007046 <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007006:	4a1a      	ldr	r2, [pc, #104]	; (8007070 <UART_SetConfig+0xcb8>)
 8007008:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800700c:	461a      	mov	r2, r3
 800700e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007010:	fbb3 f2f2 	udiv	r2, r3, r2
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	085b      	lsrs	r3, r3, #1
 800701a:	441a      	add	r2, r3
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	fbb2 f3f3 	udiv	r3, r2, r3
 8007024:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007028:	2b0f      	cmp	r3, #15
 800702a:	d909      	bls.n	8007040 <UART_SetConfig+0xc88>
 800702c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800702e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007032:	d205      	bcs.n	8007040 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007036:	b29a      	uxth	r2, r3
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	60da      	str	r2, [r3, #12]
 800703e:	e002      	b.n	8007046 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8007040:	2301      	movs	r3, #1
 8007042:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2201      	movs	r2, #1
 800704a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2201      	movs	r2, #1
 8007052:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2200      	movs	r2, #0
 800705a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2200      	movs	r2, #0
 8007060:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007062:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8007066:	4618      	mov	r0, r3
 8007068:	3738      	adds	r7, #56	; 0x38
 800706a:	46bd      	mov	sp, r7
 800706c:	bdb0      	pop	{r4, r5, r7, pc}
 800706e:	bf00      	nop
 8007070:	0800a2b0 	.word	0x0800a2b0

08007074 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007074:	b480      	push	{r7}
 8007076:	b083      	sub	sp, #12
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007080:	f003 0301 	and.w	r3, r3, #1
 8007084:	2b00      	cmp	r3, #0
 8007086:	d00a      	beq.n	800709e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	430a      	orrs	r2, r1
 800709c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070a2:	f003 0302 	and.w	r3, r3, #2
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d00a      	beq.n	80070c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	430a      	orrs	r2, r1
 80070be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070c4:	f003 0304 	and.w	r3, r3, #4
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d00a      	beq.n	80070e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	430a      	orrs	r2, r1
 80070e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070e6:	f003 0308 	and.w	r3, r3, #8
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d00a      	beq.n	8007104 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	430a      	orrs	r2, r1
 8007102:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007108:	f003 0310 	and.w	r3, r3, #16
 800710c:	2b00      	cmp	r3, #0
 800710e:	d00a      	beq.n	8007126 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	689b      	ldr	r3, [r3, #8]
 8007116:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	430a      	orrs	r2, r1
 8007124:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800712a:	f003 0320 	and.w	r3, r3, #32
 800712e:	2b00      	cmp	r3, #0
 8007130:	d00a      	beq.n	8007148 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	689b      	ldr	r3, [r3, #8]
 8007138:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	430a      	orrs	r2, r1
 8007146:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800714c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007150:	2b00      	cmp	r3, #0
 8007152:	d01a      	beq.n	800718a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	430a      	orrs	r2, r1
 8007168:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800716e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007172:	d10a      	bne.n	800718a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	430a      	orrs	r2, r1
 8007188:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800718e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007192:	2b00      	cmp	r3, #0
 8007194:	d00a      	beq.n	80071ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	430a      	orrs	r2, r1
 80071aa:	605a      	str	r2, [r3, #4]
  }
}
 80071ac:	bf00      	nop
 80071ae:	370c      	adds	r7, #12
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr

080071b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b086      	sub	sp, #24
 80071bc:	af02      	add	r7, sp, #8
 80071be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2200      	movs	r2, #0
 80071c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80071c8:	f7f9 fb48 	bl	800085c <HAL_GetTick>
 80071cc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f003 0308 	and.w	r3, r3, #8
 80071d8:	2b08      	cmp	r3, #8
 80071da:	d10e      	bne.n	80071fa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80071e0:	9300      	str	r3, [sp, #0]
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2200      	movs	r2, #0
 80071e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f000 f82f 	bl	800724e <UART_WaitOnFlagUntilTimeout>
 80071f0:	4603      	mov	r3, r0
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d001      	beq.n	80071fa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80071f6:	2303      	movs	r3, #3
 80071f8:	e025      	b.n	8007246 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f003 0304 	and.w	r3, r3, #4
 8007204:	2b04      	cmp	r3, #4
 8007206:	d10e      	bne.n	8007226 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007208:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800720c:	9300      	str	r3, [sp, #0]
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2200      	movs	r2, #0
 8007212:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f000 f819 	bl	800724e <UART_WaitOnFlagUntilTimeout>
 800721c:	4603      	mov	r3, r0
 800721e:	2b00      	cmp	r3, #0
 8007220:	d001      	beq.n	8007226 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007222:	2303      	movs	r3, #3
 8007224:	e00f      	b.n	8007246 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2220      	movs	r2, #32
 800722a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2220      	movs	r2, #32
 8007232:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2200      	movs	r2, #0
 800723a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2200      	movs	r2, #0
 8007240:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007244:	2300      	movs	r3, #0
}
 8007246:	4618      	mov	r0, r3
 8007248:	3710      	adds	r7, #16
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}

0800724e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800724e:	b580      	push	{r7, lr}
 8007250:	b09c      	sub	sp, #112	; 0x70
 8007252:	af00      	add	r7, sp, #0
 8007254:	60f8      	str	r0, [r7, #12]
 8007256:	60b9      	str	r1, [r7, #8]
 8007258:	603b      	str	r3, [r7, #0]
 800725a:	4613      	mov	r3, r2
 800725c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800725e:	e0a9      	b.n	80073b4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007260:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007262:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007266:	f000 80a5 	beq.w	80073b4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800726a:	f7f9 faf7 	bl	800085c <HAL_GetTick>
 800726e:	4602      	mov	r2, r0
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	1ad3      	subs	r3, r2, r3
 8007274:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007276:	429a      	cmp	r2, r3
 8007278:	d302      	bcc.n	8007280 <UART_WaitOnFlagUntilTimeout+0x32>
 800727a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800727c:	2b00      	cmp	r3, #0
 800727e:	d140      	bne.n	8007302 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007286:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007288:	e853 3f00 	ldrex	r3, [r3]
 800728c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800728e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007290:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007294:	667b      	str	r3, [r7, #100]	; 0x64
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	461a      	mov	r2, r3
 800729c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800729e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80072a0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072a2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80072a4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80072a6:	e841 2300 	strex	r3, r2, [r1]
 80072aa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80072ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d1e6      	bne.n	8007280 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	3308      	adds	r3, #8
 80072b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072bc:	e853 3f00 	ldrex	r3, [r3]
 80072c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80072c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072c4:	f023 0301 	bic.w	r3, r3, #1
 80072c8:	663b      	str	r3, [r7, #96]	; 0x60
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	3308      	adds	r3, #8
 80072d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80072d2:	64ba      	str	r2, [r7, #72]	; 0x48
 80072d4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80072d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80072da:	e841 2300 	strex	r3, r2, [r1]
 80072de:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80072e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d1e5      	bne.n	80072b2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2220      	movs	r2, #32
 80072ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2220      	movs	r2, #32
 80072f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2200      	movs	r2, #0
 80072fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80072fe:	2303      	movs	r3, #3
 8007300:	e069      	b.n	80073d6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f003 0304 	and.w	r3, r3, #4
 800730c:	2b00      	cmp	r3, #0
 800730e:	d051      	beq.n	80073b4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	69db      	ldr	r3, [r3, #28]
 8007316:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800731a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800731e:	d149      	bne.n	80073b4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007328:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007332:	e853 3f00 	ldrex	r3, [r3]
 8007336:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800733e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	461a      	mov	r2, r3
 8007346:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007348:	637b      	str	r3, [r7, #52]	; 0x34
 800734a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800734c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800734e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007350:	e841 2300 	strex	r3, r2, [r1]
 8007354:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007358:	2b00      	cmp	r3, #0
 800735a:	d1e6      	bne.n	800732a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	3308      	adds	r3, #8
 8007362:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	e853 3f00 	ldrex	r3, [r3]
 800736a:	613b      	str	r3, [r7, #16]
   return(result);
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	f023 0301 	bic.w	r3, r3, #1
 8007372:	66bb      	str	r3, [r7, #104]	; 0x68
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	3308      	adds	r3, #8
 800737a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800737c:	623a      	str	r2, [r7, #32]
 800737e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007380:	69f9      	ldr	r1, [r7, #28]
 8007382:	6a3a      	ldr	r2, [r7, #32]
 8007384:	e841 2300 	strex	r3, r2, [r1]
 8007388:	61bb      	str	r3, [r7, #24]
   return(result);
 800738a:	69bb      	ldr	r3, [r7, #24]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d1e5      	bne.n	800735c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2220      	movs	r2, #32
 8007394:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2220      	movs	r2, #32
 800739c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2220      	movs	r2, #32
 80073a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2200      	movs	r2, #0
 80073ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80073b0:	2303      	movs	r3, #3
 80073b2:	e010      	b.n	80073d6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	69da      	ldr	r2, [r3, #28]
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	4013      	ands	r3, r2
 80073be:	68ba      	ldr	r2, [r7, #8]
 80073c0:	429a      	cmp	r2, r3
 80073c2:	bf0c      	ite	eq
 80073c4:	2301      	moveq	r3, #1
 80073c6:	2300      	movne	r3, #0
 80073c8:	b2db      	uxtb	r3, r3
 80073ca:	461a      	mov	r2, r3
 80073cc:	79fb      	ldrb	r3, [r7, #7]
 80073ce:	429a      	cmp	r2, r3
 80073d0:	f43f af46 	beq.w	8007260 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80073d4:	2300      	movs	r3, #0
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3770      	adds	r7, #112	; 0x70
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}

080073de <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80073de:	b480      	push	{r7}
 80073e0:	b085      	sub	sp, #20
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	d101      	bne.n	80073f4 <HAL_UARTEx_DisableFifoMode+0x16>
 80073f0:	2302      	movs	r3, #2
 80073f2:	e027      	b.n	8007444 <HAL_UARTEx_DisableFifoMode+0x66>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2201      	movs	r2, #1
 80073f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2224      	movs	r2, #36	; 0x24
 8007400:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	681a      	ldr	r2, [r3, #0]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f022 0201 	bic.w	r2, r2, #1
 800741a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007422:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2200      	movs	r2, #0
 8007428:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	68fa      	ldr	r2, [r7, #12]
 8007430:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2220      	movs	r2, #32
 8007436:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2200      	movs	r2, #0
 800743e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007442:	2300      	movs	r3, #0
}
 8007444:	4618      	mov	r0, r3
 8007446:	3714      	adds	r7, #20
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr

08007450 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b084      	sub	sp, #16
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
 8007458:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007460:	2b01      	cmp	r3, #1
 8007462:	d101      	bne.n	8007468 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007464:	2302      	movs	r3, #2
 8007466:	e02d      	b.n	80074c4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2201      	movs	r2, #1
 800746c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2224      	movs	r2, #36	; 0x24
 8007474:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	681a      	ldr	r2, [r3, #0]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f022 0201 	bic.w	r2, r2, #1
 800748e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	689b      	ldr	r3, [r3, #8]
 8007496:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	683a      	ldr	r2, [r7, #0]
 80074a0:	430a      	orrs	r2, r1
 80074a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f000 f84f 	bl	8007548 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	68fa      	ldr	r2, [r7, #12]
 80074b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2220      	movs	r2, #32
 80074b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2200      	movs	r2, #0
 80074be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80074c2:	2300      	movs	r3, #0
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3710      	adds	r7, #16
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}

080074cc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b084      	sub	sp, #16
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
 80074d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d101      	bne.n	80074e4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80074e0:	2302      	movs	r3, #2
 80074e2:	e02d      	b.n	8007540 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2201      	movs	r2, #1
 80074e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2224      	movs	r2, #36	; 0x24
 80074f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	681a      	ldr	r2, [r3, #0]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f022 0201 	bic.w	r2, r2, #1
 800750a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	689b      	ldr	r3, [r3, #8]
 8007512:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	683a      	ldr	r2, [r7, #0]
 800751c:	430a      	orrs	r2, r1
 800751e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f000 f811 	bl	8007548 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	68fa      	ldr	r2, [r7, #12]
 800752c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2220      	movs	r2, #32
 8007532:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2200      	movs	r2, #0
 800753a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800753e:	2300      	movs	r3, #0
}
 8007540:	4618      	mov	r0, r3
 8007542:	3710      	adds	r7, #16
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}

08007548 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007548:	b480      	push	{r7}
 800754a:	b085      	sub	sp, #20
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007554:	2b00      	cmp	r3, #0
 8007556:	d108      	bne.n	800756a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2201      	movs	r2, #1
 800755c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2201      	movs	r2, #1
 8007564:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007568:	e031      	b.n	80075ce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800756a:	2310      	movs	r3, #16
 800756c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800756e:	2310      	movs	r3, #16
 8007570:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	689b      	ldr	r3, [r3, #8]
 8007578:	0e5b      	lsrs	r3, r3, #25
 800757a:	b2db      	uxtb	r3, r3
 800757c:	f003 0307 	and.w	r3, r3, #7
 8007580:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	689b      	ldr	r3, [r3, #8]
 8007588:	0f5b      	lsrs	r3, r3, #29
 800758a:	b2db      	uxtb	r3, r3
 800758c:	f003 0307 	and.w	r3, r3, #7
 8007590:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007592:	7bbb      	ldrb	r3, [r7, #14]
 8007594:	7b3a      	ldrb	r2, [r7, #12]
 8007596:	4911      	ldr	r1, [pc, #68]	; (80075dc <UARTEx_SetNbDataToProcess+0x94>)
 8007598:	5c8a      	ldrb	r2, [r1, r2]
 800759a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800759e:	7b3a      	ldrb	r2, [r7, #12]
 80075a0:	490f      	ldr	r1, [pc, #60]	; (80075e0 <UARTEx_SetNbDataToProcess+0x98>)
 80075a2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80075a4:	fb93 f3f2 	sdiv	r3, r3, r2
 80075a8:	b29a      	uxth	r2, r3
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80075b0:	7bfb      	ldrb	r3, [r7, #15]
 80075b2:	7b7a      	ldrb	r2, [r7, #13]
 80075b4:	4909      	ldr	r1, [pc, #36]	; (80075dc <UARTEx_SetNbDataToProcess+0x94>)
 80075b6:	5c8a      	ldrb	r2, [r1, r2]
 80075b8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80075bc:	7b7a      	ldrb	r2, [r7, #13]
 80075be:	4908      	ldr	r1, [pc, #32]	; (80075e0 <UARTEx_SetNbDataToProcess+0x98>)
 80075c0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80075c2:	fb93 f3f2 	sdiv	r3, r3, r2
 80075c6:	b29a      	uxth	r2, r3
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80075ce:	bf00      	nop
 80075d0:	3714      	adds	r7, #20
 80075d2:	46bd      	mov	sp, r7
 80075d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d8:	4770      	bx	lr
 80075da:	bf00      	nop
 80075dc:	0800a2c8 	.word	0x0800a2c8
 80075e0:	0800a2d0 	.word	0x0800a2d0

080075e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80075e8:	f7f9 f8b2 	bl	8000750 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80075ec:	f000 f81a 	bl	8007624 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80075f0:	f000 f9fa 	bl	80079e8 <MX_GPIO_Init>
  MX_BDMA_Init();
 80075f4:	f000 f9a8 	bl	8007948 <MX_BDMA_Init>
  MX_SAI4_Init();
 80075f8:	f000 f8fa 	bl	80077f0 <MX_SAI4_Init>
  MX_CRC_Init();
 80075fc:	f000 f880 	bl	8007700 <MX_CRC_Init>
  MX_USART3_UART_Init();
 8007600:	f000 f956 	bl	80078b0 <MX_USART3_UART_Init>
  MX_DMA_Init();
 8007604:	f000 f9c8 	bl	8007998 <MX_DMA_Init>
  MX_PDM2PCM_Init();
 8007608:	f000 fa4a 	bl	8007aa0 <MX_PDM2PCM_Init>
  MX_SAI1_Init();
 800760c:	f000 f8ba 	bl	8007784 <MX_SAI1_Init>
  /* USER CODE BEGIN 2 */
  BSP_AUDIO_IN_PDMToPCM_Init(&hsai_A4, SAI_AUDIO_FREQUENCY_48K, 1, 1);
 8007610:	4803      	ldr	r0, [pc, #12]	; (8007620 <main+0x3c>)
 8007612:	2301      	movs	r3, #1
 8007614:	2201      	movs	r2, #1
 8007616:	f64b 3180 	movw	r1, #48000	; 0xbb80
 800761a:	f7f8 fff5 	bl	8000608 <BSP_AUDIO_IN_PDMToPCM_Init>
//  /* USER CODE END 2 */
//
//  /* Infinite loop */
//  /* USER CODE BEGIN WHILE */

  while (1)
 800761e:	e7fe      	b.n	800761e <main+0x3a>
 8007620:	240005f8 	.word	0x240005f8

08007624 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b09c      	sub	sp, #112	; 0x70
 8007628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800762a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800762e:	224c      	movs	r2, #76	; 0x4c
 8007630:	2100      	movs	r1, #0
 8007632:	4618      	mov	r0, r3
 8007634:	f002 fc44 	bl	8009ec0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007638:	1d3b      	adds	r3, r7, #4
 800763a:	2220      	movs	r2, #32
 800763c:	2100      	movs	r1, #0
 800763e:	4618      	mov	r0, r3
 8007640:	f002 fc3e 	bl	8009ec0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8007644:	2004      	movs	r0, #4
 8007646:	f7fb fa8f 	bl	8002b68 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800764a:	2300      	movs	r3, #0
 800764c:	603b      	str	r3, [r7, #0]
 800764e:	4b2b      	ldr	r3, [pc, #172]	; (80076fc <SystemClock_Config+0xd8>)
 8007650:	699b      	ldr	r3, [r3, #24]
 8007652:	4a2a      	ldr	r2, [pc, #168]	; (80076fc <SystemClock_Config+0xd8>)
 8007654:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007658:	6193      	str	r3, [r2, #24]
 800765a:	4b28      	ldr	r3, [pc, #160]	; (80076fc <SystemClock_Config+0xd8>)
 800765c:	699b      	ldr	r3, [r3, #24]
 800765e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007662:	603b      	str	r3, [r7, #0]
 8007664:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8007666:	bf00      	nop
 8007668:	4b24      	ldr	r3, [pc, #144]	; (80076fc <SystemClock_Config+0xd8>)
 800766a:	699b      	ldr	r3, [r3, #24]
 800766c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007670:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007674:	d1f8      	bne.n	8007668 <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8007676:	2302      	movs	r3, #2
 8007678:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800767a:	2301      	movs	r3, #1
 800767c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800767e:	2340      	movs	r3, #64	; 0x40
 8007680:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007682:	2302      	movs	r3, #2
 8007684:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8007686:	2300      	movs	r3, #0
 8007688:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800768a:	2304      	movs	r3, #4
 800768c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 800768e:	2318      	movs	r3, #24
 8007690:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8007692:	2301      	movs	r3, #1
 8007694:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 125;
 8007696:	237d      	movs	r3, #125	; 0x7d
 8007698:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800769a:	2302      	movs	r3, #2
 800769c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800769e:	230c      	movs	r3, #12
 80076a0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80076a2:	2300      	movs	r3, #0
 80076a4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80076a6:	2300      	movs	r3, #0
 80076a8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80076aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80076ae:	4618      	mov	r0, r3
 80076b0:	f7fb fab4 	bl	8002c1c <HAL_RCC_OscConfig>
 80076b4:	4603      	mov	r3, r0
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d001      	beq.n	80076be <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80076ba:	f000 f9eb 	bl	8007a94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80076be:	233f      	movs	r3, #63	; 0x3f
 80076c0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80076c2:	2303      	movs	r3, #3
 80076c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80076c6:	2300      	movs	r3, #0
 80076c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80076ca:	2308      	movs	r3, #8
 80076cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80076ce:	2340      	movs	r3, #64	; 0x40
 80076d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80076d2:	2340      	movs	r3, #64	; 0x40
 80076d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80076d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80076da:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80076dc:	2340      	movs	r3, #64	; 0x40
 80076de:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80076e0:	1d3b      	adds	r3, r7, #4
 80076e2:	2102      	movs	r1, #2
 80076e4:	4618      	mov	r0, r3
 80076e6:	f7fb fe45 	bl	8003374 <HAL_RCC_ClockConfig>
 80076ea:	4603      	mov	r3, r0
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d001      	beq.n	80076f4 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80076f0:	f000 f9d0 	bl	8007a94 <Error_Handler>
  }
}
 80076f4:	bf00      	nop
 80076f6:	3770      	adds	r7, #112	; 0x70
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}
 80076fc:	58024800 	.word	0x58024800

08007700 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b082      	sub	sp, #8
 8007704:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8007706:	4b1c      	ldr	r3, [pc, #112]	; (8007778 <MX_CRC_Init+0x78>)
 8007708:	4a1c      	ldr	r2, [pc, #112]	; (800777c <MX_CRC_Init+0x7c>)
 800770a:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800770c:	4b1a      	ldr	r3, [pc, #104]	; (8007778 <MX_CRC_Init+0x78>)
 800770e:	2200      	movs	r2, #0
 8007710:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8007712:	4b19      	ldr	r3, [pc, #100]	; (8007778 <MX_CRC_Init+0x78>)
 8007714:	2200      	movs	r2, #0
 8007716:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8007718:	4b17      	ldr	r3, [pc, #92]	; (8007778 <MX_CRC_Init+0x78>)
 800771a:	2200      	movs	r2, #0
 800771c:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800771e:	4b16      	ldr	r3, [pc, #88]	; (8007778 <MX_CRC_Init+0x78>)
 8007720:	2200      	movs	r2, #0
 8007722:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8007724:	4b14      	ldr	r3, [pc, #80]	; (8007778 <MX_CRC_Init+0x78>)
 8007726:	2201      	movs	r2, #1
 8007728:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800772a:	4813      	ldr	r0, [pc, #76]	; (8007778 <MX_CRC_Init+0x78>)
 800772c:	f7f9 f9b2 	bl	8000a94 <HAL_CRC_Init>
 8007730:	4603      	mov	r3, r0
 8007732:	2b00      	cmp	r3, #0
 8007734:	d001      	beq.n	800773a <MX_CRC_Init+0x3a>
  {
    Error_Handler();
 8007736:	f000 f9ad 	bl	8007a94 <Error_Handler>
  }
  __HAL_CRC_DR_RESET(&hcrc);
 800773a:	4b0f      	ldr	r3, [pc, #60]	; (8007778 <MX_CRC_Init+0x78>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	689a      	ldr	r2, [r3, #8]
 8007740:	4b0d      	ldr	r3, [pc, #52]	; (8007778 <MX_CRC_Init+0x78>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f042 0201 	orr.w	r2, r2, #1
 8007748:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN CRC_Init 2 */

  __HAL_RCC_CRC_CLK_ENABLE();
 800774a:	4b0d      	ldr	r3, [pc, #52]	; (8007780 <MX_CRC_Init+0x80>)
 800774c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007750:	4a0b      	ldr	r2, [pc, #44]	; (8007780 <MX_CRC_Init+0x80>)
 8007752:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007756:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800775a:	4b09      	ldr	r3, [pc, #36]	; (8007780 <MX_CRC_Init+0x80>)
 800775c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007760:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007764:	607b      	str	r3, [r7, #4]
 8007766:	687b      	ldr	r3, [r7, #4]
  HAL_CRC_MspInit(&hcrc);
 8007768:	4803      	ldr	r0, [pc, #12]	; (8007778 <MX_CRC_Init+0x78>)
 800776a:	f000 f9dd 	bl	8007b28 <HAL_CRC_MspInit>

  /* USER CODE END CRC_Init 2 */

}
 800776e:	bf00      	nop
 8007770:	3708      	adds	r7, #8
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}
 8007776:	bf00      	nop
 8007778:	240005d4 	.word	0x240005d4
 800777c:	58024c00 	.word	0x58024c00
 8007780:	58024400 	.word	0x58024400

08007784 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_B1.Instance = SAI1_Block_B;
 8007788:	4b16      	ldr	r3, [pc, #88]	; (80077e4 <MX_SAI1_Init+0x60>)
 800778a:	4a17      	ldr	r2, [pc, #92]	; (80077e8 <MX_SAI1_Init+0x64>)
 800778c:	601a      	str	r2, [r3, #0]
  hsai_B1.Init.AudioMode = SAI_MODEMASTER_TX;
 800778e:	4b15      	ldr	r3, [pc, #84]	; (80077e4 <MX_SAI1_Init+0x60>)
 8007790:	2200      	movs	r2, #0
 8007792:	605a      	str	r2, [r3, #4]
  hsai_B1.Init.Synchro = SAI_ASYNCHRONOUS;
 8007794:	4b13      	ldr	r3, [pc, #76]	; (80077e4 <MX_SAI1_Init+0x60>)
 8007796:	2200      	movs	r2, #0
 8007798:	609a      	str	r2, [r3, #8]
  hsai_B1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800779a:	4b12      	ldr	r3, [pc, #72]	; (80077e4 <MX_SAI1_Init+0x60>)
 800779c:	2200      	movs	r2, #0
 800779e:	615a      	str	r2, [r3, #20]
  hsai_B1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80077a0:	4b10      	ldr	r3, [pc, #64]	; (80077e4 <MX_SAI1_Init+0x60>)
 80077a2:	2200      	movs	r2, #0
 80077a4:	619a      	str	r2, [r3, #24]
  hsai_B1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80077a6:	4b0f      	ldr	r3, [pc, #60]	; (80077e4 <MX_SAI1_Init+0x60>)
 80077a8:	2200      	movs	r2, #0
 80077aa:	61da      	str	r2, [r3, #28]
  hsai_B1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80077ac:	4b0d      	ldr	r3, [pc, #52]	; (80077e4 <MX_SAI1_Init+0x60>)
 80077ae:	4a0f      	ldr	r2, [pc, #60]	; (80077ec <MX_SAI1_Init+0x68>)
 80077b0:	621a      	str	r2, [r3, #32]
  hsai_B1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80077b2:	4b0c      	ldr	r3, [pc, #48]	; (80077e4 <MX_SAI1_Init+0x60>)
 80077b4:	2200      	movs	r2, #0
 80077b6:	60da      	str	r2, [r3, #12]
  hsai_B1.Init.MonoStereoMode = SAI_STEREOMODE;
 80077b8:	4b0a      	ldr	r3, [pc, #40]	; (80077e4 <MX_SAI1_Init+0x60>)
 80077ba:	2200      	movs	r2, #0
 80077bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_B1.Init.CompandingMode = SAI_NOCOMPANDING;
 80077be:	4b09      	ldr	r3, [pc, #36]	; (80077e4 <MX_SAI1_Init+0x60>)
 80077c0:	2200      	movs	r2, #0
 80077c2:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_B1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80077c4:	4b07      	ldr	r3, [pc, #28]	; (80077e4 <MX_SAI1_Init+0x60>)
 80077c6:	2200      	movs	r2, #0
 80077c8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_B1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 80077ca:	2302      	movs	r3, #2
 80077cc:	2200      	movs	r2, #0
 80077ce:	2100      	movs	r1, #0
 80077d0:	4804      	ldr	r0, [pc, #16]	; (80077e4 <MX_SAI1_Init+0x60>)
 80077d2:	f7fe f9ed 	bl	8005bb0 <HAL_SAI_InitProtocol>
 80077d6:	4603      	mov	r3, r0
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d001      	beq.n	80077e0 <MX_SAI1_Init+0x5c>
  {
    Error_Handler();
 80077dc:	f000 f95a 	bl	8007a94 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 80077e0:	bf00      	nop
 80077e2:	bd80      	pop	{r7, pc}
 80077e4:	24000690 	.word	0x24000690
 80077e8:	40015824 	.word	0x40015824
 80077ec:	0002ee00 	.word	0x0002ee00

080077f0 <MX_SAI4_Init>:
  * @brief SAI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI4_Init(void)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	af00      	add	r7, sp, #0
  /* USER CODE END SAI4_Init 0 */

  /* USER CODE BEGIN SAI4_Init 1 */

  /* USER CODE END SAI4_Init 1 */
  hsai_A4.Instance = SAI4_Block_A;
 80077f4:	4b2c      	ldr	r3, [pc, #176]	; (80078a8 <MX_SAI4_Init+0xb8>)
 80077f6:	4a2d      	ldr	r2, [pc, #180]	; (80078ac <MX_SAI4_Init+0xbc>)
 80077f8:	601a      	str	r2, [r3, #0]
  hsai_A4.Init.Protocol = SAI_FREE_PROTOCOL;
 80077fa:	4b2b      	ldr	r3, [pc, #172]	; (80078a8 <MX_SAI4_Init+0xb8>)
 80077fc:	2200      	movs	r2, #0
 80077fe:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_A4.Init.AudioMode = SAI_MODEMASTER_RX;
 8007800:	4b29      	ldr	r3, [pc, #164]	; (80078a8 <MX_SAI4_Init+0xb8>)
 8007802:	2201      	movs	r2, #1
 8007804:	605a      	str	r2, [r3, #4]
  hsai_A4.Init.DataSize = SAI_DATASIZE_16;
 8007806:	4b28      	ldr	r3, [pc, #160]	; (80078a8 <MX_SAI4_Init+0xb8>)
 8007808:	2280      	movs	r2, #128	; 0x80
 800780a:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_A4.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800780c:	4b26      	ldr	r3, [pc, #152]	; (80078a8 <MX_SAI4_Init+0xb8>)
 800780e:	2200      	movs	r2, #0
 8007810:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_A4.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8007812:	4b25      	ldr	r3, [pc, #148]	; (80078a8 <MX_SAI4_Init+0xb8>)
 8007814:	2200      	movs	r2, #0
 8007816:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_A4.Init.Synchro = SAI_ASYNCHRONOUS;
 8007818:	4b23      	ldr	r3, [pc, #140]	; (80078a8 <MX_SAI4_Init+0xb8>)
 800781a:	2200      	movs	r2, #0
 800781c:	609a      	str	r2, [r3, #8]
  hsai_A4.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800781e:	4b22      	ldr	r3, [pc, #136]	; (80078a8 <MX_SAI4_Init+0xb8>)
 8007820:	2200      	movs	r2, #0
 8007822:	615a      	str	r2, [r3, #20]
  hsai_A4.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8007824:	4b20      	ldr	r3, [pc, #128]	; (80078a8 <MX_SAI4_Init+0xb8>)
 8007826:	2200      	movs	r2, #0
 8007828:	619a      	str	r2, [r3, #24]
  hsai_A4.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800782a:	4b1f      	ldr	r3, [pc, #124]	; (80078a8 <MX_SAI4_Init+0xb8>)
 800782c:	2200      	movs	r2, #0
 800782e:	61da      	str	r2, [r3, #28]
  hsai_A4.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8007830:	4b1d      	ldr	r3, [pc, #116]	; (80078a8 <MX_SAI4_Init+0xb8>)
 8007832:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8007836:	621a      	str	r2, [r3, #32]
  hsai_A4.Init.MonoStereoMode = SAI_STEREOMODE;
 8007838:	4b1b      	ldr	r3, [pc, #108]	; (80078a8 <MX_SAI4_Init+0xb8>)
 800783a:	2200      	movs	r2, #0
 800783c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_A4.Init.CompandingMode = SAI_NOCOMPANDING;
 800783e:	4b1a      	ldr	r3, [pc, #104]	; (80078a8 <MX_SAI4_Init+0xb8>)
 8007840:	2200      	movs	r2, #0
 8007842:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_A4.Init.PdmInit.Activation = ENABLE;
 8007844:	4b18      	ldr	r3, [pc, #96]	; (80078a8 <MX_SAI4_Init+0xb8>)
 8007846:	2201      	movs	r2, #1
 8007848:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_A4.Init.PdmInit.MicPairsNbr = 1;
 800784c:	4b16      	ldr	r3, [pc, #88]	; (80078a8 <MX_SAI4_Init+0xb8>)
 800784e:	2201      	movs	r2, #1
 8007850:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_A4.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK2_ENABLE;
 8007852:	4b15      	ldr	r3, [pc, #84]	; (80078a8 <MX_SAI4_Init+0xb8>)
 8007854:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007858:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_A4.FrameInit.FrameLength = 16;
 800785a:	4b13      	ldr	r3, [pc, #76]	; (80078a8 <MX_SAI4_Init+0xb8>)
 800785c:	2210      	movs	r2, #16
 800785e:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_A4.FrameInit.ActiveFrameLength = 1;
 8007860:	4b11      	ldr	r3, [pc, #68]	; (80078a8 <MX_SAI4_Init+0xb8>)
 8007862:	2201      	movs	r2, #1
 8007864:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_A4.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8007866:	4b10      	ldr	r3, [pc, #64]	; (80078a8 <MX_SAI4_Init+0xb8>)
 8007868:	2200      	movs	r2, #0
 800786a:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_A4.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800786c:	4b0e      	ldr	r3, [pc, #56]	; (80078a8 <MX_SAI4_Init+0xb8>)
 800786e:	2200      	movs	r2, #0
 8007870:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_A4.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8007872:	4b0d      	ldr	r3, [pc, #52]	; (80078a8 <MX_SAI4_Init+0xb8>)
 8007874:	2200      	movs	r2, #0
 8007876:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_A4.SlotInit.FirstBitOffset = 0;
 8007878:	4b0b      	ldr	r3, [pc, #44]	; (80078a8 <MX_SAI4_Init+0xb8>)
 800787a:	2200      	movs	r2, #0
 800787c:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_A4.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800787e:	4b0a      	ldr	r3, [pc, #40]	; (80078a8 <MX_SAI4_Init+0xb8>)
 8007880:	2200      	movs	r2, #0
 8007882:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_A4.SlotInit.SlotNumber = 1;
 8007884:	4b08      	ldr	r3, [pc, #32]	; (80078a8 <MX_SAI4_Init+0xb8>)
 8007886:	2201      	movs	r2, #1
 8007888:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_A4.SlotInit.SlotActive = 0x0000FFFF;
 800788a:	4b07      	ldr	r3, [pc, #28]	; (80078a8 <MX_SAI4_Init+0xb8>)
 800788c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007890:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_A4) != HAL_OK)
 8007892:	4805      	ldr	r0, [pc, #20]	; (80078a8 <MX_SAI4_Init+0xb8>)
 8007894:	f7fe f9be 	bl	8005c14 <HAL_SAI_Init>
 8007898:	4603      	mov	r3, r0
 800789a:	2b00      	cmp	r3, #0
 800789c:	d001      	beq.n	80078a2 <MX_SAI4_Init+0xb2>
  {
    Error_Handler();
 800789e:	f000 f8f9 	bl	8007a94 <Error_Handler>
  }
  /* USER CODE BEGIN SAI4_Init 2 */

  /* USER CODE END SAI4_Init 2 */

}
 80078a2:	bf00      	nop
 80078a4:	bd80      	pop	{r7, pc}
 80078a6:	bf00      	nop
 80078a8:	240005f8 	.word	0x240005f8
 80078ac:	58005404 	.word	0x58005404

080078b0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80078b4:	4b22      	ldr	r3, [pc, #136]	; (8007940 <MX_USART3_UART_Init+0x90>)
 80078b6:	4a23      	ldr	r2, [pc, #140]	; (8007944 <MX_USART3_UART_Init+0x94>)
 80078b8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80078ba:	4b21      	ldr	r3, [pc, #132]	; (8007940 <MX_USART3_UART_Init+0x90>)
 80078bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80078c0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80078c2:	4b1f      	ldr	r3, [pc, #124]	; (8007940 <MX_USART3_UART_Init+0x90>)
 80078c4:	2200      	movs	r2, #0
 80078c6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80078c8:	4b1d      	ldr	r3, [pc, #116]	; (8007940 <MX_USART3_UART_Init+0x90>)
 80078ca:	2200      	movs	r2, #0
 80078cc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80078ce:	4b1c      	ldr	r3, [pc, #112]	; (8007940 <MX_USART3_UART_Init+0x90>)
 80078d0:	2200      	movs	r2, #0
 80078d2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80078d4:	4b1a      	ldr	r3, [pc, #104]	; (8007940 <MX_USART3_UART_Init+0x90>)
 80078d6:	220c      	movs	r2, #12
 80078d8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80078da:	4b19      	ldr	r3, [pc, #100]	; (8007940 <MX_USART3_UART_Init+0x90>)
 80078dc:	2200      	movs	r2, #0
 80078de:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80078e0:	4b17      	ldr	r3, [pc, #92]	; (8007940 <MX_USART3_UART_Init+0x90>)
 80078e2:	2200      	movs	r2, #0
 80078e4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80078e6:	4b16      	ldr	r3, [pc, #88]	; (8007940 <MX_USART3_UART_Init+0x90>)
 80078e8:	2200      	movs	r2, #0
 80078ea:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80078ec:	4b14      	ldr	r3, [pc, #80]	; (8007940 <MX_USART3_UART_Init+0x90>)
 80078ee:	2200      	movs	r2, #0
 80078f0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80078f2:	4b13      	ldr	r3, [pc, #76]	; (8007940 <MX_USART3_UART_Init+0x90>)
 80078f4:	2200      	movs	r2, #0
 80078f6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80078f8:	4811      	ldr	r0, [pc, #68]	; (8007940 <MX_USART3_UART_Init+0x90>)
 80078fa:	f7fe fd0d 	bl	8006318 <HAL_UART_Init>
 80078fe:	4603      	mov	r3, r0
 8007900:	2b00      	cmp	r3, #0
 8007902:	d001      	beq.n	8007908 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8007904:	f000 f8c6 	bl	8007a94 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007908:	2100      	movs	r1, #0
 800790a:	480d      	ldr	r0, [pc, #52]	; (8007940 <MX_USART3_UART_Init+0x90>)
 800790c:	f7ff fda0 	bl	8007450 <HAL_UARTEx_SetTxFifoThreshold>
 8007910:	4603      	mov	r3, r0
 8007912:	2b00      	cmp	r3, #0
 8007914:	d001      	beq.n	800791a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8007916:	f000 f8bd 	bl	8007a94 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800791a:	2100      	movs	r1, #0
 800791c:	4808      	ldr	r0, [pc, #32]	; (8007940 <MX_USART3_UART_Init+0x90>)
 800791e:	f7ff fdd5 	bl	80074cc <HAL_UARTEx_SetRxFifoThreshold>
 8007922:	4603      	mov	r3, r0
 8007924:	2b00      	cmp	r3, #0
 8007926:	d001      	beq.n	800792c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8007928:	f000 f8b4 	bl	8007a94 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800792c:	4804      	ldr	r0, [pc, #16]	; (8007940 <MX_USART3_UART_Init+0x90>)
 800792e:	f7ff fd56 	bl	80073de <HAL_UARTEx_DisableFifoMode>
 8007932:	4603      	mov	r3, r0
 8007934:	2b00      	cmp	r3, #0
 8007936:	d001      	beq.n	800793c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8007938:	f000 f8ac 	bl	8007a94 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800793c:	bf00      	nop
 800793e:	bd80      	pop	{r7, pc}
 8007940:	24000544 	.word	0x24000544
 8007944:	40004800 	.word	0x40004800

08007948 <MX_BDMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_BDMA_Init(void)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b082      	sub	sp, #8
 800794c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 800794e:	4b11      	ldr	r3, [pc, #68]	; (8007994 <MX_BDMA_Init+0x4c>)
 8007950:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007954:	4a0f      	ldr	r2, [pc, #60]	; (8007994 <MX_BDMA_Init+0x4c>)
 8007956:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800795a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800795e:	4b0d      	ldr	r3, [pc, #52]	; (8007994 <MX_BDMA_Init+0x4c>)
 8007960:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007964:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007968:	607b      	str	r3, [r7, #4]
 800796a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMAMUX2_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX2_OVR_IRQn, 0, 0);
 800796c:	2200      	movs	r2, #0
 800796e:	2100      	movs	r1, #0
 8007970:	2080      	movs	r0, #128	; 0x80
 8007972:	f7f9 f85a 	bl	8000a2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX2_OVR_IRQn);
 8007976:	2080      	movs	r0, #128	; 0x80
 8007978:	f7f9 f871 	bl	8000a5e <HAL_NVIC_EnableIRQ>
  /* BDMA_Channel0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 0, 0);
 800797c:	2200      	movs	r2, #0
 800797e:	2100      	movs	r1, #0
 8007980:	2081      	movs	r0, #129	; 0x81
 8007982:	f7f9 f852 	bl	8000a2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
 8007986:	2081      	movs	r0, #129	; 0x81
 8007988:	f7f9 f869 	bl	8000a5e <HAL_NVIC_EnableIRQ>

}
 800798c:	bf00      	nop
 800798e:	3708      	adds	r7, #8
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}
 8007994:	58024400 	.word	0x58024400

08007998 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b082      	sub	sp, #8
 800799c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800799e:	4b11      	ldr	r3, [pc, #68]	; (80079e4 <MX_DMA_Init+0x4c>)
 80079a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80079a4:	4a0f      	ldr	r2, [pc, #60]	; (80079e4 <MX_DMA_Init+0x4c>)
 80079a6:	f043 0301 	orr.w	r3, r3, #1
 80079aa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80079ae:	4b0d      	ldr	r3, [pc, #52]	; (80079e4 <MX_DMA_Init+0x4c>)
 80079b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80079b4:	f003 0301 	and.w	r3, r3, #1
 80079b8:	607b      	str	r3, [r7, #4]
 80079ba:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80079bc:	2200      	movs	r2, #0
 80079be:	2100      	movs	r1, #0
 80079c0:	200c      	movs	r0, #12
 80079c2:	f7f9 f832 	bl	8000a2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80079c6:	200c      	movs	r0, #12
 80079c8:	f7f9 f849 	bl	8000a5e <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 0, 0);
 80079cc:	2200      	movs	r2, #0
 80079ce:	2100      	movs	r1, #0
 80079d0:	2066      	movs	r0, #102	; 0x66
 80079d2:	f7f9 f82a 	bl	8000a2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
 80079d6:	2066      	movs	r0, #102	; 0x66
 80079d8:	f7f9 f841 	bl	8000a5e <HAL_NVIC_EnableIRQ>

}
 80079dc:	bf00      	nop
 80079de:	3708      	adds	r7, #8
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}
 80079e4:	58024400 	.word	0x58024400

080079e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b087      	sub	sp, #28
 80079ec:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80079ee:	4b28      	ldr	r3, [pc, #160]	; (8007a90 <MX_GPIO_Init+0xa8>)
 80079f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80079f4:	4a26      	ldr	r2, [pc, #152]	; (8007a90 <MX_GPIO_Init+0xa8>)
 80079f6:	f043 0301 	orr.w	r3, r3, #1
 80079fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80079fe:	4b24      	ldr	r3, [pc, #144]	; (8007a90 <MX_GPIO_Init+0xa8>)
 8007a00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007a04:	f003 0301 	and.w	r3, r3, #1
 8007a08:	617b      	str	r3, [r7, #20]
 8007a0a:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8007a0c:	4b20      	ldr	r3, [pc, #128]	; (8007a90 <MX_GPIO_Init+0xa8>)
 8007a0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007a12:	4a1f      	ldr	r2, [pc, #124]	; (8007a90 <MX_GPIO_Init+0xa8>)
 8007a14:	f043 0310 	orr.w	r3, r3, #16
 8007a18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007a1c:	4b1c      	ldr	r3, [pc, #112]	; (8007a90 <MX_GPIO_Init+0xa8>)
 8007a1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007a22:	f003 0310 	and.w	r3, r3, #16
 8007a26:	613b      	str	r3, [r7, #16]
 8007a28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007a2a:	4b19      	ldr	r3, [pc, #100]	; (8007a90 <MX_GPIO_Init+0xa8>)
 8007a2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007a30:	4a17      	ldr	r2, [pc, #92]	; (8007a90 <MX_GPIO_Init+0xa8>)
 8007a32:	f043 0304 	orr.w	r3, r3, #4
 8007a36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007a3a:	4b15      	ldr	r3, [pc, #84]	; (8007a90 <MX_GPIO_Init+0xa8>)
 8007a3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007a40:	f003 0304 	and.w	r3, r3, #4
 8007a44:	60fb      	str	r3, [r7, #12]
 8007a46:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007a48:	4b11      	ldr	r3, [pc, #68]	; (8007a90 <MX_GPIO_Init+0xa8>)
 8007a4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007a4e:	4a10      	ldr	r2, [pc, #64]	; (8007a90 <MX_GPIO_Init+0xa8>)
 8007a50:	f043 0308 	orr.w	r3, r3, #8
 8007a54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007a58:	4b0d      	ldr	r3, [pc, #52]	; (8007a90 <MX_GPIO_Init+0xa8>)
 8007a5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007a5e:	f003 0308 	and.w	r3, r3, #8
 8007a62:	60bb      	str	r3, [r7, #8]
 8007a64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8007a66:	4b0a      	ldr	r3, [pc, #40]	; (8007a90 <MX_GPIO_Init+0xa8>)
 8007a68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007a6c:	4a08      	ldr	r2, [pc, #32]	; (8007a90 <MX_GPIO_Init+0xa8>)
 8007a6e:	f043 0320 	orr.w	r3, r3, #32
 8007a72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007a76:	4b06      	ldr	r3, [pc, #24]	; (8007a90 <MX_GPIO_Init+0xa8>)
 8007a78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007a7c:	f003 0320 	and.w	r3, r3, #32
 8007a80:	607b      	str	r3, [r7, #4]
 8007a82:	687b      	ldr	r3, [r7, #4]

}
 8007a84:	bf00      	nop
 8007a86:	371c      	adds	r7, #28
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8e:	4770      	bx	lr
 8007a90:	58024400 	.word	0x58024400

08007a94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007a94:	b480      	push	{r7}
 8007a96:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8007a98:	b672      	cpsid	i
}
 8007a9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007a9c:	e7fe      	b.n	8007a9c <Error_Handler+0x8>
	...

08007aa0 <MX_PDM2PCM_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* PDM2PCM init function */
void MX_PDM2PCM_Init(void)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

   /**
  */
  PDM1_filter_handler.bit_order = PDM_FILTER_BIT_ORDER_LSB;
 8007aa4:	4b10      	ldr	r3, [pc, #64]	; (8007ae8 <MX_PDM2PCM_Init+0x48>)
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	801a      	strh	r2, [r3, #0]
  PDM1_filter_handler.endianness = PDM_FILTER_ENDIANNESS_BE;
 8007aaa:	4b0f      	ldr	r3, [pc, #60]	; (8007ae8 <MX_PDM2PCM_Init+0x48>)
 8007aac:	2201      	movs	r2, #1
 8007aae:	805a      	strh	r2, [r3, #2]
  PDM1_filter_handler.high_pass_tap = 2104533974;
 8007ab0:	4b0d      	ldr	r3, [pc, #52]	; (8007ae8 <MX_PDM2PCM_Init+0x48>)
 8007ab2:	4a0e      	ldr	r2, [pc, #56]	; (8007aec <MX_PDM2PCM_Init+0x4c>)
 8007ab4:	605a      	str	r2, [r3, #4]
  PDM1_filter_handler.in_ptr_channels = 2;
 8007ab6:	4b0c      	ldr	r3, [pc, #48]	; (8007ae8 <MX_PDM2PCM_Init+0x48>)
 8007ab8:	2202      	movs	r2, #2
 8007aba:	811a      	strh	r2, [r3, #8]
  PDM1_filter_handler.out_ptr_channels = 2;
 8007abc:	4b0a      	ldr	r3, [pc, #40]	; (8007ae8 <MX_PDM2PCM_Init+0x48>)
 8007abe:	2202      	movs	r2, #2
 8007ac0:	815a      	strh	r2, [r3, #10]
  PDM_Filter_Init(&PDM1_filter_handler);
 8007ac2:	4809      	ldr	r0, [pc, #36]	; (8007ae8 <MX_PDM2PCM_Init+0x48>)
 8007ac4:	f002 f808 	bl	8009ad8 <PDM_Filter_Init>

  PDM1_filter_config.decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 8007ac8:	4b09      	ldr	r3, [pc, #36]	; (8007af0 <MX_PDM2PCM_Init+0x50>)
 8007aca:	2202      	movs	r2, #2
 8007acc:	801a      	strh	r2, [r3, #0]
  PDM1_filter_config.output_samples_number = 16;
 8007ace:	4b08      	ldr	r3, [pc, #32]	; (8007af0 <MX_PDM2PCM_Init+0x50>)
 8007ad0:	2210      	movs	r2, #16
 8007ad2:	805a      	strh	r2, [r3, #2]
  PDM1_filter_config.mic_gain = 0;
 8007ad4:	4b06      	ldr	r3, [pc, #24]	; (8007af0 <MX_PDM2PCM_Init+0x50>)
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	809a      	strh	r2, [r3, #4]
  PDM_Filter_setConfig(&PDM1_filter_handler, &PDM1_filter_config);
 8007ada:	4905      	ldr	r1, [pc, #20]	; (8007af0 <MX_PDM2PCM_Init+0x50>)
 8007adc:	4802      	ldr	r0, [pc, #8]	; (8007ae8 <MX_PDM2PCM_Init+0x48>)
 8007ade:	f002 f8cb 	bl	8009c78 <PDM_Filter_setConfig>

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 8007ae2:	bf00      	nop
 8007ae4:	bd80      	pop	{r7, pc}
 8007ae6:	bf00      	nop
 8007ae8:	2400086c 	.word	0x2400086c
 8007aec:	7d70a3d6 	.word	0x7d70a3d6
 8007af0:	24000864 	.word	0x24000864

08007af4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b083      	sub	sp, #12
 8007af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007afa:	4b0a      	ldr	r3, [pc, #40]	; (8007b24 <HAL_MspInit+0x30>)
 8007afc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007b00:	4a08      	ldr	r2, [pc, #32]	; (8007b24 <HAL_MspInit+0x30>)
 8007b02:	f043 0302 	orr.w	r3, r3, #2
 8007b06:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007b0a:	4b06      	ldr	r3, [pc, #24]	; (8007b24 <HAL_MspInit+0x30>)
 8007b0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007b10:	f003 0302 	and.w	r3, r3, #2
 8007b14:	607b      	str	r3, [r7, #4]
 8007b16:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007b18:	bf00      	nop
 8007b1a:	370c      	adds	r7, #12
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr
 8007b24:	58024400 	.word	0x58024400

08007b28 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b085      	sub	sp, #20
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4a0b      	ldr	r2, [pc, #44]	; (8007b64 <HAL_CRC_MspInit+0x3c>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d10e      	bne.n	8007b58 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8007b3a:	4b0b      	ldr	r3, [pc, #44]	; (8007b68 <HAL_CRC_MspInit+0x40>)
 8007b3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007b40:	4a09      	ldr	r2, [pc, #36]	; (8007b68 <HAL_CRC_MspInit+0x40>)
 8007b42:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007b46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007b4a:	4b07      	ldr	r3, [pc, #28]	; (8007b68 <HAL_CRC_MspInit+0x40>)
 8007b4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007b50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007b54:	60fb      	str	r3, [r7, #12]
 8007b56:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8007b58:	bf00      	nop
 8007b5a:	3714      	adds	r7, #20
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b62:	4770      	bx	lr
 8007b64:	58024c00 	.word	0x58024c00
 8007b68:	58024400 	.word	0x58024400

08007b6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b0b6      	sub	sp, #216	; 0xd8
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b74:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007b78:	2200      	movs	r2, #0
 8007b7a:	601a      	str	r2, [r3, #0]
 8007b7c:	605a      	str	r2, [r3, #4]
 8007b7e:	609a      	str	r2, [r3, #8]
 8007b80:	60da      	str	r2, [r3, #12]
 8007b82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007b84:	f107 0310 	add.w	r3, r7, #16
 8007b88:	22b4      	movs	r2, #180	; 0xb4
 8007b8a:	2100      	movs	r1, #0
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f002 f997 	bl	8009ec0 <memset>
  if(huart->Instance==USART3)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	4a25      	ldr	r2, [pc, #148]	; (8007c2c <HAL_UART_MspInit+0xc0>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d142      	bne.n	8007c22 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8007b9c:	2302      	movs	r3, #2
 8007b9e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007ba6:	f107 0310 	add.w	r3, r7, #16
 8007baa:	4618      	mov	r0, r3
 8007bac:	f7fb ff6e 	bl	8003a8c <HAL_RCCEx_PeriphCLKConfig>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d001      	beq.n	8007bba <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8007bb6:	f7ff ff6d 	bl	8007a94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8007bba:	4b1d      	ldr	r3, [pc, #116]	; (8007c30 <HAL_UART_MspInit+0xc4>)
 8007bbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007bc0:	4a1b      	ldr	r2, [pc, #108]	; (8007c30 <HAL_UART_MspInit+0xc4>)
 8007bc2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007bc6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8007bca:	4b19      	ldr	r3, [pc, #100]	; (8007c30 <HAL_UART_MspInit+0xc4>)
 8007bcc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007bd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007bd4:	60fb      	str	r3, [r7, #12]
 8007bd6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007bd8:	4b15      	ldr	r3, [pc, #84]	; (8007c30 <HAL_UART_MspInit+0xc4>)
 8007bda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007bde:	4a14      	ldr	r2, [pc, #80]	; (8007c30 <HAL_UART_MspInit+0xc4>)
 8007be0:	f043 0304 	orr.w	r3, r3, #4
 8007be4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007be8:	4b11      	ldr	r3, [pc, #68]	; (8007c30 <HAL_UART_MspInit+0xc4>)
 8007bea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007bee:	f003 0304 	and.w	r3, r3, #4
 8007bf2:	60bb      	str	r3, [r7, #8]
 8007bf4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PC11     ------> USART3_RX
    PC10     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8007bf6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007bfa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007bfe:	2302      	movs	r3, #2
 8007c00:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c04:	2300      	movs	r3, #0
 8007c06:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8007c10:	2307      	movs	r3, #7
 8007c12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007c16:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007c1a:	4619      	mov	r1, r3
 8007c1c:	4805      	ldr	r0, [pc, #20]	; (8007c34 <HAL_UART_MspInit+0xc8>)
 8007c1e:	f7fa fdfb 	bl	8002818 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8007c22:	bf00      	nop
 8007c24:	37d8      	adds	r7, #216	; 0xd8
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}
 8007c2a:	bf00      	nop
 8007c2c:	40004800 	.word	0x40004800
 8007c30:	58024400 	.word	0x58024400
 8007c34:	58020800 	.word	0x58020800

08007c38 <HAL_SAI_MspInit>:

static uint32_t SAI1_client =0;
static uint32_t SAI4_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b0ba      	sub	sp, #232	; 0xe8
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007c40:	f107 0310 	add.w	r3, r7, #16
 8007c44:	22b4      	movs	r2, #180	; 0xb4
 8007c46:	2100      	movs	r1, #0
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f002 f939 	bl	8009ec0 <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_B)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	4aaa      	ldr	r2, [pc, #680]	; (8007efc <HAL_SAI_MspInit+0x2c4>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	f040 80a5 	bne.w	8007da4 <HAL_SAI_MspInit+0x16c>
    {
      /* Peripheral clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8007c5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007c5e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 8007c60:	2300      	movs	r3, #0
 8007c62:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007c64:	f107 0310 	add.w	r3, r7, #16
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f7fb ff0f 	bl	8003a8c <HAL_RCCEx_PeriphCLKConfig>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d001      	beq.n	8007c78 <HAL_SAI_MspInit+0x40>
    {
      Error_Handler();
 8007c74:	f7ff ff0e 	bl	8007a94 <Error_Handler>
    }

      if (SAI1_client == 0)
 8007c78:	4ba1      	ldr	r3, [pc, #644]	; (8007f00 <HAL_SAI_MspInit+0x2c8>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d10e      	bne.n	8007c9e <HAL_SAI_MspInit+0x66>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8007c80:	4ba0      	ldr	r3, [pc, #640]	; (8007f04 <HAL_SAI_MspInit+0x2cc>)
 8007c82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007c86:	4a9f      	ldr	r2, [pc, #636]	; (8007f04 <HAL_SAI_MspInit+0x2cc>)
 8007c88:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007c8c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8007c90:	4b9c      	ldr	r3, [pc, #624]	; (8007f04 <HAL_SAI_MspInit+0x2cc>)
 8007c92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007c96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c9a:	60fb      	str	r3, [r7, #12]
 8007c9c:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8007c9e:	4b98      	ldr	r3, [pc, #608]	; (8007f00 <HAL_SAI_MspInit+0x2c8>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	4a96      	ldr	r2, [pc, #600]	; (8007f00 <HAL_SAI_MspInit+0x2c8>)
 8007ca6:	6013      	str	r3, [r2, #0]
    PE3     ------> SAI1_SD_B
    PF8     ------> SAI1_SCK_B
    PF7     ------> SAI1_MCLK_B
    PF9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8007ca8:	2308      	movs	r3, #8
 8007caa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007cae:	2302      	movs	r3, #2
 8007cb0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8007cc0:	2306      	movs	r3, #6
 8007cc2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007cc6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8007cca:	4619      	mov	r1, r3
 8007ccc:	488e      	ldr	r0, [pc, #568]	; (8007f08 <HAL_SAI_MspInit+0x2d0>)
 8007cce:	f7fa fda3 	bl	8002818 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_9;
 8007cd2:	f44f 7360 	mov.w	r3, #896	; 0x380
 8007cd6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007cda:	2302      	movs	r3, #2
 8007cdc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8007cec:	2306      	movs	r3, #6
 8007cee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007cf2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8007cf6:	4619      	mov	r1, r3
 8007cf8:	4884      	ldr	r0, [pc, #528]	; (8007f0c <HAL_SAI_MspInit+0x2d4>)
 8007cfa:	f7fa fd8d 	bl	8002818 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai_B1.Instance = DMA1_Stream1;
 8007cfe:	4b84      	ldr	r3, [pc, #528]	; (8007f10 <HAL_SAI_MspInit+0x2d8>)
 8007d00:	4a84      	ldr	r2, [pc, #528]	; (8007f14 <HAL_SAI_MspInit+0x2dc>)
 8007d02:	601a      	str	r2, [r3, #0]
    hdma_sai_B1.Init.Request = DMA_REQUEST_SAI1_B;
 8007d04:	4b82      	ldr	r3, [pc, #520]	; (8007f10 <HAL_SAI_MspInit+0x2d8>)
 8007d06:	2258      	movs	r2, #88	; 0x58
 8007d08:	605a      	str	r2, [r3, #4]
    hdma_sai_B1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007d0a:	4b81      	ldr	r3, [pc, #516]	; (8007f10 <HAL_SAI_MspInit+0x2d8>)
 8007d0c:	2240      	movs	r2, #64	; 0x40
 8007d0e:	609a      	str	r2, [r3, #8]
    hdma_sai_B1.Init.PeriphInc = DMA_PINC_DISABLE;
 8007d10:	4b7f      	ldr	r3, [pc, #508]	; (8007f10 <HAL_SAI_MspInit+0x2d8>)
 8007d12:	2200      	movs	r2, #0
 8007d14:	60da      	str	r2, [r3, #12]
    hdma_sai_B1.Init.MemInc = DMA_MINC_ENABLE;
 8007d16:	4b7e      	ldr	r3, [pc, #504]	; (8007f10 <HAL_SAI_MspInit+0x2d8>)
 8007d18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007d1c:	611a      	str	r2, [r3, #16]
    hdma_sai_B1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007d1e:	4b7c      	ldr	r3, [pc, #496]	; (8007f10 <HAL_SAI_MspInit+0x2d8>)
 8007d20:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007d24:	615a      	str	r2, [r3, #20]
    hdma_sai_B1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007d26:	4b7a      	ldr	r3, [pc, #488]	; (8007f10 <HAL_SAI_MspInit+0x2d8>)
 8007d28:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007d2c:	619a      	str	r2, [r3, #24]
    hdma_sai_B1.Init.Mode = DMA_CIRCULAR;
 8007d2e:	4b78      	ldr	r3, [pc, #480]	; (8007f10 <HAL_SAI_MspInit+0x2d8>)
 8007d30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007d34:	61da      	str	r2, [r3, #28]
    hdma_sai_B1.Init.Priority = DMA_PRIORITY_HIGH;
 8007d36:	4b76      	ldr	r3, [pc, #472]	; (8007f10 <HAL_SAI_MspInit+0x2d8>)
 8007d38:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007d3c:	621a      	str	r2, [r3, #32]
    hdma_sai_B1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007d3e:	4b74      	ldr	r3, [pc, #464]	; (8007f10 <HAL_SAI_MspInit+0x2d8>)
 8007d40:	2200      	movs	r2, #0
 8007d42:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai_B1) != HAL_OK)
 8007d44:	4872      	ldr	r0, [pc, #456]	; (8007f10 <HAL_SAI_MspInit+0x2d8>)
 8007d46:	f7f8 ff8f 	bl	8000c68 <HAL_DMA_Init>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d001      	beq.n	8007d54 <HAL_SAI_MspInit+0x11c>
    {
      Error_Handler();
 8007d50:	f7ff fea0 	bl	8007a94 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 8007d54:	2306      	movs	r3, #6
 8007d56:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    pSyncConfig.SyncEnable = DISABLE;
 8007d60:	2300      	movs	r3, #0
 8007d62:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    pSyncConfig.EventEnable = ENABLE;
 8007d66:	2301      	movs	r3, #1
 8007d68:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    pSyncConfig.RequestNumber = 1;
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai_B1, &pSyncConfig) != HAL_OK)
 8007d72:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007d76:	4619      	mov	r1, r3
 8007d78:	4865      	ldr	r0, [pc, #404]	; (8007f10 <HAL_SAI_MspInit+0x2d8>)
 8007d7a:	f7fa fc35 	bl	80025e8 <HAL_DMAEx_ConfigMuxSync>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d001      	beq.n	8007d88 <HAL_SAI_MspInit+0x150>
    {
      Error_Handler();
 8007d84:	f7ff fe86 	bl	8007a94 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai_B1);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	4a61      	ldr	r2, [pc, #388]	; (8007f10 <HAL_SAI_MspInit+0x2d8>)
 8007d8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8007d90:	4a5f      	ldr	r2, [pc, #380]	; (8007f10 <HAL_SAI_MspInit+0x2d8>)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai_B1);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	4a5d      	ldr	r2, [pc, #372]	; (8007f10 <HAL_SAI_MspInit+0x2d8>)
 8007d9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8007d9e:	4a5c      	ldr	r2, [pc, #368]	; (8007f10 <HAL_SAI_MspInit+0x2d8>)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6393      	str	r3, [r2, #56]	; 0x38
    }
/* SAI4 */
    if(hsai->Instance==SAI4_Block_A)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4a5b      	ldr	r2, [pc, #364]	; (8007f18 <HAL_SAI_MspInit+0x2e0>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	f040 80a2 	bne.w	8007ef4 <HAL_SAI_MspInit+0x2bc>
    {
    /* Peripheral clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI4A;
 8007db0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007db4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Sai4AClockSelection = RCC_SAI4ACLKSOURCE_PLL;
 8007db6:	2300      	movs	r3, #0
 8007db8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007dbc:	f107 0310 	add.w	r3, r7, #16
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	f7fb fe63 	bl	8003a8c <HAL_RCCEx_PeriphCLKConfig>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d001      	beq.n	8007dd0 <HAL_SAI_MspInit+0x198>
    {
      Error_Handler();
 8007dcc:	f7ff fe62 	bl	8007a94 <Error_Handler>
    }

    if (SAI4_client == 0)
 8007dd0:	4b52      	ldr	r3, [pc, #328]	; (8007f1c <HAL_SAI_MspInit+0x2e4>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d10e      	bne.n	8007df6 <HAL_SAI_MspInit+0x1be>
    {
       __HAL_RCC_SAI4_CLK_ENABLE();
 8007dd8:	4b4a      	ldr	r3, [pc, #296]	; (8007f04 <HAL_SAI_MspInit+0x2cc>)
 8007dda:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007dde:	4a49      	ldr	r2, [pc, #292]	; (8007f04 <HAL_SAI_MspInit+0x2cc>)
 8007de0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007de4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007de8:	4b46      	ldr	r3, [pc, #280]	; (8007f04 <HAL_SAI_MspInit+0x2cc>)
 8007dea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007dee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007df2:	60bb      	str	r3, [r7, #8]
 8007df4:	68bb      	ldr	r3, [r7, #8]
    }
    SAI4_client ++;
 8007df6:	4b49      	ldr	r3, [pc, #292]	; (8007f1c <HAL_SAI_MspInit+0x2e4>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	3301      	adds	r3, #1
 8007dfc:	4a47      	ldr	r2, [pc, #284]	; (8007f1c <HAL_SAI_MspInit+0x2e4>)
 8007dfe:	6013      	str	r3, [r2, #0]
    /**SAI4_A_Block_A GPIO Configuration
    PE4     ------> SAI4_D2
    PE5     ------> SAI4_CK2
    PD6     ------> SAI4_D1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8007e00:	2330      	movs	r3, #48	; 0x30
 8007e02:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e06:	2302      	movs	r3, #2
 8007e08:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e12:	2300      	movs	r3, #0
 8007e14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 8007e18:	230a      	movs	r3, #10
 8007e1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007e1e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8007e22:	4619      	mov	r1, r3
 8007e24:	4838      	ldr	r0, [pc, #224]	; (8007f08 <HAL_SAI_MspInit+0x2d0>)
 8007e26:	f7fa fcf7 	bl	8002818 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8007e2a:	2340      	movs	r3, #64	; 0x40
 8007e2c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e30:	2302      	movs	r3, #2
 8007e32:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e36:	2300      	movs	r3, #0
 8007e38:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF1_SAI4;
 8007e42:	2301      	movs	r3, #1
 8007e44:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007e48:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8007e4c:	4619      	mov	r1, r3
 8007e4e:	4834      	ldr	r0, [pc, #208]	; (8007f20 <HAL_SAI_MspInit+0x2e8>)
 8007e50:	f7fa fce2 	bl	8002818 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai_A4.Instance = BDMA_Channel0;
 8007e54:	4b33      	ldr	r3, [pc, #204]	; (8007f24 <HAL_SAI_MspInit+0x2ec>)
 8007e56:	4a34      	ldr	r2, [pc, #208]	; (8007f28 <HAL_SAI_MspInit+0x2f0>)
 8007e58:	601a      	str	r2, [r3, #0]
    hdma_sai_A4.Init.Request = BDMA_REQUEST_SAI4_A;
 8007e5a:	4b32      	ldr	r3, [pc, #200]	; (8007f24 <HAL_SAI_MspInit+0x2ec>)
 8007e5c:	220f      	movs	r2, #15
 8007e5e:	605a      	str	r2, [r3, #4]
    hdma_sai_A4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007e60:	4b30      	ldr	r3, [pc, #192]	; (8007f24 <HAL_SAI_MspInit+0x2ec>)
 8007e62:	2200      	movs	r2, #0
 8007e64:	609a      	str	r2, [r3, #8]
    hdma_sai_A4.Init.PeriphInc = DMA_PINC_DISABLE;
 8007e66:	4b2f      	ldr	r3, [pc, #188]	; (8007f24 <HAL_SAI_MspInit+0x2ec>)
 8007e68:	2200      	movs	r2, #0
 8007e6a:	60da      	str	r2, [r3, #12]
    hdma_sai_A4.Init.MemInc = DMA_MINC_ENABLE;
 8007e6c:	4b2d      	ldr	r3, [pc, #180]	; (8007f24 <HAL_SAI_MspInit+0x2ec>)
 8007e6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007e72:	611a      	str	r2, [r3, #16]
    hdma_sai_A4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007e74:	4b2b      	ldr	r3, [pc, #172]	; (8007f24 <HAL_SAI_MspInit+0x2ec>)
 8007e76:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007e7a:	615a      	str	r2, [r3, #20]
    hdma_sai_A4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007e7c:	4b29      	ldr	r3, [pc, #164]	; (8007f24 <HAL_SAI_MspInit+0x2ec>)
 8007e7e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007e82:	619a      	str	r2, [r3, #24]
    hdma_sai_A4.Init.Mode = DMA_CIRCULAR;
 8007e84:	4b27      	ldr	r3, [pc, #156]	; (8007f24 <HAL_SAI_MspInit+0x2ec>)
 8007e86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007e8a:	61da      	str	r2, [r3, #28]
    hdma_sai_A4.Init.Priority = DMA_PRIORITY_HIGH;
 8007e8c:	4b25      	ldr	r3, [pc, #148]	; (8007f24 <HAL_SAI_MspInit+0x2ec>)
 8007e8e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007e92:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai_A4) != HAL_OK)
 8007e94:	4823      	ldr	r0, [pc, #140]	; (8007f24 <HAL_SAI_MspInit+0x2ec>)
 8007e96:	f7f8 fee7 	bl	8000c68 <HAL_DMA_Init>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d001      	beq.n	8007ea4 <HAL_SAI_MspInit+0x26c>
    {
      Error_Handler();
 8007ea0:	f7ff fdf8 	bl	8007a94 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX2_SYNC_EXTI0;
 8007ea4:	230e      	movs	r3, #14
 8007ea6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    pSyncConfig.SyncEnable = DISABLE;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    pSyncConfig.EventEnable = ENABLE;
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    pSyncConfig.RequestNumber = 1;
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai_A4, &pSyncConfig) != HAL_OK)
 8007ec2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007ec6:	4619      	mov	r1, r3
 8007ec8:	4816      	ldr	r0, [pc, #88]	; (8007f24 <HAL_SAI_MspInit+0x2ec>)
 8007eca:	f7fa fb8d 	bl	80025e8 <HAL_DMAEx_ConfigMuxSync>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d001      	beq.n	8007ed8 <HAL_SAI_MspInit+0x2a0>
    {
      Error_Handler();
 8007ed4:	f7ff fdde 	bl	8007a94 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai_A4);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	4a12      	ldr	r2, [pc, #72]	; (8007f24 <HAL_SAI_MspInit+0x2ec>)
 8007edc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8007ee0:	4a10      	ldr	r2, [pc, #64]	; (8007f24 <HAL_SAI_MspInit+0x2ec>)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai_A4);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	4a0e      	ldr	r2, [pc, #56]	; (8007f24 <HAL_SAI_MspInit+0x2ec>)
 8007eea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8007eee:	4a0d      	ldr	r2, [pc, #52]	; (8007f24 <HAL_SAI_MspInit+0x2ec>)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6393      	str	r3, [r2, #56]	; 0x38

    }
}
 8007ef4:	bf00      	nop
 8007ef6:	37e8      	adds	r7, #232	; 0xe8
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}
 8007efc:	40015824 	.word	0x40015824
 8007f00:	24000538 	.word	0x24000538
 8007f04:	58024400 	.word	0x58024400
 8007f08:	58021000 	.word	0x58021000
 8007f0c:	58021400 	.word	0x58021400
 8007f10:	24000728 	.word	0x24000728
 8007f14:	40020028 	.word	0x40020028
 8007f18:	58005404 	.word	0x58005404
 8007f1c:	2400053c 	.word	0x2400053c
 8007f20:	58020c00 	.word	0x58020c00
 8007f24:	240007a0 	.word	0x240007a0
 8007f28:	58025408 	.word	0x58025408

08007f2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007f30:	e7fe      	b.n	8007f30 <NMI_Handler+0x4>

08007f32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007f32:	b480      	push	{r7}
 8007f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007f36:	e7fe      	b.n	8007f36 <HardFault_Handler+0x4>

08007f38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007f3c:	e7fe      	b.n	8007f3c <MemManage_Handler+0x4>

08007f3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007f3e:	b480      	push	{r7}
 8007f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007f42:	e7fe      	b.n	8007f42 <BusFault_Handler+0x4>

08007f44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007f44:	b480      	push	{r7}
 8007f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007f48:	e7fe      	b.n	8007f48 <UsageFault_Handler+0x4>

08007f4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007f4a:	b480      	push	{r7}
 8007f4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007f4e:	bf00      	nop
 8007f50:	46bd      	mov	sp, r7
 8007f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f56:	4770      	bx	lr

08007f58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007f5c:	bf00      	nop
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f64:	4770      	bx	lr

08007f66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007f66:	b480      	push	{r7}
 8007f68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007f6a:	bf00      	nop
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f72:	4770      	bx	lr

08007f74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007f78:	f7f8 fc5c 	bl	8000834 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007f7c:	bf00      	nop
 8007f7e:	bd80      	pop	{r7, pc}

08007f80 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai_B1);
 8007f84:	4802      	ldr	r0, [pc, #8]	; (8007f90 <DMA1_Stream1_IRQHandler+0x10>)
 8007f86:	f7f9 f9c9 	bl	800131c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8007f8a:	bf00      	nop
 8007f8c:	bd80      	pop	{r7, pc}
 8007f8e:	bf00      	nop
 8007f90:	24000728 	.word	0x24000728

08007f94 <DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX1 overrun interrupt.
  */
void DMAMUX1_OVR_IRQHandler(void)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMAMUX1_OVR_IRQn 0 */
  // Handle DMA1_Stream1
  HAL_DMAEx_MUX_IRQHandler(&hdma_sai_B1);
 8007f98:	4802      	ldr	r0, [pc, #8]	; (8007fa4 <DMAMUX1_OVR_IRQHandler+0x10>)
 8007f9a:	f7fa fbeb 	bl	8002774 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMAMUX1_OVR_IRQn 1 */
}
 8007f9e:	bf00      	nop
 8007fa0:	bd80      	pop	{r7, pc}
 8007fa2:	bf00      	nop
 8007fa4:	24000728 	.word	0x24000728

08007fa8 <DMAMUX2_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX2 overrun interrupt.
  */
void DMAMUX2_OVR_IRQHandler(void)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX2_OVR_IRQn 0 */

  /* USER CODE END DMAMUX2_OVR_IRQn 0 */
  // Handle BDMA_Channel0
  HAL_DMAEx_MUX_IRQHandler(&hdma_sai_A4);
 8007fac:	4802      	ldr	r0, [pc, #8]	; (8007fb8 <DMAMUX2_OVR_IRQHandler+0x10>)
 8007fae:	f7fa fbe1 	bl	8002774 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX2_OVR_IRQn 1 */

  /* USER CODE END DMAMUX2_OVR_IRQn 1 */
}
 8007fb2:	bf00      	nop
 8007fb4:	bd80      	pop	{r7, pc}
 8007fb6:	bf00      	nop
 8007fb8:	240007a0 	.word	0x240007a0

08007fbc <BDMA_Channel0_IRQHandler>:

/**
  * @brief This function handles BDMA channel0 global interrupt.
  */
void BDMA_Channel0_IRQHandler(void)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai_A4);
 8007fc0:	4802      	ldr	r0, [pc, #8]	; (8007fcc <BDMA_Channel0_IRQHandler+0x10>)
 8007fc2:	f7f9 f9ab 	bl	800131c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel0_IRQn 1 */

  /* USER CODE END BDMA_Channel0_IRQn 1 */
}
 8007fc6:	bf00      	nop
 8007fc8:	bd80      	pop	{r7, pc}
 8007fca:	bf00      	nop
 8007fcc:	240007a0 	.word	0x240007a0

08007fd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8007fd4:	4b32      	ldr	r3, [pc, #200]	; (80080a0 <SystemInit+0xd0>)
 8007fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fda:	4a31      	ldr	r2, [pc, #196]	; (80080a0 <SystemInit+0xd0>)
 8007fdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007fe0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8007fe4:	4b2f      	ldr	r3, [pc, #188]	; (80080a4 <SystemInit+0xd4>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f003 030f 	and.w	r3, r3, #15
 8007fec:	2b06      	cmp	r3, #6
 8007fee:	d807      	bhi.n	8008000 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8007ff0:	4b2c      	ldr	r3, [pc, #176]	; (80080a4 <SystemInit+0xd4>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f023 030f 	bic.w	r3, r3, #15
 8007ff8:	4a2a      	ldr	r2, [pc, #168]	; (80080a4 <SystemInit+0xd4>)
 8007ffa:	f043 0307 	orr.w	r3, r3, #7
 8007ffe:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8008000:	4b29      	ldr	r3, [pc, #164]	; (80080a8 <SystemInit+0xd8>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4a28      	ldr	r2, [pc, #160]	; (80080a8 <SystemInit+0xd8>)
 8008006:	f043 0301 	orr.w	r3, r3, #1
 800800a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800800c:	4b26      	ldr	r3, [pc, #152]	; (80080a8 <SystemInit+0xd8>)
 800800e:	2200      	movs	r2, #0
 8008010:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8008012:	4b25      	ldr	r3, [pc, #148]	; (80080a8 <SystemInit+0xd8>)
 8008014:	681a      	ldr	r2, [r3, #0]
 8008016:	4924      	ldr	r1, [pc, #144]	; (80080a8 <SystemInit+0xd8>)
 8008018:	4b24      	ldr	r3, [pc, #144]	; (80080ac <SystemInit+0xdc>)
 800801a:	4013      	ands	r3, r2
 800801c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800801e:	4b21      	ldr	r3, [pc, #132]	; (80080a4 <SystemInit+0xd4>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f003 0308 	and.w	r3, r3, #8
 8008026:	2b00      	cmp	r3, #0
 8008028:	d007      	beq.n	800803a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800802a:	4b1e      	ldr	r3, [pc, #120]	; (80080a4 <SystemInit+0xd4>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f023 030f 	bic.w	r3, r3, #15
 8008032:	4a1c      	ldr	r2, [pc, #112]	; (80080a4 <SystemInit+0xd4>)
 8008034:	f043 0307 	orr.w	r3, r3, #7
 8008038:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800803a:	4b1b      	ldr	r3, [pc, #108]	; (80080a8 <SystemInit+0xd8>)
 800803c:	2200      	movs	r2, #0
 800803e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8008040:	4b19      	ldr	r3, [pc, #100]	; (80080a8 <SystemInit+0xd8>)
 8008042:	2200      	movs	r2, #0
 8008044:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8008046:	4b18      	ldr	r3, [pc, #96]	; (80080a8 <SystemInit+0xd8>)
 8008048:	2200      	movs	r2, #0
 800804a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800804c:	4b16      	ldr	r3, [pc, #88]	; (80080a8 <SystemInit+0xd8>)
 800804e:	4a18      	ldr	r2, [pc, #96]	; (80080b0 <SystemInit+0xe0>)
 8008050:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8008052:	4b15      	ldr	r3, [pc, #84]	; (80080a8 <SystemInit+0xd8>)
 8008054:	4a17      	ldr	r2, [pc, #92]	; (80080b4 <SystemInit+0xe4>)
 8008056:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8008058:	4b13      	ldr	r3, [pc, #76]	; (80080a8 <SystemInit+0xd8>)
 800805a:	4a17      	ldr	r2, [pc, #92]	; (80080b8 <SystemInit+0xe8>)
 800805c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800805e:	4b12      	ldr	r3, [pc, #72]	; (80080a8 <SystemInit+0xd8>)
 8008060:	2200      	movs	r2, #0
 8008062:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8008064:	4b10      	ldr	r3, [pc, #64]	; (80080a8 <SystemInit+0xd8>)
 8008066:	4a14      	ldr	r2, [pc, #80]	; (80080b8 <SystemInit+0xe8>)
 8008068:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800806a:	4b0f      	ldr	r3, [pc, #60]	; (80080a8 <SystemInit+0xd8>)
 800806c:	2200      	movs	r2, #0
 800806e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8008070:	4b0d      	ldr	r3, [pc, #52]	; (80080a8 <SystemInit+0xd8>)
 8008072:	4a11      	ldr	r2, [pc, #68]	; (80080b8 <SystemInit+0xe8>)
 8008074:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8008076:	4b0c      	ldr	r3, [pc, #48]	; (80080a8 <SystemInit+0xd8>)
 8008078:	2200      	movs	r2, #0
 800807a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800807c:	4b0a      	ldr	r3, [pc, #40]	; (80080a8 <SystemInit+0xd8>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4a09      	ldr	r2, [pc, #36]	; (80080a8 <SystemInit+0xd8>)
 8008082:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008086:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8008088:	4b07      	ldr	r3, [pc, #28]	; (80080a8 <SystemInit+0xd8>)
 800808a:	2200      	movs	r2, #0
 800808c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800808e:	4b0b      	ldr	r3, [pc, #44]	; (80080bc <SystemInit+0xec>)
 8008090:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8008094:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8008096:	bf00      	nop
 8008098:	46bd      	mov	sp, r7
 800809a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809e:	4770      	bx	lr
 80080a0:	e000ed00 	.word	0xe000ed00
 80080a4:	52002000 	.word	0x52002000
 80080a8:	58024400 	.word	0x58024400
 80080ac:	eaf6ed7f 	.word	0xeaf6ed7f
 80080b0:	02020200 	.word	0x02020200
 80080b4:	01ff0000 	.word	0x01ff0000
 80080b8:	01010280 	.word	0x01010280
 80080bc:	52004000 	.word	0x52004000

080080c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80080c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80080f8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80080c4:	f7ff ff84 	bl	8007fd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80080c8:	480c      	ldr	r0, [pc, #48]	; (80080fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80080ca:	490d      	ldr	r1, [pc, #52]	; (8008100 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80080cc:	4a0d      	ldr	r2, [pc, #52]	; (8008104 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80080ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80080d0:	e002      	b.n	80080d8 <LoopCopyDataInit>

080080d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80080d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80080d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80080d6:	3304      	adds	r3, #4

080080d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80080d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80080da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80080dc:	d3f9      	bcc.n	80080d2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80080de:	4a0a      	ldr	r2, [pc, #40]	; (8008108 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80080e0:	4c0a      	ldr	r4, [pc, #40]	; (800810c <LoopFillZerobss+0x22>)
  movs r3, #0
 80080e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80080e4:	e001      	b.n	80080ea <LoopFillZerobss>

080080e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80080e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80080e8:	3204      	adds	r2, #4

080080ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80080ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80080ec:	d3fb      	bcc.n	80080e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80080ee:	f001 fec3 	bl	8009e78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80080f2:	f7ff fa77 	bl	80075e4 <main>
  bx  lr
 80080f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80080f8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80080fc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8008100:	24000474 	.word	0x24000474
  ldr r2, =_sidata
 8008104:	0800a568 	.word	0x0800a568
  ldr r2, =_sbss
 8008108:	24000474 	.word	0x24000474
  ldr r4, =_ebss
 800810c:	240008b8 	.word	0x240008b8

08008110 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008110:	e7fe      	b.n	8008110 <ADC3_IRQHandler>
	...

08008114 <D16_GENERIC>:
 8008114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008118:	b089      	sub	sp, #36	; 0x24
 800811a:	6993      	ldr	r3, [r2, #24]
 800811c:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800811e:	9103      	str	r1, [sp, #12]
 8008120:	9307      	str	r3, [sp, #28]
 8008122:	69d3      	ldr	r3, [r2, #28]
 8008124:	e9d2 c102 	ldrd	ip, r1, [r2, #8]
 8008128:	e9d2 4a04 	ldrd	r4, sl, [r2, #16]
 800812c:	9106      	str	r1, [sp, #24]
 800812e:	e9d2 810c 	ldrd	r8, r1, [r2, #48]	; 0x30
 8008132:	2d00      	cmp	r5, #0
 8008134:	d063      	beq.n	80081fe <D16_GENERIC+0xea>
 8008136:	f001 0520 	and.w	r5, r1, #32
 800813a:	f001 0110 	and.w	r1, r1, #16
 800813e:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 8008220 <D16_GENERIC+0x10c>
 8008142:	46c1      	mov	r9, r8
 8008144:	9104      	str	r1, [sp, #16]
 8008146:	2100      	movs	r1, #0
 8008148:	9505      	str	r5, [sp, #20]
 800814a:	e04d      	b.n	80081e8 <D16_GENERIC+0xd4>
 800814c:	5d87      	ldrb	r7, [r0, r6]
 800814e:	7805      	ldrb	r5, [r0, #0]
 8008150:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 8008154:	eb05 2707 	add.w	r7, r5, r7, lsl #8
 8008158:	b2fe      	uxtb	r6, r7
 800815a:	f3c7 2707 	ubfx	r7, r7, #8, #8
 800815e:	f85e 5026 	ldr.w	r5, [lr, r6, lsl #2]
 8008162:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
 8008166:	441d      	add	r5, r3
 8008168:	eb06 2395 	add.w	r3, r6, r5, lsr #10
 800816c:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8008170:	f3c3 0609 	ubfx	r6, r3, #0, #10
 8008174:	0a9b      	lsrs	r3, r3, #10
 8008176:	ea46 4605 	orr.w	r6, r6, r5, lsl #16
 800817a:	4d27      	ldr	r5, [pc, #156]	; (8008218 <D16_GENERIC+0x104>)
 800817c:	fb26 c505 	smlad	r5, r6, r5, ip
 8008180:	4f26      	ldr	r7, [pc, #152]	; (800821c <D16_GENERIC+0x108>)
 8008182:	fb26 fc07 	smuad	ip, r6, r7
 8008186:	9e04      	ldr	r6, [sp, #16]
 8008188:	f101 0801 	add.w	r8, r1, #1
 800818c:	f5a5 6500 	sub.w	r5, r5, #2048	; 0x800
 8008190:	b1ae      	cbz	r6, 80081be <D16_GENERIC+0xaa>
 8008192:	442c      	add	r4, r5
 8008194:	f8d2 b020 	ldr.w	fp, [r2, #32]
 8008198:	eba4 040a 	sub.w	r4, r4, sl
 800819c:	46aa      	mov	sl, r5
 800819e:	17e7      	asrs	r7, r4, #31
 80081a0:	fba4 450b 	umull	r4, r5, r4, fp
 80081a4:	e9cd 4500 	strd	r4, r5, [sp]
 80081a8:	fb0b 5407 	mla	r4, fp, r7, r5
 80081ac:	9401      	str	r4, [sp, #4]
 80081ae:	e9dd 4500 	ldrd	r4, r5, [sp]
 80081b2:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 80081b6:	f145 0500 	adc.w	r5, r5, #0
 80081ba:	006c      	lsls	r4, r5, #1
 80081bc:	4625      	mov	r5, r4
 80081be:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 80081c2:	042d      	lsls	r5, r5, #16
 80081c4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80081c8:	2700      	movs	r7, #0
 80081ca:	fb01 fb0b 	mul.w	fp, r1, fp
 80081ce:	fa1f f188 	uxth.w	r1, r8
 80081d2:	fbc9 6705 	smlal	r6, r7, r9, r5
 80081d6:	9e03      	ldr	r6, [sp, #12]
 80081d8:	10bd      	asrs	r5, r7, #2
 80081da:	f305 050f 	ssat	r5, #16, r5
 80081de:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 80081e2:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 80081e4:	428d      	cmp	r5, r1
 80081e6:	d90a      	bls.n	80081fe <D16_GENERIC+0xea>
 80081e8:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 80081ea:	2d01      	cmp	r5, #1
 80081ec:	b2ee      	uxtb	r6, r5
 80081ee:	d1ad      	bne.n	800814c <D16_GENERIC+0x38>
 80081f0:	9d05      	ldr	r5, [sp, #20]
 80081f2:	f850 7b02 	ldr.w	r7, [r0], #2
 80081f6:	2d00      	cmp	r5, #0
 80081f8:	d0ae      	beq.n	8008158 <D16_GENERIC+0x44>
 80081fa:	ba7f      	rev16	r7, r7
 80081fc:	e7ac      	b.n	8008158 <D16_GENERIC+0x44>
 80081fe:	2000      	movs	r0, #0
 8008200:	9906      	ldr	r1, [sp, #24]
 8008202:	61d3      	str	r3, [r2, #28]
 8008204:	9b07      	ldr	r3, [sp, #28]
 8008206:	f8c2 c008 	str.w	ip, [r2, #8]
 800820a:	60d1      	str	r1, [r2, #12]
 800820c:	6193      	str	r3, [r2, #24]
 800820e:	e9c2 4a04 	strd	r4, sl, [r2, #16]
 8008212:	b009      	add	sp, #36	; 0x24
 8008214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008218:	00030001 	.word	0x00030001
 800821c:	00010003 	.word	0x00010003
 8008220:	24000000 	.word	0x24000000

08008224 <D24_GENERIC>:
 8008224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008228:	e9d2 4304 	ldrd	r4, r3, [r2, #16]
 800822c:	b089      	sub	sp, #36	; 0x24
 800822e:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 8008230:	9303      	str	r3, [sp, #12]
 8008232:	6993      	ldr	r3, [r2, #24]
 8008234:	9104      	str	r1, [sp, #16]
 8008236:	9307      	str	r3, [sp, #28]
 8008238:	69d1      	ldr	r1, [r2, #28]
 800823a:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 800823e:	e9d2 a50c 	ldrd	sl, r5, [r2, #48]	; 0x30
 8008242:	2e00      	cmp	r6, #0
 8008244:	f000 8088 	beq.w	8008358 <D24_GENERIC+0x134>
 8008248:	f005 0620 	and.w	r6, r5, #32
 800824c:	f005 0510 	and.w	r5, r5, #16
 8008250:	f04f 0c00 	mov.w	ip, #0
 8008254:	f8df e140 	ldr.w	lr, [pc, #320]	; 8008398 <D24_GENERIC+0x174>
 8008258:	9606      	str	r6, [sp, #24]
 800825a:	9505      	str	r5, [sp, #20]
 800825c:	e064      	b.n	8008328 <D24_GENERIC+0x104>
 800825e:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 8008262:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8008266:	f810 b007 	ldrb.w	fp, [r0, r7]
 800826a:	042d      	lsls	r5, r5, #16
 800826c:	19f0      	adds	r0, r6, r7
 800826e:	eb05 250b 	add.w	r5, r5, fp, lsl #8
 8008272:	44a9      	add	r9, r5
 8008274:	fa5f f689 	uxtb.w	r6, r9
 8008278:	f3c9 2707 	ubfx	r7, r9, #8, #8
 800827c:	ea4f 4919 	mov.w	r9, r9, lsr #16
 8008280:	f85e 6026 	ldr.w	r6, [lr, r6, lsl #2]
 8008284:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
 8008288:	eb06 2691 	add.w	r6, r6, r1, lsr #10
 800828c:	f85e 1029 	ldr.w	r1, [lr, r9, lsl #2]
 8008290:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 8008294:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8008298:	f3c7 0509 	ubfx	r5, r7, #0, #10
 800829c:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 80082a0:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 80082a4:	4d3a      	ldr	r5, [pc, #232]	; (8008390 <D24_GENERIC+0x16c>)
 80082a6:	fb26 8705 	smlad	r7, r6, r5, r8
 80082aa:	4d3a      	ldr	r5, [pc, #232]	; (8008394 <D24_GENERIC+0x170>)
 80082ac:	fb26 3805 	smlad	r8, r6, r5, r3
 80082b0:	f3c1 0309 	ubfx	r3, r1, #0, #10
 80082b4:	eb03 0b43 	add.w	fp, r3, r3, lsl #1
 80082b8:	2301      	movs	r3, #1
 80082ba:	eb08 084b 	add.w	r8, r8, fp, lsl #1
 80082be:	fb26 f603 	smuad	r6, r6, r3
 80082c2:	eb0c 0903 	add.w	r9, ip, r3
 80082c6:	eb0b 0306 	add.w	r3, fp, r6
 80082ca:	9e05      	ldr	r6, [sp, #20]
 80082cc:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 80082d0:	b1ae      	cbz	r6, 80082fe <D24_GENERIC+0xda>
 80082d2:	442c      	add	r4, r5
 80082d4:	9e03      	ldr	r6, [sp, #12]
 80082d6:	f8d2 b020 	ldr.w	fp, [r2, #32]
 80082da:	1ba4      	subs	r4, r4, r6
 80082dc:	9503      	str	r5, [sp, #12]
 80082de:	17e7      	asrs	r7, r4, #31
 80082e0:	fba4 450b 	umull	r4, r5, r4, fp
 80082e4:	e9cd 4500 	strd	r4, r5, [sp]
 80082e8:	fb0b 5407 	mla	r4, fp, r7, r5
 80082ec:	9401      	str	r4, [sp, #4]
 80082ee:	e9dd 4500 	ldrd	r4, r5, [sp]
 80082f2:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 80082f6:	f145 0500 	adc.w	r5, r5, #0
 80082fa:	006c      	lsls	r4, r5, #1
 80082fc:	4625      	mov	r5, r4
 80082fe:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 8008302:	03ad      	lsls	r5, r5, #14
 8008304:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008308:	2700      	movs	r7, #0
 800830a:	fb0c fb0b 	mul.w	fp, ip, fp
 800830e:	fa1f fc89 	uxth.w	ip, r9
 8008312:	fbca 6705 	smlal	r6, r7, sl, r5
 8008316:	9e04      	ldr	r6, [sp, #16]
 8008318:	10bd      	asrs	r5, r7, #2
 800831a:	f305 050f 	ssat	r5, #16, r5
 800831e:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 8008322:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8008324:	4565      	cmp	r5, ip
 8008326:	d917      	bls.n	8008358 <D24_GENERIC+0x134>
 8008328:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800832a:	f890 9000 	ldrb.w	r9, [r0]
 800832e:	b2ef      	uxtb	r7, r5
 8008330:	2d01      	cmp	r5, #1
 8008332:	b23e      	sxth	r6, r7
 8008334:	d193      	bne.n	800825e <D24_GENERIC+0x3a>
 8008336:	9d06      	ldr	r5, [sp, #24]
 8008338:	b1dd      	cbz	r5, 8008372 <D24_GENERIC+0x14e>
 800833a:	78c7      	ldrb	r7, [r0, #3]
 800833c:	ea4f 2609 	mov.w	r6, r9, lsl #8
 8008340:	f01c 0f01 	tst.w	ip, #1
 8008344:	ea4f 2507 	mov.w	r5, r7, lsl #8
 8008348:	eb06 4607 	add.w	r6, r6, r7, lsl #16
 800834c:	d11a      	bne.n	8008384 <D24_GENERIC+0x160>
 800834e:	f890 9001 	ldrb.w	r9, [r0, #1]
 8008352:	3002      	adds	r0, #2
 8008354:	44b1      	add	r9, r6
 8008356:	e78d      	b.n	8008274 <D24_GENERIC+0x50>
 8008358:	6093      	str	r3, [r2, #8]
 800835a:	2000      	movs	r0, #0
 800835c:	9b03      	ldr	r3, [sp, #12]
 800835e:	f8c2 800c 	str.w	r8, [r2, #12]
 8008362:	6153      	str	r3, [r2, #20]
 8008364:	9b07      	ldr	r3, [sp, #28]
 8008366:	61d1      	str	r1, [r2, #28]
 8008368:	6114      	str	r4, [r2, #16]
 800836a:	6193      	str	r3, [r2, #24]
 800836c:	b009      	add	sp, #36	; 0x24
 800836e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008372:	7845      	ldrb	r5, [r0, #1]
 8008374:	3003      	adds	r0, #3
 8008376:	f810 6c01 	ldrb.w	r6, [r0, #-1]
 800837a:	022d      	lsls	r5, r5, #8
 800837c:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 8008380:	44a9      	add	r9, r5
 8008382:	e777      	b.n	8008274 <D24_GENERIC+0x50>
 8008384:	7886      	ldrb	r6, [r0, #2]
 8008386:	3004      	adds	r0, #4
 8008388:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 800838c:	44a9      	add	r9, r5
 800838e:	e771      	b.n	8008274 <D24_GENERIC+0x50>
 8008390:	00030001 	.word	0x00030001
 8008394:	00060007 	.word	0x00060007
 8008398:	24000000 	.word	0x24000000

0800839c <D32_GENERIC>:
 800839c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083a0:	e9d2 4304 	ldrd	r4, r3, [r2, #16]
 80083a4:	b089      	sub	sp, #36	; 0x24
 80083a6:	6b15      	ldr	r5, [r2, #48]	; 0x30
 80083a8:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 80083aa:	9302      	str	r3, [sp, #8]
 80083ac:	6993      	ldr	r3, [r2, #24]
 80083ae:	9104      	str	r1, [sp, #16]
 80083b0:	9307      	str	r3, [sp, #28]
 80083b2:	9503      	str	r5, [sp, #12]
 80083b4:	69d1      	ldr	r1, [r2, #28]
 80083b6:	6b55      	ldr	r5, [r2, #52]	; 0x34
 80083b8:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 80083bc:	2e00      	cmp	r6, #0
 80083be:	f000 8097 	beq.w	80084f0 <D32_GENERIC+0x154>
 80083c2:	f005 0620 	and.w	r6, r5, #32
 80083c6:	f005 0510 	and.w	r5, r5, #16
 80083ca:	f04f 0e00 	mov.w	lr, #0
 80083ce:	f8df c150 	ldr.w	ip, [pc, #336]	; 8008520 <D32_GENERIC+0x184>
 80083d2:	9606      	str	r6, [sp, #24]
 80083d4:	9505      	str	r5, [sp, #20]
 80083d6:	e079      	b.n	80084cc <D32_GENERIC+0x130>
 80083d8:	783d      	ldrb	r5, [r7, #0]
 80083da:	f810 b009 	ldrb.w	fp, [r0, r9]
 80083de:	042d      	lsls	r5, r5, #16
 80083e0:	f810 a006 	ldrb.w	sl, [r0, r6]
 80083e4:	f890 9000 	ldrb.w	r9, [r0]
 80083e8:	eb07 0046 	add.w	r0, r7, r6, lsl #1
 80083ec:	eb05 650b 	add.w	r5, r5, fp, lsl #24
 80083f0:	eb05 250a 	add.w	r5, r5, sl, lsl #8
 80083f4:	44a9      	add	r9, r5
 80083f6:	fa5f f789 	uxtb.w	r7, r9
 80083fa:	f3c9 2507 	ubfx	r5, r9, #8, #8
 80083fe:	f3c9 4607 	ubfx	r6, r9, #16, #8
 8008402:	ea4f 6919 	mov.w	r9, r9, lsr #24
 8008406:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 800840a:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 800840e:	eb07 2191 	add.w	r1, r7, r1, lsr #10
 8008412:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
 8008416:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
 800841a:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800841e:	f3c1 0909 	ubfx	r9, r1, #0, #10
 8008422:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 8008426:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800842a:	eb07 2196 	add.w	r1, r7, r6, lsr #10
 800842e:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8008432:	ea45 4909 	orr.w	r9, r5, r9, lsl #16
 8008436:	f3c1 0509 	ubfx	r5, r1, #0, #10
 800843a:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 800843e:	4d34      	ldr	r5, [pc, #208]	; (8008510 <D32_GENERIC+0x174>)
 8008440:	fb29 8805 	smlad	r8, r9, r5, r8
 8008444:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 8008448:	fb26 8705 	smlad	r7, r6, r5, r8
 800844c:	4d31      	ldr	r5, [pc, #196]	; (8008514 <D32_GENERIC+0x178>)
 800844e:	fb29 3305 	smlad	r3, r9, r5, r3
 8008452:	4d31      	ldr	r5, [pc, #196]	; (8008518 <D32_GENERIC+0x17c>)
 8008454:	fb26 3805 	smlad	r8, r6, r5, r3
 8008458:	2301      	movs	r3, #1
 800845a:	fb29 f903 	smuad	r9, r9, r3
 800845e:	4b2f      	ldr	r3, [pc, #188]	; (800851c <D32_GENERIC+0x180>)
 8008460:	fb26 9303 	smlad	r3, r6, r3, r9
 8008464:	9e05      	ldr	r6, [sp, #20]
 8008466:	f10e 0901 	add.w	r9, lr, #1
 800846a:	f5a7 4580 	sub.w	r5, r7, #16384	; 0x4000
 800846e:	b1ae      	cbz	r6, 800849c <D32_GENERIC+0x100>
 8008470:	442c      	add	r4, r5
 8008472:	9e02      	ldr	r6, [sp, #8]
 8008474:	f8d2 a020 	ldr.w	sl, [r2, #32]
 8008478:	1ba4      	subs	r4, r4, r6
 800847a:	9502      	str	r5, [sp, #8]
 800847c:	17e7      	asrs	r7, r4, #31
 800847e:	fba4 450a 	umull	r4, r5, r4, sl
 8008482:	e9cd 4500 	strd	r4, r5, [sp]
 8008486:	fb0a 5407 	mla	r4, sl, r7, r5
 800848a:	9401      	str	r4, [sp, #4]
 800848c:	e9dd 4500 	ldrd	r4, r5, [sp]
 8008490:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 8008494:	f145 0500 	adc.w	r5, r5, #0
 8008498:	006c      	lsls	r4, r5, #1
 800849a:	4625      	mov	r5, r4
 800849c:	f8b2 a028 	ldrh.w	sl, [r2, #40]	; 0x28
 80084a0:	036d      	lsls	r5, r5, #13
 80084a2:	9f03      	ldr	r7, [sp, #12]
 80084a4:	fb0e fb0a 	mul.w	fp, lr, sl
 80084a8:	fa1f fe89 	uxth.w	lr, r9
 80084ac:	f04f 0a00 	mov.w	sl, #0
 80084b0:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 80084b4:	9e04      	ldr	r6, [sp, #16]
 80084b6:	fbc7 9a05 	smlal	r9, sl, r7, r5
 80084ba:	4657      	mov	r7, sl
 80084bc:	10bd      	asrs	r5, r7, #2
 80084be:	f305 050f 	ssat	r5, #16, r5
 80084c2:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 80084c6:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 80084c8:	4575      	cmp	r5, lr
 80084ca:	d911      	bls.n	80084f0 <D32_GENERIC+0x154>
 80084cc:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 80084ce:	b2ee      	uxtb	r6, r5
 80084d0:	2d01      	cmp	r5, #1
 80084d2:	eb00 0746 	add.w	r7, r0, r6, lsl #1
 80084d6:	eb06 0946 	add.w	r9, r6, r6, lsl #1
 80084da:	f47f af7d 	bne.w	80083d8 <D32_GENERIC+0x3c>
 80084de:	1d05      	adds	r5, r0, #4
 80084e0:	f8d0 9000 	ldr.w	r9, [r0]
 80084e4:	9806      	ldr	r0, [sp, #24]
 80084e6:	b180      	cbz	r0, 800850a <D32_GENERIC+0x16e>
 80084e8:	fa99 f999 	rev16.w	r9, r9
 80084ec:	4628      	mov	r0, r5
 80084ee:	e782      	b.n	80083f6 <D32_GENERIC+0x5a>
 80084f0:	6093      	str	r3, [r2, #8]
 80084f2:	2000      	movs	r0, #0
 80084f4:	9b02      	ldr	r3, [sp, #8]
 80084f6:	f8c2 800c 	str.w	r8, [r2, #12]
 80084fa:	6153      	str	r3, [r2, #20]
 80084fc:	9b07      	ldr	r3, [sp, #28]
 80084fe:	61d1      	str	r1, [r2, #28]
 8008500:	6114      	str	r4, [r2, #16]
 8008502:	6193      	str	r3, [r2, #24]
 8008504:	b009      	add	sp, #36	; 0x24
 8008506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800850a:	4628      	mov	r0, r5
 800850c:	e773      	b.n	80083f6 <D32_GENERIC+0x5a>
 800850e:	bf00      	nop
 8008510:	00060003 	.word	0x00060003
 8008514:	000a000c 	.word	0x000a000c
 8008518:	000c000a 	.word	0x000c000a
 800851c:	00030006 	.word	0x00030006
 8008520:	24000000 	.word	0x24000000

08008524 <D48_GENERIC>:
 8008524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008528:	6913      	ldr	r3, [r2, #16]
 800852a:	b089      	sub	sp, #36	; 0x24
 800852c:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800852e:	9301      	str	r3, [sp, #4]
 8008530:	6953      	ldr	r3, [r2, #20]
 8008532:	9104      	str	r1, [sp, #16]
 8008534:	9302      	str	r3, [sp, #8]
 8008536:	6993      	ldr	r3, [r2, #24]
 8008538:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 800853c:	9307      	str	r3, [sp, #28]
 800853e:	e9d2 3102 	ldrd	r3, r1, [r2, #8]
 8008542:	9100      	str	r1, [sp, #0]
 8008544:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8008546:	9103      	str	r1, [sp, #12]
 8008548:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800854a:	2c00      	cmp	r4, #0
 800854c:	f000 80be 	beq.w	80086cc <D48_GENERIC+0x1a8>
 8008550:	f001 0420 	and.w	r4, r1, #32
 8008554:	f001 0110 	and.w	r1, r1, #16
 8008558:	f04f 0e00 	mov.w	lr, #0
 800855c:	9105      	str	r1, [sp, #20]
 800855e:	9406      	str	r4, [sp, #24]
 8008560:	4962      	ldr	r1, [pc, #392]	; (80086ec <D48_GENERIC+0x1c8>)
 8008562:	e0a0      	b.n	80086a6 <D48_GENERIC+0x182>
 8008564:	eb00 0608 	add.w	r6, r0, r8
 8008568:	f810 a008 	ldrb.w	sl, [r0, r8]
 800856c:	f810 9005 	ldrb.w	r9, [r0, r5]
 8008570:	5df4      	ldrb	r4, [r6, r7]
 8008572:	443e      	add	r6, r7
 8008574:	f890 b000 	ldrb.w	fp, [r0]
 8008578:	0420      	lsls	r0, r4, #16
 800857a:	eb06 0408 	add.w	r4, r6, r8
 800857e:	f816 6008 	ldrb.w	r6, [r6, r8]
 8008582:	eb00 6a0a 	add.w	sl, r0, sl, lsl #24
 8008586:	f814 8007 	ldrb.w	r8, [r4, r7]
 800858a:	4427      	add	r7, r4
 800858c:	eb0a 2a09 	add.w	sl, sl, r9, lsl #8
 8008590:	eb08 2606 	add.w	r6, r8, r6, lsl #8
 8008594:	eb0a 040b 	add.w	r4, sl, fp
 8008598:	eb07 0045 	add.w	r0, r7, r5, lsl #1
 800859c:	f3c6 2807 	ubfx	r8, r6, #8, #8
 80085a0:	b2f7      	uxtb	r7, r6
 80085a2:	b2e6      	uxtb	r6, r4
 80085a4:	f3c4 2507 	ubfx	r5, r4, #8, #8
 80085a8:	f3c4 4907 	ubfx	r9, r4, #16, #8
 80085ac:	ea4f 6b14 	mov.w	fp, r4, lsr #24
 80085b0:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 80085b4:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 80085b8:	eb06 269c 	add.w	r6, r6, ip, lsr #10
 80085bc:	f851 9029 	ldr.w	r9, [r1, r9, lsl #2]
 80085c0:	f851 402b 	ldr.w	r4, [r1, fp, lsl #2]
 80085c4:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 80085c8:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 80085cc:	f851 c028 	ldr.w	ip, [r1, r8, lsl #2]
 80085d0:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80085d4:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 80085d8:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80085dc:	eb04 2499 	add.w	r4, r4, r9, lsr #10
 80085e0:	f3c9 0909 	ubfx	r9, r9, #0, #10
 80085e4:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 80085e8:	9d00      	ldr	r5, [sp, #0]
 80085ea:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 80085ee:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80085f2:	eb0c 2c97 	add.w	ip, ip, r7, lsr #10
 80085f6:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80085fa:	ea44 4909 	orr.w	r9, r4, r9, lsl #16
 80085fe:	f3cc 0409 	ubfx	r4, ip, #0, #10
 8008602:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8008606:	4c3a      	ldr	r4, [pc, #232]	; (80086f0 <D48_GENERIC+0x1cc>)
 8008608:	fb26 5a04 	smlad	sl, r6, r4, r5
 800860c:	4c39      	ldr	r4, [pc, #228]	; (80086f4 <D48_GENERIC+0x1d0>)
 800860e:	fb29 aa04 	smlad	sl, r9, r4, sl
 8008612:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 8008616:	fb27 aa04 	smlad	sl, r7, r4, sl
 800861a:	4c37      	ldr	r4, [pc, #220]	; (80086f8 <D48_GENERIC+0x1d4>)
 800861c:	fb26 3304 	smlad	r3, r6, r4, r3
 8008620:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 8008624:	fb29 3304 	smlad	r3, r9, r4, r3
 8008628:	4c34      	ldr	r4, [pc, #208]	; (80086fc <D48_GENERIC+0x1d8>)
 800862a:	fb27 3304 	smlad	r3, r7, r4, r3
 800862e:	2501      	movs	r5, #1
 8008630:	9300      	str	r3, [sp, #0]
 8008632:	fb26 f605 	smuad	r6, r6, r5
 8008636:	4b32      	ldr	r3, [pc, #200]	; (8008700 <D48_GENERIC+0x1dc>)
 8008638:	fb29 6903 	smlad	r9, r9, r3, r6
 800863c:	4b31      	ldr	r3, [pc, #196]	; (8008704 <D48_GENERIC+0x1e0>)
 800863e:	fb27 9303 	smlad	r3, r7, r3, r9
 8008642:	9c05      	ldr	r4, [sp, #20]
 8008644:	eb0e 0805 	add.w	r8, lr, r5
 8008648:	f5aa 4a58 	sub.w	sl, sl, #55296	; 0xd800
 800864c:	b19c      	cbz	r4, 8008676 <D48_GENERIC+0x152>
 800864e:	9c01      	ldr	r4, [sp, #4]
 8008650:	9d02      	ldr	r5, [sp, #8]
 8008652:	4454      	add	r4, sl
 8008654:	f8d2 9020 	ldr.w	r9, [r2, #32]
 8008658:	f8cd a008 	str.w	sl, [sp, #8]
 800865c:	1b64      	subs	r4, r4, r5
 800865e:	fba4 ab09 	umull	sl, fp, r4, r9
 8008662:	17e7      	asrs	r7, r4, #31
 8008664:	f11a 4400 	adds.w	r4, sl, #2147483648	; 0x80000000
 8008668:	fb09 bb07 	mla	fp, r9, r7, fp
 800866c:	f14b 0500 	adc.w	r5, fp, #0
 8008670:	006c      	lsls	r4, r5, #1
 8008672:	46a2      	mov	sl, r4
 8008674:	9401      	str	r4, [sp, #4]
 8008676:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 8008678:	ea4f 2aca 	mov.w	sl, sl, lsl #11
 800867c:	9d03      	ldr	r5, [sp, #12]
 800867e:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8008682:	fb0e f606 	mul.w	r6, lr, r6
 8008686:	fa1f fe88 	uxth.w	lr, r8
 800868a:	f04f 0800 	mov.w	r8, #0
 800868e:	fbc5 780a 	smlal	r7, r8, r5, sl
 8008692:	4645      	mov	r5, r8
 8008694:	10ac      	asrs	r4, r5, #2
 8008696:	9d04      	ldr	r5, [sp, #16]
 8008698:	f304 040f 	ssat	r4, #16, r4
 800869c:	f825 4016 	strh.w	r4, [r5, r6, lsl #1]
 80086a0:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 80086a2:	4574      	cmp	r4, lr
 80086a4:	d912      	bls.n	80086cc <D48_GENERIC+0x1a8>
 80086a6:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 80086a8:	b2e5      	uxtb	r5, r4
 80086aa:	2c01      	cmp	r4, #1
 80086ac:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 80086b0:	f1c5 0700 	rsb	r7, r5, #0
 80086b4:	f47f af56 	bne.w	8008564 <D48_GENERIC+0x40>
 80086b8:	9d06      	ldr	r5, [sp, #24]
 80086ba:	e9d0 4600 	ldrd	r4, r6, [r0]
 80086be:	3006      	adds	r0, #6
 80086c0:	2d00      	cmp	r5, #0
 80086c2:	f43f af6b 	beq.w	800859c <D48_GENERIC+0x78>
 80086c6:	ba64      	rev16	r4, r4
 80086c8:	ba76      	rev16	r6, r6
 80086ca:	e767      	b.n	800859c <D48_GENERIC+0x78>
 80086cc:	6093      	str	r3, [r2, #8]
 80086ce:	2000      	movs	r0, #0
 80086d0:	9b00      	ldr	r3, [sp, #0]
 80086d2:	f8c2 c01c 	str.w	ip, [r2, #28]
 80086d6:	60d3      	str	r3, [r2, #12]
 80086d8:	9b01      	ldr	r3, [sp, #4]
 80086da:	6113      	str	r3, [r2, #16]
 80086dc:	9b02      	ldr	r3, [sp, #8]
 80086de:	6153      	str	r3, [r2, #20]
 80086e0:	9b07      	ldr	r3, [sp, #28]
 80086e2:	6193      	str	r3, [r2, #24]
 80086e4:	b009      	add	sp, #36	; 0x24
 80086e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086ea:	bf00      	nop
 80086ec:	24000000 	.word	0x24000000
 80086f0:	000f000a 	.word	0x000f000a
 80086f4:	00060003 	.word	0x00060003
 80086f8:	00150019 	.word	0x00150019
 80086fc:	00190015 	.word	0x00190015
 8008700:	00030006 	.word	0x00030006
 8008704:	000a000f 	.word	0x000a000f

08008708 <D64_GENERIC>:
 8008708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800870c:	6913      	ldr	r3, [r2, #16]
 800870e:	b089      	sub	sp, #36	; 0x24
 8008710:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8008712:	9300      	str	r3, [sp, #0]
 8008714:	6953      	ldr	r3, [r2, #20]
 8008716:	9105      	str	r1, [sp, #20]
 8008718:	9303      	str	r3, [sp, #12]
 800871a:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 800871c:	6993      	ldr	r3, [r2, #24]
 800871e:	69d4      	ldr	r4, [r2, #28]
 8008720:	9307      	str	r3, [sp, #28]
 8008722:	9504      	str	r5, [sp, #16]
 8008724:	e9d2 3602 	ldrd	r3, r6, [r2, #8]
 8008728:	2900      	cmp	r1, #0
 800872a:	f000 80e8 	beq.w	80088fe <D64_GENERIC+0x1f6>
 800872e:	6a11      	ldr	r1, [r2, #32]
 8008730:	2500      	movs	r5, #0
 8008732:	46b3      	mov	fp, r6
 8008734:	9302      	str	r3, [sp, #8]
 8008736:	9106      	str	r1, [sp, #24]
 8008738:	4978      	ldr	r1, [pc, #480]	; (800891c <D64_GENERIC+0x214>)
 800873a:	e0cc      	b.n	80088d6 <D64_GENERIC+0x1ce>
 800873c:	eb0e 084e 	add.w	r8, lr, lr, lsl #1
 8008740:	f1ce 0c00 	rsb	ip, lr, #0
 8008744:	f890 9000 	ldrb.w	r9, [r0]
 8008748:	eb00 0708 	add.w	r7, r0, r8
 800874c:	f810 6008 	ldrb.w	r6, [r0, r8]
 8008750:	eb07 0a4c 	add.w	sl, r7, ip, lsl #1
 8008754:	f817 000c 	ldrb.w	r0, [r7, ip]
 8008758:	f817 301c 	ldrb.w	r3, [r7, ip, lsl #1]
 800875c:	eb0a 0748 	add.w	r7, sl, r8, lsl #1
 8008760:	f81a a018 	ldrb.w	sl, [sl, r8, lsl #1]
 8008764:	ea4f 4800 	mov.w	r8, r0, lsl #16
 8008768:	f817 000c 	ldrb.w	r0, [r7, ip]
 800876c:	eb08 6606 	add.w	r6, r8, r6, lsl #24
 8008770:	f817 801c 	ldrb.w	r8, [r7, ip, lsl #1]
 8008774:	0400      	lsls	r0, r0, #16
 8008776:	4467      	add	r7, ip
 8008778:	eb06 2603 	add.w	r6, r6, r3, lsl #8
 800877c:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 8008780:	f817 a01c 	ldrb.w	sl, [r7, ip, lsl #1]
 8008784:	eb07 074c 	add.w	r7, r7, ip, lsl #1
 8008788:	444e      	add	r6, r9
 800878a:	eb00 2808 	add.w	r8, r0, r8, lsl #8
 800878e:	eb07 008e 	add.w	r0, r7, lr, lsl #2
 8008792:	44c2      	add	sl, r8
 8008794:	b2f7      	uxtb	r7, r6
 8008796:	f3c6 2807 	ubfx	r8, r6, #8, #8
 800879a:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 800879e:	0e36      	lsrs	r6, r6, #24
 80087a0:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 80087a4:	fa5f fc8a 	uxtb.w	ip, sl
 80087a8:	f851 8028 	ldr.w	r8, [r1, r8, lsl #2]
 80087ac:	f3ca 2907 	ubfx	r9, sl, #8, #8
 80087b0:	443c      	add	r4, r7
 80087b2:	f851 702e 	ldr.w	r7, [r1, lr, lsl #2]
 80087b6:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 80087ba:	eb08 2894 	add.w	r8, r8, r4, lsr #10
 80087be:	f851 c02c 	ldr.w	ip, [r1, ip, lsl #2]
 80087c2:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80087c6:	4b56      	ldr	r3, [pc, #344]	; (8008920 <D64_GENERIC+0x218>)
 80087c8:	eb07 2e98 	add.w	lr, r7, r8, lsr #10
 80087cc:	f3c8 0809 	ubfx	r8, r8, #0, #10
 80087d0:	f851 7029 	ldr.w	r7, [r1, r9, lsl #2]
 80087d4:	eb06 269e 	add.w	r6, r6, lr, lsr #10
 80087d8:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 80087dc:	ea48 4804 	orr.w	r8, r8, r4, lsl #16
 80087e0:	f3ca 4407 	ubfx	r4, sl, #16, #8
 80087e4:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 80087e8:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80087ec:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 80087f0:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 80087f4:	eb07 279c 	add.w	r7, r7, ip, lsr #10
 80087f8:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 80087fc:	f851 902a 	ldr.w	r9, [r1, sl, lsl #2]
 8008800:	ea46 460e 	orr.w	r6, r6, lr, lsl #16
 8008804:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 8008808:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800880c:	eb09 299a 	add.w	r9, r9, sl, lsr #10
 8008810:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8008814:	ea47 4c0c 	orr.w	ip, r7, ip, lsl #16
 8008818:	f3c9 0709 	ubfx	r7, r9, #0, #10
 800881c:	ea4f 2499 	mov.w	r4, r9, lsr #10
 8008820:	ea47 4a0a 	orr.w	sl, r7, sl, lsl #16
 8008824:	fb28 b903 	smlad	r9, r8, r3, fp
 8008828:	4b3e      	ldr	r3, [pc, #248]	; (8008924 <D64_GENERIC+0x21c>)
 800882a:	fb26 9903 	smlad	r9, r6, r3, r9
 800882e:	4b3e      	ldr	r3, [pc, #248]	; (8008928 <D64_GENERIC+0x220>)
 8008830:	fb2c 9703 	smlad	r7, ip, r3, r9
 8008834:	f44f 3980 	mov.w	r9, #65536	; 0x10000
 8008838:	fb2a 7909 	smlad	r9, sl, r9, r7
 800883c:	4f3b      	ldr	r7, [pc, #236]	; (800892c <D64_GENERIC+0x224>)
 800883e:	9b02      	ldr	r3, [sp, #8]
 8008840:	fb28 3307 	smlad	r3, r8, r7, r3
 8008844:	fb2a 3317 	smladx	r3, sl, r7, r3
 8008848:	4f39      	ldr	r7, [pc, #228]	; (8008930 <D64_GENERIC+0x228>)
 800884a:	fb26 3307 	smlad	r3, r6, r7, r3
 800884e:	fb2c 3b17 	smladx	fp, ip, r7, r3
 8008852:	f04f 0e01 	mov.w	lr, #1
 8008856:	fb28 f80e 	smuad	r8, r8, lr
 800885a:	4b36      	ldr	r3, [pc, #216]	; (8008934 <D64_GENERIC+0x22c>)
 800885c:	fb26 8603 	smlad	r6, r6, r3, r8
 8008860:	4b35      	ldr	r3, [pc, #212]	; (8008938 <D64_GENERIC+0x230>)
 8008862:	fb2c 6c03 	smlad	ip, ip, r3, r6
 8008866:	4b35      	ldr	r3, [pc, #212]	; (800893c <D64_GENERIC+0x234>)
 8008868:	fb2a c303 	smlad	r3, sl, r3, ip
 800886c:	9f06      	ldr	r7, [sp, #24]
 800886e:	f5a9 3900 	sub.w	r9, r9, #131072	; 0x20000
 8008872:	9302      	str	r3, [sp, #8]
 8008874:	b1cf      	cbz	r7, 80088aa <D64_GENERIC+0x1a2>
 8008876:	9b00      	ldr	r3, [sp, #0]
 8008878:	444b      	add	r3, r9
 800887a:	461e      	mov	r6, r3
 800887c:	9b03      	ldr	r3, [sp, #12]
 800887e:	f8cd 900c 	str.w	r9, [sp, #12]
 8008882:	1af6      	subs	r6, r6, r3
 8008884:	46b0      	mov	r8, r6
 8008886:	ea4f 79e6 	mov.w	r9, r6, asr #31
 800888a:	e9cd 8900 	strd	r8, r9, [sp]
 800888e:	fba6 8907 	umull	r8, r9, r6, r7
 8008892:	9e01      	ldr	r6, [sp, #4]
 8008894:	fb07 9306 	mla	r3, r7, r6, r9
 8008898:	4646      	mov	r6, r8
 800889a:	f116 4600 	adds.w	r6, r6, #2147483648	; 0x80000000
 800889e:	f143 0700 	adc.w	r7, r3, #0
 80088a2:	fa07 f30e 	lsl.w	r3, r7, lr
 80088a6:	4699      	mov	r9, r3
 80088a8:	9300      	str	r3, [sp, #0]
 80088aa:	f8b2 c028 	ldrh.w	ip, [r2, #40]	; 0x28
 80088ae:	ea4f 2989 	mov.w	r9, r9, lsl #10
 80088b2:	9b04      	ldr	r3, [sp, #16]
 80088b4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80088b8:	2700      	movs	r7, #0
 80088ba:	fb05 fc0c 	mul.w	ip, r5, ip
 80088be:	3501      	adds	r5, #1
 80088c0:	fbc3 6709 	smlal	r6, r7, r3, r9
 80088c4:	9b05      	ldr	r3, [sp, #20]
 80088c6:	10be      	asrs	r6, r7, #2
 80088c8:	f306 060f 	ssat	r6, #16, r6
 80088cc:	f823 601c 	strh.w	r6, [r3, ip, lsl #1]
 80088d0:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 80088d2:	42ae      	cmp	r6, r5
 80088d4:	dd11      	ble.n	80088fa <D64_GENERIC+0x1f2>
 80088d6:	f8b2 e02a 	ldrh.w	lr, [r2, #42]	; 0x2a
 80088da:	f1be 0f01 	cmp.w	lr, #1
 80088de:	f47f af2d 	bne.w	800873c <D64_GENERIC+0x34>
 80088e2:	6b57      	ldr	r7, [r2, #52]	; 0x34
 80088e4:	f100 0c08 	add.w	ip, r0, #8
 80088e8:	06bb      	lsls	r3, r7, #26
 80088ea:	e9d0 6a00 	ldrd	r6, sl, [r0]
 80088ee:	d513      	bpl.n	8008918 <D64_GENERIC+0x210>
 80088f0:	ba76      	rev16	r6, r6
 80088f2:	fa9a fa9a 	rev16.w	sl, sl
 80088f6:	4660      	mov	r0, ip
 80088f8:	e74c      	b.n	8008794 <D64_GENERIC+0x8c>
 80088fa:	465e      	mov	r6, fp
 80088fc:	9b02      	ldr	r3, [sp, #8]
 80088fe:	6093      	str	r3, [r2, #8]
 8008900:	2000      	movs	r0, #0
 8008902:	9b00      	ldr	r3, [sp, #0]
 8008904:	60d6      	str	r6, [r2, #12]
 8008906:	6113      	str	r3, [r2, #16]
 8008908:	9b03      	ldr	r3, [sp, #12]
 800890a:	61d4      	str	r4, [r2, #28]
 800890c:	6153      	str	r3, [r2, #20]
 800890e:	9b07      	ldr	r3, [sp, #28]
 8008910:	6193      	str	r3, [r2, #24]
 8008912:	b009      	add	sp, #36	; 0x24
 8008914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008918:	4660      	mov	r0, ip
 800891a:	e73b      	b.n	8008794 <D64_GENERIC+0x8c>
 800891c:	24000000 	.word	0x24000000
 8008920:	001c0015 	.word	0x001c0015
 8008924:	000f000a 	.word	0x000f000a
 8008928:	00060003 	.word	0x00060003
 800892c:	0024002a 	.word	0x0024002a
 8008930:	002e0030 	.word	0x002e0030
 8008934:	00030006 	.word	0x00030006
 8008938:	000a000f 	.word	0x000a000f
 800893c:	0015001c 	.word	0x0015001c

08008940 <D80_GENERIC>:
 8008940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008944:	b08b      	sub	sp, #44	; 0x2c
 8008946:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8008948:	9107      	str	r1, [sp, #28]
 800894a:	6911      	ldr	r1, [r2, #16]
 800894c:	9104      	str	r1, [sp, #16]
 800894e:	6951      	ldr	r1, [r2, #20]
 8008950:	9105      	str	r1, [sp, #20]
 8008952:	6991      	ldr	r1, [r2, #24]
 8008954:	9109      	str	r1, [sp, #36]	; 0x24
 8008956:	69d1      	ldr	r1, [r2, #28]
 8008958:	9102      	str	r1, [sp, #8]
 800895a:	6891      	ldr	r1, [r2, #8]
 800895c:	9103      	str	r1, [sp, #12]
 800895e:	68d1      	ldr	r1, [r2, #12]
 8008960:	9101      	str	r1, [sp, #4]
 8008962:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8008964:	9106      	str	r1, [sp, #24]
 8008966:	2b00      	cmp	r3, #0
 8008968:	f000 810b 	beq.w	8008b82 <D80_GENERIC+0x242>
 800896c:	6a13      	ldr	r3, [r2, #32]
 800896e:	f04f 0800 	mov.w	r8, #0
 8008972:	f8df c260 	ldr.w	ip, [pc, #608]	; 8008bd4 <D80_GENERIC+0x294>
 8008976:	9308      	str	r3, [sp, #32]
 8008978:	9200      	str	r2, [sp, #0]
 800897a:	e0ee      	b.n	8008b5a <D80_GENERIC+0x21a>
 800897c:	b2db      	uxtb	r3, r3
 800897e:	f890 e000 	ldrb.w	lr, [r0]
 8008982:	b219      	sxth	r1, r3
 8008984:	425c      	negs	r4, r3
 8008986:	f810 9003 	ldrb.w	r9, [r0, r3]
 800898a:	004e      	lsls	r6, r1, #1
 800898c:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 8008990:	4431      	add	r1, r6
 8008992:	1843      	adds	r3, r0, r1
 8008994:	f810 b001 	ldrb.w	fp, [r0, r1]
 8008998:	1919      	adds	r1, r3, r4
 800899a:	5d1b      	ldrb	r3, [r3, r4]
 800899c:	1948      	adds	r0, r1, r5
 800899e:	f811 a005 	ldrb.w	sl, [r1, r5]
 80089a2:	041b      	lsls	r3, r3, #16
 80089a4:	1907      	adds	r7, r0, r4
 80089a6:	5d01      	ldrb	r1, [r0, r4]
 80089a8:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 80089ac:	f810 0014 	ldrb.w	r0, [r0, r4, lsl #1]
 80089b0:	eb07 0b44 	add.w	fp, r7, r4, lsl #1
 80089b4:	f817 7014 	ldrb.w	r7, [r7, r4, lsl #1]
 80089b8:	0409      	lsls	r1, r1, #16
 80089ba:	eb03 2309 	add.w	r3, r3, r9, lsl #8
 80089be:	eb0b 0905 	add.w	r9, fp, r5
 80089c2:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 80089c6:	f81b 5005 	ldrb.w	r5, [fp, r5]
 80089ca:	eb09 0b04 	add.w	fp, r9, r4
 80089ce:	f819 4004 	ldrb.w	r4, [r9, r4]
 80089d2:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 80089d6:	4473      	add	r3, lr
 80089d8:	eb0b 0006 	add.w	r0, fp, r6
 80089dc:	eb04 2505 	add.w	r5, r4, r5, lsl #8
 80089e0:	4439      	add	r1, r7
 80089e2:	f3c3 2407 	ubfx	r4, r3, #8, #8
 80089e6:	b2df      	uxtb	r7, r3
 80089e8:	f3c3 4607 	ubfx	r6, r3, #16, #8
 80089ec:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 80089f0:	f85c 3027 	ldr.w	r3, [ip, r7, lsl #2]
 80089f4:	fa5f fa81 	uxtb.w	sl, r1
 80089f8:	f85c 7024 	ldr.w	r7, [ip, r4, lsl #2]
 80089fc:	9c02      	ldr	r4, [sp, #8]
 80089fe:	f85c 9026 	ldr.w	r9, [ip, r6, lsl #2]
 8008a02:	441c      	add	r4, r3
 8008a04:	f85c 602e 	ldr.w	r6, [ip, lr, lsl #2]
 8008a08:	f85c e02a 	ldr.w	lr, [ip, sl, lsl #2]
 8008a0c:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8008a10:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 8008a14:	f3c4 0309 	ubfx	r3, r4, #0, #10
 8008a18:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8008a1c:	b2ed      	uxtb	r5, r5
 8008a1e:	eb09 2997 	add.w	r9, r9, r7, lsr #10
 8008a22:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8008a26:	f85c 4024 	ldr.w	r4, [ip, r4, lsl #2]
 8008a2a:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 8008a2e:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 8008a32:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 8008a36:	f3c1 4707 	ubfx	r7, r1, #16, #8
 8008a3a:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 8008a3e:	f85c a02a 	ldr.w	sl, [ip, sl, lsl #2]
 8008a42:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 8008a46:	0e09      	lsrs	r1, r1, #24
 8008a48:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 8008a4c:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8008a50:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 8008a54:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8008a58:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 8008a5c:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8008a60:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8008a64:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 8008a68:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8008a6c:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
 8008a70:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 8008a74:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8008a78:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8008a7c:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 8008a80:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8008a84:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 8008a88:	ea4f 229a 	mov.w	r2, sl, lsr #10
 8008a8c:	f3ca 0709 	ubfx	r7, sl, #0, #10
 8008a90:	9202      	str	r2, [sp, #8]
 8008a92:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 8008a96:	4a43      	ldr	r2, [pc, #268]	; (8008ba4 <D80_GENERIC+0x264>)
 8008a98:	9f01      	ldr	r7, [sp, #4]
 8008a9a:	fb23 7a02 	smlad	sl, r3, r2, r7
 8008a9e:	4a42      	ldr	r2, [pc, #264]	; (8008ba8 <D80_GENERIC+0x268>)
 8008aa0:	fb26 aa02 	smlad	sl, r6, r2, sl
 8008aa4:	4a41      	ldr	r2, [pc, #260]	; (8008bac <D80_GENERIC+0x26c>)
 8008aa6:	fb24 aa02 	smlad	sl, r4, r2, sl
 8008aaa:	4a41      	ldr	r2, [pc, #260]	; (8008bb0 <D80_GENERIC+0x270>)
 8008aac:	fb21 a702 	smlad	r7, r1, r2, sl
 8008ab0:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 8008ab4:	fb25 7a0a 	smlad	sl, r5, sl, r7
 8008ab8:	4a3e      	ldr	r2, [pc, #248]	; (8008bb4 <D80_GENERIC+0x274>)
 8008aba:	9f03      	ldr	r7, [sp, #12]
 8008abc:	fb23 7e02 	smlad	lr, r3, r2, r7
 8008ac0:	4a3d      	ldr	r2, [pc, #244]	; (8008bb8 <D80_GENERIC+0x278>)
 8008ac2:	fb26 ee02 	smlad	lr, r6, r2, lr
 8008ac6:	f04f 174b 	mov.w	r7, #4915275	; 0x4b004b
 8008aca:	fb24 e707 	smlad	r7, r4, r7, lr
 8008ace:	4a3b      	ldr	r2, [pc, #236]	; (8008bbc <D80_GENERIC+0x27c>)
 8008ad0:	fb21 7702 	smlad	r7, r1, r2, r7
 8008ad4:	4a3a      	ldr	r2, [pc, #232]	; (8008bc0 <D80_GENERIC+0x280>)
 8008ad6:	fb25 7202 	smlad	r2, r5, r2, r7
 8008ada:	f04f 0901 	mov.w	r9, #1
 8008ade:	9201      	str	r2, [sp, #4]
 8008ae0:	fb23 f909 	smuad	r9, r3, r9
 8008ae4:	4b37      	ldr	r3, [pc, #220]	; (8008bc4 <D80_GENERIC+0x284>)
 8008ae6:	fb26 9603 	smlad	r6, r6, r3, r9
 8008aea:	4f37      	ldr	r7, [pc, #220]	; (8008bc8 <D80_GENERIC+0x288>)
 8008aec:	fb24 6407 	smlad	r4, r4, r7, r6
 8008af0:	4f36      	ldr	r7, [pc, #216]	; (8008bcc <D80_GENERIC+0x28c>)
 8008af2:	fb21 4707 	smlad	r7, r1, r7, r4
 8008af6:	4936      	ldr	r1, [pc, #216]	; (8008bd0 <D80_GENERIC+0x290>)
 8008af8:	fb25 7301 	smlad	r3, r5, r1, r7
 8008afc:	9303      	str	r3, [sp, #12]
 8008afe:	f5aa 3a7a 	sub.w	sl, sl, #256000	; 0x3e800
 8008b02:	9b08      	ldr	r3, [sp, #32]
 8008b04:	b193      	cbz	r3, 8008b2c <D80_GENERIC+0x1ec>
 8008b06:	9a04      	ldr	r2, [sp, #16]
 8008b08:	4452      	add	r2, sl
 8008b0a:	4614      	mov	r4, r2
 8008b0c:	9a05      	ldr	r2, [sp, #20]
 8008b0e:	f8cd a014 	str.w	sl, [sp, #20]
 8008b12:	1aa4      	subs	r4, r4, r2
 8008b14:	fba4 1203 	umull	r1, r2, r4, r3
 8008b18:	17e7      	asrs	r7, r4, #31
 8008b1a:	f111 4400 	adds.w	r4, r1, #2147483648	; 0x80000000
 8008b1e:	fb03 2207 	mla	r2, r3, r7, r2
 8008b22:	f142 0500 	adc.w	r5, r2, #0
 8008b26:	006b      	lsls	r3, r5, #1
 8008b28:	469a      	mov	sl, r3
 8008b2a:	9304      	str	r3, [sp, #16]
 8008b2c:	9e00      	ldr	r6, [sp, #0]
 8008b2e:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
 8008b32:	9a06      	ldr	r2, [sp, #24]
 8008b34:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8008b38:	8d33      	ldrh	r3, [r6, #40]	; 0x28
 8008b3a:	2500      	movs	r5, #0
 8008b3c:	fb08 f303 	mul.w	r3, r8, r3
 8008b40:	fbc2 450a 	smlal	r4, r5, r2, sl
 8008b44:	9a07      	ldr	r2, [sp, #28]
 8008b46:	f108 0801 	add.w	r8, r8, #1
 8008b4a:	10a9      	asrs	r1, r5, #2
 8008b4c:	f301 010f 	ssat	r1, #16, r1
 8008b50:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8008b54:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 8008b56:	4543      	cmp	r3, r8
 8008b58:	dd12      	ble.n	8008b80 <D80_GENERIC+0x240>
 8008b5a:	9b00      	ldr	r3, [sp, #0]
 8008b5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b5e:	2b01      	cmp	r3, #1
 8008b60:	f47f af0c 	bne.w	800897c <D80_GENERIC+0x3c>
 8008b64:	9b00      	ldr	r3, [sp, #0]
 8008b66:	6885      	ldr	r5, [r0, #8]
 8008b68:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8008b6a:	06b2      	lsls	r2, r6, #26
 8008b6c:	e9d0 3100 	ldrd	r3, r1, [r0]
 8008b70:	f100 000a 	add.w	r0, r0, #10
 8008b74:	f57f af35 	bpl.w	80089e2 <D80_GENERIC+0xa2>
 8008b78:	ba5b      	rev16	r3, r3
 8008b7a:	ba49      	rev16	r1, r1
 8008b7c:	ba6d      	rev16	r5, r5
 8008b7e:	e730      	b.n	80089e2 <D80_GENERIC+0xa2>
 8008b80:	4632      	mov	r2, r6
 8008b82:	9b03      	ldr	r3, [sp, #12]
 8008b84:	2000      	movs	r0, #0
 8008b86:	6093      	str	r3, [r2, #8]
 8008b88:	9b01      	ldr	r3, [sp, #4]
 8008b8a:	60d3      	str	r3, [r2, #12]
 8008b8c:	9b02      	ldr	r3, [sp, #8]
 8008b8e:	61d3      	str	r3, [r2, #28]
 8008b90:	9b04      	ldr	r3, [sp, #16]
 8008b92:	6113      	str	r3, [r2, #16]
 8008b94:	9b05      	ldr	r3, [sp, #20]
 8008b96:	6153      	str	r3, [r2, #20]
 8008b98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b9a:	6193      	str	r3, [r2, #24]
 8008b9c:	b00b      	add	sp, #44	; 0x2c
 8008b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ba2:	bf00      	nop
 8008ba4:	002d0024 	.word	0x002d0024
 8008ba8:	001c0015 	.word	0x001c0015
 8008bac:	000f000a 	.word	0x000f000a
 8008bb0:	00060003 	.word	0x00060003
 8008bb4:	0037003f 	.word	0x0037003f
 8008bb8:	00450049 	.word	0x00450049
 8008bbc:	00490045 	.word	0x00490045
 8008bc0:	003f0037 	.word	0x003f0037
 8008bc4:	00030006 	.word	0x00030006
 8008bc8:	000a000f 	.word	0x000a000f
 8008bcc:	0015001c 	.word	0x0015001c
 8008bd0:	0024002d 	.word	0x0024002d
 8008bd4:	24000000 	.word	0x24000000

08008bd8 <D128_GENERIC>:
 8008bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bdc:	b08d      	sub	sp, #52	; 0x34
 8008bde:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8008be0:	f8d2 a01c 	ldr.w	sl, [r2, #28]
 8008be4:	9109      	str	r1, [sp, #36]	; 0x24
 8008be6:	6911      	ldr	r1, [r2, #16]
 8008be8:	9201      	str	r2, [sp, #4]
 8008bea:	9106      	str	r1, [sp, #24]
 8008bec:	6951      	ldr	r1, [r2, #20]
 8008bee:	9107      	str	r1, [sp, #28]
 8008bf0:	6991      	ldr	r1, [r2, #24]
 8008bf2:	910b      	str	r1, [sp, #44]	; 0x2c
 8008bf4:	6891      	ldr	r1, [r2, #8]
 8008bf6:	9103      	str	r1, [sp, #12]
 8008bf8:	68d1      	ldr	r1, [r2, #12]
 8008bfa:	9102      	str	r1, [sp, #8]
 8008bfc:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8008bfe:	9108      	str	r1, [sp, #32]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	f000 8183 	beq.w	8008f0c <D128_GENERIC+0x334>
 8008c06:	2300      	movs	r3, #0
 8008c08:	6a12      	ldr	r2, [r2, #32]
 8008c0a:	4681      	mov	r9, r0
 8008c0c:	920a      	str	r2, [sp, #40]	; 0x28
 8008c0e:	e9cd a304 	strd	sl, r3, [sp, #16]
 8008c12:	e165      	b.n	8008ee0 <D128_GENERIC+0x308>
 8008c14:	b2d2      	uxtb	r2, r2
 8008c16:	f899 b000 	ldrb.w	fp, [r9]
 8008c1a:	b213      	sxth	r3, r2
 8008c1c:	4255      	negs	r5, r2
 8008c1e:	f819 0002 	ldrb.w	r0, [r9, r2]
 8008c22:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8008c26:	009f      	lsls	r7, r3, #2
 8008c28:	eb09 0402 	add.w	r4, r9, r2
 8008c2c:	ebc3 06c3 	rsb	r6, r3, r3, lsl #3
 8008c30:	f819 8002 	ldrb.w	r8, [r9, r2]
 8008c34:	443b      	add	r3, r7
 8008c36:	1962      	adds	r2, r4, r5
 8008c38:	5d64      	ldrb	r4, [r4, r5]
 8008c3a:	eb02 0c03 	add.w	ip, r2, r3
 8008c3e:	0424      	lsls	r4, r4, #16
 8008c40:	5cd3      	ldrb	r3, [r2, r3]
 8008c42:	eb0c 0e05 	add.w	lr, ip, r5
 8008c46:	f81c 9015 	ldrb.w	r9, [ip, r5, lsl #1]
 8008c4a:	f81c 2005 	ldrb.w	r2, [ip, r5]
 8008c4e:	eb04 6408 	add.w	r4, r4, r8, lsl #24
 8008c52:	eb0e 0c45 	add.w	ip, lr, r5, lsl #1
 8008c56:	f81e 8015 	ldrb.w	r8, [lr, r5, lsl #1]
 8008c5a:	eb04 2400 	add.w	r4, r4, r0, lsl #8
 8008c5e:	eb0c 0e06 	add.w	lr, ip, r6
 8008c62:	f81c a006 	ldrb.w	sl, [ip, r6]
 8008c66:	0412      	lsls	r2, r2, #16
 8008c68:	445c      	add	r4, fp
 8008c6a:	eb0e 0c05 	add.w	ip, lr, r5
 8008c6e:	eb02 6203 	add.w	r2, r2, r3, lsl #24
 8008c72:	f81e 3005 	ldrb.w	r3, [lr, r5]
 8008c76:	eb0c 0045 	add.w	r0, ip, r5, lsl #1
 8008c7a:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 8008c7e:	041b      	lsls	r3, r3, #16
 8008c80:	f81c c015 	ldrb.w	ip, [ip, r5, lsl #1]
 8008c84:	eb00 0b06 	add.w	fp, r0, r6
 8008c88:	5d80      	ldrb	r0, [r0, r6]
 8008c8a:	eb03 630a 	add.w	r3, r3, sl, lsl #24
 8008c8e:	f81b 6005 	ldrb.w	r6, [fp, r5]
 8008c92:	eb0b 0a05 	add.w	sl, fp, r5
 8008c96:	eb02 2209 	add.w	r2, r2, r9, lsl #8
 8008c9a:	f81b b015 	ldrb.w	fp, [fp, r5, lsl #1]
 8008c9e:	0436      	lsls	r6, r6, #16
 8008ca0:	eb0a 0945 	add.w	r9, sl, r5, lsl #1
 8008ca4:	4442      	add	r2, r8
 8008ca6:	eb06 6600 	add.w	r6, r6, r0, lsl #24
 8008caa:	f81a 8015 	ldrb.w	r8, [sl, r5, lsl #1]
 8008cae:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 8008cb2:	44b9      	add	r9, r7
 8008cb4:	eb06 260b 	add.w	r6, r6, fp, lsl #8
 8008cb8:	4463      	add	r3, ip
 8008cba:	eb06 0508 	add.w	r5, r6, r8
 8008cbe:	b2e7      	uxtb	r7, r4
 8008cc0:	f3c4 2607 	ubfx	r6, r4, #8, #8
 8008cc4:	499b      	ldr	r1, [pc, #620]	; (8008f34 <D128_GENERIC+0x35c>)
 8008cc6:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8008cca:	0e24      	lsrs	r4, r4, #24
 8008ccc:	f851 c027 	ldr.w	ip, [r1, r7, lsl #2]
 8008cd0:	b2d7      	uxtb	r7, r2
 8008cd2:	f851 b026 	ldr.w	fp, [r1, r6, lsl #2]
 8008cd6:	f3c2 2607 	ubfx	r6, r2, #8, #8
 8008cda:	9904      	ldr	r1, [sp, #16]
 8008cdc:	4461      	add	r1, ip
 8008cde:	468c      	mov	ip, r1
 8008ce0:	4994      	ldr	r1, [pc, #592]	; (8008f34 <D128_GENERIC+0x35c>)
 8008ce2:	eb0b 2b9c 	add.w	fp, fp, ip, lsr #10
 8008ce6:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8008cea:	f851 8024 	ldr.w	r8, [r1, r4, lsl #2]
 8008cee:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8008cf2:	eb00 209b 	add.w	r0, r0, fp, lsr #10
 8008cf6:	f851 e027 	ldr.w	lr, [r1, r7, lsl #2]
 8008cfa:	f851 7026 	ldr.w	r7, [r1, r6, lsl #2]
 8008cfe:	0e12      	lsrs	r2, r2, #24
 8008d00:	eb08 2890 	add.w	r8, r8, r0, lsr #10
 8008d04:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8008d08:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 8008d0c:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8008d10:	eb0e 2e98 	add.w	lr, lr, r8, lsr #10
 8008d14:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8008d18:	b2da      	uxtb	r2, r3
 8008d1a:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8008d1e:	eb07 279e 	add.w	r7, r7, lr, lsr #10
 8008d22:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8008d26:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008d2a:	ea48 4800 	orr.w	r8, r8, r0, lsl #16
 8008d2e:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 8008d32:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8008d36:	ea4b 4b0c 	orr.w	fp, fp, ip, lsl #16
 8008d3a:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8008d3e:	eb06 269a 	add.w	r6, r6, sl, lsr #10
 8008d42:	f851 c020 	ldr.w	ip, [r1, r0, lsl #2]
 8008d46:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8008d4a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8008d4e:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 8008d52:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8008d56:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 8008d5a:	0e1b      	lsrs	r3, r3, #24
 8008d5c:	eb0c 2c92 	add.w	ip, ip, r2, lsr #10
 8008d60:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8008d64:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 8008d68:	ea47 470e 	orr.w	r7, r7, lr, lsl #16
 8008d6c:	b2eb      	uxtb	r3, r5
 8008d6e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8008d72:	eb04 2e9c 	add.w	lr, r4, ip, lsr #10
 8008d76:	f3cc 0409 	ubfx	r4, ip, #0, #10
 8008d7a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008d7e:	ea46 460a 	orr.w	r6, r6, sl, lsl #16
 8008d82:	eb00 209e 	add.w	r0, r0, lr, lsr #10
 8008d86:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8008d8a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008d8e:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8008d92:	eb03 2c90 	add.w	ip, r3, r0, lsr #10
 8008d96:	f851 202a 	ldr.w	r2, [r1, sl, lsl #2]
 8008d9a:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8008d9e:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 8008da2:	eb02 229c 	add.w	r2, r2, ip, lsr #10
 8008da6:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8008daa:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
 8008dae:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8008db2:	f851 302a 	ldr.w	r3, [r1, sl, lsl #2]
 8008db6:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8008dba:	eb05 2592 	add.w	r5, r5, r2, lsr #10
 8008dbe:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8008dc2:	eb03 2e95 	add.w	lr, r3, r5, lsr #10
 8008dc6:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8008dca:	ea42 430c 	orr.w	r3, r2, ip, lsl #16
 8008dce:	ea4f 219e 	mov.w	r1, lr, lsr #10
 8008dd2:	f3ce 0209 	ubfx	r2, lr, #0, #10
 8008dd6:	9104      	str	r1, [sp, #16]
 8008dd8:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8008ddc:	9902      	ldr	r1, [sp, #8]
 8008dde:	4a56      	ldr	r2, [pc, #344]	; (8008f38 <D128_GENERIC+0x360>)
 8008de0:	fb2b 1202 	smlad	r2, fp, r2, r1
 8008de4:	4955      	ldr	r1, [pc, #340]	; (8008f3c <D128_GENERIC+0x364>)
 8008de6:	fb28 2201 	smlad	r2, r8, r1, r2
 8008dea:	4955      	ldr	r1, [pc, #340]	; (8008f40 <D128_GENERIC+0x368>)
 8008dec:	fb27 2201 	smlad	r2, r7, r1, r2
 8008df0:	4954      	ldr	r1, [pc, #336]	; (8008f44 <D128_GENERIC+0x36c>)
 8008df2:	fb26 2201 	smlad	r2, r6, r1, r2
 8008df6:	4954      	ldr	r1, [pc, #336]	; (8008f48 <D128_GENERIC+0x370>)
 8008df8:	fb24 2201 	smlad	r2, r4, r1, r2
 8008dfc:	4953      	ldr	r1, [pc, #332]	; (8008f4c <D128_GENERIC+0x374>)
 8008dfe:	fb20 2201 	smlad	r2, r0, r1, r2
 8008e02:	4953      	ldr	r1, [pc, #332]	; (8008f50 <D128_GENERIC+0x378>)
 8008e04:	fb23 2201 	smlad	r2, r3, r1, r2
 8008e08:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
 8008e0c:	fb25 2a0c 	smlad	sl, r5, ip, r2
 8008e10:	4950      	ldr	r1, [pc, #320]	; (8008f54 <D128_GENERIC+0x37c>)
 8008e12:	9a03      	ldr	r2, [sp, #12]
 8008e14:	fb2b 2c01 	smlad	ip, fp, r1, r2
 8008e18:	4a4f      	ldr	r2, [pc, #316]	; (8008f58 <D128_GENERIC+0x380>)
 8008e1a:	fb28 ce02 	smlad	lr, r8, r2, ip
 8008e1e:	f8df c150 	ldr.w	ip, [pc, #336]	; 8008f70 <D128_GENERIC+0x398>
 8008e22:	fb27 ec0c 	smlad	ip, r7, ip, lr
 8008e26:	f8df e14c 	ldr.w	lr, [pc, #332]	; 8008f74 <D128_GENERIC+0x39c>
 8008e2a:	fb26 cc0e 	smlad	ip, r6, lr, ip
 8008e2e:	f8df e148 	ldr.w	lr, [pc, #328]	; 8008f78 <D128_GENERIC+0x3a0>
 8008e32:	fb24 ce0e 	smlad	lr, r4, lr, ip
 8008e36:	f8df c144 	ldr.w	ip, [pc, #324]	; 8008f7c <D128_GENERIC+0x3a4>
 8008e3a:	fb20 ee0c 	smlad	lr, r0, ip, lr
 8008e3e:	f8df c140 	ldr.w	ip, [pc, #320]	; 8008f80 <D128_GENERIC+0x3a8>
 8008e42:	fb23 ec0c 	smlad	ip, r3, ip, lr
 8008e46:	f8df e13c 	ldr.w	lr, [pc, #316]	; 8008f84 <D128_GENERIC+0x3ac>
 8008e4a:	fb25 c20e 	smlad	r2, r5, lr, ip
 8008e4e:	f04f 0c01 	mov.w	ip, #1
 8008e52:	9202      	str	r2, [sp, #8]
 8008e54:	fb2b fb0c 	smuad	fp, fp, ip
 8008e58:	f8df c12c 	ldr.w	ip, [pc, #300]	; 8008f88 <D128_GENERIC+0x3b0>
 8008e5c:	fb28 bb0c 	smlad	fp, r8, ip, fp
 8008e60:	f8df c128 	ldr.w	ip, [pc, #296]	; 8008f8c <D128_GENERIC+0x3b4>
 8008e64:	fb27 bb0c 	smlad	fp, r7, ip, fp
 8008e68:	4f3c      	ldr	r7, [pc, #240]	; (8008f5c <D128_GENERIC+0x384>)
 8008e6a:	fb26 bb07 	smlad	fp, r6, r7, fp
 8008e6e:	4f3c      	ldr	r7, [pc, #240]	; (8008f60 <D128_GENERIC+0x388>)
 8008e70:	fb24 bb07 	smlad	fp, r4, r7, fp
 8008e74:	4f3b      	ldr	r7, [pc, #236]	; (8008f64 <D128_GENERIC+0x38c>)
 8008e76:	fb20 bb07 	smlad	fp, r0, r7, fp
 8008e7a:	4f3b      	ldr	r7, [pc, #236]	; (8008f68 <D128_GENERIC+0x390>)
 8008e7c:	fb23 bb07 	smlad	fp, r3, r7, fp
 8008e80:	4b3a      	ldr	r3, [pc, #232]	; (8008f6c <D128_GENERIC+0x394>)
 8008e82:	fb25 b303 	smlad	r3, r5, r3, fp
 8008e86:	9303      	str	r3, [sp, #12]
 8008e88:	f5aa 1480 	sub.w	r4, sl, #1048576	; 0x100000
 8008e8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e8e:	b183      	cbz	r3, 8008eb2 <D128_GENERIC+0x2da>
 8008e90:	9a06      	ldr	r2, [sp, #24]
 8008e92:	9907      	ldr	r1, [sp, #28]
 8008e94:	4422      	add	r2, r4
 8008e96:	9407      	str	r4, [sp, #28]
 8008e98:	1a52      	subs	r2, r2, r1
 8008e9a:	fba2 0103 	umull	r0, r1, r2, r3
 8008e9e:	17d5      	asrs	r5, r2, #31
 8008ea0:	f110 4200 	adds.w	r2, r0, #2147483648	; 0x80000000
 8008ea4:	fb03 1105 	mla	r1, r3, r5, r1
 8008ea8:	f141 0300 	adc.w	r3, r1, #0
 8008eac:	005b      	lsls	r3, r3, #1
 8008eae:	461c      	mov	r4, r3
 8008eb0:	9306      	str	r3, [sp, #24]
 8008eb2:	9d01      	ldr	r5, [sp, #4]
 8008eb4:	01e4      	lsls	r4, r4, #7
 8008eb6:	9e05      	ldr	r6, [sp, #20]
 8008eb8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008ebc:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	9908      	ldr	r1, [sp, #32]
 8008ec2:	fb06 f000 	mul.w	r0, r6, r0
 8008ec6:	3601      	adds	r6, #1
 8008ec8:	fbc1 2304 	smlal	r2, r3, r1, r4
 8008ecc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ece:	109b      	asrs	r3, r3, #2
 8008ed0:	9605      	str	r6, [sp, #20]
 8008ed2:	f303 030f 	ssat	r3, #16, r3
 8008ed6:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
 8008eda:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 8008edc:	42b3      	cmp	r3, r6
 8008ede:	dd13      	ble.n	8008f08 <D128_GENERIC+0x330>
 8008ee0:	9b01      	ldr	r3, [sp, #4]
 8008ee2:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8008ee4:	2a01      	cmp	r2, #1
 8008ee6:	f47f ae95 	bne.w	8008c14 <D128_GENERIC+0x3c>
 8008eea:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008eec:	f109 0610 	add.w	r6, r9, #16
 8008ef0:	0681      	lsls	r1, r0, #26
 8008ef2:	e9d9 4200 	ldrd	r4, r2, [r9]
 8008ef6:	e9d9 3502 	ldrd	r3, r5, [r9, #8]
 8008efa:	d518      	bpl.n	8008f2e <D128_GENERIC+0x356>
 8008efc:	ba64      	rev16	r4, r4
 8008efe:	ba52      	rev16	r2, r2
 8008f00:	ba5b      	rev16	r3, r3
 8008f02:	ba6d      	rev16	r5, r5
 8008f04:	46b1      	mov	r9, r6
 8008f06:	e6da      	b.n	8008cbe <D128_GENERIC+0xe6>
 8008f08:	f8dd a010 	ldr.w	sl, [sp, #16]
 8008f0c:	9b01      	ldr	r3, [sp, #4]
 8008f0e:	2000      	movs	r0, #0
 8008f10:	9903      	ldr	r1, [sp, #12]
 8008f12:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008f14:	6099      	str	r1, [r3, #8]
 8008f16:	9902      	ldr	r1, [sp, #8]
 8008f18:	f8c3 a01c 	str.w	sl, [r3, #28]
 8008f1c:	60d9      	str	r1, [r3, #12]
 8008f1e:	9906      	ldr	r1, [sp, #24]
 8008f20:	619a      	str	r2, [r3, #24]
 8008f22:	6119      	str	r1, [r3, #16]
 8008f24:	9907      	ldr	r1, [sp, #28]
 8008f26:	6159      	str	r1, [r3, #20]
 8008f28:	b00d      	add	sp, #52	; 0x34
 8008f2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f2e:	46b1      	mov	r9, r6
 8008f30:	e6c5      	b.n	8008cbe <D128_GENERIC+0xe6>
 8008f32:	bf00      	nop
 8008f34:	24000000 	.word	0x24000000
 8008f38:	00780069 	.word	0x00780069
 8008f3c:	005b004e 	.word	0x005b004e
 8008f40:	00420037 	.word	0x00420037
 8008f44:	002d0024 	.word	0x002d0024
 8008f48:	001c0015 	.word	0x001c0015
 8008f4c:	000f000a 	.word	0x000f000a
 8008f50:	00060003 	.word	0x00060003
 8008f54:	00880096 	.word	0x00880096
 8008f58:	00a200ac 	.word	0x00a200ac
 8008f5c:	0015001c 	.word	0x0015001c
 8008f60:	0024002d 	.word	0x0024002d
 8008f64:	00370042 	.word	0x00370042
 8008f68:	004e005b 	.word	0x004e005b
 8008f6c:	00690078 	.word	0x00690078
 8008f70:	00b400ba 	.word	0x00b400ba
 8008f74:	00be00c0 	.word	0x00be00c0
 8008f78:	00c000be 	.word	0x00c000be
 8008f7c:	00ba00b4 	.word	0x00ba00b4
 8008f80:	00ac00a2 	.word	0x00ac00a2
 8008f84:	00960088 	.word	0x00960088
 8008f88:	00030006 	.word	0x00030006
 8008f8c:	000a000f 	.word	0x000a000f

08008f90 <D16_1CH_HTONS_VOL_HP>:
 8008f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f94:	6993      	ldr	r3, [r2, #24]
 8008f96:	b087      	sub	sp, #28
 8008f98:	4682      	mov	sl, r0
 8008f9a:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 8008f9c:	9304      	str	r3, [sp, #16]
 8008f9e:	f8d2 b030 	ldr.w	fp, [r2, #48]	; 0x30
 8008fa2:	69d3      	ldr	r3, [r2, #28]
 8008fa4:	f8d2 e020 	ldr.w	lr, [r2, #32]
 8008fa8:	e9d2 5402 	ldrd	r5, r4, [r2, #8]
 8008fac:	e9d2 6c04 	ldrd	r6, ip, [r2, #16]
 8008fb0:	9403      	str	r4, [sp, #12]
 8008fb2:	2800      	cmp	r0, #0
 8008fb4:	d054      	beq.n	8009060 <D16_1CH_HTONS_VOL_HP+0xd0>
 8008fb6:	f1a1 0902 	sub.w	r9, r1, #2
 8008fba:	eb0a 0140 	add.w	r1, sl, r0, lsl #1
 8008fbe:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 800906c <D16_1CH_HTONS_VOL_HP+0xdc>
 8008fc2:	4650      	mov	r0, sl
 8008fc4:	9101      	str	r1, [sp, #4]
 8008fc6:	4619      	mov	r1, r3
 8008fc8:	f8cd b008 	str.w	fp, [sp, #8]
 8008fcc:	9205      	str	r2, [sp, #20]
 8008fce:	f850 3b02 	ldr.w	r3, [r0], #2
 8008fd2:	ba5b      	rev16	r3, r3
 8008fd4:	b2dc      	uxtb	r4, r3
 8008fd6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8008fda:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008fde:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 8008fe2:	4419      	add	r1, r3
 8008fe4:	eb04 2491 	add.w	r4, r4, r1, lsr #10
 8008fe8:	f3c1 0309 	ubfx	r3, r1, #0, #10
 8008fec:	f3c4 0209 	ubfx	r2, r4, #0, #10
 8008ff0:	0aa1      	lsrs	r1, r4, #10
 8008ff2:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8008ff6:	4a1b      	ldr	r2, [pc, #108]	; (8009064 <D16_1CH_HTONS_VOL_HP+0xd4>)
 8008ff8:	fb23 5402 	smlad	r4, r3, r2, r5
 8008ffc:	4a1a      	ldr	r2, [pc, #104]	; (8009068 <D16_1CH_HTONS_VOL_HP+0xd8>)
 8008ffe:	fb23 f502 	smuad	r5, r3, r2
 8009002:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 8009006:	f04f 4a00 	mov.w	sl, #2147483648	; 0x80000000
 800900a:	f04f 0b00 	mov.w	fp, #0
 800900e:	19a2      	adds	r2, r4, r6
 8009010:	eba2 020c 	sub.w	r2, r2, ip
 8009014:	46a4      	mov	ip, r4
 8009016:	17d7      	asrs	r7, r2, #31
 8009018:	fba2 230e 	umull	r2, r3, r2, lr
 800901c:	f112 4600 	adds.w	r6, r2, #2147483648	; 0x80000000
 8009020:	fb0e 3307 	mla	r3, lr, r7, r3
 8009024:	f143 0700 	adc.w	r7, r3, #0
 8009028:	9b02      	ldr	r3, [sp, #8]
 800902a:	047a      	lsls	r2, r7, #17
 800902c:	007e      	lsls	r6, r7, #1
 800902e:	fbc3 ab02 	smlal	sl, fp, r3, r2
 8009032:	ea4f 03ab 	mov.w	r3, fp, asr #2
 8009036:	f303 030f 	ssat	r3, #16, r3
 800903a:	f829 3f02 	strh.w	r3, [r9, #2]!
 800903e:	9b01      	ldr	r3, [sp, #4]
 8009040:	4298      	cmp	r0, r3
 8009042:	d1c4      	bne.n	8008fce <D16_1CH_HTONS_VOL_HP+0x3e>
 8009044:	460b      	mov	r3, r1
 8009046:	9a05      	ldr	r2, [sp, #20]
 8009048:	2000      	movs	r0, #0
 800904a:	9903      	ldr	r1, [sp, #12]
 800904c:	61d3      	str	r3, [r2, #28]
 800904e:	9b04      	ldr	r3, [sp, #16]
 8009050:	6095      	str	r5, [r2, #8]
 8009052:	60d1      	str	r1, [r2, #12]
 8009054:	6193      	str	r3, [r2, #24]
 8009056:	e9c2 6404 	strd	r6, r4, [r2, #16]
 800905a:	b007      	add	sp, #28
 800905c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009060:	4664      	mov	r4, ip
 8009062:	e7f1      	b.n	8009048 <D16_1CH_HTONS_VOL_HP+0xb8>
 8009064:	00030001 	.word	0x00030001
 8009068:	00010003 	.word	0x00010003
 800906c:	24000000 	.word	0x24000000

08009070 <D24_1CH_HTONS_VOL_HP>:
 8009070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009074:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8009076:	b089      	sub	sp, #36	; 0x24
 8009078:	6993      	ldr	r3, [r2, #24]
 800907a:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800907c:	9604      	str	r6, [sp, #16]
 800907e:	6a16      	ldr	r6, [r2, #32]
 8009080:	9306      	str	r3, [sp, #24]
 8009082:	9505      	str	r5, [sp, #20]
 8009084:	69d3      	ldr	r3, [r2, #28]
 8009086:	9600      	str	r6, [sp, #0]
 8009088:	e9d2 4a04 	ldrd	r4, sl, [r2, #16]
 800908c:	e9d2 ce02 	ldrd	ip, lr, [r2, #8]
 8009090:	2d00      	cmp	r5, #0
 8009092:	f000 8083 	beq.w	800919c <D24_1CH_HTONS_VOL_HP+0x12c>
 8009096:	9207      	str	r2, [sp, #28]
 8009098:	2600      	movs	r6, #0
 800909a:	4622      	mov	r2, r4
 800909c:	f1a1 0b02 	sub.w	fp, r1, #2
 80090a0:	4f3f      	ldr	r7, [pc, #252]	; (80091a0 <D24_1CH_HTONS_VOL_HP+0x130>)
 80090a2:	461d      	mov	r5, r3
 80090a4:	f8cd a00c 	str.w	sl, [sp, #12]
 80090a8:	9c00      	ldr	r4, [sp, #0]
 80090aa:	e056      	b.n	800915a <D24_1CH_HTONS_VOL_HP+0xea>
 80090ac:	7841      	ldrb	r1, [r0, #1]
 80090ae:	eb08 4809 	add.w	r8, r8, r9, lsl #16
 80090b2:	3002      	adds	r0, #2
 80090b4:	4488      	add	r8, r1
 80090b6:	fa5f f388 	uxtb.w	r3, r8
 80090ba:	f3c8 2907 	ubfx	r9, r8, #8, #8
 80090be:	ea4f 4818 	mov.w	r8, r8, lsr #16
 80090c2:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 80090c6:	f857 3029 	ldr.w	r3, [r7, r9, lsl #2]
 80090ca:	eb01 2195 	add.w	r1, r1, r5, lsr #10
 80090ce:	f857 5028 	ldr.w	r5, [r7, r8, lsl #2]
 80090d2:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 80090d6:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80090da:	f3c8 0309 	ubfx	r3, r8, #0, #10
 80090de:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 80090e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80090e6:	492f      	ldr	r1, [pc, #188]	; (80091a4 <D24_1CH_HTONS_VOL_HP+0x134>)
 80090e8:	fb23 e901 	smlad	r9, r3, r1, lr
 80090ec:	492e      	ldr	r1, [pc, #184]	; (80091a8 <D24_1CH_HTONS_VOL_HP+0x138>)
 80090ee:	fb23 ce01 	smlad	lr, r3, r1, ip
 80090f2:	f3c5 0c09 	ubfx	ip, r5, #0, #10
 80090f6:	2101      	movs	r1, #1
 80090f8:	eb0c 084c 	add.w	r8, ip, ip, lsl #1
 80090fc:	eb0e 0e48 	add.w	lr, lr, r8, lsl #1
 8009100:	fb23 f301 	smuad	r3, r3, r1
 8009104:	f5a9 51d8 	sub.w	r1, r9, #6912	; 0x1b00
 8009108:	eb08 0c03 	add.w	ip, r8, r3
 800910c:	9b03      	ldr	r3, [sp, #12]
 800910e:	f04f 0a00 	mov.w	sl, #0
 8009112:	440a      	add	r2, r1
 8009114:	3601      	adds	r6, #1
 8009116:	9103      	str	r1, [sp, #12]
 8009118:	1ad2      	subs	r2, r2, r3
 800911a:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800911e:	fba2 2304 	umull	r2, r3, r2, r4
 8009122:	e9cd 2300 	strd	r2, r3, [sp]
 8009126:	fb04 3309 	mla	r3, r4, r9, r3
 800912a:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 800912e:	9301      	str	r3, [sp, #4]
 8009130:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009134:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8009138:	f143 0300 	adc.w	r3, r3, #0
 800913c:	ea4f 38c3 	mov.w	r8, r3, lsl #15
 8009140:	005a      	lsls	r2, r3, #1
 8009142:	9b04      	ldr	r3, [sp, #16]
 8009144:	fbc3 9a08 	smlal	r9, sl, r3, r8
 8009148:	ea4f 03aa 	mov.w	r3, sl, asr #2
 800914c:	f303 030f 	ssat	r3, #16, r3
 8009150:	f82b 3f02 	strh.w	r3, [fp, #2]!
 8009154:	9b05      	ldr	r3, [sp, #20]
 8009156:	429e      	cmp	r6, r3
 8009158:	d010      	beq.n	800917c <D24_1CH_HTONS_VOL_HP+0x10c>
 800915a:	f890 9003 	ldrb.w	r9, [r0, #3]
 800915e:	f016 0f01 	tst.w	r6, #1
 8009162:	7801      	ldrb	r1, [r0, #0]
 8009164:	ea4f 2309 	mov.w	r3, r9, lsl #8
 8009168:	ea4f 2801 	mov.w	r8, r1, lsl #8
 800916c:	d09e      	beq.n	80090ac <D24_1CH_HTONS_VOL_HP+0x3c>
 800916e:	f890 8002 	ldrb.w	r8, [r0, #2]
 8009172:	3004      	adds	r0, #4
 8009174:	eb03 4808 	add.w	r8, r3, r8, lsl #16
 8009178:	4488      	add	r8, r1
 800917a:	e79c      	b.n	80090b6 <D24_1CH_HTONS_VOL_HP+0x46>
 800917c:	4614      	mov	r4, r2
 800917e:	462b      	mov	r3, r5
 8009180:	9a07      	ldr	r2, [sp, #28]
 8009182:	2000      	movs	r0, #0
 8009184:	61d3      	str	r3, [r2, #28]
 8009186:	9b06      	ldr	r3, [sp, #24]
 8009188:	f8c2 c008 	str.w	ip, [r2, #8]
 800918c:	f8c2 e00c 	str.w	lr, [r2, #12]
 8009190:	6193      	str	r3, [r2, #24]
 8009192:	e9c2 4104 	strd	r4, r1, [r2, #16]
 8009196:	b009      	add	sp, #36	; 0x24
 8009198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800919c:	4651      	mov	r1, sl
 800919e:	e7f0      	b.n	8009182 <D24_1CH_HTONS_VOL_HP+0x112>
 80091a0:	24000000 	.word	0x24000000
 80091a4:	00030001 	.word	0x00030001
 80091a8:	00060007 	.word	0x00060007

080091ac <D32_1CH_HTONS_VOL_HP>:
 80091ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091b0:	6993      	ldr	r3, [r2, #24]
 80091b2:	b087      	sub	sp, #28
 80091b4:	4683      	mov	fp, r0
 80091b6:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 80091b8:	9304      	str	r3, [sp, #16]
 80091ba:	69d5      	ldr	r5, [r2, #28]
 80091bc:	6b14      	ldr	r4, [r2, #48]	; 0x30
 80091be:	f8d2 a020 	ldr.w	sl, [r2, #32]
 80091c2:	e9d2 8e04 	ldrd	r8, lr, [r2, #16]
 80091c6:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 80091ca:	2800      	cmp	r0, #0
 80091cc:	d077      	beq.n	80092be <D32_1CH_HTONS_VOL_HP+0x112>
 80091ce:	460f      	mov	r7, r1
 80091d0:	46f1      	mov	r9, lr
 80091d2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 80091d6:	f8cd 8000 	str.w	r8, [sp]
 80091da:	4e3a      	ldr	r6, [pc, #232]	; (80092c4 <D32_1CH_HTONS_VOL_HP+0x118>)
 80091dc:	469e      	mov	lr, r3
 80091de:	46a0      	mov	r8, r4
 80091e0:	9103      	str	r1, [sp, #12]
 80091e2:	9205      	str	r2, [sp, #20]
 80091e4:	f85b 4b04 	ldr.w	r4, [fp], #4
 80091e8:	ba64      	rev16	r4, r4
 80091ea:	b2e0      	uxtb	r0, r4
 80091ec:	f3c4 2307 	ubfx	r3, r4, #8, #8
 80091f0:	f3c4 4107 	ubfx	r1, r4, #16, #8
 80091f4:	0e24      	lsrs	r4, r4, #24
 80091f6:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80091fa:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80091fe:	eb00 2095 	add.w	r0, r0, r5, lsr #10
 8009202:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8009206:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
 800920a:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 800920e:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8009212:	eb01 2193 	add.w	r1, r1, r3, lsr #10
 8009216:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800921a:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800921e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8009222:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009226:	f3c5 0009 	ubfx	r0, r5, #0, #10
 800922a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800922e:	4826      	ldr	r0, [pc, #152]	; (80092c8 <D32_1CH_HTONS_VOL_HP+0x11c>)
 8009230:	fb23 c400 	smlad	r4, r3, r0, ip
 8009234:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009238:	fb21 4402 	smlad	r4, r1, r2, r4
 800923c:	4823      	ldr	r0, [pc, #140]	; (80092cc <D32_1CH_HTONS_VOL_HP+0x120>)
 800923e:	fb23 ec00 	smlad	ip, r3, r0, lr
 8009242:	4823      	ldr	r0, [pc, #140]	; (80092d0 <D32_1CH_HTONS_VOL_HP+0x124>)
 8009244:	fb21 cc00 	smlad	ip, r1, r0, ip
 8009248:	2201      	movs	r2, #1
 800924a:	fb23 f302 	smuad	r3, r3, r2
 800924e:	4821      	ldr	r0, [pc, #132]	; (80092d4 <D32_1CH_HTONS_VOL_HP+0x128>)
 8009250:	fb21 3e00 	smlad	lr, r1, r0, r3
 8009254:	9b00      	ldr	r3, [sp, #0]
 8009256:	f5a4 4480 	sub.w	r4, r4, #16384	; 0x4000
 800925a:	4423      	add	r3, r4
 800925c:	eba3 0209 	sub.w	r2, r3, r9
 8009260:	46a1      	mov	r9, r4
 8009262:	17d1      	asrs	r1, r2, #31
 8009264:	fba2 230a 	umull	r2, r3, r2, sl
 8009268:	e9cd 2300 	strd	r2, r3, [sp]
 800926c:	fb0a 3301 	mla	r3, sl, r1, r3
 8009270:	9301      	str	r3, [sp, #4]
 8009272:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009276:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800927a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800927e:	f143 0300 	adc.w	r3, r3, #0
 8009282:	0399      	lsls	r1, r3, #14
 8009284:	005b      	lsls	r3, r3, #1
 8009286:	9300      	str	r3, [sp, #0]
 8009288:	2300      	movs	r3, #0
 800928a:	fbc8 2301 	smlal	r2, r3, r8, r1
 800928e:	109b      	asrs	r3, r3, #2
 8009290:	f303 030f 	ssat	r3, #16, r3
 8009294:	f827 3b02 	strh.w	r3, [r7], #2
 8009298:	9b03      	ldr	r3, [sp, #12]
 800929a:	429f      	cmp	r7, r3
 800929c:	d1a2      	bne.n	80091e4 <D32_1CH_HTONS_VOL_HP+0x38>
 800929e:	4673      	mov	r3, lr
 80092a0:	f8dd 8000 	ldr.w	r8, [sp]
 80092a4:	9a05      	ldr	r2, [sp, #20]
 80092a6:	6093      	str	r3, [r2, #8]
 80092a8:	2000      	movs	r0, #0
 80092aa:	9b04      	ldr	r3, [sp, #16]
 80092ac:	f8c2 c00c 	str.w	ip, [r2, #12]
 80092b0:	61d5      	str	r5, [r2, #28]
 80092b2:	6193      	str	r3, [r2, #24]
 80092b4:	e9c2 8404 	strd	r8, r4, [r2, #16]
 80092b8:	b007      	add	sp, #28
 80092ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092be:	4674      	mov	r4, lr
 80092c0:	e7f1      	b.n	80092a6 <D32_1CH_HTONS_VOL_HP+0xfa>
 80092c2:	bf00      	nop
 80092c4:	24000000 	.word	0x24000000
 80092c8:	00060003 	.word	0x00060003
 80092cc:	000a000c 	.word	0x000a000c
 80092d0:	000c000a 	.word	0x000c000a
 80092d4:	00030006 	.word	0x00030006

080092d8 <D48_1CH_HTONS_VOL_HP>:
 80092d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092dc:	6b17      	ldr	r7, [r2, #48]	; 0x30
 80092de:	b087      	sub	sp, #28
 80092e0:	6993      	ldr	r3, [r2, #24]
 80092e2:	9701      	str	r7, [sp, #4]
 80092e4:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 80092e6:	6a17      	ldr	r7, [r2, #32]
 80092e8:	9304      	str	r3, [sp, #16]
 80092ea:	69d6      	ldr	r6, [r2, #28]
 80092ec:	9702      	str	r7, [sp, #8]
 80092ee:	e9d2 4e04 	ldrd	r4, lr, [r2, #16]
 80092f2:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 80092f6:	2d00      	cmp	r5, #0
 80092f8:	f000 8093 	beq.w	8009422 <D48_1CH_HTONS_VOL_HP+0x14a>
 80092fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009300:	f1a1 0b02 	sub.w	fp, r1, #2
 8009304:	46f2      	mov	sl, lr
 8009306:	4f48      	ldr	r7, [pc, #288]	; (8009428 <D48_1CH_HTONS_VOL_HP+0x150>)
 8009308:	eb00 0145 	add.w	r1, r0, r5, lsl #1
 800930c:	469e      	mov	lr, r3
 800930e:	9205      	str	r2, [sp, #20]
 8009310:	9103      	str	r1, [sp, #12]
 8009312:	e9d0 3200 	ldrd	r3, r2, [r0]
 8009316:	3006      	adds	r0, #6
 8009318:	ba5b      	rev16	r3, r3
 800931a:	fa92 f992 	rev16.w	r9, r2
 800931e:	b2dd      	uxtb	r5, r3
 8009320:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8009324:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8009328:	0e1b      	lsrs	r3, r3, #24
 800932a:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 800932e:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8009332:	eb05 2696 	add.w	r6, r5, r6, lsr #10
 8009336:	f857 5022 	ldr.w	r5, [r7, r2, lsl #2]
 800933a:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800933e:	fa5f f289 	uxtb.w	r2, r9
 8009342:	eb01 2196 	add.w	r1, r1, r6, lsr #10
 8009346:	f3c9 2907 	ubfx	r9, r9, #8, #8
 800934a:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800934e:	f3c6 0809 	ubfx	r8, r6, #0, #10
 8009352:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 8009356:	f857 6029 	ldr.w	r6, [r7, r9, lsl #2]
 800935a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800935e:	eb03 2395 	add.w	r3, r3, r5, lsr #10
 8009362:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8009366:	ea41 4808 	orr.w	r8, r1, r8, lsl #16
 800936a:	eb02 2293 	add.w	r2, r2, r3, lsr #10
 800936e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009372:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 8009376:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800937a:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 800937e:	f3c6 0309 	ubfx	r3, r6, #0, #10
 8009382:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8009386:	4b29      	ldr	r3, [pc, #164]	; (800942c <D48_1CH_HTONS_VOL_HP+0x154>)
 8009388:	fb28 c103 	smlad	r1, r8, r3, ip
 800938c:	4b28      	ldr	r3, [pc, #160]	; (8009430 <D48_1CH_HTONS_VOL_HP+0x158>)
 800938e:	fb25 1103 	smlad	r1, r5, r3, r1
 8009392:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009396:	fb22 1903 	smlad	r9, r2, r3, r1
 800939a:	4b26      	ldr	r3, [pc, #152]	; (8009434 <D48_1CH_HTONS_VOL_HP+0x15c>)
 800939c:	fb28 ec03 	smlad	ip, r8, r3, lr
 80093a0:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 80093a4:	fb25 cc03 	smlad	ip, r5, r3, ip
 80093a8:	4b23      	ldr	r3, [pc, #140]	; (8009438 <D48_1CH_HTONS_VOL_HP+0x160>)
 80093aa:	fb22 cc03 	smlad	ip, r2, r3, ip
 80093ae:	2101      	movs	r1, #1
 80093b0:	fb28 f801 	smuad	r8, r8, r1
 80093b4:	4b21      	ldr	r3, [pc, #132]	; (800943c <D48_1CH_HTONS_VOL_HP+0x164>)
 80093b6:	fb25 8503 	smlad	r5, r5, r3, r8
 80093ba:	4b21      	ldr	r3, [pc, #132]	; (8009440 <D48_1CH_HTONS_VOL_HP+0x168>)
 80093bc:	fb22 5e03 	smlad	lr, r2, r3, r5
 80093c0:	f5a9 4158 	sub.w	r1, r9, #55296	; 0xd800
 80093c4:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 80093c8:	190a      	adds	r2, r1, r4
 80093ca:	9c02      	ldr	r4, [sp, #8]
 80093cc:	eba2 020a 	sub.w	r2, r2, sl
 80093d0:	468a      	mov	sl, r1
 80093d2:	ea4f 79e2 	mov.w	r9, r2, asr #31
 80093d6:	fba2 2304 	umull	r2, r3, r2, r4
 80093da:	fb04 3309 	mla	r3, r4, r9, r3
 80093de:	f112 4400 	adds.w	r4, r2, #2147483648	; 0x80000000
 80093e2:	f04f 0900 	mov.w	r9, #0
 80093e6:	f143 0500 	adc.w	r5, r3, #0
 80093ea:	9b01      	ldr	r3, [sp, #4]
 80093ec:	032a      	lsls	r2, r5, #12
 80093ee:	006c      	lsls	r4, r5, #1
 80093f0:	fbc3 8902 	smlal	r8, r9, r3, r2
 80093f4:	ea4f 03a9 	mov.w	r3, r9, asr #2
 80093f8:	f303 030f 	ssat	r3, #16, r3
 80093fc:	f82b 3f02 	strh.w	r3, [fp, #2]!
 8009400:	9b03      	ldr	r3, [sp, #12]
 8009402:	4283      	cmp	r3, r0
 8009404:	d185      	bne.n	8009312 <D48_1CH_HTONS_VOL_HP+0x3a>
 8009406:	4673      	mov	r3, lr
 8009408:	9a05      	ldr	r2, [sp, #20]
 800940a:	6093      	str	r3, [r2, #8]
 800940c:	2000      	movs	r0, #0
 800940e:	9b04      	ldr	r3, [sp, #16]
 8009410:	f8c2 c00c 	str.w	ip, [r2, #12]
 8009414:	61d6      	str	r6, [r2, #28]
 8009416:	6193      	str	r3, [r2, #24]
 8009418:	e9c2 4104 	strd	r4, r1, [r2, #16]
 800941c:	b007      	add	sp, #28
 800941e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009422:	4671      	mov	r1, lr
 8009424:	e7f1      	b.n	800940a <D48_1CH_HTONS_VOL_HP+0x132>
 8009426:	bf00      	nop
 8009428:	24000000 	.word	0x24000000
 800942c:	000f000a 	.word	0x000f000a
 8009430:	00060003 	.word	0x00060003
 8009434:	00150019 	.word	0x00150019
 8009438:	00190015 	.word	0x00190015
 800943c:	00030006 	.word	0x00030006
 8009440:	000a000f 	.word	0x000a000f

08009444 <D64_1CH_HTONS_VOL_HP>:
 8009444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009448:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800944a:	b089      	sub	sp, #36	; 0x24
 800944c:	6993      	ldr	r3, [r2, #24]
 800944e:	4686      	mov	lr, r0
 8009450:	9503      	str	r5, [sp, #12]
 8009452:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 8009454:	6a15      	ldr	r5, [r2, #32]
 8009456:	9306      	str	r3, [sp, #24]
 8009458:	69d6      	ldr	r6, [r2, #28]
 800945a:	9504      	str	r5, [sp, #16]
 800945c:	e9d2 8404 	ldrd	r8, r4, [r2, #16]
 8009460:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 8009464:	2800      	cmp	r0, #0
 8009466:	f000 80a4 	beq.w	80095b2 <D64_1CH_HTONS_VOL_HP+0x16e>
 800946a:	460f      	mov	r7, r1
 800946c:	46f1      	mov	r9, lr
 800946e:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8009472:	4d56      	ldr	r5, [pc, #344]	; (80095cc <D64_1CH_HTONS_VOL_HP+0x188>)
 8009474:	46a2      	mov	sl, r4
 8009476:	469e      	mov	lr, r3
 8009478:	9105      	str	r1, [sp, #20]
 800947a:	9207      	str	r2, [sp, #28]
 800947c:	f859 1b08 	ldr.w	r1, [r9], #8
 8009480:	f859 3c04 	ldr.w	r3, [r9, #-4]
 8009484:	ba49      	rev16	r1, r1
 8009486:	fa93 fb93 	rev16.w	fp, r3
 800948a:	b2cb      	uxtb	r3, r1
 800948c:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8009490:	f3c1 4007 	ubfx	r0, r1, #16, #8
 8009494:	0e09      	lsrs	r1, r1, #24
 8009496:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
 800949a:	fa5f f38b 	uxtb.w	r3, fp
 800949e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80094a2:	4426      	add	r6, r4
 80094a4:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 80094a8:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 80094ac:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 80094b0:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 80094b4:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80094b8:	f3cb 2307 	ubfx	r3, fp, #8, #8
 80094bc:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 80094c0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80094c4:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80094c8:	eb01 2194 	add.w	r1, r1, r4, lsr #10
 80094cc:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80094d0:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80094d4:	f3cb 4607 	ubfx	r6, fp, #16, #8
 80094d8:	eb00 2091 	add.w	r0, r0, r1, lsr #10
 80094dc:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80094e0:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 80094e4:	ea4f 6b1b 	mov.w	fp, fp, lsr #24
 80094e8:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 80094ec:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80094f0:	f855 b02b 	ldr.w	fp, [r5, fp, lsl #2]
 80094f4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80094f8:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 80094fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009500:	eb0b 2b96 	add.w	fp, fp, r6, lsr #10
 8009504:	f3c6 0409 	ubfx	r4, r6, #0, #10
 8009508:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800950c:	f3cb 0009 	ubfx	r0, fp, #0, #10
 8009510:	ea4f 269b 	mov.w	r6, fp, lsr #10
 8009514:	ea40 4b04 	orr.w	fp, r0, r4, lsl #16
 8009518:	482d      	ldr	r0, [pc, #180]	; (80095d0 <D64_1CH_HTONS_VOL_HP+0x18c>)
 800951a:	fb22 cc00 	smlad	ip, r2, r0, ip
 800951e:	482d      	ldr	r0, [pc, #180]	; (80095d4 <D64_1CH_HTONS_VOL_HP+0x190>)
 8009520:	fb21 cc00 	smlad	ip, r1, r0, ip
 8009524:	482c      	ldr	r0, [pc, #176]	; (80095d8 <D64_1CH_HTONS_VOL_HP+0x194>)
 8009526:	fb23 cc00 	smlad	ip, r3, r0, ip
 800952a:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 800952e:	fb2b c404 	smlad	r4, fp, r4, ip
 8009532:	482a      	ldr	r0, [pc, #168]	; (80095dc <D64_1CH_HTONS_VOL_HP+0x198>)
 8009534:	fb22 ec00 	smlad	ip, r2, r0, lr
 8009538:	fb2b cc10 	smladx	ip, fp, r0, ip
 800953c:	4828      	ldr	r0, [pc, #160]	; (80095e0 <D64_1CH_HTONS_VOL_HP+0x19c>)
 800953e:	fb21 cc00 	smlad	ip, r1, r0, ip
 8009542:	fb23 cc10 	smladx	ip, r3, r0, ip
 8009546:	f04f 0e01 	mov.w	lr, #1
 800954a:	fb22 f20e 	smuad	r2, r2, lr
 800954e:	4825      	ldr	r0, [pc, #148]	; (80095e4 <D64_1CH_HTONS_VOL_HP+0x1a0>)
 8009550:	fb21 2100 	smlad	r1, r1, r0, r2
 8009554:	4a24      	ldr	r2, [pc, #144]	; (80095e8 <D64_1CH_HTONS_VOL_HP+0x1a4>)
 8009556:	fb23 1302 	smlad	r3, r3, r2, r1
 800955a:	4a24      	ldr	r2, [pc, #144]	; (80095ec <D64_1CH_HTONS_VOL_HP+0x1a8>)
 800955c:	fb2b 3e02 	smlad	lr, fp, r2, r3
 8009560:	f5a4 3400 	sub.w	r4, r4, #131072	; 0x20000
 8009564:	eb04 0208 	add.w	r2, r4, r8
 8009568:	eba2 020a 	sub.w	r2, r2, sl
 800956c:	46a2      	mov	sl, r4
 800956e:	4610      	mov	r0, r2
 8009570:	17d1      	asrs	r1, r2, #31
 8009572:	e9cd 0100 	strd	r0, r1, [sp]
 8009576:	9904      	ldr	r1, [sp, #16]
 8009578:	9801      	ldr	r0, [sp, #4]
 800957a:	fba2 2301 	umull	r2, r3, r2, r1
 800957e:	fb01 3300 	mla	r3, r1, r0, r3
 8009582:	f112 4000 	adds.w	r0, r2, #2147483648	; 0x80000000
 8009586:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800958a:	f143 0100 	adc.w	r1, r3, #0
 800958e:	9b03      	ldr	r3, [sp, #12]
 8009590:	02ca      	lsls	r2, r1, #11
 8009592:	ea4f 0841 	mov.w	r8, r1, lsl #1
 8009596:	2100      	movs	r1, #0
 8009598:	fbc3 0102 	smlal	r0, r1, r3, r2
 800959c:	108b      	asrs	r3, r1, #2
 800959e:	f303 030f 	ssat	r3, #16, r3
 80095a2:	f827 3b02 	strh.w	r3, [r7], #2
 80095a6:	9b05      	ldr	r3, [sp, #20]
 80095a8:	429f      	cmp	r7, r3
 80095aa:	f47f af67 	bne.w	800947c <D64_1CH_HTONS_VOL_HP+0x38>
 80095ae:	4673      	mov	r3, lr
 80095b0:	9a07      	ldr	r2, [sp, #28]
 80095b2:	6093      	str	r3, [r2, #8]
 80095b4:	2000      	movs	r0, #0
 80095b6:	9b06      	ldr	r3, [sp, #24]
 80095b8:	f8c2 c00c 	str.w	ip, [r2, #12]
 80095bc:	61d6      	str	r6, [r2, #28]
 80095be:	6193      	str	r3, [r2, #24]
 80095c0:	e9c2 8404 	strd	r8, r4, [r2, #16]
 80095c4:	b009      	add	sp, #36	; 0x24
 80095c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095ca:	bf00      	nop
 80095cc:	24000000 	.word	0x24000000
 80095d0:	001c0015 	.word	0x001c0015
 80095d4:	000f000a 	.word	0x000f000a
 80095d8:	00060003 	.word	0x00060003
 80095dc:	0024002a 	.word	0x0024002a
 80095e0:	002e0030 	.word	0x002e0030
 80095e4:	00030006 	.word	0x00030006
 80095e8:	000a000f 	.word	0x000a000f
 80095ec:	0015001c 	.word	0x0015001c

080095f0 <D80_1CH_HTONS_VOL_HP>:
 80095f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095f4:	6913      	ldr	r3, [r2, #16]
 80095f6:	b089      	sub	sp, #36	; 0x24
 80095f8:	6b16      	ldr	r6, [r2, #48]	; 0x30
 80095fa:	9301      	str	r3, [sp, #4]
 80095fc:	9603      	str	r6, [sp, #12]
 80095fe:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8009600:	6a16      	ldr	r6, [r2, #32]
 8009602:	e9d2 5305 	ldrd	r5, r3, [r2, #20]
 8009606:	e9d2 7c02 	ldrd	r7, ip, [r2, #8]
 800960a:	9306      	str	r3, [sp, #24]
 800960c:	9604      	str	r6, [sp, #16]
 800960e:	69d3      	ldr	r3, [r2, #28]
 8009610:	2c00      	cmp	r4, #0
 8009612:	f000 80ce 	beq.w	80097b2 <D80_1CH_HTONS_VOL_HP+0x1c2>
 8009616:	3902      	subs	r1, #2
 8009618:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800961c:	4e66      	ldr	r6, [pc, #408]	; (80097b8 <D80_1CH_HTONS_VOL_HP+0x1c8>)
 800961e:	469e      	mov	lr, r3
 8009620:	9102      	str	r1, [sp, #8]
 8009622:	46aa      	mov	sl, r5
 8009624:	eb00 0144 	add.w	r1, r0, r4, lsl #1
 8009628:	9207      	str	r2, [sp, #28]
 800962a:	9105      	str	r1, [sp, #20]
 800962c:	6883      	ldr	r3, [r0, #8]
 800962e:	e9d0 4200 	ldrd	r4, r2, [r0]
 8009632:	300a      	adds	r0, #10
 8009634:	ba64      	rev16	r4, r4
 8009636:	ba52      	rev16	r2, r2
 8009638:	fa93 fb93 	rev16.w	fp, r3
 800963c:	b2e5      	uxtb	r5, r4
 800963e:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8009642:	f3c4 4107 	ubfx	r1, r4, #16, #8
 8009646:	0e24      	lsrs	r4, r4, #24
 8009648:	f856 8025 	ldr.w	r8, [r6, r5, lsl #2]
 800964c:	b2d5      	uxtb	r5, r2
 800964e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8009652:	44c6      	add	lr, r8
 8009654:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8009658:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
 800965c:	eb03 239e 	add.w	r3, r3, lr, lsr #10
 8009660:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 8009664:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8009668:	eb01 2993 	add.w	r9, r1, r3, lsr #10
 800966c:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8009670:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009674:	eb04 2499 	add.w	r4, r4, r9, lsr #10
 8009678:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800967c:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8009680:	f3cb 2e07 	ubfx	lr, fp, #8, #8
 8009684:	eb05 2894 	add.w	r8, r5, r4, lsr #10
 8009688:	f3c2 4507 	ubfx	r5, r2, #16, #8
 800968c:	0e12      	lsrs	r2, r2, #24
 800968e:	f856 e02e 	ldr.w	lr, [r6, lr, lsl #2]
 8009692:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 8009696:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 800969a:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 800969e:	fa5f fb8b 	uxtb.w	fp, fp
 80096a2:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 80096a6:	f3c8 0809 	ubfx	r8, r8, #0, #10
 80096aa:	f856 b02b 	ldr.w	fp, [r6, fp, lsl #2]
 80096ae:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80096b2:	eb02 2295 	add.w	r2, r2, r5, lsr #10
 80096b6:	f3c9 0909 	ubfx	r9, r9, #0, #10
 80096ba:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80096be:	ea41 4808 	orr.w	r8, r1, r8, lsl #16
 80096c2:	eb0b 2b92 	add.w	fp, fp, r2, lsr #10
 80096c6:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80096ca:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80096ce:	eb0e 2e9b 	add.w	lr, lr, fp, lsr #10
 80096d2:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 80096d6:	ea44 4409 	orr.w	r4, r4, r9, lsl #16
 80096da:	f3ce 0109 	ubfx	r1, lr, #0, #10
 80096de:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 80096e2:	ea4f 2e9e 	mov.w	lr, lr, lsr #10
 80096e6:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 80096ea:	4934      	ldr	r1, [pc, #208]	; (80097bc <D80_1CH_HTONS_VOL_HP+0x1cc>)
 80096ec:	fb23 cc01 	smlad	ip, r3, r1, ip
 80096f0:	4933      	ldr	r1, [pc, #204]	; (80097c0 <D80_1CH_HTONS_VOL_HP+0x1d0>)
 80096f2:	fb24 cc01 	smlad	ip, r4, r1, ip
 80096f6:	4933      	ldr	r1, [pc, #204]	; (80097c4 <D80_1CH_HTONS_VOL_HP+0x1d4>)
 80096f8:	fb28 cc01 	smlad	ip, r8, r1, ip
 80096fc:	4932      	ldr	r1, [pc, #200]	; (80097c8 <D80_1CH_HTONS_VOL_HP+0x1d8>)
 80096fe:	fb22 cc01 	smlad	ip, r2, r1, ip
 8009702:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8009706:	fb2b c901 	smlad	r9, fp, r1, ip
 800970a:	4930      	ldr	r1, [pc, #192]	; (80097cc <D80_1CH_HTONS_VOL_HP+0x1dc>)
 800970c:	fb23 7701 	smlad	r7, r3, r1, r7
 8009710:	492f      	ldr	r1, [pc, #188]	; (80097d0 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 8009712:	fb24 7701 	smlad	r7, r4, r1, r7
 8009716:	f04f 1c4b 	mov.w	ip, #4915275	; 0x4b004b
 800971a:	fb28 7c0c 	smlad	ip, r8, ip, r7
 800971e:	492d      	ldr	r1, [pc, #180]	; (80097d4 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 8009720:	fb22 cc01 	smlad	ip, r2, r1, ip
 8009724:	492c      	ldr	r1, [pc, #176]	; (80097d8 <D80_1CH_HTONS_VOL_HP+0x1e8>)
 8009726:	fb2b cc01 	smlad	ip, fp, r1, ip
 800972a:	2101      	movs	r1, #1
 800972c:	fb23 f301 	smuad	r3, r3, r1
 8009730:	492a      	ldr	r1, [pc, #168]	; (80097dc <D80_1CH_HTONS_VOL_HP+0x1ec>)
 8009732:	fb24 3401 	smlad	r4, r4, r1, r3
 8009736:	492a      	ldr	r1, [pc, #168]	; (80097e0 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 8009738:	fb28 4101 	smlad	r1, r8, r1, r4
 800973c:	4f29      	ldr	r7, [pc, #164]	; (80097e4 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 800973e:	fb22 1207 	smlad	r2, r2, r7, r1
 8009742:	4f29      	ldr	r7, [pc, #164]	; (80097e8 <D80_1CH_HTONS_VOL_HP+0x1f8>)
 8009744:	fb2b 2707 	smlad	r7, fp, r7, r2
 8009748:	f5a9 317a 	sub.w	r1, r9, #256000	; 0x3e800
 800974c:	9b01      	ldr	r3, [sp, #4]
 800974e:	9c04      	ldr	r4, [sp, #16]
 8009750:	440b      	add	r3, r1
 8009752:	eba3 020a 	sub.w	r2, r3, sl
 8009756:	468a      	mov	sl, r1
 8009758:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800975c:	fba2 2304 	umull	r2, r3, r2, r4
 8009760:	fb04 3309 	mla	r3, r4, r9, r3
 8009764:	f112 4400 	adds.w	r4, r2, #2147483648	; 0x80000000
 8009768:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800976c:	f143 0500 	adc.w	r5, r3, #0
 8009770:	006b      	lsls	r3, r5, #1
 8009772:	02aa      	lsls	r2, r5, #10
 8009774:	2500      	movs	r5, #0
 8009776:	9301      	str	r3, [sp, #4]
 8009778:	9b03      	ldr	r3, [sp, #12]
 800977a:	fbc3 4502 	smlal	r4, r5, r3, r2
 800977e:	9a02      	ldr	r2, [sp, #8]
 8009780:	10ab      	asrs	r3, r5, #2
 8009782:	f303 030f 	ssat	r3, #16, r3
 8009786:	f822 3f02 	strh.w	r3, [r2, #2]!
 800978a:	9b05      	ldr	r3, [sp, #20]
 800978c:	9202      	str	r2, [sp, #8]
 800978e:	4298      	cmp	r0, r3
 8009790:	f47f af4c 	bne.w	800962c <D80_1CH_HTONS_VOL_HP+0x3c>
 8009794:	4673      	mov	r3, lr
 8009796:	9a07      	ldr	r2, [sp, #28]
 8009798:	61d3      	str	r3, [r2, #28]
 800979a:	2000      	movs	r0, #0
 800979c:	9b01      	ldr	r3, [sp, #4]
 800979e:	6097      	str	r7, [r2, #8]
 80097a0:	f8c2 c00c 	str.w	ip, [r2, #12]
 80097a4:	e9c2 3104 	strd	r3, r1, [r2, #16]
 80097a8:	9b06      	ldr	r3, [sp, #24]
 80097aa:	6193      	str	r3, [r2, #24]
 80097ac:	b009      	add	sp, #36	; 0x24
 80097ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097b2:	4629      	mov	r1, r5
 80097b4:	e7f0      	b.n	8009798 <D80_1CH_HTONS_VOL_HP+0x1a8>
 80097b6:	bf00      	nop
 80097b8:	24000000 	.word	0x24000000
 80097bc:	002d0024 	.word	0x002d0024
 80097c0:	001c0015 	.word	0x001c0015
 80097c4:	000f000a 	.word	0x000f000a
 80097c8:	00060003 	.word	0x00060003
 80097cc:	0037003f 	.word	0x0037003f
 80097d0:	00450049 	.word	0x00450049
 80097d4:	00490045 	.word	0x00490045
 80097d8:	003f0037 	.word	0x003f0037
 80097dc:	00030006 	.word	0x00030006
 80097e0:	000a000f 	.word	0x000a000f
 80097e4:	0015001c 	.word	0x0015001c
 80097e8:	0024002d 	.word	0x0024002d

080097ec <D128_1CH_HTONS_VOL_HP>:
 80097ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097f0:	6914      	ldr	r4, [r2, #16]
 80097f2:	b08d      	sub	sp, #52	; 0x34
 80097f4:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 80097f6:	9404      	str	r4, [sp, #16]
 80097f8:	6954      	ldr	r4, [r2, #20]
 80097fa:	920b      	str	r2, [sp, #44]	; 0x2c
 80097fc:	9405      	str	r4, [sp, #20]
 80097fe:	6994      	ldr	r4, [r2, #24]
 8009800:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 8009804:	940a      	str	r4, [sp, #40]	; 0x28
 8009806:	6894      	ldr	r4, [r2, #8]
 8009808:	9403      	str	r4, [sp, #12]
 800980a:	68d4      	ldr	r4, [r2, #12]
 800980c:	9402      	str	r4, [sp, #8]
 800980e:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8009810:	6a12      	ldr	r2, [r2, #32]
 8009812:	9407      	str	r4, [sp, #28]
 8009814:	9208      	str	r2, [sp, #32]
 8009816:	2b00      	cmp	r3, #0
 8009818:	f000 812e 	beq.w	8009a78 <D128_1CH_HTONS_VOL_HP+0x28c>
 800981c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8009820:	f100 0b10 	add.w	fp, r0, #16
 8009824:	f8df 9290 	ldr.w	r9, [pc, #656]	; 8009ab8 <D128_1CH_HTONS_VOL_HP+0x2cc>
 8009828:	9106      	str	r1, [sp, #24]
 800982a:	9309      	str	r3, [sp, #36]	; 0x24
 800982c:	e95b 0204 	ldrd	r0, r2, [fp, #-16]
 8009830:	e95b 3602 	ldrd	r3, r6, [fp, #-8]
 8009834:	ba40      	rev16	r0, r0
 8009836:	ba52      	rev16	r2, r2
 8009838:	ba5b      	rev16	r3, r3
 800983a:	ba76      	rev16	r6, r6
 800983c:	b2c5      	uxtb	r5, r0
 800983e:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8009842:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8009846:	0e00      	lsrs	r0, r0, #24
 8009848:	f859 7025 	ldr.w	r7, [r9, r5, lsl #2]
 800984c:	b2d5      	uxtb	r5, r2
 800984e:	f859 e024 	ldr.w	lr, [r9, r4, lsl #2]
 8009852:	f3c2 2407 	ubfx	r4, r2, #8, #8
 8009856:	44bc      	add	ip, r7
 8009858:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800985c:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
 8009860:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8009864:	eb0e 2e9c 	add.w	lr, lr, ip, lsr #10
 8009868:	f859 a025 	ldr.w	sl, [r9, r5, lsl #2]
 800986c:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 8009870:	0e12      	lsrs	r2, r2, #24
 8009872:	eb01 219e 	add.w	r1, r1, lr, lsr #10
 8009876:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 800987a:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800987e:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8009882:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 8009886:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 800988a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800988e:	b2da      	uxtb	r2, r3
 8009890:	eb0a 2a97 	add.w	sl, sl, r7, lsr #10
 8009894:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8009898:	ea4e 4e0c 	orr.w	lr, lr, ip, lsl #16
 800989c:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 80098a0:	eb05 259a 	add.w	r5, r5, sl, lsr #10
 80098a4:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 80098a8:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80098ac:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80098b0:	eb00 2c95 	add.w	ip, r0, r5, lsr #10
 80098b4:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80098b8:	f859 8021 	ldr.w	r8, [r9, r1, lsl #2]
 80098bc:	f3c3 4107 	ubfx	r1, r3, #16, #8
 80098c0:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 80098c4:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 80098c8:	f859 0021 	ldr.w	r0, [r9, r1, lsl #2]
 80098cc:	0e1b      	lsrs	r3, r3, #24
 80098ce:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 80098d2:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80098d6:	f859 1023 	ldr.w	r1, [r9, r3, lsl #2]
 80098da:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 80098de:	eb08 2892 	add.w	r8, r8, r2, lsr #10
 80098e2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80098e6:	b2f3      	uxtb	r3, r6
 80098e8:	eb00 2a98 	add.w	sl, r0, r8, lsr #10
 80098ec:	f3c8 0009 	ubfx	r0, r8, #0, #10
 80098f0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80098f4:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 80098f8:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 80098fc:	f3c6 2c07 	ubfx	ip, r6, #8, #8
 8009900:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8009904:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8009908:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 800990c:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 8009910:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 8009914:	0e36      	lsrs	r6, r6, #24
 8009916:	eb02 2298 	add.w	r2, r2, r8, lsr #10
 800991a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800991e:	f859 302c 	ldr.w	r3, [r9, ip, lsl #2]
 8009922:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8009926:	f859 c026 	ldr.w	ip, [r9, r6, lsl #2]
 800992a:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800992e:	eb03 2692 	add.w	r6, r3, r2, lsr #10
 8009932:	f3c2 0309 	ubfx	r3, r2, #0, #10
 8009936:	9101      	str	r1, [sp, #4]
 8009938:	ea43 4208 	orr.w	r2, r3, r8, lsl #16
 800993c:	9b02      	ldr	r3, [sp, #8]
 800993e:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 8009942:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8009946:	4611      	mov	r1, r2
 8009948:	f3cc 0209 	ubfx	r2, ip, #0, #10
 800994c:	ea4f 2c9c 	mov.w	ip, ip, lsr #10
 8009950:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8009954:	4a49      	ldr	r2, [pc, #292]	; (8009a7c <D128_1CH_HTONS_VOL_HP+0x290>)
 8009956:	fb2e 3202 	smlad	r2, lr, r2, r3
 800995a:	4b49      	ldr	r3, [pc, #292]	; (8009a80 <D128_1CH_HTONS_VOL_HP+0x294>)
 800995c:	fb27 2203 	smlad	r2, r7, r3, r2
 8009960:	4b48      	ldr	r3, [pc, #288]	; (8009a84 <D128_1CH_HTONS_VOL_HP+0x298>)
 8009962:	fb25 2203 	smlad	r2, r5, r3, r2
 8009966:	4b48      	ldr	r3, [pc, #288]	; (8009a88 <D128_1CH_HTONS_VOL_HP+0x29c>)
 8009968:	fb24 2203 	smlad	r2, r4, r3, r2
 800996c:	4b47      	ldr	r3, [pc, #284]	; (8009a8c <D128_1CH_HTONS_VOL_HP+0x2a0>)
 800996e:	fb20 2803 	smlad	r8, r0, r3, r2
 8009972:	4b47      	ldr	r3, [pc, #284]	; (8009a90 <D128_1CH_HTONS_VOL_HP+0x2a4>)
 8009974:	9a01      	ldr	r2, [sp, #4]
 8009976:	fb22 8203 	smlad	r2, r2, r3, r8
 800997a:	4b46      	ldr	r3, [pc, #280]	; (8009a94 <D128_1CH_HTONS_VOL_HP+0x2a8>)
 800997c:	9102      	str	r1, [sp, #8]
 800997e:	fb21 2203 	smlad	r2, r1, r3, r2
 8009982:	f44f 3880 	mov.w	r8, #65536	; 0x10000
 8009986:	fb26 2308 	smlad	r3, r6, r8, r2
 800998a:	4619      	mov	r1, r3
 800998c:	9a03      	ldr	r2, [sp, #12]
 800998e:	4b42      	ldr	r3, [pc, #264]	; (8009a98 <D128_1CH_HTONS_VOL_HP+0x2ac>)
 8009990:	fb2e 2803 	smlad	r8, lr, r3, r2
 8009994:	4b41      	ldr	r3, [pc, #260]	; (8009a9c <D128_1CH_HTONS_VOL_HP+0x2b0>)
 8009996:	fb27 8a03 	smlad	sl, r7, r3, r8
 800999a:	f8df 8120 	ldr.w	r8, [pc, #288]	; 8009abc <D128_1CH_HTONS_VOL_HP+0x2d0>
 800999e:	fb25 a808 	smlad	r8, r5, r8, sl
 80099a2:	f8df a11c 	ldr.w	sl, [pc, #284]	; 8009ac0 <D128_1CH_HTONS_VOL_HP+0x2d4>
 80099a6:	fb24 880a 	smlad	r8, r4, sl, r8
 80099aa:	f8df a118 	ldr.w	sl, [pc, #280]	; 8009ac4 <D128_1CH_HTONS_VOL_HP+0x2d8>
 80099ae:	fb20 8a0a 	smlad	sl, r0, sl, r8
 80099b2:	f8df 8114 	ldr.w	r8, [pc, #276]	; 8009ac8 <D128_1CH_HTONS_VOL_HP+0x2dc>
 80099b6:	9b01      	ldr	r3, [sp, #4]
 80099b8:	fb23 aa08 	smlad	sl, r3, r8, sl
 80099bc:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8009acc <D128_1CH_HTONS_VOL_HP+0x2e0>
 80099c0:	9a02      	ldr	r2, [sp, #8]
 80099c2:	fb22 a808 	smlad	r8, r2, r8, sl
 80099c6:	f8df a108 	ldr.w	sl, [pc, #264]	; 8009ad0 <D128_1CH_HTONS_VOL_HP+0x2e4>
 80099ca:	fb26 830a 	smlad	r3, r6, sl, r8
 80099ce:	f04f 0801 	mov.w	r8, #1
 80099d2:	9302      	str	r3, [sp, #8]
 80099d4:	fb2e fe08 	smuad	lr, lr, r8
 80099d8:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 8009ad4 <D128_1CH_HTONS_VOL_HP+0x2e8>
 80099dc:	fb27 ee08 	smlad	lr, r7, r8, lr
 80099e0:	4f2f      	ldr	r7, [pc, #188]	; (8009aa0 <D128_1CH_HTONS_VOL_HP+0x2b4>)
 80099e2:	fb25 ee07 	smlad	lr, r5, r7, lr
 80099e6:	4f2f      	ldr	r7, [pc, #188]	; (8009aa4 <D128_1CH_HTONS_VOL_HP+0x2b8>)
 80099e8:	fb24 ee07 	smlad	lr, r4, r7, lr
 80099ec:	4f2e      	ldr	r7, [pc, #184]	; (8009aa8 <D128_1CH_HTONS_VOL_HP+0x2bc>)
 80099ee:	fb20 ee07 	smlad	lr, r0, r7, lr
 80099f2:	4f2e      	ldr	r7, [pc, #184]	; (8009aac <D128_1CH_HTONS_VOL_HP+0x2c0>)
 80099f4:	9b01      	ldr	r3, [sp, #4]
 80099f6:	fb23 ee07 	smlad	lr, r3, r7, lr
 80099fa:	4f2d      	ldr	r7, [pc, #180]	; (8009ab0 <D128_1CH_HTONS_VOL_HP+0x2c4>)
 80099fc:	fb22 e707 	smlad	r7, r2, r7, lr
 8009a00:	4b2c      	ldr	r3, [pc, #176]	; (8009ab4 <D128_1CH_HTONS_VOL_HP+0x2c8>)
 8009a02:	fb26 7303 	smlad	r3, r6, r3, r7
 8009a06:	f5a1 1680 	sub.w	r6, r1, #1048576	; 0x100000
 8009a0a:	9303      	str	r3, [sp, #12]
 8009a0c:	9b04      	ldr	r3, [sp, #16]
 8009a0e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8009a12:	9f08      	ldr	r7, [sp, #32]
 8009a14:	2100      	movs	r1, #0
 8009a16:	4433      	add	r3, r6
 8009a18:	f10b 0b10 	add.w	fp, fp, #16
 8009a1c:	461a      	mov	r2, r3
 8009a1e:	9b05      	ldr	r3, [sp, #20]
 8009a20:	9605      	str	r6, [sp, #20]
 8009a22:	1ad2      	subs	r2, r2, r3
 8009a24:	17d5      	asrs	r5, r2, #31
 8009a26:	fba2 2307 	umull	r2, r3, r2, r7
 8009a2a:	1814      	adds	r4, r2, r0
 8009a2c:	fb07 3305 	mla	r3, r7, r5, r3
 8009a30:	eb43 0501 	adc.w	r5, r3, r1
 8009a34:	006b      	lsls	r3, r5, #1
 8009a36:	022a      	lsls	r2, r5, #8
 8009a38:	9304      	str	r3, [sp, #16]
 8009a3a:	9b07      	ldr	r3, [sp, #28]
 8009a3c:	fbc3 0102 	smlal	r0, r1, r3, r2
 8009a40:	9a06      	ldr	r2, [sp, #24]
 8009a42:	108b      	asrs	r3, r1, #2
 8009a44:	f303 030f 	ssat	r3, #16, r3
 8009a48:	f822 3b02 	strh.w	r3, [r2], #2
 8009a4c:	4613      	mov	r3, r2
 8009a4e:	9206      	str	r2, [sp, #24]
 8009a50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a52:	4293      	cmp	r3, r2
 8009a54:	f47f aeea 	bne.w	800982c <D128_1CH_HTONS_VOL_HP+0x40>
 8009a58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a5a:	2000      	movs	r0, #0
 8009a5c:	9903      	ldr	r1, [sp, #12]
 8009a5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a60:	6099      	str	r1, [r3, #8]
 8009a62:	9902      	ldr	r1, [sp, #8]
 8009a64:	f8c3 c01c 	str.w	ip, [r3, #28]
 8009a68:	60d9      	str	r1, [r3, #12]
 8009a6a:	9904      	ldr	r1, [sp, #16]
 8009a6c:	619a      	str	r2, [r3, #24]
 8009a6e:	e9c3 1604 	strd	r1, r6, [r3, #16]
 8009a72:	b00d      	add	sp, #52	; 0x34
 8009a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a78:	9e05      	ldr	r6, [sp, #20]
 8009a7a:	e7ed      	b.n	8009a58 <D128_1CH_HTONS_VOL_HP+0x26c>
 8009a7c:	00780069 	.word	0x00780069
 8009a80:	005b004e 	.word	0x005b004e
 8009a84:	00420037 	.word	0x00420037
 8009a88:	002d0024 	.word	0x002d0024
 8009a8c:	001c0015 	.word	0x001c0015
 8009a90:	000f000a 	.word	0x000f000a
 8009a94:	00060003 	.word	0x00060003
 8009a98:	00880096 	.word	0x00880096
 8009a9c:	00a200ac 	.word	0x00a200ac
 8009aa0:	000a000f 	.word	0x000a000f
 8009aa4:	0015001c 	.word	0x0015001c
 8009aa8:	0024002d 	.word	0x0024002d
 8009aac:	00370042 	.word	0x00370042
 8009ab0:	004e005b 	.word	0x004e005b
 8009ab4:	00690078 	.word	0x00690078
 8009ab8:	24000000 	.word	0x24000000
 8009abc:	00b400ba 	.word	0x00b400ba
 8009ac0:	00be00c0 	.word	0x00be00c0
 8009ac4:	00c000be 	.word	0x00c000be
 8009ac8:	00ba00b4 	.word	0x00ba00b4
 8009acc:	00ac00a2 	.word	0x00ac00a2
 8009ad0:	00960088 	.word	0x00960088
 8009ad4:	00030006 	.word	0x00030006

08009ad8 <PDM_Filter_Init>:
 8009ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ada:	2240      	movs	r2, #64	; 0x40
 8009adc:	2100      	movs	r1, #0
 8009ade:	4604      	mov	r4, r0
 8009ae0:	300c      	adds	r0, #12
 8009ae2:	f000 f9ed 	bl	8009ec0 <memset>
 8009ae6:	4a56      	ldr	r2, [pc, #344]	; (8009c40 <PDM_Filter_Init+0x168>)
 8009ae8:	4856      	ldr	r0, [pc, #344]	; (8009c44 <PDM_Filter_Init+0x16c>)
 8009aea:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 8009aee:	6813      	ldr	r3, [r2, #0]
 8009af0:	f24c 2540 	movw	r5, #49728	; 0xc240
 8009af4:	f023 0301 	bic.w	r3, r3, #1
 8009af8:	6013      	str	r3, [r2, #0]
 8009afa:	6803      	ldr	r3, [r0, #0]
 8009afc:	400b      	ands	r3, r1
 8009afe:	42ab      	cmp	r3, r5
 8009b00:	d040      	beq.n	8009b84 <PDM_Filter_Init+0xac>
 8009b02:	6803      	ldr	r3, [r0, #0]
 8009b04:	f24c 2270 	movw	r2, #49776	; 0xc270
 8009b08:	4019      	ands	r1, r3
 8009b0a:	4291      	cmp	r1, r2
 8009b0c:	d03a      	beq.n	8009b84 <PDM_Filter_Init+0xac>
 8009b0e:	4b4e      	ldr	r3, [pc, #312]	; (8009c48 <PDM_Filter_Init+0x170>)
 8009b10:	2101      	movs	r1, #1
 8009b12:	461a      	mov	r2, r3
 8009b14:	6019      	str	r1, [r3, #0]
 8009b16:	6813      	ldr	r3, [r2, #0]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d1fc      	bne.n	8009b16 <PDM_Filter_Init+0x3e>
 8009b1c:	4b4b      	ldr	r3, [pc, #300]	; (8009c4c <PDM_Filter_Init+0x174>)
 8009b1e:	494c      	ldr	r1, [pc, #304]	; (8009c50 <PDM_Filter_Init+0x178>)
 8009b20:	4a4c      	ldr	r2, [pc, #304]	; (8009c54 <PDM_Filter_Init+0x17c>)
 8009b22:	6019      	str	r1, [r3, #0]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	8820      	ldrh	r0, [r4, #0]
 8009b28:	4293      	cmp	r3, r2
 8009b2a:	8961      	ldrh	r1, [r4, #10]
 8009b2c:	f04f 0300 	mov.w	r3, #0
 8009b30:	8922      	ldrh	r2, [r4, #8]
 8009b32:	bf14      	ite	ne
 8009b34:	2500      	movne	r5, #0
 8009b36:	4d47      	ldreq	r5, [pc, #284]	; (8009c54 <PDM_Filter_Init+0x17c>)
 8009b38:	2801      	cmp	r0, #1
 8009b3a:	61a3      	str	r3, [r4, #24]
 8009b3c:	6465      	str	r5, [r4, #68]	; 0x44
 8009b3e:	60e3      	str	r3, [r4, #12]
 8009b40:	6263      	str	r3, [r4, #36]	; 0x24
 8009b42:	6423      	str	r3, [r4, #64]	; 0x40
 8009b44:	86a1      	strh	r1, [r4, #52]	; 0x34
 8009b46:	86e2      	strh	r2, [r4, #54]	; 0x36
 8009b48:	e9c4 3304 	strd	r3, r3, [r4, #16]
 8009b4c:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8009b50:	d936      	bls.n	8009bc0 <PDM_Filter_Init+0xe8>
 8009b52:	2003      	movs	r0, #3
 8009b54:	2302      	movs	r3, #2
 8009b56:	8862      	ldrh	r2, [r4, #2]
 8009b58:	2a01      	cmp	r2, #1
 8009b5a:	d92e      	bls.n	8009bba <PDM_Filter_Init+0xe2>
 8009b5c:	2140      	movs	r1, #64	; 0x40
 8009b5e:	2300      	movs	r3, #0
 8009b60:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8009b62:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 8009b66:	d101      	bne.n	8009b6c <PDM_Filter_Init+0x94>
 8009b68:	460b      	mov	r3, r1
 8009b6a:	6421      	str	r1, [r4, #64]	; 0x40
 8009b6c:	6862      	ldr	r2, [r4, #4]
 8009b6e:	b11a      	cbz	r2, 8009b78 <PDM_Filter_Init+0xa0>
 8009b70:	f043 0310 	orr.w	r3, r3, #16
 8009b74:	62e2      	str	r2, [r4, #44]	; 0x2c
 8009b76:	6423      	str	r3, [r4, #64]	; 0x40
 8009b78:	2200      	movs	r2, #0
 8009b7a:	8722      	strh	r2, [r4, #56]	; 0x38
 8009b7c:	b908      	cbnz	r0, 8009b82 <PDM_Filter_Init+0xaa>
 8009b7e:	3380      	adds	r3, #128	; 0x80
 8009b80:	6423      	str	r3, [r4, #64]	; 0x40
 8009b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b84:	4b34      	ldr	r3, [pc, #208]	; (8009c58 <PDM_Filter_Init+0x180>)
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d1c0      	bne.n	8009b0e <PDM_Filter_Init+0x36>
 8009b8c:	4a33      	ldr	r2, [pc, #204]	; (8009c5c <PDM_Filter_Init+0x184>)
 8009b8e:	6813      	ldr	r3, [r2, #0]
 8009b90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009b94:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8009b98:	d006      	beq.n	8009ba8 <PDM_Filter_Init+0xd0>
 8009b9a:	6813      	ldr	r3, [r2, #0]
 8009b9c:	f240 4283 	movw	r2, #1155	; 0x483
 8009ba0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009ba4:	4293      	cmp	r3, r2
 8009ba6:	d1b2      	bne.n	8009b0e <PDM_Filter_Init+0x36>
 8009ba8:	4b2d      	ldr	r3, [pc, #180]	; (8009c60 <PDM_Filter_Init+0x188>)
 8009baa:	2101      	movs	r1, #1
 8009bac:	461a      	mov	r2, r3
 8009bae:	6019      	str	r1, [r3, #0]
 8009bb0:	6813      	ldr	r3, [r2, #0]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d1fc      	bne.n	8009bb0 <PDM_Filter_Init+0xd8>
 8009bb6:	4b2b      	ldr	r3, [pc, #172]	; (8009c64 <PDM_Filter_Init+0x18c>)
 8009bb8:	e7b1      	b.n	8009b1e <PDM_Filter_Init+0x46>
 8009bba:	d03a      	beq.n	8009c32 <PDM_Filter_Init+0x15a>
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	e7cd      	b.n	8009b5c <PDM_Filter_Init+0x84>
 8009bc0:	4d29      	ldr	r5, [pc, #164]	; (8009c68 <PDM_Filter_Init+0x190>)
 8009bc2:	782a      	ldrb	r2, [r5, #0]
 8009bc4:	d01b      	beq.n	8009bfe <PDM_Filter_Init+0x126>
 8009bc6:	2a01      	cmp	r2, #1
 8009bc8:	d001      	beq.n	8009bce <PDM_Filter_Init+0xf6>
 8009bca:	2001      	movs	r0, #1
 8009bcc:	e7c3      	b.n	8009b56 <PDM_Filter_Init+0x7e>
 8009bce:	4927      	ldr	r1, [pc, #156]	; (8009c6c <PDM_Filter_Init+0x194>)
 8009bd0:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 8009c74 <PDM_Filter_Init+0x19c>
 8009bd4:	f501 6780 	add.w	r7, r1, #1024	; 0x400
 8009bd8:	4e25      	ldr	r6, [pc, #148]	; (8009c70 <PDM_Filter_Init+0x198>)
 8009bda:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8009bde:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 8009be2:	ea02 0006 	and.w	r0, r2, r6
 8009be6:	f3c2 5209 	ubfx	r2, r2, #20, #10
 8009bea:	428f      	cmp	r7, r1
 8009bec:	ea43 0300 	orr.w	r3, r3, r0
 8009bf0:	4413      	add	r3, r2
 8009bf2:	600b      	str	r3, [r1, #0]
 8009bf4:	d1f1      	bne.n	8009bda <PDM_Filter_Init+0x102>
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	2001      	movs	r0, #1
 8009bfa:	702b      	strb	r3, [r5, #0]
 8009bfc:	e7ab      	b.n	8009b56 <PDM_Filter_Init+0x7e>
 8009bfe:	2a00      	cmp	r2, #0
 8009c00:	d1a9      	bne.n	8009b56 <PDM_Filter_Init+0x7e>
 8009c02:	491a      	ldr	r1, [pc, #104]	; (8009c6c <PDM_Filter_Init+0x194>)
 8009c04:	f8df c06c 	ldr.w	ip, [pc, #108]	; 8009c74 <PDM_Filter_Init+0x19c>
 8009c08:	f501 6780 	add.w	r7, r1, #1024	; 0x400
 8009c0c:	4e18      	ldr	r6, [pc, #96]	; (8009c70 <PDM_Filter_Init+0x198>)
 8009c0e:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8009c12:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 8009c16:	ea02 0006 	and.w	r0, r2, r6
 8009c1a:	f3c2 5209 	ubfx	r2, r2, #20, #10
 8009c1e:	428f      	cmp	r7, r1
 8009c20:	ea43 0300 	orr.w	r3, r3, r0
 8009c24:	4413      	add	r3, r2
 8009c26:	600b      	str	r3, [r1, #0]
 8009c28:	d1f1      	bne.n	8009c0e <PDM_Filter_Init+0x136>
 8009c2a:	2001      	movs	r0, #1
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	7028      	strb	r0, [r5, #0]
 8009c30:	e791      	b.n	8009b56 <PDM_Filter_Init+0x7e>
 8009c32:	2220      	movs	r2, #32
 8009c34:	4618      	mov	r0, r3
 8009c36:	2160      	movs	r1, #96	; 0x60
 8009c38:	6422      	str	r2, [r4, #64]	; 0x40
 8009c3a:	4613      	mov	r3, r2
 8009c3c:	e790      	b.n	8009b60 <PDM_Filter_Init+0x88>
 8009c3e:	bf00      	nop
 8009c40:	e0002000 	.word	0xe0002000
 8009c44:	e000ed00 	.word	0xe000ed00
 8009c48:	40023008 	.word	0x40023008
 8009c4c:	40023000 	.word	0x40023000
 8009c50:	f407a5c2 	.word	0xf407a5c2
 8009c54:	b5e8b5cd 	.word	0xb5e8b5cd
 8009c58:	e0042000 	.word	0xe0042000
 8009c5c:	5c001000 	.word	0x5c001000
 8009c60:	58024c08 	.word	0x58024c08
 8009c64:	58024c00 	.word	0x58024c00
 8009c68:	24000490 	.word	0x24000490
 8009c6c:	23fffffc 	.word	0x23fffffc
 8009c70:	000ffc00 	.word	0x000ffc00
 8009c74:	3ff00000 	.word	0x3ff00000

08009c78 <PDM_Filter_setConfig>:
 8009c78:	4b67      	ldr	r3, [pc, #412]	; (8009e18 <PDM_Filter_setConfig+0x1a0>)
 8009c7a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009c7c:	429a      	cmp	r2, r3
 8009c7e:	d128      	bne.n	8009cd2 <PDM_Filter_setConfig+0x5a>
 8009c80:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8009c82:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c84:	880e      	ldrh	r6, [r1, #0]
 8009c86:	460d      	mov	r5, r1
 8009c88:	4604      	mov	r4, r0
 8009c8a:	f422 7180 	bic.w	r1, r2, #256	; 0x100
 8009c8e:	1e73      	subs	r3, r6, #1
 8009c90:	f9b5 7004 	ldrsh.w	r7, [r5, #4]
 8009c94:	f9b0 0038 	ldrsh.w	r0, [r0, #56]	; 0x38
 8009c98:	2b06      	cmp	r3, #6
 8009c9a:	ed2d 8b02 	vpush	{d8}
 8009c9e:	6421      	str	r1, [r4, #64]	; 0x40
 8009ca0:	b083      	sub	sp, #12
 8009ca2:	d820      	bhi.n	8009ce6 <PDM_Filter_setConfig+0x6e>
 8009ca4:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8009ca6:	42b3      	cmp	r3, r6
 8009ca8:	d03d      	beq.n	8009d26 <PDM_Filter_setConfig+0xae>
 8009caa:	4b5c      	ldr	r3, [pc, #368]	; (8009e1c <PDM_Filter_setConfig+0x1a4>)
 8009cac:	4013      	ands	r3, r2
 8009cae:	4333      	orrs	r3, r6
 8009cb0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009cb4:	6423      	str	r3, [r4, #64]	; 0x40
 8009cb6:	f003 030f 	and.w	r3, r3, #15
 8009cba:	2a70      	cmp	r2, #112	; 0x70
 8009cbc:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8009cc0:	d009      	beq.n	8009cd6 <PDM_Filter_setConfig+0x5e>
 8009cc2:	2b06      	cmp	r3, #6
 8009cc4:	d824      	bhi.n	8009d10 <PDM_Filter_setConfig+0x98>
 8009cc6:	e8df f003 	tbb	[pc, r3]
 8009cca:	878a      	.short	0x878a
 8009ccc:	7b7e8184 	.word	0x7b7e8184
 8009cd0:	78          	.byte	0x78
 8009cd1:	00          	.byte	0x00
 8009cd2:	2004      	movs	r0, #4
 8009cd4:	4770      	bx	lr
 8009cd6:	2b06      	cmp	r3, #6
 8009cd8:	d81a      	bhi.n	8009d10 <PDM_Filter_setConfig+0x98>
 8009cda:	e8df f003 	tbb	[pc, r3]
 8009cde:	8f92      	.short	0x8f92
 8009ce0:	8617898c 	.word	0x8617898c
 8009ce4:	83          	.byte	0x83
 8009ce5:	00          	.byte	0x00
 8009ce6:	4287      	cmp	r7, r0
 8009ce8:	f000 808e 	beq.w	8009e08 <PDM_Filter_setConfig+0x190>
 8009cec:	f117 0f0c 	cmn.w	r7, #12
 8009cf0:	f04f 0008 	mov.w	r0, #8
 8009cf4:	da11      	bge.n	8009d1a <PDM_Filter_setConfig+0xa2>
 8009cf6:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 8009cfa:	3040      	adds	r0, #64	; 0x40
 8009cfc:	80ab      	strh	r3, [r5, #4]
 8009cfe:	886b      	ldrh	r3, [r5, #2]
 8009d00:	8626      	strh	r6, [r4, #48]	; 0x30
 8009d02:	8663      	strh	r3, [r4, #50]	; 0x32
 8009d04:	b003      	add	sp, #12
 8009d06:	ecbd 8b02 	vpop	{d8}
 8009d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d0c:	4b44      	ldr	r3, [pc, #272]	; (8009e20 <PDM_Filter_setConfig+0x1a8>)
 8009d0e:	64a3      	str	r3, [r4, #72]	; 0x48
 8009d10:	f117 0f0c 	cmn.w	r7, #12
 8009d14:	f04f 0000 	mov.w	r0, #0
 8009d18:	dbed      	blt.n	8009cf6 <PDM_Filter_setConfig+0x7e>
 8009d1a:	2f33      	cmp	r7, #51	; 0x33
 8009d1c:	dd10      	ble.n	8009d40 <PDM_Filter_setConfig+0xc8>
 8009d1e:	2333      	movs	r3, #51	; 0x33
 8009d20:	3040      	adds	r0, #64	; 0x40
 8009d22:	80ab      	strh	r3, [r5, #4]
 8009d24:	e7eb      	b.n	8009cfe <PDM_Filter_setConfig+0x86>
 8009d26:	4287      	cmp	r7, r0
 8009d28:	d1f2      	bne.n	8009d10 <PDM_Filter_setConfig+0x98>
 8009d2a:	886b      	ldrh	r3, [r5, #2]
 8009d2c:	8663      	strh	r3, [r4, #50]	; 0x32
 8009d2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009d30:	2000      	movs	r0, #0
 8009d32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d36:	6423      	str	r3, [r4, #64]	; 0x40
 8009d38:	b003      	add	sp, #12
 8009d3a:	ecbd 8b02 	vpop	{d8}
 8009d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d40:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009d42:	f003 030f 	and.w	r3, r3, #15
 8009d46:	3b01      	subs	r3, #1
 8009d48:	2b06      	cmp	r3, #6
 8009d4a:	d831      	bhi.n	8009db0 <PDM_Filter_setConfig+0x138>
 8009d4c:	4a35      	ldr	r2, [pc, #212]	; (8009e24 <PDM_Filter_setConfig+0x1ac>)
 8009d4e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8009d52:	eddf 0a35 	vldr	s1, [pc, #212]	; 8009e28 <PDM_Filter_setConfig+0x1b0>
 8009d56:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009d5a:	9001      	str	r0, [sp, #4]
 8009d5c:	edd3 7a07 	vldr	s15, [r3, #28]
 8009d60:	ed93 8a00 	vldr	s16, [r3]
 8009d64:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8009d68:	f000 f8ca 	bl	8009f00 <powf>
 8009d6c:	eef0 8a40 	vmov.f32	s17, s0
 8009d70:	9801      	ldr	r0, [sp, #4]
 8009d72:	ee07 7a90 	vmov	s15, r7
 8009d76:	ee28 8a28 	vmul.f32	s16, s16, s17
 8009d7a:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8009d7e:	9001      	str	r0, [sp, #4]
 8009d80:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8009d84:	eddf 7a29 	vldr	s15, [pc, #164]	; 8009e2c <PDM_Filter_setConfig+0x1b4>
 8009d88:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8009d8c:	f000 f8b8 	bl	8009f00 <powf>
 8009d90:	ee28 8a00 	vmul.f32	s16, s16, s0
 8009d94:	886b      	ldrh	r3, [r5, #2]
 8009d96:	9801      	ldr	r0, [sp, #4]
 8009d98:	feb8 8a48 	vrinta.f32	s16, s16
 8009d9c:	eebc 8ac8 	vcvt.u32.f32	s16, s16
 8009da0:	8727      	strh	r7, [r4, #56]	; 0x38
 8009da2:	8663      	strh	r3, [r4, #50]	; 0x32
 8009da4:	8626      	strh	r6, [r4, #48]	; 0x30
 8009da6:	ed84 8a0f 	vstr	s16, [r4, #60]	; 0x3c
 8009daa:	2800      	cmp	r0, #0
 8009dac:	d0bf      	beq.n	8009d2e <PDM_Filter_setConfig+0xb6>
 8009dae:	e7a9      	b.n	8009d04 <PDM_Filter_setConfig+0x8c>
 8009db0:	eddf 8a1f 	vldr	s17, [pc, #124]	; 8009e30 <PDM_Filter_setConfig+0x1b8>
 8009db4:	ed9f 8a1f 	vldr	s16, [pc, #124]	; 8009e34 <PDM_Filter_setConfig+0x1bc>
 8009db8:	e7db      	b.n	8009d72 <PDM_Filter_setConfig+0xfa>
 8009dba:	4b1f      	ldr	r3, [pc, #124]	; (8009e38 <PDM_Filter_setConfig+0x1c0>)
 8009dbc:	64a3      	str	r3, [r4, #72]	; 0x48
 8009dbe:	e7a7      	b.n	8009d10 <PDM_Filter_setConfig+0x98>
 8009dc0:	4b1e      	ldr	r3, [pc, #120]	; (8009e3c <PDM_Filter_setConfig+0x1c4>)
 8009dc2:	64a3      	str	r3, [r4, #72]	; 0x48
 8009dc4:	e7a4      	b.n	8009d10 <PDM_Filter_setConfig+0x98>
 8009dc6:	4b1e      	ldr	r3, [pc, #120]	; (8009e40 <PDM_Filter_setConfig+0x1c8>)
 8009dc8:	64a3      	str	r3, [r4, #72]	; 0x48
 8009dca:	e7a1      	b.n	8009d10 <PDM_Filter_setConfig+0x98>
 8009dcc:	4b1d      	ldr	r3, [pc, #116]	; (8009e44 <PDM_Filter_setConfig+0x1cc>)
 8009dce:	64a3      	str	r3, [r4, #72]	; 0x48
 8009dd0:	e79e      	b.n	8009d10 <PDM_Filter_setConfig+0x98>
 8009dd2:	4b1d      	ldr	r3, [pc, #116]	; (8009e48 <PDM_Filter_setConfig+0x1d0>)
 8009dd4:	64a3      	str	r3, [r4, #72]	; 0x48
 8009dd6:	e79b      	b.n	8009d10 <PDM_Filter_setConfig+0x98>
 8009dd8:	4b1c      	ldr	r3, [pc, #112]	; (8009e4c <PDM_Filter_setConfig+0x1d4>)
 8009dda:	64a3      	str	r3, [r4, #72]	; 0x48
 8009ddc:	e798      	b.n	8009d10 <PDM_Filter_setConfig+0x98>
 8009dde:	4b1c      	ldr	r3, [pc, #112]	; (8009e50 <PDM_Filter_setConfig+0x1d8>)
 8009de0:	64a3      	str	r3, [r4, #72]	; 0x48
 8009de2:	e795      	b.n	8009d10 <PDM_Filter_setConfig+0x98>
 8009de4:	4b1b      	ldr	r3, [pc, #108]	; (8009e54 <PDM_Filter_setConfig+0x1dc>)
 8009de6:	64a3      	str	r3, [r4, #72]	; 0x48
 8009de8:	e792      	b.n	8009d10 <PDM_Filter_setConfig+0x98>
 8009dea:	4b1b      	ldr	r3, [pc, #108]	; (8009e58 <PDM_Filter_setConfig+0x1e0>)
 8009dec:	64a3      	str	r3, [r4, #72]	; 0x48
 8009dee:	e78f      	b.n	8009d10 <PDM_Filter_setConfig+0x98>
 8009df0:	4b1a      	ldr	r3, [pc, #104]	; (8009e5c <PDM_Filter_setConfig+0x1e4>)
 8009df2:	64a3      	str	r3, [r4, #72]	; 0x48
 8009df4:	e78c      	b.n	8009d10 <PDM_Filter_setConfig+0x98>
 8009df6:	4b1a      	ldr	r3, [pc, #104]	; (8009e60 <PDM_Filter_setConfig+0x1e8>)
 8009df8:	64a3      	str	r3, [r4, #72]	; 0x48
 8009dfa:	e789      	b.n	8009d10 <PDM_Filter_setConfig+0x98>
 8009dfc:	4b19      	ldr	r3, [pc, #100]	; (8009e64 <PDM_Filter_setConfig+0x1ec>)
 8009dfe:	64a3      	str	r3, [r4, #72]	; 0x48
 8009e00:	e786      	b.n	8009d10 <PDM_Filter_setConfig+0x98>
 8009e02:	4b19      	ldr	r3, [pc, #100]	; (8009e68 <PDM_Filter_setConfig+0x1f0>)
 8009e04:	64a3      	str	r3, [r4, #72]	; 0x48
 8009e06:	e783      	b.n	8009d10 <PDM_Filter_setConfig+0x98>
 8009e08:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8009e0a:	42b3      	cmp	r3, r6
 8009e0c:	f47f af6e 	bne.w	8009cec <PDM_Filter_setConfig+0x74>
 8009e10:	886b      	ldrh	r3, [r5, #2]
 8009e12:	2008      	movs	r0, #8
 8009e14:	8663      	strh	r3, [r4, #50]	; 0x32
 8009e16:	e775      	b.n	8009d04 <PDM_Filter_setConfig+0x8c>
 8009e18:	b5e8b5cd 	.word	0xb5e8b5cd
 8009e1c:	fffffef0 	.word	0xfffffef0
 8009e20:	08008f91 	.word	0x08008f91
 8009e24:	0800a270 	.word	0x0800a270
 8009e28:	42000000 	.word	0x42000000
 8009e2c:	3d4ccccd 	.word	0x3d4ccccd
 8009e30:	4f800000 	.word	0x4f800000
 8009e34:	00000000 	.word	0x00000000
 8009e38:	0800839d 	.word	0x0800839d
 8009e3c:	08008225 	.word	0x08008225
 8009e40:	08008115 	.word	0x08008115
 8009e44:	08008bd9 	.word	0x08008bd9
 8009e48:	08008941 	.word	0x08008941
 8009e4c:	08008709 	.word	0x08008709
 8009e50:	08008525 	.word	0x08008525
 8009e54:	080091ad 	.word	0x080091ad
 8009e58:	08009071 	.word	0x08009071
 8009e5c:	080097ed 	.word	0x080097ed
 8009e60:	080095f1 	.word	0x080095f1
 8009e64:	08009445 	.word	0x08009445
 8009e68:	080092d9 	.word	0x080092d9

08009e6c <__errno>:
 8009e6c:	4b01      	ldr	r3, [pc, #4]	; (8009e74 <__errno+0x8>)
 8009e6e:	6818      	ldr	r0, [r3, #0]
 8009e70:	4770      	bx	lr
 8009e72:	bf00      	nop
 8009e74:	24000410 	.word	0x24000410

08009e78 <__libc_init_array>:
 8009e78:	b570      	push	{r4, r5, r6, lr}
 8009e7a:	4d0d      	ldr	r5, [pc, #52]	; (8009eb0 <__libc_init_array+0x38>)
 8009e7c:	4c0d      	ldr	r4, [pc, #52]	; (8009eb4 <__libc_init_array+0x3c>)
 8009e7e:	1b64      	subs	r4, r4, r5
 8009e80:	10a4      	asrs	r4, r4, #2
 8009e82:	2600      	movs	r6, #0
 8009e84:	42a6      	cmp	r6, r4
 8009e86:	d109      	bne.n	8009e9c <__libc_init_array+0x24>
 8009e88:	4d0b      	ldr	r5, [pc, #44]	; (8009eb8 <__libc_init_array+0x40>)
 8009e8a:	4c0c      	ldr	r4, [pc, #48]	; (8009ebc <__libc_init_array+0x44>)
 8009e8c:	f000 f9e4 	bl	800a258 <_init>
 8009e90:	1b64      	subs	r4, r4, r5
 8009e92:	10a4      	asrs	r4, r4, #2
 8009e94:	2600      	movs	r6, #0
 8009e96:	42a6      	cmp	r6, r4
 8009e98:	d105      	bne.n	8009ea6 <__libc_init_array+0x2e>
 8009e9a:	bd70      	pop	{r4, r5, r6, pc}
 8009e9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ea0:	4798      	blx	r3
 8009ea2:	3601      	adds	r6, #1
 8009ea4:	e7ee      	b.n	8009e84 <__libc_init_array+0xc>
 8009ea6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009eaa:	4798      	blx	r3
 8009eac:	3601      	adds	r6, #1
 8009eae:	e7f2      	b.n	8009e96 <__libc_init_array+0x1e>
 8009eb0:	0800a560 	.word	0x0800a560
 8009eb4:	0800a560 	.word	0x0800a560
 8009eb8:	0800a560 	.word	0x0800a560
 8009ebc:	0800a564 	.word	0x0800a564

08009ec0 <memset>:
 8009ec0:	4402      	add	r2, r0
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	4293      	cmp	r3, r2
 8009ec6:	d100      	bne.n	8009eca <memset+0xa>
 8009ec8:	4770      	bx	lr
 8009eca:	f803 1b01 	strb.w	r1, [r3], #1
 8009ece:	e7f9      	b.n	8009ec4 <memset+0x4>

08009ed0 <checkint>:
 8009ed0:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8009ed4:	2b7e      	cmp	r3, #126	; 0x7e
 8009ed6:	dd10      	ble.n	8009efa <checkint+0x2a>
 8009ed8:	2b96      	cmp	r3, #150	; 0x96
 8009eda:	dc0c      	bgt.n	8009ef6 <checkint+0x26>
 8009edc:	2201      	movs	r2, #1
 8009ede:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8009ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8009ee6:	1e5a      	subs	r2, r3, #1
 8009ee8:	4202      	tst	r2, r0
 8009eea:	d106      	bne.n	8009efa <checkint+0x2a>
 8009eec:	4203      	tst	r3, r0
 8009eee:	bf0c      	ite	eq
 8009ef0:	2002      	moveq	r0, #2
 8009ef2:	2001      	movne	r0, #1
 8009ef4:	4770      	bx	lr
 8009ef6:	2002      	movs	r0, #2
 8009ef8:	4770      	bx	lr
 8009efa:	2000      	movs	r0, #0
 8009efc:	4770      	bx	lr
	...

08009f00 <powf>:
 8009f00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f02:	ee10 1a10 	vmov	r1, s0
 8009f06:	ee10 6a90 	vmov	r6, s1
 8009f0a:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 8009f0e:	0072      	lsls	r2, r6, #1
 8009f10:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8009f14:	b085      	sub	sp, #20
 8009f16:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 8009f1a:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 8009f1e:	d256      	bcs.n	8009fce <powf+0xce>
 8009f20:	4298      	cmp	r0, r3
 8009f22:	d256      	bcs.n	8009fd2 <powf+0xd2>
 8009f24:	2000      	movs	r0, #0
 8009f26:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 8009f2a:	4ea3      	ldr	r6, [pc, #652]	; (800a1b8 <powf+0x2b8>)
 8009f2c:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8009f30:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 8009f34:	f3c2 47c3 	ubfx	r7, r2, #19, #4
 8009f38:	0dd2      	lsrs	r2, r2, #23
 8009f3a:	eb06 1707 	add.w	r7, r6, r7, lsl #4
 8009f3e:	05d2      	lsls	r2, r2, #23
 8009f40:	1a8b      	subs	r3, r1, r2
 8009f42:	ed97 5b00 	vldr	d5, [r7]
 8009f46:	ee07 3a90 	vmov	s15, r3
 8009f4a:	15d2      	asrs	r2, r2, #23
 8009f4c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8009f50:	eea5 6b07 	vfma.f64	d6, d5, d7
 8009f54:	ed97 5b02 	vldr	d5, [r7, #8]
 8009f58:	ee26 2b06 	vmul.f64	d2, d6, d6
 8009f5c:	ee22 1b02 	vmul.f64	d1, d2, d2
 8009f60:	ee07 2a90 	vmov	s15, r2
 8009f64:	ed96 4b40 	vldr	d4, [r6, #256]	; 0x100
 8009f68:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009f6c:	ee37 7b05 	vadd.f64	d7, d7, d5
 8009f70:	ed96 5b42 	vldr	d5, [r6, #264]	; 0x108
 8009f74:	ed96 3b44 	vldr	d3, [r6, #272]	; 0x110
 8009f78:	eea6 5b04 	vfma.f64	d5, d6, d4
 8009f7c:	ed96 4b46 	vldr	d4, [r6, #280]	; 0x118
 8009f80:	eea6 4b03 	vfma.f64	d4, d6, d3
 8009f84:	ed96 3b48 	vldr	d3, [r6, #288]	; 0x120
 8009f88:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 8009f8c:	eea6 7b03 	vfma.f64	d7, d6, d3
 8009f90:	eea2 7b04 	vfma.f64	d7, d2, d4
 8009f94:	eea5 7b01 	vfma.f64	d7, d5, d1
 8009f98:	ee20 0b07 	vmul.f64	d0, d0, d7
 8009f9c:	ee10 1a90 	vmov	r1, s1
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	2700      	movs	r7, #0
 8009fa4:	f3c1 32cf 	ubfx	r2, r1, #15, #16
 8009fa8:	f248 06be 	movw	r6, #32958	; 0x80be
 8009fac:	429f      	cmp	r7, r3
 8009fae:	bf08      	it	eq
 8009fb0:	4296      	cmpeq	r6, r2
 8009fb2:	f080 80b1 	bcs.w	800a118 <powf+0x218>
 8009fb6:	ed9f 7b78 	vldr	d7, [pc, #480]	; 800a198 <powf+0x298>
 8009fba:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8009fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fc2:	dd79      	ble.n	800a0b8 <powf+0x1b8>
 8009fc4:	b005      	add	sp, #20
 8009fc6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8009fca:	f000 b91f 	b.w	800a20c <__math_oflowf>
 8009fce:	4298      	cmp	r0, r3
 8009fd0:	d32d      	bcc.n	800a02e <powf+0x12e>
 8009fd2:	b952      	cbnz	r2, 8009fea <powf+0xea>
 8009fd4:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 8009fd8:	005b      	lsls	r3, r3, #1
 8009fda:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 8009fde:	f240 80cd 	bls.w	800a17c <powf+0x27c>
 8009fe2:	ee30 0a20 	vadd.f32	s0, s0, s1
 8009fe6:	b005      	add	sp, #20
 8009fe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fea:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8009fee:	d105      	bne.n	8009ffc <powf+0xfc>
 8009ff0:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 8009ff4:	0076      	lsls	r6, r6, #1
 8009ff6:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 8009ffa:	e7f0      	b.n	8009fde <powf+0xde>
 8009ffc:	004b      	lsls	r3, r1, #1
 8009ffe:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 800a002:	d8ee      	bhi.n	8009fe2 <powf+0xe2>
 800a004:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 800a008:	d1eb      	bne.n	8009fe2 <powf+0xe2>
 800a00a:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800a00e:	f000 80b5 	beq.w	800a17c <powf+0x27c>
 800a012:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800a016:	ea6f 0606 	mvn.w	r6, r6
 800a01a:	bf34      	ite	cc
 800a01c:	2300      	movcc	r3, #0
 800a01e:	2301      	movcs	r3, #1
 800a020:	0ff6      	lsrs	r6, r6, #31
 800a022:	42b3      	cmp	r3, r6
 800a024:	f040 80ad 	bne.w	800a182 <powf+0x282>
 800a028:	ee20 0aa0 	vmul.f32	s0, s1, s1
 800a02c:	e7db      	b.n	8009fe6 <powf+0xe6>
 800a02e:	004f      	lsls	r7, r1, #1
 800a030:	1e7a      	subs	r2, r7, #1
 800a032:	429a      	cmp	r2, r3
 800a034:	d31c      	bcc.n	800a070 <powf+0x170>
 800a036:	2900      	cmp	r1, #0
 800a038:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a03c:	da0f      	bge.n	800a05e <powf+0x15e>
 800a03e:	ee10 0a90 	vmov	r0, s1
 800a042:	f7ff ff45 	bl	8009ed0 <checkint>
 800a046:	2801      	cmp	r0, #1
 800a048:	d109      	bne.n	800a05e <powf+0x15e>
 800a04a:	eeb1 0a40 	vneg.f32	s0, s0
 800a04e:	b947      	cbnz	r7, 800a062 <powf+0x162>
 800a050:	2e00      	cmp	r6, #0
 800a052:	dac8      	bge.n	8009fe6 <powf+0xe6>
 800a054:	b005      	add	sp, #20
 800a056:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800a05a:	f000 b8dd 	b.w	800a218 <__math_divzerof>
 800a05e:	2000      	movs	r0, #0
 800a060:	e7f5      	b.n	800a04e <powf+0x14e>
 800a062:	2e00      	cmp	r6, #0
 800a064:	dabf      	bge.n	8009fe6 <powf+0xe6>
 800a066:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a06a:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800a06e:	e7ba      	b.n	8009fe6 <powf+0xe6>
 800a070:	2900      	cmp	r1, #0
 800a072:	da1f      	bge.n	800a0b4 <powf+0x1b4>
 800a074:	ee10 0a90 	vmov	r0, s1
 800a078:	f7ff ff2a 	bl	8009ed0 <checkint>
 800a07c:	b920      	cbnz	r0, 800a088 <powf+0x188>
 800a07e:	b005      	add	sp, #20
 800a080:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800a084:	f000 b8d8 	b.w	800a238 <__math_invalidf>
 800a088:	2801      	cmp	r0, #1
 800a08a:	bf14      	ite	ne
 800a08c:	2000      	movne	r0, #0
 800a08e:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800a092:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800a096:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800a09a:	f4bf af44 	bcs.w	8009f26 <powf+0x26>
 800a09e:	eddf 7a47 	vldr	s15, [pc, #284]	; 800a1bc <powf+0x2bc>
 800a0a2:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a0a6:	ee10 3a10 	vmov	r3, s0
 800a0aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a0ae:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 800a0b2:	e738      	b.n	8009f26 <powf+0x26>
 800a0b4:	2000      	movs	r0, #0
 800a0b6:	e7ee      	b.n	800a096 <powf+0x196>
 800a0b8:	ed9f 7b39 	vldr	d7, [pc, #228]	; 800a1a0 <powf+0x2a0>
 800a0bc:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800a0c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0c4:	dd10      	ble.n	800a0e8 <powf+0x1e8>
 800a0c6:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 800a0ca:	2800      	cmp	r0, #0
 800a0cc:	d15c      	bne.n	800a188 <powf+0x288>
 800a0ce:	9302      	str	r3, [sp, #8]
 800a0d0:	eddd 7a02 	vldr	s15, [sp, #8]
 800a0d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a0d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a0dc:	eef4 7a47 	vcmp.f32	s15, s14
 800a0e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0e4:	f47f af6e 	bne.w	8009fc4 <powf+0xc4>
 800a0e8:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800a1a8 <powf+0x2a8>
 800a0ec:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800a0f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0f4:	d804      	bhi.n	800a100 <powf+0x200>
 800a0f6:	b005      	add	sp, #20
 800a0f8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800a0fc:	f000 b87a 	b.w	800a1f4 <__math_uflowf>
 800a100:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 800a1b0 <powf+0x2b0>
 800a104:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800a108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a10c:	d504      	bpl.n	800a118 <powf+0x218>
 800a10e:	b005      	add	sp, #20
 800a110:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800a114:	f000 b874 	b.w	800a200 <__math_may_uflowf>
 800a118:	4b29      	ldr	r3, [pc, #164]	; (800a1c0 <powf+0x2c0>)
 800a11a:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 800a11e:	ee30 6b07 	vadd.f64	d6, d0, d7
 800a122:	ed8d 6b00 	vstr	d6, [sp]
 800a126:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a12a:	ee30 7b47 	vsub.f64	d7, d0, d7
 800a12e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a132:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800a136:	f006 011f 	and.w	r1, r6, #31
 800a13a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800a13e:	e9d1 ce00 	ldrd	ip, lr, [r1]
 800a142:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 800a146:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 800a14a:	ed93 4b46 	vldr	d4, [r3, #280]	; 0x118
 800a14e:	eea7 6b05 	vfma.f64	d6, d7, d5
 800a152:	ee27 5b07 	vmul.f64	d5, d7, d7
 800a156:	1836      	adds	r6, r6, r0
 800a158:	2300      	movs	r3, #0
 800a15a:	eb13 040c 	adds.w	r4, r3, ip
 800a15e:	ea4f 31c6 	mov.w	r1, r6, lsl #15
 800a162:	eb41 050e 	adc.w	r5, r1, lr
 800a166:	eea7 0b04 	vfma.f64	d0, d7, d4
 800a16a:	ec45 4b17 	vmov	d7, r4, r5
 800a16e:	eea6 0b05 	vfma.f64	d0, d6, d5
 800a172:	ee20 0b07 	vmul.f64	d0, d0, d7
 800a176:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800a17a:	e734      	b.n	8009fe6 <powf+0xe6>
 800a17c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800a180:	e731      	b.n	8009fe6 <powf+0xe6>
 800a182:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800a1c4 <powf+0x2c4>
 800a186:	e72e      	b.n	8009fe6 <powf+0xe6>
 800a188:	9303      	str	r3, [sp, #12]
 800a18a:	eddd 7a03 	vldr	s15, [sp, #12]
 800a18e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800a192:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a196:	e7a1      	b.n	800a0dc <powf+0x1dc>
 800a198:	ffd1d571 	.word	0xffd1d571
 800a19c:	405fffff 	.word	0x405fffff
 800a1a0:	ffa3aae2 	.word	0xffa3aae2
 800a1a4:	405fffff 	.word	0x405fffff
 800a1a8:	00000000 	.word	0x00000000
 800a1ac:	c062c000 	.word	0xc062c000
 800a1b0:	00000000 	.word	0x00000000
 800a1b4:	c062a000 	.word	0xc062a000
 800a1b8:	0800a2e8 	.word	0x0800a2e8
 800a1bc:	4b000000 	.word	0x4b000000
 800a1c0:	0800a410 	.word	0x0800a410
 800a1c4:	00000000 	.word	0x00000000

0800a1c8 <with_errnof>:
 800a1c8:	b513      	push	{r0, r1, r4, lr}
 800a1ca:	4604      	mov	r4, r0
 800a1cc:	ed8d 0a01 	vstr	s0, [sp, #4]
 800a1d0:	f7ff fe4c 	bl	8009e6c <__errno>
 800a1d4:	ed9d 0a01 	vldr	s0, [sp, #4]
 800a1d8:	6004      	str	r4, [r0, #0]
 800a1da:	b002      	add	sp, #8
 800a1dc:	bd10      	pop	{r4, pc}

0800a1de <xflowf>:
 800a1de:	b130      	cbz	r0, 800a1ee <xflowf+0x10>
 800a1e0:	eef1 7a40 	vneg.f32	s15, s0
 800a1e4:	ee27 0a80 	vmul.f32	s0, s15, s0
 800a1e8:	2022      	movs	r0, #34	; 0x22
 800a1ea:	f7ff bfed 	b.w	800a1c8 <with_errnof>
 800a1ee:	eef0 7a40 	vmov.f32	s15, s0
 800a1f2:	e7f7      	b.n	800a1e4 <xflowf+0x6>

0800a1f4 <__math_uflowf>:
 800a1f4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a1fc <__math_uflowf+0x8>
 800a1f8:	f7ff bff1 	b.w	800a1de <xflowf>
 800a1fc:	10000000 	.word	0x10000000

0800a200 <__math_may_uflowf>:
 800a200:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a208 <__math_may_uflowf+0x8>
 800a204:	f7ff bfeb 	b.w	800a1de <xflowf>
 800a208:	1a200000 	.word	0x1a200000

0800a20c <__math_oflowf>:
 800a20c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a214 <__math_oflowf+0x8>
 800a210:	f7ff bfe5 	b.w	800a1de <xflowf>
 800a214:	70000000 	.word	0x70000000

0800a218 <__math_divzerof>:
 800a218:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800a21c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800a220:	2800      	cmp	r0, #0
 800a222:	fe40 7a27 	vseleq.f32	s15, s0, s15
 800a226:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800a234 <__math_divzerof+0x1c>
 800a22a:	2022      	movs	r0, #34	; 0x22
 800a22c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800a230:	f7ff bfca 	b.w	800a1c8 <with_errnof>
 800a234:	00000000 	.word	0x00000000

0800a238 <__math_invalidf>:
 800a238:	eef0 7a40 	vmov.f32	s15, s0
 800a23c:	ee30 7a40 	vsub.f32	s14, s0, s0
 800a240:	eef4 7a67 	vcmp.f32	s15, s15
 800a244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a248:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800a24c:	d602      	bvs.n	800a254 <__math_invalidf+0x1c>
 800a24e:	2021      	movs	r0, #33	; 0x21
 800a250:	f7ff bfba 	b.w	800a1c8 <with_errnof>
 800a254:	4770      	bx	lr
	...

0800a258 <_init>:
 800a258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a25a:	bf00      	nop
 800a25c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a25e:	bc08      	pop	{r3}
 800a260:	469e      	mov	lr, r3
 800a262:	4770      	bx	lr

0800a264 <_fini>:
 800a264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a266:	bf00      	nop
 800a268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a26a:	bc08      	pop	{r3}
 800a26c:	469e      	mov	lr, r3
 800a26e:	4770      	bx	lr
