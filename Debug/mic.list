
mic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ada8  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e8  0800b078  0800b078  0001b078  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b360  0800b360  0001b360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b368  0800b368  0001b368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800b36c  0800b36c  0001b36c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000474  24000000  0800b370  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000023ac  24000480  0800b7e4  00020480  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  2400282c  0800b7e4  0002282c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020474  2**0
                  CONTENTS, READONLY
 10 .debug_info   000296df  00000000  00000000  000204a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003847  00000000  00000000  00049b81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001028  00000000  00000000  0004d3c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000f38  00000000  00000000  0004e3f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00003ffe  00000000  00000000  0004f328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00018ddf  00000000  00000000  00053326  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001574b4  00000000  00000000  0006c105  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      000000d1  00000000  00000000  001c35b9  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004450  00000000  00000000  001c368c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000480 	.word	0x24000480
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800b060 	.word	0x0800b060

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000484 	.word	0x24000484
 800030c:	0800b060 	.word	0x0800b060

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000320:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000324:	f000 b96e 	b.w	8000604 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468c      	mov	ip, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	f040 8083 	bne.w	8000456 <__udivmoddi4+0x116>
 8000350:	428a      	cmp	r2, r1
 8000352:	4617      	mov	r7, r2
 8000354:	d947      	bls.n	80003e6 <__udivmoddi4+0xa6>
 8000356:	fab2 f282 	clz	r2, r2
 800035a:	b142      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035c:	f1c2 0020 	rsb	r0, r2, #32
 8000360:	fa24 f000 	lsr.w	r0, r4, r0
 8000364:	4091      	lsls	r1, r2
 8000366:	4097      	lsls	r7, r2
 8000368:	ea40 0c01 	orr.w	ip, r0, r1
 800036c:	4094      	lsls	r4, r2
 800036e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fbbc f6f8 	udiv	r6, ip, r8
 8000378:	fa1f fe87 	uxth.w	lr, r7
 800037c:	fb08 c116 	mls	r1, r8, r6, ip
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f10e 	mul.w	r1, r6, lr
 8000388:	4299      	cmp	r1, r3
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x60>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000392:	f080 8119 	bcs.w	80005c8 <__udivmoddi4+0x288>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 8116 	bls.w	80005c8 <__udivmoddi4+0x288>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003a8:	fb08 3310 	mls	r3, r8, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003b4:	45a6      	cmp	lr, r4
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x8c>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003be:	f080 8105 	bcs.w	80005cc <__udivmoddi4+0x28c>
 80003c2:	45a6      	cmp	lr, r4
 80003c4:	f240 8102 	bls.w	80005cc <__udivmoddi4+0x28c>
 80003c8:	3802      	subs	r0, #2
 80003ca:	443c      	add	r4, r7
 80003cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d0:	eba4 040e 	sub.w	r4, r4, lr
 80003d4:	2600      	movs	r6, #0
 80003d6:	b11d      	cbz	r5, 80003e0 <__udivmoddi4+0xa0>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c5 4300 	strd	r4, r3, [r5]
 80003e0:	4631      	mov	r1, r6
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	b902      	cbnz	r2, 80003ea <__udivmoddi4+0xaa>
 80003e8:	deff      	udf	#255	; 0xff
 80003ea:	fab2 f282 	clz	r2, r2
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	d150      	bne.n	8000494 <__udivmoddi4+0x154>
 80003f2:	1bcb      	subs	r3, r1, r7
 80003f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f8:	fa1f f887 	uxth.w	r8, r7
 80003fc:	2601      	movs	r6, #1
 80003fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000402:	0c21      	lsrs	r1, r4, #16
 8000404:	fb0e 331c 	mls	r3, lr, ip, r3
 8000408:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800040c:	fb08 f30c 	mul.w	r3, r8, ip
 8000410:	428b      	cmp	r3, r1
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0xe4>
 8000414:	1879      	adds	r1, r7, r1
 8000416:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0xe2>
 800041c:	428b      	cmp	r3, r1
 800041e:	f200 80e9 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 8000422:	4684      	mov	ip, r0
 8000424:	1ac9      	subs	r1, r1, r3
 8000426:	b2a3      	uxth	r3, r4
 8000428:	fbb1 f0fe 	udiv	r0, r1, lr
 800042c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000430:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000434:	fb08 f800 	mul.w	r8, r8, r0
 8000438:	45a0      	cmp	r8, r4
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x10c>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x10a>
 8000444:	45a0      	cmp	r8, r4
 8000446:	f200 80d9 	bhi.w	80005fc <__udivmoddi4+0x2bc>
 800044a:	4618      	mov	r0, r3
 800044c:	eba4 0408 	sub.w	r4, r4, r8
 8000450:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000454:	e7bf      	b.n	80003d6 <__udivmoddi4+0x96>
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0x12e>
 800045a:	2d00      	cmp	r5, #0
 800045c:	f000 80b1 	beq.w	80005c2 <__udivmoddi4+0x282>
 8000460:	2600      	movs	r6, #0
 8000462:	e9c5 0100 	strd	r0, r1, [r5]
 8000466:	4630      	mov	r0, r6
 8000468:	4631      	mov	r1, r6
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f683 	clz	r6, r3
 8000472:	2e00      	cmp	r6, #0
 8000474:	d14a      	bne.n	800050c <__udivmoddi4+0x1cc>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0x140>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80b8 	bhi.w	80005f0 <__udivmoddi4+0x2b0>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0103 	sbc.w	r1, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	468c      	mov	ip, r1
 800048a:	2d00      	cmp	r5, #0
 800048c:	d0a8      	beq.n	80003e0 <__udivmoddi4+0xa0>
 800048e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000492:	e7a5      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000494:	f1c2 0320 	rsb	r3, r2, #32
 8000498:	fa20 f603 	lsr.w	r6, r0, r3
 800049c:	4097      	lsls	r7, r2
 800049e:	fa01 f002 	lsl.w	r0, r1, r2
 80004a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a6:	40d9      	lsrs	r1, r3
 80004a8:	4330      	orrs	r0, r6
 80004aa:	0c03      	lsrs	r3, r0, #16
 80004ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80004b0:	fa1f f887 	uxth.w	r8, r7
 80004b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb06 f108 	mul.w	r1, r6, r8
 80004c0:	4299      	cmp	r1, r3
 80004c2:	fa04 f402 	lsl.w	r4, r4, r2
 80004c6:	d909      	bls.n	80004dc <__udivmoddi4+0x19c>
 80004c8:	18fb      	adds	r3, r7, r3
 80004ca:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80004ce:	f080 808d 	bcs.w	80005ec <__udivmoddi4+0x2ac>
 80004d2:	4299      	cmp	r1, r3
 80004d4:	f240 808a 	bls.w	80005ec <__udivmoddi4+0x2ac>
 80004d8:	3e02      	subs	r6, #2
 80004da:	443b      	add	r3, r7
 80004dc:	1a5b      	subs	r3, r3, r1
 80004de:	b281      	uxth	r1, r0
 80004e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ec:	fb00 f308 	mul.w	r3, r0, r8
 80004f0:	428b      	cmp	r3, r1
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x1c4>
 80004f4:	1879      	adds	r1, r7, r1
 80004f6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004fa:	d273      	bcs.n	80005e4 <__udivmoddi4+0x2a4>
 80004fc:	428b      	cmp	r3, r1
 80004fe:	d971      	bls.n	80005e4 <__udivmoddi4+0x2a4>
 8000500:	3802      	subs	r0, #2
 8000502:	4439      	add	r1, r7
 8000504:	1acb      	subs	r3, r1, r3
 8000506:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800050a:	e778      	b.n	80003fe <__udivmoddi4+0xbe>
 800050c:	f1c6 0c20 	rsb	ip, r6, #32
 8000510:	fa03 f406 	lsl.w	r4, r3, r6
 8000514:	fa22 f30c 	lsr.w	r3, r2, ip
 8000518:	431c      	orrs	r4, r3
 800051a:	fa20 f70c 	lsr.w	r7, r0, ip
 800051e:	fa01 f306 	lsl.w	r3, r1, r6
 8000522:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000526:	fa21 f10c 	lsr.w	r1, r1, ip
 800052a:	431f      	orrs	r7, r3
 800052c:	0c3b      	lsrs	r3, r7, #16
 800052e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000532:	fa1f f884 	uxth.w	r8, r4
 8000536:	fb0e 1119 	mls	r1, lr, r9, r1
 800053a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800053e:	fb09 fa08 	mul.w	sl, r9, r8
 8000542:	458a      	cmp	sl, r1
 8000544:	fa02 f206 	lsl.w	r2, r2, r6
 8000548:	fa00 f306 	lsl.w	r3, r0, r6
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x220>
 800054e:	1861      	adds	r1, r4, r1
 8000550:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000554:	d248      	bcs.n	80005e8 <__udivmoddi4+0x2a8>
 8000556:	458a      	cmp	sl, r1
 8000558:	d946      	bls.n	80005e8 <__udivmoddi4+0x2a8>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4421      	add	r1, r4
 8000560:	eba1 010a 	sub.w	r1, r1, sl
 8000564:	b2bf      	uxth	r7, r7
 8000566:	fbb1 f0fe 	udiv	r0, r1, lr
 800056a:	fb0e 1110 	mls	r1, lr, r0, r1
 800056e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000572:	fb00 f808 	mul.w	r8, r0, r8
 8000576:	45b8      	cmp	r8, r7
 8000578:	d907      	bls.n	800058a <__udivmoddi4+0x24a>
 800057a:	19e7      	adds	r7, r4, r7
 800057c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000580:	d22e      	bcs.n	80005e0 <__udivmoddi4+0x2a0>
 8000582:	45b8      	cmp	r8, r7
 8000584:	d92c      	bls.n	80005e0 <__udivmoddi4+0x2a0>
 8000586:	3802      	subs	r0, #2
 8000588:	4427      	add	r7, r4
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	eba7 0708 	sub.w	r7, r7, r8
 8000592:	fba0 8902 	umull	r8, r9, r0, r2
 8000596:	454f      	cmp	r7, r9
 8000598:	46c6      	mov	lr, r8
 800059a:	4649      	mov	r1, r9
 800059c:	d31a      	bcc.n	80005d4 <__udivmoddi4+0x294>
 800059e:	d017      	beq.n	80005d0 <__udivmoddi4+0x290>
 80005a0:	b15d      	cbz	r5, 80005ba <__udivmoddi4+0x27a>
 80005a2:	ebb3 020e 	subs.w	r2, r3, lr
 80005a6:	eb67 0701 	sbc.w	r7, r7, r1
 80005aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005ae:	40f2      	lsrs	r2, r6
 80005b0:	ea4c 0202 	orr.w	r2, ip, r2
 80005b4:	40f7      	lsrs	r7, r6
 80005b6:	e9c5 2700 	strd	r2, r7, [r5]
 80005ba:	2600      	movs	r6, #0
 80005bc:	4631      	mov	r1, r6
 80005be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c2:	462e      	mov	r6, r5
 80005c4:	4628      	mov	r0, r5
 80005c6:	e70b      	b.n	80003e0 <__udivmoddi4+0xa0>
 80005c8:	4606      	mov	r6, r0
 80005ca:	e6e9      	b.n	80003a0 <__udivmoddi4+0x60>
 80005cc:	4618      	mov	r0, r3
 80005ce:	e6fd      	b.n	80003cc <__udivmoddi4+0x8c>
 80005d0:	4543      	cmp	r3, r8
 80005d2:	d2e5      	bcs.n	80005a0 <__udivmoddi4+0x260>
 80005d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005d8:	eb69 0104 	sbc.w	r1, r9, r4
 80005dc:	3801      	subs	r0, #1
 80005de:	e7df      	b.n	80005a0 <__udivmoddi4+0x260>
 80005e0:	4608      	mov	r0, r1
 80005e2:	e7d2      	b.n	800058a <__udivmoddi4+0x24a>
 80005e4:	4660      	mov	r0, ip
 80005e6:	e78d      	b.n	8000504 <__udivmoddi4+0x1c4>
 80005e8:	4681      	mov	r9, r0
 80005ea:	e7b9      	b.n	8000560 <__udivmoddi4+0x220>
 80005ec:	4666      	mov	r6, ip
 80005ee:	e775      	b.n	80004dc <__udivmoddi4+0x19c>
 80005f0:	4630      	mov	r0, r6
 80005f2:	e74a      	b.n	800048a <__udivmoddi4+0x14a>
 80005f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f8:	4439      	add	r1, r7
 80005fa:	e713      	b.n	8000424 <__udivmoddi4+0xe4>
 80005fc:	3802      	subs	r0, #2
 80005fe:	443c      	add	r4, r7
 8000600:	e724      	b.n	800044c <__udivmoddi4+0x10c>
 8000602:	bf00      	nop

08000604 <__aeabi_idiv0>:
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <HAL_SAI_TxCpltCallback>:
  * @brief  Tx Transfer completed callbacks.
  * @param  hsai SAI handle
  * @retval None
  */
void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsai);

  /* Manage the remaining file size and new address offset: This function
     should be coded by user (its prototype is already declared in stm32h735g_discovery_audio.h) */
  BSP_AUDIO_OUT_TransferComplete_CallBack(0);
 8000610:	2000      	movs	r0, #0
 8000612:	f000 f825 	bl	8000660 <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 8000616:	bf00      	nop
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}

0800061e <HAL_SAI_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hsai  SAI handle
  * @retval None
  */
void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 800061e:	b580      	push	{r7, lr}
 8000620:	b082      	sub	sp, #8
 8000622:	af00      	add	r7, sp, #0
 8000624:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsai);

  /* Manage the remaining file size and new address offset: This function
     should be coded by user (its prototype is already declared in stm32h735g_discovery_audio.h) */
  BSP_AUDIO_OUT_HalfTransfer_CallBack(0);
 8000626:	2000      	movs	r0, #0
 8000628:	f000 f824 	bl	8000674 <BSP_AUDIO_OUT_HalfTransfer_CallBack>
}
 800062c:	bf00      	nop
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}

08000634 <HAL_SAI_ErrorCallback>:
  * @brief  SAI error callbacks.
  * @param  hsai  SAI handle
  * @retval None
  */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  if(hsai->Instance == AUDIO_OUT_SAIx)
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a06      	ldr	r2, [pc, #24]	; (800065c <HAL_SAI_ErrorCallback+0x28>)
 8000642:	4293      	cmp	r3, r2
 8000644:	d103      	bne.n	800064e <HAL_SAI_ErrorCallback+0x1a>
  {
    BSP_AUDIO_OUT_Error_CallBack(0);
 8000646:	2000      	movs	r0, #0
 8000648:	f000 f81e 	bl	8000688 <BSP_AUDIO_OUT_Error_CallBack>
  }
  else
  {
    BSP_AUDIO_IN_Error_CallBack(0);
  }
}
 800064c:	e002      	b.n	8000654 <HAL_SAI_ErrorCallback+0x20>
    BSP_AUDIO_IN_Error_CallBack(0);
 800064e:	2000      	movs	r0, #0
 8000650:	f000 f824 	bl	800069c <BSP_AUDIO_IN_Error_CallBack>
}
 8000654:	bf00      	nop
 8000656:	3708      	adds	r7, #8
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	40015824 	.word	0x40015824

08000660 <BSP_AUDIO_OUT_TransferComplete_CallBack>:
  * @brief  Manages the DMA full Transfer complete event
  * @param  Instance AUDIO OUT Instance. It can only be 0 (SAI)
  * @retval None
  */
__weak void BSP_AUDIO_OUT_TransferComplete_CallBack(uint32_t Instance)
{
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Instance);
}
 8000668:	bf00      	nop
 800066a:	370c      	adds	r7, #12
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr

08000674 <BSP_AUDIO_OUT_HalfTransfer_CallBack>:
  * @brief  Manages the DMA Half Transfer complete event
  * @param  Instance AUDIO OUT Instance. It can only be 0 (SAI)
  * @retval None
  */
__weak void BSP_AUDIO_OUT_HalfTransfer_CallBack(uint32_t Instance)
{
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Instance);
}
 800067c:	bf00      	nop
 800067e:	370c      	adds	r7, #12
 8000680:	46bd      	mov	sp, r7
 8000682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000686:	4770      	bx	lr

08000688 <BSP_AUDIO_OUT_Error_CallBack>:
  * @brief  Manages the DMA FIFO error event
  * @param  Instance AUDIO OUT Instance. It can only be 0 (SAI)
  * @retval None
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(uint32_t Instance)
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Instance);
}
 8000690:	bf00      	nop
 8000692:	370c      	adds	r7, #12
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr

0800069c <BSP_AUDIO_IN_Error_CallBack>:
/**
  * @brief  Audio IN Error callback function.
  * @retval None
  */
__weak void BSP_AUDIO_IN_Error_CallBack(uint32_t Instance)
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Instance);

  /* This function is called when an Interrupt due to transfer error on or peripheral
     error occurs. */
}
 80006a4:	bf00      	nop
 80006a6:	370c      	adds	r7, #12
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr

080006b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006b6:	2003      	movs	r0, #3
 80006b8:	f000 f95c 	bl	8000974 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80006bc:	f003 fbe2 	bl	8003e84 <HAL_RCC_GetSysClockFreq>
 80006c0:	4602      	mov	r2, r0
 80006c2:	4b15      	ldr	r3, [pc, #84]	; (8000718 <HAL_Init+0x68>)
 80006c4:	699b      	ldr	r3, [r3, #24]
 80006c6:	0a1b      	lsrs	r3, r3, #8
 80006c8:	f003 030f 	and.w	r3, r3, #15
 80006cc:	4913      	ldr	r1, [pc, #76]	; (800071c <HAL_Init+0x6c>)
 80006ce:	5ccb      	ldrb	r3, [r1, r3]
 80006d0:	f003 031f 	and.w	r3, r3, #31
 80006d4:	fa22 f303 	lsr.w	r3, r2, r3
 80006d8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80006da:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <HAL_Init+0x68>)
 80006dc:	699b      	ldr	r3, [r3, #24]
 80006de:	f003 030f 	and.w	r3, r3, #15
 80006e2:	4a0e      	ldr	r2, [pc, #56]	; (800071c <HAL_Init+0x6c>)
 80006e4:	5cd3      	ldrb	r3, [r2, r3]
 80006e6:	f003 031f 	and.w	r3, r3, #31
 80006ea:	687a      	ldr	r2, [r7, #4]
 80006ec:	fa22 f303 	lsr.w	r3, r2, r3
 80006f0:	4a0b      	ldr	r2, [pc, #44]	; (8000720 <HAL_Init+0x70>)
 80006f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80006f4:	4a0b      	ldr	r2, [pc, #44]	; (8000724 <HAL_Init+0x74>)
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006fa:	2000      	movs	r0, #0
 80006fc:	f000 f814 	bl	8000728 <HAL_InitTick>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000706:	2301      	movs	r3, #1
 8000708:	e002      	b.n	8000710 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800070a:	f008 f8dd 	bl	80088c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800070e:	2300      	movs	r3, #0
}
 8000710:	4618      	mov	r0, r3
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	58024400 	.word	0x58024400
 800071c:	0800b0e0 	.word	0x0800b0e0
 8000720:	2400040c 	.word	0x2400040c
 8000724:	24000408 	.word	0x24000408

08000728 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000730:	4b15      	ldr	r3, [pc, #84]	; (8000788 <HAL_InitTick+0x60>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d101      	bne.n	800073c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000738:	2301      	movs	r3, #1
 800073a:	e021      	b.n	8000780 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800073c:	4b13      	ldr	r3, [pc, #76]	; (800078c <HAL_InitTick+0x64>)
 800073e:	681a      	ldr	r2, [r3, #0]
 8000740:	4b11      	ldr	r3, [pc, #68]	; (8000788 <HAL_InitTick+0x60>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	4619      	mov	r1, r3
 8000746:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800074a:	fbb3 f3f1 	udiv	r3, r3, r1
 800074e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000752:	4618      	mov	r0, r3
 8000754:	f000 f941 	bl	80009da <HAL_SYSTICK_Config>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800075e:	2301      	movs	r3, #1
 8000760:	e00e      	b.n	8000780 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	2b0f      	cmp	r3, #15
 8000766:	d80a      	bhi.n	800077e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000768:	2200      	movs	r2, #0
 800076a:	6879      	ldr	r1, [r7, #4]
 800076c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000770:	f000 f90b 	bl	800098a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000774:	4a06      	ldr	r2, [pc, #24]	; (8000790 <HAL_InitTick+0x68>)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800077a:	2300      	movs	r3, #0
 800077c:	e000      	b.n	8000780 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800077e:	2301      	movs	r3, #1
}
 8000780:	4618      	mov	r0, r3
 8000782:	3708      	adds	r7, #8
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	24000404 	.word	0x24000404
 800078c:	24000408 	.word	0x24000408
 8000790:	24000400 	.word	0x24000400

08000794 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000798:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <HAL_IncTick+0x20>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	461a      	mov	r2, r3
 800079e:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <HAL_IncTick+0x24>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	4413      	add	r3, r2
 80007a4:	4a04      	ldr	r2, [pc, #16]	; (80007b8 <HAL_IncTick+0x24>)
 80007a6:	6013      	str	r3, [r2, #0]
}
 80007a8:	bf00      	nop
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	24000404 	.word	0x24000404
 80007b8:	240004ac 	.word	0x240004ac

080007bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  return uwTick;
 80007c0:	4b03      	ldr	r3, [pc, #12]	; (80007d0 <HAL_GetTick+0x14>)
 80007c2:	681b      	ldr	r3, [r3, #0]
}
 80007c4:	4618      	mov	r0, r3
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	240004ac 	.word	0x240004ac

080007d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b085      	sub	sp, #20
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	f003 0307 	and.w	r3, r3, #7
 80007e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007e4:	4b0b      	ldr	r3, [pc, #44]	; (8000814 <__NVIC_SetPriorityGrouping+0x40>)
 80007e6:	68db      	ldr	r3, [r3, #12]
 80007e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007ea:	68ba      	ldr	r2, [r7, #8]
 80007ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007f0:	4013      	ands	r3, r2
 80007f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80007fc:	4b06      	ldr	r3, [pc, #24]	; (8000818 <__NVIC_SetPriorityGrouping+0x44>)
 80007fe:	4313      	orrs	r3, r2
 8000800:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000802:	4a04      	ldr	r2, [pc, #16]	; (8000814 <__NVIC_SetPriorityGrouping+0x40>)
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	60d3      	str	r3, [r2, #12]
}
 8000808:	bf00      	nop
 800080a:	3714      	adds	r7, #20
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr
 8000814:	e000ed00 	.word	0xe000ed00
 8000818:	05fa0000 	.word	0x05fa0000

0800081c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000820:	4b04      	ldr	r3, [pc, #16]	; (8000834 <__NVIC_GetPriorityGrouping+0x18>)
 8000822:	68db      	ldr	r3, [r3, #12]
 8000824:	0a1b      	lsrs	r3, r3, #8
 8000826:	f003 0307 	and.w	r3, r3, #7
}
 800082a:	4618      	mov	r0, r3
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr
 8000834:	e000ed00 	.word	0xe000ed00

08000838 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	4603      	mov	r3, r0
 8000840:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000842:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000846:	2b00      	cmp	r3, #0
 8000848:	db0b      	blt.n	8000862 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800084a:	88fb      	ldrh	r3, [r7, #6]
 800084c:	f003 021f 	and.w	r2, r3, #31
 8000850:	4907      	ldr	r1, [pc, #28]	; (8000870 <__NVIC_EnableIRQ+0x38>)
 8000852:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000856:	095b      	lsrs	r3, r3, #5
 8000858:	2001      	movs	r0, #1
 800085a:	fa00 f202 	lsl.w	r2, r0, r2
 800085e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000862:	bf00      	nop
 8000864:	370c      	adds	r7, #12
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	e000e100 	.word	0xe000e100

08000874 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	6039      	str	r1, [r7, #0]
 800087e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000880:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000884:	2b00      	cmp	r3, #0
 8000886:	db0a      	blt.n	800089e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	b2da      	uxtb	r2, r3
 800088c:	490c      	ldr	r1, [pc, #48]	; (80008c0 <__NVIC_SetPriority+0x4c>)
 800088e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000892:	0112      	lsls	r2, r2, #4
 8000894:	b2d2      	uxtb	r2, r2
 8000896:	440b      	add	r3, r1
 8000898:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800089c:	e00a      	b.n	80008b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	b2da      	uxtb	r2, r3
 80008a2:	4908      	ldr	r1, [pc, #32]	; (80008c4 <__NVIC_SetPriority+0x50>)
 80008a4:	88fb      	ldrh	r3, [r7, #6]
 80008a6:	f003 030f 	and.w	r3, r3, #15
 80008aa:	3b04      	subs	r3, #4
 80008ac:	0112      	lsls	r2, r2, #4
 80008ae:	b2d2      	uxtb	r2, r2
 80008b0:	440b      	add	r3, r1
 80008b2:	761a      	strb	r2, [r3, #24]
}
 80008b4:	bf00      	nop
 80008b6:	370c      	adds	r7, #12
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr
 80008c0:	e000e100 	.word	0xe000e100
 80008c4:	e000ed00 	.word	0xe000ed00

080008c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b089      	sub	sp, #36	; 0x24
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	60f8      	str	r0, [r7, #12]
 80008d0:	60b9      	str	r1, [r7, #8]
 80008d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	f003 0307 	and.w	r3, r3, #7
 80008da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008dc:	69fb      	ldr	r3, [r7, #28]
 80008de:	f1c3 0307 	rsb	r3, r3, #7
 80008e2:	2b04      	cmp	r3, #4
 80008e4:	bf28      	it	cs
 80008e6:	2304      	movcs	r3, #4
 80008e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008ea:	69fb      	ldr	r3, [r7, #28]
 80008ec:	3304      	adds	r3, #4
 80008ee:	2b06      	cmp	r3, #6
 80008f0:	d902      	bls.n	80008f8 <NVIC_EncodePriority+0x30>
 80008f2:	69fb      	ldr	r3, [r7, #28]
 80008f4:	3b03      	subs	r3, #3
 80008f6:	e000      	b.n	80008fa <NVIC_EncodePriority+0x32>
 80008f8:	2300      	movs	r3, #0
 80008fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000900:	69bb      	ldr	r3, [r7, #24]
 8000902:	fa02 f303 	lsl.w	r3, r2, r3
 8000906:	43da      	mvns	r2, r3
 8000908:	68bb      	ldr	r3, [r7, #8]
 800090a:	401a      	ands	r2, r3
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000910:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	fa01 f303 	lsl.w	r3, r1, r3
 800091a:	43d9      	mvns	r1, r3
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000920:	4313      	orrs	r3, r2
         );
}
 8000922:	4618      	mov	r0, r3
 8000924:	3724      	adds	r7, #36	; 0x24
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
	...

08000930 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	3b01      	subs	r3, #1
 800093c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000940:	d301      	bcc.n	8000946 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000942:	2301      	movs	r3, #1
 8000944:	e00f      	b.n	8000966 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000946:	4a0a      	ldr	r2, [pc, #40]	; (8000970 <SysTick_Config+0x40>)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	3b01      	subs	r3, #1
 800094c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800094e:	210f      	movs	r1, #15
 8000950:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000954:	f7ff ff8e 	bl	8000874 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000958:	4b05      	ldr	r3, [pc, #20]	; (8000970 <SysTick_Config+0x40>)
 800095a:	2200      	movs	r2, #0
 800095c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800095e:	4b04      	ldr	r3, [pc, #16]	; (8000970 <SysTick_Config+0x40>)
 8000960:	2207      	movs	r2, #7
 8000962:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000964:	2300      	movs	r3, #0
}
 8000966:	4618      	mov	r0, r3
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	e000e010 	.word	0xe000e010

08000974 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800097c:	6878      	ldr	r0, [r7, #4]
 800097e:	f7ff ff29 	bl	80007d4 <__NVIC_SetPriorityGrouping>
}
 8000982:	bf00      	nop
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}

0800098a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800098a:	b580      	push	{r7, lr}
 800098c:	b086      	sub	sp, #24
 800098e:	af00      	add	r7, sp, #0
 8000990:	4603      	mov	r3, r0
 8000992:	60b9      	str	r1, [r7, #8]
 8000994:	607a      	str	r2, [r7, #4]
 8000996:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000998:	f7ff ff40 	bl	800081c <__NVIC_GetPriorityGrouping>
 800099c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800099e:	687a      	ldr	r2, [r7, #4]
 80009a0:	68b9      	ldr	r1, [r7, #8]
 80009a2:	6978      	ldr	r0, [r7, #20]
 80009a4:	f7ff ff90 	bl	80008c8 <NVIC_EncodePriority>
 80009a8:	4602      	mov	r2, r0
 80009aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80009ae:	4611      	mov	r1, r2
 80009b0:	4618      	mov	r0, r3
 80009b2:	f7ff ff5f 	bl	8000874 <__NVIC_SetPriority>
}
 80009b6:	bf00      	nop
 80009b8:	3718      	adds	r7, #24
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}

080009be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009be:	b580      	push	{r7, lr}
 80009c0:	b082      	sub	sp, #8
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	4603      	mov	r3, r0
 80009c6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009cc:	4618      	mov	r0, r3
 80009ce:	f7ff ff33 	bl	8000838 <__NVIC_EnableIRQ>
}
 80009d2:	bf00      	nop
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}

080009da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009da:	b580      	push	{r7, lr}
 80009dc:	b082      	sub	sp, #8
 80009de:	af00      	add	r7, sp, #0
 80009e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009e2:	6878      	ldr	r0, [r7, #4]
 80009e4:	f7ff ffa4 	bl	8000930 <SysTick_Config>
 80009e8:	4603      	mov	r3, r0
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
	...

080009f4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d101      	bne.n	8000a06 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000a02:	2301      	movs	r3, #1
 8000a04:	e054      	b.n	8000ab0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	7f5b      	ldrb	r3, [r3, #29]
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d105      	bne.n	8000a1c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	2200      	movs	r2, #0
 8000a14:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000a16:	6878      	ldr	r0, [r7, #4]
 8000a18:	f007 ff70 	bl	80088fc <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	2202      	movs	r2, #2
 8000a20:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	791b      	ldrb	r3, [r3, #4]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d10c      	bne.n	8000a44 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4a22      	ldr	r2, [pc, #136]	; (8000ab8 <HAL_CRC_Init+0xc4>)
 8000a30:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	689a      	ldr	r2, [r3, #8]
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f022 0218 	bic.w	r2, r2, #24
 8000a40:	609a      	str	r2, [r3, #8]
 8000a42:	e00c      	b.n	8000a5e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	6899      	ldr	r1, [r3, #8]
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	68db      	ldr	r3, [r3, #12]
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	6878      	ldr	r0, [r7, #4]
 8000a50:	f000 f834 	bl	8000abc <HAL_CRCEx_Polynomial_Set>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	e028      	b.n	8000ab0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	795b      	ldrb	r3, [r3, #5]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d105      	bne.n	8000a72 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a6e:	611a      	str	r2, [r3, #16]
 8000a70:	e004      	b.n	8000a7c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	687a      	ldr	r2, [r7, #4]
 8000a78:	6912      	ldr	r2, [r2, #16]
 8000a7a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	689b      	ldr	r3, [r3, #8]
 8000a82:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	695a      	ldr	r2, [r3, #20]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	430a      	orrs	r2, r1
 8000a90:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	689b      	ldr	r3, [r3, #8]
 8000a98:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	699a      	ldr	r2, [r3, #24]
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	430a      	orrs	r2, r1
 8000aa6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2201      	movs	r2, #1
 8000aac:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8000aae:	2300      	movs	r3, #0
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3708      	adds	r7, #8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	04c11db7 	.word	0x04c11db7

08000abc <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b087      	sub	sp, #28
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	60f8      	str	r0, [r7, #12]
 8000ac4:	60b9      	str	r1, [r7, #8]
 8000ac6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8000acc:	231f      	movs	r3, #31
 8000ace:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8000ad0:	bf00      	nop
 8000ad2:	693b      	ldr	r3, [r7, #16]
 8000ad4:	1e5a      	subs	r2, r3, #1
 8000ad6:	613a      	str	r2, [r7, #16]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d009      	beq.n	8000af0 <HAL_CRCEx_Polynomial_Set+0x34>
 8000adc:	693b      	ldr	r3, [r7, #16]
 8000ade:	f003 031f 	and.w	r3, r3, #31
 8000ae2:	68ba      	ldr	r2, [r7, #8]
 8000ae4:	fa22 f303 	lsr.w	r3, r2, r3
 8000ae8:	f003 0301 	and.w	r3, r3, #1
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d0f0      	beq.n	8000ad2 <HAL_CRCEx_Polynomial_Set+0x16>
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	2b18      	cmp	r3, #24
 8000af4:	d846      	bhi.n	8000b84 <HAL_CRCEx_Polynomial_Set+0xc8>
 8000af6:	a201      	add	r2, pc, #4	; (adr r2, 8000afc <HAL_CRCEx_Polynomial_Set+0x40>)
 8000af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000afc:	08000b8b 	.word	0x08000b8b
 8000b00:	08000b85 	.word	0x08000b85
 8000b04:	08000b85 	.word	0x08000b85
 8000b08:	08000b85 	.word	0x08000b85
 8000b0c:	08000b85 	.word	0x08000b85
 8000b10:	08000b85 	.word	0x08000b85
 8000b14:	08000b85 	.word	0x08000b85
 8000b18:	08000b85 	.word	0x08000b85
 8000b1c:	08000b79 	.word	0x08000b79
 8000b20:	08000b85 	.word	0x08000b85
 8000b24:	08000b85 	.word	0x08000b85
 8000b28:	08000b85 	.word	0x08000b85
 8000b2c:	08000b85 	.word	0x08000b85
 8000b30:	08000b85 	.word	0x08000b85
 8000b34:	08000b85 	.word	0x08000b85
 8000b38:	08000b85 	.word	0x08000b85
 8000b3c:	08000b6d 	.word	0x08000b6d
 8000b40:	08000b85 	.word	0x08000b85
 8000b44:	08000b85 	.word	0x08000b85
 8000b48:	08000b85 	.word	0x08000b85
 8000b4c:	08000b85 	.word	0x08000b85
 8000b50:	08000b85 	.word	0x08000b85
 8000b54:	08000b85 	.word	0x08000b85
 8000b58:	08000b85 	.word	0x08000b85
 8000b5c:	08000b61 	.word	0x08000b61
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8000b60:	693b      	ldr	r3, [r7, #16]
 8000b62:	2b06      	cmp	r3, #6
 8000b64:	d913      	bls.n	8000b8e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8000b66:	2301      	movs	r3, #1
 8000b68:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8000b6a:	e010      	b.n	8000b8e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8000b6c:	693b      	ldr	r3, [r7, #16]
 8000b6e:	2b07      	cmp	r3, #7
 8000b70:	d90f      	bls.n	8000b92 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8000b72:	2301      	movs	r3, #1
 8000b74:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8000b76:	e00c      	b.n	8000b92 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8000b78:	693b      	ldr	r3, [r7, #16]
 8000b7a:	2b0f      	cmp	r3, #15
 8000b7c:	d90b      	bls.n	8000b96 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8000b82:	e008      	b.n	8000b96 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8000b84:	2301      	movs	r3, #1
 8000b86:	75fb      	strb	r3, [r7, #23]
      break;
 8000b88:	e006      	b.n	8000b98 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000b8a:	bf00      	nop
 8000b8c:	e004      	b.n	8000b98 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000b8e:	bf00      	nop
 8000b90:	e002      	b.n	8000b98 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000b92:	bf00      	nop
 8000b94:	e000      	b.n	8000b98 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000b96:	bf00      	nop
  }
  if (status == HAL_OK)
 8000b98:	7dfb      	ldrb	r3, [r7, #23]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d10d      	bne.n	8000bba <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	68ba      	ldr	r2, [r7, #8]
 8000ba4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	689b      	ldr	r3, [r3, #8]
 8000bac:	f023 0118 	bic.w	r1, r3, #24
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	687a      	ldr	r2, [r7, #4]
 8000bb6:	430a      	orrs	r2, r1
 8000bb8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8000bba:	7dfb      	ldrb	r3, [r7, #23]
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	371c      	adds	r7, #28
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr

08000bc8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8000bd0:	f7ff fdf4 	bl	80007bc <HAL_GetTick>
 8000bd4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d101      	bne.n	8000be0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	e314      	b.n	800120a <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a66      	ldr	r2, [pc, #408]	; (8000d80 <HAL_DMA_Init+0x1b8>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d04a      	beq.n	8000c80 <HAL_DMA_Init+0xb8>
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4a65      	ldr	r2, [pc, #404]	; (8000d84 <HAL_DMA_Init+0x1bc>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d045      	beq.n	8000c80 <HAL_DMA_Init+0xb8>
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a63      	ldr	r2, [pc, #396]	; (8000d88 <HAL_DMA_Init+0x1c0>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d040      	beq.n	8000c80 <HAL_DMA_Init+0xb8>
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4a62      	ldr	r2, [pc, #392]	; (8000d8c <HAL_DMA_Init+0x1c4>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d03b      	beq.n	8000c80 <HAL_DMA_Init+0xb8>
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a60      	ldr	r2, [pc, #384]	; (8000d90 <HAL_DMA_Init+0x1c8>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d036      	beq.n	8000c80 <HAL_DMA_Init+0xb8>
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a5f      	ldr	r2, [pc, #380]	; (8000d94 <HAL_DMA_Init+0x1cc>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d031      	beq.n	8000c80 <HAL_DMA_Init+0xb8>
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a5d      	ldr	r2, [pc, #372]	; (8000d98 <HAL_DMA_Init+0x1d0>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d02c      	beq.n	8000c80 <HAL_DMA_Init+0xb8>
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a5c      	ldr	r2, [pc, #368]	; (8000d9c <HAL_DMA_Init+0x1d4>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d027      	beq.n	8000c80 <HAL_DMA_Init+0xb8>
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a5a      	ldr	r2, [pc, #360]	; (8000da0 <HAL_DMA_Init+0x1d8>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d022      	beq.n	8000c80 <HAL_DMA_Init+0xb8>
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4a59      	ldr	r2, [pc, #356]	; (8000da4 <HAL_DMA_Init+0x1dc>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d01d      	beq.n	8000c80 <HAL_DMA_Init+0xb8>
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a57      	ldr	r2, [pc, #348]	; (8000da8 <HAL_DMA_Init+0x1e0>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d018      	beq.n	8000c80 <HAL_DMA_Init+0xb8>
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a56      	ldr	r2, [pc, #344]	; (8000dac <HAL_DMA_Init+0x1e4>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d013      	beq.n	8000c80 <HAL_DMA_Init+0xb8>
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a54      	ldr	r2, [pc, #336]	; (8000db0 <HAL_DMA_Init+0x1e8>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d00e      	beq.n	8000c80 <HAL_DMA_Init+0xb8>
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a53      	ldr	r2, [pc, #332]	; (8000db4 <HAL_DMA_Init+0x1ec>)
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d009      	beq.n	8000c80 <HAL_DMA_Init+0xb8>
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a51      	ldr	r2, [pc, #324]	; (8000db8 <HAL_DMA_Init+0x1f0>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d004      	beq.n	8000c80 <HAL_DMA_Init+0xb8>
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4a50      	ldr	r2, [pc, #320]	; (8000dbc <HAL_DMA_Init+0x1f4>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d101      	bne.n	8000c84 <HAL_DMA_Init+0xbc>
 8000c80:	2301      	movs	r3, #1
 8000c82:	e000      	b.n	8000c86 <HAL_DMA_Init+0xbe>
 8000c84:	2300      	movs	r3, #0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	f000 813c 	beq.w	8000f04 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2202      	movs	r2, #2
 8000c90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	2200      	movs	r2, #0
 8000c98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a37      	ldr	r2, [pc, #220]	; (8000d80 <HAL_DMA_Init+0x1b8>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d04a      	beq.n	8000d3c <HAL_DMA_Init+0x174>
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4a36      	ldr	r2, [pc, #216]	; (8000d84 <HAL_DMA_Init+0x1bc>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d045      	beq.n	8000d3c <HAL_DMA_Init+0x174>
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a34      	ldr	r2, [pc, #208]	; (8000d88 <HAL_DMA_Init+0x1c0>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d040      	beq.n	8000d3c <HAL_DMA_Init+0x174>
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a33      	ldr	r2, [pc, #204]	; (8000d8c <HAL_DMA_Init+0x1c4>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d03b      	beq.n	8000d3c <HAL_DMA_Init+0x174>
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a31      	ldr	r2, [pc, #196]	; (8000d90 <HAL_DMA_Init+0x1c8>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d036      	beq.n	8000d3c <HAL_DMA_Init+0x174>
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a30      	ldr	r2, [pc, #192]	; (8000d94 <HAL_DMA_Init+0x1cc>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d031      	beq.n	8000d3c <HAL_DMA_Init+0x174>
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a2e      	ldr	r2, [pc, #184]	; (8000d98 <HAL_DMA_Init+0x1d0>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d02c      	beq.n	8000d3c <HAL_DMA_Init+0x174>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a2d      	ldr	r2, [pc, #180]	; (8000d9c <HAL_DMA_Init+0x1d4>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d027      	beq.n	8000d3c <HAL_DMA_Init+0x174>
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a2b      	ldr	r2, [pc, #172]	; (8000da0 <HAL_DMA_Init+0x1d8>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d022      	beq.n	8000d3c <HAL_DMA_Init+0x174>
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4a2a      	ldr	r2, [pc, #168]	; (8000da4 <HAL_DMA_Init+0x1dc>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d01d      	beq.n	8000d3c <HAL_DMA_Init+0x174>
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a28      	ldr	r2, [pc, #160]	; (8000da8 <HAL_DMA_Init+0x1e0>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d018      	beq.n	8000d3c <HAL_DMA_Init+0x174>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a27      	ldr	r2, [pc, #156]	; (8000dac <HAL_DMA_Init+0x1e4>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d013      	beq.n	8000d3c <HAL_DMA_Init+0x174>
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a25      	ldr	r2, [pc, #148]	; (8000db0 <HAL_DMA_Init+0x1e8>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d00e      	beq.n	8000d3c <HAL_DMA_Init+0x174>
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a24      	ldr	r2, [pc, #144]	; (8000db4 <HAL_DMA_Init+0x1ec>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d009      	beq.n	8000d3c <HAL_DMA_Init+0x174>
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a22      	ldr	r2, [pc, #136]	; (8000db8 <HAL_DMA_Init+0x1f0>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d004      	beq.n	8000d3c <HAL_DMA_Init+0x174>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a21      	ldr	r2, [pc, #132]	; (8000dbc <HAL_DMA_Init+0x1f4>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d108      	bne.n	8000d4e <HAL_DMA_Init+0x186>
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f022 0201 	bic.w	r2, r2, #1
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	e007      	b.n	8000d5e <HAL_DMA_Init+0x196>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f022 0201 	bic.w	r2, r2, #1
 8000d5c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8000d5e:	e02f      	b.n	8000dc0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000d60:	f7ff fd2c 	bl	80007bc <HAL_GetTick>
 8000d64:	4602      	mov	r2, r0
 8000d66:	693b      	ldr	r3, [r7, #16]
 8000d68:	1ad3      	subs	r3, r2, r3
 8000d6a:	2b05      	cmp	r3, #5
 8000d6c:	d928      	bls.n	8000dc0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2220      	movs	r2, #32
 8000d72:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2203      	movs	r2, #3
 8000d78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	e244      	b.n	800120a <HAL_DMA_Init+0x642>
 8000d80:	40020010 	.word	0x40020010
 8000d84:	40020028 	.word	0x40020028
 8000d88:	40020040 	.word	0x40020040
 8000d8c:	40020058 	.word	0x40020058
 8000d90:	40020070 	.word	0x40020070
 8000d94:	40020088 	.word	0x40020088
 8000d98:	400200a0 	.word	0x400200a0
 8000d9c:	400200b8 	.word	0x400200b8
 8000da0:	40020410 	.word	0x40020410
 8000da4:	40020428 	.word	0x40020428
 8000da8:	40020440 	.word	0x40020440
 8000dac:	40020458 	.word	0x40020458
 8000db0:	40020470 	.word	0x40020470
 8000db4:	40020488 	.word	0x40020488
 8000db8:	400204a0 	.word	0x400204a0
 8000dbc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f003 0301 	and.w	r3, r3, #1
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d1c8      	bne.n	8000d60 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000dd6:	697a      	ldr	r2, [r7, #20]
 8000dd8:	4b84      	ldr	r3, [pc, #528]	; (8000fec <HAL_DMA_Init+0x424>)
 8000dda:	4013      	ands	r3, r2
 8000ddc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8000de6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	691b      	ldr	r3, [r3, #16]
 8000dec:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000df2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dfe:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6a1b      	ldr	r3, [r3, #32]
 8000e04:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8000e06:	697a      	ldr	r2, [r7, #20]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e10:	2b04      	cmp	r3, #4
 8000e12:	d107      	bne.n	8000e24 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	697a      	ldr	r2, [r7, #20]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	2b28      	cmp	r3, #40	; 0x28
 8000e2a:	d903      	bls.n	8000e34 <HAL_DMA_Init+0x26c>
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	2b2e      	cmp	r3, #46	; 0x2e
 8000e32:	d91f      	bls.n	8000e74 <HAL_DMA_Init+0x2ac>
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	2b3e      	cmp	r3, #62	; 0x3e
 8000e3a:	d903      	bls.n	8000e44 <HAL_DMA_Init+0x27c>
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	2b42      	cmp	r3, #66	; 0x42
 8000e42:	d917      	bls.n	8000e74 <HAL_DMA_Init+0x2ac>
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	2b46      	cmp	r3, #70	; 0x46
 8000e4a:	d903      	bls.n	8000e54 <HAL_DMA_Init+0x28c>
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	2b48      	cmp	r3, #72	; 0x48
 8000e52:	d90f      	bls.n	8000e74 <HAL_DMA_Init+0x2ac>
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	2b4e      	cmp	r3, #78	; 0x4e
 8000e5a:	d903      	bls.n	8000e64 <HAL_DMA_Init+0x29c>
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	2b52      	cmp	r3, #82	; 0x52
 8000e62:	d907      	bls.n	8000e74 <HAL_DMA_Init+0x2ac>
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	2b73      	cmp	r3, #115	; 0x73
 8000e6a:	d905      	bls.n	8000e78 <HAL_DMA_Init+0x2b0>
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	2b77      	cmp	r3, #119	; 0x77
 8000e72:	d801      	bhi.n	8000e78 <HAL_DMA_Init+0x2b0>
 8000e74:	2301      	movs	r3, #1
 8000e76:	e000      	b.n	8000e7a <HAL_DMA_Init+0x2b2>
 8000e78:	2300      	movs	r3, #0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d003      	beq.n	8000e86 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000e84:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	697a      	ldr	r2, [r7, #20]
 8000e8c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	695b      	ldr	r3, [r3, #20]
 8000e94:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	f023 0307 	bic.w	r3, r3, #7
 8000e9c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ea2:	697a      	ldr	r2, [r7, #20]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eac:	2b04      	cmp	r3, #4
 8000eae:	d117      	bne.n	8000ee0 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eb4:	697a      	ldr	r2, [r7, #20]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d00e      	beq.n	8000ee0 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f001 fdd8 	bl	8002a78 <DMA_CheckFifoParam>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d008      	beq.n	8000ee0 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2240      	movs	r2, #64	; 0x40
 8000ed2:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8000edc:	2301      	movs	r3, #1
 8000ede:	e194      	b.n	800120a <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	697a      	ldr	r2, [r7, #20]
 8000ee6:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000ee8:	6878      	ldr	r0, [r7, #4]
 8000eea:	f001 fd13 	bl	8002914 <DMA_CalcBaseAndBitshift>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ef6:	f003 031f 	and.w	r3, r3, #31
 8000efa:	223f      	movs	r2, #63	; 0x3f
 8000efc:	409a      	lsls	r2, r3
 8000efe:	68bb      	ldr	r3, [r7, #8]
 8000f00:	609a      	str	r2, [r3, #8]
 8000f02:	e0ca      	b.n	800109a <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a39      	ldr	r2, [pc, #228]	; (8000ff0 <HAL_DMA_Init+0x428>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d022      	beq.n	8000f54 <HAL_DMA_Init+0x38c>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a38      	ldr	r2, [pc, #224]	; (8000ff4 <HAL_DMA_Init+0x42c>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d01d      	beq.n	8000f54 <HAL_DMA_Init+0x38c>
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a36      	ldr	r2, [pc, #216]	; (8000ff8 <HAL_DMA_Init+0x430>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d018      	beq.n	8000f54 <HAL_DMA_Init+0x38c>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a35      	ldr	r2, [pc, #212]	; (8000ffc <HAL_DMA_Init+0x434>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d013      	beq.n	8000f54 <HAL_DMA_Init+0x38c>
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a33      	ldr	r2, [pc, #204]	; (8001000 <HAL_DMA_Init+0x438>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d00e      	beq.n	8000f54 <HAL_DMA_Init+0x38c>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a32      	ldr	r2, [pc, #200]	; (8001004 <HAL_DMA_Init+0x43c>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d009      	beq.n	8000f54 <HAL_DMA_Init+0x38c>
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a30      	ldr	r2, [pc, #192]	; (8001008 <HAL_DMA_Init+0x440>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d004      	beq.n	8000f54 <HAL_DMA_Init+0x38c>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4a2f      	ldr	r2, [pc, #188]	; (800100c <HAL_DMA_Init+0x444>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d101      	bne.n	8000f58 <HAL_DMA_Init+0x390>
 8000f54:	2301      	movs	r3, #1
 8000f56:	e000      	b.n	8000f5a <HAL_DMA_Init+0x392>
 8000f58:	2300      	movs	r3, #0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	f000 8094 	beq.w	8001088 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a22      	ldr	r2, [pc, #136]	; (8000ff0 <HAL_DMA_Init+0x428>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d021      	beq.n	8000fae <HAL_DMA_Init+0x3e6>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a21      	ldr	r2, [pc, #132]	; (8000ff4 <HAL_DMA_Init+0x42c>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d01c      	beq.n	8000fae <HAL_DMA_Init+0x3e6>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a1f      	ldr	r2, [pc, #124]	; (8000ff8 <HAL_DMA_Init+0x430>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d017      	beq.n	8000fae <HAL_DMA_Init+0x3e6>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a1e      	ldr	r2, [pc, #120]	; (8000ffc <HAL_DMA_Init+0x434>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d012      	beq.n	8000fae <HAL_DMA_Init+0x3e6>
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a1c      	ldr	r2, [pc, #112]	; (8001000 <HAL_DMA_Init+0x438>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d00d      	beq.n	8000fae <HAL_DMA_Init+0x3e6>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a1b      	ldr	r2, [pc, #108]	; (8001004 <HAL_DMA_Init+0x43c>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d008      	beq.n	8000fae <HAL_DMA_Init+0x3e6>
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a19      	ldr	r2, [pc, #100]	; (8001008 <HAL_DMA_Init+0x440>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d003      	beq.n	8000fae <HAL_DMA_Init+0x3e6>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a18      	ldr	r2, [pc, #96]	; (800100c <HAL_DMA_Init+0x444>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2202      	movs	r2, #2
 8000fb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8000fc8:	697a      	ldr	r2, [r7, #20]
 8000fca:	4b11      	ldr	r3, [pc, #68]	; (8001010 <HAL_DMA_Init+0x448>)
 8000fcc:	4013      	ands	r3, r2
 8000fce:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	2b40      	cmp	r3, #64	; 0x40
 8000fd6:	d01d      	beq.n	8001014 <HAL_DMA_Init+0x44c>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	689b      	ldr	r3, [r3, #8]
 8000fdc:	2b80      	cmp	r3, #128	; 0x80
 8000fde:	d102      	bne.n	8000fe6 <HAL_DMA_Init+0x41e>
 8000fe0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000fe4:	e017      	b.n	8001016 <HAL_DMA_Init+0x44e>
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	e015      	b.n	8001016 <HAL_DMA_Init+0x44e>
 8000fea:	bf00      	nop
 8000fec:	fe10803f 	.word	0xfe10803f
 8000ff0:	58025408 	.word	0x58025408
 8000ff4:	5802541c 	.word	0x5802541c
 8000ff8:	58025430 	.word	0x58025430
 8000ffc:	58025444 	.word	0x58025444
 8001000:	58025458 	.word	0x58025458
 8001004:	5802546c 	.word	0x5802546c
 8001008:	58025480 	.word	0x58025480
 800100c:	58025494 	.word	0x58025494
 8001010:	fffe000f 	.word	0xfffe000f
 8001014:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001016:	687a      	ldr	r2, [r7, #4]
 8001018:	68d2      	ldr	r2, [r2, #12]
 800101a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800101c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	691b      	ldr	r3, [r3, #16]
 8001022:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001024:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	695b      	ldr	r3, [r3, #20]
 800102a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800102c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	699b      	ldr	r3, [r3, #24]
 8001032:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001034:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	69db      	ldr	r3, [r3, #28]
 800103a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800103c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6a1b      	ldr	r3, [r3, #32]
 8001042:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001044:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001046:	697a      	ldr	r2, [r7, #20]
 8001048:	4313      	orrs	r3, r2
 800104a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	697a      	ldr	r2, [r7, #20]
 8001052:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	461a      	mov	r2, r3
 800105a:	4b6e      	ldr	r3, [pc, #440]	; (8001214 <HAL_DMA_Init+0x64c>)
 800105c:	4413      	add	r3, r2
 800105e:	4a6e      	ldr	r2, [pc, #440]	; (8001218 <HAL_DMA_Init+0x650>)
 8001060:	fba2 2303 	umull	r2, r3, r2, r3
 8001064:	091b      	lsrs	r3, r3, #4
 8001066:	009a      	lsls	r2, r3, #2
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f001 fc51 	bl	8002914 <DMA_CalcBaseAndBitshift>
 8001072:	4603      	mov	r3, r0
 8001074:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800107a:	f003 031f 	and.w	r3, r3, #31
 800107e:	2201      	movs	r2, #1
 8001080:	409a      	lsls	r2, r3
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	e008      	b.n	800109a <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2240      	movs	r2, #64	; 0x40
 800108c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2203      	movs	r2, #3
 8001092:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e0b7      	b.n	800120a <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a5f      	ldr	r2, [pc, #380]	; (800121c <HAL_DMA_Init+0x654>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d072      	beq.n	800118a <HAL_DMA_Init+0x5c2>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a5d      	ldr	r2, [pc, #372]	; (8001220 <HAL_DMA_Init+0x658>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d06d      	beq.n	800118a <HAL_DMA_Init+0x5c2>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a5c      	ldr	r2, [pc, #368]	; (8001224 <HAL_DMA_Init+0x65c>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d068      	beq.n	800118a <HAL_DMA_Init+0x5c2>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a5a      	ldr	r2, [pc, #360]	; (8001228 <HAL_DMA_Init+0x660>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d063      	beq.n	800118a <HAL_DMA_Init+0x5c2>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a59      	ldr	r2, [pc, #356]	; (800122c <HAL_DMA_Init+0x664>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d05e      	beq.n	800118a <HAL_DMA_Init+0x5c2>
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a57      	ldr	r2, [pc, #348]	; (8001230 <HAL_DMA_Init+0x668>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d059      	beq.n	800118a <HAL_DMA_Init+0x5c2>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a56      	ldr	r2, [pc, #344]	; (8001234 <HAL_DMA_Init+0x66c>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d054      	beq.n	800118a <HAL_DMA_Init+0x5c2>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a54      	ldr	r2, [pc, #336]	; (8001238 <HAL_DMA_Init+0x670>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d04f      	beq.n	800118a <HAL_DMA_Init+0x5c2>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a53      	ldr	r2, [pc, #332]	; (800123c <HAL_DMA_Init+0x674>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d04a      	beq.n	800118a <HAL_DMA_Init+0x5c2>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a51      	ldr	r2, [pc, #324]	; (8001240 <HAL_DMA_Init+0x678>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d045      	beq.n	800118a <HAL_DMA_Init+0x5c2>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a50      	ldr	r2, [pc, #320]	; (8001244 <HAL_DMA_Init+0x67c>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d040      	beq.n	800118a <HAL_DMA_Init+0x5c2>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a4e      	ldr	r2, [pc, #312]	; (8001248 <HAL_DMA_Init+0x680>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d03b      	beq.n	800118a <HAL_DMA_Init+0x5c2>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a4d      	ldr	r2, [pc, #308]	; (800124c <HAL_DMA_Init+0x684>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d036      	beq.n	800118a <HAL_DMA_Init+0x5c2>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a4b      	ldr	r2, [pc, #300]	; (8001250 <HAL_DMA_Init+0x688>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d031      	beq.n	800118a <HAL_DMA_Init+0x5c2>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a4a      	ldr	r2, [pc, #296]	; (8001254 <HAL_DMA_Init+0x68c>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d02c      	beq.n	800118a <HAL_DMA_Init+0x5c2>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a48      	ldr	r2, [pc, #288]	; (8001258 <HAL_DMA_Init+0x690>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d027      	beq.n	800118a <HAL_DMA_Init+0x5c2>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a47      	ldr	r2, [pc, #284]	; (800125c <HAL_DMA_Init+0x694>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d022      	beq.n	800118a <HAL_DMA_Init+0x5c2>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a45      	ldr	r2, [pc, #276]	; (8001260 <HAL_DMA_Init+0x698>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d01d      	beq.n	800118a <HAL_DMA_Init+0x5c2>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a44      	ldr	r2, [pc, #272]	; (8001264 <HAL_DMA_Init+0x69c>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d018      	beq.n	800118a <HAL_DMA_Init+0x5c2>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a42      	ldr	r2, [pc, #264]	; (8001268 <HAL_DMA_Init+0x6a0>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d013      	beq.n	800118a <HAL_DMA_Init+0x5c2>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a41      	ldr	r2, [pc, #260]	; (800126c <HAL_DMA_Init+0x6a4>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d00e      	beq.n	800118a <HAL_DMA_Init+0x5c2>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a3f      	ldr	r2, [pc, #252]	; (8001270 <HAL_DMA_Init+0x6a8>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d009      	beq.n	800118a <HAL_DMA_Init+0x5c2>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a3e      	ldr	r2, [pc, #248]	; (8001274 <HAL_DMA_Init+0x6ac>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d004      	beq.n	800118a <HAL_DMA_Init+0x5c2>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a3c      	ldr	r2, [pc, #240]	; (8001278 <HAL_DMA_Init+0x6b0>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d101      	bne.n	800118e <HAL_DMA_Init+0x5c6>
 800118a:	2301      	movs	r3, #1
 800118c:	e000      	b.n	8001190 <HAL_DMA_Init+0x5c8>
 800118e:	2300      	movs	r3, #0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d032      	beq.n	80011fa <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f001 fceb 	bl	8002b70 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	2b80      	cmp	r3, #128	; 0x80
 80011a0:	d102      	bne.n	80011a8 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2200      	movs	r2, #0
 80011a6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	685a      	ldr	r2, [r3, #4]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011b0:	b2d2      	uxtb	r2, r2
 80011b2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80011b8:	687a      	ldr	r2, [r7, #4]
 80011ba:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80011bc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d010      	beq.n	80011e8 <HAL_DMA_Init+0x620>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	2b08      	cmp	r3, #8
 80011cc:	d80c      	bhi.n	80011e8 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f001 fd68 	bl	8002ca4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	e008      	b.n	80011fa <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2200      	movs	r2, #0
 80011ec:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2200      	movs	r2, #0
 80011f2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2200      	movs	r2, #0
 80011f8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2200      	movs	r2, #0
 80011fe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2201      	movs	r2, #1
 8001204:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001208:	2300      	movs	r3, #0
}
 800120a:	4618      	mov	r0, r3
 800120c:	3718      	adds	r7, #24
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	a7fdabf8 	.word	0xa7fdabf8
 8001218:	cccccccd 	.word	0xcccccccd
 800121c:	40020010 	.word	0x40020010
 8001220:	40020028 	.word	0x40020028
 8001224:	40020040 	.word	0x40020040
 8001228:	40020058 	.word	0x40020058
 800122c:	40020070 	.word	0x40020070
 8001230:	40020088 	.word	0x40020088
 8001234:	400200a0 	.word	0x400200a0
 8001238:	400200b8 	.word	0x400200b8
 800123c:	40020410 	.word	0x40020410
 8001240:	40020428 	.word	0x40020428
 8001244:	40020440 	.word	0x40020440
 8001248:	40020458 	.word	0x40020458
 800124c:	40020470 	.word	0x40020470
 8001250:	40020488 	.word	0x40020488
 8001254:	400204a0 	.word	0x400204a0
 8001258:	400204b8 	.word	0x400204b8
 800125c:	58025408 	.word	0x58025408
 8001260:	5802541c 	.word	0x5802541c
 8001264:	58025430 	.word	0x58025430
 8001268:	58025444 	.word	0x58025444
 800126c:	58025458 	.word	0x58025458
 8001270:	5802546c 	.word	0x5802546c
 8001274:	58025480 	.word	0x58025480
 8001278:	58025494 	.word	0x58025494

0800127c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b086      	sub	sp, #24
 8001280:	af00      	add	r7, sp, #0
 8001282:	60f8      	str	r0, [r7, #12]
 8001284:	60b9      	str	r1, [r7, #8]
 8001286:	607a      	str	r2, [r7, #4]
 8001288:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800128a:	2300      	movs	r3, #0
 800128c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d101      	bne.n	8001298 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	e226      	b.n	80016e6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d101      	bne.n	80012a6 <HAL_DMA_Start_IT+0x2a>
 80012a2:	2302      	movs	r3, #2
 80012a4:	e21f      	b.n	80016e6 <HAL_DMA_Start_IT+0x46a>
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	2201      	movs	r2, #1
 80012aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	f040 820a 	bne.w	80016d0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	2202      	movs	r2, #2
 80012c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	2200      	movs	r2, #0
 80012c8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a68      	ldr	r2, [pc, #416]	; (8001470 <HAL_DMA_Start_IT+0x1f4>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d04a      	beq.n	800136a <HAL_DMA_Start_IT+0xee>
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a66      	ldr	r2, [pc, #408]	; (8001474 <HAL_DMA_Start_IT+0x1f8>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d045      	beq.n	800136a <HAL_DMA_Start_IT+0xee>
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a65      	ldr	r2, [pc, #404]	; (8001478 <HAL_DMA_Start_IT+0x1fc>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d040      	beq.n	800136a <HAL_DMA_Start_IT+0xee>
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a63      	ldr	r2, [pc, #396]	; (800147c <HAL_DMA_Start_IT+0x200>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d03b      	beq.n	800136a <HAL_DMA_Start_IT+0xee>
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a62      	ldr	r2, [pc, #392]	; (8001480 <HAL_DMA_Start_IT+0x204>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d036      	beq.n	800136a <HAL_DMA_Start_IT+0xee>
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a60      	ldr	r2, [pc, #384]	; (8001484 <HAL_DMA_Start_IT+0x208>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d031      	beq.n	800136a <HAL_DMA_Start_IT+0xee>
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a5f      	ldr	r2, [pc, #380]	; (8001488 <HAL_DMA_Start_IT+0x20c>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d02c      	beq.n	800136a <HAL_DMA_Start_IT+0xee>
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a5d      	ldr	r2, [pc, #372]	; (800148c <HAL_DMA_Start_IT+0x210>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d027      	beq.n	800136a <HAL_DMA_Start_IT+0xee>
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a5c      	ldr	r2, [pc, #368]	; (8001490 <HAL_DMA_Start_IT+0x214>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d022      	beq.n	800136a <HAL_DMA_Start_IT+0xee>
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a5a      	ldr	r2, [pc, #360]	; (8001494 <HAL_DMA_Start_IT+0x218>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d01d      	beq.n	800136a <HAL_DMA_Start_IT+0xee>
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a59      	ldr	r2, [pc, #356]	; (8001498 <HAL_DMA_Start_IT+0x21c>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d018      	beq.n	800136a <HAL_DMA_Start_IT+0xee>
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a57      	ldr	r2, [pc, #348]	; (800149c <HAL_DMA_Start_IT+0x220>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d013      	beq.n	800136a <HAL_DMA_Start_IT+0xee>
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a56      	ldr	r2, [pc, #344]	; (80014a0 <HAL_DMA_Start_IT+0x224>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d00e      	beq.n	800136a <HAL_DMA_Start_IT+0xee>
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a54      	ldr	r2, [pc, #336]	; (80014a4 <HAL_DMA_Start_IT+0x228>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d009      	beq.n	800136a <HAL_DMA_Start_IT+0xee>
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a53      	ldr	r2, [pc, #332]	; (80014a8 <HAL_DMA_Start_IT+0x22c>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d004      	beq.n	800136a <HAL_DMA_Start_IT+0xee>
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a51      	ldr	r2, [pc, #324]	; (80014ac <HAL_DMA_Start_IT+0x230>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d108      	bne.n	800137c <HAL_DMA_Start_IT+0x100>
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f022 0201 	bic.w	r2, r2, #1
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	e007      	b.n	800138c <HAL_DMA_Start_IT+0x110>
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f022 0201 	bic.w	r2, r2, #1
 800138a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	687a      	ldr	r2, [r7, #4]
 8001390:	68b9      	ldr	r1, [r7, #8]
 8001392:	68f8      	ldr	r0, [r7, #12]
 8001394:	f001 f912 	bl	80025bc <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a34      	ldr	r2, [pc, #208]	; (8001470 <HAL_DMA_Start_IT+0x1f4>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d04a      	beq.n	8001438 <HAL_DMA_Start_IT+0x1bc>
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a33      	ldr	r2, [pc, #204]	; (8001474 <HAL_DMA_Start_IT+0x1f8>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d045      	beq.n	8001438 <HAL_DMA_Start_IT+0x1bc>
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a31      	ldr	r2, [pc, #196]	; (8001478 <HAL_DMA_Start_IT+0x1fc>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d040      	beq.n	8001438 <HAL_DMA_Start_IT+0x1bc>
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a30      	ldr	r2, [pc, #192]	; (800147c <HAL_DMA_Start_IT+0x200>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d03b      	beq.n	8001438 <HAL_DMA_Start_IT+0x1bc>
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a2e      	ldr	r2, [pc, #184]	; (8001480 <HAL_DMA_Start_IT+0x204>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d036      	beq.n	8001438 <HAL_DMA_Start_IT+0x1bc>
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a2d      	ldr	r2, [pc, #180]	; (8001484 <HAL_DMA_Start_IT+0x208>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d031      	beq.n	8001438 <HAL_DMA_Start_IT+0x1bc>
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a2b      	ldr	r2, [pc, #172]	; (8001488 <HAL_DMA_Start_IT+0x20c>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d02c      	beq.n	8001438 <HAL_DMA_Start_IT+0x1bc>
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a2a      	ldr	r2, [pc, #168]	; (800148c <HAL_DMA_Start_IT+0x210>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d027      	beq.n	8001438 <HAL_DMA_Start_IT+0x1bc>
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a28      	ldr	r2, [pc, #160]	; (8001490 <HAL_DMA_Start_IT+0x214>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d022      	beq.n	8001438 <HAL_DMA_Start_IT+0x1bc>
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a27      	ldr	r2, [pc, #156]	; (8001494 <HAL_DMA_Start_IT+0x218>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d01d      	beq.n	8001438 <HAL_DMA_Start_IT+0x1bc>
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a25      	ldr	r2, [pc, #148]	; (8001498 <HAL_DMA_Start_IT+0x21c>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d018      	beq.n	8001438 <HAL_DMA_Start_IT+0x1bc>
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a24      	ldr	r2, [pc, #144]	; (800149c <HAL_DMA_Start_IT+0x220>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d013      	beq.n	8001438 <HAL_DMA_Start_IT+0x1bc>
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a22      	ldr	r2, [pc, #136]	; (80014a0 <HAL_DMA_Start_IT+0x224>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d00e      	beq.n	8001438 <HAL_DMA_Start_IT+0x1bc>
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a21      	ldr	r2, [pc, #132]	; (80014a4 <HAL_DMA_Start_IT+0x228>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d009      	beq.n	8001438 <HAL_DMA_Start_IT+0x1bc>
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a1f      	ldr	r2, [pc, #124]	; (80014a8 <HAL_DMA_Start_IT+0x22c>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d004      	beq.n	8001438 <HAL_DMA_Start_IT+0x1bc>
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a1e      	ldr	r2, [pc, #120]	; (80014ac <HAL_DMA_Start_IT+0x230>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d101      	bne.n	800143c <HAL_DMA_Start_IT+0x1c0>
 8001438:	2301      	movs	r3, #1
 800143a:	e000      	b.n	800143e <HAL_DMA_Start_IT+0x1c2>
 800143c:	2300      	movs	r3, #0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d036      	beq.n	80014b0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f023 021e 	bic.w	r2, r3, #30
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f042 0216 	orr.w	r2, r2, #22
 8001454:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145a:	2b00      	cmp	r3, #0
 800145c:	d03e      	beq.n	80014dc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f042 0208 	orr.w	r2, r2, #8
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	e035      	b.n	80014dc <HAL_DMA_Start_IT+0x260>
 8001470:	40020010 	.word	0x40020010
 8001474:	40020028 	.word	0x40020028
 8001478:	40020040 	.word	0x40020040
 800147c:	40020058 	.word	0x40020058
 8001480:	40020070 	.word	0x40020070
 8001484:	40020088 	.word	0x40020088
 8001488:	400200a0 	.word	0x400200a0
 800148c:	400200b8 	.word	0x400200b8
 8001490:	40020410 	.word	0x40020410
 8001494:	40020428 	.word	0x40020428
 8001498:	40020440 	.word	0x40020440
 800149c:	40020458 	.word	0x40020458
 80014a0:	40020470 	.word	0x40020470
 80014a4:	40020488 	.word	0x40020488
 80014a8:	400204a0 	.word	0x400204a0
 80014ac:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f023 020e 	bic.w	r2, r3, #14
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f042 020a 	orr.w	r2, r2, #10
 80014c2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d007      	beq.n	80014dc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f042 0204 	orr.w	r2, r2, #4
 80014da:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a83      	ldr	r2, [pc, #524]	; (80016f0 <HAL_DMA_Start_IT+0x474>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d072      	beq.n	80015cc <HAL_DMA_Start_IT+0x350>
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a82      	ldr	r2, [pc, #520]	; (80016f4 <HAL_DMA_Start_IT+0x478>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d06d      	beq.n	80015cc <HAL_DMA_Start_IT+0x350>
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a80      	ldr	r2, [pc, #512]	; (80016f8 <HAL_DMA_Start_IT+0x47c>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d068      	beq.n	80015cc <HAL_DMA_Start_IT+0x350>
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a7f      	ldr	r2, [pc, #508]	; (80016fc <HAL_DMA_Start_IT+0x480>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d063      	beq.n	80015cc <HAL_DMA_Start_IT+0x350>
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a7d      	ldr	r2, [pc, #500]	; (8001700 <HAL_DMA_Start_IT+0x484>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d05e      	beq.n	80015cc <HAL_DMA_Start_IT+0x350>
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a7c      	ldr	r2, [pc, #496]	; (8001704 <HAL_DMA_Start_IT+0x488>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d059      	beq.n	80015cc <HAL_DMA_Start_IT+0x350>
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a7a      	ldr	r2, [pc, #488]	; (8001708 <HAL_DMA_Start_IT+0x48c>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d054      	beq.n	80015cc <HAL_DMA_Start_IT+0x350>
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a79      	ldr	r2, [pc, #484]	; (800170c <HAL_DMA_Start_IT+0x490>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d04f      	beq.n	80015cc <HAL_DMA_Start_IT+0x350>
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a77      	ldr	r2, [pc, #476]	; (8001710 <HAL_DMA_Start_IT+0x494>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d04a      	beq.n	80015cc <HAL_DMA_Start_IT+0x350>
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a76      	ldr	r2, [pc, #472]	; (8001714 <HAL_DMA_Start_IT+0x498>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d045      	beq.n	80015cc <HAL_DMA_Start_IT+0x350>
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a74      	ldr	r2, [pc, #464]	; (8001718 <HAL_DMA_Start_IT+0x49c>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d040      	beq.n	80015cc <HAL_DMA_Start_IT+0x350>
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a73      	ldr	r2, [pc, #460]	; (800171c <HAL_DMA_Start_IT+0x4a0>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d03b      	beq.n	80015cc <HAL_DMA_Start_IT+0x350>
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a71      	ldr	r2, [pc, #452]	; (8001720 <HAL_DMA_Start_IT+0x4a4>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d036      	beq.n	80015cc <HAL_DMA_Start_IT+0x350>
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a70      	ldr	r2, [pc, #448]	; (8001724 <HAL_DMA_Start_IT+0x4a8>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d031      	beq.n	80015cc <HAL_DMA_Start_IT+0x350>
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a6e      	ldr	r2, [pc, #440]	; (8001728 <HAL_DMA_Start_IT+0x4ac>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d02c      	beq.n	80015cc <HAL_DMA_Start_IT+0x350>
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a6d      	ldr	r2, [pc, #436]	; (800172c <HAL_DMA_Start_IT+0x4b0>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d027      	beq.n	80015cc <HAL_DMA_Start_IT+0x350>
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a6b      	ldr	r2, [pc, #428]	; (8001730 <HAL_DMA_Start_IT+0x4b4>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d022      	beq.n	80015cc <HAL_DMA_Start_IT+0x350>
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a6a      	ldr	r2, [pc, #424]	; (8001734 <HAL_DMA_Start_IT+0x4b8>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d01d      	beq.n	80015cc <HAL_DMA_Start_IT+0x350>
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a68      	ldr	r2, [pc, #416]	; (8001738 <HAL_DMA_Start_IT+0x4bc>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d018      	beq.n	80015cc <HAL_DMA_Start_IT+0x350>
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a67      	ldr	r2, [pc, #412]	; (800173c <HAL_DMA_Start_IT+0x4c0>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d013      	beq.n	80015cc <HAL_DMA_Start_IT+0x350>
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a65      	ldr	r2, [pc, #404]	; (8001740 <HAL_DMA_Start_IT+0x4c4>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d00e      	beq.n	80015cc <HAL_DMA_Start_IT+0x350>
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a64      	ldr	r2, [pc, #400]	; (8001744 <HAL_DMA_Start_IT+0x4c8>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d009      	beq.n	80015cc <HAL_DMA_Start_IT+0x350>
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a62      	ldr	r2, [pc, #392]	; (8001748 <HAL_DMA_Start_IT+0x4cc>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d004      	beq.n	80015cc <HAL_DMA_Start_IT+0x350>
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a61      	ldr	r2, [pc, #388]	; (800174c <HAL_DMA_Start_IT+0x4d0>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d101      	bne.n	80015d0 <HAL_DMA_Start_IT+0x354>
 80015cc:	2301      	movs	r3, #1
 80015ce:	e000      	b.n	80015d2 <HAL_DMA_Start_IT+0x356>
 80015d0:	2300      	movs	r3, #0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d01a      	beq.n	800160c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d007      	beq.n	80015f4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80015f2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d007      	beq.n	800160c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001606:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800160a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a37      	ldr	r2, [pc, #220]	; (80016f0 <HAL_DMA_Start_IT+0x474>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d04a      	beq.n	80016ac <HAL_DMA_Start_IT+0x430>
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a36      	ldr	r2, [pc, #216]	; (80016f4 <HAL_DMA_Start_IT+0x478>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d045      	beq.n	80016ac <HAL_DMA_Start_IT+0x430>
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a34      	ldr	r2, [pc, #208]	; (80016f8 <HAL_DMA_Start_IT+0x47c>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d040      	beq.n	80016ac <HAL_DMA_Start_IT+0x430>
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a33      	ldr	r2, [pc, #204]	; (80016fc <HAL_DMA_Start_IT+0x480>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d03b      	beq.n	80016ac <HAL_DMA_Start_IT+0x430>
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a31      	ldr	r2, [pc, #196]	; (8001700 <HAL_DMA_Start_IT+0x484>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d036      	beq.n	80016ac <HAL_DMA_Start_IT+0x430>
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a30      	ldr	r2, [pc, #192]	; (8001704 <HAL_DMA_Start_IT+0x488>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d031      	beq.n	80016ac <HAL_DMA_Start_IT+0x430>
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a2e      	ldr	r2, [pc, #184]	; (8001708 <HAL_DMA_Start_IT+0x48c>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d02c      	beq.n	80016ac <HAL_DMA_Start_IT+0x430>
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a2d      	ldr	r2, [pc, #180]	; (800170c <HAL_DMA_Start_IT+0x490>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d027      	beq.n	80016ac <HAL_DMA_Start_IT+0x430>
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a2b      	ldr	r2, [pc, #172]	; (8001710 <HAL_DMA_Start_IT+0x494>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d022      	beq.n	80016ac <HAL_DMA_Start_IT+0x430>
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a2a      	ldr	r2, [pc, #168]	; (8001714 <HAL_DMA_Start_IT+0x498>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d01d      	beq.n	80016ac <HAL_DMA_Start_IT+0x430>
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a28      	ldr	r2, [pc, #160]	; (8001718 <HAL_DMA_Start_IT+0x49c>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d018      	beq.n	80016ac <HAL_DMA_Start_IT+0x430>
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a27      	ldr	r2, [pc, #156]	; (800171c <HAL_DMA_Start_IT+0x4a0>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d013      	beq.n	80016ac <HAL_DMA_Start_IT+0x430>
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a25      	ldr	r2, [pc, #148]	; (8001720 <HAL_DMA_Start_IT+0x4a4>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d00e      	beq.n	80016ac <HAL_DMA_Start_IT+0x430>
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a24      	ldr	r2, [pc, #144]	; (8001724 <HAL_DMA_Start_IT+0x4a8>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d009      	beq.n	80016ac <HAL_DMA_Start_IT+0x430>
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a22      	ldr	r2, [pc, #136]	; (8001728 <HAL_DMA_Start_IT+0x4ac>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d004      	beq.n	80016ac <HAL_DMA_Start_IT+0x430>
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a21      	ldr	r2, [pc, #132]	; (800172c <HAL_DMA_Start_IT+0x4b0>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d108      	bne.n	80016be <HAL_DMA_Start_IT+0x442>
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f042 0201 	orr.w	r2, r2, #1
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	e012      	b.n	80016e4 <HAL_DMA_Start_IT+0x468>
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f042 0201 	orr.w	r2, r2, #1
 80016cc:	601a      	str	r2, [r3, #0]
 80016ce:	e009      	b.n	80016e4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016d6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	2200      	movs	r2, #0
 80016dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80016e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3718      	adds	r7, #24
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40020010 	.word	0x40020010
 80016f4:	40020028 	.word	0x40020028
 80016f8:	40020040 	.word	0x40020040
 80016fc:	40020058 	.word	0x40020058
 8001700:	40020070 	.word	0x40020070
 8001704:	40020088 	.word	0x40020088
 8001708:	400200a0 	.word	0x400200a0
 800170c:	400200b8 	.word	0x400200b8
 8001710:	40020410 	.word	0x40020410
 8001714:	40020428 	.word	0x40020428
 8001718:	40020440 	.word	0x40020440
 800171c:	40020458 	.word	0x40020458
 8001720:	40020470 	.word	0x40020470
 8001724:	40020488 	.word	0x40020488
 8001728:	400204a0 	.word	0x400204a0
 800172c:	400204b8 	.word	0x400204b8
 8001730:	58025408 	.word	0x58025408
 8001734:	5802541c 	.word	0x5802541c
 8001738:	58025430 	.word	0x58025430
 800173c:	58025444 	.word	0x58025444
 8001740:	58025458 	.word	0x58025458
 8001744:	5802546c 	.word	0x5802546c
 8001748:	58025480 	.word	0x58025480
 800174c:	58025494 	.word	0x58025494

08001750 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b08a      	sub	sp, #40	; 0x28
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8001758:	2300      	movs	r3, #0
 800175a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800175c:	4b67      	ldr	r3, [pc, #412]	; (80018fc <HAL_DMA_IRQHandler+0x1ac>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a67      	ldr	r2, [pc, #412]	; (8001900 <HAL_DMA_IRQHandler+0x1b0>)
 8001762:	fba2 2303 	umull	r2, r3, r2, r3
 8001766:	0a9b      	lsrs	r3, r3, #10
 8001768:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800176e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001774:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8001776:	6a3b      	ldr	r3, [r7, #32]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a5f      	ldr	r2, [pc, #380]	; (8001904 <HAL_DMA_IRQHandler+0x1b4>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d04a      	beq.n	8001822 <HAL_DMA_IRQHandler+0xd2>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a5d      	ldr	r2, [pc, #372]	; (8001908 <HAL_DMA_IRQHandler+0x1b8>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d045      	beq.n	8001822 <HAL_DMA_IRQHandler+0xd2>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a5c      	ldr	r2, [pc, #368]	; (800190c <HAL_DMA_IRQHandler+0x1bc>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d040      	beq.n	8001822 <HAL_DMA_IRQHandler+0xd2>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a5a      	ldr	r2, [pc, #360]	; (8001910 <HAL_DMA_IRQHandler+0x1c0>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d03b      	beq.n	8001822 <HAL_DMA_IRQHandler+0xd2>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a59      	ldr	r2, [pc, #356]	; (8001914 <HAL_DMA_IRQHandler+0x1c4>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d036      	beq.n	8001822 <HAL_DMA_IRQHandler+0xd2>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a57      	ldr	r2, [pc, #348]	; (8001918 <HAL_DMA_IRQHandler+0x1c8>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d031      	beq.n	8001822 <HAL_DMA_IRQHandler+0xd2>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a56      	ldr	r2, [pc, #344]	; (800191c <HAL_DMA_IRQHandler+0x1cc>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d02c      	beq.n	8001822 <HAL_DMA_IRQHandler+0xd2>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a54      	ldr	r2, [pc, #336]	; (8001920 <HAL_DMA_IRQHandler+0x1d0>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d027      	beq.n	8001822 <HAL_DMA_IRQHandler+0xd2>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a53      	ldr	r2, [pc, #332]	; (8001924 <HAL_DMA_IRQHandler+0x1d4>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d022      	beq.n	8001822 <HAL_DMA_IRQHandler+0xd2>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a51      	ldr	r2, [pc, #324]	; (8001928 <HAL_DMA_IRQHandler+0x1d8>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d01d      	beq.n	8001822 <HAL_DMA_IRQHandler+0xd2>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a50      	ldr	r2, [pc, #320]	; (800192c <HAL_DMA_IRQHandler+0x1dc>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d018      	beq.n	8001822 <HAL_DMA_IRQHandler+0xd2>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a4e      	ldr	r2, [pc, #312]	; (8001930 <HAL_DMA_IRQHandler+0x1e0>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d013      	beq.n	8001822 <HAL_DMA_IRQHandler+0xd2>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a4d      	ldr	r2, [pc, #308]	; (8001934 <HAL_DMA_IRQHandler+0x1e4>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d00e      	beq.n	8001822 <HAL_DMA_IRQHandler+0xd2>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a4b      	ldr	r2, [pc, #300]	; (8001938 <HAL_DMA_IRQHandler+0x1e8>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d009      	beq.n	8001822 <HAL_DMA_IRQHandler+0xd2>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a4a      	ldr	r2, [pc, #296]	; (800193c <HAL_DMA_IRQHandler+0x1ec>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d004      	beq.n	8001822 <HAL_DMA_IRQHandler+0xd2>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a48      	ldr	r2, [pc, #288]	; (8001940 <HAL_DMA_IRQHandler+0x1f0>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d101      	bne.n	8001826 <HAL_DMA_IRQHandler+0xd6>
 8001822:	2301      	movs	r3, #1
 8001824:	e000      	b.n	8001828 <HAL_DMA_IRQHandler+0xd8>
 8001826:	2300      	movs	r3, #0
 8001828:	2b00      	cmp	r3, #0
 800182a:	f000 842b 	beq.w	8002084 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001832:	f003 031f 	and.w	r3, r3, #31
 8001836:	2208      	movs	r2, #8
 8001838:	409a      	lsls	r2, r3
 800183a:	69bb      	ldr	r3, [r7, #24]
 800183c:	4013      	ands	r3, r2
 800183e:	2b00      	cmp	r3, #0
 8001840:	f000 80a2 	beq.w	8001988 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a2e      	ldr	r2, [pc, #184]	; (8001904 <HAL_DMA_IRQHandler+0x1b4>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d04a      	beq.n	80018e4 <HAL_DMA_IRQHandler+0x194>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a2d      	ldr	r2, [pc, #180]	; (8001908 <HAL_DMA_IRQHandler+0x1b8>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d045      	beq.n	80018e4 <HAL_DMA_IRQHandler+0x194>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a2b      	ldr	r2, [pc, #172]	; (800190c <HAL_DMA_IRQHandler+0x1bc>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d040      	beq.n	80018e4 <HAL_DMA_IRQHandler+0x194>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a2a      	ldr	r2, [pc, #168]	; (8001910 <HAL_DMA_IRQHandler+0x1c0>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d03b      	beq.n	80018e4 <HAL_DMA_IRQHandler+0x194>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a28      	ldr	r2, [pc, #160]	; (8001914 <HAL_DMA_IRQHandler+0x1c4>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d036      	beq.n	80018e4 <HAL_DMA_IRQHandler+0x194>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a27      	ldr	r2, [pc, #156]	; (8001918 <HAL_DMA_IRQHandler+0x1c8>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d031      	beq.n	80018e4 <HAL_DMA_IRQHandler+0x194>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a25      	ldr	r2, [pc, #148]	; (800191c <HAL_DMA_IRQHandler+0x1cc>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d02c      	beq.n	80018e4 <HAL_DMA_IRQHandler+0x194>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a24      	ldr	r2, [pc, #144]	; (8001920 <HAL_DMA_IRQHandler+0x1d0>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d027      	beq.n	80018e4 <HAL_DMA_IRQHandler+0x194>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a22      	ldr	r2, [pc, #136]	; (8001924 <HAL_DMA_IRQHandler+0x1d4>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d022      	beq.n	80018e4 <HAL_DMA_IRQHandler+0x194>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a21      	ldr	r2, [pc, #132]	; (8001928 <HAL_DMA_IRQHandler+0x1d8>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d01d      	beq.n	80018e4 <HAL_DMA_IRQHandler+0x194>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a1f      	ldr	r2, [pc, #124]	; (800192c <HAL_DMA_IRQHandler+0x1dc>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d018      	beq.n	80018e4 <HAL_DMA_IRQHandler+0x194>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a1e      	ldr	r2, [pc, #120]	; (8001930 <HAL_DMA_IRQHandler+0x1e0>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d013      	beq.n	80018e4 <HAL_DMA_IRQHandler+0x194>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a1c      	ldr	r2, [pc, #112]	; (8001934 <HAL_DMA_IRQHandler+0x1e4>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d00e      	beq.n	80018e4 <HAL_DMA_IRQHandler+0x194>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a1b      	ldr	r2, [pc, #108]	; (8001938 <HAL_DMA_IRQHandler+0x1e8>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d009      	beq.n	80018e4 <HAL_DMA_IRQHandler+0x194>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a19      	ldr	r2, [pc, #100]	; (800193c <HAL_DMA_IRQHandler+0x1ec>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d004      	beq.n	80018e4 <HAL_DMA_IRQHandler+0x194>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a18      	ldr	r2, [pc, #96]	; (8001940 <HAL_DMA_IRQHandler+0x1f0>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d12f      	bne.n	8001944 <HAL_DMA_IRQHandler+0x1f4>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0304 	and.w	r3, r3, #4
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	bf14      	ite	ne
 80018f2:	2301      	movne	r3, #1
 80018f4:	2300      	moveq	r3, #0
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	e02e      	b.n	8001958 <HAL_DMA_IRQHandler+0x208>
 80018fa:	bf00      	nop
 80018fc:	24000408 	.word	0x24000408
 8001900:	1b4e81b5 	.word	0x1b4e81b5
 8001904:	40020010 	.word	0x40020010
 8001908:	40020028 	.word	0x40020028
 800190c:	40020040 	.word	0x40020040
 8001910:	40020058 	.word	0x40020058
 8001914:	40020070 	.word	0x40020070
 8001918:	40020088 	.word	0x40020088
 800191c:	400200a0 	.word	0x400200a0
 8001920:	400200b8 	.word	0x400200b8
 8001924:	40020410 	.word	0x40020410
 8001928:	40020428 	.word	0x40020428
 800192c:	40020440 	.word	0x40020440
 8001930:	40020458 	.word	0x40020458
 8001934:	40020470 	.word	0x40020470
 8001938:	40020488 	.word	0x40020488
 800193c:	400204a0 	.word	0x400204a0
 8001940:	400204b8 	.word	0x400204b8
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0308 	and.w	r3, r3, #8
 800194e:	2b00      	cmp	r3, #0
 8001950:	bf14      	ite	ne
 8001952:	2301      	movne	r3, #1
 8001954:	2300      	moveq	r3, #0
 8001956:	b2db      	uxtb	r3, r3
 8001958:	2b00      	cmp	r3, #0
 800195a:	d015      	beq.n	8001988 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f022 0204 	bic.w	r2, r2, #4
 800196a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001970:	f003 031f 	and.w	r3, r3, #31
 8001974:	2208      	movs	r2, #8
 8001976:	409a      	lsls	r2, r3
 8001978:	6a3b      	ldr	r3, [r7, #32]
 800197a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001980:	f043 0201 	orr.w	r2, r3, #1
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800198c:	f003 031f 	and.w	r3, r3, #31
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	fa22 f303 	lsr.w	r3, r2, r3
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	2b00      	cmp	r3, #0
 800199c:	d06e      	beq.n	8001a7c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a69      	ldr	r2, [pc, #420]	; (8001b48 <HAL_DMA_IRQHandler+0x3f8>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d04a      	beq.n	8001a3e <HAL_DMA_IRQHandler+0x2ee>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a67      	ldr	r2, [pc, #412]	; (8001b4c <HAL_DMA_IRQHandler+0x3fc>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d045      	beq.n	8001a3e <HAL_DMA_IRQHandler+0x2ee>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a66      	ldr	r2, [pc, #408]	; (8001b50 <HAL_DMA_IRQHandler+0x400>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d040      	beq.n	8001a3e <HAL_DMA_IRQHandler+0x2ee>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a64      	ldr	r2, [pc, #400]	; (8001b54 <HAL_DMA_IRQHandler+0x404>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d03b      	beq.n	8001a3e <HAL_DMA_IRQHandler+0x2ee>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a63      	ldr	r2, [pc, #396]	; (8001b58 <HAL_DMA_IRQHandler+0x408>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d036      	beq.n	8001a3e <HAL_DMA_IRQHandler+0x2ee>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a61      	ldr	r2, [pc, #388]	; (8001b5c <HAL_DMA_IRQHandler+0x40c>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d031      	beq.n	8001a3e <HAL_DMA_IRQHandler+0x2ee>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a60      	ldr	r2, [pc, #384]	; (8001b60 <HAL_DMA_IRQHandler+0x410>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d02c      	beq.n	8001a3e <HAL_DMA_IRQHandler+0x2ee>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a5e      	ldr	r2, [pc, #376]	; (8001b64 <HAL_DMA_IRQHandler+0x414>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d027      	beq.n	8001a3e <HAL_DMA_IRQHandler+0x2ee>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a5d      	ldr	r2, [pc, #372]	; (8001b68 <HAL_DMA_IRQHandler+0x418>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d022      	beq.n	8001a3e <HAL_DMA_IRQHandler+0x2ee>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a5b      	ldr	r2, [pc, #364]	; (8001b6c <HAL_DMA_IRQHandler+0x41c>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d01d      	beq.n	8001a3e <HAL_DMA_IRQHandler+0x2ee>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a5a      	ldr	r2, [pc, #360]	; (8001b70 <HAL_DMA_IRQHandler+0x420>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d018      	beq.n	8001a3e <HAL_DMA_IRQHandler+0x2ee>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a58      	ldr	r2, [pc, #352]	; (8001b74 <HAL_DMA_IRQHandler+0x424>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d013      	beq.n	8001a3e <HAL_DMA_IRQHandler+0x2ee>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a57      	ldr	r2, [pc, #348]	; (8001b78 <HAL_DMA_IRQHandler+0x428>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d00e      	beq.n	8001a3e <HAL_DMA_IRQHandler+0x2ee>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a55      	ldr	r2, [pc, #340]	; (8001b7c <HAL_DMA_IRQHandler+0x42c>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d009      	beq.n	8001a3e <HAL_DMA_IRQHandler+0x2ee>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a54      	ldr	r2, [pc, #336]	; (8001b80 <HAL_DMA_IRQHandler+0x430>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d004      	beq.n	8001a3e <HAL_DMA_IRQHandler+0x2ee>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a52      	ldr	r2, [pc, #328]	; (8001b84 <HAL_DMA_IRQHandler+0x434>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d10a      	bne.n	8001a54 <HAL_DMA_IRQHandler+0x304>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	695b      	ldr	r3, [r3, #20]
 8001a44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	bf14      	ite	ne
 8001a4c:	2301      	movne	r3, #1
 8001a4e:	2300      	moveq	r3, #0
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	e003      	b.n	8001a5c <HAL_DMA_IRQHandler+0x30c>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d00d      	beq.n	8001a7c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a64:	f003 031f 	and.w	r3, r3, #31
 8001a68:	2201      	movs	r2, #1
 8001a6a:	409a      	lsls	r2, r3
 8001a6c:	6a3b      	ldr	r3, [r7, #32]
 8001a6e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a74:	f043 0202 	orr.w	r2, r3, #2
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a80:	f003 031f 	and.w	r3, r3, #31
 8001a84:	2204      	movs	r2, #4
 8001a86:	409a      	lsls	r2, r3
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	f000 808f 	beq.w	8001bb0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a2c      	ldr	r2, [pc, #176]	; (8001b48 <HAL_DMA_IRQHandler+0x3f8>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d04a      	beq.n	8001b32 <HAL_DMA_IRQHandler+0x3e2>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a2a      	ldr	r2, [pc, #168]	; (8001b4c <HAL_DMA_IRQHandler+0x3fc>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d045      	beq.n	8001b32 <HAL_DMA_IRQHandler+0x3e2>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a29      	ldr	r2, [pc, #164]	; (8001b50 <HAL_DMA_IRQHandler+0x400>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d040      	beq.n	8001b32 <HAL_DMA_IRQHandler+0x3e2>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a27      	ldr	r2, [pc, #156]	; (8001b54 <HAL_DMA_IRQHandler+0x404>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d03b      	beq.n	8001b32 <HAL_DMA_IRQHandler+0x3e2>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a26      	ldr	r2, [pc, #152]	; (8001b58 <HAL_DMA_IRQHandler+0x408>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d036      	beq.n	8001b32 <HAL_DMA_IRQHandler+0x3e2>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a24      	ldr	r2, [pc, #144]	; (8001b5c <HAL_DMA_IRQHandler+0x40c>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d031      	beq.n	8001b32 <HAL_DMA_IRQHandler+0x3e2>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a23      	ldr	r2, [pc, #140]	; (8001b60 <HAL_DMA_IRQHandler+0x410>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d02c      	beq.n	8001b32 <HAL_DMA_IRQHandler+0x3e2>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a21      	ldr	r2, [pc, #132]	; (8001b64 <HAL_DMA_IRQHandler+0x414>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d027      	beq.n	8001b32 <HAL_DMA_IRQHandler+0x3e2>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a20      	ldr	r2, [pc, #128]	; (8001b68 <HAL_DMA_IRQHandler+0x418>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d022      	beq.n	8001b32 <HAL_DMA_IRQHandler+0x3e2>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a1e      	ldr	r2, [pc, #120]	; (8001b6c <HAL_DMA_IRQHandler+0x41c>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d01d      	beq.n	8001b32 <HAL_DMA_IRQHandler+0x3e2>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a1d      	ldr	r2, [pc, #116]	; (8001b70 <HAL_DMA_IRQHandler+0x420>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d018      	beq.n	8001b32 <HAL_DMA_IRQHandler+0x3e2>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a1b      	ldr	r2, [pc, #108]	; (8001b74 <HAL_DMA_IRQHandler+0x424>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d013      	beq.n	8001b32 <HAL_DMA_IRQHandler+0x3e2>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a1a      	ldr	r2, [pc, #104]	; (8001b78 <HAL_DMA_IRQHandler+0x428>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d00e      	beq.n	8001b32 <HAL_DMA_IRQHandler+0x3e2>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a18      	ldr	r2, [pc, #96]	; (8001b7c <HAL_DMA_IRQHandler+0x42c>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d009      	beq.n	8001b32 <HAL_DMA_IRQHandler+0x3e2>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a17      	ldr	r2, [pc, #92]	; (8001b80 <HAL_DMA_IRQHandler+0x430>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d004      	beq.n	8001b32 <HAL_DMA_IRQHandler+0x3e2>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a15      	ldr	r2, [pc, #84]	; (8001b84 <HAL_DMA_IRQHandler+0x434>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d12a      	bne.n	8001b88 <HAL_DMA_IRQHandler+0x438>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 0302 	and.w	r3, r3, #2
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	bf14      	ite	ne
 8001b40:	2301      	movne	r3, #1
 8001b42:	2300      	moveq	r3, #0
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	e023      	b.n	8001b90 <HAL_DMA_IRQHandler+0x440>
 8001b48:	40020010 	.word	0x40020010
 8001b4c:	40020028 	.word	0x40020028
 8001b50:	40020040 	.word	0x40020040
 8001b54:	40020058 	.word	0x40020058
 8001b58:	40020070 	.word	0x40020070
 8001b5c:	40020088 	.word	0x40020088
 8001b60:	400200a0 	.word	0x400200a0
 8001b64:	400200b8 	.word	0x400200b8
 8001b68:	40020410 	.word	0x40020410
 8001b6c:	40020428 	.word	0x40020428
 8001b70:	40020440 	.word	0x40020440
 8001b74:	40020458 	.word	0x40020458
 8001b78:	40020470 	.word	0x40020470
 8001b7c:	40020488 	.word	0x40020488
 8001b80:	400204a0 	.word	0x400204a0
 8001b84:	400204b8 	.word	0x400204b8
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2300      	movs	r3, #0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d00d      	beq.n	8001bb0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b98:	f003 031f 	and.w	r3, r3, #31
 8001b9c:	2204      	movs	r2, #4
 8001b9e:	409a      	lsls	r2, r3
 8001ba0:	6a3b      	ldr	r3, [r7, #32]
 8001ba2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ba8:	f043 0204 	orr.w	r2, r3, #4
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bb4:	f003 031f 	and.w	r3, r3, #31
 8001bb8:	2210      	movs	r2, #16
 8001bba:	409a      	lsls	r2, r3
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	f000 80a6 	beq.w	8001d12 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a85      	ldr	r2, [pc, #532]	; (8001de0 <HAL_DMA_IRQHandler+0x690>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d04a      	beq.n	8001c66 <HAL_DMA_IRQHandler+0x516>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a83      	ldr	r2, [pc, #524]	; (8001de4 <HAL_DMA_IRQHandler+0x694>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d045      	beq.n	8001c66 <HAL_DMA_IRQHandler+0x516>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a82      	ldr	r2, [pc, #520]	; (8001de8 <HAL_DMA_IRQHandler+0x698>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d040      	beq.n	8001c66 <HAL_DMA_IRQHandler+0x516>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a80      	ldr	r2, [pc, #512]	; (8001dec <HAL_DMA_IRQHandler+0x69c>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d03b      	beq.n	8001c66 <HAL_DMA_IRQHandler+0x516>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a7f      	ldr	r2, [pc, #508]	; (8001df0 <HAL_DMA_IRQHandler+0x6a0>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d036      	beq.n	8001c66 <HAL_DMA_IRQHandler+0x516>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a7d      	ldr	r2, [pc, #500]	; (8001df4 <HAL_DMA_IRQHandler+0x6a4>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d031      	beq.n	8001c66 <HAL_DMA_IRQHandler+0x516>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a7c      	ldr	r2, [pc, #496]	; (8001df8 <HAL_DMA_IRQHandler+0x6a8>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d02c      	beq.n	8001c66 <HAL_DMA_IRQHandler+0x516>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a7a      	ldr	r2, [pc, #488]	; (8001dfc <HAL_DMA_IRQHandler+0x6ac>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d027      	beq.n	8001c66 <HAL_DMA_IRQHandler+0x516>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a79      	ldr	r2, [pc, #484]	; (8001e00 <HAL_DMA_IRQHandler+0x6b0>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d022      	beq.n	8001c66 <HAL_DMA_IRQHandler+0x516>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a77      	ldr	r2, [pc, #476]	; (8001e04 <HAL_DMA_IRQHandler+0x6b4>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d01d      	beq.n	8001c66 <HAL_DMA_IRQHandler+0x516>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a76      	ldr	r2, [pc, #472]	; (8001e08 <HAL_DMA_IRQHandler+0x6b8>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d018      	beq.n	8001c66 <HAL_DMA_IRQHandler+0x516>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a74      	ldr	r2, [pc, #464]	; (8001e0c <HAL_DMA_IRQHandler+0x6bc>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d013      	beq.n	8001c66 <HAL_DMA_IRQHandler+0x516>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a73      	ldr	r2, [pc, #460]	; (8001e10 <HAL_DMA_IRQHandler+0x6c0>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d00e      	beq.n	8001c66 <HAL_DMA_IRQHandler+0x516>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a71      	ldr	r2, [pc, #452]	; (8001e14 <HAL_DMA_IRQHandler+0x6c4>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d009      	beq.n	8001c66 <HAL_DMA_IRQHandler+0x516>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a70      	ldr	r2, [pc, #448]	; (8001e18 <HAL_DMA_IRQHandler+0x6c8>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d004      	beq.n	8001c66 <HAL_DMA_IRQHandler+0x516>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a6e      	ldr	r2, [pc, #440]	; (8001e1c <HAL_DMA_IRQHandler+0x6cc>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d10a      	bne.n	8001c7c <HAL_DMA_IRQHandler+0x52c>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0308 	and.w	r3, r3, #8
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	bf14      	ite	ne
 8001c74:	2301      	movne	r3, #1
 8001c76:	2300      	moveq	r3, #0
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	e009      	b.n	8001c90 <HAL_DMA_IRQHandler+0x540>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0304 	and.w	r3, r3, #4
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	bf14      	ite	ne
 8001c8a:	2301      	movne	r3, #1
 8001c8c:	2300      	moveq	r3, #0
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d03e      	beq.n	8001d12 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c98:	f003 031f 	and.w	r3, r3, #31
 8001c9c:	2210      	movs	r2, #16
 8001c9e:	409a      	lsls	r2, r3
 8001ca0:	6a3b      	ldr	r3, [r7, #32]
 8001ca2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d018      	beq.n	8001ce4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d108      	bne.n	8001cd2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d024      	beq.n	8001d12 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	4798      	blx	r3
 8001cd0:	e01f      	b.n	8001d12 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d01b      	beq.n	8001d12 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	4798      	blx	r3
 8001ce2:	e016      	b.n	8001d12 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d107      	bne.n	8001d02 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f022 0208 	bic.w	r2, r2, #8
 8001d00:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d003      	beq.n	8001d12 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d16:	f003 031f 	and.w	r3, r3, #31
 8001d1a:	2220      	movs	r2, #32
 8001d1c:	409a      	lsls	r2, r3
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	4013      	ands	r3, r2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	f000 8110 	beq.w	8001f48 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a2c      	ldr	r2, [pc, #176]	; (8001de0 <HAL_DMA_IRQHandler+0x690>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d04a      	beq.n	8001dc8 <HAL_DMA_IRQHandler+0x678>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a2b      	ldr	r2, [pc, #172]	; (8001de4 <HAL_DMA_IRQHandler+0x694>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d045      	beq.n	8001dc8 <HAL_DMA_IRQHandler+0x678>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a29      	ldr	r2, [pc, #164]	; (8001de8 <HAL_DMA_IRQHandler+0x698>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d040      	beq.n	8001dc8 <HAL_DMA_IRQHandler+0x678>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a28      	ldr	r2, [pc, #160]	; (8001dec <HAL_DMA_IRQHandler+0x69c>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d03b      	beq.n	8001dc8 <HAL_DMA_IRQHandler+0x678>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a26      	ldr	r2, [pc, #152]	; (8001df0 <HAL_DMA_IRQHandler+0x6a0>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d036      	beq.n	8001dc8 <HAL_DMA_IRQHandler+0x678>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a25      	ldr	r2, [pc, #148]	; (8001df4 <HAL_DMA_IRQHandler+0x6a4>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d031      	beq.n	8001dc8 <HAL_DMA_IRQHandler+0x678>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a23      	ldr	r2, [pc, #140]	; (8001df8 <HAL_DMA_IRQHandler+0x6a8>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d02c      	beq.n	8001dc8 <HAL_DMA_IRQHandler+0x678>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a22      	ldr	r2, [pc, #136]	; (8001dfc <HAL_DMA_IRQHandler+0x6ac>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d027      	beq.n	8001dc8 <HAL_DMA_IRQHandler+0x678>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a20      	ldr	r2, [pc, #128]	; (8001e00 <HAL_DMA_IRQHandler+0x6b0>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d022      	beq.n	8001dc8 <HAL_DMA_IRQHandler+0x678>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a1f      	ldr	r2, [pc, #124]	; (8001e04 <HAL_DMA_IRQHandler+0x6b4>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d01d      	beq.n	8001dc8 <HAL_DMA_IRQHandler+0x678>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a1d      	ldr	r2, [pc, #116]	; (8001e08 <HAL_DMA_IRQHandler+0x6b8>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d018      	beq.n	8001dc8 <HAL_DMA_IRQHandler+0x678>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a1c      	ldr	r2, [pc, #112]	; (8001e0c <HAL_DMA_IRQHandler+0x6bc>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d013      	beq.n	8001dc8 <HAL_DMA_IRQHandler+0x678>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a1a      	ldr	r2, [pc, #104]	; (8001e10 <HAL_DMA_IRQHandler+0x6c0>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d00e      	beq.n	8001dc8 <HAL_DMA_IRQHandler+0x678>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a19      	ldr	r2, [pc, #100]	; (8001e14 <HAL_DMA_IRQHandler+0x6c4>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d009      	beq.n	8001dc8 <HAL_DMA_IRQHandler+0x678>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a17      	ldr	r2, [pc, #92]	; (8001e18 <HAL_DMA_IRQHandler+0x6c8>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d004      	beq.n	8001dc8 <HAL_DMA_IRQHandler+0x678>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a16      	ldr	r2, [pc, #88]	; (8001e1c <HAL_DMA_IRQHandler+0x6cc>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d12b      	bne.n	8001e20 <HAL_DMA_IRQHandler+0x6d0>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0310 	and.w	r3, r3, #16
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	bf14      	ite	ne
 8001dd6:	2301      	movne	r3, #1
 8001dd8:	2300      	moveq	r3, #0
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	e02a      	b.n	8001e34 <HAL_DMA_IRQHandler+0x6e4>
 8001dde:	bf00      	nop
 8001de0:	40020010 	.word	0x40020010
 8001de4:	40020028 	.word	0x40020028
 8001de8:	40020040 	.word	0x40020040
 8001dec:	40020058 	.word	0x40020058
 8001df0:	40020070 	.word	0x40020070
 8001df4:	40020088 	.word	0x40020088
 8001df8:	400200a0 	.word	0x400200a0
 8001dfc:	400200b8 	.word	0x400200b8
 8001e00:	40020410 	.word	0x40020410
 8001e04:	40020428 	.word	0x40020428
 8001e08:	40020440 	.word	0x40020440
 8001e0c:	40020458 	.word	0x40020458
 8001e10:	40020470 	.word	0x40020470
 8001e14:	40020488 	.word	0x40020488
 8001e18:	400204a0 	.word	0x400204a0
 8001e1c:	400204b8 	.word	0x400204b8
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0302 	and.w	r3, r3, #2
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	bf14      	ite	ne
 8001e2e:	2301      	movne	r3, #1
 8001e30:	2300      	moveq	r3, #0
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	f000 8087 	beq.w	8001f48 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e3e:	f003 031f 	and.w	r3, r3, #31
 8001e42:	2220      	movs	r2, #32
 8001e44:	409a      	lsls	r2, r3
 8001e46:	6a3b      	ldr	r3, [r7, #32]
 8001e48:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	2b04      	cmp	r3, #4
 8001e54:	d139      	bne.n	8001eca <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f022 0216 	bic.w	r2, r2, #22
 8001e64:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	695a      	ldr	r2, [r3, #20]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e74:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d103      	bne.n	8001e86 <HAL_DMA_IRQHandler+0x736>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d007      	beq.n	8001e96 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f022 0208 	bic.w	r2, r2, #8
 8001e94:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e9a:	f003 031f 	and.w	r3, r3, #31
 8001e9e:	223f      	movs	r2, #63	; 0x3f
 8001ea0:	409a      	lsls	r2, r3
 8001ea2:	6a3b      	ldr	r3, [r7, #32]
 8001ea4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	f000 834a 	beq.w	8002554 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	4798      	blx	r3
          }
          return;
 8001ec8:	e344      	b.n	8002554 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d018      	beq.n	8001f0a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d108      	bne.n	8001ef8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d02c      	beq.n	8001f48 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	4798      	blx	r3
 8001ef6:	e027      	b.n	8001f48 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d023      	beq.n	8001f48 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	4798      	blx	r3
 8001f08:	e01e      	b.n	8001f48 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d10f      	bne.n	8001f38 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f022 0210 	bic.w	r2, r2, #16
 8001f26:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d003      	beq.n	8001f48 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	f000 8306 	beq.w	800255e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	f000 8088 	beq.w	8002070 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2204      	movs	r2, #4
 8001f64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a7a      	ldr	r2, [pc, #488]	; (8002158 <HAL_DMA_IRQHandler+0xa08>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d04a      	beq.n	8002008 <HAL_DMA_IRQHandler+0x8b8>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a79      	ldr	r2, [pc, #484]	; (800215c <HAL_DMA_IRQHandler+0xa0c>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d045      	beq.n	8002008 <HAL_DMA_IRQHandler+0x8b8>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a77      	ldr	r2, [pc, #476]	; (8002160 <HAL_DMA_IRQHandler+0xa10>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d040      	beq.n	8002008 <HAL_DMA_IRQHandler+0x8b8>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a76      	ldr	r2, [pc, #472]	; (8002164 <HAL_DMA_IRQHandler+0xa14>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d03b      	beq.n	8002008 <HAL_DMA_IRQHandler+0x8b8>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a74      	ldr	r2, [pc, #464]	; (8002168 <HAL_DMA_IRQHandler+0xa18>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d036      	beq.n	8002008 <HAL_DMA_IRQHandler+0x8b8>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a73      	ldr	r2, [pc, #460]	; (800216c <HAL_DMA_IRQHandler+0xa1c>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d031      	beq.n	8002008 <HAL_DMA_IRQHandler+0x8b8>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a71      	ldr	r2, [pc, #452]	; (8002170 <HAL_DMA_IRQHandler+0xa20>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d02c      	beq.n	8002008 <HAL_DMA_IRQHandler+0x8b8>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a70      	ldr	r2, [pc, #448]	; (8002174 <HAL_DMA_IRQHandler+0xa24>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d027      	beq.n	8002008 <HAL_DMA_IRQHandler+0x8b8>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a6e      	ldr	r2, [pc, #440]	; (8002178 <HAL_DMA_IRQHandler+0xa28>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d022      	beq.n	8002008 <HAL_DMA_IRQHandler+0x8b8>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a6d      	ldr	r2, [pc, #436]	; (800217c <HAL_DMA_IRQHandler+0xa2c>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d01d      	beq.n	8002008 <HAL_DMA_IRQHandler+0x8b8>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a6b      	ldr	r2, [pc, #428]	; (8002180 <HAL_DMA_IRQHandler+0xa30>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d018      	beq.n	8002008 <HAL_DMA_IRQHandler+0x8b8>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a6a      	ldr	r2, [pc, #424]	; (8002184 <HAL_DMA_IRQHandler+0xa34>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d013      	beq.n	8002008 <HAL_DMA_IRQHandler+0x8b8>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a68      	ldr	r2, [pc, #416]	; (8002188 <HAL_DMA_IRQHandler+0xa38>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d00e      	beq.n	8002008 <HAL_DMA_IRQHandler+0x8b8>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a67      	ldr	r2, [pc, #412]	; (800218c <HAL_DMA_IRQHandler+0xa3c>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d009      	beq.n	8002008 <HAL_DMA_IRQHandler+0x8b8>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a65      	ldr	r2, [pc, #404]	; (8002190 <HAL_DMA_IRQHandler+0xa40>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d004      	beq.n	8002008 <HAL_DMA_IRQHandler+0x8b8>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a64      	ldr	r2, [pc, #400]	; (8002194 <HAL_DMA_IRQHandler+0xa44>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d108      	bne.n	800201a <HAL_DMA_IRQHandler+0x8ca>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f022 0201 	bic.w	r2, r2, #1
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	e007      	b.n	800202a <HAL_DMA_IRQHandler+0x8da>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f022 0201 	bic.w	r2, r2, #1
 8002028:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	3301      	adds	r3, #1
 800202e:	60fb      	str	r3, [r7, #12]
 8002030:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002032:	429a      	cmp	r2, r3
 8002034:	d307      	bcc.n	8002046 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0301 	and.w	r3, r3, #1
 8002040:	2b00      	cmp	r3, #0
 8002042:	d1f2      	bne.n	800202a <HAL_DMA_IRQHandler+0x8da>
 8002044:	e000      	b.n	8002048 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8002046:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	2b00      	cmp	r3, #0
 8002054:	d004      	beq.n	8002060 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2203      	movs	r2, #3
 800205a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800205e:	e003      	b.n	8002068 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2201      	movs	r2, #1
 8002064:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002074:	2b00      	cmp	r3, #0
 8002076:	f000 8272 	beq.w	800255e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	4798      	blx	r3
 8002082:	e26c      	b.n	800255e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a43      	ldr	r2, [pc, #268]	; (8002198 <HAL_DMA_IRQHandler+0xa48>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d022      	beq.n	80020d4 <HAL_DMA_IRQHandler+0x984>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a42      	ldr	r2, [pc, #264]	; (800219c <HAL_DMA_IRQHandler+0xa4c>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d01d      	beq.n	80020d4 <HAL_DMA_IRQHandler+0x984>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a40      	ldr	r2, [pc, #256]	; (80021a0 <HAL_DMA_IRQHandler+0xa50>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d018      	beq.n	80020d4 <HAL_DMA_IRQHandler+0x984>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a3f      	ldr	r2, [pc, #252]	; (80021a4 <HAL_DMA_IRQHandler+0xa54>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d013      	beq.n	80020d4 <HAL_DMA_IRQHandler+0x984>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a3d      	ldr	r2, [pc, #244]	; (80021a8 <HAL_DMA_IRQHandler+0xa58>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d00e      	beq.n	80020d4 <HAL_DMA_IRQHandler+0x984>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a3c      	ldr	r2, [pc, #240]	; (80021ac <HAL_DMA_IRQHandler+0xa5c>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d009      	beq.n	80020d4 <HAL_DMA_IRQHandler+0x984>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a3a      	ldr	r2, [pc, #232]	; (80021b0 <HAL_DMA_IRQHandler+0xa60>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d004      	beq.n	80020d4 <HAL_DMA_IRQHandler+0x984>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a39      	ldr	r2, [pc, #228]	; (80021b4 <HAL_DMA_IRQHandler+0xa64>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d101      	bne.n	80020d8 <HAL_DMA_IRQHandler+0x988>
 80020d4:	2301      	movs	r3, #1
 80020d6:	e000      	b.n	80020da <HAL_DMA_IRQHandler+0x98a>
 80020d8:	2300      	movs	r3, #0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	f000 823f 	beq.w	800255e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ec:	f003 031f 	and.w	r3, r3, #31
 80020f0:	2204      	movs	r2, #4
 80020f2:	409a      	lsls	r2, r3
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	4013      	ands	r3, r2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	f000 80cd 	beq.w	8002298 <HAL_DMA_IRQHandler+0xb48>
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	f003 0304 	and.w	r3, r3, #4
 8002104:	2b00      	cmp	r3, #0
 8002106:	f000 80c7 	beq.w	8002298 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800210e:	f003 031f 	and.w	r3, r3, #31
 8002112:	2204      	movs	r2, #4
 8002114:	409a      	lsls	r2, r3
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d049      	beq.n	80021b8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d109      	bne.n	8002142 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002132:	2b00      	cmp	r3, #0
 8002134:	f000 8210 	beq.w	8002558 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002140:	e20a      	b.n	8002558 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002146:	2b00      	cmp	r3, #0
 8002148:	f000 8206 	beq.w	8002558 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002154:	e200      	b.n	8002558 <HAL_DMA_IRQHandler+0xe08>
 8002156:	bf00      	nop
 8002158:	40020010 	.word	0x40020010
 800215c:	40020028 	.word	0x40020028
 8002160:	40020040 	.word	0x40020040
 8002164:	40020058 	.word	0x40020058
 8002168:	40020070 	.word	0x40020070
 800216c:	40020088 	.word	0x40020088
 8002170:	400200a0 	.word	0x400200a0
 8002174:	400200b8 	.word	0x400200b8
 8002178:	40020410 	.word	0x40020410
 800217c:	40020428 	.word	0x40020428
 8002180:	40020440 	.word	0x40020440
 8002184:	40020458 	.word	0x40020458
 8002188:	40020470 	.word	0x40020470
 800218c:	40020488 	.word	0x40020488
 8002190:	400204a0 	.word	0x400204a0
 8002194:	400204b8 	.word	0x400204b8
 8002198:	58025408 	.word	0x58025408
 800219c:	5802541c 	.word	0x5802541c
 80021a0:	58025430 	.word	0x58025430
 80021a4:	58025444 	.word	0x58025444
 80021a8:	58025458 	.word	0x58025458
 80021ac:	5802546c 	.word	0x5802546c
 80021b0:	58025480 	.word	0x58025480
 80021b4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	f003 0320 	and.w	r3, r3, #32
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d160      	bne.n	8002284 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a8c      	ldr	r2, [pc, #560]	; (80023f8 <HAL_DMA_IRQHandler+0xca8>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d04a      	beq.n	8002262 <HAL_DMA_IRQHandler+0xb12>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a8a      	ldr	r2, [pc, #552]	; (80023fc <HAL_DMA_IRQHandler+0xcac>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d045      	beq.n	8002262 <HAL_DMA_IRQHandler+0xb12>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a89      	ldr	r2, [pc, #548]	; (8002400 <HAL_DMA_IRQHandler+0xcb0>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d040      	beq.n	8002262 <HAL_DMA_IRQHandler+0xb12>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a87      	ldr	r2, [pc, #540]	; (8002404 <HAL_DMA_IRQHandler+0xcb4>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d03b      	beq.n	8002262 <HAL_DMA_IRQHandler+0xb12>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a86      	ldr	r2, [pc, #536]	; (8002408 <HAL_DMA_IRQHandler+0xcb8>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d036      	beq.n	8002262 <HAL_DMA_IRQHandler+0xb12>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a84      	ldr	r2, [pc, #528]	; (800240c <HAL_DMA_IRQHandler+0xcbc>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d031      	beq.n	8002262 <HAL_DMA_IRQHandler+0xb12>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a83      	ldr	r2, [pc, #524]	; (8002410 <HAL_DMA_IRQHandler+0xcc0>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d02c      	beq.n	8002262 <HAL_DMA_IRQHandler+0xb12>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a81      	ldr	r2, [pc, #516]	; (8002414 <HAL_DMA_IRQHandler+0xcc4>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d027      	beq.n	8002262 <HAL_DMA_IRQHandler+0xb12>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a80      	ldr	r2, [pc, #512]	; (8002418 <HAL_DMA_IRQHandler+0xcc8>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d022      	beq.n	8002262 <HAL_DMA_IRQHandler+0xb12>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a7e      	ldr	r2, [pc, #504]	; (800241c <HAL_DMA_IRQHandler+0xccc>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d01d      	beq.n	8002262 <HAL_DMA_IRQHandler+0xb12>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a7d      	ldr	r2, [pc, #500]	; (8002420 <HAL_DMA_IRQHandler+0xcd0>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d018      	beq.n	8002262 <HAL_DMA_IRQHandler+0xb12>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a7b      	ldr	r2, [pc, #492]	; (8002424 <HAL_DMA_IRQHandler+0xcd4>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d013      	beq.n	8002262 <HAL_DMA_IRQHandler+0xb12>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a7a      	ldr	r2, [pc, #488]	; (8002428 <HAL_DMA_IRQHandler+0xcd8>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d00e      	beq.n	8002262 <HAL_DMA_IRQHandler+0xb12>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a78      	ldr	r2, [pc, #480]	; (800242c <HAL_DMA_IRQHandler+0xcdc>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d009      	beq.n	8002262 <HAL_DMA_IRQHandler+0xb12>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a77      	ldr	r2, [pc, #476]	; (8002430 <HAL_DMA_IRQHandler+0xce0>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d004      	beq.n	8002262 <HAL_DMA_IRQHandler+0xb12>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a75      	ldr	r2, [pc, #468]	; (8002434 <HAL_DMA_IRQHandler+0xce4>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d108      	bne.n	8002274 <HAL_DMA_IRQHandler+0xb24>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f022 0208 	bic.w	r2, r2, #8
 8002270:	601a      	str	r2, [r3, #0]
 8002272:	e007      	b.n	8002284 <HAL_DMA_IRQHandler+0xb34>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f022 0204 	bic.w	r2, r2, #4
 8002282:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002288:	2b00      	cmp	r3, #0
 800228a:	f000 8165 	beq.w	8002558 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002296:	e15f      	b.n	8002558 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800229c:	f003 031f 	and.w	r3, r3, #31
 80022a0:	2202      	movs	r2, #2
 80022a2:	409a      	lsls	r2, r3
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	4013      	ands	r3, r2
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	f000 80c5 	beq.w	8002438 <HAL_DMA_IRQHandler+0xce8>
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	f003 0302 	and.w	r3, r3, #2
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	f000 80bf 	beq.w	8002438 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022be:	f003 031f 	and.w	r3, r3, #31
 80022c2:	2202      	movs	r2, #2
 80022c4:	409a      	lsls	r2, r3
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d018      	beq.n	8002306 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d109      	bne.n	80022f2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	f000 813a 	beq.w	800255c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80022f0:	e134      	b.n	800255c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	f000 8130 	beq.w	800255c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002304:	e12a      	b.n	800255c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	f003 0320 	and.w	r3, r3, #32
 800230c:	2b00      	cmp	r3, #0
 800230e:	d168      	bne.n	80023e2 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a38      	ldr	r2, [pc, #224]	; (80023f8 <HAL_DMA_IRQHandler+0xca8>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d04a      	beq.n	80023b0 <HAL_DMA_IRQHandler+0xc60>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a37      	ldr	r2, [pc, #220]	; (80023fc <HAL_DMA_IRQHandler+0xcac>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d045      	beq.n	80023b0 <HAL_DMA_IRQHandler+0xc60>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a35      	ldr	r2, [pc, #212]	; (8002400 <HAL_DMA_IRQHandler+0xcb0>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d040      	beq.n	80023b0 <HAL_DMA_IRQHandler+0xc60>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a34      	ldr	r2, [pc, #208]	; (8002404 <HAL_DMA_IRQHandler+0xcb4>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d03b      	beq.n	80023b0 <HAL_DMA_IRQHandler+0xc60>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a32      	ldr	r2, [pc, #200]	; (8002408 <HAL_DMA_IRQHandler+0xcb8>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d036      	beq.n	80023b0 <HAL_DMA_IRQHandler+0xc60>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a31      	ldr	r2, [pc, #196]	; (800240c <HAL_DMA_IRQHandler+0xcbc>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d031      	beq.n	80023b0 <HAL_DMA_IRQHandler+0xc60>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a2f      	ldr	r2, [pc, #188]	; (8002410 <HAL_DMA_IRQHandler+0xcc0>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d02c      	beq.n	80023b0 <HAL_DMA_IRQHandler+0xc60>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a2e      	ldr	r2, [pc, #184]	; (8002414 <HAL_DMA_IRQHandler+0xcc4>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d027      	beq.n	80023b0 <HAL_DMA_IRQHandler+0xc60>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a2c      	ldr	r2, [pc, #176]	; (8002418 <HAL_DMA_IRQHandler+0xcc8>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d022      	beq.n	80023b0 <HAL_DMA_IRQHandler+0xc60>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a2b      	ldr	r2, [pc, #172]	; (800241c <HAL_DMA_IRQHandler+0xccc>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d01d      	beq.n	80023b0 <HAL_DMA_IRQHandler+0xc60>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a29      	ldr	r2, [pc, #164]	; (8002420 <HAL_DMA_IRQHandler+0xcd0>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d018      	beq.n	80023b0 <HAL_DMA_IRQHandler+0xc60>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a28      	ldr	r2, [pc, #160]	; (8002424 <HAL_DMA_IRQHandler+0xcd4>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d013      	beq.n	80023b0 <HAL_DMA_IRQHandler+0xc60>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a26      	ldr	r2, [pc, #152]	; (8002428 <HAL_DMA_IRQHandler+0xcd8>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d00e      	beq.n	80023b0 <HAL_DMA_IRQHandler+0xc60>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a25      	ldr	r2, [pc, #148]	; (800242c <HAL_DMA_IRQHandler+0xcdc>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d009      	beq.n	80023b0 <HAL_DMA_IRQHandler+0xc60>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a23      	ldr	r2, [pc, #140]	; (8002430 <HAL_DMA_IRQHandler+0xce0>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d004      	beq.n	80023b0 <HAL_DMA_IRQHandler+0xc60>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a22      	ldr	r2, [pc, #136]	; (8002434 <HAL_DMA_IRQHandler+0xce4>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d108      	bne.n	80023c2 <HAL_DMA_IRQHandler+0xc72>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f022 0214 	bic.w	r2, r2, #20
 80023be:	601a      	str	r2, [r3, #0]
 80023c0:	e007      	b.n	80023d2 <HAL_DMA_IRQHandler+0xc82>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f022 020a 	bic.w	r2, r2, #10
 80023d0:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2201      	movs	r2, #1
 80023d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	f000 80b8 	beq.w	800255c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80023f4:	e0b2      	b.n	800255c <HAL_DMA_IRQHandler+0xe0c>
 80023f6:	bf00      	nop
 80023f8:	40020010 	.word	0x40020010
 80023fc:	40020028 	.word	0x40020028
 8002400:	40020040 	.word	0x40020040
 8002404:	40020058 	.word	0x40020058
 8002408:	40020070 	.word	0x40020070
 800240c:	40020088 	.word	0x40020088
 8002410:	400200a0 	.word	0x400200a0
 8002414:	400200b8 	.word	0x400200b8
 8002418:	40020410 	.word	0x40020410
 800241c:	40020428 	.word	0x40020428
 8002420:	40020440 	.word	0x40020440
 8002424:	40020458 	.word	0x40020458
 8002428:	40020470 	.word	0x40020470
 800242c:	40020488 	.word	0x40020488
 8002430:	400204a0 	.word	0x400204a0
 8002434:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800243c:	f003 031f 	and.w	r3, r3, #31
 8002440:	2208      	movs	r2, #8
 8002442:	409a      	lsls	r2, r3
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	4013      	ands	r3, r2
 8002448:	2b00      	cmp	r3, #0
 800244a:	f000 8088 	beq.w	800255e <HAL_DMA_IRQHandler+0xe0e>
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	f003 0308 	and.w	r3, r3, #8
 8002454:	2b00      	cmp	r3, #0
 8002456:	f000 8082 	beq.w	800255e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a41      	ldr	r2, [pc, #260]	; (8002564 <HAL_DMA_IRQHandler+0xe14>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d04a      	beq.n	80024fa <HAL_DMA_IRQHandler+0xdaa>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a3f      	ldr	r2, [pc, #252]	; (8002568 <HAL_DMA_IRQHandler+0xe18>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d045      	beq.n	80024fa <HAL_DMA_IRQHandler+0xdaa>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a3e      	ldr	r2, [pc, #248]	; (800256c <HAL_DMA_IRQHandler+0xe1c>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d040      	beq.n	80024fa <HAL_DMA_IRQHandler+0xdaa>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a3c      	ldr	r2, [pc, #240]	; (8002570 <HAL_DMA_IRQHandler+0xe20>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d03b      	beq.n	80024fa <HAL_DMA_IRQHandler+0xdaa>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a3b      	ldr	r2, [pc, #236]	; (8002574 <HAL_DMA_IRQHandler+0xe24>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d036      	beq.n	80024fa <HAL_DMA_IRQHandler+0xdaa>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a39      	ldr	r2, [pc, #228]	; (8002578 <HAL_DMA_IRQHandler+0xe28>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d031      	beq.n	80024fa <HAL_DMA_IRQHandler+0xdaa>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a38      	ldr	r2, [pc, #224]	; (800257c <HAL_DMA_IRQHandler+0xe2c>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d02c      	beq.n	80024fa <HAL_DMA_IRQHandler+0xdaa>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a36      	ldr	r2, [pc, #216]	; (8002580 <HAL_DMA_IRQHandler+0xe30>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d027      	beq.n	80024fa <HAL_DMA_IRQHandler+0xdaa>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a35      	ldr	r2, [pc, #212]	; (8002584 <HAL_DMA_IRQHandler+0xe34>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d022      	beq.n	80024fa <HAL_DMA_IRQHandler+0xdaa>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a33      	ldr	r2, [pc, #204]	; (8002588 <HAL_DMA_IRQHandler+0xe38>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d01d      	beq.n	80024fa <HAL_DMA_IRQHandler+0xdaa>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a32      	ldr	r2, [pc, #200]	; (800258c <HAL_DMA_IRQHandler+0xe3c>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d018      	beq.n	80024fa <HAL_DMA_IRQHandler+0xdaa>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a30      	ldr	r2, [pc, #192]	; (8002590 <HAL_DMA_IRQHandler+0xe40>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d013      	beq.n	80024fa <HAL_DMA_IRQHandler+0xdaa>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a2f      	ldr	r2, [pc, #188]	; (8002594 <HAL_DMA_IRQHandler+0xe44>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d00e      	beq.n	80024fa <HAL_DMA_IRQHandler+0xdaa>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a2d      	ldr	r2, [pc, #180]	; (8002598 <HAL_DMA_IRQHandler+0xe48>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d009      	beq.n	80024fa <HAL_DMA_IRQHandler+0xdaa>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a2c      	ldr	r2, [pc, #176]	; (800259c <HAL_DMA_IRQHandler+0xe4c>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d004      	beq.n	80024fa <HAL_DMA_IRQHandler+0xdaa>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a2a      	ldr	r2, [pc, #168]	; (80025a0 <HAL_DMA_IRQHandler+0xe50>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d108      	bne.n	800250c <HAL_DMA_IRQHandler+0xdbc>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f022 021c 	bic.w	r2, r2, #28
 8002508:	601a      	str	r2, [r3, #0]
 800250a:	e007      	b.n	800251c <HAL_DMA_IRQHandler+0xdcc>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f022 020e 	bic.w	r2, r2, #14
 800251a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002520:	f003 031f 	and.w	r3, r3, #31
 8002524:	2201      	movs	r2, #1
 8002526:	409a      	lsls	r2, r3
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2201      	movs	r2, #1
 8002536:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002546:	2b00      	cmp	r3, #0
 8002548:	d009      	beq.n	800255e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	4798      	blx	r3
 8002552:	e004      	b.n	800255e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8002554:	bf00      	nop
 8002556:	e002      	b.n	800255e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002558:	bf00      	nop
 800255a:	e000      	b.n	800255e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800255c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800255e:	3728      	adds	r7, #40	; 0x28
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	40020010 	.word	0x40020010
 8002568:	40020028 	.word	0x40020028
 800256c:	40020040 	.word	0x40020040
 8002570:	40020058 	.word	0x40020058
 8002574:	40020070 	.word	0x40020070
 8002578:	40020088 	.word	0x40020088
 800257c:	400200a0 	.word	0x400200a0
 8002580:	400200b8 	.word	0x400200b8
 8002584:	40020410 	.word	0x40020410
 8002588:	40020428 	.word	0x40020428
 800258c:	40020440 	.word	0x40020440
 8002590:	40020458 	.word	0x40020458
 8002594:	40020470 	.word	0x40020470
 8002598:	40020488 	.word	0x40020488
 800259c:	400204a0 	.word	0x400204a0
 80025a0:	400204b8 	.word	0x400204b8

080025a4 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025bc:	b480      	push	{r7}
 80025be:	b087      	sub	sp, #28
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	607a      	str	r2, [r7, #4]
 80025c8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ce:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025d4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a84      	ldr	r2, [pc, #528]	; (80027ec <DMA_SetConfig+0x230>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d072      	beq.n	80026c6 <DMA_SetConfig+0x10a>
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a82      	ldr	r2, [pc, #520]	; (80027f0 <DMA_SetConfig+0x234>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d06d      	beq.n	80026c6 <DMA_SetConfig+0x10a>
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a81      	ldr	r2, [pc, #516]	; (80027f4 <DMA_SetConfig+0x238>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d068      	beq.n	80026c6 <DMA_SetConfig+0x10a>
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a7f      	ldr	r2, [pc, #508]	; (80027f8 <DMA_SetConfig+0x23c>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d063      	beq.n	80026c6 <DMA_SetConfig+0x10a>
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a7e      	ldr	r2, [pc, #504]	; (80027fc <DMA_SetConfig+0x240>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d05e      	beq.n	80026c6 <DMA_SetConfig+0x10a>
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a7c      	ldr	r2, [pc, #496]	; (8002800 <DMA_SetConfig+0x244>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d059      	beq.n	80026c6 <DMA_SetConfig+0x10a>
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a7b      	ldr	r2, [pc, #492]	; (8002804 <DMA_SetConfig+0x248>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d054      	beq.n	80026c6 <DMA_SetConfig+0x10a>
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a79      	ldr	r2, [pc, #484]	; (8002808 <DMA_SetConfig+0x24c>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d04f      	beq.n	80026c6 <DMA_SetConfig+0x10a>
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a78      	ldr	r2, [pc, #480]	; (800280c <DMA_SetConfig+0x250>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d04a      	beq.n	80026c6 <DMA_SetConfig+0x10a>
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a76      	ldr	r2, [pc, #472]	; (8002810 <DMA_SetConfig+0x254>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d045      	beq.n	80026c6 <DMA_SetConfig+0x10a>
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a75      	ldr	r2, [pc, #468]	; (8002814 <DMA_SetConfig+0x258>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d040      	beq.n	80026c6 <DMA_SetConfig+0x10a>
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a73      	ldr	r2, [pc, #460]	; (8002818 <DMA_SetConfig+0x25c>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d03b      	beq.n	80026c6 <DMA_SetConfig+0x10a>
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a72      	ldr	r2, [pc, #456]	; (800281c <DMA_SetConfig+0x260>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d036      	beq.n	80026c6 <DMA_SetConfig+0x10a>
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a70      	ldr	r2, [pc, #448]	; (8002820 <DMA_SetConfig+0x264>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d031      	beq.n	80026c6 <DMA_SetConfig+0x10a>
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a6f      	ldr	r2, [pc, #444]	; (8002824 <DMA_SetConfig+0x268>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d02c      	beq.n	80026c6 <DMA_SetConfig+0x10a>
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a6d      	ldr	r2, [pc, #436]	; (8002828 <DMA_SetConfig+0x26c>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d027      	beq.n	80026c6 <DMA_SetConfig+0x10a>
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a6c      	ldr	r2, [pc, #432]	; (800282c <DMA_SetConfig+0x270>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d022      	beq.n	80026c6 <DMA_SetConfig+0x10a>
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a6a      	ldr	r2, [pc, #424]	; (8002830 <DMA_SetConfig+0x274>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d01d      	beq.n	80026c6 <DMA_SetConfig+0x10a>
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a69      	ldr	r2, [pc, #420]	; (8002834 <DMA_SetConfig+0x278>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d018      	beq.n	80026c6 <DMA_SetConfig+0x10a>
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a67      	ldr	r2, [pc, #412]	; (8002838 <DMA_SetConfig+0x27c>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d013      	beq.n	80026c6 <DMA_SetConfig+0x10a>
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a66      	ldr	r2, [pc, #408]	; (800283c <DMA_SetConfig+0x280>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d00e      	beq.n	80026c6 <DMA_SetConfig+0x10a>
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a64      	ldr	r2, [pc, #400]	; (8002840 <DMA_SetConfig+0x284>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d009      	beq.n	80026c6 <DMA_SetConfig+0x10a>
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a63      	ldr	r2, [pc, #396]	; (8002844 <DMA_SetConfig+0x288>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d004      	beq.n	80026c6 <DMA_SetConfig+0x10a>
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a61      	ldr	r2, [pc, #388]	; (8002848 <DMA_SetConfig+0x28c>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d101      	bne.n	80026ca <DMA_SetConfig+0x10e>
 80026c6:	2301      	movs	r3, #1
 80026c8:	e000      	b.n	80026cc <DMA_SetConfig+0x110>
 80026ca:	2300      	movs	r3, #0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d00d      	beq.n	80026ec <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026d4:	68fa      	ldr	r2, [r7, #12]
 80026d6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80026d8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d004      	beq.n	80026ec <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e6:	68fa      	ldr	r2, [r7, #12]
 80026e8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80026ea:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a3e      	ldr	r2, [pc, #248]	; (80027ec <DMA_SetConfig+0x230>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d04a      	beq.n	800278c <DMA_SetConfig+0x1d0>
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a3d      	ldr	r2, [pc, #244]	; (80027f0 <DMA_SetConfig+0x234>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d045      	beq.n	800278c <DMA_SetConfig+0x1d0>
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a3b      	ldr	r2, [pc, #236]	; (80027f4 <DMA_SetConfig+0x238>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d040      	beq.n	800278c <DMA_SetConfig+0x1d0>
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a3a      	ldr	r2, [pc, #232]	; (80027f8 <DMA_SetConfig+0x23c>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d03b      	beq.n	800278c <DMA_SetConfig+0x1d0>
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a38      	ldr	r2, [pc, #224]	; (80027fc <DMA_SetConfig+0x240>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d036      	beq.n	800278c <DMA_SetConfig+0x1d0>
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a37      	ldr	r2, [pc, #220]	; (8002800 <DMA_SetConfig+0x244>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d031      	beq.n	800278c <DMA_SetConfig+0x1d0>
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a35      	ldr	r2, [pc, #212]	; (8002804 <DMA_SetConfig+0x248>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d02c      	beq.n	800278c <DMA_SetConfig+0x1d0>
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a34      	ldr	r2, [pc, #208]	; (8002808 <DMA_SetConfig+0x24c>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d027      	beq.n	800278c <DMA_SetConfig+0x1d0>
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a32      	ldr	r2, [pc, #200]	; (800280c <DMA_SetConfig+0x250>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d022      	beq.n	800278c <DMA_SetConfig+0x1d0>
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a31      	ldr	r2, [pc, #196]	; (8002810 <DMA_SetConfig+0x254>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d01d      	beq.n	800278c <DMA_SetConfig+0x1d0>
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a2f      	ldr	r2, [pc, #188]	; (8002814 <DMA_SetConfig+0x258>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d018      	beq.n	800278c <DMA_SetConfig+0x1d0>
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a2e      	ldr	r2, [pc, #184]	; (8002818 <DMA_SetConfig+0x25c>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d013      	beq.n	800278c <DMA_SetConfig+0x1d0>
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a2c      	ldr	r2, [pc, #176]	; (800281c <DMA_SetConfig+0x260>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d00e      	beq.n	800278c <DMA_SetConfig+0x1d0>
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a2b      	ldr	r2, [pc, #172]	; (8002820 <DMA_SetConfig+0x264>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d009      	beq.n	800278c <DMA_SetConfig+0x1d0>
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a29      	ldr	r2, [pc, #164]	; (8002824 <DMA_SetConfig+0x268>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d004      	beq.n	800278c <DMA_SetConfig+0x1d0>
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a28      	ldr	r2, [pc, #160]	; (8002828 <DMA_SetConfig+0x26c>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d101      	bne.n	8002790 <DMA_SetConfig+0x1d4>
 800278c:	2301      	movs	r3, #1
 800278e:	e000      	b.n	8002792 <DMA_SetConfig+0x1d6>
 8002790:	2300      	movs	r3, #0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d05a      	beq.n	800284c <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800279a:	f003 031f 	and.w	r3, r3, #31
 800279e:	223f      	movs	r2, #63	; 0x3f
 80027a0:	409a      	lsls	r2, r3
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80027b4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	683a      	ldr	r2, [r7, #0]
 80027bc:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	2b40      	cmp	r3, #64	; 0x40
 80027c4:	d108      	bne.n	80027d8 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	68ba      	ldr	r2, [r7, #8]
 80027d4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80027d6:	e087      	b.n	80028e8 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	68ba      	ldr	r2, [r7, #8]
 80027de:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	60da      	str	r2, [r3, #12]
}
 80027e8:	e07e      	b.n	80028e8 <DMA_SetConfig+0x32c>
 80027ea:	bf00      	nop
 80027ec:	40020010 	.word	0x40020010
 80027f0:	40020028 	.word	0x40020028
 80027f4:	40020040 	.word	0x40020040
 80027f8:	40020058 	.word	0x40020058
 80027fc:	40020070 	.word	0x40020070
 8002800:	40020088 	.word	0x40020088
 8002804:	400200a0 	.word	0x400200a0
 8002808:	400200b8 	.word	0x400200b8
 800280c:	40020410 	.word	0x40020410
 8002810:	40020428 	.word	0x40020428
 8002814:	40020440 	.word	0x40020440
 8002818:	40020458 	.word	0x40020458
 800281c:	40020470 	.word	0x40020470
 8002820:	40020488 	.word	0x40020488
 8002824:	400204a0 	.word	0x400204a0
 8002828:	400204b8 	.word	0x400204b8
 800282c:	58025408 	.word	0x58025408
 8002830:	5802541c 	.word	0x5802541c
 8002834:	58025430 	.word	0x58025430
 8002838:	58025444 	.word	0x58025444
 800283c:	58025458 	.word	0x58025458
 8002840:	5802546c 	.word	0x5802546c
 8002844:	58025480 	.word	0x58025480
 8002848:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a28      	ldr	r2, [pc, #160]	; (80028f4 <DMA_SetConfig+0x338>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d022      	beq.n	800289c <DMA_SetConfig+0x2e0>
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a27      	ldr	r2, [pc, #156]	; (80028f8 <DMA_SetConfig+0x33c>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d01d      	beq.n	800289c <DMA_SetConfig+0x2e0>
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a25      	ldr	r2, [pc, #148]	; (80028fc <DMA_SetConfig+0x340>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d018      	beq.n	800289c <DMA_SetConfig+0x2e0>
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a24      	ldr	r2, [pc, #144]	; (8002900 <DMA_SetConfig+0x344>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d013      	beq.n	800289c <DMA_SetConfig+0x2e0>
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a22      	ldr	r2, [pc, #136]	; (8002904 <DMA_SetConfig+0x348>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d00e      	beq.n	800289c <DMA_SetConfig+0x2e0>
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a21      	ldr	r2, [pc, #132]	; (8002908 <DMA_SetConfig+0x34c>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d009      	beq.n	800289c <DMA_SetConfig+0x2e0>
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a1f      	ldr	r2, [pc, #124]	; (800290c <DMA_SetConfig+0x350>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d004      	beq.n	800289c <DMA_SetConfig+0x2e0>
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a1e      	ldr	r2, [pc, #120]	; (8002910 <DMA_SetConfig+0x354>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d101      	bne.n	80028a0 <DMA_SetConfig+0x2e4>
 800289c:	2301      	movs	r3, #1
 800289e:	e000      	b.n	80028a2 <DMA_SetConfig+0x2e6>
 80028a0:	2300      	movs	r3, #0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d020      	beq.n	80028e8 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028aa:	f003 031f 	and.w	r3, r3, #31
 80028ae:	2201      	movs	r2, #1
 80028b0:	409a      	lsls	r2, r3
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	683a      	ldr	r2, [r7, #0]
 80028bc:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	2b40      	cmp	r3, #64	; 0x40
 80028c4:	d108      	bne.n	80028d8 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	68ba      	ldr	r2, [r7, #8]
 80028d4:	60da      	str	r2, [r3, #12]
}
 80028d6:	e007      	b.n	80028e8 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	68ba      	ldr	r2, [r7, #8]
 80028de:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	60da      	str	r2, [r3, #12]
}
 80028e8:	bf00      	nop
 80028ea:	371c      	adds	r7, #28
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr
 80028f4:	58025408 	.word	0x58025408
 80028f8:	5802541c 	.word	0x5802541c
 80028fc:	58025430 	.word	0x58025430
 8002900:	58025444 	.word	0x58025444
 8002904:	58025458 	.word	0x58025458
 8002908:	5802546c 	.word	0x5802546c
 800290c:	58025480 	.word	0x58025480
 8002910:	58025494 	.word	0x58025494

08002914 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002914:	b480      	push	{r7}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a42      	ldr	r2, [pc, #264]	; (8002a2c <DMA_CalcBaseAndBitshift+0x118>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d04a      	beq.n	80029bc <DMA_CalcBaseAndBitshift+0xa8>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a41      	ldr	r2, [pc, #260]	; (8002a30 <DMA_CalcBaseAndBitshift+0x11c>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d045      	beq.n	80029bc <DMA_CalcBaseAndBitshift+0xa8>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a3f      	ldr	r2, [pc, #252]	; (8002a34 <DMA_CalcBaseAndBitshift+0x120>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d040      	beq.n	80029bc <DMA_CalcBaseAndBitshift+0xa8>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a3e      	ldr	r2, [pc, #248]	; (8002a38 <DMA_CalcBaseAndBitshift+0x124>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d03b      	beq.n	80029bc <DMA_CalcBaseAndBitshift+0xa8>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a3c      	ldr	r2, [pc, #240]	; (8002a3c <DMA_CalcBaseAndBitshift+0x128>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d036      	beq.n	80029bc <DMA_CalcBaseAndBitshift+0xa8>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a3b      	ldr	r2, [pc, #236]	; (8002a40 <DMA_CalcBaseAndBitshift+0x12c>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d031      	beq.n	80029bc <DMA_CalcBaseAndBitshift+0xa8>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a39      	ldr	r2, [pc, #228]	; (8002a44 <DMA_CalcBaseAndBitshift+0x130>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d02c      	beq.n	80029bc <DMA_CalcBaseAndBitshift+0xa8>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a38      	ldr	r2, [pc, #224]	; (8002a48 <DMA_CalcBaseAndBitshift+0x134>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d027      	beq.n	80029bc <DMA_CalcBaseAndBitshift+0xa8>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a36      	ldr	r2, [pc, #216]	; (8002a4c <DMA_CalcBaseAndBitshift+0x138>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d022      	beq.n	80029bc <DMA_CalcBaseAndBitshift+0xa8>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a35      	ldr	r2, [pc, #212]	; (8002a50 <DMA_CalcBaseAndBitshift+0x13c>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d01d      	beq.n	80029bc <DMA_CalcBaseAndBitshift+0xa8>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a33      	ldr	r2, [pc, #204]	; (8002a54 <DMA_CalcBaseAndBitshift+0x140>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d018      	beq.n	80029bc <DMA_CalcBaseAndBitshift+0xa8>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a32      	ldr	r2, [pc, #200]	; (8002a58 <DMA_CalcBaseAndBitshift+0x144>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d013      	beq.n	80029bc <DMA_CalcBaseAndBitshift+0xa8>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a30      	ldr	r2, [pc, #192]	; (8002a5c <DMA_CalcBaseAndBitshift+0x148>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d00e      	beq.n	80029bc <DMA_CalcBaseAndBitshift+0xa8>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a2f      	ldr	r2, [pc, #188]	; (8002a60 <DMA_CalcBaseAndBitshift+0x14c>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d009      	beq.n	80029bc <DMA_CalcBaseAndBitshift+0xa8>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a2d      	ldr	r2, [pc, #180]	; (8002a64 <DMA_CalcBaseAndBitshift+0x150>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d004      	beq.n	80029bc <DMA_CalcBaseAndBitshift+0xa8>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a2c      	ldr	r2, [pc, #176]	; (8002a68 <DMA_CalcBaseAndBitshift+0x154>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d101      	bne.n	80029c0 <DMA_CalcBaseAndBitshift+0xac>
 80029bc:	2301      	movs	r3, #1
 80029be:	e000      	b.n	80029c2 <DMA_CalcBaseAndBitshift+0xae>
 80029c0:	2300      	movs	r3, #0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d024      	beq.n	8002a10 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	3b10      	subs	r3, #16
 80029ce:	4a27      	ldr	r2, [pc, #156]	; (8002a6c <DMA_CalcBaseAndBitshift+0x158>)
 80029d0:	fba2 2303 	umull	r2, r3, r2, r3
 80029d4:	091b      	lsrs	r3, r3, #4
 80029d6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f003 0307 	and.w	r3, r3, #7
 80029de:	4a24      	ldr	r2, [pc, #144]	; (8002a70 <DMA_CalcBaseAndBitshift+0x15c>)
 80029e0:	5cd3      	ldrb	r3, [r2, r3]
 80029e2:	461a      	mov	r2, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2b03      	cmp	r3, #3
 80029ec:	d908      	bls.n	8002a00 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	461a      	mov	r2, r3
 80029f4:	4b1f      	ldr	r3, [pc, #124]	; (8002a74 <DMA_CalcBaseAndBitshift+0x160>)
 80029f6:	4013      	ands	r3, r2
 80029f8:	1d1a      	adds	r2, r3, #4
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	659a      	str	r2, [r3, #88]	; 0x58
 80029fe:	e00d      	b.n	8002a1c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	461a      	mov	r2, r3
 8002a06:	4b1b      	ldr	r3, [pc, #108]	; (8002a74 <DMA_CalcBaseAndBitshift+0x160>)
 8002a08:	4013      	ands	r3, r2
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	6593      	str	r3, [r2, #88]	; 0x58
 8002a0e:	e005      	b.n	8002a1c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3714      	adds	r7, #20
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr
 8002a2c:	40020010 	.word	0x40020010
 8002a30:	40020028 	.word	0x40020028
 8002a34:	40020040 	.word	0x40020040
 8002a38:	40020058 	.word	0x40020058
 8002a3c:	40020070 	.word	0x40020070
 8002a40:	40020088 	.word	0x40020088
 8002a44:	400200a0 	.word	0x400200a0
 8002a48:	400200b8 	.word	0x400200b8
 8002a4c:	40020410 	.word	0x40020410
 8002a50:	40020428 	.word	0x40020428
 8002a54:	40020440 	.word	0x40020440
 8002a58:	40020458 	.word	0x40020458
 8002a5c:	40020470 	.word	0x40020470
 8002a60:	40020488 	.word	0x40020488
 8002a64:	400204a0 	.word	0x400204a0
 8002a68:	400204b8 	.word	0x400204b8
 8002a6c:	aaaaaaab 	.word	0xaaaaaaab
 8002a70:	0800b0b0 	.word	0x0800b0b0
 8002a74:	fffffc00 	.word	0xfffffc00

08002a78 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b085      	sub	sp, #20
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a80:	2300      	movs	r3, #0
 8002a82:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d120      	bne.n	8002ace <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a90:	2b03      	cmp	r3, #3
 8002a92:	d858      	bhi.n	8002b46 <DMA_CheckFifoParam+0xce>
 8002a94:	a201      	add	r2, pc, #4	; (adr r2, 8002a9c <DMA_CheckFifoParam+0x24>)
 8002a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a9a:	bf00      	nop
 8002a9c:	08002aad 	.word	0x08002aad
 8002aa0:	08002abf 	.word	0x08002abf
 8002aa4:	08002aad 	.word	0x08002aad
 8002aa8:	08002b47 	.word	0x08002b47
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d048      	beq.n	8002b4a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002abc:	e045      	b.n	8002b4a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ac6:	d142      	bne.n	8002b4e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002acc:	e03f      	b.n	8002b4e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	699b      	ldr	r3, [r3, #24]
 8002ad2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ad6:	d123      	bne.n	8002b20 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002adc:	2b03      	cmp	r3, #3
 8002ade:	d838      	bhi.n	8002b52 <DMA_CheckFifoParam+0xda>
 8002ae0:	a201      	add	r2, pc, #4	; (adr r2, 8002ae8 <DMA_CheckFifoParam+0x70>)
 8002ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ae6:	bf00      	nop
 8002ae8:	08002af9 	.word	0x08002af9
 8002aec:	08002aff 	.word	0x08002aff
 8002af0:	08002af9 	.word	0x08002af9
 8002af4:	08002b11 	.word	0x08002b11
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	73fb      	strb	r3, [r7, #15]
        break;
 8002afc:	e030      	b.n	8002b60 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d025      	beq.n	8002b56 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002b0e:	e022      	b.n	8002b56 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b14:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b18:	d11f      	bne.n	8002b5a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002b1e:	e01c      	b.n	8002b5a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d902      	bls.n	8002b2e <DMA_CheckFifoParam+0xb6>
 8002b28:	2b03      	cmp	r3, #3
 8002b2a:	d003      	beq.n	8002b34 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8002b2c:	e018      	b.n	8002b60 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	73fb      	strb	r3, [r7, #15]
        break;
 8002b32:	e015      	b.n	8002b60 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d00e      	beq.n	8002b5e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	73fb      	strb	r3, [r7, #15]
    break;
 8002b44:	e00b      	b.n	8002b5e <DMA_CheckFifoParam+0xe6>
        break;
 8002b46:	bf00      	nop
 8002b48:	e00a      	b.n	8002b60 <DMA_CheckFifoParam+0xe8>
        break;
 8002b4a:	bf00      	nop
 8002b4c:	e008      	b.n	8002b60 <DMA_CheckFifoParam+0xe8>
        break;
 8002b4e:	bf00      	nop
 8002b50:	e006      	b.n	8002b60 <DMA_CheckFifoParam+0xe8>
        break;
 8002b52:	bf00      	nop
 8002b54:	e004      	b.n	8002b60 <DMA_CheckFifoParam+0xe8>
        break;
 8002b56:	bf00      	nop
 8002b58:	e002      	b.n	8002b60 <DMA_CheckFifoParam+0xe8>
        break;
 8002b5a:	bf00      	nop
 8002b5c:	e000      	b.n	8002b60 <DMA_CheckFifoParam+0xe8>
    break;
 8002b5e:	bf00      	nop
    }
  }

  return status;
 8002b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3714      	adds	r7, #20
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop

08002b70 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b085      	sub	sp, #20
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a38      	ldr	r2, [pc, #224]	; (8002c64 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d022      	beq.n	8002bce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a36      	ldr	r2, [pc, #216]	; (8002c68 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d01d      	beq.n	8002bce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a35      	ldr	r2, [pc, #212]	; (8002c6c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d018      	beq.n	8002bce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a33      	ldr	r2, [pc, #204]	; (8002c70 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d013      	beq.n	8002bce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a32      	ldr	r2, [pc, #200]	; (8002c74 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d00e      	beq.n	8002bce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a30      	ldr	r2, [pc, #192]	; (8002c78 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d009      	beq.n	8002bce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a2f      	ldr	r2, [pc, #188]	; (8002c7c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d004      	beq.n	8002bce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a2d      	ldr	r2, [pc, #180]	; (8002c80 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d101      	bne.n	8002bd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e000      	b.n	8002bd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d01a      	beq.n	8002c0e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	3b08      	subs	r3, #8
 8002be0:	4a28      	ldr	r2, [pc, #160]	; (8002c84 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8002be2:	fba2 2303 	umull	r2, r3, r2, r3
 8002be6:	091b      	lsrs	r3, r3, #4
 8002be8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8002bea:	68fa      	ldr	r2, [r7, #12]
 8002bec:	4b26      	ldr	r3, [pc, #152]	; (8002c88 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8002bee:	4413      	add	r3, r2
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4a24      	ldr	r2, [pc, #144]	; (8002c8c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8002bfc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f003 031f 	and.w	r3, r3, #31
 8002c04:	2201      	movs	r2, #1
 8002c06:	409a      	lsls	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8002c0c:	e024      	b.n	8002c58 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	3b10      	subs	r3, #16
 8002c16:	4a1e      	ldr	r2, [pc, #120]	; (8002c90 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8002c18:	fba2 2303 	umull	r2, r3, r2, r3
 8002c1c:	091b      	lsrs	r3, r3, #4
 8002c1e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	4a1c      	ldr	r2, [pc, #112]	; (8002c94 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d806      	bhi.n	8002c36 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	4a1b      	ldr	r2, [pc, #108]	; (8002c98 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d902      	bls.n	8002c36 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	3308      	adds	r3, #8
 8002c34:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8002c36:	68fa      	ldr	r2, [r7, #12]
 8002c38:	4b18      	ldr	r3, [pc, #96]	; (8002c9c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8002c3a:	4413      	add	r3, r2
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	461a      	mov	r2, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	4a16      	ldr	r2, [pc, #88]	; (8002ca0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8002c48:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f003 031f 	and.w	r3, r3, #31
 8002c50:	2201      	movs	r2, #1
 8002c52:	409a      	lsls	r2, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002c58:	bf00      	nop
 8002c5a:	3714      	adds	r7, #20
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr
 8002c64:	58025408 	.word	0x58025408
 8002c68:	5802541c 	.word	0x5802541c
 8002c6c:	58025430 	.word	0x58025430
 8002c70:	58025444 	.word	0x58025444
 8002c74:	58025458 	.word	0x58025458
 8002c78:	5802546c 	.word	0x5802546c
 8002c7c:	58025480 	.word	0x58025480
 8002c80:	58025494 	.word	0x58025494
 8002c84:	cccccccd 	.word	0xcccccccd
 8002c88:	16009600 	.word	0x16009600
 8002c8c:	58025880 	.word	0x58025880
 8002c90:	aaaaaaab 	.word	0xaaaaaaab
 8002c94:	400204b8 	.word	0x400204b8
 8002c98:	4002040f 	.word	0x4002040f
 8002c9c:	10008200 	.word	0x10008200
 8002ca0:	40020880 	.word	0x40020880

08002ca4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b085      	sub	sp, #20
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d04a      	beq.n	8002d50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2b08      	cmp	r3, #8
 8002cbe:	d847      	bhi.n	8002d50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a25      	ldr	r2, [pc, #148]	; (8002d5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d022      	beq.n	8002d10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a24      	ldr	r2, [pc, #144]	; (8002d60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d01d      	beq.n	8002d10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a22      	ldr	r2, [pc, #136]	; (8002d64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d018      	beq.n	8002d10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a21      	ldr	r2, [pc, #132]	; (8002d68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d013      	beq.n	8002d10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a1f      	ldr	r2, [pc, #124]	; (8002d6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d00e      	beq.n	8002d10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a1e      	ldr	r2, [pc, #120]	; (8002d70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d009      	beq.n	8002d10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a1c      	ldr	r2, [pc, #112]	; (8002d74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d004      	beq.n	8002d10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a1b      	ldr	r2, [pc, #108]	; (8002d78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d101      	bne.n	8002d14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8002d10:	2301      	movs	r3, #1
 8002d12:	e000      	b.n	8002d16 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8002d14:	2300      	movs	r3, #0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00a      	beq.n	8002d30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	4b17      	ldr	r3, [pc, #92]	; (8002d7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8002d1e:	4413      	add	r3, r2
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	461a      	mov	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	4a15      	ldr	r2, [pc, #84]	; (8002d80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8002d2c:	671a      	str	r2, [r3, #112]	; 0x70
 8002d2e:	e009      	b.n	8002d44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002d30:	68fa      	ldr	r2, [r7, #12]
 8002d32:	4b14      	ldr	r3, [pc, #80]	; (8002d84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8002d34:	4413      	add	r3, r2
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	461a      	mov	r2, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a11      	ldr	r2, [pc, #68]	; (8002d88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8002d42:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	3b01      	subs	r3, #1
 8002d48:	2201      	movs	r2, #1
 8002d4a:	409a      	lsls	r2, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8002d50:	bf00      	nop
 8002d52:	3714      	adds	r7, #20
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr
 8002d5c:	58025408 	.word	0x58025408
 8002d60:	5802541c 	.word	0x5802541c
 8002d64:	58025430 	.word	0x58025430
 8002d68:	58025444 	.word	0x58025444
 8002d6c:	58025458 	.word	0x58025458
 8002d70:	5802546c 	.word	0x5802546c
 8002d74:	58025480 	.word	0x58025480
 8002d78:	58025494 	.word	0x58025494
 8002d7c:	1600963f 	.word	0x1600963f
 8002d80:	58025940 	.word	0x58025940
 8002d84:	1000823f 	.word	0x1000823f
 8002d88:	40020940 	.word	0x40020940

08002d8c <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA Stream.
  * @param  pSyncConfig : pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b085      	sub	sp, #20
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
  uint32_t syncSignalID = 0;
 8002d96:	2300      	movs	r3, #0
 8002d98:	60fb      	str	r3, [r7, #12]
  uint32_t syncPolarity = 0;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  if(pSyncConfig->SyncEnable == ENABLE)
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	7a1b      	ldrb	r3, [r3, #8]
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d155      	bne.n	8002e52 <HAL_DMAEx_ConfigMuxSync+0xc6>
  {
    assert_param(IS_DMAMUX_SYNC_POLARITY(pSyncConfig->SyncPolarity));

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a4b      	ldr	r2, [pc, #300]	; (8002ed8 <HAL_DMAEx_ConfigMuxSync+0x14c>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d049      	beq.n	8002e44 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a49      	ldr	r2, [pc, #292]	; (8002edc <HAL_DMAEx_ConfigMuxSync+0x150>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d044      	beq.n	8002e44 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a48      	ldr	r2, [pc, #288]	; (8002ee0 <HAL_DMAEx_ConfigMuxSync+0x154>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d03f      	beq.n	8002e44 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a46      	ldr	r2, [pc, #280]	; (8002ee4 <HAL_DMAEx_ConfigMuxSync+0x158>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d03a      	beq.n	8002e44 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a45      	ldr	r2, [pc, #276]	; (8002ee8 <HAL_DMAEx_ConfigMuxSync+0x15c>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d035      	beq.n	8002e44 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a43      	ldr	r2, [pc, #268]	; (8002eec <HAL_DMAEx_ConfigMuxSync+0x160>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d030      	beq.n	8002e44 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a42      	ldr	r2, [pc, #264]	; (8002ef0 <HAL_DMAEx_ConfigMuxSync+0x164>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d02b      	beq.n	8002e44 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a40      	ldr	r2, [pc, #256]	; (8002ef4 <HAL_DMAEx_ConfigMuxSync+0x168>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d026      	beq.n	8002e44 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a3f      	ldr	r2, [pc, #252]	; (8002ef8 <HAL_DMAEx_ConfigMuxSync+0x16c>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d021      	beq.n	8002e44 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a3d      	ldr	r2, [pc, #244]	; (8002efc <HAL_DMAEx_ConfigMuxSync+0x170>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d01c      	beq.n	8002e44 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a3c      	ldr	r2, [pc, #240]	; (8002f00 <HAL_DMAEx_ConfigMuxSync+0x174>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d017      	beq.n	8002e44 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a3a      	ldr	r2, [pc, #232]	; (8002f04 <HAL_DMAEx_ConfigMuxSync+0x178>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d012      	beq.n	8002e44 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a39      	ldr	r2, [pc, #228]	; (8002f08 <HAL_DMAEx_ConfigMuxSync+0x17c>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d00d      	beq.n	8002e44 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a37      	ldr	r2, [pc, #220]	; (8002f0c <HAL_DMAEx_ConfigMuxSync+0x180>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d008      	beq.n	8002e44 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a36      	ldr	r2, [pc, #216]	; (8002f10 <HAL_DMAEx_ConfigMuxSync+0x184>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d003      	beq.n	8002e44 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a34      	ldr	r2, [pc, #208]	; (8002f14 <HAL_DMAEx_ConfigMuxSync+0x188>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	bf00      	nop
    }
    else
    {
      assert_param(IS_BDMA_DMAMUX_SYNC_SIGNAL_ID(pSyncConfig->SyncSignalID));
    }
    syncSignalID = pSyncConfig->SyncSignalID;
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	60fb      	str	r3, [r7, #12]
    syncPolarity = pSyncConfig->SyncPolarity;
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	60bb      	str	r3, [r7, #8]
  }

  /*Check if the DMA state is ready */
  if(hdma->State == HAL_DMA_STATE_READY)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d131      	bne.n	8002ec2 <HAL_DMAEx_ConfigMuxSync+0x136>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d101      	bne.n	8002e6c <HAL_DMAEx_ConfigMuxSync+0xe0>
 8002e68:	2302      	movs	r3, #2
 8002e6a:	e02f      	b.n	8002ecc <HAL_DMAEx_ConfigMuxSync+0x140>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the synchronization and event generation before applying a new config */
    CLEAR_BIT(hdma->DMAmuxChannel->CCR,(DMAMUX_CxCR_SE | DMAMUX_CxCR_EGE));
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e7e:	f422 3281 	bic.w	r2, r2, #66048	; 0x10200
 8002e82:	601a      	str	r2, [r3, #0]

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG( hdma->DMAmuxChannel->CCR, \
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	b2d9      	uxtb	r1, r3
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	061a      	lsls	r2, r3, #24
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	3b01      	subs	r3, #1
 8002e96:	04db      	lsls	r3, r3, #19
 8002e98:	431a      	orrs	r2, r3
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	431a      	orrs	r2, r3
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	7a1b      	ldrb	r3, [r3, #8]
 8002ea2:	041b      	lsls	r3, r3, #16
 8002ea4:	431a      	orrs	r2, r3
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	7a5b      	ldrb	r3, [r3, #9]
 8002eaa:	025b      	lsls	r3, r3, #9
 8002eac:	431a      	orrs	r2, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	601a      	str	r2, [r3, #0]
               ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
               syncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)    | \
               ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos));

      /* Process Locked */
    __HAL_UNLOCK(hdma);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	e004      	b.n	8002ecc <HAL_DMAEx_ConfigMuxSync+0x140>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ec8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
  }
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3714      	adds	r7, #20
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr
 8002ed8:	40020010 	.word	0x40020010
 8002edc:	40020028 	.word	0x40020028
 8002ee0:	40020040 	.word	0x40020040
 8002ee4:	40020058 	.word	0x40020058
 8002ee8:	40020070 	.word	0x40020070
 8002eec:	40020088 	.word	0x40020088
 8002ef0:	400200a0 	.word	0x400200a0
 8002ef4:	400200b8 	.word	0x400200b8
 8002ef8:	40020410 	.word	0x40020410
 8002efc:	40020428 	.word	0x40020428
 8002f00:	40020440 	.word	0x40020440
 8002f04:	40020458 	.word	0x40020458
 8002f08:	40020470 	.word	0x40020470
 8002f0c:	40020488 	.word	0x40020488
 8002f10:	400204a0 	.word	0x400204a0
 8002f14:	400204b8 	.word	0x400204b8

08002f18 <HAL_DMAEx_MUX_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d01a      	beq.n	8002f66 <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f3a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f3e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002f48:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f4e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	655a      	str	r2, [r3, #84]	; 0x54

    if(hdma->XferErrorCallback != NULL)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d003      	beq.n	8002f66 <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	4798      	blx	r3
    }
  }

  if(hdma->DMAmuxRequestGen != 0)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d022      	beq.n	8002fb4 <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
   /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f78:	4013      	ands	r3, r2
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d01a      	beq.n	8002fb4 <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f8c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002f96:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f9c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	655a      	str	r2, [r3, #84]	; 0x54

      if(hdma->XferErrorCallback != NULL)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d003      	beq.n	8002fb4 <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	4798      	blx	r3
      }
    }
  }
}
 8002fb4:	bf00      	nop
 8002fb6:	3708      	adds	r7, #8
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b089      	sub	sp, #36	; 0x24
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002fca:	4b86      	ldr	r3, [pc, #536]	; (80031e4 <HAL_GPIO_Init+0x228>)
 8002fcc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002fce:	e18c      	b.n	80032ea <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	2101      	movs	r1, #1
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8002fdc:	4013      	ands	r3, r2
 8002fde:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	f000 817e 	beq.w	80032e4 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f003 0303 	and.w	r3, r3, #3
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d005      	beq.n	8003000 <HAL_GPIO_Init+0x44>
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f003 0303 	and.w	r3, r3, #3
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d130      	bne.n	8003062 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	2203      	movs	r2, #3
 800300c:	fa02 f303 	lsl.w	r3, r2, r3
 8003010:	43db      	mvns	r3, r3
 8003012:	69ba      	ldr	r2, [r7, #24]
 8003014:	4013      	ands	r3, r2
 8003016:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	68da      	ldr	r2, [r3, #12]
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	005b      	lsls	r3, r3, #1
 8003020:	fa02 f303 	lsl.w	r3, r2, r3
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	4313      	orrs	r3, r2
 8003028:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003036:	2201      	movs	r2, #1
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	fa02 f303 	lsl.w	r3, r2, r3
 800303e:	43db      	mvns	r3, r3
 8003040:	69ba      	ldr	r2, [r7, #24]
 8003042:	4013      	ands	r3, r2
 8003044:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	091b      	lsrs	r3, r3, #4
 800304c:	f003 0201 	and.w	r2, r3, #1
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	fa02 f303 	lsl.w	r3, r2, r3
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	4313      	orrs	r3, r2
 800305a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	69ba      	ldr	r2, [r7, #24]
 8003060:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f003 0303 	and.w	r3, r3, #3
 800306a:	2b03      	cmp	r3, #3
 800306c:	d017      	beq.n	800309e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	005b      	lsls	r3, r3, #1
 8003078:	2203      	movs	r2, #3
 800307a:	fa02 f303 	lsl.w	r3, r2, r3
 800307e:	43db      	mvns	r3, r3
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	4013      	ands	r3, r2
 8003084:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	689a      	ldr	r2, [r3, #8]
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	fa02 f303 	lsl.w	r3, r2, r3
 8003092:	69ba      	ldr	r2, [r7, #24]
 8003094:	4313      	orrs	r3, r2
 8003096:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	69ba      	ldr	r2, [r7, #24]
 800309c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f003 0303 	and.w	r3, r3, #3
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d123      	bne.n	80030f2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	08da      	lsrs	r2, r3, #3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	3208      	adds	r2, #8
 80030b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	f003 0307 	and.w	r3, r3, #7
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	220f      	movs	r2, #15
 80030c2:	fa02 f303 	lsl.w	r3, r2, r3
 80030c6:	43db      	mvns	r3, r3
 80030c8:	69ba      	ldr	r2, [r7, #24]
 80030ca:	4013      	ands	r3, r2
 80030cc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	691a      	ldr	r2, [r3, #16]
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	f003 0307 	and.w	r3, r3, #7
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	fa02 f303 	lsl.w	r3, r2, r3
 80030de:	69ba      	ldr	r2, [r7, #24]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	08da      	lsrs	r2, r3, #3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	3208      	adds	r2, #8
 80030ec:	69b9      	ldr	r1, [r7, #24]
 80030ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	005b      	lsls	r3, r3, #1
 80030fc:	2203      	movs	r2, #3
 80030fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003102:	43db      	mvns	r3, r3
 8003104:	69ba      	ldr	r2, [r7, #24]
 8003106:	4013      	ands	r3, r2
 8003108:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f003 0203 	and.w	r2, r3, #3
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	005b      	lsls	r3, r3, #1
 8003116:	fa02 f303 	lsl.w	r3, r2, r3
 800311a:	69ba      	ldr	r2, [r7, #24]
 800311c:	4313      	orrs	r3, r2
 800311e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	69ba      	ldr	r2, [r7, #24]
 8003124:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800312e:	2b00      	cmp	r3, #0
 8003130:	f000 80d8 	beq.w	80032e4 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003134:	4b2c      	ldr	r3, [pc, #176]	; (80031e8 <HAL_GPIO_Init+0x22c>)
 8003136:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800313a:	4a2b      	ldr	r2, [pc, #172]	; (80031e8 <HAL_GPIO_Init+0x22c>)
 800313c:	f043 0302 	orr.w	r3, r3, #2
 8003140:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003144:	4b28      	ldr	r3, [pc, #160]	; (80031e8 <HAL_GPIO_Init+0x22c>)
 8003146:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	60fb      	str	r3, [r7, #12]
 8003150:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003152:	4a26      	ldr	r2, [pc, #152]	; (80031ec <HAL_GPIO_Init+0x230>)
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	089b      	lsrs	r3, r3, #2
 8003158:	3302      	adds	r3, #2
 800315a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800315e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	f003 0303 	and.w	r3, r3, #3
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	220f      	movs	r2, #15
 800316a:	fa02 f303 	lsl.w	r3, r2, r3
 800316e:	43db      	mvns	r3, r3
 8003170:	69ba      	ldr	r2, [r7, #24]
 8003172:	4013      	ands	r3, r2
 8003174:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a1d      	ldr	r2, [pc, #116]	; (80031f0 <HAL_GPIO_Init+0x234>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d04a      	beq.n	8003214 <HAL_GPIO_Init+0x258>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a1c      	ldr	r2, [pc, #112]	; (80031f4 <HAL_GPIO_Init+0x238>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d02b      	beq.n	80031de <HAL_GPIO_Init+0x222>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a1b      	ldr	r2, [pc, #108]	; (80031f8 <HAL_GPIO_Init+0x23c>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d025      	beq.n	80031da <HAL_GPIO_Init+0x21e>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a1a      	ldr	r2, [pc, #104]	; (80031fc <HAL_GPIO_Init+0x240>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d01f      	beq.n	80031d6 <HAL_GPIO_Init+0x21a>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a19      	ldr	r2, [pc, #100]	; (8003200 <HAL_GPIO_Init+0x244>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d019      	beq.n	80031d2 <HAL_GPIO_Init+0x216>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a18      	ldr	r2, [pc, #96]	; (8003204 <HAL_GPIO_Init+0x248>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d013      	beq.n	80031ce <HAL_GPIO_Init+0x212>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a17      	ldr	r2, [pc, #92]	; (8003208 <HAL_GPIO_Init+0x24c>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d00d      	beq.n	80031ca <HAL_GPIO_Init+0x20e>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a16      	ldr	r2, [pc, #88]	; (800320c <HAL_GPIO_Init+0x250>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d007      	beq.n	80031c6 <HAL_GPIO_Init+0x20a>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a15      	ldr	r2, [pc, #84]	; (8003210 <HAL_GPIO_Init+0x254>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d101      	bne.n	80031c2 <HAL_GPIO_Init+0x206>
 80031be:	2309      	movs	r3, #9
 80031c0:	e029      	b.n	8003216 <HAL_GPIO_Init+0x25a>
 80031c2:	230a      	movs	r3, #10
 80031c4:	e027      	b.n	8003216 <HAL_GPIO_Init+0x25a>
 80031c6:	2307      	movs	r3, #7
 80031c8:	e025      	b.n	8003216 <HAL_GPIO_Init+0x25a>
 80031ca:	2306      	movs	r3, #6
 80031cc:	e023      	b.n	8003216 <HAL_GPIO_Init+0x25a>
 80031ce:	2305      	movs	r3, #5
 80031d0:	e021      	b.n	8003216 <HAL_GPIO_Init+0x25a>
 80031d2:	2304      	movs	r3, #4
 80031d4:	e01f      	b.n	8003216 <HAL_GPIO_Init+0x25a>
 80031d6:	2303      	movs	r3, #3
 80031d8:	e01d      	b.n	8003216 <HAL_GPIO_Init+0x25a>
 80031da:	2302      	movs	r3, #2
 80031dc:	e01b      	b.n	8003216 <HAL_GPIO_Init+0x25a>
 80031de:	2301      	movs	r3, #1
 80031e0:	e019      	b.n	8003216 <HAL_GPIO_Init+0x25a>
 80031e2:	bf00      	nop
 80031e4:	58000080 	.word	0x58000080
 80031e8:	58024400 	.word	0x58024400
 80031ec:	58000400 	.word	0x58000400
 80031f0:	58020000 	.word	0x58020000
 80031f4:	58020400 	.word	0x58020400
 80031f8:	58020800 	.word	0x58020800
 80031fc:	58020c00 	.word	0x58020c00
 8003200:	58021000 	.word	0x58021000
 8003204:	58021400 	.word	0x58021400
 8003208:	58021800 	.word	0x58021800
 800320c:	58021c00 	.word	0x58021c00
 8003210:	58022400 	.word	0x58022400
 8003214:	2300      	movs	r3, #0
 8003216:	69fa      	ldr	r2, [r7, #28]
 8003218:	f002 0203 	and.w	r2, r2, #3
 800321c:	0092      	lsls	r2, r2, #2
 800321e:	4093      	lsls	r3, r2
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	4313      	orrs	r3, r2
 8003224:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003226:	4938      	ldr	r1, [pc, #224]	; (8003308 <HAL_GPIO_Init+0x34c>)
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	089b      	lsrs	r3, r3, #2
 800322c:	3302      	adds	r3, #2
 800322e:	69ba      	ldr	r2, [r7, #24]
 8003230:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003234:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	43db      	mvns	r3, r3
 8003240:	69ba      	ldr	r2, [r7, #24]
 8003242:	4013      	ands	r3, r2
 8003244:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d003      	beq.n	800325a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8003252:	69ba      	ldr	r2, [r7, #24]
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	4313      	orrs	r3, r2
 8003258:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800325a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003262:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	43db      	mvns	r3, r3
 800326e:	69ba      	ldr	r2, [r7, #24]
 8003270:	4013      	ands	r3, r2
 8003272:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800327c:	2b00      	cmp	r3, #0
 800327e:	d003      	beq.n	8003288 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8003280:	69ba      	ldr	r2, [r7, #24]
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	4313      	orrs	r3, r2
 8003286:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003288:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	43db      	mvns	r3, r3
 800329a:	69ba      	ldr	r2, [r7, #24]
 800329c:	4013      	ands	r3, r2
 800329e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d003      	beq.n	80032b4 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80032ac:	69ba      	ldr	r2, [r7, #24]
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	69ba      	ldr	r2, [r7, #24]
 80032b8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	43db      	mvns	r3, r3
 80032c4:	69ba      	ldr	r2, [r7, #24]
 80032c6:	4013      	ands	r3, r2
 80032c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d003      	beq.n	80032de <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80032d6:	69ba      	ldr	r2, [r7, #24]
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	4313      	orrs	r3, r2
 80032dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	69ba      	ldr	r2, [r7, #24]
 80032e2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	3301      	adds	r3, #1
 80032e8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	fa22 f303 	lsr.w	r3, r2, r3
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	f47f ae6b 	bne.w	8002fd0 <HAL_GPIO_Init+0x14>
  }
}
 80032fa:	bf00      	nop
 80032fc:	bf00      	nop
 80032fe:	3724      	adds	r7, #36	; 0x24
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr
 8003308:	58000400 	.word	0x58000400

0800330c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003314:	4b29      	ldr	r3, [pc, #164]	; (80033bc <HAL_PWREx_ConfigSupply+0xb0>)
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	f003 0307 	and.w	r3, r3, #7
 800331c:	2b06      	cmp	r3, #6
 800331e:	d00a      	beq.n	8003336 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003320:	4b26      	ldr	r3, [pc, #152]	; (80033bc <HAL_PWREx_ConfigSupply+0xb0>)
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	429a      	cmp	r2, r3
 800332c:	d001      	beq.n	8003332 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e03f      	b.n	80033b2 <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003332:	2300      	movs	r3, #0
 8003334:	e03d      	b.n	80033b2 <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003336:	4b21      	ldr	r3, [pc, #132]	; (80033bc <HAL_PWREx_ConfigSupply+0xb0>)
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800333e:	491f      	ldr	r1, [pc, #124]	; (80033bc <HAL_PWREx_ConfigSupply+0xb0>)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4313      	orrs	r3, r2
 8003344:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003346:	f7fd fa39 	bl	80007bc <HAL_GetTick>
 800334a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800334c:	e009      	b.n	8003362 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800334e:	f7fd fa35 	bl	80007bc <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800335c:	d901      	bls.n	8003362 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e027      	b.n	80033b2 <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003362:	4b16      	ldr	r3, [pc, #88]	; (80033bc <HAL_PWREx_ConfigSupply+0xb0>)
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800336a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800336e:	d1ee      	bne.n	800334e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2b1e      	cmp	r3, #30
 8003374:	d008      	beq.n	8003388 <HAL_PWREx_ConfigSupply+0x7c>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2b2e      	cmp	r3, #46	; 0x2e
 800337a:	d005      	beq.n	8003388 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2b1d      	cmp	r3, #29
 8003380:	d002      	beq.n	8003388 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2b2d      	cmp	r3, #45	; 0x2d
 8003386:	d113      	bne.n	80033b0 <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003388:	f7fd fa18 	bl	80007bc <HAL_GetTick>
 800338c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800338e:	e009      	b.n	80033a4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003390:	f7fd fa14 	bl	80007bc <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800339e:	d901      	bls.n	80033a4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e006      	b.n	80033b2 <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80033a4:	4b05      	ldr	r3, [pc, #20]	; (80033bc <HAL_PWREx_ConfigSupply+0xb0>)
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	f003 0311 	and.w	r3, r3, #17
 80033ac:	2b11      	cmp	r3, #17
 80033ae:	d1ef      	bne.n	8003390 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3710      	adds	r7, #16
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	58024800 	.word	0x58024800

080033c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b08c      	sub	sp, #48	; 0x30
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d101      	bne.n	80033d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e397      	b.n	8003b02 <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0301 	and.w	r3, r3, #1
 80033da:	2b00      	cmp	r3, #0
 80033dc:	f000 8087 	beq.w	80034ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033e0:	4b9e      	ldr	r3, [pc, #632]	; (800365c <HAL_RCC_OscConfig+0x29c>)
 80033e2:	691b      	ldr	r3, [r3, #16]
 80033e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80033e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80033ea:	4b9c      	ldr	r3, [pc, #624]	; (800365c <HAL_RCC_OscConfig+0x29c>)
 80033ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ee:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80033f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033f2:	2b10      	cmp	r3, #16
 80033f4:	d007      	beq.n	8003406 <HAL_RCC_OscConfig+0x46>
 80033f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033f8:	2b18      	cmp	r3, #24
 80033fa:	d110      	bne.n	800341e <HAL_RCC_OscConfig+0x5e>
 80033fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033fe:	f003 0303 	and.w	r3, r3, #3
 8003402:	2b02      	cmp	r3, #2
 8003404:	d10b      	bne.n	800341e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003406:	4b95      	ldr	r3, [pc, #596]	; (800365c <HAL_RCC_OscConfig+0x29c>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d06c      	beq.n	80034ec <HAL_RCC_OscConfig+0x12c>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d168      	bne.n	80034ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e371      	b.n	8003b02 <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003426:	d106      	bne.n	8003436 <HAL_RCC_OscConfig+0x76>
 8003428:	4b8c      	ldr	r3, [pc, #560]	; (800365c <HAL_RCC_OscConfig+0x29c>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a8b      	ldr	r2, [pc, #556]	; (800365c <HAL_RCC_OscConfig+0x29c>)
 800342e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003432:	6013      	str	r3, [r2, #0]
 8003434:	e02e      	b.n	8003494 <HAL_RCC_OscConfig+0xd4>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d10c      	bne.n	8003458 <HAL_RCC_OscConfig+0x98>
 800343e:	4b87      	ldr	r3, [pc, #540]	; (800365c <HAL_RCC_OscConfig+0x29c>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a86      	ldr	r2, [pc, #536]	; (800365c <HAL_RCC_OscConfig+0x29c>)
 8003444:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003448:	6013      	str	r3, [r2, #0]
 800344a:	4b84      	ldr	r3, [pc, #528]	; (800365c <HAL_RCC_OscConfig+0x29c>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a83      	ldr	r2, [pc, #524]	; (800365c <HAL_RCC_OscConfig+0x29c>)
 8003450:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003454:	6013      	str	r3, [r2, #0]
 8003456:	e01d      	b.n	8003494 <HAL_RCC_OscConfig+0xd4>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003460:	d10c      	bne.n	800347c <HAL_RCC_OscConfig+0xbc>
 8003462:	4b7e      	ldr	r3, [pc, #504]	; (800365c <HAL_RCC_OscConfig+0x29c>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a7d      	ldr	r2, [pc, #500]	; (800365c <HAL_RCC_OscConfig+0x29c>)
 8003468:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800346c:	6013      	str	r3, [r2, #0]
 800346e:	4b7b      	ldr	r3, [pc, #492]	; (800365c <HAL_RCC_OscConfig+0x29c>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a7a      	ldr	r2, [pc, #488]	; (800365c <HAL_RCC_OscConfig+0x29c>)
 8003474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003478:	6013      	str	r3, [r2, #0]
 800347a:	e00b      	b.n	8003494 <HAL_RCC_OscConfig+0xd4>
 800347c:	4b77      	ldr	r3, [pc, #476]	; (800365c <HAL_RCC_OscConfig+0x29c>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a76      	ldr	r2, [pc, #472]	; (800365c <HAL_RCC_OscConfig+0x29c>)
 8003482:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003486:	6013      	str	r3, [r2, #0]
 8003488:	4b74      	ldr	r3, [pc, #464]	; (800365c <HAL_RCC_OscConfig+0x29c>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a73      	ldr	r2, [pc, #460]	; (800365c <HAL_RCC_OscConfig+0x29c>)
 800348e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003492:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d013      	beq.n	80034c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800349c:	f7fd f98e 	bl	80007bc <HAL_GetTick>
 80034a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80034a2:	e008      	b.n	80034b6 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034a4:	f7fd f98a 	bl	80007bc <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	2b64      	cmp	r3, #100	; 0x64
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e325      	b.n	8003b02 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80034b6:	4b69      	ldr	r3, [pc, #420]	; (800365c <HAL_RCC_OscConfig+0x29c>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d0f0      	beq.n	80034a4 <HAL_RCC_OscConfig+0xe4>
 80034c2:	e014      	b.n	80034ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c4:	f7fd f97a 	bl	80007bc <HAL_GetTick>
 80034c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80034ca:	e008      	b.n	80034de <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034cc:	f7fd f976 	bl	80007bc <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b64      	cmp	r3, #100	; 0x64
 80034d8:	d901      	bls.n	80034de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e311      	b.n	8003b02 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80034de:	4b5f      	ldr	r3, [pc, #380]	; (800365c <HAL_RCC_OscConfig+0x29c>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d1f0      	bne.n	80034cc <HAL_RCC_OscConfig+0x10c>
 80034ea:	e000      	b.n	80034ee <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	f000 808a 	beq.w	8003610 <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034fc:	4b57      	ldr	r3, [pc, #348]	; (800365c <HAL_RCC_OscConfig+0x29c>)
 80034fe:	691b      	ldr	r3, [r3, #16]
 8003500:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003504:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003506:	4b55      	ldr	r3, [pc, #340]	; (800365c <HAL_RCC_OscConfig+0x29c>)
 8003508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800350a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800350c:	6a3b      	ldr	r3, [r7, #32]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d007      	beq.n	8003522 <HAL_RCC_OscConfig+0x162>
 8003512:	6a3b      	ldr	r3, [r7, #32]
 8003514:	2b18      	cmp	r3, #24
 8003516:	d137      	bne.n	8003588 <HAL_RCC_OscConfig+0x1c8>
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	f003 0303 	and.w	r3, r3, #3
 800351e:	2b00      	cmp	r3, #0
 8003520:	d132      	bne.n	8003588 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003522:	4b4e      	ldr	r3, [pc, #312]	; (800365c <HAL_RCC_OscConfig+0x29c>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0304 	and.w	r3, r3, #4
 800352a:	2b00      	cmp	r3, #0
 800352c:	d005      	beq.n	800353a <HAL_RCC_OscConfig+0x17a>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d101      	bne.n	800353a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e2e3      	b.n	8003b02 <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800353a:	4b48      	ldr	r3, [pc, #288]	; (800365c <HAL_RCC_OscConfig+0x29c>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f023 0219 	bic.w	r2, r3, #25
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	4945      	ldr	r1, [pc, #276]	; (800365c <HAL_RCC_OscConfig+0x29c>)
 8003548:	4313      	orrs	r3, r2
 800354a:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800354c:	f7fd f936 	bl	80007bc <HAL_GetTick>
 8003550:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003552:	e008      	b.n	8003566 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003554:	f7fd f932 	bl	80007bc <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b02      	cmp	r3, #2
 8003560:	d901      	bls.n	8003566 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e2cd      	b.n	8003b02 <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003566:	4b3d      	ldr	r3, [pc, #244]	; (800365c <HAL_RCC_OscConfig+0x29c>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0304 	and.w	r3, r3, #4
 800356e:	2b00      	cmp	r3, #0
 8003570:	d0f0      	beq.n	8003554 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003572:	4b3a      	ldr	r3, [pc, #232]	; (800365c <HAL_RCC_OscConfig+0x29c>)
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	691b      	ldr	r3, [r3, #16]
 800357e:	061b      	lsls	r3, r3, #24
 8003580:	4936      	ldr	r1, [pc, #216]	; (800365c <HAL_RCC_OscConfig+0x29c>)
 8003582:	4313      	orrs	r3, r2
 8003584:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003586:	e043      	b.n	8003610 <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d026      	beq.n	80035de <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003590:	4b32      	ldr	r3, [pc, #200]	; (800365c <HAL_RCC_OscConfig+0x29c>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f023 0219 	bic.w	r2, r3, #25
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	492f      	ldr	r1, [pc, #188]	; (800365c <HAL_RCC_OscConfig+0x29c>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a2:	f7fd f90b 	bl	80007bc <HAL_GetTick>
 80035a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80035a8:	e008      	b.n	80035bc <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035aa:	f7fd f907 	bl	80007bc <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d901      	bls.n	80035bc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80035b8:	2303      	movs	r3, #3
 80035ba:	e2a2      	b.n	8003b02 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80035bc:	4b27      	ldr	r3, [pc, #156]	; (800365c <HAL_RCC_OscConfig+0x29c>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0304 	and.w	r3, r3, #4
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d0f0      	beq.n	80035aa <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035c8:	4b24      	ldr	r3, [pc, #144]	; (800365c <HAL_RCC_OscConfig+0x29c>)
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	691b      	ldr	r3, [r3, #16]
 80035d4:	061b      	lsls	r3, r3, #24
 80035d6:	4921      	ldr	r1, [pc, #132]	; (800365c <HAL_RCC_OscConfig+0x29c>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	604b      	str	r3, [r1, #4]
 80035dc:	e018      	b.n	8003610 <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035de:	4b1f      	ldr	r3, [pc, #124]	; (800365c <HAL_RCC_OscConfig+0x29c>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a1e      	ldr	r2, [pc, #120]	; (800365c <HAL_RCC_OscConfig+0x29c>)
 80035e4:	f023 0301 	bic.w	r3, r3, #1
 80035e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ea:	f7fd f8e7 	bl	80007bc <HAL_GetTick>
 80035ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80035f0:	e008      	b.n	8003604 <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035f2:	f7fd f8e3 	bl	80007bc <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d901      	bls.n	8003604 <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e27e      	b.n	8003b02 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003604:	4b15      	ldr	r3, [pc, #84]	; (800365c <HAL_RCC_OscConfig+0x29c>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0304 	and.w	r3, r3, #4
 800360c:	2b00      	cmp	r3, #0
 800360e:	d1f0      	bne.n	80035f2 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0310 	and.w	r3, r3, #16
 8003618:	2b00      	cmp	r3, #0
 800361a:	d06d      	beq.n	80036f8 <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800361c:	4b0f      	ldr	r3, [pc, #60]	; (800365c <HAL_RCC_OscConfig+0x29c>)
 800361e:	691b      	ldr	r3, [r3, #16]
 8003620:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003624:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003626:	4b0d      	ldr	r3, [pc, #52]	; (800365c <HAL_RCC_OscConfig+0x29c>)
 8003628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800362a:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	2b08      	cmp	r3, #8
 8003630:	d007      	beq.n	8003642 <HAL_RCC_OscConfig+0x282>
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	2b18      	cmp	r3, #24
 8003636:	d11e      	bne.n	8003676 <HAL_RCC_OscConfig+0x2b6>
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	f003 0303 	and.w	r3, r3, #3
 800363e:	2b01      	cmp	r3, #1
 8003640:	d119      	bne.n	8003676 <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003642:	4b06      	ldr	r3, [pc, #24]	; (800365c <HAL_RCC_OscConfig+0x29c>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800364a:	2b00      	cmp	r3, #0
 800364c:	d008      	beq.n	8003660 <HAL_RCC_OscConfig+0x2a0>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	69db      	ldr	r3, [r3, #28]
 8003652:	2b80      	cmp	r3, #128	; 0x80
 8003654:	d004      	beq.n	8003660 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e253      	b.n	8003b02 <HAL_RCC_OscConfig+0x742>
 800365a:	bf00      	nop
 800365c:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003660:	4ba3      	ldr	r3, [pc, #652]	; (80038f0 <HAL_RCC_OscConfig+0x530>)
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6a1b      	ldr	r3, [r3, #32]
 800366c:	061b      	lsls	r3, r3, #24
 800366e:	49a0      	ldr	r1, [pc, #640]	; (80038f0 <HAL_RCC_OscConfig+0x530>)
 8003670:	4313      	orrs	r3, r2
 8003672:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003674:	e040      	b.n	80036f8 <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	69db      	ldr	r3, [r3, #28]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d023      	beq.n	80036c6 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800367e:	4b9c      	ldr	r3, [pc, #624]	; (80038f0 <HAL_RCC_OscConfig+0x530>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a9b      	ldr	r2, [pc, #620]	; (80038f0 <HAL_RCC_OscConfig+0x530>)
 8003684:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003688:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800368a:	f7fd f897 	bl	80007bc <HAL_GetTick>
 800368e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003690:	e008      	b.n	80036a4 <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003692:	f7fd f893 	bl	80007bc <HAL_GetTick>
 8003696:	4602      	mov	r2, r0
 8003698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	2b02      	cmp	r3, #2
 800369e:	d901      	bls.n	80036a4 <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 80036a0:	2303      	movs	r3, #3
 80036a2:	e22e      	b.n	8003b02 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80036a4:	4b92      	ldr	r3, [pc, #584]	; (80038f0 <HAL_RCC_OscConfig+0x530>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d0f0      	beq.n	8003692 <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80036b0:	4b8f      	ldr	r3, [pc, #572]	; (80038f0 <HAL_RCC_OscConfig+0x530>)
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a1b      	ldr	r3, [r3, #32]
 80036bc:	061b      	lsls	r3, r3, #24
 80036be:	498c      	ldr	r1, [pc, #560]	; (80038f0 <HAL_RCC_OscConfig+0x530>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	60cb      	str	r3, [r1, #12]
 80036c4:	e018      	b.n	80036f8 <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80036c6:	4b8a      	ldr	r3, [pc, #552]	; (80038f0 <HAL_RCC_OscConfig+0x530>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a89      	ldr	r2, [pc, #548]	; (80038f0 <HAL_RCC_OscConfig+0x530>)
 80036cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d2:	f7fd f873 	bl	80007bc <HAL_GetTick>
 80036d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80036d8:	e008      	b.n	80036ec <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80036da:	f7fd f86f 	bl	80007bc <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d901      	bls.n	80036ec <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e20a      	b.n	8003b02 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80036ec:	4b80      	ldr	r3, [pc, #512]	; (80038f0 <HAL_RCC_OscConfig+0x530>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d1f0      	bne.n	80036da <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0308 	and.w	r3, r3, #8
 8003700:	2b00      	cmp	r3, #0
 8003702:	d036      	beq.n	8003772 <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	695b      	ldr	r3, [r3, #20]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d019      	beq.n	8003740 <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800370c:	4b78      	ldr	r3, [pc, #480]	; (80038f0 <HAL_RCC_OscConfig+0x530>)
 800370e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003710:	4a77      	ldr	r2, [pc, #476]	; (80038f0 <HAL_RCC_OscConfig+0x530>)
 8003712:	f043 0301 	orr.w	r3, r3, #1
 8003716:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003718:	f7fd f850 	bl	80007bc <HAL_GetTick>
 800371c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800371e:	e008      	b.n	8003732 <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003720:	f7fd f84c 	bl	80007bc <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	2b02      	cmp	r3, #2
 800372c:	d901      	bls.n	8003732 <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e1e7      	b.n	8003b02 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003732:	4b6f      	ldr	r3, [pc, #444]	; (80038f0 <HAL_RCC_OscConfig+0x530>)
 8003734:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	2b00      	cmp	r3, #0
 800373c:	d0f0      	beq.n	8003720 <HAL_RCC_OscConfig+0x360>
 800373e:	e018      	b.n	8003772 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003740:	4b6b      	ldr	r3, [pc, #428]	; (80038f0 <HAL_RCC_OscConfig+0x530>)
 8003742:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003744:	4a6a      	ldr	r2, [pc, #424]	; (80038f0 <HAL_RCC_OscConfig+0x530>)
 8003746:	f023 0301 	bic.w	r3, r3, #1
 800374a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800374c:	f7fd f836 	bl	80007bc <HAL_GetTick>
 8003750:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003752:	e008      	b.n	8003766 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003754:	f7fd f832 	bl	80007bc <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	2b02      	cmp	r3, #2
 8003760:	d901      	bls.n	8003766 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e1cd      	b.n	8003b02 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003766:	4b62      	ldr	r3, [pc, #392]	; (80038f0 <HAL_RCC_OscConfig+0x530>)
 8003768:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800376a:	f003 0302 	and.w	r3, r3, #2
 800376e:	2b00      	cmp	r3, #0
 8003770:	d1f0      	bne.n	8003754 <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0320 	and.w	r3, r3, #32
 800377a:	2b00      	cmp	r3, #0
 800377c:	d036      	beq.n	80037ec <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	699b      	ldr	r3, [r3, #24]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d019      	beq.n	80037ba <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003786:	4b5a      	ldr	r3, [pc, #360]	; (80038f0 <HAL_RCC_OscConfig+0x530>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a59      	ldr	r2, [pc, #356]	; (80038f0 <HAL_RCC_OscConfig+0x530>)
 800378c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003790:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003792:	f7fd f813 	bl	80007bc <HAL_GetTick>
 8003796:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003798:	e008      	b.n	80037ac <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800379a:	f7fd f80f 	bl	80007bc <HAL_GetTick>
 800379e:	4602      	mov	r2, r0
 80037a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d901      	bls.n	80037ac <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	e1aa      	b.n	8003b02 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80037ac:	4b50      	ldr	r3, [pc, #320]	; (80038f0 <HAL_RCC_OscConfig+0x530>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d0f0      	beq.n	800379a <HAL_RCC_OscConfig+0x3da>
 80037b8:	e018      	b.n	80037ec <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80037ba:	4b4d      	ldr	r3, [pc, #308]	; (80038f0 <HAL_RCC_OscConfig+0x530>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a4c      	ldr	r2, [pc, #304]	; (80038f0 <HAL_RCC_OscConfig+0x530>)
 80037c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80037c4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80037c6:	f7fc fff9 	bl	80007bc <HAL_GetTick>
 80037ca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80037cc:	e008      	b.n	80037e0 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80037ce:	f7fc fff5 	bl	80007bc <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d901      	bls.n	80037e0 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e190      	b.n	8003b02 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80037e0:	4b43      	ldr	r3, [pc, #268]	; (80038f0 <HAL_RCC_OscConfig+0x530>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d1f0      	bne.n	80037ce <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0304 	and.w	r3, r3, #4
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	f000 8085 	beq.w	8003904 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80037fa:	4b3e      	ldr	r3, [pc, #248]	; (80038f4 <HAL_RCC_OscConfig+0x534>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a3d      	ldr	r2, [pc, #244]	; (80038f4 <HAL_RCC_OscConfig+0x534>)
 8003800:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003804:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003806:	f7fc ffd9 	bl	80007bc <HAL_GetTick>
 800380a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800380c:	e008      	b.n	8003820 <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800380e:	f7fc ffd5 	bl	80007bc <HAL_GetTick>
 8003812:	4602      	mov	r2, r0
 8003814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	2b64      	cmp	r3, #100	; 0x64
 800381a:	d901      	bls.n	8003820 <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	e170      	b.n	8003b02 <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003820:	4b34      	ldr	r3, [pc, #208]	; (80038f4 <HAL_RCC_OscConfig+0x534>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003828:	2b00      	cmp	r3, #0
 800382a:	d0f0      	beq.n	800380e <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	2b01      	cmp	r3, #1
 8003832:	d106      	bne.n	8003842 <HAL_RCC_OscConfig+0x482>
 8003834:	4b2e      	ldr	r3, [pc, #184]	; (80038f0 <HAL_RCC_OscConfig+0x530>)
 8003836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003838:	4a2d      	ldr	r2, [pc, #180]	; (80038f0 <HAL_RCC_OscConfig+0x530>)
 800383a:	f043 0301 	orr.w	r3, r3, #1
 800383e:	6713      	str	r3, [r2, #112]	; 0x70
 8003840:	e02d      	b.n	800389e <HAL_RCC_OscConfig+0x4de>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d10c      	bne.n	8003864 <HAL_RCC_OscConfig+0x4a4>
 800384a:	4b29      	ldr	r3, [pc, #164]	; (80038f0 <HAL_RCC_OscConfig+0x530>)
 800384c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800384e:	4a28      	ldr	r2, [pc, #160]	; (80038f0 <HAL_RCC_OscConfig+0x530>)
 8003850:	f023 0301 	bic.w	r3, r3, #1
 8003854:	6713      	str	r3, [r2, #112]	; 0x70
 8003856:	4b26      	ldr	r3, [pc, #152]	; (80038f0 <HAL_RCC_OscConfig+0x530>)
 8003858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800385a:	4a25      	ldr	r2, [pc, #148]	; (80038f0 <HAL_RCC_OscConfig+0x530>)
 800385c:	f023 0304 	bic.w	r3, r3, #4
 8003860:	6713      	str	r3, [r2, #112]	; 0x70
 8003862:	e01c      	b.n	800389e <HAL_RCC_OscConfig+0x4de>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	2b05      	cmp	r3, #5
 800386a:	d10c      	bne.n	8003886 <HAL_RCC_OscConfig+0x4c6>
 800386c:	4b20      	ldr	r3, [pc, #128]	; (80038f0 <HAL_RCC_OscConfig+0x530>)
 800386e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003870:	4a1f      	ldr	r2, [pc, #124]	; (80038f0 <HAL_RCC_OscConfig+0x530>)
 8003872:	f043 0304 	orr.w	r3, r3, #4
 8003876:	6713      	str	r3, [r2, #112]	; 0x70
 8003878:	4b1d      	ldr	r3, [pc, #116]	; (80038f0 <HAL_RCC_OscConfig+0x530>)
 800387a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800387c:	4a1c      	ldr	r2, [pc, #112]	; (80038f0 <HAL_RCC_OscConfig+0x530>)
 800387e:	f043 0301 	orr.w	r3, r3, #1
 8003882:	6713      	str	r3, [r2, #112]	; 0x70
 8003884:	e00b      	b.n	800389e <HAL_RCC_OscConfig+0x4de>
 8003886:	4b1a      	ldr	r3, [pc, #104]	; (80038f0 <HAL_RCC_OscConfig+0x530>)
 8003888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800388a:	4a19      	ldr	r2, [pc, #100]	; (80038f0 <HAL_RCC_OscConfig+0x530>)
 800388c:	f023 0301 	bic.w	r3, r3, #1
 8003890:	6713      	str	r3, [r2, #112]	; 0x70
 8003892:	4b17      	ldr	r3, [pc, #92]	; (80038f0 <HAL_RCC_OscConfig+0x530>)
 8003894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003896:	4a16      	ldr	r2, [pc, #88]	; (80038f0 <HAL_RCC_OscConfig+0x530>)
 8003898:	f023 0304 	bic.w	r3, r3, #4
 800389c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d015      	beq.n	80038d2 <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038a6:	f7fc ff89 	bl	80007bc <HAL_GetTick>
 80038aa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80038ac:	e00a      	b.n	80038c4 <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038ae:	f7fc ff85 	bl	80007bc <HAL_GetTick>
 80038b2:	4602      	mov	r2, r0
 80038b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80038bc:	4293      	cmp	r3, r2
 80038be:	d901      	bls.n	80038c4 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	e11e      	b.n	8003b02 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80038c4:	4b0a      	ldr	r3, [pc, #40]	; (80038f0 <HAL_RCC_OscConfig+0x530>)
 80038c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038c8:	f003 0302 	and.w	r3, r3, #2
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d0ee      	beq.n	80038ae <HAL_RCC_OscConfig+0x4ee>
 80038d0:	e018      	b.n	8003904 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038d2:	f7fc ff73 	bl	80007bc <HAL_GetTick>
 80038d6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80038d8:	e00e      	b.n	80038f8 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038da:	f7fc ff6f 	bl	80007bc <HAL_GetTick>
 80038de:	4602      	mov	r2, r0
 80038e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d905      	bls.n	80038f8 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e108      	b.n	8003b02 <HAL_RCC_OscConfig+0x742>
 80038f0:	58024400 	.word	0x58024400
 80038f4:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80038f8:	4b84      	ldr	r3, [pc, #528]	; (8003b0c <HAL_RCC_OscConfig+0x74c>)
 80038fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038fc:	f003 0302 	and.w	r3, r3, #2
 8003900:	2b00      	cmp	r3, #0
 8003902:	d1ea      	bne.n	80038da <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003908:	2b00      	cmp	r3, #0
 800390a:	f000 80f9 	beq.w	8003b00 <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800390e:	4b7f      	ldr	r3, [pc, #508]	; (8003b0c <HAL_RCC_OscConfig+0x74c>)
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003916:	2b18      	cmp	r3, #24
 8003918:	f000 80b4 	beq.w	8003a84 <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003920:	2b02      	cmp	r3, #2
 8003922:	f040 8095 	bne.w	8003a50 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003926:	4b79      	ldr	r3, [pc, #484]	; (8003b0c <HAL_RCC_OscConfig+0x74c>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a78      	ldr	r2, [pc, #480]	; (8003b0c <HAL_RCC_OscConfig+0x74c>)
 800392c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003930:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003932:	f7fc ff43 	bl	80007bc <HAL_GetTick>
 8003936:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003938:	e008      	b.n	800394c <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800393a:	f7fc ff3f 	bl	80007bc <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	2b02      	cmp	r3, #2
 8003946:	d901      	bls.n	800394c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	e0da      	b.n	8003b02 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800394c:	4b6f      	ldr	r3, [pc, #444]	; (8003b0c <HAL_RCC_OscConfig+0x74c>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d1f0      	bne.n	800393a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003958:	4b6c      	ldr	r3, [pc, #432]	; (8003b0c <HAL_RCC_OscConfig+0x74c>)
 800395a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800395c:	4b6c      	ldr	r3, [pc, #432]	; (8003b10 <HAL_RCC_OscConfig+0x750>)
 800395e:	4013      	ands	r3, r2
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003968:	0112      	lsls	r2, r2, #4
 800396a:	430a      	orrs	r2, r1
 800396c:	4967      	ldr	r1, [pc, #412]	; (8003b0c <HAL_RCC_OscConfig+0x74c>)
 800396e:	4313      	orrs	r3, r2
 8003970:	628b      	str	r3, [r1, #40]	; 0x28
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003976:	3b01      	subs	r3, #1
 8003978:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003980:	3b01      	subs	r3, #1
 8003982:	025b      	lsls	r3, r3, #9
 8003984:	b29b      	uxth	r3, r3
 8003986:	431a      	orrs	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800398c:	3b01      	subs	r3, #1
 800398e:	041b      	lsls	r3, r3, #16
 8003990:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003994:	431a      	orrs	r2, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800399a:	3b01      	subs	r3, #1
 800399c:	061b      	lsls	r3, r3, #24
 800399e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80039a2:	495a      	ldr	r1, [pc, #360]	; (8003b0c <HAL_RCC_OscConfig+0x74c>)
 80039a4:	4313      	orrs	r3, r2
 80039a6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80039a8:	4b58      	ldr	r3, [pc, #352]	; (8003b0c <HAL_RCC_OscConfig+0x74c>)
 80039aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ac:	4a57      	ldr	r2, [pc, #348]	; (8003b0c <HAL_RCC_OscConfig+0x74c>)
 80039ae:	f023 0301 	bic.w	r3, r3, #1
 80039b2:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80039b4:	4b55      	ldr	r3, [pc, #340]	; (8003b0c <HAL_RCC_OscConfig+0x74c>)
 80039b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039b8:	4b56      	ldr	r3, [pc, #344]	; (8003b14 <HAL_RCC_OscConfig+0x754>)
 80039ba:	4013      	ands	r3, r2
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80039c0:	00d2      	lsls	r2, r2, #3
 80039c2:	4952      	ldr	r1, [pc, #328]	; (8003b0c <HAL_RCC_OscConfig+0x74c>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80039c8:	4b50      	ldr	r3, [pc, #320]	; (8003b0c <HAL_RCC_OscConfig+0x74c>)
 80039ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039cc:	f023 020c 	bic.w	r2, r3, #12
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d4:	494d      	ldr	r1, [pc, #308]	; (8003b0c <HAL_RCC_OscConfig+0x74c>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80039da:	4b4c      	ldr	r3, [pc, #304]	; (8003b0c <HAL_RCC_OscConfig+0x74c>)
 80039dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039de:	f023 0202 	bic.w	r2, r3, #2
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e6:	4949      	ldr	r1, [pc, #292]	; (8003b0c <HAL_RCC_OscConfig+0x74c>)
 80039e8:	4313      	orrs	r3, r2
 80039ea:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80039ec:	4b47      	ldr	r3, [pc, #284]	; (8003b0c <HAL_RCC_OscConfig+0x74c>)
 80039ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f0:	4a46      	ldr	r2, [pc, #280]	; (8003b0c <HAL_RCC_OscConfig+0x74c>)
 80039f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039f8:	4b44      	ldr	r3, [pc, #272]	; (8003b0c <HAL_RCC_OscConfig+0x74c>)
 80039fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fc:	4a43      	ldr	r2, [pc, #268]	; (8003b0c <HAL_RCC_OscConfig+0x74c>)
 80039fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003a04:	4b41      	ldr	r3, [pc, #260]	; (8003b0c <HAL_RCC_OscConfig+0x74c>)
 8003a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a08:	4a40      	ldr	r2, [pc, #256]	; (8003b0c <HAL_RCC_OscConfig+0x74c>)
 8003a0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a0e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003a10:	4b3e      	ldr	r3, [pc, #248]	; (8003b0c <HAL_RCC_OscConfig+0x74c>)
 8003a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a14:	4a3d      	ldr	r2, [pc, #244]	; (8003b0c <HAL_RCC_OscConfig+0x74c>)
 8003a16:	f043 0301 	orr.w	r3, r3, #1
 8003a1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a1c:	4b3b      	ldr	r3, [pc, #236]	; (8003b0c <HAL_RCC_OscConfig+0x74c>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a3a      	ldr	r2, [pc, #232]	; (8003b0c <HAL_RCC_OscConfig+0x74c>)
 8003a22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a28:	f7fc fec8 	bl	80007bc <HAL_GetTick>
 8003a2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003a2e:	e008      	b.n	8003a42 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a30:	f7fc fec4 	bl	80007bc <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d901      	bls.n	8003a42 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e05f      	b.n	8003b02 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003a42:	4b32      	ldr	r3, [pc, #200]	; (8003b0c <HAL_RCC_OscConfig+0x74c>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d0f0      	beq.n	8003a30 <HAL_RCC_OscConfig+0x670>
 8003a4e:	e057      	b.n	8003b00 <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a50:	4b2e      	ldr	r3, [pc, #184]	; (8003b0c <HAL_RCC_OscConfig+0x74c>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a2d      	ldr	r2, [pc, #180]	; (8003b0c <HAL_RCC_OscConfig+0x74c>)
 8003a56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a5c:	f7fc feae 	bl	80007bc <HAL_GetTick>
 8003a60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003a62:	e008      	b.n	8003a76 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a64:	f7fc feaa 	bl	80007bc <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d901      	bls.n	8003a76 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e045      	b.n	8003b02 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003a76:	4b25      	ldr	r3, [pc, #148]	; (8003b0c <HAL_RCC_OscConfig+0x74c>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d1f0      	bne.n	8003a64 <HAL_RCC_OscConfig+0x6a4>
 8003a82:	e03d      	b.n	8003b00 <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003a84:	4b21      	ldr	r3, [pc, #132]	; (8003b0c <HAL_RCC_OscConfig+0x74c>)
 8003a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a88:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003a8a:	4b20      	ldr	r3, [pc, #128]	; (8003b0c <HAL_RCC_OscConfig+0x74c>)
 8003a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d031      	beq.n	8003afc <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	f003 0203 	and.w	r2, r3, #3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d12a      	bne.n	8003afc <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	091b      	lsrs	r3, r3, #4
 8003aaa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d122      	bne.n	8003afc <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d11a      	bne.n	8003afc <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	0a5b      	lsrs	r3, r3, #9
 8003aca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ad2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d111      	bne.n	8003afc <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	0c1b      	lsrs	r3, r3, #16
 8003adc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d108      	bne.n	8003afc <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	0e1b      	lsrs	r3, r3, #24
 8003aee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003af6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d001      	beq.n	8003b00 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e000      	b.n	8003b02 <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3730      	adds	r7, #48	; 0x30
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	58024400 	.word	0x58024400
 8003b10:	fffffc0c 	.word	0xfffffc0c
 8003b14:	ffff0007 	.word	0xffff0007

08003b18 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b086      	sub	sp, #24
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d101      	bne.n	8003b2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e19c      	b.n	8003e66 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b2c:	4b8a      	ldr	r3, [pc, #552]	; (8003d58 <HAL_RCC_ClockConfig+0x240>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 030f 	and.w	r3, r3, #15
 8003b34:	683a      	ldr	r2, [r7, #0]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d910      	bls.n	8003b5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b3a:	4b87      	ldr	r3, [pc, #540]	; (8003d58 <HAL_RCC_ClockConfig+0x240>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f023 020f 	bic.w	r2, r3, #15
 8003b42:	4985      	ldr	r1, [pc, #532]	; (8003d58 <HAL_RCC_ClockConfig+0x240>)
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b4a:	4b83      	ldr	r3, [pc, #524]	; (8003d58 <HAL_RCC_ClockConfig+0x240>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 030f 	and.w	r3, r3, #15
 8003b52:	683a      	ldr	r2, [r7, #0]
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d001      	beq.n	8003b5c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e184      	b.n	8003e66 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0304 	and.w	r3, r3, #4
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d010      	beq.n	8003b8a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	691a      	ldr	r2, [r3, #16]
 8003b6c:	4b7b      	ldr	r3, [pc, #492]	; (8003d5c <HAL_RCC_ClockConfig+0x244>)
 8003b6e:	699b      	ldr	r3, [r3, #24]
 8003b70:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d908      	bls.n	8003b8a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003b78:	4b78      	ldr	r3, [pc, #480]	; (8003d5c <HAL_RCC_ClockConfig+0x244>)
 8003b7a:	699b      	ldr	r3, [r3, #24]
 8003b7c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	691b      	ldr	r3, [r3, #16]
 8003b84:	4975      	ldr	r1, [pc, #468]	; (8003d5c <HAL_RCC_ClockConfig+0x244>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0308 	and.w	r3, r3, #8
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d010      	beq.n	8003bb8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	695a      	ldr	r2, [r3, #20]
 8003b9a:	4b70      	ldr	r3, [pc, #448]	; (8003d5c <HAL_RCC_ClockConfig+0x244>)
 8003b9c:	69db      	ldr	r3, [r3, #28]
 8003b9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d908      	bls.n	8003bb8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003ba6:	4b6d      	ldr	r3, [pc, #436]	; (8003d5c <HAL_RCC_ClockConfig+0x244>)
 8003ba8:	69db      	ldr	r3, [r3, #28]
 8003baa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	695b      	ldr	r3, [r3, #20]
 8003bb2:	496a      	ldr	r1, [pc, #424]	; (8003d5c <HAL_RCC_ClockConfig+0x244>)
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0310 	and.w	r3, r3, #16
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d010      	beq.n	8003be6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	699a      	ldr	r2, [r3, #24]
 8003bc8:	4b64      	ldr	r3, [pc, #400]	; (8003d5c <HAL_RCC_ClockConfig+0x244>)
 8003bca:	69db      	ldr	r3, [r3, #28]
 8003bcc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d908      	bls.n	8003be6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003bd4:	4b61      	ldr	r3, [pc, #388]	; (8003d5c <HAL_RCC_ClockConfig+0x244>)
 8003bd6:	69db      	ldr	r3, [r3, #28]
 8003bd8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	699b      	ldr	r3, [r3, #24]
 8003be0:	495e      	ldr	r1, [pc, #376]	; (8003d5c <HAL_RCC_ClockConfig+0x244>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0320 	and.w	r3, r3, #32
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d010      	beq.n	8003c14 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	69da      	ldr	r2, [r3, #28]
 8003bf6:	4b59      	ldr	r3, [pc, #356]	; (8003d5c <HAL_RCC_ClockConfig+0x244>)
 8003bf8:	6a1b      	ldr	r3, [r3, #32]
 8003bfa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d908      	bls.n	8003c14 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003c02:	4b56      	ldr	r3, [pc, #344]	; (8003d5c <HAL_RCC_ClockConfig+0x244>)
 8003c04:	6a1b      	ldr	r3, [r3, #32]
 8003c06:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	69db      	ldr	r3, [r3, #28]
 8003c0e:	4953      	ldr	r1, [pc, #332]	; (8003d5c <HAL_RCC_ClockConfig+0x244>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0302 	and.w	r3, r3, #2
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d010      	beq.n	8003c42 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	68da      	ldr	r2, [r3, #12]
 8003c24:	4b4d      	ldr	r3, [pc, #308]	; (8003d5c <HAL_RCC_ClockConfig+0x244>)
 8003c26:	699b      	ldr	r3, [r3, #24]
 8003c28:	f003 030f 	and.w	r3, r3, #15
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d908      	bls.n	8003c42 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c30:	4b4a      	ldr	r3, [pc, #296]	; (8003d5c <HAL_RCC_ClockConfig+0x244>)
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	f023 020f 	bic.w	r2, r3, #15
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	4947      	ldr	r1, [pc, #284]	; (8003d5c <HAL_RCC_ClockConfig+0x244>)
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0301 	and.w	r3, r3, #1
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d055      	beq.n	8003cfa <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003c4e:	4b43      	ldr	r3, [pc, #268]	; (8003d5c <HAL_RCC_ClockConfig+0x244>)
 8003c50:	699b      	ldr	r3, [r3, #24]
 8003c52:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	4940      	ldr	r1, [pc, #256]	; (8003d5c <HAL_RCC_ClockConfig+0x244>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d107      	bne.n	8003c78 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003c68:	4b3c      	ldr	r3, [pc, #240]	; (8003d5c <HAL_RCC_ClockConfig+0x244>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d121      	bne.n	8003cb8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e0f6      	b.n	8003e66 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	2b03      	cmp	r3, #3
 8003c7e:	d107      	bne.n	8003c90 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003c80:	4b36      	ldr	r3, [pc, #216]	; (8003d5c <HAL_RCC_ClockConfig+0x244>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d115      	bne.n	8003cb8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e0ea      	b.n	8003e66 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d107      	bne.n	8003ca8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003c98:	4b30      	ldr	r3, [pc, #192]	; (8003d5c <HAL_RCC_ClockConfig+0x244>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d109      	bne.n	8003cb8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e0de      	b.n	8003e66 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ca8:	4b2c      	ldr	r3, [pc, #176]	; (8003d5c <HAL_RCC_ClockConfig+0x244>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0304 	and.w	r3, r3, #4
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d101      	bne.n	8003cb8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e0d6      	b.n	8003e66 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003cb8:	4b28      	ldr	r3, [pc, #160]	; (8003d5c <HAL_RCC_ClockConfig+0x244>)
 8003cba:	691b      	ldr	r3, [r3, #16]
 8003cbc:	f023 0207 	bic.w	r2, r3, #7
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	4925      	ldr	r1, [pc, #148]	; (8003d5c <HAL_RCC_ClockConfig+0x244>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cca:	f7fc fd77 	bl	80007bc <HAL_GetTick>
 8003cce:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cd0:	e00a      	b.n	8003ce8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cd2:	f7fc fd73 	bl	80007bc <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d901      	bls.n	8003ce8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003ce4:	2303      	movs	r3, #3
 8003ce6:	e0be      	b.n	8003e66 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ce8:	4b1c      	ldr	r3, [pc, #112]	; (8003d5c <HAL_RCC_ClockConfig+0x244>)
 8003cea:	691b      	ldr	r3, [r3, #16]
 8003cec:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	00db      	lsls	r3, r3, #3
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d1eb      	bne.n	8003cd2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0302 	and.w	r3, r3, #2
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d010      	beq.n	8003d28 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	68da      	ldr	r2, [r3, #12]
 8003d0a:	4b14      	ldr	r3, [pc, #80]	; (8003d5c <HAL_RCC_ClockConfig+0x244>)
 8003d0c:	699b      	ldr	r3, [r3, #24]
 8003d0e:	f003 030f 	and.w	r3, r3, #15
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d208      	bcs.n	8003d28 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d16:	4b11      	ldr	r3, [pc, #68]	; (8003d5c <HAL_RCC_ClockConfig+0x244>)
 8003d18:	699b      	ldr	r3, [r3, #24]
 8003d1a:	f023 020f 	bic.w	r2, r3, #15
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	490e      	ldr	r1, [pc, #56]	; (8003d5c <HAL_RCC_ClockConfig+0x244>)
 8003d24:	4313      	orrs	r3, r2
 8003d26:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d28:	4b0b      	ldr	r3, [pc, #44]	; (8003d58 <HAL_RCC_ClockConfig+0x240>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 030f 	and.w	r3, r3, #15
 8003d30:	683a      	ldr	r2, [r7, #0]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d214      	bcs.n	8003d60 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d36:	4b08      	ldr	r3, [pc, #32]	; (8003d58 <HAL_RCC_ClockConfig+0x240>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f023 020f 	bic.w	r2, r3, #15
 8003d3e:	4906      	ldr	r1, [pc, #24]	; (8003d58 <HAL_RCC_ClockConfig+0x240>)
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d46:	4b04      	ldr	r3, [pc, #16]	; (8003d58 <HAL_RCC_ClockConfig+0x240>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 030f 	and.w	r3, r3, #15
 8003d4e:	683a      	ldr	r2, [r7, #0]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d005      	beq.n	8003d60 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e086      	b.n	8003e66 <HAL_RCC_ClockConfig+0x34e>
 8003d58:	52002000 	.word	0x52002000
 8003d5c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0304 	and.w	r3, r3, #4
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d010      	beq.n	8003d8e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	691a      	ldr	r2, [r3, #16]
 8003d70:	4b3f      	ldr	r3, [pc, #252]	; (8003e70 <HAL_RCC_ClockConfig+0x358>)
 8003d72:	699b      	ldr	r3, [r3, #24]
 8003d74:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d208      	bcs.n	8003d8e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003d7c:	4b3c      	ldr	r3, [pc, #240]	; (8003e70 <HAL_RCC_ClockConfig+0x358>)
 8003d7e:	699b      	ldr	r3, [r3, #24]
 8003d80:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	691b      	ldr	r3, [r3, #16]
 8003d88:	4939      	ldr	r1, [pc, #228]	; (8003e70 <HAL_RCC_ClockConfig+0x358>)
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0308 	and.w	r3, r3, #8
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d010      	beq.n	8003dbc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	695a      	ldr	r2, [r3, #20]
 8003d9e:	4b34      	ldr	r3, [pc, #208]	; (8003e70 <HAL_RCC_ClockConfig+0x358>)
 8003da0:	69db      	ldr	r3, [r3, #28]
 8003da2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d208      	bcs.n	8003dbc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003daa:	4b31      	ldr	r3, [pc, #196]	; (8003e70 <HAL_RCC_ClockConfig+0x358>)
 8003dac:	69db      	ldr	r3, [r3, #28]
 8003dae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	695b      	ldr	r3, [r3, #20]
 8003db6:	492e      	ldr	r1, [pc, #184]	; (8003e70 <HAL_RCC_ClockConfig+0x358>)
 8003db8:	4313      	orrs	r3, r2
 8003dba:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0310 	and.w	r3, r3, #16
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d010      	beq.n	8003dea <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	699a      	ldr	r2, [r3, #24]
 8003dcc:	4b28      	ldr	r3, [pc, #160]	; (8003e70 <HAL_RCC_ClockConfig+0x358>)
 8003dce:	69db      	ldr	r3, [r3, #28]
 8003dd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d208      	bcs.n	8003dea <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003dd8:	4b25      	ldr	r3, [pc, #148]	; (8003e70 <HAL_RCC_ClockConfig+0x358>)
 8003dda:	69db      	ldr	r3, [r3, #28]
 8003ddc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	699b      	ldr	r3, [r3, #24]
 8003de4:	4922      	ldr	r1, [pc, #136]	; (8003e70 <HAL_RCC_ClockConfig+0x358>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0320 	and.w	r3, r3, #32
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d010      	beq.n	8003e18 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	69da      	ldr	r2, [r3, #28]
 8003dfa:	4b1d      	ldr	r3, [pc, #116]	; (8003e70 <HAL_RCC_ClockConfig+0x358>)
 8003dfc:	6a1b      	ldr	r3, [r3, #32]
 8003dfe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d208      	bcs.n	8003e18 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003e06:	4b1a      	ldr	r3, [pc, #104]	; (8003e70 <HAL_RCC_ClockConfig+0x358>)
 8003e08:	6a1b      	ldr	r3, [r3, #32]
 8003e0a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	69db      	ldr	r3, [r3, #28]
 8003e12:	4917      	ldr	r1, [pc, #92]	; (8003e70 <HAL_RCC_ClockConfig+0x358>)
 8003e14:	4313      	orrs	r3, r2
 8003e16:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003e18:	f000 f834 	bl	8003e84 <HAL_RCC_GetSysClockFreq>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	4b14      	ldr	r3, [pc, #80]	; (8003e70 <HAL_RCC_ClockConfig+0x358>)
 8003e20:	699b      	ldr	r3, [r3, #24]
 8003e22:	0a1b      	lsrs	r3, r3, #8
 8003e24:	f003 030f 	and.w	r3, r3, #15
 8003e28:	4912      	ldr	r1, [pc, #72]	; (8003e74 <HAL_RCC_ClockConfig+0x35c>)
 8003e2a:	5ccb      	ldrb	r3, [r1, r3]
 8003e2c:	f003 031f 	and.w	r3, r3, #31
 8003e30:	fa22 f303 	lsr.w	r3, r2, r3
 8003e34:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003e36:	4b0e      	ldr	r3, [pc, #56]	; (8003e70 <HAL_RCC_ClockConfig+0x358>)
 8003e38:	699b      	ldr	r3, [r3, #24]
 8003e3a:	f003 030f 	and.w	r3, r3, #15
 8003e3e:	4a0d      	ldr	r2, [pc, #52]	; (8003e74 <HAL_RCC_ClockConfig+0x35c>)
 8003e40:	5cd3      	ldrb	r3, [r2, r3]
 8003e42:	f003 031f 	and.w	r3, r3, #31
 8003e46:	693a      	ldr	r2, [r7, #16]
 8003e48:	fa22 f303 	lsr.w	r3, r2, r3
 8003e4c:	4a0a      	ldr	r2, [pc, #40]	; (8003e78 <HAL_RCC_ClockConfig+0x360>)
 8003e4e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003e50:	4a0a      	ldr	r2, [pc, #40]	; (8003e7c <HAL_RCC_ClockConfig+0x364>)
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003e56:	4b0a      	ldr	r3, [pc, #40]	; (8003e80 <HAL_RCC_ClockConfig+0x368>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7fc fc64 	bl	8000728 <HAL_InitTick>
 8003e60:	4603      	mov	r3, r0
 8003e62:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3718      	adds	r7, #24
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	58024400 	.word	0x58024400
 8003e74:	0800b0e0 	.word	0x0800b0e0
 8003e78:	2400040c 	.word	0x2400040c
 8003e7c:	24000408 	.word	0x24000408
 8003e80:	24000400 	.word	0x24000400

08003e84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b089      	sub	sp, #36	; 0x24
 8003e88:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e8a:	4bb3      	ldr	r3, [pc, #716]	; (8004158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e92:	2b18      	cmp	r3, #24
 8003e94:	f200 8155 	bhi.w	8004142 <HAL_RCC_GetSysClockFreq+0x2be>
 8003e98:	a201      	add	r2, pc, #4	; (adr r2, 8003ea0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e9e:	bf00      	nop
 8003ea0:	08003f05 	.word	0x08003f05
 8003ea4:	08004143 	.word	0x08004143
 8003ea8:	08004143 	.word	0x08004143
 8003eac:	08004143 	.word	0x08004143
 8003eb0:	08004143 	.word	0x08004143
 8003eb4:	08004143 	.word	0x08004143
 8003eb8:	08004143 	.word	0x08004143
 8003ebc:	08004143 	.word	0x08004143
 8003ec0:	08003f2b 	.word	0x08003f2b
 8003ec4:	08004143 	.word	0x08004143
 8003ec8:	08004143 	.word	0x08004143
 8003ecc:	08004143 	.word	0x08004143
 8003ed0:	08004143 	.word	0x08004143
 8003ed4:	08004143 	.word	0x08004143
 8003ed8:	08004143 	.word	0x08004143
 8003edc:	08004143 	.word	0x08004143
 8003ee0:	08003f31 	.word	0x08003f31
 8003ee4:	08004143 	.word	0x08004143
 8003ee8:	08004143 	.word	0x08004143
 8003eec:	08004143 	.word	0x08004143
 8003ef0:	08004143 	.word	0x08004143
 8003ef4:	08004143 	.word	0x08004143
 8003ef8:	08004143 	.word	0x08004143
 8003efc:	08004143 	.word	0x08004143
 8003f00:	08003f37 	.word	0x08003f37
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f04:	4b94      	ldr	r3, [pc, #592]	; (8004158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0320 	and.w	r3, r3, #32
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d009      	beq.n	8003f24 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003f10:	4b91      	ldr	r3, [pc, #580]	; (8004158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	08db      	lsrs	r3, r3, #3
 8003f16:	f003 0303 	and.w	r3, r3, #3
 8003f1a:	4a90      	ldr	r2, [pc, #576]	; (800415c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003f1c:	fa22 f303 	lsr.w	r3, r2, r3
 8003f20:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003f22:	e111      	b.n	8004148 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003f24:	4b8d      	ldr	r3, [pc, #564]	; (800415c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003f26:	61bb      	str	r3, [r7, #24]
    break;
 8003f28:	e10e      	b.n	8004148 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003f2a:	4b8d      	ldr	r3, [pc, #564]	; (8004160 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003f2c:	61bb      	str	r3, [r7, #24]
    break;
 8003f2e:	e10b      	b.n	8004148 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003f30:	4b8c      	ldr	r3, [pc, #560]	; (8004164 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003f32:	61bb      	str	r3, [r7, #24]
    break;
 8003f34:	e108      	b.n	8004148 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003f36:	4b88      	ldr	r3, [pc, #544]	; (8004158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f3a:	f003 0303 	and.w	r3, r3, #3
 8003f3e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003f40:	4b85      	ldr	r3, [pc, #532]	; (8004158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f44:	091b      	lsrs	r3, r3, #4
 8003f46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f4a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003f4c:	4b82      	ldr	r3, [pc, #520]	; (8004158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f50:	f003 0301 	and.w	r3, r3, #1
 8003f54:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003f56:	4b80      	ldr	r3, [pc, #512]	; (8004158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f5a:	08db      	lsrs	r3, r3, #3
 8003f5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003f60:	68fa      	ldr	r2, [r7, #12]
 8003f62:	fb02 f303 	mul.w	r3, r2, r3
 8003f66:	ee07 3a90 	vmov	s15, r3
 8003f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f6e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	f000 80e1 	beq.w	800413c <HAL_RCC_GetSysClockFreq+0x2b8>
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	f000 8083 	beq.w	8004088 <HAL_RCC_GetSysClockFreq+0x204>
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	f200 80a1 	bhi.w	80040cc <HAL_RCC_GetSysClockFreq+0x248>
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d003      	beq.n	8003f98 <HAL_RCC_GetSysClockFreq+0x114>
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d056      	beq.n	8004044 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003f96:	e099      	b.n	80040cc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f98:	4b6f      	ldr	r3, [pc, #444]	; (8004158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0320 	and.w	r3, r3, #32
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d02d      	beq.n	8004000 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003fa4:	4b6c      	ldr	r3, [pc, #432]	; (8004158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	08db      	lsrs	r3, r3, #3
 8003faa:	f003 0303 	and.w	r3, r3, #3
 8003fae:	4a6b      	ldr	r2, [pc, #428]	; (800415c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003fb0:	fa22 f303 	lsr.w	r3, r2, r3
 8003fb4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	ee07 3a90 	vmov	s15, r3
 8003fbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	ee07 3a90 	vmov	s15, r3
 8003fc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fce:	4b62      	ldr	r3, [pc, #392]	; (8004158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fd6:	ee07 3a90 	vmov	s15, r3
 8003fda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fde:	ed97 6a02 	vldr	s12, [r7, #8]
 8003fe2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004168 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003fe6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ff2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ff6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ffa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003ffe:	e087      	b.n	8004110 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	ee07 3a90 	vmov	s15, r3
 8004006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800400a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800416c <HAL_RCC_GetSysClockFreq+0x2e8>
 800400e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004012:	4b51      	ldr	r3, [pc, #324]	; (8004158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004016:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800401a:	ee07 3a90 	vmov	s15, r3
 800401e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004022:	ed97 6a02 	vldr	s12, [r7, #8]
 8004026:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004168 <HAL_RCC_GetSysClockFreq+0x2e4>
 800402a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800402e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004032:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004036:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800403a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800403e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004042:	e065      	b.n	8004110 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	ee07 3a90 	vmov	s15, r3
 800404a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800404e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004170 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004052:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004056:	4b40      	ldr	r3, [pc, #256]	; (8004158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800405a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800405e:	ee07 3a90 	vmov	s15, r3
 8004062:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004066:	ed97 6a02 	vldr	s12, [r7, #8]
 800406a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004168 <HAL_RCC_GetSysClockFreq+0x2e4>
 800406e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004072:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004076:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800407a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800407e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004082:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004086:	e043      	b.n	8004110 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	ee07 3a90 	vmov	s15, r3
 800408e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004092:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004174 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004096:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800409a:	4b2f      	ldr	r3, [pc, #188]	; (8004158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800409c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040a2:	ee07 3a90 	vmov	s15, r3
 80040a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80040ae:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004168 <HAL_RCC_GetSysClockFreq+0x2e4>
 80040b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80040ca:	e021      	b.n	8004110 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	ee07 3a90 	vmov	s15, r3
 80040d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040d6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004170 <HAL_RCC_GetSysClockFreq+0x2ec>
 80040da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040de:	4b1e      	ldr	r3, [pc, #120]	; (8004158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040e6:	ee07 3a90 	vmov	s15, r3
 80040ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80040f2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004168 <HAL_RCC_GetSysClockFreq+0x2e4>
 80040f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004102:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800410a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800410e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004110:	4b11      	ldr	r3, [pc, #68]	; (8004158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004114:	0a5b      	lsrs	r3, r3, #9
 8004116:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800411a:	3301      	adds	r3, #1
 800411c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	ee07 3a90 	vmov	s15, r3
 8004124:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004128:	edd7 6a07 	vldr	s13, [r7, #28]
 800412c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004130:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004134:	ee17 3a90 	vmov	r3, s15
 8004138:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800413a:	e005      	b.n	8004148 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800413c:	2300      	movs	r3, #0
 800413e:	61bb      	str	r3, [r7, #24]
    break;
 8004140:	e002      	b.n	8004148 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8004142:	4b07      	ldr	r3, [pc, #28]	; (8004160 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004144:	61bb      	str	r3, [r7, #24]
    break;
 8004146:	bf00      	nop
  }

  return sysclockfreq;
 8004148:	69bb      	ldr	r3, [r7, #24]
}
 800414a:	4618      	mov	r0, r3
 800414c:	3724      	adds	r7, #36	; 0x24
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr
 8004156:	bf00      	nop
 8004158:	58024400 	.word	0x58024400
 800415c:	03d09000 	.word	0x03d09000
 8004160:	003d0900 	.word	0x003d0900
 8004164:	017d7840 	.word	0x017d7840
 8004168:	46000000 	.word	0x46000000
 800416c:	4c742400 	.word	0x4c742400
 8004170:	4a742400 	.word	0x4a742400
 8004174:	4bbebc20 	.word	0x4bbebc20

08004178 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800417e:	f7ff fe81 	bl	8003e84 <HAL_RCC_GetSysClockFreq>
 8004182:	4602      	mov	r2, r0
 8004184:	4b10      	ldr	r3, [pc, #64]	; (80041c8 <HAL_RCC_GetHCLKFreq+0x50>)
 8004186:	699b      	ldr	r3, [r3, #24]
 8004188:	0a1b      	lsrs	r3, r3, #8
 800418a:	f003 030f 	and.w	r3, r3, #15
 800418e:	490f      	ldr	r1, [pc, #60]	; (80041cc <HAL_RCC_GetHCLKFreq+0x54>)
 8004190:	5ccb      	ldrb	r3, [r1, r3]
 8004192:	f003 031f 	and.w	r3, r3, #31
 8004196:	fa22 f303 	lsr.w	r3, r2, r3
 800419a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800419c:	4b0a      	ldr	r3, [pc, #40]	; (80041c8 <HAL_RCC_GetHCLKFreq+0x50>)
 800419e:	699b      	ldr	r3, [r3, #24]
 80041a0:	f003 030f 	and.w	r3, r3, #15
 80041a4:	4a09      	ldr	r2, [pc, #36]	; (80041cc <HAL_RCC_GetHCLKFreq+0x54>)
 80041a6:	5cd3      	ldrb	r3, [r2, r3]
 80041a8:	f003 031f 	and.w	r3, r3, #31
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	fa22 f303 	lsr.w	r3, r2, r3
 80041b2:	4a07      	ldr	r2, [pc, #28]	; (80041d0 <HAL_RCC_GetHCLKFreq+0x58>)
 80041b4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80041b6:	4a07      	ldr	r2, [pc, #28]	; (80041d4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80041bc:	4b04      	ldr	r3, [pc, #16]	; (80041d0 <HAL_RCC_GetHCLKFreq+0x58>)
 80041be:	681b      	ldr	r3, [r3, #0]
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3708      	adds	r7, #8
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	58024400 	.word	0x58024400
 80041cc:	0800b0e0 	.word	0x0800b0e0
 80041d0:	2400040c 	.word	0x2400040c
 80041d4:	24000408 	.word	0x24000408

080041d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80041dc:	f7ff ffcc 	bl	8004178 <HAL_RCC_GetHCLKFreq>
 80041e0:	4602      	mov	r2, r0
 80041e2:	4b06      	ldr	r3, [pc, #24]	; (80041fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80041e4:	69db      	ldr	r3, [r3, #28]
 80041e6:	091b      	lsrs	r3, r3, #4
 80041e8:	f003 0307 	and.w	r3, r3, #7
 80041ec:	4904      	ldr	r1, [pc, #16]	; (8004200 <HAL_RCC_GetPCLK1Freq+0x28>)
 80041ee:	5ccb      	ldrb	r3, [r1, r3]
 80041f0:	f003 031f 	and.w	r3, r3, #31
 80041f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	58024400 	.word	0x58024400
 8004200:	0800b0e0 	.word	0x0800b0e0

08004204 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004208:	f7ff ffb6 	bl	8004178 <HAL_RCC_GetHCLKFreq>
 800420c:	4602      	mov	r2, r0
 800420e:	4b06      	ldr	r3, [pc, #24]	; (8004228 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004210:	69db      	ldr	r3, [r3, #28]
 8004212:	0a1b      	lsrs	r3, r3, #8
 8004214:	f003 0307 	and.w	r3, r3, #7
 8004218:	4904      	ldr	r1, [pc, #16]	; (800422c <HAL_RCC_GetPCLK2Freq+0x28>)
 800421a:	5ccb      	ldrb	r3, [r1, r3]
 800421c:	f003 031f 	and.w	r3, r3, #31
 8004220:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004224:	4618      	mov	r0, r3
 8004226:	bd80      	pop	{r7, pc}
 8004228:	58024400 	.word	0x58024400
 800422c:	0800b0e0 	.word	0x0800b0e0

08004230 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b086      	sub	sp, #24
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004238:	2300      	movs	r3, #0
 800423a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800423c:	2300      	movs	r3, #0
 800423e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d03f      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004250:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004254:	d02a      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004256:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800425a:	d824      	bhi.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800425c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004260:	d018      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004262:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004266:	d81e      	bhi.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004268:	2b00      	cmp	r3, #0
 800426a:	d003      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800426c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004270:	d007      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004272:	e018      	b.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004274:	4bab      	ldr	r3, [pc, #684]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004278:	4aaa      	ldr	r2, [pc, #680]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800427a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800427e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004280:	e015      	b.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	3304      	adds	r3, #4
 8004286:	2102      	movs	r1, #2
 8004288:	4618      	mov	r0, r3
 800428a:	f001 feff 	bl	800608c <RCCEx_PLL2_Config>
 800428e:	4603      	mov	r3, r0
 8004290:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004292:	e00c      	b.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	3324      	adds	r3, #36	; 0x24
 8004298:	2102      	movs	r1, #2
 800429a:	4618      	mov	r0, r3
 800429c:	f001 ffa8 	bl	80061f0 <RCCEx_PLL3_Config>
 80042a0:	4603      	mov	r3, r0
 80042a2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80042a4:	e003      	b.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	75fb      	strb	r3, [r7, #23]
      break;
 80042aa:	e000      	b.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80042ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042ae:	7dfb      	ldrb	r3, [r7, #23]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d109      	bne.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80042b4:	4b9b      	ldr	r3, [pc, #620]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80042b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042c0:	4998      	ldr	r1, [pc, #608]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80042c2:	4313      	orrs	r3, r2
 80042c4:	650b      	str	r3, [r1, #80]	; 0x50
 80042c6:	e001      	b.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042c8:	7dfb      	ldrb	r3, [r7, #23]
 80042ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d03d      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042dc:	2b04      	cmp	r3, #4
 80042de:	d826      	bhi.n	800432e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80042e0:	a201      	add	r2, pc, #4	; (adr r2, 80042e8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80042e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042e6:	bf00      	nop
 80042e8:	080042fd 	.word	0x080042fd
 80042ec:	0800430b 	.word	0x0800430b
 80042f0:	0800431d 	.word	0x0800431d
 80042f4:	08004335 	.word	0x08004335
 80042f8:	08004335 	.word	0x08004335
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042fc:	4b89      	ldr	r3, [pc, #548]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80042fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004300:	4a88      	ldr	r2, [pc, #544]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004302:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004306:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004308:	e015      	b.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	3304      	adds	r3, #4
 800430e:	2100      	movs	r1, #0
 8004310:	4618      	mov	r0, r3
 8004312:	f001 febb 	bl	800608c <RCCEx_PLL2_Config>
 8004316:	4603      	mov	r3, r0
 8004318:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800431a:	e00c      	b.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	3324      	adds	r3, #36	; 0x24
 8004320:	2100      	movs	r1, #0
 8004322:	4618      	mov	r0, r3
 8004324:	f001 ff64 	bl	80061f0 <RCCEx_PLL3_Config>
 8004328:	4603      	mov	r3, r0
 800432a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800432c:	e003      	b.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	75fb      	strb	r3, [r7, #23]
      break;
 8004332:	e000      	b.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004334:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004336:	7dfb      	ldrb	r3, [r7, #23]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d109      	bne.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800433c:	4b79      	ldr	r3, [pc, #484]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800433e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004340:	f023 0207 	bic.w	r2, r3, #7
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004348:	4976      	ldr	r1, [pc, #472]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800434a:	4313      	orrs	r3, r2
 800434c:	650b      	str	r3, [r1, #80]	; 0x50
 800434e:	e001      	b.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004350:	7dfb      	ldrb	r3, [r7, #23]
 8004352:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800435c:	2b00      	cmp	r3, #0
 800435e:	d051      	beq.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004366:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800436a:	d036      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800436c:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8004370:	d830      	bhi.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8004372:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004376:	d032      	beq.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8004378:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800437c:	d82a      	bhi.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800437e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004382:	d02e      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8004384:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004388:	d824      	bhi.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800438a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800438e:	d018      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8004390:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004394:	d81e      	bhi.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8004396:	2b00      	cmp	r3, #0
 8004398:	d003      	beq.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x172>
 800439a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800439e:	d007      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80043a0:	e018      	b.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043a2:	4b60      	ldr	r3, [pc, #384]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80043a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a6:	4a5f      	ldr	r2, [pc, #380]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80043a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043ac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80043ae:	e019      	b.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	3304      	adds	r3, #4
 80043b4:	2100      	movs	r1, #0
 80043b6:	4618      	mov	r0, r3
 80043b8:	f001 fe68 	bl	800608c <RCCEx_PLL2_Config>
 80043bc:	4603      	mov	r3, r0
 80043be:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80043c0:	e010      	b.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	3324      	adds	r3, #36	; 0x24
 80043c6:	2100      	movs	r1, #0
 80043c8:	4618      	mov	r0, r3
 80043ca:	f001 ff11 	bl	80061f0 <RCCEx_PLL3_Config>
 80043ce:	4603      	mov	r3, r0
 80043d0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80043d2:	e007      	b.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	75fb      	strb	r3, [r7, #23]
      break;
 80043d8:	e004      	b.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80043da:	bf00      	nop
 80043dc:	e002      	b.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80043de:	bf00      	nop
 80043e0:	e000      	b.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80043e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043e4:	7dfb      	ldrb	r3, [r7, #23]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d10a      	bne.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80043ea:	4b4e      	ldr	r3, [pc, #312]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80043ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ee:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80043f8:	494a      	ldr	r1, [pc, #296]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	658b      	str	r3, [r1, #88]	; 0x58
 80043fe:	e001      	b.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004400:	7dfb      	ldrb	r3, [r7, #23]
 8004402:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800440c:	2b00      	cmp	r3, #0
 800440e:	d051      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004416:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800441a:	d036      	beq.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800441c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004420:	d830      	bhi.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8004422:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004426:	d032      	beq.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8004428:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800442c:	d82a      	bhi.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800442e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004432:	d02e      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8004434:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004438:	d824      	bhi.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800443a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800443e:	d018      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8004440:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004444:	d81e      	bhi.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8004446:	2b00      	cmp	r3, #0
 8004448:	d003      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x222>
 800444a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800444e:	d007      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8004450:	e018      	b.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004452:	4b34      	ldr	r3, [pc, #208]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004456:	4a33      	ldr	r2, [pc, #204]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004458:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800445c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800445e:	e019      	b.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	3304      	adds	r3, #4
 8004464:	2100      	movs	r1, #0
 8004466:	4618      	mov	r0, r3
 8004468:	f001 fe10 	bl	800608c <RCCEx_PLL2_Config>
 800446c:	4603      	mov	r3, r0
 800446e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004470:	e010      	b.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	3324      	adds	r3, #36	; 0x24
 8004476:	2100      	movs	r1, #0
 8004478:	4618      	mov	r0, r3
 800447a:	f001 feb9 	bl	80061f0 <RCCEx_PLL3_Config>
 800447e:	4603      	mov	r3, r0
 8004480:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004482:	e007      	b.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	75fb      	strb	r3, [r7, #23]
      break;
 8004488:	e004      	b.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800448a:	bf00      	nop
 800448c:	e002      	b.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800448e:	bf00      	nop
 8004490:	e000      	b.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8004492:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004494:	7dfb      	ldrb	r3, [r7, #23]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d10a      	bne.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800449a:	4b22      	ldr	r3, [pc, #136]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800449c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800449e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80044a8:	491e      	ldr	r1, [pc, #120]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	658b      	str	r3, [r1, #88]	; 0x58
 80044ae:	e001      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044b0:	7dfb      	ldrb	r3, [r7, #23]
 80044b2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d035      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044c4:	2b30      	cmp	r3, #48	; 0x30
 80044c6:	d01c      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80044c8:	2b30      	cmp	r3, #48	; 0x30
 80044ca:	d817      	bhi.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80044cc:	2b20      	cmp	r3, #32
 80044ce:	d00c      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80044d0:	2b20      	cmp	r3, #32
 80044d2:	d813      	bhi.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d016      	beq.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 80044d8:	2b10      	cmp	r3, #16
 80044da:	d10f      	bne.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044dc:	4b11      	ldr	r3, [pc, #68]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80044de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e0:	4a10      	ldr	r2, [pc, #64]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80044e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80044e8:	e00e      	b.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	3304      	adds	r3, #4
 80044ee:	2102      	movs	r1, #2
 80044f0:	4618      	mov	r0, r3
 80044f2:	f001 fdcb 	bl	800608c <RCCEx_PLL2_Config>
 80044f6:	4603      	mov	r3, r0
 80044f8:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80044fa:	e005      	b.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	75fb      	strb	r3, [r7, #23]
      break;
 8004500:	e002      	b.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8004502:	bf00      	nop
 8004504:	e000      	b.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8004506:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004508:	7dfb      	ldrb	r3, [r7, #23]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d10c      	bne.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800450e:	4b05      	ldr	r3, [pc, #20]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004512:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800451a:	4902      	ldr	r1, [pc, #8]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800451c:	4313      	orrs	r3, r2
 800451e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004520:	e004      	b.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8004522:	bf00      	nop
 8004524:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004528:	7dfb      	ldrb	r3, [r7, #23]
 800452a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004534:	2b00      	cmp	r3, #0
 8004536:	d047      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800453c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004540:	d030      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8004542:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004546:	d82a      	bhi.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8004548:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800454c:	d02c      	beq.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x378>
 800454e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004552:	d824      	bhi.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8004554:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004558:	d018      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800455a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800455e:	d81e      	bhi.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8004560:	2b00      	cmp	r3, #0
 8004562:	d003      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004564:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004568:	d007      	beq.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800456a:	e018      	b.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800456c:	4bac      	ldr	r3, [pc, #688]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800456e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004570:	4aab      	ldr	r2, [pc, #684]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004572:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004576:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004578:	e017      	b.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	3304      	adds	r3, #4
 800457e:	2100      	movs	r1, #0
 8004580:	4618      	mov	r0, r3
 8004582:	f001 fd83 	bl	800608c <RCCEx_PLL2_Config>
 8004586:	4603      	mov	r3, r0
 8004588:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800458a:	e00e      	b.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	3324      	adds	r3, #36	; 0x24
 8004590:	2100      	movs	r1, #0
 8004592:	4618      	mov	r0, r3
 8004594:	f001 fe2c 	bl	80061f0 <RCCEx_PLL3_Config>
 8004598:	4603      	mov	r3, r0
 800459a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800459c:	e005      	b.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	75fb      	strb	r3, [r7, #23]
      break;
 80045a2:	e002      	b.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80045a4:	bf00      	nop
 80045a6:	e000      	b.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80045a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045aa:	7dfb      	ldrb	r3, [r7, #23]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d109      	bne.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80045b0:	4b9b      	ldr	r3, [pc, #620]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80045b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045b4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045bc:	4998      	ldr	r1, [pc, #608]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80045be:	4313      	orrs	r3, r2
 80045c0:	650b      	str	r3, [r1, #80]	; 0x50
 80045c2:	e001      	b.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045c4:	7dfb      	ldrb	r3, [r7, #23]
 80045c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d049      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045dc:	d02e      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x40c>
 80045de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045e2:	d828      	bhi.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x406>
 80045e4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80045e8:	d02a      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80045ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80045ee:	d822      	bhi.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x406>
 80045f0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80045f4:	d026      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80045f6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80045fa:	d81c      	bhi.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x406>
 80045fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004600:	d010      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8004602:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004606:	d816      	bhi.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8004608:	2b00      	cmp	r3, #0
 800460a:	d01d      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800460c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004610:	d111      	bne.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	3304      	adds	r3, #4
 8004616:	2101      	movs	r1, #1
 8004618:	4618      	mov	r0, r3
 800461a:	f001 fd37 	bl	800608c <RCCEx_PLL2_Config>
 800461e:	4603      	mov	r3, r0
 8004620:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004622:	e012      	b.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	3324      	adds	r3, #36	; 0x24
 8004628:	2101      	movs	r1, #1
 800462a:	4618      	mov	r0, r3
 800462c:	f001 fde0 	bl	80061f0 <RCCEx_PLL3_Config>
 8004630:	4603      	mov	r3, r0
 8004632:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004634:	e009      	b.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	75fb      	strb	r3, [r7, #23]
      break;
 800463a:	e006      	b.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800463c:	bf00      	nop
 800463e:	e004      	b.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8004640:	bf00      	nop
 8004642:	e002      	b.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8004644:	bf00      	nop
 8004646:	e000      	b.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8004648:	bf00      	nop
    }

    if(ret == HAL_OK)
 800464a:	7dfb      	ldrb	r3, [r7, #23]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d109      	bne.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004650:	4b73      	ldr	r3, [pc, #460]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004652:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004654:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800465c:	4970      	ldr	r1, [pc, #448]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800465e:	4313      	orrs	r3, r2
 8004660:	650b      	str	r3, [r1, #80]	; 0x50
 8004662:	e001      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004664:	7dfb      	ldrb	r3, [r7, #23]
 8004666:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004670:	2b00      	cmp	r3, #0
 8004672:	d04b      	beq.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800467a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800467e:	d02e      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8004680:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004684:	d828      	bhi.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004686:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800468a:	d02a      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800468c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004690:	d822      	bhi.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004692:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004696:	d026      	beq.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8004698:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800469c:	d81c      	bhi.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800469e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046a2:	d010      	beq.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x496>
 80046a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046a8:	d816      	bhi.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d01d      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80046ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046b2:	d111      	bne.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	3304      	adds	r3, #4
 80046b8:	2101      	movs	r1, #1
 80046ba:	4618      	mov	r0, r3
 80046bc:	f001 fce6 	bl	800608c <RCCEx_PLL2_Config>
 80046c0:	4603      	mov	r3, r0
 80046c2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80046c4:	e012      	b.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	3324      	adds	r3, #36	; 0x24
 80046ca:	2101      	movs	r1, #1
 80046cc:	4618      	mov	r0, r3
 80046ce:	f001 fd8f 	bl	80061f0 <RCCEx_PLL3_Config>
 80046d2:	4603      	mov	r3, r0
 80046d4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80046d6:	e009      	b.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	75fb      	strb	r3, [r7, #23]
      break;
 80046dc:	e006      	b.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80046de:	bf00      	nop
 80046e0:	e004      	b.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80046e2:	bf00      	nop
 80046e4:	e002      	b.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80046e6:	bf00      	nop
 80046e8:	e000      	b.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80046ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046ec:	7dfb      	ldrb	r3, [r7, #23]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d10a      	bne.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80046f2:	4b4b      	ldr	r3, [pc, #300]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80046f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046f6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004700:	4947      	ldr	r1, [pc, #284]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004702:	4313      	orrs	r3, r2
 8004704:	658b      	str	r3, [r1, #88]	; 0x58
 8004706:	e001      	b.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004708:	7dfb      	ldrb	r3, [r7, #23]
 800470a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d02f      	beq.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800471c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004720:	d00e      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8004722:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004726:	d814      	bhi.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8004728:	2b00      	cmp	r3, #0
 800472a:	d015      	beq.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800472c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004730:	d10f      	bne.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004732:	4b3b      	ldr	r3, [pc, #236]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004736:	4a3a      	ldr	r2, [pc, #232]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004738:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800473c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800473e:	e00c      	b.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	3304      	adds	r3, #4
 8004744:	2101      	movs	r1, #1
 8004746:	4618      	mov	r0, r3
 8004748:	f001 fca0 	bl	800608c <RCCEx_PLL2_Config>
 800474c:	4603      	mov	r3, r0
 800474e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004750:	e003      	b.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	75fb      	strb	r3, [r7, #23]
      break;
 8004756:	e000      	b.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8004758:	bf00      	nop
    }

    if(ret == HAL_OK)
 800475a:	7dfb      	ldrb	r3, [r7, #23]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d109      	bne.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004760:	4b2f      	ldr	r3, [pc, #188]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004762:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004764:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800476c:	492c      	ldr	r1, [pc, #176]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800476e:	4313      	orrs	r3, r2
 8004770:	650b      	str	r3, [r1, #80]	; 0x50
 8004772:	e001      	b.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004774:	7dfb      	ldrb	r3, [r7, #23]
 8004776:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004780:	2b00      	cmp	r3, #0
 8004782:	d032      	beq.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004788:	2b03      	cmp	r3, #3
 800478a:	d81b      	bhi.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800478c:	a201      	add	r2, pc, #4	; (adr r2, 8004794 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800478e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004792:	bf00      	nop
 8004794:	080047cb 	.word	0x080047cb
 8004798:	080047a5 	.word	0x080047a5
 800479c:	080047b3 	.word	0x080047b3
 80047a0:	080047cb 	.word	0x080047cb
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047a4:	4b1e      	ldr	r3, [pc, #120]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80047a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a8:	4a1d      	ldr	r2, [pc, #116]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80047aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80047b0:	e00c      	b.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	3304      	adds	r3, #4
 80047b6:	2102      	movs	r1, #2
 80047b8:	4618      	mov	r0, r3
 80047ba:	f001 fc67 	bl	800608c <RCCEx_PLL2_Config>
 80047be:	4603      	mov	r3, r0
 80047c0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80047c2:	e003      	b.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	75fb      	strb	r3, [r7, #23]
      break;
 80047c8:	e000      	b.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80047ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047cc:	7dfb      	ldrb	r3, [r7, #23]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d109      	bne.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80047d2:	4b13      	ldr	r3, [pc, #76]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80047d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047d6:	f023 0203 	bic.w	r2, r3, #3
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047de:	4910      	ldr	r1, [pc, #64]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80047e0:	4313      	orrs	r3, r2
 80047e2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80047e4:	e001      	b.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047e6:	7dfb      	ldrb	r3, [r7, #23]
 80047e8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	f000 808a 	beq.w	800490c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047f8:	4b0a      	ldr	r3, [pc, #40]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a09      	ldr	r2, [pc, #36]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80047fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004802:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004804:	f7fb ffda 	bl	80007bc <HAL_GetTick>
 8004808:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800480a:	e00d      	b.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800480c:	f7fb ffd6 	bl	80007bc <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	2b64      	cmp	r3, #100	; 0x64
 8004818:	d906      	bls.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	75fb      	strb	r3, [r7, #23]
        break;
 800481e:	e009      	b.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8004820:	58024400 	.word	0x58024400
 8004824:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004828:	4bb9      	ldr	r3, [pc, #740]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004830:	2b00      	cmp	r3, #0
 8004832:	d0eb      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8004834:	7dfb      	ldrb	r3, [r7, #23]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d166      	bne.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800483a:	4bb6      	ldr	r3, [pc, #728]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800483c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004844:	4053      	eors	r3, r2
 8004846:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800484a:	2b00      	cmp	r3, #0
 800484c:	d013      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800484e:	4bb1      	ldr	r3, [pc, #708]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004852:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004856:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004858:	4bae      	ldr	r3, [pc, #696]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800485a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800485c:	4aad      	ldr	r2, [pc, #692]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800485e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004862:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004864:	4bab      	ldr	r3, [pc, #684]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004868:	4aaa      	ldr	r2, [pc, #680]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800486a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800486e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004870:	4aa8      	ldr	r2, [pc, #672]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800487c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004880:	d115      	bne.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004882:	f7fb ff9b 	bl	80007bc <HAL_GetTick>
 8004886:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004888:	e00b      	b.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800488a:	f7fb ff97 	bl	80007bc <HAL_GetTick>
 800488e:	4602      	mov	r2, r0
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	f241 3288 	movw	r2, #5000	; 0x1388
 8004898:	4293      	cmp	r3, r2
 800489a:	d902      	bls.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 800489c:	2303      	movs	r3, #3
 800489e:	75fb      	strb	r3, [r7, #23]
            break;
 80048a0:	e005      	b.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80048a2:	4b9c      	ldr	r3, [pc, #624]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80048a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048a6:	f003 0302 	and.w	r3, r3, #2
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d0ed      	beq.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 80048ae:	7dfb      	ldrb	r3, [r7, #23]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d126      	bne.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80048ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048c2:	d10d      	bne.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 80048c4:	4b93      	ldr	r3, [pc, #588]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80048c6:	691b      	ldr	r3, [r3, #16]
 80048c8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80048d2:	0919      	lsrs	r1, r3, #4
 80048d4:	4b90      	ldr	r3, [pc, #576]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80048d6:	400b      	ands	r3, r1
 80048d8:	498e      	ldr	r1, [pc, #568]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	610b      	str	r3, [r1, #16]
 80048de:	e005      	b.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 80048e0:	4b8c      	ldr	r3, [pc, #560]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80048e2:	691b      	ldr	r3, [r3, #16]
 80048e4:	4a8b      	ldr	r2, [pc, #556]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80048e6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80048ea:	6113      	str	r3, [r2, #16]
 80048ec:	4b89      	ldr	r3, [pc, #548]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80048ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80048f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048fa:	4986      	ldr	r1, [pc, #536]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	670b      	str	r3, [r1, #112]	; 0x70
 8004900:	e004      	b.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004902:	7dfb      	ldrb	r3, [r7, #23]
 8004904:	75bb      	strb	r3, [r7, #22]
 8004906:	e001      	b.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004908:	7dfb      	ldrb	r3, [r7, #23]
 800490a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 0301 	and.w	r3, r3, #1
 8004914:	2b00      	cmp	r3, #0
 8004916:	d07e      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800491c:	2b28      	cmp	r3, #40	; 0x28
 800491e:	d867      	bhi.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8004920:	a201      	add	r2, pc, #4	; (adr r2, 8004928 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 8004922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004926:	bf00      	nop
 8004928:	080049f7 	.word	0x080049f7
 800492c:	080049f1 	.word	0x080049f1
 8004930:	080049f1 	.word	0x080049f1
 8004934:	080049f1 	.word	0x080049f1
 8004938:	080049f1 	.word	0x080049f1
 800493c:	080049f1 	.word	0x080049f1
 8004940:	080049f1 	.word	0x080049f1
 8004944:	080049f1 	.word	0x080049f1
 8004948:	080049cd 	.word	0x080049cd
 800494c:	080049f1 	.word	0x080049f1
 8004950:	080049f1 	.word	0x080049f1
 8004954:	080049f1 	.word	0x080049f1
 8004958:	080049f1 	.word	0x080049f1
 800495c:	080049f1 	.word	0x080049f1
 8004960:	080049f1 	.word	0x080049f1
 8004964:	080049f1 	.word	0x080049f1
 8004968:	080049df 	.word	0x080049df
 800496c:	080049f1 	.word	0x080049f1
 8004970:	080049f1 	.word	0x080049f1
 8004974:	080049f1 	.word	0x080049f1
 8004978:	080049f1 	.word	0x080049f1
 800497c:	080049f1 	.word	0x080049f1
 8004980:	080049f1 	.word	0x080049f1
 8004984:	080049f1 	.word	0x080049f1
 8004988:	080049f7 	.word	0x080049f7
 800498c:	080049f1 	.word	0x080049f1
 8004990:	080049f1 	.word	0x080049f1
 8004994:	080049f1 	.word	0x080049f1
 8004998:	080049f1 	.word	0x080049f1
 800499c:	080049f1 	.word	0x080049f1
 80049a0:	080049f1 	.word	0x080049f1
 80049a4:	080049f1 	.word	0x080049f1
 80049a8:	080049f7 	.word	0x080049f7
 80049ac:	080049f1 	.word	0x080049f1
 80049b0:	080049f1 	.word	0x080049f1
 80049b4:	080049f1 	.word	0x080049f1
 80049b8:	080049f1 	.word	0x080049f1
 80049bc:	080049f1 	.word	0x080049f1
 80049c0:	080049f1 	.word	0x080049f1
 80049c4:	080049f1 	.word	0x080049f1
 80049c8:	080049f7 	.word	0x080049f7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	3304      	adds	r3, #4
 80049d0:	2101      	movs	r1, #1
 80049d2:	4618      	mov	r0, r3
 80049d4:	f001 fb5a 	bl	800608c <RCCEx_PLL2_Config>
 80049d8:	4603      	mov	r3, r0
 80049da:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80049dc:	e00c      	b.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	3324      	adds	r3, #36	; 0x24
 80049e2:	2101      	movs	r1, #1
 80049e4:	4618      	mov	r0, r3
 80049e6:	f001 fc03 	bl	80061f0 <RCCEx_PLL3_Config>
 80049ea:	4603      	mov	r3, r0
 80049ec:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80049ee:	e003      	b.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	75fb      	strb	r3, [r7, #23]
      break;
 80049f4:	e000      	b.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 80049f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049f8:	7dfb      	ldrb	r3, [r7, #23]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d109      	bne.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80049fe:	4b45      	ldr	r3, [pc, #276]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a02:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a0a:	4942      	ldr	r1, [pc, #264]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	654b      	str	r3, [r1, #84]	; 0x54
 8004a10:	e001      	b.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a12:	7dfb      	ldrb	r3, [r7, #23]
 8004a14:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 0302 	and.w	r3, r3, #2
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d037      	beq.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a26:	2b05      	cmp	r3, #5
 8004a28:	d820      	bhi.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8004a2a:	a201      	add	r2, pc, #4	; (adr r2, 8004a30 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8004a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a30:	08004a73 	.word	0x08004a73
 8004a34:	08004a49 	.word	0x08004a49
 8004a38:	08004a5b 	.word	0x08004a5b
 8004a3c:	08004a73 	.word	0x08004a73
 8004a40:	08004a73 	.word	0x08004a73
 8004a44:	08004a73 	.word	0x08004a73
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	3304      	adds	r3, #4
 8004a4c:	2101      	movs	r1, #1
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f001 fb1c 	bl	800608c <RCCEx_PLL2_Config>
 8004a54:	4603      	mov	r3, r0
 8004a56:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004a58:	e00c      	b.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	3324      	adds	r3, #36	; 0x24
 8004a5e:	2101      	movs	r1, #1
 8004a60:	4618      	mov	r0, r3
 8004a62:	f001 fbc5 	bl	80061f0 <RCCEx_PLL3_Config>
 8004a66:	4603      	mov	r3, r0
 8004a68:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004a6a:	e003      	b.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	75fb      	strb	r3, [r7, #23]
      break;
 8004a70:	e000      	b.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8004a72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a74:	7dfb      	ldrb	r3, [r7, #23]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d109      	bne.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004a7a:	4b26      	ldr	r3, [pc, #152]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a7e:	f023 0207 	bic.w	r2, r3, #7
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a86:	4923      	ldr	r1, [pc, #140]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	654b      	str	r3, [r1, #84]	; 0x54
 8004a8c:	e001      	b.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a8e:	7dfb      	ldrb	r3, [r7, #23]
 8004a90:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0304 	and.w	r3, r3, #4
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d040      	beq.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004aa4:	2b05      	cmp	r3, #5
 8004aa6:	d821      	bhi.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8004aa8:	a201      	add	r2, pc, #4	; (adr r2, 8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8004aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aae:	bf00      	nop
 8004ab0:	08004af3 	.word	0x08004af3
 8004ab4:	08004ac9 	.word	0x08004ac9
 8004ab8:	08004adb 	.word	0x08004adb
 8004abc:	08004af3 	.word	0x08004af3
 8004ac0:	08004af3 	.word	0x08004af3
 8004ac4:	08004af3 	.word	0x08004af3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	3304      	adds	r3, #4
 8004acc:	2101      	movs	r1, #1
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f001 fadc 	bl	800608c <RCCEx_PLL2_Config>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004ad8:	e00c      	b.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	3324      	adds	r3, #36	; 0x24
 8004ade:	2101      	movs	r1, #1
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f001 fb85 	bl	80061f0 <RCCEx_PLL3_Config>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004aea:	e003      	b.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	75fb      	strb	r3, [r7, #23]
      break;
 8004af0:	e000      	b.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8004af2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004af4:	7dfb      	ldrb	r3, [r7, #23]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d110      	bne.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004afa:	4b06      	ldr	r3, [pc, #24]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004afe:	f023 0207 	bic.w	r2, r3, #7
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b08:	4902      	ldr	r1, [pc, #8]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	658b      	str	r3, [r1, #88]	; 0x58
 8004b0e:	e007      	b.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8004b10:	58024800 	.word	0x58024800
 8004b14:	58024400 	.word	0x58024400
 8004b18:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b1c:	7dfb      	ldrb	r3, [r7, #23]
 8004b1e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0320 	and.w	r3, r3, #32
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d04b      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b36:	d02e      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8004b38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b3c:	d828      	bhi.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8004b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b42:	d02a      	beq.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8004b44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b48:	d822      	bhi.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8004b4a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004b4e:	d026      	beq.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8004b50:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004b54:	d81c      	bhi.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8004b56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b5a:	d010      	beq.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8004b5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b60:	d816      	bhi.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d01d      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x972>
 8004b66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b6a:	d111      	bne.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	3304      	adds	r3, #4
 8004b70:	2100      	movs	r1, #0
 8004b72:	4618      	mov	r0, r3
 8004b74:	f001 fa8a 	bl	800608c <RCCEx_PLL2_Config>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004b7c:	e012      	b.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	3324      	adds	r3, #36	; 0x24
 8004b82:	2102      	movs	r1, #2
 8004b84:	4618      	mov	r0, r3
 8004b86:	f001 fb33 	bl	80061f0 <RCCEx_PLL3_Config>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004b8e:	e009      	b.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	75fb      	strb	r3, [r7, #23]
      break;
 8004b94:	e006      	b.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8004b96:	bf00      	nop
 8004b98:	e004      	b.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8004b9a:	bf00      	nop
 8004b9c:	e002      	b.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8004b9e:	bf00      	nop
 8004ba0:	e000      	b.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8004ba2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ba4:	7dfb      	ldrb	r3, [r7, #23]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d10a      	bne.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004baa:	4bb2      	ldr	r3, [pc, #712]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bae:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bb8:	49ae      	ldr	r1, [pc, #696]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	654b      	str	r3, [r1, #84]	; 0x54
 8004bbe:	e001      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bc0:	7dfb      	ldrb	r3, [r7, #23]
 8004bc2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d04b      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bd6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004bda:	d02e      	beq.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8004bdc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004be0:	d828      	bhi.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004be2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004be6:	d02a      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8004be8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bec:	d822      	bhi.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004bee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004bf2:	d026      	beq.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8004bf4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004bf8:	d81c      	bhi.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004bfa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bfe:	d010      	beq.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8004c00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c04:	d816      	bhi.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d01d      	beq.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8004c0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c0e:	d111      	bne.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	3304      	adds	r3, #4
 8004c14:	2100      	movs	r1, #0
 8004c16:	4618      	mov	r0, r3
 8004c18:	f001 fa38 	bl	800608c <RCCEx_PLL2_Config>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004c20:	e012      	b.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	3324      	adds	r3, #36	; 0x24
 8004c26:	2102      	movs	r1, #2
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f001 fae1 	bl	80061f0 <RCCEx_PLL3_Config>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004c32:	e009      	b.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	75fb      	strb	r3, [r7, #23]
      break;
 8004c38:	e006      	b.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004c3a:	bf00      	nop
 8004c3c:	e004      	b.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004c3e:	bf00      	nop
 8004c40:	e002      	b.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004c42:	bf00      	nop
 8004c44:	e000      	b.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004c46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c48:	7dfb      	ldrb	r3, [r7, #23]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d10a      	bne.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004c4e:	4b89      	ldr	r3, [pc, #548]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c52:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c5c:	4985      	ldr	r1, [pc, #532]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	658b      	str	r3, [r1, #88]	; 0x58
 8004c62:	e001      	b.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c64:	7dfb      	ldrb	r3, [r7, #23]
 8004c66:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d04b      	beq.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c7a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004c7e:	d02e      	beq.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8004c80:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004c84:	d828      	bhi.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004c86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c8a:	d02a      	beq.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8004c8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c90:	d822      	bhi.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004c92:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004c96:	d026      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8004c98:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004c9c:	d81c      	bhi.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004c9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ca2:	d010      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8004ca4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ca8:	d816      	bhi.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d01d      	beq.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8004cae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cb2:	d111      	bne.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	3304      	adds	r3, #4
 8004cb8:	2100      	movs	r1, #0
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f001 f9e6 	bl	800608c <RCCEx_PLL2_Config>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004cc4:	e012      	b.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	3324      	adds	r3, #36	; 0x24
 8004cca:	2102      	movs	r1, #2
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f001 fa8f 	bl	80061f0 <RCCEx_PLL3_Config>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004cd6:	e009      	b.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	75fb      	strb	r3, [r7, #23]
      break;
 8004cdc:	e006      	b.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004cde:	bf00      	nop
 8004ce0:	e004      	b.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004ce2:	bf00      	nop
 8004ce4:	e002      	b.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004ce6:	bf00      	nop
 8004ce8:	e000      	b.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004cea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cec:	7dfb      	ldrb	r3, [r7, #23]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d10a      	bne.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004cf2:	4b60      	ldr	r3, [pc, #384]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cf6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d00:	495c      	ldr	r1, [pc, #368]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004d02:	4313      	orrs	r3, r2
 8004d04:	658b      	str	r3, [r1, #88]	; 0x58
 8004d06:	e001      	b.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d08:	7dfb      	ldrb	r3, [r7, #23]
 8004d0a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 0308 	and.w	r3, r3, #8
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d018      	beq.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d20:	d10a      	bne.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	3324      	adds	r3, #36	; 0x24
 8004d26:	2102      	movs	r1, #2
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f001 fa61 	bl	80061f0 <RCCEx_PLL3_Config>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d001      	beq.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8004d38:	4b4e      	ldr	r3, [pc, #312]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d3c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d44:	494b      	ldr	r1, [pc, #300]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004d46:	4313      	orrs	r3, r2
 8004d48:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 0310 	and.w	r3, r3, #16
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d01a      	beq.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d60:	d10a      	bne.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	3324      	adds	r3, #36	; 0x24
 8004d66:	2102      	movs	r1, #2
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f001 fa41 	bl	80061f0 <RCCEx_PLL3_Config>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d001      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004d78:	4b3e      	ldr	r3, [pc, #248]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d86:	493b      	ldr	r1, [pc, #236]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d034      	beq.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004da2:	d01d      	beq.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8004da4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004da8:	d817      	bhi.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d003      	beq.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8004dae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004db2:	d009      	beq.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004db4:	e011      	b.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	3304      	adds	r3, #4
 8004dba:	2100      	movs	r1, #0
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f001 f965 	bl	800608c <RCCEx_PLL2_Config>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004dc6:	e00c      	b.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	3324      	adds	r3, #36	; 0x24
 8004dcc:	2102      	movs	r1, #2
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f001 fa0e 	bl	80061f0 <RCCEx_PLL3_Config>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004dd8:	e003      	b.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	75fb      	strb	r3, [r7, #23]
      break;
 8004dde:	e000      	b.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8004de0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004de2:	7dfb      	ldrb	r3, [r7, #23]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d10a      	bne.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004de8:	4b22      	ldr	r3, [pc, #136]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004df6:	491f      	ldr	r1, [pc, #124]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	658b      	str	r3, [r1, #88]	; 0x58
 8004dfc:	e001      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dfe:	7dfb      	ldrb	r3, [r7, #23]
 8004e00:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d036      	beq.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e14:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004e18:	d01c      	beq.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8004e1a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004e1e:	d816      	bhi.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004e20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e24:	d003      	beq.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8004e26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e2a:	d007      	beq.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8004e2c:	e00f      	b.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e2e:	4b11      	ldr	r3, [pc, #68]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e32:	4a10      	ldr	r2, [pc, #64]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004e34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e38:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004e3a:	e00c      	b.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	3324      	adds	r3, #36	; 0x24
 8004e40:	2101      	movs	r1, #1
 8004e42:	4618      	mov	r0, r3
 8004e44:	f001 f9d4 	bl	80061f0 <RCCEx_PLL3_Config>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004e4c:	e003      	b.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	75fb      	strb	r3, [r7, #23]
      break;
 8004e52:	e000      	b.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8004e54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e56:	7dfb      	ldrb	r3, [r7, #23]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d10d      	bne.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e5c:	4b05      	ldr	r3, [pc, #20]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004e5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e60:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e6a:	4902      	ldr	r1, [pc, #8]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	654b      	str	r3, [r1, #84]	; 0x54
 8004e70:	e004      	b.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 8004e72:	bf00      	nop
 8004e74:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e78:	7dfb      	ldrb	r3, [r7, #23]
 8004e7a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d029      	beq.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d003      	beq.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004e90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e94:	d007      	beq.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8004e96:	e00f      	b.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e98:	4b61      	ldr	r3, [pc, #388]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e9c:	4a60      	ldr	r2, [pc, #384]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004e9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ea2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004ea4:	e00b      	b.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	3304      	adds	r3, #4
 8004eaa:	2102      	movs	r1, #2
 8004eac:	4618      	mov	r0, r3
 8004eae:	f001 f8ed 	bl	800608c <RCCEx_PLL2_Config>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004eb6:	e002      	b.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	75fb      	strb	r3, [r7, #23]
      break;
 8004ebc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ebe:	7dfb      	ldrb	r3, [r7, #23]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d109      	bne.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004ec4:	4b56      	ldr	r3, [pc, #344]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004ec6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ec8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ed0:	4953      	ldr	r1, [pc, #332]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004ed6:	e001      	b.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ed8:	7dfb      	ldrb	r3, [r7, #23]
 8004eda:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d00a      	beq.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	3324      	adds	r3, #36	; 0x24
 8004eec:	2102      	movs	r1, #2
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f001 f97e 	bl	80061f0 <RCCEx_PLL3_Config>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d001      	beq.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d030      	beq.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f12:	d017      	beq.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004f14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f18:	d811      	bhi.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8004f1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f1e:	d013      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8004f20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f24:	d80b      	bhi.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d010      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8004f2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f2e:	d106      	bne.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f30:	4b3b      	ldr	r3, [pc, #236]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f34:	4a3a      	ldr	r2, [pc, #232]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004f36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f3a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004f3c:	e007      	b.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	75fb      	strb	r3, [r7, #23]
      break;
 8004f42:	e004      	b.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004f44:	bf00      	nop
 8004f46:	e002      	b.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004f48:	bf00      	nop
 8004f4a:	e000      	b.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004f4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f4e:	7dfb      	ldrb	r3, [r7, #23]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d109      	bne.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004f54:	4b32      	ldr	r3, [pc, #200]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f60:	492f      	ldr	r1, [pc, #188]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004f62:	4313      	orrs	r3, r2
 8004f64:	654b      	str	r3, [r1, #84]	; 0x54
 8004f66:	e001      	b.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f68:	7dfb      	ldrb	r3, [r7, #23]
 8004f6a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d008      	beq.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004f78:	4b29      	ldr	r3, [pc, #164]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004f7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f7c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f84:	4926      	ldr	r1, [pc, #152]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004f86:	4313      	orrs	r3, r2
 8004f88:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d008      	beq.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004f96:	4b22      	ldr	r3, [pc, #136]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004f98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f9a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fa2:	491f      	ldr	r1, [pc, #124]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d00d      	beq.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004fb4:	4b1a      	ldr	r3, [pc, #104]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004fb6:	691b      	ldr	r3, [r3, #16]
 8004fb8:	4a19      	ldr	r2, [pc, #100]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004fba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004fbe:	6113      	str	r3, [r2, #16]
 8004fc0:	4b17      	ldr	r3, [pc, #92]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004fc2:	691a      	ldr	r2, [r3, #16]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004fca:	4915      	ldr	r1, [pc, #84]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	da08      	bge.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004fd8:	4b11      	ldr	r3, [pc, #68]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004fda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fdc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fe4:	490e      	ldr	r1, [pc, #56]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d009      	beq.n	800500a <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004ff6:	4b0a      	ldr	r3, [pc, #40]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ffa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005004:	4906      	ldr	r1, [pc, #24]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005006:	4313      	orrs	r3, r2
 8005008:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800500a:	7dbb      	ldrb	r3, [r7, #22]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d101      	bne.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8005010:	2300      	movs	r3, #0
 8005012:	e000      	b.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8005014:	2301      	movs	r3, #1
}
 8005016:	4618      	mov	r0, r3
 8005018:	3718      	adds	r7, #24
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	58024400 	.word	0x58024400

08005024 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b090      	sub	sp, #64	; 0x40
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005032:	f040 8089 	bne.w	8005148 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8005036:	4b95      	ldr	r3, [pc, #596]	; (800528c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005038:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800503a:	f003 0307 	and.w	r3, r3, #7
 800503e:	633b      	str	r3, [r7, #48]	; 0x30
 8005040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005042:	2b04      	cmp	r3, #4
 8005044:	d87d      	bhi.n	8005142 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 8005046:	a201      	add	r2, pc, #4	; (adr r2, 800504c <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8005048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800504c:	08005061 	.word	0x08005061
 8005050:	08005085 	.word	0x08005085
 8005054:	080050a9 	.word	0x080050a9
 8005058:	0800513d 	.word	0x0800513d
 800505c:	080050cd 	.word	0x080050cd

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005060:	4b8a      	ldr	r3, [pc, #552]	; (800528c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005068:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800506c:	d107      	bne.n	800507e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800506e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005072:	4618      	mov	r0, r3
 8005074:	f000 feb8 	bl	8005de8 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8005078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800507a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800507c:	e3ed      	b.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800507e:	2300      	movs	r3, #0
 8005080:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005082:	e3ea      	b.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005084:	4b81      	ldr	r3, [pc, #516]	; (800528c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800508c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005090:	d107      	bne.n	80050a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005092:	f107 0318 	add.w	r3, r7, #24
 8005096:	4618      	mov	r0, r3
 8005098:	f000 fbfe 	bl	8005898 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80050a0:	e3db      	b.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80050a2:	2300      	movs	r3, #0
 80050a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80050a6:	e3d8      	b.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80050a8:	4b78      	ldr	r3, [pc, #480]	; (800528c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050b4:	d107      	bne.n	80050c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80050b6:	f107 030c 	add.w	r3, r7, #12
 80050ba:	4618      	mov	r0, r3
 80050bc:	f000 fd40 	bl	8005b40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80050c4:	e3c9      	b.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80050c6:	2300      	movs	r3, #0
 80050c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80050ca:	e3c6      	b.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80050cc:	4b6f      	ldr	r3, [pc, #444]	; (800528c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80050ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80050d4:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80050d6:	4b6d      	ldr	r3, [pc, #436]	; (800528c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 0304 	and.w	r3, r3, #4
 80050de:	2b04      	cmp	r3, #4
 80050e0:	d10c      	bne.n	80050fc <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 80050e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d109      	bne.n	80050fc <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80050e8:	4b68      	ldr	r3, [pc, #416]	; (800528c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	08db      	lsrs	r3, r3, #3
 80050ee:	f003 0303 	and.w	r3, r3, #3
 80050f2:	4a67      	ldr	r2, [pc, #412]	; (8005290 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 80050f4:	fa22 f303 	lsr.w	r3, r2, r3
 80050f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050fa:	e01e      	b.n	800513a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80050fc:	4b63      	ldr	r3, [pc, #396]	; (800528c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005104:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005108:	d106      	bne.n	8005118 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800510a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800510c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005110:	d102      	bne.n	8005118 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005112:	4b60      	ldr	r3, [pc, #384]	; (8005294 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005114:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005116:	e010      	b.n	800513a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005118:	4b5c      	ldr	r3, [pc, #368]	; (800528c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005120:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005124:	d106      	bne.n	8005134 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8005126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005128:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800512c:	d102      	bne.n	8005134 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800512e:	4b5a      	ldr	r3, [pc, #360]	; (8005298 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8005130:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005132:	e002      	b.n	800513a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005134:	2300      	movs	r3, #0
 8005136:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005138:	e38f      	b.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800513a:	e38e      	b.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800513c:	4b57      	ldr	r3, [pc, #348]	; (800529c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800513e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005140:	e38b      	b.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8005142:	2300      	movs	r3, #0
 8005144:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005146:	e388      	b.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800514e:	f040 80a7 	bne.w	80052a0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8005152:	4b4e      	ldr	r3, [pc, #312]	; (800528c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005156:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800515a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800515c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800515e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005162:	d054      	beq.n	800520e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8005164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005166:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800516a:	f200 808b 	bhi.w	8005284 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800516e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005170:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005174:	f000 8083 	beq.w	800527e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8005178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800517a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800517e:	f200 8081 	bhi.w	8005284 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8005182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005184:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005188:	d02f      	beq.n	80051ea <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 800518a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800518c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005190:	d878      	bhi.n	8005284 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8005192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005194:	2b00      	cmp	r3, #0
 8005196:	d004      	beq.n	80051a2 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 8005198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800519a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800519e:	d012      	beq.n	80051c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 80051a0:	e070      	b.n	8005284 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80051a2:	4b3a      	ldr	r3, [pc, #232]	; (800528c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80051ae:	d107      	bne.n	80051c0 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80051b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80051b4:	4618      	mov	r0, r3
 80051b6:	f000 fe17 	bl	8005de8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80051ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051bc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80051be:	e34c      	b.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80051c0:	2300      	movs	r3, #0
 80051c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80051c4:	e349      	b.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80051c6:	4b31      	ldr	r3, [pc, #196]	; (800528c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051d2:	d107      	bne.n	80051e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80051d4:	f107 0318 	add.w	r3, r7, #24
 80051d8:	4618      	mov	r0, r3
 80051da:	f000 fb5d 	bl	8005898 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80051e2:	e33a      	b.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80051e4:	2300      	movs	r3, #0
 80051e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80051e8:	e337      	b.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80051ea:	4b28      	ldr	r3, [pc, #160]	; (800528c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051f6:	d107      	bne.n	8005208 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80051f8:	f107 030c 	add.w	r3, r7, #12
 80051fc:	4618      	mov	r0, r3
 80051fe:	f000 fc9f 	bl	8005b40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005206:	e328      	b.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005208:	2300      	movs	r3, #0
 800520a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800520c:	e325      	b.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800520e:	4b1f      	ldr	r3, [pc, #124]	; (800528c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005212:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005216:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005218:	4b1c      	ldr	r3, [pc, #112]	; (800528c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 0304 	and.w	r3, r3, #4
 8005220:	2b04      	cmp	r3, #4
 8005222:	d10c      	bne.n	800523e <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 8005224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005226:	2b00      	cmp	r3, #0
 8005228:	d109      	bne.n	800523e <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800522a:	4b18      	ldr	r3, [pc, #96]	; (800528c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	08db      	lsrs	r3, r3, #3
 8005230:	f003 0303 	and.w	r3, r3, #3
 8005234:	4a16      	ldr	r2, [pc, #88]	; (8005290 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8005236:	fa22 f303 	lsr.w	r3, r2, r3
 800523a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800523c:	e01e      	b.n	800527c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800523e:	4b13      	ldr	r3, [pc, #76]	; (800528c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005246:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800524a:	d106      	bne.n	800525a <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 800524c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800524e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005252:	d102      	bne.n	800525a <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005254:	4b0f      	ldr	r3, [pc, #60]	; (8005294 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005256:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005258:	e010      	b.n	800527c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800525a:	4b0c      	ldr	r3, [pc, #48]	; (800528c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005262:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005266:	d106      	bne.n	8005276 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8005268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800526a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800526e:	d102      	bne.n	8005276 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005270:	4b09      	ldr	r3, [pc, #36]	; (8005298 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8005272:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005274:	e002      	b.n	800527c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005276:	2300      	movs	r3, #0
 8005278:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800527a:	e2ee      	b.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800527c:	e2ed      	b.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800527e:	4b07      	ldr	r3, [pc, #28]	; (800529c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005280:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005282:	e2ea      	b.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8005284:	2300      	movs	r3, #0
 8005286:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005288:	e2e7      	b.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800528a:	bf00      	nop
 800528c:	58024400 	.word	0x58024400
 8005290:	03d09000 	.word	0x03d09000
 8005294:	003d0900 	.word	0x003d0900
 8005298:	017d7840 	.word	0x017d7840
 800529c:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052a6:	f040 809c 	bne.w	80053e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80052aa:	4b9e      	ldr	r3, [pc, #632]	; (8005524 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80052ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052ae:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80052b2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80052b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80052ba:	d054      	beq.n	8005366 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 80052bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80052c2:	f200 808b 	bhi.w	80053dc <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 80052c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80052cc:	f000 8083 	beq.w	80053d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80052d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80052d6:	f200 8081 	bhi.w	80053dc <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 80052da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80052e0:	d02f      	beq.n	8005342 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 80052e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80052e8:	d878      	bhi.n	80053dc <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 80052ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d004      	beq.n	80052fa <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 80052f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80052f6:	d012      	beq.n	800531e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80052f8:	e070      	b.n	80053dc <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80052fa:	4b8a      	ldr	r3, [pc, #552]	; (8005524 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005302:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005306:	d107      	bne.n	8005318 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005308:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800530c:	4618      	mov	r0, r3
 800530e:	f000 fd6b 	bl	8005de8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005314:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005316:	e2a0      	b.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005318:	2300      	movs	r3, #0
 800531a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800531c:	e29d      	b.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800531e:	4b81      	ldr	r3, [pc, #516]	; (8005524 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005326:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800532a:	d107      	bne.n	800533c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800532c:	f107 0318 	add.w	r3, r7, #24
 8005330:	4618      	mov	r0, r3
 8005332:	f000 fab1 	bl	8005898 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800533a:	e28e      	b.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800533c:	2300      	movs	r3, #0
 800533e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005340:	e28b      	b.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005342:	4b78      	ldr	r3, [pc, #480]	; (8005524 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800534a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800534e:	d107      	bne.n	8005360 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005350:	f107 030c 	add.w	r3, r7, #12
 8005354:	4618      	mov	r0, r3
 8005356:	f000 fbf3 	bl	8005b40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800535e:	e27c      	b.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005360:	2300      	movs	r3, #0
 8005362:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005364:	e279      	b.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005366:	4b6f      	ldr	r3, [pc, #444]	; (8005524 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800536a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800536e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005370:	4b6c      	ldr	r3, [pc, #432]	; (8005524 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 0304 	and.w	r3, r3, #4
 8005378:	2b04      	cmp	r3, #4
 800537a:	d10c      	bne.n	8005396 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800537c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800537e:	2b00      	cmp	r3, #0
 8005380:	d109      	bne.n	8005396 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005382:	4b68      	ldr	r3, [pc, #416]	; (8005524 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	08db      	lsrs	r3, r3, #3
 8005388:	f003 0303 	and.w	r3, r3, #3
 800538c:	4a66      	ldr	r2, [pc, #408]	; (8005528 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800538e:	fa22 f303 	lsr.w	r3, r2, r3
 8005392:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005394:	e01e      	b.n	80053d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005396:	4b63      	ldr	r3, [pc, #396]	; (8005524 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800539e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053a2:	d106      	bne.n	80053b2 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 80053a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80053aa:	d102      	bne.n	80053b2 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80053ac:	4b5f      	ldr	r3, [pc, #380]	; (800552c <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 80053ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053b0:	e010      	b.n	80053d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80053b2:	4b5c      	ldr	r3, [pc, #368]	; (8005524 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80053be:	d106      	bne.n	80053ce <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 80053c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053c6:	d102      	bne.n	80053ce <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80053c8:	4b59      	ldr	r3, [pc, #356]	; (8005530 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 80053ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053cc:	e002      	b.n	80053d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80053ce:	2300      	movs	r3, #0
 80053d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80053d2:	e242      	b.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80053d4:	e241      	b.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80053d6:	4b57      	ldr	r3, [pc, #348]	; (8005534 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 80053d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80053da:	e23e      	b.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 80053dc:	2300      	movs	r3, #0
 80053de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80053e0:	e23b      	b.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053e8:	f040 80a6 	bne.w	8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80053ec:	4b4d      	ldr	r3, [pc, #308]	; (8005524 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80053ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053f0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80053f4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80053f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053fc:	d054      	beq.n	80054a8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 80053fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005400:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005404:	f200 808b 	bhi.w	800551e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8005408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800540a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800540e:	f000 8083 	beq.w	8005518 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 8005412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005414:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005418:	f200 8081 	bhi.w	800551e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800541c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800541e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005422:	d02f      	beq.n	8005484 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 8005424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005426:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800542a:	d878      	bhi.n	800551e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800542c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800542e:	2b00      	cmp	r3, #0
 8005430:	d004      	beq.n	800543c <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8005432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005434:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005438:	d012      	beq.n	8005460 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 800543a:	e070      	b.n	800551e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800543c:	4b39      	ldr	r3, [pc, #228]	; (8005524 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005444:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005448:	d107      	bne.n	800545a <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800544a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800544e:	4618      	mov	r0, r3
 8005450:	f000 fcca 	bl	8005de8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005456:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005458:	e1ff      	b.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800545a:	2300      	movs	r3, #0
 800545c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800545e:	e1fc      	b.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005460:	4b30      	ldr	r3, [pc, #192]	; (8005524 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005468:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800546c:	d107      	bne.n	800547e <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800546e:	f107 0318 	add.w	r3, r7, #24
 8005472:	4618      	mov	r0, r3
 8005474:	f000 fa10 	bl	8005898 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005478:	69bb      	ldr	r3, [r7, #24]
 800547a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800547c:	e1ed      	b.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800547e:	2300      	movs	r3, #0
 8005480:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005482:	e1ea      	b.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005484:	4b27      	ldr	r3, [pc, #156]	; (8005524 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800548c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005490:	d107      	bne.n	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005492:	f107 030c 	add.w	r3, r7, #12
 8005496:	4618      	mov	r0, r3
 8005498:	f000 fb52 	bl	8005b40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80054a0:	e1db      	b.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80054a2:	2300      	movs	r3, #0
 80054a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80054a6:	e1d8      	b.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80054a8:	4b1e      	ldr	r3, [pc, #120]	; (8005524 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80054aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80054b0:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80054b2:	4b1c      	ldr	r3, [pc, #112]	; (8005524 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 0304 	and.w	r3, r3, #4
 80054ba:	2b04      	cmp	r3, #4
 80054bc:	d10c      	bne.n	80054d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 80054be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d109      	bne.n	80054d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80054c4:	4b17      	ldr	r3, [pc, #92]	; (8005524 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	08db      	lsrs	r3, r3, #3
 80054ca:	f003 0303 	and.w	r3, r3, #3
 80054ce:	4a16      	ldr	r2, [pc, #88]	; (8005528 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80054d0:	fa22 f303 	lsr.w	r3, r2, r3
 80054d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054d6:	e01e      	b.n	8005516 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80054d8:	4b12      	ldr	r3, [pc, #72]	; (8005524 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054e4:	d106      	bne.n	80054f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 80054e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80054ec:	d102      	bne.n	80054f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80054ee:	4b0f      	ldr	r3, [pc, #60]	; (800552c <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 80054f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054f2:	e010      	b.n	8005516 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80054f4:	4b0b      	ldr	r3, [pc, #44]	; (8005524 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005500:	d106      	bne.n	8005510 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8005502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005504:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005508:	d102      	bne.n	8005510 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800550a:	4b09      	ldr	r3, [pc, #36]	; (8005530 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800550c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800550e:	e002      	b.n	8005516 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005510:	2300      	movs	r3, #0
 8005512:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005514:	e1a1      	b.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8005516:	e1a0      	b.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005518:	4b06      	ldr	r3, [pc, #24]	; (8005534 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800551a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800551c:	e19d      	b.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800551e:	2300      	movs	r3, #0
 8005520:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005522:	e19a      	b.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8005524:	58024400 	.word	0x58024400
 8005528:	03d09000 	.word	0x03d09000
 800552c:	003d0900 	.word	0x003d0900
 8005530:	017d7840 	.word	0x017d7840
 8005534:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800553e:	d173      	bne.n	8005628 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8005540:	4b9a      	ldr	r3, [pc, #616]	; (80057ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005544:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005548:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800554a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800554c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005550:	d02f      	beq.n	80055b2 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8005552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005554:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005558:	d863      	bhi.n	8005622 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 800555a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800555c:	2b00      	cmp	r3, #0
 800555e:	d004      	beq.n	800556a <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 8005560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005562:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005566:	d012      	beq.n	800558e <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 8005568:	e05b      	b.n	8005622 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800556a:	4b90      	ldr	r3, [pc, #576]	; (80057ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005572:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005576:	d107      	bne.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005578:	f107 0318 	add.w	r3, r7, #24
 800557c:	4618      	mov	r0, r3
 800557e:	f000 f98b 	bl	8005898 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005582:	69bb      	ldr	r3, [r7, #24]
 8005584:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005586:	e168      	b.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005588:	2300      	movs	r3, #0
 800558a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800558c:	e165      	b.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800558e:	4b87      	ldr	r3, [pc, #540]	; (80057ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005596:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800559a:	d107      	bne.n	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800559c:	f107 030c 	add.w	r3, r7, #12
 80055a0:	4618      	mov	r0, r3
 80055a2:	f000 facd 	bl	8005b40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80055aa:	e156      	b.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80055ac:	2300      	movs	r3, #0
 80055ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80055b0:	e153      	b.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80055b2:	4b7e      	ldr	r3, [pc, #504]	; (80057ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80055b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055b6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80055ba:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80055bc:	4b7b      	ldr	r3, [pc, #492]	; (80057ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 0304 	and.w	r3, r3, #4
 80055c4:	2b04      	cmp	r3, #4
 80055c6:	d10c      	bne.n	80055e2 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 80055c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d109      	bne.n	80055e2 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80055ce:	4b77      	ldr	r3, [pc, #476]	; (80057ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	08db      	lsrs	r3, r3, #3
 80055d4:	f003 0303 	and.w	r3, r3, #3
 80055d8:	4a75      	ldr	r2, [pc, #468]	; (80057b0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80055da:	fa22 f303 	lsr.w	r3, r2, r3
 80055de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055e0:	e01e      	b.n	8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80055e2:	4b72      	ldr	r3, [pc, #456]	; (80057ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055ee:	d106      	bne.n	80055fe <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 80055f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055f6:	d102      	bne.n	80055fe <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80055f8:	4b6e      	ldr	r3, [pc, #440]	; (80057b4 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 80055fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055fc:	e010      	b.n	8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80055fe:	4b6b      	ldr	r3, [pc, #428]	; (80057ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005606:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800560a:	d106      	bne.n	800561a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800560c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800560e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005612:	d102      	bne.n	800561a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005614:	4b68      	ldr	r3, [pc, #416]	; (80057b8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8005616:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005618:	e002      	b.n	8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800561a:	2300      	movs	r3, #0
 800561c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800561e:	e11c      	b.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8005620:	e11b      	b.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8005622:	2300      	movs	r3, #0
 8005624:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005626:	e118      	b.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800562e:	d133      	bne.n	8005698 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8005630:	4b5e      	ldr	r3, [pc, #376]	; (80057ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005632:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005634:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005638:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800563a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800563c:	2b00      	cmp	r3, #0
 800563e:	d004      	beq.n	800564a <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8005640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005642:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005646:	d012      	beq.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 8005648:	e023      	b.n	8005692 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800564a:	4b58      	ldr	r3, [pc, #352]	; (80057ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005652:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005656:	d107      	bne.n	8005668 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005658:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800565c:	4618      	mov	r0, r3
 800565e:	f000 fbc3 	bl	8005de8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005664:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005666:	e0f8      	b.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8005668:	2300      	movs	r3, #0
 800566a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800566c:	e0f5      	b.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800566e:	4b4f      	ldr	r3, [pc, #316]	; (80057ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005676:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800567a:	d107      	bne.n	800568c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800567c:	f107 0318 	add.w	r3, r7, #24
 8005680:	4618      	mov	r0, r3
 8005682:	f000 f909 	bl	8005898 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005686:	6a3b      	ldr	r3, [r7, #32]
 8005688:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800568a:	e0e6      	b.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800568c:	2300      	movs	r3, #0
 800568e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005690:	e0e3      	b.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8005692:	2300      	movs	r3, #0
 8005694:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005696:	e0e0      	b.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800569e:	f040 808d 	bne.w	80057bc <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80056a2:	4b42      	ldr	r3, [pc, #264]	; (80057ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80056a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056a6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80056aa:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80056ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80056b2:	d06b      	beq.n	800578c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 80056b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80056ba:	d874      	bhi.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 80056bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056c2:	d056      	beq.n	8005772 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 80056c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056ca:	d86c      	bhi.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 80056cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80056d2:	d03b      	beq.n	800574c <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 80056d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80056da:	d864      	bhi.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 80056dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056e2:	d021      	beq.n	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 80056e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056ea:	d85c      	bhi.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 80056ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d004      	beq.n	80056fc <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 80056f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80056f8:	d004      	beq.n	8005704 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 80056fa:	e054      	b.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80056fc:	f000 f8b6 	bl	800586c <HAL_RCCEx_GetD3PCLK1Freq>
 8005700:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8005702:	e0aa      	b.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005704:	4b29      	ldr	r3, [pc, #164]	; (80057ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800570c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005710:	d107      	bne.n	8005722 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005712:	f107 0318 	add.w	r3, r7, #24
 8005716:	4618      	mov	r0, r3
 8005718:	f000 f8be 	bl	8005898 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005720:	e09b      	b.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8005722:	2300      	movs	r3, #0
 8005724:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005726:	e098      	b.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005728:	4b20      	ldr	r3, [pc, #128]	; (80057ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005730:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005734:	d107      	bne.n	8005746 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005736:	f107 030c 	add.w	r3, r7, #12
 800573a:	4618      	mov	r0, r3
 800573c:	f000 fa00 	bl	8005b40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005744:	e089      	b.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8005746:	2300      	movs	r3, #0
 8005748:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800574a:	e086      	b.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800574c:	4b17      	ldr	r3, [pc, #92]	; (80057ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 0304 	and.w	r3, r3, #4
 8005754:	2b04      	cmp	r3, #4
 8005756:	d109      	bne.n	800576c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005758:	4b14      	ldr	r3, [pc, #80]	; (80057ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	08db      	lsrs	r3, r3, #3
 800575e:	f003 0303 	and.w	r3, r3, #3
 8005762:	4a13      	ldr	r2, [pc, #76]	; (80057b0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8005764:	fa22 f303 	lsr.w	r3, r2, r3
 8005768:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800576a:	e076      	b.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800576c:	2300      	movs	r3, #0
 800576e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005770:	e073      	b.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005772:	4b0e      	ldr	r3, [pc, #56]	; (80057ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800577a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800577e:	d102      	bne.n	8005786 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 8005780:	4b0c      	ldr	r3, [pc, #48]	; (80057b4 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8005782:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005784:	e069      	b.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005786:	2300      	movs	r3, #0
 8005788:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800578a:	e066      	b.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800578c:	4b07      	ldr	r3, [pc, #28]	; (80057ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005794:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005798:	d102      	bne.n	80057a0 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 800579a:	4b07      	ldr	r3, [pc, #28]	; (80057b8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800579c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800579e:	e05c      	b.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80057a0:	2300      	movs	r3, #0
 80057a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80057a4:	e059      	b.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80057a6:	2300      	movs	r3, #0
 80057a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80057aa:	e056      	b.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80057ac:	58024400 	.word	0x58024400
 80057b0:	03d09000 	.word	0x03d09000
 80057b4:	003d0900 	.word	0x003d0900
 80057b8:	017d7840 	.word	0x017d7840
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057c2:	d148      	bne.n	8005856 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 80057c4:	4b27      	ldr	r3, [pc, #156]	; (8005864 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80057c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80057cc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80057ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057d4:	d02a      	beq.n	800582c <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 80057d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057dc:	d838      	bhi.n	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 80057de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d004      	beq.n	80057ee <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 80057e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057ea:	d00d      	beq.n	8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 80057ec:	e030      	b.n	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80057ee:	4b1d      	ldr	r3, [pc, #116]	; (8005864 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80057fa:	d102      	bne.n	8005802 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 80057fc:	4b1a      	ldr	r3, [pc, #104]	; (8005868 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80057fe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005800:	e02b      	b.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8005802:	2300      	movs	r3, #0
 8005804:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005806:	e028      	b.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005808:	4b16      	ldr	r3, [pc, #88]	; (8005864 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005810:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005814:	d107      	bne.n	8005826 <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005816:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800581a:	4618      	mov	r0, r3
 800581c:	f000 fae4 	bl	8005de8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005822:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005824:	e019      	b.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8005826:	2300      	movs	r3, #0
 8005828:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800582a:	e016      	b.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800582c:	4b0d      	ldr	r3, [pc, #52]	; (8005864 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005834:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005838:	d107      	bne.n	800584a <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800583a:	f107 0318 	add.w	r3, r7, #24
 800583e:	4618      	mov	r0, r3
 8005840:	f000 f82a 	bl	8005898 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005844:	69fb      	ldr	r3, [r7, #28]
 8005846:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005848:	e007      	b.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800584a:	2300      	movs	r3, #0
 800584c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800584e:	e004      	b.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8005850:	2300      	movs	r3, #0
 8005852:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005854:	e001      	b.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 8005856:	2300      	movs	r3, #0
 8005858:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800585a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800585c:	4618      	mov	r0, r3
 800585e:	3740      	adds	r7, #64	; 0x40
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}
 8005864:	58024400 	.word	0x58024400
 8005868:	017d7840 	.word	0x017d7840

0800586c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005870:	f7fe fc82 	bl	8004178 <HAL_RCC_GetHCLKFreq>
 8005874:	4602      	mov	r2, r0
 8005876:	4b06      	ldr	r3, [pc, #24]	; (8005890 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005878:	6a1b      	ldr	r3, [r3, #32]
 800587a:	091b      	lsrs	r3, r3, #4
 800587c:	f003 0307 	and.w	r3, r3, #7
 8005880:	4904      	ldr	r1, [pc, #16]	; (8005894 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005882:	5ccb      	ldrb	r3, [r1, r3]
 8005884:	f003 031f 	and.w	r3, r3, #31
 8005888:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800588c:	4618      	mov	r0, r3
 800588e:	bd80      	pop	{r7, pc}
 8005890:	58024400 	.word	0x58024400
 8005894:	0800b0e0 	.word	0x0800b0e0

08005898 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005898:	b480      	push	{r7}
 800589a:	b089      	sub	sp, #36	; 0x24
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80058a0:	4ba1      	ldr	r3, [pc, #644]	; (8005b28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058a4:	f003 0303 	and.w	r3, r3, #3
 80058a8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80058aa:	4b9f      	ldr	r3, [pc, #636]	; (8005b28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ae:	0b1b      	lsrs	r3, r3, #12
 80058b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80058b4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80058b6:	4b9c      	ldr	r3, [pc, #624]	; (8005b28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ba:	091b      	lsrs	r3, r3, #4
 80058bc:	f003 0301 	and.w	r3, r3, #1
 80058c0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80058c2:	4b99      	ldr	r3, [pc, #612]	; (8005b28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058c6:	08db      	lsrs	r3, r3, #3
 80058c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80058cc:	693a      	ldr	r2, [r7, #16]
 80058ce:	fb02 f303 	mul.w	r3, r2, r3
 80058d2:	ee07 3a90 	vmov	s15, r3
 80058d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058da:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	f000 8111 	beq.w	8005b08 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80058e6:	69bb      	ldr	r3, [r7, #24]
 80058e8:	2b02      	cmp	r3, #2
 80058ea:	f000 8083 	beq.w	80059f4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	2b02      	cmp	r3, #2
 80058f2:	f200 80a1 	bhi.w	8005a38 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80058f6:	69bb      	ldr	r3, [r7, #24]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d003      	beq.n	8005904 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80058fc:	69bb      	ldr	r3, [r7, #24]
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d056      	beq.n	80059b0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005902:	e099      	b.n	8005a38 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005904:	4b88      	ldr	r3, [pc, #544]	; (8005b28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 0320 	and.w	r3, r3, #32
 800590c:	2b00      	cmp	r3, #0
 800590e:	d02d      	beq.n	800596c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005910:	4b85      	ldr	r3, [pc, #532]	; (8005b28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	08db      	lsrs	r3, r3, #3
 8005916:	f003 0303 	and.w	r3, r3, #3
 800591a:	4a84      	ldr	r2, [pc, #528]	; (8005b2c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800591c:	fa22 f303 	lsr.w	r3, r2, r3
 8005920:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	ee07 3a90 	vmov	s15, r3
 8005928:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	ee07 3a90 	vmov	s15, r3
 8005932:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005936:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800593a:	4b7b      	ldr	r3, [pc, #492]	; (8005b28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800593c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800593e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005942:	ee07 3a90 	vmov	s15, r3
 8005946:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800594a:	ed97 6a03 	vldr	s12, [r7, #12]
 800594e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005b30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005952:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005956:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800595a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800595e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005962:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005966:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800596a:	e087      	b.n	8005a7c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	ee07 3a90 	vmov	s15, r3
 8005972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005976:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005b34 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800597a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800597e:	4b6a      	ldr	r3, [pc, #424]	; (8005b28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005982:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005986:	ee07 3a90 	vmov	s15, r3
 800598a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800598e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005992:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005b30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005996:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800599a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800599e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80059ae:	e065      	b.n	8005a7c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	ee07 3a90 	vmov	s15, r3
 80059b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059ba:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005b38 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80059be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059c2:	4b59      	ldr	r3, [pc, #356]	; (8005b28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059ca:	ee07 3a90 	vmov	s15, r3
 80059ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80059d6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005b30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80059da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80059f2:	e043      	b.n	8005a7c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	ee07 3a90 	vmov	s15, r3
 80059fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059fe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005b3c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005a02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a06:	4b48      	ldr	r3, [pc, #288]	; (8005b28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a0e:	ee07 3a90 	vmov	s15, r3
 8005a12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a16:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a1a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005b30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005a1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a32:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a36:	e021      	b.n	8005a7c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	ee07 3a90 	vmov	s15, r3
 8005a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a42:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005b38 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005a46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a4a:	4b37      	ldr	r3, [pc, #220]	; (8005b28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a52:	ee07 3a90 	vmov	s15, r3
 8005a56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a5e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005b30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005a62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a76:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a7a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005a7c:	4b2a      	ldr	r3, [pc, #168]	; (8005b28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a80:	0a5b      	lsrs	r3, r3, #9
 8005a82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a86:	ee07 3a90 	vmov	s15, r3
 8005a8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a92:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a96:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005aa2:	ee17 2a90 	vmov	r2, s15
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005aaa:	4b1f      	ldr	r3, [pc, #124]	; (8005b28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aae:	0c1b      	lsrs	r3, r3, #16
 8005ab0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ab4:	ee07 3a90 	vmov	s15, r3
 8005ab8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005abc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ac0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ac4:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ac8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005acc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ad0:	ee17 2a90 	vmov	r2, s15
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005ad8:	4b13      	ldr	r3, [pc, #76]	; (8005b28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005adc:	0e1b      	lsrs	r3, r3, #24
 8005ade:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ae2:	ee07 3a90 	vmov	s15, r3
 8005ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005aee:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005af2:	edd7 6a07 	vldr	s13, [r7, #28]
 8005af6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005afa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005afe:	ee17 2a90 	vmov	r2, s15
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005b06:	e008      	b.n	8005b1a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2200      	movs	r2, #0
 8005b12:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	609a      	str	r2, [r3, #8]
}
 8005b1a:	bf00      	nop
 8005b1c:	3724      	adds	r7, #36	; 0x24
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr
 8005b26:	bf00      	nop
 8005b28:	58024400 	.word	0x58024400
 8005b2c:	03d09000 	.word	0x03d09000
 8005b30:	46000000 	.word	0x46000000
 8005b34:	4c742400 	.word	0x4c742400
 8005b38:	4a742400 	.word	0x4a742400
 8005b3c:	4bbebc20 	.word	0x4bbebc20

08005b40 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b089      	sub	sp, #36	; 0x24
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005b48:	4ba1      	ldr	r3, [pc, #644]	; (8005dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b4c:	f003 0303 	and.w	r3, r3, #3
 8005b50:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005b52:	4b9f      	ldr	r3, [pc, #636]	; (8005dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b56:	0d1b      	lsrs	r3, r3, #20
 8005b58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b5c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005b5e:	4b9c      	ldr	r3, [pc, #624]	; (8005dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b62:	0a1b      	lsrs	r3, r3, #8
 8005b64:	f003 0301 	and.w	r3, r3, #1
 8005b68:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005b6a:	4b99      	ldr	r3, [pc, #612]	; (8005dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b6e:	08db      	lsrs	r3, r3, #3
 8005b70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005b74:	693a      	ldr	r2, [r7, #16]
 8005b76:	fb02 f303 	mul.w	r3, r2, r3
 8005b7a:	ee07 3a90 	vmov	s15, r3
 8005b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b82:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	f000 8111 	beq.w	8005db0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005b8e:	69bb      	ldr	r3, [r7, #24]
 8005b90:	2b02      	cmp	r3, #2
 8005b92:	f000 8083 	beq.w	8005c9c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005b96:	69bb      	ldr	r3, [r7, #24]
 8005b98:	2b02      	cmp	r3, #2
 8005b9a:	f200 80a1 	bhi.w	8005ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005b9e:	69bb      	ldr	r3, [r7, #24]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d003      	beq.n	8005bac <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005ba4:	69bb      	ldr	r3, [r7, #24]
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d056      	beq.n	8005c58 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005baa:	e099      	b.n	8005ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005bac:	4b88      	ldr	r3, [pc, #544]	; (8005dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f003 0320 	and.w	r3, r3, #32
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d02d      	beq.n	8005c14 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005bb8:	4b85      	ldr	r3, [pc, #532]	; (8005dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	08db      	lsrs	r3, r3, #3
 8005bbe:	f003 0303 	and.w	r3, r3, #3
 8005bc2:	4a84      	ldr	r2, [pc, #528]	; (8005dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005bc4:	fa22 f303 	lsr.w	r3, r2, r3
 8005bc8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	ee07 3a90 	vmov	s15, r3
 8005bd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	ee07 3a90 	vmov	s15, r3
 8005bda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005be2:	4b7b      	ldr	r3, [pc, #492]	; (8005dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bea:	ee07 3a90 	vmov	s15, r3
 8005bee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bf2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005bf6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005bfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c0e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005c12:	e087      	b.n	8005d24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	ee07 3a90 	vmov	s15, r3
 8005c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c1e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005ddc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005c22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c26:	4b6a      	ldr	r3, [pc, #424]	; (8005dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c2e:	ee07 3a90 	vmov	s15, r3
 8005c32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c36:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c3a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005c3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c52:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c56:	e065      	b.n	8005d24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	ee07 3a90 	vmov	s15, r3
 8005c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c62:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005de0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005c66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c6a:	4b59      	ldr	r3, [pc, #356]	; (8005dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c72:	ee07 3a90 	vmov	s15, r3
 8005c76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c7e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005c82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c96:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c9a:	e043      	b.n	8005d24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	ee07 3a90 	vmov	s15, r3
 8005ca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ca6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005de4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005caa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cae:	4b48      	ldr	r3, [pc, #288]	; (8005dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cb6:	ee07 3a90 	vmov	s15, r3
 8005cba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cc2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005cc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cda:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005cde:	e021      	b.n	8005d24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	ee07 3a90 	vmov	s15, r3
 8005ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cea:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005de0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005cee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cf2:	4b37      	ldr	r3, [pc, #220]	; (8005dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cfa:	ee07 3a90 	vmov	s15, r3
 8005cfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d02:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d06:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005d0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d1e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d22:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005d24:	4b2a      	ldr	r3, [pc, #168]	; (8005dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d28:	0a5b      	lsrs	r3, r3, #9
 8005d2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d2e:	ee07 3a90 	vmov	s15, r3
 8005d32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d4a:	ee17 2a90 	vmov	r2, s15
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005d52:	4b1f      	ldr	r3, [pc, #124]	; (8005dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d56:	0c1b      	lsrs	r3, r3, #16
 8005d58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d5c:	ee07 3a90 	vmov	s15, r3
 8005d60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d68:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d78:	ee17 2a90 	vmov	r2, s15
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005d80:	4b13      	ldr	r3, [pc, #76]	; (8005dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d84:	0e1b      	lsrs	r3, r3, #24
 8005d86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d8a:	ee07 3a90 	vmov	s15, r3
 8005d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d96:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005da2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005da6:	ee17 2a90 	vmov	r2, s15
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005dae:	e008      	b.n	8005dc2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2200      	movs	r2, #0
 8005dba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	609a      	str	r2, [r3, #8]
}
 8005dc2:	bf00      	nop
 8005dc4:	3724      	adds	r7, #36	; 0x24
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr
 8005dce:	bf00      	nop
 8005dd0:	58024400 	.word	0x58024400
 8005dd4:	03d09000 	.word	0x03d09000
 8005dd8:	46000000 	.word	0x46000000
 8005ddc:	4c742400 	.word	0x4c742400
 8005de0:	4a742400 	.word	0x4a742400
 8005de4:	4bbebc20 	.word	0x4bbebc20

08005de8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b089      	sub	sp, #36	; 0x24
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005df0:	4ba0      	ldr	r3, [pc, #640]	; (8006074 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005df4:	f003 0303 	and.w	r3, r3, #3
 8005df8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8005dfa:	4b9e      	ldr	r3, [pc, #632]	; (8006074 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dfe:	091b      	lsrs	r3, r3, #4
 8005e00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e04:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8005e06:	4b9b      	ldr	r3, [pc, #620]	; (8006074 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e0a:	f003 0301 	and.w	r3, r3, #1
 8005e0e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005e10:	4b98      	ldr	r3, [pc, #608]	; (8006074 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005e12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e14:	08db      	lsrs	r3, r3, #3
 8005e16:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e1a:	693a      	ldr	r2, [r7, #16]
 8005e1c:	fb02 f303 	mul.w	r3, r2, r3
 8005e20:	ee07 3a90 	vmov	s15, r3
 8005e24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e28:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	f000 8111 	beq.w	8006056 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8005e34:	69bb      	ldr	r3, [r7, #24]
 8005e36:	2b02      	cmp	r3, #2
 8005e38:	f000 8083 	beq.w	8005f42 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8005e3c:	69bb      	ldr	r3, [r7, #24]
 8005e3e:	2b02      	cmp	r3, #2
 8005e40:	f200 80a1 	bhi.w	8005f86 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8005e44:	69bb      	ldr	r3, [r7, #24]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d003      	beq.n	8005e52 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8005e4a:	69bb      	ldr	r3, [r7, #24]
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d056      	beq.n	8005efe <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8005e50:	e099      	b.n	8005f86 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e52:	4b88      	ldr	r3, [pc, #544]	; (8006074 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f003 0320 	and.w	r3, r3, #32
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d02d      	beq.n	8005eba <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005e5e:	4b85      	ldr	r3, [pc, #532]	; (8006074 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	08db      	lsrs	r3, r3, #3
 8005e64:	f003 0303 	and.w	r3, r3, #3
 8005e68:	4a83      	ldr	r2, [pc, #524]	; (8006078 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8005e6a:	fa22 f303 	lsr.w	r3, r2, r3
 8005e6e:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	ee07 3a90 	vmov	s15, r3
 8005e76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	ee07 3a90 	vmov	s15, r3
 8005e80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e88:	4b7a      	ldr	r3, [pc, #488]	; (8006074 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e90:	ee07 3a90 	vmov	s15, r3
 8005e94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e98:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e9c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800607c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005ea0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ea4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ea8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005eac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005eb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eb4:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005eb8:	e087      	b.n	8005fca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	ee07 3a90 	vmov	s15, r3
 8005ec0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ec4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8006080 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005ec8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ecc:	4b69      	ldr	r3, [pc, #420]	; (8006074 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ed0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ed4:	ee07 3a90 	vmov	s15, r3
 8005ed8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005edc:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ee0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800607c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005ee4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ee8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005eec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ef0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ef4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ef8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005efc:	e065      	b.n	8005fca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	ee07 3a90 	vmov	s15, r3
 8005f04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f08:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8006084 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8005f0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f10:	4b58      	ldr	r3, [pc, #352]	; (8006074 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f18:	ee07 3a90 	vmov	s15, r3
 8005f1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f20:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f24:	eddf 5a55 	vldr	s11, [pc, #340]	; 800607c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005f28:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f30:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f3c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f40:	e043      	b.n	8005fca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	ee07 3a90 	vmov	s15, r3
 8005f48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f4c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006088 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8005f50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f54:	4b47      	ldr	r3, [pc, #284]	; (8006074 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f5c:	ee07 3a90 	vmov	s15, r3
 8005f60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f64:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f68:	eddf 5a44 	vldr	s11, [pc, #272]	; 800607c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005f6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f74:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f80:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f84:	e021      	b.n	8005fca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	ee07 3a90 	vmov	s15, r3
 8005f8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f90:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8006080 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005f94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f98:	4b36      	ldr	r3, [pc, #216]	; (8006074 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fa0:	ee07 3a90 	vmov	s15, r3
 8005fa4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fa8:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fac:	eddf 5a33 	vldr	s11, [pc, #204]	; 800607c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005fb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fb8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fc4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005fc8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8005fca:	4b2a      	ldr	r3, [pc, #168]	; (8006074 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fce:	0a5b      	lsrs	r3, r3, #9
 8005fd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fd4:	ee07 3a90 	vmov	s15, r3
 8005fd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fdc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005fe0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005fe4:	edd7 6a07 	vldr	s13, [r7, #28]
 8005fe8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005fec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ff0:	ee17 2a90 	vmov	r2, s15
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8005ff8:	4b1e      	ldr	r3, [pc, #120]	; (8006074 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ffc:	0c1b      	lsrs	r3, r3, #16
 8005ffe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006002:	ee07 3a90 	vmov	s15, r3
 8006006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800600a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800600e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006012:	edd7 6a07 	vldr	s13, [r7, #28]
 8006016:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800601a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800601e:	ee17 2a90 	vmov	r2, s15
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8006026:	4b13      	ldr	r3, [pc, #76]	; (8006074 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800602a:	0e1b      	lsrs	r3, r3, #24
 800602c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006030:	ee07 3a90 	vmov	s15, r3
 8006034:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006038:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800603c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006040:	edd7 6a07 	vldr	s13, [r7, #28]
 8006044:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006048:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800604c:	ee17 2a90 	vmov	r2, s15
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006054:	e008      	b.n	8006068 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2200      	movs	r2, #0
 800605a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2200      	movs	r2, #0
 8006060:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	609a      	str	r2, [r3, #8]
}
 8006068:	bf00      	nop
 800606a:	3724      	adds	r7, #36	; 0x24
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr
 8006074:	58024400 	.word	0x58024400
 8006078:	03d09000 	.word	0x03d09000
 800607c:	46000000 	.word	0x46000000
 8006080:	4c742400 	.word	0x4c742400
 8006084:	4a742400 	.word	0x4a742400
 8006088:	4bbebc20 	.word	0x4bbebc20

0800608c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b084      	sub	sp, #16
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006096:	2300      	movs	r3, #0
 8006098:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800609a:	4b53      	ldr	r3, [pc, #332]	; (80061e8 <RCCEx_PLL2_Config+0x15c>)
 800609c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800609e:	f003 0303 	and.w	r3, r3, #3
 80060a2:	2b03      	cmp	r3, #3
 80060a4:	d101      	bne.n	80060aa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	e099      	b.n	80061de <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80060aa:	4b4f      	ldr	r3, [pc, #316]	; (80061e8 <RCCEx_PLL2_Config+0x15c>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a4e      	ldr	r2, [pc, #312]	; (80061e8 <RCCEx_PLL2_Config+0x15c>)
 80060b0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80060b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060b6:	f7fa fb81 	bl	80007bc <HAL_GetTick>
 80060ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80060bc:	e008      	b.n	80060d0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80060be:	f7fa fb7d 	bl	80007bc <HAL_GetTick>
 80060c2:	4602      	mov	r2, r0
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	1ad3      	subs	r3, r2, r3
 80060c8:	2b02      	cmp	r3, #2
 80060ca:	d901      	bls.n	80060d0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80060cc:	2303      	movs	r3, #3
 80060ce:	e086      	b.n	80061de <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80060d0:	4b45      	ldr	r3, [pc, #276]	; (80061e8 <RCCEx_PLL2_Config+0x15c>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d1f0      	bne.n	80060be <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80060dc:	4b42      	ldr	r3, [pc, #264]	; (80061e8 <RCCEx_PLL2_Config+0x15c>)
 80060de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060e0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	031b      	lsls	r3, r3, #12
 80060ea:	493f      	ldr	r1, [pc, #252]	; (80061e8 <RCCEx_PLL2_Config+0x15c>)
 80060ec:	4313      	orrs	r3, r2
 80060ee:	628b      	str	r3, [r1, #40]	; 0x28
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	3b01      	subs	r3, #1
 80060f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	3b01      	subs	r3, #1
 8006100:	025b      	lsls	r3, r3, #9
 8006102:	b29b      	uxth	r3, r3
 8006104:	431a      	orrs	r2, r3
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	68db      	ldr	r3, [r3, #12]
 800610a:	3b01      	subs	r3, #1
 800610c:	041b      	lsls	r3, r3, #16
 800610e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006112:	431a      	orrs	r2, r3
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	691b      	ldr	r3, [r3, #16]
 8006118:	3b01      	subs	r3, #1
 800611a:	061b      	lsls	r3, r3, #24
 800611c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006120:	4931      	ldr	r1, [pc, #196]	; (80061e8 <RCCEx_PLL2_Config+0x15c>)
 8006122:	4313      	orrs	r3, r2
 8006124:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006126:	4b30      	ldr	r3, [pc, #192]	; (80061e8 <RCCEx_PLL2_Config+0x15c>)
 8006128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800612a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	695b      	ldr	r3, [r3, #20]
 8006132:	492d      	ldr	r1, [pc, #180]	; (80061e8 <RCCEx_PLL2_Config+0x15c>)
 8006134:	4313      	orrs	r3, r2
 8006136:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006138:	4b2b      	ldr	r3, [pc, #172]	; (80061e8 <RCCEx_PLL2_Config+0x15c>)
 800613a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800613c:	f023 0220 	bic.w	r2, r3, #32
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	699b      	ldr	r3, [r3, #24]
 8006144:	4928      	ldr	r1, [pc, #160]	; (80061e8 <RCCEx_PLL2_Config+0x15c>)
 8006146:	4313      	orrs	r3, r2
 8006148:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800614a:	4b27      	ldr	r3, [pc, #156]	; (80061e8 <RCCEx_PLL2_Config+0x15c>)
 800614c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800614e:	4a26      	ldr	r2, [pc, #152]	; (80061e8 <RCCEx_PLL2_Config+0x15c>)
 8006150:	f023 0310 	bic.w	r3, r3, #16
 8006154:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006156:	4b24      	ldr	r3, [pc, #144]	; (80061e8 <RCCEx_PLL2_Config+0x15c>)
 8006158:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800615a:	4b24      	ldr	r3, [pc, #144]	; (80061ec <RCCEx_PLL2_Config+0x160>)
 800615c:	4013      	ands	r3, r2
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	69d2      	ldr	r2, [r2, #28]
 8006162:	00d2      	lsls	r2, r2, #3
 8006164:	4920      	ldr	r1, [pc, #128]	; (80061e8 <RCCEx_PLL2_Config+0x15c>)
 8006166:	4313      	orrs	r3, r2
 8006168:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800616a:	4b1f      	ldr	r3, [pc, #124]	; (80061e8 <RCCEx_PLL2_Config+0x15c>)
 800616c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800616e:	4a1e      	ldr	r2, [pc, #120]	; (80061e8 <RCCEx_PLL2_Config+0x15c>)
 8006170:	f043 0310 	orr.w	r3, r3, #16
 8006174:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d106      	bne.n	800618a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800617c:	4b1a      	ldr	r3, [pc, #104]	; (80061e8 <RCCEx_PLL2_Config+0x15c>)
 800617e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006180:	4a19      	ldr	r2, [pc, #100]	; (80061e8 <RCCEx_PLL2_Config+0x15c>)
 8006182:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006186:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006188:	e00f      	b.n	80061aa <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	2b01      	cmp	r3, #1
 800618e:	d106      	bne.n	800619e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006190:	4b15      	ldr	r3, [pc, #84]	; (80061e8 <RCCEx_PLL2_Config+0x15c>)
 8006192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006194:	4a14      	ldr	r2, [pc, #80]	; (80061e8 <RCCEx_PLL2_Config+0x15c>)
 8006196:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800619a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800619c:	e005      	b.n	80061aa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800619e:	4b12      	ldr	r3, [pc, #72]	; (80061e8 <RCCEx_PLL2_Config+0x15c>)
 80061a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a2:	4a11      	ldr	r2, [pc, #68]	; (80061e8 <RCCEx_PLL2_Config+0x15c>)
 80061a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80061a8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80061aa:	4b0f      	ldr	r3, [pc, #60]	; (80061e8 <RCCEx_PLL2_Config+0x15c>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a0e      	ldr	r2, [pc, #56]	; (80061e8 <RCCEx_PLL2_Config+0x15c>)
 80061b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80061b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061b6:	f7fa fb01 	bl	80007bc <HAL_GetTick>
 80061ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80061bc:	e008      	b.n	80061d0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80061be:	f7fa fafd 	bl	80007bc <HAL_GetTick>
 80061c2:	4602      	mov	r2, r0
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	1ad3      	subs	r3, r2, r3
 80061c8:	2b02      	cmp	r3, #2
 80061ca:	d901      	bls.n	80061d0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80061cc:	2303      	movs	r3, #3
 80061ce:	e006      	b.n	80061de <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80061d0:	4b05      	ldr	r3, [pc, #20]	; (80061e8 <RCCEx_PLL2_Config+0x15c>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d0f0      	beq.n	80061be <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80061dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3710      	adds	r7, #16
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
 80061e6:	bf00      	nop
 80061e8:	58024400 	.word	0x58024400
 80061ec:	ffff0007 	.word	0xffff0007

080061f0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b084      	sub	sp, #16
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80061fa:	2300      	movs	r3, #0
 80061fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80061fe:	4b53      	ldr	r3, [pc, #332]	; (800634c <RCCEx_PLL3_Config+0x15c>)
 8006200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006202:	f003 0303 	and.w	r3, r3, #3
 8006206:	2b03      	cmp	r3, #3
 8006208:	d101      	bne.n	800620e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	e099      	b.n	8006342 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800620e:	4b4f      	ldr	r3, [pc, #316]	; (800634c <RCCEx_PLL3_Config+0x15c>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a4e      	ldr	r2, [pc, #312]	; (800634c <RCCEx_PLL3_Config+0x15c>)
 8006214:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006218:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800621a:	f7fa facf 	bl	80007bc <HAL_GetTick>
 800621e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006220:	e008      	b.n	8006234 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006222:	f7fa facb 	bl	80007bc <HAL_GetTick>
 8006226:	4602      	mov	r2, r0
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	1ad3      	subs	r3, r2, r3
 800622c:	2b02      	cmp	r3, #2
 800622e:	d901      	bls.n	8006234 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006230:	2303      	movs	r3, #3
 8006232:	e086      	b.n	8006342 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006234:	4b45      	ldr	r3, [pc, #276]	; (800634c <RCCEx_PLL3_Config+0x15c>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800623c:	2b00      	cmp	r3, #0
 800623e:	d1f0      	bne.n	8006222 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006240:	4b42      	ldr	r3, [pc, #264]	; (800634c <RCCEx_PLL3_Config+0x15c>)
 8006242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006244:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	051b      	lsls	r3, r3, #20
 800624e:	493f      	ldr	r1, [pc, #252]	; (800634c <RCCEx_PLL3_Config+0x15c>)
 8006250:	4313      	orrs	r3, r2
 8006252:	628b      	str	r3, [r1, #40]	; 0x28
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	3b01      	subs	r3, #1
 800625a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	3b01      	subs	r3, #1
 8006264:	025b      	lsls	r3, r3, #9
 8006266:	b29b      	uxth	r3, r3
 8006268:	431a      	orrs	r2, r3
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	68db      	ldr	r3, [r3, #12]
 800626e:	3b01      	subs	r3, #1
 8006270:	041b      	lsls	r3, r3, #16
 8006272:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006276:	431a      	orrs	r2, r3
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	691b      	ldr	r3, [r3, #16]
 800627c:	3b01      	subs	r3, #1
 800627e:	061b      	lsls	r3, r3, #24
 8006280:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006284:	4931      	ldr	r1, [pc, #196]	; (800634c <RCCEx_PLL3_Config+0x15c>)
 8006286:	4313      	orrs	r3, r2
 8006288:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800628a:	4b30      	ldr	r3, [pc, #192]	; (800634c <RCCEx_PLL3_Config+0x15c>)
 800628c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800628e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	695b      	ldr	r3, [r3, #20]
 8006296:	492d      	ldr	r1, [pc, #180]	; (800634c <RCCEx_PLL3_Config+0x15c>)
 8006298:	4313      	orrs	r3, r2
 800629a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800629c:	4b2b      	ldr	r3, [pc, #172]	; (800634c <RCCEx_PLL3_Config+0x15c>)
 800629e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062a0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	699b      	ldr	r3, [r3, #24]
 80062a8:	4928      	ldr	r1, [pc, #160]	; (800634c <RCCEx_PLL3_Config+0x15c>)
 80062aa:	4313      	orrs	r3, r2
 80062ac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80062ae:	4b27      	ldr	r3, [pc, #156]	; (800634c <RCCEx_PLL3_Config+0x15c>)
 80062b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062b2:	4a26      	ldr	r2, [pc, #152]	; (800634c <RCCEx_PLL3_Config+0x15c>)
 80062b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80062ba:	4b24      	ldr	r3, [pc, #144]	; (800634c <RCCEx_PLL3_Config+0x15c>)
 80062bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062be:	4b24      	ldr	r3, [pc, #144]	; (8006350 <RCCEx_PLL3_Config+0x160>)
 80062c0:	4013      	ands	r3, r2
 80062c2:	687a      	ldr	r2, [r7, #4]
 80062c4:	69d2      	ldr	r2, [r2, #28]
 80062c6:	00d2      	lsls	r2, r2, #3
 80062c8:	4920      	ldr	r1, [pc, #128]	; (800634c <RCCEx_PLL3_Config+0x15c>)
 80062ca:	4313      	orrs	r3, r2
 80062cc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80062ce:	4b1f      	ldr	r3, [pc, #124]	; (800634c <RCCEx_PLL3_Config+0x15c>)
 80062d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d2:	4a1e      	ldr	r2, [pc, #120]	; (800634c <RCCEx_PLL3_Config+0x15c>)
 80062d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d106      	bne.n	80062ee <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80062e0:	4b1a      	ldr	r3, [pc, #104]	; (800634c <RCCEx_PLL3_Config+0x15c>)
 80062e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062e4:	4a19      	ldr	r2, [pc, #100]	; (800634c <RCCEx_PLL3_Config+0x15c>)
 80062e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80062ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 80062ec:	e00f      	b.n	800630e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d106      	bne.n	8006302 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80062f4:	4b15      	ldr	r3, [pc, #84]	; (800634c <RCCEx_PLL3_Config+0x15c>)
 80062f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f8:	4a14      	ldr	r2, [pc, #80]	; (800634c <RCCEx_PLL3_Config+0x15c>)
 80062fa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80062fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006300:	e005      	b.n	800630e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006302:	4b12      	ldr	r3, [pc, #72]	; (800634c <RCCEx_PLL3_Config+0x15c>)
 8006304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006306:	4a11      	ldr	r2, [pc, #68]	; (800634c <RCCEx_PLL3_Config+0x15c>)
 8006308:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800630c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800630e:	4b0f      	ldr	r3, [pc, #60]	; (800634c <RCCEx_PLL3_Config+0x15c>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a0e      	ldr	r2, [pc, #56]	; (800634c <RCCEx_PLL3_Config+0x15c>)
 8006314:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006318:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800631a:	f7fa fa4f 	bl	80007bc <HAL_GetTick>
 800631e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006320:	e008      	b.n	8006334 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006322:	f7fa fa4b 	bl	80007bc <HAL_GetTick>
 8006326:	4602      	mov	r2, r0
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	1ad3      	subs	r3, r2, r3
 800632c:	2b02      	cmp	r3, #2
 800632e:	d901      	bls.n	8006334 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006330:	2303      	movs	r3, #3
 8006332:	e006      	b.n	8006342 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006334:	4b05      	ldr	r3, [pc, #20]	; (800634c <RCCEx_PLL3_Config+0x15c>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800633c:	2b00      	cmp	r3, #0
 800633e:	d0f0      	beq.n	8006322 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006340:	7bfb      	ldrb	r3, [r7, #15]
}
 8006342:	4618      	mov	r0, r3
 8006344:	3710      	adds	r7, #16
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}
 800634a:	bf00      	nop
 800634c:	58024400 	.word	0x58024400
 8006350:	ffff0007 	.word	0xffff0007

08006354 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b086      	sub	sp, #24
 8006358:	af00      	add	r7, sp, #0
 800635a:	60f8      	str	r0, [r7, #12]
 800635c:	60b9      	str	r1, [r7, #8]
 800635e:	607a      	str	r2, [r7, #4]
 8006360:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	2b02      	cmp	r3, #2
 8006366:	d904      	bls.n	8006372 <HAL_SAI_InitProtocol+0x1e>
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	3b03      	subs	r3, #3
 800636c:	2b01      	cmp	r3, #1
 800636e:	d812      	bhi.n	8006396 <HAL_SAI_InitProtocol+0x42>
 8006370:	e008      	b.n	8006384 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	687a      	ldr	r2, [r7, #4]
 8006376:	68b9      	ldr	r1, [r7, #8]
 8006378:	68f8      	ldr	r0, [r7, #12]
 800637a:	f000 fbe9 	bl	8006b50 <SAI_InitI2S>
 800637e:	4603      	mov	r3, r0
 8006380:	75fb      	strb	r3, [r7, #23]
      break;
 8006382:	e00b      	b.n	800639c <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	687a      	ldr	r2, [r7, #4]
 8006388:	68b9      	ldr	r1, [r7, #8]
 800638a:	68f8      	ldr	r0, [r7, #12]
 800638c:	f000 fc92 	bl	8006cb4 <SAI_InitPCM>
 8006390:	4603      	mov	r3, r0
 8006392:	75fb      	strb	r3, [r7, #23]
      break;
 8006394:	e002      	b.n	800639c <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	75fb      	strb	r3, [r7, #23]
      break;
 800639a:	bf00      	nop
  }

  if (status == HAL_OK)
 800639c:	7dfb      	ldrb	r3, [r7, #23]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d104      	bne.n	80063ac <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 80063a2:	68f8      	ldr	r0, [r7, #12]
 80063a4:	f000 f808 	bl	80063b8 <HAL_SAI_Init>
 80063a8:	4603      	mov	r3, r0
 80063aa:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80063ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3718      	adds	r7, #24
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}
	...

080063b8 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b08a      	sub	sp, #40	; 0x28
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d101      	bne.n	80063ca <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	e1fb      	b.n	80067c2 <HAL_SAI_Init+0x40a>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d113      	bne.n	80063fc <HAL_SAI_Init+0x44>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a96      	ldr	r2, [pc, #600]	; (8006634 <HAL_SAI_Init+0x27c>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d004      	beq.n	80063e8 <HAL_SAI_Init+0x30>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a95      	ldr	r2, [pc, #596]	; (8006638 <HAL_SAI_Init+0x280>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d107      	bne.n	80063f8 <HAL_SAI_Init+0x40>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d103      	bne.n	80063f8 <HAL_SAI_Init+0x40>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d001      	beq.n	80063fc <HAL_SAI_Init+0x44>
    {
      return HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	e1e2      	b.n	80067c2 <HAL_SAI_Init+0x40a>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a8c      	ldr	r2, [pc, #560]	; (8006634 <HAL_SAI_Init+0x27c>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d004      	beq.n	8006410 <HAL_SAI_Init+0x58>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a8c      	ldr	r2, [pc, #560]	; (800663c <HAL_SAI_Init+0x284>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d102      	bne.n	8006416 <HAL_SAI_Init+0x5e>
  {
    SaiBaseAddress = SAI1;
 8006410:	4b8b      	ldr	r3, [pc, #556]	; (8006640 <HAL_SAI_Init+0x288>)
 8006412:	61bb      	str	r3, [r7, #24]
 8006414:	e00e      	b.n	8006434 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI3;
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a87      	ldr	r2, [pc, #540]	; (8006638 <HAL_SAI_Init+0x280>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d004      	beq.n	800642a <HAL_SAI_Init+0x72>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a87      	ldr	r2, [pc, #540]	; (8006644 <HAL_SAI_Init+0x28c>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d102      	bne.n	8006430 <HAL_SAI_Init+0x78>
  {
    SaiBaseAddress = SAI4;
 800642a:	4b87      	ldr	r3, [pc, #540]	; (8006648 <HAL_SAI_Init+0x290>)
 800642c:	61bb      	str	r3, [r7, #24]
 800642e:	e001      	b.n	8006434 <HAL_SAI_Init+0x7c>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	e1c6      	b.n	80067c2 <HAL_SAI_Init+0x40a>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800643a:	b2db      	uxtb	r3, r3
 800643c:	2b00      	cmp	r3, #0
 800643e:	d106      	bne.n	800644e <HAL_SAI_Init+0x96>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2200      	movs	r2, #0
 8006444:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f002 fadf 	bl	8008a0c <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 fcea 	bl	8006e28 <SAI_Disable>
 8006454:	4603      	mov	r3, r0
 8006456:	2b00      	cmp	r3, #0
 8006458:	d001      	beq.n	800645e <HAL_SAI_Init+0xa6>
  {
    return HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	e1b1      	b.n	80067c2 <HAL_SAI_Init+0x40a>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2202      	movs	r2, #2
 8006462:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	68db      	ldr	r3, [r3, #12]
 800646a:	2b02      	cmp	r3, #2
 800646c:	d00c      	beq.n	8006488 <HAL_SAI_Init+0xd0>
 800646e:	2b02      	cmp	r3, #2
 8006470:	d80d      	bhi.n	800648e <HAL_SAI_Init+0xd6>
 8006472:	2b00      	cmp	r3, #0
 8006474:	d002      	beq.n	800647c <HAL_SAI_Init+0xc4>
 8006476:	2b01      	cmp	r3, #1
 8006478:	d003      	beq.n	8006482 <HAL_SAI_Init+0xca>
 800647a:	e008      	b.n	800648e <HAL_SAI_Init+0xd6>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800647c:	2300      	movs	r3, #0
 800647e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006480:	e008      	b.n	8006494 <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8006482:	2310      	movs	r3, #16
 8006484:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006486:	e005      	b.n	8006494 <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8006488:	2320      	movs	r3, #32
 800648a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800648c:	e002      	b.n	8006494 <HAL_SAI_Init+0xdc>
    default:
      tmpregisterGCR = 0;
 800648e:	2300      	movs	r3, #0
 8006490:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006492:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	2b05      	cmp	r3, #5
 800649a:	d822      	bhi.n	80064e2 <HAL_SAI_Init+0x12a>
 800649c:	a201      	add	r2, pc, #4	; (adr r2, 80064a4 <HAL_SAI_Init+0xec>)
 800649e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064a2:	bf00      	nop
 80064a4:	080064bd 	.word	0x080064bd
 80064a8:	080064c3 	.word	0x080064c3
 80064ac:	080064cb 	.word	0x080064cb
 80064b0:	080064e3 	.word	0x080064e3
 80064b4:	080064e3 	.word	0x080064e3
 80064b8:	080064d3 	.word	0x080064d3
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 80064bc:	2300      	movs	r3, #0
 80064be:	61fb      	str	r3, [r7, #28]
      break;
 80064c0:	e012      	b.n	80064e8 <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80064c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80064c6:	61fb      	str	r3, [r7, #28]
      break;
 80064c8:	e00e      	b.n	80064e8 <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80064ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80064ce:	61fb      	str	r3, [r7, #28]
      break;
 80064d0:	e00a      	b.n	80064e8 <HAL_SAI_Init+0x130>
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
      break;
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80064d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80064d6:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 80064d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064da:	f043 0303 	orr.w	r3, r3, #3
 80064de:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80064e0:	e002      	b.n	80064e8 <HAL_SAI_Init+0x130>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 80064e2:	2300      	movs	r3, #0
 80064e4:	61fb      	str	r3, [r7, #28]
      break;
 80064e6:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 80064e8:	69bb      	ldr	r3, [r7, #24]
 80064ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064ec:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6a1b      	ldr	r3, [r3, #32]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	f000 8084 	beq.w	8006600 <HAL_SAI_Init+0x248>
  {
    uint32_t freq = 0;
 80064f8:	2300      	movs	r3, #0
 80064fa:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a4c      	ldr	r2, [pc, #304]	; (8006634 <HAL_SAI_Init+0x27c>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d004      	beq.n	8006510 <HAL_SAI_Init+0x158>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a4c      	ldr	r2, [pc, #304]	; (800663c <HAL_SAI_Init+0x284>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d104      	bne.n	800651a <HAL_SAI_Init+0x162>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8006510:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006514:	f7fe fd86 	bl	8005024 <HAL_RCCEx_GetPeriphCLKFreq>
 8006518:	6178      	str	r0, [r7, #20]
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a46      	ldr	r2, [pc, #280]	; (8006638 <HAL_SAI_Init+0x280>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d104      	bne.n	800652e <HAL_SAI_Init+0x176>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8006524:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8006528:	f7fe fd7c 	bl	8005024 <HAL_RCCEx_GetPeriphCLKFreq>
 800652c:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a44      	ldr	r2, [pc, #272]	; (8006644 <HAL_SAI_Init+0x28c>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d104      	bne.n	8006542 <HAL_SAI_Init+0x18a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8006538:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800653c:	f7fe fd72 	bl	8005024 <HAL_RCCEx_GetPeriphCLKFreq>
 8006540:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	699b      	ldr	r3, [r3, #24]
 8006546:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800654a:	d120      	bne.n	800658e <HAL_SAI_Init+0x1d6>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006550:	2b04      	cmp	r3, #4
 8006552:	d102      	bne.n	800655a <HAL_SAI_Init+0x1a2>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 8006554:	2340      	movs	r3, #64	; 0x40
 8006556:	60fb      	str	r3, [r7, #12]
 8006558:	e00a      	b.n	8006570 <HAL_SAI_Init+0x1b8>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800655e:	2b08      	cmp	r3, #8
 8006560:	d103      	bne.n	800656a <HAL_SAI_Init+0x1b2>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 8006562:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006566:	60fb      	str	r3, [r7, #12]
 8006568:	e002      	b.n	8006570 <HAL_SAI_Init+0x1b8>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800656e:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8006570:	697a      	ldr	r2, [r7, #20]
 8006572:	4613      	mov	r3, r2
 8006574:	009b      	lsls	r3, r3, #2
 8006576:	4413      	add	r3, r2
 8006578:	005b      	lsls	r3, r3, #1
 800657a:	4619      	mov	r1, r3
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6a1b      	ldr	r3, [r3, #32]
 8006580:	68fa      	ldr	r2, [r7, #12]
 8006582:	fb02 f303 	mul.w	r3, r2, r3
 8006586:	fbb1 f3f3 	udiv	r3, r1, r3
 800658a:	613b      	str	r3, [r7, #16]
 800658c:	e017      	b.n	80065be <HAL_SAI_Init+0x206>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006592:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006596:	d101      	bne.n	800659c <HAL_SAI_Init+0x1e4>
 8006598:	2302      	movs	r3, #2
 800659a:	e000      	b.n	800659e <HAL_SAI_Init+0x1e6>
 800659c:	2301      	movs	r3, #1
 800659e:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 80065a0:	697a      	ldr	r2, [r7, #20]
 80065a2:	4613      	mov	r3, r2
 80065a4:	009b      	lsls	r3, r3, #2
 80065a6:	4413      	add	r3, r2
 80065a8:	005b      	lsls	r3, r3, #1
 80065aa:	4619      	mov	r1, r3
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6a1b      	ldr	r3, [r3, #32]
 80065b0:	68ba      	ldr	r2, [r7, #8]
 80065b2:	fb02 f303 	mul.w	r3, r2, r3
 80065b6:	021b      	lsls	r3, r3, #8
 80065b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80065bc:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	4a22      	ldr	r2, [pc, #136]	; (800664c <HAL_SAI_Init+0x294>)
 80065c2:	fba2 2303 	umull	r2, r3, r2, r3
 80065c6:	08da      	lsrs	r2, r3, #3
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 80065cc:	6939      	ldr	r1, [r7, #16]
 80065ce:	4b1f      	ldr	r3, [pc, #124]	; (800664c <HAL_SAI_Init+0x294>)
 80065d0:	fba3 2301 	umull	r2, r3, r3, r1
 80065d4:	08da      	lsrs	r2, r3, #3
 80065d6:	4613      	mov	r3, r2
 80065d8:	009b      	lsls	r3, r3, #2
 80065da:	4413      	add	r3, r2
 80065dc:	005b      	lsls	r3, r3, #1
 80065de:	1aca      	subs	r2, r1, r3
 80065e0:	2a08      	cmp	r2, #8
 80065e2:	d904      	bls.n	80065ee <HAL_SAI_Init+0x236>
    {
      hsai->Init.Mckdiv += 1U;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e8:	1c5a      	adds	r2, r3, #1
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065f2:	2b04      	cmp	r3, #4
 80065f4:	d104      	bne.n	8006600 <HAL_SAI_Init+0x248>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065fa:	085a      	lsrs	r2, r3, #1
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d003      	beq.n	8006610 <HAL_SAI_Init+0x258>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	2b02      	cmp	r3, #2
 800660e:	d109      	bne.n	8006624 <HAL_SAI_Init+0x26c>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006614:	2b01      	cmp	r3, #1
 8006616:	d101      	bne.n	800661c <HAL_SAI_Init+0x264>
 8006618:	2300      	movs	r3, #0
 800661a:	e001      	b.n	8006620 <HAL_SAI_Init+0x268>
 800661c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006620:	623b      	str	r3, [r7, #32]
 8006622:	e017      	b.n	8006654 <HAL_SAI_Init+0x29c>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006628:	2b01      	cmp	r3, #1
 800662a:	d111      	bne.n	8006650 <HAL_SAI_Init+0x298>
 800662c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006630:	e00f      	b.n	8006652 <HAL_SAI_Init+0x29a>
 8006632:	bf00      	nop
 8006634:	40015804 	.word	0x40015804
 8006638:	58005404 	.word	0x58005404
 800663c:	40015824 	.word	0x40015824
 8006640:	40015800 	.word	0x40015800
 8006644:	58005424 	.word	0x58005424
 8006648:	58005400 	.word	0x58005400
 800664c:	cccccccd 	.word	0xcccccccd
 8006650:	2300      	movs	r3, #0
 8006652:	623b      	str	r3, [r7, #32]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                            hsai->Init.MckOverSampling);
  }
#else /* SAI_VER_V2_1*/
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	6819      	ldr	r1, [r3, #0]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681a      	ldr	r2, [r3, #0]
 800665e:	4b5b      	ldr	r3, [pc, #364]	; (80067cc <HAL_SAI_Init+0x414>)
 8006660:	400b      	ands	r3, r1
 8006662:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	6819      	ldr	r1, [r3, #0]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	685a      	ldr	r2, [r3, #4]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006672:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006678:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800667e:	431a      	orrs	r2, r3
 8006680:	6a3b      	ldr	r3, [r7, #32]
 8006682:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8006684:	69fb      	ldr	r3, [r7, #28]
 8006686:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                          ckstr_bits | syncen_bits |                             \
 800668c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	695b      	ldr	r3, [r3, #20]
 8006692:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006698:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800669e:	051b      	lsls	r3, r3, #20
 80066a0:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80066a6:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	691b      	ldr	r3, [r3, #16]
 80066ac:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	430a      	orrs	r2, r1
 80066b4:	601a      	str	r2, [r3, #0]
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	6859      	ldr	r1, [r3, #4]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	4b43      	ldr	r3, [pc, #268]	; (80067d0 <HAL_SAI_Init+0x418>)
 80066c2:	400b      	ands	r3, r1
 80066c4:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	6859      	ldr	r1, [r3, #4]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	69da      	ldr	r2, [r3, #28]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066d4:	431a      	orrs	r2, r3
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066da:	431a      	orrs	r2, r3
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	430a      	orrs	r2, r1
 80066e2:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	6899      	ldr	r1, [r3, #8]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681a      	ldr	r2, [r3, #0]
 80066ee:	4b39      	ldr	r3, [pc, #228]	; (80067d4 <HAL_SAI_Init+0x41c>)
 80066f0:	400b      	ands	r3, r1
 80066f2:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	6899      	ldr	r1, [r3, #8]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066fe:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006704:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 800670a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 8006710:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006716:	3b01      	subs	r3, #1
 8006718:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800671a:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	430a      	orrs	r2, r1
 8006722:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	68d9      	ldr	r1, [r3, #12]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	f24f 0320 	movw	r3, #61472	; 0xf020
 8006732:	400b      	ands	r3, r1
 8006734:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	68d9      	ldr	r1, [r3, #12]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006744:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800674a:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800674c:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006752:	3b01      	subs	r3, #1
 8006754:	021b      	lsls	r3, r3, #8
 8006756:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	430a      	orrs	r2, r1
 800675e:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a1c      	ldr	r2, [pc, #112]	; (80067d8 <HAL_SAI_Init+0x420>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d004      	beq.n	8006774 <HAL_SAI_Init+0x3bc>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a1b      	ldr	r2, [pc, #108]	; (80067dc <HAL_SAI_Init+0x424>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d119      	bne.n	80067a8 <HAL_SAI_Init+0x3f0>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8006774:	69bb      	ldr	r3, [r7, #24]
 8006776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006778:	f023 0201 	bic.w	r2, r3, #1
 800677c:	69bb      	ldr	r3, [r7, #24]
 800677e:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006786:	2b01      	cmp	r3, #1
 8006788:	d10e      	bne.n	80067a8 <HAL_SAI_Init+0x3f0>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006792:	3b01      	subs	r3, #1
 8006794:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8006796:	431a      	orrs	r2, r3
 8006798:	69bb      	ldr	r3, [r7, #24]
 800679a:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800679c:	69bb      	ldr	r3, [r7, #24]
 800679e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067a0:	f043 0201 	orr.w	r2, r3, #1
 80067a4:	69bb      	ldr	r3, [r7, #24]
 80067a6:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2201      	movs	r2, #1
 80067b4:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 80067c0:	2300      	movs	r3, #0
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3728      	adds	r7, #40	; 0x28
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
 80067ca:	bf00      	nop
 80067cc:	f005c010 	.word	0xf005c010
 80067d0:	ffff1ff0 	.word	0xffff1ff0
 80067d4:	fff88000 	.word	0xfff88000
 80067d8:	40015804 	.word	0x40015804
 80067dc:	58005404 	.word	0x58005404

080067e0 <HAL_SAI_Receive>:
  * @param  Size Amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b086      	sub	sp, #24
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	60f8      	str	r0, [r7, #12]
 80067e8:	60b9      	str	r1, [r7, #8]
 80067ea:	603b      	str	r3, [r7, #0]
 80067ec:	4613      	mov	r3, r2
 80067ee:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 80067f0:	f7f9 ffe4 	bl	80007bc <HAL_GetTick>
 80067f4:	6178      	str	r0, [r7, #20]
  uint32_t temp;

  if ((pData == NULL) || (Size == 0U))
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d002      	beq.n	8006802 <HAL_SAI_Receive+0x22>
 80067fc:	88fb      	ldrh	r3, [r7, #6]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d101      	bne.n	8006806 <HAL_SAI_Receive+0x26>
  {
    return  HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	e0e9      	b.n	80069da <HAL_SAI_Receive+0x1fa>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800680c:	b2db      	uxtb	r3, r3
 800680e:	2b01      	cmp	r3, #1
 8006810:	f040 80e2 	bne.w	80069d8 <HAL_SAI_Receive+0x1f8>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800681a:	2b01      	cmp	r3, #1
 800681c:	d101      	bne.n	8006822 <HAL_SAI_Receive+0x42>
 800681e:	2302      	movs	r3, #2
 8006820:	e0db      	b.n	80069da <HAL_SAI_Receive+0x1fa>
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2201      	movs	r2, #1
 8006826:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	68ba      	ldr	r2, [r7, #8]
 800682e:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	88fa      	ldrh	r2, [r7, #6]
 8006834:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	88fa      	ldrh	r2, [r7, #6]
 800683c:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2222      	movs	r2, #34	; 0x22
 8006844:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2200      	movs	r2, #0
 800684c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800685a:	2b00      	cmp	r3, #0
 800685c:	f040 80ac 	bne.w	80069b8 <HAL_SAI_Receive+0x1d8>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800686e:	601a      	str	r2, [r3, #0]
    }

    /* Receive data */
    while (hsai->XferCount > 0U)
 8006870:	e0a2      	b.n	80069b8 <HAL_SAI_Receive+0x1d8>
    {
      if ((hsai->Instance->SR & SAI_xSR_FLVL) != SAI_FIFOSTATUS_EMPTY)
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	695b      	ldr	r3, [r3, #20]
 8006878:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800687c:	2b00      	cmp	r3, #0
 800687e:	d06a      	beq.n	8006956 <HAL_SAI_Receive+0x176>
      {
        if ((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006884:	2b40      	cmp	r3, #64	; 0x40
 8006886:	d110      	bne.n	80068aa <HAL_SAI_Receive+0xca>
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800688c:	2b00      	cmp	r3, #0
 800688e:	d10c      	bne.n	80068aa <HAL_SAI_Receive+0xca>
        {
          *hsai->pBuffPtr = (uint8_t)hsai->Instance->DR;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	69da      	ldr	r2, [r3, #28]
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800689a:	b2d2      	uxtb	r2, r2
 800689c:	701a      	strb	r2, [r3, #0]
          hsai->pBuffPtr++;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068a2:	1c5a      	adds	r2, r3, #1
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	679a      	str	r2, [r3, #120]	; 0x78
 80068a8:	e04c      	b.n	8006944 <HAL_SAI_Receive+0x164>
        }
        else if (hsai->Init.DataSize <= SAI_DATASIZE_16)
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068ae:	2b80      	cmp	r3, #128	; 0x80
 80068b0:	d819      	bhi.n	80068e6 <HAL_SAI_Receive+0x106>
        {
          temp = hsai->Instance->DR;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	69db      	ldr	r3, [r3, #28]
 80068b8:	613b      	str	r3, [r7, #16]
          *hsai->pBuffPtr = (uint8_t)temp;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068be:	693a      	ldr	r2, [r7, #16]
 80068c0:	b2d2      	uxtb	r2, r2
 80068c2:	701a      	strb	r2, [r3, #0]
          hsai->pBuffPtr++;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068c8:	1c5a      	adds	r2, r3, #1
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	679a      	str	r2, [r3, #120]	; 0x78
          *hsai->pBuffPtr = (uint8_t)(temp >> 8);
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	0a1a      	lsrs	r2, r3, #8
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068d6:	b2d2      	uxtb	r2, r2
 80068d8:	701a      	strb	r2, [r3, #0]
          hsai->pBuffPtr++;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068de:	1c5a      	adds	r2, r3, #1
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	679a      	str	r2, [r3, #120]	; 0x78
 80068e4:	e02e      	b.n	8006944 <HAL_SAI_Receive+0x164>
        }
        else
        {
          temp = hsai->Instance->DR;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	69db      	ldr	r3, [r3, #28]
 80068ec:	613b      	str	r3, [r7, #16]
          *hsai->pBuffPtr = (uint8_t)temp;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068f2:	693a      	ldr	r2, [r7, #16]
 80068f4:	b2d2      	uxtb	r2, r2
 80068f6:	701a      	strb	r2, [r3, #0]
          hsai->pBuffPtr++;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068fc:	1c5a      	adds	r2, r3, #1
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	679a      	str	r2, [r3, #120]	; 0x78
          *hsai->pBuffPtr = (uint8_t)(temp >> 8);
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	0a1a      	lsrs	r2, r3, #8
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800690a:	b2d2      	uxtb	r2, r2
 800690c:	701a      	strb	r2, [r3, #0]
          hsai->pBuffPtr++;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006912:	1c5a      	adds	r2, r3, #1
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	679a      	str	r2, [r3, #120]	; 0x78
          *hsai->pBuffPtr = (uint8_t)(temp >> 16);
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	0c1a      	lsrs	r2, r3, #16
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006920:	b2d2      	uxtb	r2, r2
 8006922:	701a      	strb	r2, [r3, #0]
          hsai->pBuffPtr++;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006928:	1c5a      	adds	r2, r3, #1
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	679a      	str	r2, [r3, #120]	; 0x78
          *hsai->pBuffPtr = (uint8_t)(temp >> 24);
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	0e1a      	lsrs	r2, r3, #24
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006936:	b2d2      	uxtb	r2, r2
 8006938:	701a      	strb	r2, [r3, #0]
          hsai->pBuffPtr++;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800693e:	1c5a      	adds	r2, r3, #1
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	679a      	str	r2, [r3, #120]	; 0x78
        }
        hsai->XferCount--;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 800694a:	3b01      	subs	r3, #1
 800694c:	b29a      	uxth	r2, r3
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
 8006954:	e030      	b.n	80069b8 <HAL_SAI_Receive+0x1d8>
      }
      else
      {
        /* Check for the Timeout */
        if ((((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U)) && (Timeout != HAL_MAX_DELAY))
 8006956:	f7f9 ff31 	bl	80007bc <HAL_GetTick>
 800695a:	4602      	mov	r2, r0
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	1ad3      	subs	r3, r2, r3
 8006960:	683a      	ldr	r2, [r7, #0]
 8006962:	429a      	cmp	r2, r3
 8006964:	d302      	bcc.n	800696c <HAL_SAI_Receive+0x18c>
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d125      	bne.n	80069b8 <HAL_SAI_Receive+0x1d8>
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006972:	d021      	beq.n	80069b8 <HAL_SAI_Receive+0x1d8>
        {
          /* Update error code */
          hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800697a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

          /* Clear all the flags */
          hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800698c:	619a      	str	r2, [r3, #24]

          /* Disable SAI peripheral */
          /* No need to check return value because state update, unlock and error return will be performed later */
          (void) SAI_Disable(hsai);
 800698e:	68f8      	ldr	r0, [r7, #12]
 8006990:	f000 fa4a 	bl	8006e28 <SAI_Disable>

          /* Flush the fifo */
          SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	685a      	ldr	r2, [r3, #4]
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f042 0208 	orr.w	r2, r2, #8
 80069a2:	605a      	str	r2, [r3, #4]

          /* Change the SAI state */
          hsai->State = HAL_SAI_STATE_READY;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

          /* Process Unlocked */
          __HAL_UNLOCK(hsai);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

          return HAL_ERROR;
 80069b4:	2301      	movs	r3, #1
 80069b6:	e010      	b.n	80069da <HAL_SAI_Receive+0x1fa>
    while (hsai->XferCount > 0U)
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 80069be:	2b00      	cmp	r3, #0
 80069c0:	f47f af57 	bne.w	8006872 <HAL_SAI_Receive+0x92>
        }
      }
    }

    hsai->State = HAL_SAI_STATE_READY;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2201      	movs	r2, #1
 80069c8:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2200      	movs	r2, #0
 80069d0:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 80069d4:	2300      	movs	r3, #0
 80069d6:	e000      	b.n	80069da <HAL_SAI_Receive+0x1fa>
  }
  else
  {
    return HAL_BUSY;
 80069d8:	2302      	movs	r3, #2
  }
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3718      	adds	r7, #24
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
	...

080069e4 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b086      	sub	sp, #24
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	60f8      	str	r0, [r7, #12]
 80069ec:	60b9      	str	r1, [r7, #8]
 80069ee:	4613      	mov	r3, r2
 80069f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 80069f2:	f7f9 fee3 	bl	80007bc <HAL_GetTick>
 80069f6:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d002      	beq.n	8006a04 <HAL_SAI_Transmit_DMA+0x20>
 80069fe:	88fb      	ldrh	r3, [r7, #6]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d101      	bne.n	8006a08 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 8006a04:	2301      	movs	r3, #1
 8006a06:	e098      	b.n	8006b3a <HAL_SAI_Transmit_DMA+0x156>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8006a0e:	b2db      	uxtb	r3, r3
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	f040 8091 	bne.w	8006b38 <HAL_SAI_Transmit_DMA+0x154>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	d101      	bne.n	8006a24 <HAL_SAI_Transmit_DMA+0x40>
 8006a20:	2302      	movs	r3, #2
 8006a22:	e08a      	b.n	8006b3a <HAL_SAI_Transmit_DMA+0x156>
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2201      	movs	r2, #1
 8006a28:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	68ba      	ldr	r2, [r7, #8]
 8006a30:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	88fa      	ldrh	r2, [r7, #6]
 8006a36:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	88fa      	ldrh	r2, [r7, #6]
 8006a3e:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2200      	movs	r2, #0
 8006a46:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	2212      	movs	r2, #18
 8006a4e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a58:	4a3a      	ldr	r2, [pc, #232]	; (8006b44 <HAL_SAI_Transmit_DMA+0x160>)
 8006a5a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a62:	4a39      	ldr	r2, [pc, #228]	; (8006b48 <HAL_SAI_Transmit_DMA+0x164>)
 8006a64:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a6c:	4a37      	ldr	r2, [pc, #220]	; (8006b4c <HAL_SAI_Transmit_DMA+0x168>)
 8006a6e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a76:	2200      	movs	r2, #0
 8006a78:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a84:	4619      	mov	r1, r3
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	331c      	adds	r3, #28
 8006a8c:	461a      	mov	r2, r3
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8006a94:	f7fa fbf2 	bl	800127c <HAL_DMA_Start_IT>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d005      	beq.n	8006aaa <HAL_SAI_Transmit_DMA+0xc6>
    {
      __HAL_UNLOCK(hsai);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e047      	b.n	8006b3a <HAL_SAI_Transmit_DMA+0x156>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8006aaa:	2100      	movs	r1, #0
 8006aac:	68f8      	ldr	r0, [r7, #12]
 8006aae:	f000 f983 	bl	8006db8 <SAI_InterruptFlag>
 8006ab2:	4601      	mov	r1, r0
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	691a      	ldr	r2, [r3, #16]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	430a      	orrs	r2, r1
 8006ac0:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	681a      	ldr	r2, [r3, #0]
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8006ad0:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8006ad2:	e015      	b.n	8006b00 <HAL_SAI_Transmit_DMA+0x11c>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 8006ad4:	f7f9 fe72 	bl	80007bc <HAL_GetTick>
 8006ad8:	4602      	mov	r2, r0
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	1ad3      	subs	r3, r2, r3
 8006ade:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ae2:	d90d      	bls.n	8006b00 <HAL_SAI_Transmit_DMA+0x11c>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006aea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2200      	movs	r2, #0
 8006af8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

        return HAL_TIMEOUT;
 8006afc:	2303      	movs	r3, #3
 8006afe:	e01c      	b.n	8006b3a <HAL_SAI_Transmit_DMA+0x156>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	695b      	ldr	r3, [r3, #20]
 8006b06:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d0e2      	beq.n	8006ad4 <HAL_SAI_Transmit_DMA+0xf0>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d107      	bne.n	8006b2c <HAL_SAI_Transmit_DMA+0x148>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006b2a:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 8006b34:	2300      	movs	r3, #0
 8006b36:	e000      	b.n	8006b3a <HAL_SAI_Transmit_DMA+0x156>
  }
  else
  {
    return HAL_BUSY;
 8006b38:	2302      	movs	r3, #2
  }
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3718      	adds	r7, #24
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}
 8006b42:	bf00      	nop
 8006b44:	08006efd 	.word	0x08006efd
 8006b48:	08006e9d 	.word	0x08006e9d
 8006b4c:	08006f19 	.word	0x08006f19

08006b50 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b087      	sub	sp, #28
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	60f8      	str	r0, [r7, #12]
 8006b58:	60b9      	str	r1, [r7, #8]
 8006b5a:	607a      	str	r2, [r7, #4]
 8006b5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2200      	movs	r2, #0
 8006b66:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d003      	beq.n	8006b7e <SAI_InitI2S+0x2e>
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	2b02      	cmp	r3, #2
 8006b7c:	d103      	bne.n	8006b86 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2200      	movs	r2, #0
 8006b82:	651a      	str	r2, [r3, #80]	; 0x50
 8006b84:	e002      	b.n	8006b8c <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2201      	movs	r2, #1
 8006b8a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006b92:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006b9a:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	683a      	ldr	r2, [r7, #0]
 8006ba6:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	f003 0301 	and.w	r3, r3, #1
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d001      	beq.n	8006bb6 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	e077      	b.n	8006ca6 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d107      	bne.n	8006bcc <SAI_InitI2S+0x7c>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006bc8:	665a      	str	r2, [r3, #100]	; 0x64
 8006bca:	e006      	b.n	8006bda <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006bd2:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	665a      	str	r2, [r3, #100]	; 0x64
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2b03      	cmp	r3, #3
 8006bde:	d84f      	bhi.n	8006c80 <SAI_InitI2S+0x130>
 8006be0:	a201      	add	r2, pc, #4	; (adr r2, 8006be8 <SAI_InitI2S+0x98>)
 8006be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006be6:	bf00      	nop
 8006be8:	08006bf9 	.word	0x08006bf9
 8006bec:	08006c1b 	.word	0x08006c1b
 8006bf0:	08006c3d 	.word	0x08006c3d
 8006bf4:	08006c5f 	.word	0x08006c5f

  /* Frame definition */
  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2280      	movs	r2, #128	; 0x80
 8006bfc:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	085b      	lsrs	r3, r3, #1
 8006c02:	015a      	lsls	r2, r3, #5
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	085b      	lsrs	r3, r3, #1
 8006c0c:	011a      	lsls	r2, r3, #4
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2240      	movs	r2, #64	; 0x40
 8006c16:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8006c18:	e035      	b.n	8006c86 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2280      	movs	r2, #128	; 0x80
 8006c1e:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	085b      	lsrs	r3, r3, #1
 8006c24:	019a      	lsls	r2, r3, #6
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	085b      	lsrs	r3, r3, #1
 8006c2e:	015a      	lsls	r2, r3, #5
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2280      	movs	r2, #128	; 0x80
 8006c38:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8006c3a:	e024      	b.n	8006c86 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	22c0      	movs	r2, #192	; 0xc0
 8006c40:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	085b      	lsrs	r3, r3, #1
 8006c46:	019a      	lsls	r2, r3, #6
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	085b      	lsrs	r3, r3, #1
 8006c50:	015a      	lsls	r2, r3, #5
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2280      	movs	r2, #128	; 0x80
 8006c5a:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8006c5c:	e013      	b.n	8006c86 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	22e0      	movs	r2, #224	; 0xe0
 8006c62:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	085b      	lsrs	r3, r3, #1
 8006c68:	019a      	lsls	r2, r3, #6
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	085b      	lsrs	r3, r3, #1
 8006c72:	015a      	lsls	r2, r3, #5
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2280      	movs	r2, #128	; 0x80
 8006c7c:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8006c7e:	e002      	b.n	8006c86 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8006c80:	2301      	movs	r3, #1
 8006c82:	75fb      	strb	r3, [r7, #23]
      break;
 8006c84:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	2b02      	cmp	r3, #2
 8006c8a:	d10b      	bne.n	8006ca4 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2b01      	cmp	r3, #1
 8006c90:	d102      	bne.n	8006c98 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2210      	movs	r2, #16
 8006c96:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2b02      	cmp	r3, #2
 8006c9c:	d102      	bne.n	8006ca4 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2208      	movs	r2, #8
 8006ca2:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
 8006ca4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	371c      	adds	r7, #28
 8006caa:	46bd      	mov	sp, r7
 8006cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb0:	4770      	bx	lr
 8006cb2:	bf00      	nop

08006cb4 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b087      	sub	sp, #28
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	60f8      	str	r0, [r7, #12]
 8006cbc:	60b9      	str	r1, [r7, #8]
 8006cbe:	607a      	str	r2, [r7, #4]
 8006cc0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d003      	beq.n	8006ce2 <SAI_InitPCM+0x2e>
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	2b02      	cmp	r3, #2
 8006ce0:	d103      	bne.n	8006cea <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2201      	movs	r2, #1
 8006ce6:	651a      	str	r2, [r3, #80]	; 0x50
 8006ce8:	e002      	b.n	8006cf0 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2200      	movs	r2, #0
 8006cee:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006cfc:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006d04:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	683a      	ldr	r2, [r7, #0]
 8006d10:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006d18:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	2b04      	cmp	r3, #4
 8006d1e:	d103      	bne.n	8006d28 <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2201      	movs	r2, #1
 8006d24:	659a      	str	r2, [r3, #88]	; 0x58
 8006d26:	e002      	b.n	8006d2e <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	220d      	movs	r2, #13
 8006d2c:	659a      	str	r2, [r3, #88]	; 0x58
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2b03      	cmp	r3, #3
 8006d32:	d837      	bhi.n	8006da4 <SAI_InitPCM+0xf0>
 8006d34:	a201      	add	r2, pc, #4	; (adr r2, 8006d3c <SAI_InitPCM+0x88>)
 8006d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d3a:	bf00      	nop
 8006d3c:	08006d4d 	.word	0x08006d4d
 8006d40:	08006d63 	.word	0x08006d63
 8006d44:	08006d79 	.word	0x08006d79
 8006d48:	08006d8f 	.word	0x08006d8f
  }

  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2280      	movs	r2, #128	; 0x80
 8006d50:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	011a      	lsls	r2, r3, #4
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2240      	movs	r2, #64	; 0x40
 8006d5e:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8006d60:	e023      	b.n	8006daa <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2280      	movs	r2, #128	; 0x80
 8006d66:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	015a      	lsls	r2, r3, #5
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2280      	movs	r2, #128	; 0x80
 8006d74:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8006d76:	e018      	b.n	8006daa <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	22c0      	movs	r2, #192	; 0xc0
 8006d7c:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	015a      	lsls	r2, r3, #5
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2280      	movs	r2, #128	; 0x80
 8006d8a:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8006d8c:	e00d      	b.n	8006daa <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	22e0      	movs	r2, #224	; 0xe0
 8006d92:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	015a      	lsls	r2, r3, #5
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2280      	movs	r2, #128	; 0x80
 8006da0:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8006da2:	e002      	b.n	8006daa <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8006da4:	2301      	movs	r3, #1
 8006da6:	75fb      	strb	r3, [r7, #23]
      break;
 8006da8:	bf00      	nop
  }

  return status;
 8006daa:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	371c      	adds	r7, #28
 8006db0:	46bd      	mov	sp, r7
 8006db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db6:	4770      	bx	lr

08006db8 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b085      	sub	sp, #20
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
 8006dc0:	460b      	mov	r3, r1
 8006dc2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8006dc8:	78fb      	ldrb	r3, [r7, #3]
 8006dca:	2b01      	cmp	r3, #1
 8006dcc:	d103      	bne.n	8006dd6 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	f043 0308 	orr.w	r3, r3, #8
 8006dd4:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dda:	2b08      	cmp	r3, #8
 8006ddc:	d10b      	bne.n	8006df6 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8006de2:	2b03      	cmp	r3, #3
 8006de4:	d003      	beq.n	8006dee <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	2b01      	cmp	r3, #1
 8006dec:	d103      	bne.n	8006df6 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	f043 0310 	orr.w	r3, r3, #16
 8006df4:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	2b03      	cmp	r3, #3
 8006dfc:	d003      	beq.n	8006e06 <SAI_InterruptFlag+0x4e>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	2b02      	cmp	r3, #2
 8006e04:	d104      	bne.n	8006e10 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006e0c:	60fb      	str	r3, [r7, #12]
 8006e0e:	e003      	b.n	8006e18 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f043 0304 	orr.w	r3, r3, #4
 8006e16:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8006e18:	68fb      	ldr	r3, [r7, #12]
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3714      	adds	r7, #20
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e24:	4770      	bx	lr
	...

08006e28 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b085      	sub	sp, #20
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8006e30:	4b18      	ldr	r3, [pc, #96]	; (8006e94 <SAI_Disable+0x6c>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4a18      	ldr	r2, [pc, #96]	; (8006e98 <SAI_Disable+0x70>)
 8006e36:	fba2 2303 	umull	r2, r3, r2, r3
 8006e3a:	0b1b      	lsrs	r3, r3, #12
 8006e3c:	009b      	lsls	r3, r3, #2
 8006e3e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8006e40:	2300      	movs	r3, #0
 8006e42:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006e52:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d10a      	bne.n	8006e70 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e60:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 8006e6a:	2303      	movs	r3, #3
 8006e6c:	72fb      	strb	r3, [r7, #11]
      break;
 8006e6e:	e009      	b.n	8006e84 <SAI_Disable+0x5c>
    }
    count--;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	3b01      	subs	r3, #1
 8006e74:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d1e7      	bne.n	8006e54 <SAI_Disable+0x2c>

  return status;
 8006e84:	7afb      	ldrb	r3, [r7, #11]
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3714      	adds	r7, #20
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr
 8006e92:	bf00      	nop
 8006e94:	24000408 	.word	0x24000408
 8006e98:	95cbec1b 	.word	0x95cbec1b

08006e9c <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b084      	sub	sp, #16
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea8:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	69db      	ldr	r3, [r3, #28]
 8006eae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006eb2:	d01c      	beq.n	8006eee <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	681a      	ldr	r2, [r3, #0]
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8006eca:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8006ecc:	2100      	movs	r1, #0
 8006ece:	68f8      	ldr	r0, [r7, #12]
 8006ed0:	f7ff ff72 	bl	8006db8 <SAI_InterruptFlag>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	43d9      	mvns	r1, r3
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	691a      	ldr	r2, [r3, #16]
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	400a      	ands	r2, r1
 8006ee4:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2201      	movs	r2, #1
 8006eea:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 8006eee:	68f8      	ldr	r0, [r7, #12]
 8006ef0:	f7f9 fb8a 	bl	8000608 <HAL_SAI_TxCpltCallback>
#endif
}
 8006ef4:	bf00      	nop
 8006ef6:	3710      	adds	r7, #16
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}

08006efc <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b084      	sub	sp, #16
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f08:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 8006f0a:	68f8      	ldr	r0, [r7, #12]
 8006f0c:	f7f9 fb87 	bl	800061e <HAL_SAI_TxHalfCpltCallback>
#endif
}
 8006f10:	bf00      	nop
 8006f12:	3710      	adds	r7, #16
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}

08006f18 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b084      	sub	sp, #16
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f24:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f7fb fb3c 	bl	80025a4 <HAL_DMA_GetError>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	2b02      	cmp	r3, #2
 8006f30:	d01d      	beq.n	8006f6e <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f38:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	681a      	ldr	r2, [r3, #0]
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8006f50:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 8006f52:	68f8      	ldr	r0, [r7, #12]
 8006f54:	f7ff ff68 	bl	8006e28 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2200      	movs	r2, #0
 8006f64:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 8006f68:	68f8      	ldr	r0, [r7, #12]
 8006f6a:	f7f9 fb63 	bl	8000634 <HAL_SAI_ErrorCallback>
#endif
  }
}
 8006f6e:	bf00      	nop
 8006f70:	3710      	adds	r7, #16
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}

08006f76 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f76:	b580      	push	{r7, lr}
 8006f78:	b082      	sub	sp, #8
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d101      	bne.n	8006f88 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f84:	2301      	movs	r3, #1
 8006f86:	e042      	b.n	800700e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d106      	bne.n	8006fa0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f001 fcd0 	bl	8008940 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2224      	movs	r2, #36	; 0x24
 8006fa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	681a      	ldr	r2, [r3, #0]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f022 0201 	bic.w	r2, r2, #1
 8006fb6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f000 f82d 	bl	8007018 <UART_SetConfig>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d101      	bne.n	8006fc8 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	e022      	b.n	800700e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d002      	beq.n	8006fd6 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f000 fe7f 	bl	8007cd4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	685a      	ldr	r2, [r3, #4]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006fe4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	689a      	ldr	r2, [r3, #8]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006ff4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	681a      	ldr	r2, [r3, #0]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f042 0201 	orr.w	r2, r2, #1
 8007004:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f000 ff06 	bl	8007e18 <UART_CheckIdleState>
 800700c:	4603      	mov	r3, r0
}
 800700e:	4618      	mov	r0, r3
 8007010:	3708      	adds	r7, #8
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
	...

08007018 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007018:	b5b0      	push	{r4, r5, r7, lr}
 800701a:	b08e      	sub	sp, #56	; 0x38
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007020:	2300      	movs	r3, #0
 8007022:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	689a      	ldr	r2, [r3, #8]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	691b      	ldr	r3, [r3, #16]
 800702e:	431a      	orrs	r2, r3
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	695b      	ldr	r3, [r3, #20]
 8007034:	431a      	orrs	r2, r3
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	69db      	ldr	r3, [r3, #28]
 800703a:	4313      	orrs	r3, r2
 800703c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	681a      	ldr	r2, [r3, #0]
 8007044:	4bbf      	ldr	r3, [pc, #764]	; (8007344 <UART_SetConfig+0x32c>)
 8007046:	4013      	ands	r3, r2
 8007048:	687a      	ldr	r2, [r7, #4]
 800704a:	6812      	ldr	r2, [r2, #0]
 800704c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800704e:	430b      	orrs	r3, r1
 8007050:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	68da      	ldr	r2, [r3, #12]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	430a      	orrs	r2, r1
 8007066:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	699b      	ldr	r3, [r3, #24]
 800706c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4ab5      	ldr	r2, [pc, #724]	; (8007348 <UART_SetConfig+0x330>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d004      	beq.n	8007082 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6a1b      	ldr	r3, [r3, #32]
 800707c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800707e:	4313      	orrs	r3, r2
 8007080:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	689a      	ldr	r2, [r3, #8]
 8007088:	4bb0      	ldr	r3, [pc, #704]	; (800734c <UART_SetConfig+0x334>)
 800708a:	4013      	ands	r3, r2
 800708c:	687a      	ldr	r2, [r7, #4]
 800708e:	6812      	ldr	r2, [r2, #0]
 8007090:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007092:	430b      	orrs	r3, r1
 8007094:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800709c:	f023 010f 	bic.w	r1, r3, #15
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	430a      	orrs	r2, r1
 80070aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4aa7      	ldr	r2, [pc, #668]	; (8007350 <UART_SetConfig+0x338>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d176      	bne.n	80071a4 <UART_SetConfig+0x18c>
 80070b6:	4ba7      	ldr	r3, [pc, #668]	; (8007354 <UART_SetConfig+0x33c>)
 80070b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80070be:	2b28      	cmp	r3, #40	; 0x28
 80070c0:	d86c      	bhi.n	800719c <UART_SetConfig+0x184>
 80070c2:	a201      	add	r2, pc, #4	; (adr r2, 80070c8 <UART_SetConfig+0xb0>)
 80070c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070c8:	0800716d 	.word	0x0800716d
 80070cc:	0800719d 	.word	0x0800719d
 80070d0:	0800719d 	.word	0x0800719d
 80070d4:	0800719d 	.word	0x0800719d
 80070d8:	0800719d 	.word	0x0800719d
 80070dc:	0800719d 	.word	0x0800719d
 80070e0:	0800719d 	.word	0x0800719d
 80070e4:	0800719d 	.word	0x0800719d
 80070e8:	08007175 	.word	0x08007175
 80070ec:	0800719d 	.word	0x0800719d
 80070f0:	0800719d 	.word	0x0800719d
 80070f4:	0800719d 	.word	0x0800719d
 80070f8:	0800719d 	.word	0x0800719d
 80070fc:	0800719d 	.word	0x0800719d
 8007100:	0800719d 	.word	0x0800719d
 8007104:	0800719d 	.word	0x0800719d
 8007108:	0800717d 	.word	0x0800717d
 800710c:	0800719d 	.word	0x0800719d
 8007110:	0800719d 	.word	0x0800719d
 8007114:	0800719d 	.word	0x0800719d
 8007118:	0800719d 	.word	0x0800719d
 800711c:	0800719d 	.word	0x0800719d
 8007120:	0800719d 	.word	0x0800719d
 8007124:	0800719d 	.word	0x0800719d
 8007128:	08007185 	.word	0x08007185
 800712c:	0800719d 	.word	0x0800719d
 8007130:	0800719d 	.word	0x0800719d
 8007134:	0800719d 	.word	0x0800719d
 8007138:	0800719d 	.word	0x0800719d
 800713c:	0800719d 	.word	0x0800719d
 8007140:	0800719d 	.word	0x0800719d
 8007144:	0800719d 	.word	0x0800719d
 8007148:	0800718d 	.word	0x0800718d
 800714c:	0800719d 	.word	0x0800719d
 8007150:	0800719d 	.word	0x0800719d
 8007154:	0800719d 	.word	0x0800719d
 8007158:	0800719d 	.word	0x0800719d
 800715c:	0800719d 	.word	0x0800719d
 8007160:	0800719d 	.word	0x0800719d
 8007164:	0800719d 	.word	0x0800719d
 8007168:	08007195 	.word	0x08007195
 800716c:	2301      	movs	r3, #1
 800716e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007172:	e326      	b.n	80077c2 <UART_SetConfig+0x7aa>
 8007174:	2304      	movs	r3, #4
 8007176:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800717a:	e322      	b.n	80077c2 <UART_SetConfig+0x7aa>
 800717c:	2308      	movs	r3, #8
 800717e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007182:	e31e      	b.n	80077c2 <UART_SetConfig+0x7aa>
 8007184:	2310      	movs	r3, #16
 8007186:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800718a:	e31a      	b.n	80077c2 <UART_SetConfig+0x7aa>
 800718c:	2320      	movs	r3, #32
 800718e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007192:	e316      	b.n	80077c2 <UART_SetConfig+0x7aa>
 8007194:	2340      	movs	r3, #64	; 0x40
 8007196:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800719a:	e312      	b.n	80077c2 <UART_SetConfig+0x7aa>
 800719c:	2380      	movs	r3, #128	; 0x80
 800719e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071a2:	e30e      	b.n	80077c2 <UART_SetConfig+0x7aa>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a6b      	ldr	r2, [pc, #428]	; (8007358 <UART_SetConfig+0x340>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d130      	bne.n	8007210 <UART_SetConfig+0x1f8>
 80071ae:	4b69      	ldr	r3, [pc, #420]	; (8007354 <UART_SetConfig+0x33c>)
 80071b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071b2:	f003 0307 	and.w	r3, r3, #7
 80071b6:	2b05      	cmp	r3, #5
 80071b8:	d826      	bhi.n	8007208 <UART_SetConfig+0x1f0>
 80071ba:	a201      	add	r2, pc, #4	; (adr r2, 80071c0 <UART_SetConfig+0x1a8>)
 80071bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071c0:	080071d9 	.word	0x080071d9
 80071c4:	080071e1 	.word	0x080071e1
 80071c8:	080071e9 	.word	0x080071e9
 80071cc:	080071f1 	.word	0x080071f1
 80071d0:	080071f9 	.word	0x080071f9
 80071d4:	08007201 	.word	0x08007201
 80071d8:	2300      	movs	r3, #0
 80071da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071de:	e2f0      	b.n	80077c2 <UART_SetConfig+0x7aa>
 80071e0:	2304      	movs	r3, #4
 80071e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071e6:	e2ec      	b.n	80077c2 <UART_SetConfig+0x7aa>
 80071e8:	2308      	movs	r3, #8
 80071ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071ee:	e2e8      	b.n	80077c2 <UART_SetConfig+0x7aa>
 80071f0:	2310      	movs	r3, #16
 80071f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071f6:	e2e4      	b.n	80077c2 <UART_SetConfig+0x7aa>
 80071f8:	2320      	movs	r3, #32
 80071fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071fe:	e2e0      	b.n	80077c2 <UART_SetConfig+0x7aa>
 8007200:	2340      	movs	r3, #64	; 0x40
 8007202:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007206:	e2dc      	b.n	80077c2 <UART_SetConfig+0x7aa>
 8007208:	2380      	movs	r3, #128	; 0x80
 800720a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800720e:	e2d8      	b.n	80077c2 <UART_SetConfig+0x7aa>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a51      	ldr	r2, [pc, #324]	; (800735c <UART_SetConfig+0x344>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d130      	bne.n	800727c <UART_SetConfig+0x264>
 800721a:	4b4e      	ldr	r3, [pc, #312]	; (8007354 <UART_SetConfig+0x33c>)
 800721c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800721e:	f003 0307 	and.w	r3, r3, #7
 8007222:	2b05      	cmp	r3, #5
 8007224:	d826      	bhi.n	8007274 <UART_SetConfig+0x25c>
 8007226:	a201      	add	r2, pc, #4	; (adr r2, 800722c <UART_SetConfig+0x214>)
 8007228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800722c:	08007245 	.word	0x08007245
 8007230:	0800724d 	.word	0x0800724d
 8007234:	08007255 	.word	0x08007255
 8007238:	0800725d 	.word	0x0800725d
 800723c:	08007265 	.word	0x08007265
 8007240:	0800726d 	.word	0x0800726d
 8007244:	2300      	movs	r3, #0
 8007246:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800724a:	e2ba      	b.n	80077c2 <UART_SetConfig+0x7aa>
 800724c:	2304      	movs	r3, #4
 800724e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007252:	e2b6      	b.n	80077c2 <UART_SetConfig+0x7aa>
 8007254:	2308      	movs	r3, #8
 8007256:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800725a:	e2b2      	b.n	80077c2 <UART_SetConfig+0x7aa>
 800725c:	2310      	movs	r3, #16
 800725e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007262:	e2ae      	b.n	80077c2 <UART_SetConfig+0x7aa>
 8007264:	2320      	movs	r3, #32
 8007266:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800726a:	e2aa      	b.n	80077c2 <UART_SetConfig+0x7aa>
 800726c:	2340      	movs	r3, #64	; 0x40
 800726e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007272:	e2a6      	b.n	80077c2 <UART_SetConfig+0x7aa>
 8007274:	2380      	movs	r3, #128	; 0x80
 8007276:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800727a:	e2a2      	b.n	80077c2 <UART_SetConfig+0x7aa>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a37      	ldr	r2, [pc, #220]	; (8007360 <UART_SetConfig+0x348>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d130      	bne.n	80072e8 <UART_SetConfig+0x2d0>
 8007286:	4b33      	ldr	r3, [pc, #204]	; (8007354 <UART_SetConfig+0x33c>)
 8007288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800728a:	f003 0307 	and.w	r3, r3, #7
 800728e:	2b05      	cmp	r3, #5
 8007290:	d826      	bhi.n	80072e0 <UART_SetConfig+0x2c8>
 8007292:	a201      	add	r2, pc, #4	; (adr r2, 8007298 <UART_SetConfig+0x280>)
 8007294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007298:	080072b1 	.word	0x080072b1
 800729c:	080072b9 	.word	0x080072b9
 80072a0:	080072c1 	.word	0x080072c1
 80072a4:	080072c9 	.word	0x080072c9
 80072a8:	080072d1 	.word	0x080072d1
 80072ac:	080072d9 	.word	0x080072d9
 80072b0:	2300      	movs	r3, #0
 80072b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80072b6:	e284      	b.n	80077c2 <UART_SetConfig+0x7aa>
 80072b8:	2304      	movs	r3, #4
 80072ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80072be:	e280      	b.n	80077c2 <UART_SetConfig+0x7aa>
 80072c0:	2308      	movs	r3, #8
 80072c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80072c6:	e27c      	b.n	80077c2 <UART_SetConfig+0x7aa>
 80072c8:	2310      	movs	r3, #16
 80072ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80072ce:	e278      	b.n	80077c2 <UART_SetConfig+0x7aa>
 80072d0:	2320      	movs	r3, #32
 80072d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80072d6:	e274      	b.n	80077c2 <UART_SetConfig+0x7aa>
 80072d8:	2340      	movs	r3, #64	; 0x40
 80072da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80072de:	e270      	b.n	80077c2 <UART_SetConfig+0x7aa>
 80072e0:	2380      	movs	r3, #128	; 0x80
 80072e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80072e6:	e26c      	b.n	80077c2 <UART_SetConfig+0x7aa>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a1d      	ldr	r2, [pc, #116]	; (8007364 <UART_SetConfig+0x34c>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d142      	bne.n	8007378 <UART_SetConfig+0x360>
 80072f2:	4b18      	ldr	r3, [pc, #96]	; (8007354 <UART_SetConfig+0x33c>)
 80072f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072f6:	f003 0307 	and.w	r3, r3, #7
 80072fa:	2b05      	cmp	r3, #5
 80072fc:	d838      	bhi.n	8007370 <UART_SetConfig+0x358>
 80072fe:	a201      	add	r2, pc, #4	; (adr r2, 8007304 <UART_SetConfig+0x2ec>)
 8007300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007304:	0800731d 	.word	0x0800731d
 8007308:	08007325 	.word	0x08007325
 800730c:	0800732d 	.word	0x0800732d
 8007310:	08007335 	.word	0x08007335
 8007314:	0800733d 	.word	0x0800733d
 8007318:	08007369 	.word	0x08007369
 800731c:	2300      	movs	r3, #0
 800731e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007322:	e24e      	b.n	80077c2 <UART_SetConfig+0x7aa>
 8007324:	2304      	movs	r3, #4
 8007326:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800732a:	e24a      	b.n	80077c2 <UART_SetConfig+0x7aa>
 800732c:	2308      	movs	r3, #8
 800732e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007332:	e246      	b.n	80077c2 <UART_SetConfig+0x7aa>
 8007334:	2310      	movs	r3, #16
 8007336:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800733a:	e242      	b.n	80077c2 <UART_SetConfig+0x7aa>
 800733c:	2320      	movs	r3, #32
 800733e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007342:	e23e      	b.n	80077c2 <UART_SetConfig+0x7aa>
 8007344:	cfff69f3 	.word	0xcfff69f3
 8007348:	58000c00 	.word	0x58000c00
 800734c:	11fff4ff 	.word	0x11fff4ff
 8007350:	40011000 	.word	0x40011000
 8007354:	58024400 	.word	0x58024400
 8007358:	40004400 	.word	0x40004400
 800735c:	40004800 	.word	0x40004800
 8007360:	40004c00 	.word	0x40004c00
 8007364:	40005000 	.word	0x40005000
 8007368:	2340      	movs	r3, #64	; 0x40
 800736a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800736e:	e228      	b.n	80077c2 <UART_SetConfig+0x7aa>
 8007370:	2380      	movs	r3, #128	; 0x80
 8007372:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007376:	e224      	b.n	80077c2 <UART_SetConfig+0x7aa>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4ab1      	ldr	r2, [pc, #708]	; (8007644 <UART_SetConfig+0x62c>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d176      	bne.n	8007470 <UART_SetConfig+0x458>
 8007382:	4bb1      	ldr	r3, [pc, #708]	; (8007648 <UART_SetConfig+0x630>)
 8007384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007386:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800738a:	2b28      	cmp	r3, #40	; 0x28
 800738c:	d86c      	bhi.n	8007468 <UART_SetConfig+0x450>
 800738e:	a201      	add	r2, pc, #4	; (adr r2, 8007394 <UART_SetConfig+0x37c>)
 8007390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007394:	08007439 	.word	0x08007439
 8007398:	08007469 	.word	0x08007469
 800739c:	08007469 	.word	0x08007469
 80073a0:	08007469 	.word	0x08007469
 80073a4:	08007469 	.word	0x08007469
 80073a8:	08007469 	.word	0x08007469
 80073ac:	08007469 	.word	0x08007469
 80073b0:	08007469 	.word	0x08007469
 80073b4:	08007441 	.word	0x08007441
 80073b8:	08007469 	.word	0x08007469
 80073bc:	08007469 	.word	0x08007469
 80073c0:	08007469 	.word	0x08007469
 80073c4:	08007469 	.word	0x08007469
 80073c8:	08007469 	.word	0x08007469
 80073cc:	08007469 	.word	0x08007469
 80073d0:	08007469 	.word	0x08007469
 80073d4:	08007449 	.word	0x08007449
 80073d8:	08007469 	.word	0x08007469
 80073dc:	08007469 	.word	0x08007469
 80073e0:	08007469 	.word	0x08007469
 80073e4:	08007469 	.word	0x08007469
 80073e8:	08007469 	.word	0x08007469
 80073ec:	08007469 	.word	0x08007469
 80073f0:	08007469 	.word	0x08007469
 80073f4:	08007451 	.word	0x08007451
 80073f8:	08007469 	.word	0x08007469
 80073fc:	08007469 	.word	0x08007469
 8007400:	08007469 	.word	0x08007469
 8007404:	08007469 	.word	0x08007469
 8007408:	08007469 	.word	0x08007469
 800740c:	08007469 	.word	0x08007469
 8007410:	08007469 	.word	0x08007469
 8007414:	08007459 	.word	0x08007459
 8007418:	08007469 	.word	0x08007469
 800741c:	08007469 	.word	0x08007469
 8007420:	08007469 	.word	0x08007469
 8007424:	08007469 	.word	0x08007469
 8007428:	08007469 	.word	0x08007469
 800742c:	08007469 	.word	0x08007469
 8007430:	08007469 	.word	0x08007469
 8007434:	08007461 	.word	0x08007461
 8007438:	2301      	movs	r3, #1
 800743a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800743e:	e1c0      	b.n	80077c2 <UART_SetConfig+0x7aa>
 8007440:	2304      	movs	r3, #4
 8007442:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007446:	e1bc      	b.n	80077c2 <UART_SetConfig+0x7aa>
 8007448:	2308      	movs	r3, #8
 800744a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800744e:	e1b8      	b.n	80077c2 <UART_SetConfig+0x7aa>
 8007450:	2310      	movs	r3, #16
 8007452:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007456:	e1b4      	b.n	80077c2 <UART_SetConfig+0x7aa>
 8007458:	2320      	movs	r3, #32
 800745a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800745e:	e1b0      	b.n	80077c2 <UART_SetConfig+0x7aa>
 8007460:	2340      	movs	r3, #64	; 0x40
 8007462:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007466:	e1ac      	b.n	80077c2 <UART_SetConfig+0x7aa>
 8007468:	2380      	movs	r3, #128	; 0x80
 800746a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800746e:	e1a8      	b.n	80077c2 <UART_SetConfig+0x7aa>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a75      	ldr	r2, [pc, #468]	; (800764c <UART_SetConfig+0x634>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d130      	bne.n	80074dc <UART_SetConfig+0x4c4>
 800747a:	4b73      	ldr	r3, [pc, #460]	; (8007648 <UART_SetConfig+0x630>)
 800747c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800747e:	f003 0307 	and.w	r3, r3, #7
 8007482:	2b05      	cmp	r3, #5
 8007484:	d826      	bhi.n	80074d4 <UART_SetConfig+0x4bc>
 8007486:	a201      	add	r2, pc, #4	; (adr r2, 800748c <UART_SetConfig+0x474>)
 8007488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800748c:	080074a5 	.word	0x080074a5
 8007490:	080074ad 	.word	0x080074ad
 8007494:	080074b5 	.word	0x080074b5
 8007498:	080074bd 	.word	0x080074bd
 800749c:	080074c5 	.word	0x080074c5
 80074a0:	080074cd 	.word	0x080074cd
 80074a4:	2300      	movs	r3, #0
 80074a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074aa:	e18a      	b.n	80077c2 <UART_SetConfig+0x7aa>
 80074ac:	2304      	movs	r3, #4
 80074ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074b2:	e186      	b.n	80077c2 <UART_SetConfig+0x7aa>
 80074b4:	2308      	movs	r3, #8
 80074b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074ba:	e182      	b.n	80077c2 <UART_SetConfig+0x7aa>
 80074bc:	2310      	movs	r3, #16
 80074be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074c2:	e17e      	b.n	80077c2 <UART_SetConfig+0x7aa>
 80074c4:	2320      	movs	r3, #32
 80074c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074ca:	e17a      	b.n	80077c2 <UART_SetConfig+0x7aa>
 80074cc:	2340      	movs	r3, #64	; 0x40
 80074ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074d2:	e176      	b.n	80077c2 <UART_SetConfig+0x7aa>
 80074d4:	2380      	movs	r3, #128	; 0x80
 80074d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074da:	e172      	b.n	80077c2 <UART_SetConfig+0x7aa>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a5b      	ldr	r2, [pc, #364]	; (8007650 <UART_SetConfig+0x638>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d130      	bne.n	8007548 <UART_SetConfig+0x530>
 80074e6:	4b58      	ldr	r3, [pc, #352]	; (8007648 <UART_SetConfig+0x630>)
 80074e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074ea:	f003 0307 	and.w	r3, r3, #7
 80074ee:	2b05      	cmp	r3, #5
 80074f0:	d826      	bhi.n	8007540 <UART_SetConfig+0x528>
 80074f2:	a201      	add	r2, pc, #4	; (adr r2, 80074f8 <UART_SetConfig+0x4e0>)
 80074f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074f8:	08007511 	.word	0x08007511
 80074fc:	08007519 	.word	0x08007519
 8007500:	08007521 	.word	0x08007521
 8007504:	08007529 	.word	0x08007529
 8007508:	08007531 	.word	0x08007531
 800750c:	08007539 	.word	0x08007539
 8007510:	2300      	movs	r3, #0
 8007512:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007516:	e154      	b.n	80077c2 <UART_SetConfig+0x7aa>
 8007518:	2304      	movs	r3, #4
 800751a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800751e:	e150      	b.n	80077c2 <UART_SetConfig+0x7aa>
 8007520:	2308      	movs	r3, #8
 8007522:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007526:	e14c      	b.n	80077c2 <UART_SetConfig+0x7aa>
 8007528:	2310      	movs	r3, #16
 800752a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800752e:	e148      	b.n	80077c2 <UART_SetConfig+0x7aa>
 8007530:	2320      	movs	r3, #32
 8007532:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007536:	e144      	b.n	80077c2 <UART_SetConfig+0x7aa>
 8007538:	2340      	movs	r3, #64	; 0x40
 800753a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800753e:	e140      	b.n	80077c2 <UART_SetConfig+0x7aa>
 8007540:	2380      	movs	r3, #128	; 0x80
 8007542:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007546:	e13c      	b.n	80077c2 <UART_SetConfig+0x7aa>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a41      	ldr	r2, [pc, #260]	; (8007654 <UART_SetConfig+0x63c>)
 800754e:	4293      	cmp	r3, r2
 8007550:	f040 8082 	bne.w	8007658 <UART_SetConfig+0x640>
 8007554:	4b3c      	ldr	r3, [pc, #240]	; (8007648 <UART_SetConfig+0x630>)
 8007556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007558:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800755c:	2b28      	cmp	r3, #40	; 0x28
 800755e:	d86d      	bhi.n	800763c <UART_SetConfig+0x624>
 8007560:	a201      	add	r2, pc, #4	; (adr r2, 8007568 <UART_SetConfig+0x550>)
 8007562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007566:	bf00      	nop
 8007568:	0800760d 	.word	0x0800760d
 800756c:	0800763d 	.word	0x0800763d
 8007570:	0800763d 	.word	0x0800763d
 8007574:	0800763d 	.word	0x0800763d
 8007578:	0800763d 	.word	0x0800763d
 800757c:	0800763d 	.word	0x0800763d
 8007580:	0800763d 	.word	0x0800763d
 8007584:	0800763d 	.word	0x0800763d
 8007588:	08007615 	.word	0x08007615
 800758c:	0800763d 	.word	0x0800763d
 8007590:	0800763d 	.word	0x0800763d
 8007594:	0800763d 	.word	0x0800763d
 8007598:	0800763d 	.word	0x0800763d
 800759c:	0800763d 	.word	0x0800763d
 80075a0:	0800763d 	.word	0x0800763d
 80075a4:	0800763d 	.word	0x0800763d
 80075a8:	0800761d 	.word	0x0800761d
 80075ac:	0800763d 	.word	0x0800763d
 80075b0:	0800763d 	.word	0x0800763d
 80075b4:	0800763d 	.word	0x0800763d
 80075b8:	0800763d 	.word	0x0800763d
 80075bc:	0800763d 	.word	0x0800763d
 80075c0:	0800763d 	.word	0x0800763d
 80075c4:	0800763d 	.word	0x0800763d
 80075c8:	08007625 	.word	0x08007625
 80075cc:	0800763d 	.word	0x0800763d
 80075d0:	0800763d 	.word	0x0800763d
 80075d4:	0800763d 	.word	0x0800763d
 80075d8:	0800763d 	.word	0x0800763d
 80075dc:	0800763d 	.word	0x0800763d
 80075e0:	0800763d 	.word	0x0800763d
 80075e4:	0800763d 	.word	0x0800763d
 80075e8:	0800762d 	.word	0x0800762d
 80075ec:	0800763d 	.word	0x0800763d
 80075f0:	0800763d 	.word	0x0800763d
 80075f4:	0800763d 	.word	0x0800763d
 80075f8:	0800763d 	.word	0x0800763d
 80075fc:	0800763d 	.word	0x0800763d
 8007600:	0800763d 	.word	0x0800763d
 8007604:	0800763d 	.word	0x0800763d
 8007608:	08007635 	.word	0x08007635
 800760c:	2301      	movs	r3, #1
 800760e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007612:	e0d6      	b.n	80077c2 <UART_SetConfig+0x7aa>
 8007614:	2304      	movs	r3, #4
 8007616:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800761a:	e0d2      	b.n	80077c2 <UART_SetConfig+0x7aa>
 800761c:	2308      	movs	r3, #8
 800761e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007622:	e0ce      	b.n	80077c2 <UART_SetConfig+0x7aa>
 8007624:	2310      	movs	r3, #16
 8007626:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800762a:	e0ca      	b.n	80077c2 <UART_SetConfig+0x7aa>
 800762c:	2320      	movs	r3, #32
 800762e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007632:	e0c6      	b.n	80077c2 <UART_SetConfig+0x7aa>
 8007634:	2340      	movs	r3, #64	; 0x40
 8007636:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800763a:	e0c2      	b.n	80077c2 <UART_SetConfig+0x7aa>
 800763c:	2380      	movs	r3, #128	; 0x80
 800763e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007642:	e0be      	b.n	80077c2 <UART_SetConfig+0x7aa>
 8007644:	40011400 	.word	0x40011400
 8007648:	58024400 	.word	0x58024400
 800764c:	40007800 	.word	0x40007800
 8007650:	40007c00 	.word	0x40007c00
 8007654:	40011800 	.word	0x40011800
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4aad      	ldr	r2, [pc, #692]	; (8007914 <UART_SetConfig+0x8fc>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d176      	bne.n	8007750 <UART_SetConfig+0x738>
 8007662:	4bad      	ldr	r3, [pc, #692]	; (8007918 <UART_SetConfig+0x900>)
 8007664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007666:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800766a:	2b28      	cmp	r3, #40	; 0x28
 800766c:	d86c      	bhi.n	8007748 <UART_SetConfig+0x730>
 800766e:	a201      	add	r2, pc, #4	; (adr r2, 8007674 <UART_SetConfig+0x65c>)
 8007670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007674:	08007719 	.word	0x08007719
 8007678:	08007749 	.word	0x08007749
 800767c:	08007749 	.word	0x08007749
 8007680:	08007749 	.word	0x08007749
 8007684:	08007749 	.word	0x08007749
 8007688:	08007749 	.word	0x08007749
 800768c:	08007749 	.word	0x08007749
 8007690:	08007749 	.word	0x08007749
 8007694:	08007721 	.word	0x08007721
 8007698:	08007749 	.word	0x08007749
 800769c:	08007749 	.word	0x08007749
 80076a0:	08007749 	.word	0x08007749
 80076a4:	08007749 	.word	0x08007749
 80076a8:	08007749 	.word	0x08007749
 80076ac:	08007749 	.word	0x08007749
 80076b0:	08007749 	.word	0x08007749
 80076b4:	08007729 	.word	0x08007729
 80076b8:	08007749 	.word	0x08007749
 80076bc:	08007749 	.word	0x08007749
 80076c0:	08007749 	.word	0x08007749
 80076c4:	08007749 	.word	0x08007749
 80076c8:	08007749 	.word	0x08007749
 80076cc:	08007749 	.word	0x08007749
 80076d0:	08007749 	.word	0x08007749
 80076d4:	08007731 	.word	0x08007731
 80076d8:	08007749 	.word	0x08007749
 80076dc:	08007749 	.word	0x08007749
 80076e0:	08007749 	.word	0x08007749
 80076e4:	08007749 	.word	0x08007749
 80076e8:	08007749 	.word	0x08007749
 80076ec:	08007749 	.word	0x08007749
 80076f0:	08007749 	.word	0x08007749
 80076f4:	08007739 	.word	0x08007739
 80076f8:	08007749 	.word	0x08007749
 80076fc:	08007749 	.word	0x08007749
 8007700:	08007749 	.word	0x08007749
 8007704:	08007749 	.word	0x08007749
 8007708:	08007749 	.word	0x08007749
 800770c:	08007749 	.word	0x08007749
 8007710:	08007749 	.word	0x08007749
 8007714:	08007741 	.word	0x08007741
 8007718:	2301      	movs	r3, #1
 800771a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800771e:	e050      	b.n	80077c2 <UART_SetConfig+0x7aa>
 8007720:	2304      	movs	r3, #4
 8007722:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007726:	e04c      	b.n	80077c2 <UART_SetConfig+0x7aa>
 8007728:	2308      	movs	r3, #8
 800772a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800772e:	e048      	b.n	80077c2 <UART_SetConfig+0x7aa>
 8007730:	2310      	movs	r3, #16
 8007732:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007736:	e044      	b.n	80077c2 <UART_SetConfig+0x7aa>
 8007738:	2320      	movs	r3, #32
 800773a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800773e:	e040      	b.n	80077c2 <UART_SetConfig+0x7aa>
 8007740:	2340      	movs	r3, #64	; 0x40
 8007742:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007746:	e03c      	b.n	80077c2 <UART_SetConfig+0x7aa>
 8007748:	2380      	movs	r3, #128	; 0x80
 800774a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800774e:	e038      	b.n	80077c2 <UART_SetConfig+0x7aa>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a71      	ldr	r2, [pc, #452]	; (800791c <UART_SetConfig+0x904>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d130      	bne.n	80077bc <UART_SetConfig+0x7a4>
 800775a:	4b6f      	ldr	r3, [pc, #444]	; (8007918 <UART_SetConfig+0x900>)
 800775c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800775e:	f003 0307 	and.w	r3, r3, #7
 8007762:	2b05      	cmp	r3, #5
 8007764:	d826      	bhi.n	80077b4 <UART_SetConfig+0x79c>
 8007766:	a201      	add	r2, pc, #4	; (adr r2, 800776c <UART_SetConfig+0x754>)
 8007768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800776c:	08007785 	.word	0x08007785
 8007770:	0800778d 	.word	0x0800778d
 8007774:	08007795 	.word	0x08007795
 8007778:	0800779d 	.word	0x0800779d
 800777c:	080077a5 	.word	0x080077a5
 8007780:	080077ad 	.word	0x080077ad
 8007784:	2302      	movs	r3, #2
 8007786:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800778a:	e01a      	b.n	80077c2 <UART_SetConfig+0x7aa>
 800778c:	2304      	movs	r3, #4
 800778e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007792:	e016      	b.n	80077c2 <UART_SetConfig+0x7aa>
 8007794:	2308      	movs	r3, #8
 8007796:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800779a:	e012      	b.n	80077c2 <UART_SetConfig+0x7aa>
 800779c:	2310      	movs	r3, #16
 800779e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077a2:	e00e      	b.n	80077c2 <UART_SetConfig+0x7aa>
 80077a4:	2320      	movs	r3, #32
 80077a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077aa:	e00a      	b.n	80077c2 <UART_SetConfig+0x7aa>
 80077ac:	2340      	movs	r3, #64	; 0x40
 80077ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077b2:	e006      	b.n	80077c2 <UART_SetConfig+0x7aa>
 80077b4:	2380      	movs	r3, #128	; 0x80
 80077b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077ba:	e002      	b.n	80077c2 <UART_SetConfig+0x7aa>
 80077bc:	2380      	movs	r3, #128	; 0x80
 80077be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4a55      	ldr	r2, [pc, #340]	; (800791c <UART_SetConfig+0x904>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	f040 80f0 	bne.w	80079ae <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80077ce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80077d2:	2b20      	cmp	r3, #32
 80077d4:	dc46      	bgt.n	8007864 <UART_SetConfig+0x84c>
 80077d6:	2b02      	cmp	r3, #2
 80077d8:	db75      	blt.n	80078c6 <UART_SetConfig+0x8ae>
 80077da:	3b02      	subs	r3, #2
 80077dc:	2b1e      	cmp	r3, #30
 80077de:	d872      	bhi.n	80078c6 <UART_SetConfig+0x8ae>
 80077e0:	a201      	add	r2, pc, #4	; (adr r2, 80077e8 <UART_SetConfig+0x7d0>)
 80077e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077e6:	bf00      	nop
 80077e8:	0800786b 	.word	0x0800786b
 80077ec:	080078c7 	.word	0x080078c7
 80077f0:	08007873 	.word	0x08007873
 80077f4:	080078c7 	.word	0x080078c7
 80077f8:	080078c7 	.word	0x080078c7
 80077fc:	080078c7 	.word	0x080078c7
 8007800:	08007883 	.word	0x08007883
 8007804:	080078c7 	.word	0x080078c7
 8007808:	080078c7 	.word	0x080078c7
 800780c:	080078c7 	.word	0x080078c7
 8007810:	080078c7 	.word	0x080078c7
 8007814:	080078c7 	.word	0x080078c7
 8007818:	080078c7 	.word	0x080078c7
 800781c:	080078c7 	.word	0x080078c7
 8007820:	08007893 	.word	0x08007893
 8007824:	080078c7 	.word	0x080078c7
 8007828:	080078c7 	.word	0x080078c7
 800782c:	080078c7 	.word	0x080078c7
 8007830:	080078c7 	.word	0x080078c7
 8007834:	080078c7 	.word	0x080078c7
 8007838:	080078c7 	.word	0x080078c7
 800783c:	080078c7 	.word	0x080078c7
 8007840:	080078c7 	.word	0x080078c7
 8007844:	080078c7 	.word	0x080078c7
 8007848:	080078c7 	.word	0x080078c7
 800784c:	080078c7 	.word	0x080078c7
 8007850:	080078c7 	.word	0x080078c7
 8007854:	080078c7 	.word	0x080078c7
 8007858:	080078c7 	.word	0x080078c7
 800785c:	080078c7 	.word	0x080078c7
 8007860:	080078b9 	.word	0x080078b9
 8007864:	2b40      	cmp	r3, #64	; 0x40
 8007866:	d02a      	beq.n	80078be <UART_SetConfig+0x8a6>
 8007868:	e02d      	b.n	80078c6 <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800786a:	f7fd ffff 	bl	800586c <HAL_RCCEx_GetD3PCLK1Freq>
 800786e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007870:	e02f      	b.n	80078d2 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007872:	f107 0314 	add.w	r3, r7, #20
 8007876:	4618      	mov	r0, r3
 8007878:	f7fe f80e 	bl	8005898 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800787c:	69bb      	ldr	r3, [r7, #24]
 800787e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007880:	e027      	b.n	80078d2 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007882:	f107 0308 	add.w	r3, r7, #8
 8007886:	4618      	mov	r0, r3
 8007888:	f7fe f95a 	bl	8005b40 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007890:	e01f      	b.n	80078d2 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007892:	4b21      	ldr	r3, [pc, #132]	; (8007918 <UART_SetConfig+0x900>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f003 0320 	and.w	r3, r3, #32
 800789a:	2b00      	cmp	r3, #0
 800789c:	d009      	beq.n	80078b2 <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800789e:	4b1e      	ldr	r3, [pc, #120]	; (8007918 <UART_SetConfig+0x900>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	08db      	lsrs	r3, r3, #3
 80078a4:	f003 0303 	and.w	r3, r3, #3
 80078a8:	4a1d      	ldr	r2, [pc, #116]	; (8007920 <UART_SetConfig+0x908>)
 80078aa:	fa22 f303 	lsr.w	r3, r2, r3
 80078ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80078b0:	e00f      	b.n	80078d2 <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 80078b2:	4b1b      	ldr	r3, [pc, #108]	; (8007920 <UART_SetConfig+0x908>)
 80078b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80078b6:	e00c      	b.n	80078d2 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80078b8:	4b1a      	ldr	r3, [pc, #104]	; (8007924 <UART_SetConfig+0x90c>)
 80078ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80078bc:	e009      	b.n	80078d2 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80078c4:	e005      	b.n	80078d2 <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 80078c6:	2300      	movs	r3, #0
 80078c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80078ca:	2301      	movs	r3, #1
 80078cc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80078d0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80078d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	f000 81e6 	beq.w	8007ca6 <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078de:	4a12      	ldr	r2, [pc, #72]	; (8007928 <UART_SetConfig+0x910>)
 80078e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80078e4:	461a      	mov	r2, r3
 80078e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80078ec:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	685a      	ldr	r2, [r3, #4]
 80078f2:	4613      	mov	r3, r2
 80078f4:	005b      	lsls	r3, r3, #1
 80078f6:	4413      	add	r3, r2
 80078f8:	6a3a      	ldr	r2, [r7, #32]
 80078fa:	429a      	cmp	r2, r3
 80078fc:	d305      	bcc.n	800790a <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007904:	6a3a      	ldr	r2, [r7, #32]
 8007906:	429a      	cmp	r2, r3
 8007908:	d910      	bls.n	800792c <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 800790a:	2301      	movs	r3, #1
 800790c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007910:	e1c9      	b.n	8007ca6 <UART_SetConfig+0xc8e>
 8007912:	bf00      	nop
 8007914:	40011c00 	.word	0x40011c00
 8007918:	58024400 	.word	0x58024400
 800791c:	58000c00 	.word	0x58000c00
 8007920:	03d09000 	.word	0x03d09000
 8007924:	003d0900 	.word	0x003d0900
 8007928:	0800b0b8 	.word	0x0800b0b8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800792c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800792e:	4618      	mov	r0, r3
 8007930:	f04f 0100 	mov.w	r1, #0
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007938:	4ac1      	ldr	r2, [pc, #772]	; (8007c40 <UART_SetConfig+0xc28>)
 800793a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800793e:	b29a      	uxth	r2, r3
 8007940:	f04f 0300 	mov.w	r3, #0
 8007944:	f7f8 fce4 	bl	8000310 <__aeabi_uldivmod>
 8007948:	4602      	mov	r2, r0
 800794a:	460b      	mov	r3, r1
 800794c:	4610      	mov	r0, r2
 800794e:	4619      	mov	r1, r3
 8007950:	f04f 0200 	mov.w	r2, #0
 8007954:	f04f 0300 	mov.w	r3, #0
 8007958:	020b      	lsls	r3, r1, #8
 800795a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800795e:	0202      	lsls	r2, r0, #8
 8007960:	6879      	ldr	r1, [r7, #4]
 8007962:	6849      	ldr	r1, [r1, #4]
 8007964:	0849      	lsrs	r1, r1, #1
 8007966:	4608      	mov	r0, r1
 8007968:	f04f 0100 	mov.w	r1, #0
 800796c:	1814      	adds	r4, r2, r0
 800796e:	eb43 0501 	adc.w	r5, r3, r1
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	461a      	mov	r2, r3
 8007978:	f04f 0300 	mov.w	r3, #0
 800797c:	4620      	mov	r0, r4
 800797e:	4629      	mov	r1, r5
 8007980:	f7f8 fcc6 	bl	8000310 <__aeabi_uldivmod>
 8007984:	4602      	mov	r2, r0
 8007986:	460b      	mov	r3, r1
 8007988:	4613      	mov	r3, r2
 800798a:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800798c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800798e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007992:	d308      	bcc.n	80079a6 <UART_SetConfig+0x98e>
 8007994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007996:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800799a:	d204      	bcs.n	80079a6 <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079a2:	60da      	str	r2, [r3, #12]
 80079a4:	e17f      	b.n	8007ca6 <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 80079a6:	2301      	movs	r3, #1
 80079a8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80079ac:	e17b      	b.n	8007ca6 <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	69db      	ldr	r3, [r3, #28]
 80079b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079b6:	f040 80bd 	bne.w	8007b34 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 80079ba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80079be:	2b20      	cmp	r3, #32
 80079c0:	dc48      	bgt.n	8007a54 <UART_SetConfig+0xa3c>
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	db7b      	blt.n	8007abe <UART_SetConfig+0xaa6>
 80079c6:	2b20      	cmp	r3, #32
 80079c8:	d879      	bhi.n	8007abe <UART_SetConfig+0xaa6>
 80079ca:	a201      	add	r2, pc, #4	; (adr r2, 80079d0 <UART_SetConfig+0x9b8>)
 80079cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079d0:	08007a5b 	.word	0x08007a5b
 80079d4:	08007a63 	.word	0x08007a63
 80079d8:	08007abf 	.word	0x08007abf
 80079dc:	08007abf 	.word	0x08007abf
 80079e0:	08007a6b 	.word	0x08007a6b
 80079e4:	08007abf 	.word	0x08007abf
 80079e8:	08007abf 	.word	0x08007abf
 80079ec:	08007abf 	.word	0x08007abf
 80079f0:	08007a7b 	.word	0x08007a7b
 80079f4:	08007abf 	.word	0x08007abf
 80079f8:	08007abf 	.word	0x08007abf
 80079fc:	08007abf 	.word	0x08007abf
 8007a00:	08007abf 	.word	0x08007abf
 8007a04:	08007abf 	.word	0x08007abf
 8007a08:	08007abf 	.word	0x08007abf
 8007a0c:	08007abf 	.word	0x08007abf
 8007a10:	08007a8b 	.word	0x08007a8b
 8007a14:	08007abf 	.word	0x08007abf
 8007a18:	08007abf 	.word	0x08007abf
 8007a1c:	08007abf 	.word	0x08007abf
 8007a20:	08007abf 	.word	0x08007abf
 8007a24:	08007abf 	.word	0x08007abf
 8007a28:	08007abf 	.word	0x08007abf
 8007a2c:	08007abf 	.word	0x08007abf
 8007a30:	08007abf 	.word	0x08007abf
 8007a34:	08007abf 	.word	0x08007abf
 8007a38:	08007abf 	.word	0x08007abf
 8007a3c:	08007abf 	.word	0x08007abf
 8007a40:	08007abf 	.word	0x08007abf
 8007a44:	08007abf 	.word	0x08007abf
 8007a48:	08007abf 	.word	0x08007abf
 8007a4c:	08007abf 	.word	0x08007abf
 8007a50:	08007ab1 	.word	0x08007ab1
 8007a54:	2b40      	cmp	r3, #64	; 0x40
 8007a56:	d02e      	beq.n	8007ab6 <UART_SetConfig+0xa9e>
 8007a58:	e031      	b.n	8007abe <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a5a:	f7fc fbbd 	bl	80041d8 <HAL_RCC_GetPCLK1Freq>
 8007a5e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007a60:	e033      	b.n	8007aca <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a62:	f7fc fbcf 	bl	8004204 <HAL_RCC_GetPCLK2Freq>
 8007a66:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007a68:	e02f      	b.n	8007aca <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a6a:	f107 0314 	add.w	r3, r7, #20
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f7fd ff12 	bl	8005898 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007a74:	69bb      	ldr	r3, [r7, #24]
 8007a76:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007a78:	e027      	b.n	8007aca <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a7a:	f107 0308 	add.w	r3, r7, #8
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f7fe f85e 	bl	8005b40 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007a88:	e01f      	b.n	8007aca <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a8a:	4b6e      	ldr	r3, [pc, #440]	; (8007c44 <UART_SetConfig+0xc2c>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f003 0320 	and.w	r3, r3, #32
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d009      	beq.n	8007aaa <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007a96:	4b6b      	ldr	r3, [pc, #428]	; (8007c44 <UART_SetConfig+0xc2c>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	08db      	lsrs	r3, r3, #3
 8007a9c:	f003 0303 	and.w	r3, r3, #3
 8007aa0:	4a69      	ldr	r2, [pc, #420]	; (8007c48 <UART_SetConfig+0xc30>)
 8007aa2:	fa22 f303 	lsr.w	r3, r2, r3
 8007aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007aa8:	e00f      	b.n	8007aca <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 8007aaa:	4b67      	ldr	r3, [pc, #412]	; (8007c48 <UART_SetConfig+0xc30>)
 8007aac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007aae:	e00c      	b.n	8007aca <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007ab0:	4b66      	ldr	r3, [pc, #408]	; (8007c4c <UART_SetConfig+0xc34>)
 8007ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007ab4:	e009      	b.n	8007aca <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ab6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007aba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007abc:	e005      	b.n	8007aca <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007ac8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	f000 80ea 	beq.w	8007ca6 <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad6:	4a5a      	ldr	r2, [pc, #360]	; (8007c40 <UART_SetConfig+0xc28>)
 8007ad8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007adc:	461a      	mov	r2, r3
 8007ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ae0:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ae4:	005a      	lsls	r2, r3, #1
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	685b      	ldr	r3, [r3, #4]
 8007aea:	085b      	lsrs	r3, r3, #1
 8007aec:	441a      	add	r2, r3
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	685b      	ldr	r3, [r3, #4]
 8007af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007af6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007afa:	2b0f      	cmp	r3, #15
 8007afc:	d916      	bls.n	8007b2c <UART_SetConfig+0xb14>
 8007afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b04:	d212      	bcs.n	8007b2c <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b08:	b29b      	uxth	r3, r3
 8007b0a:	f023 030f 	bic.w	r3, r3, #15
 8007b0e:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b12:	085b      	lsrs	r3, r3, #1
 8007b14:	b29b      	uxth	r3, r3
 8007b16:	f003 0307 	and.w	r3, r3, #7
 8007b1a:	b29a      	uxth	r2, r3
 8007b1c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007b28:	60da      	str	r2, [r3, #12]
 8007b2a:	e0bc      	b.n	8007ca6 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007b32:	e0b8      	b.n	8007ca6 <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007b34:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007b38:	2b20      	cmp	r3, #32
 8007b3a:	dc4b      	bgt.n	8007bd4 <UART_SetConfig+0xbbc>
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	f2c0 8087 	blt.w	8007c50 <UART_SetConfig+0xc38>
 8007b42:	2b20      	cmp	r3, #32
 8007b44:	f200 8084 	bhi.w	8007c50 <UART_SetConfig+0xc38>
 8007b48:	a201      	add	r2, pc, #4	; (adr r2, 8007b50 <UART_SetConfig+0xb38>)
 8007b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b4e:	bf00      	nop
 8007b50:	08007bdb 	.word	0x08007bdb
 8007b54:	08007be3 	.word	0x08007be3
 8007b58:	08007c51 	.word	0x08007c51
 8007b5c:	08007c51 	.word	0x08007c51
 8007b60:	08007beb 	.word	0x08007beb
 8007b64:	08007c51 	.word	0x08007c51
 8007b68:	08007c51 	.word	0x08007c51
 8007b6c:	08007c51 	.word	0x08007c51
 8007b70:	08007bfb 	.word	0x08007bfb
 8007b74:	08007c51 	.word	0x08007c51
 8007b78:	08007c51 	.word	0x08007c51
 8007b7c:	08007c51 	.word	0x08007c51
 8007b80:	08007c51 	.word	0x08007c51
 8007b84:	08007c51 	.word	0x08007c51
 8007b88:	08007c51 	.word	0x08007c51
 8007b8c:	08007c51 	.word	0x08007c51
 8007b90:	08007c0b 	.word	0x08007c0b
 8007b94:	08007c51 	.word	0x08007c51
 8007b98:	08007c51 	.word	0x08007c51
 8007b9c:	08007c51 	.word	0x08007c51
 8007ba0:	08007c51 	.word	0x08007c51
 8007ba4:	08007c51 	.word	0x08007c51
 8007ba8:	08007c51 	.word	0x08007c51
 8007bac:	08007c51 	.word	0x08007c51
 8007bb0:	08007c51 	.word	0x08007c51
 8007bb4:	08007c51 	.word	0x08007c51
 8007bb8:	08007c51 	.word	0x08007c51
 8007bbc:	08007c51 	.word	0x08007c51
 8007bc0:	08007c51 	.word	0x08007c51
 8007bc4:	08007c51 	.word	0x08007c51
 8007bc8:	08007c51 	.word	0x08007c51
 8007bcc:	08007c51 	.word	0x08007c51
 8007bd0:	08007c31 	.word	0x08007c31
 8007bd4:	2b40      	cmp	r3, #64	; 0x40
 8007bd6:	d02e      	beq.n	8007c36 <UART_SetConfig+0xc1e>
 8007bd8:	e03a      	b.n	8007c50 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007bda:	f7fc fafd 	bl	80041d8 <HAL_RCC_GetPCLK1Freq>
 8007bde:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007be0:	e03c      	b.n	8007c5c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007be2:	f7fc fb0f 	bl	8004204 <HAL_RCC_GetPCLK2Freq>
 8007be6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007be8:	e038      	b.n	8007c5c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007bea:	f107 0314 	add.w	r3, r7, #20
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f7fd fe52 	bl	8005898 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007bf4:	69bb      	ldr	r3, [r7, #24]
 8007bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007bf8:	e030      	b.n	8007c5c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007bfa:	f107 0308 	add.w	r3, r7, #8
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f7fd ff9e 	bl	8005b40 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007c08:	e028      	b.n	8007c5c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c0a:	4b0e      	ldr	r3, [pc, #56]	; (8007c44 <UART_SetConfig+0xc2c>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f003 0320 	and.w	r3, r3, #32
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d009      	beq.n	8007c2a <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007c16:	4b0b      	ldr	r3, [pc, #44]	; (8007c44 <UART_SetConfig+0xc2c>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	08db      	lsrs	r3, r3, #3
 8007c1c:	f003 0303 	and.w	r3, r3, #3
 8007c20:	4a09      	ldr	r2, [pc, #36]	; (8007c48 <UART_SetConfig+0xc30>)
 8007c22:	fa22 f303 	lsr.w	r3, r2, r3
 8007c26:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007c28:	e018      	b.n	8007c5c <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 8007c2a:	4b07      	ldr	r3, [pc, #28]	; (8007c48 <UART_SetConfig+0xc30>)
 8007c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007c2e:	e015      	b.n	8007c5c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007c30:	4b06      	ldr	r3, [pc, #24]	; (8007c4c <UART_SetConfig+0xc34>)
 8007c32:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007c34:	e012      	b.n	8007c5c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007c3c:	e00e      	b.n	8007c5c <UART_SetConfig+0xc44>
 8007c3e:	bf00      	nop
 8007c40:	0800b0b8 	.word	0x0800b0b8
 8007c44:	58024400 	.word	0x58024400
 8007c48:	03d09000 	.word	0x03d09000
 8007c4c:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8007c50:	2300      	movs	r3, #0
 8007c52:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007c54:	2301      	movs	r3, #1
 8007c56:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007c5a:	bf00      	nop
    }

    if (pclk != 0U)
 8007c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d021      	beq.n	8007ca6 <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c66:	4a1a      	ldr	r2, [pc, #104]	; (8007cd0 <UART_SetConfig+0xcb8>)
 8007c68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c6c:	461a      	mov	r2, r3
 8007c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c70:	fbb3 f2f2 	udiv	r2, r3, r2
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	085b      	lsrs	r3, r3, #1
 8007c7a:	441a      	add	r2, r3
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	685b      	ldr	r3, [r3, #4]
 8007c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c84:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c88:	2b0f      	cmp	r3, #15
 8007c8a:	d909      	bls.n	8007ca0 <UART_SetConfig+0xc88>
 8007c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c92:	d205      	bcs.n	8007ca0 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c96:	b29a      	uxth	r2, r3
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	60da      	str	r2, [r3, #12]
 8007c9e:	e002      	b.n	8007ca6 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2201      	movs	r2, #1
 8007caa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2201      	movs	r2, #1
 8007cb2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007cc2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3738      	adds	r7, #56	; 0x38
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bdb0      	pop	{r4, r5, r7, pc}
 8007cce:	bf00      	nop
 8007cd0:	0800b0b8 	.word	0x0800b0b8

08007cd4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b083      	sub	sp, #12
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ce0:	f003 0301 	and.w	r3, r3, #1
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d00a      	beq.n	8007cfe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	430a      	orrs	r2, r1
 8007cfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d02:	f003 0302 	and.w	r3, r3, #2
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d00a      	beq.n	8007d20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	430a      	orrs	r2, r1
 8007d1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d24:	f003 0304 	and.w	r3, r3, #4
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d00a      	beq.n	8007d42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	430a      	orrs	r2, r1
 8007d40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d46:	f003 0308 	and.w	r3, r3, #8
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d00a      	beq.n	8007d64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	685b      	ldr	r3, [r3, #4]
 8007d54:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	430a      	orrs	r2, r1
 8007d62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d68:	f003 0310 	and.w	r3, r3, #16
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d00a      	beq.n	8007d86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	689b      	ldr	r3, [r3, #8]
 8007d76:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	430a      	orrs	r2, r1
 8007d84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d8a:	f003 0320 	and.w	r3, r3, #32
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d00a      	beq.n	8007da8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	689b      	ldr	r3, [r3, #8]
 8007d98:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	430a      	orrs	r2, r1
 8007da6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d01a      	beq.n	8007dea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	430a      	orrs	r2, r1
 8007dc8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007dd2:	d10a      	bne.n	8007dea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	430a      	orrs	r2, r1
 8007de8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d00a      	beq.n	8007e0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	685b      	ldr	r3, [r3, #4]
 8007dfc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	430a      	orrs	r2, r1
 8007e0a:	605a      	str	r2, [r3, #4]
  }
}
 8007e0c:	bf00      	nop
 8007e0e:	370c      	adds	r7, #12
 8007e10:	46bd      	mov	sp, r7
 8007e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e16:	4770      	bx	lr

08007e18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b086      	sub	sp, #24
 8007e1c:	af02      	add	r7, sp, #8
 8007e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2200      	movs	r2, #0
 8007e24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007e28:	f7f8 fcc8 	bl	80007bc <HAL_GetTick>
 8007e2c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f003 0308 	and.w	r3, r3, #8
 8007e38:	2b08      	cmp	r3, #8
 8007e3a:	d10e      	bne.n	8007e5a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007e40:	9300      	str	r3, [sp, #0]
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	2200      	movs	r2, #0
 8007e46:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f000 f82f 	bl	8007eae <UART_WaitOnFlagUntilTimeout>
 8007e50:	4603      	mov	r3, r0
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d001      	beq.n	8007e5a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e56:	2303      	movs	r3, #3
 8007e58:	e025      	b.n	8007ea6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f003 0304 	and.w	r3, r3, #4
 8007e64:	2b04      	cmp	r3, #4
 8007e66:	d10e      	bne.n	8007e86 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007e6c:	9300      	str	r3, [sp, #0]
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	2200      	movs	r2, #0
 8007e72:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 f819 	bl	8007eae <UART_WaitOnFlagUntilTimeout>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d001      	beq.n	8007e86 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e82:	2303      	movs	r3, #3
 8007e84:	e00f      	b.n	8007ea6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2220      	movs	r2, #32
 8007e8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2220      	movs	r2, #32
 8007e92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007ea4:	2300      	movs	r3, #0
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3710      	adds	r7, #16
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}

08007eae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007eae:	b580      	push	{r7, lr}
 8007eb0:	b09c      	sub	sp, #112	; 0x70
 8007eb2:	af00      	add	r7, sp, #0
 8007eb4:	60f8      	str	r0, [r7, #12]
 8007eb6:	60b9      	str	r1, [r7, #8]
 8007eb8:	603b      	str	r3, [r7, #0]
 8007eba:	4613      	mov	r3, r2
 8007ebc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ebe:	e0a9      	b.n	8008014 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ec0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ec2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ec6:	f000 80a5 	beq.w	8008014 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007eca:	f7f8 fc77 	bl	80007bc <HAL_GetTick>
 8007ece:	4602      	mov	r2, r0
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	1ad3      	subs	r3, r2, r3
 8007ed4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007ed6:	429a      	cmp	r2, r3
 8007ed8:	d302      	bcc.n	8007ee0 <UART_WaitOnFlagUntilTimeout+0x32>
 8007eda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d140      	bne.n	8007f62 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ee6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ee8:	e853 3f00 	ldrex	r3, [r3]
 8007eec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007eee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ef0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007ef4:	667b      	str	r3, [r7, #100]	; 0x64
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	461a      	mov	r2, r3
 8007efc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007efe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f00:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f02:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007f04:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007f06:	e841 2300 	strex	r3, r2, [r1]
 8007f0a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007f0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d1e6      	bne.n	8007ee0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	3308      	adds	r3, #8
 8007f18:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f1c:	e853 3f00 	ldrex	r3, [r3]
 8007f20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f24:	f023 0301 	bic.w	r3, r3, #1
 8007f28:	663b      	str	r3, [r7, #96]	; 0x60
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	3308      	adds	r3, #8
 8007f30:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007f32:	64ba      	str	r2, [r7, #72]	; 0x48
 8007f34:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f36:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007f38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f3a:	e841 2300 	strex	r3, r2, [r1]
 8007f3e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007f40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d1e5      	bne.n	8007f12 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	2220      	movs	r2, #32
 8007f4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	2220      	movs	r2, #32
 8007f52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007f5e:	2303      	movs	r3, #3
 8007f60:	e069      	b.n	8008036 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f003 0304 	and.w	r3, r3, #4
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d051      	beq.n	8008014 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	69db      	ldr	r3, [r3, #28]
 8007f76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f7e:	d149      	bne.n	8008014 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007f88:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f92:	e853 3f00 	ldrex	r3, [r3]
 8007f96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f9a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007f9e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	461a      	mov	r2, r3
 8007fa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fa8:	637b      	str	r3, [r7, #52]	; 0x34
 8007faa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007fae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007fb0:	e841 2300 	strex	r3, r2, [r1]
 8007fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d1e6      	bne.n	8007f8a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	3308      	adds	r3, #8
 8007fc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc4:	697b      	ldr	r3, [r7, #20]
 8007fc6:	e853 3f00 	ldrex	r3, [r3]
 8007fca:	613b      	str	r3, [r7, #16]
   return(result);
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	f023 0301 	bic.w	r3, r3, #1
 8007fd2:	66bb      	str	r3, [r7, #104]	; 0x68
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	3308      	adds	r3, #8
 8007fda:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007fdc:	623a      	str	r2, [r7, #32]
 8007fde:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fe0:	69f9      	ldr	r1, [r7, #28]
 8007fe2:	6a3a      	ldr	r2, [r7, #32]
 8007fe4:	e841 2300 	strex	r3, r2, [r1]
 8007fe8:	61bb      	str	r3, [r7, #24]
   return(result);
 8007fea:	69bb      	ldr	r3, [r7, #24]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d1e5      	bne.n	8007fbc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	2220      	movs	r2, #32
 8007ff4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	2220      	movs	r2, #32
 8007ffc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2220      	movs	r2, #32
 8008004:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	2200      	movs	r2, #0
 800800c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008010:	2303      	movs	r3, #3
 8008012:	e010      	b.n	8008036 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	69da      	ldr	r2, [r3, #28]
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	4013      	ands	r3, r2
 800801e:	68ba      	ldr	r2, [r7, #8]
 8008020:	429a      	cmp	r2, r3
 8008022:	bf0c      	ite	eq
 8008024:	2301      	moveq	r3, #1
 8008026:	2300      	movne	r3, #0
 8008028:	b2db      	uxtb	r3, r3
 800802a:	461a      	mov	r2, r3
 800802c:	79fb      	ldrb	r3, [r7, #7]
 800802e:	429a      	cmp	r2, r3
 8008030:	f43f af46 	beq.w	8007ec0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008034:	2300      	movs	r3, #0
}
 8008036:	4618      	mov	r0, r3
 8008038:	3770      	adds	r7, #112	; 0x70
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}

0800803e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800803e:	b480      	push	{r7}
 8008040:	b085      	sub	sp, #20
 8008042:	af00      	add	r7, sp, #0
 8008044:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800804c:	2b01      	cmp	r3, #1
 800804e:	d101      	bne.n	8008054 <HAL_UARTEx_DisableFifoMode+0x16>
 8008050:	2302      	movs	r3, #2
 8008052:	e027      	b.n	80080a4 <HAL_UARTEx_DisableFifoMode+0x66>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2201      	movs	r2, #1
 8008058:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2224      	movs	r2, #36	; 0x24
 8008060:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	681a      	ldr	r2, [r3, #0]
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f022 0201 	bic.w	r2, r2, #1
 800807a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008082:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2200      	movs	r2, #0
 8008088:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	68fa      	ldr	r2, [r7, #12]
 8008090:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2220      	movs	r2, #32
 8008096:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2200      	movs	r2, #0
 800809e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80080a2:	2300      	movs	r3, #0
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	3714      	adds	r7, #20
 80080a8:	46bd      	mov	sp, r7
 80080aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ae:	4770      	bx	lr

080080b0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b084      	sub	sp, #16
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
 80080b8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	d101      	bne.n	80080c8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80080c4:	2302      	movs	r3, #2
 80080c6:	e02d      	b.n	8008124 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2201      	movs	r2, #1
 80080cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2224      	movs	r2, #36	; 0x24
 80080d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	681a      	ldr	r2, [r3, #0]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f022 0201 	bic.w	r2, r2, #1
 80080ee:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	689b      	ldr	r3, [r3, #8]
 80080f6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	683a      	ldr	r2, [r7, #0]
 8008100:	430a      	orrs	r2, r1
 8008102:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f000 f84f 	bl	80081a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	68fa      	ldr	r2, [r7, #12]
 8008110:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2220      	movs	r2, #32
 8008116:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2200      	movs	r2, #0
 800811e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008122:	2300      	movs	r3, #0
}
 8008124:	4618      	mov	r0, r3
 8008126:	3710      	adds	r7, #16
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}

0800812c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b084      	sub	sp, #16
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
 8008134:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800813c:	2b01      	cmp	r3, #1
 800813e:	d101      	bne.n	8008144 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008140:	2302      	movs	r3, #2
 8008142:	e02d      	b.n	80081a0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2201      	movs	r2, #1
 8008148:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2224      	movs	r2, #36	; 0x24
 8008150:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	681a      	ldr	r2, [r3, #0]
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f022 0201 	bic.w	r2, r2, #1
 800816a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	689b      	ldr	r3, [r3, #8]
 8008172:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	683a      	ldr	r2, [r7, #0]
 800817c:	430a      	orrs	r2, r1
 800817e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f000 f811 	bl	80081a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	68fa      	ldr	r2, [r7, #12]
 800818c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2220      	movs	r2, #32
 8008192:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2200      	movs	r2, #0
 800819a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800819e:	2300      	movs	r3, #0
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3710      	adds	r7, #16
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}

080081a8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b085      	sub	sp, #20
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d108      	bne.n	80081ca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2201      	movs	r2, #1
 80081bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2201      	movs	r2, #1
 80081c4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80081c8:	e031      	b.n	800822e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80081ca:	2310      	movs	r3, #16
 80081cc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80081ce:	2310      	movs	r3, #16
 80081d0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	689b      	ldr	r3, [r3, #8]
 80081d8:	0e5b      	lsrs	r3, r3, #25
 80081da:	b2db      	uxtb	r3, r3
 80081dc:	f003 0307 	and.w	r3, r3, #7
 80081e0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	689b      	ldr	r3, [r3, #8]
 80081e8:	0f5b      	lsrs	r3, r3, #29
 80081ea:	b2db      	uxtb	r3, r3
 80081ec:	f003 0307 	and.w	r3, r3, #7
 80081f0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80081f2:	7bbb      	ldrb	r3, [r7, #14]
 80081f4:	7b3a      	ldrb	r2, [r7, #12]
 80081f6:	4911      	ldr	r1, [pc, #68]	; (800823c <UARTEx_SetNbDataToProcess+0x94>)
 80081f8:	5c8a      	ldrb	r2, [r1, r2]
 80081fa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80081fe:	7b3a      	ldrb	r2, [r7, #12]
 8008200:	490f      	ldr	r1, [pc, #60]	; (8008240 <UARTEx_SetNbDataToProcess+0x98>)
 8008202:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008204:	fb93 f3f2 	sdiv	r3, r3, r2
 8008208:	b29a      	uxth	r2, r3
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008210:	7bfb      	ldrb	r3, [r7, #15]
 8008212:	7b7a      	ldrb	r2, [r7, #13]
 8008214:	4909      	ldr	r1, [pc, #36]	; (800823c <UARTEx_SetNbDataToProcess+0x94>)
 8008216:	5c8a      	ldrb	r2, [r1, r2]
 8008218:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800821c:	7b7a      	ldrb	r2, [r7, #13]
 800821e:	4908      	ldr	r1, [pc, #32]	; (8008240 <UARTEx_SetNbDataToProcess+0x98>)
 8008220:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008222:	fb93 f3f2 	sdiv	r3, r3, r2
 8008226:	b29a      	uxth	r2, r3
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800822e:	bf00      	nop
 8008230:	3714      	adds	r7, #20
 8008232:	46bd      	mov	sp, r7
 8008234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008238:	4770      	bx	lr
 800823a:	bf00      	nop
 800823c:	0800b0d0 	.word	0x0800b0d0
 8008240:	0800b0d8 	.word	0x0800b0d8

08008244 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	f5ad 5d10 	sub.w	sp, sp, #9216	; 0x2400
 800824a:	b084      	sub	sp, #16
 800824c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	  // for pdm: input buffer is uint8 with length >= (48 * 64 * 1/8) = 384
	  uint8_t pdm_buffer[PLAY_BUFF_SIZE/4] = {0};
 800824e:	f242 0304 	movw	r3, #8196	; 0x2004
 8008252:	443b      	add	r3, r7
 8008254:	2200      	movs	r2, #0
 8008256:	601a      	str	r2, [r3, #0]
 8008258:	3304      	adds	r3, #4
 800825a:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 800825e:	2100      	movs	r1, #0
 8008260:	4618      	mov	r0, r3
 8008262:	f002 fd31 	bl	800acc8 <memset>

	  // for pdm: output buffer is uint16 with length >= 48
	  uint16_t pcm_buffer[PLAY_BUFF_SIZE] = {0};
 8008266:	4b49      	ldr	r3, [pc, #292]	; (800838c <main+0x148>)
 8008268:	f242 4210 	movw	r2, #9232	; 0x2410
 800826c:	443a      	add	r2, r7
 800826e:	4413      	add	r3, r2
 8008270:	4618      	mov	r0, r3
 8008272:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008276:	461a      	mov	r2, r3
 8008278:	2100      	movs	r1, #0
 800827a:	f002 fd25 	bl	800acc8 <memset>

	  uint32_t PlaybackPosition   = PLAY_BUFF_SIZE + pcm_buffer;
 800827e:	4b43      	ldr	r3, [pc, #268]	; (800838c <main+0x148>)
 8008280:	f242 4210 	movw	r2, #9232	; 0x2410
 8008284:	443a      	add	r2, r7
 8008286:	4413      	add	r3, r2
 8008288:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800828c:	f242 4208 	movw	r2, #9224	; 0x2408
 8008290:	443a      	add	r2, r7
 8008292:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008294:	f7f8 fa0c 	bl	80006b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008298:	f000 f888 	bl	80083ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800829c:	f000 fa68 	bl	8008770 <MX_GPIO_Init>
  MX_BDMA_Init();
 80082a0:	f000 fa16 	bl	80086d0 <MX_BDMA_Init>
  MX_SAI4_Init();
 80082a4:	f000 f968 	bl	8008578 <MX_SAI4_Init>
  MX_CRC_Init();
 80082a8:	f000 f8ee 	bl	8008488 <MX_CRC_Init>
  MX_USART3_UART_Init();
 80082ac:	f000 f9c4 	bl	8008638 <MX_USART3_UART_Init>
  MX_DMA_Init();
 80082b0:	f000 fa36 	bl	8008720 <MX_DMA_Init>
  MX_PDM2PCM_Init();
 80082b4:	f000 fade 	bl	8008874 <MX_PDM2PCM_Init>
  //MX_DFSDM1_Init();
  MX_SAI1_Init();
 80082b8:	f000 f928 	bl	800850c <MX_SAI1_Init>
  /* USER CODE BEGIN 2 */

  HAL_SAI_MspInit(&hdma_sai1_b);
 80082bc:	4834      	ldr	r0, [pc, #208]	; (8008390 <main+0x14c>)
 80082be:	f000 fba5 	bl	8008a0c <HAL_SAI_MspInit>
  /* Infinite loop */
  // output freq (pcm freq) = 48kHz
  // decimiation factor = 64

  /* INITIALIZE */
  HAL_SAI_MspInit(&hsai_BlockA4);
 80082c2:	4834      	ldr	r0, [pc, #208]	; (8008394 <main+0x150>)
 80082c4:	f000 fba2 	bl	8008a0c <HAL_SAI_MspInit>
  HAL_SAI_Init(&hsai_BlockA4);
 80082c8:	4832      	ldr	r0, [pc, #200]	; (8008394 <main+0x150>)
 80082ca:	f7fe f875 	bl	80063b8 <HAL_SAI_Init>

  // polling mode - SIZE = # BYTES
  HAL_SAI_Receive(&hsai_BlockA4, pdm_buffer, 64, 1000);
 80082ce:	f242 0104 	movw	r1, #8196	; 0x2004
 80082d2:	4439      	add	r1, r7
 80082d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80082d8:	2240      	movs	r2, #64	; 0x40
 80082da:	482e      	ldr	r0, [pc, #184]	; (8008394 <main+0x150>)
 80082dc:	f7fe fa80 	bl	80067e0 <HAL_SAI_Receive>
  uint32_t pdm_status = PDM_Filter(pdm_buffer, pcm_buffer, &PDM1_filter_handler);
 80082e0:	4b2a      	ldr	r3, [pc, #168]	; (800838c <main+0x148>)
 80082e2:	f242 4210 	movw	r2, #9232	; 0x2410
 80082e6:	443a      	add	r2, r7
 80082e8:	4413      	add	r3, r2
 80082ea:	f242 0004 	movw	r0, #8196	; 0x2004
 80082ee:	4438      	add	r0, r7
 80082f0:	4a29      	ldr	r2, [pc, #164]	; (8008398 <main+0x154>)
 80082f2:	4619      	mov	r1, r3
 80082f4:	f002 fca4 	bl	800ac40 <PDM_Filter>
 80082f8:	f242 4304 	movw	r3, #9220	; 0x2404
 80082fc:	443b      	add	r3, r7
 80082fe:	6018      	str	r0, [r3, #0]
  Playback_Init();
 8008300:	f000 fa8c 	bl	800881c <Playback_Init>

  /* Initialize the data buffer */
  for(int i=0; i < PLAY_BUFF_SIZE; i+=2)
 8008304:	2300      	movs	r3, #0
 8008306:	f242 420c 	movw	r2, #9228	; 0x240c
 800830a:	443a      	add	r2, r7
 800830c:	6013      	str	r3, [r2, #0]
 800830e:	e01d      	b.n	800834c <main+0x108>
  {
    PlayBuff[i]=*((__IO uint16_t *)(pcm_buffer + PLAY_HEADER + i));
 8008310:	f242 430c 	movw	r3, #9228	; 0x240c
 8008314:	443b      	add	r3, r7
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	332c      	adds	r3, #44	; 0x2c
 800831a:	005a      	lsls	r2, r3, #1
 800831c:	4b1b      	ldr	r3, [pc, #108]	; (800838c <main+0x148>)
 800831e:	f242 4110 	movw	r1, #9232	; 0x2410
 8008322:	4439      	add	r1, r7
 8008324:	440b      	add	r3, r1
 8008326:	4413      	add	r3, r2
 8008328:	881b      	ldrh	r3, [r3, #0]
 800832a:	b299      	uxth	r1, r3
 800832c:	4a1b      	ldr	r2, [pc, #108]	; (800839c <main+0x158>)
 800832e:	f242 430c 	movw	r3, #9228	; 0x240c
 8008332:	443b      	add	r3, r7
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(int i=0; i < PLAY_BUFF_SIZE; i+=2)
 800833a:	f242 430c 	movw	r3, #9228	; 0x240c
 800833e:	443b      	add	r3, r7
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	3302      	adds	r3, #2
 8008344:	f242 420c 	movw	r2, #9228	; 0x240c
 8008348:	443a      	add	r2, r7
 800834a:	6013      	str	r3, [r2, #0]
 800834c:	f242 430c 	movw	r3, #9228	; 0x240c
 8008350:	443b      	add	r3, r7
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008358:	dbda      	blt.n	8008310 <main+0xcc>
  }

  /* Start the playback */
  if(0 != AudioDrv->Play(AudioCompObj))
 800835a:	4b11      	ldr	r3, [pc, #68]	; (80083a0 <main+0x15c>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	68db      	ldr	r3, [r3, #12]
 8008360:	4a10      	ldr	r2, [pc, #64]	; (80083a4 <main+0x160>)
 8008362:	6812      	ldr	r2, [r2, #0]
 8008364:	4610      	mov	r0, r2
 8008366:	4798      	blx	r3
 8008368:	4603      	mov	r3, r0
 800836a:	2b00      	cmp	r3, #0
 800836c:	d001      	beq.n	8008372 <main+0x12e>
  {
    Error_Handler();
 800836e:	f000 fa7b 	bl	8008868 <Error_Handler>
  }

  if(HAL_OK != HAL_SAI_Transmit_DMA(&hsai_BlockB1, (uint8_t *)PlayBuff, PLAY_BUFF_SIZE))
 8008372:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008376:	4909      	ldr	r1, [pc, #36]	; (800839c <main+0x158>)
 8008378:	480b      	ldr	r0, [pc, #44]	; (80083a8 <main+0x164>)
 800837a:	f7fe fb33 	bl	80069e4 <HAL_SAI_Transmit_DMA>
 800837e:	4603      	mov	r3, r0
 8008380:	2b00      	cmp	r3, #0
 8008382:	d001      	beq.n	8008388 <main+0x144>
  {
    Error_Handler();
 8008384:	f000 fa70 	bl	8008868 <Error_Handler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8008388:	e7fe      	b.n	8008388 <main+0x144>
 800838a:	bf00      	nop
 800838c:	ffffdbf4 	.word	0xffffdbf4
 8008390:	240027ac 	.word	0x240027ac
 8008394:	24002618 	.word	0x24002618
 8008398:	24002760 	.word	0x24002760
 800839c:	24000580 	.word	0x24000580
 80083a0:	240004a0 	.word	0x240004a0
 80083a4:	240004c0 	.word	0x240004c0
 80083a8:	24002580 	.word	0x24002580

080083ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b09c      	sub	sp, #112	; 0x70
 80083b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80083b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80083b6:	224c      	movs	r2, #76	; 0x4c
 80083b8:	2100      	movs	r1, #0
 80083ba:	4618      	mov	r0, r3
 80083bc:	f002 fc84 	bl	800acc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80083c0:	1d3b      	adds	r3, r7, #4
 80083c2:	2220      	movs	r2, #32
 80083c4:	2100      	movs	r1, #0
 80083c6:	4618      	mov	r0, r3
 80083c8:	f002 fc7e 	bl	800acc8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80083cc:	2004      	movs	r0, #4
 80083ce:	f7fa ff9d 	bl	800330c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80083d2:	2300      	movs	r3, #0
 80083d4:	603b      	str	r3, [r7, #0]
 80083d6:	4b2b      	ldr	r3, [pc, #172]	; (8008484 <SystemClock_Config+0xd8>)
 80083d8:	699b      	ldr	r3, [r3, #24]
 80083da:	4a2a      	ldr	r2, [pc, #168]	; (8008484 <SystemClock_Config+0xd8>)
 80083dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80083e0:	6193      	str	r3, [r2, #24]
 80083e2:	4b28      	ldr	r3, [pc, #160]	; (8008484 <SystemClock_Config+0xd8>)
 80083e4:	699b      	ldr	r3, [r3, #24]
 80083e6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80083ea:	603b      	str	r3, [r7, #0]
 80083ec:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80083ee:	bf00      	nop
 80083f0:	4b24      	ldr	r3, [pc, #144]	; (8008484 <SystemClock_Config+0xd8>)
 80083f2:	699b      	ldr	r3, [r3, #24]
 80083f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80083f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083fc:	d1f8      	bne.n	80083f0 <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80083fe:	2302      	movs	r3, #2
 8008400:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8008402:	2301      	movs	r3, #1
 8008404:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8008406:	2340      	movs	r3, #64	; 0x40
 8008408:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800840a:	2302      	movs	r3, #2
 800840c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800840e:	2300      	movs	r3, #0
 8008410:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8008412:	2304      	movs	r3, #4
 8008414:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8008416:	2318      	movs	r3, #24
 8008418:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800841a:	2301      	movs	r3, #1
 800841c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 125;
 800841e:	237d      	movs	r3, #125	; 0x7d
 8008420:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8008422:	2302      	movs	r3, #2
 8008424:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8008426:	230c      	movs	r3, #12
 8008428:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800842a:	2300      	movs	r3, #0
 800842c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800842e:	2300      	movs	r3, #0
 8008430:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008432:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008436:	4618      	mov	r0, r3
 8008438:	f7fa ffc2 	bl	80033c0 <HAL_RCC_OscConfig>
 800843c:	4603      	mov	r3, r0
 800843e:	2b00      	cmp	r3, #0
 8008440:	d001      	beq.n	8008446 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8008442:	f000 fa11 	bl	8008868 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008446:	233f      	movs	r3, #63	; 0x3f
 8008448:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800844a:	2303      	movs	r3, #3
 800844c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800844e:	2300      	movs	r3, #0
 8008450:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8008452:	2308      	movs	r3, #8
 8008454:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8008456:	2340      	movs	r3, #64	; 0x40
 8008458:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800845a:	2340      	movs	r3, #64	; 0x40
 800845c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800845e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008462:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8008464:	2340      	movs	r3, #64	; 0x40
 8008466:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8008468:	1d3b      	adds	r3, r7, #4
 800846a:	2102      	movs	r1, #2
 800846c:	4618      	mov	r0, r3
 800846e:	f7fb fb53 	bl	8003b18 <HAL_RCC_ClockConfig>
 8008472:	4603      	mov	r3, r0
 8008474:	2b00      	cmp	r3, #0
 8008476:	d001      	beq.n	800847c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8008478:	f000 f9f6 	bl	8008868 <Error_Handler>
  }
}
 800847c:	bf00      	nop
 800847e:	3770      	adds	r7, #112	; 0x70
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}
 8008484:	58024800 	.word	0x58024800

08008488 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b082      	sub	sp, #8
 800848c:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800848e:	4b1c      	ldr	r3, [pc, #112]	; (8008500 <MX_CRC_Init+0x78>)
 8008490:	4a1c      	ldr	r2, [pc, #112]	; (8008504 <MX_CRC_Init+0x7c>)
 8008492:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8008494:	4b1a      	ldr	r3, [pc, #104]	; (8008500 <MX_CRC_Init+0x78>)
 8008496:	2200      	movs	r2, #0
 8008498:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800849a:	4b19      	ldr	r3, [pc, #100]	; (8008500 <MX_CRC_Init+0x78>)
 800849c:	2200      	movs	r2, #0
 800849e:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80084a0:	4b17      	ldr	r3, [pc, #92]	; (8008500 <MX_CRC_Init+0x78>)
 80084a2:	2200      	movs	r2, #0
 80084a4:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80084a6:	4b16      	ldr	r3, [pc, #88]	; (8008500 <MX_CRC_Init+0x78>)
 80084a8:	2200      	movs	r2, #0
 80084aa:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80084ac:	4b14      	ldr	r3, [pc, #80]	; (8008500 <MX_CRC_Init+0x78>)
 80084ae:	2201      	movs	r2, #1
 80084b0:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80084b2:	4813      	ldr	r0, [pc, #76]	; (8008500 <MX_CRC_Init+0x78>)
 80084b4:	f7f8 fa9e 	bl	80009f4 <HAL_CRC_Init>
 80084b8:	4603      	mov	r3, r0
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d001      	beq.n	80084c2 <MX_CRC_Init+0x3a>
  {
    Error_Handler();
 80084be:	f000 f9d3 	bl	8008868 <Error_Handler>
  }
  __HAL_CRC_DR_RESET(&hcrc);
 80084c2:	4b0f      	ldr	r3, [pc, #60]	; (8008500 <MX_CRC_Init+0x78>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	689a      	ldr	r2, [r3, #8]
 80084c8:	4b0d      	ldr	r3, [pc, #52]	; (8008500 <MX_CRC_Init+0x78>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f042 0201 	orr.w	r2, r2, #1
 80084d0:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN CRC_Init 2 */

  __HAL_RCC_CRC_CLK_ENABLE();
 80084d2:	4b0d      	ldr	r3, [pc, #52]	; (8008508 <MX_CRC_Init+0x80>)
 80084d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80084d8:	4a0b      	ldr	r2, [pc, #44]	; (8008508 <MX_CRC_Init+0x80>)
 80084da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80084de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80084e2:	4b09      	ldr	r3, [pc, #36]	; (8008508 <MX_CRC_Init+0x80>)
 80084e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80084e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80084ec:	607b      	str	r3, [r7, #4]
 80084ee:	687b      	ldr	r3, [r7, #4]
  HAL_CRC_MspInit(&hcrc);
 80084f0:	4803      	ldr	r0, [pc, #12]	; (8008500 <MX_CRC_Init+0x78>)
 80084f2:	f000 fa03 	bl	80088fc <HAL_CRC_MspInit>

  /* USER CODE END CRC_Init 2 */

}
 80084f6:	bf00      	nop
 80084f8:	3708      	adds	r7, #8
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}
 80084fe:	bf00      	nop
 8008500:	24000554 	.word	0x24000554
 8008504:	58024c00 	.word	0x58024c00
 8008508:	58024400 	.word	0x58024400

0800850c <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockB1.Instance = SAI1_Block_B;
 8008510:	4b16      	ldr	r3, [pc, #88]	; (800856c <MX_SAI1_Init+0x60>)
 8008512:	4a17      	ldr	r2, [pc, #92]	; (8008570 <MX_SAI1_Init+0x64>)
 8008514:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 8008516:	4b15      	ldr	r3, [pc, #84]	; (800856c <MX_SAI1_Init+0x60>)
 8008518:	2200      	movs	r2, #0
 800851a:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 800851c:	4b13      	ldr	r3, [pc, #76]	; (800856c <MX_SAI1_Init+0x60>)
 800851e:	2200      	movs	r2, #0
 8008520:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8008522:	4b12      	ldr	r3, [pc, #72]	; (800856c <MX_SAI1_Init+0x60>)
 8008524:	2200      	movs	r2, #0
 8008526:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8008528:	4b10      	ldr	r3, [pc, #64]	; (800856c <MX_SAI1_Init+0x60>)
 800852a:	2200      	movs	r2, #0
 800852c:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800852e:	4b0f      	ldr	r3, [pc, #60]	; (800856c <MX_SAI1_Init+0x60>)
 8008530:	2200      	movs	r2, #0
 8008532:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8008534:	4b0d      	ldr	r3, [pc, #52]	; (800856c <MX_SAI1_Init+0x60>)
 8008536:	4a0f      	ldr	r2, [pc, #60]	; (8008574 <MX_SAI1_Init+0x68>)
 8008538:	621a      	str	r2, [r3, #32]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800853a:	4b0c      	ldr	r3, [pc, #48]	; (800856c <MX_SAI1_Init+0x60>)
 800853c:	2200      	movs	r2, #0
 800853e:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8008540:	4b0a      	ldr	r3, [pc, #40]	; (800856c <MX_SAI1_Init+0x60>)
 8008542:	2200      	movs	r2, #0
 8008544:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8008546:	4b09      	ldr	r3, [pc, #36]	; (800856c <MX_SAI1_Init+0x60>)
 8008548:	2200      	movs	r2, #0
 800854a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800854c:	4b07      	ldr	r3, [pc, #28]	; (800856c <MX_SAI1_Init+0x60>)
 800854e:	2200      	movs	r2, #0
 8008550:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8008552:	2302      	movs	r3, #2
 8008554:	2200      	movs	r2, #0
 8008556:	2100      	movs	r1, #0
 8008558:	4804      	ldr	r0, [pc, #16]	; (800856c <MX_SAI1_Init+0x60>)
 800855a:	f7fd fefb 	bl	8006354 <HAL_SAI_InitProtocol>
 800855e:	4603      	mov	r3, r0
 8008560:	2b00      	cmp	r3, #0
 8008562:	d001      	beq.n	8008568 <MX_SAI1_Init+0x5c>
  {
    Error_Handler();
 8008564:	f000 f980 	bl	8008868 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8008568:	bf00      	nop
 800856a:	bd80      	pop	{r7, pc}
 800856c:	24002580 	.word	0x24002580
 8008570:	40015824 	.word	0x40015824
 8008574:	0002ee00 	.word	0x0002ee00

08008578 <MX_SAI4_Init>:
  * @brief SAI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI4_Init(void)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	af00      	add	r7, sp, #0
  /* USER CODE END SAI4_Init 0 */

  /* USER CODE BEGIN SAI4_Init 1 */

  /* USER CODE END SAI4_Init 1 */
  hsai_BlockA4.Instance = SAI4_Block_A;
 800857c:	4b2c      	ldr	r3, [pc, #176]	; (8008630 <MX_SAI4_Init+0xb8>)
 800857e:	4a2d      	ldr	r2, [pc, #180]	; (8008634 <MX_SAI4_Init+0xbc>)
 8008580:	601a      	str	r2, [r3, #0]
  hsai_BlockA4.Init.Protocol = SAI_FREE_PROTOCOL;
 8008582:	4b2b      	ldr	r3, [pc, #172]	; (8008630 <MX_SAI4_Init+0xb8>)
 8008584:	2200      	movs	r2, #0
 8008586:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA4.Init.AudioMode = SAI_MODEMASTER_RX;
 8008588:	4b29      	ldr	r3, [pc, #164]	; (8008630 <MX_SAI4_Init+0xb8>)
 800858a:	2201      	movs	r2, #1
 800858c:	605a      	str	r2, [r3, #4]
  hsai_BlockA4.Init.DataSize = SAI_DATASIZE_16;
 800858e:	4b28      	ldr	r3, [pc, #160]	; (8008630 <MX_SAI4_Init+0xb8>)
 8008590:	2280      	movs	r2, #128	; 0x80
 8008592:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA4.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8008594:	4b26      	ldr	r3, [pc, #152]	; (8008630 <MX_SAI4_Init+0xb8>)
 8008596:	2200      	movs	r2, #0
 8008598:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA4.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800859a:	4b25      	ldr	r3, [pc, #148]	; (8008630 <MX_SAI4_Init+0xb8>)
 800859c:	2200      	movs	r2, #0
 800859e:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA4.Init.Synchro = SAI_ASYNCHRONOUS;
 80085a0:	4b23      	ldr	r3, [pc, #140]	; (8008630 <MX_SAI4_Init+0xb8>)
 80085a2:	2200      	movs	r2, #0
 80085a4:	609a      	str	r2, [r3, #8]
  hsai_BlockA4.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80085a6:	4b22      	ldr	r3, [pc, #136]	; (8008630 <MX_SAI4_Init+0xb8>)
 80085a8:	2200      	movs	r2, #0
 80085aa:	615a      	str	r2, [r3, #20]
  hsai_BlockA4.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80085ac:	4b20      	ldr	r3, [pc, #128]	; (8008630 <MX_SAI4_Init+0xb8>)
 80085ae:	2200      	movs	r2, #0
 80085b0:	619a      	str	r2, [r3, #24]
  hsai_BlockA4.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80085b2:	4b1f      	ldr	r3, [pc, #124]	; (8008630 <MX_SAI4_Init+0xb8>)
 80085b4:	2200      	movs	r2, #0
 80085b6:	61da      	str	r2, [r3, #28]
  hsai_BlockA4.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 80085b8:	4b1d      	ldr	r3, [pc, #116]	; (8008630 <MX_SAI4_Init+0xb8>)
 80085ba:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80085be:	621a      	str	r2, [r3, #32]
  hsai_BlockA4.Init.MonoStereoMode = SAI_STEREOMODE;
 80085c0:	4b1b      	ldr	r3, [pc, #108]	; (8008630 <MX_SAI4_Init+0xb8>)
 80085c2:	2200      	movs	r2, #0
 80085c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA4.Init.CompandingMode = SAI_NOCOMPANDING;
 80085c6:	4b1a      	ldr	r3, [pc, #104]	; (8008630 <MX_SAI4_Init+0xb8>)
 80085c8:	2200      	movs	r2, #0
 80085ca:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA4.Init.PdmInit.Activation = ENABLE;
 80085cc:	4b18      	ldr	r3, [pc, #96]	; (8008630 <MX_SAI4_Init+0xb8>)
 80085ce:	2201      	movs	r2, #1
 80085d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA4.Init.PdmInit.MicPairsNbr = 2;
 80085d4:	4b16      	ldr	r3, [pc, #88]	; (8008630 <MX_SAI4_Init+0xb8>)
 80085d6:	2202      	movs	r2, #2
 80085d8:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA4.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK2_ENABLE;
 80085da:	4b15      	ldr	r3, [pc, #84]	; (8008630 <MX_SAI4_Init+0xb8>)
 80085dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80085e0:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA4.FrameInit.FrameLength = 16;
 80085e2:	4b13      	ldr	r3, [pc, #76]	; (8008630 <MX_SAI4_Init+0xb8>)
 80085e4:	2210      	movs	r2, #16
 80085e6:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA4.FrameInit.ActiveFrameLength = 1;
 80085e8:	4b11      	ldr	r3, [pc, #68]	; (8008630 <MX_SAI4_Init+0xb8>)
 80085ea:	2201      	movs	r2, #1
 80085ec:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA4.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80085ee:	4b10      	ldr	r3, [pc, #64]	; (8008630 <MX_SAI4_Init+0xb8>)
 80085f0:	2200      	movs	r2, #0
 80085f2:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA4.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80085f4:	4b0e      	ldr	r3, [pc, #56]	; (8008630 <MX_SAI4_Init+0xb8>)
 80085f6:	2200      	movs	r2, #0
 80085f8:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA4.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80085fa:	4b0d      	ldr	r3, [pc, #52]	; (8008630 <MX_SAI4_Init+0xb8>)
 80085fc:	2200      	movs	r2, #0
 80085fe:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA4.SlotInit.FirstBitOffset = 0;
 8008600:	4b0b      	ldr	r3, [pc, #44]	; (8008630 <MX_SAI4_Init+0xb8>)
 8008602:	2200      	movs	r2, #0
 8008604:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA4.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8008606:	4b0a      	ldr	r3, [pc, #40]	; (8008630 <MX_SAI4_Init+0xb8>)
 8008608:	2200      	movs	r2, #0
 800860a:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA4.SlotInit.SlotNumber = 1;
 800860c:	4b08      	ldr	r3, [pc, #32]	; (8008630 <MX_SAI4_Init+0xb8>)
 800860e:	2201      	movs	r2, #1
 8008610:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA4.SlotInit.SlotActive = 0x0000FFFF;
 8008612:	4b07      	ldr	r3, [pc, #28]	; (8008630 <MX_SAI4_Init+0xb8>)
 8008614:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008618:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA4) != HAL_OK)
 800861a:	4805      	ldr	r0, [pc, #20]	; (8008630 <MX_SAI4_Init+0xb8>)
 800861c:	f7fd fecc 	bl	80063b8 <HAL_SAI_Init>
 8008620:	4603      	mov	r3, r0
 8008622:	2b00      	cmp	r3, #0
 8008624:	d001      	beq.n	800862a <MX_SAI4_Init+0xb2>
  {
    Error_Handler();
 8008626:	f000 f91f 	bl	8008868 <Error_Handler>
  }
  /* USER CODE BEGIN SAI4_Init 2 */

  /* USER CODE END SAI4_Init 2 */

}
 800862a:	bf00      	nop
 800862c:	bd80      	pop	{r7, pc}
 800862e:	bf00      	nop
 8008630:	24002618 	.word	0x24002618
 8008634:	58005404 	.word	0x58005404

08008638 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800863c:	4b22      	ldr	r3, [pc, #136]	; (80086c8 <MX_USART3_UART_Init+0x90>)
 800863e:	4a23      	ldr	r2, [pc, #140]	; (80086cc <MX_USART3_UART_Init+0x94>)
 8008640:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8008642:	4b21      	ldr	r3, [pc, #132]	; (80086c8 <MX_USART3_UART_Init+0x90>)
 8008644:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008648:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800864a:	4b1f      	ldr	r3, [pc, #124]	; (80086c8 <MX_USART3_UART_Init+0x90>)
 800864c:	2200      	movs	r2, #0
 800864e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8008650:	4b1d      	ldr	r3, [pc, #116]	; (80086c8 <MX_USART3_UART_Init+0x90>)
 8008652:	2200      	movs	r2, #0
 8008654:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8008656:	4b1c      	ldr	r3, [pc, #112]	; (80086c8 <MX_USART3_UART_Init+0x90>)
 8008658:	2200      	movs	r2, #0
 800865a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800865c:	4b1a      	ldr	r3, [pc, #104]	; (80086c8 <MX_USART3_UART_Init+0x90>)
 800865e:	220c      	movs	r2, #12
 8008660:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008662:	4b19      	ldr	r3, [pc, #100]	; (80086c8 <MX_USART3_UART_Init+0x90>)
 8008664:	2200      	movs	r2, #0
 8008666:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8008668:	4b17      	ldr	r3, [pc, #92]	; (80086c8 <MX_USART3_UART_Init+0x90>)
 800866a:	2200      	movs	r2, #0
 800866c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800866e:	4b16      	ldr	r3, [pc, #88]	; (80086c8 <MX_USART3_UART_Init+0x90>)
 8008670:	2200      	movs	r2, #0
 8008672:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8008674:	4b14      	ldr	r3, [pc, #80]	; (80086c8 <MX_USART3_UART_Init+0x90>)
 8008676:	2200      	movs	r2, #0
 8008678:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800867a:	4b13      	ldr	r3, [pc, #76]	; (80086c8 <MX_USART3_UART_Init+0x90>)
 800867c:	2200      	movs	r2, #0
 800867e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8008680:	4811      	ldr	r0, [pc, #68]	; (80086c8 <MX_USART3_UART_Init+0x90>)
 8008682:	f7fe fc78 	bl	8006f76 <HAL_UART_Init>
 8008686:	4603      	mov	r3, r0
 8008688:	2b00      	cmp	r3, #0
 800868a:	d001      	beq.n	8008690 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800868c:	f000 f8ec 	bl	8008868 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008690:	2100      	movs	r1, #0
 8008692:	480d      	ldr	r0, [pc, #52]	; (80086c8 <MX_USART3_UART_Init+0x90>)
 8008694:	f7ff fd0c 	bl	80080b0 <HAL_UARTEx_SetTxFifoThreshold>
 8008698:	4603      	mov	r3, r0
 800869a:	2b00      	cmp	r3, #0
 800869c:	d001      	beq.n	80086a2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800869e:	f000 f8e3 	bl	8008868 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80086a2:	2100      	movs	r1, #0
 80086a4:	4808      	ldr	r0, [pc, #32]	; (80086c8 <MX_USART3_UART_Init+0x90>)
 80086a6:	f7ff fd41 	bl	800812c <HAL_UARTEx_SetRxFifoThreshold>
 80086aa:	4603      	mov	r3, r0
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d001      	beq.n	80086b4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80086b0:	f000 f8da 	bl	8008868 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80086b4:	4804      	ldr	r0, [pc, #16]	; (80086c8 <MX_USART3_UART_Init+0x90>)
 80086b6:	f7ff fcc2 	bl	800803e <HAL_UARTEx_DisableFifoMode>
 80086ba:	4603      	mov	r3, r0
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d001      	beq.n	80086c4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80086c0:	f000 f8d2 	bl	8008868 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80086c4:	bf00      	nop
 80086c6:	bd80      	pop	{r7, pc}
 80086c8:	240004c4 	.word	0x240004c4
 80086cc:	40004800 	.word	0x40004800

080086d0 <MX_BDMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_BDMA_Init(void)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b082      	sub	sp, #8
 80086d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 80086d6:	4b11      	ldr	r3, [pc, #68]	; (800871c <MX_BDMA_Init+0x4c>)
 80086d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80086dc:	4a0f      	ldr	r2, [pc, #60]	; (800871c <MX_BDMA_Init+0x4c>)
 80086de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80086e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80086e6:	4b0d      	ldr	r3, [pc, #52]	; (800871c <MX_BDMA_Init+0x4c>)
 80086e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80086ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80086f0:	607b      	str	r3, [r7, #4]
 80086f2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMAMUX2_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX2_OVR_IRQn, 0, 0);
 80086f4:	2200      	movs	r2, #0
 80086f6:	2100      	movs	r1, #0
 80086f8:	2080      	movs	r0, #128	; 0x80
 80086fa:	f7f8 f946 	bl	800098a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX2_OVR_IRQn);
 80086fe:	2080      	movs	r0, #128	; 0x80
 8008700:	f7f8 f95d 	bl	80009be <HAL_NVIC_EnableIRQ>
  /* BDMA_Channel0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 0, 0);
 8008704:	2200      	movs	r2, #0
 8008706:	2100      	movs	r1, #0
 8008708:	2081      	movs	r0, #129	; 0x81
 800870a:	f7f8 f93e 	bl	800098a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
 800870e:	2081      	movs	r0, #129	; 0x81
 8008710:	f7f8 f955 	bl	80009be <HAL_NVIC_EnableIRQ>

}
 8008714:	bf00      	nop
 8008716:	3708      	adds	r7, #8
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}
 800871c:	58024400 	.word	0x58024400

08008720 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b082      	sub	sp, #8
 8008724:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8008726:	4b11      	ldr	r3, [pc, #68]	; (800876c <MX_DMA_Init+0x4c>)
 8008728:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800872c:	4a0f      	ldr	r2, [pc, #60]	; (800876c <MX_DMA_Init+0x4c>)
 800872e:	f043 0301 	orr.w	r3, r3, #1
 8008732:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8008736:	4b0d      	ldr	r3, [pc, #52]	; (800876c <MX_DMA_Init+0x4c>)
 8008738:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800873c:	f003 0301 	and.w	r3, r3, #1
 8008740:	607b      	str	r3, [r7, #4]
 8008742:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8008744:	2200      	movs	r2, #0
 8008746:	2100      	movs	r1, #0
 8008748:	200c      	movs	r0, #12
 800874a:	f7f8 f91e 	bl	800098a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800874e:	200c      	movs	r0, #12
 8008750:	f7f8 f935 	bl	80009be <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 0, 0);
 8008754:	2200      	movs	r2, #0
 8008756:	2100      	movs	r1, #0
 8008758:	2066      	movs	r0, #102	; 0x66
 800875a:	f7f8 f916 	bl	800098a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
 800875e:	2066      	movs	r0, #102	; 0x66
 8008760:	f7f8 f92d 	bl	80009be <HAL_NVIC_EnableIRQ>

}
 8008764:	bf00      	nop
 8008766:	3708      	adds	r7, #8
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}
 800876c:	58024400 	.word	0x58024400

08008770 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008770:	b480      	push	{r7}
 8008772:	b087      	sub	sp, #28
 8008774:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008776:	4b28      	ldr	r3, [pc, #160]	; (8008818 <MX_GPIO_Init+0xa8>)
 8008778:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800877c:	4a26      	ldr	r2, [pc, #152]	; (8008818 <MX_GPIO_Init+0xa8>)
 800877e:	f043 0301 	orr.w	r3, r3, #1
 8008782:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008786:	4b24      	ldr	r3, [pc, #144]	; (8008818 <MX_GPIO_Init+0xa8>)
 8008788:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800878c:	f003 0301 	and.w	r3, r3, #1
 8008790:	617b      	str	r3, [r7, #20]
 8008792:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8008794:	4b20      	ldr	r3, [pc, #128]	; (8008818 <MX_GPIO_Init+0xa8>)
 8008796:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800879a:	4a1f      	ldr	r2, [pc, #124]	; (8008818 <MX_GPIO_Init+0xa8>)
 800879c:	f043 0310 	orr.w	r3, r3, #16
 80087a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80087a4:	4b1c      	ldr	r3, [pc, #112]	; (8008818 <MX_GPIO_Init+0xa8>)
 80087a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80087aa:	f003 0310 	and.w	r3, r3, #16
 80087ae:	613b      	str	r3, [r7, #16]
 80087b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80087b2:	4b19      	ldr	r3, [pc, #100]	; (8008818 <MX_GPIO_Init+0xa8>)
 80087b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80087b8:	4a17      	ldr	r2, [pc, #92]	; (8008818 <MX_GPIO_Init+0xa8>)
 80087ba:	f043 0304 	orr.w	r3, r3, #4
 80087be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80087c2:	4b15      	ldr	r3, [pc, #84]	; (8008818 <MX_GPIO_Init+0xa8>)
 80087c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80087c8:	f003 0304 	and.w	r3, r3, #4
 80087cc:	60fb      	str	r3, [r7, #12]
 80087ce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80087d0:	4b11      	ldr	r3, [pc, #68]	; (8008818 <MX_GPIO_Init+0xa8>)
 80087d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80087d6:	4a10      	ldr	r2, [pc, #64]	; (8008818 <MX_GPIO_Init+0xa8>)
 80087d8:	f043 0308 	orr.w	r3, r3, #8
 80087dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80087e0:	4b0d      	ldr	r3, [pc, #52]	; (8008818 <MX_GPIO_Init+0xa8>)
 80087e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80087e6:	f003 0308 	and.w	r3, r3, #8
 80087ea:	60bb      	str	r3, [r7, #8]
 80087ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80087ee:	4b0a      	ldr	r3, [pc, #40]	; (8008818 <MX_GPIO_Init+0xa8>)
 80087f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80087f4:	4a08      	ldr	r2, [pc, #32]	; (8008818 <MX_GPIO_Init+0xa8>)
 80087f6:	f043 0320 	orr.w	r3, r3, #32
 80087fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80087fe:	4b06      	ldr	r3, [pc, #24]	; (8008818 <MX_GPIO_Init+0xa8>)
 8008800:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008804:	f003 0320 	and.w	r3, r3, #32
 8008808:	607b      	str	r3, [r7, #4]
 800880a:	687b      	ldr	r3, [r7, #4]

}
 800880c:	bf00      	nop
 800880e:	371c      	adds	r7, #28
 8008810:	46bd      	mov	sp, r7
 8008812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008816:	4770      	bx	lr
 8008818:	58024400 	.word	0x58024400

0800881c <Playback_Init>:
  * @brief  Playback initialization
  * @param  None
  * @retval None
  */
static void Playback_Init(void)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b0b2      	sub	sp, #200	; 0xc8
 8008820:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef RCC_PeriphCLKInitStruct;

  /* Configure PLLSAI prescalers */
  /* PLL2SAI_VCO: VCO_271M
     SAI_CLK(first level) = PLLSAI_VCO/PLL2P = 271/24 = 11.291 Mhz */
  RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8008822:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008826:	603b      	str	r3, [r7, #0]
  RCC_PeriphCLKInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 8008828:	2301      	movs	r3, #1
 800882a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_PeriphCLKInitStruct.PLL2.PLL2P = 24;
 800882c:	2318      	movs	r3, #24
 800882e:	60fb      	str	r3, [r7, #12]
  RCC_PeriphCLKInitStruct.PLL2.PLL2Q = 24;
 8008830:	2318      	movs	r3, #24
 8008832:	613b      	str	r3, [r7, #16]
  RCC_PeriphCLKInitStruct.PLL2.PLL2R = 1;
 8008834:	2301      	movs	r3, #1
 8008836:	617b      	str	r3, [r7, #20]
  RCC_PeriphCLKInitStruct.PLL2.PLL2N = 271;
 8008838:	f240 130f 	movw	r3, #271	; 0x10f
 800883c:	60bb      	str	r3, [r7, #8]
  RCC_PeriphCLKInitStruct.PLL2.PLL2FRACN = 0;
 800883e:	2300      	movs	r3, #0
 8008840:	623b      	str	r3, [r7, #32]
  RCC_PeriphCLKInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8008842:	2300      	movs	r3, #0
 8008844:	61bb      	str	r3, [r7, #24]
  RCC_PeriphCLKInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8008846:	2320      	movs	r3, #32
 8008848:	61fb      	str	r3, [r7, #28]
  RCC_PeriphCLKInitStruct.PLL2.PLL2M = 25;
 800884a:	2319      	movs	r3, #25
 800884c:	607b      	str	r3, [r7, #4]

  if(HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct) != HAL_OK)
 800884e:	463b      	mov	r3, r7
 8008850:	4618      	mov	r0, r3
 8008852:	f7fb fced 	bl	8004230 <HAL_RCCEx_PeriphCLKConfig>
 8008856:	4603      	mov	r3, r0
 8008858:	2b00      	cmp	r3, #0
 800885a:	d001      	beq.n	8008860 <Playback_Init+0x44>
  {
    Error_Handler();
 800885c:	f000 f804 	bl	8008868 <Error_Handler>
  }
}
 8008860:	bf00      	nop
 8008862:	37c8      	adds	r7, #200	; 0xc8
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}

08008868 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008868:	b480      	push	{r7}
 800886a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800886c:	b672      	cpsid	i
}
 800886e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8008870:	e7fe      	b.n	8008870 <Error_Handler+0x8>
	...

08008874 <MX_PDM2PCM_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* PDM2PCM init function */
void MX_PDM2PCM_Init(void)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

   /**
  */
  PDM1_filter_handler.bit_order = PDM_FILTER_BIT_ORDER_LSB;
 8008878:	4b10      	ldr	r3, [pc, #64]	; (80088bc <MX_PDM2PCM_Init+0x48>)
 800887a:	2200      	movs	r2, #0
 800887c:	801a      	strh	r2, [r3, #0]
  PDM1_filter_handler.endianness = PDM_FILTER_ENDIANNESS_BE;
 800887e:	4b0f      	ldr	r3, [pc, #60]	; (80088bc <MX_PDM2PCM_Init+0x48>)
 8008880:	2201      	movs	r2, #1
 8008882:	805a      	strh	r2, [r3, #2]
  PDM1_filter_handler.high_pass_tap = 2104533974;
 8008884:	4b0d      	ldr	r3, [pc, #52]	; (80088bc <MX_PDM2PCM_Init+0x48>)
 8008886:	4a0e      	ldr	r2, [pc, #56]	; (80088c0 <MX_PDM2PCM_Init+0x4c>)
 8008888:	605a      	str	r2, [r3, #4]
  PDM1_filter_handler.in_ptr_channels = 2;
 800888a:	4b0c      	ldr	r3, [pc, #48]	; (80088bc <MX_PDM2PCM_Init+0x48>)
 800888c:	2202      	movs	r2, #2
 800888e:	811a      	strh	r2, [r3, #8]
  PDM1_filter_handler.out_ptr_channels = 2;
 8008890:	4b0a      	ldr	r3, [pc, #40]	; (80088bc <MX_PDM2PCM_Init+0x48>)
 8008892:	2202      	movs	r2, #2
 8008894:	815a      	strh	r2, [r3, #10]
  PDM_Filter_Init(&PDM1_filter_handler);
 8008896:	4809      	ldr	r0, [pc, #36]	; (80088bc <MX_PDM2PCM_Init+0x48>)
 8008898:	f002 f808 	bl	800a8ac <PDM_Filter_Init>

  PDM1_filter_config.decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 800889c:	4b09      	ldr	r3, [pc, #36]	; (80088c4 <MX_PDM2PCM_Init+0x50>)
 800889e:	2202      	movs	r2, #2
 80088a0:	801a      	strh	r2, [r3, #0]
  PDM1_filter_config.output_samples_number = 16;
 80088a2:	4b08      	ldr	r3, [pc, #32]	; (80088c4 <MX_PDM2PCM_Init+0x50>)
 80088a4:	2210      	movs	r2, #16
 80088a6:	805a      	strh	r2, [r3, #2]
  PDM1_filter_config.mic_gain = 0;
 80088a8:	4b06      	ldr	r3, [pc, #24]	; (80088c4 <MX_PDM2PCM_Init+0x50>)
 80088aa:	2200      	movs	r2, #0
 80088ac:	809a      	strh	r2, [r3, #4]
  PDM_Filter_setConfig(&PDM1_filter_handler, &PDM1_filter_config);
 80088ae:	4905      	ldr	r1, [pc, #20]	; (80088c4 <MX_PDM2PCM_Init+0x50>)
 80088b0:	4802      	ldr	r0, [pc, #8]	; (80088bc <MX_PDM2PCM_Init+0x48>)
 80088b2:	f002 f8cb 	bl	800aa4c <PDM_Filter_setConfig>

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 80088b6:	bf00      	nop
 80088b8:	bd80      	pop	{r7, pc}
 80088ba:	bf00      	nop
 80088bc:	24002760 	.word	0x24002760
 80088c0:	7d70a3d6 	.word	0x7d70a3d6
 80088c4:	24002824 	.word	0x24002824

080088c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80088c8:	b480      	push	{r7}
 80088ca:	b083      	sub	sp, #12
 80088cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80088ce:	4b0a      	ldr	r3, [pc, #40]	; (80088f8 <HAL_MspInit+0x30>)
 80088d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80088d4:	4a08      	ldr	r2, [pc, #32]	; (80088f8 <HAL_MspInit+0x30>)
 80088d6:	f043 0302 	orr.w	r3, r3, #2
 80088da:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80088de:	4b06      	ldr	r3, [pc, #24]	; (80088f8 <HAL_MspInit+0x30>)
 80088e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80088e4:	f003 0302 	and.w	r3, r3, #2
 80088e8:	607b      	str	r3, [r7, #4]
 80088ea:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80088ec:	bf00      	nop
 80088ee:	370c      	adds	r7, #12
 80088f0:	46bd      	mov	sp, r7
 80088f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f6:	4770      	bx	lr
 80088f8:	58024400 	.word	0x58024400

080088fc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80088fc:	b480      	push	{r7}
 80088fe:	b085      	sub	sp, #20
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	4a0b      	ldr	r2, [pc, #44]	; (8008938 <HAL_CRC_MspInit+0x3c>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d10e      	bne.n	800892c <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800890e:	4b0b      	ldr	r3, [pc, #44]	; (800893c <HAL_CRC_MspInit+0x40>)
 8008910:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008914:	4a09      	ldr	r2, [pc, #36]	; (800893c <HAL_CRC_MspInit+0x40>)
 8008916:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800891a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800891e:	4b07      	ldr	r3, [pc, #28]	; (800893c <HAL_CRC_MspInit+0x40>)
 8008920:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008924:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008928:	60fb      	str	r3, [r7, #12]
 800892a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800892c:	bf00      	nop
 800892e:	3714      	adds	r7, #20
 8008930:	46bd      	mov	sp, r7
 8008932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008936:	4770      	bx	lr
 8008938:	58024c00 	.word	0x58024c00
 800893c:	58024400 	.word	0x58024400

08008940 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b0b6      	sub	sp, #216	; 0xd8
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008948:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800894c:	2200      	movs	r2, #0
 800894e:	601a      	str	r2, [r3, #0]
 8008950:	605a      	str	r2, [r3, #4]
 8008952:	609a      	str	r2, [r3, #8]
 8008954:	60da      	str	r2, [r3, #12]
 8008956:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008958:	f107 0310 	add.w	r3, r7, #16
 800895c:	22b4      	movs	r2, #180	; 0xb4
 800895e:	2100      	movs	r1, #0
 8008960:	4618      	mov	r0, r3
 8008962:	f002 f9b1 	bl	800acc8 <memset>
  if(huart->Instance==USART3)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	4a25      	ldr	r2, [pc, #148]	; (8008a00 <HAL_UART_MspInit+0xc0>)
 800896c:	4293      	cmp	r3, r2
 800896e:	d142      	bne.n	80089f6 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8008970:	2302      	movs	r3, #2
 8008972:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8008974:	2300      	movs	r3, #0
 8008976:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800897a:	f107 0310 	add.w	r3, r7, #16
 800897e:	4618      	mov	r0, r3
 8008980:	f7fb fc56 	bl	8004230 <HAL_RCCEx_PeriphCLKConfig>
 8008984:	4603      	mov	r3, r0
 8008986:	2b00      	cmp	r3, #0
 8008988:	d001      	beq.n	800898e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800898a:	f7ff ff6d 	bl	8008868 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800898e:	4b1d      	ldr	r3, [pc, #116]	; (8008a04 <HAL_UART_MspInit+0xc4>)
 8008990:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008994:	4a1b      	ldr	r2, [pc, #108]	; (8008a04 <HAL_UART_MspInit+0xc4>)
 8008996:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800899a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800899e:	4b19      	ldr	r3, [pc, #100]	; (8008a04 <HAL_UART_MspInit+0xc4>)
 80089a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80089a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80089a8:	60fb      	str	r3, [r7, #12]
 80089aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80089ac:	4b15      	ldr	r3, [pc, #84]	; (8008a04 <HAL_UART_MspInit+0xc4>)
 80089ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80089b2:	4a14      	ldr	r2, [pc, #80]	; (8008a04 <HAL_UART_MspInit+0xc4>)
 80089b4:	f043 0304 	orr.w	r3, r3, #4
 80089b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80089bc:	4b11      	ldr	r3, [pc, #68]	; (8008a04 <HAL_UART_MspInit+0xc4>)
 80089be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80089c2:	f003 0304 	and.w	r3, r3, #4
 80089c6:	60bb      	str	r3, [r7, #8]
 80089c8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PC11     ------> USART3_RX
    PC10     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 80089ca:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80089ce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80089d2:	2302      	movs	r3, #2
 80089d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089d8:	2300      	movs	r3, #0
 80089da:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80089de:	2300      	movs	r3, #0
 80089e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80089e4:	2307      	movs	r3, #7
 80089e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80089ea:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80089ee:	4619      	mov	r1, r3
 80089f0:	4805      	ldr	r0, [pc, #20]	; (8008a08 <HAL_UART_MspInit+0xc8>)
 80089f2:	f7fa fae3 	bl	8002fbc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80089f6:	bf00      	nop
 80089f8:	37d8      	adds	r7, #216	; 0xd8
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}
 80089fe:	bf00      	nop
 8008a00:	40004800 	.word	0x40004800
 8008a04:	58024400 	.word	0x58024400
 8008a08:	58020800 	.word	0x58020800

08008a0c <HAL_SAI_MspInit>:

static uint32_t SAI1_client =0;
static uint32_t SAI4_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b0ba      	sub	sp, #232	; 0xe8
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008a14:	f107 0310 	add.w	r3, r7, #16
 8008a18:	22b4      	movs	r2, #180	; 0xb4
 8008a1a:	2100      	movs	r1, #0
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	f002 f953 	bl	800acc8 <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_B)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	4aaa      	ldr	r2, [pc, #680]	; (8008cd0 <HAL_SAI_MspInit+0x2c4>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	f040 80a5 	bne.w	8008b78 <HAL_SAI_MspInit+0x16c>
    {
      /* Peripheral clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8008a2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008a32:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 8008a34:	2300      	movs	r3, #0
 8008a36:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008a38:	f107 0310 	add.w	r3, r7, #16
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	f7fb fbf7 	bl	8004230 <HAL_RCCEx_PeriphCLKConfig>
 8008a42:	4603      	mov	r3, r0
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d001      	beq.n	8008a4c <HAL_SAI_MspInit+0x40>
    {
      Error_Handler();
 8008a48:	f7ff ff0e 	bl	8008868 <Error_Handler>
    }

      if (SAI1_client == 0)
 8008a4c:	4ba1      	ldr	r3, [pc, #644]	; (8008cd4 <HAL_SAI_MspInit+0x2c8>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d10e      	bne.n	8008a72 <HAL_SAI_MspInit+0x66>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8008a54:	4ba0      	ldr	r3, [pc, #640]	; (8008cd8 <HAL_SAI_MspInit+0x2cc>)
 8008a56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008a5a:	4a9f      	ldr	r2, [pc, #636]	; (8008cd8 <HAL_SAI_MspInit+0x2cc>)
 8008a5c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008a60:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8008a64:	4b9c      	ldr	r3, [pc, #624]	; (8008cd8 <HAL_SAI_MspInit+0x2cc>)
 8008a66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008a6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008a6e:	60fb      	str	r3, [r7, #12]
 8008a70:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8008a72:	4b98      	ldr	r3, [pc, #608]	; (8008cd4 <HAL_SAI_MspInit+0x2c8>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	3301      	adds	r3, #1
 8008a78:	4a96      	ldr	r2, [pc, #600]	; (8008cd4 <HAL_SAI_MspInit+0x2c8>)
 8008a7a:	6013      	str	r3, [r2, #0]
    PE3     ------> SAI1_SD_B
    PF8     ------> SAI1_SCK_B
    PF7     ------> SAI1_MCLK_B
    PF9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8008a7c:	2308      	movs	r3, #8
 8008a7e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a82:	2302      	movs	r3, #2
 8008a84:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a88:	2300      	movs	r3, #0
 8008a8a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8008a94:	2306      	movs	r3, #6
 8008a96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008a9a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8008a9e:	4619      	mov	r1, r3
 8008aa0:	488e      	ldr	r0, [pc, #568]	; (8008cdc <HAL_SAI_MspInit+0x2d0>)
 8008aa2:	f7fa fa8b 	bl	8002fbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_9;
 8008aa6:	f44f 7360 	mov.w	r3, #896	; 0x380
 8008aaa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008aae:	2302      	movs	r3, #2
 8008ab0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008aba:	2300      	movs	r3, #0
 8008abc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8008ac0:	2306      	movs	r3, #6
 8008ac2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8008ac6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8008aca:	4619      	mov	r1, r3
 8008acc:	4884      	ldr	r0, [pc, #528]	; (8008ce0 <HAL_SAI_MspInit+0x2d4>)
 8008ace:	f7fa fa75 	bl	8002fbc <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA1_Stream1;
 8008ad2:	4b84      	ldr	r3, [pc, #528]	; (8008ce4 <HAL_SAI_MspInit+0x2d8>)
 8008ad4:	4a84      	ldr	r2, [pc, #528]	; (8008ce8 <HAL_SAI_MspInit+0x2dc>)
 8008ad6:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 8008ad8:	4b82      	ldr	r3, [pc, #520]	; (8008ce4 <HAL_SAI_MspInit+0x2d8>)
 8008ada:	2258      	movs	r2, #88	; 0x58
 8008adc:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008ade:	4b81      	ldr	r3, [pc, #516]	; (8008ce4 <HAL_SAI_MspInit+0x2d8>)
 8008ae0:	2240      	movs	r2, #64	; 0x40
 8008ae2:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8008ae4:	4b7f      	ldr	r3, [pc, #508]	; (8008ce4 <HAL_SAI_MspInit+0x2d8>)
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 8008aea:	4b7e      	ldr	r3, [pc, #504]	; (8008ce4 <HAL_SAI_MspInit+0x2d8>)
 8008aec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008af0:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8008af2:	4b7c      	ldr	r3, [pc, #496]	; (8008ce4 <HAL_SAI_MspInit+0x2d8>)
 8008af4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008af8:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8008afa:	4b7a      	ldr	r3, [pc, #488]	; (8008ce4 <HAL_SAI_MspInit+0x2d8>)
 8008afc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008b00:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 8008b02:	4b78      	ldr	r3, [pc, #480]	; (8008ce4 <HAL_SAI_MspInit+0x2d8>)
 8008b04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008b08:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_HIGH;
 8008b0a:	4b76      	ldr	r3, [pc, #472]	; (8008ce4 <HAL_SAI_MspInit+0x2d8>)
 8008b0c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008b10:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008b12:	4b74      	ldr	r3, [pc, #464]	; (8008ce4 <HAL_SAI_MspInit+0x2d8>)
 8008b14:	2200      	movs	r2, #0
 8008b16:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8008b18:	4872      	ldr	r0, [pc, #456]	; (8008ce4 <HAL_SAI_MspInit+0x2d8>)
 8008b1a:	f7f8 f855 	bl	8000bc8 <HAL_DMA_Init>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d001      	beq.n	8008b28 <HAL_SAI_MspInit+0x11c>
    {
      Error_Handler();
 8008b24:	f7ff fea0 	bl	8008868 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 8008b28:	2306      	movs	r3, #6
 8008b2a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    pSyncConfig.SyncEnable = DISABLE;
 8008b34:	2300      	movs	r3, #0
 8008b36:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    pSyncConfig.EventEnable = ENABLE;
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    pSyncConfig.RequestNumber = 1;
 8008b40:	2301      	movs	r3, #1
 8008b42:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai1_b, &pSyncConfig) != HAL_OK)
 8008b46:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8008b4a:	4619      	mov	r1, r3
 8008b4c:	4865      	ldr	r0, [pc, #404]	; (8008ce4 <HAL_SAI_MspInit+0x2d8>)
 8008b4e:	f7fa f91d 	bl	8002d8c <HAL_DMAEx_ConfigMuxSync>
 8008b52:	4603      	mov	r3, r0
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d001      	beq.n	8008b5c <HAL_SAI_MspInit+0x150>
    {
      Error_Handler();
 8008b58:	f7ff fe86 	bl	8008868 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	4a61      	ldr	r2, [pc, #388]	; (8008ce4 <HAL_SAI_MspInit+0x2d8>)
 8008b60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8008b64:	4a5f      	ldr	r2, [pc, #380]	; (8008ce4 <HAL_SAI_MspInit+0x2d8>)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	4a5d      	ldr	r2, [pc, #372]	; (8008ce4 <HAL_SAI_MspInit+0x2d8>)
 8008b6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8008b72:	4a5c      	ldr	r2, [pc, #368]	; (8008ce4 <HAL_SAI_MspInit+0x2d8>)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6393      	str	r3, [r2, #56]	; 0x38
    }
/* SAI4 */
    if(hsai->Instance==SAI4_Block_A)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	4a5b      	ldr	r2, [pc, #364]	; (8008cec <HAL_SAI_MspInit+0x2e0>)
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	f040 80a2 	bne.w	8008cc8 <HAL_SAI_MspInit+0x2bc>
    {
    /* Peripheral clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI4A;
 8008b84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b88:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Sai4AClockSelection = RCC_SAI4ACLKSOURCE_PLL;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008b90:	f107 0310 	add.w	r3, r7, #16
 8008b94:	4618      	mov	r0, r3
 8008b96:	f7fb fb4b 	bl	8004230 <HAL_RCCEx_PeriphCLKConfig>
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d001      	beq.n	8008ba4 <HAL_SAI_MspInit+0x198>
    {
      Error_Handler();
 8008ba0:	f7ff fe62 	bl	8008868 <Error_Handler>
    }

    if (SAI4_client == 0)
 8008ba4:	4b52      	ldr	r3, [pc, #328]	; (8008cf0 <HAL_SAI_MspInit+0x2e4>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d10e      	bne.n	8008bca <HAL_SAI_MspInit+0x1be>
    {
       __HAL_RCC_SAI4_CLK_ENABLE();
 8008bac:	4b4a      	ldr	r3, [pc, #296]	; (8008cd8 <HAL_SAI_MspInit+0x2cc>)
 8008bae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008bb2:	4a49      	ldr	r2, [pc, #292]	; (8008cd8 <HAL_SAI_MspInit+0x2cc>)
 8008bb4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008bb8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008bbc:	4b46      	ldr	r3, [pc, #280]	; (8008cd8 <HAL_SAI_MspInit+0x2cc>)
 8008bbe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008bc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008bc6:	60bb      	str	r3, [r7, #8]
 8008bc8:	68bb      	ldr	r3, [r7, #8]
    }
    SAI4_client ++;
 8008bca:	4b49      	ldr	r3, [pc, #292]	; (8008cf0 <HAL_SAI_MspInit+0x2e4>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	3301      	adds	r3, #1
 8008bd0:	4a47      	ldr	r2, [pc, #284]	; (8008cf0 <HAL_SAI_MspInit+0x2e4>)
 8008bd2:	6013      	str	r3, [r2, #0]
    /**SAI4_A_Block_A GPIO Configuration
    PE4     ------> SAI4_D2
    PE5     ------> SAI4_CK2
    PD6     ------> SAI4_D1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8008bd4:	2330      	movs	r3, #48	; 0x30
 8008bd6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008bda:	2302      	movs	r3, #2
 8008bdc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008be0:	2300      	movs	r3, #0
 8008be2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008be6:	2300      	movs	r3, #0
 8008be8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 8008bec:	230a      	movs	r3, #10
 8008bee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008bf2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8008bf6:	4619      	mov	r1, r3
 8008bf8:	4838      	ldr	r0, [pc, #224]	; (8008cdc <HAL_SAI_MspInit+0x2d0>)
 8008bfa:	f7fa f9df 	bl	8002fbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8008bfe:	2340      	movs	r3, #64	; 0x40
 8008c00:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c04:	2302      	movs	r3, #2
 8008c06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008c10:	2300      	movs	r3, #0
 8008c12:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF1_SAI4;
 8008c16:	2301      	movs	r3, #1
 8008c18:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008c1c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8008c20:	4619      	mov	r1, r3
 8008c22:	4834      	ldr	r0, [pc, #208]	; (8008cf4 <HAL_SAI_MspInit+0x2e8>)
 8008c24:	f7fa f9ca 	bl	8002fbc <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai4_a.Instance = BDMA_Channel0;
 8008c28:	4b33      	ldr	r3, [pc, #204]	; (8008cf8 <HAL_SAI_MspInit+0x2ec>)
 8008c2a:	4a34      	ldr	r2, [pc, #208]	; (8008cfc <HAL_SAI_MspInit+0x2f0>)
 8008c2c:	601a      	str	r2, [r3, #0]
    hdma_sai4_a.Init.Request = BDMA_REQUEST_SAI4_A;
 8008c2e:	4b32      	ldr	r3, [pc, #200]	; (8008cf8 <HAL_SAI_MspInit+0x2ec>)
 8008c30:	220f      	movs	r2, #15
 8008c32:	605a      	str	r2, [r3, #4]
    hdma_sai4_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008c34:	4b30      	ldr	r3, [pc, #192]	; (8008cf8 <HAL_SAI_MspInit+0x2ec>)
 8008c36:	2200      	movs	r2, #0
 8008c38:	609a      	str	r2, [r3, #8]
    hdma_sai4_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8008c3a:	4b2f      	ldr	r3, [pc, #188]	; (8008cf8 <HAL_SAI_MspInit+0x2ec>)
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	60da      	str	r2, [r3, #12]
    hdma_sai4_a.Init.MemInc = DMA_MINC_ENABLE;
 8008c40:	4b2d      	ldr	r3, [pc, #180]	; (8008cf8 <HAL_SAI_MspInit+0x2ec>)
 8008c42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008c46:	611a      	str	r2, [r3, #16]
    hdma_sai4_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8008c48:	4b2b      	ldr	r3, [pc, #172]	; (8008cf8 <HAL_SAI_MspInit+0x2ec>)
 8008c4a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008c4e:	615a      	str	r2, [r3, #20]
    hdma_sai4_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8008c50:	4b29      	ldr	r3, [pc, #164]	; (8008cf8 <HAL_SAI_MspInit+0x2ec>)
 8008c52:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008c56:	619a      	str	r2, [r3, #24]
    hdma_sai4_a.Init.Mode = DMA_CIRCULAR;
 8008c58:	4b27      	ldr	r3, [pc, #156]	; (8008cf8 <HAL_SAI_MspInit+0x2ec>)
 8008c5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008c5e:	61da      	str	r2, [r3, #28]
    hdma_sai4_a.Init.Priority = DMA_PRIORITY_HIGH;
 8008c60:	4b25      	ldr	r3, [pc, #148]	; (8008cf8 <HAL_SAI_MspInit+0x2ec>)
 8008c62:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008c66:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai4_a) != HAL_OK)
 8008c68:	4823      	ldr	r0, [pc, #140]	; (8008cf8 <HAL_SAI_MspInit+0x2ec>)
 8008c6a:	f7f7 ffad 	bl	8000bc8 <HAL_DMA_Init>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d001      	beq.n	8008c78 <HAL_SAI_MspInit+0x26c>
    {
      Error_Handler();
 8008c74:	f7ff fdf8 	bl	8008868 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX2_SYNC_EXTI0;
 8008c78:	230e      	movs	r3, #14
 8008c7a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    pSyncConfig.SyncEnable = DISABLE;
 8008c84:	2300      	movs	r3, #0
 8008c86:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    pSyncConfig.EventEnable = ENABLE;
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    pSyncConfig.RequestNumber = 1;
 8008c90:	2301      	movs	r3, #1
 8008c92:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai4_a, &pSyncConfig) != HAL_OK)
 8008c96:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8008c9a:	4619      	mov	r1, r3
 8008c9c:	4816      	ldr	r0, [pc, #88]	; (8008cf8 <HAL_SAI_MspInit+0x2ec>)
 8008c9e:	f7fa f875 	bl	8002d8c <HAL_DMAEx_ConfigMuxSync>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d001      	beq.n	8008cac <HAL_SAI_MspInit+0x2a0>
    {
      Error_Handler();
 8008ca8:	f7ff fdde 	bl	8008868 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai4_a);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	4a12      	ldr	r2, [pc, #72]	; (8008cf8 <HAL_SAI_MspInit+0x2ec>)
 8008cb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8008cb4:	4a10      	ldr	r2, [pc, #64]	; (8008cf8 <HAL_SAI_MspInit+0x2ec>)
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai4_a);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	4a0e      	ldr	r2, [pc, #56]	; (8008cf8 <HAL_SAI_MspInit+0x2ec>)
 8008cbe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8008cc2:	4a0d      	ldr	r2, [pc, #52]	; (8008cf8 <HAL_SAI_MspInit+0x2ec>)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6393      	str	r3, [r2, #56]	; 0x38

    }
}
 8008cc8:	bf00      	nop
 8008cca:	37e8      	adds	r7, #232	; 0xe8
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}
 8008cd0:	40015824 	.word	0x40015824
 8008cd4:	240004a4 	.word	0x240004a4
 8008cd8:	58024400 	.word	0x58024400
 8008cdc:	58021000 	.word	0x58021000
 8008ce0:	58021400 	.word	0x58021400
 8008ce4:	240027ac 	.word	0x240027ac
 8008ce8:	40020028 	.word	0x40020028
 8008cec:	58005404 	.word	0x58005404
 8008cf0:	240004a8 	.word	0x240004a8
 8008cf4:	58020c00 	.word	0x58020c00
 8008cf8:	240026b0 	.word	0x240026b0
 8008cfc:	58025408 	.word	0x58025408

08008d00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008d00:	b480      	push	{r7}
 8008d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008d04:	e7fe      	b.n	8008d04 <NMI_Handler+0x4>

08008d06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008d06:	b480      	push	{r7}
 8008d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008d0a:	e7fe      	b.n	8008d0a <HardFault_Handler+0x4>

08008d0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008d10:	e7fe      	b.n	8008d10 <MemManage_Handler+0x4>

08008d12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008d12:	b480      	push	{r7}
 8008d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008d16:	e7fe      	b.n	8008d16 <BusFault_Handler+0x4>

08008d18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008d18:	b480      	push	{r7}
 8008d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008d1c:	e7fe      	b.n	8008d1c <UsageFault_Handler+0x4>

08008d1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008d1e:	b480      	push	{r7}
 8008d20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008d22:	bf00      	nop
 8008d24:	46bd      	mov	sp, r7
 8008d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2a:	4770      	bx	lr

08008d2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008d30:	bf00      	nop
 8008d32:	46bd      	mov	sp, r7
 8008d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d38:	4770      	bx	lr

08008d3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008d3a:	b480      	push	{r7}
 8008d3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008d3e:	bf00      	nop
 8008d40:	46bd      	mov	sp, r7
 8008d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d46:	4770      	bx	lr

08008d48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008d4c:	f7f7 fd22 	bl	8000794 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008d50:	bf00      	nop
 8008d52:	bd80      	pop	{r7, pc}

08008d54 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 8008d58:	4802      	ldr	r0, [pc, #8]	; (8008d64 <DMA1_Stream1_IRQHandler+0x10>)
 8008d5a:	f7f8 fcf9 	bl	8001750 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8008d5e:	bf00      	nop
 8008d60:	bd80      	pop	{r7, pc}
 8008d62:	bf00      	nop
 8008d64:	240027ac 	.word	0x240027ac

08008d68 <DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX1 overrun interrupt.
  */
void DMAMUX1_OVR_IRQHandler(void)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMAMUX1_OVR_IRQn 0 */
  // Handle DMA1_Stream1
  HAL_DMAEx_MUX_IRQHandler(&hdma_sai1_b);
 8008d6c:	4802      	ldr	r0, [pc, #8]	; (8008d78 <DMAMUX1_OVR_IRQHandler+0x10>)
 8008d6e:	f7fa f8d3 	bl	8002f18 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMAMUX1_OVR_IRQn 1 */
}
 8008d72:	bf00      	nop
 8008d74:	bd80      	pop	{r7, pc}
 8008d76:	bf00      	nop
 8008d78:	240027ac 	.word	0x240027ac

08008d7c <DMAMUX2_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX2 overrun interrupt.
  */
void DMAMUX2_OVR_IRQHandler(void)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX2_OVR_IRQn 0 */

  /* USER CODE END DMAMUX2_OVR_IRQn 0 */
  // Handle BDMA_Channel0
  HAL_DMAEx_MUX_IRQHandler(&hdma_sai4_a);
 8008d80:	4802      	ldr	r0, [pc, #8]	; (8008d8c <DMAMUX2_OVR_IRQHandler+0x10>)
 8008d82:	f7fa f8c9 	bl	8002f18 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX2_OVR_IRQn 1 */

  /* USER CODE END DMAMUX2_OVR_IRQn 1 */
}
 8008d86:	bf00      	nop
 8008d88:	bd80      	pop	{r7, pc}
 8008d8a:	bf00      	nop
 8008d8c:	240026b0 	.word	0x240026b0

08008d90 <BDMA_Channel0_IRQHandler>:

/**
  * @brief This function handles BDMA channel0 global interrupt.
  */
void BDMA_Channel0_IRQHandler(void)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai4_a);
 8008d94:	4802      	ldr	r0, [pc, #8]	; (8008da0 <BDMA_Channel0_IRQHandler+0x10>)
 8008d96:	f7f8 fcdb 	bl	8001750 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel0_IRQn 1 */

  /* USER CODE END BDMA_Channel0_IRQn 1 */
}
 8008d9a:	bf00      	nop
 8008d9c:	bd80      	pop	{r7, pc}
 8008d9e:	bf00      	nop
 8008da0:	240026b0 	.word	0x240026b0

08008da4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008da4:	b480      	push	{r7}
 8008da6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8008da8:	4b32      	ldr	r3, [pc, #200]	; (8008e74 <SystemInit+0xd0>)
 8008daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008dae:	4a31      	ldr	r2, [pc, #196]	; (8008e74 <SystemInit+0xd0>)
 8008db0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008db4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8008db8:	4b2f      	ldr	r3, [pc, #188]	; (8008e78 <SystemInit+0xd4>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f003 030f 	and.w	r3, r3, #15
 8008dc0:	2b06      	cmp	r3, #6
 8008dc2:	d807      	bhi.n	8008dd4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8008dc4:	4b2c      	ldr	r3, [pc, #176]	; (8008e78 <SystemInit+0xd4>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f023 030f 	bic.w	r3, r3, #15
 8008dcc:	4a2a      	ldr	r2, [pc, #168]	; (8008e78 <SystemInit+0xd4>)
 8008dce:	f043 0307 	orr.w	r3, r3, #7
 8008dd2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8008dd4:	4b29      	ldr	r3, [pc, #164]	; (8008e7c <SystemInit+0xd8>)
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	4a28      	ldr	r2, [pc, #160]	; (8008e7c <SystemInit+0xd8>)
 8008dda:	f043 0301 	orr.w	r3, r3, #1
 8008dde:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8008de0:	4b26      	ldr	r3, [pc, #152]	; (8008e7c <SystemInit+0xd8>)
 8008de2:	2200      	movs	r2, #0
 8008de4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8008de6:	4b25      	ldr	r3, [pc, #148]	; (8008e7c <SystemInit+0xd8>)
 8008de8:	681a      	ldr	r2, [r3, #0]
 8008dea:	4924      	ldr	r1, [pc, #144]	; (8008e7c <SystemInit+0xd8>)
 8008dec:	4b24      	ldr	r3, [pc, #144]	; (8008e80 <SystemInit+0xdc>)
 8008dee:	4013      	ands	r3, r2
 8008df0:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8008df2:	4b21      	ldr	r3, [pc, #132]	; (8008e78 <SystemInit+0xd4>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f003 0308 	and.w	r3, r3, #8
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d007      	beq.n	8008e0e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8008dfe:	4b1e      	ldr	r3, [pc, #120]	; (8008e78 <SystemInit+0xd4>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f023 030f 	bic.w	r3, r3, #15
 8008e06:	4a1c      	ldr	r2, [pc, #112]	; (8008e78 <SystemInit+0xd4>)
 8008e08:	f043 0307 	orr.w	r3, r3, #7
 8008e0c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8008e0e:	4b1b      	ldr	r3, [pc, #108]	; (8008e7c <SystemInit+0xd8>)
 8008e10:	2200      	movs	r2, #0
 8008e12:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8008e14:	4b19      	ldr	r3, [pc, #100]	; (8008e7c <SystemInit+0xd8>)
 8008e16:	2200      	movs	r2, #0
 8008e18:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8008e1a:	4b18      	ldr	r3, [pc, #96]	; (8008e7c <SystemInit+0xd8>)
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8008e20:	4b16      	ldr	r3, [pc, #88]	; (8008e7c <SystemInit+0xd8>)
 8008e22:	4a18      	ldr	r2, [pc, #96]	; (8008e84 <SystemInit+0xe0>)
 8008e24:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8008e26:	4b15      	ldr	r3, [pc, #84]	; (8008e7c <SystemInit+0xd8>)
 8008e28:	4a17      	ldr	r2, [pc, #92]	; (8008e88 <SystemInit+0xe4>)
 8008e2a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8008e2c:	4b13      	ldr	r3, [pc, #76]	; (8008e7c <SystemInit+0xd8>)
 8008e2e:	4a17      	ldr	r2, [pc, #92]	; (8008e8c <SystemInit+0xe8>)
 8008e30:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8008e32:	4b12      	ldr	r3, [pc, #72]	; (8008e7c <SystemInit+0xd8>)
 8008e34:	2200      	movs	r2, #0
 8008e36:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8008e38:	4b10      	ldr	r3, [pc, #64]	; (8008e7c <SystemInit+0xd8>)
 8008e3a:	4a14      	ldr	r2, [pc, #80]	; (8008e8c <SystemInit+0xe8>)
 8008e3c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8008e3e:	4b0f      	ldr	r3, [pc, #60]	; (8008e7c <SystemInit+0xd8>)
 8008e40:	2200      	movs	r2, #0
 8008e42:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8008e44:	4b0d      	ldr	r3, [pc, #52]	; (8008e7c <SystemInit+0xd8>)
 8008e46:	4a11      	ldr	r2, [pc, #68]	; (8008e8c <SystemInit+0xe8>)
 8008e48:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8008e4a:	4b0c      	ldr	r3, [pc, #48]	; (8008e7c <SystemInit+0xd8>)
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8008e50:	4b0a      	ldr	r3, [pc, #40]	; (8008e7c <SystemInit+0xd8>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	4a09      	ldr	r2, [pc, #36]	; (8008e7c <SystemInit+0xd8>)
 8008e56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008e5a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8008e5c:	4b07      	ldr	r3, [pc, #28]	; (8008e7c <SystemInit+0xd8>)
 8008e5e:	2200      	movs	r2, #0
 8008e60:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8008e62:	4b0b      	ldr	r3, [pc, #44]	; (8008e90 <SystemInit+0xec>)
 8008e64:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8008e68:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8008e6a:	bf00      	nop
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e72:	4770      	bx	lr
 8008e74:	e000ed00 	.word	0xe000ed00
 8008e78:	52002000 	.word	0x52002000
 8008e7c:	58024400 	.word	0x58024400
 8008e80:	eaf6ed7f 	.word	0xeaf6ed7f
 8008e84:	02020200 	.word	0x02020200
 8008e88:	01ff0000 	.word	0x01ff0000
 8008e8c:	01010280 	.word	0x01010280
 8008e90:	52004000 	.word	0x52004000

08008e94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8008e94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008ecc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8008e98:	f7ff ff84 	bl	8008da4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008e9c:	480c      	ldr	r0, [pc, #48]	; (8008ed0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008e9e:	490d      	ldr	r1, [pc, #52]	; (8008ed4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008ea0:	4a0d      	ldr	r2, [pc, #52]	; (8008ed8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8008ea2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008ea4:	e002      	b.n	8008eac <LoopCopyDataInit>

08008ea6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008ea6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008ea8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008eaa:	3304      	adds	r3, #4

08008eac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008eac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008eae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008eb0:	d3f9      	bcc.n	8008ea6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008eb2:	4a0a      	ldr	r2, [pc, #40]	; (8008edc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008eb4:	4c0a      	ldr	r4, [pc, #40]	; (8008ee0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8008eb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008eb8:	e001      	b.n	8008ebe <LoopFillZerobss>

08008eba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008eba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008ebc:	3204      	adds	r2, #4

08008ebe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008ebe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008ec0:	d3fb      	bcc.n	8008eba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8008ec2:	f001 fedd 	bl	800ac80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008ec6:	f7ff f9bd 	bl	8008244 <main>
  bx  lr
 8008eca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8008ecc:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8008ed0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8008ed4:	24000474 	.word	0x24000474
  ldr r2, =_sidata
 8008ed8:	0800b370 	.word	0x0800b370
  ldr r2, =_sbss
 8008edc:	24000480 	.word	0x24000480
  ldr r4, =_ebss
 8008ee0:	2400282c 	.word	0x2400282c

08008ee4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008ee4:	e7fe      	b.n	8008ee4 <ADC3_IRQHandler>
	...

08008ee8 <D16_GENERIC>:
 8008ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eec:	b089      	sub	sp, #36	; 0x24
 8008eee:	6993      	ldr	r3, [r2, #24]
 8008ef0:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8008ef2:	9103      	str	r1, [sp, #12]
 8008ef4:	9307      	str	r3, [sp, #28]
 8008ef6:	69d3      	ldr	r3, [r2, #28]
 8008ef8:	e9d2 c102 	ldrd	ip, r1, [r2, #8]
 8008efc:	e9d2 4a04 	ldrd	r4, sl, [r2, #16]
 8008f00:	9106      	str	r1, [sp, #24]
 8008f02:	e9d2 810c 	ldrd	r8, r1, [r2, #48]	; 0x30
 8008f06:	2d00      	cmp	r5, #0
 8008f08:	d063      	beq.n	8008fd2 <D16_GENERIC+0xea>
 8008f0a:	f001 0520 	and.w	r5, r1, #32
 8008f0e:	f001 0110 	and.w	r1, r1, #16
 8008f12:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 8008ff4 <D16_GENERIC+0x10c>
 8008f16:	46c1      	mov	r9, r8
 8008f18:	9104      	str	r1, [sp, #16]
 8008f1a:	2100      	movs	r1, #0
 8008f1c:	9505      	str	r5, [sp, #20]
 8008f1e:	e04d      	b.n	8008fbc <D16_GENERIC+0xd4>
 8008f20:	5d87      	ldrb	r7, [r0, r6]
 8008f22:	7805      	ldrb	r5, [r0, #0]
 8008f24:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 8008f28:	eb05 2707 	add.w	r7, r5, r7, lsl #8
 8008f2c:	b2fe      	uxtb	r6, r7
 8008f2e:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8008f32:	f85e 5026 	ldr.w	r5, [lr, r6, lsl #2]
 8008f36:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
 8008f3a:	441d      	add	r5, r3
 8008f3c:	eb06 2395 	add.w	r3, r6, r5, lsr #10
 8008f40:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8008f44:	f3c3 0609 	ubfx	r6, r3, #0, #10
 8008f48:	0a9b      	lsrs	r3, r3, #10
 8008f4a:	ea46 4605 	orr.w	r6, r6, r5, lsl #16
 8008f4e:	4d27      	ldr	r5, [pc, #156]	; (8008fec <D16_GENERIC+0x104>)
 8008f50:	fb26 c505 	smlad	r5, r6, r5, ip
 8008f54:	4f26      	ldr	r7, [pc, #152]	; (8008ff0 <D16_GENERIC+0x108>)
 8008f56:	fb26 fc07 	smuad	ip, r6, r7
 8008f5a:	9e04      	ldr	r6, [sp, #16]
 8008f5c:	f101 0801 	add.w	r8, r1, #1
 8008f60:	f5a5 6500 	sub.w	r5, r5, #2048	; 0x800
 8008f64:	b1ae      	cbz	r6, 8008f92 <D16_GENERIC+0xaa>
 8008f66:	442c      	add	r4, r5
 8008f68:	f8d2 b020 	ldr.w	fp, [r2, #32]
 8008f6c:	eba4 040a 	sub.w	r4, r4, sl
 8008f70:	46aa      	mov	sl, r5
 8008f72:	17e7      	asrs	r7, r4, #31
 8008f74:	fba4 450b 	umull	r4, r5, r4, fp
 8008f78:	e9cd 4500 	strd	r4, r5, [sp]
 8008f7c:	fb0b 5407 	mla	r4, fp, r7, r5
 8008f80:	9401      	str	r4, [sp, #4]
 8008f82:	e9dd 4500 	ldrd	r4, r5, [sp]
 8008f86:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 8008f8a:	f145 0500 	adc.w	r5, r5, #0
 8008f8e:	006c      	lsls	r4, r5, #1
 8008f90:	4625      	mov	r5, r4
 8008f92:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 8008f96:	042d      	lsls	r5, r5, #16
 8008f98:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008f9c:	2700      	movs	r7, #0
 8008f9e:	fb01 fb0b 	mul.w	fp, r1, fp
 8008fa2:	fa1f f188 	uxth.w	r1, r8
 8008fa6:	fbc9 6705 	smlal	r6, r7, r9, r5
 8008faa:	9e03      	ldr	r6, [sp, #12]
 8008fac:	10bd      	asrs	r5, r7, #2
 8008fae:	f305 050f 	ssat	r5, #16, r5
 8008fb2:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 8008fb6:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8008fb8:	428d      	cmp	r5, r1
 8008fba:	d90a      	bls.n	8008fd2 <D16_GENERIC+0xea>
 8008fbc:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 8008fbe:	2d01      	cmp	r5, #1
 8008fc0:	b2ee      	uxtb	r6, r5
 8008fc2:	d1ad      	bne.n	8008f20 <D16_GENERIC+0x38>
 8008fc4:	9d05      	ldr	r5, [sp, #20]
 8008fc6:	f850 7b02 	ldr.w	r7, [r0], #2
 8008fca:	2d00      	cmp	r5, #0
 8008fcc:	d0ae      	beq.n	8008f2c <D16_GENERIC+0x44>
 8008fce:	ba7f      	rev16	r7, r7
 8008fd0:	e7ac      	b.n	8008f2c <D16_GENERIC+0x44>
 8008fd2:	2000      	movs	r0, #0
 8008fd4:	9906      	ldr	r1, [sp, #24]
 8008fd6:	61d3      	str	r3, [r2, #28]
 8008fd8:	9b07      	ldr	r3, [sp, #28]
 8008fda:	f8c2 c008 	str.w	ip, [r2, #8]
 8008fde:	60d1      	str	r1, [r2, #12]
 8008fe0:	6193      	str	r3, [r2, #24]
 8008fe2:	e9c2 4a04 	strd	r4, sl, [r2, #16]
 8008fe6:	b009      	add	sp, #36	; 0x24
 8008fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fec:	00030001 	.word	0x00030001
 8008ff0:	00010003 	.word	0x00010003
 8008ff4:	24000000 	.word	0x24000000

08008ff8 <D24_GENERIC>:
 8008ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ffc:	e9d2 4304 	ldrd	r4, r3, [r2, #16]
 8009000:	b089      	sub	sp, #36	; 0x24
 8009002:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 8009004:	9303      	str	r3, [sp, #12]
 8009006:	6993      	ldr	r3, [r2, #24]
 8009008:	9104      	str	r1, [sp, #16]
 800900a:	9307      	str	r3, [sp, #28]
 800900c:	69d1      	ldr	r1, [r2, #28]
 800900e:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 8009012:	e9d2 a50c 	ldrd	sl, r5, [r2, #48]	; 0x30
 8009016:	2e00      	cmp	r6, #0
 8009018:	f000 8088 	beq.w	800912c <D24_GENERIC+0x134>
 800901c:	f005 0620 	and.w	r6, r5, #32
 8009020:	f005 0510 	and.w	r5, r5, #16
 8009024:	f04f 0c00 	mov.w	ip, #0
 8009028:	f8df e140 	ldr.w	lr, [pc, #320]	; 800916c <D24_GENERIC+0x174>
 800902c:	9606      	str	r6, [sp, #24]
 800902e:	9505      	str	r5, [sp, #20]
 8009030:	e064      	b.n	80090fc <D24_GENERIC+0x104>
 8009032:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 8009036:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 800903a:	f810 b007 	ldrb.w	fp, [r0, r7]
 800903e:	042d      	lsls	r5, r5, #16
 8009040:	19f0      	adds	r0, r6, r7
 8009042:	eb05 250b 	add.w	r5, r5, fp, lsl #8
 8009046:	44a9      	add	r9, r5
 8009048:	fa5f f689 	uxtb.w	r6, r9
 800904c:	f3c9 2707 	ubfx	r7, r9, #8, #8
 8009050:	ea4f 4919 	mov.w	r9, r9, lsr #16
 8009054:	f85e 6026 	ldr.w	r6, [lr, r6, lsl #2]
 8009058:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
 800905c:	eb06 2691 	add.w	r6, r6, r1, lsr #10
 8009060:	f85e 1029 	ldr.w	r1, [lr, r9, lsl #2]
 8009064:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 8009068:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800906c:	f3c7 0509 	ubfx	r5, r7, #0, #10
 8009070:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 8009074:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 8009078:	4d3a      	ldr	r5, [pc, #232]	; (8009164 <D24_GENERIC+0x16c>)
 800907a:	fb26 8705 	smlad	r7, r6, r5, r8
 800907e:	4d3a      	ldr	r5, [pc, #232]	; (8009168 <D24_GENERIC+0x170>)
 8009080:	fb26 3805 	smlad	r8, r6, r5, r3
 8009084:	f3c1 0309 	ubfx	r3, r1, #0, #10
 8009088:	eb03 0b43 	add.w	fp, r3, r3, lsl #1
 800908c:	2301      	movs	r3, #1
 800908e:	eb08 084b 	add.w	r8, r8, fp, lsl #1
 8009092:	fb26 f603 	smuad	r6, r6, r3
 8009096:	eb0c 0903 	add.w	r9, ip, r3
 800909a:	eb0b 0306 	add.w	r3, fp, r6
 800909e:	9e05      	ldr	r6, [sp, #20]
 80090a0:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 80090a4:	b1ae      	cbz	r6, 80090d2 <D24_GENERIC+0xda>
 80090a6:	442c      	add	r4, r5
 80090a8:	9e03      	ldr	r6, [sp, #12]
 80090aa:	f8d2 b020 	ldr.w	fp, [r2, #32]
 80090ae:	1ba4      	subs	r4, r4, r6
 80090b0:	9503      	str	r5, [sp, #12]
 80090b2:	17e7      	asrs	r7, r4, #31
 80090b4:	fba4 450b 	umull	r4, r5, r4, fp
 80090b8:	e9cd 4500 	strd	r4, r5, [sp]
 80090bc:	fb0b 5407 	mla	r4, fp, r7, r5
 80090c0:	9401      	str	r4, [sp, #4]
 80090c2:	e9dd 4500 	ldrd	r4, r5, [sp]
 80090c6:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 80090ca:	f145 0500 	adc.w	r5, r5, #0
 80090ce:	006c      	lsls	r4, r5, #1
 80090d0:	4625      	mov	r5, r4
 80090d2:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 80090d6:	03ad      	lsls	r5, r5, #14
 80090d8:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80090dc:	2700      	movs	r7, #0
 80090de:	fb0c fb0b 	mul.w	fp, ip, fp
 80090e2:	fa1f fc89 	uxth.w	ip, r9
 80090e6:	fbca 6705 	smlal	r6, r7, sl, r5
 80090ea:	9e04      	ldr	r6, [sp, #16]
 80090ec:	10bd      	asrs	r5, r7, #2
 80090ee:	f305 050f 	ssat	r5, #16, r5
 80090f2:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 80090f6:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 80090f8:	4565      	cmp	r5, ip
 80090fa:	d917      	bls.n	800912c <D24_GENERIC+0x134>
 80090fc:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 80090fe:	f890 9000 	ldrb.w	r9, [r0]
 8009102:	b2ef      	uxtb	r7, r5
 8009104:	2d01      	cmp	r5, #1
 8009106:	b23e      	sxth	r6, r7
 8009108:	d193      	bne.n	8009032 <D24_GENERIC+0x3a>
 800910a:	9d06      	ldr	r5, [sp, #24]
 800910c:	b1dd      	cbz	r5, 8009146 <D24_GENERIC+0x14e>
 800910e:	78c7      	ldrb	r7, [r0, #3]
 8009110:	ea4f 2609 	mov.w	r6, r9, lsl #8
 8009114:	f01c 0f01 	tst.w	ip, #1
 8009118:	ea4f 2507 	mov.w	r5, r7, lsl #8
 800911c:	eb06 4607 	add.w	r6, r6, r7, lsl #16
 8009120:	d11a      	bne.n	8009158 <D24_GENERIC+0x160>
 8009122:	f890 9001 	ldrb.w	r9, [r0, #1]
 8009126:	3002      	adds	r0, #2
 8009128:	44b1      	add	r9, r6
 800912a:	e78d      	b.n	8009048 <D24_GENERIC+0x50>
 800912c:	6093      	str	r3, [r2, #8]
 800912e:	2000      	movs	r0, #0
 8009130:	9b03      	ldr	r3, [sp, #12]
 8009132:	f8c2 800c 	str.w	r8, [r2, #12]
 8009136:	6153      	str	r3, [r2, #20]
 8009138:	9b07      	ldr	r3, [sp, #28]
 800913a:	61d1      	str	r1, [r2, #28]
 800913c:	6114      	str	r4, [r2, #16]
 800913e:	6193      	str	r3, [r2, #24]
 8009140:	b009      	add	sp, #36	; 0x24
 8009142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009146:	7845      	ldrb	r5, [r0, #1]
 8009148:	3003      	adds	r0, #3
 800914a:	f810 6c01 	ldrb.w	r6, [r0, #-1]
 800914e:	022d      	lsls	r5, r5, #8
 8009150:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 8009154:	44a9      	add	r9, r5
 8009156:	e777      	b.n	8009048 <D24_GENERIC+0x50>
 8009158:	7886      	ldrb	r6, [r0, #2]
 800915a:	3004      	adds	r0, #4
 800915c:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 8009160:	44a9      	add	r9, r5
 8009162:	e771      	b.n	8009048 <D24_GENERIC+0x50>
 8009164:	00030001 	.word	0x00030001
 8009168:	00060007 	.word	0x00060007
 800916c:	24000000 	.word	0x24000000

08009170 <D32_GENERIC>:
 8009170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009174:	e9d2 4304 	ldrd	r4, r3, [r2, #16]
 8009178:	b089      	sub	sp, #36	; 0x24
 800917a:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800917c:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 800917e:	9302      	str	r3, [sp, #8]
 8009180:	6993      	ldr	r3, [r2, #24]
 8009182:	9104      	str	r1, [sp, #16]
 8009184:	9307      	str	r3, [sp, #28]
 8009186:	9503      	str	r5, [sp, #12]
 8009188:	69d1      	ldr	r1, [r2, #28]
 800918a:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800918c:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 8009190:	2e00      	cmp	r6, #0
 8009192:	f000 8097 	beq.w	80092c4 <D32_GENERIC+0x154>
 8009196:	f005 0620 	and.w	r6, r5, #32
 800919a:	f005 0510 	and.w	r5, r5, #16
 800919e:	f04f 0e00 	mov.w	lr, #0
 80091a2:	f8df c150 	ldr.w	ip, [pc, #336]	; 80092f4 <D32_GENERIC+0x184>
 80091a6:	9606      	str	r6, [sp, #24]
 80091a8:	9505      	str	r5, [sp, #20]
 80091aa:	e079      	b.n	80092a0 <D32_GENERIC+0x130>
 80091ac:	783d      	ldrb	r5, [r7, #0]
 80091ae:	f810 b009 	ldrb.w	fp, [r0, r9]
 80091b2:	042d      	lsls	r5, r5, #16
 80091b4:	f810 a006 	ldrb.w	sl, [r0, r6]
 80091b8:	f890 9000 	ldrb.w	r9, [r0]
 80091bc:	eb07 0046 	add.w	r0, r7, r6, lsl #1
 80091c0:	eb05 650b 	add.w	r5, r5, fp, lsl #24
 80091c4:	eb05 250a 	add.w	r5, r5, sl, lsl #8
 80091c8:	44a9      	add	r9, r5
 80091ca:	fa5f f789 	uxtb.w	r7, r9
 80091ce:	f3c9 2507 	ubfx	r5, r9, #8, #8
 80091d2:	f3c9 4607 	ubfx	r6, r9, #16, #8
 80091d6:	ea4f 6919 	mov.w	r9, r9, lsr #24
 80091da:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 80091de:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 80091e2:	eb07 2191 	add.w	r1, r7, r1, lsr #10
 80091e6:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
 80091ea:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
 80091ee:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 80091f2:	f3c1 0909 	ubfx	r9, r1, #0, #10
 80091f6:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 80091fa:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80091fe:	eb07 2196 	add.w	r1, r7, r6, lsr #10
 8009202:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8009206:	ea45 4909 	orr.w	r9, r5, r9, lsl #16
 800920a:	f3c1 0509 	ubfx	r5, r1, #0, #10
 800920e:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 8009212:	4d34      	ldr	r5, [pc, #208]	; (80092e4 <D32_GENERIC+0x174>)
 8009214:	fb29 8805 	smlad	r8, r9, r5, r8
 8009218:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 800921c:	fb26 8705 	smlad	r7, r6, r5, r8
 8009220:	4d31      	ldr	r5, [pc, #196]	; (80092e8 <D32_GENERIC+0x178>)
 8009222:	fb29 3305 	smlad	r3, r9, r5, r3
 8009226:	4d31      	ldr	r5, [pc, #196]	; (80092ec <D32_GENERIC+0x17c>)
 8009228:	fb26 3805 	smlad	r8, r6, r5, r3
 800922c:	2301      	movs	r3, #1
 800922e:	fb29 f903 	smuad	r9, r9, r3
 8009232:	4b2f      	ldr	r3, [pc, #188]	; (80092f0 <D32_GENERIC+0x180>)
 8009234:	fb26 9303 	smlad	r3, r6, r3, r9
 8009238:	9e05      	ldr	r6, [sp, #20]
 800923a:	f10e 0901 	add.w	r9, lr, #1
 800923e:	f5a7 4580 	sub.w	r5, r7, #16384	; 0x4000
 8009242:	b1ae      	cbz	r6, 8009270 <D32_GENERIC+0x100>
 8009244:	442c      	add	r4, r5
 8009246:	9e02      	ldr	r6, [sp, #8]
 8009248:	f8d2 a020 	ldr.w	sl, [r2, #32]
 800924c:	1ba4      	subs	r4, r4, r6
 800924e:	9502      	str	r5, [sp, #8]
 8009250:	17e7      	asrs	r7, r4, #31
 8009252:	fba4 450a 	umull	r4, r5, r4, sl
 8009256:	e9cd 4500 	strd	r4, r5, [sp]
 800925a:	fb0a 5407 	mla	r4, sl, r7, r5
 800925e:	9401      	str	r4, [sp, #4]
 8009260:	e9dd 4500 	ldrd	r4, r5, [sp]
 8009264:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 8009268:	f145 0500 	adc.w	r5, r5, #0
 800926c:	006c      	lsls	r4, r5, #1
 800926e:	4625      	mov	r5, r4
 8009270:	f8b2 a028 	ldrh.w	sl, [r2, #40]	; 0x28
 8009274:	036d      	lsls	r5, r5, #13
 8009276:	9f03      	ldr	r7, [sp, #12]
 8009278:	fb0e fb0a 	mul.w	fp, lr, sl
 800927c:	fa1f fe89 	uxth.w	lr, r9
 8009280:	f04f 0a00 	mov.w	sl, #0
 8009284:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 8009288:	9e04      	ldr	r6, [sp, #16]
 800928a:	fbc7 9a05 	smlal	r9, sl, r7, r5
 800928e:	4657      	mov	r7, sl
 8009290:	10bd      	asrs	r5, r7, #2
 8009292:	f305 050f 	ssat	r5, #16, r5
 8009296:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 800929a:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800929c:	4575      	cmp	r5, lr
 800929e:	d911      	bls.n	80092c4 <D32_GENERIC+0x154>
 80092a0:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 80092a2:	b2ee      	uxtb	r6, r5
 80092a4:	2d01      	cmp	r5, #1
 80092a6:	eb00 0746 	add.w	r7, r0, r6, lsl #1
 80092aa:	eb06 0946 	add.w	r9, r6, r6, lsl #1
 80092ae:	f47f af7d 	bne.w	80091ac <D32_GENERIC+0x3c>
 80092b2:	1d05      	adds	r5, r0, #4
 80092b4:	f8d0 9000 	ldr.w	r9, [r0]
 80092b8:	9806      	ldr	r0, [sp, #24]
 80092ba:	b180      	cbz	r0, 80092de <D32_GENERIC+0x16e>
 80092bc:	fa99 f999 	rev16.w	r9, r9
 80092c0:	4628      	mov	r0, r5
 80092c2:	e782      	b.n	80091ca <D32_GENERIC+0x5a>
 80092c4:	6093      	str	r3, [r2, #8]
 80092c6:	2000      	movs	r0, #0
 80092c8:	9b02      	ldr	r3, [sp, #8]
 80092ca:	f8c2 800c 	str.w	r8, [r2, #12]
 80092ce:	6153      	str	r3, [r2, #20]
 80092d0:	9b07      	ldr	r3, [sp, #28]
 80092d2:	61d1      	str	r1, [r2, #28]
 80092d4:	6114      	str	r4, [r2, #16]
 80092d6:	6193      	str	r3, [r2, #24]
 80092d8:	b009      	add	sp, #36	; 0x24
 80092da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092de:	4628      	mov	r0, r5
 80092e0:	e773      	b.n	80091ca <D32_GENERIC+0x5a>
 80092e2:	bf00      	nop
 80092e4:	00060003 	.word	0x00060003
 80092e8:	000a000c 	.word	0x000a000c
 80092ec:	000c000a 	.word	0x000c000a
 80092f0:	00030006 	.word	0x00030006
 80092f4:	24000000 	.word	0x24000000

080092f8 <D48_GENERIC>:
 80092f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092fc:	6913      	ldr	r3, [r2, #16]
 80092fe:	b089      	sub	sp, #36	; 0x24
 8009300:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8009302:	9301      	str	r3, [sp, #4]
 8009304:	6953      	ldr	r3, [r2, #20]
 8009306:	9104      	str	r1, [sp, #16]
 8009308:	9302      	str	r3, [sp, #8]
 800930a:	6993      	ldr	r3, [r2, #24]
 800930c:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 8009310:	9307      	str	r3, [sp, #28]
 8009312:	e9d2 3102 	ldrd	r3, r1, [r2, #8]
 8009316:	9100      	str	r1, [sp, #0]
 8009318:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800931a:	9103      	str	r1, [sp, #12]
 800931c:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800931e:	2c00      	cmp	r4, #0
 8009320:	f000 80be 	beq.w	80094a0 <D48_GENERIC+0x1a8>
 8009324:	f001 0420 	and.w	r4, r1, #32
 8009328:	f001 0110 	and.w	r1, r1, #16
 800932c:	f04f 0e00 	mov.w	lr, #0
 8009330:	9105      	str	r1, [sp, #20]
 8009332:	9406      	str	r4, [sp, #24]
 8009334:	4962      	ldr	r1, [pc, #392]	; (80094c0 <D48_GENERIC+0x1c8>)
 8009336:	e0a0      	b.n	800947a <D48_GENERIC+0x182>
 8009338:	eb00 0608 	add.w	r6, r0, r8
 800933c:	f810 a008 	ldrb.w	sl, [r0, r8]
 8009340:	f810 9005 	ldrb.w	r9, [r0, r5]
 8009344:	5df4      	ldrb	r4, [r6, r7]
 8009346:	443e      	add	r6, r7
 8009348:	f890 b000 	ldrb.w	fp, [r0]
 800934c:	0420      	lsls	r0, r4, #16
 800934e:	eb06 0408 	add.w	r4, r6, r8
 8009352:	f816 6008 	ldrb.w	r6, [r6, r8]
 8009356:	eb00 6a0a 	add.w	sl, r0, sl, lsl #24
 800935a:	f814 8007 	ldrb.w	r8, [r4, r7]
 800935e:	4427      	add	r7, r4
 8009360:	eb0a 2a09 	add.w	sl, sl, r9, lsl #8
 8009364:	eb08 2606 	add.w	r6, r8, r6, lsl #8
 8009368:	eb0a 040b 	add.w	r4, sl, fp
 800936c:	eb07 0045 	add.w	r0, r7, r5, lsl #1
 8009370:	f3c6 2807 	ubfx	r8, r6, #8, #8
 8009374:	b2f7      	uxtb	r7, r6
 8009376:	b2e6      	uxtb	r6, r4
 8009378:	f3c4 2507 	ubfx	r5, r4, #8, #8
 800937c:	f3c4 4907 	ubfx	r9, r4, #16, #8
 8009380:	ea4f 6b14 	mov.w	fp, r4, lsr #24
 8009384:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8009388:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 800938c:	eb06 269c 	add.w	r6, r6, ip, lsr #10
 8009390:	f851 9029 	ldr.w	r9, [r1, r9, lsl #2]
 8009394:	f851 402b 	ldr.w	r4, [r1, fp, lsl #2]
 8009398:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 800939c:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 80093a0:	f851 c028 	ldr.w	ip, [r1, r8, lsl #2]
 80093a4:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80093a8:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 80093ac:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80093b0:	eb04 2499 	add.w	r4, r4, r9, lsr #10
 80093b4:	f3c9 0909 	ubfx	r9, r9, #0, #10
 80093b8:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 80093bc:	9d00      	ldr	r5, [sp, #0]
 80093be:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 80093c2:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80093c6:	eb0c 2c97 	add.w	ip, ip, r7, lsr #10
 80093ca:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80093ce:	ea44 4909 	orr.w	r9, r4, r9, lsl #16
 80093d2:	f3cc 0409 	ubfx	r4, ip, #0, #10
 80093d6:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 80093da:	4c3a      	ldr	r4, [pc, #232]	; (80094c4 <D48_GENERIC+0x1cc>)
 80093dc:	fb26 5a04 	smlad	sl, r6, r4, r5
 80093e0:	4c39      	ldr	r4, [pc, #228]	; (80094c8 <D48_GENERIC+0x1d0>)
 80093e2:	fb29 aa04 	smlad	sl, r9, r4, sl
 80093e6:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 80093ea:	fb27 aa04 	smlad	sl, r7, r4, sl
 80093ee:	4c37      	ldr	r4, [pc, #220]	; (80094cc <D48_GENERIC+0x1d4>)
 80093f0:	fb26 3304 	smlad	r3, r6, r4, r3
 80093f4:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 80093f8:	fb29 3304 	smlad	r3, r9, r4, r3
 80093fc:	4c34      	ldr	r4, [pc, #208]	; (80094d0 <D48_GENERIC+0x1d8>)
 80093fe:	fb27 3304 	smlad	r3, r7, r4, r3
 8009402:	2501      	movs	r5, #1
 8009404:	9300      	str	r3, [sp, #0]
 8009406:	fb26 f605 	smuad	r6, r6, r5
 800940a:	4b32      	ldr	r3, [pc, #200]	; (80094d4 <D48_GENERIC+0x1dc>)
 800940c:	fb29 6903 	smlad	r9, r9, r3, r6
 8009410:	4b31      	ldr	r3, [pc, #196]	; (80094d8 <D48_GENERIC+0x1e0>)
 8009412:	fb27 9303 	smlad	r3, r7, r3, r9
 8009416:	9c05      	ldr	r4, [sp, #20]
 8009418:	eb0e 0805 	add.w	r8, lr, r5
 800941c:	f5aa 4a58 	sub.w	sl, sl, #55296	; 0xd800
 8009420:	b19c      	cbz	r4, 800944a <D48_GENERIC+0x152>
 8009422:	9c01      	ldr	r4, [sp, #4]
 8009424:	9d02      	ldr	r5, [sp, #8]
 8009426:	4454      	add	r4, sl
 8009428:	f8d2 9020 	ldr.w	r9, [r2, #32]
 800942c:	f8cd a008 	str.w	sl, [sp, #8]
 8009430:	1b64      	subs	r4, r4, r5
 8009432:	fba4 ab09 	umull	sl, fp, r4, r9
 8009436:	17e7      	asrs	r7, r4, #31
 8009438:	f11a 4400 	adds.w	r4, sl, #2147483648	; 0x80000000
 800943c:	fb09 bb07 	mla	fp, r9, r7, fp
 8009440:	f14b 0500 	adc.w	r5, fp, #0
 8009444:	006c      	lsls	r4, r5, #1
 8009446:	46a2      	mov	sl, r4
 8009448:	9401      	str	r4, [sp, #4]
 800944a:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 800944c:	ea4f 2aca 	mov.w	sl, sl, lsl #11
 8009450:	9d03      	ldr	r5, [sp, #12]
 8009452:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8009456:	fb0e f606 	mul.w	r6, lr, r6
 800945a:	fa1f fe88 	uxth.w	lr, r8
 800945e:	f04f 0800 	mov.w	r8, #0
 8009462:	fbc5 780a 	smlal	r7, r8, r5, sl
 8009466:	4645      	mov	r5, r8
 8009468:	10ac      	asrs	r4, r5, #2
 800946a:	9d04      	ldr	r5, [sp, #16]
 800946c:	f304 040f 	ssat	r4, #16, r4
 8009470:	f825 4016 	strh.w	r4, [r5, r6, lsl #1]
 8009474:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8009476:	4574      	cmp	r4, lr
 8009478:	d912      	bls.n	80094a0 <D48_GENERIC+0x1a8>
 800947a:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 800947c:	b2e5      	uxtb	r5, r4
 800947e:	2c01      	cmp	r4, #1
 8009480:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 8009484:	f1c5 0700 	rsb	r7, r5, #0
 8009488:	f47f af56 	bne.w	8009338 <D48_GENERIC+0x40>
 800948c:	9d06      	ldr	r5, [sp, #24]
 800948e:	e9d0 4600 	ldrd	r4, r6, [r0]
 8009492:	3006      	adds	r0, #6
 8009494:	2d00      	cmp	r5, #0
 8009496:	f43f af6b 	beq.w	8009370 <D48_GENERIC+0x78>
 800949a:	ba64      	rev16	r4, r4
 800949c:	ba76      	rev16	r6, r6
 800949e:	e767      	b.n	8009370 <D48_GENERIC+0x78>
 80094a0:	6093      	str	r3, [r2, #8]
 80094a2:	2000      	movs	r0, #0
 80094a4:	9b00      	ldr	r3, [sp, #0]
 80094a6:	f8c2 c01c 	str.w	ip, [r2, #28]
 80094aa:	60d3      	str	r3, [r2, #12]
 80094ac:	9b01      	ldr	r3, [sp, #4]
 80094ae:	6113      	str	r3, [r2, #16]
 80094b0:	9b02      	ldr	r3, [sp, #8]
 80094b2:	6153      	str	r3, [r2, #20]
 80094b4:	9b07      	ldr	r3, [sp, #28]
 80094b6:	6193      	str	r3, [r2, #24]
 80094b8:	b009      	add	sp, #36	; 0x24
 80094ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094be:	bf00      	nop
 80094c0:	24000000 	.word	0x24000000
 80094c4:	000f000a 	.word	0x000f000a
 80094c8:	00060003 	.word	0x00060003
 80094cc:	00150019 	.word	0x00150019
 80094d0:	00190015 	.word	0x00190015
 80094d4:	00030006 	.word	0x00030006
 80094d8:	000a000f 	.word	0x000a000f

080094dc <D64_GENERIC>:
 80094dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094e0:	6913      	ldr	r3, [r2, #16]
 80094e2:	b089      	sub	sp, #36	; 0x24
 80094e4:	6b15      	ldr	r5, [r2, #48]	; 0x30
 80094e6:	9300      	str	r3, [sp, #0]
 80094e8:	6953      	ldr	r3, [r2, #20]
 80094ea:	9105      	str	r1, [sp, #20]
 80094ec:	9303      	str	r3, [sp, #12]
 80094ee:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 80094f0:	6993      	ldr	r3, [r2, #24]
 80094f2:	69d4      	ldr	r4, [r2, #28]
 80094f4:	9307      	str	r3, [sp, #28]
 80094f6:	9504      	str	r5, [sp, #16]
 80094f8:	e9d2 3602 	ldrd	r3, r6, [r2, #8]
 80094fc:	2900      	cmp	r1, #0
 80094fe:	f000 80e8 	beq.w	80096d2 <D64_GENERIC+0x1f6>
 8009502:	6a11      	ldr	r1, [r2, #32]
 8009504:	2500      	movs	r5, #0
 8009506:	46b3      	mov	fp, r6
 8009508:	9302      	str	r3, [sp, #8]
 800950a:	9106      	str	r1, [sp, #24]
 800950c:	4978      	ldr	r1, [pc, #480]	; (80096f0 <D64_GENERIC+0x214>)
 800950e:	e0cc      	b.n	80096aa <D64_GENERIC+0x1ce>
 8009510:	eb0e 084e 	add.w	r8, lr, lr, lsl #1
 8009514:	f1ce 0c00 	rsb	ip, lr, #0
 8009518:	f890 9000 	ldrb.w	r9, [r0]
 800951c:	eb00 0708 	add.w	r7, r0, r8
 8009520:	f810 6008 	ldrb.w	r6, [r0, r8]
 8009524:	eb07 0a4c 	add.w	sl, r7, ip, lsl #1
 8009528:	f817 000c 	ldrb.w	r0, [r7, ip]
 800952c:	f817 301c 	ldrb.w	r3, [r7, ip, lsl #1]
 8009530:	eb0a 0748 	add.w	r7, sl, r8, lsl #1
 8009534:	f81a a018 	ldrb.w	sl, [sl, r8, lsl #1]
 8009538:	ea4f 4800 	mov.w	r8, r0, lsl #16
 800953c:	f817 000c 	ldrb.w	r0, [r7, ip]
 8009540:	eb08 6606 	add.w	r6, r8, r6, lsl #24
 8009544:	f817 801c 	ldrb.w	r8, [r7, ip, lsl #1]
 8009548:	0400      	lsls	r0, r0, #16
 800954a:	4467      	add	r7, ip
 800954c:	eb06 2603 	add.w	r6, r6, r3, lsl #8
 8009550:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 8009554:	f817 a01c 	ldrb.w	sl, [r7, ip, lsl #1]
 8009558:	eb07 074c 	add.w	r7, r7, ip, lsl #1
 800955c:	444e      	add	r6, r9
 800955e:	eb00 2808 	add.w	r8, r0, r8, lsl #8
 8009562:	eb07 008e 	add.w	r0, r7, lr, lsl #2
 8009566:	44c2      	add	sl, r8
 8009568:	b2f7      	uxtb	r7, r6
 800956a:	f3c6 2807 	ubfx	r8, r6, #8, #8
 800956e:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 8009572:	0e36      	lsrs	r6, r6, #24
 8009574:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 8009578:	fa5f fc8a 	uxtb.w	ip, sl
 800957c:	f851 8028 	ldr.w	r8, [r1, r8, lsl #2]
 8009580:	f3ca 2907 	ubfx	r9, sl, #8, #8
 8009584:	443c      	add	r4, r7
 8009586:	f851 702e 	ldr.w	r7, [r1, lr, lsl #2]
 800958a:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800958e:	eb08 2894 	add.w	r8, r8, r4, lsr #10
 8009592:	f851 c02c 	ldr.w	ip, [r1, ip, lsl #2]
 8009596:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800959a:	4b56      	ldr	r3, [pc, #344]	; (80096f4 <D64_GENERIC+0x218>)
 800959c:	eb07 2e98 	add.w	lr, r7, r8, lsr #10
 80095a0:	f3c8 0809 	ubfx	r8, r8, #0, #10
 80095a4:	f851 7029 	ldr.w	r7, [r1, r9, lsl #2]
 80095a8:	eb06 269e 	add.w	r6, r6, lr, lsr #10
 80095ac:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 80095b0:	ea48 4804 	orr.w	r8, r8, r4, lsl #16
 80095b4:	f3ca 4407 	ubfx	r4, sl, #16, #8
 80095b8:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 80095bc:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80095c0:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 80095c4:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 80095c8:	eb07 279c 	add.w	r7, r7, ip, lsr #10
 80095cc:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 80095d0:	f851 902a 	ldr.w	r9, [r1, sl, lsl #2]
 80095d4:	ea46 460e 	orr.w	r6, r6, lr, lsl #16
 80095d8:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 80095dc:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80095e0:	eb09 299a 	add.w	r9, r9, sl, lsr #10
 80095e4:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 80095e8:	ea47 4c0c 	orr.w	ip, r7, ip, lsl #16
 80095ec:	f3c9 0709 	ubfx	r7, r9, #0, #10
 80095f0:	ea4f 2499 	mov.w	r4, r9, lsr #10
 80095f4:	ea47 4a0a 	orr.w	sl, r7, sl, lsl #16
 80095f8:	fb28 b903 	smlad	r9, r8, r3, fp
 80095fc:	4b3e      	ldr	r3, [pc, #248]	; (80096f8 <D64_GENERIC+0x21c>)
 80095fe:	fb26 9903 	smlad	r9, r6, r3, r9
 8009602:	4b3e      	ldr	r3, [pc, #248]	; (80096fc <D64_GENERIC+0x220>)
 8009604:	fb2c 9703 	smlad	r7, ip, r3, r9
 8009608:	f44f 3980 	mov.w	r9, #65536	; 0x10000
 800960c:	fb2a 7909 	smlad	r9, sl, r9, r7
 8009610:	4f3b      	ldr	r7, [pc, #236]	; (8009700 <D64_GENERIC+0x224>)
 8009612:	9b02      	ldr	r3, [sp, #8]
 8009614:	fb28 3307 	smlad	r3, r8, r7, r3
 8009618:	fb2a 3317 	smladx	r3, sl, r7, r3
 800961c:	4f39      	ldr	r7, [pc, #228]	; (8009704 <D64_GENERIC+0x228>)
 800961e:	fb26 3307 	smlad	r3, r6, r7, r3
 8009622:	fb2c 3b17 	smladx	fp, ip, r7, r3
 8009626:	f04f 0e01 	mov.w	lr, #1
 800962a:	fb28 f80e 	smuad	r8, r8, lr
 800962e:	4b36      	ldr	r3, [pc, #216]	; (8009708 <D64_GENERIC+0x22c>)
 8009630:	fb26 8603 	smlad	r6, r6, r3, r8
 8009634:	4b35      	ldr	r3, [pc, #212]	; (800970c <D64_GENERIC+0x230>)
 8009636:	fb2c 6c03 	smlad	ip, ip, r3, r6
 800963a:	4b35      	ldr	r3, [pc, #212]	; (8009710 <D64_GENERIC+0x234>)
 800963c:	fb2a c303 	smlad	r3, sl, r3, ip
 8009640:	9f06      	ldr	r7, [sp, #24]
 8009642:	f5a9 3900 	sub.w	r9, r9, #131072	; 0x20000
 8009646:	9302      	str	r3, [sp, #8]
 8009648:	b1cf      	cbz	r7, 800967e <D64_GENERIC+0x1a2>
 800964a:	9b00      	ldr	r3, [sp, #0]
 800964c:	444b      	add	r3, r9
 800964e:	461e      	mov	r6, r3
 8009650:	9b03      	ldr	r3, [sp, #12]
 8009652:	f8cd 900c 	str.w	r9, [sp, #12]
 8009656:	1af6      	subs	r6, r6, r3
 8009658:	46b0      	mov	r8, r6
 800965a:	ea4f 79e6 	mov.w	r9, r6, asr #31
 800965e:	e9cd 8900 	strd	r8, r9, [sp]
 8009662:	fba6 8907 	umull	r8, r9, r6, r7
 8009666:	9e01      	ldr	r6, [sp, #4]
 8009668:	fb07 9306 	mla	r3, r7, r6, r9
 800966c:	4646      	mov	r6, r8
 800966e:	f116 4600 	adds.w	r6, r6, #2147483648	; 0x80000000
 8009672:	f143 0700 	adc.w	r7, r3, #0
 8009676:	fa07 f30e 	lsl.w	r3, r7, lr
 800967a:	4699      	mov	r9, r3
 800967c:	9300      	str	r3, [sp, #0]
 800967e:	f8b2 c028 	ldrh.w	ip, [r2, #40]	; 0x28
 8009682:	ea4f 2989 	mov.w	r9, r9, lsl #10
 8009686:	9b04      	ldr	r3, [sp, #16]
 8009688:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800968c:	2700      	movs	r7, #0
 800968e:	fb05 fc0c 	mul.w	ip, r5, ip
 8009692:	3501      	adds	r5, #1
 8009694:	fbc3 6709 	smlal	r6, r7, r3, r9
 8009698:	9b05      	ldr	r3, [sp, #20]
 800969a:	10be      	asrs	r6, r7, #2
 800969c:	f306 060f 	ssat	r6, #16, r6
 80096a0:	f823 601c 	strh.w	r6, [r3, ip, lsl #1]
 80096a4:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 80096a6:	42ae      	cmp	r6, r5
 80096a8:	dd11      	ble.n	80096ce <D64_GENERIC+0x1f2>
 80096aa:	f8b2 e02a 	ldrh.w	lr, [r2, #42]	; 0x2a
 80096ae:	f1be 0f01 	cmp.w	lr, #1
 80096b2:	f47f af2d 	bne.w	8009510 <D64_GENERIC+0x34>
 80096b6:	6b57      	ldr	r7, [r2, #52]	; 0x34
 80096b8:	f100 0c08 	add.w	ip, r0, #8
 80096bc:	06bb      	lsls	r3, r7, #26
 80096be:	e9d0 6a00 	ldrd	r6, sl, [r0]
 80096c2:	d513      	bpl.n	80096ec <D64_GENERIC+0x210>
 80096c4:	ba76      	rev16	r6, r6
 80096c6:	fa9a fa9a 	rev16.w	sl, sl
 80096ca:	4660      	mov	r0, ip
 80096cc:	e74c      	b.n	8009568 <D64_GENERIC+0x8c>
 80096ce:	465e      	mov	r6, fp
 80096d0:	9b02      	ldr	r3, [sp, #8]
 80096d2:	6093      	str	r3, [r2, #8]
 80096d4:	2000      	movs	r0, #0
 80096d6:	9b00      	ldr	r3, [sp, #0]
 80096d8:	60d6      	str	r6, [r2, #12]
 80096da:	6113      	str	r3, [r2, #16]
 80096dc:	9b03      	ldr	r3, [sp, #12]
 80096de:	61d4      	str	r4, [r2, #28]
 80096e0:	6153      	str	r3, [r2, #20]
 80096e2:	9b07      	ldr	r3, [sp, #28]
 80096e4:	6193      	str	r3, [r2, #24]
 80096e6:	b009      	add	sp, #36	; 0x24
 80096e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096ec:	4660      	mov	r0, ip
 80096ee:	e73b      	b.n	8009568 <D64_GENERIC+0x8c>
 80096f0:	24000000 	.word	0x24000000
 80096f4:	001c0015 	.word	0x001c0015
 80096f8:	000f000a 	.word	0x000f000a
 80096fc:	00060003 	.word	0x00060003
 8009700:	0024002a 	.word	0x0024002a
 8009704:	002e0030 	.word	0x002e0030
 8009708:	00030006 	.word	0x00030006
 800970c:	000a000f 	.word	0x000a000f
 8009710:	0015001c 	.word	0x0015001c

08009714 <D80_GENERIC>:
 8009714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009718:	b08b      	sub	sp, #44	; 0x2c
 800971a:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800971c:	9107      	str	r1, [sp, #28]
 800971e:	6911      	ldr	r1, [r2, #16]
 8009720:	9104      	str	r1, [sp, #16]
 8009722:	6951      	ldr	r1, [r2, #20]
 8009724:	9105      	str	r1, [sp, #20]
 8009726:	6991      	ldr	r1, [r2, #24]
 8009728:	9109      	str	r1, [sp, #36]	; 0x24
 800972a:	69d1      	ldr	r1, [r2, #28]
 800972c:	9102      	str	r1, [sp, #8]
 800972e:	6891      	ldr	r1, [r2, #8]
 8009730:	9103      	str	r1, [sp, #12]
 8009732:	68d1      	ldr	r1, [r2, #12]
 8009734:	9101      	str	r1, [sp, #4]
 8009736:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8009738:	9106      	str	r1, [sp, #24]
 800973a:	2b00      	cmp	r3, #0
 800973c:	f000 810b 	beq.w	8009956 <D80_GENERIC+0x242>
 8009740:	6a13      	ldr	r3, [r2, #32]
 8009742:	f04f 0800 	mov.w	r8, #0
 8009746:	f8df c260 	ldr.w	ip, [pc, #608]	; 80099a8 <D80_GENERIC+0x294>
 800974a:	9308      	str	r3, [sp, #32]
 800974c:	9200      	str	r2, [sp, #0]
 800974e:	e0ee      	b.n	800992e <D80_GENERIC+0x21a>
 8009750:	b2db      	uxtb	r3, r3
 8009752:	f890 e000 	ldrb.w	lr, [r0]
 8009756:	b219      	sxth	r1, r3
 8009758:	425c      	negs	r4, r3
 800975a:	f810 9003 	ldrb.w	r9, [r0, r3]
 800975e:	004e      	lsls	r6, r1, #1
 8009760:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 8009764:	4431      	add	r1, r6
 8009766:	1843      	adds	r3, r0, r1
 8009768:	f810 b001 	ldrb.w	fp, [r0, r1]
 800976c:	1919      	adds	r1, r3, r4
 800976e:	5d1b      	ldrb	r3, [r3, r4]
 8009770:	1948      	adds	r0, r1, r5
 8009772:	f811 a005 	ldrb.w	sl, [r1, r5]
 8009776:	041b      	lsls	r3, r3, #16
 8009778:	1907      	adds	r7, r0, r4
 800977a:	5d01      	ldrb	r1, [r0, r4]
 800977c:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 8009780:	f810 0014 	ldrb.w	r0, [r0, r4, lsl #1]
 8009784:	eb07 0b44 	add.w	fp, r7, r4, lsl #1
 8009788:	f817 7014 	ldrb.w	r7, [r7, r4, lsl #1]
 800978c:	0409      	lsls	r1, r1, #16
 800978e:	eb03 2309 	add.w	r3, r3, r9, lsl #8
 8009792:	eb0b 0905 	add.w	r9, fp, r5
 8009796:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 800979a:	f81b 5005 	ldrb.w	r5, [fp, r5]
 800979e:	eb09 0b04 	add.w	fp, r9, r4
 80097a2:	f819 4004 	ldrb.w	r4, [r9, r4]
 80097a6:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 80097aa:	4473      	add	r3, lr
 80097ac:	eb0b 0006 	add.w	r0, fp, r6
 80097b0:	eb04 2505 	add.w	r5, r4, r5, lsl #8
 80097b4:	4439      	add	r1, r7
 80097b6:	f3c3 2407 	ubfx	r4, r3, #8, #8
 80097ba:	b2df      	uxtb	r7, r3
 80097bc:	f3c3 4607 	ubfx	r6, r3, #16, #8
 80097c0:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 80097c4:	f85c 3027 	ldr.w	r3, [ip, r7, lsl #2]
 80097c8:	fa5f fa81 	uxtb.w	sl, r1
 80097cc:	f85c 7024 	ldr.w	r7, [ip, r4, lsl #2]
 80097d0:	9c02      	ldr	r4, [sp, #8]
 80097d2:	f85c 9026 	ldr.w	r9, [ip, r6, lsl #2]
 80097d6:	441c      	add	r4, r3
 80097d8:	f85c 602e 	ldr.w	r6, [ip, lr, lsl #2]
 80097dc:	f85c e02a 	ldr.w	lr, [ip, sl, lsl #2]
 80097e0:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 80097e4:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 80097e8:	f3c4 0309 	ubfx	r3, r4, #0, #10
 80097ec:	f3c1 2407 	ubfx	r4, r1, #8, #8
 80097f0:	b2ed      	uxtb	r5, r5
 80097f2:	eb09 2997 	add.w	r9, r9, r7, lsr #10
 80097f6:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80097fa:	f85c 4024 	ldr.w	r4, [ip, r4, lsl #2]
 80097fe:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 8009802:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 8009806:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 800980a:	f3c1 4707 	ubfx	r7, r1, #16, #8
 800980e:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 8009812:	f85c a02a 	ldr.w	sl, [ip, sl, lsl #2]
 8009816:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 800981a:	0e09      	lsrs	r1, r1, #24
 800981c:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 8009820:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8009824:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 8009828:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800982c:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 8009830:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8009834:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8009838:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 800983c:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8009840:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
 8009844:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 8009848:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800984c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8009850:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 8009854:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8009858:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 800985c:	ea4f 229a 	mov.w	r2, sl, lsr #10
 8009860:	f3ca 0709 	ubfx	r7, sl, #0, #10
 8009864:	9202      	str	r2, [sp, #8]
 8009866:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 800986a:	4a43      	ldr	r2, [pc, #268]	; (8009978 <D80_GENERIC+0x264>)
 800986c:	9f01      	ldr	r7, [sp, #4]
 800986e:	fb23 7a02 	smlad	sl, r3, r2, r7
 8009872:	4a42      	ldr	r2, [pc, #264]	; (800997c <D80_GENERIC+0x268>)
 8009874:	fb26 aa02 	smlad	sl, r6, r2, sl
 8009878:	4a41      	ldr	r2, [pc, #260]	; (8009980 <D80_GENERIC+0x26c>)
 800987a:	fb24 aa02 	smlad	sl, r4, r2, sl
 800987e:	4a41      	ldr	r2, [pc, #260]	; (8009984 <D80_GENERIC+0x270>)
 8009880:	fb21 a702 	smlad	r7, r1, r2, sl
 8009884:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 8009888:	fb25 7a0a 	smlad	sl, r5, sl, r7
 800988c:	4a3e      	ldr	r2, [pc, #248]	; (8009988 <D80_GENERIC+0x274>)
 800988e:	9f03      	ldr	r7, [sp, #12]
 8009890:	fb23 7e02 	smlad	lr, r3, r2, r7
 8009894:	4a3d      	ldr	r2, [pc, #244]	; (800998c <D80_GENERIC+0x278>)
 8009896:	fb26 ee02 	smlad	lr, r6, r2, lr
 800989a:	f04f 174b 	mov.w	r7, #4915275	; 0x4b004b
 800989e:	fb24 e707 	smlad	r7, r4, r7, lr
 80098a2:	4a3b      	ldr	r2, [pc, #236]	; (8009990 <D80_GENERIC+0x27c>)
 80098a4:	fb21 7702 	smlad	r7, r1, r2, r7
 80098a8:	4a3a      	ldr	r2, [pc, #232]	; (8009994 <D80_GENERIC+0x280>)
 80098aa:	fb25 7202 	smlad	r2, r5, r2, r7
 80098ae:	f04f 0901 	mov.w	r9, #1
 80098b2:	9201      	str	r2, [sp, #4]
 80098b4:	fb23 f909 	smuad	r9, r3, r9
 80098b8:	4b37      	ldr	r3, [pc, #220]	; (8009998 <D80_GENERIC+0x284>)
 80098ba:	fb26 9603 	smlad	r6, r6, r3, r9
 80098be:	4f37      	ldr	r7, [pc, #220]	; (800999c <D80_GENERIC+0x288>)
 80098c0:	fb24 6407 	smlad	r4, r4, r7, r6
 80098c4:	4f36      	ldr	r7, [pc, #216]	; (80099a0 <D80_GENERIC+0x28c>)
 80098c6:	fb21 4707 	smlad	r7, r1, r7, r4
 80098ca:	4936      	ldr	r1, [pc, #216]	; (80099a4 <D80_GENERIC+0x290>)
 80098cc:	fb25 7301 	smlad	r3, r5, r1, r7
 80098d0:	9303      	str	r3, [sp, #12]
 80098d2:	f5aa 3a7a 	sub.w	sl, sl, #256000	; 0x3e800
 80098d6:	9b08      	ldr	r3, [sp, #32]
 80098d8:	b193      	cbz	r3, 8009900 <D80_GENERIC+0x1ec>
 80098da:	9a04      	ldr	r2, [sp, #16]
 80098dc:	4452      	add	r2, sl
 80098de:	4614      	mov	r4, r2
 80098e0:	9a05      	ldr	r2, [sp, #20]
 80098e2:	f8cd a014 	str.w	sl, [sp, #20]
 80098e6:	1aa4      	subs	r4, r4, r2
 80098e8:	fba4 1203 	umull	r1, r2, r4, r3
 80098ec:	17e7      	asrs	r7, r4, #31
 80098ee:	f111 4400 	adds.w	r4, r1, #2147483648	; 0x80000000
 80098f2:	fb03 2207 	mla	r2, r3, r7, r2
 80098f6:	f142 0500 	adc.w	r5, r2, #0
 80098fa:	006b      	lsls	r3, r5, #1
 80098fc:	469a      	mov	sl, r3
 80098fe:	9304      	str	r3, [sp, #16]
 8009900:	9e00      	ldr	r6, [sp, #0]
 8009902:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
 8009906:	9a06      	ldr	r2, [sp, #24]
 8009908:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800990c:	8d33      	ldrh	r3, [r6, #40]	; 0x28
 800990e:	2500      	movs	r5, #0
 8009910:	fb08 f303 	mul.w	r3, r8, r3
 8009914:	fbc2 450a 	smlal	r4, r5, r2, sl
 8009918:	9a07      	ldr	r2, [sp, #28]
 800991a:	f108 0801 	add.w	r8, r8, #1
 800991e:	10a9      	asrs	r1, r5, #2
 8009920:	f301 010f 	ssat	r1, #16, r1
 8009924:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8009928:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 800992a:	4543      	cmp	r3, r8
 800992c:	dd12      	ble.n	8009954 <D80_GENERIC+0x240>
 800992e:	9b00      	ldr	r3, [sp, #0]
 8009930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009932:	2b01      	cmp	r3, #1
 8009934:	f47f af0c 	bne.w	8009750 <D80_GENERIC+0x3c>
 8009938:	9b00      	ldr	r3, [sp, #0]
 800993a:	6885      	ldr	r5, [r0, #8]
 800993c:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 800993e:	06b2      	lsls	r2, r6, #26
 8009940:	e9d0 3100 	ldrd	r3, r1, [r0]
 8009944:	f100 000a 	add.w	r0, r0, #10
 8009948:	f57f af35 	bpl.w	80097b6 <D80_GENERIC+0xa2>
 800994c:	ba5b      	rev16	r3, r3
 800994e:	ba49      	rev16	r1, r1
 8009950:	ba6d      	rev16	r5, r5
 8009952:	e730      	b.n	80097b6 <D80_GENERIC+0xa2>
 8009954:	4632      	mov	r2, r6
 8009956:	9b03      	ldr	r3, [sp, #12]
 8009958:	2000      	movs	r0, #0
 800995a:	6093      	str	r3, [r2, #8]
 800995c:	9b01      	ldr	r3, [sp, #4]
 800995e:	60d3      	str	r3, [r2, #12]
 8009960:	9b02      	ldr	r3, [sp, #8]
 8009962:	61d3      	str	r3, [r2, #28]
 8009964:	9b04      	ldr	r3, [sp, #16]
 8009966:	6113      	str	r3, [r2, #16]
 8009968:	9b05      	ldr	r3, [sp, #20]
 800996a:	6153      	str	r3, [r2, #20]
 800996c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800996e:	6193      	str	r3, [r2, #24]
 8009970:	b00b      	add	sp, #44	; 0x2c
 8009972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009976:	bf00      	nop
 8009978:	002d0024 	.word	0x002d0024
 800997c:	001c0015 	.word	0x001c0015
 8009980:	000f000a 	.word	0x000f000a
 8009984:	00060003 	.word	0x00060003
 8009988:	0037003f 	.word	0x0037003f
 800998c:	00450049 	.word	0x00450049
 8009990:	00490045 	.word	0x00490045
 8009994:	003f0037 	.word	0x003f0037
 8009998:	00030006 	.word	0x00030006
 800999c:	000a000f 	.word	0x000a000f
 80099a0:	0015001c 	.word	0x0015001c
 80099a4:	0024002d 	.word	0x0024002d
 80099a8:	24000000 	.word	0x24000000

080099ac <D128_GENERIC>:
 80099ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099b0:	b08d      	sub	sp, #52	; 0x34
 80099b2:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 80099b4:	f8d2 a01c 	ldr.w	sl, [r2, #28]
 80099b8:	9109      	str	r1, [sp, #36]	; 0x24
 80099ba:	6911      	ldr	r1, [r2, #16]
 80099bc:	9201      	str	r2, [sp, #4]
 80099be:	9106      	str	r1, [sp, #24]
 80099c0:	6951      	ldr	r1, [r2, #20]
 80099c2:	9107      	str	r1, [sp, #28]
 80099c4:	6991      	ldr	r1, [r2, #24]
 80099c6:	910b      	str	r1, [sp, #44]	; 0x2c
 80099c8:	6891      	ldr	r1, [r2, #8]
 80099ca:	9103      	str	r1, [sp, #12]
 80099cc:	68d1      	ldr	r1, [r2, #12]
 80099ce:	9102      	str	r1, [sp, #8]
 80099d0:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80099d2:	9108      	str	r1, [sp, #32]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	f000 8183 	beq.w	8009ce0 <D128_GENERIC+0x334>
 80099da:	2300      	movs	r3, #0
 80099dc:	6a12      	ldr	r2, [r2, #32]
 80099de:	4681      	mov	r9, r0
 80099e0:	920a      	str	r2, [sp, #40]	; 0x28
 80099e2:	e9cd a304 	strd	sl, r3, [sp, #16]
 80099e6:	e165      	b.n	8009cb4 <D128_GENERIC+0x308>
 80099e8:	b2d2      	uxtb	r2, r2
 80099ea:	f899 b000 	ldrb.w	fp, [r9]
 80099ee:	b213      	sxth	r3, r2
 80099f0:	4255      	negs	r5, r2
 80099f2:	f819 0002 	ldrb.w	r0, [r9, r2]
 80099f6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80099fa:	009f      	lsls	r7, r3, #2
 80099fc:	eb09 0402 	add.w	r4, r9, r2
 8009a00:	ebc3 06c3 	rsb	r6, r3, r3, lsl #3
 8009a04:	f819 8002 	ldrb.w	r8, [r9, r2]
 8009a08:	443b      	add	r3, r7
 8009a0a:	1962      	adds	r2, r4, r5
 8009a0c:	5d64      	ldrb	r4, [r4, r5]
 8009a0e:	eb02 0c03 	add.w	ip, r2, r3
 8009a12:	0424      	lsls	r4, r4, #16
 8009a14:	5cd3      	ldrb	r3, [r2, r3]
 8009a16:	eb0c 0e05 	add.w	lr, ip, r5
 8009a1a:	f81c 9015 	ldrb.w	r9, [ip, r5, lsl #1]
 8009a1e:	f81c 2005 	ldrb.w	r2, [ip, r5]
 8009a22:	eb04 6408 	add.w	r4, r4, r8, lsl #24
 8009a26:	eb0e 0c45 	add.w	ip, lr, r5, lsl #1
 8009a2a:	f81e 8015 	ldrb.w	r8, [lr, r5, lsl #1]
 8009a2e:	eb04 2400 	add.w	r4, r4, r0, lsl #8
 8009a32:	eb0c 0e06 	add.w	lr, ip, r6
 8009a36:	f81c a006 	ldrb.w	sl, [ip, r6]
 8009a3a:	0412      	lsls	r2, r2, #16
 8009a3c:	445c      	add	r4, fp
 8009a3e:	eb0e 0c05 	add.w	ip, lr, r5
 8009a42:	eb02 6203 	add.w	r2, r2, r3, lsl #24
 8009a46:	f81e 3005 	ldrb.w	r3, [lr, r5]
 8009a4a:	eb0c 0045 	add.w	r0, ip, r5, lsl #1
 8009a4e:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 8009a52:	041b      	lsls	r3, r3, #16
 8009a54:	f81c c015 	ldrb.w	ip, [ip, r5, lsl #1]
 8009a58:	eb00 0b06 	add.w	fp, r0, r6
 8009a5c:	5d80      	ldrb	r0, [r0, r6]
 8009a5e:	eb03 630a 	add.w	r3, r3, sl, lsl #24
 8009a62:	f81b 6005 	ldrb.w	r6, [fp, r5]
 8009a66:	eb0b 0a05 	add.w	sl, fp, r5
 8009a6a:	eb02 2209 	add.w	r2, r2, r9, lsl #8
 8009a6e:	f81b b015 	ldrb.w	fp, [fp, r5, lsl #1]
 8009a72:	0436      	lsls	r6, r6, #16
 8009a74:	eb0a 0945 	add.w	r9, sl, r5, lsl #1
 8009a78:	4442      	add	r2, r8
 8009a7a:	eb06 6600 	add.w	r6, r6, r0, lsl #24
 8009a7e:	f81a 8015 	ldrb.w	r8, [sl, r5, lsl #1]
 8009a82:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 8009a86:	44b9      	add	r9, r7
 8009a88:	eb06 260b 	add.w	r6, r6, fp, lsl #8
 8009a8c:	4463      	add	r3, ip
 8009a8e:	eb06 0508 	add.w	r5, r6, r8
 8009a92:	b2e7      	uxtb	r7, r4
 8009a94:	f3c4 2607 	ubfx	r6, r4, #8, #8
 8009a98:	499b      	ldr	r1, [pc, #620]	; (8009d08 <D128_GENERIC+0x35c>)
 8009a9a:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8009a9e:	0e24      	lsrs	r4, r4, #24
 8009aa0:	f851 c027 	ldr.w	ip, [r1, r7, lsl #2]
 8009aa4:	b2d7      	uxtb	r7, r2
 8009aa6:	f851 b026 	ldr.w	fp, [r1, r6, lsl #2]
 8009aaa:	f3c2 2607 	ubfx	r6, r2, #8, #8
 8009aae:	9904      	ldr	r1, [sp, #16]
 8009ab0:	4461      	add	r1, ip
 8009ab2:	468c      	mov	ip, r1
 8009ab4:	4994      	ldr	r1, [pc, #592]	; (8009d08 <D128_GENERIC+0x35c>)
 8009ab6:	eb0b 2b9c 	add.w	fp, fp, ip, lsr #10
 8009aba:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8009abe:	f851 8024 	ldr.w	r8, [r1, r4, lsl #2]
 8009ac2:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8009ac6:	eb00 209b 	add.w	r0, r0, fp, lsr #10
 8009aca:	f851 e027 	ldr.w	lr, [r1, r7, lsl #2]
 8009ace:	f851 7026 	ldr.w	r7, [r1, r6, lsl #2]
 8009ad2:	0e12      	lsrs	r2, r2, #24
 8009ad4:	eb08 2890 	add.w	r8, r8, r0, lsr #10
 8009ad8:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8009adc:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 8009ae0:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8009ae4:	eb0e 2e98 	add.w	lr, lr, r8, lsr #10
 8009ae8:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8009aec:	b2da      	uxtb	r2, r3
 8009aee:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8009af2:	eb07 279e 	add.w	r7, r7, lr, lsr #10
 8009af6:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8009afa:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8009afe:	ea48 4800 	orr.w	r8, r8, r0, lsl #16
 8009b02:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 8009b06:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8009b0a:	ea4b 4b0c 	orr.w	fp, fp, ip, lsl #16
 8009b0e:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8009b12:	eb06 269a 	add.w	r6, r6, sl, lsr #10
 8009b16:	f851 c020 	ldr.w	ip, [r1, r0, lsl #2]
 8009b1a:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8009b1e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8009b22:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 8009b26:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8009b2a:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 8009b2e:	0e1b      	lsrs	r3, r3, #24
 8009b30:	eb0c 2c92 	add.w	ip, ip, r2, lsr #10
 8009b34:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8009b38:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 8009b3c:	ea47 470e 	orr.w	r7, r7, lr, lsl #16
 8009b40:	b2eb      	uxtb	r3, r5
 8009b42:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8009b46:	eb04 2e9c 	add.w	lr, r4, ip, lsr #10
 8009b4a:	f3cc 0409 	ubfx	r4, ip, #0, #10
 8009b4e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009b52:	ea46 460a 	orr.w	r6, r6, sl, lsl #16
 8009b56:	eb00 209e 	add.w	r0, r0, lr, lsr #10
 8009b5a:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8009b5e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009b62:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8009b66:	eb03 2c90 	add.w	ip, r3, r0, lsr #10
 8009b6a:	f851 202a 	ldr.w	r2, [r1, sl, lsl #2]
 8009b6e:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8009b72:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 8009b76:	eb02 229c 	add.w	r2, r2, ip, lsr #10
 8009b7a:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8009b7e:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
 8009b82:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8009b86:	f851 302a 	ldr.w	r3, [r1, sl, lsl #2]
 8009b8a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8009b8e:	eb05 2592 	add.w	r5, r5, r2, lsr #10
 8009b92:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8009b96:	eb03 2e95 	add.w	lr, r3, r5, lsr #10
 8009b9a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8009b9e:	ea42 430c 	orr.w	r3, r2, ip, lsl #16
 8009ba2:	ea4f 219e 	mov.w	r1, lr, lsr #10
 8009ba6:	f3ce 0209 	ubfx	r2, lr, #0, #10
 8009baa:	9104      	str	r1, [sp, #16]
 8009bac:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8009bb0:	9902      	ldr	r1, [sp, #8]
 8009bb2:	4a56      	ldr	r2, [pc, #344]	; (8009d0c <D128_GENERIC+0x360>)
 8009bb4:	fb2b 1202 	smlad	r2, fp, r2, r1
 8009bb8:	4955      	ldr	r1, [pc, #340]	; (8009d10 <D128_GENERIC+0x364>)
 8009bba:	fb28 2201 	smlad	r2, r8, r1, r2
 8009bbe:	4955      	ldr	r1, [pc, #340]	; (8009d14 <D128_GENERIC+0x368>)
 8009bc0:	fb27 2201 	smlad	r2, r7, r1, r2
 8009bc4:	4954      	ldr	r1, [pc, #336]	; (8009d18 <D128_GENERIC+0x36c>)
 8009bc6:	fb26 2201 	smlad	r2, r6, r1, r2
 8009bca:	4954      	ldr	r1, [pc, #336]	; (8009d1c <D128_GENERIC+0x370>)
 8009bcc:	fb24 2201 	smlad	r2, r4, r1, r2
 8009bd0:	4953      	ldr	r1, [pc, #332]	; (8009d20 <D128_GENERIC+0x374>)
 8009bd2:	fb20 2201 	smlad	r2, r0, r1, r2
 8009bd6:	4953      	ldr	r1, [pc, #332]	; (8009d24 <D128_GENERIC+0x378>)
 8009bd8:	fb23 2201 	smlad	r2, r3, r1, r2
 8009bdc:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
 8009be0:	fb25 2a0c 	smlad	sl, r5, ip, r2
 8009be4:	4950      	ldr	r1, [pc, #320]	; (8009d28 <D128_GENERIC+0x37c>)
 8009be6:	9a03      	ldr	r2, [sp, #12]
 8009be8:	fb2b 2c01 	smlad	ip, fp, r1, r2
 8009bec:	4a4f      	ldr	r2, [pc, #316]	; (8009d2c <D128_GENERIC+0x380>)
 8009bee:	fb28 ce02 	smlad	lr, r8, r2, ip
 8009bf2:	f8df c150 	ldr.w	ip, [pc, #336]	; 8009d44 <D128_GENERIC+0x398>
 8009bf6:	fb27 ec0c 	smlad	ip, r7, ip, lr
 8009bfa:	f8df e14c 	ldr.w	lr, [pc, #332]	; 8009d48 <D128_GENERIC+0x39c>
 8009bfe:	fb26 cc0e 	smlad	ip, r6, lr, ip
 8009c02:	f8df e148 	ldr.w	lr, [pc, #328]	; 8009d4c <D128_GENERIC+0x3a0>
 8009c06:	fb24 ce0e 	smlad	lr, r4, lr, ip
 8009c0a:	f8df c144 	ldr.w	ip, [pc, #324]	; 8009d50 <D128_GENERIC+0x3a4>
 8009c0e:	fb20 ee0c 	smlad	lr, r0, ip, lr
 8009c12:	f8df c140 	ldr.w	ip, [pc, #320]	; 8009d54 <D128_GENERIC+0x3a8>
 8009c16:	fb23 ec0c 	smlad	ip, r3, ip, lr
 8009c1a:	f8df e13c 	ldr.w	lr, [pc, #316]	; 8009d58 <D128_GENERIC+0x3ac>
 8009c1e:	fb25 c20e 	smlad	r2, r5, lr, ip
 8009c22:	f04f 0c01 	mov.w	ip, #1
 8009c26:	9202      	str	r2, [sp, #8]
 8009c28:	fb2b fb0c 	smuad	fp, fp, ip
 8009c2c:	f8df c12c 	ldr.w	ip, [pc, #300]	; 8009d5c <D128_GENERIC+0x3b0>
 8009c30:	fb28 bb0c 	smlad	fp, r8, ip, fp
 8009c34:	f8df c128 	ldr.w	ip, [pc, #296]	; 8009d60 <D128_GENERIC+0x3b4>
 8009c38:	fb27 bb0c 	smlad	fp, r7, ip, fp
 8009c3c:	4f3c      	ldr	r7, [pc, #240]	; (8009d30 <D128_GENERIC+0x384>)
 8009c3e:	fb26 bb07 	smlad	fp, r6, r7, fp
 8009c42:	4f3c      	ldr	r7, [pc, #240]	; (8009d34 <D128_GENERIC+0x388>)
 8009c44:	fb24 bb07 	smlad	fp, r4, r7, fp
 8009c48:	4f3b      	ldr	r7, [pc, #236]	; (8009d38 <D128_GENERIC+0x38c>)
 8009c4a:	fb20 bb07 	smlad	fp, r0, r7, fp
 8009c4e:	4f3b      	ldr	r7, [pc, #236]	; (8009d3c <D128_GENERIC+0x390>)
 8009c50:	fb23 bb07 	smlad	fp, r3, r7, fp
 8009c54:	4b3a      	ldr	r3, [pc, #232]	; (8009d40 <D128_GENERIC+0x394>)
 8009c56:	fb25 b303 	smlad	r3, r5, r3, fp
 8009c5a:	9303      	str	r3, [sp, #12]
 8009c5c:	f5aa 1480 	sub.w	r4, sl, #1048576	; 0x100000
 8009c60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c62:	b183      	cbz	r3, 8009c86 <D128_GENERIC+0x2da>
 8009c64:	9a06      	ldr	r2, [sp, #24]
 8009c66:	9907      	ldr	r1, [sp, #28]
 8009c68:	4422      	add	r2, r4
 8009c6a:	9407      	str	r4, [sp, #28]
 8009c6c:	1a52      	subs	r2, r2, r1
 8009c6e:	fba2 0103 	umull	r0, r1, r2, r3
 8009c72:	17d5      	asrs	r5, r2, #31
 8009c74:	f110 4200 	adds.w	r2, r0, #2147483648	; 0x80000000
 8009c78:	fb03 1105 	mla	r1, r3, r5, r1
 8009c7c:	f141 0300 	adc.w	r3, r1, #0
 8009c80:	005b      	lsls	r3, r3, #1
 8009c82:	461c      	mov	r4, r3
 8009c84:	9306      	str	r3, [sp, #24]
 8009c86:	9d01      	ldr	r5, [sp, #4]
 8009c88:	01e4      	lsls	r4, r4, #7
 8009c8a:	9e05      	ldr	r6, [sp, #20]
 8009c8c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009c90:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 8009c92:	2300      	movs	r3, #0
 8009c94:	9908      	ldr	r1, [sp, #32]
 8009c96:	fb06 f000 	mul.w	r0, r6, r0
 8009c9a:	3601      	adds	r6, #1
 8009c9c:	fbc1 2304 	smlal	r2, r3, r1, r4
 8009ca0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ca2:	109b      	asrs	r3, r3, #2
 8009ca4:	9605      	str	r6, [sp, #20]
 8009ca6:	f303 030f 	ssat	r3, #16, r3
 8009caa:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
 8009cae:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 8009cb0:	42b3      	cmp	r3, r6
 8009cb2:	dd13      	ble.n	8009cdc <D128_GENERIC+0x330>
 8009cb4:	9b01      	ldr	r3, [sp, #4]
 8009cb6:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8009cb8:	2a01      	cmp	r2, #1
 8009cba:	f47f ae95 	bne.w	80099e8 <D128_GENERIC+0x3c>
 8009cbe:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8009cc0:	f109 0610 	add.w	r6, r9, #16
 8009cc4:	0681      	lsls	r1, r0, #26
 8009cc6:	e9d9 4200 	ldrd	r4, r2, [r9]
 8009cca:	e9d9 3502 	ldrd	r3, r5, [r9, #8]
 8009cce:	d518      	bpl.n	8009d02 <D128_GENERIC+0x356>
 8009cd0:	ba64      	rev16	r4, r4
 8009cd2:	ba52      	rev16	r2, r2
 8009cd4:	ba5b      	rev16	r3, r3
 8009cd6:	ba6d      	rev16	r5, r5
 8009cd8:	46b1      	mov	r9, r6
 8009cda:	e6da      	b.n	8009a92 <D128_GENERIC+0xe6>
 8009cdc:	f8dd a010 	ldr.w	sl, [sp, #16]
 8009ce0:	9b01      	ldr	r3, [sp, #4]
 8009ce2:	2000      	movs	r0, #0
 8009ce4:	9903      	ldr	r1, [sp, #12]
 8009ce6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009ce8:	6099      	str	r1, [r3, #8]
 8009cea:	9902      	ldr	r1, [sp, #8]
 8009cec:	f8c3 a01c 	str.w	sl, [r3, #28]
 8009cf0:	60d9      	str	r1, [r3, #12]
 8009cf2:	9906      	ldr	r1, [sp, #24]
 8009cf4:	619a      	str	r2, [r3, #24]
 8009cf6:	6119      	str	r1, [r3, #16]
 8009cf8:	9907      	ldr	r1, [sp, #28]
 8009cfa:	6159      	str	r1, [r3, #20]
 8009cfc:	b00d      	add	sp, #52	; 0x34
 8009cfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d02:	46b1      	mov	r9, r6
 8009d04:	e6c5      	b.n	8009a92 <D128_GENERIC+0xe6>
 8009d06:	bf00      	nop
 8009d08:	24000000 	.word	0x24000000
 8009d0c:	00780069 	.word	0x00780069
 8009d10:	005b004e 	.word	0x005b004e
 8009d14:	00420037 	.word	0x00420037
 8009d18:	002d0024 	.word	0x002d0024
 8009d1c:	001c0015 	.word	0x001c0015
 8009d20:	000f000a 	.word	0x000f000a
 8009d24:	00060003 	.word	0x00060003
 8009d28:	00880096 	.word	0x00880096
 8009d2c:	00a200ac 	.word	0x00a200ac
 8009d30:	0015001c 	.word	0x0015001c
 8009d34:	0024002d 	.word	0x0024002d
 8009d38:	00370042 	.word	0x00370042
 8009d3c:	004e005b 	.word	0x004e005b
 8009d40:	00690078 	.word	0x00690078
 8009d44:	00b400ba 	.word	0x00b400ba
 8009d48:	00be00c0 	.word	0x00be00c0
 8009d4c:	00c000be 	.word	0x00c000be
 8009d50:	00ba00b4 	.word	0x00ba00b4
 8009d54:	00ac00a2 	.word	0x00ac00a2
 8009d58:	00960088 	.word	0x00960088
 8009d5c:	00030006 	.word	0x00030006
 8009d60:	000a000f 	.word	0x000a000f

08009d64 <D16_1CH_HTONS_VOL_HP>:
 8009d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d68:	6993      	ldr	r3, [r2, #24]
 8009d6a:	b087      	sub	sp, #28
 8009d6c:	4682      	mov	sl, r0
 8009d6e:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 8009d70:	9304      	str	r3, [sp, #16]
 8009d72:	f8d2 b030 	ldr.w	fp, [r2, #48]	; 0x30
 8009d76:	69d3      	ldr	r3, [r2, #28]
 8009d78:	f8d2 e020 	ldr.w	lr, [r2, #32]
 8009d7c:	e9d2 5402 	ldrd	r5, r4, [r2, #8]
 8009d80:	e9d2 6c04 	ldrd	r6, ip, [r2, #16]
 8009d84:	9403      	str	r4, [sp, #12]
 8009d86:	2800      	cmp	r0, #0
 8009d88:	d054      	beq.n	8009e34 <D16_1CH_HTONS_VOL_HP+0xd0>
 8009d8a:	f1a1 0902 	sub.w	r9, r1, #2
 8009d8e:	eb0a 0140 	add.w	r1, sl, r0, lsl #1
 8009d92:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8009e40 <D16_1CH_HTONS_VOL_HP+0xdc>
 8009d96:	4650      	mov	r0, sl
 8009d98:	9101      	str	r1, [sp, #4]
 8009d9a:	4619      	mov	r1, r3
 8009d9c:	f8cd b008 	str.w	fp, [sp, #8]
 8009da0:	9205      	str	r2, [sp, #20]
 8009da2:	f850 3b02 	ldr.w	r3, [r0], #2
 8009da6:	ba5b      	rev16	r3, r3
 8009da8:	b2dc      	uxtb	r4, r3
 8009daa:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8009dae:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009db2:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 8009db6:	4419      	add	r1, r3
 8009db8:	eb04 2491 	add.w	r4, r4, r1, lsr #10
 8009dbc:	f3c1 0309 	ubfx	r3, r1, #0, #10
 8009dc0:	f3c4 0209 	ubfx	r2, r4, #0, #10
 8009dc4:	0aa1      	lsrs	r1, r4, #10
 8009dc6:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8009dca:	4a1b      	ldr	r2, [pc, #108]	; (8009e38 <D16_1CH_HTONS_VOL_HP+0xd4>)
 8009dcc:	fb23 5402 	smlad	r4, r3, r2, r5
 8009dd0:	4a1a      	ldr	r2, [pc, #104]	; (8009e3c <D16_1CH_HTONS_VOL_HP+0xd8>)
 8009dd2:	fb23 f502 	smuad	r5, r3, r2
 8009dd6:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 8009dda:	f04f 4a00 	mov.w	sl, #2147483648	; 0x80000000
 8009dde:	f04f 0b00 	mov.w	fp, #0
 8009de2:	19a2      	adds	r2, r4, r6
 8009de4:	eba2 020c 	sub.w	r2, r2, ip
 8009de8:	46a4      	mov	ip, r4
 8009dea:	17d7      	asrs	r7, r2, #31
 8009dec:	fba2 230e 	umull	r2, r3, r2, lr
 8009df0:	f112 4600 	adds.w	r6, r2, #2147483648	; 0x80000000
 8009df4:	fb0e 3307 	mla	r3, lr, r7, r3
 8009df8:	f143 0700 	adc.w	r7, r3, #0
 8009dfc:	9b02      	ldr	r3, [sp, #8]
 8009dfe:	047a      	lsls	r2, r7, #17
 8009e00:	007e      	lsls	r6, r7, #1
 8009e02:	fbc3 ab02 	smlal	sl, fp, r3, r2
 8009e06:	ea4f 03ab 	mov.w	r3, fp, asr #2
 8009e0a:	f303 030f 	ssat	r3, #16, r3
 8009e0e:	f829 3f02 	strh.w	r3, [r9, #2]!
 8009e12:	9b01      	ldr	r3, [sp, #4]
 8009e14:	4298      	cmp	r0, r3
 8009e16:	d1c4      	bne.n	8009da2 <D16_1CH_HTONS_VOL_HP+0x3e>
 8009e18:	460b      	mov	r3, r1
 8009e1a:	9a05      	ldr	r2, [sp, #20]
 8009e1c:	2000      	movs	r0, #0
 8009e1e:	9903      	ldr	r1, [sp, #12]
 8009e20:	61d3      	str	r3, [r2, #28]
 8009e22:	9b04      	ldr	r3, [sp, #16]
 8009e24:	6095      	str	r5, [r2, #8]
 8009e26:	60d1      	str	r1, [r2, #12]
 8009e28:	6193      	str	r3, [r2, #24]
 8009e2a:	e9c2 6404 	strd	r6, r4, [r2, #16]
 8009e2e:	b007      	add	sp, #28
 8009e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e34:	4664      	mov	r4, ip
 8009e36:	e7f1      	b.n	8009e1c <D16_1CH_HTONS_VOL_HP+0xb8>
 8009e38:	00030001 	.word	0x00030001
 8009e3c:	00010003 	.word	0x00010003
 8009e40:	24000000 	.word	0x24000000

08009e44 <D24_1CH_HTONS_VOL_HP>:
 8009e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e48:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8009e4a:	b089      	sub	sp, #36	; 0x24
 8009e4c:	6993      	ldr	r3, [r2, #24]
 8009e4e:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8009e50:	9604      	str	r6, [sp, #16]
 8009e52:	6a16      	ldr	r6, [r2, #32]
 8009e54:	9306      	str	r3, [sp, #24]
 8009e56:	9505      	str	r5, [sp, #20]
 8009e58:	69d3      	ldr	r3, [r2, #28]
 8009e5a:	9600      	str	r6, [sp, #0]
 8009e5c:	e9d2 4a04 	ldrd	r4, sl, [r2, #16]
 8009e60:	e9d2 ce02 	ldrd	ip, lr, [r2, #8]
 8009e64:	2d00      	cmp	r5, #0
 8009e66:	f000 8083 	beq.w	8009f70 <D24_1CH_HTONS_VOL_HP+0x12c>
 8009e6a:	9207      	str	r2, [sp, #28]
 8009e6c:	2600      	movs	r6, #0
 8009e6e:	4622      	mov	r2, r4
 8009e70:	f1a1 0b02 	sub.w	fp, r1, #2
 8009e74:	4f3f      	ldr	r7, [pc, #252]	; (8009f74 <D24_1CH_HTONS_VOL_HP+0x130>)
 8009e76:	461d      	mov	r5, r3
 8009e78:	f8cd a00c 	str.w	sl, [sp, #12]
 8009e7c:	9c00      	ldr	r4, [sp, #0]
 8009e7e:	e056      	b.n	8009f2e <D24_1CH_HTONS_VOL_HP+0xea>
 8009e80:	7841      	ldrb	r1, [r0, #1]
 8009e82:	eb08 4809 	add.w	r8, r8, r9, lsl #16
 8009e86:	3002      	adds	r0, #2
 8009e88:	4488      	add	r8, r1
 8009e8a:	fa5f f388 	uxtb.w	r3, r8
 8009e8e:	f3c8 2907 	ubfx	r9, r8, #8, #8
 8009e92:	ea4f 4818 	mov.w	r8, r8, lsr #16
 8009e96:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 8009e9a:	f857 3029 	ldr.w	r3, [r7, r9, lsl #2]
 8009e9e:	eb01 2195 	add.w	r1, r1, r5, lsr #10
 8009ea2:	f857 5028 	ldr.w	r5, [r7, r8, lsl #2]
 8009ea6:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 8009eaa:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8009eae:	f3c8 0309 	ubfx	r3, r8, #0, #10
 8009eb2:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 8009eb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8009eba:	492f      	ldr	r1, [pc, #188]	; (8009f78 <D24_1CH_HTONS_VOL_HP+0x134>)
 8009ebc:	fb23 e901 	smlad	r9, r3, r1, lr
 8009ec0:	492e      	ldr	r1, [pc, #184]	; (8009f7c <D24_1CH_HTONS_VOL_HP+0x138>)
 8009ec2:	fb23 ce01 	smlad	lr, r3, r1, ip
 8009ec6:	f3c5 0c09 	ubfx	ip, r5, #0, #10
 8009eca:	2101      	movs	r1, #1
 8009ecc:	eb0c 084c 	add.w	r8, ip, ip, lsl #1
 8009ed0:	eb0e 0e48 	add.w	lr, lr, r8, lsl #1
 8009ed4:	fb23 f301 	smuad	r3, r3, r1
 8009ed8:	f5a9 51d8 	sub.w	r1, r9, #6912	; 0x1b00
 8009edc:	eb08 0c03 	add.w	ip, r8, r3
 8009ee0:	9b03      	ldr	r3, [sp, #12]
 8009ee2:	f04f 0a00 	mov.w	sl, #0
 8009ee6:	440a      	add	r2, r1
 8009ee8:	3601      	adds	r6, #1
 8009eea:	9103      	str	r1, [sp, #12]
 8009eec:	1ad2      	subs	r2, r2, r3
 8009eee:	ea4f 79e2 	mov.w	r9, r2, asr #31
 8009ef2:	fba2 2304 	umull	r2, r3, r2, r4
 8009ef6:	e9cd 2300 	strd	r2, r3, [sp]
 8009efa:	fb04 3309 	mla	r3, r4, r9, r3
 8009efe:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 8009f02:	9301      	str	r3, [sp, #4]
 8009f04:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009f08:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8009f0c:	f143 0300 	adc.w	r3, r3, #0
 8009f10:	ea4f 38c3 	mov.w	r8, r3, lsl #15
 8009f14:	005a      	lsls	r2, r3, #1
 8009f16:	9b04      	ldr	r3, [sp, #16]
 8009f18:	fbc3 9a08 	smlal	r9, sl, r3, r8
 8009f1c:	ea4f 03aa 	mov.w	r3, sl, asr #2
 8009f20:	f303 030f 	ssat	r3, #16, r3
 8009f24:	f82b 3f02 	strh.w	r3, [fp, #2]!
 8009f28:	9b05      	ldr	r3, [sp, #20]
 8009f2a:	429e      	cmp	r6, r3
 8009f2c:	d010      	beq.n	8009f50 <D24_1CH_HTONS_VOL_HP+0x10c>
 8009f2e:	f890 9003 	ldrb.w	r9, [r0, #3]
 8009f32:	f016 0f01 	tst.w	r6, #1
 8009f36:	7801      	ldrb	r1, [r0, #0]
 8009f38:	ea4f 2309 	mov.w	r3, r9, lsl #8
 8009f3c:	ea4f 2801 	mov.w	r8, r1, lsl #8
 8009f40:	d09e      	beq.n	8009e80 <D24_1CH_HTONS_VOL_HP+0x3c>
 8009f42:	f890 8002 	ldrb.w	r8, [r0, #2]
 8009f46:	3004      	adds	r0, #4
 8009f48:	eb03 4808 	add.w	r8, r3, r8, lsl #16
 8009f4c:	4488      	add	r8, r1
 8009f4e:	e79c      	b.n	8009e8a <D24_1CH_HTONS_VOL_HP+0x46>
 8009f50:	4614      	mov	r4, r2
 8009f52:	462b      	mov	r3, r5
 8009f54:	9a07      	ldr	r2, [sp, #28]
 8009f56:	2000      	movs	r0, #0
 8009f58:	61d3      	str	r3, [r2, #28]
 8009f5a:	9b06      	ldr	r3, [sp, #24]
 8009f5c:	f8c2 c008 	str.w	ip, [r2, #8]
 8009f60:	f8c2 e00c 	str.w	lr, [r2, #12]
 8009f64:	6193      	str	r3, [r2, #24]
 8009f66:	e9c2 4104 	strd	r4, r1, [r2, #16]
 8009f6a:	b009      	add	sp, #36	; 0x24
 8009f6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f70:	4651      	mov	r1, sl
 8009f72:	e7f0      	b.n	8009f56 <D24_1CH_HTONS_VOL_HP+0x112>
 8009f74:	24000000 	.word	0x24000000
 8009f78:	00030001 	.word	0x00030001
 8009f7c:	00060007 	.word	0x00060007

08009f80 <D32_1CH_HTONS_VOL_HP>:
 8009f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f84:	6993      	ldr	r3, [r2, #24]
 8009f86:	b087      	sub	sp, #28
 8009f88:	4683      	mov	fp, r0
 8009f8a:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 8009f8c:	9304      	str	r3, [sp, #16]
 8009f8e:	69d5      	ldr	r5, [r2, #28]
 8009f90:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8009f92:	f8d2 a020 	ldr.w	sl, [r2, #32]
 8009f96:	e9d2 8e04 	ldrd	r8, lr, [r2, #16]
 8009f9a:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 8009f9e:	2800      	cmp	r0, #0
 8009fa0:	d077      	beq.n	800a092 <D32_1CH_HTONS_VOL_HP+0x112>
 8009fa2:	460f      	mov	r7, r1
 8009fa4:	46f1      	mov	r9, lr
 8009fa6:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8009faa:	f8cd 8000 	str.w	r8, [sp]
 8009fae:	4e3a      	ldr	r6, [pc, #232]	; (800a098 <D32_1CH_HTONS_VOL_HP+0x118>)
 8009fb0:	469e      	mov	lr, r3
 8009fb2:	46a0      	mov	r8, r4
 8009fb4:	9103      	str	r1, [sp, #12]
 8009fb6:	9205      	str	r2, [sp, #20]
 8009fb8:	f85b 4b04 	ldr.w	r4, [fp], #4
 8009fbc:	ba64      	rev16	r4, r4
 8009fbe:	b2e0      	uxtb	r0, r4
 8009fc0:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8009fc4:	f3c4 4107 	ubfx	r1, r4, #16, #8
 8009fc8:	0e24      	lsrs	r4, r4, #24
 8009fca:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8009fce:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8009fd2:	eb00 2095 	add.w	r0, r0, r5, lsr #10
 8009fd6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8009fda:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
 8009fde:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 8009fe2:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8009fe6:	eb01 2193 	add.w	r1, r1, r3, lsr #10
 8009fea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009fee:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 8009ff2:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8009ff6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009ffa:	f3c5 0009 	ubfx	r0, r5, #0, #10
 8009ffe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800a002:	4826      	ldr	r0, [pc, #152]	; (800a09c <D32_1CH_HTONS_VOL_HP+0x11c>)
 800a004:	fb23 c400 	smlad	r4, r3, r0, ip
 800a008:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a00c:	fb21 4402 	smlad	r4, r1, r2, r4
 800a010:	4823      	ldr	r0, [pc, #140]	; (800a0a0 <D32_1CH_HTONS_VOL_HP+0x120>)
 800a012:	fb23 ec00 	smlad	ip, r3, r0, lr
 800a016:	4823      	ldr	r0, [pc, #140]	; (800a0a4 <D32_1CH_HTONS_VOL_HP+0x124>)
 800a018:	fb21 cc00 	smlad	ip, r1, r0, ip
 800a01c:	2201      	movs	r2, #1
 800a01e:	fb23 f302 	smuad	r3, r3, r2
 800a022:	4821      	ldr	r0, [pc, #132]	; (800a0a8 <D32_1CH_HTONS_VOL_HP+0x128>)
 800a024:	fb21 3e00 	smlad	lr, r1, r0, r3
 800a028:	9b00      	ldr	r3, [sp, #0]
 800a02a:	f5a4 4480 	sub.w	r4, r4, #16384	; 0x4000
 800a02e:	4423      	add	r3, r4
 800a030:	eba3 0209 	sub.w	r2, r3, r9
 800a034:	46a1      	mov	r9, r4
 800a036:	17d1      	asrs	r1, r2, #31
 800a038:	fba2 230a 	umull	r2, r3, r2, sl
 800a03c:	e9cd 2300 	strd	r2, r3, [sp]
 800a040:	fb0a 3301 	mla	r3, sl, r1, r3
 800a044:	9301      	str	r3, [sp, #4]
 800a046:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a04a:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800a04e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a052:	f143 0300 	adc.w	r3, r3, #0
 800a056:	0399      	lsls	r1, r3, #14
 800a058:	005b      	lsls	r3, r3, #1
 800a05a:	9300      	str	r3, [sp, #0]
 800a05c:	2300      	movs	r3, #0
 800a05e:	fbc8 2301 	smlal	r2, r3, r8, r1
 800a062:	109b      	asrs	r3, r3, #2
 800a064:	f303 030f 	ssat	r3, #16, r3
 800a068:	f827 3b02 	strh.w	r3, [r7], #2
 800a06c:	9b03      	ldr	r3, [sp, #12]
 800a06e:	429f      	cmp	r7, r3
 800a070:	d1a2      	bne.n	8009fb8 <D32_1CH_HTONS_VOL_HP+0x38>
 800a072:	4673      	mov	r3, lr
 800a074:	f8dd 8000 	ldr.w	r8, [sp]
 800a078:	9a05      	ldr	r2, [sp, #20]
 800a07a:	6093      	str	r3, [r2, #8]
 800a07c:	2000      	movs	r0, #0
 800a07e:	9b04      	ldr	r3, [sp, #16]
 800a080:	f8c2 c00c 	str.w	ip, [r2, #12]
 800a084:	61d5      	str	r5, [r2, #28]
 800a086:	6193      	str	r3, [r2, #24]
 800a088:	e9c2 8404 	strd	r8, r4, [r2, #16]
 800a08c:	b007      	add	sp, #28
 800a08e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a092:	4674      	mov	r4, lr
 800a094:	e7f1      	b.n	800a07a <D32_1CH_HTONS_VOL_HP+0xfa>
 800a096:	bf00      	nop
 800a098:	24000000 	.word	0x24000000
 800a09c:	00060003 	.word	0x00060003
 800a0a0:	000a000c 	.word	0x000a000c
 800a0a4:	000c000a 	.word	0x000c000a
 800a0a8:	00030006 	.word	0x00030006

0800a0ac <D48_1CH_HTONS_VOL_HP>:
 800a0ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0b0:	6b17      	ldr	r7, [r2, #48]	; 0x30
 800a0b2:	b087      	sub	sp, #28
 800a0b4:	6993      	ldr	r3, [r2, #24]
 800a0b6:	9701      	str	r7, [sp, #4]
 800a0b8:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800a0ba:	6a17      	ldr	r7, [r2, #32]
 800a0bc:	9304      	str	r3, [sp, #16]
 800a0be:	69d6      	ldr	r6, [r2, #28]
 800a0c0:	9702      	str	r7, [sp, #8]
 800a0c2:	e9d2 4e04 	ldrd	r4, lr, [r2, #16]
 800a0c6:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 800a0ca:	2d00      	cmp	r5, #0
 800a0cc:	f000 8093 	beq.w	800a1f6 <D48_1CH_HTONS_VOL_HP+0x14a>
 800a0d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a0d4:	f1a1 0b02 	sub.w	fp, r1, #2
 800a0d8:	46f2      	mov	sl, lr
 800a0da:	4f48      	ldr	r7, [pc, #288]	; (800a1fc <D48_1CH_HTONS_VOL_HP+0x150>)
 800a0dc:	eb00 0145 	add.w	r1, r0, r5, lsl #1
 800a0e0:	469e      	mov	lr, r3
 800a0e2:	9205      	str	r2, [sp, #20]
 800a0e4:	9103      	str	r1, [sp, #12]
 800a0e6:	e9d0 3200 	ldrd	r3, r2, [r0]
 800a0ea:	3006      	adds	r0, #6
 800a0ec:	ba5b      	rev16	r3, r3
 800a0ee:	fa92 f992 	rev16.w	r9, r2
 800a0f2:	b2dd      	uxtb	r5, r3
 800a0f4:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800a0f8:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800a0fc:	0e1b      	lsrs	r3, r3, #24
 800a0fe:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 800a102:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 800a106:	eb05 2696 	add.w	r6, r5, r6, lsr #10
 800a10a:	f857 5022 	ldr.w	r5, [r7, r2, lsl #2]
 800a10e:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800a112:	fa5f f289 	uxtb.w	r2, r9
 800a116:	eb01 2196 	add.w	r1, r1, r6, lsr #10
 800a11a:	f3c9 2907 	ubfx	r9, r9, #8, #8
 800a11e:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800a122:	f3c6 0809 	ubfx	r8, r6, #0, #10
 800a126:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800a12a:	f857 6029 	ldr.w	r6, [r7, r9, lsl #2]
 800a12e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800a132:	eb03 2395 	add.w	r3, r3, r5, lsr #10
 800a136:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800a13a:	ea41 4808 	orr.w	r8, r1, r8, lsl #16
 800a13e:	eb02 2293 	add.w	r2, r2, r3, lsr #10
 800a142:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a146:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 800a14a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800a14e:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 800a152:	f3c6 0309 	ubfx	r3, r6, #0, #10
 800a156:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 800a15a:	4b29      	ldr	r3, [pc, #164]	; (800a200 <D48_1CH_HTONS_VOL_HP+0x154>)
 800a15c:	fb28 c103 	smlad	r1, r8, r3, ip
 800a160:	4b28      	ldr	r3, [pc, #160]	; (800a204 <D48_1CH_HTONS_VOL_HP+0x158>)
 800a162:	fb25 1103 	smlad	r1, r5, r3, r1
 800a166:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a16a:	fb22 1903 	smlad	r9, r2, r3, r1
 800a16e:	4b26      	ldr	r3, [pc, #152]	; (800a208 <D48_1CH_HTONS_VOL_HP+0x15c>)
 800a170:	fb28 ec03 	smlad	ip, r8, r3, lr
 800a174:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 800a178:	fb25 cc03 	smlad	ip, r5, r3, ip
 800a17c:	4b23      	ldr	r3, [pc, #140]	; (800a20c <D48_1CH_HTONS_VOL_HP+0x160>)
 800a17e:	fb22 cc03 	smlad	ip, r2, r3, ip
 800a182:	2101      	movs	r1, #1
 800a184:	fb28 f801 	smuad	r8, r8, r1
 800a188:	4b21      	ldr	r3, [pc, #132]	; (800a210 <D48_1CH_HTONS_VOL_HP+0x164>)
 800a18a:	fb25 8503 	smlad	r5, r5, r3, r8
 800a18e:	4b21      	ldr	r3, [pc, #132]	; (800a214 <D48_1CH_HTONS_VOL_HP+0x168>)
 800a190:	fb22 5e03 	smlad	lr, r2, r3, r5
 800a194:	f5a9 4158 	sub.w	r1, r9, #55296	; 0xd800
 800a198:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800a19c:	190a      	adds	r2, r1, r4
 800a19e:	9c02      	ldr	r4, [sp, #8]
 800a1a0:	eba2 020a 	sub.w	r2, r2, sl
 800a1a4:	468a      	mov	sl, r1
 800a1a6:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800a1aa:	fba2 2304 	umull	r2, r3, r2, r4
 800a1ae:	fb04 3309 	mla	r3, r4, r9, r3
 800a1b2:	f112 4400 	adds.w	r4, r2, #2147483648	; 0x80000000
 800a1b6:	f04f 0900 	mov.w	r9, #0
 800a1ba:	f143 0500 	adc.w	r5, r3, #0
 800a1be:	9b01      	ldr	r3, [sp, #4]
 800a1c0:	032a      	lsls	r2, r5, #12
 800a1c2:	006c      	lsls	r4, r5, #1
 800a1c4:	fbc3 8902 	smlal	r8, r9, r3, r2
 800a1c8:	ea4f 03a9 	mov.w	r3, r9, asr #2
 800a1cc:	f303 030f 	ssat	r3, #16, r3
 800a1d0:	f82b 3f02 	strh.w	r3, [fp, #2]!
 800a1d4:	9b03      	ldr	r3, [sp, #12]
 800a1d6:	4283      	cmp	r3, r0
 800a1d8:	d185      	bne.n	800a0e6 <D48_1CH_HTONS_VOL_HP+0x3a>
 800a1da:	4673      	mov	r3, lr
 800a1dc:	9a05      	ldr	r2, [sp, #20]
 800a1de:	6093      	str	r3, [r2, #8]
 800a1e0:	2000      	movs	r0, #0
 800a1e2:	9b04      	ldr	r3, [sp, #16]
 800a1e4:	f8c2 c00c 	str.w	ip, [r2, #12]
 800a1e8:	61d6      	str	r6, [r2, #28]
 800a1ea:	6193      	str	r3, [r2, #24]
 800a1ec:	e9c2 4104 	strd	r4, r1, [r2, #16]
 800a1f0:	b007      	add	sp, #28
 800a1f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1f6:	4671      	mov	r1, lr
 800a1f8:	e7f1      	b.n	800a1de <D48_1CH_HTONS_VOL_HP+0x132>
 800a1fa:	bf00      	nop
 800a1fc:	24000000 	.word	0x24000000
 800a200:	000f000a 	.word	0x000f000a
 800a204:	00060003 	.word	0x00060003
 800a208:	00150019 	.word	0x00150019
 800a20c:	00190015 	.word	0x00190015
 800a210:	00030006 	.word	0x00030006
 800a214:	000a000f 	.word	0x000a000f

0800a218 <D64_1CH_HTONS_VOL_HP>:
 800a218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a21c:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800a21e:	b089      	sub	sp, #36	; 0x24
 800a220:	6993      	ldr	r3, [r2, #24]
 800a222:	4686      	mov	lr, r0
 800a224:	9503      	str	r5, [sp, #12]
 800a226:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 800a228:	6a15      	ldr	r5, [r2, #32]
 800a22a:	9306      	str	r3, [sp, #24]
 800a22c:	69d6      	ldr	r6, [r2, #28]
 800a22e:	9504      	str	r5, [sp, #16]
 800a230:	e9d2 8404 	ldrd	r8, r4, [r2, #16]
 800a234:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 800a238:	2800      	cmp	r0, #0
 800a23a:	f000 80a4 	beq.w	800a386 <D64_1CH_HTONS_VOL_HP+0x16e>
 800a23e:	460f      	mov	r7, r1
 800a240:	46f1      	mov	r9, lr
 800a242:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 800a246:	4d56      	ldr	r5, [pc, #344]	; (800a3a0 <D64_1CH_HTONS_VOL_HP+0x188>)
 800a248:	46a2      	mov	sl, r4
 800a24a:	469e      	mov	lr, r3
 800a24c:	9105      	str	r1, [sp, #20]
 800a24e:	9207      	str	r2, [sp, #28]
 800a250:	f859 1b08 	ldr.w	r1, [r9], #8
 800a254:	f859 3c04 	ldr.w	r3, [r9, #-4]
 800a258:	ba49      	rev16	r1, r1
 800a25a:	fa93 fb93 	rev16.w	fp, r3
 800a25e:	b2cb      	uxtb	r3, r1
 800a260:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800a264:	f3c1 4007 	ubfx	r0, r1, #16, #8
 800a268:	0e09      	lsrs	r1, r1, #24
 800a26a:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
 800a26e:	fa5f f38b 	uxtb.w	r3, fp
 800a272:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800a276:	4426      	add	r6, r4
 800a278:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 800a27c:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 800a280:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 800a284:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 800a288:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800a28c:	f3cb 2307 	ubfx	r3, fp, #8, #8
 800a290:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 800a294:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800a298:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800a29c:	eb01 2194 	add.w	r1, r1, r4, lsr #10
 800a2a0:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800a2a4:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 800a2a8:	f3cb 4607 	ubfx	r6, fp, #16, #8
 800a2ac:	eb00 2091 	add.w	r0, r0, r1, lsr #10
 800a2b0:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800a2b4:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800a2b8:	ea4f 6b1b 	mov.w	fp, fp, lsr #24
 800a2bc:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 800a2c0:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800a2c4:	f855 b02b 	ldr.w	fp, [r5, fp, lsl #2]
 800a2c8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a2cc:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 800a2d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a2d4:	eb0b 2b96 	add.w	fp, fp, r6, lsr #10
 800a2d8:	f3c6 0409 	ubfx	r4, r6, #0, #10
 800a2dc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a2e0:	f3cb 0009 	ubfx	r0, fp, #0, #10
 800a2e4:	ea4f 269b 	mov.w	r6, fp, lsr #10
 800a2e8:	ea40 4b04 	orr.w	fp, r0, r4, lsl #16
 800a2ec:	482d      	ldr	r0, [pc, #180]	; (800a3a4 <D64_1CH_HTONS_VOL_HP+0x18c>)
 800a2ee:	fb22 cc00 	smlad	ip, r2, r0, ip
 800a2f2:	482d      	ldr	r0, [pc, #180]	; (800a3a8 <D64_1CH_HTONS_VOL_HP+0x190>)
 800a2f4:	fb21 cc00 	smlad	ip, r1, r0, ip
 800a2f8:	482c      	ldr	r0, [pc, #176]	; (800a3ac <D64_1CH_HTONS_VOL_HP+0x194>)
 800a2fa:	fb23 cc00 	smlad	ip, r3, r0, ip
 800a2fe:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 800a302:	fb2b c404 	smlad	r4, fp, r4, ip
 800a306:	482a      	ldr	r0, [pc, #168]	; (800a3b0 <D64_1CH_HTONS_VOL_HP+0x198>)
 800a308:	fb22 ec00 	smlad	ip, r2, r0, lr
 800a30c:	fb2b cc10 	smladx	ip, fp, r0, ip
 800a310:	4828      	ldr	r0, [pc, #160]	; (800a3b4 <D64_1CH_HTONS_VOL_HP+0x19c>)
 800a312:	fb21 cc00 	smlad	ip, r1, r0, ip
 800a316:	fb23 cc10 	smladx	ip, r3, r0, ip
 800a31a:	f04f 0e01 	mov.w	lr, #1
 800a31e:	fb22 f20e 	smuad	r2, r2, lr
 800a322:	4825      	ldr	r0, [pc, #148]	; (800a3b8 <D64_1CH_HTONS_VOL_HP+0x1a0>)
 800a324:	fb21 2100 	smlad	r1, r1, r0, r2
 800a328:	4a24      	ldr	r2, [pc, #144]	; (800a3bc <D64_1CH_HTONS_VOL_HP+0x1a4>)
 800a32a:	fb23 1302 	smlad	r3, r3, r2, r1
 800a32e:	4a24      	ldr	r2, [pc, #144]	; (800a3c0 <D64_1CH_HTONS_VOL_HP+0x1a8>)
 800a330:	fb2b 3e02 	smlad	lr, fp, r2, r3
 800a334:	f5a4 3400 	sub.w	r4, r4, #131072	; 0x20000
 800a338:	eb04 0208 	add.w	r2, r4, r8
 800a33c:	eba2 020a 	sub.w	r2, r2, sl
 800a340:	46a2      	mov	sl, r4
 800a342:	4610      	mov	r0, r2
 800a344:	17d1      	asrs	r1, r2, #31
 800a346:	e9cd 0100 	strd	r0, r1, [sp]
 800a34a:	9904      	ldr	r1, [sp, #16]
 800a34c:	9801      	ldr	r0, [sp, #4]
 800a34e:	fba2 2301 	umull	r2, r3, r2, r1
 800a352:	fb01 3300 	mla	r3, r1, r0, r3
 800a356:	f112 4000 	adds.w	r0, r2, #2147483648	; 0x80000000
 800a35a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800a35e:	f143 0100 	adc.w	r1, r3, #0
 800a362:	9b03      	ldr	r3, [sp, #12]
 800a364:	02ca      	lsls	r2, r1, #11
 800a366:	ea4f 0841 	mov.w	r8, r1, lsl #1
 800a36a:	2100      	movs	r1, #0
 800a36c:	fbc3 0102 	smlal	r0, r1, r3, r2
 800a370:	108b      	asrs	r3, r1, #2
 800a372:	f303 030f 	ssat	r3, #16, r3
 800a376:	f827 3b02 	strh.w	r3, [r7], #2
 800a37a:	9b05      	ldr	r3, [sp, #20]
 800a37c:	429f      	cmp	r7, r3
 800a37e:	f47f af67 	bne.w	800a250 <D64_1CH_HTONS_VOL_HP+0x38>
 800a382:	4673      	mov	r3, lr
 800a384:	9a07      	ldr	r2, [sp, #28]
 800a386:	6093      	str	r3, [r2, #8]
 800a388:	2000      	movs	r0, #0
 800a38a:	9b06      	ldr	r3, [sp, #24]
 800a38c:	f8c2 c00c 	str.w	ip, [r2, #12]
 800a390:	61d6      	str	r6, [r2, #28]
 800a392:	6193      	str	r3, [r2, #24]
 800a394:	e9c2 8404 	strd	r8, r4, [r2, #16]
 800a398:	b009      	add	sp, #36	; 0x24
 800a39a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a39e:	bf00      	nop
 800a3a0:	24000000 	.word	0x24000000
 800a3a4:	001c0015 	.word	0x001c0015
 800a3a8:	000f000a 	.word	0x000f000a
 800a3ac:	00060003 	.word	0x00060003
 800a3b0:	0024002a 	.word	0x0024002a
 800a3b4:	002e0030 	.word	0x002e0030
 800a3b8:	00030006 	.word	0x00030006
 800a3bc:	000a000f 	.word	0x000a000f
 800a3c0:	0015001c 	.word	0x0015001c

0800a3c4 <D80_1CH_HTONS_VOL_HP>:
 800a3c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3c8:	6913      	ldr	r3, [r2, #16]
 800a3ca:	b089      	sub	sp, #36	; 0x24
 800a3cc:	6b16      	ldr	r6, [r2, #48]	; 0x30
 800a3ce:	9301      	str	r3, [sp, #4]
 800a3d0:	9603      	str	r6, [sp, #12]
 800a3d2:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800a3d4:	6a16      	ldr	r6, [r2, #32]
 800a3d6:	e9d2 5305 	ldrd	r5, r3, [r2, #20]
 800a3da:	e9d2 7c02 	ldrd	r7, ip, [r2, #8]
 800a3de:	9306      	str	r3, [sp, #24]
 800a3e0:	9604      	str	r6, [sp, #16]
 800a3e2:	69d3      	ldr	r3, [r2, #28]
 800a3e4:	2c00      	cmp	r4, #0
 800a3e6:	f000 80ce 	beq.w	800a586 <D80_1CH_HTONS_VOL_HP+0x1c2>
 800a3ea:	3902      	subs	r1, #2
 800a3ec:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800a3f0:	4e66      	ldr	r6, [pc, #408]	; (800a58c <D80_1CH_HTONS_VOL_HP+0x1c8>)
 800a3f2:	469e      	mov	lr, r3
 800a3f4:	9102      	str	r1, [sp, #8]
 800a3f6:	46aa      	mov	sl, r5
 800a3f8:	eb00 0144 	add.w	r1, r0, r4, lsl #1
 800a3fc:	9207      	str	r2, [sp, #28]
 800a3fe:	9105      	str	r1, [sp, #20]
 800a400:	6883      	ldr	r3, [r0, #8]
 800a402:	e9d0 4200 	ldrd	r4, r2, [r0]
 800a406:	300a      	adds	r0, #10
 800a408:	ba64      	rev16	r4, r4
 800a40a:	ba52      	rev16	r2, r2
 800a40c:	fa93 fb93 	rev16.w	fp, r3
 800a410:	b2e5      	uxtb	r5, r4
 800a412:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800a416:	f3c4 4107 	ubfx	r1, r4, #16, #8
 800a41a:	0e24      	lsrs	r4, r4, #24
 800a41c:	f856 8025 	ldr.w	r8, [r6, r5, lsl #2]
 800a420:	b2d5      	uxtb	r5, r2
 800a422:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800a426:	44c6      	add	lr, r8
 800a428:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800a42c:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
 800a430:	eb03 239e 	add.w	r3, r3, lr, lsr #10
 800a434:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 800a438:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800a43c:	eb01 2993 	add.w	r9, r1, r3, lsr #10
 800a440:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800a444:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a448:	eb04 2499 	add.w	r4, r4, r9, lsr #10
 800a44c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800a450:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800a454:	f3cb 2e07 	ubfx	lr, fp, #8, #8
 800a458:	eb05 2894 	add.w	r8, r5, r4, lsr #10
 800a45c:	f3c2 4507 	ubfx	r5, r2, #16, #8
 800a460:	0e12      	lsrs	r2, r2, #24
 800a462:	f856 e02e 	ldr.w	lr, [r6, lr, lsl #2]
 800a466:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 800a46a:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 800a46e:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 800a472:	fa5f fb8b 	uxtb.w	fp, fp
 800a476:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800a47a:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800a47e:	f856 b02b 	ldr.w	fp, [r6, fp, lsl #2]
 800a482:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800a486:	eb02 2295 	add.w	r2, r2, r5, lsr #10
 800a48a:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800a48e:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800a492:	ea41 4808 	orr.w	r8, r1, r8, lsl #16
 800a496:	eb0b 2b92 	add.w	fp, fp, r2, lsr #10
 800a49a:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800a49e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800a4a2:	eb0e 2e9b 	add.w	lr, lr, fp, lsr #10
 800a4a6:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800a4aa:	ea44 4409 	orr.w	r4, r4, r9, lsl #16
 800a4ae:	f3ce 0109 	ubfx	r1, lr, #0, #10
 800a4b2:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 800a4b6:	ea4f 2e9e 	mov.w	lr, lr, lsr #10
 800a4ba:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 800a4be:	4934      	ldr	r1, [pc, #208]	; (800a590 <D80_1CH_HTONS_VOL_HP+0x1cc>)
 800a4c0:	fb23 cc01 	smlad	ip, r3, r1, ip
 800a4c4:	4933      	ldr	r1, [pc, #204]	; (800a594 <D80_1CH_HTONS_VOL_HP+0x1d0>)
 800a4c6:	fb24 cc01 	smlad	ip, r4, r1, ip
 800a4ca:	4933      	ldr	r1, [pc, #204]	; (800a598 <D80_1CH_HTONS_VOL_HP+0x1d4>)
 800a4cc:	fb28 cc01 	smlad	ip, r8, r1, ip
 800a4d0:	4932      	ldr	r1, [pc, #200]	; (800a59c <D80_1CH_HTONS_VOL_HP+0x1d8>)
 800a4d2:	fb22 cc01 	smlad	ip, r2, r1, ip
 800a4d6:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800a4da:	fb2b c901 	smlad	r9, fp, r1, ip
 800a4de:	4930      	ldr	r1, [pc, #192]	; (800a5a0 <D80_1CH_HTONS_VOL_HP+0x1dc>)
 800a4e0:	fb23 7701 	smlad	r7, r3, r1, r7
 800a4e4:	492f      	ldr	r1, [pc, #188]	; (800a5a4 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 800a4e6:	fb24 7701 	smlad	r7, r4, r1, r7
 800a4ea:	f04f 1c4b 	mov.w	ip, #4915275	; 0x4b004b
 800a4ee:	fb28 7c0c 	smlad	ip, r8, ip, r7
 800a4f2:	492d      	ldr	r1, [pc, #180]	; (800a5a8 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 800a4f4:	fb22 cc01 	smlad	ip, r2, r1, ip
 800a4f8:	492c      	ldr	r1, [pc, #176]	; (800a5ac <D80_1CH_HTONS_VOL_HP+0x1e8>)
 800a4fa:	fb2b cc01 	smlad	ip, fp, r1, ip
 800a4fe:	2101      	movs	r1, #1
 800a500:	fb23 f301 	smuad	r3, r3, r1
 800a504:	492a      	ldr	r1, [pc, #168]	; (800a5b0 <D80_1CH_HTONS_VOL_HP+0x1ec>)
 800a506:	fb24 3401 	smlad	r4, r4, r1, r3
 800a50a:	492a      	ldr	r1, [pc, #168]	; (800a5b4 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 800a50c:	fb28 4101 	smlad	r1, r8, r1, r4
 800a510:	4f29      	ldr	r7, [pc, #164]	; (800a5b8 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 800a512:	fb22 1207 	smlad	r2, r2, r7, r1
 800a516:	4f29      	ldr	r7, [pc, #164]	; (800a5bc <D80_1CH_HTONS_VOL_HP+0x1f8>)
 800a518:	fb2b 2707 	smlad	r7, fp, r7, r2
 800a51c:	f5a9 317a 	sub.w	r1, r9, #256000	; 0x3e800
 800a520:	9b01      	ldr	r3, [sp, #4]
 800a522:	9c04      	ldr	r4, [sp, #16]
 800a524:	440b      	add	r3, r1
 800a526:	eba3 020a 	sub.w	r2, r3, sl
 800a52a:	468a      	mov	sl, r1
 800a52c:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800a530:	fba2 2304 	umull	r2, r3, r2, r4
 800a534:	fb04 3309 	mla	r3, r4, r9, r3
 800a538:	f112 4400 	adds.w	r4, r2, #2147483648	; 0x80000000
 800a53c:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800a540:	f143 0500 	adc.w	r5, r3, #0
 800a544:	006b      	lsls	r3, r5, #1
 800a546:	02aa      	lsls	r2, r5, #10
 800a548:	2500      	movs	r5, #0
 800a54a:	9301      	str	r3, [sp, #4]
 800a54c:	9b03      	ldr	r3, [sp, #12]
 800a54e:	fbc3 4502 	smlal	r4, r5, r3, r2
 800a552:	9a02      	ldr	r2, [sp, #8]
 800a554:	10ab      	asrs	r3, r5, #2
 800a556:	f303 030f 	ssat	r3, #16, r3
 800a55a:	f822 3f02 	strh.w	r3, [r2, #2]!
 800a55e:	9b05      	ldr	r3, [sp, #20]
 800a560:	9202      	str	r2, [sp, #8]
 800a562:	4298      	cmp	r0, r3
 800a564:	f47f af4c 	bne.w	800a400 <D80_1CH_HTONS_VOL_HP+0x3c>
 800a568:	4673      	mov	r3, lr
 800a56a:	9a07      	ldr	r2, [sp, #28]
 800a56c:	61d3      	str	r3, [r2, #28]
 800a56e:	2000      	movs	r0, #0
 800a570:	9b01      	ldr	r3, [sp, #4]
 800a572:	6097      	str	r7, [r2, #8]
 800a574:	f8c2 c00c 	str.w	ip, [r2, #12]
 800a578:	e9c2 3104 	strd	r3, r1, [r2, #16]
 800a57c:	9b06      	ldr	r3, [sp, #24]
 800a57e:	6193      	str	r3, [r2, #24]
 800a580:	b009      	add	sp, #36	; 0x24
 800a582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a586:	4629      	mov	r1, r5
 800a588:	e7f0      	b.n	800a56c <D80_1CH_HTONS_VOL_HP+0x1a8>
 800a58a:	bf00      	nop
 800a58c:	24000000 	.word	0x24000000
 800a590:	002d0024 	.word	0x002d0024
 800a594:	001c0015 	.word	0x001c0015
 800a598:	000f000a 	.word	0x000f000a
 800a59c:	00060003 	.word	0x00060003
 800a5a0:	0037003f 	.word	0x0037003f
 800a5a4:	00450049 	.word	0x00450049
 800a5a8:	00490045 	.word	0x00490045
 800a5ac:	003f0037 	.word	0x003f0037
 800a5b0:	00030006 	.word	0x00030006
 800a5b4:	000a000f 	.word	0x000a000f
 800a5b8:	0015001c 	.word	0x0015001c
 800a5bc:	0024002d 	.word	0x0024002d

0800a5c0 <D128_1CH_HTONS_VOL_HP>:
 800a5c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5c4:	6914      	ldr	r4, [r2, #16]
 800a5c6:	b08d      	sub	sp, #52	; 0x34
 800a5c8:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800a5ca:	9404      	str	r4, [sp, #16]
 800a5cc:	6954      	ldr	r4, [r2, #20]
 800a5ce:	920b      	str	r2, [sp, #44]	; 0x2c
 800a5d0:	9405      	str	r4, [sp, #20]
 800a5d2:	6994      	ldr	r4, [r2, #24]
 800a5d4:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 800a5d8:	940a      	str	r4, [sp, #40]	; 0x28
 800a5da:	6894      	ldr	r4, [r2, #8]
 800a5dc:	9403      	str	r4, [sp, #12]
 800a5de:	68d4      	ldr	r4, [r2, #12]
 800a5e0:	9402      	str	r4, [sp, #8]
 800a5e2:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800a5e4:	6a12      	ldr	r2, [r2, #32]
 800a5e6:	9407      	str	r4, [sp, #28]
 800a5e8:	9208      	str	r2, [sp, #32]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	f000 812e 	beq.w	800a84c <D128_1CH_HTONS_VOL_HP+0x28c>
 800a5f0:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800a5f4:	f100 0b10 	add.w	fp, r0, #16
 800a5f8:	f8df 9290 	ldr.w	r9, [pc, #656]	; 800a88c <D128_1CH_HTONS_VOL_HP+0x2cc>
 800a5fc:	9106      	str	r1, [sp, #24]
 800a5fe:	9309      	str	r3, [sp, #36]	; 0x24
 800a600:	e95b 0204 	ldrd	r0, r2, [fp, #-16]
 800a604:	e95b 3602 	ldrd	r3, r6, [fp, #-8]
 800a608:	ba40      	rev16	r0, r0
 800a60a:	ba52      	rev16	r2, r2
 800a60c:	ba5b      	rev16	r3, r3
 800a60e:	ba76      	rev16	r6, r6
 800a610:	b2c5      	uxtb	r5, r0
 800a612:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800a616:	f3c0 4107 	ubfx	r1, r0, #16, #8
 800a61a:	0e00      	lsrs	r0, r0, #24
 800a61c:	f859 7025 	ldr.w	r7, [r9, r5, lsl #2]
 800a620:	b2d5      	uxtb	r5, r2
 800a622:	f859 e024 	ldr.w	lr, [r9, r4, lsl #2]
 800a626:	f3c2 2407 	ubfx	r4, r2, #8, #8
 800a62a:	44bc      	add	ip, r7
 800a62c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a630:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
 800a634:	f3c2 4007 	ubfx	r0, r2, #16, #8
 800a638:	eb0e 2e9c 	add.w	lr, lr, ip, lsr #10
 800a63c:	f859 a025 	ldr.w	sl, [r9, r5, lsl #2]
 800a640:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 800a644:	0e12      	lsrs	r2, r2, #24
 800a646:	eb01 219e 	add.w	r1, r1, lr, lsr #10
 800a64a:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 800a64e:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800a652:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800a656:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 800a65a:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 800a65e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800a662:	b2da      	uxtb	r2, r3
 800a664:	eb0a 2a97 	add.w	sl, sl, r7, lsr #10
 800a668:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800a66c:	ea4e 4e0c 	orr.w	lr, lr, ip, lsl #16
 800a670:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 800a674:	eb05 259a 	add.w	r5, r5, sl, lsr #10
 800a678:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800a67c:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800a680:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800a684:	eb00 2c95 	add.w	ip, r0, r5, lsr #10
 800a688:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800a68c:	f859 8021 	ldr.w	r8, [r9, r1, lsl #2]
 800a690:	f3c3 4107 	ubfx	r1, r3, #16, #8
 800a694:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 800a698:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800a69c:	f859 0021 	ldr.w	r0, [r9, r1, lsl #2]
 800a6a0:	0e1b      	lsrs	r3, r3, #24
 800a6a2:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 800a6a6:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800a6aa:	f859 1023 	ldr.w	r1, [r9, r3, lsl #2]
 800a6ae:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 800a6b2:	eb08 2892 	add.w	r8, r8, r2, lsr #10
 800a6b6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800a6ba:	b2f3      	uxtb	r3, r6
 800a6bc:	eb00 2a98 	add.w	sl, r0, r8, lsr #10
 800a6c0:	f3c8 0009 	ubfx	r0, r8, #0, #10
 800a6c4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a6c8:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 800a6cc:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 800a6d0:	f3c6 2c07 	ubfx	ip, r6, #8, #8
 800a6d4:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800a6d8:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800a6dc:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 800a6e0:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 800a6e4:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 800a6e8:	0e36      	lsrs	r6, r6, #24
 800a6ea:	eb02 2298 	add.w	r2, r2, r8, lsr #10
 800a6ee:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800a6f2:	f859 302c 	ldr.w	r3, [r9, ip, lsl #2]
 800a6f6:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800a6fa:	f859 c026 	ldr.w	ip, [r9, r6, lsl #2]
 800a6fe:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a702:	eb03 2692 	add.w	r6, r3, r2, lsr #10
 800a706:	f3c2 0309 	ubfx	r3, r2, #0, #10
 800a70a:	9101      	str	r1, [sp, #4]
 800a70c:	ea43 4208 	orr.w	r2, r3, r8, lsl #16
 800a710:	9b02      	ldr	r3, [sp, #8]
 800a712:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 800a716:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800a71a:	4611      	mov	r1, r2
 800a71c:	f3cc 0209 	ubfx	r2, ip, #0, #10
 800a720:	ea4f 2c9c 	mov.w	ip, ip, lsr #10
 800a724:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 800a728:	4a49      	ldr	r2, [pc, #292]	; (800a850 <D128_1CH_HTONS_VOL_HP+0x290>)
 800a72a:	fb2e 3202 	smlad	r2, lr, r2, r3
 800a72e:	4b49      	ldr	r3, [pc, #292]	; (800a854 <D128_1CH_HTONS_VOL_HP+0x294>)
 800a730:	fb27 2203 	smlad	r2, r7, r3, r2
 800a734:	4b48      	ldr	r3, [pc, #288]	; (800a858 <D128_1CH_HTONS_VOL_HP+0x298>)
 800a736:	fb25 2203 	smlad	r2, r5, r3, r2
 800a73a:	4b48      	ldr	r3, [pc, #288]	; (800a85c <D128_1CH_HTONS_VOL_HP+0x29c>)
 800a73c:	fb24 2203 	smlad	r2, r4, r3, r2
 800a740:	4b47      	ldr	r3, [pc, #284]	; (800a860 <D128_1CH_HTONS_VOL_HP+0x2a0>)
 800a742:	fb20 2803 	smlad	r8, r0, r3, r2
 800a746:	4b47      	ldr	r3, [pc, #284]	; (800a864 <D128_1CH_HTONS_VOL_HP+0x2a4>)
 800a748:	9a01      	ldr	r2, [sp, #4]
 800a74a:	fb22 8203 	smlad	r2, r2, r3, r8
 800a74e:	4b46      	ldr	r3, [pc, #280]	; (800a868 <D128_1CH_HTONS_VOL_HP+0x2a8>)
 800a750:	9102      	str	r1, [sp, #8]
 800a752:	fb21 2203 	smlad	r2, r1, r3, r2
 800a756:	f44f 3880 	mov.w	r8, #65536	; 0x10000
 800a75a:	fb26 2308 	smlad	r3, r6, r8, r2
 800a75e:	4619      	mov	r1, r3
 800a760:	9a03      	ldr	r2, [sp, #12]
 800a762:	4b42      	ldr	r3, [pc, #264]	; (800a86c <D128_1CH_HTONS_VOL_HP+0x2ac>)
 800a764:	fb2e 2803 	smlad	r8, lr, r3, r2
 800a768:	4b41      	ldr	r3, [pc, #260]	; (800a870 <D128_1CH_HTONS_VOL_HP+0x2b0>)
 800a76a:	fb27 8a03 	smlad	sl, r7, r3, r8
 800a76e:	f8df 8120 	ldr.w	r8, [pc, #288]	; 800a890 <D128_1CH_HTONS_VOL_HP+0x2d0>
 800a772:	fb25 a808 	smlad	r8, r5, r8, sl
 800a776:	f8df a11c 	ldr.w	sl, [pc, #284]	; 800a894 <D128_1CH_HTONS_VOL_HP+0x2d4>
 800a77a:	fb24 880a 	smlad	r8, r4, sl, r8
 800a77e:	f8df a118 	ldr.w	sl, [pc, #280]	; 800a898 <D128_1CH_HTONS_VOL_HP+0x2d8>
 800a782:	fb20 8a0a 	smlad	sl, r0, sl, r8
 800a786:	f8df 8114 	ldr.w	r8, [pc, #276]	; 800a89c <D128_1CH_HTONS_VOL_HP+0x2dc>
 800a78a:	9b01      	ldr	r3, [sp, #4]
 800a78c:	fb23 aa08 	smlad	sl, r3, r8, sl
 800a790:	f8df 810c 	ldr.w	r8, [pc, #268]	; 800a8a0 <D128_1CH_HTONS_VOL_HP+0x2e0>
 800a794:	9a02      	ldr	r2, [sp, #8]
 800a796:	fb22 a808 	smlad	r8, r2, r8, sl
 800a79a:	f8df a108 	ldr.w	sl, [pc, #264]	; 800a8a4 <D128_1CH_HTONS_VOL_HP+0x2e4>
 800a79e:	fb26 830a 	smlad	r3, r6, sl, r8
 800a7a2:	f04f 0801 	mov.w	r8, #1
 800a7a6:	9302      	str	r3, [sp, #8]
 800a7a8:	fb2e fe08 	smuad	lr, lr, r8
 800a7ac:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 800a8a8 <D128_1CH_HTONS_VOL_HP+0x2e8>
 800a7b0:	fb27 ee08 	smlad	lr, r7, r8, lr
 800a7b4:	4f2f      	ldr	r7, [pc, #188]	; (800a874 <D128_1CH_HTONS_VOL_HP+0x2b4>)
 800a7b6:	fb25 ee07 	smlad	lr, r5, r7, lr
 800a7ba:	4f2f      	ldr	r7, [pc, #188]	; (800a878 <D128_1CH_HTONS_VOL_HP+0x2b8>)
 800a7bc:	fb24 ee07 	smlad	lr, r4, r7, lr
 800a7c0:	4f2e      	ldr	r7, [pc, #184]	; (800a87c <D128_1CH_HTONS_VOL_HP+0x2bc>)
 800a7c2:	fb20 ee07 	smlad	lr, r0, r7, lr
 800a7c6:	4f2e      	ldr	r7, [pc, #184]	; (800a880 <D128_1CH_HTONS_VOL_HP+0x2c0>)
 800a7c8:	9b01      	ldr	r3, [sp, #4]
 800a7ca:	fb23 ee07 	smlad	lr, r3, r7, lr
 800a7ce:	4f2d      	ldr	r7, [pc, #180]	; (800a884 <D128_1CH_HTONS_VOL_HP+0x2c4>)
 800a7d0:	fb22 e707 	smlad	r7, r2, r7, lr
 800a7d4:	4b2c      	ldr	r3, [pc, #176]	; (800a888 <D128_1CH_HTONS_VOL_HP+0x2c8>)
 800a7d6:	fb26 7303 	smlad	r3, r6, r3, r7
 800a7da:	f5a1 1680 	sub.w	r6, r1, #1048576	; 0x100000
 800a7de:	9303      	str	r3, [sp, #12]
 800a7e0:	9b04      	ldr	r3, [sp, #16]
 800a7e2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800a7e6:	9f08      	ldr	r7, [sp, #32]
 800a7e8:	2100      	movs	r1, #0
 800a7ea:	4433      	add	r3, r6
 800a7ec:	f10b 0b10 	add.w	fp, fp, #16
 800a7f0:	461a      	mov	r2, r3
 800a7f2:	9b05      	ldr	r3, [sp, #20]
 800a7f4:	9605      	str	r6, [sp, #20]
 800a7f6:	1ad2      	subs	r2, r2, r3
 800a7f8:	17d5      	asrs	r5, r2, #31
 800a7fa:	fba2 2307 	umull	r2, r3, r2, r7
 800a7fe:	1814      	adds	r4, r2, r0
 800a800:	fb07 3305 	mla	r3, r7, r5, r3
 800a804:	eb43 0501 	adc.w	r5, r3, r1
 800a808:	006b      	lsls	r3, r5, #1
 800a80a:	022a      	lsls	r2, r5, #8
 800a80c:	9304      	str	r3, [sp, #16]
 800a80e:	9b07      	ldr	r3, [sp, #28]
 800a810:	fbc3 0102 	smlal	r0, r1, r3, r2
 800a814:	9a06      	ldr	r2, [sp, #24]
 800a816:	108b      	asrs	r3, r1, #2
 800a818:	f303 030f 	ssat	r3, #16, r3
 800a81c:	f822 3b02 	strh.w	r3, [r2], #2
 800a820:	4613      	mov	r3, r2
 800a822:	9206      	str	r2, [sp, #24]
 800a824:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a826:	4293      	cmp	r3, r2
 800a828:	f47f aeea 	bne.w	800a600 <D128_1CH_HTONS_VOL_HP+0x40>
 800a82c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a82e:	2000      	movs	r0, #0
 800a830:	9903      	ldr	r1, [sp, #12]
 800a832:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a834:	6099      	str	r1, [r3, #8]
 800a836:	9902      	ldr	r1, [sp, #8]
 800a838:	f8c3 c01c 	str.w	ip, [r3, #28]
 800a83c:	60d9      	str	r1, [r3, #12]
 800a83e:	9904      	ldr	r1, [sp, #16]
 800a840:	619a      	str	r2, [r3, #24]
 800a842:	e9c3 1604 	strd	r1, r6, [r3, #16]
 800a846:	b00d      	add	sp, #52	; 0x34
 800a848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a84c:	9e05      	ldr	r6, [sp, #20]
 800a84e:	e7ed      	b.n	800a82c <D128_1CH_HTONS_VOL_HP+0x26c>
 800a850:	00780069 	.word	0x00780069
 800a854:	005b004e 	.word	0x005b004e
 800a858:	00420037 	.word	0x00420037
 800a85c:	002d0024 	.word	0x002d0024
 800a860:	001c0015 	.word	0x001c0015
 800a864:	000f000a 	.word	0x000f000a
 800a868:	00060003 	.word	0x00060003
 800a86c:	00880096 	.word	0x00880096
 800a870:	00a200ac 	.word	0x00a200ac
 800a874:	000a000f 	.word	0x000a000f
 800a878:	0015001c 	.word	0x0015001c
 800a87c:	0024002d 	.word	0x0024002d
 800a880:	00370042 	.word	0x00370042
 800a884:	004e005b 	.word	0x004e005b
 800a888:	00690078 	.word	0x00690078
 800a88c:	24000000 	.word	0x24000000
 800a890:	00b400ba 	.word	0x00b400ba
 800a894:	00be00c0 	.word	0x00be00c0
 800a898:	00c000be 	.word	0x00c000be
 800a89c:	00ba00b4 	.word	0x00ba00b4
 800a8a0:	00ac00a2 	.word	0x00ac00a2
 800a8a4:	00960088 	.word	0x00960088
 800a8a8:	00030006 	.word	0x00030006

0800a8ac <PDM_Filter_Init>:
 800a8ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8ae:	2240      	movs	r2, #64	; 0x40
 800a8b0:	2100      	movs	r1, #0
 800a8b2:	4604      	mov	r4, r0
 800a8b4:	300c      	adds	r0, #12
 800a8b6:	f000 fa07 	bl	800acc8 <memset>
 800a8ba:	4a56      	ldr	r2, [pc, #344]	; (800aa14 <PDM_Filter_Init+0x168>)
 800a8bc:	4856      	ldr	r0, [pc, #344]	; (800aa18 <PDM_Filter_Init+0x16c>)
 800a8be:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 800a8c2:	6813      	ldr	r3, [r2, #0]
 800a8c4:	f24c 2540 	movw	r5, #49728	; 0xc240
 800a8c8:	f023 0301 	bic.w	r3, r3, #1
 800a8cc:	6013      	str	r3, [r2, #0]
 800a8ce:	6803      	ldr	r3, [r0, #0]
 800a8d0:	400b      	ands	r3, r1
 800a8d2:	42ab      	cmp	r3, r5
 800a8d4:	d040      	beq.n	800a958 <PDM_Filter_Init+0xac>
 800a8d6:	6803      	ldr	r3, [r0, #0]
 800a8d8:	f24c 2270 	movw	r2, #49776	; 0xc270
 800a8dc:	4019      	ands	r1, r3
 800a8de:	4291      	cmp	r1, r2
 800a8e0:	d03a      	beq.n	800a958 <PDM_Filter_Init+0xac>
 800a8e2:	4b4e      	ldr	r3, [pc, #312]	; (800aa1c <PDM_Filter_Init+0x170>)
 800a8e4:	2101      	movs	r1, #1
 800a8e6:	461a      	mov	r2, r3
 800a8e8:	6019      	str	r1, [r3, #0]
 800a8ea:	6813      	ldr	r3, [r2, #0]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d1fc      	bne.n	800a8ea <PDM_Filter_Init+0x3e>
 800a8f0:	4b4b      	ldr	r3, [pc, #300]	; (800aa20 <PDM_Filter_Init+0x174>)
 800a8f2:	494c      	ldr	r1, [pc, #304]	; (800aa24 <PDM_Filter_Init+0x178>)
 800a8f4:	4a4c      	ldr	r2, [pc, #304]	; (800aa28 <PDM_Filter_Init+0x17c>)
 800a8f6:	6019      	str	r1, [r3, #0]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	8820      	ldrh	r0, [r4, #0]
 800a8fc:	4293      	cmp	r3, r2
 800a8fe:	8961      	ldrh	r1, [r4, #10]
 800a900:	f04f 0300 	mov.w	r3, #0
 800a904:	8922      	ldrh	r2, [r4, #8]
 800a906:	bf14      	ite	ne
 800a908:	2500      	movne	r5, #0
 800a90a:	4d47      	ldreq	r5, [pc, #284]	; (800aa28 <PDM_Filter_Init+0x17c>)
 800a90c:	2801      	cmp	r0, #1
 800a90e:	61a3      	str	r3, [r4, #24]
 800a910:	6465      	str	r5, [r4, #68]	; 0x44
 800a912:	60e3      	str	r3, [r4, #12]
 800a914:	6263      	str	r3, [r4, #36]	; 0x24
 800a916:	6423      	str	r3, [r4, #64]	; 0x40
 800a918:	86a1      	strh	r1, [r4, #52]	; 0x34
 800a91a:	86e2      	strh	r2, [r4, #54]	; 0x36
 800a91c:	e9c4 3304 	strd	r3, r3, [r4, #16]
 800a920:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800a924:	d936      	bls.n	800a994 <PDM_Filter_Init+0xe8>
 800a926:	2003      	movs	r0, #3
 800a928:	2302      	movs	r3, #2
 800a92a:	8862      	ldrh	r2, [r4, #2]
 800a92c:	2a01      	cmp	r2, #1
 800a92e:	d92e      	bls.n	800a98e <PDM_Filter_Init+0xe2>
 800a930:	2140      	movs	r1, #64	; 0x40
 800a932:	2300      	movs	r3, #0
 800a934:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800a936:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 800a93a:	d101      	bne.n	800a940 <PDM_Filter_Init+0x94>
 800a93c:	460b      	mov	r3, r1
 800a93e:	6421      	str	r1, [r4, #64]	; 0x40
 800a940:	6862      	ldr	r2, [r4, #4]
 800a942:	b11a      	cbz	r2, 800a94c <PDM_Filter_Init+0xa0>
 800a944:	f043 0310 	orr.w	r3, r3, #16
 800a948:	62e2      	str	r2, [r4, #44]	; 0x2c
 800a94a:	6423      	str	r3, [r4, #64]	; 0x40
 800a94c:	2200      	movs	r2, #0
 800a94e:	8722      	strh	r2, [r4, #56]	; 0x38
 800a950:	b908      	cbnz	r0, 800a956 <PDM_Filter_Init+0xaa>
 800a952:	3380      	adds	r3, #128	; 0x80
 800a954:	6423      	str	r3, [r4, #64]	; 0x40
 800a956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a958:	4b34      	ldr	r3, [pc, #208]	; (800aa2c <PDM_Filter_Init+0x180>)
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d1c0      	bne.n	800a8e2 <PDM_Filter_Init+0x36>
 800a960:	4a33      	ldr	r2, [pc, #204]	; (800aa30 <PDM_Filter_Init+0x184>)
 800a962:	6813      	ldr	r3, [r2, #0]
 800a964:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a968:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800a96c:	d006      	beq.n	800a97c <PDM_Filter_Init+0xd0>
 800a96e:	6813      	ldr	r3, [r2, #0]
 800a970:	f240 4283 	movw	r2, #1155	; 0x483
 800a974:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a978:	4293      	cmp	r3, r2
 800a97a:	d1b2      	bne.n	800a8e2 <PDM_Filter_Init+0x36>
 800a97c:	4b2d      	ldr	r3, [pc, #180]	; (800aa34 <PDM_Filter_Init+0x188>)
 800a97e:	2101      	movs	r1, #1
 800a980:	461a      	mov	r2, r3
 800a982:	6019      	str	r1, [r3, #0]
 800a984:	6813      	ldr	r3, [r2, #0]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d1fc      	bne.n	800a984 <PDM_Filter_Init+0xd8>
 800a98a:	4b2b      	ldr	r3, [pc, #172]	; (800aa38 <PDM_Filter_Init+0x18c>)
 800a98c:	e7b1      	b.n	800a8f2 <PDM_Filter_Init+0x46>
 800a98e:	d03a      	beq.n	800aa06 <PDM_Filter_Init+0x15a>
 800a990:	4618      	mov	r0, r3
 800a992:	e7cd      	b.n	800a930 <PDM_Filter_Init+0x84>
 800a994:	4d29      	ldr	r5, [pc, #164]	; (800aa3c <PDM_Filter_Init+0x190>)
 800a996:	782a      	ldrb	r2, [r5, #0]
 800a998:	d01b      	beq.n	800a9d2 <PDM_Filter_Init+0x126>
 800a99a:	2a01      	cmp	r2, #1
 800a99c:	d001      	beq.n	800a9a2 <PDM_Filter_Init+0xf6>
 800a99e:	2001      	movs	r0, #1
 800a9a0:	e7c3      	b.n	800a92a <PDM_Filter_Init+0x7e>
 800a9a2:	4927      	ldr	r1, [pc, #156]	; (800aa40 <PDM_Filter_Init+0x194>)
 800a9a4:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 800aa48 <PDM_Filter_Init+0x19c>
 800a9a8:	f501 6780 	add.w	r7, r1, #1024	; 0x400
 800a9ac:	4e25      	ldr	r6, [pc, #148]	; (800aa44 <PDM_Filter_Init+0x198>)
 800a9ae:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800a9b2:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 800a9b6:	ea02 0006 	and.w	r0, r2, r6
 800a9ba:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800a9be:	428f      	cmp	r7, r1
 800a9c0:	ea43 0300 	orr.w	r3, r3, r0
 800a9c4:	4413      	add	r3, r2
 800a9c6:	600b      	str	r3, [r1, #0]
 800a9c8:	d1f1      	bne.n	800a9ae <PDM_Filter_Init+0x102>
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	2001      	movs	r0, #1
 800a9ce:	702b      	strb	r3, [r5, #0]
 800a9d0:	e7ab      	b.n	800a92a <PDM_Filter_Init+0x7e>
 800a9d2:	2a00      	cmp	r2, #0
 800a9d4:	d1a9      	bne.n	800a92a <PDM_Filter_Init+0x7e>
 800a9d6:	491a      	ldr	r1, [pc, #104]	; (800aa40 <PDM_Filter_Init+0x194>)
 800a9d8:	f8df c06c 	ldr.w	ip, [pc, #108]	; 800aa48 <PDM_Filter_Init+0x19c>
 800a9dc:	f501 6780 	add.w	r7, r1, #1024	; 0x400
 800a9e0:	4e18      	ldr	r6, [pc, #96]	; (800aa44 <PDM_Filter_Init+0x198>)
 800a9e2:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800a9e6:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 800a9ea:	ea02 0006 	and.w	r0, r2, r6
 800a9ee:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800a9f2:	428f      	cmp	r7, r1
 800a9f4:	ea43 0300 	orr.w	r3, r3, r0
 800a9f8:	4413      	add	r3, r2
 800a9fa:	600b      	str	r3, [r1, #0]
 800a9fc:	d1f1      	bne.n	800a9e2 <PDM_Filter_Init+0x136>
 800a9fe:	2001      	movs	r0, #1
 800aa00:	2300      	movs	r3, #0
 800aa02:	7028      	strb	r0, [r5, #0]
 800aa04:	e791      	b.n	800a92a <PDM_Filter_Init+0x7e>
 800aa06:	2220      	movs	r2, #32
 800aa08:	4618      	mov	r0, r3
 800aa0a:	2160      	movs	r1, #96	; 0x60
 800aa0c:	6422      	str	r2, [r4, #64]	; 0x40
 800aa0e:	4613      	mov	r3, r2
 800aa10:	e790      	b.n	800a934 <PDM_Filter_Init+0x88>
 800aa12:	bf00      	nop
 800aa14:	e0002000 	.word	0xe0002000
 800aa18:	e000ed00 	.word	0xe000ed00
 800aa1c:	40023008 	.word	0x40023008
 800aa20:	40023000 	.word	0x40023000
 800aa24:	f407a5c2 	.word	0xf407a5c2
 800aa28:	b5e8b5cd 	.word	0xb5e8b5cd
 800aa2c:	e0042000 	.word	0xe0042000
 800aa30:	5c001000 	.word	0x5c001000
 800aa34:	58024c08 	.word	0x58024c08
 800aa38:	58024c00 	.word	0x58024c00
 800aa3c:	2400049c 	.word	0x2400049c
 800aa40:	23fffffc 	.word	0x23fffffc
 800aa44:	000ffc00 	.word	0x000ffc00
 800aa48:	3ff00000 	.word	0x3ff00000

0800aa4c <PDM_Filter_setConfig>:
 800aa4c:	4b67      	ldr	r3, [pc, #412]	; (800abec <PDM_Filter_setConfig+0x1a0>)
 800aa4e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800aa50:	429a      	cmp	r2, r3
 800aa52:	d128      	bne.n	800aaa6 <PDM_Filter_setConfig+0x5a>
 800aa54:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800aa56:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa58:	880e      	ldrh	r6, [r1, #0]
 800aa5a:	460d      	mov	r5, r1
 800aa5c:	4604      	mov	r4, r0
 800aa5e:	f422 7180 	bic.w	r1, r2, #256	; 0x100
 800aa62:	1e73      	subs	r3, r6, #1
 800aa64:	f9b5 7004 	ldrsh.w	r7, [r5, #4]
 800aa68:	f9b0 0038 	ldrsh.w	r0, [r0, #56]	; 0x38
 800aa6c:	2b06      	cmp	r3, #6
 800aa6e:	ed2d 8b02 	vpush	{d8}
 800aa72:	6421      	str	r1, [r4, #64]	; 0x40
 800aa74:	b083      	sub	sp, #12
 800aa76:	d820      	bhi.n	800aaba <PDM_Filter_setConfig+0x6e>
 800aa78:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800aa7a:	42b3      	cmp	r3, r6
 800aa7c:	d03d      	beq.n	800aafa <PDM_Filter_setConfig+0xae>
 800aa7e:	4b5c      	ldr	r3, [pc, #368]	; (800abf0 <PDM_Filter_setConfig+0x1a4>)
 800aa80:	4013      	ands	r3, r2
 800aa82:	4333      	orrs	r3, r6
 800aa84:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800aa88:	6423      	str	r3, [r4, #64]	; 0x40
 800aa8a:	f003 030f 	and.w	r3, r3, #15
 800aa8e:	2a70      	cmp	r2, #112	; 0x70
 800aa90:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800aa94:	d009      	beq.n	800aaaa <PDM_Filter_setConfig+0x5e>
 800aa96:	2b06      	cmp	r3, #6
 800aa98:	d824      	bhi.n	800aae4 <PDM_Filter_setConfig+0x98>
 800aa9a:	e8df f003 	tbb	[pc, r3]
 800aa9e:	878a      	.short	0x878a
 800aaa0:	7b7e8184 	.word	0x7b7e8184
 800aaa4:	78          	.byte	0x78
 800aaa5:	00          	.byte	0x00
 800aaa6:	2004      	movs	r0, #4
 800aaa8:	4770      	bx	lr
 800aaaa:	2b06      	cmp	r3, #6
 800aaac:	d81a      	bhi.n	800aae4 <PDM_Filter_setConfig+0x98>
 800aaae:	e8df f003 	tbb	[pc, r3]
 800aab2:	8f92      	.short	0x8f92
 800aab4:	8617898c 	.word	0x8617898c
 800aab8:	83          	.byte	0x83
 800aab9:	00          	.byte	0x00
 800aaba:	4287      	cmp	r7, r0
 800aabc:	f000 808e 	beq.w	800abdc <PDM_Filter_setConfig+0x190>
 800aac0:	f117 0f0c 	cmn.w	r7, #12
 800aac4:	f04f 0008 	mov.w	r0, #8
 800aac8:	da11      	bge.n	800aaee <PDM_Filter_setConfig+0xa2>
 800aaca:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 800aace:	3040      	adds	r0, #64	; 0x40
 800aad0:	80ab      	strh	r3, [r5, #4]
 800aad2:	886b      	ldrh	r3, [r5, #2]
 800aad4:	8626      	strh	r6, [r4, #48]	; 0x30
 800aad6:	8663      	strh	r3, [r4, #50]	; 0x32
 800aad8:	b003      	add	sp, #12
 800aada:	ecbd 8b02 	vpop	{d8}
 800aade:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aae0:	4b44      	ldr	r3, [pc, #272]	; (800abf4 <PDM_Filter_setConfig+0x1a8>)
 800aae2:	64a3      	str	r3, [r4, #72]	; 0x48
 800aae4:	f117 0f0c 	cmn.w	r7, #12
 800aae8:	f04f 0000 	mov.w	r0, #0
 800aaec:	dbed      	blt.n	800aaca <PDM_Filter_setConfig+0x7e>
 800aaee:	2f33      	cmp	r7, #51	; 0x33
 800aaf0:	dd10      	ble.n	800ab14 <PDM_Filter_setConfig+0xc8>
 800aaf2:	2333      	movs	r3, #51	; 0x33
 800aaf4:	3040      	adds	r0, #64	; 0x40
 800aaf6:	80ab      	strh	r3, [r5, #4]
 800aaf8:	e7eb      	b.n	800aad2 <PDM_Filter_setConfig+0x86>
 800aafa:	4287      	cmp	r7, r0
 800aafc:	d1f2      	bne.n	800aae4 <PDM_Filter_setConfig+0x98>
 800aafe:	886b      	ldrh	r3, [r5, #2]
 800ab00:	8663      	strh	r3, [r4, #50]	; 0x32
 800ab02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ab04:	2000      	movs	r0, #0
 800ab06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab0a:	6423      	str	r3, [r4, #64]	; 0x40
 800ab0c:	b003      	add	sp, #12
 800ab0e:	ecbd 8b02 	vpop	{d8}
 800ab12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab14:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ab16:	f003 030f 	and.w	r3, r3, #15
 800ab1a:	3b01      	subs	r3, #1
 800ab1c:	2b06      	cmp	r3, #6
 800ab1e:	d831      	bhi.n	800ab84 <PDM_Filter_setConfig+0x138>
 800ab20:	4a35      	ldr	r2, [pc, #212]	; (800abf8 <PDM_Filter_setConfig+0x1ac>)
 800ab22:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800ab26:	eddf 0a35 	vldr	s1, [pc, #212]	; 800abfc <PDM_Filter_setConfig+0x1b0>
 800ab2a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ab2e:	9001      	str	r0, [sp, #4]
 800ab30:	edd3 7a07 	vldr	s15, [r3, #28]
 800ab34:	ed93 8a00 	vldr	s16, [r3]
 800ab38:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800ab3c:	f000 f8e4 	bl	800ad08 <powf>
 800ab40:	eef0 8a40 	vmov.f32	s17, s0
 800ab44:	9801      	ldr	r0, [sp, #4]
 800ab46:	ee07 7a90 	vmov	s15, r7
 800ab4a:	ee28 8a28 	vmul.f32	s16, s16, s17
 800ab4e:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800ab52:	9001      	str	r0, [sp, #4]
 800ab54:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 800ab58:	eddf 7a29 	vldr	s15, [pc, #164]	; 800ac00 <PDM_Filter_setConfig+0x1b4>
 800ab5c:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800ab60:	f000 f8d2 	bl	800ad08 <powf>
 800ab64:	ee28 8a00 	vmul.f32	s16, s16, s0
 800ab68:	886b      	ldrh	r3, [r5, #2]
 800ab6a:	9801      	ldr	r0, [sp, #4]
 800ab6c:	feb8 8a48 	vrinta.f32	s16, s16
 800ab70:	eebc 8ac8 	vcvt.u32.f32	s16, s16
 800ab74:	8727      	strh	r7, [r4, #56]	; 0x38
 800ab76:	8663      	strh	r3, [r4, #50]	; 0x32
 800ab78:	8626      	strh	r6, [r4, #48]	; 0x30
 800ab7a:	ed84 8a0f 	vstr	s16, [r4, #60]	; 0x3c
 800ab7e:	2800      	cmp	r0, #0
 800ab80:	d0bf      	beq.n	800ab02 <PDM_Filter_setConfig+0xb6>
 800ab82:	e7a9      	b.n	800aad8 <PDM_Filter_setConfig+0x8c>
 800ab84:	eddf 8a1f 	vldr	s17, [pc, #124]	; 800ac04 <PDM_Filter_setConfig+0x1b8>
 800ab88:	ed9f 8a1f 	vldr	s16, [pc, #124]	; 800ac08 <PDM_Filter_setConfig+0x1bc>
 800ab8c:	e7db      	b.n	800ab46 <PDM_Filter_setConfig+0xfa>
 800ab8e:	4b1f      	ldr	r3, [pc, #124]	; (800ac0c <PDM_Filter_setConfig+0x1c0>)
 800ab90:	64a3      	str	r3, [r4, #72]	; 0x48
 800ab92:	e7a7      	b.n	800aae4 <PDM_Filter_setConfig+0x98>
 800ab94:	4b1e      	ldr	r3, [pc, #120]	; (800ac10 <PDM_Filter_setConfig+0x1c4>)
 800ab96:	64a3      	str	r3, [r4, #72]	; 0x48
 800ab98:	e7a4      	b.n	800aae4 <PDM_Filter_setConfig+0x98>
 800ab9a:	4b1e      	ldr	r3, [pc, #120]	; (800ac14 <PDM_Filter_setConfig+0x1c8>)
 800ab9c:	64a3      	str	r3, [r4, #72]	; 0x48
 800ab9e:	e7a1      	b.n	800aae4 <PDM_Filter_setConfig+0x98>
 800aba0:	4b1d      	ldr	r3, [pc, #116]	; (800ac18 <PDM_Filter_setConfig+0x1cc>)
 800aba2:	64a3      	str	r3, [r4, #72]	; 0x48
 800aba4:	e79e      	b.n	800aae4 <PDM_Filter_setConfig+0x98>
 800aba6:	4b1d      	ldr	r3, [pc, #116]	; (800ac1c <PDM_Filter_setConfig+0x1d0>)
 800aba8:	64a3      	str	r3, [r4, #72]	; 0x48
 800abaa:	e79b      	b.n	800aae4 <PDM_Filter_setConfig+0x98>
 800abac:	4b1c      	ldr	r3, [pc, #112]	; (800ac20 <PDM_Filter_setConfig+0x1d4>)
 800abae:	64a3      	str	r3, [r4, #72]	; 0x48
 800abb0:	e798      	b.n	800aae4 <PDM_Filter_setConfig+0x98>
 800abb2:	4b1c      	ldr	r3, [pc, #112]	; (800ac24 <PDM_Filter_setConfig+0x1d8>)
 800abb4:	64a3      	str	r3, [r4, #72]	; 0x48
 800abb6:	e795      	b.n	800aae4 <PDM_Filter_setConfig+0x98>
 800abb8:	4b1b      	ldr	r3, [pc, #108]	; (800ac28 <PDM_Filter_setConfig+0x1dc>)
 800abba:	64a3      	str	r3, [r4, #72]	; 0x48
 800abbc:	e792      	b.n	800aae4 <PDM_Filter_setConfig+0x98>
 800abbe:	4b1b      	ldr	r3, [pc, #108]	; (800ac2c <PDM_Filter_setConfig+0x1e0>)
 800abc0:	64a3      	str	r3, [r4, #72]	; 0x48
 800abc2:	e78f      	b.n	800aae4 <PDM_Filter_setConfig+0x98>
 800abc4:	4b1a      	ldr	r3, [pc, #104]	; (800ac30 <PDM_Filter_setConfig+0x1e4>)
 800abc6:	64a3      	str	r3, [r4, #72]	; 0x48
 800abc8:	e78c      	b.n	800aae4 <PDM_Filter_setConfig+0x98>
 800abca:	4b1a      	ldr	r3, [pc, #104]	; (800ac34 <PDM_Filter_setConfig+0x1e8>)
 800abcc:	64a3      	str	r3, [r4, #72]	; 0x48
 800abce:	e789      	b.n	800aae4 <PDM_Filter_setConfig+0x98>
 800abd0:	4b19      	ldr	r3, [pc, #100]	; (800ac38 <PDM_Filter_setConfig+0x1ec>)
 800abd2:	64a3      	str	r3, [r4, #72]	; 0x48
 800abd4:	e786      	b.n	800aae4 <PDM_Filter_setConfig+0x98>
 800abd6:	4b19      	ldr	r3, [pc, #100]	; (800ac3c <PDM_Filter_setConfig+0x1f0>)
 800abd8:	64a3      	str	r3, [r4, #72]	; 0x48
 800abda:	e783      	b.n	800aae4 <PDM_Filter_setConfig+0x98>
 800abdc:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800abde:	42b3      	cmp	r3, r6
 800abe0:	f47f af6e 	bne.w	800aac0 <PDM_Filter_setConfig+0x74>
 800abe4:	886b      	ldrh	r3, [r5, #2]
 800abe6:	2008      	movs	r0, #8
 800abe8:	8663      	strh	r3, [r4, #50]	; 0x32
 800abea:	e775      	b.n	800aad8 <PDM_Filter_setConfig+0x8c>
 800abec:	b5e8b5cd 	.word	0xb5e8b5cd
 800abf0:	fffffef0 	.word	0xfffffef0
 800abf4:	08009d65 	.word	0x08009d65
 800abf8:	0800b078 	.word	0x0800b078
 800abfc:	42000000 	.word	0x42000000
 800ac00:	3d4ccccd 	.word	0x3d4ccccd
 800ac04:	4f800000 	.word	0x4f800000
 800ac08:	00000000 	.word	0x00000000
 800ac0c:	08009171 	.word	0x08009171
 800ac10:	08008ff9 	.word	0x08008ff9
 800ac14:	08008ee9 	.word	0x08008ee9
 800ac18:	080099ad 	.word	0x080099ad
 800ac1c:	08009715 	.word	0x08009715
 800ac20:	080094dd 	.word	0x080094dd
 800ac24:	080092f9 	.word	0x080092f9
 800ac28:	08009f81 	.word	0x08009f81
 800ac2c:	08009e45 	.word	0x08009e45
 800ac30:	0800a5c1 	.word	0x0800a5c1
 800ac34:	0800a3c5 	.word	0x0800a3c5
 800ac38:	0800a219 	.word	0x0800a219
 800ac3c:	0800a0ad 	.word	0x0800a0ad

0800ac40 <PDM_Filter>:
 800ac40:	b410      	push	{r4}
 800ac42:	4b0b      	ldr	r3, [pc, #44]	; (800ac70 <PDM_Filter+0x30>)
 800ac44:	6c54      	ldr	r4, [r2, #68]	; 0x44
 800ac46:	429c      	cmp	r4, r3
 800ac48:	d107      	bne.n	800ac5a <PDM_Filter+0x1a>
 800ac4a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800ac4c:	05dc      	lsls	r4, r3, #23
 800ac4e:	d508      	bpl.n	800ac62 <PDM_Filter+0x22>
 800ac50:	6c93      	ldr	r3, [r2, #72]	; 0x48
 800ac52:	320c      	adds	r2, #12
 800ac54:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac58:	4718      	bx	r3
 800ac5a:	2004      	movs	r0, #4
 800ac5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac60:	4770      	bx	lr
 800ac62:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ac66:	bf14      	ite	ne
 800ac68:	2020      	movne	r0, #32
 800ac6a:	2030      	moveq	r0, #48	; 0x30
 800ac6c:	e7f6      	b.n	800ac5c <PDM_Filter+0x1c>
 800ac6e:	bf00      	nop
 800ac70:	b5e8b5cd 	.word	0xb5e8b5cd

0800ac74 <__errno>:
 800ac74:	4b01      	ldr	r3, [pc, #4]	; (800ac7c <__errno+0x8>)
 800ac76:	6818      	ldr	r0, [r3, #0]
 800ac78:	4770      	bx	lr
 800ac7a:	bf00      	nop
 800ac7c:	24000410 	.word	0x24000410

0800ac80 <__libc_init_array>:
 800ac80:	b570      	push	{r4, r5, r6, lr}
 800ac82:	4d0d      	ldr	r5, [pc, #52]	; (800acb8 <__libc_init_array+0x38>)
 800ac84:	4c0d      	ldr	r4, [pc, #52]	; (800acbc <__libc_init_array+0x3c>)
 800ac86:	1b64      	subs	r4, r4, r5
 800ac88:	10a4      	asrs	r4, r4, #2
 800ac8a:	2600      	movs	r6, #0
 800ac8c:	42a6      	cmp	r6, r4
 800ac8e:	d109      	bne.n	800aca4 <__libc_init_array+0x24>
 800ac90:	4d0b      	ldr	r5, [pc, #44]	; (800acc0 <__libc_init_array+0x40>)
 800ac92:	4c0c      	ldr	r4, [pc, #48]	; (800acc4 <__libc_init_array+0x44>)
 800ac94:	f000 f9e4 	bl	800b060 <_init>
 800ac98:	1b64      	subs	r4, r4, r5
 800ac9a:	10a4      	asrs	r4, r4, #2
 800ac9c:	2600      	movs	r6, #0
 800ac9e:	42a6      	cmp	r6, r4
 800aca0:	d105      	bne.n	800acae <__libc_init_array+0x2e>
 800aca2:	bd70      	pop	{r4, r5, r6, pc}
 800aca4:	f855 3b04 	ldr.w	r3, [r5], #4
 800aca8:	4798      	blx	r3
 800acaa:	3601      	adds	r6, #1
 800acac:	e7ee      	b.n	800ac8c <__libc_init_array+0xc>
 800acae:	f855 3b04 	ldr.w	r3, [r5], #4
 800acb2:	4798      	blx	r3
 800acb4:	3601      	adds	r6, #1
 800acb6:	e7f2      	b.n	800ac9e <__libc_init_array+0x1e>
 800acb8:	0800b368 	.word	0x0800b368
 800acbc:	0800b368 	.word	0x0800b368
 800acc0:	0800b368 	.word	0x0800b368
 800acc4:	0800b36c 	.word	0x0800b36c

0800acc8 <memset>:
 800acc8:	4402      	add	r2, r0
 800acca:	4603      	mov	r3, r0
 800accc:	4293      	cmp	r3, r2
 800acce:	d100      	bne.n	800acd2 <memset+0xa>
 800acd0:	4770      	bx	lr
 800acd2:	f803 1b01 	strb.w	r1, [r3], #1
 800acd6:	e7f9      	b.n	800accc <memset+0x4>

0800acd8 <checkint>:
 800acd8:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800acdc:	2b7e      	cmp	r3, #126	; 0x7e
 800acde:	dd10      	ble.n	800ad02 <checkint+0x2a>
 800ace0:	2b96      	cmp	r3, #150	; 0x96
 800ace2:	dc0c      	bgt.n	800acfe <checkint+0x26>
 800ace4:	2201      	movs	r2, #1
 800ace6:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800acea:	fa02 f303 	lsl.w	r3, r2, r3
 800acee:	1e5a      	subs	r2, r3, #1
 800acf0:	4202      	tst	r2, r0
 800acf2:	d106      	bne.n	800ad02 <checkint+0x2a>
 800acf4:	4203      	tst	r3, r0
 800acf6:	bf0c      	ite	eq
 800acf8:	2002      	moveq	r0, #2
 800acfa:	2001      	movne	r0, #1
 800acfc:	4770      	bx	lr
 800acfe:	2002      	movs	r0, #2
 800ad00:	4770      	bx	lr
 800ad02:	2000      	movs	r0, #0
 800ad04:	4770      	bx	lr
	...

0800ad08 <powf>:
 800ad08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad0a:	ee10 1a10 	vmov	r1, s0
 800ad0e:	ee10 6a90 	vmov	r6, s1
 800ad12:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 800ad16:	0072      	lsls	r2, r6, #1
 800ad18:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800ad1c:	b085      	sub	sp, #20
 800ad1e:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 800ad22:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 800ad26:	d256      	bcs.n	800add6 <powf+0xce>
 800ad28:	4298      	cmp	r0, r3
 800ad2a:	d256      	bcs.n	800adda <powf+0xd2>
 800ad2c:	2000      	movs	r0, #0
 800ad2e:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 800ad32:	4ea3      	ldr	r6, [pc, #652]	; (800afc0 <powf+0x2b8>)
 800ad34:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800ad38:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 800ad3c:	f3c2 47c3 	ubfx	r7, r2, #19, #4
 800ad40:	0dd2      	lsrs	r2, r2, #23
 800ad42:	eb06 1707 	add.w	r7, r6, r7, lsl #4
 800ad46:	05d2      	lsls	r2, r2, #23
 800ad48:	1a8b      	subs	r3, r1, r2
 800ad4a:	ed97 5b00 	vldr	d5, [r7]
 800ad4e:	ee07 3a90 	vmov	s15, r3
 800ad52:	15d2      	asrs	r2, r2, #23
 800ad54:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800ad58:	eea5 6b07 	vfma.f64	d6, d5, d7
 800ad5c:	ed97 5b02 	vldr	d5, [r7, #8]
 800ad60:	ee26 2b06 	vmul.f64	d2, d6, d6
 800ad64:	ee22 1b02 	vmul.f64	d1, d2, d2
 800ad68:	ee07 2a90 	vmov	s15, r2
 800ad6c:	ed96 4b40 	vldr	d4, [r6, #256]	; 0x100
 800ad70:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ad74:	ee37 7b05 	vadd.f64	d7, d7, d5
 800ad78:	ed96 5b42 	vldr	d5, [r6, #264]	; 0x108
 800ad7c:	ed96 3b44 	vldr	d3, [r6, #272]	; 0x110
 800ad80:	eea6 5b04 	vfma.f64	d5, d6, d4
 800ad84:	ed96 4b46 	vldr	d4, [r6, #280]	; 0x118
 800ad88:	eea6 4b03 	vfma.f64	d4, d6, d3
 800ad8c:	ed96 3b48 	vldr	d3, [r6, #288]	; 0x120
 800ad90:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 800ad94:	eea6 7b03 	vfma.f64	d7, d6, d3
 800ad98:	eea2 7b04 	vfma.f64	d7, d2, d4
 800ad9c:	eea5 7b01 	vfma.f64	d7, d5, d1
 800ada0:	ee20 0b07 	vmul.f64	d0, d0, d7
 800ada4:	ee10 1a90 	vmov	r1, s1
 800ada8:	2300      	movs	r3, #0
 800adaa:	2700      	movs	r7, #0
 800adac:	f3c1 32cf 	ubfx	r2, r1, #15, #16
 800adb0:	f248 06be 	movw	r6, #32958	; 0x80be
 800adb4:	429f      	cmp	r7, r3
 800adb6:	bf08      	it	eq
 800adb8:	4296      	cmpeq	r6, r2
 800adba:	f080 80b1 	bcs.w	800af20 <powf+0x218>
 800adbe:	ed9f 7b78 	vldr	d7, [pc, #480]	; 800afa0 <powf+0x298>
 800adc2:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800adc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adca:	dd79      	ble.n	800aec0 <powf+0x1b8>
 800adcc:	b005      	add	sp, #20
 800adce:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800add2:	f000 b91f 	b.w	800b014 <__math_oflowf>
 800add6:	4298      	cmp	r0, r3
 800add8:	d32d      	bcc.n	800ae36 <powf+0x12e>
 800adda:	b952      	cbnz	r2, 800adf2 <powf+0xea>
 800addc:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 800ade0:	005b      	lsls	r3, r3, #1
 800ade2:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 800ade6:	f240 80cd 	bls.w	800af84 <powf+0x27c>
 800adea:	ee30 0a20 	vadd.f32	s0, s0, s1
 800adee:	b005      	add	sp, #20
 800adf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800adf2:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800adf6:	d105      	bne.n	800ae04 <powf+0xfc>
 800adf8:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 800adfc:	0076      	lsls	r6, r6, #1
 800adfe:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 800ae02:	e7f0      	b.n	800ade6 <powf+0xde>
 800ae04:	004b      	lsls	r3, r1, #1
 800ae06:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 800ae0a:	d8ee      	bhi.n	800adea <powf+0xe2>
 800ae0c:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 800ae10:	d1eb      	bne.n	800adea <powf+0xe2>
 800ae12:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800ae16:	f000 80b5 	beq.w	800af84 <powf+0x27c>
 800ae1a:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800ae1e:	ea6f 0606 	mvn.w	r6, r6
 800ae22:	bf34      	ite	cc
 800ae24:	2300      	movcc	r3, #0
 800ae26:	2301      	movcs	r3, #1
 800ae28:	0ff6      	lsrs	r6, r6, #31
 800ae2a:	42b3      	cmp	r3, r6
 800ae2c:	f040 80ad 	bne.w	800af8a <powf+0x282>
 800ae30:	ee20 0aa0 	vmul.f32	s0, s1, s1
 800ae34:	e7db      	b.n	800adee <powf+0xe6>
 800ae36:	004f      	lsls	r7, r1, #1
 800ae38:	1e7a      	subs	r2, r7, #1
 800ae3a:	429a      	cmp	r2, r3
 800ae3c:	d31c      	bcc.n	800ae78 <powf+0x170>
 800ae3e:	2900      	cmp	r1, #0
 800ae40:	ee20 0a00 	vmul.f32	s0, s0, s0
 800ae44:	da0f      	bge.n	800ae66 <powf+0x15e>
 800ae46:	ee10 0a90 	vmov	r0, s1
 800ae4a:	f7ff ff45 	bl	800acd8 <checkint>
 800ae4e:	2801      	cmp	r0, #1
 800ae50:	d109      	bne.n	800ae66 <powf+0x15e>
 800ae52:	eeb1 0a40 	vneg.f32	s0, s0
 800ae56:	b947      	cbnz	r7, 800ae6a <powf+0x162>
 800ae58:	2e00      	cmp	r6, #0
 800ae5a:	dac8      	bge.n	800adee <powf+0xe6>
 800ae5c:	b005      	add	sp, #20
 800ae5e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ae62:	f000 b8dd 	b.w	800b020 <__math_divzerof>
 800ae66:	2000      	movs	r0, #0
 800ae68:	e7f5      	b.n	800ae56 <powf+0x14e>
 800ae6a:	2e00      	cmp	r6, #0
 800ae6c:	dabf      	bge.n	800adee <powf+0xe6>
 800ae6e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ae72:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800ae76:	e7ba      	b.n	800adee <powf+0xe6>
 800ae78:	2900      	cmp	r1, #0
 800ae7a:	da1f      	bge.n	800aebc <powf+0x1b4>
 800ae7c:	ee10 0a90 	vmov	r0, s1
 800ae80:	f7ff ff2a 	bl	800acd8 <checkint>
 800ae84:	b920      	cbnz	r0, 800ae90 <powf+0x188>
 800ae86:	b005      	add	sp, #20
 800ae88:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ae8c:	f000 b8d8 	b.w	800b040 <__math_invalidf>
 800ae90:	2801      	cmp	r0, #1
 800ae92:	bf14      	ite	ne
 800ae94:	2000      	movne	r0, #0
 800ae96:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800ae9a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800ae9e:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800aea2:	f4bf af44 	bcs.w	800ad2e <powf+0x26>
 800aea6:	eddf 7a47 	vldr	s15, [pc, #284]	; 800afc4 <powf+0x2bc>
 800aeaa:	ee20 0a27 	vmul.f32	s0, s0, s15
 800aeae:	ee10 3a10 	vmov	r3, s0
 800aeb2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aeb6:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 800aeba:	e738      	b.n	800ad2e <powf+0x26>
 800aebc:	2000      	movs	r0, #0
 800aebe:	e7ee      	b.n	800ae9e <powf+0x196>
 800aec0:	ed9f 7b39 	vldr	d7, [pc, #228]	; 800afa8 <powf+0x2a0>
 800aec4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800aec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aecc:	dd10      	ble.n	800aef0 <powf+0x1e8>
 800aece:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 800aed2:	2800      	cmp	r0, #0
 800aed4:	d15c      	bne.n	800af90 <powf+0x288>
 800aed6:	9302      	str	r3, [sp, #8]
 800aed8:	eddd 7a02 	vldr	s15, [sp, #8]
 800aedc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aee0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800aee4:	eef4 7a47 	vcmp.f32	s15, s14
 800aee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aeec:	f47f af6e 	bne.w	800adcc <powf+0xc4>
 800aef0:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800afb0 <powf+0x2a8>
 800aef4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800aef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aefc:	d804      	bhi.n	800af08 <powf+0x200>
 800aefe:	b005      	add	sp, #20
 800af00:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800af04:	f000 b87a 	b.w	800affc <__math_uflowf>
 800af08:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 800afb8 <powf+0x2b0>
 800af0c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800af10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af14:	d504      	bpl.n	800af20 <powf+0x218>
 800af16:	b005      	add	sp, #20
 800af18:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800af1c:	f000 b874 	b.w	800b008 <__math_may_uflowf>
 800af20:	4b29      	ldr	r3, [pc, #164]	; (800afc8 <powf+0x2c0>)
 800af22:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 800af26:	ee30 6b07 	vadd.f64	d6, d0, d7
 800af2a:	ed8d 6b00 	vstr	d6, [sp]
 800af2e:	ee36 7b47 	vsub.f64	d7, d6, d7
 800af32:	ee30 7b47 	vsub.f64	d7, d0, d7
 800af36:	e9dd 6700 	ldrd	r6, r7, [sp]
 800af3a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800af3e:	f006 011f 	and.w	r1, r6, #31
 800af42:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800af46:	e9d1 ce00 	ldrd	ip, lr, [r1]
 800af4a:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 800af4e:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 800af52:	ed93 4b46 	vldr	d4, [r3, #280]	; 0x118
 800af56:	eea7 6b05 	vfma.f64	d6, d7, d5
 800af5a:	ee27 5b07 	vmul.f64	d5, d7, d7
 800af5e:	1836      	adds	r6, r6, r0
 800af60:	2300      	movs	r3, #0
 800af62:	eb13 040c 	adds.w	r4, r3, ip
 800af66:	ea4f 31c6 	mov.w	r1, r6, lsl #15
 800af6a:	eb41 050e 	adc.w	r5, r1, lr
 800af6e:	eea7 0b04 	vfma.f64	d0, d7, d4
 800af72:	ec45 4b17 	vmov	d7, r4, r5
 800af76:	eea6 0b05 	vfma.f64	d0, d6, d5
 800af7a:	ee20 0b07 	vmul.f64	d0, d0, d7
 800af7e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800af82:	e734      	b.n	800adee <powf+0xe6>
 800af84:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800af88:	e731      	b.n	800adee <powf+0xe6>
 800af8a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800afcc <powf+0x2c4>
 800af8e:	e72e      	b.n	800adee <powf+0xe6>
 800af90:	9303      	str	r3, [sp, #12]
 800af92:	eddd 7a03 	vldr	s15, [sp, #12]
 800af96:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800af9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800af9e:	e7a1      	b.n	800aee4 <powf+0x1dc>
 800afa0:	ffd1d571 	.word	0xffd1d571
 800afa4:	405fffff 	.word	0x405fffff
 800afa8:	ffa3aae2 	.word	0xffa3aae2
 800afac:	405fffff 	.word	0x405fffff
 800afb0:	00000000 	.word	0x00000000
 800afb4:	c062c000 	.word	0xc062c000
 800afb8:	00000000 	.word	0x00000000
 800afbc:	c062a000 	.word	0xc062a000
 800afc0:	0800b0f0 	.word	0x0800b0f0
 800afc4:	4b000000 	.word	0x4b000000
 800afc8:	0800b218 	.word	0x0800b218
 800afcc:	00000000 	.word	0x00000000

0800afd0 <with_errnof>:
 800afd0:	b513      	push	{r0, r1, r4, lr}
 800afd2:	4604      	mov	r4, r0
 800afd4:	ed8d 0a01 	vstr	s0, [sp, #4]
 800afd8:	f7ff fe4c 	bl	800ac74 <__errno>
 800afdc:	ed9d 0a01 	vldr	s0, [sp, #4]
 800afe0:	6004      	str	r4, [r0, #0]
 800afe2:	b002      	add	sp, #8
 800afe4:	bd10      	pop	{r4, pc}

0800afe6 <xflowf>:
 800afe6:	b130      	cbz	r0, 800aff6 <xflowf+0x10>
 800afe8:	eef1 7a40 	vneg.f32	s15, s0
 800afec:	ee27 0a80 	vmul.f32	s0, s15, s0
 800aff0:	2022      	movs	r0, #34	; 0x22
 800aff2:	f7ff bfed 	b.w	800afd0 <with_errnof>
 800aff6:	eef0 7a40 	vmov.f32	s15, s0
 800affa:	e7f7      	b.n	800afec <xflowf+0x6>

0800affc <__math_uflowf>:
 800affc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b004 <__math_uflowf+0x8>
 800b000:	f7ff bff1 	b.w	800afe6 <xflowf>
 800b004:	10000000 	.word	0x10000000

0800b008 <__math_may_uflowf>:
 800b008:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b010 <__math_may_uflowf+0x8>
 800b00c:	f7ff bfeb 	b.w	800afe6 <xflowf>
 800b010:	1a200000 	.word	0x1a200000

0800b014 <__math_oflowf>:
 800b014:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b01c <__math_oflowf+0x8>
 800b018:	f7ff bfe5 	b.w	800afe6 <xflowf>
 800b01c:	70000000 	.word	0x70000000

0800b020 <__math_divzerof>:
 800b020:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b024:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800b028:	2800      	cmp	r0, #0
 800b02a:	fe40 7a27 	vseleq.f32	s15, s0, s15
 800b02e:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800b03c <__math_divzerof+0x1c>
 800b032:	2022      	movs	r0, #34	; 0x22
 800b034:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800b038:	f7ff bfca 	b.w	800afd0 <with_errnof>
 800b03c:	00000000 	.word	0x00000000

0800b040 <__math_invalidf>:
 800b040:	eef0 7a40 	vmov.f32	s15, s0
 800b044:	ee30 7a40 	vsub.f32	s14, s0, s0
 800b048:	eef4 7a67 	vcmp.f32	s15, s15
 800b04c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b050:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800b054:	d602      	bvs.n	800b05c <__math_invalidf+0x1c>
 800b056:	2021      	movs	r0, #33	; 0x21
 800b058:	f7ff bfba 	b.w	800afd0 <with_errnof>
 800b05c:	4770      	bx	lr
	...

0800b060 <_init>:
 800b060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b062:	bf00      	nop
 800b064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b066:	bc08      	pop	{r3}
 800b068:	469e      	mov	lr, r3
 800b06a:	4770      	bx	lr

0800b06c <_fini>:
 800b06c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b06e:	bf00      	nop
 800b070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b072:	bc08      	pop	{r3}
 800b074:	469e      	mov	lr, r3
 800b076:	4770      	bx	lr
