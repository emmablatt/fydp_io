
mic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091e0  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c0  080094b0  080094b0  000194b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08009770  08009770  00019770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08009774  08009774  00019774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000474  24000000  08009778  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000002c4  24000474  08009bec  00020474  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000738  08009bec  00020738  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020474  2**0
                  CONTENTS, READONLY
  9 .debug_info   00017789  00000000  00000000  000204a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002d12  00000000  00000000  00037c2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000aa8  00000000  00000000  0003a940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000009b8  00000000  00000000  0003b3e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00002cbc  00000000  00000000  0003bda0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000104de  00000000  00000000  0003ea5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001406b9  00000000  00000000  0004ef3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      000000d1  00000000  00000000  0018f5f3  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002afc  00000000  00000000  0018f6c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000474 	.word	0x24000474
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08009498 	.word	0x08009498

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000478 	.word	0x24000478
 800030c:	08009498 	.word	0x08009498

08000310 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b082      	sub	sp, #8
 8000314:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000316:	2003      	movs	r0, #3
 8000318:	f000 f95c 	bl	80005d4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800031c:	f003 fbe2 	bl	8003ae4 <HAL_RCC_GetSysClockFreq>
 8000320:	4602      	mov	r2, r0
 8000322:	4b15      	ldr	r3, [pc, #84]	; (8000378 <HAL_Init+0x68>)
 8000324:	699b      	ldr	r3, [r3, #24]
 8000326:	0a1b      	lsrs	r3, r3, #8
 8000328:	f003 030f 	and.w	r3, r3, #15
 800032c:	4913      	ldr	r1, [pc, #76]	; (800037c <HAL_Init+0x6c>)
 800032e:	5ccb      	ldrb	r3, [r1, r3]
 8000330:	f003 031f 	and.w	r3, r3, #31
 8000334:	fa22 f303 	lsr.w	r3, r2, r3
 8000338:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800033a:	4b0f      	ldr	r3, [pc, #60]	; (8000378 <HAL_Init+0x68>)
 800033c:	699b      	ldr	r3, [r3, #24]
 800033e:	f003 030f 	and.w	r3, r3, #15
 8000342:	4a0e      	ldr	r2, [pc, #56]	; (800037c <HAL_Init+0x6c>)
 8000344:	5cd3      	ldrb	r3, [r2, r3]
 8000346:	f003 031f 	and.w	r3, r3, #31
 800034a:	687a      	ldr	r2, [r7, #4]
 800034c:	fa22 f303 	lsr.w	r3, r2, r3
 8000350:	4a0b      	ldr	r2, [pc, #44]	; (8000380 <HAL_Init+0x70>)
 8000352:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000354:	4a0b      	ldr	r2, [pc, #44]	; (8000384 <HAL_Init+0x74>)
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800035a:	2000      	movs	r0, #0
 800035c:	f000 f814 	bl	8000388 <HAL_InitTick>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d001      	beq.n	800036a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000366:	2301      	movs	r3, #1
 8000368:	e002      	b.n	8000370 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800036a:	f006 fd47 	bl	8006dfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800036e:	2300      	movs	r3, #0
}
 8000370:	4618      	mov	r0, r3
 8000372:	3708      	adds	r7, #8
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}
 8000378:	58024400 	.word	0x58024400
 800037c:	080094f0 	.word	0x080094f0
 8000380:	2400040c 	.word	0x2400040c
 8000384:	24000408 	.word	0x24000408

08000388 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000390:	4b15      	ldr	r3, [pc, #84]	; (80003e8 <HAL_InitTick+0x60>)
 8000392:	781b      	ldrb	r3, [r3, #0]
 8000394:	2b00      	cmp	r3, #0
 8000396:	d101      	bne.n	800039c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000398:	2301      	movs	r3, #1
 800039a:	e021      	b.n	80003e0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800039c:	4b13      	ldr	r3, [pc, #76]	; (80003ec <HAL_InitTick+0x64>)
 800039e:	681a      	ldr	r2, [r3, #0]
 80003a0:	4b11      	ldr	r3, [pc, #68]	; (80003e8 <HAL_InitTick+0x60>)
 80003a2:	781b      	ldrb	r3, [r3, #0]
 80003a4:	4619      	mov	r1, r3
 80003a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80003ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80003b2:	4618      	mov	r0, r3
 80003b4:	f000 f941 	bl	800063a <HAL_SYSTICK_Config>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d001      	beq.n	80003c2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80003be:	2301      	movs	r3, #1
 80003c0:	e00e      	b.n	80003e0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	2b0f      	cmp	r3, #15
 80003c6:	d80a      	bhi.n	80003de <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80003c8:	2200      	movs	r2, #0
 80003ca:	6879      	ldr	r1, [r7, #4]
 80003cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80003d0:	f000 f90b 	bl	80005ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80003d4:	4a06      	ldr	r2, [pc, #24]	; (80003f0 <HAL_InitTick+0x68>)
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80003da:	2300      	movs	r3, #0
 80003dc:	e000      	b.n	80003e0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80003de:	2301      	movs	r3, #1
}
 80003e0:	4618      	mov	r0, r3
 80003e2:	3708      	adds	r7, #8
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	24000404 	.word	0x24000404
 80003ec:	24000408 	.word	0x24000408
 80003f0:	24000400 	.word	0x24000400

080003f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80003f8:	4b06      	ldr	r3, [pc, #24]	; (8000414 <HAL_IncTick+0x20>)
 80003fa:	781b      	ldrb	r3, [r3, #0]
 80003fc:	461a      	mov	r2, r3
 80003fe:	4b06      	ldr	r3, [pc, #24]	; (8000418 <HAL_IncTick+0x24>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	4413      	add	r3, r2
 8000404:	4a04      	ldr	r2, [pc, #16]	; (8000418 <HAL_IncTick+0x24>)
 8000406:	6013      	str	r3, [r2, #0]
}
 8000408:	bf00      	nop
 800040a:	46bd      	mov	sp, r7
 800040c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000410:	4770      	bx	lr
 8000412:	bf00      	nop
 8000414:	24000404 	.word	0x24000404
 8000418:	2400049c 	.word	0x2400049c

0800041c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
  return uwTick;
 8000420:	4b03      	ldr	r3, [pc, #12]	; (8000430 <HAL_GetTick+0x14>)
 8000422:	681b      	ldr	r3, [r3, #0]
}
 8000424:	4618      	mov	r0, r3
 8000426:	46bd      	mov	sp, r7
 8000428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042c:	4770      	bx	lr
 800042e:	bf00      	nop
 8000430:	2400049c 	.word	0x2400049c

08000434 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000434:	b480      	push	{r7}
 8000436:	b085      	sub	sp, #20
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	f003 0307 	and.w	r3, r3, #7
 8000442:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000444:	4b0b      	ldr	r3, [pc, #44]	; (8000474 <__NVIC_SetPriorityGrouping+0x40>)
 8000446:	68db      	ldr	r3, [r3, #12]
 8000448:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800044a:	68ba      	ldr	r2, [r7, #8]
 800044c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000450:	4013      	ands	r3, r2
 8000452:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000458:	68bb      	ldr	r3, [r7, #8]
 800045a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800045c:	4b06      	ldr	r3, [pc, #24]	; (8000478 <__NVIC_SetPriorityGrouping+0x44>)
 800045e:	4313      	orrs	r3, r2
 8000460:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000462:	4a04      	ldr	r2, [pc, #16]	; (8000474 <__NVIC_SetPriorityGrouping+0x40>)
 8000464:	68bb      	ldr	r3, [r7, #8]
 8000466:	60d3      	str	r3, [r2, #12]
}
 8000468:	bf00      	nop
 800046a:	3714      	adds	r7, #20
 800046c:	46bd      	mov	sp, r7
 800046e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000472:	4770      	bx	lr
 8000474:	e000ed00 	.word	0xe000ed00
 8000478:	05fa0000 	.word	0x05fa0000

0800047c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000480:	4b04      	ldr	r3, [pc, #16]	; (8000494 <__NVIC_GetPriorityGrouping+0x18>)
 8000482:	68db      	ldr	r3, [r3, #12]
 8000484:	0a1b      	lsrs	r3, r3, #8
 8000486:	f003 0307 	and.w	r3, r3, #7
}
 800048a:	4618      	mov	r0, r3
 800048c:	46bd      	mov	sp, r7
 800048e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000492:	4770      	bx	lr
 8000494:	e000ed00 	.word	0xe000ed00

08000498 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000498:	b480      	push	{r7}
 800049a:	b083      	sub	sp, #12
 800049c:	af00      	add	r7, sp, #0
 800049e:	4603      	mov	r3, r0
 80004a0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80004a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	db0b      	blt.n	80004c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004aa:	88fb      	ldrh	r3, [r7, #6]
 80004ac:	f003 021f 	and.w	r2, r3, #31
 80004b0:	4907      	ldr	r1, [pc, #28]	; (80004d0 <__NVIC_EnableIRQ+0x38>)
 80004b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80004b6:	095b      	lsrs	r3, r3, #5
 80004b8:	2001      	movs	r0, #1
 80004ba:	fa00 f202 	lsl.w	r2, r0, r2
 80004be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80004c2:	bf00      	nop
 80004c4:	370c      	adds	r7, #12
 80004c6:	46bd      	mov	sp, r7
 80004c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop
 80004d0:	e000e100 	.word	0xe000e100

080004d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
 80004da:	4603      	mov	r3, r0
 80004dc:	6039      	str	r1, [r7, #0]
 80004de:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80004e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	db0a      	blt.n	80004fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004e8:	683b      	ldr	r3, [r7, #0]
 80004ea:	b2da      	uxtb	r2, r3
 80004ec:	490c      	ldr	r1, [pc, #48]	; (8000520 <__NVIC_SetPriority+0x4c>)
 80004ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80004f2:	0112      	lsls	r2, r2, #4
 80004f4:	b2d2      	uxtb	r2, r2
 80004f6:	440b      	add	r3, r1
 80004f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80004fc:	e00a      	b.n	8000514 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004fe:	683b      	ldr	r3, [r7, #0]
 8000500:	b2da      	uxtb	r2, r3
 8000502:	4908      	ldr	r1, [pc, #32]	; (8000524 <__NVIC_SetPriority+0x50>)
 8000504:	88fb      	ldrh	r3, [r7, #6]
 8000506:	f003 030f 	and.w	r3, r3, #15
 800050a:	3b04      	subs	r3, #4
 800050c:	0112      	lsls	r2, r2, #4
 800050e:	b2d2      	uxtb	r2, r2
 8000510:	440b      	add	r3, r1
 8000512:	761a      	strb	r2, [r3, #24]
}
 8000514:	bf00      	nop
 8000516:	370c      	adds	r7, #12
 8000518:	46bd      	mov	sp, r7
 800051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051e:	4770      	bx	lr
 8000520:	e000e100 	.word	0xe000e100
 8000524:	e000ed00 	.word	0xe000ed00

08000528 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000528:	b480      	push	{r7}
 800052a:	b089      	sub	sp, #36	; 0x24
 800052c:	af00      	add	r7, sp, #0
 800052e:	60f8      	str	r0, [r7, #12]
 8000530:	60b9      	str	r1, [r7, #8]
 8000532:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	f003 0307 	and.w	r3, r3, #7
 800053a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800053c:	69fb      	ldr	r3, [r7, #28]
 800053e:	f1c3 0307 	rsb	r3, r3, #7
 8000542:	2b04      	cmp	r3, #4
 8000544:	bf28      	it	cs
 8000546:	2304      	movcs	r3, #4
 8000548:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800054a:	69fb      	ldr	r3, [r7, #28]
 800054c:	3304      	adds	r3, #4
 800054e:	2b06      	cmp	r3, #6
 8000550:	d902      	bls.n	8000558 <NVIC_EncodePriority+0x30>
 8000552:	69fb      	ldr	r3, [r7, #28]
 8000554:	3b03      	subs	r3, #3
 8000556:	e000      	b.n	800055a <NVIC_EncodePriority+0x32>
 8000558:	2300      	movs	r3, #0
 800055a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800055c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000560:	69bb      	ldr	r3, [r7, #24]
 8000562:	fa02 f303 	lsl.w	r3, r2, r3
 8000566:	43da      	mvns	r2, r3
 8000568:	68bb      	ldr	r3, [r7, #8]
 800056a:	401a      	ands	r2, r3
 800056c:	697b      	ldr	r3, [r7, #20]
 800056e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000570:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000574:	697b      	ldr	r3, [r7, #20]
 8000576:	fa01 f303 	lsl.w	r3, r1, r3
 800057a:	43d9      	mvns	r1, r3
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000580:	4313      	orrs	r3, r2
         );
}
 8000582:	4618      	mov	r0, r3
 8000584:	3724      	adds	r7, #36	; 0x24
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr
	...

08000590 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	3b01      	subs	r3, #1
 800059c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80005a0:	d301      	bcc.n	80005a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80005a2:	2301      	movs	r3, #1
 80005a4:	e00f      	b.n	80005c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005a6:	4a0a      	ldr	r2, [pc, #40]	; (80005d0 <SysTick_Config+0x40>)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	3b01      	subs	r3, #1
 80005ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80005ae:	210f      	movs	r1, #15
 80005b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80005b4:	f7ff ff8e 	bl	80004d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005b8:	4b05      	ldr	r3, [pc, #20]	; (80005d0 <SysTick_Config+0x40>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005be:	4b04      	ldr	r3, [pc, #16]	; (80005d0 <SysTick_Config+0x40>)
 80005c0:	2207      	movs	r2, #7
 80005c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80005c4:	2300      	movs	r3, #0
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	3708      	adds	r7, #8
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	e000e010 	.word	0xe000e010

080005d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80005dc:	6878      	ldr	r0, [r7, #4]
 80005de:	f7ff ff29 	bl	8000434 <__NVIC_SetPriorityGrouping>
}
 80005e2:	bf00      	nop
 80005e4:	3708      	adds	r7, #8
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}

080005ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005ea:	b580      	push	{r7, lr}
 80005ec:	b086      	sub	sp, #24
 80005ee:	af00      	add	r7, sp, #0
 80005f0:	4603      	mov	r3, r0
 80005f2:	60b9      	str	r1, [r7, #8]
 80005f4:	607a      	str	r2, [r7, #4]
 80005f6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80005f8:	f7ff ff40 	bl	800047c <__NVIC_GetPriorityGrouping>
 80005fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80005fe:	687a      	ldr	r2, [r7, #4]
 8000600:	68b9      	ldr	r1, [r7, #8]
 8000602:	6978      	ldr	r0, [r7, #20]
 8000604:	f7ff ff90 	bl	8000528 <NVIC_EncodePriority>
 8000608:	4602      	mov	r2, r0
 800060a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800060e:	4611      	mov	r1, r2
 8000610:	4618      	mov	r0, r3
 8000612:	f7ff ff5f 	bl	80004d4 <__NVIC_SetPriority>
}
 8000616:	bf00      	nop
 8000618:	3718      	adds	r7, #24
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}

0800061e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800061e:	b580      	push	{r7, lr}
 8000620:	b082      	sub	sp, #8
 8000622:	af00      	add	r7, sp, #0
 8000624:	4603      	mov	r3, r0
 8000626:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000628:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800062c:	4618      	mov	r0, r3
 800062e:	f7ff ff33 	bl	8000498 <__NVIC_EnableIRQ>
}
 8000632:	bf00      	nop
 8000634:	3708      	adds	r7, #8
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}

0800063a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800063a:	b580      	push	{r7, lr}
 800063c:	b082      	sub	sp, #8
 800063e:	af00      	add	r7, sp, #0
 8000640:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000642:	6878      	ldr	r0, [r7, #4]
 8000644:	f7ff ffa4 	bl	8000590 <SysTick_Config>
 8000648:	4603      	mov	r3, r0
}
 800064a:	4618      	mov	r0, r3
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
	...

08000654 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d101      	bne.n	8000666 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000662:	2301      	movs	r3, #1
 8000664:	e054      	b.n	8000710 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	7f5b      	ldrb	r3, [r3, #29]
 800066a:	b2db      	uxtb	r3, r3
 800066c:	2b00      	cmp	r3, #0
 800066e:	d105      	bne.n	800067c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	2200      	movs	r2, #0
 8000674:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000676:	6878      	ldr	r0, [r7, #4]
 8000678:	f006 fbda 	bl	8006e30 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	2202      	movs	r2, #2
 8000680:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	791b      	ldrb	r3, [r3, #4]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d10c      	bne.n	80006a4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a22      	ldr	r2, [pc, #136]	; (8000718 <HAL_CRC_Init+0xc4>)
 8000690:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	689a      	ldr	r2, [r3, #8]
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f022 0218 	bic.w	r2, r2, #24
 80006a0:	609a      	str	r2, [r3, #8]
 80006a2:	e00c      	b.n	80006be <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	6899      	ldr	r1, [r3, #8]
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	68db      	ldr	r3, [r3, #12]
 80006ac:	461a      	mov	r2, r3
 80006ae:	6878      	ldr	r0, [r7, #4]
 80006b0:	f000 f834 	bl	800071c <HAL_CRCEx_Polynomial_Set>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80006ba:	2301      	movs	r3, #1
 80006bc:	e028      	b.n	8000710 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	795b      	ldrb	r3, [r3, #5]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d105      	bne.n	80006d2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80006ce:	611a      	str	r2, [r3, #16]
 80006d0:	e004      	b.n	80006dc <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	687a      	ldr	r2, [r7, #4]
 80006d8:	6912      	ldr	r2, [r2, #16]
 80006da:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	689b      	ldr	r3, [r3, #8]
 80006e2:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	695a      	ldr	r2, [r3, #20]
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	430a      	orrs	r2, r1
 80006f0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	689b      	ldr	r3, [r3, #8]
 80006f8:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	699a      	ldr	r2, [r3, #24]
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	430a      	orrs	r2, r1
 8000706:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	2201      	movs	r2, #1
 800070c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800070e:	2300      	movs	r3, #0
}
 8000710:	4618      	mov	r0, r3
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	04c11db7 	.word	0x04c11db7

0800071c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800071c:	b480      	push	{r7}
 800071e:	b087      	sub	sp, #28
 8000720:	af00      	add	r7, sp, #0
 8000722:	60f8      	str	r0, [r7, #12]
 8000724:	60b9      	str	r1, [r7, #8]
 8000726:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000728:	2300      	movs	r3, #0
 800072a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800072c:	231f      	movs	r3, #31
 800072e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8000730:	bf00      	nop
 8000732:	693b      	ldr	r3, [r7, #16]
 8000734:	1e5a      	subs	r2, r3, #1
 8000736:	613a      	str	r2, [r7, #16]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d009      	beq.n	8000750 <HAL_CRCEx_Polynomial_Set+0x34>
 800073c:	693b      	ldr	r3, [r7, #16]
 800073e:	f003 031f 	and.w	r3, r3, #31
 8000742:	68ba      	ldr	r2, [r7, #8]
 8000744:	fa22 f303 	lsr.w	r3, r2, r3
 8000748:	f003 0301 	and.w	r3, r3, #1
 800074c:	2b00      	cmp	r3, #0
 800074e:	d0f0      	beq.n	8000732 <HAL_CRCEx_Polynomial_Set+0x16>
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	2b18      	cmp	r3, #24
 8000754:	d846      	bhi.n	80007e4 <HAL_CRCEx_Polynomial_Set+0xc8>
 8000756:	a201      	add	r2, pc, #4	; (adr r2, 800075c <HAL_CRCEx_Polynomial_Set+0x40>)
 8000758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800075c:	080007eb 	.word	0x080007eb
 8000760:	080007e5 	.word	0x080007e5
 8000764:	080007e5 	.word	0x080007e5
 8000768:	080007e5 	.word	0x080007e5
 800076c:	080007e5 	.word	0x080007e5
 8000770:	080007e5 	.word	0x080007e5
 8000774:	080007e5 	.word	0x080007e5
 8000778:	080007e5 	.word	0x080007e5
 800077c:	080007d9 	.word	0x080007d9
 8000780:	080007e5 	.word	0x080007e5
 8000784:	080007e5 	.word	0x080007e5
 8000788:	080007e5 	.word	0x080007e5
 800078c:	080007e5 	.word	0x080007e5
 8000790:	080007e5 	.word	0x080007e5
 8000794:	080007e5 	.word	0x080007e5
 8000798:	080007e5 	.word	0x080007e5
 800079c:	080007cd 	.word	0x080007cd
 80007a0:	080007e5 	.word	0x080007e5
 80007a4:	080007e5 	.word	0x080007e5
 80007a8:	080007e5 	.word	0x080007e5
 80007ac:	080007e5 	.word	0x080007e5
 80007b0:	080007e5 	.word	0x080007e5
 80007b4:	080007e5 	.word	0x080007e5
 80007b8:	080007e5 	.word	0x080007e5
 80007bc:	080007c1 	.word	0x080007c1
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80007c0:	693b      	ldr	r3, [r7, #16]
 80007c2:	2b06      	cmp	r3, #6
 80007c4:	d913      	bls.n	80007ee <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80007c6:	2301      	movs	r3, #1
 80007c8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80007ca:	e010      	b.n	80007ee <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80007cc:	693b      	ldr	r3, [r7, #16]
 80007ce:	2b07      	cmp	r3, #7
 80007d0:	d90f      	bls.n	80007f2 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80007d2:	2301      	movs	r3, #1
 80007d4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80007d6:	e00c      	b.n	80007f2 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80007d8:	693b      	ldr	r3, [r7, #16]
 80007da:	2b0f      	cmp	r3, #15
 80007dc:	d90b      	bls.n	80007f6 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80007de:	2301      	movs	r3, #1
 80007e0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80007e2:	e008      	b.n	80007f6 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80007e4:	2301      	movs	r3, #1
 80007e6:	75fb      	strb	r3, [r7, #23]
      break;
 80007e8:	e006      	b.n	80007f8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80007ea:	bf00      	nop
 80007ec:	e004      	b.n	80007f8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80007ee:	bf00      	nop
 80007f0:	e002      	b.n	80007f8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80007f2:	bf00      	nop
 80007f4:	e000      	b.n	80007f8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80007f6:	bf00      	nop
  }
  if (status == HAL_OK)
 80007f8:	7dfb      	ldrb	r3, [r7, #23]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d10d      	bne.n	800081a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	68ba      	ldr	r2, [r7, #8]
 8000804:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	689b      	ldr	r3, [r3, #8]
 800080c:	f023 0118 	bic.w	r1, r3, #24
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	687a      	ldr	r2, [r7, #4]
 8000816:	430a      	orrs	r2, r1
 8000818:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800081a:	7dfb      	ldrb	r3, [r7, #23]
}
 800081c:	4618      	mov	r0, r3
 800081e:	371c      	adds	r7, #28
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr

08000828 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b086      	sub	sp, #24
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8000830:	f7ff fdf4 	bl	800041c <HAL_GetTick>
 8000834:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d101      	bne.n	8000840 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800083c:	2301      	movs	r3, #1
 800083e:	e314      	b.n	8000e6a <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a66      	ldr	r2, [pc, #408]	; (80009e0 <HAL_DMA_Init+0x1b8>)
 8000846:	4293      	cmp	r3, r2
 8000848:	d04a      	beq.n	80008e0 <HAL_DMA_Init+0xb8>
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4a65      	ldr	r2, [pc, #404]	; (80009e4 <HAL_DMA_Init+0x1bc>)
 8000850:	4293      	cmp	r3, r2
 8000852:	d045      	beq.n	80008e0 <HAL_DMA_Init+0xb8>
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a63      	ldr	r2, [pc, #396]	; (80009e8 <HAL_DMA_Init+0x1c0>)
 800085a:	4293      	cmp	r3, r2
 800085c:	d040      	beq.n	80008e0 <HAL_DMA_Init+0xb8>
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	4a62      	ldr	r2, [pc, #392]	; (80009ec <HAL_DMA_Init+0x1c4>)
 8000864:	4293      	cmp	r3, r2
 8000866:	d03b      	beq.n	80008e0 <HAL_DMA_Init+0xb8>
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a60      	ldr	r2, [pc, #384]	; (80009f0 <HAL_DMA_Init+0x1c8>)
 800086e:	4293      	cmp	r3, r2
 8000870:	d036      	beq.n	80008e0 <HAL_DMA_Init+0xb8>
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	4a5f      	ldr	r2, [pc, #380]	; (80009f4 <HAL_DMA_Init+0x1cc>)
 8000878:	4293      	cmp	r3, r2
 800087a:	d031      	beq.n	80008e0 <HAL_DMA_Init+0xb8>
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a5d      	ldr	r2, [pc, #372]	; (80009f8 <HAL_DMA_Init+0x1d0>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d02c      	beq.n	80008e0 <HAL_DMA_Init+0xb8>
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4a5c      	ldr	r2, [pc, #368]	; (80009fc <HAL_DMA_Init+0x1d4>)
 800088c:	4293      	cmp	r3, r2
 800088e:	d027      	beq.n	80008e0 <HAL_DMA_Init+0xb8>
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a5a      	ldr	r2, [pc, #360]	; (8000a00 <HAL_DMA_Init+0x1d8>)
 8000896:	4293      	cmp	r3, r2
 8000898:	d022      	beq.n	80008e0 <HAL_DMA_Init+0xb8>
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4a59      	ldr	r2, [pc, #356]	; (8000a04 <HAL_DMA_Init+0x1dc>)
 80008a0:	4293      	cmp	r3, r2
 80008a2:	d01d      	beq.n	80008e0 <HAL_DMA_Init+0xb8>
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a57      	ldr	r2, [pc, #348]	; (8000a08 <HAL_DMA_Init+0x1e0>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d018      	beq.n	80008e0 <HAL_DMA_Init+0xb8>
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4a56      	ldr	r2, [pc, #344]	; (8000a0c <HAL_DMA_Init+0x1e4>)
 80008b4:	4293      	cmp	r3, r2
 80008b6:	d013      	beq.n	80008e0 <HAL_DMA_Init+0xb8>
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a54      	ldr	r2, [pc, #336]	; (8000a10 <HAL_DMA_Init+0x1e8>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d00e      	beq.n	80008e0 <HAL_DMA_Init+0xb8>
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4a53      	ldr	r2, [pc, #332]	; (8000a14 <HAL_DMA_Init+0x1ec>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d009      	beq.n	80008e0 <HAL_DMA_Init+0xb8>
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a51      	ldr	r2, [pc, #324]	; (8000a18 <HAL_DMA_Init+0x1f0>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d004      	beq.n	80008e0 <HAL_DMA_Init+0xb8>
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	4a50      	ldr	r2, [pc, #320]	; (8000a1c <HAL_DMA_Init+0x1f4>)
 80008dc:	4293      	cmp	r3, r2
 80008de:	d101      	bne.n	80008e4 <HAL_DMA_Init+0xbc>
 80008e0:	2301      	movs	r3, #1
 80008e2:	e000      	b.n	80008e6 <HAL_DMA_Init+0xbe>
 80008e4:	2300      	movs	r3, #0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	f000 813c 	beq.w	8000b64 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	2202      	movs	r2, #2
 80008f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	2200      	movs	r2, #0
 80008f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a37      	ldr	r2, [pc, #220]	; (80009e0 <HAL_DMA_Init+0x1b8>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d04a      	beq.n	800099c <HAL_DMA_Init+0x174>
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4a36      	ldr	r2, [pc, #216]	; (80009e4 <HAL_DMA_Init+0x1bc>)
 800090c:	4293      	cmp	r3, r2
 800090e:	d045      	beq.n	800099c <HAL_DMA_Init+0x174>
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a34      	ldr	r2, [pc, #208]	; (80009e8 <HAL_DMA_Init+0x1c0>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d040      	beq.n	800099c <HAL_DMA_Init+0x174>
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	4a33      	ldr	r2, [pc, #204]	; (80009ec <HAL_DMA_Init+0x1c4>)
 8000920:	4293      	cmp	r3, r2
 8000922:	d03b      	beq.n	800099c <HAL_DMA_Init+0x174>
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a31      	ldr	r2, [pc, #196]	; (80009f0 <HAL_DMA_Init+0x1c8>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d036      	beq.n	800099c <HAL_DMA_Init+0x174>
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4a30      	ldr	r2, [pc, #192]	; (80009f4 <HAL_DMA_Init+0x1cc>)
 8000934:	4293      	cmp	r3, r2
 8000936:	d031      	beq.n	800099c <HAL_DMA_Init+0x174>
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a2e      	ldr	r2, [pc, #184]	; (80009f8 <HAL_DMA_Init+0x1d0>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d02c      	beq.n	800099c <HAL_DMA_Init+0x174>
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4a2d      	ldr	r2, [pc, #180]	; (80009fc <HAL_DMA_Init+0x1d4>)
 8000948:	4293      	cmp	r3, r2
 800094a:	d027      	beq.n	800099c <HAL_DMA_Init+0x174>
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a2b      	ldr	r2, [pc, #172]	; (8000a00 <HAL_DMA_Init+0x1d8>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d022      	beq.n	800099c <HAL_DMA_Init+0x174>
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a2a      	ldr	r2, [pc, #168]	; (8000a04 <HAL_DMA_Init+0x1dc>)
 800095c:	4293      	cmp	r3, r2
 800095e:	d01d      	beq.n	800099c <HAL_DMA_Init+0x174>
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a28      	ldr	r2, [pc, #160]	; (8000a08 <HAL_DMA_Init+0x1e0>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d018      	beq.n	800099c <HAL_DMA_Init+0x174>
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4a27      	ldr	r2, [pc, #156]	; (8000a0c <HAL_DMA_Init+0x1e4>)
 8000970:	4293      	cmp	r3, r2
 8000972:	d013      	beq.n	800099c <HAL_DMA_Init+0x174>
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a25      	ldr	r2, [pc, #148]	; (8000a10 <HAL_DMA_Init+0x1e8>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d00e      	beq.n	800099c <HAL_DMA_Init+0x174>
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4a24      	ldr	r2, [pc, #144]	; (8000a14 <HAL_DMA_Init+0x1ec>)
 8000984:	4293      	cmp	r3, r2
 8000986:	d009      	beq.n	800099c <HAL_DMA_Init+0x174>
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a22      	ldr	r2, [pc, #136]	; (8000a18 <HAL_DMA_Init+0x1f0>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d004      	beq.n	800099c <HAL_DMA_Init+0x174>
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4a21      	ldr	r2, [pc, #132]	; (8000a1c <HAL_DMA_Init+0x1f4>)
 8000998:	4293      	cmp	r3, r2
 800099a:	d108      	bne.n	80009ae <HAL_DMA_Init+0x186>
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	681a      	ldr	r2, [r3, #0]
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	f022 0201 	bic.w	r2, r2, #1
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	e007      	b.n	80009be <HAL_DMA_Init+0x196>
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	681a      	ldr	r2, [r3, #0]
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f022 0201 	bic.w	r2, r2, #1
 80009bc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80009be:	e02f      	b.n	8000a20 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80009c0:	f7ff fd2c 	bl	800041c <HAL_GetTick>
 80009c4:	4602      	mov	r2, r0
 80009c6:	693b      	ldr	r3, [r7, #16]
 80009c8:	1ad3      	subs	r3, r2, r3
 80009ca:	2b05      	cmp	r3, #5
 80009cc:	d928      	bls.n	8000a20 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2220      	movs	r2, #32
 80009d2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	2203      	movs	r2, #3
 80009d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80009dc:	2301      	movs	r3, #1
 80009de:	e244      	b.n	8000e6a <HAL_DMA_Init+0x642>
 80009e0:	40020010 	.word	0x40020010
 80009e4:	40020028 	.word	0x40020028
 80009e8:	40020040 	.word	0x40020040
 80009ec:	40020058 	.word	0x40020058
 80009f0:	40020070 	.word	0x40020070
 80009f4:	40020088 	.word	0x40020088
 80009f8:	400200a0 	.word	0x400200a0
 80009fc:	400200b8 	.word	0x400200b8
 8000a00:	40020410 	.word	0x40020410
 8000a04:	40020428 	.word	0x40020428
 8000a08:	40020440 	.word	0x40020440
 8000a0c:	40020458 	.word	0x40020458
 8000a10:	40020470 	.word	0x40020470
 8000a14:	40020488 	.word	0x40020488
 8000a18:	400204a0 	.word	0x400204a0
 8000a1c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d1c8      	bne.n	80009c0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000a36:	697a      	ldr	r2, [r7, #20]
 8000a38:	4b84      	ldr	r3, [pc, #528]	; (8000c4c <HAL_DMA_Init+0x424>)
 8000a3a:	4013      	ands	r3, r2
 8000a3c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8000a46:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	691b      	ldr	r3, [r3, #16]
 8000a4c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a52:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	699b      	ldr	r3, [r3, #24]
 8000a58:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a5e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	6a1b      	ldr	r3, [r3, #32]
 8000a64:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8000a66:	697a      	ldr	r2, [r7, #20]
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a70:	2b04      	cmp	r3, #4
 8000a72:	d107      	bne.n	8000a84 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7c:	4313      	orrs	r3, r2
 8000a7e:	697a      	ldr	r2, [r7, #20]
 8000a80:	4313      	orrs	r3, r2
 8000a82:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	2b28      	cmp	r3, #40	; 0x28
 8000a8a:	d903      	bls.n	8000a94 <HAL_DMA_Init+0x26c>
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	2b2e      	cmp	r3, #46	; 0x2e
 8000a92:	d91f      	bls.n	8000ad4 <HAL_DMA_Init+0x2ac>
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	2b3e      	cmp	r3, #62	; 0x3e
 8000a9a:	d903      	bls.n	8000aa4 <HAL_DMA_Init+0x27c>
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	2b42      	cmp	r3, #66	; 0x42
 8000aa2:	d917      	bls.n	8000ad4 <HAL_DMA_Init+0x2ac>
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	2b46      	cmp	r3, #70	; 0x46
 8000aaa:	d903      	bls.n	8000ab4 <HAL_DMA_Init+0x28c>
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	2b48      	cmp	r3, #72	; 0x48
 8000ab2:	d90f      	bls.n	8000ad4 <HAL_DMA_Init+0x2ac>
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	2b4e      	cmp	r3, #78	; 0x4e
 8000aba:	d903      	bls.n	8000ac4 <HAL_DMA_Init+0x29c>
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	2b52      	cmp	r3, #82	; 0x52
 8000ac2:	d907      	bls.n	8000ad4 <HAL_DMA_Init+0x2ac>
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	2b73      	cmp	r3, #115	; 0x73
 8000aca:	d905      	bls.n	8000ad8 <HAL_DMA_Init+0x2b0>
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	2b77      	cmp	r3, #119	; 0x77
 8000ad2:	d801      	bhi.n	8000ad8 <HAL_DMA_Init+0x2b0>
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	e000      	b.n	8000ada <HAL_DMA_Init+0x2b2>
 8000ad8:	2300      	movs	r3, #0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d003      	beq.n	8000ae6 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8000ade:	697b      	ldr	r3, [r7, #20]
 8000ae0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000ae4:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	697a      	ldr	r2, [r7, #20]
 8000aec:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	695b      	ldr	r3, [r3, #20]
 8000af4:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	f023 0307 	bic.w	r3, r3, #7
 8000afc:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b02:	697a      	ldr	r2, [r7, #20]
 8000b04:	4313      	orrs	r3, r2
 8000b06:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b0c:	2b04      	cmp	r3, #4
 8000b0e:	d117      	bne.n	8000b40 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b14:	697a      	ldr	r2, [r7, #20]
 8000b16:	4313      	orrs	r3, r2
 8000b18:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d00e      	beq.n	8000b40 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000b22:	6878      	ldr	r0, [r7, #4]
 8000b24:	f001 fdd8 	bl	80026d8 <DMA_CheckFifoParam>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d008      	beq.n	8000b40 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	2240      	movs	r2, #64	; 0x40
 8000b32:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2201      	movs	r2, #1
 8000b38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	e194      	b.n	8000e6a <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	697a      	ldr	r2, [r7, #20]
 8000b46:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	f001 fd13 	bl	8002574 <DMA_CalcBaseAndBitshift>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b56:	f003 031f 	and.w	r3, r3, #31
 8000b5a:	223f      	movs	r2, #63	; 0x3f
 8000b5c:	409a      	lsls	r2, r3
 8000b5e:	68bb      	ldr	r3, [r7, #8]
 8000b60:	609a      	str	r2, [r3, #8]
 8000b62:	e0ca      	b.n	8000cfa <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a39      	ldr	r2, [pc, #228]	; (8000c50 <HAL_DMA_Init+0x428>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d022      	beq.n	8000bb4 <HAL_DMA_Init+0x38c>
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4a38      	ldr	r2, [pc, #224]	; (8000c54 <HAL_DMA_Init+0x42c>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d01d      	beq.n	8000bb4 <HAL_DMA_Init+0x38c>
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a36      	ldr	r2, [pc, #216]	; (8000c58 <HAL_DMA_Init+0x430>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d018      	beq.n	8000bb4 <HAL_DMA_Init+0x38c>
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4a35      	ldr	r2, [pc, #212]	; (8000c5c <HAL_DMA_Init+0x434>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d013      	beq.n	8000bb4 <HAL_DMA_Init+0x38c>
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a33      	ldr	r2, [pc, #204]	; (8000c60 <HAL_DMA_Init+0x438>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d00e      	beq.n	8000bb4 <HAL_DMA_Init+0x38c>
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4a32      	ldr	r2, [pc, #200]	; (8000c64 <HAL_DMA_Init+0x43c>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d009      	beq.n	8000bb4 <HAL_DMA_Init+0x38c>
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a30      	ldr	r2, [pc, #192]	; (8000c68 <HAL_DMA_Init+0x440>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d004      	beq.n	8000bb4 <HAL_DMA_Init+0x38c>
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4a2f      	ldr	r2, [pc, #188]	; (8000c6c <HAL_DMA_Init+0x444>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d101      	bne.n	8000bb8 <HAL_DMA_Init+0x390>
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	e000      	b.n	8000bba <HAL_DMA_Init+0x392>
 8000bb8:	2300      	movs	r3, #0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	f000 8094 	beq.w	8000ce8 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a22      	ldr	r2, [pc, #136]	; (8000c50 <HAL_DMA_Init+0x428>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d021      	beq.n	8000c0e <HAL_DMA_Init+0x3e6>
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4a21      	ldr	r2, [pc, #132]	; (8000c54 <HAL_DMA_Init+0x42c>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d01c      	beq.n	8000c0e <HAL_DMA_Init+0x3e6>
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a1f      	ldr	r2, [pc, #124]	; (8000c58 <HAL_DMA_Init+0x430>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d017      	beq.n	8000c0e <HAL_DMA_Init+0x3e6>
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a1e      	ldr	r2, [pc, #120]	; (8000c5c <HAL_DMA_Init+0x434>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d012      	beq.n	8000c0e <HAL_DMA_Init+0x3e6>
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a1c      	ldr	r2, [pc, #112]	; (8000c60 <HAL_DMA_Init+0x438>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d00d      	beq.n	8000c0e <HAL_DMA_Init+0x3e6>
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4a1b      	ldr	r2, [pc, #108]	; (8000c64 <HAL_DMA_Init+0x43c>)
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d008      	beq.n	8000c0e <HAL_DMA_Init+0x3e6>
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a19      	ldr	r2, [pc, #100]	; (8000c68 <HAL_DMA_Init+0x440>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d003      	beq.n	8000c0e <HAL_DMA_Init+0x3e6>
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4a18      	ldr	r2, [pc, #96]	; (8000c6c <HAL_DMA_Init+0x444>)
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2202      	movs	r2, #2
 8000c14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8000c28:	697a      	ldr	r2, [r7, #20]
 8000c2a:	4b11      	ldr	r3, [pc, #68]	; (8000c70 <HAL_DMA_Init+0x448>)
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	689b      	ldr	r3, [r3, #8]
 8000c34:	2b40      	cmp	r3, #64	; 0x40
 8000c36:	d01d      	beq.n	8000c74 <HAL_DMA_Init+0x44c>
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	689b      	ldr	r3, [r3, #8]
 8000c3c:	2b80      	cmp	r3, #128	; 0x80
 8000c3e:	d102      	bne.n	8000c46 <HAL_DMA_Init+0x41e>
 8000c40:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c44:	e017      	b.n	8000c76 <HAL_DMA_Init+0x44e>
 8000c46:	2300      	movs	r3, #0
 8000c48:	e015      	b.n	8000c76 <HAL_DMA_Init+0x44e>
 8000c4a:	bf00      	nop
 8000c4c:	fe10803f 	.word	0xfe10803f
 8000c50:	58025408 	.word	0x58025408
 8000c54:	5802541c 	.word	0x5802541c
 8000c58:	58025430 	.word	0x58025430
 8000c5c:	58025444 	.word	0x58025444
 8000c60:	58025458 	.word	0x58025458
 8000c64:	5802546c 	.word	0x5802546c
 8000c68:	58025480 	.word	0x58025480
 8000c6c:	58025494 	.word	0x58025494
 8000c70:	fffe000f 	.word	0xfffe000f
 8000c74:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8000c76:	687a      	ldr	r2, [r7, #4]
 8000c78:	68d2      	ldr	r2, [r2, #12]
 8000c7a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8000c7c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	691b      	ldr	r3, [r3, #16]
 8000c82:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8000c84:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	695b      	ldr	r3, [r3, #20]
 8000c8a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8000c8c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	699b      	ldr	r3, [r3, #24]
 8000c92:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8000c94:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	69db      	ldr	r3, [r3, #28]
 8000c9a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8000c9c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6a1b      	ldr	r3, [r3, #32]
 8000ca2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8000ca4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8000ca6:	697a      	ldr	r2, [r7, #20]
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	697a      	ldr	r2, [r7, #20]
 8000cb2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	461a      	mov	r2, r3
 8000cba:	4b6e      	ldr	r3, [pc, #440]	; (8000e74 <HAL_DMA_Init+0x64c>)
 8000cbc:	4413      	add	r3, r2
 8000cbe:	4a6e      	ldr	r2, [pc, #440]	; (8000e78 <HAL_DMA_Init+0x650>)
 8000cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8000cc4:	091b      	lsrs	r3, r3, #4
 8000cc6:	009a      	lsls	r2, r3, #2
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000ccc:	6878      	ldr	r0, [r7, #4]
 8000cce:	f001 fc51 	bl	8002574 <DMA_CalcBaseAndBitshift>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000cda:	f003 031f 	and.w	r3, r3, #31
 8000cde:	2201      	movs	r2, #1
 8000ce0:	409a      	lsls	r2, r3
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	e008      	b.n	8000cfa <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2240      	movs	r2, #64	; 0x40
 8000cec:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2203      	movs	r2, #3
 8000cf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	e0b7      	b.n	8000e6a <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a5f      	ldr	r2, [pc, #380]	; (8000e7c <HAL_DMA_Init+0x654>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d072      	beq.n	8000dea <HAL_DMA_Init+0x5c2>
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a5d      	ldr	r2, [pc, #372]	; (8000e80 <HAL_DMA_Init+0x658>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d06d      	beq.n	8000dea <HAL_DMA_Init+0x5c2>
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4a5c      	ldr	r2, [pc, #368]	; (8000e84 <HAL_DMA_Init+0x65c>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d068      	beq.n	8000dea <HAL_DMA_Init+0x5c2>
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a5a      	ldr	r2, [pc, #360]	; (8000e88 <HAL_DMA_Init+0x660>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d063      	beq.n	8000dea <HAL_DMA_Init+0x5c2>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a59      	ldr	r2, [pc, #356]	; (8000e8c <HAL_DMA_Init+0x664>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d05e      	beq.n	8000dea <HAL_DMA_Init+0x5c2>
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a57      	ldr	r2, [pc, #348]	; (8000e90 <HAL_DMA_Init+0x668>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d059      	beq.n	8000dea <HAL_DMA_Init+0x5c2>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a56      	ldr	r2, [pc, #344]	; (8000e94 <HAL_DMA_Init+0x66c>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d054      	beq.n	8000dea <HAL_DMA_Init+0x5c2>
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a54      	ldr	r2, [pc, #336]	; (8000e98 <HAL_DMA_Init+0x670>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d04f      	beq.n	8000dea <HAL_DMA_Init+0x5c2>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4a53      	ldr	r2, [pc, #332]	; (8000e9c <HAL_DMA_Init+0x674>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d04a      	beq.n	8000dea <HAL_DMA_Init+0x5c2>
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a51      	ldr	r2, [pc, #324]	; (8000ea0 <HAL_DMA_Init+0x678>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d045      	beq.n	8000dea <HAL_DMA_Init+0x5c2>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a50      	ldr	r2, [pc, #320]	; (8000ea4 <HAL_DMA_Init+0x67c>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d040      	beq.n	8000dea <HAL_DMA_Init+0x5c2>
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a4e      	ldr	r2, [pc, #312]	; (8000ea8 <HAL_DMA_Init+0x680>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d03b      	beq.n	8000dea <HAL_DMA_Init+0x5c2>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a4d      	ldr	r2, [pc, #308]	; (8000eac <HAL_DMA_Init+0x684>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d036      	beq.n	8000dea <HAL_DMA_Init+0x5c2>
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a4b      	ldr	r2, [pc, #300]	; (8000eb0 <HAL_DMA_Init+0x688>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d031      	beq.n	8000dea <HAL_DMA_Init+0x5c2>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a4a      	ldr	r2, [pc, #296]	; (8000eb4 <HAL_DMA_Init+0x68c>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d02c      	beq.n	8000dea <HAL_DMA_Init+0x5c2>
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a48      	ldr	r2, [pc, #288]	; (8000eb8 <HAL_DMA_Init+0x690>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d027      	beq.n	8000dea <HAL_DMA_Init+0x5c2>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a47      	ldr	r2, [pc, #284]	; (8000ebc <HAL_DMA_Init+0x694>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d022      	beq.n	8000dea <HAL_DMA_Init+0x5c2>
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a45      	ldr	r2, [pc, #276]	; (8000ec0 <HAL_DMA_Init+0x698>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d01d      	beq.n	8000dea <HAL_DMA_Init+0x5c2>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a44      	ldr	r2, [pc, #272]	; (8000ec4 <HAL_DMA_Init+0x69c>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d018      	beq.n	8000dea <HAL_DMA_Init+0x5c2>
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a42      	ldr	r2, [pc, #264]	; (8000ec8 <HAL_DMA_Init+0x6a0>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d013      	beq.n	8000dea <HAL_DMA_Init+0x5c2>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a41      	ldr	r2, [pc, #260]	; (8000ecc <HAL_DMA_Init+0x6a4>)
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d00e      	beq.n	8000dea <HAL_DMA_Init+0x5c2>
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a3f      	ldr	r2, [pc, #252]	; (8000ed0 <HAL_DMA_Init+0x6a8>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d009      	beq.n	8000dea <HAL_DMA_Init+0x5c2>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a3e      	ldr	r2, [pc, #248]	; (8000ed4 <HAL_DMA_Init+0x6ac>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d004      	beq.n	8000dea <HAL_DMA_Init+0x5c2>
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a3c      	ldr	r2, [pc, #240]	; (8000ed8 <HAL_DMA_Init+0x6b0>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d101      	bne.n	8000dee <HAL_DMA_Init+0x5c6>
 8000dea:	2301      	movs	r3, #1
 8000dec:	e000      	b.n	8000df0 <HAL_DMA_Init+0x5c8>
 8000dee:	2300      	movs	r3, #0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d032      	beq.n	8000e5a <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000df4:	6878      	ldr	r0, [r7, #4]
 8000df6:	f001 fceb 	bl	80027d0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	689b      	ldr	r3, [r3, #8]
 8000dfe:	2b80      	cmp	r3, #128	; 0x80
 8000e00:	d102      	bne.n	8000e08 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2200      	movs	r2, #0
 8000e06:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	685a      	ldr	r2, [r3, #4]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e10:	b2d2      	uxtb	r2, r2
 8000e12:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000e18:	687a      	ldr	r2, [r7, #4]
 8000e1a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8000e1c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d010      	beq.n	8000e48 <HAL_DMA_Init+0x620>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	2b08      	cmp	r3, #8
 8000e2c:	d80c      	bhi.n	8000e48 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	f001 fd68 	bl	8002904 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e40:	687a      	ldr	r2, [r7, #4]
 8000e42:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	e008      	b.n	8000e5a <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2200      	movs	r2, #0
 8000e52:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2200      	movs	r2, #0
 8000e58:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2201      	movs	r2, #1
 8000e64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000e68:	2300      	movs	r3, #0
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3718      	adds	r7, #24
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	a7fdabf8 	.word	0xa7fdabf8
 8000e78:	cccccccd 	.word	0xcccccccd
 8000e7c:	40020010 	.word	0x40020010
 8000e80:	40020028 	.word	0x40020028
 8000e84:	40020040 	.word	0x40020040
 8000e88:	40020058 	.word	0x40020058
 8000e8c:	40020070 	.word	0x40020070
 8000e90:	40020088 	.word	0x40020088
 8000e94:	400200a0 	.word	0x400200a0
 8000e98:	400200b8 	.word	0x400200b8
 8000e9c:	40020410 	.word	0x40020410
 8000ea0:	40020428 	.word	0x40020428
 8000ea4:	40020440 	.word	0x40020440
 8000ea8:	40020458 	.word	0x40020458
 8000eac:	40020470 	.word	0x40020470
 8000eb0:	40020488 	.word	0x40020488
 8000eb4:	400204a0 	.word	0x400204a0
 8000eb8:	400204b8 	.word	0x400204b8
 8000ebc:	58025408 	.word	0x58025408
 8000ec0:	5802541c 	.word	0x5802541c
 8000ec4:	58025430 	.word	0x58025430
 8000ec8:	58025444 	.word	0x58025444
 8000ecc:	58025458 	.word	0x58025458
 8000ed0:	5802546c 	.word	0x5802546c
 8000ed4:	58025480 	.word	0x58025480
 8000ed8:	58025494 	.word	0x58025494

08000edc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b086      	sub	sp, #24
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	60f8      	str	r0, [r7, #12]
 8000ee4:	60b9      	str	r1, [r7, #8]
 8000ee6:	607a      	str	r2, [r7, #4]
 8000ee8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000eea:	2300      	movs	r3, #0
 8000eec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d101      	bne.n	8000ef8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	e226      	b.n	8001346 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d101      	bne.n	8000f06 <HAL_DMA_Start_IT+0x2a>
 8000f02:	2302      	movs	r3, #2
 8000f04:	e21f      	b.n	8001346 <HAL_DMA_Start_IT+0x46a>
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	2201      	movs	r2, #1
 8000f0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	f040 820a 	bne.w	8001330 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	2202      	movs	r2, #2
 8000f20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	2200      	movs	r2, #0
 8000f28:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a68      	ldr	r2, [pc, #416]	; (80010d0 <HAL_DMA_Start_IT+0x1f4>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d04a      	beq.n	8000fca <HAL_DMA_Start_IT+0xee>
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a66      	ldr	r2, [pc, #408]	; (80010d4 <HAL_DMA_Start_IT+0x1f8>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d045      	beq.n	8000fca <HAL_DMA_Start_IT+0xee>
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a65      	ldr	r2, [pc, #404]	; (80010d8 <HAL_DMA_Start_IT+0x1fc>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d040      	beq.n	8000fca <HAL_DMA_Start_IT+0xee>
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a63      	ldr	r2, [pc, #396]	; (80010dc <HAL_DMA_Start_IT+0x200>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d03b      	beq.n	8000fca <HAL_DMA_Start_IT+0xee>
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a62      	ldr	r2, [pc, #392]	; (80010e0 <HAL_DMA_Start_IT+0x204>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d036      	beq.n	8000fca <HAL_DMA_Start_IT+0xee>
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a60      	ldr	r2, [pc, #384]	; (80010e4 <HAL_DMA_Start_IT+0x208>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d031      	beq.n	8000fca <HAL_DMA_Start_IT+0xee>
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a5f      	ldr	r2, [pc, #380]	; (80010e8 <HAL_DMA_Start_IT+0x20c>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d02c      	beq.n	8000fca <HAL_DMA_Start_IT+0xee>
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a5d      	ldr	r2, [pc, #372]	; (80010ec <HAL_DMA_Start_IT+0x210>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d027      	beq.n	8000fca <HAL_DMA_Start_IT+0xee>
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a5c      	ldr	r2, [pc, #368]	; (80010f0 <HAL_DMA_Start_IT+0x214>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d022      	beq.n	8000fca <HAL_DMA_Start_IT+0xee>
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a5a      	ldr	r2, [pc, #360]	; (80010f4 <HAL_DMA_Start_IT+0x218>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d01d      	beq.n	8000fca <HAL_DMA_Start_IT+0xee>
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a59      	ldr	r2, [pc, #356]	; (80010f8 <HAL_DMA_Start_IT+0x21c>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d018      	beq.n	8000fca <HAL_DMA_Start_IT+0xee>
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a57      	ldr	r2, [pc, #348]	; (80010fc <HAL_DMA_Start_IT+0x220>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d013      	beq.n	8000fca <HAL_DMA_Start_IT+0xee>
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a56      	ldr	r2, [pc, #344]	; (8001100 <HAL_DMA_Start_IT+0x224>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d00e      	beq.n	8000fca <HAL_DMA_Start_IT+0xee>
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a54      	ldr	r2, [pc, #336]	; (8001104 <HAL_DMA_Start_IT+0x228>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d009      	beq.n	8000fca <HAL_DMA_Start_IT+0xee>
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a53      	ldr	r2, [pc, #332]	; (8001108 <HAL_DMA_Start_IT+0x22c>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d004      	beq.n	8000fca <HAL_DMA_Start_IT+0xee>
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a51      	ldr	r2, [pc, #324]	; (800110c <HAL_DMA_Start_IT+0x230>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d108      	bne.n	8000fdc <HAL_DMA_Start_IT+0x100>
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f022 0201 	bic.w	r2, r2, #1
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	e007      	b.n	8000fec <HAL_DMA_Start_IT+0x110>
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f022 0201 	bic.w	r2, r2, #1
 8000fea:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	687a      	ldr	r2, [r7, #4]
 8000ff0:	68b9      	ldr	r1, [r7, #8]
 8000ff2:	68f8      	ldr	r0, [r7, #12]
 8000ff4:	f001 f912 	bl	800221c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a34      	ldr	r2, [pc, #208]	; (80010d0 <HAL_DMA_Start_IT+0x1f4>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d04a      	beq.n	8001098 <HAL_DMA_Start_IT+0x1bc>
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a33      	ldr	r2, [pc, #204]	; (80010d4 <HAL_DMA_Start_IT+0x1f8>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d045      	beq.n	8001098 <HAL_DMA_Start_IT+0x1bc>
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a31      	ldr	r2, [pc, #196]	; (80010d8 <HAL_DMA_Start_IT+0x1fc>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d040      	beq.n	8001098 <HAL_DMA_Start_IT+0x1bc>
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a30      	ldr	r2, [pc, #192]	; (80010dc <HAL_DMA_Start_IT+0x200>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d03b      	beq.n	8001098 <HAL_DMA_Start_IT+0x1bc>
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a2e      	ldr	r2, [pc, #184]	; (80010e0 <HAL_DMA_Start_IT+0x204>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d036      	beq.n	8001098 <HAL_DMA_Start_IT+0x1bc>
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a2d      	ldr	r2, [pc, #180]	; (80010e4 <HAL_DMA_Start_IT+0x208>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d031      	beq.n	8001098 <HAL_DMA_Start_IT+0x1bc>
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a2b      	ldr	r2, [pc, #172]	; (80010e8 <HAL_DMA_Start_IT+0x20c>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d02c      	beq.n	8001098 <HAL_DMA_Start_IT+0x1bc>
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a2a      	ldr	r2, [pc, #168]	; (80010ec <HAL_DMA_Start_IT+0x210>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d027      	beq.n	8001098 <HAL_DMA_Start_IT+0x1bc>
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a28      	ldr	r2, [pc, #160]	; (80010f0 <HAL_DMA_Start_IT+0x214>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d022      	beq.n	8001098 <HAL_DMA_Start_IT+0x1bc>
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a27      	ldr	r2, [pc, #156]	; (80010f4 <HAL_DMA_Start_IT+0x218>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d01d      	beq.n	8001098 <HAL_DMA_Start_IT+0x1bc>
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a25      	ldr	r2, [pc, #148]	; (80010f8 <HAL_DMA_Start_IT+0x21c>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d018      	beq.n	8001098 <HAL_DMA_Start_IT+0x1bc>
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a24      	ldr	r2, [pc, #144]	; (80010fc <HAL_DMA_Start_IT+0x220>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d013      	beq.n	8001098 <HAL_DMA_Start_IT+0x1bc>
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a22      	ldr	r2, [pc, #136]	; (8001100 <HAL_DMA_Start_IT+0x224>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d00e      	beq.n	8001098 <HAL_DMA_Start_IT+0x1bc>
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a21      	ldr	r2, [pc, #132]	; (8001104 <HAL_DMA_Start_IT+0x228>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d009      	beq.n	8001098 <HAL_DMA_Start_IT+0x1bc>
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a1f      	ldr	r2, [pc, #124]	; (8001108 <HAL_DMA_Start_IT+0x22c>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d004      	beq.n	8001098 <HAL_DMA_Start_IT+0x1bc>
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a1e      	ldr	r2, [pc, #120]	; (800110c <HAL_DMA_Start_IT+0x230>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d101      	bne.n	800109c <HAL_DMA_Start_IT+0x1c0>
 8001098:	2301      	movs	r3, #1
 800109a:	e000      	b.n	800109e <HAL_DMA_Start_IT+0x1c2>
 800109c:	2300      	movs	r3, #0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d036      	beq.n	8001110 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f023 021e 	bic.w	r2, r3, #30
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f042 0216 	orr.w	r2, r2, #22
 80010b4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d03e      	beq.n	800113c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f042 0208 	orr.w	r2, r2, #8
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	e035      	b.n	800113c <HAL_DMA_Start_IT+0x260>
 80010d0:	40020010 	.word	0x40020010
 80010d4:	40020028 	.word	0x40020028
 80010d8:	40020040 	.word	0x40020040
 80010dc:	40020058 	.word	0x40020058
 80010e0:	40020070 	.word	0x40020070
 80010e4:	40020088 	.word	0x40020088
 80010e8:	400200a0 	.word	0x400200a0
 80010ec:	400200b8 	.word	0x400200b8
 80010f0:	40020410 	.word	0x40020410
 80010f4:	40020428 	.word	0x40020428
 80010f8:	40020440 	.word	0x40020440
 80010fc:	40020458 	.word	0x40020458
 8001100:	40020470 	.word	0x40020470
 8001104:	40020488 	.word	0x40020488
 8001108:	400204a0 	.word	0x400204a0
 800110c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f023 020e 	bic.w	r2, r3, #14
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f042 020a 	orr.w	r2, r2, #10
 8001122:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001128:	2b00      	cmp	r3, #0
 800112a:	d007      	beq.n	800113c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f042 0204 	orr.w	r2, r2, #4
 800113a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a83      	ldr	r2, [pc, #524]	; (8001350 <HAL_DMA_Start_IT+0x474>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d072      	beq.n	800122c <HAL_DMA_Start_IT+0x350>
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a82      	ldr	r2, [pc, #520]	; (8001354 <HAL_DMA_Start_IT+0x478>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d06d      	beq.n	800122c <HAL_DMA_Start_IT+0x350>
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a80      	ldr	r2, [pc, #512]	; (8001358 <HAL_DMA_Start_IT+0x47c>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d068      	beq.n	800122c <HAL_DMA_Start_IT+0x350>
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a7f      	ldr	r2, [pc, #508]	; (800135c <HAL_DMA_Start_IT+0x480>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d063      	beq.n	800122c <HAL_DMA_Start_IT+0x350>
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a7d      	ldr	r2, [pc, #500]	; (8001360 <HAL_DMA_Start_IT+0x484>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d05e      	beq.n	800122c <HAL_DMA_Start_IT+0x350>
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a7c      	ldr	r2, [pc, #496]	; (8001364 <HAL_DMA_Start_IT+0x488>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d059      	beq.n	800122c <HAL_DMA_Start_IT+0x350>
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a7a      	ldr	r2, [pc, #488]	; (8001368 <HAL_DMA_Start_IT+0x48c>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d054      	beq.n	800122c <HAL_DMA_Start_IT+0x350>
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a79      	ldr	r2, [pc, #484]	; (800136c <HAL_DMA_Start_IT+0x490>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d04f      	beq.n	800122c <HAL_DMA_Start_IT+0x350>
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a77      	ldr	r2, [pc, #476]	; (8001370 <HAL_DMA_Start_IT+0x494>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d04a      	beq.n	800122c <HAL_DMA_Start_IT+0x350>
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a76      	ldr	r2, [pc, #472]	; (8001374 <HAL_DMA_Start_IT+0x498>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d045      	beq.n	800122c <HAL_DMA_Start_IT+0x350>
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a74      	ldr	r2, [pc, #464]	; (8001378 <HAL_DMA_Start_IT+0x49c>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d040      	beq.n	800122c <HAL_DMA_Start_IT+0x350>
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a73      	ldr	r2, [pc, #460]	; (800137c <HAL_DMA_Start_IT+0x4a0>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d03b      	beq.n	800122c <HAL_DMA_Start_IT+0x350>
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a71      	ldr	r2, [pc, #452]	; (8001380 <HAL_DMA_Start_IT+0x4a4>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d036      	beq.n	800122c <HAL_DMA_Start_IT+0x350>
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a70      	ldr	r2, [pc, #448]	; (8001384 <HAL_DMA_Start_IT+0x4a8>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d031      	beq.n	800122c <HAL_DMA_Start_IT+0x350>
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a6e      	ldr	r2, [pc, #440]	; (8001388 <HAL_DMA_Start_IT+0x4ac>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d02c      	beq.n	800122c <HAL_DMA_Start_IT+0x350>
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a6d      	ldr	r2, [pc, #436]	; (800138c <HAL_DMA_Start_IT+0x4b0>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d027      	beq.n	800122c <HAL_DMA_Start_IT+0x350>
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a6b      	ldr	r2, [pc, #428]	; (8001390 <HAL_DMA_Start_IT+0x4b4>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d022      	beq.n	800122c <HAL_DMA_Start_IT+0x350>
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a6a      	ldr	r2, [pc, #424]	; (8001394 <HAL_DMA_Start_IT+0x4b8>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d01d      	beq.n	800122c <HAL_DMA_Start_IT+0x350>
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a68      	ldr	r2, [pc, #416]	; (8001398 <HAL_DMA_Start_IT+0x4bc>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d018      	beq.n	800122c <HAL_DMA_Start_IT+0x350>
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a67      	ldr	r2, [pc, #412]	; (800139c <HAL_DMA_Start_IT+0x4c0>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d013      	beq.n	800122c <HAL_DMA_Start_IT+0x350>
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a65      	ldr	r2, [pc, #404]	; (80013a0 <HAL_DMA_Start_IT+0x4c4>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d00e      	beq.n	800122c <HAL_DMA_Start_IT+0x350>
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a64      	ldr	r2, [pc, #400]	; (80013a4 <HAL_DMA_Start_IT+0x4c8>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d009      	beq.n	800122c <HAL_DMA_Start_IT+0x350>
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a62      	ldr	r2, [pc, #392]	; (80013a8 <HAL_DMA_Start_IT+0x4cc>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d004      	beq.n	800122c <HAL_DMA_Start_IT+0x350>
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a61      	ldr	r2, [pc, #388]	; (80013ac <HAL_DMA_Start_IT+0x4d0>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d101      	bne.n	8001230 <HAL_DMA_Start_IT+0x354>
 800122c:	2301      	movs	r3, #1
 800122e:	e000      	b.n	8001232 <HAL_DMA_Start_IT+0x356>
 8001230:	2300      	movs	r3, #0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d01a      	beq.n	800126c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d007      	beq.n	8001254 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800124e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001252:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001258:	2b00      	cmp	r3, #0
 800125a:	d007      	beq.n	800126c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001266:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800126a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a37      	ldr	r2, [pc, #220]	; (8001350 <HAL_DMA_Start_IT+0x474>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d04a      	beq.n	800130c <HAL_DMA_Start_IT+0x430>
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a36      	ldr	r2, [pc, #216]	; (8001354 <HAL_DMA_Start_IT+0x478>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d045      	beq.n	800130c <HAL_DMA_Start_IT+0x430>
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a34      	ldr	r2, [pc, #208]	; (8001358 <HAL_DMA_Start_IT+0x47c>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d040      	beq.n	800130c <HAL_DMA_Start_IT+0x430>
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a33      	ldr	r2, [pc, #204]	; (800135c <HAL_DMA_Start_IT+0x480>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d03b      	beq.n	800130c <HAL_DMA_Start_IT+0x430>
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a31      	ldr	r2, [pc, #196]	; (8001360 <HAL_DMA_Start_IT+0x484>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d036      	beq.n	800130c <HAL_DMA_Start_IT+0x430>
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a30      	ldr	r2, [pc, #192]	; (8001364 <HAL_DMA_Start_IT+0x488>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d031      	beq.n	800130c <HAL_DMA_Start_IT+0x430>
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a2e      	ldr	r2, [pc, #184]	; (8001368 <HAL_DMA_Start_IT+0x48c>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d02c      	beq.n	800130c <HAL_DMA_Start_IT+0x430>
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a2d      	ldr	r2, [pc, #180]	; (800136c <HAL_DMA_Start_IT+0x490>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d027      	beq.n	800130c <HAL_DMA_Start_IT+0x430>
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a2b      	ldr	r2, [pc, #172]	; (8001370 <HAL_DMA_Start_IT+0x494>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d022      	beq.n	800130c <HAL_DMA_Start_IT+0x430>
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a2a      	ldr	r2, [pc, #168]	; (8001374 <HAL_DMA_Start_IT+0x498>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d01d      	beq.n	800130c <HAL_DMA_Start_IT+0x430>
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a28      	ldr	r2, [pc, #160]	; (8001378 <HAL_DMA_Start_IT+0x49c>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d018      	beq.n	800130c <HAL_DMA_Start_IT+0x430>
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a27      	ldr	r2, [pc, #156]	; (800137c <HAL_DMA_Start_IT+0x4a0>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d013      	beq.n	800130c <HAL_DMA_Start_IT+0x430>
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a25      	ldr	r2, [pc, #148]	; (8001380 <HAL_DMA_Start_IT+0x4a4>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d00e      	beq.n	800130c <HAL_DMA_Start_IT+0x430>
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a24      	ldr	r2, [pc, #144]	; (8001384 <HAL_DMA_Start_IT+0x4a8>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d009      	beq.n	800130c <HAL_DMA_Start_IT+0x430>
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a22      	ldr	r2, [pc, #136]	; (8001388 <HAL_DMA_Start_IT+0x4ac>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d004      	beq.n	800130c <HAL_DMA_Start_IT+0x430>
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a21      	ldr	r2, [pc, #132]	; (800138c <HAL_DMA_Start_IT+0x4b0>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d108      	bne.n	800131e <HAL_DMA_Start_IT+0x442>
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f042 0201 	orr.w	r2, r2, #1
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	e012      	b.n	8001344 <HAL_DMA_Start_IT+0x468>
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f042 0201 	orr.w	r2, r2, #1
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	e009      	b.n	8001344 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001336:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	2200      	movs	r2, #0
 800133c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001344:	7dfb      	ldrb	r3, [r7, #23]
}
 8001346:	4618      	mov	r0, r3
 8001348:	3718      	adds	r7, #24
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40020010 	.word	0x40020010
 8001354:	40020028 	.word	0x40020028
 8001358:	40020040 	.word	0x40020040
 800135c:	40020058 	.word	0x40020058
 8001360:	40020070 	.word	0x40020070
 8001364:	40020088 	.word	0x40020088
 8001368:	400200a0 	.word	0x400200a0
 800136c:	400200b8 	.word	0x400200b8
 8001370:	40020410 	.word	0x40020410
 8001374:	40020428 	.word	0x40020428
 8001378:	40020440 	.word	0x40020440
 800137c:	40020458 	.word	0x40020458
 8001380:	40020470 	.word	0x40020470
 8001384:	40020488 	.word	0x40020488
 8001388:	400204a0 	.word	0x400204a0
 800138c:	400204b8 	.word	0x400204b8
 8001390:	58025408 	.word	0x58025408
 8001394:	5802541c 	.word	0x5802541c
 8001398:	58025430 	.word	0x58025430
 800139c:	58025444 	.word	0x58025444
 80013a0:	58025458 	.word	0x58025458
 80013a4:	5802546c 	.word	0x5802546c
 80013a8:	58025480 	.word	0x58025480
 80013ac:	58025494 	.word	0x58025494

080013b0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b08a      	sub	sp, #40	; 0x28
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80013b8:	2300      	movs	r3, #0
 80013ba:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80013bc:	4b67      	ldr	r3, [pc, #412]	; (800155c <HAL_DMA_IRQHandler+0x1ac>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a67      	ldr	r2, [pc, #412]	; (8001560 <HAL_DMA_IRQHandler+0x1b0>)
 80013c2:	fba2 2303 	umull	r2, r3, r2, r3
 80013c6:	0a9b      	lsrs	r3, r3, #10
 80013c8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ce:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013d4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80013d6:	6a3b      	ldr	r3, [r7, #32]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a5f      	ldr	r2, [pc, #380]	; (8001564 <HAL_DMA_IRQHandler+0x1b4>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d04a      	beq.n	8001482 <HAL_DMA_IRQHandler+0xd2>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a5d      	ldr	r2, [pc, #372]	; (8001568 <HAL_DMA_IRQHandler+0x1b8>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d045      	beq.n	8001482 <HAL_DMA_IRQHandler+0xd2>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a5c      	ldr	r2, [pc, #368]	; (800156c <HAL_DMA_IRQHandler+0x1bc>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d040      	beq.n	8001482 <HAL_DMA_IRQHandler+0xd2>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a5a      	ldr	r2, [pc, #360]	; (8001570 <HAL_DMA_IRQHandler+0x1c0>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d03b      	beq.n	8001482 <HAL_DMA_IRQHandler+0xd2>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a59      	ldr	r2, [pc, #356]	; (8001574 <HAL_DMA_IRQHandler+0x1c4>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d036      	beq.n	8001482 <HAL_DMA_IRQHandler+0xd2>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a57      	ldr	r2, [pc, #348]	; (8001578 <HAL_DMA_IRQHandler+0x1c8>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d031      	beq.n	8001482 <HAL_DMA_IRQHandler+0xd2>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a56      	ldr	r2, [pc, #344]	; (800157c <HAL_DMA_IRQHandler+0x1cc>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d02c      	beq.n	8001482 <HAL_DMA_IRQHandler+0xd2>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a54      	ldr	r2, [pc, #336]	; (8001580 <HAL_DMA_IRQHandler+0x1d0>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d027      	beq.n	8001482 <HAL_DMA_IRQHandler+0xd2>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a53      	ldr	r2, [pc, #332]	; (8001584 <HAL_DMA_IRQHandler+0x1d4>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d022      	beq.n	8001482 <HAL_DMA_IRQHandler+0xd2>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a51      	ldr	r2, [pc, #324]	; (8001588 <HAL_DMA_IRQHandler+0x1d8>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d01d      	beq.n	8001482 <HAL_DMA_IRQHandler+0xd2>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a50      	ldr	r2, [pc, #320]	; (800158c <HAL_DMA_IRQHandler+0x1dc>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d018      	beq.n	8001482 <HAL_DMA_IRQHandler+0xd2>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a4e      	ldr	r2, [pc, #312]	; (8001590 <HAL_DMA_IRQHandler+0x1e0>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d013      	beq.n	8001482 <HAL_DMA_IRQHandler+0xd2>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a4d      	ldr	r2, [pc, #308]	; (8001594 <HAL_DMA_IRQHandler+0x1e4>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d00e      	beq.n	8001482 <HAL_DMA_IRQHandler+0xd2>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a4b      	ldr	r2, [pc, #300]	; (8001598 <HAL_DMA_IRQHandler+0x1e8>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d009      	beq.n	8001482 <HAL_DMA_IRQHandler+0xd2>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a4a      	ldr	r2, [pc, #296]	; (800159c <HAL_DMA_IRQHandler+0x1ec>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d004      	beq.n	8001482 <HAL_DMA_IRQHandler+0xd2>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a48      	ldr	r2, [pc, #288]	; (80015a0 <HAL_DMA_IRQHandler+0x1f0>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d101      	bne.n	8001486 <HAL_DMA_IRQHandler+0xd6>
 8001482:	2301      	movs	r3, #1
 8001484:	e000      	b.n	8001488 <HAL_DMA_IRQHandler+0xd8>
 8001486:	2300      	movs	r3, #0
 8001488:	2b00      	cmp	r3, #0
 800148a:	f000 842b 	beq.w	8001ce4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001492:	f003 031f 	and.w	r3, r3, #31
 8001496:	2208      	movs	r2, #8
 8001498:	409a      	lsls	r2, r3
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	4013      	ands	r3, r2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	f000 80a2 	beq.w	80015e8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a2e      	ldr	r2, [pc, #184]	; (8001564 <HAL_DMA_IRQHandler+0x1b4>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d04a      	beq.n	8001544 <HAL_DMA_IRQHandler+0x194>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a2d      	ldr	r2, [pc, #180]	; (8001568 <HAL_DMA_IRQHandler+0x1b8>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d045      	beq.n	8001544 <HAL_DMA_IRQHandler+0x194>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a2b      	ldr	r2, [pc, #172]	; (800156c <HAL_DMA_IRQHandler+0x1bc>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d040      	beq.n	8001544 <HAL_DMA_IRQHandler+0x194>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a2a      	ldr	r2, [pc, #168]	; (8001570 <HAL_DMA_IRQHandler+0x1c0>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d03b      	beq.n	8001544 <HAL_DMA_IRQHandler+0x194>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a28      	ldr	r2, [pc, #160]	; (8001574 <HAL_DMA_IRQHandler+0x1c4>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d036      	beq.n	8001544 <HAL_DMA_IRQHandler+0x194>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a27      	ldr	r2, [pc, #156]	; (8001578 <HAL_DMA_IRQHandler+0x1c8>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d031      	beq.n	8001544 <HAL_DMA_IRQHandler+0x194>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a25      	ldr	r2, [pc, #148]	; (800157c <HAL_DMA_IRQHandler+0x1cc>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d02c      	beq.n	8001544 <HAL_DMA_IRQHandler+0x194>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a24      	ldr	r2, [pc, #144]	; (8001580 <HAL_DMA_IRQHandler+0x1d0>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d027      	beq.n	8001544 <HAL_DMA_IRQHandler+0x194>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a22      	ldr	r2, [pc, #136]	; (8001584 <HAL_DMA_IRQHandler+0x1d4>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d022      	beq.n	8001544 <HAL_DMA_IRQHandler+0x194>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a21      	ldr	r2, [pc, #132]	; (8001588 <HAL_DMA_IRQHandler+0x1d8>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d01d      	beq.n	8001544 <HAL_DMA_IRQHandler+0x194>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a1f      	ldr	r2, [pc, #124]	; (800158c <HAL_DMA_IRQHandler+0x1dc>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d018      	beq.n	8001544 <HAL_DMA_IRQHandler+0x194>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a1e      	ldr	r2, [pc, #120]	; (8001590 <HAL_DMA_IRQHandler+0x1e0>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d013      	beq.n	8001544 <HAL_DMA_IRQHandler+0x194>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a1c      	ldr	r2, [pc, #112]	; (8001594 <HAL_DMA_IRQHandler+0x1e4>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d00e      	beq.n	8001544 <HAL_DMA_IRQHandler+0x194>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a1b      	ldr	r2, [pc, #108]	; (8001598 <HAL_DMA_IRQHandler+0x1e8>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d009      	beq.n	8001544 <HAL_DMA_IRQHandler+0x194>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a19      	ldr	r2, [pc, #100]	; (800159c <HAL_DMA_IRQHandler+0x1ec>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d004      	beq.n	8001544 <HAL_DMA_IRQHandler+0x194>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a18      	ldr	r2, [pc, #96]	; (80015a0 <HAL_DMA_IRQHandler+0x1f0>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d12f      	bne.n	80015a4 <HAL_DMA_IRQHandler+0x1f4>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0304 	and.w	r3, r3, #4
 800154e:	2b00      	cmp	r3, #0
 8001550:	bf14      	ite	ne
 8001552:	2301      	movne	r3, #1
 8001554:	2300      	moveq	r3, #0
 8001556:	b2db      	uxtb	r3, r3
 8001558:	e02e      	b.n	80015b8 <HAL_DMA_IRQHandler+0x208>
 800155a:	bf00      	nop
 800155c:	24000408 	.word	0x24000408
 8001560:	1b4e81b5 	.word	0x1b4e81b5
 8001564:	40020010 	.word	0x40020010
 8001568:	40020028 	.word	0x40020028
 800156c:	40020040 	.word	0x40020040
 8001570:	40020058 	.word	0x40020058
 8001574:	40020070 	.word	0x40020070
 8001578:	40020088 	.word	0x40020088
 800157c:	400200a0 	.word	0x400200a0
 8001580:	400200b8 	.word	0x400200b8
 8001584:	40020410 	.word	0x40020410
 8001588:	40020428 	.word	0x40020428
 800158c:	40020440 	.word	0x40020440
 8001590:	40020458 	.word	0x40020458
 8001594:	40020470 	.word	0x40020470
 8001598:	40020488 	.word	0x40020488
 800159c:	400204a0 	.word	0x400204a0
 80015a0:	400204b8 	.word	0x400204b8
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0308 	and.w	r3, r3, #8
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	bf14      	ite	ne
 80015b2:	2301      	movne	r3, #1
 80015b4:	2300      	moveq	r3, #0
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d015      	beq.n	80015e8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f022 0204 	bic.w	r2, r2, #4
 80015ca:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015d0:	f003 031f 	and.w	r3, r3, #31
 80015d4:	2208      	movs	r2, #8
 80015d6:	409a      	lsls	r2, r3
 80015d8:	6a3b      	ldr	r3, [r7, #32]
 80015da:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015e0:	f043 0201 	orr.w	r2, r3, #1
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015ec:	f003 031f 	and.w	r3, r3, #31
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	fa22 f303 	lsr.w	r3, r2, r3
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d06e      	beq.n	80016dc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a69      	ldr	r2, [pc, #420]	; (80017a8 <HAL_DMA_IRQHandler+0x3f8>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d04a      	beq.n	800169e <HAL_DMA_IRQHandler+0x2ee>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a67      	ldr	r2, [pc, #412]	; (80017ac <HAL_DMA_IRQHandler+0x3fc>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d045      	beq.n	800169e <HAL_DMA_IRQHandler+0x2ee>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a66      	ldr	r2, [pc, #408]	; (80017b0 <HAL_DMA_IRQHandler+0x400>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d040      	beq.n	800169e <HAL_DMA_IRQHandler+0x2ee>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a64      	ldr	r2, [pc, #400]	; (80017b4 <HAL_DMA_IRQHandler+0x404>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d03b      	beq.n	800169e <HAL_DMA_IRQHandler+0x2ee>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a63      	ldr	r2, [pc, #396]	; (80017b8 <HAL_DMA_IRQHandler+0x408>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d036      	beq.n	800169e <HAL_DMA_IRQHandler+0x2ee>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a61      	ldr	r2, [pc, #388]	; (80017bc <HAL_DMA_IRQHandler+0x40c>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d031      	beq.n	800169e <HAL_DMA_IRQHandler+0x2ee>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a60      	ldr	r2, [pc, #384]	; (80017c0 <HAL_DMA_IRQHandler+0x410>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d02c      	beq.n	800169e <HAL_DMA_IRQHandler+0x2ee>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a5e      	ldr	r2, [pc, #376]	; (80017c4 <HAL_DMA_IRQHandler+0x414>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d027      	beq.n	800169e <HAL_DMA_IRQHandler+0x2ee>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a5d      	ldr	r2, [pc, #372]	; (80017c8 <HAL_DMA_IRQHandler+0x418>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d022      	beq.n	800169e <HAL_DMA_IRQHandler+0x2ee>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a5b      	ldr	r2, [pc, #364]	; (80017cc <HAL_DMA_IRQHandler+0x41c>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d01d      	beq.n	800169e <HAL_DMA_IRQHandler+0x2ee>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a5a      	ldr	r2, [pc, #360]	; (80017d0 <HAL_DMA_IRQHandler+0x420>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d018      	beq.n	800169e <HAL_DMA_IRQHandler+0x2ee>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a58      	ldr	r2, [pc, #352]	; (80017d4 <HAL_DMA_IRQHandler+0x424>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d013      	beq.n	800169e <HAL_DMA_IRQHandler+0x2ee>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a57      	ldr	r2, [pc, #348]	; (80017d8 <HAL_DMA_IRQHandler+0x428>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d00e      	beq.n	800169e <HAL_DMA_IRQHandler+0x2ee>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a55      	ldr	r2, [pc, #340]	; (80017dc <HAL_DMA_IRQHandler+0x42c>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d009      	beq.n	800169e <HAL_DMA_IRQHandler+0x2ee>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a54      	ldr	r2, [pc, #336]	; (80017e0 <HAL_DMA_IRQHandler+0x430>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d004      	beq.n	800169e <HAL_DMA_IRQHandler+0x2ee>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a52      	ldr	r2, [pc, #328]	; (80017e4 <HAL_DMA_IRQHandler+0x434>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d10a      	bne.n	80016b4 <HAL_DMA_IRQHandler+0x304>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	695b      	ldr	r3, [r3, #20]
 80016a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	bf14      	ite	ne
 80016ac:	2301      	movne	r3, #1
 80016ae:	2300      	moveq	r3, #0
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	e003      	b.n	80016bc <HAL_DMA_IRQHandler+0x30c>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2300      	movs	r3, #0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d00d      	beq.n	80016dc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016c4:	f003 031f 	and.w	r3, r3, #31
 80016c8:	2201      	movs	r2, #1
 80016ca:	409a      	lsls	r2, r3
 80016cc:	6a3b      	ldr	r3, [r7, #32]
 80016ce:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016d4:	f043 0202 	orr.w	r2, r3, #2
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016e0:	f003 031f 	and.w	r3, r3, #31
 80016e4:	2204      	movs	r2, #4
 80016e6:	409a      	lsls	r2, r3
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	4013      	ands	r3, r2
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	f000 808f 	beq.w	8001810 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a2c      	ldr	r2, [pc, #176]	; (80017a8 <HAL_DMA_IRQHandler+0x3f8>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d04a      	beq.n	8001792 <HAL_DMA_IRQHandler+0x3e2>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a2a      	ldr	r2, [pc, #168]	; (80017ac <HAL_DMA_IRQHandler+0x3fc>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d045      	beq.n	8001792 <HAL_DMA_IRQHandler+0x3e2>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a29      	ldr	r2, [pc, #164]	; (80017b0 <HAL_DMA_IRQHandler+0x400>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d040      	beq.n	8001792 <HAL_DMA_IRQHandler+0x3e2>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a27      	ldr	r2, [pc, #156]	; (80017b4 <HAL_DMA_IRQHandler+0x404>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d03b      	beq.n	8001792 <HAL_DMA_IRQHandler+0x3e2>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a26      	ldr	r2, [pc, #152]	; (80017b8 <HAL_DMA_IRQHandler+0x408>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d036      	beq.n	8001792 <HAL_DMA_IRQHandler+0x3e2>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a24      	ldr	r2, [pc, #144]	; (80017bc <HAL_DMA_IRQHandler+0x40c>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d031      	beq.n	8001792 <HAL_DMA_IRQHandler+0x3e2>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a23      	ldr	r2, [pc, #140]	; (80017c0 <HAL_DMA_IRQHandler+0x410>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d02c      	beq.n	8001792 <HAL_DMA_IRQHandler+0x3e2>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a21      	ldr	r2, [pc, #132]	; (80017c4 <HAL_DMA_IRQHandler+0x414>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d027      	beq.n	8001792 <HAL_DMA_IRQHandler+0x3e2>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a20      	ldr	r2, [pc, #128]	; (80017c8 <HAL_DMA_IRQHandler+0x418>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d022      	beq.n	8001792 <HAL_DMA_IRQHandler+0x3e2>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a1e      	ldr	r2, [pc, #120]	; (80017cc <HAL_DMA_IRQHandler+0x41c>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d01d      	beq.n	8001792 <HAL_DMA_IRQHandler+0x3e2>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a1d      	ldr	r2, [pc, #116]	; (80017d0 <HAL_DMA_IRQHandler+0x420>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d018      	beq.n	8001792 <HAL_DMA_IRQHandler+0x3e2>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a1b      	ldr	r2, [pc, #108]	; (80017d4 <HAL_DMA_IRQHandler+0x424>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d013      	beq.n	8001792 <HAL_DMA_IRQHandler+0x3e2>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a1a      	ldr	r2, [pc, #104]	; (80017d8 <HAL_DMA_IRQHandler+0x428>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d00e      	beq.n	8001792 <HAL_DMA_IRQHandler+0x3e2>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a18      	ldr	r2, [pc, #96]	; (80017dc <HAL_DMA_IRQHandler+0x42c>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d009      	beq.n	8001792 <HAL_DMA_IRQHandler+0x3e2>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a17      	ldr	r2, [pc, #92]	; (80017e0 <HAL_DMA_IRQHandler+0x430>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d004      	beq.n	8001792 <HAL_DMA_IRQHandler+0x3e2>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a15      	ldr	r2, [pc, #84]	; (80017e4 <HAL_DMA_IRQHandler+0x434>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d12a      	bne.n	80017e8 <HAL_DMA_IRQHandler+0x438>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0302 	and.w	r3, r3, #2
 800179c:	2b00      	cmp	r3, #0
 800179e:	bf14      	ite	ne
 80017a0:	2301      	movne	r3, #1
 80017a2:	2300      	moveq	r3, #0
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	e023      	b.n	80017f0 <HAL_DMA_IRQHandler+0x440>
 80017a8:	40020010 	.word	0x40020010
 80017ac:	40020028 	.word	0x40020028
 80017b0:	40020040 	.word	0x40020040
 80017b4:	40020058 	.word	0x40020058
 80017b8:	40020070 	.word	0x40020070
 80017bc:	40020088 	.word	0x40020088
 80017c0:	400200a0 	.word	0x400200a0
 80017c4:	400200b8 	.word	0x400200b8
 80017c8:	40020410 	.word	0x40020410
 80017cc:	40020428 	.word	0x40020428
 80017d0:	40020440 	.word	0x40020440
 80017d4:	40020458 	.word	0x40020458
 80017d8:	40020470 	.word	0x40020470
 80017dc:	40020488 	.word	0x40020488
 80017e0:	400204a0 	.word	0x400204a0
 80017e4:	400204b8 	.word	0x400204b8
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2300      	movs	r3, #0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d00d      	beq.n	8001810 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017f8:	f003 031f 	and.w	r3, r3, #31
 80017fc:	2204      	movs	r2, #4
 80017fe:	409a      	lsls	r2, r3
 8001800:	6a3b      	ldr	r3, [r7, #32]
 8001802:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001808:	f043 0204 	orr.w	r2, r3, #4
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001814:	f003 031f 	and.w	r3, r3, #31
 8001818:	2210      	movs	r2, #16
 800181a:	409a      	lsls	r2, r3
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	4013      	ands	r3, r2
 8001820:	2b00      	cmp	r3, #0
 8001822:	f000 80a6 	beq.w	8001972 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a85      	ldr	r2, [pc, #532]	; (8001a40 <HAL_DMA_IRQHandler+0x690>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d04a      	beq.n	80018c6 <HAL_DMA_IRQHandler+0x516>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a83      	ldr	r2, [pc, #524]	; (8001a44 <HAL_DMA_IRQHandler+0x694>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d045      	beq.n	80018c6 <HAL_DMA_IRQHandler+0x516>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a82      	ldr	r2, [pc, #520]	; (8001a48 <HAL_DMA_IRQHandler+0x698>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d040      	beq.n	80018c6 <HAL_DMA_IRQHandler+0x516>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a80      	ldr	r2, [pc, #512]	; (8001a4c <HAL_DMA_IRQHandler+0x69c>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d03b      	beq.n	80018c6 <HAL_DMA_IRQHandler+0x516>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a7f      	ldr	r2, [pc, #508]	; (8001a50 <HAL_DMA_IRQHandler+0x6a0>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d036      	beq.n	80018c6 <HAL_DMA_IRQHandler+0x516>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a7d      	ldr	r2, [pc, #500]	; (8001a54 <HAL_DMA_IRQHandler+0x6a4>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d031      	beq.n	80018c6 <HAL_DMA_IRQHandler+0x516>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a7c      	ldr	r2, [pc, #496]	; (8001a58 <HAL_DMA_IRQHandler+0x6a8>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d02c      	beq.n	80018c6 <HAL_DMA_IRQHandler+0x516>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a7a      	ldr	r2, [pc, #488]	; (8001a5c <HAL_DMA_IRQHandler+0x6ac>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d027      	beq.n	80018c6 <HAL_DMA_IRQHandler+0x516>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a79      	ldr	r2, [pc, #484]	; (8001a60 <HAL_DMA_IRQHandler+0x6b0>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d022      	beq.n	80018c6 <HAL_DMA_IRQHandler+0x516>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a77      	ldr	r2, [pc, #476]	; (8001a64 <HAL_DMA_IRQHandler+0x6b4>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d01d      	beq.n	80018c6 <HAL_DMA_IRQHandler+0x516>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a76      	ldr	r2, [pc, #472]	; (8001a68 <HAL_DMA_IRQHandler+0x6b8>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d018      	beq.n	80018c6 <HAL_DMA_IRQHandler+0x516>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a74      	ldr	r2, [pc, #464]	; (8001a6c <HAL_DMA_IRQHandler+0x6bc>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d013      	beq.n	80018c6 <HAL_DMA_IRQHandler+0x516>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a73      	ldr	r2, [pc, #460]	; (8001a70 <HAL_DMA_IRQHandler+0x6c0>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d00e      	beq.n	80018c6 <HAL_DMA_IRQHandler+0x516>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a71      	ldr	r2, [pc, #452]	; (8001a74 <HAL_DMA_IRQHandler+0x6c4>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d009      	beq.n	80018c6 <HAL_DMA_IRQHandler+0x516>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a70      	ldr	r2, [pc, #448]	; (8001a78 <HAL_DMA_IRQHandler+0x6c8>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d004      	beq.n	80018c6 <HAL_DMA_IRQHandler+0x516>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a6e      	ldr	r2, [pc, #440]	; (8001a7c <HAL_DMA_IRQHandler+0x6cc>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d10a      	bne.n	80018dc <HAL_DMA_IRQHandler+0x52c>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0308 	and.w	r3, r3, #8
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	bf14      	ite	ne
 80018d4:	2301      	movne	r3, #1
 80018d6:	2300      	moveq	r3, #0
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	e009      	b.n	80018f0 <HAL_DMA_IRQHandler+0x540>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0304 	and.w	r3, r3, #4
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	bf14      	ite	ne
 80018ea:	2301      	movne	r3, #1
 80018ec:	2300      	moveq	r3, #0
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d03e      	beq.n	8001972 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018f8:	f003 031f 	and.w	r3, r3, #31
 80018fc:	2210      	movs	r2, #16
 80018fe:	409a      	lsls	r2, r3
 8001900:	6a3b      	ldr	r3, [r7, #32]
 8001902:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d018      	beq.n	8001944 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d108      	bne.n	8001932 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001924:	2b00      	cmp	r3, #0
 8001926:	d024      	beq.n	8001972 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	4798      	blx	r3
 8001930:	e01f      	b.n	8001972 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001936:	2b00      	cmp	r3, #0
 8001938:	d01b      	beq.n	8001972 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	4798      	blx	r3
 8001942:	e016      	b.n	8001972 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800194e:	2b00      	cmp	r3, #0
 8001950:	d107      	bne.n	8001962 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f022 0208 	bic.w	r2, r2, #8
 8001960:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001966:	2b00      	cmp	r3, #0
 8001968:	d003      	beq.n	8001972 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001976:	f003 031f 	and.w	r3, r3, #31
 800197a:	2220      	movs	r2, #32
 800197c:	409a      	lsls	r2, r3
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	4013      	ands	r3, r2
 8001982:	2b00      	cmp	r3, #0
 8001984:	f000 8110 	beq.w	8001ba8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a2c      	ldr	r2, [pc, #176]	; (8001a40 <HAL_DMA_IRQHandler+0x690>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d04a      	beq.n	8001a28 <HAL_DMA_IRQHandler+0x678>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a2b      	ldr	r2, [pc, #172]	; (8001a44 <HAL_DMA_IRQHandler+0x694>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d045      	beq.n	8001a28 <HAL_DMA_IRQHandler+0x678>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a29      	ldr	r2, [pc, #164]	; (8001a48 <HAL_DMA_IRQHandler+0x698>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d040      	beq.n	8001a28 <HAL_DMA_IRQHandler+0x678>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a28      	ldr	r2, [pc, #160]	; (8001a4c <HAL_DMA_IRQHandler+0x69c>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d03b      	beq.n	8001a28 <HAL_DMA_IRQHandler+0x678>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a26      	ldr	r2, [pc, #152]	; (8001a50 <HAL_DMA_IRQHandler+0x6a0>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d036      	beq.n	8001a28 <HAL_DMA_IRQHandler+0x678>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a25      	ldr	r2, [pc, #148]	; (8001a54 <HAL_DMA_IRQHandler+0x6a4>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d031      	beq.n	8001a28 <HAL_DMA_IRQHandler+0x678>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a23      	ldr	r2, [pc, #140]	; (8001a58 <HAL_DMA_IRQHandler+0x6a8>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d02c      	beq.n	8001a28 <HAL_DMA_IRQHandler+0x678>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a22      	ldr	r2, [pc, #136]	; (8001a5c <HAL_DMA_IRQHandler+0x6ac>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d027      	beq.n	8001a28 <HAL_DMA_IRQHandler+0x678>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a20      	ldr	r2, [pc, #128]	; (8001a60 <HAL_DMA_IRQHandler+0x6b0>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d022      	beq.n	8001a28 <HAL_DMA_IRQHandler+0x678>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a1f      	ldr	r2, [pc, #124]	; (8001a64 <HAL_DMA_IRQHandler+0x6b4>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d01d      	beq.n	8001a28 <HAL_DMA_IRQHandler+0x678>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a1d      	ldr	r2, [pc, #116]	; (8001a68 <HAL_DMA_IRQHandler+0x6b8>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d018      	beq.n	8001a28 <HAL_DMA_IRQHandler+0x678>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a1c      	ldr	r2, [pc, #112]	; (8001a6c <HAL_DMA_IRQHandler+0x6bc>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d013      	beq.n	8001a28 <HAL_DMA_IRQHandler+0x678>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a1a      	ldr	r2, [pc, #104]	; (8001a70 <HAL_DMA_IRQHandler+0x6c0>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d00e      	beq.n	8001a28 <HAL_DMA_IRQHandler+0x678>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a19      	ldr	r2, [pc, #100]	; (8001a74 <HAL_DMA_IRQHandler+0x6c4>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d009      	beq.n	8001a28 <HAL_DMA_IRQHandler+0x678>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a17      	ldr	r2, [pc, #92]	; (8001a78 <HAL_DMA_IRQHandler+0x6c8>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d004      	beq.n	8001a28 <HAL_DMA_IRQHandler+0x678>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a16      	ldr	r2, [pc, #88]	; (8001a7c <HAL_DMA_IRQHandler+0x6cc>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d12b      	bne.n	8001a80 <HAL_DMA_IRQHandler+0x6d0>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0310 	and.w	r3, r3, #16
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	bf14      	ite	ne
 8001a36:	2301      	movne	r3, #1
 8001a38:	2300      	moveq	r3, #0
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	e02a      	b.n	8001a94 <HAL_DMA_IRQHandler+0x6e4>
 8001a3e:	bf00      	nop
 8001a40:	40020010 	.word	0x40020010
 8001a44:	40020028 	.word	0x40020028
 8001a48:	40020040 	.word	0x40020040
 8001a4c:	40020058 	.word	0x40020058
 8001a50:	40020070 	.word	0x40020070
 8001a54:	40020088 	.word	0x40020088
 8001a58:	400200a0 	.word	0x400200a0
 8001a5c:	400200b8 	.word	0x400200b8
 8001a60:	40020410 	.word	0x40020410
 8001a64:	40020428 	.word	0x40020428
 8001a68:	40020440 	.word	0x40020440
 8001a6c:	40020458 	.word	0x40020458
 8001a70:	40020470 	.word	0x40020470
 8001a74:	40020488 	.word	0x40020488
 8001a78:	400204a0 	.word	0x400204a0
 8001a7c:	400204b8 	.word	0x400204b8
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0302 	and.w	r3, r3, #2
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	bf14      	ite	ne
 8001a8e:	2301      	movne	r3, #1
 8001a90:	2300      	moveq	r3, #0
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	f000 8087 	beq.w	8001ba8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a9e:	f003 031f 	and.w	r3, r3, #31
 8001aa2:	2220      	movs	r2, #32
 8001aa4:	409a      	lsls	r2, r3
 8001aa6:	6a3b      	ldr	r3, [r7, #32]
 8001aa8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	2b04      	cmp	r3, #4
 8001ab4:	d139      	bne.n	8001b2a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f022 0216 	bic.w	r2, r2, #22
 8001ac4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	695a      	ldr	r2, [r3, #20]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ad4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d103      	bne.n	8001ae6 <HAL_DMA_IRQHandler+0x736>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d007      	beq.n	8001af6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f022 0208 	bic.w	r2, r2, #8
 8001af4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001afa:	f003 031f 	and.w	r3, r3, #31
 8001afe:	223f      	movs	r2, #63	; 0x3f
 8001b00:	409a      	lsls	r2, r3
 8001b02:	6a3b      	ldr	r3, [r7, #32]
 8001b04:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2201      	movs	r2, #1
 8001b0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	f000 834a 	beq.w	80021b4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	4798      	blx	r3
          }
          return;
 8001b28:	e344      	b.n	80021b4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d018      	beq.n	8001b6a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d108      	bne.n	8001b58 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d02c      	beq.n	8001ba8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	4798      	blx	r3
 8001b56:	e027      	b.n	8001ba8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d023      	beq.n	8001ba8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	4798      	blx	r3
 8001b68:	e01e      	b.n	8001ba8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d10f      	bne.n	8001b98 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f022 0210 	bic.w	r2, r2, #16
 8001b86:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d003      	beq.n	8001ba8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	f000 8306 	beq.w	80021be <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bb6:	f003 0301 	and.w	r3, r3, #1
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	f000 8088 	beq.w	8001cd0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2204      	movs	r2, #4
 8001bc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a7a      	ldr	r2, [pc, #488]	; (8001db8 <HAL_DMA_IRQHandler+0xa08>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d04a      	beq.n	8001c68 <HAL_DMA_IRQHandler+0x8b8>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a79      	ldr	r2, [pc, #484]	; (8001dbc <HAL_DMA_IRQHandler+0xa0c>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d045      	beq.n	8001c68 <HAL_DMA_IRQHandler+0x8b8>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a77      	ldr	r2, [pc, #476]	; (8001dc0 <HAL_DMA_IRQHandler+0xa10>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d040      	beq.n	8001c68 <HAL_DMA_IRQHandler+0x8b8>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a76      	ldr	r2, [pc, #472]	; (8001dc4 <HAL_DMA_IRQHandler+0xa14>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d03b      	beq.n	8001c68 <HAL_DMA_IRQHandler+0x8b8>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a74      	ldr	r2, [pc, #464]	; (8001dc8 <HAL_DMA_IRQHandler+0xa18>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d036      	beq.n	8001c68 <HAL_DMA_IRQHandler+0x8b8>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a73      	ldr	r2, [pc, #460]	; (8001dcc <HAL_DMA_IRQHandler+0xa1c>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d031      	beq.n	8001c68 <HAL_DMA_IRQHandler+0x8b8>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a71      	ldr	r2, [pc, #452]	; (8001dd0 <HAL_DMA_IRQHandler+0xa20>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d02c      	beq.n	8001c68 <HAL_DMA_IRQHandler+0x8b8>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a70      	ldr	r2, [pc, #448]	; (8001dd4 <HAL_DMA_IRQHandler+0xa24>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d027      	beq.n	8001c68 <HAL_DMA_IRQHandler+0x8b8>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a6e      	ldr	r2, [pc, #440]	; (8001dd8 <HAL_DMA_IRQHandler+0xa28>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d022      	beq.n	8001c68 <HAL_DMA_IRQHandler+0x8b8>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a6d      	ldr	r2, [pc, #436]	; (8001ddc <HAL_DMA_IRQHandler+0xa2c>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d01d      	beq.n	8001c68 <HAL_DMA_IRQHandler+0x8b8>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a6b      	ldr	r2, [pc, #428]	; (8001de0 <HAL_DMA_IRQHandler+0xa30>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d018      	beq.n	8001c68 <HAL_DMA_IRQHandler+0x8b8>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a6a      	ldr	r2, [pc, #424]	; (8001de4 <HAL_DMA_IRQHandler+0xa34>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d013      	beq.n	8001c68 <HAL_DMA_IRQHandler+0x8b8>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a68      	ldr	r2, [pc, #416]	; (8001de8 <HAL_DMA_IRQHandler+0xa38>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d00e      	beq.n	8001c68 <HAL_DMA_IRQHandler+0x8b8>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a67      	ldr	r2, [pc, #412]	; (8001dec <HAL_DMA_IRQHandler+0xa3c>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d009      	beq.n	8001c68 <HAL_DMA_IRQHandler+0x8b8>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a65      	ldr	r2, [pc, #404]	; (8001df0 <HAL_DMA_IRQHandler+0xa40>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d004      	beq.n	8001c68 <HAL_DMA_IRQHandler+0x8b8>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a64      	ldr	r2, [pc, #400]	; (8001df4 <HAL_DMA_IRQHandler+0xa44>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d108      	bne.n	8001c7a <HAL_DMA_IRQHandler+0x8ca>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f022 0201 	bic.w	r2, r2, #1
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	e007      	b.n	8001c8a <HAL_DMA_IRQHandler+0x8da>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f022 0201 	bic.w	r2, r2, #1
 8001c88:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	60fb      	str	r3, [r7, #12]
 8001c90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d307      	bcc.n	8001ca6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0301 	and.w	r3, r3, #1
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d1f2      	bne.n	8001c8a <HAL_DMA_IRQHandler+0x8da>
 8001ca4:	e000      	b.n	8001ca8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8001ca6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d004      	beq.n	8001cc0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2203      	movs	r2, #3
 8001cba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8001cbe:	e003      	b.n	8001cc8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	f000 8272 	beq.w	80021be <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	4798      	blx	r3
 8001ce2:	e26c      	b.n	80021be <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a43      	ldr	r2, [pc, #268]	; (8001df8 <HAL_DMA_IRQHandler+0xa48>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d022      	beq.n	8001d34 <HAL_DMA_IRQHandler+0x984>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a42      	ldr	r2, [pc, #264]	; (8001dfc <HAL_DMA_IRQHandler+0xa4c>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d01d      	beq.n	8001d34 <HAL_DMA_IRQHandler+0x984>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a40      	ldr	r2, [pc, #256]	; (8001e00 <HAL_DMA_IRQHandler+0xa50>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d018      	beq.n	8001d34 <HAL_DMA_IRQHandler+0x984>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a3f      	ldr	r2, [pc, #252]	; (8001e04 <HAL_DMA_IRQHandler+0xa54>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d013      	beq.n	8001d34 <HAL_DMA_IRQHandler+0x984>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a3d      	ldr	r2, [pc, #244]	; (8001e08 <HAL_DMA_IRQHandler+0xa58>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d00e      	beq.n	8001d34 <HAL_DMA_IRQHandler+0x984>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a3c      	ldr	r2, [pc, #240]	; (8001e0c <HAL_DMA_IRQHandler+0xa5c>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d009      	beq.n	8001d34 <HAL_DMA_IRQHandler+0x984>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a3a      	ldr	r2, [pc, #232]	; (8001e10 <HAL_DMA_IRQHandler+0xa60>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d004      	beq.n	8001d34 <HAL_DMA_IRQHandler+0x984>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a39      	ldr	r2, [pc, #228]	; (8001e14 <HAL_DMA_IRQHandler+0xa64>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d101      	bne.n	8001d38 <HAL_DMA_IRQHandler+0x988>
 8001d34:	2301      	movs	r3, #1
 8001d36:	e000      	b.n	8001d3a <HAL_DMA_IRQHandler+0x98a>
 8001d38:	2300      	movs	r3, #0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	f000 823f 	beq.w	80021be <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d4c:	f003 031f 	and.w	r3, r3, #31
 8001d50:	2204      	movs	r2, #4
 8001d52:	409a      	lsls	r2, r3
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	4013      	ands	r3, r2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	f000 80cd 	beq.w	8001ef8 <HAL_DMA_IRQHandler+0xb48>
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	f003 0304 	and.w	r3, r3, #4
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	f000 80c7 	beq.w	8001ef8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d6e:	f003 031f 	and.w	r3, r3, #31
 8001d72:	2204      	movs	r2, #4
 8001d74:	409a      	lsls	r2, r3
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d049      	beq.n	8001e18 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d109      	bne.n	8001da2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	f000 8210 	beq.w	80021b8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001da0:	e20a      	b.n	80021b8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	f000 8206 	beq.w	80021b8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001db4:	e200      	b.n	80021b8 <HAL_DMA_IRQHandler+0xe08>
 8001db6:	bf00      	nop
 8001db8:	40020010 	.word	0x40020010
 8001dbc:	40020028 	.word	0x40020028
 8001dc0:	40020040 	.word	0x40020040
 8001dc4:	40020058 	.word	0x40020058
 8001dc8:	40020070 	.word	0x40020070
 8001dcc:	40020088 	.word	0x40020088
 8001dd0:	400200a0 	.word	0x400200a0
 8001dd4:	400200b8 	.word	0x400200b8
 8001dd8:	40020410 	.word	0x40020410
 8001ddc:	40020428 	.word	0x40020428
 8001de0:	40020440 	.word	0x40020440
 8001de4:	40020458 	.word	0x40020458
 8001de8:	40020470 	.word	0x40020470
 8001dec:	40020488 	.word	0x40020488
 8001df0:	400204a0 	.word	0x400204a0
 8001df4:	400204b8 	.word	0x400204b8
 8001df8:	58025408 	.word	0x58025408
 8001dfc:	5802541c 	.word	0x5802541c
 8001e00:	58025430 	.word	0x58025430
 8001e04:	58025444 	.word	0x58025444
 8001e08:	58025458 	.word	0x58025458
 8001e0c:	5802546c 	.word	0x5802546c
 8001e10:	58025480 	.word	0x58025480
 8001e14:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	f003 0320 	and.w	r3, r3, #32
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d160      	bne.n	8001ee4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a8c      	ldr	r2, [pc, #560]	; (8002058 <HAL_DMA_IRQHandler+0xca8>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d04a      	beq.n	8001ec2 <HAL_DMA_IRQHandler+0xb12>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a8a      	ldr	r2, [pc, #552]	; (800205c <HAL_DMA_IRQHandler+0xcac>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d045      	beq.n	8001ec2 <HAL_DMA_IRQHandler+0xb12>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a89      	ldr	r2, [pc, #548]	; (8002060 <HAL_DMA_IRQHandler+0xcb0>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d040      	beq.n	8001ec2 <HAL_DMA_IRQHandler+0xb12>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a87      	ldr	r2, [pc, #540]	; (8002064 <HAL_DMA_IRQHandler+0xcb4>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d03b      	beq.n	8001ec2 <HAL_DMA_IRQHandler+0xb12>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a86      	ldr	r2, [pc, #536]	; (8002068 <HAL_DMA_IRQHandler+0xcb8>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d036      	beq.n	8001ec2 <HAL_DMA_IRQHandler+0xb12>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a84      	ldr	r2, [pc, #528]	; (800206c <HAL_DMA_IRQHandler+0xcbc>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d031      	beq.n	8001ec2 <HAL_DMA_IRQHandler+0xb12>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a83      	ldr	r2, [pc, #524]	; (8002070 <HAL_DMA_IRQHandler+0xcc0>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d02c      	beq.n	8001ec2 <HAL_DMA_IRQHandler+0xb12>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a81      	ldr	r2, [pc, #516]	; (8002074 <HAL_DMA_IRQHandler+0xcc4>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d027      	beq.n	8001ec2 <HAL_DMA_IRQHandler+0xb12>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a80      	ldr	r2, [pc, #512]	; (8002078 <HAL_DMA_IRQHandler+0xcc8>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d022      	beq.n	8001ec2 <HAL_DMA_IRQHandler+0xb12>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a7e      	ldr	r2, [pc, #504]	; (800207c <HAL_DMA_IRQHandler+0xccc>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d01d      	beq.n	8001ec2 <HAL_DMA_IRQHandler+0xb12>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a7d      	ldr	r2, [pc, #500]	; (8002080 <HAL_DMA_IRQHandler+0xcd0>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d018      	beq.n	8001ec2 <HAL_DMA_IRQHandler+0xb12>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a7b      	ldr	r2, [pc, #492]	; (8002084 <HAL_DMA_IRQHandler+0xcd4>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d013      	beq.n	8001ec2 <HAL_DMA_IRQHandler+0xb12>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a7a      	ldr	r2, [pc, #488]	; (8002088 <HAL_DMA_IRQHandler+0xcd8>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d00e      	beq.n	8001ec2 <HAL_DMA_IRQHandler+0xb12>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a78      	ldr	r2, [pc, #480]	; (800208c <HAL_DMA_IRQHandler+0xcdc>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d009      	beq.n	8001ec2 <HAL_DMA_IRQHandler+0xb12>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a77      	ldr	r2, [pc, #476]	; (8002090 <HAL_DMA_IRQHandler+0xce0>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d004      	beq.n	8001ec2 <HAL_DMA_IRQHandler+0xb12>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a75      	ldr	r2, [pc, #468]	; (8002094 <HAL_DMA_IRQHandler+0xce4>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d108      	bne.n	8001ed4 <HAL_DMA_IRQHandler+0xb24>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f022 0208 	bic.w	r2, r2, #8
 8001ed0:	601a      	str	r2, [r3, #0]
 8001ed2:	e007      	b.n	8001ee4 <HAL_DMA_IRQHandler+0xb34>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f022 0204 	bic.w	r2, r2, #4
 8001ee2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	f000 8165 	beq.w	80021b8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001ef6:	e15f      	b.n	80021b8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001efc:	f003 031f 	and.w	r3, r3, #31
 8001f00:	2202      	movs	r2, #2
 8001f02:	409a      	lsls	r2, r3
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	4013      	ands	r3, r2
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	f000 80c5 	beq.w	8002098 <HAL_DMA_IRQHandler+0xce8>
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	f003 0302 	and.w	r3, r3, #2
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	f000 80bf 	beq.w	8002098 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f1e:	f003 031f 	and.w	r3, r3, #31
 8001f22:	2202      	movs	r2, #2
 8001f24:	409a      	lsls	r2, r3
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d018      	beq.n	8001f66 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d109      	bne.n	8001f52 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	f000 813a 	beq.w	80021bc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001f50:	e134      	b.n	80021bc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	f000 8130 	beq.w	80021bc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001f64:	e12a      	b.n	80021bc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	f003 0320 	and.w	r3, r3, #32
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d168      	bne.n	8002042 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a38      	ldr	r2, [pc, #224]	; (8002058 <HAL_DMA_IRQHandler+0xca8>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d04a      	beq.n	8002010 <HAL_DMA_IRQHandler+0xc60>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a37      	ldr	r2, [pc, #220]	; (800205c <HAL_DMA_IRQHandler+0xcac>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d045      	beq.n	8002010 <HAL_DMA_IRQHandler+0xc60>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a35      	ldr	r2, [pc, #212]	; (8002060 <HAL_DMA_IRQHandler+0xcb0>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d040      	beq.n	8002010 <HAL_DMA_IRQHandler+0xc60>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a34      	ldr	r2, [pc, #208]	; (8002064 <HAL_DMA_IRQHandler+0xcb4>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d03b      	beq.n	8002010 <HAL_DMA_IRQHandler+0xc60>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a32      	ldr	r2, [pc, #200]	; (8002068 <HAL_DMA_IRQHandler+0xcb8>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d036      	beq.n	8002010 <HAL_DMA_IRQHandler+0xc60>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a31      	ldr	r2, [pc, #196]	; (800206c <HAL_DMA_IRQHandler+0xcbc>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d031      	beq.n	8002010 <HAL_DMA_IRQHandler+0xc60>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a2f      	ldr	r2, [pc, #188]	; (8002070 <HAL_DMA_IRQHandler+0xcc0>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d02c      	beq.n	8002010 <HAL_DMA_IRQHandler+0xc60>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a2e      	ldr	r2, [pc, #184]	; (8002074 <HAL_DMA_IRQHandler+0xcc4>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d027      	beq.n	8002010 <HAL_DMA_IRQHandler+0xc60>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a2c      	ldr	r2, [pc, #176]	; (8002078 <HAL_DMA_IRQHandler+0xcc8>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d022      	beq.n	8002010 <HAL_DMA_IRQHandler+0xc60>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a2b      	ldr	r2, [pc, #172]	; (800207c <HAL_DMA_IRQHandler+0xccc>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d01d      	beq.n	8002010 <HAL_DMA_IRQHandler+0xc60>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a29      	ldr	r2, [pc, #164]	; (8002080 <HAL_DMA_IRQHandler+0xcd0>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d018      	beq.n	8002010 <HAL_DMA_IRQHandler+0xc60>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a28      	ldr	r2, [pc, #160]	; (8002084 <HAL_DMA_IRQHandler+0xcd4>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d013      	beq.n	8002010 <HAL_DMA_IRQHandler+0xc60>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a26      	ldr	r2, [pc, #152]	; (8002088 <HAL_DMA_IRQHandler+0xcd8>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d00e      	beq.n	8002010 <HAL_DMA_IRQHandler+0xc60>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a25      	ldr	r2, [pc, #148]	; (800208c <HAL_DMA_IRQHandler+0xcdc>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d009      	beq.n	8002010 <HAL_DMA_IRQHandler+0xc60>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a23      	ldr	r2, [pc, #140]	; (8002090 <HAL_DMA_IRQHandler+0xce0>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d004      	beq.n	8002010 <HAL_DMA_IRQHandler+0xc60>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a22      	ldr	r2, [pc, #136]	; (8002094 <HAL_DMA_IRQHandler+0xce4>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d108      	bne.n	8002022 <HAL_DMA_IRQHandler+0xc72>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f022 0214 	bic.w	r2, r2, #20
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	e007      	b.n	8002032 <HAL_DMA_IRQHandler+0xc82>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f022 020a 	bic.w	r2, r2, #10
 8002030:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2201      	movs	r2, #1
 8002036:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002046:	2b00      	cmp	r3, #0
 8002048:	f000 80b8 	beq.w	80021bc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002054:	e0b2      	b.n	80021bc <HAL_DMA_IRQHandler+0xe0c>
 8002056:	bf00      	nop
 8002058:	40020010 	.word	0x40020010
 800205c:	40020028 	.word	0x40020028
 8002060:	40020040 	.word	0x40020040
 8002064:	40020058 	.word	0x40020058
 8002068:	40020070 	.word	0x40020070
 800206c:	40020088 	.word	0x40020088
 8002070:	400200a0 	.word	0x400200a0
 8002074:	400200b8 	.word	0x400200b8
 8002078:	40020410 	.word	0x40020410
 800207c:	40020428 	.word	0x40020428
 8002080:	40020440 	.word	0x40020440
 8002084:	40020458 	.word	0x40020458
 8002088:	40020470 	.word	0x40020470
 800208c:	40020488 	.word	0x40020488
 8002090:	400204a0 	.word	0x400204a0
 8002094:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800209c:	f003 031f 	and.w	r3, r3, #31
 80020a0:	2208      	movs	r2, #8
 80020a2:	409a      	lsls	r2, r3
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	4013      	ands	r3, r2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	f000 8088 	beq.w	80021be <HAL_DMA_IRQHandler+0xe0e>
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	f003 0308 	and.w	r3, r3, #8
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	f000 8082 	beq.w	80021be <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a41      	ldr	r2, [pc, #260]	; (80021c4 <HAL_DMA_IRQHandler+0xe14>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d04a      	beq.n	800215a <HAL_DMA_IRQHandler+0xdaa>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a3f      	ldr	r2, [pc, #252]	; (80021c8 <HAL_DMA_IRQHandler+0xe18>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d045      	beq.n	800215a <HAL_DMA_IRQHandler+0xdaa>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a3e      	ldr	r2, [pc, #248]	; (80021cc <HAL_DMA_IRQHandler+0xe1c>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d040      	beq.n	800215a <HAL_DMA_IRQHandler+0xdaa>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a3c      	ldr	r2, [pc, #240]	; (80021d0 <HAL_DMA_IRQHandler+0xe20>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d03b      	beq.n	800215a <HAL_DMA_IRQHandler+0xdaa>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a3b      	ldr	r2, [pc, #236]	; (80021d4 <HAL_DMA_IRQHandler+0xe24>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d036      	beq.n	800215a <HAL_DMA_IRQHandler+0xdaa>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a39      	ldr	r2, [pc, #228]	; (80021d8 <HAL_DMA_IRQHandler+0xe28>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d031      	beq.n	800215a <HAL_DMA_IRQHandler+0xdaa>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a38      	ldr	r2, [pc, #224]	; (80021dc <HAL_DMA_IRQHandler+0xe2c>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d02c      	beq.n	800215a <HAL_DMA_IRQHandler+0xdaa>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a36      	ldr	r2, [pc, #216]	; (80021e0 <HAL_DMA_IRQHandler+0xe30>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d027      	beq.n	800215a <HAL_DMA_IRQHandler+0xdaa>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a35      	ldr	r2, [pc, #212]	; (80021e4 <HAL_DMA_IRQHandler+0xe34>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d022      	beq.n	800215a <HAL_DMA_IRQHandler+0xdaa>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a33      	ldr	r2, [pc, #204]	; (80021e8 <HAL_DMA_IRQHandler+0xe38>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d01d      	beq.n	800215a <HAL_DMA_IRQHandler+0xdaa>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a32      	ldr	r2, [pc, #200]	; (80021ec <HAL_DMA_IRQHandler+0xe3c>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d018      	beq.n	800215a <HAL_DMA_IRQHandler+0xdaa>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a30      	ldr	r2, [pc, #192]	; (80021f0 <HAL_DMA_IRQHandler+0xe40>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d013      	beq.n	800215a <HAL_DMA_IRQHandler+0xdaa>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a2f      	ldr	r2, [pc, #188]	; (80021f4 <HAL_DMA_IRQHandler+0xe44>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d00e      	beq.n	800215a <HAL_DMA_IRQHandler+0xdaa>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a2d      	ldr	r2, [pc, #180]	; (80021f8 <HAL_DMA_IRQHandler+0xe48>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d009      	beq.n	800215a <HAL_DMA_IRQHandler+0xdaa>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a2c      	ldr	r2, [pc, #176]	; (80021fc <HAL_DMA_IRQHandler+0xe4c>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d004      	beq.n	800215a <HAL_DMA_IRQHandler+0xdaa>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a2a      	ldr	r2, [pc, #168]	; (8002200 <HAL_DMA_IRQHandler+0xe50>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d108      	bne.n	800216c <HAL_DMA_IRQHandler+0xdbc>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f022 021c 	bic.w	r2, r2, #28
 8002168:	601a      	str	r2, [r3, #0]
 800216a:	e007      	b.n	800217c <HAL_DMA_IRQHandler+0xdcc>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f022 020e 	bic.w	r2, r2, #14
 800217a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002180:	f003 031f 	and.w	r3, r3, #31
 8002184:	2201      	movs	r2, #1
 8002186:	409a      	lsls	r2, r3
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2201      	movs	r2, #1
 8002196:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d009      	beq.n	80021be <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	4798      	blx	r3
 80021b2:	e004      	b.n	80021be <HAL_DMA_IRQHandler+0xe0e>
          return;
 80021b4:	bf00      	nop
 80021b6:	e002      	b.n	80021be <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80021b8:	bf00      	nop
 80021ba:	e000      	b.n	80021be <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80021bc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80021be:	3728      	adds	r7, #40	; 0x28
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	40020010 	.word	0x40020010
 80021c8:	40020028 	.word	0x40020028
 80021cc:	40020040 	.word	0x40020040
 80021d0:	40020058 	.word	0x40020058
 80021d4:	40020070 	.word	0x40020070
 80021d8:	40020088 	.word	0x40020088
 80021dc:	400200a0 	.word	0x400200a0
 80021e0:	400200b8 	.word	0x400200b8
 80021e4:	40020410 	.word	0x40020410
 80021e8:	40020428 	.word	0x40020428
 80021ec:	40020440 	.word	0x40020440
 80021f0:	40020458 	.word	0x40020458
 80021f4:	40020470 	.word	0x40020470
 80021f8:	40020488 	.word	0x40020488
 80021fc:	400204a0 	.word	0x400204a0
 8002200:	400204b8 	.word	0x400204b8

08002204 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002210:	4618      	mov	r0, r3
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800221c:	b480      	push	{r7}
 800221e:	b087      	sub	sp, #28
 8002220:	af00      	add	r7, sp, #0
 8002222:	60f8      	str	r0, [r7, #12]
 8002224:	60b9      	str	r1, [r7, #8]
 8002226:	607a      	str	r2, [r7, #4]
 8002228:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800222e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002234:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a84      	ldr	r2, [pc, #528]	; (800244c <DMA_SetConfig+0x230>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d072      	beq.n	8002326 <DMA_SetConfig+0x10a>
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a82      	ldr	r2, [pc, #520]	; (8002450 <DMA_SetConfig+0x234>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d06d      	beq.n	8002326 <DMA_SetConfig+0x10a>
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a81      	ldr	r2, [pc, #516]	; (8002454 <DMA_SetConfig+0x238>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d068      	beq.n	8002326 <DMA_SetConfig+0x10a>
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a7f      	ldr	r2, [pc, #508]	; (8002458 <DMA_SetConfig+0x23c>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d063      	beq.n	8002326 <DMA_SetConfig+0x10a>
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a7e      	ldr	r2, [pc, #504]	; (800245c <DMA_SetConfig+0x240>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d05e      	beq.n	8002326 <DMA_SetConfig+0x10a>
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a7c      	ldr	r2, [pc, #496]	; (8002460 <DMA_SetConfig+0x244>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d059      	beq.n	8002326 <DMA_SetConfig+0x10a>
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a7b      	ldr	r2, [pc, #492]	; (8002464 <DMA_SetConfig+0x248>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d054      	beq.n	8002326 <DMA_SetConfig+0x10a>
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a79      	ldr	r2, [pc, #484]	; (8002468 <DMA_SetConfig+0x24c>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d04f      	beq.n	8002326 <DMA_SetConfig+0x10a>
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a78      	ldr	r2, [pc, #480]	; (800246c <DMA_SetConfig+0x250>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d04a      	beq.n	8002326 <DMA_SetConfig+0x10a>
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a76      	ldr	r2, [pc, #472]	; (8002470 <DMA_SetConfig+0x254>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d045      	beq.n	8002326 <DMA_SetConfig+0x10a>
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a75      	ldr	r2, [pc, #468]	; (8002474 <DMA_SetConfig+0x258>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d040      	beq.n	8002326 <DMA_SetConfig+0x10a>
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a73      	ldr	r2, [pc, #460]	; (8002478 <DMA_SetConfig+0x25c>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d03b      	beq.n	8002326 <DMA_SetConfig+0x10a>
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a72      	ldr	r2, [pc, #456]	; (800247c <DMA_SetConfig+0x260>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d036      	beq.n	8002326 <DMA_SetConfig+0x10a>
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a70      	ldr	r2, [pc, #448]	; (8002480 <DMA_SetConfig+0x264>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d031      	beq.n	8002326 <DMA_SetConfig+0x10a>
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a6f      	ldr	r2, [pc, #444]	; (8002484 <DMA_SetConfig+0x268>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d02c      	beq.n	8002326 <DMA_SetConfig+0x10a>
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a6d      	ldr	r2, [pc, #436]	; (8002488 <DMA_SetConfig+0x26c>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d027      	beq.n	8002326 <DMA_SetConfig+0x10a>
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a6c      	ldr	r2, [pc, #432]	; (800248c <DMA_SetConfig+0x270>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d022      	beq.n	8002326 <DMA_SetConfig+0x10a>
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a6a      	ldr	r2, [pc, #424]	; (8002490 <DMA_SetConfig+0x274>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d01d      	beq.n	8002326 <DMA_SetConfig+0x10a>
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a69      	ldr	r2, [pc, #420]	; (8002494 <DMA_SetConfig+0x278>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d018      	beq.n	8002326 <DMA_SetConfig+0x10a>
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a67      	ldr	r2, [pc, #412]	; (8002498 <DMA_SetConfig+0x27c>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d013      	beq.n	8002326 <DMA_SetConfig+0x10a>
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a66      	ldr	r2, [pc, #408]	; (800249c <DMA_SetConfig+0x280>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d00e      	beq.n	8002326 <DMA_SetConfig+0x10a>
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a64      	ldr	r2, [pc, #400]	; (80024a0 <DMA_SetConfig+0x284>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d009      	beq.n	8002326 <DMA_SetConfig+0x10a>
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a63      	ldr	r2, [pc, #396]	; (80024a4 <DMA_SetConfig+0x288>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d004      	beq.n	8002326 <DMA_SetConfig+0x10a>
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a61      	ldr	r2, [pc, #388]	; (80024a8 <DMA_SetConfig+0x28c>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d101      	bne.n	800232a <DMA_SetConfig+0x10e>
 8002326:	2301      	movs	r3, #1
 8002328:	e000      	b.n	800232c <DMA_SetConfig+0x110>
 800232a:	2300      	movs	r3, #0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d00d      	beq.n	800234c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002334:	68fa      	ldr	r2, [r7, #12]
 8002336:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002338:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800233e:	2b00      	cmp	r3, #0
 8002340:	d004      	beq.n	800234c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800234a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a3e      	ldr	r2, [pc, #248]	; (800244c <DMA_SetConfig+0x230>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d04a      	beq.n	80023ec <DMA_SetConfig+0x1d0>
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a3d      	ldr	r2, [pc, #244]	; (8002450 <DMA_SetConfig+0x234>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d045      	beq.n	80023ec <DMA_SetConfig+0x1d0>
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a3b      	ldr	r2, [pc, #236]	; (8002454 <DMA_SetConfig+0x238>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d040      	beq.n	80023ec <DMA_SetConfig+0x1d0>
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a3a      	ldr	r2, [pc, #232]	; (8002458 <DMA_SetConfig+0x23c>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d03b      	beq.n	80023ec <DMA_SetConfig+0x1d0>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a38      	ldr	r2, [pc, #224]	; (800245c <DMA_SetConfig+0x240>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d036      	beq.n	80023ec <DMA_SetConfig+0x1d0>
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a37      	ldr	r2, [pc, #220]	; (8002460 <DMA_SetConfig+0x244>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d031      	beq.n	80023ec <DMA_SetConfig+0x1d0>
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a35      	ldr	r2, [pc, #212]	; (8002464 <DMA_SetConfig+0x248>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d02c      	beq.n	80023ec <DMA_SetConfig+0x1d0>
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a34      	ldr	r2, [pc, #208]	; (8002468 <DMA_SetConfig+0x24c>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d027      	beq.n	80023ec <DMA_SetConfig+0x1d0>
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a32      	ldr	r2, [pc, #200]	; (800246c <DMA_SetConfig+0x250>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d022      	beq.n	80023ec <DMA_SetConfig+0x1d0>
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a31      	ldr	r2, [pc, #196]	; (8002470 <DMA_SetConfig+0x254>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d01d      	beq.n	80023ec <DMA_SetConfig+0x1d0>
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a2f      	ldr	r2, [pc, #188]	; (8002474 <DMA_SetConfig+0x258>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d018      	beq.n	80023ec <DMA_SetConfig+0x1d0>
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a2e      	ldr	r2, [pc, #184]	; (8002478 <DMA_SetConfig+0x25c>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d013      	beq.n	80023ec <DMA_SetConfig+0x1d0>
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a2c      	ldr	r2, [pc, #176]	; (800247c <DMA_SetConfig+0x260>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d00e      	beq.n	80023ec <DMA_SetConfig+0x1d0>
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a2b      	ldr	r2, [pc, #172]	; (8002480 <DMA_SetConfig+0x264>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d009      	beq.n	80023ec <DMA_SetConfig+0x1d0>
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a29      	ldr	r2, [pc, #164]	; (8002484 <DMA_SetConfig+0x268>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d004      	beq.n	80023ec <DMA_SetConfig+0x1d0>
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a28      	ldr	r2, [pc, #160]	; (8002488 <DMA_SetConfig+0x26c>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d101      	bne.n	80023f0 <DMA_SetConfig+0x1d4>
 80023ec:	2301      	movs	r3, #1
 80023ee:	e000      	b.n	80023f2 <DMA_SetConfig+0x1d6>
 80023f0:	2300      	movs	r3, #0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d05a      	beq.n	80024ac <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023fa:	f003 031f 	and.w	r3, r3, #31
 80023fe:	223f      	movs	r2, #63	; 0x3f
 8002400:	409a      	lsls	r2, r3
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002414:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	683a      	ldr	r2, [r7, #0]
 800241c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	2b40      	cmp	r3, #64	; 0x40
 8002424:	d108      	bne.n	8002438 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	68ba      	ldr	r2, [r7, #8]
 8002434:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002436:	e087      	b.n	8002548 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68ba      	ldr	r2, [r7, #8]
 800243e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	60da      	str	r2, [r3, #12]
}
 8002448:	e07e      	b.n	8002548 <DMA_SetConfig+0x32c>
 800244a:	bf00      	nop
 800244c:	40020010 	.word	0x40020010
 8002450:	40020028 	.word	0x40020028
 8002454:	40020040 	.word	0x40020040
 8002458:	40020058 	.word	0x40020058
 800245c:	40020070 	.word	0x40020070
 8002460:	40020088 	.word	0x40020088
 8002464:	400200a0 	.word	0x400200a0
 8002468:	400200b8 	.word	0x400200b8
 800246c:	40020410 	.word	0x40020410
 8002470:	40020428 	.word	0x40020428
 8002474:	40020440 	.word	0x40020440
 8002478:	40020458 	.word	0x40020458
 800247c:	40020470 	.word	0x40020470
 8002480:	40020488 	.word	0x40020488
 8002484:	400204a0 	.word	0x400204a0
 8002488:	400204b8 	.word	0x400204b8
 800248c:	58025408 	.word	0x58025408
 8002490:	5802541c 	.word	0x5802541c
 8002494:	58025430 	.word	0x58025430
 8002498:	58025444 	.word	0x58025444
 800249c:	58025458 	.word	0x58025458
 80024a0:	5802546c 	.word	0x5802546c
 80024a4:	58025480 	.word	0x58025480
 80024a8:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a28      	ldr	r2, [pc, #160]	; (8002554 <DMA_SetConfig+0x338>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d022      	beq.n	80024fc <DMA_SetConfig+0x2e0>
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a27      	ldr	r2, [pc, #156]	; (8002558 <DMA_SetConfig+0x33c>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d01d      	beq.n	80024fc <DMA_SetConfig+0x2e0>
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a25      	ldr	r2, [pc, #148]	; (800255c <DMA_SetConfig+0x340>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d018      	beq.n	80024fc <DMA_SetConfig+0x2e0>
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a24      	ldr	r2, [pc, #144]	; (8002560 <DMA_SetConfig+0x344>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d013      	beq.n	80024fc <DMA_SetConfig+0x2e0>
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a22      	ldr	r2, [pc, #136]	; (8002564 <DMA_SetConfig+0x348>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d00e      	beq.n	80024fc <DMA_SetConfig+0x2e0>
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a21      	ldr	r2, [pc, #132]	; (8002568 <DMA_SetConfig+0x34c>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d009      	beq.n	80024fc <DMA_SetConfig+0x2e0>
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a1f      	ldr	r2, [pc, #124]	; (800256c <DMA_SetConfig+0x350>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d004      	beq.n	80024fc <DMA_SetConfig+0x2e0>
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a1e      	ldr	r2, [pc, #120]	; (8002570 <DMA_SetConfig+0x354>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d101      	bne.n	8002500 <DMA_SetConfig+0x2e4>
 80024fc:	2301      	movs	r3, #1
 80024fe:	e000      	b.n	8002502 <DMA_SetConfig+0x2e6>
 8002500:	2300      	movs	r3, #0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d020      	beq.n	8002548 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800250a:	f003 031f 	and.w	r3, r3, #31
 800250e:	2201      	movs	r2, #1
 8002510:	409a      	lsls	r2, r3
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	683a      	ldr	r2, [r7, #0]
 800251c:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	2b40      	cmp	r3, #64	; 0x40
 8002524:	d108      	bne.n	8002538 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	68ba      	ldr	r2, [r7, #8]
 8002534:	60da      	str	r2, [r3, #12]
}
 8002536:	e007      	b.n	8002548 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	68ba      	ldr	r2, [r7, #8]
 800253e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	60da      	str	r2, [r3, #12]
}
 8002548:	bf00      	nop
 800254a:	371c      	adds	r7, #28
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr
 8002554:	58025408 	.word	0x58025408
 8002558:	5802541c 	.word	0x5802541c
 800255c:	58025430 	.word	0x58025430
 8002560:	58025444 	.word	0x58025444
 8002564:	58025458 	.word	0x58025458
 8002568:	5802546c 	.word	0x5802546c
 800256c:	58025480 	.word	0x58025480
 8002570:	58025494 	.word	0x58025494

08002574 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a42      	ldr	r2, [pc, #264]	; (800268c <DMA_CalcBaseAndBitshift+0x118>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d04a      	beq.n	800261c <DMA_CalcBaseAndBitshift+0xa8>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a41      	ldr	r2, [pc, #260]	; (8002690 <DMA_CalcBaseAndBitshift+0x11c>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d045      	beq.n	800261c <DMA_CalcBaseAndBitshift+0xa8>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a3f      	ldr	r2, [pc, #252]	; (8002694 <DMA_CalcBaseAndBitshift+0x120>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d040      	beq.n	800261c <DMA_CalcBaseAndBitshift+0xa8>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a3e      	ldr	r2, [pc, #248]	; (8002698 <DMA_CalcBaseAndBitshift+0x124>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d03b      	beq.n	800261c <DMA_CalcBaseAndBitshift+0xa8>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a3c      	ldr	r2, [pc, #240]	; (800269c <DMA_CalcBaseAndBitshift+0x128>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d036      	beq.n	800261c <DMA_CalcBaseAndBitshift+0xa8>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a3b      	ldr	r2, [pc, #236]	; (80026a0 <DMA_CalcBaseAndBitshift+0x12c>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d031      	beq.n	800261c <DMA_CalcBaseAndBitshift+0xa8>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a39      	ldr	r2, [pc, #228]	; (80026a4 <DMA_CalcBaseAndBitshift+0x130>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d02c      	beq.n	800261c <DMA_CalcBaseAndBitshift+0xa8>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a38      	ldr	r2, [pc, #224]	; (80026a8 <DMA_CalcBaseAndBitshift+0x134>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d027      	beq.n	800261c <DMA_CalcBaseAndBitshift+0xa8>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a36      	ldr	r2, [pc, #216]	; (80026ac <DMA_CalcBaseAndBitshift+0x138>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d022      	beq.n	800261c <DMA_CalcBaseAndBitshift+0xa8>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a35      	ldr	r2, [pc, #212]	; (80026b0 <DMA_CalcBaseAndBitshift+0x13c>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d01d      	beq.n	800261c <DMA_CalcBaseAndBitshift+0xa8>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a33      	ldr	r2, [pc, #204]	; (80026b4 <DMA_CalcBaseAndBitshift+0x140>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d018      	beq.n	800261c <DMA_CalcBaseAndBitshift+0xa8>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a32      	ldr	r2, [pc, #200]	; (80026b8 <DMA_CalcBaseAndBitshift+0x144>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d013      	beq.n	800261c <DMA_CalcBaseAndBitshift+0xa8>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a30      	ldr	r2, [pc, #192]	; (80026bc <DMA_CalcBaseAndBitshift+0x148>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d00e      	beq.n	800261c <DMA_CalcBaseAndBitshift+0xa8>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a2f      	ldr	r2, [pc, #188]	; (80026c0 <DMA_CalcBaseAndBitshift+0x14c>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d009      	beq.n	800261c <DMA_CalcBaseAndBitshift+0xa8>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a2d      	ldr	r2, [pc, #180]	; (80026c4 <DMA_CalcBaseAndBitshift+0x150>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d004      	beq.n	800261c <DMA_CalcBaseAndBitshift+0xa8>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a2c      	ldr	r2, [pc, #176]	; (80026c8 <DMA_CalcBaseAndBitshift+0x154>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d101      	bne.n	8002620 <DMA_CalcBaseAndBitshift+0xac>
 800261c:	2301      	movs	r3, #1
 800261e:	e000      	b.n	8002622 <DMA_CalcBaseAndBitshift+0xae>
 8002620:	2300      	movs	r3, #0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d024      	beq.n	8002670 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	b2db      	uxtb	r3, r3
 800262c:	3b10      	subs	r3, #16
 800262e:	4a27      	ldr	r2, [pc, #156]	; (80026cc <DMA_CalcBaseAndBitshift+0x158>)
 8002630:	fba2 2303 	umull	r2, r3, r2, r3
 8002634:	091b      	lsrs	r3, r3, #4
 8002636:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f003 0307 	and.w	r3, r3, #7
 800263e:	4a24      	ldr	r2, [pc, #144]	; (80026d0 <DMA_CalcBaseAndBitshift+0x15c>)
 8002640:	5cd3      	ldrb	r3, [r2, r3]
 8002642:	461a      	mov	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2b03      	cmp	r3, #3
 800264c:	d908      	bls.n	8002660 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	461a      	mov	r2, r3
 8002654:	4b1f      	ldr	r3, [pc, #124]	; (80026d4 <DMA_CalcBaseAndBitshift+0x160>)
 8002656:	4013      	ands	r3, r2
 8002658:	1d1a      	adds	r2, r3, #4
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	659a      	str	r2, [r3, #88]	; 0x58
 800265e:	e00d      	b.n	800267c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	461a      	mov	r2, r3
 8002666:	4b1b      	ldr	r3, [pc, #108]	; (80026d4 <DMA_CalcBaseAndBitshift+0x160>)
 8002668:	4013      	ands	r3, r2
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	6593      	str	r3, [r2, #88]	; 0x58
 800266e:	e005      	b.n	800267c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002680:	4618      	mov	r0, r3
 8002682:	3714      	adds	r7, #20
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr
 800268c:	40020010 	.word	0x40020010
 8002690:	40020028 	.word	0x40020028
 8002694:	40020040 	.word	0x40020040
 8002698:	40020058 	.word	0x40020058
 800269c:	40020070 	.word	0x40020070
 80026a0:	40020088 	.word	0x40020088
 80026a4:	400200a0 	.word	0x400200a0
 80026a8:	400200b8 	.word	0x400200b8
 80026ac:	40020410 	.word	0x40020410
 80026b0:	40020428 	.word	0x40020428
 80026b4:	40020440 	.word	0x40020440
 80026b8:	40020458 	.word	0x40020458
 80026bc:	40020470 	.word	0x40020470
 80026c0:	40020488 	.word	0x40020488
 80026c4:	400204a0 	.word	0x400204a0
 80026c8:	400204b8 	.word	0x400204b8
 80026cc:	aaaaaaab 	.word	0xaaaaaaab
 80026d0:	080094e8 	.word	0x080094e8
 80026d4:	fffffc00 	.word	0xfffffc00

080026d8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80026d8:	b480      	push	{r7}
 80026da:	b085      	sub	sp, #20
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026e0:	2300      	movs	r3, #0
 80026e2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d120      	bne.n	800272e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f0:	2b03      	cmp	r3, #3
 80026f2:	d858      	bhi.n	80027a6 <DMA_CheckFifoParam+0xce>
 80026f4:	a201      	add	r2, pc, #4	; (adr r2, 80026fc <DMA_CheckFifoParam+0x24>)
 80026f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026fa:	bf00      	nop
 80026fc:	0800270d 	.word	0x0800270d
 8002700:	0800271f 	.word	0x0800271f
 8002704:	0800270d 	.word	0x0800270d
 8002708:	080027a7 	.word	0x080027a7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002710:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d048      	beq.n	80027aa <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800271c:	e045      	b.n	80027aa <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002722:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002726:	d142      	bne.n	80027ae <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800272c:	e03f      	b.n	80027ae <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	699b      	ldr	r3, [r3, #24]
 8002732:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002736:	d123      	bne.n	8002780 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800273c:	2b03      	cmp	r3, #3
 800273e:	d838      	bhi.n	80027b2 <DMA_CheckFifoParam+0xda>
 8002740:	a201      	add	r2, pc, #4	; (adr r2, 8002748 <DMA_CheckFifoParam+0x70>)
 8002742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002746:	bf00      	nop
 8002748:	08002759 	.word	0x08002759
 800274c:	0800275f 	.word	0x0800275f
 8002750:	08002759 	.word	0x08002759
 8002754:	08002771 	.word	0x08002771
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	73fb      	strb	r3, [r7, #15]
        break;
 800275c:	e030      	b.n	80027c0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002762:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d025      	beq.n	80027b6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800276e:	e022      	b.n	80027b6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002774:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002778:	d11f      	bne.n	80027ba <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800277e:	e01c      	b.n	80027ba <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002784:	2b02      	cmp	r3, #2
 8002786:	d902      	bls.n	800278e <DMA_CheckFifoParam+0xb6>
 8002788:	2b03      	cmp	r3, #3
 800278a:	d003      	beq.n	8002794 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800278c:	e018      	b.n	80027c0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	73fb      	strb	r3, [r7, #15]
        break;
 8002792:	e015      	b.n	80027c0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002798:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d00e      	beq.n	80027be <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	73fb      	strb	r3, [r7, #15]
    break;
 80027a4:	e00b      	b.n	80027be <DMA_CheckFifoParam+0xe6>
        break;
 80027a6:	bf00      	nop
 80027a8:	e00a      	b.n	80027c0 <DMA_CheckFifoParam+0xe8>
        break;
 80027aa:	bf00      	nop
 80027ac:	e008      	b.n	80027c0 <DMA_CheckFifoParam+0xe8>
        break;
 80027ae:	bf00      	nop
 80027b0:	e006      	b.n	80027c0 <DMA_CheckFifoParam+0xe8>
        break;
 80027b2:	bf00      	nop
 80027b4:	e004      	b.n	80027c0 <DMA_CheckFifoParam+0xe8>
        break;
 80027b6:	bf00      	nop
 80027b8:	e002      	b.n	80027c0 <DMA_CheckFifoParam+0xe8>
        break;
 80027ba:	bf00      	nop
 80027bc:	e000      	b.n	80027c0 <DMA_CheckFifoParam+0xe8>
    break;
 80027be:	bf00      	nop
    }
  }

  return status;
 80027c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3714      	adds	r7, #20
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop

080027d0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b085      	sub	sp, #20
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a38      	ldr	r2, [pc, #224]	; (80028c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d022      	beq.n	800282e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a36      	ldr	r2, [pc, #216]	; (80028c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d01d      	beq.n	800282e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a35      	ldr	r2, [pc, #212]	; (80028cc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d018      	beq.n	800282e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a33      	ldr	r2, [pc, #204]	; (80028d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d013      	beq.n	800282e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a32      	ldr	r2, [pc, #200]	; (80028d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d00e      	beq.n	800282e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a30      	ldr	r2, [pc, #192]	; (80028d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d009      	beq.n	800282e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a2f      	ldr	r2, [pc, #188]	; (80028dc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d004      	beq.n	800282e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a2d      	ldr	r2, [pc, #180]	; (80028e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d101      	bne.n	8002832 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800282e:	2301      	movs	r3, #1
 8002830:	e000      	b.n	8002834 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8002832:	2300      	movs	r3, #0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d01a      	beq.n	800286e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	b2db      	uxtb	r3, r3
 800283e:	3b08      	subs	r3, #8
 8002840:	4a28      	ldr	r2, [pc, #160]	; (80028e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8002842:	fba2 2303 	umull	r2, r3, r2, r3
 8002846:	091b      	lsrs	r3, r3, #4
 8002848:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800284a:	68fa      	ldr	r2, [r7, #12]
 800284c:	4b26      	ldr	r3, [pc, #152]	; (80028e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800284e:	4413      	add	r3, r2
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	461a      	mov	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	4a24      	ldr	r2, [pc, #144]	; (80028ec <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800285c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	f003 031f 	and.w	r3, r3, #31
 8002864:	2201      	movs	r2, #1
 8002866:	409a      	lsls	r2, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800286c:	e024      	b.n	80028b8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	b2db      	uxtb	r3, r3
 8002874:	3b10      	subs	r3, #16
 8002876:	4a1e      	ldr	r2, [pc, #120]	; (80028f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8002878:	fba2 2303 	umull	r2, r3, r2, r3
 800287c:	091b      	lsrs	r3, r3, #4
 800287e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	4a1c      	ldr	r2, [pc, #112]	; (80028f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d806      	bhi.n	8002896 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	4a1b      	ldr	r2, [pc, #108]	; (80028f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d902      	bls.n	8002896 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	3308      	adds	r3, #8
 8002894:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8002896:	68fa      	ldr	r2, [r7, #12]
 8002898:	4b18      	ldr	r3, [pc, #96]	; (80028fc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800289a:	4413      	add	r3, r2
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	461a      	mov	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	4a16      	ldr	r2, [pc, #88]	; (8002900 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80028a8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f003 031f 	and.w	r3, r3, #31
 80028b0:	2201      	movs	r2, #1
 80028b2:	409a      	lsls	r2, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80028b8:	bf00      	nop
 80028ba:	3714      	adds	r7, #20
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr
 80028c4:	58025408 	.word	0x58025408
 80028c8:	5802541c 	.word	0x5802541c
 80028cc:	58025430 	.word	0x58025430
 80028d0:	58025444 	.word	0x58025444
 80028d4:	58025458 	.word	0x58025458
 80028d8:	5802546c 	.word	0x5802546c
 80028dc:	58025480 	.word	0x58025480
 80028e0:	58025494 	.word	0x58025494
 80028e4:	cccccccd 	.word	0xcccccccd
 80028e8:	16009600 	.word	0x16009600
 80028ec:	58025880 	.word	0x58025880
 80028f0:	aaaaaaab 	.word	0xaaaaaaab
 80028f4:	400204b8 	.word	0x400204b8
 80028f8:	4002040f 	.word	0x4002040f
 80028fc:	10008200 	.word	0x10008200
 8002900:	40020880 	.word	0x40020880

08002904 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002904:	b480      	push	{r7}
 8002906:	b085      	sub	sp, #20
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	b2db      	uxtb	r3, r3
 8002912:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d04a      	beq.n	80029b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2b08      	cmp	r3, #8
 800291e:	d847      	bhi.n	80029b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a25      	ldr	r2, [pc, #148]	; (80029bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d022      	beq.n	8002970 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a24      	ldr	r2, [pc, #144]	; (80029c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d01d      	beq.n	8002970 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a22      	ldr	r2, [pc, #136]	; (80029c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d018      	beq.n	8002970 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a21      	ldr	r2, [pc, #132]	; (80029c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d013      	beq.n	8002970 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a1f      	ldr	r2, [pc, #124]	; (80029cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d00e      	beq.n	8002970 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a1e      	ldr	r2, [pc, #120]	; (80029d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d009      	beq.n	8002970 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a1c      	ldr	r2, [pc, #112]	; (80029d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d004      	beq.n	8002970 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a1b      	ldr	r2, [pc, #108]	; (80029d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d101      	bne.n	8002974 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8002970:	2301      	movs	r3, #1
 8002972:	e000      	b.n	8002976 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8002974:	2300      	movs	r3, #0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d00a      	beq.n	8002990 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	4b17      	ldr	r3, [pc, #92]	; (80029dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800297e:	4413      	add	r3, r2
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	461a      	mov	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	4a15      	ldr	r2, [pc, #84]	; (80029e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800298c:	671a      	str	r2, [r3, #112]	; 0x70
 800298e:	e009      	b.n	80029a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002990:	68fa      	ldr	r2, [r7, #12]
 8002992:	4b14      	ldr	r3, [pc, #80]	; (80029e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8002994:	4413      	add	r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	461a      	mov	r2, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a11      	ldr	r2, [pc, #68]	; (80029e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80029a2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	3b01      	subs	r3, #1
 80029a8:	2201      	movs	r2, #1
 80029aa:	409a      	lsls	r2, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80029b0:	bf00      	nop
 80029b2:	3714      	adds	r7, #20
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr
 80029bc:	58025408 	.word	0x58025408
 80029c0:	5802541c 	.word	0x5802541c
 80029c4:	58025430 	.word	0x58025430
 80029c8:	58025444 	.word	0x58025444
 80029cc:	58025458 	.word	0x58025458
 80029d0:	5802546c 	.word	0x5802546c
 80029d4:	58025480 	.word	0x58025480
 80029d8:	58025494 	.word	0x58025494
 80029dc:	1600963f 	.word	0x1600963f
 80029e0:	58025940 	.word	0x58025940
 80029e4:	1000823f 	.word	0x1000823f
 80029e8:	40020940 	.word	0x40020940

080029ec <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA Stream.
  * @param  pSyncConfig : pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b085      	sub	sp, #20
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	6039      	str	r1, [r7, #0]
  uint32_t syncSignalID = 0;
 80029f6:	2300      	movs	r3, #0
 80029f8:	60fb      	str	r3, [r7, #12]
  uint32_t syncPolarity = 0;
 80029fa:	2300      	movs	r3, #0
 80029fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  if(pSyncConfig->SyncEnable == ENABLE)
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	7a1b      	ldrb	r3, [r3, #8]
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d155      	bne.n	8002ab2 <HAL_DMAEx_ConfigMuxSync+0xc6>
  {
    assert_param(IS_DMAMUX_SYNC_POLARITY(pSyncConfig->SyncPolarity));

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a4b      	ldr	r2, [pc, #300]	; (8002b38 <HAL_DMAEx_ConfigMuxSync+0x14c>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d049      	beq.n	8002aa4 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a49      	ldr	r2, [pc, #292]	; (8002b3c <HAL_DMAEx_ConfigMuxSync+0x150>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d044      	beq.n	8002aa4 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a48      	ldr	r2, [pc, #288]	; (8002b40 <HAL_DMAEx_ConfigMuxSync+0x154>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d03f      	beq.n	8002aa4 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a46      	ldr	r2, [pc, #280]	; (8002b44 <HAL_DMAEx_ConfigMuxSync+0x158>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d03a      	beq.n	8002aa4 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a45      	ldr	r2, [pc, #276]	; (8002b48 <HAL_DMAEx_ConfigMuxSync+0x15c>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d035      	beq.n	8002aa4 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a43      	ldr	r2, [pc, #268]	; (8002b4c <HAL_DMAEx_ConfigMuxSync+0x160>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d030      	beq.n	8002aa4 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a42      	ldr	r2, [pc, #264]	; (8002b50 <HAL_DMAEx_ConfigMuxSync+0x164>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d02b      	beq.n	8002aa4 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a40      	ldr	r2, [pc, #256]	; (8002b54 <HAL_DMAEx_ConfigMuxSync+0x168>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d026      	beq.n	8002aa4 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a3f      	ldr	r2, [pc, #252]	; (8002b58 <HAL_DMAEx_ConfigMuxSync+0x16c>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d021      	beq.n	8002aa4 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a3d      	ldr	r2, [pc, #244]	; (8002b5c <HAL_DMAEx_ConfigMuxSync+0x170>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d01c      	beq.n	8002aa4 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a3c      	ldr	r2, [pc, #240]	; (8002b60 <HAL_DMAEx_ConfigMuxSync+0x174>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d017      	beq.n	8002aa4 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a3a      	ldr	r2, [pc, #232]	; (8002b64 <HAL_DMAEx_ConfigMuxSync+0x178>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d012      	beq.n	8002aa4 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a39      	ldr	r2, [pc, #228]	; (8002b68 <HAL_DMAEx_ConfigMuxSync+0x17c>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d00d      	beq.n	8002aa4 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a37      	ldr	r2, [pc, #220]	; (8002b6c <HAL_DMAEx_ConfigMuxSync+0x180>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d008      	beq.n	8002aa4 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a36      	ldr	r2, [pc, #216]	; (8002b70 <HAL_DMAEx_ConfigMuxSync+0x184>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d003      	beq.n	8002aa4 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a34      	ldr	r2, [pc, #208]	; (8002b74 <HAL_DMAEx_ConfigMuxSync+0x188>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	bf00      	nop
    }
    else
    {
      assert_param(IS_BDMA_DMAMUX_SYNC_SIGNAL_ID(pSyncConfig->SyncSignalID));
    }
    syncSignalID = pSyncConfig->SyncSignalID;
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	60fb      	str	r3, [r7, #12]
    syncPolarity = pSyncConfig->SyncPolarity;
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	60bb      	str	r3, [r7, #8]
  }

  /*Check if the DMA state is ready */
  if(hdma->State == HAL_DMA_STATE_READY)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d131      	bne.n	8002b22 <HAL_DMAEx_ConfigMuxSync+0x136>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d101      	bne.n	8002acc <HAL_DMAEx_ConfigMuxSync+0xe0>
 8002ac8:	2302      	movs	r3, #2
 8002aca:	e02f      	b.n	8002b2c <HAL_DMAEx_ConfigMuxSync+0x140>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the synchronization and event generation before applying a new config */
    CLEAR_BIT(hdma->DMAmuxChannel->CCR,(DMAMUX_CxCR_SE | DMAMUX_CxCR_EGE));
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ade:	f422 3281 	bic.w	r2, r2, #66048	; 0x10200
 8002ae2:	601a      	str	r2, [r3, #0]

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG( hdma->DMAmuxChannel->CCR, \
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	b2d9      	uxtb	r1, r3
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	061a      	lsls	r2, r3, #24
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	3b01      	subs	r3, #1
 8002af6:	04db      	lsls	r3, r3, #19
 8002af8:	431a      	orrs	r2, r3
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	431a      	orrs	r2, r3
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	7a1b      	ldrb	r3, [r3, #8]
 8002b02:	041b      	lsls	r3, r3, #16
 8002b04:	431a      	orrs	r2, r3
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	7a5b      	ldrb	r3, [r3, #9]
 8002b0a:	025b      	lsls	r3, r3, #9
 8002b0c:	431a      	orrs	r2, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b12:	430a      	orrs	r2, r1
 8002b14:	601a      	str	r2, [r3, #0]
               ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
               syncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)    | \
               ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos));

      /* Process Locked */
    __HAL_UNLOCK(hdma);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	e004      	b.n	8002b2c <HAL_DMAEx_ConfigMuxSync+0x140>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b28:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
  }
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3714      	adds	r7, #20
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr
 8002b38:	40020010 	.word	0x40020010
 8002b3c:	40020028 	.word	0x40020028
 8002b40:	40020040 	.word	0x40020040
 8002b44:	40020058 	.word	0x40020058
 8002b48:	40020070 	.word	0x40020070
 8002b4c:	40020088 	.word	0x40020088
 8002b50:	400200a0 	.word	0x400200a0
 8002b54:	400200b8 	.word	0x400200b8
 8002b58:	40020410 	.word	0x40020410
 8002b5c:	40020428 	.word	0x40020428
 8002b60:	40020440 	.word	0x40020440
 8002b64:	40020458 	.word	0x40020458
 8002b68:	40020470 	.word	0x40020470
 8002b6c:	40020488 	.word	0x40020488
 8002b70:	400204a0 	.word	0x400204a0
 8002b74:	400204b8 	.word	0x400204b8

08002b78 <HAL_DMAEx_MUX_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d01a      	beq.n	8002bc6 <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b9e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002ba8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bae:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	655a      	str	r2, [r3, #84]	; 0x54

    if(hdma->XferErrorCallback != NULL)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d003      	beq.n	8002bc6 <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	4798      	blx	r3
    }
  }

  if(hdma->DMAmuxRequestGen != 0)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d022      	beq.n	8002c14 <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
   /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bd8:	4013      	ands	r3, r2
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d01a      	beq.n	8002c14 <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002be8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bec:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002bf6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bfc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	655a      	str	r2, [r3, #84]	; 0x54

      if(hdma->XferErrorCallback != NULL)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d003      	beq.n	8002c14 <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	4798      	blx	r3
      }
    }
  }
}
 8002c14:	bf00      	nop
 8002c16:	3708      	adds	r7, #8
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b089      	sub	sp, #36	; 0x24
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002c26:	2300      	movs	r3, #0
 8002c28:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002c2a:	4b86      	ldr	r3, [pc, #536]	; (8002e44 <HAL_GPIO_Init+0x228>)
 8002c2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002c2e:	e18c      	b.n	8002f4a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	2101      	movs	r1, #1
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	fa01 f303 	lsl.w	r3, r1, r3
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	f000 817e 	beq.w	8002f44 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f003 0303 	and.w	r3, r3, #3
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d005      	beq.n	8002c60 <HAL_GPIO_Init+0x44>
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f003 0303 	and.w	r3, r3, #3
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d130      	bne.n	8002cc2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	005b      	lsls	r3, r3, #1
 8002c6a:	2203      	movs	r2, #3
 8002c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c70:	43db      	mvns	r3, r3
 8002c72:	69ba      	ldr	r2, [r7, #24]
 8002c74:	4013      	ands	r3, r2
 8002c76:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	68da      	ldr	r2, [r3, #12]
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	005b      	lsls	r3, r3, #1
 8002c80:	fa02 f303 	lsl.w	r3, r2, r3
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c96:	2201      	movs	r2, #1
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9e:	43db      	mvns	r3, r3
 8002ca0:	69ba      	ldr	r2, [r7, #24]
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	091b      	lsrs	r3, r3, #4
 8002cac:	f003 0201 	and.w	r2, r3, #1
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb6:	69ba      	ldr	r2, [r7, #24]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	69ba      	ldr	r2, [r7, #24]
 8002cc0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f003 0303 	and.w	r3, r3, #3
 8002cca:	2b03      	cmp	r3, #3
 8002ccc:	d017      	beq.n	8002cfe <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	005b      	lsls	r3, r3, #1
 8002cd8:	2203      	movs	r2, #3
 8002cda:	fa02 f303 	lsl.w	r3, r2, r3
 8002cde:	43db      	mvns	r3, r3
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	689a      	ldr	r2, [r3, #8]
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf2:	69ba      	ldr	r2, [r7, #24]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	69ba      	ldr	r2, [r7, #24]
 8002cfc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f003 0303 	and.w	r3, r3, #3
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d123      	bne.n	8002d52 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	08da      	lsrs	r2, r3, #3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	3208      	adds	r2, #8
 8002d12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	f003 0307 	and.w	r3, r3, #7
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	220f      	movs	r2, #15
 8002d22:	fa02 f303 	lsl.w	r3, r2, r3
 8002d26:	43db      	mvns	r3, r3
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	691a      	ldr	r2, [r3, #16]
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	f003 0307 	and.w	r3, r3, #7
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3e:	69ba      	ldr	r2, [r7, #24]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	08da      	lsrs	r2, r3, #3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	3208      	adds	r2, #8
 8002d4c:	69b9      	ldr	r1, [r7, #24]
 8002d4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	2203      	movs	r2, #3
 8002d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d62:	43db      	mvns	r3, r3
 8002d64:	69ba      	ldr	r2, [r7, #24]
 8002d66:	4013      	ands	r3, r2
 8002d68:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f003 0203 	and.w	r2, r3, #3
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	005b      	lsls	r3, r3, #1
 8002d76:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7a:	69ba      	ldr	r2, [r7, #24]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	69ba      	ldr	r2, [r7, #24]
 8002d84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	f000 80d8 	beq.w	8002f44 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d94:	4b2c      	ldr	r3, [pc, #176]	; (8002e48 <HAL_GPIO_Init+0x22c>)
 8002d96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002d9a:	4a2b      	ldr	r2, [pc, #172]	; (8002e48 <HAL_GPIO_Init+0x22c>)
 8002d9c:	f043 0302 	orr.w	r3, r3, #2
 8002da0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002da4:	4b28      	ldr	r3, [pc, #160]	; (8002e48 <HAL_GPIO_Init+0x22c>)
 8002da6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002daa:	f003 0302 	and.w	r3, r3, #2
 8002dae:	60fb      	str	r3, [r7, #12]
 8002db0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002db2:	4a26      	ldr	r2, [pc, #152]	; (8002e4c <HAL_GPIO_Init+0x230>)
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	089b      	lsrs	r3, r3, #2
 8002db8:	3302      	adds	r3, #2
 8002dba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	f003 0303 	and.w	r3, r3, #3
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	220f      	movs	r2, #15
 8002dca:	fa02 f303 	lsl.w	r3, r2, r3
 8002dce:	43db      	mvns	r3, r3
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a1d      	ldr	r2, [pc, #116]	; (8002e50 <HAL_GPIO_Init+0x234>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d04a      	beq.n	8002e74 <HAL_GPIO_Init+0x258>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a1c      	ldr	r2, [pc, #112]	; (8002e54 <HAL_GPIO_Init+0x238>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d02b      	beq.n	8002e3e <HAL_GPIO_Init+0x222>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a1b      	ldr	r2, [pc, #108]	; (8002e58 <HAL_GPIO_Init+0x23c>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d025      	beq.n	8002e3a <HAL_GPIO_Init+0x21e>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a1a      	ldr	r2, [pc, #104]	; (8002e5c <HAL_GPIO_Init+0x240>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d01f      	beq.n	8002e36 <HAL_GPIO_Init+0x21a>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a19      	ldr	r2, [pc, #100]	; (8002e60 <HAL_GPIO_Init+0x244>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d019      	beq.n	8002e32 <HAL_GPIO_Init+0x216>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a18      	ldr	r2, [pc, #96]	; (8002e64 <HAL_GPIO_Init+0x248>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d013      	beq.n	8002e2e <HAL_GPIO_Init+0x212>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a17      	ldr	r2, [pc, #92]	; (8002e68 <HAL_GPIO_Init+0x24c>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d00d      	beq.n	8002e2a <HAL_GPIO_Init+0x20e>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a16      	ldr	r2, [pc, #88]	; (8002e6c <HAL_GPIO_Init+0x250>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d007      	beq.n	8002e26 <HAL_GPIO_Init+0x20a>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a15      	ldr	r2, [pc, #84]	; (8002e70 <HAL_GPIO_Init+0x254>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d101      	bne.n	8002e22 <HAL_GPIO_Init+0x206>
 8002e1e:	2309      	movs	r3, #9
 8002e20:	e029      	b.n	8002e76 <HAL_GPIO_Init+0x25a>
 8002e22:	230a      	movs	r3, #10
 8002e24:	e027      	b.n	8002e76 <HAL_GPIO_Init+0x25a>
 8002e26:	2307      	movs	r3, #7
 8002e28:	e025      	b.n	8002e76 <HAL_GPIO_Init+0x25a>
 8002e2a:	2306      	movs	r3, #6
 8002e2c:	e023      	b.n	8002e76 <HAL_GPIO_Init+0x25a>
 8002e2e:	2305      	movs	r3, #5
 8002e30:	e021      	b.n	8002e76 <HAL_GPIO_Init+0x25a>
 8002e32:	2304      	movs	r3, #4
 8002e34:	e01f      	b.n	8002e76 <HAL_GPIO_Init+0x25a>
 8002e36:	2303      	movs	r3, #3
 8002e38:	e01d      	b.n	8002e76 <HAL_GPIO_Init+0x25a>
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	e01b      	b.n	8002e76 <HAL_GPIO_Init+0x25a>
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e019      	b.n	8002e76 <HAL_GPIO_Init+0x25a>
 8002e42:	bf00      	nop
 8002e44:	58000080 	.word	0x58000080
 8002e48:	58024400 	.word	0x58024400
 8002e4c:	58000400 	.word	0x58000400
 8002e50:	58020000 	.word	0x58020000
 8002e54:	58020400 	.word	0x58020400
 8002e58:	58020800 	.word	0x58020800
 8002e5c:	58020c00 	.word	0x58020c00
 8002e60:	58021000 	.word	0x58021000
 8002e64:	58021400 	.word	0x58021400
 8002e68:	58021800 	.word	0x58021800
 8002e6c:	58021c00 	.word	0x58021c00
 8002e70:	58022400 	.word	0x58022400
 8002e74:	2300      	movs	r3, #0
 8002e76:	69fa      	ldr	r2, [r7, #28]
 8002e78:	f002 0203 	and.w	r2, r2, #3
 8002e7c:	0092      	lsls	r2, r2, #2
 8002e7e:	4093      	lsls	r3, r2
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e86:	4938      	ldr	r1, [pc, #224]	; (8002f68 <HAL_GPIO_Init+0x34c>)
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	089b      	lsrs	r3, r3, #2
 8002e8c:	3302      	adds	r3, #2
 8002e8e:	69ba      	ldr	r2, [r7, #24]
 8002e90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	43db      	mvns	r3, r3
 8002ea0:	69ba      	ldr	r2, [r7, #24]
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d003      	beq.n	8002eba <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8002eb2:	69ba      	ldr	r2, [r7, #24]
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002eba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002ec2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	43db      	mvns	r3, r3
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d003      	beq.n	8002ee8 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8002ee0:	69ba      	ldr	r2, [r7, #24]
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002ee8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	43db      	mvns	r3, r3
 8002efa:	69ba      	ldr	r2, [r7, #24]
 8002efc:	4013      	ands	r3, r2
 8002efe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d003      	beq.n	8002f14 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8002f0c:	69ba      	ldr	r2, [r7, #24]
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	69ba      	ldr	r2, [r7, #24]
 8002f18:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	43db      	mvns	r3, r3
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	4013      	ands	r3, r2
 8002f28:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d003      	beq.n	8002f3e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8002f36:	69ba      	ldr	r2, [r7, #24]
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	69ba      	ldr	r2, [r7, #24]
 8002f42:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	3301      	adds	r3, #1
 8002f48:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	fa22 f303 	lsr.w	r3, r2, r3
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	f47f ae6b 	bne.w	8002c30 <HAL_GPIO_Init+0x14>
  }
}
 8002f5a:	bf00      	nop
 8002f5c:	bf00      	nop
 8002f5e:	3724      	adds	r7, #36	; 0x24
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr
 8002f68:	58000400 	.word	0x58000400

08002f6c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002f74:	4b29      	ldr	r3, [pc, #164]	; (800301c <HAL_PWREx_ConfigSupply+0xb0>)
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	f003 0307 	and.w	r3, r3, #7
 8002f7c:	2b06      	cmp	r3, #6
 8002f7e:	d00a      	beq.n	8002f96 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002f80:	4b26      	ldr	r3, [pc, #152]	; (800301c <HAL_PWREx_ConfigSupply+0xb0>)
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d001      	beq.n	8002f92 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e03f      	b.n	8003012 <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002f92:	2300      	movs	r3, #0
 8002f94:	e03d      	b.n	8003012 <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002f96:	4b21      	ldr	r3, [pc, #132]	; (800301c <HAL_PWREx_ConfigSupply+0xb0>)
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002f9e:	491f      	ldr	r1, [pc, #124]	; (800301c <HAL_PWREx_ConfigSupply+0xb0>)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002fa6:	f7fd fa39 	bl	800041c <HAL_GetTick>
 8002faa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002fac:	e009      	b.n	8002fc2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002fae:	f7fd fa35 	bl	800041c <HAL_GetTick>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002fbc:	d901      	bls.n	8002fc2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e027      	b.n	8003012 <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002fc2:	4b16      	ldr	r3, [pc, #88]	; (800301c <HAL_PWREx_ConfigSupply+0xb0>)
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fce:	d1ee      	bne.n	8002fae <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2b1e      	cmp	r3, #30
 8002fd4:	d008      	beq.n	8002fe8 <HAL_PWREx_ConfigSupply+0x7c>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2b2e      	cmp	r3, #46	; 0x2e
 8002fda:	d005      	beq.n	8002fe8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2b1d      	cmp	r3, #29
 8002fe0:	d002      	beq.n	8002fe8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2b2d      	cmp	r3, #45	; 0x2d
 8002fe6:	d113      	bne.n	8003010 <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002fe8:	f7fd fa18 	bl	800041c <HAL_GetTick>
 8002fec:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002fee:	e009      	b.n	8003004 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002ff0:	f7fd fa14 	bl	800041c <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ffe:	d901      	bls.n	8003004 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e006      	b.n	8003012 <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003004:	4b05      	ldr	r3, [pc, #20]	; (800301c <HAL_PWREx_ConfigSupply+0xb0>)
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	f003 0311 	and.w	r3, r3, #17
 800300c:	2b11      	cmp	r3, #17
 800300e:	d1ef      	bne.n	8002ff0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3710      	adds	r7, #16
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	58024800 	.word	0x58024800

08003020 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b08c      	sub	sp, #48	; 0x30
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d101      	bne.n	8003032 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e397      	b.n	8003762 <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0301 	and.w	r3, r3, #1
 800303a:	2b00      	cmp	r3, #0
 800303c:	f000 8087 	beq.w	800314e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003040:	4b9e      	ldr	r3, [pc, #632]	; (80032bc <HAL_RCC_OscConfig+0x29c>)
 8003042:	691b      	ldr	r3, [r3, #16]
 8003044:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003048:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800304a:	4b9c      	ldr	r3, [pc, #624]	; (80032bc <HAL_RCC_OscConfig+0x29c>)
 800304c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003052:	2b10      	cmp	r3, #16
 8003054:	d007      	beq.n	8003066 <HAL_RCC_OscConfig+0x46>
 8003056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003058:	2b18      	cmp	r3, #24
 800305a:	d110      	bne.n	800307e <HAL_RCC_OscConfig+0x5e>
 800305c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800305e:	f003 0303 	and.w	r3, r3, #3
 8003062:	2b02      	cmp	r3, #2
 8003064:	d10b      	bne.n	800307e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003066:	4b95      	ldr	r3, [pc, #596]	; (80032bc <HAL_RCC_OscConfig+0x29c>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d06c      	beq.n	800314c <HAL_RCC_OscConfig+0x12c>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d168      	bne.n	800314c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e371      	b.n	8003762 <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003086:	d106      	bne.n	8003096 <HAL_RCC_OscConfig+0x76>
 8003088:	4b8c      	ldr	r3, [pc, #560]	; (80032bc <HAL_RCC_OscConfig+0x29c>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a8b      	ldr	r2, [pc, #556]	; (80032bc <HAL_RCC_OscConfig+0x29c>)
 800308e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003092:	6013      	str	r3, [r2, #0]
 8003094:	e02e      	b.n	80030f4 <HAL_RCC_OscConfig+0xd4>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d10c      	bne.n	80030b8 <HAL_RCC_OscConfig+0x98>
 800309e:	4b87      	ldr	r3, [pc, #540]	; (80032bc <HAL_RCC_OscConfig+0x29c>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a86      	ldr	r2, [pc, #536]	; (80032bc <HAL_RCC_OscConfig+0x29c>)
 80030a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030a8:	6013      	str	r3, [r2, #0]
 80030aa:	4b84      	ldr	r3, [pc, #528]	; (80032bc <HAL_RCC_OscConfig+0x29c>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a83      	ldr	r2, [pc, #524]	; (80032bc <HAL_RCC_OscConfig+0x29c>)
 80030b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030b4:	6013      	str	r3, [r2, #0]
 80030b6:	e01d      	b.n	80030f4 <HAL_RCC_OscConfig+0xd4>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030c0:	d10c      	bne.n	80030dc <HAL_RCC_OscConfig+0xbc>
 80030c2:	4b7e      	ldr	r3, [pc, #504]	; (80032bc <HAL_RCC_OscConfig+0x29c>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a7d      	ldr	r2, [pc, #500]	; (80032bc <HAL_RCC_OscConfig+0x29c>)
 80030c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030cc:	6013      	str	r3, [r2, #0]
 80030ce:	4b7b      	ldr	r3, [pc, #492]	; (80032bc <HAL_RCC_OscConfig+0x29c>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a7a      	ldr	r2, [pc, #488]	; (80032bc <HAL_RCC_OscConfig+0x29c>)
 80030d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030d8:	6013      	str	r3, [r2, #0]
 80030da:	e00b      	b.n	80030f4 <HAL_RCC_OscConfig+0xd4>
 80030dc:	4b77      	ldr	r3, [pc, #476]	; (80032bc <HAL_RCC_OscConfig+0x29c>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a76      	ldr	r2, [pc, #472]	; (80032bc <HAL_RCC_OscConfig+0x29c>)
 80030e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030e6:	6013      	str	r3, [r2, #0]
 80030e8:	4b74      	ldr	r3, [pc, #464]	; (80032bc <HAL_RCC_OscConfig+0x29c>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a73      	ldr	r2, [pc, #460]	; (80032bc <HAL_RCC_OscConfig+0x29c>)
 80030ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d013      	beq.n	8003124 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030fc:	f7fd f98e 	bl	800041c <HAL_GetTick>
 8003100:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003102:	e008      	b.n	8003116 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003104:	f7fd f98a 	bl	800041c <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	2b64      	cmp	r3, #100	; 0x64
 8003110:	d901      	bls.n	8003116 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e325      	b.n	8003762 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003116:	4b69      	ldr	r3, [pc, #420]	; (80032bc <HAL_RCC_OscConfig+0x29c>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d0f0      	beq.n	8003104 <HAL_RCC_OscConfig+0xe4>
 8003122:	e014      	b.n	800314e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003124:	f7fd f97a 	bl	800041c <HAL_GetTick>
 8003128:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800312a:	e008      	b.n	800313e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800312c:	f7fd f976 	bl	800041c <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	2b64      	cmp	r3, #100	; 0x64
 8003138:	d901      	bls.n	800313e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e311      	b.n	8003762 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800313e:	4b5f      	ldr	r3, [pc, #380]	; (80032bc <HAL_RCC_OscConfig+0x29c>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d1f0      	bne.n	800312c <HAL_RCC_OscConfig+0x10c>
 800314a:	e000      	b.n	800314e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800314c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	2b00      	cmp	r3, #0
 8003158:	f000 808a 	beq.w	8003270 <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800315c:	4b57      	ldr	r3, [pc, #348]	; (80032bc <HAL_RCC_OscConfig+0x29c>)
 800315e:	691b      	ldr	r3, [r3, #16]
 8003160:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003164:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003166:	4b55      	ldr	r3, [pc, #340]	; (80032bc <HAL_RCC_OscConfig+0x29c>)
 8003168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800316a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800316c:	6a3b      	ldr	r3, [r7, #32]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d007      	beq.n	8003182 <HAL_RCC_OscConfig+0x162>
 8003172:	6a3b      	ldr	r3, [r7, #32]
 8003174:	2b18      	cmp	r3, #24
 8003176:	d137      	bne.n	80031e8 <HAL_RCC_OscConfig+0x1c8>
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	f003 0303 	and.w	r3, r3, #3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d132      	bne.n	80031e8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003182:	4b4e      	ldr	r3, [pc, #312]	; (80032bc <HAL_RCC_OscConfig+0x29c>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0304 	and.w	r3, r3, #4
 800318a:	2b00      	cmp	r3, #0
 800318c:	d005      	beq.n	800319a <HAL_RCC_OscConfig+0x17a>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d101      	bne.n	800319a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e2e3      	b.n	8003762 <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800319a:	4b48      	ldr	r3, [pc, #288]	; (80032bc <HAL_RCC_OscConfig+0x29c>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f023 0219 	bic.w	r2, r3, #25
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	4945      	ldr	r1, [pc, #276]	; (80032bc <HAL_RCC_OscConfig+0x29c>)
 80031a8:	4313      	orrs	r3, r2
 80031aa:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80031ac:	f7fd f936 	bl	800041c <HAL_GetTick>
 80031b0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80031b2:	e008      	b.n	80031c6 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031b4:	f7fd f932 	bl	800041c <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e2cd      	b.n	8003762 <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80031c6:	4b3d      	ldr	r3, [pc, #244]	; (80032bc <HAL_RCC_OscConfig+0x29c>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0304 	and.w	r3, r3, #4
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d0f0      	beq.n	80031b4 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031d2:	4b3a      	ldr	r3, [pc, #232]	; (80032bc <HAL_RCC_OscConfig+0x29c>)
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	061b      	lsls	r3, r3, #24
 80031e0:	4936      	ldr	r1, [pc, #216]	; (80032bc <HAL_RCC_OscConfig+0x29c>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031e6:	e043      	b.n	8003270 <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d026      	beq.n	800323e <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80031f0:	4b32      	ldr	r3, [pc, #200]	; (80032bc <HAL_RCC_OscConfig+0x29c>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f023 0219 	bic.w	r2, r3, #25
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	492f      	ldr	r1, [pc, #188]	; (80032bc <HAL_RCC_OscConfig+0x29c>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003202:	f7fd f90b 	bl	800041c <HAL_GetTick>
 8003206:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003208:	e008      	b.n	800321c <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800320a:	f7fd f907 	bl	800041c <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	2b02      	cmp	r3, #2
 8003216:	d901      	bls.n	800321c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e2a2      	b.n	8003762 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800321c:	4b27      	ldr	r3, [pc, #156]	; (80032bc <HAL_RCC_OscConfig+0x29c>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0304 	and.w	r3, r3, #4
 8003224:	2b00      	cmp	r3, #0
 8003226:	d0f0      	beq.n	800320a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003228:	4b24      	ldr	r3, [pc, #144]	; (80032bc <HAL_RCC_OscConfig+0x29c>)
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	691b      	ldr	r3, [r3, #16]
 8003234:	061b      	lsls	r3, r3, #24
 8003236:	4921      	ldr	r1, [pc, #132]	; (80032bc <HAL_RCC_OscConfig+0x29c>)
 8003238:	4313      	orrs	r3, r2
 800323a:	604b      	str	r3, [r1, #4]
 800323c:	e018      	b.n	8003270 <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800323e:	4b1f      	ldr	r3, [pc, #124]	; (80032bc <HAL_RCC_OscConfig+0x29c>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a1e      	ldr	r2, [pc, #120]	; (80032bc <HAL_RCC_OscConfig+0x29c>)
 8003244:	f023 0301 	bic.w	r3, r3, #1
 8003248:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800324a:	f7fd f8e7 	bl	800041c <HAL_GetTick>
 800324e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003250:	e008      	b.n	8003264 <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003252:	f7fd f8e3 	bl	800041c <HAL_GetTick>
 8003256:	4602      	mov	r2, r0
 8003258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	2b02      	cmp	r3, #2
 800325e:	d901      	bls.n	8003264 <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e27e      	b.n	8003762 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003264:	4b15      	ldr	r3, [pc, #84]	; (80032bc <HAL_RCC_OscConfig+0x29c>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0304 	and.w	r3, r3, #4
 800326c:	2b00      	cmp	r3, #0
 800326e:	d1f0      	bne.n	8003252 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0310 	and.w	r3, r3, #16
 8003278:	2b00      	cmp	r3, #0
 800327a:	d06d      	beq.n	8003358 <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800327c:	4b0f      	ldr	r3, [pc, #60]	; (80032bc <HAL_RCC_OscConfig+0x29c>)
 800327e:	691b      	ldr	r3, [r3, #16]
 8003280:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003284:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003286:	4b0d      	ldr	r3, [pc, #52]	; (80032bc <HAL_RCC_OscConfig+0x29c>)
 8003288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328a:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	2b08      	cmp	r3, #8
 8003290:	d007      	beq.n	80032a2 <HAL_RCC_OscConfig+0x282>
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	2b18      	cmp	r3, #24
 8003296:	d11e      	bne.n	80032d6 <HAL_RCC_OscConfig+0x2b6>
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	f003 0303 	and.w	r3, r3, #3
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d119      	bne.n	80032d6 <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80032a2:	4b06      	ldr	r3, [pc, #24]	; (80032bc <HAL_RCC_OscConfig+0x29c>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d008      	beq.n	80032c0 <HAL_RCC_OscConfig+0x2a0>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	69db      	ldr	r3, [r3, #28]
 80032b2:	2b80      	cmp	r3, #128	; 0x80
 80032b4:	d004      	beq.n	80032c0 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e253      	b.n	8003762 <HAL_RCC_OscConfig+0x742>
 80032ba:	bf00      	nop
 80032bc:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80032c0:	4ba3      	ldr	r3, [pc, #652]	; (8003550 <HAL_RCC_OscConfig+0x530>)
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a1b      	ldr	r3, [r3, #32]
 80032cc:	061b      	lsls	r3, r3, #24
 80032ce:	49a0      	ldr	r1, [pc, #640]	; (8003550 <HAL_RCC_OscConfig+0x530>)
 80032d0:	4313      	orrs	r3, r2
 80032d2:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80032d4:	e040      	b.n	8003358 <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	69db      	ldr	r3, [r3, #28]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d023      	beq.n	8003326 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80032de:	4b9c      	ldr	r3, [pc, #624]	; (8003550 <HAL_RCC_OscConfig+0x530>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a9b      	ldr	r2, [pc, #620]	; (8003550 <HAL_RCC_OscConfig+0x530>)
 80032e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ea:	f7fd f897 	bl	800041c <HAL_GetTick>
 80032ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80032f0:	e008      	b.n	8003304 <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80032f2:	f7fd f893 	bl	800041c <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d901      	bls.n	8003304 <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e22e      	b.n	8003762 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003304:	4b92      	ldr	r3, [pc, #584]	; (8003550 <HAL_RCC_OscConfig+0x530>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800330c:	2b00      	cmp	r3, #0
 800330e:	d0f0      	beq.n	80032f2 <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003310:	4b8f      	ldr	r3, [pc, #572]	; (8003550 <HAL_RCC_OscConfig+0x530>)
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a1b      	ldr	r3, [r3, #32]
 800331c:	061b      	lsls	r3, r3, #24
 800331e:	498c      	ldr	r1, [pc, #560]	; (8003550 <HAL_RCC_OscConfig+0x530>)
 8003320:	4313      	orrs	r3, r2
 8003322:	60cb      	str	r3, [r1, #12]
 8003324:	e018      	b.n	8003358 <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003326:	4b8a      	ldr	r3, [pc, #552]	; (8003550 <HAL_RCC_OscConfig+0x530>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a89      	ldr	r2, [pc, #548]	; (8003550 <HAL_RCC_OscConfig+0x530>)
 800332c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003330:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003332:	f7fd f873 	bl	800041c <HAL_GetTick>
 8003336:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003338:	e008      	b.n	800334c <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800333a:	f7fd f86f 	bl	800041c <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	2b02      	cmp	r3, #2
 8003346:	d901      	bls.n	800334c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	e20a      	b.n	8003762 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800334c:	4b80      	ldr	r3, [pc, #512]	; (8003550 <HAL_RCC_OscConfig+0x530>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003354:	2b00      	cmp	r3, #0
 8003356:	d1f0      	bne.n	800333a <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0308 	and.w	r3, r3, #8
 8003360:	2b00      	cmp	r3, #0
 8003362:	d036      	beq.n	80033d2 <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	695b      	ldr	r3, [r3, #20]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d019      	beq.n	80033a0 <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800336c:	4b78      	ldr	r3, [pc, #480]	; (8003550 <HAL_RCC_OscConfig+0x530>)
 800336e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003370:	4a77      	ldr	r2, [pc, #476]	; (8003550 <HAL_RCC_OscConfig+0x530>)
 8003372:	f043 0301 	orr.w	r3, r3, #1
 8003376:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003378:	f7fd f850 	bl	800041c <HAL_GetTick>
 800337c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800337e:	e008      	b.n	8003392 <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003380:	f7fd f84c 	bl	800041c <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	2b02      	cmp	r3, #2
 800338c:	d901      	bls.n	8003392 <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e1e7      	b.n	8003762 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003392:	4b6f      	ldr	r3, [pc, #444]	; (8003550 <HAL_RCC_OscConfig+0x530>)
 8003394:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003396:	f003 0302 	and.w	r3, r3, #2
 800339a:	2b00      	cmp	r3, #0
 800339c:	d0f0      	beq.n	8003380 <HAL_RCC_OscConfig+0x360>
 800339e:	e018      	b.n	80033d2 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033a0:	4b6b      	ldr	r3, [pc, #428]	; (8003550 <HAL_RCC_OscConfig+0x530>)
 80033a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033a4:	4a6a      	ldr	r2, [pc, #424]	; (8003550 <HAL_RCC_OscConfig+0x530>)
 80033a6:	f023 0301 	bic.w	r3, r3, #1
 80033aa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ac:	f7fd f836 	bl	800041c <HAL_GetTick>
 80033b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80033b2:	e008      	b.n	80033c6 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033b4:	f7fd f832 	bl	800041c <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d901      	bls.n	80033c6 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e1cd      	b.n	8003762 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80033c6:	4b62      	ldr	r3, [pc, #392]	; (8003550 <HAL_RCC_OscConfig+0x530>)
 80033c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033ca:	f003 0302 	and.w	r3, r3, #2
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d1f0      	bne.n	80033b4 <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0320 	and.w	r3, r3, #32
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d036      	beq.n	800344c <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	699b      	ldr	r3, [r3, #24]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d019      	beq.n	800341a <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80033e6:	4b5a      	ldr	r3, [pc, #360]	; (8003550 <HAL_RCC_OscConfig+0x530>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a59      	ldr	r2, [pc, #356]	; (8003550 <HAL_RCC_OscConfig+0x530>)
 80033ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80033f0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80033f2:	f7fd f813 	bl	800041c <HAL_GetTick>
 80033f6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80033f8:	e008      	b.n	800340c <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80033fa:	f7fd f80f 	bl	800041c <HAL_GetTick>
 80033fe:	4602      	mov	r2, r0
 8003400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	2b02      	cmp	r3, #2
 8003406:	d901      	bls.n	800340c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8003408:	2303      	movs	r3, #3
 800340a:	e1aa      	b.n	8003762 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800340c:	4b50      	ldr	r3, [pc, #320]	; (8003550 <HAL_RCC_OscConfig+0x530>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003414:	2b00      	cmp	r3, #0
 8003416:	d0f0      	beq.n	80033fa <HAL_RCC_OscConfig+0x3da>
 8003418:	e018      	b.n	800344c <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800341a:	4b4d      	ldr	r3, [pc, #308]	; (8003550 <HAL_RCC_OscConfig+0x530>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a4c      	ldr	r2, [pc, #304]	; (8003550 <HAL_RCC_OscConfig+0x530>)
 8003420:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003424:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003426:	f7fc fff9 	bl	800041c <HAL_GetTick>
 800342a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800342c:	e008      	b.n	8003440 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800342e:	f7fc fff5 	bl	800041c <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	2b02      	cmp	r3, #2
 800343a:	d901      	bls.n	8003440 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e190      	b.n	8003762 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003440:	4b43      	ldr	r3, [pc, #268]	; (8003550 <HAL_RCC_OscConfig+0x530>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d1f0      	bne.n	800342e <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0304 	and.w	r3, r3, #4
 8003454:	2b00      	cmp	r3, #0
 8003456:	f000 8085 	beq.w	8003564 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800345a:	4b3e      	ldr	r3, [pc, #248]	; (8003554 <HAL_RCC_OscConfig+0x534>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a3d      	ldr	r2, [pc, #244]	; (8003554 <HAL_RCC_OscConfig+0x534>)
 8003460:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003464:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003466:	f7fc ffd9 	bl	800041c <HAL_GetTick>
 800346a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800346c:	e008      	b.n	8003480 <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800346e:	f7fc ffd5 	bl	800041c <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	2b64      	cmp	r3, #100	; 0x64
 800347a:	d901      	bls.n	8003480 <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e170      	b.n	8003762 <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003480:	4b34      	ldr	r3, [pc, #208]	; (8003554 <HAL_RCC_OscConfig+0x534>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003488:	2b00      	cmp	r3, #0
 800348a:	d0f0      	beq.n	800346e <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	2b01      	cmp	r3, #1
 8003492:	d106      	bne.n	80034a2 <HAL_RCC_OscConfig+0x482>
 8003494:	4b2e      	ldr	r3, [pc, #184]	; (8003550 <HAL_RCC_OscConfig+0x530>)
 8003496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003498:	4a2d      	ldr	r2, [pc, #180]	; (8003550 <HAL_RCC_OscConfig+0x530>)
 800349a:	f043 0301 	orr.w	r3, r3, #1
 800349e:	6713      	str	r3, [r2, #112]	; 0x70
 80034a0:	e02d      	b.n	80034fe <HAL_RCC_OscConfig+0x4de>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d10c      	bne.n	80034c4 <HAL_RCC_OscConfig+0x4a4>
 80034aa:	4b29      	ldr	r3, [pc, #164]	; (8003550 <HAL_RCC_OscConfig+0x530>)
 80034ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ae:	4a28      	ldr	r2, [pc, #160]	; (8003550 <HAL_RCC_OscConfig+0x530>)
 80034b0:	f023 0301 	bic.w	r3, r3, #1
 80034b4:	6713      	str	r3, [r2, #112]	; 0x70
 80034b6:	4b26      	ldr	r3, [pc, #152]	; (8003550 <HAL_RCC_OscConfig+0x530>)
 80034b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ba:	4a25      	ldr	r2, [pc, #148]	; (8003550 <HAL_RCC_OscConfig+0x530>)
 80034bc:	f023 0304 	bic.w	r3, r3, #4
 80034c0:	6713      	str	r3, [r2, #112]	; 0x70
 80034c2:	e01c      	b.n	80034fe <HAL_RCC_OscConfig+0x4de>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	2b05      	cmp	r3, #5
 80034ca:	d10c      	bne.n	80034e6 <HAL_RCC_OscConfig+0x4c6>
 80034cc:	4b20      	ldr	r3, [pc, #128]	; (8003550 <HAL_RCC_OscConfig+0x530>)
 80034ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d0:	4a1f      	ldr	r2, [pc, #124]	; (8003550 <HAL_RCC_OscConfig+0x530>)
 80034d2:	f043 0304 	orr.w	r3, r3, #4
 80034d6:	6713      	str	r3, [r2, #112]	; 0x70
 80034d8:	4b1d      	ldr	r3, [pc, #116]	; (8003550 <HAL_RCC_OscConfig+0x530>)
 80034da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034dc:	4a1c      	ldr	r2, [pc, #112]	; (8003550 <HAL_RCC_OscConfig+0x530>)
 80034de:	f043 0301 	orr.w	r3, r3, #1
 80034e2:	6713      	str	r3, [r2, #112]	; 0x70
 80034e4:	e00b      	b.n	80034fe <HAL_RCC_OscConfig+0x4de>
 80034e6:	4b1a      	ldr	r3, [pc, #104]	; (8003550 <HAL_RCC_OscConfig+0x530>)
 80034e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ea:	4a19      	ldr	r2, [pc, #100]	; (8003550 <HAL_RCC_OscConfig+0x530>)
 80034ec:	f023 0301 	bic.w	r3, r3, #1
 80034f0:	6713      	str	r3, [r2, #112]	; 0x70
 80034f2:	4b17      	ldr	r3, [pc, #92]	; (8003550 <HAL_RCC_OscConfig+0x530>)
 80034f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034f6:	4a16      	ldr	r2, [pc, #88]	; (8003550 <HAL_RCC_OscConfig+0x530>)
 80034f8:	f023 0304 	bic.w	r3, r3, #4
 80034fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d015      	beq.n	8003532 <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003506:	f7fc ff89 	bl	800041c <HAL_GetTick>
 800350a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800350c:	e00a      	b.n	8003524 <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800350e:	f7fc ff85 	bl	800041c <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	f241 3288 	movw	r2, #5000	; 0x1388
 800351c:	4293      	cmp	r3, r2
 800351e:	d901      	bls.n	8003524 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e11e      	b.n	8003762 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003524:	4b0a      	ldr	r3, [pc, #40]	; (8003550 <HAL_RCC_OscConfig+0x530>)
 8003526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003528:	f003 0302 	and.w	r3, r3, #2
 800352c:	2b00      	cmp	r3, #0
 800352e:	d0ee      	beq.n	800350e <HAL_RCC_OscConfig+0x4ee>
 8003530:	e018      	b.n	8003564 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003532:	f7fc ff73 	bl	800041c <HAL_GetTick>
 8003536:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003538:	e00e      	b.n	8003558 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800353a:	f7fc ff6f 	bl	800041c <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	f241 3288 	movw	r2, #5000	; 0x1388
 8003548:	4293      	cmp	r3, r2
 800354a:	d905      	bls.n	8003558 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	e108      	b.n	8003762 <HAL_RCC_OscConfig+0x742>
 8003550:	58024400 	.word	0x58024400
 8003554:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003558:	4b84      	ldr	r3, [pc, #528]	; (800376c <HAL_RCC_OscConfig+0x74c>)
 800355a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800355c:	f003 0302 	and.w	r3, r3, #2
 8003560:	2b00      	cmp	r3, #0
 8003562:	d1ea      	bne.n	800353a <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003568:	2b00      	cmp	r3, #0
 800356a:	f000 80f9 	beq.w	8003760 <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800356e:	4b7f      	ldr	r3, [pc, #508]	; (800376c <HAL_RCC_OscConfig+0x74c>)
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003576:	2b18      	cmp	r3, #24
 8003578:	f000 80b4 	beq.w	80036e4 <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003580:	2b02      	cmp	r3, #2
 8003582:	f040 8095 	bne.w	80036b0 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003586:	4b79      	ldr	r3, [pc, #484]	; (800376c <HAL_RCC_OscConfig+0x74c>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a78      	ldr	r2, [pc, #480]	; (800376c <HAL_RCC_OscConfig+0x74c>)
 800358c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003590:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003592:	f7fc ff43 	bl	800041c <HAL_GetTick>
 8003596:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003598:	e008      	b.n	80035ac <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800359a:	f7fc ff3f 	bl	800041c <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d901      	bls.n	80035ac <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e0da      	b.n	8003762 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80035ac:	4b6f      	ldr	r3, [pc, #444]	; (800376c <HAL_RCC_OscConfig+0x74c>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d1f0      	bne.n	800359a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035b8:	4b6c      	ldr	r3, [pc, #432]	; (800376c <HAL_RCC_OscConfig+0x74c>)
 80035ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035bc:	4b6c      	ldr	r3, [pc, #432]	; (8003770 <HAL_RCC_OscConfig+0x750>)
 80035be:	4013      	ands	r3, r2
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80035c8:	0112      	lsls	r2, r2, #4
 80035ca:	430a      	orrs	r2, r1
 80035cc:	4967      	ldr	r1, [pc, #412]	; (800376c <HAL_RCC_OscConfig+0x74c>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	628b      	str	r3, [r1, #40]	; 0x28
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d6:	3b01      	subs	r3, #1
 80035d8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035e0:	3b01      	subs	r3, #1
 80035e2:	025b      	lsls	r3, r3, #9
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	431a      	orrs	r2, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ec:	3b01      	subs	r3, #1
 80035ee:	041b      	lsls	r3, r3, #16
 80035f0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80035f4:	431a      	orrs	r2, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035fa:	3b01      	subs	r3, #1
 80035fc:	061b      	lsls	r3, r3, #24
 80035fe:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003602:	495a      	ldr	r1, [pc, #360]	; (800376c <HAL_RCC_OscConfig+0x74c>)
 8003604:	4313      	orrs	r3, r2
 8003606:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003608:	4b58      	ldr	r3, [pc, #352]	; (800376c <HAL_RCC_OscConfig+0x74c>)
 800360a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360c:	4a57      	ldr	r2, [pc, #348]	; (800376c <HAL_RCC_OscConfig+0x74c>)
 800360e:	f023 0301 	bic.w	r3, r3, #1
 8003612:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003614:	4b55      	ldr	r3, [pc, #340]	; (800376c <HAL_RCC_OscConfig+0x74c>)
 8003616:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003618:	4b56      	ldr	r3, [pc, #344]	; (8003774 <HAL_RCC_OscConfig+0x754>)
 800361a:	4013      	ands	r3, r2
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003620:	00d2      	lsls	r2, r2, #3
 8003622:	4952      	ldr	r1, [pc, #328]	; (800376c <HAL_RCC_OscConfig+0x74c>)
 8003624:	4313      	orrs	r3, r2
 8003626:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003628:	4b50      	ldr	r3, [pc, #320]	; (800376c <HAL_RCC_OscConfig+0x74c>)
 800362a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362c:	f023 020c 	bic.w	r2, r3, #12
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003634:	494d      	ldr	r1, [pc, #308]	; (800376c <HAL_RCC_OscConfig+0x74c>)
 8003636:	4313      	orrs	r3, r2
 8003638:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800363a:	4b4c      	ldr	r3, [pc, #304]	; (800376c <HAL_RCC_OscConfig+0x74c>)
 800363c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800363e:	f023 0202 	bic.w	r2, r3, #2
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003646:	4949      	ldr	r1, [pc, #292]	; (800376c <HAL_RCC_OscConfig+0x74c>)
 8003648:	4313      	orrs	r3, r2
 800364a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800364c:	4b47      	ldr	r3, [pc, #284]	; (800376c <HAL_RCC_OscConfig+0x74c>)
 800364e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003650:	4a46      	ldr	r2, [pc, #280]	; (800376c <HAL_RCC_OscConfig+0x74c>)
 8003652:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003656:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003658:	4b44      	ldr	r3, [pc, #272]	; (800376c <HAL_RCC_OscConfig+0x74c>)
 800365a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800365c:	4a43      	ldr	r2, [pc, #268]	; (800376c <HAL_RCC_OscConfig+0x74c>)
 800365e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003662:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003664:	4b41      	ldr	r3, [pc, #260]	; (800376c <HAL_RCC_OscConfig+0x74c>)
 8003666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003668:	4a40      	ldr	r2, [pc, #256]	; (800376c <HAL_RCC_OscConfig+0x74c>)
 800366a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800366e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003670:	4b3e      	ldr	r3, [pc, #248]	; (800376c <HAL_RCC_OscConfig+0x74c>)
 8003672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003674:	4a3d      	ldr	r2, [pc, #244]	; (800376c <HAL_RCC_OscConfig+0x74c>)
 8003676:	f043 0301 	orr.w	r3, r3, #1
 800367a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800367c:	4b3b      	ldr	r3, [pc, #236]	; (800376c <HAL_RCC_OscConfig+0x74c>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a3a      	ldr	r2, [pc, #232]	; (800376c <HAL_RCC_OscConfig+0x74c>)
 8003682:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003686:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003688:	f7fc fec8 	bl	800041c <HAL_GetTick>
 800368c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800368e:	e008      	b.n	80036a2 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003690:	f7fc fec4 	bl	800041c <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	2b02      	cmp	r3, #2
 800369c:	d901      	bls.n	80036a2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e05f      	b.n	8003762 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80036a2:	4b32      	ldr	r3, [pc, #200]	; (800376c <HAL_RCC_OscConfig+0x74c>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d0f0      	beq.n	8003690 <HAL_RCC_OscConfig+0x670>
 80036ae:	e057      	b.n	8003760 <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036b0:	4b2e      	ldr	r3, [pc, #184]	; (800376c <HAL_RCC_OscConfig+0x74c>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a2d      	ldr	r2, [pc, #180]	; (800376c <HAL_RCC_OscConfig+0x74c>)
 80036b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036bc:	f7fc feae 	bl	800041c <HAL_GetTick>
 80036c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80036c2:	e008      	b.n	80036d6 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036c4:	f7fc feaa 	bl	800041c <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d901      	bls.n	80036d6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e045      	b.n	8003762 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80036d6:	4b25      	ldr	r3, [pc, #148]	; (800376c <HAL_RCC_OscConfig+0x74c>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d1f0      	bne.n	80036c4 <HAL_RCC_OscConfig+0x6a4>
 80036e2:	e03d      	b.n	8003760 <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80036e4:	4b21      	ldr	r3, [pc, #132]	; (800376c <HAL_RCC_OscConfig+0x74c>)
 80036e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80036ea:	4b20      	ldr	r3, [pc, #128]	; (800376c <HAL_RCC_OscConfig+0x74c>)
 80036ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ee:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d031      	beq.n	800375c <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	f003 0203 	and.w	r2, r3, #3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003702:	429a      	cmp	r2, r3
 8003704:	d12a      	bne.n	800375c <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	091b      	lsrs	r3, r3, #4
 800370a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003712:	429a      	cmp	r2, r3
 8003714:	d122      	bne.n	800375c <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003720:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003722:	429a      	cmp	r2, r3
 8003724:	d11a      	bne.n	800375c <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	0a5b      	lsrs	r3, r3, #9
 800372a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003732:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003734:	429a      	cmp	r2, r3
 8003736:	d111      	bne.n	800375c <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	0c1b      	lsrs	r3, r3, #16
 800373c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003744:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003746:	429a      	cmp	r2, r3
 8003748:	d108      	bne.n	800375c <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	0e1b      	lsrs	r3, r3, #24
 800374e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003756:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003758:	429a      	cmp	r2, r3
 800375a:	d001      	beq.n	8003760 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e000      	b.n	8003762 <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3730      	adds	r7, #48	; 0x30
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	58024400 	.word	0x58024400
 8003770:	fffffc0c 	.word	0xfffffc0c
 8003774:	ffff0007 	.word	0xffff0007

08003778 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b086      	sub	sp, #24
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d101      	bne.n	800378c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	e19c      	b.n	8003ac6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800378c:	4b8a      	ldr	r3, [pc, #552]	; (80039b8 <HAL_RCC_ClockConfig+0x240>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 030f 	and.w	r3, r3, #15
 8003794:	683a      	ldr	r2, [r7, #0]
 8003796:	429a      	cmp	r2, r3
 8003798:	d910      	bls.n	80037bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800379a:	4b87      	ldr	r3, [pc, #540]	; (80039b8 <HAL_RCC_ClockConfig+0x240>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f023 020f 	bic.w	r2, r3, #15
 80037a2:	4985      	ldr	r1, [pc, #532]	; (80039b8 <HAL_RCC_ClockConfig+0x240>)
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037aa:	4b83      	ldr	r3, [pc, #524]	; (80039b8 <HAL_RCC_ClockConfig+0x240>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 030f 	and.w	r3, r3, #15
 80037b2:	683a      	ldr	r2, [r7, #0]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d001      	beq.n	80037bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e184      	b.n	8003ac6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0304 	and.w	r3, r3, #4
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d010      	beq.n	80037ea <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	691a      	ldr	r2, [r3, #16]
 80037cc:	4b7b      	ldr	r3, [pc, #492]	; (80039bc <HAL_RCC_ClockConfig+0x244>)
 80037ce:	699b      	ldr	r3, [r3, #24]
 80037d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d908      	bls.n	80037ea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80037d8:	4b78      	ldr	r3, [pc, #480]	; (80039bc <HAL_RCC_ClockConfig+0x244>)
 80037da:	699b      	ldr	r3, [r3, #24]
 80037dc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	691b      	ldr	r3, [r3, #16]
 80037e4:	4975      	ldr	r1, [pc, #468]	; (80039bc <HAL_RCC_ClockConfig+0x244>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0308 	and.w	r3, r3, #8
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d010      	beq.n	8003818 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	695a      	ldr	r2, [r3, #20]
 80037fa:	4b70      	ldr	r3, [pc, #448]	; (80039bc <HAL_RCC_ClockConfig+0x244>)
 80037fc:	69db      	ldr	r3, [r3, #28]
 80037fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003802:	429a      	cmp	r2, r3
 8003804:	d908      	bls.n	8003818 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003806:	4b6d      	ldr	r3, [pc, #436]	; (80039bc <HAL_RCC_ClockConfig+0x244>)
 8003808:	69db      	ldr	r3, [r3, #28]
 800380a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	695b      	ldr	r3, [r3, #20]
 8003812:	496a      	ldr	r1, [pc, #424]	; (80039bc <HAL_RCC_ClockConfig+0x244>)
 8003814:	4313      	orrs	r3, r2
 8003816:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0310 	and.w	r3, r3, #16
 8003820:	2b00      	cmp	r3, #0
 8003822:	d010      	beq.n	8003846 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	699a      	ldr	r2, [r3, #24]
 8003828:	4b64      	ldr	r3, [pc, #400]	; (80039bc <HAL_RCC_ClockConfig+0x244>)
 800382a:	69db      	ldr	r3, [r3, #28]
 800382c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003830:	429a      	cmp	r2, r3
 8003832:	d908      	bls.n	8003846 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003834:	4b61      	ldr	r3, [pc, #388]	; (80039bc <HAL_RCC_ClockConfig+0x244>)
 8003836:	69db      	ldr	r3, [r3, #28]
 8003838:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	699b      	ldr	r3, [r3, #24]
 8003840:	495e      	ldr	r1, [pc, #376]	; (80039bc <HAL_RCC_ClockConfig+0x244>)
 8003842:	4313      	orrs	r3, r2
 8003844:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0320 	and.w	r3, r3, #32
 800384e:	2b00      	cmp	r3, #0
 8003850:	d010      	beq.n	8003874 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	69da      	ldr	r2, [r3, #28]
 8003856:	4b59      	ldr	r3, [pc, #356]	; (80039bc <HAL_RCC_ClockConfig+0x244>)
 8003858:	6a1b      	ldr	r3, [r3, #32]
 800385a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800385e:	429a      	cmp	r2, r3
 8003860:	d908      	bls.n	8003874 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003862:	4b56      	ldr	r3, [pc, #344]	; (80039bc <HAL_RCC_ClockConfig+0x244>)
 8003864:	6a1b      	ldr	r3, [r3, #32]
 8003866:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	69db      	ldr	r3, [r3, #28]
 800386e:	4953      	ldr	r1, [pc, #332]	; (80039bc <HAL_RCC_ClockConfig+0x244>)
 8003870:	4313      	orrs	r3, r2
 8003872:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0302 	and.w	r3, r3, #2
 800387c:	2b00      	cmp	r3, #0
 800387e:	d010      	beq.n	80038a2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	68da      	ldr	r2, [r3, #12]
 8003884:	4b4d      	ldr	r3, [pc, #308]	; (80039bc <HAL_RCC_ClockConfig+0x244>)
 8003886:	699b      	ldr	r3, [r3, #24]
 8003888:	f003 030f 	and.w	r3, r3, #15
 800388c:	429a      	cmp	r2, r3
 800388e:	d908      	bls.n	80038a2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003890:	4b4a      	ldr	r3, [pc, #296]	; (80039bc <HAL_RCC_ClockConfig+0x244>)
 8003892:	699b      	ldr	r3, [r3, #24]
 8003894:	f023 020f 	bic.w	r2, r3, #15
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	4947      	ldr	r1, [pc, #284]	; (80039bc <HAL_RCC_ClockConfig+0x244>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0301 	and.w	r3, r3, #1
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d055      	beq.n	800395a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80038ae:	4b43      	ldr	r3, [pc, #268]	; (80039bc <HAL_RCC_ClockConfig+0x244>)
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	4940      	ldr	r1, [pc, #256]	; (80039bc <HAL_RCC_ClockConfig+0x244>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d107      	bne.n	80038d8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80038c8:	4b3c      	ldr	r3, [pc, #240]	; (80039bc <HAL_RCC_ClockConfig+0x244>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d121      	bne.n	8003918 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e0f6      	b.n	8003ac6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	2b03      	cmp	r3, #3
 80038de:	d107      	bne.n	80038f0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80038e0:	4b36      	ldr	r3, [pc, #216]	; (80039bc <HAL_RCC_ClockConfig+0x244>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d115      	bne.n	8003918 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e0ea      	b.n	8003ac6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d107      	bne.n	8003908 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80038f8:	4b30      	ldr	r3, [pc, #192]	; (80039bc <HAL_RCC_ClockConfig+0x244>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003900:	2b00      	cmp	r3, #0
 8003902:	d109      	bne.n	8003918 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e0de      	b.n	8003ac6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003908:	4b2c      	ldr	r3, [pc, #176]	; (80039bc <HAL_RCC_ClockConfig+0x244>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0304 	and.w	r3, r3, #4
 8003910:	2b00      	cmp	r3, #0
 8003912:	d101      	bne.n	8003918 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e0d6      	b.n	8003ac6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003918:	4b28      	ldr	r3, [pc, #160]	; (80039bc <HAL_RCC_ClockConfig+0x244>)
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	f023 0207 	bic.w	r2, r3, #7
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	4925      	ldr	r1, [pc, #148]	; (80039bc <HAL_RCC_ClockConfig+0x244>)
 8003926:	4313      	orrs	r3, r2
 8003928:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800392a:	f7fc fd77 	bl	800041c <HAL_GetTick>
 800392e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003930:	e00a      	b.n	8003948 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003932:	f7fc fd73 	bl	800041c <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003940:	4293      	cmp	r3, r2
 8003942:	d901      	bls.n	8003948 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003944:	2303      	movs	r3, #3
 8003946:	e0be      	b.n	8003ac6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003948:	4b1c      	ldr	r3, [pc, #112]	; (80039bc <HAL_RCC_ClockConfig+0x244>)
 800394a:	691b      	ldr	r3, [r3, #16]
 800394c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	00db      	lsls	r3, r3, #3
 8003956:	429a      	cmp	r2, r3
 8003958:	d1eb      	bne.n	8003932 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	2b00      	cmp	r3, #0
 8003964:	d010      	beq.n	8003988 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	68da      	ldr	r2, [r3, #12]
 800396a:	4b14      	ldr	r3, [pc, #80]	; (80039bc <HAL_RCC_ClockConfig+0x244>)
 800396c:	699b      	ldr	r3, [r3, #24]
 800396e:	f003 030f 	and.w	r3, r3, #15
 8003972:	429a      	cmp	r2, r3
 8003974:	d208      	bcs.n	8003988 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003976:	4b11      	ldr	r3, [pc, #68]	; (80039bc <HAL_RCC_ClockConfig+0x244>)
 8003978:	699b      	ldr	r3, [r3, #24]
 800397a:	f023 020f 	bic.w	r2, r3, #15
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	490e      	ldr	r1, [pc, #56]	; (80039bc <HAL_RCC_ClockConfig+0x244>)
 8003984:	4313      	orrs	r3, r2
 8003986:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003988:	4b0b      	ldr	r3, [pc, #44]	; (80039b8 <HAL_RCC_ClockConfig+0x240>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 030f 	and.w	r3, r3, #15
 8003990:	683a      	ldr	r2, [r7, #0]
 8003992:	429a      	cmp	r2, r3
 8003994:	d214      	bcs.n	80039c0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003996:	4b08      	ldr	r3, [pc, #32]	; (80039b8 <HAL_RCC_ClockConfig+0x240>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f023 020f 	bic.w	r2, r3, #15
 800399e:	4906      	ldr	r1, [pc, #24]	; (80039b8 <HAL_RCC_ClockConfig+0x240>)
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039a6:	4b04      	ldr	r3, [pc, #16]	; (80039b8 <HAL_RCC_ClockConfig+0x240>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 030f 	and.w	r3, r3, #15
 80039ae:	683a      	ldr	r2, [r7, #0]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d005      	beq.n	80039c0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e086      	b.n	8003ac6 <HAL_RCC_ClockConfig+0x34e>
 80039b8:	52002000 	.word	0x52002000
 80039bc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0304 	and.w	r3, r3, #4
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d010      	beq.n	80039ee <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	691a      	ldr	r2, [r3, #16]
 80039d0:	4b3f      	ldr	r3, [pc, #252]	; (8003ad0 <HAL_RCC_ClockConfig+0x358>)
 80039d2:	699b      	ldr	r3, [r3, #24]
 80039d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80039d8:	429a      	cmp	r2, r3
 80039da:	d208      	bcs.n	80039ee <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80039dc:	4b3c      	ldr	r3, [pc, #240]	; (8003ad0 <HAL_RCC_ClockConfig+0x358>)
 80039de:	699b      	ldr	r3, [r3, #24]
 80039e0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	691b      	ldr	r3, [r3, #16]
 80039e8:	4939      	ldr	r1, [pc, #228]	; (8003ad0 <HAL_RCC_ClockConfig+0x358>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0308 	and.w	r3, r3, #8
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d010      	beq.n	8003a1c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	695a      	ldr	r2, [r3, #20]
 80039fe:	4b34      	ldr	r3, [pc, #208]	; (8003ad0 <HAL_RCC_ClockConfig+0x358>)
 8003a00:	69db      	ldr	r3, [r3, #28]
 8003a02:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d208      	bcs.n	8003a1c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003a0a:	4b31      	ldr	r3, [pc, #196]	; (8003ad0 <HAL_RCC_ClockConfig+0x358>)
 8003a0c:	69db      	ldr	r3, [r3, #28]
 8003a0e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	695b      	ldr	r3, [r3, #20]
 8003a16:	492e      	ldr	r1, [pc, #184]	; (8003ad0 <HAL_RCC_ClockConfig+0x358>)
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0310 	and.w	r3, r3, #16
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d010      	beq.n	8003a4a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	699a      	ldr	r2, [r3, #24]
 8003a2c:	4b28      	ldr	r3, [pc, #160]	; (8003ad0 <HAL_RCC_ClockConfig+0x358>)
 8003a2e:	69db      	ldr	r3, [r3, #28]
 8003a30:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d208      	bcs.n	8003a4a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003a38:	4b25      	ldr	r3, [pc, #148]	; (8003ad0 <HAL_RCC_ClockConfig+0x358>)
 8003a3a:	69db      	ldr	r3, [r3, #28]
 8003a3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	699b      	ldr	r3, [r3, #24]
 8003a44:	4922      	ldr	r1, [pc, #136]	; (8003ad0 <HAL_RCC_ClockConfig+0x358>)
 8003a46:	4313      	orrs	r3, r2
 8003a48:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0320 	and.w	r3, r3, #32
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d010      	beq.n	8003a78 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	69da      	ldr	r2, [r3, #28]
 8003a5a:	4b1d      	ldr	r3, [pc, #116]	; (8003ad0 <HAL_RCC_ClockConfig+0x358>)
 8003a5c:	6a1b      	ldr	r3, [r3, #32]
 8003a5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d208      	bcs.n	8003a78 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003a66:	4b1a      	ldr	r3, [pc, #104]	; (8003ad0 <HAL_RCC_ClockConfig+0x358>)
 8003a68:	6a1b      	ldr	r3, [r3, #32]
 8003a6a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	69db      	ldr	r3, [r3, #28]
 8003a72:	4917      	ldr	r1, [pc, #92]	; (8003ad0 <HAL_RCC_ClockConfig+0x358>)
 8003a74:	4313      	orrs	r3, r2
 8003a76:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003a78:	f000 f834 	bl	8003ae4 <HAL_RCC_GetSysClockFreq>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	4b14      	ldr	r3, [pc, #80]	; (8003ad0 <HAL_RCC_ClockConfig+0x358>)
 8003a80:	699b      	ldr	r3, [r3, #24]
 8003a82:	0a1b      	lsrs	r3, r3, #8
 8003a84:	f003 030f 	and.w	r3, r3, #15
 8003a88:	4912      	ldr	r1, [pc, #72]	; (8003ad4 <HAL_RCC_ClockConfig+0x35c>)
 8003a8a:	5ccb      	ldrb	r3, [r1, r3]
 8003a8c:	f003 031f 	and.w	r3, r3, #31
 8003a90:	fa22 f303 	lsr.w	r3, r2, r3
 8003a94:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003a96:	4b0e      	ldr	r3, [pc, #56]	; (8003ad0 <HAL_RCC_ClockConfig+0x358>)
 8003a98:	699b      	ldr	r3, [r3, #24]
 8003a9a:	f003 030f 	and.w	r3, r3, #15
 8003a9e:	4a0d      	ldr	r2, [pc, #52]	; (8003ad4 <HAL_RCC_ClockConfig+0x35c>)
 8003aa0:	5cd3      	ldrb	r3, [r2, r3]
 8003aa2:	f003 031f 	and.w	r3, r3, #31
 8003aa6:	693a      	ldr	r2, [r7, #16]
 8003aa8:	fa22 f303 	lsr.w	r3, r2, r3
 8003aac:	4a0a      	ldr	r2, [pc, #40]	; (8003ad8 <HAL_RCC_ClockConfig+0x360>)
 8003aae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003ab0:	4a0a      	ldr	r2, [pc, #40]	; (8003adc <HAL_RCC_ClockConfig+0x364>)
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003ab6:	4b0a      	ldr	r3, [pc, #40]	; (8003ae0 <HAL_RCC_ClockConfig+0x368>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4618      	mov	r0, r3
 8003abc:	f7fc fc64 	bl	8000388 <HAL_InitTick>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3718      	adds	r7, #24
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	58024400 	.word	0x58024400
 8003ad4:	080094f0 	.word	0x080094f0
 8003ad8:	2400040c 	.word	0x2400040c
 8003adc:	24000408 	.word	0x24000408
 8003ae0:	24000400 	.word	0x24000400

08003ae4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b089      	sub	sp, #36	; 0x24
 8003ae8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003aea:	4bb3      	ldr	r3, [pc, #716]	; (8003db8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003af2:	2b18      	cmp	r3, #24
 8003af4:	f200 8155 	bhi.w	8003da2 <HAL_RCC_GetSysClockFreq+0x2be>
 8003af8:	a201      	add	r2, pc, #4	; (adr r2, 8003b00 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003afe:	bf00      	nop
 8003b00:	08003b65 	.word	0x08003b65
 8003b04:	08003da3 	.word	0x08003da3
 8003b08:	08003da3 	.word	0x08003da3
 8003b0c:	08003da3 	.word	0x08003da3
 8003b10:	08003da3 	.word	0x08003da3
 8003b14:	08003da3 	.word	0x08003da3
 8003b18:	08003da3 	.word	0x08003da3
 8003b1c:	08003da3 	.word	0x08003da3
 8003b20:	08003b8b 	.word	0x08003b8b
 8003b24:	08003da3 	.word	0x08003da3
 8003b28:	08003da3 	.word	0x08003da3
 8003b2c:	08003da3 	.word	0x08003da3
 8003b30:	08003da3 	.word	0x08003da3
 8003b34:	08003da3 	.word	0x08003da3
 8003b38:	08003da3 	.word	0x08003da3
 8003b3c:	08003da3 	.word	0x08003da3
 8003b40:	08003b91 	.word	0x08003b91
 8003b44:	08003da3 	.word	0x08003da3
 8003b48:	08003da3 	.word	0x08003da3
 8003b4c:	08003da3 	.word	0x08003da3
 8003b50:	08003da3 	.word	0x08003da3
 8003b54:	08003da3 	.word	0x08003da3
 8003b58:	08003da3 	.word	0x08003da3
 8003b5c:	08003da3 	.word	0x08003da3
 8003b60:	08003b97 	.word	0x08003b97
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003b64:	4b94      	ldr	r3, [pc, #592]	; (8003db8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0320 	and.w	r3, r3, #32
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d009      	beq.n	8003b84 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003b70:	4b91      	ldr	r3, [pc, #580]	; (8003db8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	08db      	lsrs	r3, r3, #3
 8003b76:	f003 0303 	and.w	r3, r3, #3
 8003b7a:	4a90      	ldr	r2, [pc, #576]	; (8003dbc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003b7c:	fa22 f303 	lsr.w	r3, r2, r3
 8003b80:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003b82:	e111      	b.n	8003da8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003b84:	4b8d      	ldr	r3, [pc, #564]	; (8003dbc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003b86:	61bb      	str	r3, [r7, #24]
    break;
 8003b88:	e10e      	b.n	8003da8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003b8a:	4b8d      	ldr	r3, [pc, #564]	; (8003dc0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003b8c:	61bb      	str	r3, [r7, #24]
    break;
 8003b8e:	e10b      	b.n	8003da8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003b90:	4b8c      	ldr	r3, [pc, #560]	; (8003dc4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003b92:	61bb      	str	r3, [r7, #24]
    break;
 8003b94:	e108      	b.n	8003da8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003b96:	4b88      	ldr	r3, [pc, #544]	; (8003db8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b9a:	f003 0303 	and.w	r3, r3, #3
 8003b9e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003ba0:	4b85      	ldr	r3, [pc, #532]	; (8003db8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba4:	091b      	lsrs	r3, r3, #4
 8003ba6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003baa:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003bac:	4b82      	ldr	r3, [pc, #520]	; (8003db8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb0:	f003 0301 	and.w	r3, r3, #1
 8003bb4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003bb6:	4b80      	ldr	r3, [pc, #512]	; (8003db8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bba:	08db      	lsrs	r3, r3, #3
 8003bbc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003bc0:	68fa      	ldr	r2, [r7, #12]
 8003bc2:	fb02 f303 	mul.w	r3, r2, r3
 8003bc6:	ee07 3a90 	vmov	s15, r3
 8003bca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bce:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	f000 80e1 	beq.w	8003d9c <HAL_RCC_GetSysClockFreq+0x2b8>
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	2b02      	cmp	r3, #2
 8003bde:	f000 8083 	beq.w	8003ce8 <HAL_RCC_GetSysClockFreq+0x204>
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	f200 80a1 	bhi.w	8003d2c <HAL_RCC_GetSysClockFreq+0x248>
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d003      	beq.n	8003bf8 <HAL_RCC_GetSysClockFreq+0x114>
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d056      	beq.n	8003ca4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003bf6:	e099      	b.n	8003d2c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003bf8:	4b6f      	ldr	r3, [pc, #444]	; (8003db8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0320 	and.w	r3, r3, #32
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d02d      	beq.n	8003c60 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003c04:	4b6c      	ldr	r3, [pc, #432]	; (8003db8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	08db      	lsrs	r3, r3, #3
 8003c0a:	f003 0303 	and.w	r3, r3, #3
 8003c0e:	4a6b      	ldr	r2, [pc, #428]	; (8003dbc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003c10:	fa22 f303 	lsr.w	r3, r2, r3
 8003c14:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	ee07 3a90 	vmov	s15, r3
 8003c1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	ee07 3a90 	vmov	s15, r3
 8003c26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c2e:	4b62      	ldr	r3, [pc, #392]	; (8003db8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c36:	ee07 3a90 	vmov	s15, r3
 8003c3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c42:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003dc8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003c46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c5a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003c5e:	e087      	b.n	8003d70 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	ee07 3a90 	vmov	s15, r3
 8003c66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c6a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003dcc <HAL_RCC_GetSysClockFreq+0x2e8>
 8003c6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c72:	4b51      	ldr	r3, [pc, #324]	; (8003db8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c7a:	ee07 3a90 	vmov	s15, r3
 8003c7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c82:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c86:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003dc8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003c8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ca2:	e065      	b.n	8003d70 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	ee07 3a90 	vmov	s15, r3
 8003caa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cae:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003dd0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003cb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cb6:	4b40      	ldr	r3, [pc, #256]	; (8003db8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cbe:	ee07 3a90 	vmov	s15, r3
 8003cc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cc6:	ed97 6a02 	vldr	s12, [r7, #8]
 8003cca:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003dc8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003cce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003cda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ce2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ce6:	e043      	b.n	8003d70 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	ee07 3a90 	vmov	s15, r3
 8003cee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cf2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003dd4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003cf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cfa:	4b2f      	ldr	r3, [pc, #188]	; (8003db8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d02:	ee07 3a90 	vmov	s15, r3
 8003d06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d0e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003dc8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d2a:	e021      	b.n	8003d70 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	ee07 3a90 	vmov	s15, r3
 8003d32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d36:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003dd0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003d3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d3e:	4b1e      	ldr	r3, [pc, #120]	; (8003db8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d46:	ee07 3a90 	vmov	s15, r3
 8003d4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d52:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003dc8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d6e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003d70:	4b11      	ldr	r3, [pc, #68]	; (8003db8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d74:	0a5b      	lsrs	r3, r3, #9
 8003d76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	ee07 3a90 	vmov	s15, r3
 8003d84:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003d88:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d94:	ee17 3a90 	vmov	r3, s15
 8003d98:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003d9a:	e005      	b.n	8003da8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	61bb      	str	r3, [r7, #24]
    break;
 8003da0:	e002      	b.n	8003da8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003da2:	4b07      	ldr	r3, [pc, #28]	; (8003dc0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003da4:	61bb      	str	r3, [r7, #24]
    break;
 8003da6:	bf00      	nop
  }

  return sysclockfreq;
 8003da8:	69bb      	ldr	r3, [r7, #24]
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3724      	adds	r7, #36	; 0x24
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr
 8003db6:	bf00      	nop
 8003db8:	58024400 	.word	0x58024400
 8003dbc:	03d09000 	.word	0x03d09000
 8003dc0:	003d0900 	.word	0x003d0900
 8003dc4:	017d7840 	.word	0x017d7840
 8003dc8:	46000000 	.word	0x46000000
 8003dcc:	4c742400 	.word	0x4c742400
 8003dd0:	4a742400 	.word	0x4a742400
 8003dd4:	4bbebc20 	.word	0x4bbebc20

08003dd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003dde:	f7ff fe81 	bl	8003ae4 <HAL_RCC_GetSysClockFreq>
 8003de2:	4602      	mov	r2, r0
 8003de4:	4b10      	ldr	r3, [pc, #64]	; (8003e28 <HAL_RCC_GetHCLKFreq+0x50>)
 8003de6:	699b      	ldr	r3, [r3, #24]
 8003de8:	0a1b      	lsrs	r3, r3, #8
 8003dea:	f003 030f 	and.w	r3, r3, #15
 8003dee:	490f      	ldr	r1, [pc, #60]	; (8003e2c <HAL_RCC_GetHCLKFreq+0x54>)
 8003df0:	5ccb      	ldrb	r3, [r1, r3]
 8003df2:	f003 031f 	and.w	r3, r3, #31
 8003df6:	fa22 f303 	lsr.w	r3, r2, r3
 8003dfa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003dfc:	4b0a      	ldr	r3, [pc, #40]	; (8003e28 <HAL_RCC_GetHCLKFreq+0x50>)
 8003dfe:	699b      	ldr	r3, [r3, #24]
 8003e00:	f003 030f 	and.w	r3, r3, #15
 8003e04:	4a09      	ldr	r2, [pc, #36]	; (8003e2c <HAL_RCC_GetHCLKFreq+0x54>)
 8003e06:	5cd3      	ldrb	r3, [r2, r3]
 8003e08:	f003 031f 	and.w	r3, r3, #31
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	fa22 f303 	lsr.w	r3, r2, r3
 8003e12:	4a07      	ldr	r2, [pc, #28]	; (8003e30 <HAL_RCC_GetHCLKFreq+0x58>)
 8003e14:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003e16:	4a07      	ldr	r2, [pc, #28]	; (8003e34 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003e1c:	4b04      	ldr	r3, [pc, #16]	; (8003e30 <HAL_RCC_GetHCLKFreq+0x58>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3708      	adds	r7, #8
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	58024400 	.word	0x58024400
 8003e2c:	080094f0 	.word	0x080094f0
 8003e30:	2400040c 	.word	0x2400040c
 8003e34:	24000408 	.word	0x24000408

08003e38 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b086      	sub	sp, #24
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003e40:	2300      	movs	r3, #0
 8003e42:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e44:	2300      	movs	r3, #0
 8003e46:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d03f      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e58:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003e5c:	d02a      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003e5e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003e62:	d824      	bhi.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003e64:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e68:	d018      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003e6a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e6e:	d81e      	bhi.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d003      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003e74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e78:	d007      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003e7a:	e018      	b.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e7c:	4bab      	ldr	r3, [pc, #684]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e80:	4aaa      	ldr	r2, [pc, #680]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e86:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003e88:	e015      	b.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	3304      	adds	r3, #4
 8003e8e:	2102      	movs	r1, #2
 8003e90:	4618      	mov	r0, r3
 8003e92:	f001 feff 	bl	8005c94 <RCCEx_PLL2_Config>
 8003e96:	4603      	mov	r3, r0
 8003e98:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003e9a:	e00c      	b.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	3324      	adds	r3, #36	; 0x24
 8003ea0:	2102      	movs	r1, #2
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f001 ffa8 	bl	8005df8 <RCCEx_PLL3_Config>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003eac:	e003      	b.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	75fb      	strb	r3, [r7, #23]
      break;
 8003eb2:	e000      	b.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003eb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003eb6:	7dfb      	ldrb	r3, [r7, #23]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d109      	bne.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003ebc:	4b9b      	ldr	r3, [pc, #620]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ebe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ec0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ec8:	4998      	ldr	r1, [pc, #608]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	650b      	str	r3, [r1, #80]	; 0x50
 8003ece:	e001      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ed0:	7dfb      	ldrb	r3, [r7, #23]
 8003ed2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d03d      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ee4:	2b04      	cmp	r3, #4
 8003ee6:	d826      	bhi.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003ee8:	a201      	add	r2, pc, #4	; (adr r2, 8003ef0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eee:	bf00      	nop
 8003ef0:	08003f05 	.word	0x08003f05
 8003ef4:	08003f13 	.word	0x08003f13
 8003ef8:	08003f25 	.word	0x08003f25
 8003efc:	08003f3d 	.word	0x08003f3d
 8003f00:	08003f3d 	.word	0x08003f3d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f04:	4b89      	ldr	r3, [pc, #548]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f08:	4a88      	ldr	r2, [pc, #544]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f0e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003f10:	e015      	b.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	3304      	adds	r3, #4
 8003f16:	2100      	movs	r1, #0
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f001 febb 	bl	8005c94 <RCCEx_PLL2_Config>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003f22:	e00c      	b.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	3324      	adds	r3, #36	; 0x24
 8003f28:	2100      	movs	r1, #0
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f001 ff64 	bl	8005df8 <RCCEx_PLL3_Config>
 8003f30:	4603      	mov	r3, r0
 8003f32:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003f34:	e003      	b.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	75fb      	strb	r3, [r7, #23]
      break;
 8003f3a:	e000      	b.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003f3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f3e:	7dfb      	ldrb	r3, [r7, #23]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d109      	bne.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f44:	4b79      	ldr	r3, [pc, #484]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f48:	f023 0207 	bic.w	r2, r3, #7
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f50:	4976      	ldr	r1, [pc, #472]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	650b      	str	r3, [r1, #80]	; 0x50
 8003f56:	e001      	b.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f58:	7dfb      	ldrb	r3, [r7, #23]
 8003f5a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d051      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003f6e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8003f72:	d036      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003f74:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8003f78:	d830      	bhi.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8003f7a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f7e:	d032      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8003f80:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f84:	d82a      	bhi.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8003f86:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003f8a:	d02e      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8003f8c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003f90:	d824      	bhi.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8003f92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f96:	d018      	beq.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003f98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f9c:	d81e      	bhi.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d003      	beq.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x172>
 8003fa2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003fa6:	d007      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8003fa8:	e018      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003faa:	4b60      	ldr	r3, [pc, #384]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fae:	4a5f      	ldr	r2, [pc, #380]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003fb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fb4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003fb6:	e019      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	3304      	adds	r3, #4
 8003fbc:	2100      	movs	r1, #0
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f001 fe68 	bl	8005c94 <RCCEx_PLL2_Config>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003fc8:	e010      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	3324      	adds	r3, #36	; 0x24
 8003fce:	2100      	movs	r1, #0
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f001 ff11 	bl	8005df8 <RCCEx_PLL3_Config>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003fda:	e007      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	75fb      	strb	r3, [r7, #23]
      break;
 8003fe0:	e004      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8003fe2:	bf00      	nop
 8003fe4:	e002      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8003fe6:	bf00      	nop
 8003fe8:	e000      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8003fea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fec:	7dfb      	ldrb	r3, [r7, #23]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d10a      	bne.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003ff2:	4b4e      	ldr	r3, [pc, #312]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ff6:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004000:	494a      	ldr	r1, [pc, #296]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004002:	4313      	orrs	r3, r2
 8004004:	658b      	str	r3, [r1, #88]	; 0x58
 8004006:	e001      	b.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004008:	7dfb      	ldrb	r3, [r7, #23]
 800400a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004014:	2b00      	cmp	r3, #0
 8004016:	d051      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800401e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004022:	d036      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8004024:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004028:	d830      	bhi.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x254>
 800402a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800402e:	d032      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8004030:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004034:	d82a      	bhi.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8004036:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800403a:	d02e      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x262>
 800403c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004040:	d824      	bhi.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8004042:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004046:	d018      	beq.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x242>
 8004048:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800404c:	d81e      	bhi.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x254>
 800404e:	2b00      	cmp	r3, #0
 8004050:	d003      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x222>
 8004052:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004056:	d007      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8004058:	e018      	b.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800405a:	4b34      	ldr	r3, [pc, #208]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800405c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800405e:	4a33      	ldr	r2, [pc, #204]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004060:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004064:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004066:	e019      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	3304      	adds	r3, #4
 800406c:	2100      	movs	r1, #0
 800406e:	4618      	mov	r0, r3
 8004070:	f001 fe10 	bl	8005c94 <RCCEx_PLL2_Config>
 8004074:	4603      	mov	r3, r0
 8004076:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004078:	e010      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	3324      	adds	r3, #36	; 0x24
 800407e:	2100      	movs	r1, #0
 8004080:	4618      	mov	r0, r3
 8004082:	f001 feb9 	bl	8005df8 <RCCEx_PLL3_Config>
 8004086:	4603      	mov	r3, r0
 8004088:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800408a:	e007      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	75fb      	strb	r3, [r7, #23]
      break;
 8004090:	e004      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8004092:	bf00      	nop
 8004094:	e002      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8004096:	bf00      	nop
 8004098:	e000      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800409a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800409c:	7dfb      	ldrb	r3, [r7, #23]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d10a      	bne.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80040a2:	4b22      	ldr	r3, [pc, #136]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80040a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040a6:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80040b0:	491e      	ldr	r1, [pc, #120]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	658b      	str	r3, [r1, #88]	; 0x58
 80040b6:	e001      	b.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040b8:	7dfb      	ldrb	r3, [r7, #23]
 80040ba:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d035      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040cc:	2b30      	cmp	r3, #48	; 0x30
 80040ce:	d01c      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80040d0:	2b30      	cmp	r3, #48	; 0x30
 80040d2:	d817      	bhi.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80040d4:	2b20      	cmp	r3, #32
 80040d6:	d00c      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80040d8:	2b20      	cmp	r3, #32
 80040da:	d813      	bhi.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d016      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 80040e0:	2b10      	cmp	r3, #16
 80040e2:	d10f      	bne.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040e4:	4b11      	ldr	r3, [pc, #68]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80040e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e8:	4a10      	ldr	r2, [pc, #64]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80040ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80040f0:	e00e      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	3304      	adds	r3, #4
 80040f6:	2102      	movs	r1, #2
 80040f8:	4618      	mov	r0, r3
 80040fa:	f001 fdcb 	bl	8005c94 <RCCEx_PLL2_Config>
 80040fe:	4603      	mov	r3, r0
 8004100:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8004102:	e005      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	75fb      	strb	r3, [r7, #23]
      break;
 8004108:	e002      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 800410a:	bf00      	nop
 800410c:	e000      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 800410e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004110:	7dfb      	ldrb	r3, [r7, #23]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d10c      	bne.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004116:	4b05      	ldr	r3, [pc, #20]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800411a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004122:	4902      	ldr	r1, [pc, #8]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004124:	4313      	orrs	r3, r2
 8004126:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004128:	e004      	b.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800412a:	bf00      	nop
 800412c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004130:	7dfb      	ldrb	r3, [r7, #23]
 8004132:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800413c:	2b00      	cmp	r3, #0
 800413e:	d047      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004144:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004148:	d030      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x374>
 800414a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800414e:	d82a      	bhi.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8004150:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004154:	d02c      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8004156:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800415a:	d824      	bhi.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800415c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004160:	d018      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004162:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004166:	d81e      	bhi.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8004168:	2b00      	cmp	r3, #0
 800416a:	d003      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800416c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004170:	d007      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004172:	e018      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004174:	4bac      	ldr	r3, [pc, #688]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004178:	4aab      	ldr	r2, [pc, #684]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800417a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800417e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004180:	e017      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	3304      	adds	r3, #4
 8004186:	2100      	movs	r1, #0
 8004188:	4618      	mov	r0, r3
 800418a:	f001 fd83 	bl	8005c94 <RCCEx_PLL2_Config>
 800418e:	4603      	mov	r3, r0
 8004190:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004192:	e00e      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	3324      	adds	r3, #36	; 0x24
 8004198:	2100      	movs	r1, #0
 800419a:	4618      	mov	r0, r3
 800419c:	f001 fe2c 	bl	8005df8 <RCCEx_PLL3_Config>
 80041a0:	4603      	mov	r3, r0
 80041a2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80041a4:	e005      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	75fb      	strb	r3, [r7, #23]
      break;
 80041aa:	e002      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80041ac:	bf00      	nop
 80041ae:	e000      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80041b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041b2:	7dfb      	ldrb	r3, [r7, #23]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d109      	bne.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80041b8:	4b9b      	ldr	r3, [pc, #620]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80041ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041bc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041c4:	4998      	ldr	r1, [pc, #608]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	650b      	str	r3, [r1, #80]	; 0x50
 80041ca:	e001      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041cc:	7dfb      	ldrb	r3, [r7, #23]
 80041ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d049      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041e4:	d02e      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 80041e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041ea:	d828      	bhi.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x406>
 80041ec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80041f0:	d02a      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80041f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80041f6:	d822      	bhi.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x406>
 80041f8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80041fc:	d026      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x414>
 80041fe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004202:	d81c      	bhi.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8004204:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004208:	d010      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800420a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800420e:	d816      	bhi.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8004210:	2b00      	cmp	r3, #0
 8004212:	d01d      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8004214:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004218:	d111      	bne.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	3304      	adds	r3, #4
 800421e:	2101      	movs	r1, #1
 8004220:	4618      	mov	r0, r3
 8004222:	f001 fd37 	bl	8005c94 <RCCEx_PLL2_Config>
 8004226:	4603      	mov	r3, r0
 8004228:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800422a:	e012      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	3324      	adds	r3, #36	; 0x24
 8004230:	2101      	movs	r1, #1
 8004232:	4618      	mov	r0, r3
 8004234:	f001 fde0 	bl	8005df8 <RCCEx_PLL3_Config>
 8004238:	4603      	mov	r3, r0
 800423a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800423c:	e009      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	75fb      	strb	r3, [r7, #23]
      break;
 8004242:	e006      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8004244:	bf00      	nop
 8004246:	e004      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8004248:	bf00      	nop
 800424a:	e002      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800424c:	bf00      	nop
 800424e:	e000      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8004250:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004252:	7dfb      	ldrb	r3, [r7, #23]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d109      	bne.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004258:	4b73      	ldr	r3, [pc, #460]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800425a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800425c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004264:	4970      	ldr	r1, [pc, #448]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004266:	4313      	orrs	r3, r2
 8004268:	650b      	str	r3, [r1, #80]	; 0x50
 800426a:	e001      	b.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800426c:	7dfb      	ldrb	r3, [r7, #23]
 800426e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004278:	2b00      	cmp	r3, #0
 800427a:	d04b      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004282:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004286:	d02e      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8004288:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800428c:	d828      	bhi.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800428e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004292:	d02a      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8004294:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004298:	d822      	bhi.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800429a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800429e:	d026      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 80042a0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80042a4:	d81c      	bhi.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80042a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042aa:	d010      	beq.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x496>
 80042ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042b0:	d816      	bhi.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d01d      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80042b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042ba:	d111      	bne.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	3304      	adds	r3, #4
 80042c0:	2101      	movs	r1, #1
 80042c2:	4618      	mov	r0, r3
 80042c4:	f001 fce6 	bl	8005c94 <RCCEx_PLL2_Config>
 80042c8:	4603      	mov	r3, r0
 80042ca:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80042cc:	e012      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	3324      	adds	r3, #36	; 0x24
 80042d2:	2101      	movs	r1, #1
 80042d4:	4618      	mov	r0, r3
 80042d6:	f001 fd8f 	bl	8005df8 <RCCEx_PLL3_Config>
 80042da:	4603      	mov	r3, r0
 80042dc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80042de:	e009      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	75fb      	strb	r3, [r7, #23]
      break;
 80042e4:	e006      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80042e6:	bf00      	nop
 80042e8:	e004      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80042ea:	bf00      	nop
 80042ec:	e002      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80042ee:	bf00      	nop
 80042f0:	e000      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80042f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042f4:	7dfb      	ldrb	r3, [r7, #23]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d10a      	bne.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80042fa:	4b4b      	ldr	r3, [pc, #300]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80042fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042fe:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004308:	4947      	ldr	r1, [pc, #284]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800430a:	4313      	orrs	r3, r2
 800430c:	658b      	str	r3, [r1, #88]	; 0x58
 800430e:	e001      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004310:	7dfb      	ldrb	r3, [r7, #23]
 8004312:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800431c:	2b00      	cmp	r3, #0
 800431e:	d02f      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004324:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004328:	d00e      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x510>
 800432a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800432e:	d814      	bhi.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8004330:	2b00      	cmp	r3, #0
 8004332:	d015      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8004334:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004338:	d10f      	bne.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800433a:	4b3b      	ldr	r3, [pc, #236]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800433c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800433e:	4a3a      	ldr	r2, [pc, #232]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004340:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004344:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004346:	e00c      	b.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	3304      	adds	r3, #4
 800434c:	2101      	movs	r1, #1
 800434e:	4618      	mov	r0, r3
 8004350:	f001 fca0 	bl	8005c94 <RCCEx_PLL2_Config>
 8004354:	4603      	mov	r3, r0
 8004356:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004358:	e003      	b.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	75fb      	strb	r3, [r7, #23]
      break;
 800435e:	e000      	b.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8004360:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004362:	7dfb      	ldrb	r3, [r7, #23]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d109      	bne.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004368:	4b2f      	ldr	r3, [pc, #188]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800436a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800436c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004374:	492c      	ldr	r1, [pc, #176]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004376:	4313      	orrs	r3, r2
 8004378:	650b      	str	r3, [r1, #80]	; 0x50
 800437a:	e001      	b.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800437c:	7dfb      	ldrb	r3, [r7, #23]
 800437e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004388:	2b00      	cmp	r3, #0
 800438a:	d032      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004390:	2b03      	cmp	r3, #3
 8004392:	d81b      	bhi.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x594>
 8004394:	a201      	add	r2, pc, #4	; (adr r2, 800439c <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8004396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800439a:	bf00      	nop
 800439c:	080043d3 	.word	0x080043d3
 80043a0:	080043ad 	.word	0x080043ad
 80043a4:	080043bb 	.word	0x080043bb
 80043a8:	080043d3 	.word	0x080043d3
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043ac:	4b1e      	ldr	r3, [pc, #120]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80043ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b0:	4a1d      	ldr	r2, [pc, #116]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80043b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80043b8:	e00c      	b.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	3304      	adds	r3, #4
 80043be:	2102      	movs	r1, #2
 80043c0:	4618      	mov	r0, r3
 80043c2:	f001 fc67 	bl	8005c94 <RCCEx_PLL2_Config>
 80043c6:	4603      	mov	r3, r0
 80043c8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80043ca:	e003      	b.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	75fb      	strb	r3, [r7, #23]
      break;
 80043d0:	e000      	b.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80043d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043d4:	7dfb      	ldrb	r3, [r7, #23]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d109      	bne.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80043da:	4b13      	ldr	r3, [pc, #76]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80043dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043de:	f023 0203 	bic.w	r2, r3, #3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043e6:	4910      	ldr	r1, [pc, #64]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	64cb      	str	r3, [r1, #76]	; 0x4c
 80043ec:	e001      	b.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043ee:	7dfb      	ldrb	r3, [r7, #23]
 80043f0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	f000 808a 	beq.w	8004514 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004400:	4b0a      	ldr	r3, [pc, #40]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a09      	ldr	r2, [pc, #36]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004406:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800440a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800440c:	f7fc f806 	bl	800041c <HAL_GetTick>
 8004410:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004412:	e00d      	b.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004414:	f7fc f802 	bl	800041c <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	2b64      	cmp	r3, #100	; 0x64
 8004420:	d906      	bls.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	75fb      	strb	r3, [r7, #23]
        break;
 8004426:	e009      	b.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x604>
 8004428:	58024400 	.word	0x58024400
 800442c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004430:	4bb9      	ldr	r3, [pc, #740]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004438:	2b00      	cmp	r3, #0
 800443a:	d0eb      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 800443c:	7dfb      	ldrb	r3, [r7, #23]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d166      	bne.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004442:	4bb6      	ldr	r3, [pc, #728]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004444:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800444c:	4053      	eors	r3, r2
 800444e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004452:	2b00      	cmp	r3, #0
 8004454:	d013      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004456:	4bb1      	ldr	r3, [pc, #708]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800445a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800445e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004460:	4bae      	ldr	r3, [pc, #696]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004464:	4aad      	ldr	r2, [pc, #692]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004466:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800446a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800446c:	4bab      	ldr	r3, [pc, #684]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800446e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004470:	4aaa      	ldr	r2, [pc, #680]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004472:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004476:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004478:	4aa8      	ldr	r2, [pc, #672]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004484:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004488:	d115      	bne.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800448a:	f7fb ffc7 	bl	800041c <HAL_GetTick>
 800448e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004490:	e00b      	b.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004492:	f7fb ffc3 	bl	800041c <HAL_GetTick>
 8004496:	4602      	mov	r2, r0
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	f241 3288 	movw	r2, #5000	; 0x1388
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d902      	bls.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	75fb      	strb	r3, [r7, #23]
            break;
 80044a8:	e005      	b.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80044aa:	4b9c      	ldr	r3, [pc, #624]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80044ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ae:	f003 0302 	and.w	r3, r3, #2
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d0ed      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 80044b6:	7dfb      	ldrb	r3, [r7, #23]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d126      	bne.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80044c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044ca:	d10d      	bne.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 80044cc:	4b93      	ldr	r3, [pc, #588]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80044da:	0919      	lsrs	r1, r3, #4
 80044dc:	4b90      	ldr	r3, [pc, #576]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80044de:	400b      	ands	r3, r1
 80044e0:	498e      	ldr	r1, [pc, #568]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80044e2:	4313      	orrs	r3, r2
 80044e4:	610b      	str	r3, [r1, #16]
 80044e6:	e005      	b.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 80044e8:	4b8c      	ldr	r3, [pc, #560]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80044ea:	691b      	ldr	r3, [r3, #16]
 80044ec:	4a8b      	ldr	r2, [pc, #556]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80044ee:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80044f2:	6113      	str	r3, [r2, #16]
 80044f4:	4b89      	ldr	r3, [pc, #548]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80044f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80044fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004502:	4986      	ldr	r1, [pc, #536]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004504:	4313      	orrs	r3, r2
 8004506:	670b      	str	r3, [r1, #112]	; 0x70
 8004508:	e004      	b.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800450a:	7dfb      	ldrb	r3, [r7, #23]
 800450c:	75bb      	strb	r3, [r7, #22]
 800450e:	e001      	b.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004510:	7dfb      	ldrb	r3, [r7, #23]
 8004512:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0301 	and.w	r3, r3, #1
 800451c:	2b00      	cmp	r3, #0
 800451e:	d07e      	beq.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004524:	2b28      	cmp	r3, #40	; 0x28
 8004526:	d867      	bhi.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8004528:	a201      	add	r2, pc, #4	; (adr r2, 8004530 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 800452a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800452e:	bf00      	nop
 8004530:	080045ff 	.word	0x080045ff
 8004534:	080045f9 	.word	0x080045f9
 8004538:	080045f9 	.word	0x080045f9
 800453c:	080045f9 	.word	0x080045f9
 8004540:	080045f9 	.word	0x080045f9
 8004544:	080045f9 	.word	0x080045f9
 8004548:	080045f9 	.word	0x080045f9
 800454c:	080045f9 	.word	0x080045f9
 8004550:	080045d5 	.word	0x080045d5
 8004554:	080045f9 	.word	0x080045f9
 8004558:	080045f9 	.word	0x080045f9
 800455c:	080045f9 	.word	0x080045f9
 8004560:	080045f9 	.word	0x080045f9
 8004564:	080045f9 	.word	0x080045f9
 8004568:	080045f9 	.word	0x080045f9
 800456c:	080045f9 	.word	0x080045f9
 8004570:	080045e7 	.word	0x080045e7
 8004574:	080045f9 	.word	0x080045f9
 8004578:	080045f9 	.word	0x080045f9
 800457c:	080045f9 	.word	0x080045f9
 8004580:	080045f9 	.word	0x080045f9
 8004584:	080045f9 	.word	0x080045f9
 8004588:	080045f9 	.word	0x080045f9
 800458c:	080045f9 	.word	0x080045f9
 8004590:	080045ff 	.word	0x080045ff
 8004594:	080045f9 	.word	0x080045f9
 8004598:	080045f9 	.word	0x080045f9
 800459c:	080045f9 	.word	0x080045f9
 80045a0:	080045f9 	.word	0x080045f9
 80045a4:	080045f9 	.word	0x080045f9
 80045a8:	080045f9 	.word	0x080045f9
 80045ac:	080045f9 	.word	0x080045f9
 80045b0:	080045ff 	.word	0x080045ff
 80045b4:	080045f9 	.word	0x080045f9
 80045b8:	080045f9 	.word	0x080045f9
 80045bc:	080045f9 	.word	0x080045f9
 80045c0:	080045f9 	.word	0x080045f9
 80045c4:	080045f9 	.word	0x080045f9
 80045c8:	080045f9 	.word	0x080045f9
 80045cc:	080045f9 	.word	0x080045f9
 80045d0:	080045ff 	.word	0x080045ff
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	3304      	adds	r3, #4
 80045d8:	2101      	movs	r1, #1
 80045da:	4618      	mov	r0, r3
 80045dc:	f001 fb5a 	bl	8005c94 <RCCEx_PLL2_Config>
 80045e0:	4603      	mov	r3, r0
 80045e2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80045e4:	e00c      	b.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	3324      	adds	r3, #36	; 0x24
 80045ea:	2101      	movs	r1, #1
 80045ec:	4618      	mov	r0, r3
 80045ee:	f001 fc03 	bl	8005df8 <RCCEx_PLL3_Config>
 80045f2:	4603      	mov	r3, r0
 80045f4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80045f6:	e003      	b.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	75fb      	strb	r3, [r7, #23]
      break;
 80045fc:	e000      	b.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 80045fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004600:	7dfb      	ldrb	r3, [r7, #23]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d109      	bne.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004606:	4b45      	ldr	r3, [pc, #276]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800460a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004612:	4942      	ldr	r1, [pc, #264]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004614:	4313      	orrs	r3, r2
 8004616:	654b      	str	r3, [r1, #84]	; 0x54
 8004618:	e001      	b.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800461a:	7dfb      	ldrb	r3, [r7, #23]
 800461c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0302 	and.w	r3, r3, #2
 8004626:	2b00      	cmp	r3, #0
 8004628:	d037      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800462e:	2b05      	cmp	r3, #5
 8004630:	d820      	bhi.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8004632:	a201      	add	r2, pc, #4	; (adr r2, 8004638 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8004634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004638:	0800467b 	.word	0x0800467b
 800463c:	08004651 	.word	0x08004651
 8004640:	08004663 	.word	0x08004663
 8004644:	0800467b 	.word	0x0800467b
 8004648:	0800467b 	.word	0x0800467b
 800464c:	0800467b 	.word	0x0800467b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	3304      	adds	r3, #4
 8004654:	2101      	movs	r1, #1
 8004656:	4618      	mov	r0, r3
 8004658:	f001 fb1c 	bl	8005c94 <RCCEx_PLL2_Config>
 800465c:	4603      	mov	r3, r0
 800465e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004660:	e00c      	b.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	3324      	adds	r3, #36	; 0x24
 8004666:	2101      	movs	r1, #1
 8004668:	4618      	mov	r0, r3
 800466a:	f001 fbc5 	bl	8005df8 <RCCEx_PLL3_Config>
 800466e:	4603      	mov	r3, r0
 8004670:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004672:	e003      	b.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	75fb      	strb	r3, [r7, #23]
      break;
 8004678:	e000      	b.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 800467a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800467c:	7dfb      	ldrb	r3, [r7, #23]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d109      	bne.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004682:	4b26      	ldr	r3, [pc, #152]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004686:	f023 0207 	bic.w	r2, r3, #7
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800468e:	4923      	ldr	r1, [pc, #140]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004690:	4313      	orrs	r3, r2
 8004692:	654b      	str	r3, [r1, #84]	; 0x54
 8004694:	e001      	b.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004696:	7dfb      	ldrb	r3, [r7, #23]
 8004698:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0304 	and.w	r3, r3, #4
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d040      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046ac:	2b05      	cmp	r3, #5
 80046ae:	d821      	bhi.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80046b0:	a201      	add	r2, pc, #4	; (adr r2, 80046b8 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 80046b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b6:	bf00      	nop
 80046b8:	080046fb 	.word	0x080046fb
 80046bc:	080046d1 	.word	0x080046d1
 80046c0:	080046e3 	.word	0x080046e3
 80046c4:	080046fb 	.word	0x080046fb
 80046c8:	080046fb 	.word	0x080046fb
 80046cc:	080046fb 	.word	0x080046fb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	3304      	adds	r3, #4
 80046d4:	2101      	movs	r1, #1
 80046d6:	4618      	mov	r0, r3
 80046d8:	f001 fadc 	bl	8005c94 <RCCEx_PLL2_Config>
 80046dc:	4603      	mov	r3, r0
 80046de:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80046e0:	e00c      	b.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	3324      	adds	r3, #36	; 0x24
 80046e6:	2101      	movs	r1, #1
 80046e8:	4618      	mov	r0, r3
 80046ea:	f001 fb85 	bl	8005df8 <RCCEx_PLL3_Config>
 80046ee:	4603      	mov	r3, r0
 80046f0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80046f2:	e003      	b.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	75fb      	strb	r3, [r7, #23]
      break;
 80046f8:	e000      	b.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 80046fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046fc:	7dfb      	ldrb	r3, [r7, #23]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d110      	bne.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004702:	4b06      	ldr	r3, [pc, #24]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004706:	f023 0207 	bic.w	r2, r3, #7
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004710:	4902      	ldr	r1, [pc, #8]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004712:	4313      	orrs	r3, r2
 8004714:	658b      	str	r3, [r1, #88]	; 0x58
 8004716:	e007      	b.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8004718:	58024800 	.word	0x58024800
 800471c:	58024400 	.word	0x58024400
 8004720:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004724:	7dfb      	ldrb	r3, [r7, #23]
 8004726:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0320 	and.w	r3, r3, #32
 8004730:	2b00      	cmp	r3, #0
 8004732:	d04b      	beq.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800473a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800473e:	d02e      	beq.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x966>
 8004740:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004744:	d828      	bhi.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8004746:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800474a:	d02a      	beq.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800474c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004750:	d822      	bhi.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8004752:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004756:	d026      	beq.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8004758:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800475c:	d81c      	bhi.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800475e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004762:	d010      	beq.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8004764:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004768:	d816      	bhi.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800476a:	2b00      	cmp	r3, #0
 800476c:	d01d      	beq.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x972>
 800476e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004772:	d111      	bne.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	3304      	adds	r3, #4
 8004778:	2100      	movs	r1, #0
 800477a:	4618      	mov	r0, r3
 800477c:	f001 fa8a 	bl	8005c94 <RCCEx_PLL2_Config>
 8004780:	4603      	mov	r3, r0
 8004782:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004784:	e012      	b.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	3324      	adds	r3, #36	; 0x24
 800478a:	2102      	movs	r1, #2
 800478c:	4618      	mov	r0, r3
 800478e:	f001 fb33 	bl	8005df8 <RCCEx_PLL3_Config>
 8004792:	4603      	mov	r3, r0
 8004794:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004796:	e009      	b.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	75fb      	strb	r3, [r7, #23]
      break;
 800479c:	e006      	b.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800479e:	bf00      	nop
 80047a0:	e004      	b.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80047a2:	bf00      	nop
 80047a4:	e002      	b.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80047a6:	bf00      	nop
 80047a8:	e000      	b.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80047aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047ac:	7dfb      	ldrb	r3, [r7, #23]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d10a      	bne.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80047b2:	4bb2      	ldr	r3, [pc, #712]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80047b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047b6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047c0:	49ae      	ldr	r1, [pc, #696]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80047c2:	4313      	orrs	r3, r2
 80047c4:	654b      	str	r3, [r1, #84]	; 0x54
 80047c6:	e001      	b.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047c8:	7dfb      	ldrb	r3, [r7, #23]
 80047ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d04b      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047de:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80047e2:	d02e      	beq.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 80047e4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80047e8:	d828      	bhi.n	800483c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80047ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047ee:	d02a      	beq.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 80047f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047f4:	d822      	bhi.n	800483c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80047f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80047fa:	d026      	beq.n	800484a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80047fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004800:	d81c      	bhi.n	800483c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004802:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004806:	d010      	beq.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8004808:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800480c:	d816      	bhi.n	800483c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800480e:	2b00      	cmp	r3, #0
 8004810:	d01d      	beq.n	800484e <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8004812:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004816:	d111      	bne.n	800483c <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	3304      	adds	r3, #4
 800481c:	2100      	movs	r1, #0
 800481e:	4618      	mov	r0, r3
 8004820:	f001 fa38 	bl	8005c94 <RCCEx_PLL2_Config>
 8004824:	4603      	mov	r3, r0
 8004826:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004828:	e012      	b.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	3324      	adds	r3, #36	; 0x24
 800482e:	2102      	movs	r1, #2
 8004830:	4618      	mov	r0, r3
 8004832:	f001 fae1 	bl	8005df8 <RCCEx_PLL3_Config>
 8004836:	4603      	mov	r3, r0
 8004838:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800483a:	e009      	b.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	75fb      	strb	r3, [r7, #23]
      break;
 8004840:	e006      	b.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004842:	bf00      	nop
 8004844:	e004      	b.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004846:	bf00      	nop
 8004848:	e002      	b.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800484a:	bf00      	nop
 800484c:	e000      	b.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800484e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004850:	7dfb      	ldrb	r3, [r7, #23]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d10a      	bne.n	800486c <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004856:	4b89      	ldr	r3, [pc, #548]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800485a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004864:	4985      	ldr	r1, [pc, #532]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004866:	4313      	orrs	r3, r2
 8004868:	658b      	str	r3, [r1, #88]	; 0x58
 800486a:	e001      	b.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800486c:	7dfb      	ldrb	r3, [r7, #23]
 800486e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004878:	2b00      	cmp	r3, #0
 800487a:	d04b      	beq.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004882:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004886:	d02e      	beq.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8004888:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800488c:	d828      	bhi.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800488e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004892:	d02a      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8004894:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004898:	d822      	bhi.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800489a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800489e:	d026      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0xab6>
 80048a0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80048a4:	d81c      	bhi.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80048a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048aa:	d010      	beq.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0xa96>
 80048ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048b0:	d816      	bhi.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d01d      	beq.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 80048b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048ba:	d111      	bne.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	3304      	adds	r3, #4
 80048c0:	2100      	movs	r1, #0
 80048c2:	4618      	mov	r0, r3
 80048c4:	f001 f9e6 	bl	8005c94 <RCCEx_PLL2_Config>
 80048c8:	4603      	mov	r3, r0
 80048ca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80048cc:	e012      	b.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	3324      	adds	r3, #36	; 0x24
 80048d2:	2102      	movs	r1, #2
 80048d4:	4618      	mov	r0, r3
 80048d6:	f001 fa8f 	bl	8005df8 <RCCEx_PLL3_Config>
 80048da:	4603      	mov	r3, r0
 80048dc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80048de:	e009      	b.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	75fb      	strb	r3, [r7, #23]
      break;
 80048e4:	e006      	b.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80048e6:	bf00      	nop
 80048e8:	e004      	b.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80048ea:	bf00      	nop
 80048ec:	e002      	b.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80048ee:	bf00      	nop
 80048f0:	e000      	b.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80048f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048f4:	7dfb      	ldrb	r3, [r7, #23]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d10a      	bne.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80048fa:	4b60      	ldr	r3, [pc, #384]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80048fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004908:	495c      	ldr	r1, [pc, #368]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800490a:	4313      	orrs	r3, r2
 800490c:	658b      	str	r3, [r1, #88]	; 0x58
 800490e:	e001      	b.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004910:	7dfb      	ldrb	r3, [r7, #23]
 8004912:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 0308 	and.w	r3, r3, #8
 800491c:	2b00      	cmp	r3, #0
 800491e:	d018      	beq.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004924:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004928:	d10a      	bne.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	3324      	adds	r3, #36	; 0x24
 800492e:	2102      	movs	r1, #2
 8004930:	4618      	mov	r0, r3
 8004932:	f001 fa61 	bl	8005df8 <RCCEx_PLL3_Config>
 8004936:	4603      	mov	r3, r0
 8004938:	2b00      	cmp	r3, #0
 800493a:	d001      	beq.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8004940:	4b4e      	ldr	r3, [pc, #312]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004944:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800494c:	494b      	ldr	r1, [pc, #300]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800494e:	4313      	orrs	r3, r2
 8004950:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0310 	and.w	r3, r3, #16
 800495a:	2b00      	cmp	r3, #0
 800495c:	d01a      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004964:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004968:	d10a      	bne.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	3324      	adds	r3, #36	; 0x24
 800496e:	2102      	movs	r1, #2
 8004970:	4618      	mov	r0, r3
 8004972:	f001 fa41 	bl	8005df8 <RCCEx_PLL3_Config>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d001      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004980:	4b3e      	ldr	r3, [pc, #248]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004984:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800498e:	493b      	ldr	r1, [pc, #236]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004990:	4313      	orrs	r3, r2
 8004992:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800499c:	2b00      	cmp	r3, #0
 800499e:	d034      	beq.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80049a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049aa:	d01d      	beq.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80049ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049b0:	d817      	bhi.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d003      	beq.n	80049be <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80049b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049ba:	d009      	beq.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80049bc:	e011      	b.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	3304      	adds	r3, #4
 80049c2:	2100      	movs	r1, #0
 80049c4:	4618      	mov	r0, r3
 80049c6:	f001 f965 	bl	8005c94 <RCCEx_PLL2_Config>
 80049ca:	4603      	mov	r3, r0
 80049cc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80049ce:	e00c      	b.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	3324      	adds	r3, #36	; 0x24
 80049d4:	2102      	movs	r1, #2
 80049d6:	4618      	mov	r0, r3
 80049d8:	f001 fa0e 	bl	8005df8 <RCCEx_PLL3_Config>
 80049dc:	4603      	mov	r3, r0
 80049de:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80049e0:	e003      	b.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	75fb      	strb	r3, [r7, #23]
      break;
 80049e6:	e000      	b.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 80049e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049ea:	7dfb      	ldrb	r3, [r7, #23]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d10a      	bne.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80049f0:	4b22      	ldr	r3, [pc, #136]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80049f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80049fe:	491f      	ldr	r1, [pc, #124]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004a00:	4313      	orrs	r3, r2
 8004a02:	658b      	str	r3, [r1, #88]	; 0x58
 8004a04:	e001      	b.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a06:	7dfb      	ldrb	r3, [r7, #23]
 8004a08:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d036      	beq.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a1c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004a20:	d01c      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8004a22:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004a26:	d816      	bhi.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004a28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a2c:	d003      	beq.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8004a2e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a32:	d007      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8004a34:	e00f      	b.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a36:	4b11      	ldr	r3, [pc, #68]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a3a:	4a10      	ldr	r2, [pc, #64]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004a3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a40:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004a42:	e00c      	b.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	3324      	adds	r3, #36	; 0x24
 8004a48:	2101      	movs	r1, #1
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f001 f9d4 	bl	8005df8 <RCCEx_PLL3_Config>
 8004a50:	4603      	mov	r3, r0
 8004a52:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004a54:	e003      	b.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	75fb      	strb	r3, [r7, #23]
      break;
 8004a5a:	e000      	b.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8004a5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a5e:	7dfb      	ldrb	r3, [r7, #23]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d10d      	bne.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a64:	4b05      	ldr	r3, [pc, #20]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a72:	4902      	ldr	r1, [pc, #8]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004a74:	4313      	orrs	r3, r2
 8004a76:	654b      	str	r3, [r1, #84]	; 0x54
 8004a78:	e004      	b.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 8004a7a:	bf00      	nop
 8004a7c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a80:	7dfb      	ldrb	r3, [r7, #23]
 8004a82:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d029      	beq.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d003      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004a98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a9c:	d007      	beq.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8004a9e:	e00f      	b.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004aa0:	4b61      	ldr	r3, [pc, #388]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa4:	4a60      	ldr	r2, [pc, #384]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004aa6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004aaa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004aac:	e00b      	b.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	3304      	adds	r3, #4
 8004ab2:	2102      	movs	r1, #2
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f001 f8ed 	bl	8005c94 <RCCEx_PLL2_Config>
 8004aba:	4603      	mov	r3, r0
 8004abc:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004abe:	e002      	b.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	75fb      	strb	r3, [r7, #23]
      break;
 8004ac4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ac6:	7dfb      	ldrb	r3, [r7, #23]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d109      	bne.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004acc:	4b56      	ldr	r3, [pc, #344]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004ace:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ad0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ad8:	4953      	ldr	r1, [pc, #332]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004ade:	e001      	b.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ae0:	7dfb      	ldrb	r3, [r7, #23]
 8004ae2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d00a      	beq.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	3324      	adds	r3, #36	; 0x24
 8004af4:	2102      	movs	r1, #2
 8004af6:	4618      	mov	r0, r3
 8004af8:	f001 f97e 	bl	8005df8 <RCCEx_PLL3_Config>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d001      	beq.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d030      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b1a:	d017      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004b1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b20:	d811      	bhi.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8004b22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b26:	d013      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8004b28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b2c:	d80b      	bhi.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d010      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8004b32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b36:	d106      	bne.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b38:	4b3b      	ldr	r3, [pc, #236]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b3c:	4a3a      	ldr	r2, [pc, #232]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004b3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b42:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004b44:	e007      	b.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	75fb      	strb	r3, [r7, #23]
      break;
 8004b4a:	e004      	b.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004b4c:	bf00      	nop
 8004b4e:	e002      	b.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004b50:	bf00      	nop
 8004b52:	e000      	b.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004b54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b56:	7dfb      	ldrb	r3, [r7, #23]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d109      	bne.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004b5c:	4b32      	ldr	r3, [pc, #200]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004b5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b68:	492f      	ldr	r1, [pc, #188]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	654b      	str	r3, [r1, #84]	; 0x54
 8004b6e:	e001      	b.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b70:	7dfb      	ldrb	r3, [r7, #23]
 8004b72:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d008      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004b80:	4b29      	ldr	r3, [pc, #164]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004b82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b84:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b8c:	4926      	ldr	r1, [pc, #152]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d008      	beq.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004b9e:	4b22      	ldr	r3, [pc, #136]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004ba0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ba2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004baa:	491f      	ldr	r1, [pc, #124]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004bac:	4313      	orrs	r3, r2
 8004bae:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d00d      	beq.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004bbc:	4b1a      	ldr	r3, [pc, #104]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004bbe:	691b      	ldr	r3, [r3, #16]
 8004bc0:	4a19      	ldr	r2, [pc, #100]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004bc2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004bc6:	6113      	str	r3, [r2, #16]
 8004bc8:	4b17      	ldr	r3, [pc, #92]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004bca:	691a      	ldr	r2, [r3, #16]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004bd2:	4915      	ldr	r1, [pc, #84]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	da08      	bge.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004be0:	4b11      	ldr	r3, [pc, #68]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004be2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004be4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bec:	490e      	ldr	r1, [pc, #56]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d009      	beq.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004bfe:	4b0a      	ldr	r3, [pc, #40]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c02:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c0c:	4906      	ldr	r1, [pc, #24]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004c12:	7dbb      	ldrb	r3, [r7, #22]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d101      	bne.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	e000      	b.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3718      	adds	r7, #24
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	bf00      	nop
 8004c28:	58024400 	.word	0x58024400

08004c2c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b090      	sub	sp, #64	; 0x40
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c3a:	f040 8089 	bne.w	8004d50 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8004c3e:	4b95      	ldr	r3, [pc, #596]	; (8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004c40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c42:	f003 0307 	and.w	r3, r3, #7
 8004c46:	633b      	str	r3, [r7, #48]	; 0x30
 8004c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c4a:	2b04      	cmp	r3, #4
 8004c4c:	d87d      	bhi.n	8004d4a <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 8004c4e:	a201      	add	r2, pc, #4	; (adr r2, 8004c54 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8004c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c54:	08004c69 	.word	0x08004c69
 8004c58:	08004c8d 	.word	0x08004c8d
 8004c5c:	08004cb1 	.word	0x08004cb1
 8004c60:	08004d45 	.word	0x08004d45
 8004c64:	08004cd5 	.word	0x08004cd5

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004c68:	4b8a      	ldr	r3, [pc, #552]	; (8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c70:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c74:	d107      	bne.n	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004c76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f000 feb8 	bl	80059f0 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8004c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c82:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004c84:	e3ed      	b.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004c86:	2300      	movs	r3, #0
 8004c88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c8a:	e3ea      	b.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004c8c:	4b81      	ldr	r3, [pc, #516]	; (8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c98:	d107      	bne.n	8004caa <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c9a:	f107 0318 	add.w	r3, r7, #24
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f000 fbfe 	bl	80054a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004ca8:	e3db      	b.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004caa:	2300      	movs	r3, #0
 8004cac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004cae:	e3d8      	b.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004cb0:	4b78      	ldr	r3, [pc, #480]	; (8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cbc:	d107      	bne.n	8004cce <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004cbe:	f107 030c 	add.w	r3, r7, #12
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f000 fd40 	bl	8005748 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004ccc:	e3c9      	b.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004cd2:	e3c6      	b.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004cd4:	4b6f      	ldr	r3, [pc, #444]	; (8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004cd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cd8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004cdc:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004cde:	4b6d      	ldr	r3, [pc, #436]	; (8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 0304 	and.w	r3, r3, #4
 8004ce6:	2b04      	cmp	r3, #4
 8004ce8:	d10c      	bne.n	8004d04 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8004cea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d109      	bne.n	8004d04 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004cf0:	4b68      	ldr	r3, [pc, #416]	; (8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	08db      	lsrs	r3, r3, #3
 8004cf6:	f003 0303 	and.w	r3, r3, #3
 8004cfa:	4a67      	ldr	r2, [pc, #412]	; (8004e98 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8004cfc:	fa22 f303 	lsr.w	r3, r2, r3
 8004d00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d02:	e01e      	b.n	8004d42 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004d04:	4b63      	ldr	r3, [pc, #396]	; (8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d10:	d106      	bne.n	8004d20 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8004d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d14:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d18:	d102      	bne.n	8004d20 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004d1a:	4b60      	ldr	r3, [pc, #384]	; (8004e9c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d1e:	e010      	b.n	8004d42 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004d20:	4b5c      	ldr	r3, [pc, #368]	; (8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d2c:	d106      	bne.n	8004d3c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8004d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d34:	d102      	bne.n	8004d3c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004d36:	4b5a      	ldr	r3, [pc, #360]	; (8004ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8004d38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d3a:	e002      	b.n	8004d42 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004d40:	e38f      	b.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8004d42:	e38e      	b.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004d44:	4b57      	ldr	r3, [pc, #348]	; (8004ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004d46:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d48:	e38b      	b.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d4e:	e388      	b.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d56:	f040 80a7 	bne.w	8004ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8004d5a:	4b4e      	ldr	r3, [pc, #312]	; (8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d5e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8004d62:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d66:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d6a:	d054      	beq.n	8004e16 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8004d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d6e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d72:	f200 808b 	bhi.w	8004e8c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8004d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d78:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004d7c:	f000 8083 	beq.w	8004e86 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8004d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d82:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004d86:	f200 8081 	bhi.w	8004e8c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8004d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d90:	d02f      	beq.n	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 8004d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d98:	d878      	bhi.n	8004e8c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8004d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d004      	beq.n	8004daa <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 8004da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004da6:	d012      	beq.n	8004dce <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 8004da8:	e070      	b.n	8004e8c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004daa:	4b3a      	ldr	r3, [pc, #232]	; (8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004db2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004db6:	d107      	bne.n	8004dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004db8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f000 fe17 	bl	80059f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004dc6:	e34c      	b.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004dcc:	e349      	b.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004dce:	4b31      	ldr	r3, [pc, #196]	; (8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004dd6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004dda:	d107      	bne.n	8004dec <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ddc:	f107 0318 	add.w	r3, r7, #24
 8004de0:	4618      	mov	r0, r3
 8004de2:	f000 fb5d 	bl	80054a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004de6:	69bb      	ldr	r3, [r7, #24]
 8004de8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004dea:	e33a      	b.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004dec:	2300      	movs	r3, #0
 8004dee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004df0:	e337      	b.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004df2:	4b28      	ldr	r3, [pc, #160]	; (8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004dfa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004dfe:	d107      	bne.n	8004e10 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004e00:	f107 030c 	add.w	r3, r7, #12
 8004e04:	4618      	mov	r0, r3
 8004e06:	f000 fc9f 	bl	8005748 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004e0e:	e328      	b.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004e10:	2300      	movs	r3, #0
 8004e12:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e14:	e325      	b.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004e16:	4b1f      	ldr	r3, [pc, #124]	; (8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e1a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004e1e:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004e20:	4b1c      	ldr	r3, [pc, #112]	; (8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 0304 	and.w	r3, r3, #4
 8004e28:	2b04      	cmp	r3, #4
 8004e2a:	d10c      	bne.n	8004e46 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 8004e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d109      	bne.n	8004e46 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004e32:	4b18      	ldr	r3, [pc, #96]	; (8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	08db      	lsrs	r3, r3, #3
 8004e38:	f003 0303 	and.w	r3, r3, #3
 8004e3c:	4a16      	ldr	r2, [pc, #88]	; (8004e98 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8004e3e:	fa22 f303 	lsr.w	r3, r2, r3
 8004e42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e44:	e01e      	b.n	8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004e46:	4b13      	ldr	r3, [pc, #76]	; (8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e52:	d106      	bne.n	8004e62 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8004e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e5a:	d102      	bne.n	8004e62 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004e5c:	4b0f      	ldr	r3, [pc, #60]	; (8004e9c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e60:	e010      	b.n	8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004e62:	4b0c      	ldr	r3, [pc, #48]	; (8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e6e:	d106      	bne.n	8004e7e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8004e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e76:	d102      	bne.n	8004e7e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004e78:	4b09      	ldr	r3, [pc, #36]	; (8004ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8004e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e7c:	e002      	b.n	8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004e82:	e2ee      	b.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8004e84:	e2ed      	b.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004e86:	4b07      	ldr	r3, [pc, #28]	; (8004ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004e88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e8a:	e2ea      	b.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e90:	e2e7      	b.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8004e92:	bf00      	nop
 8004e94:	58024400 	.word	0x58024400
 8004e98:	03d09000 	.word	0x03d09000
 8004e9c:	003d0900 	.word	0x003d0900
 8004ea0:	017d7840 	.word	0x017d7840
 8004ea4:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004eae:	f040 809c 	bne.w	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8004eb2:	4b9e      	ldr	r3, [pc, #632]	; (800512c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eb6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8004eba:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ebe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ec2:	d054      	beq.n	8004f6e <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8004ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004eca:	f200 808b 	bhi.w	8004fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8004ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004ed4:	f000 8083 	beq.w	8004fde <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8004ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eda:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004ede:	f200 8081 	bhi.w	8004fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8004ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ee8:	d02f      	beq.n	8004f4a <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8004eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ef0:	d878      	bhi.n	8004fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8004ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d004      	beq.n	8004f02 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8004ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004efa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004efe:	d012      	beq.n	8004f26 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8004f00:	e070      	b.n	8004fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004f02:	4b8a      	ldr	r3, [pc, #552]	; (800512c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f0e:	d107      	bne.n	8004f20 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004f10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f14:	4618      	mov	r0, r3
 8004f16:	f000 fd6b 	bl	80059f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004f1e:	e2a0      	b.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004f20:	2300      	movs	r3, #0
 8004f22:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f24:	e29d      	b.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004f26:	4b81      	ldr	r3, [pc, #516]	; (800512c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f32:	d107      	bne.n	8004f44 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f34:	f107 0318 	add.w	r3, r7, #24
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f000 fab1 	bl	80054a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004f3e:	69bb      	ldr	r3, [r7, #24]
 8004f40:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8004f42:	e28e      	b.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004f44:	2300      	movs	r3, #0
 8004f46:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f48:	e28b      	b.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004f4a:	4b78      	ldr	r3, [pc, #480]	; (800512c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f56:	d107      	bne.n	8004f68 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f58:	f107 030c 	add.w	r3, r7, #12
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f000 fbf3 	bl	8005748 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004f66:	e27c      	b.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f6c:	e279      	b.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004f6e:	4b6f      	ldr	r3, [pc, #444]	; (800512c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f72:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004f76:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004f78:	4b6c      	ldr	r3, [pc, #432]	; (800512c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 0304 	and.w	r3, r3, #4
 8004f80:	2b04      	cmp	r3, #4
 8004f82:	d10c      	bne.n	8004f9e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8004f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d109      	bne.n	8004f9e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004f8a:	4b68      	ldr	r3, [pc, #416]	; (800512c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	08db      	lsrs	r3, r3, #3
 8004f90:	f003 0303 	and.w	r3, r3, #3
 8004f94:	4a66      	ldr	r2, [pc, #408]	; (8005130 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8004f96:	fa22 f303 	lsr.w	r3, r2, r3
 8004f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f9c:	e01e      	b.n	8004fdc <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004f9e:	4b63      	ldr	r3, [pc, #396]	; (800512c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fa6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004faa:	d106      	bne.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 8004fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004fb2:	d102      	bne.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004fb4:	4b5f      	ldr	r3, [pc, #380]	; (8005134 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8004fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fb8:	e010      	b.n	8004fdc <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004fba:	4b5c      	ldr	r3, [pc, #368]	; (800512c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fc2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004fc6:	d106      	bne.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8004fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fce:	d102      	bne.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004fd0:	4b59      	ldr	r3, [pc, #356]	; (8005138 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8004fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fd4:	e002      	b.n	8004fdc <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004fda:	e242      	b.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8004fdc:	e241      	b.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004fde:	4b57      	ldr	r3, [pc, #348]	; (800513c <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8004fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004fe2:	e23e      	b.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004fe8:	e23b      	b.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ff0:	f040 80a6 	bne.w	8005140 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8004ff4:	4b4d      	ldr	r3, [pc, #308]	; (800512c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004ff6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ff8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8004ffc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005000:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005004:	d054      	beq.n	80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8005006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005008:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800500c:	f200 808b 	bhi.w	8005126 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8005010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005012:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005016:	f000 8083 	beq.w	8005120 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 800501a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800501c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005020:	f200 8081 	bhi.w	8005126 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8005024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005026:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800502a:	d02f      	beq.n	800508c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 800502c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800502e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005032:	d878      	bhi.n	8005126 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8005034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005036:	2b00      	cmp	r3, #0
 8005038:	d004      	beq.n	8005044 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 800503a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800503c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005040:	d012      	beq.n	8005068 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 8005042:	e070      	b.n	8005126 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005044:	4b39      	ldr	r3, [pc, #228]	; (800512c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800504c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005050:	d107      	bne.n	8005062 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005052:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005056:	4618      	mov	r0, r3
 8005058:	f000 fcca 	bl	80059f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800505c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800505e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005060:	e1ff      	b.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005062:	2300      	movs	r3, #0
 8005064:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005066:	e1fc      	b.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005068:	4b30      	ldr	r3, [pc, #192]	; (800512c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005070:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005074:	d107      	bne.n	8005086 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005076:	f107 0318 	add.w	r3, r7, #24
 800507a:	4618      	mov	r0, r3
 800507c:	f000 fa10 	bl	80054a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005080:	69bb      	ldr	r3, [r7, #24]
 8005082:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005084:	e1ed      	b.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005086:	2300      	movs	r3, #0
 8005088:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800508a:	e1ea      	b.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800508c:	4b27      	ldr	r3, [pc, #156]	; (800512c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005094:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005098:	d107      	bne.n	80050aa <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800509a:	f107 030c 	add.w	r3, r7, #12
 800509e:	4618      	mov	r0, r3
 80050a0:	f000 fb52 	bl	8005748 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80050a8:	e1db      	b.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80050aa:	2300      	movs	r3, #0
 80050ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80050ae:	e1d8      	b.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80050b0:	4b1e      	ldr	r3, [pc, #120]	; (800512c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80050b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80050b8:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80050ba:	4b1c      	ldr	r3, [pc, #112]	; (800512c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 0304 	and.w	r3, r3, #4
 80050c2:	2b04      	cmp	r3, #4
 80050c4:	d10c      	bne.n	80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 80050c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d109      	bne.n	80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80050cc:	4b17      	ldr	r3, [pc, #92]	; (800512c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	08db      	lsrs	r3, r3, #3
 80050d2:	f003 0303 	and.w	r3, r3, #3
 80050d6:	4a16      	ldr	r2, [pc, #88]	; (8005130 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80050d8:	fa22 f303 	lsr.w	r3, r2, r3
 80050dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050de:	e01e      	b.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80050e0:	4b12      	ldr	r3, [pc, #72]	; (800512c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050ec:	d106      	bne.n	80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 80050ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80050f4:	d102      	bne.n	80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80050f6:	4b0f      	ldr	r3, [pc, #60]	; (8005134 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 80050f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050fa:	e010      	b.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80050fc:	4b0b      	ldr	r3, [pc, #44]	; (800512c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005104:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005108:	d106      	bne.n	8005118 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 800510a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800510c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005110:	d102      	bne.n	8005118 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005112:	4b09      	ldr	r3, [pc, #36]	; (8005138 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8005114:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005116:	e002      	b.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005118:	2300      	movs	r3, #0
 800511a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800511c:	e1a1      	b.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800511e:	e1a0      	b.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005120:	4b06      	ldr	r3, [pc, #24]	; (800513c <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8005122:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005124:	e19d      	b.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8005126:	2300      	movs	r3, #0
 8005128:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800512a:	e19a      	b.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800512c:	58024400 	.word	0x58024400
 8005130:	03d09000 	.word	0x03d09000
 8005134:	003d0900 	.word	0x003d0900
 8005138:	017d7840 	.word	0x017d7840
 800513c:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005146:	d173      	bne.n	8005230 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8005148:	4b9a      	ldr	r3, [pc, #616]	; (80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800514a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800514c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005150:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005154:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005158:	d02f      	beq.n	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 800515a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800515c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005160:	d863      	bhi.n	800522a <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8005162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005164:	2b00      	cmp	r3, #0
 8005166:	d004      	beq.n	8005172 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 8005168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800516a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800516e:	d012      	beq.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 8005170:	e05b      	b.n	800522a <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005172:	4b90      	ldr	r3, [pc, #576]	; (80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800517a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800517e:	d107      	bne.n	8005190 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005180:	f107 0318 	add.w	r3, r7, #24
 8005184:	4618      	mov	r0, r3
 8005186:	f000 f98b 	bl	80054a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800518a:	69bb      	ldr	r3, [r7, #24]
 800518c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800518e:	e168      	b.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005190:	2300      	movs	r3, #0
 8005192:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005194:	e165      	b.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005196:	4b87      	ldr	r3, [pc, #540]	; (80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800519e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051a2:	d107      	bne.n	80051b4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80051a4:	f107 030c 	add.w	r3, r7, #12
 80051a8:	4618      	mov	r0, r3
 80051aa:	f000 facd 	bl	8005748 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80051b2:	e156      	b.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80051b4:	2300      	movs	r3, #0
 80051b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80051b8:	e153      	b.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80051ba:	4b7e      	ldr	r3, [pc, #504]	; (80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80051bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051be:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80051c2:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80051c4:	4b7b      	ldr	r3, [pc, #492]	; (80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 0304 	and.w	r3, r3, #4
 80051cc:	2b04      	cmp	r3, #4
 80051ce:	d10c      	bne.n	80051ea <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 80051d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d109      	bne.n	80051ea <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80051d6:	4b77      	ldr	r3, [pc, #476]	; (80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	08db      	lsrs	r3, r3, #3
 80051dc:	f003 0303 	and.w	r3, r3, #3
 80051e0:	4a75      	ldr	r2, [pc, #468]	; (80053b8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80051e2:	fa22 f303 	lsr.w	r3, r2, r3
 80051e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051e8:	e01e      	b.n	8005228 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80051ea:	4b72      	ldr	r3, [pc, #456]	; (80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051f6:	d106      	bne.n	8005206 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 80051f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80051fe:	d102      	bne.n	8005206 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005200:	4b6e      	ldr	r3, [pc, #440]	; (80053bc <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8005202:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005204:	e010      	b.n	8005228 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005206:	4b6b      	ldr	r3, [pc, #428]	; (80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800520e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005212:	d106      	bne.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8005214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005216:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800521a:	d102      	bne.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800521c:	4b68      	ldr	r3, [pc, #416]	; (80053c0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800521e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005220:	e002      	b.n	8005228 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005222:	2300      	movs	r3, #0
 8005224:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005226:	e11c      	b.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8005228:	e11b      	b.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800522a:	2300      	movs	r3, #0
 800522c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800522e:	e118      	b.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005236:	d133      	bne.n	80052a0 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8005238:	4b5e      	ldr	r3, [pc, #376]	; (80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800523a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800523c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005240:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005244:	2b00      	cmp	r3, #0
 8005246:	d004      	beq.n	8005252 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8005248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800524a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800524e:	d012      	beq.n	8005276 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 8005250:	e023      	b.n	800529a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005252:	4b58      	ldr	r3, [pc, #352]	; (80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800525a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800525e:	d107      	bne.n	8005270 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005260:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005264:	4618      	mov	r0, r3
 8005266:	f000 fbc3 	bl	80059f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800526a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800526c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800526e:	e0f8      	b.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8005270:	2300      	movs	r3, #0
 8005272:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005274:	e0f5      	b.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005276:	4b4f      	ldr	r3, [pc, #316]	; (80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800527e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005282:	d107      	bne.n	8005294 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005284:	f107 0318 	add.w	r3, r7, #24
 8005288:	4618      	mov	r0, r3
 800528a:	f000 f909 	bl	80054a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800528e:	6a3b      	ldr	r3, [r7, #32]
 8005290:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005292:	e0e6      	b.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8005294:	2300      	movs	r3, #0
 8005296:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005298:	e0e3      	b.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800529a:	2300      	movs	r3, #0
 800529c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800529e:	e0e0      	b.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052a6:	f040 808d 	bne.w	80053c4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80052aa:	4b42      	ldr	r3, [pc, #264]	; (80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80052ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052ae:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80052b2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80052b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80052ba:	d06b      	beq.n	8005394 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 80052bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80052c2:	d874      	bhi.n	80053ae <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 80052c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052ca:	d056      	beq.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 80052cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052d2:	d86c      	bhi.n	80053ae <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 80052d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052d6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80052da:	d03b      	beq.n	8005354 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 80052dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052de:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80052e2:	d864      	bhi.n	80053ae <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 80052e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052ea:	d021      	beq.n	8005330 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 80052ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052f2:	d85c      	bhi.n	80053ae <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 80052f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d004      	beq.n	8005304 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 80052fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005300:	d004      	beq.n	800530c <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8005302:	e054      	b.n	80053ae <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005304:	f000 f8b6 	bl	8005474 <HAL_RCCEx_GetD3PCLK1Freq>
 8005308:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800530a:	e0aa      	b.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800530c:	4b29      	ldr	r3, [pc, #164]	; (80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005314:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005318:	d107      	bne.n	800532a <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800531a:	f107 0318 	add.w	r3, r7, #24
 800531e:	4618      	mov	r0, r3
 8005320:	f000 f8be 	bl	80054a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005328:	e09b      	b.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800532a:	2300      	movs	r3, #0
 800532c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800532e:	e098      	b.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005330:	4b20      	ldr	r3, [pc, #128]	; (80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005338:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800533c:	d107      	bne.n	800534e <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800533e:	f107 030c 	add.w	r3, r7, #12
 8005342:	4618      	mov	r0, r3
 8005344:	f000 fa00 	bl	8005748 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800534c:	e089      	b.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800534e:	2300      	movs	r3, #0
 8005350:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005352:	e086      	b.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005354:	4b17      	ldr	r3, [pc, #92]	; (80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 0304 	and.w	r3, r3, #4
 800535c:	2b04      	cmp	r3, #4
 800535e:	d109      	bne.n	8005374 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005360:	4b14      	ldr	r3, [pc, #80]	; (80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	08db      	lsrs	r3, r3, #3
 8005366:	f003 0303 	and.w	r3, r3, #3
 800536a:	4a13      	ldr	r2, [pc, #76]	; (80053b8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800536c:	fa22 f303 	lsr.w	r3, r2, r3
 8005370:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005372:	e076      	b.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8005374:	2300      	movs	r3, #0
 8005376:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005378:	e073      	b.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800537a:	4b0e      	ldr	r3, [pc, #56]	; (80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005382:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005386:	d102      	bne.n	800538e <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 8005388:	4b0c      	ldr	r3, [pc, #48]	; (80053bc <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800538a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800538c:	e069      	b.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800538e:	2300      	movs	r3, #0
 8005390:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005392:	e066      	b.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005394:	4b07      	ldr	r3, [pc, #28]	; (80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800539c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80053a0:	d102      	bne.n	80053a8 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 80053a2:	4b07      	ldr	r3, [pc, #28]	; (80053c0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 80053a4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80053a6:	e05c      	b.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80053a8:	2300      	movs	r3, #0
 80053aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80053ac:	e059      	b.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80053ae:	2300      	movs	r3, #0
 80053b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80053b2:	e056      	b.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80053b4:	58024400 	.word	0x58024400
 80053b8:	03d09000 	.word	0x03d09000
 80053bc:	003d0900 	.word	0x003d0900
 80053c0:	017d7840 	.word	0x017d7840
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053ca:	d148      	bne.n	800545e <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 80053cc:	4b27      	ldr	r3, [pc, #156]	; (800546c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80053ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80053d4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80053d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053dc:	d02a      	beq.n	8005434 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 80053de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053e4:	d838      	bhi.n	8005458 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 80053e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d004      	beq.n	80053f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 80053ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80053f2:	d00d      	beq.n	8005410 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 80053f4:	e030      	b.n	8005458 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80053f6:	4b1d      	ldr	r3, [pc, #116]	; (800546c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005402:	d102      	bne.n	800540a <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 8005404:	4b1a      	ldr	r3, [pc, #104]	; (8005470 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8005406:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005408:	e02b      	b.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800540a:	2300      	movs	r3, #0
 800540c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800540e:	e028      	b.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005410:	4b16      	ldr	r3, [pc, #88]	; (800546c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005418:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800541c:	d107      	bne.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800541e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005422:	4618      	mov	r0, r3
 8005424:	f000 fae4 	bl	80059f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800542a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800542c:	e019      	b.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800542e:	2300      	movs	r3, #0
 8005430:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005432:	e016      	b.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005434:	4b0d      	ldr	r3, [pc, #52]	; (800546c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800543c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005440:	d107      	bne.n	8005452 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005442:	f107 0318 	add.w	r3, r7, #24
 8005446:	4618      	mov	r0, r3
 8005448:	f000 f82a 	bl	80054a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005450:	e007      	b.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8005452:	2300      	movs	r3, #0
 8005454:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005456:	e004      	b.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8005458:	2300      	movs	r3, #0
 800545a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800545c:	e001      	b.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 800545e:	2300      	movs	r3, #0
 8005460:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8005462:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005464:	4618      	mov	r0, r3
 8005466:	3740      	adds	r7, #64	; 0x40
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}
 800546c:	58024400 	.word	0x58024400
 8005470:	017d7840 	.word	0x017d7840

08005474 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005478:	f7fe fcae 	bl	8003dd8 <HAL_RCC_GetHCLKFreq>
 800547c:	4602      	mov	r2, r0
 800547e:	4b06      	ldr	r3, [pc, #24]	; (8005498 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005480:	6a1b      	ldr	r3, [r3, #32]
 8005482:	091b      	lsrs	r3, r3, #4
 8005484:	f003 0307 	and.w	r3, r3, #7
 8005488:	4904      	ldr	r1, [pc, #16]	; (800549c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800548a:	5ccb      	ldrb	r3, [r1, r3]
 800548c:	f003 031f 	and.w	r3, r3, #31
 8005490:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005494:	4618      	mov	r0, r3
 8005496:	bd80      	pop	{r7, pc}
 8005498:	58024400 	.word	0x58024400
 800549c:	080094f0 	.word	0x080094f0

080054a0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b089      	sub	sp, #36	; 0x24
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80054a8:	4ba1      	ldr	r3, [pc, #644]	; (8005730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ac:	f003 0303 	and.w	r3, r3, #3
 80054b0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80054b2:	4b9f      	ldr	r3, [pc, #636]	; (8005730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054b6:	0b1b      	lsrs	r3, r3, #12
 80054b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054bc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80054be:	4b9c      	ldr	r3, [pc, #624]	; (8005730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c2:	091b      	lsrs	r3, r3, #4
 80054c4:	f003 0301 	and.w	r3, r3, #1
 80054c8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80054ca:	4b99      	ldr	r3, [pc, #612]	; (8005730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ce:	08db      	lsrs	r3, r3, #3
 80054d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80054d4:	693a      	ldr	r2, [r7, #16]
 80054d6:	fb02 f303 	mul.w	r3, r2, r3
 80054da:	ee07 3a90 	vmov	s15, r3
 80054de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054e2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	f000 8111 	beq.w	8005710 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80054ee:	69bb      	ldr	r3, [r7, #24]
 80054f0:	2b02      	cmp	r3, #2
 80054f2:	f000 8083 	beq.w	80055fc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80054f6:	69bb      	ldr	r3, [r7, #24]
 80054f8:	2b02      	cmp	r3, #2
 80054fa:	f200 80a1 	bhi.w	8005640 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80054fe:	69bb      	ldr	r3, [r7, #24]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d003      	beq.n	800550c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005504:	69bb      	ldr	r3, [r7, #24]
 8005506:	2b01      	cmp	r3, #1
 8005508:	d056      	beq.n	80055b8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800550a:	e099      	b.n	8005640 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800550c:	4b88      	ldr	r3, [pc, #544]	; (8005730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 0320 	and.w	r3, r3, #32
 8005514:	2b00      	cmp	r3, #0
 8005516:	d02d      	beq.n	8005574 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005518:	4b85      	ldr	r3, [pc, #532]	; (8005730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	08db      	lsrs	r3, r3, #3
 800551e:	f003 0303 	and.w	r3, r3, #3
 8005522:	4a84      	ldr	r2, [pc, #528]	; (8005734 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005524:	fa22 f303 	lsr.w	r3, r2, r3
 8005528:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	ee07 3a90 	vmov	s15, r3
 8005530:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	ee07 3a90 	vmov	s15, r3
 800553a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800553e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005542:	4b7b      	ldr	r3, [pc, #492]	; (8005730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005546:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800554a:	ee07 3a90 	vmov	s15, r3
 800554e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005552:	ed97 6a03 	vldr	s12, [r7, #12]
 8005556:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005738 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800555a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800555e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005562:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005566:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800556a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800556e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005572:	e087      	b.n	8005684 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	ee07 3a90 	vmov	s15, r3
 800557a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800557e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800573c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005582:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005586:	4b6a      	ldr	r3, [pc, #424]	; (8005730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800558a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800558e:	ee07 3a90 	vmov	s15, r3
 8005592:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005596:	ed97 6a03 	vldr	s12, [r7, #12]
 800559a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005738 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800559e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80055b6:	e065      	b.n	8005684 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	ee07 3a90 	vmov	s15, r3
 80055be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055c2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005740 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80055c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055ca:	4b59      	ldr	r3, [pc, #356]	; (8005730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055d2:	ee07 3a90 	vmov	s15, r3
 80055d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055da:	ed97 6a03 	vldr	s12, [r7, #12]
 80055de:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005738 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80055e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80055fa:	e043      	b.n	8005684 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	ee07 3a90 	vmov	s15, r3
 8005602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005606:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005744 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800560a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800560e:	4b48      	ldr	r3, [pc, #288]	; (8005730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005612:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005616:	ee07 3a90 	vmov	s15, r3
 800561a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800561e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005622:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005738 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005626:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800562a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800562e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005632:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005636:	ee67 7a27 	vmul.f32	s15, s14, s15
 800563a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800563e:	e021      	b.n	8005684 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	ee07 3a90 	vmov	s15, r3
 8005646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800564a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005740 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800564e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005652:	4b37      	ldr	r3, [pc, #220]	; (8005730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005656:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800565a:	ee07 3a90 	vmov	s15, r3
 800565e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005662:	ed97 6a03 	vldr	s12, [r7, #12]
 8005666:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005738 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800566a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800566e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005672:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005676:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800567a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800567e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005682:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005684:	4b2a      	ldr	r3, [pc, #168]	; (8005730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005688:	0a5b      	lsrs	r3, r3, #9
 800568a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800568e:	ee07 3a90 	vmov	s15, r3
 8005692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005696:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800569a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800569e:	edd7 6a07 	vldr	s13, [r7, #28]
 80056a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056aa:	ee17 2a90 	vmov	r2, s15
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80056b2:	4b1f      	ldr	r3, [pc, #124]	; (8005730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b6:	0c1b      	lsrs	r3, r3, #16
 80056b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056bc:	ee07 3a90 	vmov	s15, r3
 80056c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80056c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80056cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80056d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056d8:	ee17 2a90 	vmov	r2, s15
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80056e0:	4b13      	ldr	r3, [pc, #76]	; (8005730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e4:	0e1b      	lsrs	r3, r3, #24
 80056e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056ea:	ee07 3a90 	vmov	s15, r3
 80056ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80056f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80056fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80056fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005702:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005706:	ee17 2a90 	vmov	r2, s15
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800570e:	e008      	b.n	8005722 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2200      	movs	r2, #0
 8005714:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	609a      	str	r2, [r3, #8]
}
 8005722:	bf00      	nop
 8005724:	3724      	adds	r7, #36	; 0x24
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr
 800572e:	bf00      	nop
 8005730:	58024400 	.word	0x58024400
 8005734:	03d09000 	.word	0x03d09000
 8005738:	46000000 	.word	0x46000000
 800573c:	4c742400 	.word	0x4c742400
 8005740:	4a742400 	.word	0x4a742400
 8005744:	4bbebc20 	.word	0x4bbebc20

08005748 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005748:	b480      	push	{r7}
 800574a:	b089      	sub	sp, #36	; 0x24
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005750:	4ba1      	ldr	r3, [pc, #644]	; (80059d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005754:	f003 0303 	and.w	r3, r3, #3
 8005758:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800575a:	4b9f      	ldr	r3, [pc, #636]	; (80059d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800575c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800575e:	0d1b      	lsrs	r3, r3, #20
 8005760:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005764:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005766:	4b9c      	ldr	r3, [pc, #624]	; (80059d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800576a:	0a1b      	lsrs	r3, r3, #8
 800576c:	f003 0301 	and.w	r3, r3, #1
 8005770:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005772:	4b99      	ldr	r3, [pc, #612]	; (80059d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005776:	08db      	lsrs	r3, r3, #3
 8005778:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800577c:	693a      	ldr	r2, [r7, #16]
 800577e:	fb02 f303 	mul.w	r3, r2, r3
 8005782:	ee07 3a90 	vmov	s15, r3
 8005786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800578a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	2b00      	cmp	r3, #0
 8005792:	f000 8111 	beq.w	80059b8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005796:	69bb      	ldr	r3, [r7, #24]
 8005798:	2b02      	cmp	r3, #2
 800579a:	f000 8083 	beq.w	80058a4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800579e:	69bb      	ldr	r3, [r7, #24]
 80057a0:	2b02      	cmp	r3, #2
 80057a2:	f200 80a1 	bhi.w	80058e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80057a6:	69bb      	ldr	r3, [r7, #24]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d003      	beq.n	80057b4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d056      	beq.n	8005860 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80057b2:	e099      	b.n	80058e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80057b4:	4b88      	ldr	r3, [pc, #544]	; (80059d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f003 0320 	and.w	r3, r3, #32
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d02d      	beq.n	800581c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80057c0:	4b85      	ldr	r3, [pc, #532]	; (80059d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	08db      	lsrs	r3, r3, #3
 80057c6:	f003 0303 	and.w	r3, r3, #3
 80057ca:	4a84      	ldr	r2, [pc, #528]	; (80059dc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80057cc:	fa22 f303 	lsr.w	r3, r2, r3
 80057d0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	ee07 3a90 	vmov	s15, r3
 80057d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	ee07 3a90 	vmov	s15, r3
 80057e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057ea:	4b7b      	ldr	r3, [pc, #492]	; (80059d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057f2:	ee07 3a90 	vmov	s15, r3
 80057f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80057fe:	eddf 5a78 	vldr	s11, [pc, #480]	; 80059e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005802:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005806:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800580a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800580e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005812:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005816:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800581a:	e087      	b.n	800592c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	ee07 3a90 	vmov	s15, r3
 8005822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005826:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80059e4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800582a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800582e:	4b6a      	ldr	r3, [pc, #424]	; (80059d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005832:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005836:	ee07 3a90 	vmov	s15, r3
 800583a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800583e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005842:	eddf 5a67 	vldr	s11, [pc, #412]	; 80059e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005846:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800584a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800584e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005852:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005856:	ee67 7a27 	vmul.f32	s15, s14, s15
 800585a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800585e:	e065      	b.n	800592c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	ee07 3a90 	vmov	s15, r3
 8005866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800586a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80059e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800586e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005872:	4b59      	ldr	r3, [pc, #356]	; (80059d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005876:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800587a:	ee07 3a90 	vmov	s15, r3
 800587e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005882:	ed97 6a03 	vldr	s12, [r7, #12]
 8005886:	eddf 5a56 	vldr	s11, [pc, #344]	; 80059e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800588a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800588e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005892:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005896:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800589a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800589e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80058a2:	e043      	b.n	800592c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	ee07 3a90 	vmov	s15, r3
 80058aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058ae:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80059ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80058b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058b6:	4b48      	ldr	r3, [pc, #288]	; (80059d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058be:	ee07 3a90 	vmov	s15, r3
 80058c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80058ca:	eddf 5a45 	vldr	s11, [pc, #276]	; 80059e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80058ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80058e6:	e021      	b.n	800592c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	ee07 3a90 	vmov	s15, r3
 80058ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058f2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80059e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80058f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058fa:	4b37      	ldr	r3, [pc, #220]	; (80059d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005902:	ee07 3a90 	vmov	s15, r3
 8005906:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800590a:	ed97 6a03 	vldr	s12, [r7, #12]
 800590e:	eddf 5a34 	vldr	s11, [pc, #208]	; 80059e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005912:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005916:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800591a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800591e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005922:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005926:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800592a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800592c:	4b2a      	ldr	r3, [pc, #168]	; (80059d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800592e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005930:	0a5b      	lsrs	r3, r3, #9
 8005932:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005936:	ee07 3a90 	vmov	s15, r3
 800593a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800593e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005942:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005946:	edd7 6a07 	vldr	s13, [r7, #28]
 800594a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800594e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005952:	ee17 2a90 	vmov	r2, s15
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800595a:	4b1f      	ldr	r3, [pc, #124]	; (80059d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800595c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595e:	0c1b      	lsrs	r3, r3, #16
 8005960:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005964:	ee07 3a90 	vmov	s15, r3
 8005968:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800596c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005970:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005974:	edd7 6a07 	vldr	s13, [r7, #28]
 8005978:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800597c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005980:	ee17 2a90 	vmov	r2, s15
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005988:	4b13      	ldr	r3, [pc, #76]	; (80059d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800598a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800598c:	0e1b      	lsrs	r3, r3, #24
 800598e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005992:	ee07 3a90 	vmov	s15, r3
 8005996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800599a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800599e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80059a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80059a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059ae:	ee17 2a90 	vmov	r2, s15
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80059b6:	e008      	b.n	80059ca <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	609a      	str	r2, [r3, #8]
}
 80059ca:	bf00      	nop
 80059cc:	3724      	adds	r7, #36	; 0x24
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr
 80059d6:	bf00      	nop
 80059d8:	58024400 	.word	0x58024400
 80059dc:	03d09000 	.word	0x03d09000
 80059e0:	46000000 	.word	0x46000000
 80059e4:	4c742400 	.word	0x4c742400
 80059e8:	4a742400 	.word	0x4a742400
 80059ec:	4bbebc20 	.word	0x4bbebc20

080059f0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b089      	sub	sp, #36	; 0x24
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80059f8:	4ba0      	ldr	r3, [pc, #640]	; (8005c7c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80059fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059fc:	f003 0303 	and.w	r3, r3, #3
 8005a00:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8005a02:	4b9e      	ldr	r3, [pc, #632]	; (8005c7c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a06:	091b      	lsrs	r3, r3, #4
 8005a08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a0c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8005a0e:	4b9b      	ldr	r3, [pc, #620]	; (8005c7c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a12:	f003 0301 	and.w	r3, r3, #1
 8005a16:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005a18:	4b98      	ldr	r3, [pc, #608]	; (8005c7c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a1c:	08db      	lsrs	r3, r3, #3
 8005a1e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005a22:	693a      	ldr	r2, [r7, #16]
 8005a24:	fb02 f303 	mul.w	r3, r2, r3
 8005a28:	ee07 3a90 	vmov	s15, r3
 8005a2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a30:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	f000 8111 	beq.w	8005c5e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8005a3c:	69bb      	ldr	r3, [r7, #24]
 8005a3e:	2b02      	cmp	r3, #2
 8005a40:	f000 8083 	beq.w	8005b4a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8005a44:	69bb      	ldr	r3, [r7, #24]
 8005a46:	2b02      	cmp	r3, #2
 8005a48:	f200 80a1 	bhi.w	8005b8e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8005a4c:	69bb      	ldr	r3, [r7, #24]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d003      	beq.n	8005a5a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8005a52:	69bb      	ldr	r3, [r7, #24]
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d056      	beq.n	8005b06 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8005a58:	e099      	b.n	8005b8e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a5a:	4b88      	ldr	r3, [pc, #544]	; (8005c7c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f003 0320 	and.w	r3, r3, #32
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d02d      	beq.n	8005ac2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005a66:	4b85      	ldr	r3, [pc, #532]	; (8005c7c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	08db      	lsrs	r3, r3, #3
 8005a6c:	f003 0303 	and.w	r3, r3, #3
 8005a70:	4a83      	ldr	r2, [pc, #524]	; (8005c80 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8005a72:	fa22 f303 	lsr.w	r3, r2, r3
 8005a76:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	ee07 3a90 	vmov	s15, r3
 8005a7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	ee07 3a90 	vmov	s15, r3
 8005a88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a90:	4b7a      	ldr	r3, [pc, #488]	; (8005c7c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a98:	ee07 3a90 	vmov	s15, r3
 8005a9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005aa0:	ed97 6a03 	vldr	s12, [r7, #12]
 8005aa4:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005c84 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005aa8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005aac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ab0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ab4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ab8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005abc:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005ac0:	e087      	b.n	8005bd2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	ee07 3a90 	vmov	s15, r3
 8005ac8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005acc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8005c88 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005ad0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ad4:	4b69      	ldr	r3, [pc, #420]	; (8005c7c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ad8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005adc:	ee07 3a90 	vmov	s15, r3
 8005ae0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ae4:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ae8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8005c84 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005aec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005af0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005af4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005af8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005afc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b00:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005b04:	e065      	b.n	8005bd2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	ee07 3a90 	vmov	s15, r3
 8005b0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b10:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8005c8c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8005b14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b18:	4b58      	ldr	r3, [pc, #352]	; (8005c7c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b20:	ee07 3a90 	vmov	s15, r3
 8005b24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b28:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b2c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8005c84 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005b30:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b34:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b38:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b44:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005b48:	e043      	b.n	8005bd2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	ee07 3a90 	vmov	s15, r3
 8005b50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b54:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005c90 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8005b58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b5c:	4b47      	ldr	r3, [pc, #284]	; (8005c7c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b64:	ee07 3a90 	vmov	s15, r3
 8005b68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b6c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b70:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005c84 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005b74:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b78:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b7c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b88:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005b8c:	e021      	b.n	8005bd2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	ee07 3a90 	vmov	s15, r3
 8005b94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b98:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8005c88 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005b9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ba0:	4b36      	ldr	r3, [pc, #216]	; (8005c7c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ba8:	ee07 3a90 	vmov	s15, r3
 8005bac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bb0:	ed97 6a03 	vldr	s12, [r7, #12]
 8005bb4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005c84 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005bb8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bbc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bc0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005bc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bcc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005bd0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8005bd2:	4b2a      	ldr	r3, [pc, #168]	; (8005c7c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bd6:	0a5b      	lsrs	r3, r3, #9
 8005bd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bdc:	ee07 3a90 	vmov	s15, r3
 8005be0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005be4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005be8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005bec:	edd7 6a07 	vldr	s13, [r7, #28]
 8005bf0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005bf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bf8:	ee17 2a90 	vmov	r2, s15
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8005c00:	4b1e      	ldr	r3, [pc, #120]	; (8005c7c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c04:	0c1b      	lsrs	r3, r3, #16
 8005c06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c0a:	ee07 3a90 	vmov	s15, r3
 8005c0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005c16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005c1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c26:	ee17 2a90 	vmov	r2, s15
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8005c2e:	4b13      	ldr	r3, [pc, #76]	; (8005c7c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c32:	0e1b      	lsrs	r3, r3, #24
 8005c34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c38:	ee07 3a90 	vmov	s15, r3
 8005c3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c40:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005c44:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005c48:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c54:	ee17 2a90 	vmov	r2, s15
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005c5c:	e008      	b.n	8005c70 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2200      	movs	r2, #0
 8005c68:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	609a      	str	r2, [r3, #8]
}
 8005c70:	bf00      	nop
 8005c72:	3724      	adds	r7, #36	; 0x24
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr
 8005c7c:	58024400 	.word	0x58024400
 8005c80:	03d09000 	.word	0x03d09000
 8005c84:	46000000 	.word	0x46000000
 8005c88:	4c742400 	.word	0x4c742400
 8005c8c:	4a742400 	.word	0x4a742400
 8005c90:	4bbebc20 	.word	0x4bbebc20

08005c94 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b084      	sub	sp, #16
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005ca2:	4b53      	ldr	r3, [pc, #332]	; (8005df0 <RCCEx_PLL2_Config+0x15c>)
 8005ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca6:	f003 0303 	and.w	r3, r3, #3
 8005caa:	2b03      	cmp	r3, #3
 8005cac:	d101      	bne.n	8005cb2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e099      	b.n	8005de6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005cb2:	4b4f      	ldr	r3, [pc, #316]	; (8005df0 <RCCEx_PLL2_Config+0x15c>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a4e      	ldr	r2, [pc, #312]	; (8005df0 <RCCEx_PLL2_Config+0x15c>)
 8005cb8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005cbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cbe:	f7fa fbad 	bl	800041c <HAL_GetTick>
 8005cc2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005cc4:	e008      	b.n	8005cd8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005cc6:	f7fa fba9 	bl	800041c <HAL_GetTick>
 8005cca:	4602      	mov	r2, r0
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	1ad3      	subs	r3, r2, r3
 8005cd0:	2b02      	cmp	r3, #2
 8005cd2:	d901      	bls.n	8005cd8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005cd4:	2303      	movs	r3, #3
 8005cd6:	e086      	b.n	8005de6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005cd8:	4b45      	ldr	r3, [pc, #276]	; (8005df0 <RCCEx_PLL2_Config+0x15c>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d1f0      	bne.n	8005cc6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005ce4:	4b42      	ldr	r3, [pc, #264]	; (8005df0 <RCCEx_PLL2_Config+0x15c>)
 8005ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	031b      	lsls	r3, r3, #12
 8005cf2:	493f      	ldr	r1, [pc, #252]	; (8005df0 <RCCEx_PLL2_Config+0x15c>)
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	628b      	str	r3, [r1, #40]	; 0x28
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	3b01      	subs	r3, #1
 8005cfe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	3b01      	subs	r3, #1
 8005d08:	025b      	lsls	r3, r3, #9
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	431a      	orrs	r2, r3
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	3b01      	subs	r3, #1
 8005d14:	041b      	lsls	r3, r3, #16
 8005d16:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005d1a:	431a      	orrs	r2, r3
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	691b      	ldr	r3, [r3, #16]
 8005d20:	3b01      	subs	r3, #1
 8005d22:	061b      	lsls	r3, r3, #24
 8005d24:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005d28:	4931      	ldr	r1, [pc, #196]	; (8005df0 <RCCEx_PLL2_Config+0x15c>)
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005d2e:	4b30      	ldr	r3, [pc, #192]	; (8005df0 <RCCEx_PLL2_Config+0x15c>)
 8005d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d32:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	695b      	ldr	r3, [r3, #20]
 8005d3a:	492d      	ldr	r1, [pc, #180]	; (8005df0 <RCCEx_PLL2_Config+0x15c>)
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005d40:	4b2b      	ldr	r3, [pc, #172]	; (8005df0 <RCCEx_PLL2_Config+0x15c>)
 8005d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d44:	f023 0220 	bic.w	r2, r3, #32
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	699b      	ldr	r3, [r3, #24]
 8005d4c:	4928      	ldr	r1, [pc, #160]	; (8005df0 <RCCEx_PLL2_Config+0x15c>)
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005d52:	4b27      	ldr	r3, [pc, #156]	; (8005df0 <RCCEx_PLL2_Config+0x15c>)
 8005d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d56:	4a26      	ldr	r2, [pc, #152]	; (8005df0 <RCCEx_PLL2_Config+0x15c>)
 8005d58:	f023 0310 	bic.w	r3, r3, #16
 8005d5c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005d5e:	4b24      	ldr	r3, [pc, #144]	; (8005df0 <RCCEx_PLL2_Config+0x15c>)
 8005d60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d62:	4b24      	ldr	r3, [pc, #144]	; (8005df4 <RCCEx_PLL2_Config+0x160>)
 8005d64:	4013      	ands	r3, r2
 8005d66:	687a      	ldr	r2, [r7, #4]
 8005d68:	69d2      	ldr	r2, [r2, #28]
 8005d6a:	00d2      	lsls	r2, r2, #3
 8005d6c:	4920      	ldr	r1, [pc, #128]	; (8005df0 <RCCEx_PLL2_Config+0x15c>)
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005d72:	4b1f      	ldr	r3, [pc, #124]	; (8005df0 <RCCEx_PLL2_Config+0x15c>)
 8005d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d76:	4a1e      	ldr	r2, [pc, #120]	; (8005df0 <RCCEx_PLL2_Config+0x15c>)
 8005d78:	f043 0310 	orr.w	r3, r3, #16
 8005d7c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d106      	bne.n	8005d92 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005d84:	4b1a      	ldr	r3, [pc, #104]	; (8005df0 <RCCEx_PLL2_Config+0x15c>)
 8005d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d88:	4a19      	ldr	r2, [pc, #100]	; (8005df0 <RCCEx_PLL2_Config+0x15c>)
 8005d8a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d8e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005d90:	e00f      	b.n	8005db2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d106      	bne.n	8005da6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005d98:	4b15      	ldr	r3, [pc, #84]	; (8005df0 <RCCEx_PLL2_Config+0x15c>)
 8005d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d9c:	4a14      	ldr	r2, [pc, #80]	; (8005df0 <RCCEx_PLL2_Config+0x15c>)
 8005d9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005da2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005da4:	e005      	b.n	8005db2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005da6:	4b12      	ldr	r3, [pc, #72]	; (8005df0 <RCCEx_PLL2_Config+0x15c>)
 8005da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005daa:	4a11      	ldr	r2, [pc, #68]	; (8005df0 <RCCEx_PLL2_Config+0x15c>)
 8005dac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005db0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005db2:	4b0f      	ldr	r3, [pc, #60]	; (8005df0 <RCCEx_PLL2_Config+0x15c>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a0e      	ldr	r2, [pc, #56]	; (8005df0 <RCCEx_PLL2_Config+0x15c>)
 8005db8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005dbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005dbe:	f7fa fb2d 	bl	800041c <HAL_GetTick>
 8005dc2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005dc4:	e008      	b.n	8005dd8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005dc6:	f7fa fb29 	bl	800041c <HAL_GetTick>
 8005dca:	4602      	mov	r2, r0
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	1ad3      	subs	r3, r2, r3
 8005dd0:	2b02      	cmp	r3, #2
 8005dd2:	d901      	bls.n	8005dd8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005dd4:	2303      	movs	r3, #3
 8005dd6:	e006      	b.n	8005de6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005dd8:	4b05      	ldr	r3, [pc, #20]	; (8005df0 <RCCEx_PLL2_Config+0x15c>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d0f0      	beq.n	8005dc6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3710      	adds	r7, #16
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
 8005dee:	bf00      	nop
 8005df0:	58024400 	.word	0x58024400
 8005df4:	ffff0007 	.word	0xffff0007

08005df8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b084      	sub	sp, #16
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e02:	2300      	movs	r3, #0
 8005e04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005e06:	4b53      	ldr	r3, [pc, #332]	; (8005f54 <RCCEx_PLL3_Config+0x15c>)
 8005e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e0a:	f003 0303 	and.w	r3, r3, #3
 8005e0e:	2b03      	cmp	r3, #3
 8005e10:	d101      	bne.n	8005e16 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	e099      	b.n	8005f4a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005e16:	4b4f      	ldr	r3, [pc, #316]	; (8005f54 <RCCEx_PLL3_Config+0x15c>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a4e      	ldr	r2, [pc, #312]	; (8005f54 <RCCEx_PLL3_Config+0x15c>)
 8005e1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e22:	f7fa fafb 	bl	800041c <HAL_GetTick>
 8005e26:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005e28:	e008      	b.n	8005e3c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005e2a:	f7fa faf7 	bl	800041c <HAL_GetTick>
 8005e2e:	4602      	mov	r2, r0
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	1ad3      	subs	r3, r2, r3
 8005e34:	2b02      	cmp	r3, #2
 8005e36:	d901      	bls.n	8005e3c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005e38:	2303      	movs	r3, #3
 8005e3a:	e086      	b.n	8005f4a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005e3c:	4b45      	ldr	r3, [pc, #276]	; (8005f54 <RCCEx_PLL3_Config+0x15c>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d1f0      	bne.n	8005e2a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005e48:	4b42      	ldr	r3, [pc, #264]	; (8005f54 <RCCEx_PLL3_Config+0x15c>)
 8005e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e4c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	051b      	lsls	r3, r3, #20
 8005e56:	493f      	ldr	r1, [pc, #252]	; (8005f54 <RCCEx_PLL3_Config+0x15c>)
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	628b      	str	r3, [r1, #40]	; 0x28
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	3b01      	subs	r3, #1
 8005e62:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	3b01      	subs	r3, #1
 8005e6c:	025b      	lsls	r3, r3, #9
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	431a      	orrs	r2, r3
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	68db      	ldr	r3, [r3, #12]
 8005e76:	3b01      	subs	r3, #1
 8005e78:	041b      	lsls	r3, r3, #16
 8005e7a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005e7e:	431a      	orrs	r2, r3
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	691b      	ldr	r3, [r3, #16]
 8005e84:	3b01      	subs	r3, #1
 8005e86:	061b      	lsls	r3, r3, #24
 8005e88:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005e8c:	4931      	ldr	r1, [pc, #196]	; (8005f54 <RCCEx_PLL3_Config+0x15c>)
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005e92:	4b30      	ldr	r3, [pc, #192]	; (8005f54 <RCCEx_PLL3_Config+0x15c>)
 8005e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e96:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	695b      	ldr	r3, [r3, #20]
 8005e9e:	492d      	ldr	r1, [pc, #180]	; (8005f54 <RCCEx_PLL3_Config+0x15c>)
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005ea4:	4b2b      	ldr	r3, [pc, #172]	; (8005f54 <RCCEx_PLL3_Config+0x15c>)
 8005ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	699b      	ldr	r3, [r3, #24]
 8005eb0:	4928      	ldr	r1, [pc, #160]	; (8005f54 <RCCEx_PLL3_Config+0x15c>)
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005eb6:	4b27      	ldr	r3, [pc, #156]	; (8005f54 <RCCEx_PLL3_Config+0x15c>)
 8005eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eba:	4a26      	ldr	r2, [pc, #152]	; (8005f54 <RCCEx_PLL3_Config+0x15c>)
 8005ebc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ec0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005ec2:	4b24      	ldr	r3, [pc, #144]	; (8005f54 <RCCEx_PLL3_Config+0x15c>)
 8005ec4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ec6:	4b24      	ldr	r3, [pc, #144]	; (8005f58 <RCCEx_PLL3_Config+0x160>)
 8005ec8:	4013      	ands	r3, r2
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	69d2      	ldr	r2, [r2, #28]
 8005ece:	00d2      	lsls	r2, r2, #3
 8005ed0:	4920      	ldr	r1, [pc, #128]	; (8005f54 <RCCEx_PLL3_Config+0x15c>)
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005ed6:	4b1f      	ldr	r3, [pc, #124]	; (8005f54 <RCCEx_PLL3_Config+0x15c>)
 8005ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eda:	4a1e      	ldr	r2, [pc, #120]	; (8005f54 <RCCEx_PLL3_Config+0x15c>)
 8005edc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ee0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d106      	bne.n	8005ef6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005ee8:	4b1a      	ldr	r3, [pc, #104]	; (8005f54 <RCCEx_PLL3_Config+0x15c>)
 8005eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eec:	4a19      	ldr	r2, [pc, #100]	; (8005f54 <RCCEx_PLL3_Config+0x15c>)
 8005eee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005ef2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005ef4:	e00f      	b.n	8005f16 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d106      	bne.n	8005f0a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005efc:	4b15      	ldr	r3, [pc, #84]	; (8005f54 <RCCEx_PLL3_Config+0x15c>)
 8005efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f00:	4a14      	ldr	r2, [pc, #80]	; (8005f54 <RCCEx_PLL3_Config+0x15c>)
 8005f02:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005f06:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005f08:	e005      	b.n	8005f16 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005f0a:	4b12      	ldr	r3, [pc, #72]	; (8005f54 <RCCEx_PLL3_Config+0x15c>)
 8005f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f0e:	4a11      	ldr	r2, [pc, #68]	; (8005f54 <RCCEx_PLL3_Config+0x15c>)
 8005f10:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f14:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005f16:	4b0f      	ldr	r3, [pc, #60]	; (8005f54 <RCCEx_PLL3_Config+0x15c>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a0e      	ldr	r2, [pc, #56]	; (8005f54 <RCCEx_PLL3_Config+0x15c>)
 8005f1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f22:	f7fa fa7b 	bl	800041c <HAL_GetTick>
 8005f26:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005f28:	e008      	b.n	8005f3c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005f2a:	f7fa fa77 	bl	800041c <HAL_GetTick>
 8005f2e:	4602      	mov	r2, r0
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	1ad3      	subs	r3, r2, r3
 8005f34:	2b02      	cmp	r3, #2
 8005f36:	d901      	bls.n	8005f3c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005f38:	2303      	movs	r3, #3
 8005f3a:	e006      	b.n	8005f4a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005f3c:	4b05      	ldr	r3, [pc, #20]	; (8005f54 <RCCEx_PLL3_Config+0x15c>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d0f0      	beq.n	8005f2a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3710      	adds	r7, #16
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
 8005f52:	bf00      	nop
 8005f54:	58024400 	.word	0x58024400
 8005f58:	ffff0007 	.word	0xffff0007

08005f5c <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b086      	sub	sp, #24
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	60f8      	str	r0, [r7, #12]
 8005f64:	60b9      	str	r1, [r7, #8]
 8005f66:	607a      	str	r2, [r7, #4]
 8005f68:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	2b02      	cmp	r3, #2
 8005f6e:	d904      	bls.n	8005f7a <HAL_SAI_InitProtocol+0x1e>
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	3b03      	subs	r3, #3
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d812      	bhi.n	8005f9e <HAL_SAI_InitProtocol+0x42>
 8005f78:	e008      	b.n	8005f8c <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	687a      	ldr	r2, [r7, #4]
 8005f7e:	68b9      	ldr	r1, [r7, #8]
 8005f80:	68f8      	ldr	r0, [r7, #12]
 8005f82:	f000 fae3 	bl	800654c <SAI_InitI2S>
 8005f86:	4603      	mov	r3, r0
 8005f88:	75fb      	strb	r3, [r7, #23]
      break;
 8005f8a:	e00b      	b.n	8005fa4 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	68b9      	ldr	r1, [r7, #8]
 8005f92:	68f8      	ldr	r0, [r7, #12]
 8005f94:	f000 fb8c 	bl	80066b0 <SAI_InitPCM>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	75fb      	strb	r3, [r7, #23]
      break;
 8005f9c:	e002      	b.n	8005fa4 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	75fb      	strb	r3, [r7, #23]
      break;
 8005fa2:	bf00      	nop
  }

  if (status == HAL_OK)
 8005fa4:	7dfb      	ldrb	r3, [r7, #23]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d104      	bne.n	8005fb4 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 8005faa:	68f8      	ldr	r0, [r7, #12]
 8005fac:	f000 f808 	bl	8005fc0 <HAL_SAI_Init>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005fb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3718      	adds	r7, #24
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}
	...

08005fc0 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b08a      	sub	sp, #40	; 0x28
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d101      	bne.n	8005fd2 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	e1fb      	b.n	80063ca <HAL_SAI_Init+0x40a>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d113      	bne.n	8006004 <HAL_SAI_Init+0x44>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a96      	ldr	r2, [pc, #600]	; (800623c <HAL_SAI_Init+0x27c>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d004      	beq.n	8005ff0 <HAL_SAI_Init+0x30>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a95      	ldr	r2, [pc, #596]	; (8006240 <HAL_SAI_Init+0x280>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d107      	bne.n	8006000 <HAL_SAI_Init+0x40>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d103      	bne.n	8006000 <HAL_SAI_Init+0x40>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d001      	beq.n	8006004 <HAL_SAI_Init+0x44>
    {
      return HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	e1e2      	b.n	80063ca <HAL_SAI_Init+0x40a>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a8c      	ldr	r2, [pc, #560]	; (800623c <HAL_SAI_Init+0x27c>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d004      	beq.n	8006018 <HAL_SAI_Init+0x58>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a8c      	ldr	r2, [pc, #560]	; (8006244 <HAL_SAI_Init+0x284>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d102      	bne.n	800601e <HAL_SAI_Init+0x5e>
  {
    SaiBaseAddress = SAI1;
 8006018:	4b8b      	ldr	r3, [pc, #556]	; (8006248 <HAL_SAI_Init+0x288>)
 800601a:	61bb      	str	r3, [r7, #24]
 800601c:	e00e      	b.n	800603c <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI3;
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a87      	ldr	r2, [pc, #540]	; (8006240 <HAL_SAI_Init+0x280>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d004      	beq.n	8006032 <HAL_SAI_Init+0x72>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a87      	ldr	r2, [pc, #540]	; (800624c <HAL_SAI_Init+0x28c>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d102      	bne.n	8006038 <HAL_SAI_Init+0x78>
  {
    SaiBaseAddress = SAI4;
 8006032:	4b87      	ldr	r3, [pc, #540]	; (8006250 <HAL_SAI_Init+0x290>)
 8006034:	61bb      	str	r3, [r7, #24]
 8006036:	e001      	b.n	800603c <HAL_SAI_Init+0x7c>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8006038:	2301      	movs	r3, #1
 800603a:	e1c6      	b.n	80063ca <HAL_SAI_Init+0x40a>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8006042:	b2db      	uxtb	r3, r3
 8006044:	2b00      	cmp	r3, #0
 8006046:	d106      	bne.n	8006056 <HAL_SAI_Init+0x96>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2200      	movs	r2, #0
 800604c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f000 ff0f 	bl	8006e74 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f000 fbe4 	bl	8006824 <SAI_Disable>
 800605c:	4603      	mov	r3, r0
 800605e:	2b00      	cmp	r3, #0
 8006060:	d001      	beq.n	8006066 <HAL_SAI_Init+0xa6>
  {
    return HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	e1b1      	b.n	80063ca <HAL_SAI_Init+0x40a>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2202      	movs	r2, #2
 800606a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	68db      	ldr	r3, [r3, #12]
 8006072:	2b02      	cmp	r3, #2
 8006074:	d00c      	beq.n	8006090 <HAL_SAI_Init+0xd0>
 8006076:	2b02      	cmp	r3, #2
 8006078:	d80d      	bhi.n	8006096 <HAL_SAI_Init+0xd6>
 800607a:	2b00      	cmp	r3, #0
 800607c:	d002      	beq.n	8006084 <HAL_SAI_Init+0xc4>
 800607e:	2b01      	cmp	r3, #1
 8006080:	d003      	beq.n	800608a <HAL_SAI_Init+0xca>
 8006082:	e008      	b.n	8006096 <HAL_SAI_Init+0xd6>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8006084:	2300      	movs	r3, #0
 8006086:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006088:	e008      	b.n	800609c <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800608a:	2310      	movs	r3, #16
 800608c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800608e:	e005      	b.n	800609c <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8006090:	2320      	movs	r3, #32
 8006092:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006094:	e002      	b.n	800609c <HAL_SAI_Init+0xdc>
    default:
      tmpregisterGCR = 0;
 8006096:	2300      	movs	r3, #0
 8006098:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800609a:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	2b05      	cmp	r3, #5
 80060a2:	d822      	bhi.n	80060ea <HAL_SAI_Init+0x12a>
 80060a4:	a201      	add	r2, pc, #4	; (adr r2, 80060ac <HAL_SAI_Init+0xec>)
 80060a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060aa:	bf00      	nop
 80060ac:	080060c5 	.word	0x080060c5
 80060b0:	080060cb 	.word	0x080060cb
 80060b4:	080060d3 	.word	0x080060d3
 80060b8:	080060eb 	.word	0x080060eb
 80060bc:	080060eb 	.word	0x080060eb
 80060c0:	080060db 	.word	0x080060db
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 80060c4:	2300      	movs	r3, #0
 80060c6:	61fb      	str	r3, [r7, #28]
      break;
 80060c8:	e012      	b.n	80060f0 <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80060ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060ce:	61fb      	str	r3, [r7, #28]
      break;
 80060d0:	e00e      	b.n	80060f0 <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80060d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80060d6:	61fb      	str	r3, [r7, #28]
      break;
 80060d8:	e00a      	b.n	80060f0 <HAL_SAI_Init+0x130>
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
      break;
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80060da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80060de:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 80060e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e2:	f043 0303 	orr.w	r3, r3, #3
 80060e6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80060e8:	e002      	b.n	80060f0 <HAL_SAI_Init+0x130>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 80060ea:	2300      	movs	r3, #0
 80060ec:	61fb      	str	r3, [r7, #28]
      break;
 80060ee:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 80060f0:	69bb      	ldr	r3, [r7, #24]
 80060f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060f4:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6a1b      	ldr	r3, [r3, #32]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	f000 8084 	beq.w	8006208 <HAL_SAI_Init+0x248>
  {
    uint32_t freq = 0;
 8006100:	2300      	movs	r3, #0
 8006102:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a4c      	ldr	r2, [pc, #304]	; (800623c <HAL_SAI_Init+0x27c>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d004      	beq.n	8006118 <HAL_SAI_Init+0x158>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a4c      	ldr	r2, [pc, #304]	; (8006244 <HAL_SAI_Init+0x284>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d104      	bne.n	8006122 <HAL_SAI_Init+0x162>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8006118:	f44f 7080 	mov.w	r0, #256	; 0x100
 800611c:	f7fe fd86 	bl	8004c2c <HAL_RCCEx_GetPeriphCLKFreq>
 8006120:	6178      	str	r0, [r7, #20]
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a46      	ldr	r2, [pc, #280]	; (8006240 <HAL_SAI_Init+0x280>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d104      	bne.n	8006136 <HAL_SAI_Init+0x176>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800612c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8006130:	f7fe fd7c 	bl	8004c2c <HAL_RCCEx_GetPeriphCLKFreq>
 8006134:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a44      	ldr	r2, [pc, #272]	; (800624c <HAL_SAI_Init+0x28c>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d104      	bne.n	800614a <HAL_SAI_Init+0x18a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8006140:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006144:	f7fe fd72 	bl	8004c2c <HAL_RCCEx_GetPeriphCLKFreq>
 8006148:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	699b      	ldr	r3, [r3, #24]
 800614e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006152:	d120      	bne.n	8006196 <HAL_SAI_Init+0x1d6>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006158:	2b04      	cmp	r3, #4
 800615a:	d102      	bne.n	8006162 <HAL_SAI_Init+0x1a2>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 800615c:	2340      	movs	r3, #64	; 0x40
 800615e:	60fb      	str	r3, [r7, #12]
 8006160:	e00a      	b.n	8006178 <HAL_SAI_Init+0x1b8>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006166:	2b08      	cmp	r3, #8
 8006168:	d103      	bne.n	8006172 <HAL_SAI_Init+0x1b2>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 800616a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800616e:	60fb      	str	r3, [r7, #12]
 8006170:	e002      	b.n	8006178 <HAL_SAI_Init+0x1b8>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006176:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8006178:	697a      	ldr	r2, [r7, #20]
 800617a:	4613      	mov	r3, r2
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	4413      	add	r3, r2
 8006180:	005b      	lsls	r3, r3, #1
 8006182:	4619      	mov	r1, r3
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6a1b      	ldr	r3, [r3, #32]
 8006188:	68fa      	ldr	r2, [r7, #12]
 800618a:	fb02 f303 	mul.w	r3, r2, r3
 800618e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006192:	613b      	str	r3, [r7, #16]
 8006194:	e017      	b.n	80061c6 <HAL_SAI_Init+0x206>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800619a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800619e:	d101      	bne.n	80061a4 <HAL_SAI_Init+0x1e4>
 80061a0:	2302      	movs	r3, #2
 80061a2:	e000      	b.n	80061a6 <HAL_SAI_Init+0x1e6>
 80061a4:	2301      	movs	r3, #1
 80061a6:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 80061a8:	697a      	ldr	r2, [r7, #20]
 80061aa:	4613      	mov	r3, r2
 80061ac:	009b      	lsls	r3, r3, #2
 80061ae:	4413      	add	r3, r2
 80061b0:	005b      	lsls	r3, r3, #1
 80061b2:	4619      	mov	r1, r3
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6a1b      	ldr	r3, [r3, #32]
 80061b8:	68ba      	ldr	r2, [r7, #8]
 80061ba:	fb02 f303 	mul.w	r3, r2, r3
 80061be:	021b      	lsls	r3, r3, #8
 80061c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80061c4:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	4a22      	ldr	r2, [pc, #136]	; (8006254 <HAL_SAI_Init+0x294>)
 80061ca:	fba2 2303 	umull	r2, r3, r2, r3
 80061ce:	08da      	lsrs	r2, r3, #3
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 80061d4:	6939      	ldr	r1, [r7, #16]
 80061d6:	4b1f      	ldr	r3, [pc, #124]	; (8006254 <HAL_SAI_Init+0x294>)
 80061d8:	fba3 2301 	umull	r2, r3, r3, r1
 80061dc:	08da      	lsrs	r2, r3, #3
 80061de:	4613      	mov	r3, r2
 80061e0:	009b      	lsls	r3, r3, #2
 80061e2:	4413      	add	r3, r2
 80061e4:	005b      	lsls	r3, r3, #1
 80061e6:	1aca      	subs	r2, r1, r3
 80061e8:	2a08      	cmp	r2, #8
 80061ea:	d904      	bls.n	80061f6 <HAL_SAI_Init+0x236>
    {
      hsai->Init.Mckdiv += 1U;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f0:	1c5a      	adds	r2, r3, #1
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061fa:	2b04      	cmp	r3, #4
 80061fc:	d104      	bne.n	8006208 <HAL_SAI_Init+0x248>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006202:	085a      	lsrs	r2, r3, #1
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d003      	beq.n	8006218 <HAL_SAI_Init+0x258>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	2b02      	cmp	r3, #2
 8006216:	d109      	bne.n	800622c <HAL_SAI_Init+0x26c>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800621c:	2b01      	cmp	r3, #1
 800621e:	d101      	bne.n	8006224 <HAL_SAI_Init+0x264>
 8006220:	2300      	movs	r3, #0
 8006222:	e001      	b.n	8006228 <HAL_SAI_Init+0x268>
 8006224:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006228:	623b      	str	r3, [r7, #32]
 800622a:	e017      	b.n	800625c <HAL_SAI_Init+0x29c>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006230:	2b01      	cmp	r3, #1
 8006232:	d111      	bne.n	8006258 <HAL_SAI_Init+0x298>
 8006234:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006238:	e00f      	b.n	800625a <HAL_SAI_Init+0x29a>
 800623a:	bf00      	nop
 800623c:	40015804 	.word	0x40015804
 8006240:	58005404 	.word	0x58005404
 8006244:	40015824 	.word	0x40015824
 8006248:	40015800 	.word	0x40015800
 800624c:	58005424 	.word	0x58005424
 8006250:	58005400 	.word	0x58005400
 8006254:	cccccccd 	.word	0xcccccccd
 8006258:	2300      	movs	r3, #0
 800625a:	623b      	str	r3, [r7, #32]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                            hsai->Init.MckOverSampling);
  }
#else /* SAI_VER_V2_1*/
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	6819      	ldr	r1, [r3, #0]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	4b5b      	ldr	r3, [pc, #364]	; (80063d4 <HAL_SAI_Init+0x414>)
 8006268:	400b      	ands	r3, r1
 800626a:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	6819      	ldr	r1, [r3, #0]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	685a      	ldr	r2, [r3, #4]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800627a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006280:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006286:	431a      	orrs	r2, r3
 8006288:	6a3b      	ldr	r3, [r7, #32]
 800628a:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800628c:	69fb      	ldr	r3, [r7, #28]
 800628e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                          ckstr_bits | syncen_bits |                             \
 8006294:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	695b      	ldr	r3, [r3, #20]
 800629a:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80062a0:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a6:	051b      	lsls	r3, r3, #20
 80062a8:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80062ae:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	691b      	ldr	r3, [r3, #16]
 80062b4:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	430a      	orrs	r2, r1
 80062bc:	601a      	str	r2, [r3, #0]
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	6859      	ldr	r1, [r3, #4]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	4b43      	ldr	r3, [pc, #268]	; (80063d8 <HAL_SAI_Init+0x418>)
 80062ca:	400b      	ands	r3, r1
 80062cc:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	6859      	ldr	r1, [r3, #4]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	69da      	ldr	r2, [r3, #28]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062dc:	431a      	orrs	r2, r3
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062e2:	431a      	orrs	r2, r3
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	430a      	orrs	r2, r1
 80062ea:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	6899      	ldr	r1, [r3, #8]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	4b39      	ldr	r3, [pc, #228]	; (80063dc <HAL_SAI_Init+0x41c>)
 80062f8:	400b      	ands	r3, r1
 80062fa:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	6899      	ldr	r1, [r3, #8]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006306:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800630c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 8006312:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 8006318:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800631e:	3b01      	subs	r3, #1
 8006320:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8006322:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	430a      	orrs	r2, r1
 800632a:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	68d9      	ldr	r1, [r3, #12]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681a      	ldr	r2, [r3, #0]
 8006336:	f24f 0320 	movw	r3, #61472	; 0xf020
 800633a:	400b      	ands	r3, r1
 800633c:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	68d9      	ldr	r1, [r3, #12]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800634c:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006352:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006354:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800635a:	3b01      	subs	r3, #1
 800635c:	021b      	lsls	r3, r3, #8
 800635e:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	430a      	orrs	r2, r1
 8006366:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a1c      	ldr	r2, [pc, #112]	; (80063e0 <HAL_SAI_Init+0x420>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d004      	beq.n	800637c <HAL_SAI_Init+0x3bc>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a1b      	ldr	r2, [pc, #108]	; (80063e4 <HAL_SAI_Init+0x424>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d119      	bne.n	80063b0 <HAL_SAI_Init+0x3f0>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800637c:	69bb      	ldr	r3, [r7, #24]
 800637e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006380:	f023 0201 	bic.w	r2, r3, #1
 8006384:	69bb      	ldr	r3, [r7, #24]
 8006386:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800638e:	2b01      	cmp	r3, #1
 8006390:	d10e      	bne.n	80063b0 <HAL_SAI_Init+0x3f0>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800639a:	3b01      	subs	r3, #1
 800639c:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800639e:	431a      	orrs	r2, r3
 80063a0:	69bb      	ldr	r3, [r7, #24]
 80063a2:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 80063a4:	69bb      	ldr	r3, [r7, #24]
 80063a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063a8:	f043 0201 	orr.w	r2, r3, #1
 80063ac:	69bb      	ldr	r3, [r7, #24]
 80063ae:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2201      	movs	r2, #1
 80063bc:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 80063c8:	2300      	movs	r3, #0
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3728      	adds	r7, #40	; 0x28
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}
 80063d2:	bf00      	nop
 80063d4:	f005c010 	.word	0xf005c010
 80063d8:	ffff1ff0 	.word	0xffff1ff0
 80063dc:	fff88000 	.word	0xfff88000
 80063e0:	40015804 	.word	0x40015804
 80063e4:	58005404 	.word	0x58005404

080063e8 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b084      	sub	sp, #16
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	60f8      	str	r0, [r7, #12]
 80063f0:	60b9      	str	r1, [r7, #8]
 80063f2:	4613      	mov	r3, r2
 80063f4:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d002      	beq.n	8006402 <HAL_SAI_Receive_DMA+0x1a>
 80063fc:	88fb      	ldrh	r3, [r7, #6]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d101      	bne.n	8006406 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	e079      	b.n	80064fa <HAL_SAI_Receive_DMA+0x112>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800640c:	b2db      	uxtb	r3, r3
 800640e:	2b01      	cmp	r3, #1
 8006410:	d172      	bne.n	80064f8 <HAL_SAI_Receive_DMA+0x110>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8006418:	2b01      	cmp	r3, #1
 800641a:	d101      	bne.n	8006420 <HAL_SAI_Receive_DMA+0x38>
 800641c:	2302      	movs	r3, #2
 800641e:	e06c      	b.n	80064fa <HAL_SAI_Receive_DMA+0x112>
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2201      	movs	r2, #1
 8006424:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	68ba      	ldr	r2, [r7, #8]
 800642c:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	88fa      	ldrh	r2, [r7, #6]
 8006432:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	88fa      	ldrh	r2, [r7, #6]
 800643a:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2200      	movs	r2, #0
 8006442:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2222      	movs	r2, #34	; 0x22
 800644a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006454:	4a2b      	ldr	r2, [pc, #172]	; (8006504 <HAL_SAI_Receive_DMA+0x11c>)
 8006456:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800645e:	4a2a      	ldr	r2, [pc, #168]	; (8006508 <HAL_SAI_Receive_DMA+0x120>)
 8006460:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006468:	4a28      	ldr	r2, [pc, #160]	; (800650c <HAL_SAI_Receive_DMA+0x124>)
 800646a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006472:	2200      	movs	r2, #0
 8006474:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	331c      	adds	r3, #28
 8006482:	4619      	mov	r1, r3
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006488:	461a      	mov	r2, r3
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8006490:	f7fa fd24 	bl	8000edc <HAL_DMA_Start_IT>
 8006494:	4603      	mov	r3, r0
 8006496:	2b00      	cmp	r3, #0
 8006498:	d005      	beq.n	80064a6 <HAL_SAI_Receive_DMA+0xbe>
    {
      __HAL_UNLOCK(hsai);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2200      	movs	r2, #0
 800649e:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 80064a2:	2301      	movs	r3, #1
 80064a4:	e029      	b.n	80064fa <HAL_SAI_Receive_DMA+0x112>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80064a6:	2100      	movs	r1, #0
 80064a8:	68f8      	ldr	r0, [r7, #12]
 80064aa:	f000 f983 	bl	80067b4 <SAI_InterruptFlag>
 80064ae:	4601      	mov	r1, r0
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	691a      	ldr	r2, [r3, #16]
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	430a      	orrs	r2, r1
 80064bc:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80064cc:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d107      	bne.n	80064ec <HAL_SAI_Receive_DMA+0x104>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80064ea:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2200      	movs	r2, #0
 80064f0:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 80064f4:	2300      	movs	r3, #0
 80064f6:	e000      	b.n	80064fa <HAL_SAI_Receive_DMA+0x112>
  }
  else
  {
    return HAL_BUSY;
 80064f8:	2302      	movs	r3, #2
  }
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3710      	adds	r7, #16
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
 8006502:	bf00      	nop
 8006504:	080068f9 	.word	0x080068f9
 8006508:	08006899 	.word	0x08006899
 800650c:	08006915 	.word	0x08006915

08006510 <HAL_SAI_RxCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8006510:	b480      	push	{r7}
 8006512:	b083      	sub	sp, #12
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_RxCpltCallback could be implemented in the user file
   */
}
 8006518:	bf00      	nop
 800651a:	370c      	adds	r7, #12
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr

08006524 <HAL_SAI_RxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8006524:	b480      	push	{r7}
 8006526:	b083      	sub	sp, #12
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_RxHalfCpltCallback could be implemented in the user file
   */
}
 800652c:	bf00      	nop
 800652e:	370c      	adds	r7, #12
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr

08006538 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8006538:	b480      	push	{r7}
 800653a:	b083      	sub	sp, #12
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8006540:	bf00      	nop
 8006542:	370c      	adds	r7, #12
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr

0800654c <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800654c:	b480      	push	{r7}
 800654e:	b087      	sub	sp, #28
 8006550:	af00      	add	r7, sp, #0
 8006552:	60f8      	str	r0, [r7, #12]
 8006554:	60b9      	str	r1, [r7, #8]
 8006556:	607a      	str	r2, [r7, #4]
 8006558:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800655a:	2300      	movs	r3, #0
 800655c:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2200      	movs	r2, #0
 8006562:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2200      	movs	r2, #0
 8006568:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d003      	beq.n	800657a <SAI_InitI2S+0x2e>
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	2b02      	cmp	r3, #2
 8006578:	d103      	bne.n	8006582 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2200      	movs	r2, #0
 800657e:	651a      	str	r2, [r3, #80]	; 0x50
 8006580:	e002      	b.n	8006588 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2201      	movs	r2, #1
 8006586:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800658e:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006596:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2200      	movs	r2, #0
 800659c:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	683a      	ldr	r2, [r7, #0]
 80065a2:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	f003 0301 	and.w	r3, r3, #1
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d001      	beq.n	80065b2 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	e077      	b.n	80066a2 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d107      	bne.n	80065c8 <SAI_InitI2S+0x7c>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2200      	movs	r2, #0
 80065bc:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80065c4:	665a      	str	r2, [r3, #100]	; 0x64
 80065c6:	e006      	b.n	80065d6 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80065ce:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2200      	movs	r2, #0
 80065d4:	665a      	str	r2, [r3, #100]	; 0x64
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2b03      	cmp	r3, #3
 80065da:	d84f      	bhi.n	800667c <SAI_InitI2S+0x130>
 80065dc:	a201      	add	r2, pc, #4	; (adr r2, 80065e4 <SAI_InitI2S+0x98>)
 80065de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065e2:	bf00      	nop
 80065e4:	080065f5 	.word	0x080065f5
 80065e8:	08006617 	.word	0x08006617
 80065ec:	08006639 	.word	0x08006639
 80065f0:	0800665b 	.word	0x0800665b

  /* Frame definition */
  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2280      	movs	r2, #128	; 0x80
 80065f8:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	085b      	lsrs	r3, r3, #1
 80065fe:	015a      	lsls	r2, r3, #5
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	085b      	lsrs	r3, r3, #1
 8006608:	011a      	lsls	r2, r3, #4
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2240      	movs	r2, #64	; 0x40
 8006612:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8006614:	e035      	b.n	8006682 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2280      	movs	r2, #128	; 0x80
 800661a:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	085b      	lsrs	r3, r3, #1
 8006620:	019a      	lsls	r2, r3, #6
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	085b      	lsrs	r3, r3, #1
 800662a:	015a      	lsls	r2, r3, #5
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	2280      	movs	r2, #128	; 0x80
 8006634:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8006636:	e024      	b.n	8006682 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	22c0      	movs	r2, #192	; 0xc0
 800663c:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	085b      	lsrs	r3, r3, #1
 8006642:	019a      	lsls	r2, r3, #6
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	085b      	lsrs	r3, r3, #1
 800664c:	015a      	lsls	r2, r3, #5
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2280      	movs	r2, #128	; 0x80
 8006656:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8006658:	e013      	b.n	8006682 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	22e0      	movs	r2, #224	; 0xe0
 800665e:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	085b      	lsrs	r3, r3, #1
 8006664:	019a      	lsls	r2, r3, #6
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	085b      	lsrs	r3, r3, #1
 800666e:	015a      	lsls	r2, r3, #5
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2280      	movs	r2, #128	; 0x80
 8006678:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800667a:	e002      	b.n	8006682 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	75fb      	strb	r3, [r7, #23]
      break;
 8006680:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	2b02      	cmp	r3, #2
 8006686:	d10b      	bne.n	80066a0 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2b01      	cmp	r3, #1
 800668c:	d102      	bne.n	8006694 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2210      	movs	r2, #16
 8006692:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2b02      	cmp	r3, #2
 8006698:	d102      	bne.n	80066a0 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2208      	movs	r2, #8
 800669e:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
 80066a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	371c      	adds	r7, #28
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr
 80066ae:	bf00      	nop

080066b0 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b087      	sub	sp, #28
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	60f8      	str	r0, [r7, #12]
 80066b8:	60b9      	str	r1, [r7, #8]
 80066ba:	607a      	str	r2, [r7, #4]
 80066bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80066be:	2300      	movs	r3, #0
 80066c0:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2200      	movs	r2, #0
 80066c6:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2200      	movs	r2, #0
 80066cc:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d003      	beq.n	80066de <SAI_InitPCM+0x2e>
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	2b02      	cmp	r3, #2
 80066dc:	d103      	bne.n	80066e6 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2201      	movs	r2, #1
 80066e2:	651a      	str	r2, [r3, #80]	; 0x50
 80066e4:	e002      	b.n	80066ec <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2200      	movs	r2, #0
 80066ea:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2200      	movs	r2, #0
 80066f0:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80066f8:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006700:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2200      	movs	r2, #0
 8006706:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	683a      	ldr	r2, [r7, #0]
 800670c:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006714:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	2b04      	cmp	r3, #4
 800671a:	d103      	bne.n	8006724 <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2201      	movs	r2, #1
 8006720:	659a      	str	r2, [r3, #88]	; 0x58
 8006722:	e002      	b.n	800672a <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	220d      	movs	r2, #13
 8006728:	659a      	str	r2, [r3, #88]	; 0x58
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2b03      	cmp	r3, #3
 800672e:	d837      	bhi.n	80067a0 <SAI_InitPCM+0xf0>
 8006730:	a201      	add	r2, pc, #4	; (adr r2, 8006738 <SAI_InitPCM+0x88>)
 8006732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006736:	bf00      	nop
 8006738:	08006749 	.word	0x08006749
 800673c:	0800675f 	.word	0x0800675f
 8006740:	08006775 	.word	0x08006775
 8006744:	0800678b 	.word	0x0800678b
  }

  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2280      	movs	r2, #128	; 0x80
 800674c:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	011a      	lsls	r2, r3, #4
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2240      	movs	r2, #64	; 0x40
 800675a:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800675c:	e023      	b.n	80067a6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2280      	movs	r2, #128	; 0x80
 8006762:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	015a      	lsls	r2, r3, #5
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2280      	movs	r2, #128	; 0x80
 8006770:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8006772:	e018      	b.n	80067a6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	22c0      	movs	r2, #192	; 0xc0
 8006778:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	015a      	lsls	r2, r3, #5
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2280      	movs	r2, #128	; 0x80
 8006786:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8006788:	e00d      	b.n	80067a6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	22e0      	movs	r2, #224	; 0xe0
 800678e:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	015a      	lsls	r2, r3, #5
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2280      	movs	r2, #128	; 0x80
 800679c:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800679e:	e002      	b.n	80067a6 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 80067a0:	2301      	movs	r3, #1
 80067a2:	75fb      	strb	r3, [r7, #23]
      break;
 80067a4:	bf00      	nop
  }

  return status;
 80067a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	371c      	adds	r7, #28
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr

080067b4 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b085      	sub	sp, #20
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	460b      	mov	r3, r1
 80067be:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 80067c4:	78fb      	ldrb	r3, [r7, #3]
 80067c6:	2b01      	cmp	r3, #1
 80067c8:	d103      	bne.n	80067d2 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	f043 0308 	orr.w	r3, r3, #8
 80067d0:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067d6:	2b08      	cmp	r3, #8
 80067d8:	d10b      	bne.n	80067f2 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80067de:	2b03      	cmp	r3, #3
 80067e0:	d003      	beq.n	80067ea <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	d103      	bne.n	80067f2 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	f043 0310 	orr.w	r3, r3, #16
 80067f0:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	2b03      	cmp	r3, #3
 80067f8:	d003      	beq.n	8006802 <SAI_InterruptFlag+0x4e>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	2b02      	cmp	r3, #2
 8006800:	d104      	bne.n	800680c <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006808:	60fb      	str	r3, [r7, #12]
 800680a:	e003      	b.n	8006814 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f043 0304 	orr.w	r3, r3, #4
 8006812:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8006814:	68fb      	ldr	r3, [r7, #12]
}
 8006816:	4618      	mov	r0, r3
 8006818:	3714      	adds	r7, #20
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr
	...

08006824 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8006824:	b480      	push	{r7}
 8006826:	b085      	sub	sp, #20
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800682c:	4b18      	ldr	r3, [pc, #96]	; (8006890 <SAI_Disable+0x6c>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a18      	ldr	r2, [pc, #96]	; (8006894 <SAI_Disable+0x70>)
 8006832:	fba2 2303 	umull	r2, r3, r2, r3
 8006836:	0b1b      	lsrs	r3, r3, #12
 8006838:	009b      	lsls	r3, r3, #2
 800683a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800683c:	2300      	movs	r3, #0
 800683e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800684e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d10a      	bne.n	800686c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800685c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 8006866:	2303      	movs	r3, #3
 8006868:	72fb      	strb	r3, [r7, #11]
      break;
 800686a:	e009      	b.n	8006880 <SAI_Disable+0x5c>
    }
    count--;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	3b01      	subs	r3, #1
 8006870:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800687c:	2b00      	cmp	r3, #0
 800687e:	d1e7      	bne.n	8006850 <SAI_Disable+0x2c>

  return status;
 8006880:	7afb      	ldrb	r3, [r7, #11]
}
 8006882:	4618      	mov	r0, r3
 8006884:	3714      	adds	r7, #20
 8006886:	46bd      	mov	sp, r7
 8006888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688c:	4770      	bx	lr
 800688e:	bf00      	nop
 8006890:	24000408 	.word	0x24000408
 8006894:	95cbec1b 	.word	0x95cbec1b

08006898 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b084      	sub	sp, #16
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068a4:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	69db      	ldr	r3, [r3, #28]
 80068aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068ae:	d01c      	beq.n	80068ea <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	681a      	ldr	r2, [r3, #0]
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80068be:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2200      	movs	r2, #0
 80068c4:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80068c8:	2100      	movs	r1, #0
 80068ca:	68f8      	ldr	r0, [r7, #12]
 80068cc:	f7ff ff72 	bl	80067b4 <SAI_InterruptFlag>
 80068d0:	4603      	mov	r3, r0
 80068d2:	43d9      	mvns	r1, r3
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	691a      	ldr	r2, [r3, #16]
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	400a      	ands	r2, r1
 80068e0:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2201      	movs	r2, #1
 80068e6:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 80068ea:	68f8      	ldr	r0, [r7, #12]
 80068ec:	f7ff fe10 	bl	8006510 <HAL_SAI_RxCpltCallback>
#endif
}
 80068f0:	bf00      	nop
 80068f2:	3710      	adds	r7, #16
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}

080068f8 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b084      	sub	sp, #16
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006904:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8006906:	68f8      	ldr	r0, [r7, #12]
 8006908:	f7ff fe0c 	bl	8006524 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 800690c:	bf00      	nop
 800690e:	3710      	adds	r7, #16
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}

08006914 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b084      	sub	sp, #16
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006920:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f7fb fc6e 	bl	8002204 <HAL_DMA_GetError>
 8006928:	4603      	mov	r3, r0
 800692a:	2b02      	cmp	r3, #2
 800692c:	d01d      	beq.n	800696a <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006934:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	681a      	ldr	r2, [r3, #0]
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800694c:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 800694e:	68f8      	ldr	r0, [r7, #12]
 8006950:	f7ff ff68 	bl	8006824 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2201      	movs	r2, #1
 8006958:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2200      	movs	r2, #0
 8006960:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 8006964:	68f8      	ldr	r0, [r7, #12]
 8006966:	f7ff fde7 	bl	8006538 <HAL_SAI_ErrorCallback>
#endif
  }
}
 800696a:	bf00      	nop
 800696c:	3710      	adds	r7, #16
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
	...

08006974 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	f5ad 5d40 	sub.w	sp, sp, #12288	; 0x3000
 800697a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800697c:	f7f9 fcc8 	bl	8000310 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006980:	f000 f832 	bl	80069e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006984:	f000 f9c2 	bl	8006d0c <MX_GPIO_Init>
  MX_BDMA_Init();
 8006988:	f000 f970 	bl	8006c6c <MX_BDMA_Init>
  MX_SAI4_Init();
 800698c:	f000 f910 	bl	8006bb0 <MX_SAI4_Init>

  MX_CRC_Init();
 8006990:	f000 f898 	bl	8006ac4 <MX_CRC_Init>
  MX_PDM2PCM_Init();
 8006994:	f000 fa08 	bl	8006da8 <MX_PDM2PCM_Init>
  MX_DMA_Init();
 8006998:	f000 f990 	bl	8006cbc <MX_DMA_Init>
  MX_SAI1_Init();
 800699c:	f000 f8d4 	bl	8006b48 <MX_SAI1_Init>
  /* USER CODE BEGIN 2 */

  // for pdm: input buffer is uint8
  // with length >= (48 * 64 * 1/8) = 384
  uint8_t pdm_buffer[4096] = {0};
 80069a0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80069a4:	2200      	movs	r2, #0
 80069a6:	601a      	str	r2, [r3, #0]
 80069a8:	3304      	adds	r3, #4
 80069aa:	f640 72fc 	movw	r2, #4092	; 0xffc
 80069ae:	2100      	movs	r1, #0
 80069b0:	4618      	mov	r0, r3
 80069b2:	f002 fba3 	bl	80090fc <memset>

  // for pdm: output buffer is uint16
  // with length >= 48
  uint16_t pcm_buffer[4096] = {0};
 80069b6:	463b      	mov	r3, r7
 80069b8:	4618      	mov	r0, r3
 80069ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80069be:	461a      	mov	r2, r3
 80069c0:	2100      	movs	r1, #0
 80069c2:	f002 fb9b 	bl	80090fc <memset>

  /* INITIALIZE */
  //
  HAL_SAI_MspInit(&hsai_BlockA4);
 80069c6:	4807      	ldr	r0, [pc, #28]	; (80069e4 <main+0x70>)
 80069c8:	f000 fa54 	bl	8006e74 <HAL_SAI_MspInit>
  HAL_SAI_Init(&hsai_BlockA4);
 80069cc:	4805      	ldr	r0, [pc, #20]	; (80069e4 <main+0x70>)
 80069ce:	f7ff faf7 	bl	8005fc0 <HAL_SAI_Init>

  // polling mode - SIZE = # BYTES
//  HAL_SAI_Receive(&hsai_BlockA4, pdm_buffer, 64, 1000);
//  uint32_t pdm_status = PDM_Filter(pdm_buffer, pcm_buffer, &PDM1_filter_handler);

  HAL_SAI_Receive_DMA(&hsai_BlockA4, pdm_buffer, 64);
 80069d2:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80069d6:	2240      	movs	r2, #64	; 0x40
 80069d8:	4619      	mov	r1, r3
 80069da:	4802      	ldr	r0, [pc, #8]	; (80069e4 <main+0x70>)
 80069dc:	f7ff fd04 	bl	80063e8 <HAL_SAI_Receive_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80069e0:	e7fe      	b.n	80069e0 <main+0x6c>
 80069e2:	bf00      	nop
 80069e4:	2400055c 	.word	0x2400055c

080069e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b09c      	sub	sp, #112	; 0x70
 80069ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80069ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80069f2:	224c      	movs	r2, #76	; 0x4c
 80069f4:	2100      	movs	r1, #0
 80069f6:	4618      	mov	r0, r3
 80069f8:	f002 fb80 	bl	80090fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80069fc:	1d3b      	adds	r3, r7, #4
 80069fe:	2220      	movs	r2, #32
 8006a00:	2100      	movs	r1, #0
 8006a02:	4618      	mov	r0, r3
 8006a04:	f002 fb7a 	bl	80090fc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8006a08:	2004      	movs	r0, #4
 8006a0a:	f7fc faaf 	bl	8002f6c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006a0e:	2300      	movs	r3, #0
 8006a10:	603b      	str	r3, [r7, #0]
 8006a12:	4b2b      	ldr	r3, [pc, #172]	; (8006ac0 <SystemClock_Config+0xd8>)
 8006a14:	699b      	ldr	r3, [r3, #24]
 8006a16:	4a2a      	ldr	r2, [pc, #168]	; (8006ac0 <SystemClock_Config+0xd8>)
 8006a18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a1c:	6193      	str	r3, [r2, #24]
 8006a1e:	4b28      	ldr	r3, [pc, #160]	; (8006ac0 <SystemClock_Config+0xd8>)
 8006a20:	699b      	ldr	r3, [r3, #24]
 8006a22:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006a26:	603b      	str	r3, [r7, #0]
 8006a28:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8006a2a:	bf00      	nop
 8006a2c:	4b24      	ldr	r3, [pc, #144]	; (8006ac0 <SystemClock_Config+0xd8>)
 8006a2e:	699b      	ldr	r3, [r3, #24]
 8006a30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a38:	d1f8      	bne.n	8006a2c <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8006a3a:	2302      	movs	r3, #2
 8006a3c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006a42:	2340      	movs	r3, #64	; 0x40
 8006a44:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006a46:	2302      	movs	r3, #2
 8006a48:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8006a4e:	2304      	movs	r3, #4
 8006a50:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8006a52:	2318      	movs	r3, #24
 8006a54:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8006a56:	2301      	movs	r3, #1
 8006a58:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 125;
 8006a5a:	237d      	movs	r3, #125	; 0x7d
 8006a5c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8006a5e:	2302      	movs	r3, #2
 8006a60:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8006a62:	230c      	movs	r3, #12
 8006a64:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8006a66:	2300      	movs	r3, #0
 8006a68:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006a6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a72:	4618      	mov	r0, r3
 8006a74:	f7fc fad4 	bl	8003020 <HAL_RCC_OscConfig>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d001      	beq.n	8006a82 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8006a7e:	f000 f98d 	bl	8006d9c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006a82:	233f      	movs	r3, #63	; 0x3f
 8006a84:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006a86:	2303      	movs	r3, #3
 8006a88:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8006a8e:	2308      	movs	r3, #8
 8006a90:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8006a92:	2340      	movs	r3, #64	; 0x40
 8006a94:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8006a96:	2340      	movs	r3, #64	; 0x40
 8006a98:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8006a9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a9e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8006aa0:	2340      	movs	r3, #64	; 0x40
 8006aa2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8006aa4:	1d3b      	adds	r3, r7, #4
 8006aa6:	2102      	movs	r1, #2
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f7fc fe65 	bl	8003778 <HAL_RCC_ClockConfig>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d001      	beq.n	8006ab8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8006ab4:	f000 f972 	bl	8006d9c <Error_Handler>
  }
}
 8006ab8:	bf00      	nop
 8006aba:	3770      	adds	r7, #112	; 0x70
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}
 8006ac0:	58024800 	.word	0x58024800

08006ac4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b082      	sub	sp, #8
 8006ac8:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8006aca:	4b1c      	ldr	r3, [pc, #112]	; (8006b3c <MX_CRC_Init+0x78>)
 8006acc:	4a1c      	ldr	r2, [pc, #112]	; (8006b40 <MX_CRC_Init+0x7c>)
 8006ace:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8006ad0:	4b1a      	ldr	r3, [pc, #104]	; (8006b3c <MX_CRC_Init+0x78>)
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8006ad6:	4b19      	ldr	r3, [pc, #100]	; (8006b3c <MX_CRC_Init+0x78>)
 8006ad8:	2200      	movs	r2, #0
 8006ada:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8006adc:	4b17      	ldr	r3, [pc, #92]	; (8006b3c <MX_CRC_Init+0x78>)
 8006ade:	2200      	movs	r2, #0
 8006ae0:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8006ae2:	4b16      	ldr	r3, [pc, #88]	; (8006b3c <MX_CRC_Init+0x78>)
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8006ae8:	4b14      	ldr	r3, [pc, #80]	; (8006b3c <MX_CRC_Init+0x78>)
 8006aea:	2201      	movs	r2, #1
 8006aec:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8006aee:	4813      	ldr	r0, [pc, #76]	; (8006b3c <MX_CRC_Init+0x78>)
 8006af0:	f7f9 fdb0 	bl	8000654 <HAL_CRC_Init>
 8006af4:	4603      	mov	r3, r0
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d001      	beq.n	8006afe <MX_CRC_Init+0x3a>
  {
    Error_Handler();
 8006afa:	f000 f94f 	bl	8006d9c <Error_Handler>
  }
  __HAL_CRC_DR_RESET(&hcrc);
 8006afe:	4b0f      	ldr	r3, [pc, #60]	; (8006b3c <MX_CRC_Init+0x78>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	689a      	ldr	r2, [r3, #8]
 8006b04:	4b0d      	ldr	r3, [pc, #52]	; (8006b3c <MX_CRC_Init+0x78>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f042 0201 	orr.w	r2, r2, #1
 8006b0c:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN CRC_Init 2 */

  __HAL_RCC_CRC_CLK_ENABLE();
 8006b0e:	4b0d      	ldr	r3, [pc, #52]	; (8006b44 <MX_CRC_Init+0x80>)
 8006b10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006b14:	4a0b      	ldr	r2, [pc, #44]	; (8006b44 <MX_CRC_Init+0x80>)
 8006b16:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006b1e:	4b09      	ldr	r3, [pc, #36]	; (8006b44 <MX_CRC_Init+0x80>)
 8006b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006b24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b28:	607b      	str	r3, [r7, #4]
 8006b2a:	687b      	ldr	r3, [r7, #4]
  HAL_CRC_MspInit(&hcrc);
 8006b2c:	4803      	ldr	r0, [pc, #12]	; (8006b3c <MX_CRC_Init+0x78>)
 8006b2e:	f000 f97f 	bl	8006e30 <HAL_CRC_MspInit>

  /* USER CODE END CRC_Init 2 */

}
 8006b32:	bf00      	nop
 8006b34:	3708      	adds	r7, #8
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}
 8006b3a:	bf00      	nop
 8006b3c:	240004a0 	.word	0x240004a0
 8006b40:	58024c00 	.word	0x58024c00
 8006b44:	58024400 	.word	0x58024400

08006b48 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockB1.Instance = SAI1_Block_B;
 8006b4c:	4b16      	ldr	r3, [pc, #88]	; (8006ba8 <MX_SAI1_Init+0x60>)
 8006b4e:	4a17      	ldr	r2, [pc, #92]	; (8006bac <MX_SAI1_Init+0x64>)
 8006b50:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 8006b52:	4b15      	ldr	r3, [pc, #84]	; (8006ba8 <MX_SAI1_Init+0x60>)
 8006b54:	2200      	movs	r2, #0
 8006b56:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 8006b58:	4b13      	ldr	r3, [pc, #76]	; (8006ba8 <MX_SAI1_Init+0x60>)
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8006b5e:	4b12      	ldr	r3, [pc, #72]	; (8006ba8 <MX_SAI1_Init+0x60>)
 8006b60:	2200      	movs	r2, #0
 8006b62:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.NoDivider = SAI_MASTERDIVIDER_DISABLE;
 8006b64:	4b10      	ldr	r3, [pc, #64]	; (8006ba8 <MX_SAI1_Init+0x60>)
 8006b66:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006b6a:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8006b6c:	4b0e      	ldr	r3, [pc, #56]	; (8006ba8 <MX_SAI1_Init+0x60>)
 8006b6e:	2200      	movs	r2, #0
 8006b70:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8006b72:	4b0d      	ldr	r3, [pc, #52]	; (8006ba8 <MX_SAI1_Init+0x60>)
 8006b74:	2200      	movs	r2, #0
 8006b76:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_MONOMODE;
 8006b78:	4b0b      	ldr	r3, [pc, #44]	; (8006ba8 <MX_SAI1_Init+0x60>)
 8006b7a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006b7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8006b80:	4b09      	ldr	r3, [pc, #36]	; (8006ba8 <MX_SAI1_Init+0x60>)
 8006b82:	2200      	movs	r2, #0
 8006b84:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8006b86:	4b08      	ldr	r3, [pc, #32]	; (8006ba8 <MX_SAI1_Init+0x60>)
 8006b88:	2200      	movs	r2, #0
 8006b8a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8006b8c:	2302      	movs	r3, #2
 8006b8e:	2200      	movs	r2, #0
 8006b90:	2100      	movs	r1, #0
 8006b92:	4805      	ldr	r0, [pc, #20]	; (8006ba8 <MX_SAI1_Init+0x60>)
 8006b94:	f7ff f9e2 	bl	8005f5c <HAL_SAI_InitProtocol>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d001      	beq.n	8006ba2 <MX_SAI1_Init+0x5a>
  {
    Error_Handler();
 8006b9e:	f000 f8fd 	bl	8006d9c <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8006ba2:	bf00      	nop
 8006ba4:	bd80      	pop	{r7, pc}
 8006ba6:	bf00      	nop
 8006ba8:	240004c4 	.word	0x240004c4
 8006bac:	40015824 	.word	0x40015824

08006bb0 <MX_SAI4_Init>:
  * @brief SAI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI4_Init(void)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	af00      	add	r7, sp, #0
  /* USER CODE END SAI4_Init 0 */

  /* USER CODE BEGIN SAI4_Init 1 */

  /* USER CODE END SAI4_Init 1 */
  hsai_BlockA4.Instance = SAI4_Block_A;
 8006bb4:	4b2b      	ldr	r3, [pc, #172]	; (8006c64 <MX_SAI4_Init+0xb4>)
 8006bb6:	4a2c      	ldr	r2, [pc, #176]	; (8006c68 <MX_SAI4_Init+0xb8>)
 8006bb8:	601a      	str	r2, [r3, #0]
  hsai_BlockA4.Init.Protocol = SAI_FREE_PROTOCOL;
 8006bba:	4b2a      	ldr	r3, [pc, #168]	; (8006c64 <MX_SAI4_Init+0xb4>)
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA4.Init.AudioMode = SAI_MODEMASTER_RX;
 8006bc0:	4b28      	ldr	r3, [pc, #160]	; (8006c64 <MX_SAI4_Init+0xb4>)
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	605a      	str	r2, [r3, #4]
  hsai_BlockA4.Init.DataSize = SAI_DATASIZE_8;
 8006bc6:	4b27      	ldr	r3, [pc, #156]	; (8006c64 <MX_SAI4_Init+0xb4>)
 8006bc8:	2240      	movs	r2, #64	; 0x40
 8006bca:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA4.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8006bcc:	4b25      	ldr	r3, [pc, #148]	; (8006c64 <MX_SAI4_Init+0xb4>)
 8006bce:	2200      	movs	r2, #0
 8006bd0:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA4.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8006bd2:	4b24      	ldr	r3, [pc, #144]	; (8006c64 <MX_SAI4_Init+0xb4>)
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA4.Init.Synchro = SAI_ASYNCHRONOUS;
 8006bd8:	4b22      	ldr	r3, [pc, #136]	; (8006c64 <MX_SAI4_Init+0xb4>)
 8006bda:	2200      	movs	r2, #0
 8006bdc:	609a      	str	r2, [r3, #8]
  hsai_BlockA4.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8006bde:	4b21      	ldr	r3, [pc, #132]	; (8006c64 <MX_SAI4_Init+0xb4>)
 8006be0:	2200      	movs	r2, #0
 8006be2:	615a      	str	r2, [r3, #20]
  hsai_BlockA4.Init.NoDivider = SAI_MASTERDIVIDER_DISABLE;
 8006be4:	4b1f      	ldr	r3, [pc, #124]	; (8006c64 <MX_SAI4_Init+0xb4>)
 8006be6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006bea:	619a      	str	r2, [r3, #24]
  hsai_BlockA4.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8006bec:	4b1d      	ldr	r3, [pc, #116]	; (8006c64 <MX_SAI4_Init+0xb4>)
 8006bee:	2200      	movs	r2, #0
 8006bf0:	61da      	str	r2, [r3, #28]
  hsai_BlockA4.Init.MonoStereoMode = SAI_STEREOMODE;
 8006bf2:	4b1c      	ldr	r3, [pc, #112]	; (8006c64 <MX_SAI4_Init+0xb4>)
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA4.Init.CompandingMode = SAI_NOCOMPANDING;
 8006bf8:	4b1a      	ldr	r3, [pc, #104]	; (8006c64 <MX_SAI4_Init+0xb4>)
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA4.Init.PdmInit.Activation = ENABLE;
 8006bfe:	4b19      	ldr	r3, [pc, #100]	; (8006c64 <MX_SAI4_Init+0xb4>)
 8006c00:	2201      	movs	r2, #1
 8006c02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA4.Init.PdmInit.MicPairsNbr = 2;
 8006c06:	4b17      	ldr	r3, [pc, #92]	; (8006c64 <MX_SAI4_Init+0xb4>)
 8006c08:	2202      	movs	r2, #2
 8006c0a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA4.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK2_ENABLE;
 8006c0c:	4b15      	ldr	r3, [pc, #84]	; (8006c64 <MX_SAI4_Init+0xb4>)
 8006c0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c12:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA4.FrameInit.FrameLength = 8;
 8006c14:	4b13      	ldr	r3, [pc, #76]	; (8006c64 <MX_SAI4_Init+0xb4>)
 8006c16:	2208      	movs	r2, #8
 8006c18:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA4.FrameInit.ActiveFrameLength = 1;
 8006c1a:	4b12      	ldr	r3, [pc, #72]	; (8006c64 <MX_SAI4_Init+0xb4>)
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA4.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8006c20:	4b10      	ldr	r3, [pc, #64]	; (8006c64 <MX_SAI4_Init+0xb4>)
 8006c22:	2200      	movs	r2, #0
 8006c24:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA4.FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8006c26:	4b0f      	ldr	r3, [pc, #60]	; (8006c64 <MX_SAI4_Init+0xb4>)
 8006c28:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006c2c:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA4.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8006c2e:	4b0d      	ldr	r3, [pc, #52]	; (8006c64 <MX_SAI4_Init+0xb4>)
 8006c30:	2200      	movs	r2, #0
 8006c32:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA4.SlotInit.FirstBitOffset = 0;
 8006c34:	4b0b      	ldr	r3, [pc, #44]	; (8006c64 <MX_SAI4_Init+0xb4>)
 8006c36:	2200      	movs	r2, #0
 8006c38:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA4.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8006c3a:	4b0a      	ldr	r3, [pc, #40]	; (8006c64 <MX_SAI4_Init+0xb4>)
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA4.SlotInit.SlotNumber = 1;
 8006c40:	4b08      	ldr	r3, [pc, #32]	; (8006c64 <MX_SAI4_Init+0xb4>)
 8006c42:	2201      	movs	r2, #1
 8006c44:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA4.SlotInit.SlotActive = 0x0000FFFF;
 8006c46:	4b07      	ldr	r3, [pc, #28]	; (8006c64 <MX_SAI4_Init+0xb4>)
 8006c48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006c4c:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA4) != HAL_OK)
 8006c4e:	4805      	ldr	r0, [pc, #20]	; (8006c64 <MX_SAI4_Init+0xb4>)
 8006c50:	f7ff f9b6 	bl	8005fc0 <HAL_SAI_Init>
 8006c54:	4603      	mov	r3, r0
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d001      	beq.n	8006c5e <MX_SAI4_Init+0xae>
  {
    Error_Handler();
 8006c5a:	f000 f89f 	bl	8006d9c <Error_Handler>
  }
  /* USER CODE BEGIN SAI4_Init 2 */

  /* USER CODE END SAI4_Init 2 */

}
 8006c5e:	bf00      	nop
 8006c60:	bd80      	pop	{r7, pc}
 8006c62:	bf00      	nop
 8006c64:	2400055c 	.word	0x2400055c
 8006c68:	58005404 	.word	0x58005404

08006c6c <MX_BDMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_BDMA_Init(void)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b082      	sub	sp, #8
 8006c70:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 8006c72:	4b11      	ldr	r3, [pc, #68]	; (8006cb8 <MX_BDMA_Init+0x4c>)
 8006c74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006c78:	4a0f      	ldr	r2, [pc, #60]	; (8006cb8 <MX_BDMA_Init+0x4c>)
 8006c7a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006c7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006c82:	4b0d      	ldr	r3, [pc, #52]	; (8006cb8 <MX_BDMA_Init+0x4c>)
 8006c84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006c88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c8c:	607b      	str	r3, [r7, #4]
 8006c8e:	687b      	ldr	r3, [r7, #4]
  //(+++) Configure the declared DMA handle structure with the required Tx/Rx parameters.


  /* DMA interrupt init */
  /* DMAMUX2_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX2_OVR_IRQn, 0, 0);
 8006c90:	2200      	movs	r2, #0
 8006c92:	2100      	movs	r1, #0
 8006c94:	2080      	movs	r0, #128	; 0x80
 8006c96:	f7f9 fca8 	bl	80005ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX2_OVR_IRQn);
 8006c9a:	2080      	movs	r0, #128	; 0x80
 8006c9c:	f7f9 fcbf 	bl	800061e <HAL_NVIC_EnableIRQ>
  /* BDMA_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel1_IRQn, 0, 0);
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	2100      	movs	r1, #0
 8006ca4:	2082      	movs	r0, #130	; 0x82
 8006ca6:	f7f9 fca0 	bl	80005ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel1_IRQn);
 8006caa:	2082      	movs	r0, #130	; 0x82
 8006cac:	f7f9 fcb7 	bl	800061e <HAL_NVIC_EnableIRQ>

}
 8006cb0:	bf00      	nop
 8006cb2:	3708      	adds	r7, #8
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}
 8006cb8:	58024400 	.word	0x58024400

08006cbc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b082      	sub	sp, #8
 8006cc0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006cc2:	4b11      	ldr	r3, [pc, #68]	; (8006d08 <MX_DMA_Init+0x4c>)
 8006cc4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006cc8:	4a0f      	ldr	r2, [pc, #60]	; (8006d08 <MX_DMA_Init+0x4c>)
 8006cca:	f043 0301 	orr.w	r3, r3, #1
 8006cce:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8006cd2:	4b0d      	ldr	r3, [pc, #52]	; (8006d08 <MX_DMA_Init+0x4c>)
 8006cd4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006cd8:	f003 0301 	and.w	r3, r3, #1
 8006cdc:	607b      	str	r3, [r7, #4]
 8006cde:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	2100      	movs	r1, #0
 8006ce4:	200c      	movs	r0, #12
 8006ce6:	f7f9 fc80 	bl	80005ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8006cea:	200c      	movs	r0, #12
 8006cec:	f7f9 fc97 	bl	800061e <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 0, 0);
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	2100      	movs	r1, #0
 8006cf4:	2066      	movs	r0, #102	; 0x66
 8006cf6:	f7f9 fc78 	bl	80005ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
 8006cfa:	2066      	movs	r0, #102	; 0x66
 8006cfc:	f7f9 fc8f 	bl	800061e <HAL_NVIC_EnableIRQ>

}
 8006d00:	bf00      	nop
 8006d02:	3708      	adds	r7, #8
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}
 8006d08:	58024400 	.word	0x58024400

08006d0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b085      	sub	sp, #20
 8006d10:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d12:	4b21      	ldr	r3, [pc, #132]	; (8006d98 <MX_GPIO_Init+0x8c>)
 8006d14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006d18:	4a1f      	ldr	r2, [pc, #124]	; (8006d98 <MX_GPIO_Init+0x8c>)
 8006d1a:	f043 0301 	orr.w	r3, r3, #1
 8006d1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006d22:	4b1d      	ldr	r3, [pc, #116]	; (8006d98 <MX_GPIO_Init+0x8c>)
 8006d24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006d28:	f003 0301 	and.w	r3, r3, #1
 8006d2c:	60fb      	str	r3, [r7, #12]
 8006d2e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006d30:	4b19      	ldr	r3, [pc, #100]	; (8006d98 <MX_GPIO_Init+0x8c>)
 8006d32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006d36:	4a18      	ldr	r2, [pc, #96]	; (8006d98 <MX_GPIO_Init+0x8c>)
 8006d38:	f043 0310 	orr.w	r3, r3, #16
 8006d3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006d40:	4b15      	ldr	r3, [pc, #84]	; (8006d98 <MX_GPIO_Init+0x8c>)
 8006d42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006d46:	f003 0310 	and.w	r3, r3, #16
 8006d4a:	60bb      	str	r3, [r7, #8]
 8006d4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006d4e:	4b12      	ldr	r3, [pc, #72]	; (8006d98 <MX_GPIO_Init+0x8c>)
 8006d50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006d54:	4a10      	ldr	r2, [pc, #64]	; (8006d98 <MX_GPIO_Init+0x8c>)
 8006d56:	f043 0308 	orr.w	r3, r3, #8
 8006d5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006d5e:	4b0e      	ldr	r3, [pc, #56]	; (8006d98 <MX_GPIO_Init+0x8c>)
 8006d60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006d64:	f003 0308 	and.w	r3, r3, #8
 8006d68:	607b      	str	r3, [r7, #4]
 8006d6a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8006d6c:	4b0a      	ldr	r3, [pc, #40]	; (8006d98 <MX_GPIO_Init+0x8c>)
 8006d6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006d72:	4a09      	ldr	r2, [pc, #36]	; (8006d98 <MX_GPIO_Init+0x8c>)
 8006d74:	f043 0320 	orr.w	r3, r3, #32
 8006d78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006d7c:	4b06      	ldr	r3, [pc, #24]	; (8006d98 <MX_GPIO_Init+0x8c>)
 8006d7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006d82:	f003 0320 	and.w	r3, r3, #32
 8006d86:	603b      	str	r3, [r7, #0]
 8006d88:	683b      	ldr	r3, [r7, #0]

}
 8006d8a:	bf00      	nop
 8006d8c:	3714      	adds	r7, #20
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d94:	4770      	bx	lr
 8006d96:	bf00      	nop
 8006d98:	58024400 	.word	0x58024400

08006d9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006da0:	b672      	cpsid	i
}
 8006da2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006da4:	e7fe      	b.n	8006da4 <Error_Handler+0x8>
	...

08006da8 <MX_PDM2PCM_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* PDM2PCM init function */
void MX_PDM2PCM_Init(void)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

   /**
  */
  PDM1_filter_handler.bit_order = PDM_FILTER_BIT_ORDER_MSB;
 8006dac:	4b10      	ldr	r3, [pc, #64]	; (8006df0 <MX_PDM2PCM_Init+0x48>)
 8006dae:	2201      	movs	r2, #1
 8006db0:	801a      	strh	r2, [r3, #0]
  PDM1_filter_handler.endianness = PDM_FILTER_ENDIANNESS_BE;
 8006db2:	4b0f      	ldr	r3, [pc, #60]	; (8006df0 <MX_PDM2PCM_Init+0x48>)
 8006db4:	2201      	movs	r2, #1
 8006db6:	805a      	strh	r2, [r3, #2]
  PDM1_filter_handler.high_pass_tap = 2104533974;
 8006db8:	4b0d      	ldr	r3, [pc, #52]	; (8006df0 <MX_PDM2PCM_Init+0x48>)
 8006dba:	4a0e      	ldr	r2, [pc, #56]	; (8006df4 <MX_PDM2PCM_Init+0x4c>)
 8006dbc:	605a      	str	r2, [r3, #4]
  PDM1_filter_handler.in_ptr_channels = 1;
 8006dbe:	4b0c      	ldr	r3, [pc, #48]	; (8006df0 <MX_PDM2PCM_Init+0x48>)
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	811a      	strh	r2, [r3, #8]
  PDM1_filter_handler.out_ptr_channels = 1;
 8006dc4:	4b0a      	ldr	r3, [pc, #40]	; (8006df0 <MX_PDM2PCM_Init+0x48>)
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	815a      	strh	r2, [r3, #10]
  PDM_Filter_Init(&PDM1_filter_handler);
 8006dca:	4809      	ldr	r0, [pc, #36]	; (8006df0 <MX_PDM2PCM_Init+0x48>)
 8006dcc:	f001 ffa2 	bl	8008d14 <PDM_Filter_Init>

  PDM1_filter_config.decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 8006dd0:	4b09      	ldr	r3, [pc, #36]	; (8006df8 <MX_PDM2PCM_Init+0x50>)
 8006dd2:	2202      	movs	r2, #2
 8006dd4:	801a      	strh	r2, [r3, #0]
  PDM1_filter_config.output_samples_number = 16;
 8006dd6:	4b08      	ldr	r3, [pc, #32]	; (8006df8 <MX_PDM2PCM_Init+0x50>)
 8006dd8:	2210      	movs	r2, #16
 8006dda:	805a      	strh	r2, [r3, #2]
  PDM1_filter_config.mic_gain = 0;
 8006ddc:	4b06      	ldr	r3, [pc, #24]	; (8006df8 <MX_PDM2PCM_Init+0x50>)
 8006dde:	2200      	movs	r2, #0
 8006de0:	809a      	strh	r2, [r3, #4]
  PDM_Filter_setConfig(&PDM1_filter_handler, &PDM1_filter_config);
 8006de2:	4905      	ldr	r1, [pc, #20]	; (8006df8 <MX_PDM2PCM_Init+0x50>)
 8006de4:	4802      	ldr	r0, [pc, #8]	; (8006df0 <MX_PDM2PCM_Init+0x48>)
 8006de6:	f002 f865 	bl	8008eb4 <PDM_Filter_setConfig>

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 8006dea:	bf00      	nop
 8006dec:	bd80      	pop	{r7, pc}
 8006dee:	bf00      	nop
 8006df0:	2400066c 	.word	0x2400066c
 8006df4:	7d70a3d6 	.word	0x7d70a3d6
 8006df8:	24000730 	.word	0x24000730

08006dfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b083      	sub	sp, #12
 8006e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006e02:	4b0a      	ldr	r3, [pc, #40]	; (8006e2c <HAL_MspInit+0x30>)
 8006e04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006e08:	4a08      	ldr	r2, [pc, #32]	; (8006e2c <HAL_MspInit+0x30>)
 8006e0a:	f043 0302 	orr.w	r3, r3, #2
 8006e0e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006e12:	4b06      	ldr	r3, [pc, #24]	; (8006e2c <HAL_MspInit+0x30>)
 8006e14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006e18:	f003 0302 	and.w	r3, r3, #2
 8006e1c:	607b      	str	r3, [r7, #4]
 8006e1e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006e20:	bf00      	nop
 8006e22:	370c      	adds	r7, #12
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr
 8006e2c:	58024400 	.word	0x58024400

08006e30 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b085      	sub	sp, #20
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a0b      	ldr	r2, [pc, #44]	; (8006e6c <HAL_CRC_MspInit+0x3c>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d10e      	bne.n	8006e60 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8006e42:	4b0b      	ldr	r3, [pc, #44]	; (8006e70 <HAL_CRC_MspInit+0x40>)
 8006e44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006e48:	4a09      	ldr	r2, [pc, #36]	; (8006e70 <HAL_CRC_MspInit+0x40>)
 8006e4a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006e4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006e52:	4b07      	ldr	r3, [pc, #28]	; (8006e70 <HAL_CRC_MspInit+0x40>)
 8006e54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006e58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006e5c:	60fb      	str	r3, [r7, #12]
 8006e5e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8006e60:	bf00      	nop
 8006e62:	3714      	adds	r7, #20
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr
 8006e6c:	58024c00 	.word	0x58024c00
 8006e70:	58024400 	.word	0x58024400

08006e74 <HAL_SAI_MspInit>:

static uint32_t SAI1_client =0;
static uint32_t SAI4_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b0ba      	sub	sp, #232	; 0xe8
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006e7c:	f107 0310 	add.w	r3, r7, #16
 8006e80:	22b4      	movs	r2, #180	; 0xb4
 8006e82:	2100      	movs	r1, #0
 8006e84:	4618      	mov	r0, r3
 8006e86:	f002 f939 	bl	80090fc <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_B)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4aaa      	ldr	r2, [pc, #680]	; (8007138 <HAL_SAI_MspInit+0x2c4>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	f040 80a5 	bne.w	8006fe0 <HAL_SAI_MspInit+0x16c>
    {
      /* Peripheral clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8006e96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e9a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006ea0:	f107 0310 	add.w	r3, r7, #16
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	f7fc ffc7 	bl	8003e38 <HAL_RCCEx_PeriphCLKConfig>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d001      	beq.n	8006eb4 <HAL_SAI_MspInit+0x40>
    {
      Error_Handler();
 8006eb0:	f7ff ff74 	bl	8006d9c <Error_Handler>
    }

      if (SAI1_client == 0)
 8006eb4:	4ba1      	ldr	r3, [pc, #644]	; (800713c <HAL_SAI_MspInit+0x2c8>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d10e      	bne.n	8006eda <HAL_SAI_MspInit+0x66>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8006ebc:	4ba0      	ldr	r3, [pc, #640]	; (8007140 <HAL_SAI_MspInit+0x2cc>)
 8006ebe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006ec2:	4a9f      	ldr	r2, [pc, #636]	; (8007140 <HAL_SAI_MspInit+0x2cc>)
 8006ec4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006ec8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006ecc:	4b9c      	ldr	r3, [pc, #624]	; (8007140 <HAL_SAI_MspInit+0x2cc>)
 8006ece:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006ed2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ed6:	60fb      	str	r3, [r7, #12]
 8006ed8:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8006eda:	4b98      	ldr	r3, [pc, #608]	; (800713c <HAL_SAI_MspInit+0x2c8>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	3301      	adds	r3, #1
 8006ee0:	4a96      	ldr	r2, [pc, #600]	; (800713c <HAL_SAI_MspInit+0x2c8>)
 8006ee2:	6013      	str	r3, [r2, #0]
    PE3     ------> SAI1_SD_B
    PF8     ------> SAI1_SCK_B
    PF7     ------> SAI1_MCLK_B
    PF9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8006ee4:	2308      	movs	r3, #8
 8006ee6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006eea:	2302      	movs	r3, #2
 8006eec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8006efc:	2306      	movs	r3, #6
 8006efe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006f02:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8006f06:	4619      	mov	r1, r3
 8006f08:	488e      	ldr	r0, [pc, #568]	; (8007144 <HAL_SAI_MspInit+0x2d0>)
 8006f0a:	f7fb fe87 	bl	8002c1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_9;
 8006f0e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8006f12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f16:	2302      	movs	r3, #2
 8006f18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f22:	2300      	movs	r3, #0
 8006f24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8006f28:	2306      	movs	r3, #6
 8006f2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006f2e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8006f32:	4619      	mov	r1, r3
 8006f34:	4884      	ldr	r0, [pc, #528]	; (8007148 <HAL_SAI_MspInit+0x2d4>)
 8006f36:	f7fb fe71 	bl	8002c1c <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA1_Stream1;
 8006f3a:	4b84      	ldr	r3, [pc, #528]	; (800714c <HAL_SAI_MspInit+0x2d8>)
 8006f3c:	4a84      	ldr	r2, [pc, #528]	; (8007150 <HAL_SAI_MspInit+0x2dc>)
 8006f3e:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 8006f40:	4b82      	ldr	r3, [pc, #520]	; (800714c <HAL_SAI_MspInit+0x2d8>)
 8006f42:	2258      	movs	r2, #88	; 0x58
 8006f44:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006f46:	4b81      	ldr	r3, [pc, #516]	; (800714c <HAL_SAI_MspInit+0x2d8>)
 8006f48:	2240      	movs	r2, #64	; 0x40
 8006f4a:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8006f4c:	4b7f      	ldr	r3, [pc, #508]	; (800714c <HAL_SAI_MspInit+0x2d8>)
 8006f4e:	2200      	movs	r2, #0
 8006f50:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 8006f52:	4b7e      	ldr	r3, [pc, #504]	; (800714c <HAL_SAI_MspInit+0x2d8>)
 8006f54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006f58:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006f5a:	4b7c      	ldr	r3, [pc, #496]	; (800714c <HAL_SAI_MspInit+0x2d8>)
 8006f5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f60:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006f62:	4b7a      	ldr	r3, [pc, #488]	; (800714c <HAL_SAI_MspInit+0x2d8>)
 8006f64:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006f68:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 8006f6a:	4b78      	ldr	r3, [pc, #480]	; (800714c <HAL_SAI_MspInit+0x2d8>)
 8006f6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006f70:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_HIGH;
 8006f72:	4b76      	ldr	r3, [pc, #472]	; (800714c <HAL_SAI_MspInit+0x2d8>)
 8006f74:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006f78:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006f7a:	4b74      	ldr	r3, [pc, #464]	; (800714c <HAL_SAI_MspInit+0x2d8>)
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8006f80:	4872      	ldr	r0, [pc, #456]	; (800714c <HAL_SAI_MspInit+0x2d8>)
 8006f82:	f7f9 fc51 	bl	8000828 <HAL_DMA_Init>
 8006f86:	4603      	mov	r3, r0
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d001      	beq.n	8006f90 <HAL_SAI_MspInit+0x11c>
    {
      Error_Handler();
 8006f8c:	f7ff ff06 	bl	8006d9c <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 8006f90:	2306      	movs	r3, #6
 8006f92:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 8006f96:	2300      	movs	r3, #0
 8006f98:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    pSyncConfig.SyncEnable = DISABLE;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    pSyncConfig.EventEnable = ENABLE;
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    pSyncConfig.RequestNumber = 1;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai1_b, &pSyncConfig) != HAL_OK)
 8006fae:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006fb2:	4619      	mov	r1, r3
 8006fb4:	4865      	ldr	r0, [pc, #404]	; (800714c <HAL_SAI_MspInit+0x2d8>)
 8006fb6:	f7fb fd19 	bl	80029ec <HAL_DMAEx_ConfigMuxSync>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d001      	beq.n	8006fc4 <HAL_SAI_MspInit+0x150>
    {
      Error_Handler();
 8006fc0:	f7ff feec 	bl	8006d9c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	4a61      	ldr	r2, [pc, #388]	; (800714c <HAL_SAI_MspInit+0x2d8>)
 8006fc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8006fcc:	4a5f      	ldr	r2, [pc, #380]	; (800714c <HAL_SAI_MspInit+0x2d8>)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	4a5d      	ldr	r2, [pc, #372]	; (800714c <HAL_SAI_MspInit+0x2d8>)
 8006fd6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8006fda:	4a5c      	ldr	r2, [pc, #368]	; (800714c <HAL_SAI_MspInit+0x2d8>)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6393      	str	r3, [r2, #56]	; 0x38
    }
/* SAI4 */
    if(hsai->Instance==SAI4_Block_A)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a5b      	ldr	r2, [pc, #364]	; (8007154 <HAL_SAI_MspInit+0x2e0>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	f040 80a1 	bne.w	800712e <HAL_SAI_MspInit+0x2ba>
    {
    /* Peripheral clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI4A;
 8006fec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ff0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Sai4AClockSelection = RCC_SAI4ACLKSOURCE_PLL;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006ff8:	f107 0310 	add.w	r3, r7, #16
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f7fc ff1b 	bl	8003e38 <HAL_RCCEx_PeriphCLKConfig>
 8007002:	4603      	mov	r3, r0
 8007004:	2b00      	cmp	r3, #0
 8007006:	d001      	beq.n	800700c <HAL_SAI_MspInit+0x198>
    {
      Error_Handler();
 8007008:	f7ff fec8 	bl	8006d9c <Error_Handler>
    }

    if (SAI4_client == 0)
 800700c:	4b52      	ldr	r3, [pc, #328]	; (8007158 <HAL_SAI_MspInit+0x2e4>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d10e      	bne.n	8007032 <HAL_SAI_MspInit+0x1be>
    {
       __HAL_RCC_SAI4_CLK_ENABLE();
 8007014:	4b4a      	ldr	r3, [pc, #296]	; (8007140 <HAL_SAI_MspInit+0x2cc>)
 8007016:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800701a:	4a49      	ldr	r2, [pc, #292]	; (8007140 <HAL_SAI_MspInit+0x2cc>)
 800701c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007020:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007024:	4b46      	ldr	r3, [pc, #280]	; (8007140 <HAL_SAI_MspInit+0x2cc>)
 8007026:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800702a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800702e:	60bb      	str	r3, [r7, #8]
 8007030:	68bb      	ldr	r3, [r7, #8]
    }
    SAI4_client ++;
 8007032:	4b49      	ldr	r3, [pc, #292]	; (8007158 <HAL_SAI_MspInit+0x2e4>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	3301      	adds	r3, #1
 8007038:	4a47      	ldr	r2, [pc, #284]	; (8007158 <HAL_SAI_MspInit+0x2e4>)
 800703a:	6013      	str	r3, [r2, #0]
    /**SAI4_A_Block_A GPIO Configuration
    PE4     ------> SAI4_D2
    PE5     ------> SAI4_CK2
    PD6     ------> SAI4_D1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800703c:	2330      	movs	r3, #48	; 0x30
 800703e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
//    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007042:	2312      	movs	r3, #18
 8007044:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007048:	2300      	movs	r3, #0
 800704a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800704e:	2300      	movs	r3, #0
 8007050:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 8007054:	230a      	movs	r3, #10
 8007056:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800705a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800705e:	4619      	mov	r1, r3
 8007060:	4838      	ldr	r0, [pc, #224]	; (8007144 <HAL_SAI_MspInit+0x2d0>)
 8007062:	f7fb fddb 	bl	8002c1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8007066:	2340      	movs	r3, #64	; 0x40
 8007068:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
//    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800706c:	2312      	movs	r3, #18
 800706e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007072:	2300      	movs	r3, #0
 8007074:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007078:	2300      	movs	r3, #0
 800707a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF1_SAI4;
 800707e:	2301      	movs	r3, #1
 8007080:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007084:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8007088:	4619      	mov	r1, r3
 800708a:	4834      	ldr	r0, [pc, #208]	; (800715c <HAL_SAI_MspInit+0x2e8>)
 800708c:	f7fb fdc6 	bl	8002c1c <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai4_a.Instance = BDMA_Channel1;
 8007090:	4b33      	ldr	r3, [pc, #204]	; (8007160 <HAL_SAI_MspInit+0x2ec>)
 8007092:	4a34      	ldr	r2, [pc, #208]	; (8007164 <HAL_SAI_MspInit+0x2f0>)
 8007094:	601a      	str	r2, [r3, #0]
    hdma_sai4_a.Init.Request = BDMA_REQUEST_SAI4_A;
 8007096:	4b32      	ldr	r3, [pc, #200]	; (8007160 <HAL_SAI_MspInit+0x2ec>)
 8007098:	220f      	movs	r2, #15
 800709a:	605a      	str	r2, [r3, #4]
    hdma_sai4_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800709c:	4b30      	ldr	r3, [pc, #192]	; (8007160 <HAL_SAI_MspInit+0x2ec>)
 800709e:	2200      	movs	r2, #0
 80070a0:	609a      	str	r2, [r3, #8]
    hdma_sai4_a.Init.PeriphInc = DMA_PINC_DISABLE;
 80070a2:	4b2f      	ldr	r3, [pc, #188]	; (8007160 <HAL_SAI_MspInit+0x2ec>)
 80070a4:	2200      	movs	r2, #0
 80070a6:	60da      	str	r2, [r3, #12]
    hdma_sai4_a.Init.MemInc = DMA_MINC_ENABLE;
 80070a8:	4b2d      	ldr	r3, [pc, #180]	; (8007160 <HAL_SAI_MspInit+0x2ec>)
 80070aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80070ae:	611a      	str	r2, [r3, #16]
    hdma_sai4_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80070b0:	4b2b      	ldr	r3, [pc, #172]	; (8007160 <HAL_SAI_MspInit+0x2ec>)
 80070b2:	2200      	movs	r2, #0
 80070b4:	615a      	str	r2, [r3, #20]
    hdma_sai4_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80070b6:	4b2a      	ldr	r3, [pc, #168]	; (8007160 <HAL_SAI_MspInit+0x2ec>)
 80070b8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80070bc:	619a      	str	r2, [r3, #24]
    hdma_sai4_a.Init.Mode = DMA_CIRCULAR;
 80070be:	4b28      	ldr	r3, [pc, #160]	; (8007160 <HAL_SAI_MspInit+0x2ec>)
 80070c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80070c4:	61da      	str	r2, [r3, #28]
    hdma_sai4_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80070c6:	4b26      	ldr	r3, [pc, #152]	; (8007160 <HAL_SAI_MspInit+0x2ec>)
 80070c8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80070cc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai4_a) != HAL_OK)
 80070ce:	4824      	ldr	r0, [pc, #144]	; (8007160 <HAL_SAI_MspInit+0x2ec>)
 80070d0:	f7f9 fbaa 	bl	8000828 <HAL_DMA_Init>
 80070d4:	4603      	mov	r3, r0
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d001      	beq.n	80070de <HAL_SAI_MspInit+0x26a>
    {
      Error_Handler();
 80070da:	f7ff fe5f 	bl	8006d9c <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX2_SYNC_EXTI0;
 80070de:	230e      	movs	r3, #14
 80070e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 80070e4:	2300      	movs	r3, #0
 80070e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    pSyncConfig.SyncEnable = DISABLE;
 80070ea:	2300      	movs	r3, #0
 80070ec:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    pSyncConfig.EventEnable = ENABLE;
 80070f0:	2301      	movs	r3, #1
 80070f2:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    pSyncConfig.RequestNumber = 1;
 80070f6:	2301      	movs	r3, #1
 80070f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai4_a, &pSyncConfig) != HAL_OK)
 80070fc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007100:	4619      	mov	r1, r3
 8007102:	4817      	ldr	r0, [pc, #92]	; (8007160 <HAL_SAI_MspInit+0x2ec>)
 8007104:	f7fb fc72 	bl	80029ec <HAL_DMAEx_ConfigMuxSync>
 8007108:	4603      	mov	r3, r0
 800710a:	2b00      	cmp	r3, #0
 800710c:	d001      	beq.n	8007112 <HAL_SAI_MspInit+0x29e>
    {
      Error_Handler();
 800710e:	f7ff fe45 	bl	8006d9c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai4_a);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	4a12      	ldr	r2, [pc, #72]	; (8007160 <HAL_SAI_MspInit+0x2ec>)
 8007116:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800711a:	4a11      	ldr	r2, [pc, #68]	; (8007160 <HAL_SAI_MspInit+0x2ec>)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai4_a);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	4a0f      	ldr	r2, [pc, #60]	; (8007160 <HAL_SAI_MspInit+0x2ec>)
 8007124:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8007128:	4a0d      	ldr	r2, [pc, #52]	; (8007160 <HAL_SAI_MspInit+0x2ec>)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6393      	str	r3, [r2, #56]	; 0x38

    }
}
 800712e:	bf00      	nop
 8007130:	37e8      	adds	r7, #232	; 0xe8
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}
 8007136:	bf00      	nop
 8007138:	40015824 	.word	0x40015824
 800713c:	24000494 	.word	0x24000494
 8007140:	58024400 	.word	0x58024400
 8007144:	58021000 	.word	0x58021000
 8007148:	58021400 	.word	0x58021400
 800714c:	240006b8 	.word	0x240006b8
 8007150:	40020028 	.word	0x40020028
 8007154:	58005404 	.word	0x58005404
 8007158:	24000498 	.word	0x24000498
 800715c:	58020c00 	.word	0x58020c00
 8007160:	240005f4 	.word	0x240005f4
 8007164:	5802541c 	.word	0x5802541c

08007168 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007168:	b480      	push	{r7}
 800716a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800716c:	e7fe      	b.n	800716c <NMI_Handler+0x4>

0800716e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800716e:	b480      	push	{r7}
 8007170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007172:	e7fe      	b.n	8007172 <HardFault_Handler+0x4>

08007174 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007174:	b480      	push	{r7}
 8007176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007178:	e7fe      	b.n	8007178 <MemManage_Handler+0x4>

0800717a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800717a:	b480      	push	{r7}
 800717c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800717e:	e7fe      	b.n	800717e <BusFault_Handler+0x4>

08007180 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007180:	b480      	push	{r7}
 8007182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007184:	e7fe      	b.n	8007184 <UsageFault_Handler+0x4>

08007186 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007186:	b480      	push	{r7}
 8007188:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800718a:	bf00      	nop
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr

08007194 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007194:	b480      	push	{r7}
 8007196:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007198:	bf00      	nop
 800719a:	46bd      	mov	sp, r7
 800719c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a0:	4770      	bx	lr

080071a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80071a2:	b480      	push	{r7}
 80071a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80071a6:	bf00      	nop
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr

080071b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80071b4:	f7f9 f91e 	bl	80003f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80071b8:	bf00      	nop
 80071ba:	bd80      	pop	{r7, pc}

080071bc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 80071c0:	4802      	ldr	r0, [pc, #8]	; (80071cc <DMA1_Stream1_IRQHandler+0x10>)
 80071c2:	f7fa f8f5 	bl	80013b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80071c6:	bf00      	nop
 80071c8:	bd80      	pop	{r7, pc}
 80071ca:	bf00      	nop
 80071cc:	240006b8 	.word	0x240006b8

080071d0 <DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX1 overrun interrupt.
  */
void DMAMUX1_OVR_IRQHandler(void)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMAMUX1_OVR_IRQn 0 */
  // Handle DMA1_Stream1
  HAL_DMAEx_MUX_IRQHandler(&hdma_sai1_b);
 80071d4:	4802      	ldr	r0, [pc, #8]	; (80071e0 <DMAMUX1_OVR_IRQHandler+0x10>)
 80071d6:	f7fb fccf 	bl	8002b78 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMAMUX1_OVR_IRQn 1 */
}
 80071da:	bf00      	nop
 80071dc:	bd80      	pop	{r7, pc}
 80071de:	bf00      	nop
 80071e0:	240006b8 	.word	0x240006b8

080071e4 <DMAMUX2_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX2 overrun interrupt.
  */
void DMAMUX2_OVR_IRQHandler(void)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX2_OVR_IRQn 0 */

  /* USER CODE END DMAMUX2_OVR_IRQn 0 */
  // Handle BDMA_Channel1
  HAL_DMAEx_MUX_IRQHandler(&hdma_sai4_a);
 80071e8:	4802      	ldr	r0, [pc, #8]	; (80071f4 <DMAMUX2_OVR_IRQHandler+0x10>)
 80071ea:	f7fb fcc5 	bl	8002b78 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX2_OVR_IRQn 1 */

  /* USER CODE END DMAMUX2_OVR_IRQn 1 */
}
 80071ee:	bf00      	nop
 80071f0:	bd80      	pop	{r7, pc}
 80071f2:	bf00      	nop
 80071f4:	240005f4 	.word	0x240005f4

080071f8 <BDMA_Channel1_IRQHandler>:

/**
  * @brief This function handles BDMA channel1 global interrupt.
  */
void BDMA_Channel1_IRQHandler(void)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel1_IRQn 0 */

  /* USER CODE END BDMA_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai4_a);
 80071fc:	4802      	ldr	r0, [pc, #8]	; (8007208 <BDMA_Channel1_IRQHandler+0x10>)
 80071fe:	f7fa f8d7 	bl	80013b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel1_IRQn 1 */

  /* USER CODE END BDMA_Channel1_IRQn 1 */
}
 8007202:	bf00      	nop
 8007204:	bd80      	pop	{r7, pc}
 8007206:	bf00      	nop
 8007208:	240005f4 	.word	0x240005f4

0800720c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800720c:	b480      	push	{r7}
 800720e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8007210:	4b32      	ldr	r3, [pc, #200]	; (80072dc <SystemInit+0xd0>)
 8007212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007216:	4a31      	ldr	r2, [pc, #196]	; (80072dc <SystemInit+0xd0>)
 8007218:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800721c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8007220:	4b2f      	ldr	r3, [pc, #188]	; (80072e0 <SystemInit+0xd4>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f003 030f 	and.w	r3, r3, #15
 8007228:	2b06      	cmp	r3, #6
 800722a:	d807      	bhi.n	800723c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800722c:	4b2c      	ldr	r3, [pc, #176]	; (80072e0 <SystemInit+0xd4>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f023 030f 	bic.w	r3, r3, #15
 8007234:	4a2a      	ldr	r2, [pc, #168]	; (80072e0 <SystemInit+0xd4>)
 8007236:	f043 0307 	orr.w	r3, r3, #7
 800723a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800723c:	4b29      	ldr	r3, [pc, #164]	; (80072e4 <SystemInit+0xd8>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a28      	ldr	r2, [pc, #160]	; (80072e4 <SystemInit+0xd8>)
 8007242:	f043 0301 	orr.w	r3, r3, #1
 8007246:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8007248:	4b26      	ldr	r3, [pc, #152]	; (80072e4 <SystemInit+0xd8>)
 800724a:	2200      	movs	r2, #0
 800724c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800724e:	4b25      	ldr	r3, [pc, #148]	; (80072e4 <SystemInit+0xd8>)
 8007250:	681a      	ldr	r2, [r3, #0]
 8007252:	4924      	ldr	r1, [pc, #144]	; (80072e4 <SystemInit+0xd8>)
 8007254:	4b24      	ldr	r3, [pc, #144]	; (80072e8 <SystemInit+0xdc>)
 8007256:	4013      	ands	r3, r2
 8007258:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800725a:	4b21      	ldr	r3, [pc, #132]	; (80072e0 <SystemInit+0xd4>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f003 0308 	and.w	r3, r3, #8
 8007262:	2b00      	cmp	r3, #0
 8007264:	d007      	beq.n	8007276 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8007266:	4b1e      	ldr	r3, [pc, #120]	; (80072e0 <SystemInit+0xd4>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f023 030f 	bic.w	r3, r3, #15
 800726e:	4a1c      	ldr	r2, [pc, #112]	; (80072e0 <SystemInit+0xd4>)
 8007270:	f043 0307 	orr.w	r3, r3, #7
 8007274:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8007276:	4b1b      	ldr	r3, [pc, #108]	; (80072e4 <SystemInit+0xd8>)
 8007278:	2200      	movs	r2, #0
 800727a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800727c:	4b19      	ldr	r3, [pc, #100]	; (80072e4 <SystemInit+0xd8>)
 800727e:	2200      	movs	r2, #0
 8007280:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8007282:	4b18      	ldr	r3, [pc, #96]	; (80072e4 <SystemInit+0xd8>)
 8007284:	2200      	movs	r2, #0
 8007286:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8007288:	4b16      	ldr	r3, [pc, #88]	; (80072e4 <SystemInit+0xd8>)
 800728a:	4a18      	ldr	r2, [pc, #96]	; (80072ec <SystemInit+0xe0>)
 800728c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800728e:	4b15      	ldr	r3, [pc, #84]	; (80072e4 <SystemInit+0xd8>)
 8007290:	4a17      	ldr	r2, [pc, #92]	; (80072f0 <SystemInit+0xe4>)
 8007292:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8007294:	4b13      	ldr	r3, [pc, #76]	; (80072e4 <SystemInit+0xd8>)
 8007296:	4a17      	ldr	r2, [pc, #92]	; (80072f4 <SystemInit+0xe8>)
 8007298:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800729a:	4b12      	ldr	r3, [pc, #72]	; (80072e4 <SystemInit+0xd8>)
 800729c:	2200      	movs	r2, #0
 800729e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80072a0:	4b10      	ldr	r3, [pc, #64]	; (80072e4 <SystemInit+0xd8>)
 80072a2:	4a14      	ldr	r2, [pc, #80]	; (80072f4 <SystemInit+0xe8>)
 80072a4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80072a6:	4b0f      	ldr	r3, [pc, #60]	; (80072e4 <SystemInit+0xd8>)
 80072a8:	2200      	movs	r2, #0
 80072aa:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80072ac:	4b0d      	ldr	r3, [pc, #52]	; (80072e4 <SystemInit+0xd8>)
 80072ae:	4a11      	ldr	r2, [pc, #68]	; (80072f4 <SystemInit+0xe8>)
 80072b0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80072b2:	4b0c      	ldr	r3, [pc, #48]	; (80072e4 <SystemInit+0xd8>)
 80072b4:	2200      	movs	r2, #0
 80072b6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80072b8:	4b0a      	ldr	r3, [pc, #40]	; (80072e4 <SystemInit+0xd8>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a09      	ldr	r2, [pc, #36]	; (80072e4 <SystemInit+0xd8>)
 80072be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80072c2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80072c4:	4b07      	ldr	r3, [pc, #28]	; (80072e4 <SystemInit+0xd8>)
 80072c6:	2200      	movs	r2, #0
 80072c8:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80072ca:	4b0b      	ldr	r3, [pc, #44]	; (80072f8 <SystemInit+0xec>)
 80072cc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80072d0:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 80072d2:	bf00      	nop
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr
 80072dc:	e000ed00 	.word	0xe000ed00
 80072e0:	52002000 	.word	0x52002000
 80072e4:	58024400 	.word	0x58024400
 80072e8:	eaf6ed7f 	.word	0xeaf6ed7f
 80072ec:	02020200 	.word	0x02020200
 80072f0:	01ff0000 	.word	0x01ff0000
 80072f4:	01010280 	.word	0x01010280
 80072f8:	52004000 	.word	0x52004000

080072fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80072fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007334 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8007300:	f7ff ff84 	bl	800720c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007304:	480c      	ldr	r0, [pc, #48]	; (8007338 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8007306:	490d      	ldr	r1, [pc, #52]	; (800733c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8007308:	4a0d      	ldr	r2, [pc, #52]	; (8007340 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800730a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800730c:	e002      	b.n	8007314 <LoopCopyDataInit>

0800730e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800730e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007310:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007312:	3304      	adds	r3, #4

08007314 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007314:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007316:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007318:	d3f9      	bcc.n	800730e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800731a:	4a0a      	ldr	r2, [pc, #40]	; (8007344 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800731c:	4c0a      	ldr	r4, [pc, #40]	; (8007348 <LoopFillZerobss+0x22>)
  movs r3, #0
 800731e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007320:	e001      	b.n	8007326 <LoopFillZerobss>

08007322 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007322:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007324:	3204      	adds	r2, #4

08007326 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007326:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007328:	d3fb      	bcc.n	8007322 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800732a:	f001 fec3 	bl	80090b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800732e:	f7ff fb21 	bl	8006974 <main>
  bx  lr
 8007332:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007334:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8007338:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800733c:	24000474 	.word	0x24000474
  ldr r2, =_sidata
 8007340:	08009778 	.word	0x08009778
  ldr r2, =_sbss
 8007344:	24000474 	.word	0x24000474
  ldr r4, =_ebss
 8007348:	24000738 	.word	0x24000738

0800734c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800734c:	e7fe      	b.n	800734c <ADC3_IRQHandler>
	...

08007350 <D16_GENERIC>:
 8007350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007354:	b089      	sub	sp, #36	; 0x24
 8007356:	6993      	ldr	r3, [r2, #24]
 8007358:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800735a:	9103      	str	r1, [sp, #12]
 800735c:	9307      	str	r3, [sp, #28]
 800735e:	69d3      	ldr	r3, [r2, #28]
 8007360:	e9d2 c102 	ldrd	ip, r1, [r2, #8]
 8007364:	e9d2 4a04 	ldrd	r4, sl, [r2, #16]
 8007368:	9106      	str	r1, [sp, #24]
 800736a:	e9d2 810c 	ldrd	r8, r1, [r2, #48]	; 0x30
 800736e:	2d00      	cmp	r5, #0
 8007370:	d063      	beq.n	800743a <D16_GENERIC+0xea>
 8007372:	f001 0520 	and.w	r5, r1, #32
 8007376:	f001 0110 	and.w	r1, r1, #16
 800737a:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 800745c <D16_GENERIC+0x10c>
 800737e:	46c1      	mov	r9, r8
 8007380:	9104      	str	r1, [sp, #16]
 8007382:	2100      	movs	r1, #0
 8007384:	9505      	str	r5, [sp, #20]
 8007386:	e04d      	b.n	8007424 <D16_GENERIC+0xd4>
 8007388:	5d87      	ldrb	r7, [r0, r6]
 800738a:	7805      	ldrb	r5, [r0, #0]
 800738c:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 8007390:	eb05 2707 	add.w	r7, r5, r7, lsl #8
 8007394:	b2fe      	uxtb	r6, r7
 8007396:	f3c7 2707 	ubfx	r7, r7, #8, #8
 800739a:	f85e 5026 	ldr.w	r5, [lr, r6, lsl #2]
 800739e:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
 80073a2:	441d      	add	r5, r3
 80073a4:	eb06 2395 	add.w	r3, r6, r5, lsr #10
 80073a8:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80073ac:	f3c3 0609 	ubfx	r6, r3, #0, #10
 80073b0:	0a9b      	lsrs	r3, r3, #10
 80073b2:	ea46 4605 	orr.w	r6, r6, r5, lsl #16
 80073b6:	4d27      	ldr	r5, [pc, #156]	; (8007454 <D16_GENERIC+0x104>)
 80073b8:	fb26 c505 	smlad	r5, r6, r5, ip
 80073bc:	4f26      	ldr	r7, [pc, #152]	; (8007458 <D16_GENERIC+0x108>)
 80073be:	fb26 fc07 	smuad	ip, r6, r7
 80073c2:	9e04      	ldr	r6, [sp, #16]
 80073c4:	f101 0801 	add.w	r8, r1, #1
 80073c8:	f5a5 6500 	sub.w	r5, r5, #2048	; 0x800
 80073cc:	b1ae      	cbz	r6, 80073fa <D16_GENERIC+0xaa>
 80073ce:	442c      	add	r4, r5
 80073d0:	f8d2 b020 	ldr.w	fp, [r2, #32]
 80073d4:	eba4 040a 	sub.w	r4, r4, sl
 80073d8:	46aa      	mov	sl, r5
 80073da:	17e7      	asrs	r7, r4, #31
 80073dc:	fba4 450b 	umull	r4, r5, r4, fp
 80073e0:	e9cd 4500 	strd	r4, r5, [sp]
 80073e4:	fb0b 5407 	mla	r4, fp, r7, r5
 80073e8:	9401      	str	r4, [sp, #4]
 80073ea:	e9dd 4500 	ldrd	r4, r5, [sp]
 80073ee:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 80073f2:	f145 0500 	adc.w	r5, r5, #0
 80073f6:	006c      	lsls	r4, r5, #1
 80073f8:	4625      	mov	r5, r4
 80073fa:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 80073fe:	042d      	lsls	r5, r5, #16
 8007400:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007404:	2700      	movs	r7, #0
 8007406:	fb01 fb0b 	mul.w	fp, r1, fp
 800740a:	fa1f f188 	uxth.w	r1, r8
 800740e:	fbc9 6705 	smlal	r6, r7, r9, r5
 8007412:	9e03      	ldr	r6, [sp, #12]
 8007414:	10bd      	asrs	r5, r7, #2
 8007416:	f305 050f 	ssat	r5, #16, r5
 800741a:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 800741e:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8007420:	428d      	cmp	r5, r1
 8007422:	d90a      	bls.n	800743a <D16_GENERIC+0xea>
 8007424:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 8007426:	2d01      	cmp	r5, #1
 8007428:	b2ee      	uxtb	r6, r5
 800742a:	d1ad      	bne.n	8007388 <D16_GENERIC+0x38>
 800742c:	9d05      	ldr	r5, [sp, #20]
 800742e:	f850 7b02 	ldr.w	r7, [r0], #2
 8007432:	2d00      	cmp	r5, #0
 8007434:	d0ae      	beq.n	8007394 <D16_GENERIC+0x44>
 8007436:	ba7f      	rev16	r7, r7
 8007438:	e7ac      	b.n	8007394 <D16_GENERIC+0x44>
 800743a:	2000      	movs	r0, #0
 800743c:	9906      	ldr	r1, [sp, #24]
 800743e:	61d3      	str	r3, [r2, #28]
 8007440:	9b07      	ldr	r3, [sp, #28]
 8007442:	f8c2 c008 	str.w	ip, [r2, #8]
 8007446:	60d1      	str	r1, [r2, #12]
 8007448:	6193      	str	r3, [r2, #24]
 800744a:	e9c2 4a04 	strd	r4, sl, [r2, #16]
 800744e:	b009      	add	sp, #36	; 0x24
 8007450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007454:	00030001 	.word	0x00030001
 8007458:	00010003 	.word	0x00010003
 800745c:	24000000 	.word	0x24000000

08007460 <D24_GENERIC>:
 8007460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007464:	e9d2 4304 	ldrd	r4, r3, [r2, #16]
 8007468:	b089      	sub	sp, #36	; 0x24
 800746a:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 800746c:	9303      	str	r3, [sp, #12]
 800746e:	6993      	ldr	r3, [r2, #24]
 8007470:	9104      	str	r1, [sp, #16]
 8007472:	9307      	str	r3, [sp, #28]
 8007474:	69d1      	ldr	r1, [r2, #28]
 8007476:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 800747a:	e9d2 a50c 	ldrd	sl, r5, [r2, #48]	; 0x30
 800747e:	2e00      	cmp	r6, #0
 8007480:	f000 8088 	beq.w	8007594 <D24_GENERIC+0x134>
 8007484:	f005 0620 	and.w	r6, r5, #32
 8007488:	f005 0510 	and.w	r5, r5, #16
 800748c:	f04f 0c00 	mov.w	ip, #0
 8007490:	f8df e140 	ldr.w	lr, [pc, #320]	; 80075d4 <D24_GENERIC+0x174>
 8007494:	9606      	str	r6, [sp, #24]
 8007496:	9505      	str	r5, [sp, #20]
 8007498:	e064      	b.n	8007564 <D24_GENERIC+0x104>
 800749a:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 800749e:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 80074a2:	f810 b007 	ldrb.w	fp, [r0, r7]
 80074a6:	042d      	lsls	r5, r5, #16
 80074a8:	19f0      	adds	r0, r6, r7
 80074aa:	eb05 250b 	add.w	r5, r5, fp, lsl #8
 80074ae:	44a9      	add	r9, r5
 80074b0:	fa5f f689 	uxtb.w	r6, r9
 80074b4:	f3c9 2707 	ubfx	r7, r9, #8, #8
 80074b8:	ea4f 4919 	mov.w	r9, r9, lsr #16
 80074bc:	f85e 6026 	ldr.w	r6, [lr, r6, lsl #2]
 80074c0:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
 80074c4:	eb06 2691 	add.w	r6, r6, r1, lsr #10
 80074c8:	f85e 1029 	ldr.w	r1, [lr, r9, lsl #2]
 80074cc:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 80074d0:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80074d4:	f3c7 0509 	ubfx	r5, r7, #0, #10
 80074d8:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 80074dc:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 80074e0:	4d3a      	ldr	r5, [pc, #232]	; (80075cc <D24_GENERIC+0x16c>)
 80074e2:	fb26 8705 	smlad	r7, r6, r5, r8
 80074e6:	4d3a      	ldr	r5, [pc, #232]	; (80075d0 <D24_GENERIC+0x170>)
 80074e8:	fb26 3805 	smlad	r8, r6, r5, r3
 80074ec:	f3c1 0309 	ubfx	r3, r1, #0, #10
 80074f0:	eb03 0b43 	add.w	fp, r3, r3, lsl #1
 80074f4:	2301      	movs	r3, #1
 80074f6:	eb08 084b 	add.w	r8, r8, fp, lsl #1
 80074fa:	fb26 f603 	smuad	r6, r6, r3
 80074fe:	eb0c 0903 	add.w	r9, ip, r3
 8007502:	eb0b 0306 	add.w	r3, fp, r6
 8007506:	9e05      	ldr	r6, [sp, #20]
 8007508:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 800750c:	b1ae      	cbz	r6, 800753a <D24_GENERIC+0xda>
 800750e:	442c      	add	r4, r5
 8007510:	9e03      	ldr	r6, [sp, #12]
 8007512:	f8d2 b020 	ldr.w	fp, [r2, #32]
 8007516:	1ba4      	subs	r4, r4, r6
 8007518:	9503      	str	r5, [sp, #12]
 800751a:	17e7      	asrs	r7, r4, #31
 800751c:	fba4 450b 	umull	r4, r5, r4, fp
 8007520:	e9cd 4500 	strd	r4, r5, [sp]
 8007524:	fb0b 5407 	mla	r4, fp, r7, r5
 8007528:	9401      	str	r4, [sp, #4]
 800752a:	e9dd 4500 	ldrd	r4, r5, [sp]
 800752e:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 8007532:	f145 0500 	adc.w	r5, r5, #0
 8007536:	006c      	lsls	r4, r5, #1
 8007538:	4625      	mov	r5, r4
 800753a:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 800753e:	03ad      	lsls	r5, r5, #14
 8007540:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007544:	2700      	movs	r7, #0
 8007546:	fb0c fb0b 	mul.w	fp, ip, fp
 800754a:	fa1f fc89 	uxth.w	ip, r9
 800754e:	fbca 6705 	smlal	r6, r7, sl, r5
 8007552:	9e04      	ldr	r6, [sp, #16]
 8007554:	10bd      	asrs	r5, r7, #2
 8007556:	f305 050f 	ssat	r5, #16, r5
 800755a:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 800755e:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8007560:	4565      	cmp	r5, ip
 8007562:	d917      	bls.n	8007594 <D24_GENERIC+0x134>
 8007564:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 8007566:	f890 9000 	ldrb.w	r9, [r0]
 800756a:	b2ef      	uxtb	r7, r5
 800756c:	2d01      	cmp	r5, #1
 800756e:	b23e      	sxth	r6, r7
 8007570:	d193      	bne.n	800749a <D24_GENERIC+0x3a>
 8007572:	9d06      	ldr	r5, [sp, #24]
 8007574:	b1dd      	cbz	r5, 80075ae <D24_GENERIC+0x14e>
 8007576:	78c7      	ldrb	r7, [r0, #3]
 8007578:	ea4f 2609 	mov.w	r6, r9, lsl #8
 800757c:	f01c 0f01 	tst.w	ip, #1
 8007580:	ea4f 2507 	mov.w	r5, r7, lsl #8
 8007584:	eb06 4607 	add.w	r6, r6, r7, lsl #16
 8007588:	d11a      	bne.n	80075c0 <D24_GENERIC+0x160>
 800758a:	f890 9001 	ldrb.w	r9, [r0, #1]
 800758e:	3002      	adds	r0, #2
 8007590:	44b1      	add	r9, r6
 8007592:	e78d      	b.n	80074b0 <D24_GENERIC+0x50>
 8007594:	6093      	str	r3, [r2, #8]
 8007596:	2000      	movs	r0, #0
 8007598:	9b03      	ldr	r3, [sp, #12]
 800759a:	f8c2 800c 	str.w	r8, [r2, #12]
 800759e:	6153      	str	r3, [r2, #20]
 80075a0:	9b07      	ldr	r3, [sp, #28]
 80075a2:	61d1      	str	r1, [r2, #28]
 80075a4:	6114      	str	r4, [r2, #16]
 80075a6:	6193      	str	r3, [r2, #24]
 80075a8:	b009      	add	sp, #36	; 0x24
 80075aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075ae:	7845      	ldrb	r5, [r0, #1]
 80075b0:	3003      	adds	r0, #3
 80075b2:	f810 6c01 	ldrb.w	r6, [r0, #-1]
 80075b6:	022d      	lsls	r5, r5, #8
 80075b8:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 80075bc:	44a9      	add	r9, r5
 80075be:	e777      	b.n	80074b0 <D24_GENERIC+0x50>
 80075c0:	7886      	ldrb	r6, [r0, #2]
 80075c2:	3004      	adds	r0, #4
 80075c4:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 80075c8:	44a9      	add	r9, r5
 80075ca:	e771      	b.n	80074b0 <D24_GENERIC+0x50>
 80075cc:	00030001 	.word	0x00030001
 80075d0:	00060007 	.word	0x00060007
 80075d4:	24000000 	.word	0x24000000

080075d8 <D32_GENERIC>:
 80075d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075dc:	e9d2 4304 	ldrd	r4, r3, [r2, #16]
 80075e0:	b089      	sub	sp, #36	; 0x24
 80075e2:	6b15      	ldr	r5, [r2, #48]	; 0x30
 80075e4:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 80075e6:	9302      	str	r3, [sp, #8]
 80075e8:	6993      	ldr	r3, [r2, #24]
 80075ea:	9104      	str	r1, [sp, #16]
 80075ec:	9307      	str	r3, [sp, #28]
 80075ee:	9503      	str	r5, [sp, #12]
 80075f0:	69d1      	ldr	r1, [r2, #28]
 80075f2:	6b55      	ldr	r5, [r2, #52]	; 0x34
 80075f4:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 80075f8:	2e00      	cmp	r6, #0
 80075fa:	f000 8097 	beq.w	800772c <D32_GENERIC+0x154>
 80075fe:	f005 0620 	and.w	r6, r5, #32
 8007602:	f005 0510 	and.w	r5, r5, #16
 8007606:	f04f 0e00 	mov.w	lr, #0
 800760a:	f8df c150 	ldr.w	ip, [pc, #336]	; 800775c <D32_GENERIC+0x184>
 800760e:	9606      	str	r6, [sp, #24]
 8007610:	9505      	str	r5, [sp, #20]
 8007612:	e079      	b.n	8007708 <D32_GENERIC+0x130>
 8007614:	783d      	ldrb	r5, [r7, #0]
 8007616:	f810 b009 	ldrb.w	fp, [r0, r9]
 800761a:	042d      	lsls	r5, r5, #16
 800761c:	f810 a006 	ldrb.w	sl, [r0, r6]
 8007620:	f890 9000 	ldrb.w	r9, [r0]
 8007624:	eb07 0046 	add.w	r0, r7, r6, lsl #1
 8007628:	eb05 650b 	add.w	r5, r5, fp, lsl #24
 800762c:	eb05 250a 	add.w	r5, r5, sl, lsl #8
 8007630:	44a9      	add	r9, r5
 8007632:	fa5f f789 	uxtb.w	r7, r9
 8007636:	f3c9 2507 	ubfx	r5, r9, #8, #8
 800763a:	f3c9 4607 	ubfx	r6, r9, #16, #8
 800763e:	ea4f 6919 	mov.w	r9, r9, lsr #24
 8007642:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 8007646:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 800764a:	eb07 2191 	add.w	r1, r7, r1, lsr #10
 800764e:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
 8007652:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
 8007656:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800765a:	f3c1 0909 	ubfx	r9, r1, #0, #10
 800765e:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 8007662:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8007666:	eb07 2196 	add.w	r1, r7, r6, lsr #10
 800766a:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800766e:	ea45 4909 	orr.w	r9, r5, r9, lsl #16
 8007672:	f3c1 0509 	ubfx	r5, r1, #0, #10
 8007676:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 800767a:	4d34      	ldr	r5, [pc, #208]	; (800774c <D32_GENERIC+0x174>)
 800767c:	fb29 8805 	smlad	r8, r9, r5, r8
 8007680:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 8007684:	fb26 8705 	smlad	r7, r6, r5, r8
 8007688:	4d31      	ldr	r5, [pc, #196]	; (8007750 <D32_GENERIC+0x178>)
 800768a:	fb29 3305 	smlad	r3, r9, r5, r3
 800768e:	4d31      	ldr	r5, [pc, #196]	; (8007754 <D32_GENERIC+0x17c>)
 8007690:	fb26 3805 	smlad	r8, r6, r5, r3
 8007694:	2301      	movs	r3, #1
 8007696:	fb29 f903 	smuad	r9, r9, r3
 800769a:	4b2f      	ldr	r3, [pc, #188]	; (8007758 <D32_GENERIC+0x180>)
 800769c:	fb26 9303 	smlad	r3, r6, r3, r9
 80076a0:	9e05      	ldr	r6, [sp, #20]
 80076a2:	f10e 0901 	add.w	r9, lr, #1
 80076a6:	f5a7 4580 	sub.w	r5, r7, #16384	; 0x4000
 80076aa:	b1ae      	cbz	r6, 80076d8 <D32_GENERIC+0x100>
 80076ac:	442c      	add	r4, r5
 80076ae:	9e02      	ldr	r6, [sp, #8]
 80076b0:	f8d2 a020 	ldr.w	sl, [r2, #32]
 80076b4:	1ba4      	subs	r4, r4, r6
 80076b6:	9502      	str	r5, [sp, #8]
 80076b8:	17e7      	asrs	r7, r4, #31
 80076ba:	fba4 450a 	umull	r4, r5, r4, sl
 80076be:	e9cd 4500 	strd	r4, r5, [sp]
 80076c2:	fb0a 5407 	mla	r4, sl, r7, r5
 80076c6:	9401      	str	r4, [sp, #4]
 80076c8:	e9dd 4500 	ldrd	r4, r5, [sp]
 80076cc:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 80076d0:	f145 0500 	adc.w	r5, r5, #0
 80076d4:	006c      	lsls	r4, r5, #1
 80076d6:	4625      	mov	r5, r4
 80076d8:	f8b2 a028 	ldrh.w	sl, [r2, #40]	; 0x28
 80076dc:	036d      	lsls	r5, r5, #13
 80076de:	9f03      	ldr	r7, [sp, #12]
 80076e0:	fb0e fb0a 	mul.w	fp, lr, sl
 80076e4:	fa1f fe89 	uxth.w	lr, r9
 80076e8:	f04f 0a00 	mov.w	sl, #0
 80076ec:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 80076f0:	9e04      	ldr	r6, [sp, #16]
 80076f2:	fbc7 9a05 	smlal	r9, sl, r7, r5
 80076f6:	4657      	mov	r7, sl
 80076f8:	10bd      	asrs	r5, r7, #2
 80076fa:	f305 050f 	ssat	r5, #16, r5
 80076fe:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 8007702:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8007704:	4575      	cmp	r5, lr
 8007706:	d911      	bls.n	800772c <D32_GENERIC+0x154>
 8007708:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800770a:	b2ee      	uxtb	r6, r5
 800770c:	2d01      	cmp	r5, #1
 800770e:	eb00 0746 	add.w	r7, r0, r6, lsl #1
 8007712:	eb06 0946 	add.w	r9, r6, r6, lsl #1
 8007716:	f47f af7d 	bne.w	8007614 <D32_GENERIC+0x3c>
 800771a:	1d05      	adds	r5, r0, #4
 800771c:	f8d0 9000 	ldr.w	r9, [r0]
 8007720:	9806      	ldr	r0, [sp, #24]
 8007722:	b180      	cbz	r0, 8007746 <D32_GENERIC+0x16e>
 8007724:	fa99 f999 	rev16.w	r9, r9
 8007728:	4628      	mov	r0, r5
 800772a:	e782      	b.n	8007632 <D32_GENERIC+0x5a>
 800772c:	6093      	str	r3, [r2, #8]
 800772e:	2000      	movs	r0, #0
 8007730:	9b02      	ldr	r3, [sp, #8]
 8007732:	f8c2 800c 	str.w	r8, [r2, #12]
 8007736:	6153      	str	r3, [r2, #20]
 8007738:	9b07      	ldr	r3, [sp, #28]
 800773a:	61d1      	str	r1, [r2, #28]
 800773c:	6114      	str	r4, [r2, #16]
 800773e:	6193      	str	r3, [r2, #24]
 8007740:	b009      	add	sp, #36	; 0x24
 8007742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007746:	4628      	mov	r0, r5
 8007748:	e773      	b.n	8007632 <D32_GENERIC+0x5a>
 800774a:	bf00      	nop
 800774c:	00060003 	.word	0x00060003
 8007750:	000a000c 	.word	0x000a000c
 8007754:	000c000a 	.word	0x000c000a
 8007758:	00030006 	.word	0x00030006
 800775c:	24000000 	.word	0x24000000

08007760 <D48_GENERIC>:
 8007760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007764:	6913      	ldr	r3, [r2, #16]
 8007766:	b089      	sub	sp, #36	; 0x24
 8007768:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800776a:	9301      	str	r3, [sp, #4]
 800776c:	6953      	ldr	r3, [r2, #20]
 800776e:	9104      	str	r1, [sp, #16]
 8007770:	9302      	str	r3, [sp, #8]
 8007772:	6993      	ldr	r3, [r2, #24]
 8007774:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 8007778:	9307      	str	r3, [sp, #28]
 800777a:	e9d2 3102 	ldrd	r3, r1, [r2, #8]
 800777e:	9100      	str	r1, [sp, #0]
 8007780:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8007782:	9103      	str	r1, [sp, #12]
 8007784:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8007786:	2c00      	cmp	r4, #0
 8007788:	f000 80be 	beq.w	8007908 <D48_GENERIC+0x1a8>
 800778c:	f001 0420 	and.w	r4, r1, #32
 8007790:	f001 0110 	and.w	r1, r1, #16
 8007794:	f04f 0e00 	mov.w	lr, #0
 8007798:	9105      	str	r1, [sp, #20]
 800779a:	9406      	str	r4, [sp, #24]
 800779c:	4962      	ldr	r1, [pc, #392]	; (8007928 <D48_GENERIC+0x1c8>)
 800779e:	e0a0      	b.n	80078e2 <D48_GENERIC+0x182>
 80077a0:	eb00 0608 	add.w	r6, r0, r8
 80077a4:	f810 a008 	ldrb.w	sl, [r0, r8]
 80077a8:	f810 9005 	ldrb.w	r9, [r0, r5]
 80077ac:	5df4      	ldrb	r4, [r6, r7]
 80077ae:	443e      	add	r6, r7
 80077b0:	f890 b000 	ldrb.w	fp, [r0]
 80077b4:	0420      	lsls	r0, r4, #16
 80077b6:	eb06 0408 	add.w	r4, r6, r8
 80077ba:	f816 6008 	ldrb.w	r6, [r6, r8]
 80077be:	eb00 6a0a 	add.w	sl, r0, sl, lsl #24
 80077c2:	f814 8007 	ldrb.w	r8, [r4, r7]
 80077c6:	4427      	add	r7, r4
 80077c8:	eb0a 2a09 	add.w	sl, sl, r9, lsl #8
 80077cc:	eb08 2606 	add.w	r6, r8, r6, lsl #8
 80077d0:	eb0a 040b 	add.w	r4, sl, fp
 80077d4:	eb07 0045 	add.w	r0, r7, r5, lsl #1
 80077d8:	f3c6 2807 	ubfx	r8, r6, #8, #8
 80077dc:	b2f7      	uxtb	r7, r6
 80077de:	b2e6      	uxtb	r6, r4
 80077e0:	f3c4 2507 	ubfx	r5, r4, #8, #8
 80077e4:	f3c4 4907 	ubfx	r9, r4, #16, #8
 80077e8:	ea4f 6b14 	mov.w	fp, r4, lsr #24
 80077ec:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 80077f0:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 80077f4:	eb06 269c 	add.w	r6, r6, ip, lsr #10
 80077f8:	f851 9029 	ldr.w	r9, [r1, r9, lsl #2]
 80077fc:	f851 402b 	ldr.w	r4, [r1, fp, lsl #2]
 8007800:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 8007804:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 8007808:	f851 c028 	ldr.w	ip, [r1, r8, lsl #2]
 800780c:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8007810:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 8007814:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8007818:	eb04 2499 	add.w	r4, r4, r9, lsr #10
 800781c:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8007820:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 8007824:	9d00      	ldr	r5, [sp, #0]
 8007826:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 800782a:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800782e:	eb0c 2c97 	add.w	ip, ip, r7, lsr #10
 8007832:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8007836:	ea44 4909 	orr.w	r9, r4, r9, lsl #16
 800783a:	f3cc 0409 	ubfx	r4, ip, #0, #10
 800783e:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8007842:	4c3a      	ldr	r4, [pc, #232]	; (800792c <D48_GENERIC+0x1cc>)
 8007844:	fb26 5a04 	smlad	sl, r6, r4, r5
 8007848:	4c39      	ldr	r4, [pc, #228]	; (8007930 <D48_GENERIC+0x1d0>)
 800784a:	fb29 aa04 	smlad	sl, r9, r4, sl
 800784e:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 8007852:	fb27 aa04 	smlad	sl, r7, r4, sl
 8007856:	4c37      	ldr	r4, [pc, #220]	; (8007934 <D48_GENERIC+0x1d4>)
 8007858:	fb26 3304 	smlad	r3, r6, r4, r3
 800785c:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 8007860:	fb29 3304 	smlad	r3, r9, r4, r3
 8007864:	4c34      	ldr	r4, [pc, #208]	; (8007938 <D48_GENERIC+0x1d8>)
 8007866:	fb27 3304 	smlad	r3, r7, r4, r3
 800786a:	2501      	movs	r5, #1
 800786c:	9300      	str	r3, [sp, #0]
 800786e:	fb26 f605 	smuad	r6, r6, r5
 8007872:	4b32      	ldr	r3, [pc, #200]	; (800793c <D48_GENERIC+0x1dc>)
 8007874:	fb29 6903 	smlad	r9, r9, r3, r6
 8007878:	4b31      	ldr	r3, [pc, #196]	; (8007940 <D48_GENERIC+0x1e0>)
 800787a:	fb27 9303 	smlad	r3, r7, r3, r9
 800787e:	9c05      	ldr	r4, [sp, #20]
 8007880:	eb0e 0805 	add.w	r8, lr, r5
 8007884:	f5aa 4a58 	sub.w	sl, sl, #55296	; 0xd800
 8007888:	b19c      	cbz	r4, 80078b2 <D48_GENERIC+0x152>
 800788a:	9c01      	ldr	r4, [sp, #4]
 800788c:	9d02      	ldr	r5, [sp, #8]
 800788e:	4454      	add	r4, sl
 8007890:	f8d2 9020 	ldr.w	r9, [r2, #32]
 8007894:	f8cd a008 	str.w	sl, [sp, #8]
 8007898:	1b64      	subs	r4, r4, r5
 800789a:	fba4 ab09 	umull	sl, fp, r4, r9
 800789e:	17e7      	asrs	r7, r4, #31
 80078a0:	f11a 4400 	adds.w	r4, sl, #2147483648	; 0x80000000
 80078a4:	fb09 bb07 	mla	fp, r9, r7, fp
 80078a8:	f14b 0500 	adc.w	r5, fp, #0
 80078ac:	006c      	lsls	r4, r5, #1
 80078ae:	46a2      	mov	sl, r4
 80078b0:	9401      	str	r4, [sp, #4]
 80078b2:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 80078b4:	ea4f 2aca 	mov.w	sl, sl, lsl #11
 80078b8:	9d03      	ldr	r5, [sp, #12]
 80078ba:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 80078be:	fb0e f606 	mul.w	r6, lr, r6
 80078c2:	fa1f fe88 	uxth.w	lr, r8
 80078c6:	f04f 0800 	mov.w	r8, #0
 80078ca:	fbc5 780a 	smlal	r7, r8, r5, sl
 80078ce:	4645      	mov	r5, r8
 80078d0:	10ac      	asrs	r4, r5, #2
 80078d2:	9d04      	ldr	r5, [sp, #16]
 80078d4:	f304 040f 	ssat	r4, #16, r4
 80078d8:	f825 4016 	strh.w	r4, [r5, r6, lsl #1]
 80078dc:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 80078de:	4574      	cmp	r4, lr
 80078e0:	d912      	bls.n	8007908 <D48_GENERIC+0x1a8>
 80078e2:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 80078e4:	b2e5      	uxtb	r5, r4
 80078e6:	2c01      	cmp	r4, #1
 80078e8:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 80078ec:	f1c5 0700 	rsb	r7, r5, #0
 80078f0:	f47f af56 	bne.w	80077a0 <D48_GENERIC+0x40>
 80078f4:	9d06      	ldr	r5, [sp, #24]
 80078f6:	e9d0 4600 	ldrd	r4, r6, [r0]
 80078fa:	3006      	adds	r0, #6
 80078fc:	2d00      	cmp	r5, #0
 80078fe:	f43f af6b 	beq.w	80077d8 <D48_GENERIC+0x78>
 8007902:	ba64      	rev16	r4, r4
 8007904:	ba76      	rev16	r6, r6
 8007906:	e767      	b.n	80077d8 <D48_GENERIC+0x78>
 8007908:	6093      	str	r3, [r2, #8]
 800790a:	2000      	movs	r0, #0
 800790c:	9b00      	ldr	r3, [sp, #0]
 800790e:	f8c2 c01c 	str.w	ip, [r2, #28]
 8007912:	60d3      	str	r3, [r2, #12]
 8007914:	9b01      	ldr	r3, [sp, #4]
 8007916:	6113      	str	r3, [r2, #16]
 8007918:	9b02      	ldr	r3, [sp, #8]
 800791a:	6153      	str	r3, [r2, #20]
 800791c:	9b07      	ldr	r3, [sp, #28]
 800791e:	6193      	str	r3, [r2, #24]
 8007920:	b009      	add	sp, #36	; 0x24
 8007922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007926:	bf00      	nop
 8007928:	24000000 	.word	0x24000000
 800792c:	000f000a 	.word	0x000f000a
 8007930:	00060003 	.word	0x00060003
 8007934:	00150019 	.word	0x00150019
 8007938:	00190015 	.word	0x00190015
 800793c:	00030006 	.word	0x00030006
 8007940:	000a000f 	.word	0x000a000f

08007944 <D64_GENERIC>:
 8007944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007948:	6913      	ldr	r3, [r2, #16]
 800794a:	b089      	sub	sp, #36	; 0x24
 800794c:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800794e:	9300      	str	r3, [sp, #0]
 8007950:	6953      	ldr	r3, [r2, #20]
 8007952:	9105      	str	r1, [sp, #20]
 8007954:	9303      	str	r3, [sp, #12]
 8007956:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 8007958:	6993      	ldr	r3, [r2, #24]
 800795a:	69d4      	ldr	r4, [r2, #28]
 800795c:	9307      	str	r3, [sp, #28]
 800795e:	9504      	str	r5, [sp, #16]
 8007960:	e9d2 3602 	ldrd	r3, r6, [r2, #8]
 8007964:	2900      	cmp	r1, #0
 8007966:	f000 80e8 	beq.w	8007b3a <D64_GENERIC+0x1f6>
 800796a:	6a11      	ldr	r1, [r2, #32]
 800796c:	2500      	movs	r5, #0
 800796e:	46b3      	mov	fp, r6
 8007970:	9302      	str	r3, [sp, #8]
 8007972:	9106      	str	r1, [sp, #24]
 8007974:	4978      	ldr	r1, [pc, #480]	; (8007b58 <D64_GENERIC+0x214>)
 8007976:	e0cc      	b.n	8007b12 <D64_GENERIC+0x1ce>
 8007978:	eb0e 084e 	add.w	r8, lr, lr, lsl #1
 800797c:	f1ce 0c00 	rsb	ip, lr, #0
 8007980:	f890 9000 	ldrb.w	r9, [r0]
 8007984:	eb00 0708 	add.w	r7, r0, r8
 8007988:	f810 6008 	ldrb.w	r6, [r0, r8]
 800798c:	eb07 0a4c 	add.w	sl, r7, ip, lsl #1
 8007990:	f817 000c 	ldrb.w	r0, [r7, ip]
 8007994:	f817 301c 	ldrb.w	r3, [r7, ip, lsl #1]
 8007998:	eb0a 0748 	add.w	r7, sl, r8, lsl #1
 800799c:	f81a a018 	ldrb.w	sl, [sl, r8, lsl #1]
 80079a0:	ea4f 4800 	mov.w	r8, r0, lsl #16
 80079a4:	f817 000c 	ldrb.w	r0, [r7, ip]
 80079a8:	eb08 6606 	add.w	r6, r8, r6, lsl #24
 80079ac:	f817 801c 	ldrb.w	r8, [r7, ip, lsl #1]
 80079b0:	0400      	lsls	r0, r0, #16
 80079b2:	4467      	add	r7, ip
 80079b4:	eb06 2603 	add.w	r6, r6, r3, lsl #8
 80079b8:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 80079bc:	f817 a01c 	ldrb.w	sl, [r7, ip, lsl #1]
 80079c0:	eb07 074c 	add.w	r7, r7, ip, lsl #1
 80079c4:	444e      	add	r6, r9
 80079c6:	eb00 2808 	add.w	r8, r0, r8, lsl #8
 80079ca:	eb07 008e 	add.w	r0, r7, lr, lsl #2
 80079ce:	44c2      	add	sl, r8
 80079d0:	b2f7      	uxtb	r7, r6
 80079d2:	f3c6 2807 	ubfx	r8, r6, #8, #8
 80079d6:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 80079da:	0e36      	lsrs	r6, r6, #24
 80079dc:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 80079e0:	fa5f fc8a 	uxtb.w	ip, sl
 80079e4:	f851 8028 	ldr.w	r8, [r1, r8, lsl #2]
 80079e8:	f3ca 2907 	ubfx	r9, sl, #8, #8
 80079ec:	443c      	add	r4, r7
 80079ee:	f851 702e 	ldr.w	r7, [r1, lr, lsl #2]
 80079f2:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 80079f6:	eb08 2894 	add.w	r8, r8, r4, lsr #10
 80079fa:	f851 c02c 	ldr.w	ip, [r1, ip, lsl #2]
 80079fe:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8007a02:	4b56      	ldr	r3, [pc, #344]	; (8007b5c <D64_GENERIC+0x218>)
 8007a04:	eb07 2e98 	add.w	lr, r7, r8, lsr #10
 8007a08:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8007a0c:	f851 7029 	ldr.w	r7, [r1, r9, lsl #2]
 8007a10:	eb06 269e 	add.w	r6, r6, lr, lsr #10
 8007a14:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8007a18:	ea48 4804 	orr.w	r8, r8, r4, lsl #16
 8007a1c:	f3ca 4407 	ubfx	r4, sl, #16, #8
 8007a20:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 8007a24:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8007a28:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8007a2c:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8007a30:	eb07 279c 	add.w	r7, r7, ip, lsr #10
 8007a34:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8007a38:	f851 902a 	ldr.w	r9, [r1, sl, lsl #2]
 8007a3c:	ea46 460e 	orr.w	r6, r6, lr, lsl #16
 8007a40:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 8007a44:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8007a48:	eb09 299a 	add.w	r9, r9, sl, lsr #10
 8007a4c:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8007a50:	ea47 4c0c 	orr.w	ip, r7, ip, lsl #16
 8007a54:	f3c9 0709 	ubfx	r7, r9, #0, #10
 8007a58:	ea4f 2499 	mov.w	r4, r9, lsr #10
 8007a5c:	ea47 4a0a 	orr.w	sl, r7, sl, lsl #16
 8007a60:	fb28 b903 	smlad	r9, r8, r3, fp
 8007a64:	4b3e      	ldr	r3, [pc, #248]	; (8007b60 <D64_GENERIC+0x21c>)
 8007a66:	fb26 9903 	smlad	r9, r6, r3, r9
 8007a6a:	4b3e      	ldr	r3, [pc, #248]	; (8007b64 <D64_GENERIC+0x220>)
 8007a6c:	fb2c 9703 	smlad	r7, ip, r3, r9
 8007a70:	f44f 3980 	mov.w	r9, #65536	; 0x10000
 8007a74:	fb2a 7909 	smlad	r9, sl, r9, r7
 8007a78:	4f3b      	ldr	r7, [pc, #236]	; (8007b68 <D64_GENERIC+0x224>)
 8007a7a:	9b02      	ldr	r3, [sp, #8]
 8007a7c:	fb28 3307 	smlad	r3, r8, r7, r3
 8007a80:	fb2a 3317 	smladx	r3, sl, r7, r3
 8007a84:	4f39      	ldr	r7, [pc, #228]	; (8007b6c <D64_GENERIC+0x228>)
 8007a86:	fb26 3307 	smlad	r3, r6, r7, r3
 8007a8a:	fb2c 3b17 	smladx	fp, ip, r7, r3
 8007a8e:	f04f 0e01 	mov.w	lr, #1
 8007a92:	fb28 f80e 	smuad	r8, r8, lr
 8007a96:	4b36      	ldr	r3, [pc, #216]	; (8007b70 <D64_GENERIC+0x22c>)
 8007a98:	fb26 8603 	smlad	r6, r6, r3, r8
 8007a9c:	4b35      	ldr	r3, [pc, #212]	; (8007b74 <D64_GENERIC+0x230>)
 8007a9e:	fb2c 6c03 	smlad	ip, ip, r3, r6
 8007aa2:	4b35      	ldr	r3, [pc, #212]	; (8007b78 <D64_GENERIC+0x234>)
 8007aa4:	fb2a c303 	smlad	r3, sl, r3, ip
 8007aa8:	9f06      	ldr	r7, [sp, #24]
 8007aaa:	f5a9 3900 	sub.w	r9, r9, #131072	; 0x20000
 8007aae:	9302      	str	r3, [sp, #8]
 8007ab0:	b1cf      	cbz	r7, 8007ae6 <D64_GENERIC+0x1a2>
 8007ab2:	9b00      	ldr	r3, [sp, #0]
 8007ab4:	444b      	add	r3, r9
 8007ab6:	461e      	mov	r6, r3
 8007ab8:	9b03      	ldr	r3, [sp, #12]
 8007aba:	f8cd 900c 	str.w	r9, [sp, #12]
 8007abe:	1af6      	subs	r6, r6, r3
 8007ac0:	46b0      	mov	r8, r6
 8007ac2:	ea4f 79e6 	mov.w	r9, r6, asr #31
 8007ac6:	e9cd 8900 	strd	r8, r9, [sp]
 8007aca:	fba6 8907 	umull	r8, r9, r6, r7
 8007ace:	9e01      	ldr	r6, [sp, #4]
 8007ad0:	fb07 9306 	mla	r3, r7, r6, r9
 8007ad4:	4646      	mov	r6, r8
 8007ad6:	f116 4600 	adds.w	r6, r6, #2147483648	; 0x80000000
 8007ada:	f143 0700 	adc.w	r7, r3, #0
 8007ade:	fa07 f30e 	lsl.w	r3, r7, lr
 8007ae2:	4699      	mov	r9, r3
 8007ae4:	9300      	str	r3, [sp, #0]
 8007ae6:	f8b2 c028 	ldrh.w	ip, [r2, #40]	; 0x28
 8007aea:	ea4f 2989 	mov.w	r9, r9, lsl #10
 8007aee:	9b04      	ldr	r3, [sp, #16]
 8007af0:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007af4:	2700      	movs	r7, #0
 8007af6:	fb05 fc0c 	mul.w	ip, r5, ip
 8007afa:	3501      	adds	r5, #1
 8007afc:	fbc3 6709 	smlal	r6, r7, r3, r9
 8007b00:	9b05      	ldr	r3, [sp, #20]
 8007b02:	10be      	asrs	r6, r7, #2
 8007b04:	f306 060f 	ssat	r6, #16, r6
 8007b08:	f823 601c 	strh.w	r6, [r3, ip, lsl #1]
 8007b0c:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 8007b0e:	42ae      	cmp	r6, r5
 8007b10:	dd11      	ble.n	8007b36 <D64_GENERIC+0x1f2>
 8007b12:	f8b2 e02a 	ldrh.w	lr, [r2, #42]	; 0x2a
 8007b16:	f1be 0f01 	cmp.w	lr, #1
 8007b1a:	f47f af2d 	bne.w	8007978 <D64_GENERIC+0x34>
 8007b1e:	6b57      	ldr	r7, [r2, #52]	; 0x34
 8007b20:	f100 0c08 	add.w	ip, r0, #8
 8007b24:	06bb      	lsls	r3, r7, #26
 8007b26:	e9d0 6a00 	ldrd	r6, sl, [r0]
 8007b2a:	d513      	bpl.n	8007b54 <D64_GENERIC+0x210>
 8007b2c:	ba76      	rev16	r6, r6
 8007b2e:	fa9a fa9a 	rev16.w	sl, sl
 8007b32:	4660      	mov	r0, ip
 8007b34:	e74c      	b.n	80079d0 <D64_GENERIC+0x8c>
 8007b36:	465e      	mov	r6, fp
 8007b38:	9b02      	ldr	r3, [sp, #8]
 8007b3a:	6093      	str	r3, [r2, #8]
 8007b3c:	2000      	movs	r0, #0
 8007b3e:	9b00      	ldr	r3, [sp, #0]
 8007b40:	60d6      	str	r6, [r2, #12]
 8007b42:	6113      	str	r3, [r2, #16]
 8007b44:	9b03      	ldr	r3, [sp, #12]
 8007b46:	61d4      	str	r4, [r2, #28]
 8007b48:	6153      	str	r3, [r2, #20]
 8007b4a:	9b07      	ldr	r3, [sp, #28]
 8007b4c:	6193      	str	r3, [r2, #24]
 8007b4e:	b009      	add	sp, #36	; 0x24
 8007b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b54:	4660      	mov	r0, ip
 8007b56:	e73b      	b.n	80079d0 <D64_GENERIC+0x8c>
 8007b58:	24000000 	.word	0x24000000
 8007b5c:	001c0015 	.word	0x001c0015
 8007b60:	000f000a 	.word	0x000f000a
 8007b64:	00060003 	.word	0x00060003
 8007b68:	0024002a 	.word	0x0024002a
 8007b6c:	002e0030 	.word	0x002e0030
 8007b70:	00030006 	.word	0x00030006
 8007b74:	000a000f 	.word	0x000a000f
 8007b78:	0015001c 	.word	0x0015001c

08007b7c <D80_GENERIC>:
 8007b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b80:	b08b      	sub	sp, #44	; 0x2c
 8007b82:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8007b84:	9107      	str	r1, [sp, #28]
 8007b86:	6911      	ldr	r1, [r2, #16]
 8007b88:	9104      	str	r1, [sp, #16]
 8007b8a:	6951      	ldr	r1, [r2, #20]
 8007b8c:	9105      	str	r1, [sp, #20]
 8007b8e:	6991      	ldr	r1, [r2, #24]
 8007b90:	9109      	str	r1, [sp, #36]	; 0x24
 8007b92:	69d1      	ldr	r1, [r2, #28]
 8007b94:	9102      	str	r1, [sp, #8]
 8007b96:	6891      	ldr	r1, [r2, #8]
 8007b98:	9103      	str	r1, [sp, #12]
 8007b9a:	68d1      	ldr	r1, [r2, #12]
 8007b9c:	9101      	str	r1, [sp, #4]
 8007b9e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8007ba0:	9106      	str	r1, [sp, #24]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	f000 810b 	beq.w	8007dbe <D80_GENERIC+0x242>
 8007ba8:	6a13      	ldr	r3, [r2, #32]
 8007baa:	f04f 0800 	mov.w	r8, #0
 8007bae:	f8df c260 	ldr.w	ip, [pc, #608]	; 8007e10 <D80_GENERIC+0x294>
 8007bb2:	9308      	str	r3, [sp, #32]
 8007bb4:	9200      	str	r2, [sp, #0]
 8007bb6:	e0ee      	b.n	8007d96 <D80_GENERIC+0x21a>
 8007bb8:	b2db      	uxtb	r3, r3
 8007bba:	f890 e000 	ldrb.w	lr, [r0]
 8007bbe:	b219      	sxth	r1, r3
 8007bc0:	425c      	negs	r4, r3
 8007bc2:	f810 9003 	ldrb.w	r9, [r0, r3]
 8007bc6:	004e      	lsls	r6, r1, #1
 8007bc8:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 8007bcc:	4431      	add	r1, r6
 8007bce:	1843      	adds	r3, r0, r1
 8007bd0:	f810 b001 	ldrb.w	fp, [r0, r1]
 8007bd4:	1919      	adds	r1, r3, r4
 8007bd6:	5d1b      	ldrb	r3, [r3, r4]
 8007bd8:	1948      	adds	r0, r1, r5
 8007bda:	f811 a005 	ldrb.w	sl, [r1, r5]
 8007bde:	041b      	lsls	r3, r3, #16
 8007be0:	1907      	adds	r7, r0, r4
 8007be2:	5d01      	ldrb	r1, [r0, r4]
 8007be4:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 8007be8:	f810 0014 	ldrb.w	r0, [r0, r4, lsl #1]
 8007bec:	eb07 0b44 	add.w	fp, r7, r4, lsl #1
 8007bf0:	f817 7014 	ldrb.w	r7, [r7, r4, lsl #1]
 8007bf4:	0409      	lsls	r1, r1, #16
 8007bf6:	eb03 2309 	add.w	r3, r3, r9, lsl #8
 8007bfa:	eb0b 0905 	add.w	r9, fp, r5
 8007bfe:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 8007c02:	f81b 5005 	ldrb.w	r5, [fp, r5]
 8007c06:	eb09 0b04 	add.w	fp, r9, r4
 8007c0a:	f819 4004 	ldrb.w	r4, [r9, r4]
 8007c0e:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8007c12:	4473      	add	r3, lr
 8007c14:	eb0b 0006 	add.w	r0, fp, r6
 8007c18:	eb04 2505 	add.w	r5, r4, r5, lsl #8
 8007c1c:	4439      	add	r1, r7
 8007c1e:	f3c3 2407 	ubfx	r4, r3, #8, #8
 8007c22:	b2df      	uxtb	r7, r3
 8007c24:	f3c3 4607 	ubfx	r6, r3, #16, #8
 8007c28:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8007c2c:	f85c 3027 	ldr.w	r3, [ip, r7, lsl #2]
 8007c30:	fa5f fa81 	uxtb.w	sl, r1
 8007c34:	f85c 7024 	ldr.w	r7, [ip, r4, lsl #2]
 8007c38:	9c02      	ldr	r4, [sp, #8]
 8007c3a:	f85c 9026 	ldr.w	r9, [ip, r6, lsl #2]
 8007c3e:	441c      	add	r4, r3
 8007c40:	f85c 602e 	ldr.w	r6, [ip, lr, lsl #2]
 8007c44:	f85c e02a 	ldr.w	lr, [ip, sl, lsl #2]
 8007c48:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8007c4c:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 8007c50:	f3c4 0309 	ubfx	r3, r4, #0, #10
 8007c54:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8007c58:	b2ed      	uxtb	r5, r5
 8007c5a:	eb09 2997 	add.w	r9, r9, r7, lsr #10
 8007c5e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8007c62:	f85c 4024 	ldr.w	r4, [ip, r4, lsl #2]
 8007c66:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 8007c6a:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 8007c6e:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 8007c72:	f3c1 4707 	ubfx	r7, r1, #16, #8
 8007c76:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 8007c7a:	f85c a02a 	ldr.w	sl, [ip, sl, lsl #2]
 8007c7e:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 8007c82:	0e09      	lsrs	r1, r1, #24
 8007c84:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 8007c88:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8007c8c:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 8007c90:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8007c94:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 8007c98:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8007c9c:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8007ca0:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 8007ca4:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8007ca8:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
 8007cac:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 8007cb0:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8007cb4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8007cb8:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 8007cbc:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8007cc0:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 8007cc4:	ea4f 229a 	mov.w	r2, sl, lsr #10
 8007cc8:	f3ca 0709 	ubfx	r7, sl, #0, #10
 8007ccc:	9202      	str	r2, [sp, #8]
 8007cce:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 8007cd2:	4a43      	ldr	r2, [pc, #268]	; (8007de0 <D80_GENERIC+0x264>)
 8007cd4:	9f01      	ldr	r7, [sp, #4]
 8007cd6:	fb23 7a02 	smlad	sl, r3, r2, r7
 8007cda:	4a42      	ldr	r2, [pc, #264]	; (8007de4 <D80_GENERIC+0x268>)
 8007cdc:	fb26 aa02 	smlad	sl, r6, r2, sl
 8007ce0:	4a41      	ldr	r2, [pc, #260]	; (8007de8 <D80_GENERIC+0x26c>)
 8007ce2:	fb24 aa02 	smlad	sl, r4, r2, sl
 8007ce6:	4a41      	ldr	r2, [pc, #260]	; (8007dec <D80_GENERIC+0x270>)
 8007ce8:	fb21 a702 	smlad	r7, r1, r2, sl
 8007cec:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 8007cf0:	fb25 7a0a 	smlad	sl, r5, sl, r7
 8007cf4:	4a3e      	ldr	r2, [pc, #248]	; (8007df0 <D80_GENERIC+0x274>)
 8007cf6:	9f03      	ldr	r7, [sp, #12]
 8007cf8:	fb23 7e02 	smlad	lr, r3, r2, r7
 8007cfc:	4a3d      	ldr	r2, [pc, #244]	; (8007df4 <D80_GENERIC+0x278>)
 8007cfe:	fb26 ee02 	smlad	lr, r6, r2, lr
 8007d02:	f04f 174b 	mov.w	r7, #4915275	; 0x4b004b
 8007d06:	fb24 e707 	smlad	r7, r4, r7, lr
 8007d0a:	4a3b      	ldr	r2, [pc, #236]	; (8007df8 <D80_GENERIC+0x27c>)
 8007d0c:	fb21 7702 	smlad	r7, r1, r2, r7
 8007d10:	4a3a      	ldr	r2, [pc, #232]	; (8007dfc <D80_GENERIC+0x280>)
 8007d12:	fb25 7202 	smlad	r2, r5, r2, r7
 8007d16:	f04f 0901 	mov.w	r9, #1
 8007d1a:	9201      	str	r2, [sp, #4]
 8007d1c:	fb23 f909 	smuad	r9, r3, r9
 8007d20:	4b37      	ldr	r3, [pc, #220]	; (8007e00 <D80_GENERIC+0x284>)
 8007d22:	fb26 9603 	smlad	r6, r6, r3, r9
 8007d26:	4f37      	ldr	r7, [pc, #220]	; (8007e04 <D80_GENERIC+0x288>)
 8007d28:	fb24 6407 	smlad	r4, r4, r7, r6
 8007d2c:	4f36      	ldr	r7, [pc, #216]	; (8007e08 <D80_GENERIC+0x28c>)
 8007d2e:	fb21 4707 	smlad	r7, r1, r7, r4
 8007d32:	4936      	ldr	r1, [pc, #216]	; (8007e0c <D80_GENERIC+0x290>)
 8007d34:	fb25 7301 	smlad	r3, r5, r1, r7
 8007d38:	9303      	str	r3, [sp, #12]
 8007d3a:	f5aa 3a7a 	sub.w	sl, sl, #256000	; 0x3e800
 8007d3e:	9b08      	ldr	r3, [sp, #32]
 8007d40:	b193      	cbz	r3, 8007d68 <D80_GENERIC+0x1ec>
 8007d42:	9a04      	ldr	r2, [sp, #16]
 8007d44:	4452      	add	r2, sl
 8007d46:	4614      	mov	r4, r2
 8007d48:	9a05      	ldr	r2, [sp, #20]
 8007d4a:	f8cd a014 	str.w	sl, [sp, #20]
 8007d4e:	1aa4      	subs	r4, r4, r2
 8007d50:	fba4 1203 	umull	r1, r2, r4, r3
 8007d54:	17e7      	asrs	r7, r4, #31
 8007d56:	f111 4400 	adds.w	r4, r1, #2147483648	; 0x80000000
 8007d5a:	fb03 2207 	mla	r2, r3, r7, r2
 8007d5e:	f142 0500 	adc.w	r5, r2, #0
 8007d62:	006b      	lsls	r3, r5, #1
 8007d64:	469a      	mov	sl, r3
 8007d66:	9304      	str	r3, [sp, #16]
 8007d68:	9e00      	ldr	r6, [sp, #0]
 8007d6a:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
 8007d6e:	9a06      	ldr	r2, [sp, #24]
 8007d70:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8007d74:	8d33      	ldrh	r3, [r6, #40]	; 0x28
 8007d76:	2500      	movs	r5, #0
 8007d78:	fb08 f303 	mul.w	r3, r8, r3
 8007d7c:	fbc2 450a 	smlal	r4, r5, r2, sl
 8007d80:	9a07      	ldr	r2, [sp, #28]
 8007d82:	f108 0801 	add.w	r8, r8, #1
 8007d86:	10a9      	asrs	r1, r5, #2
 8007d88:	f301 010f 	ssat	r1, #16, r1
 8007d8c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8007d90:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 8007d92:	4543      	cmp	r3, r8
 8007d94:	dd12      	ble.n	8007dbc <D80_GENERIC+0x240>
 8007d96:	9b00      	ldr	r3, [sp, #0]
 8007d98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d9a:	2b01      	cmp	r3, #1
 8007d9c:	f47f af0c 	bne.w	8007bb8 <D80_GENERIC+0x3c>
 8007da0:	9b00      	ldr	r3, [sp, #0]
 8007da2:	6885      	ldr	r5, [r0, #8]
 8007da4:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8007da6:	06b2      	lsls	r2, r6, #26
 8007da8:	e9d0 3100 	ldrd	r3, r1, [r0]
 8007dac:	f100 000a 	add.w	r0, r0, #10
 8007db0:	f57f af35 	bpl.w	8007c1e <D80_GENERIC+0xa2>
 8007db4:	ba5b      	rev16	r3, r3
 8007db6:	ba49      	rev16	r1, r1
 8007db8:	ba6d      	rev16	r5, r5
 8007dba:	e730      	b.n	8007c1e <D80_GENERIC+0xa2>
 8007dbc:	4632      	mov	r2, r6
 8007dbe:	9b03      	ldr	r3, [sp, #12]
 8007dc0:	2000      	movs	r0, #0
 8007dc2:	6093      	str	r3, [r2, #8]
 8007dc4:	9b01      	ldr	r3, [sp, #4]
 8007dc6:	60d3      	str	r3, [r2, #12]
 8007dc8:	9b02      	ldr	r3, [sp, #8]
 8007dca:	61d3      	str	r3, [r2, #28]
 8007dcc:	9b04      	ldr	r3, [sp, #16]
 8007dce:	6113      	str	r3, [r2, #16]
 8007dd0:	9b05      	ldr	r3, [sp, #20]
 8007dd2:	6153      	str	r3, [r2, #20]
 8007dd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dd6:	6193      	str	r3, [r2, #24]
 8007dd8:	b00b      	add	sp, #44	; 0x2c
 8007dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dde:	bf00      	nop
 8007de0:	002d0024 	.word	0x002d0024
 8007de4:	001c0015 	.word	0x001c0015
 8007de8:	000f000a 	.word	0x000f000a
 8007dec:	00060003 	.word	0x00060003
 8007df0:	0037003f 	.word	0x0037003f
 8007df4:	00450049 	.word	0x00450049
 8007df8:	00490045 	.word	0x00490045
 8007dfc:	003f0037 	.word	0x003f0037
 8007e00:	00030006 	.word	0x00030006
 8007e04:	000a000f 	.word	0x000a000f
 8007e08:	0015001c 	.word	0x0015001c
 8007e0c:	0024002d 	.word	0x0024002d
 8007e10:	24000000 	.word	0x24000000

08007e14 <D128_GENERIC>:
 8007e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e18:	b08d      	sub	sp, #52	; 0x34
 8007e1a:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8007e1c:	f8d2 a01c 	ldr.w	sl, [r2, #28]
 8007e20:	9109      	str	r1, [sp, #36]	; 0x24
 8007e22:	6911      	ldr	r1, [r2, #16]
 8007e24:	9201      	str	r2, [sp, #4]
 8007e26:	9106      	str	r1, [sp, #24]
 8007e28:	6951      	ldr	r1, [r2, #20]
 8007e2a:	9107      	str	r1, [sp, #28]
 8007e2c:	6991      	ldr	r1, [r2, #24]
 8007e2e:	910b      	str	r1, [sp, #44]	; 0x2c
 8007e30:	6891      	ldr	r1, [r2, #8]
 8007e32:	9103      	str	r1, [sp, #12]
 8007e34:	68d1      	ldr	r1, [r2, #12]
 8007e36:	9102      	str	r1, [sp, #8]
 8007e38:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8007e3a:	9108      	str	r1, [sp, #32]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	f000 8183 	beq.w	8008148 <D128_GENERIC+0x334>
 8007e42:	2300      	movs	r3, #0
 8007e44:	6a12      	ldr	r2, [r2, #32]
 8007e46:	4681      	mov	r9, r0
 8007e48:	920a      	str	r2, [sp, #40]	; 0x28
 8007e4a:	e9cd a304 	strd	sl, r3, [sp, #16]
 8007e4e:	e165      	b.n	800811c <D128_GENERIC+0x308>
 8007e50:	b2d2      	uxtb	r2, r2
 8007e52:	f899 b000 	ldrb.w	fp, [r9]
 8007e56:	b213      	sxth	r3, r2
 8007e58:	4255      	negs	r5, r2
 8007e5a:	f819 0002 	ldrb.w	r0, [r9, r2]
 8007e5e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8007e62:	009f      	lsls	r7, r3, #2
 8007e64:	eb09 0402 	add.w	r4, r9, r2
 8007e68:	ebc3 06c3 	rsb	r6, r3, r3, lsl #3
 8007e6c:	f819 8002 	ldrb.w	r8, [r9, r2]
 8007e70:	443b      	add	r3, r7
 8007e72:	1962      	adds	r2, r4, r5
 8007e74:	5d64      	ldrb	r4, [r4, r5]
 8007e76:	eb02 0c03 	add.w	ip, r2, r3
 8007e7a:	0424      	lsls	r4, r4, #16
 8007e7c:	5cd3      	ldrb	r3, [r2, r3]
 8007e7e:	eb0c 0e05 	add.w	lr, ip, r5
 8007e82:	f81c 9015 	ldrb.w	r9, [ip, r5, lsl #1]
 8007e86:	f81c 2005 	ldrb.w	r2, [ip, r5]
 8007e8a:	eb04 6408 	add.w	r4, r4, r8, lsl #24
 8007e8e:	eb0e 0c45 	add.w	ip, lr, r5, lsl #1
 8007e92:	f81e 8015 	ldrb.w	r8, [lr, r5, lsl #1]
 8007e96:	eb04 2400 	add.w	r4, r4, r0, lsl #8
 8007e9a:	eb0c 0e06 	add.w	lr, ip, r6
 8007e9e:	f81c a006 	ldrb.w	sl, [ip, r6]
 8007ea2:	0412      	lsls	r2, r2, #16
 8007ea4:	445c      	add	r4, fp
 8007ea6:	eb0e 0c05 	add.w	ip, lr, r5
 8007eaa:	eb02 6203 	add.w	r2, r2, r3, lsl #24
 8007eae:	f81e 3005 	ldrb.w	r3, [lr, r5]
 8007eb2:	eb0c 0045 	add.w	r0, ip, r5, lsl #1
 8007eb6:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 8007eba:	041b      	lsls	r3, r3, #16
 8007ebc:	f81c c015 	ldrb.w	ip, [ip, r5, lsl #1]
 8007ec0:	eb00 0b06 	add.w	fp, r0, r6
 8007ec4:	5d80      	ldrb	r0, [r0, r6]
 8007ec6:	eb03 630a 	add.w	r3, r3, sl, lsl #24
 8007eca:	f81b 6005 	ldrb.w	r6, [fp, r5]
 8007ece:	eb0b 0a05 	add.w	sl, fp, r5
 8007ed2:	eb02 2209 	add.w	r2, r2, r9, lsl #8
 8007ed6:	f81b b015 	ldrb.w	fp, [fp, r5, lsl #1]
 8007eda:	0436      	lsls	r6, r6, #16
 8007edc:	eb0a 0945 	add.w	r9, sl, r5, lsl #1
 8007ee0:	4442      	add	r2, r8
 8007ee2:	eb06 6600 	add.w	r6, r6, r0, lsl #24
 8007ee6:	f81a 8015 	ldrb.w	r8, [sl, r5, lsl #1]
 8007eea:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 8007eee:	44b9      	add	r9, r7
 8007ef0:	eb06 260b 	add.w	r6, r6, fp, lsl #8
 8007ef4:	4463      	add	r3, ip
 8007ef6:	eb06 0508 	add.w	r5, r6, r8
 8007efa:	b2e7      	uxtb	r7, r4
 8007efc:	f3c4 2607 	ubfx	r6, r4, #8, #8
 8007f00:	499b      	ldr	r1, [pc, #620]	; (8008170 <D128_GENERIC+0x35c>)
 8007f02:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8007f06:	0e24      	lsrs	r4, r4, #24
 8007f08:	f851 c027 	ldr.w	ip, [r1, r7, lsl #2]
 8007f0c:	b2d7      	uxtb	r7, r2
 8007f0e:	f851 b026 	ldr.w	fp, [r1, r6, lsl #2]
 8007f12:	f3c2 2607 	ubfx	r6, r2, #8, #8
 8007f16:	9904      	ldr	r1, [sp, #16]
 8007f18:	4461      	add	r1, ip
 8007f1a:	468c      	mov	ip, r1
 8007f1c:	4994      	ldr	r1, [pc, #592]	; (8008170 <D128_GENERIC+0x35c>)
 8007f1e:	eb0b 2b9c 	add.w	fp, fp, ip, lsr #10
 8007f22:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8007f26:	f851 8024 	ldr.w	r8, [r1, r4, lsl #2]
 8007f2a:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8007f2e:	eb00 209b 	add.w	r0, r0, fp, lsr #10
 8007f32:	f851 e027 	ldr.w	lr, [r1, r7, lsl #2]
 8007f36:	f851 7026 	ldr.w	r7, [r1, r6, lsl #2]
 8007f3a:	0e12      	lsrs	r2, r2, #24
 8007f3c:	eb08 2890 	add.w	r8, r8, r0, lsr #10
 8007f40:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8007f44:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 8007f48:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8007f4c:	eb0e 2e98 	add.w	lr, lr, r8, lsr #10
 8007f50:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8007f54:	b2da      	uxtb	r2, r3
 8007f56:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8007f5a:	eb07 279e 	add.w	r7, r7, lr, lsr #10
 8007f5e:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8007f62:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007f66:	ea48 4800 	orr.w	r8, r8, r0, lsl #16
 8007f6a:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 8007f6e:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8007f72:	ea4b 4b0c 	orr.w	fp, fp, ip, lsl #16
 8007f76:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8007f7a:	eb06 269a 	add.w	r6, r6, sl, lsr #10
 8007f7e:	f851 c020 	ldr.w	ip, [r1, r0, lsl #2]
 8007f82:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8007f86:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8007f8a:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 8007f8e:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8007f92:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 8007f96:	0e1b      	lsrs	r3, r3, #24
 8007f98:	eb0c 2c92 	add.w	ip, ip, r2, lsr #10
 8007f9c:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8007fa0:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 8007fa4:	ea47 470e 	orr.w	r7, r7, lr, lsl #16
 8007fa8:	b2eb      	uxtb	r3, r5
 8007faa:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8007fae:	eb04 2e9c 	add.w	lr, r4, ip, lsr #10
 8007fb2:	f3cc 0409 	ubfx	r4, ip, #0, #10
 8007fb6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007fba:	ea46 460a 	orr.w	r6, r6, sl, lsl #16
 8007fbe:	eb00 209e 	add.w	r0, r0, lr, lsr #10
 8007fc2:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8007fc6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8007fca:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8007fce:	eb03 2c90 	add.w	ip, r3, r0, lsr #10
 8007fd2:	f851 202a 	ldr.w	r2, [r1, sl, lsl #2]
 8007fd6:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8007fda:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 8007fde:	eb02 229c 	add.w	r2, r2, ip, lsr #10
 8007fe2:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8007fe6:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
 8007fea:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8007fee:	f851 302a 	ldr.w	r3, [r1, sl, lsl #2]
 8007ff2:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8007ff6:	eb05 2592 	add.w	r5, r5, r2, lsr #10
 8007ffa:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8007ffe:	eb03 2e95 	add.w	lr, r3, r5, lsr #10
 8008002:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8008006:	ea42 430c 	orr.w	r3, r2, ip, lsl #16
 800800a:	ea4f 219e 	mov.w	r1, lr, lsr #10
 800800e:	f3ce 0209 	ubfx	r2, lr, #0, #10
 8008012:	9104      	str	r1, [sp, #16]
 8008014:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8008018:	9902      	ldr	r1, [sp, #8]
 800801a:	4a56      	ldr	r2, [pc, #344]	; (8008174 <D128_GENERIC+0x360>)
 800801c:	fb2b 1202 	smlad	r2, fp, r2, r1
 8008020:	4955      	ldr	r1, [pc, #340]	; (8008178 <D128_GENERIC+0x364>)
 8008022:	fb28 2201 	smlad	r2, r8, r1, r2
 8008026:	4955      	ldr	r1, [pc, #340]	; (800817c <D128_GENERIC+0x368>)
 8008028:	fb27 2201 	smlad	r2, r7, r1, r2
 800802c:	4954      	ldr	r1, [pc, #336]	; (8008180 <D128_GENERIC+0x36c>)
 800802e:	fb26 2201 	smlad	r2, r6, r1, r2
 8008032:	4954      	ldr	r1, [pc, #336]	; (8008184 <D128_GENERIC+0x370>)
 8008034:	fb24 2201 	smlad	r2, r4, r1, r2
 8008038:	4953      	ldr	r1, [pc, #332]	; (8008188 <D128_GENERIC+0x374>)
 800803a:	fb20 2201 	smlad	r2, r0, r1, r2
 800803e:	4953      	ldr	r1, [pc, #332]	; (800818c <D128_GENERIC+0x378>)
 8008040:	fb23 2201 	smlad	r2, r3, r1, r2
 8008044:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
 8008048:	fb25 2a0c 	smlad	sl, r5, ip, r2
 800804c:	4950      	ldr	r1, [pc, #320]	; (8008190 <D128_GENERIC+0x37c>)
 800804e:	9a03      	ldr	r2, [sp, #12]
 8008050:	fb2b 2c01 	smlad	ip, fp, r1, r2
 8008054:	4a4f      	ldr	r2, [pc, #316]	; (8008194 <D128_GENERIC+0x380>)
 8008056:	fb28 ce02 	smlad	lr, r8, r2, ip
 800805a:	f8df c150 	ldr.w	ip, [pc, #336]	; 80081ac <D128_GENERIC+0x398>
 800805e:	fb27 ec0c 	smlad	ip, r7, ip, lr
 8008062:	f8df e14c 	ldr.w	lr, [pc, #332]	; 80081b0 <D128_GENERIC+0x39c>
 8008066:	fb26 cc0e 	smlad	ip, r6, lr, ip
 800806a:	f8df e148 	ldr.w	lr, [pc, #328]	; 80081b4 <D128_GENERIC+0x3a0>
 800806e:	fb24 ce0e 	smlad	lr, r4, lr, ip
 8008072:	f8df c144 	ldr.w	ip, [pc, #324]	; 80081b8 <D128_GENERIC+0x3a4>
 8008076:	fb20 ee0c 	smlad	lr, r0, ip, lr
 800807a:	f8df c140 	ldr.w	ip, [pc, #320]	; 80081bc <D128_GENERIC+0x3a8>
 800807e:	fb23 ec0c 	smlad	ip, r3, ip, lr
 8008082:	f8df e13c 	ldr.w	lr, [pc, #316]	; 80081c0 <D128_GENERIC+0x3ac>
 8008086:	fb25 c20e 	smlad	r2, r5, lr, ip
 800808a:	f04f 0c01 	mov.w	ip, #1
 800808e:	9202      	str	r2, [sp, #8]
 8008090:	fb2b fb0c 	smuad	fp, fp, ip
 8008094:	f8df c12c 	ldr.w	ip, [pc, #300]	; 80081c4 <D128_GENERIC+0x3b0>
 8008098:	fb28 bb0c 	smlad	fp, r8, ip, fp
 800809c:	f8df c128 	ldr.w	ip, [pc, #296]	; 80081c8 <D128_GENERIC+0x3b4>
 80080a0:	fb27 bb0c 	smlad	fp, r7, ip, fp
 80080a4:	4f3c      	ldr	r7, [pc, #240]	; (8008198 <D128_GENERIC+0x384>)
 80080a6:	fb26 bb07 	smlad	fp, r6, r7, fp
 80080aa:	4f3c      	ldr	r7, [pc, #240]	; (800819c <D128_GENERIC+0x388>)
 80080ac:	fb24 bb07 	smlad	fp, r4, r7, fp
 80080b0:	4f3b      	ldr	r7, [pc, #236]	; (80081a0 <D128_GENERIC+0x38c>)
 80080b2:	fb20 bb07 	smlad	fp, r0, r7, fp
 80080b6:	4f3b      	ldr	r7, [pc, #236]	; (80081a4 <D128_GENERIC+0x390>)
 80080b8:	fb23 bb07 	smlad	fp, r3, r7, fp
 80080bc:	4b3a      	ldr	r3, [pc, #232]	; (80081a8 <D128_GENERIC+0x394>)
 80080be:	fb25 b303 	smlad	r3, r5, r3, fp
 80080c2:	9303      	str	r3, [sp, #12]
 80080c4:	f5aa 1480 	sub.w	r4, sl, #1048576	; 0x100000
 80080c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080ca:	b183      	cbz	r3, 80080ee <D128_GENERIC+0x2da>
 80080cc:	9a06      	ldr	r2, [sp, #24]
 80080ce:	9907      	ldr	r1, [sp, #28]
 80080d0:	4422      	add	r2, r4
 80080d2:	9407      	str	r4, [sp, #28]
 80080d4:	1a52      	subs	r2, r2, r1
 80080d6:	fba2 0103 	umull	r0, r1, r2, r3
 80080da:	17d5      	asrs	r5, r2, #31
 80080dc:	f110 4200 	adds.w	r2, r0, #2147483648	; 0x80000000
 80080e0:	fb03 1105 	mla	r1, r3, r5, r1
 80080e4:	f141 0300 	adc.w	r3, r1, #0
 80080e8:	005b      	lsls	r3, r3, #1
 80080ea:	461c      	mov	r4, r3
 80080ec:	9306      	str	r3, [sp, #24]
 80080ee:	9d01      	ldr	r5, [sp, #4]
 80080f0:	01e4      	lsls	r4, r4, #7
 80080f2:	9e05      	ldr	r6, [sp, #20]
 80080f4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80080f8:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 80080fa:	2300      	movs	r3, #0
 80080fc:	9908      	ldr	r1, [sp, #32]
 80080fe:	fb06 f000 	mul.w	r0, r6, r0
 8008102:	3601      	adds	r6, #1
 8008104:	fbc1 2304 	smlal	r2, r3, r1, r4
 8008108:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800810a:	109b      	asrs	r3, r3, #2
 800810c:	9605      	str	r6, [sp, #20]
 800810e:	f303 030f 	ssat	r3, #16, r3
 8008112:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
 8008116:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 8008118:	42b3      	cmp	r3, r6
 800811a:	dd13      	ble.n	8008144 <D128_GENERIC+0x330>
 800811c:	9b01      	ldr	r3, [sp, #4]
 800811e:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8008120:	2a01      	cmp	r2, #1
 8008122:	f47f ae95 	bne.w	8007e50 <D128_GENERIC+0x3c>
 8008126:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008128:	f109 0610 	add.w	r6, r9, #16
 800812c:	0681      	lsls	r1, r0, #26
 800812e:	e9d9 4200 	ldrd	r4, r2, [r9]
 8008132:	e9d9 3502 	ldrd	r3, r5, [r9, #8]
 8008136:	d518      	bpl.n	800816a <D128_GENERIC+0x356>
 8008138:	ba64      	rev16	r4, r4
 800813a:	ba52      	rev16	r2, r2
 800813c:	ba5b      	rev16	r3, r3
 800813e:	ba6d      	rev16	r5, r5
 8008140:	46b1      	mov	r9, r6
 8008142:	e6da      	b.n	8007efa <D128_GENERIC+0xe6>
 8008144:	f8dd a010 	ldr.w	sl, [sp, #16]
 8008148:	9b01      	ldr	r3, [sp, #4]
 800814a:	2000      	movs	r0, #0
 800814c:	9903      	ldr	r1, [sp, #12]
 800814e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008150:	6099      	str	r1, [r3, #8]
 8008152:	9902      	ldr	r1, [sp, #8]
 8008154:	f8c3 a01c 	str.w	sl, [r3, #28]
 8008158:	60d9      	str	r1, [r3, #12]
 800815a:	9906      	ldr	r1, [sp, #24]
 800815c:	619a      	str	r2, [r3, #24]
 800815e:	6119      	str	r1, [r3, #16]
 8008160:	9907      	ldr	r1, [sp, #28]
 8008162:	6159      	str	r1, [r3, #20]
 8008164:	b00d      	add	sp, #52	; 0x34
 8008166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800816a:	46b1      	mov	r9, r6
 800816c:	e6c5      	b.n	8007efa <D128_GENERIC+0xe6>
 800816e:	bf00      	nop
 8008170:	24000000 	.word	0x24000000
 8008174:	00780069 	.word	0x00780069
 8008178:	005b004e 	.word	0x005b004e
 800817c:	00420037 	.word	0x00420037
 8008180:	002d0024 	.word	0x002d0024
 8008184:	001c0015 	.word	0x001c0015
 8008188:	000f000a 	.word	0x000f000a
 800818c:	00060003 	.word	0x00060003
 8008190:	00880096 	.word	0x00880096
 8008194:	00a200ac 	.word	0x00a200ac
 8008198:	0015001c 	.word	0x0015001c
 800819c:	0024002d 	.word	0x0024002d
 80081a0:	00370042 	.word	0x00370042
 80081a4:	004e005b 	.word	0x004e005b
 80081a8:	00690078 	.word	0x00690078
 80081ac:	00b400ba 	.word	0x00b400ba
 80081b0:	00be00c0 	.word	0x00be00c0
 80081b4:	00c000be 	.word	0x00c000be
 80081b8:	00ba00b4 	.word	0x00ba00b4
 80081bc:	00ac00a2 	.word	0x00ac00a2
 80081c0:	00960088 	.word	0x00960088
 80081c4:	00030006 	.word	0x00030006
 80081c8:	000a000f 	.word	0x000a000f

080081cc <D16_1CH_HTONS_VOL_HP>:
 80081cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081d0:	6993      	ldr	r3, [r2, #24]
 80081d2:	b087      	sub	sp, #28
 80081d4:	4682      	mov	sl, r0
 80081d6:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 80081d8:	9304      	str	r3, [sp, #16]
 80081da:	f8d2 b030 	ldr.w	fp, [r2, #48]	; 0x30
 80081de:	69d3      	ldr	r3, [r2, #28]
 80081e0:	f8d2 e020 	ldr.w	lr, [r2, #32]
 80081e4:	e9d2 5402 	ldrd	r5, r4, [r2, #8]
 80081e8:	e9d2 6c04 	ldrd	r6, ip, [r2, #16]
 80081ec:	9403      	str	r4, [sp, #12]
 80081ee:	2800      	cmp	r0, #0
 80081f0:	d054      	beq.n	800829c <D16_1CH_HTONS_VOL_HP+0xd0>
 80081f2:	f1a1 0902 	sub.w	r9, r1, #2
 80081f6:	eb0a 0140 	add.w	r1, sl, r0, lsl #1
 80081fa:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 80082a8 <D16_1CH_HTONS_VOL_HP+0xdc>
 80081fe:	4650      	mov	r0, sl
 8008200:	9101      	str	r1, [sp, #4]
 8008202:	4619      	mov	r1, r3
 8008204:	f8cd b008 	str.w	fp, [sp, #8]
 8008208:	9205      	str	r2, [sp, #20]
 800820a:	f850 3b02 	ldr.w	r3, [r0], #2
 800820e:	ba5b      	rev16	r3, r3
 8008210:	b2dc      	uxtb	r4, r3
 8008212:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8008216:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800821a:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 800821e:	4419      	add	r1, r3
 8008220:	eb04 2491 	add.w	r4, r4, r1, lsr #10
 8008224:	f3c1 0309 	ubfx	r3, r1, #0, #10
 8008228:	f3c4 0209 	ubfx	r2, r4, #0, #10
 800822c:	0aa1      	lsrs	r1, r4, #10
 800822e:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8008232:	4a1b      	ldr	r2, [pc, #108]	; (80082a0 <D16_1CH_HTONS_VOL_HP+0xd4>)
 8008234:	fb23 5402 	smlad	r4, r3, r2, r5
 8008238:	4a1a      	ldr	r2, [pc, #104]	; (80082a4 <D16_1CH_HTONS_VOL_HP+0xd8>)
 800823a:	fb23 f502 	smuad	r5, r3, r2
 800823e:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 8008242:	f04f 4a00 	mov.w	sl, #2147483648	; 0x80000000
 8008246:	f04f 0b00 	mov.w	fp, #0
 800824a:	19a2      	adds	r2, r4, r6
 800824c:	eba2 020c 	sub.w	r2, r2, ip
 8008250:	46a4      	mov	ip, r4
 8008252:	17d7      	asrs	r7, r2, #31
 8008254:	fba2 230e 	umull	r2, r3, r2, lr
 8008258:	f112 4600 	adds.w	r6, r2, #2147483648	; 0x80000000
 800825c:	fb0e 3307 	mla	r3, lr, r7, r3
 8008260:	f143 0700 	adc.w	r7, r3, #0
 8008264:	9b02      	ldr	r3, [sp, #8]
 8008266:	047a      	lsls	r2, r7, #17
 8008268:	007e      	lsls	r6, r7, #1
 800826a:	fbc3 ab02 	smlal	sl, fp, r3, r2
 800826e:	ea4f 03ab 	mov.w	r3, fp, asr #2
 8008272:	f303 030f 	ssat	r3, #16, r3
 8008276:	f829 3f02 	strh.w	r3, [r9, #2]!
 800827a:	9b01      	ldr	r3, [sp, #4]
 800827c:	4298      	cmp	r0, r3
 800827e:	d1c4      	bne.n	800820a <D16_1CH_HTONS_VOL_HP+0x3e>
 8008280:	460b      	mov	r3, r1
 8008282:	9a05      	ldr	r2, [sp, #20]
 8008284:	2000      	movs	r0, #0
 8008286:	9903      	ldr	r1, [sp, #12]
 8008288:	61d3      	str	r3, [r2, #28]
 800828a:	9b04      	ldr	r3, [sp, #16]
 800828c:	6095      	str	r5, [r2, #8]
 800828e:	60d1      	str	r1, [r2, #12]
 8008290:	6193      	str	r3, [r2, #24]
 8008292:	e9c2 6404 	strd	r6, r4, [r2, #16]
 8008296:	b007      	add	sp, #28
 8008298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800829c:	4664      	mov	r4, ip
 800829e:	e7f1      	b.n	8008284 <D16_1CH_HTONS_VOL_HP+0xb8>
 80082a0:	00030001 	.word	0x00030001
 80082a4:	00010003 	.word	0x00010003
 80082a8:	24000000 	.word	0x24000000

080082ac <D24_1CH_HTONS_VOL_HP>:
 80082ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082b0:	6b16      	ldr	r6, [r2, #48]	; 0x30
 80082b2:	b089      	sub	sp, #36	; 0x24
 80082b4:	6993      	ldr	r3, [r2, #24]
 80082b6:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 80082b8:	9604      	str	r6, [sp, #16]
 80082ba:	6a16      	ldr	r6, [r2, #32]
 80082bc:	9306      	str	r3, [sp, #24]
 80082be:	9505      	str	r5, [sp, #20]
 80082c0:	69d3      	ldr	r3, [r2, #28]
 80082c2:	9600      	str	r6, [sp, #0]
 80082c4:	e9d2 4a04 	ldrd	r4, sl, [r2, #16]
 80082c8:	e9d2 ce02 	ldrd	ip, lr, [r2, #8]
 80082cc:	2d00      	cmp	r5, #0
 80082ce:	f000 8083 	beq.w	80083d8 <D24_1CH_HTONS_VOL_HP+0x12c>
 80082d2:	9207      	str	r2, [sp, #28]
 80082d4:	2600      	movs	r6, #0
 80082d6:	4622      	mov	r2, r4
 80082d8:	f1a1 0b02 	sub.w	fp, r1, #2
 80082dc:	4f3f      	ldr	r7, [pc, #252]	; (80083dc <D24_1CH_HTONS_VOL_HP+0x130>)
 80082de:	461d      	mov	r5, r3
 80082e0:	f8cd a00c 	str.w	sl, [sp, #12]
 80082e4:	9c00      	ldr	r4, [sp, #0]
 80082e6:	e056      	b.n	8008396 <D24_1CH_HTONS_VOL_HP+0xea>
 80082e8:	7841      	ldrb	r1, [r0, #1]
 80082ea:	eb08 4809 	add.w	r8, r8, r9, lsl #16
 80082ee:	3002      	adds	r0, #2
 80082f0:	4488      	add	r8, r1
 80082f2:	fa5f f388 	uxtb.w	r3, r8
 80082f6:	f3c8 2907 	ubfx	r9, r8, #8, #8
 80082fa:	ea4f 4818 	mov.w	r8, r8, lsr #16
 80082fe:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 8008302:	f857 3029 	ldr.w	r3, [r7, r9, lsl #2]
 8008306:	eb01 2195 	add.w	r1, r1, r5, lsr #10
 800830a:	f857 5028 	ldr.w	r5, [r7, r8, lsl #2]
 800830e:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 8008312:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8008316:	f3c8 0309 	ubfx	r3, r8, #0, #10
 800831a:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 800831e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008322:	492f      	ldr	r1, [pc, #188]	; (80083e0 <D24_1CH_HTONS_VOL_HP+0x134>)
 8008324:	fb23 e901 	smlad	r9, r3, r1, lr
 8008328:	492e      	ldr	r1, [pc, #184]	; (80083e4 <D24_1CH_HTONS_VOL_HP+0x138>)
 800832a:	fb23 ce01 	smlad	lr, r3, r1, ip
 800832e:	f3c5 0c09 	ubfx	ip, r5, #0, #10
 8008332:	2101      	movs	r1, #1
 8008334:	eb0c 084c 	add.w	r8, ip, ip, lsl #1
 8008338:	eb0e 0e48 	add.w	lr, lr, r8, lsl #1
 800833c:	fb23 f301 	smuad	r3, r3, r1
 8008340:	f5a9 51d8 	sub.w	r1, r9, #6912	; 0x1b00
 8008344:	eb08 0c03 	add.w	ip, r8, r3
 8008348:	9b03      	ldr	r3, [sp, #12]
 800834a:	f04f 0a00 	mov.w	sl, #0
 800834e:	440a      	add	r2, r1
 8008350:	3601      	adds	r6, #1
 8008352:	9103      	str	r1, [sp, #12]
 8008354:	1ad2      	subs	r2, r2, r3
 8008356:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800835a:	fba2 2304 	umull	r2, r3, r2, r4
 800835e:	e9cd 2300 	strd	r2, r3, [sp]
 8008362:	fb04 3309 	mla	r3, r4, r9, r3
 8008366:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 800836a:	9301      	str	r3, [sp, #4]
 800836c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008370:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8008374:	f143 0300 	adc.w	r3, r3, #0
 8008378:	ea4f 38c3 	mov.w	r8, r3, lsl #15
 800837c:	005a      	lsls	r2, r3, #1
 800837e:	9b04      	ldr	r3, [sp, #16]
 8008380:	fbc3 9a08 	smlal	r9, sl, r3, r8
 8008384:	ea4f 03aa 	mov.w	r3, sl, asr #2
 8008388:	f303 030f 	ssat	r3, #16, r3
 800838c:	f82b 3f02 	strh.w	r3, [fp, #2]!
 8008390:	9b05      	ldr	r3, [sp, #20]
 8008392:	429e      	cmp	r6, r3
 8008394:	d010      	beq.n	80083b8 <D24_1CH_HTONS_VOL_HP+0x10c>
 8008396:	f890 9003 	ldrb.w	r9, [r0, #3]
 800839a:	f016 0f01 	tst.w	r6, #1
 800839e:	7801      	ldrb	r1, [r0, #0]
 80083a0:	ea4f 2309 	mov.w	r3, r9, lsl #8
 80083a4:	ea4f 2801 	mov.w	r8, r1, lsl #8
 80083a8:	d09e      	beq.n	80082e8 <D24_1CH_HTONS_VOL_HP+0x3c>
 80083aa:	f890 8002 	ldrb.w	r8, [r0, #2]
 80083ae:	3004      	adds	r0, #4
 80083b0:	eb03 4808 	add.w	r8, r3, r8, lsl #16
 80083b4:	4488      	add	r8, r1
 80083b6:	e79c      	b.n	80082f2 <D24_1CH_HTONS_VOL_HP+0x46>
 80083b8:	4614      	mov	r4, r2
 80083ba:	462b      	mov	r3, r5
 80083bc:	9a07      	ldr	r2, [sp, #28]
 80083be:	2000      	movs	r0, #0
 80083c0:	61d3      	str	r3, [r2, #28]
 80083c2:	9b06      	ldr	r3, [sp, #24]
 80083c4:	f8c2 c008 	str.w	ip, [r2, #8]
 80083c8:	f8c2 e00c 	str.w	lr, [r2, #12]
 80083cc:	6193      	str	r3, [r2, #24]
 80083ce:	e9c2 4104 	strd	r4, r1, [r2, #16]
 80083d2:	b009      	add	sp, #36	; 0x24
 80083d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083d8:	4651      	mov	r1, sl
 80083da:	e7f0      	b.n	80083be <D24_1CH_HTONS_VOL_HP+0x112>
 80083dc:	24000000 	.word	0x24000000
 80083e0:	00030001 	.word	0x00030001
 80083e4:	00060007 	.word	0x00060007

080083e8 <D32_1CH_HTONS_VOL_HP>:
 80083e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083ec:	6993      	ldr	r3, [r2, #24]
 80083ee:	b087      	sub	sp, #28
 80083f0:	4683      	mov	fp, r0
 80083f2:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 80083f4:	9304      	str	r3, [sp, #16]
 80083f6:	69d5      	ldr	r5, [r2, #28]
 80083f8:	6b14      	ldr	r4, [r2, #48]	; 0x30
 80083fa:	f8d2 a020 	ldr.w	sl, [r2, #32]
 80083fe:	e9d2 8e04 	ldrd	r8, lr, [r2, #16]
 8008402:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 8008406:	2800      	cmp	r0, #0
 8008408:	d077      	beq.n	80084fa <D32_1CH_HTONS_VOL_HP+0x112>
 800840a:	460f      	mov	r7, r1
 800840c:	46f1      	mov	r9, lr
 800840e:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8008412:	f8cd 8000 	str.w	r8, [sp]
 8008416:	4e3a      	ldr	r6, [pc, #232]	; (8008500 <D32_1CH_HTONS_VOL_HP+0x118>)
 8008418:	469e      	mov	lr, r3
 800841a:	46a0      	mov	r8, r4
 800841c:	9103      	str	r1, [sp, #12]
 800841e:	9205      	str	r2, [sp, #20]
 8008420:	f85b 4b04 	ldr.w	r4, [fp], #4
 8008424:	ba64      	rev16	r4, r4
 8008426:	b2e0      	uxtb	r0, r4
 8008428:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800842c:	f3c4 4107 	ubfx	r1, r4, #16, #8
 8008430:	0e24      	lsrs	r4, r4, #24
 8008432:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8008436:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800843a:	eb00 2095 	add.w	r0, r0, r5, lsr #10
 800843e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8008442:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
 8008446:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 800844a:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800844e:	eb01 2193 	add.w	r1, r1, r3, lsr #10
 8008452:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008456:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800845a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800845e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008462:	f3c5 0009 	ubfx	r0, r5, #0, #10
 8008466:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800846a:	4826      	ldr	r0, [pc, #152]	; (8008504 <D32_1CH_HTONS_VOL_HP+0x11c>)
 800846c:	fb23 c400 	smlad	r4, r3, r0, ip
 8008470:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008474:	fb21 4402 	smlad	r4, r1, r2, r4
 8008478:	4823      	ldr	r0, [pc, #140]	; (8008508 <D32_1CH_HTONS_VOL_HP+0x120>)
 800847a:	fb23 ec00 	smlad	ip, r3, r0, lr
 800847e:	4823      	ldr	r0, [pc, #140]	; (800850c <D32_1CH_HTONS_VOL_HP+0x124>)
 8008480:	fb21 cc00 	smlad	ip, r1, r0, ip
 8008484:	2201      	movs	r2, #1
 8008486:	fb23 f302 	smuad	r3, r3, r2
 800848a:	4821      	ldr	r0, [pc, #132]	; (8008510 <D32_1CH_HTONS_VOL_HP+0x128>)
 800848c:	fb21 3e00 	smlad	lr, r1, r0, r3
 8008490:	9b00      	ldr	r3, [sp, #0]
 8008492:	f5a4 4480 	sub.w	r4, r4, #16384	; 0x4000
 8008496:	4423      	add	r3, r4
 8008498:	eba3 0209 	sub.w	r2, r3, r9
 800849c:	46a1      	mov	r9, r4
 800849e:	17d1      	asrs	r1, r2, #31
 80084a0:	fba2 230a 	umull	r2, r3, r2, sl
 80084a4:	e9cd 2300 	strd	r2, r3, [sp]
 80084a8:	fb0a 3301 	mla	r3, sl, r1, r3
 80084ac:	9301      	str	r3, [sp, #4]
 80084ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80084b2:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 80084b6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80084ba:	f143 0300 	adc.w	r3, r3, #0
 80084be:	0399      	lsls	r1, r3, #14
 80084c0:	005b      	lsls	r3, r3, #1
 80084c2:	9300      	str	r3, [sp, #0]
 80084c4:	2300      	movs	r3, #0
 80084c6:	fbc8 2301 	smlal	r2, r3, r8, r1
 80084ca:	109b      	asrs	r3, r3, #2
 80084cc:	f303 030f 	ssat	r3, #16, r3
 80084d0:	f827 3b02 	strh.w	r3, [r7], #2
 80084d4:	9b03      	ldr	r3, [sp, #12]
 80084d6:	429f      	cmp	r7, r3
 80084d8:	d1a2      	bne.n	8008420 <D32_1CH_HTONS_VOL_HP+0x38>
 80084da:	4673      	mov	r3, lr
 80084dc:	f8dd 8000 	ldr.w	r8, [sp]
 80084e0:	9a05      	ldr	r2, [sp, #20]
 80084e2:	6093      	str	r3, [r2, #8]
 80084e4:	2000      	movs	r0, #0
 80084e6:	9b04      	ldr	r3, [sp, #16]
 80084e8:	f8c2 c00c 	str.w	ip, [r2, #12]
 80084ec:	61d5      	str	r5, [r2, #28]
 80084ee:	6193      	str	r3, [r2, #24]
 80084f0:	e9c2 8404 	strd	r8, r4, [r2, #16]
 80084f4:	b007      	add	sp, #28
 80084f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084fa:	4674      	mov	r4, lr
 80084fc:	e7f1      	b.n	80084e2 <D32_1CH_HTONS_VOL_HP+0xfa>
 80084fe:	bf00      	nop
 8008500:	24000000 	.word	0x24000000
 8008504:	00060003 	.word	0x00060003
 8008508:	000a000c 	.word	0x000a000c
 800850c:	000c000a 	.word	0x000c000a
 8008510:	00030006 	.word	0x00030006

08008514 <D48_1CH_HTONS_VOL_HP>:
 8008514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008518:	6b17      	ldr	r7, [r2, #48]	; 0x30
 800851a:	b087      	sub	sp, #28
 800851c:	6993      	ldr	r3, [r2, #24]
 800851e:	9701      	str	r7, [sp, #4]
 8008520:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8008522:	6a17      	ldr	r7, [r2, #32]
 8008524:	9304      	str	r3, [sp, #16]
 8008526:	69d6      	ldr	r6, [r2, #28]
 8008528:	9702      	str	r7, [sp, #8]
 800852a:	e9d2 4e04 	ldrd	r4, lr, [r2, #16]
 800852e:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 8008532:	2d00      	cmp	r5, #0
 8008534:	f000 8093 	beq.w	800865e <D48_1CH_HTONS_VOL_HP+0x14a>
 8008538:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800853c:	f1a1 0b02 	sub.w	fp, r1, #2
 8008540:	46f2      	mov	sl, lr
 8008542:	4f48      	ldr	r7, [pc, #288]	; (8008664 <D48_1CH_HTONS_VOL_HP+0x150>)
 8008544:	eb00 0145 	add.w	r1, r0, r5, lsl #1
 8008548:	469e      	mov	lr, r3
 800854a:	9205      	str	r2, [sp, #20]
 800854c:	9103      	str	r1, [sp, #12]
 800854e:	e9d0 3200 	ldrd	r3, r2, [r0]
 8008552:	3006      	adds	r0, #6
 8008554:	ba5b      	rev16	r3, r3
 8008556:	fa92 f992 	rev16.w	r9, r2
 800855a:	b2dd      	uxtb	r5, r3
 800855c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8008560:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8008564:	0e1b      	lsrs	r3, r3, #24
 8008566:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 800856a:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 800856e:	eb05 2696 	add.w	r6, r5, r6, lsr #10
 8008572:	f857 5022 	ldr.w	r5, [r7, r2, lsl #2]
 8008576:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800857a:	fa5f f289 	uxtb.w	r2, r9
 800857e:	eb01 2196 	add.w	r1, r1, r6, lsr #10
 8008582:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8008586:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800858a:	f3c6 0809 	ubfx	r8, r6, #0, #10
 800858e:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 8008592:	f857 6029 	ldr.w	r6, [r7, r9, lsl #2]
 8008596:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800859a:	eb03 2395 	add.w	r3, r3, r5, lsr #10
 800859e:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80085a2:	ea41 4808 	orr.w	r8, r1, r8, lsl #16
 80085a6:	eb02 2293 	add.w	r2, r2, r3, lsr #10
 80085aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80085ae:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 80085b2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80085b6:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 80085ba:	f3c6 0309 	ubfx	r3, r6, #0, #10
 80085be:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80085c2:	4b29      	ldr	r3, [pc, #164]	; (8008668 <D48_1CH_HTONS_VOL_HP+0x154>)
 80085c4:	fb28 c103 	smlad	r1, r8, r3, ip
 80085c8:	4b28      	ldr	r3, [pc, #160]	; (800866c <D48_1CH_HTONS_VOL_HP+0x158>)
 80085ca:	fb25 1103 	smlad	r1, r5, r3, r1
 80085ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80085d2:	fb22 1903 	smlad	r9, r2, r3, r1
 80085d6:	4b26      	ldr	r3, [pc, #152]	; (8008670 <D48_1CH_HTONS_VOL_HP+0x15c>)
 80085d8:	fb28 ec03 	smlad	ip, r8, r3, lr
 80085dc:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 80085e0:	fb25 cc03 	smlad	ip, r5, r3, ip
 80085e4:	4b23      	ldr	r3, [pc, #140]	; (8008674 <D48_1CH_HTONS_VOL_HP+0x160>)
 80085e6:	fb22 cc03 	smlad	ip, r2, r3, ip
 80085ea:	2101      	movs	r1, #1
 80085ec:	fb28 f801 	smuad	r8, r8, r1
 80085f0:	4b21      	ldr	r3, [pc, #132]	; (8008678 <D48_1CH_HTONS_VOL_HP+0x164>)
 80085f2:	fb25 8503 	smlad	r5, r5, r3, r8
 80085f6:	4b21      	ldr	r3, [pc, #132]	; (800867c <D48_1CH_HTONS_VOL_HP+0x168>)
 80085f8:	fb22 5e03 	smlad	lr, r2, r3, r5
 80085fc:	f5a9 4158 	sub.w	r1, r9, #55296	; 0xd800
 8008600:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8008604:	190a      	adds	r2, r1, r4
 8008606:	9c02      	ldr	r4, [sp, #8]
 8008608:	eba2 020a 	sub.w	r2, r2, sl
 800860c:	468a      	mov	sl, r1
 800860e:	ea4f 79e2 	mov.w	r9, r2, asr #31
 8008612:	fba2 2304 	umull	r2, r3, r2, r4
 8008616:	fb04 3309 	mla	r3, r4, r9, r3
 800861a:	f112 4400 	adds.w	r4, r2, #2147483648	; 0x80000000
 800861e:	f04f 0900 	mov.w	r9, #0
 8008622:	f143 0500 	adc.w	r5, r3, #0
 8008626:	9b01      	ldr	r3, [sp, #4]
 8008628:	032a      	lsls	r2, r5, #12
 800862a:	006c      	lsls	r4, r5, #1
 800862c:	fbc3 8902 	smlal	r8, r9, r3, r2
 8008630:	ea4f 03a9 	mov.w	r3, r9, asr #2
 8008634:	f303 030f 	ssat	r3, #16, r3
 8008638:	f82b 3f02 	strh.w	r3, [fp, #2]!
 800863c:	9b03      	ldr	r3, [sp, #12]
 800863e:	4283      	cmp	r3, r0
 8008640:	d185      	bne.n	800854e <D48_1CH_HTONS_VOL_HP+0x3a>
 8008642:	4673      	mov	r3, lr
 8008644:	9a05      	ldr	r2, [sp, #20]
 8008646:	6093      	str	r3, [r2, #8]
 8008648:	2000      	movs	r0, #0
 800864a:	9b04      	ldr	r3, [sp, #16]
 800864c:	f8c2 c00c 	str.w	ip, [r2, #12]
 8008650:	61d6      	str	r6, [r2, #28]
 8008652:	6193      	str	r3, [r2, #24]
 8008654:	e9c2 4104 	strd	r4, r1, [r2, #16]
 8008658:	b007      	add	sp, #28
 800865a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800865e:	4671      	mov	r1, lr
 8008660:	e7f1      	b.n	8008646 <D48_1CH_HTONS_VOL_HP+0x132>
 8008662:	bf00      	nop
 8008664:	24000000 	.word	0x24000000
 8008668:	000f000a 	.word	0x000f000a
 800866c:	00060003 	.word	0x00060003
 8008670:	00150019 	.word	0x00150019
 8008674:	00190015 	.word	0x00190015
 8008678:	00030006 	.word	0x00030006
 800867c:	000a000f 	.word	0x000a000f

08008680 <D64_1CH_HTONS_VOL_HP>:
 8008680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008684:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8008686:	b089      	sub	sp, #36	; 0x24
 8008688:	6993      	ldr	r3, [r2, #24]
 800868a:	4686      	mov	lr, r0
 800868c:	9503      	str	r5, [sp, #12]
 800868e:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 8008690:	6a15      	ldr	r5, [r2, #32]
 8008692:	9306      	str	r3, [sp, #24]
 8008694:	69d6      	ldr	r6, [r2, #28]
 8008696:	9504      	str	r5, [sp, #16]
 8008698:	e9d2 8404 	ldrd	r8, r4, [r2, #16]
 800869c:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 80086a0:	2800      	cmp	r0, #0
 80086a2:	f000 80a4 	beq.w	80087ee <D64_1CH_HTONS_VOL_HP+0x16e>
 80086a6:	460f      	mov	r7, r1
 80086a8:	46f1      	mov	r9, lr
 80086aa:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 80086ae:	4d56      	ldr	r5, [pc, #344]	; (8008808 <D64_1CH_HTONS_VOL_HP+0x188>)
 80086b0:	46a2      	mov	sl, r4
 80086b2:	469e      	mov	lr, r3
 80086b4:	9105      	str	r1, [sp, #20]
 80086b6:	9207      	str	r2, [sp, #28]
 80086b8:	f859 1b08 	ldr.w	r1, [r9], #8
 80086bc:	f859 3c04 	ldr.w	r3, [r9, #-4]
 80086c0:	ba49      	rev16	r1, r1
 80086c2:	fa93 fb93 	rev16.w	fp, r3
 80086c6:	b2cb      	uxtb	r3, r1
 80086c8:	f3c1 2207 	ubfx	r2, r1, #8, #8
 80086cc:	f3c1 4007 	ubfx	r0, r1, #16, #8
 80086d0:	0e09      	lsrs	r1, r1, #24
 80086d2:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
 80086d6:	fa5f f38b 	uxtb.w	r3, fp
 80086da:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80086de:	4426      	add	r6, r4
 80086e0:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 80086e4:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 80086e8:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 80086ec:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 80086f0:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80086f4:	f3cb 2307 	ubfx	r3, fp, #8, #8
 80086f8:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 80086fc:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8008700:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8008704:	eb01 2194 	add.w	r1, r1, r4, lsr #10
 8008708:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800870c:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8008710:	f3cb 4607 	ubfx	r6, fp, #16, #8
 8008714:	eb00 2091 	add.w	r0, r0, r1, lsr #10
 8008718:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800871c:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 8008720:	ea4f 6b1b 	mov.w	fp, fp, lsr #24
 8008724:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 8008728:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800872c:	f855 b02b 	ldr.w	fp, [r5, fp, lsl #2]
 8008730:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008734:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 8008738:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800873c:	eb0b 2b96 	add.w	fp, fp, r6, lsr #10
 8008740:	f3c6 0409 	ubfx	r4, r6, #0, #10
 8008744:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008748:	f3cb 0009 	ubfx	r0, fp, #0, #10
 800874c:	ea4f 269b 	mov.w	r6, fp, lsr #10
 8008750:	ea40 4b04 	orr.w	fp, r0, r4, lsl #16
 8008754:	482d      	ldr	r0, [pc, #180]	; (800880c <D64_1CH_HTONS_VOL_HP+0x18c>)
 8008756:	fb22 cc00 	smlad	ip, r2, r0, ip
 800875a:	482d      	ldr	r0, [pc, #180]	; (8008810 <D64_1CH_HTONS_VOL_HP+0x190>)
 800875c:	fb21 cc00 	smlad	ip, r1, r0, ip
 8008760:	482c      	ldr	r0, [pc, #176]	; (8008814 <D64_1CH_HTONS_VOL_HP+0x194>)
 8008762:	fb23 cc00 	smlad	ip, r3, r0, ip
 8008766:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 800876a:	fb2b c404 	smlad	r4, fp, r4, ip
 800876e:	482a      	ldr	r0, [pc, #168]	; (8008818 <D64_1CH_HTONS_VOL_HP+0x198>)
 8008770:	fb22 ec00 	smlad	ip, r2, r0, lr
 8008774:	fb2b cc10 	smladx	ip, fp, r0, ip
 8008778:	4828      	ldr	r0, [pc, #160]	; (800881c <D64_1CH_HTONS_VOL_HP+0x19c>)
 800877a:	fb21 cc00 	smlad	ip, r1, r0, ip
 800877e:	fb23 cc10 	smladx	ip, r3, r0, ip
 8008782:	f04f 0e01 	mov.w	lr, #1
 8008786:	fb22 f20e 	smuad	r2, r2, lr
 800878a:	4825      	ldr	r0, [pc, #148]	; (8008820 <D64_1CH_HTONS_VOL_HP+0x1a0>)
 800878c:	fb21 2100 	smlad	r1, r1, r0, r2
 8008790:	4a24      	ldr	r2, [pc, #144]	; (8008824 <D64_1CH_HTONS_VOL_HP+0x1a4>)
 8008792:	fb23 1302 	smlad	r3, r3, r2, r1
 8008796:	4a24      	ldr	r2, [pc, #144]	; (8008828 <D64_1CH_HTONS_VOL_HP+0x1a8>)
 8008798:	fb2b 3e02 	smlad	lr, fp, r2, r3
 800879c:	f5a4 3400 	sub.w	r4, r4, #131072	; 0x20000
 80087a0:	eb04 0208 	add.w	r2, r4, r8
 80087a4:	eba2 020a 	sub.w	r2, r2, sl
 80087a8:	46a2      	mov	sl, r4
 80087aa:	4610      	mov	r0, r2
 80087ac:	17d1      	asrs	r1, r2, #31
 80087ae:	e9cd 0100 	strd	r0, r1, [sp]
 80087b2:	9904      	ldr	r1, [sp, #16]
 80087b4:	9801      	ldr	r0, [sp, #4]
 80087b6:	fba2 2301 	umull	r2, r3, r2, r1
 80087ba:	fb01 3300 	mla	r3, r1, r0, r3
 80087be:	f112 4000 	adds.w	r0, r2, #2147483648	; 0x80000000
 80087c2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80087c6:	f143 0100 	adc.w	r1, r3, #0
 80087ca:	9b03      	ldr	r3, [sp, #12]
 80087cc:	02ca      	lsls	r2, r1, #11
 80087ce:	ea4f 0841 	mov.w	r8, r1, lsl #1
 80087d2:	2100      	movs	r1, #0
 80087d4:	fbc3 0102 	smlal	r0, r1, r3, r2
 80087d8:	108b      	asrs	r3, r1, #2
 80087da:	f303 030f 	ssat	r3, #16, r3
 80087de:	f827 3b02 	strh.w	r3, [r7], #2
 80087e2:	9b05      	ldr	r3, [sp, #20]
 80087e4:	429f      	cmp	r7, r3
 80087e6:	f47f af67 	bne.w	80086b8 <D64_1CH_HTONS_VOL_HP+0x38>
 80087ea:	4673      	mov	r3, lr
 80087ec:	9a07      	ldr	r2, [sp, #28]
 80087ee:	6093      	str	r3, [r2, #8]
 80087f0:	2000      	movs	r0, #0
 80087f2:	9b06      	ldr	r3, [sp, #24]
 80087f4:	f8c2 c00c 	str.w	ip, [r2, #12]
 80087f8:	61d6      	str	r6, [r2, #28]
 80087fa:	6193      	str	r3, [r2, #24]
 80087fc:	e9c2 8404 	strd	r8, r4, [r2, #16]
 8008800:	b009      	add	sp, #36	; 0x24
 8008802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008806:	bf00      	nop
 8008808:	24000000 	.word	0x24000000
 800880c:	001c0015 	.word	0x001c0015
 8008810:	000f000a 	.word	0x000f000a
 8008814:	00060003 	.word	0x00060003
 8008818:	0024002a 	.word	0x0024002a
 800881c:	002e0030 	.word	0x002e0030
 8008820:	00030006 	.word	0x00030006
 8008824:	000a000f 	.word	0x000a000f
 8008828:	0015001c 	.word	0x0015001c

0800882c <D80_1CH_HTONS_VOL_HP>:
 800882c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008830:	6913      	ldr	r3, [r2, #16]
 8008832:	b089      	sub	sp, #36	; 0x24
 8008834:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8008836:	9301      	str	r3, [sp, #4]
 8008838:	9603      	str	r6, [sp, #12]
 800883a:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800883c:	6a16      	ldr	r6, [r2, #32]
 800883e:	e9d2 5305 	ldrd	r5, r3, [r2, #20]
 8008842:	e9d2 7c02 	ldrd	r7, ip, [r2, #8]
 8008846:	9306      	str	r3, [sp, #24]
 8008848:	9604      	str	r6, [sp, #16]
 800884a:	69d3      	ldr	r3, [r2, #28]
 800884c:	2c00      	cmp	r4, #0
 800884e:	f000 80ce 	beq.w	80089ee <D80_1CH_HTONS_VOL_HP+0x1c2>
 8008852:	3902      	subs	r1, #2
 8008854:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8008858:	4e66      	ldr	r6, [pc, #408]	; (80089f4 <D80_1CH_HTONS_VOL_HP+0x1c8>)
 800885a:	469e      	mov	lr, r3
 800885c:	9102      	str	r1, [sp, #8]
 800885e:	46aa      	mov	sl, r5
 8008860:	eb00 0144 	add.w	r1, r0, r4, lsl #1
 8008864:	9207      	str	r2, [sp, #28]
 8008866:	9105      	str	r1, [sp, #20]
 8008868:	6883      	ldr	r3, [r0, #8]
 800886a:	e9d0 4200 	ldrd	r4, r2, [r0]
 800886e:	300a      	adds	r0, #10
 8008870:	ba64      	rev16	r4, r4
 8008872:	ba52      	rev16	r2, r2
 8008874:	fa93 fb93 	rev16.w	fp, r3
 8008878:	b2e5      	uxtb	r5, r4
 800887a:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800887e:	f3c4 4107 	ubfx	r1, r4, #16, #8
 8008882:	0e24      	lsrs	r4, r4, #24
 8008884:	f856 8025 	ldr.w	r8, [r6, r5, lsl #2]
 8008888:	b2d5      	uxtb	r5, r2
 800888a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800888e:	44c6      	add	lr, r8
 8008890:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8008894:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
 8008898:	eb03 239e 	add.w	r3, r3, lr, lsr #10
 800889c:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 80088a0:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 80088a4:	eb01 2993 	add.w	r9, r1, r3, lsr #10
 80088a8:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80088ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80088b0:	eb04 2499 	add.w	r4, r4, r9, lsr #10
 80088b4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80088b8:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80088bc:	f3cb 2e07 	ubfx	lr, fp, #8, #8
 80088c0:	eb05 2894 	add.w	r8, r5, r4, lsr #10
 80088c4:	f3c2 4507 	ubfx	r5, r2, #16, #8
 80088c8:	0e12      	lsrs	r2, r2, #24
 80088ca:	f856 e02e 	ldr.w	lr, [r6, lr, lsl #2]
 80088ce:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 80088d2:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 80088d6:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 80088da:	fa5f fb8b 	uxtb.w	fp, fp
 80088de:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 80088e2:	f3c8 0809 	ubfx	r8, r8, #0, #10
 80088e6:	f856 b02b 	ldr.w	fp, [r6, fp, lsl #2]
 80088ea:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80088ee:	eb02 2295 	add.w	r2, r2, r5, lsr #10
 80088f2:	f3c9 0909 	ubfx	r9, r9, #0, #10
 80088f6:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80088fa:	ea41 4808 	orr.w	r8, r1, r8, lsl #16
 80088fe:	eb0b 2b92 	add.w	fp, fp, r2, lsr #10
 8008902:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8008906:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800890a:	eb0e 2e9b 	add.w	lr, lr, fp, lsr #10
 800890e:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8008912:	ea44 4409 	orr.w	r4, r4, r9, lsl #16
 8008916:	f3ce 0109 	ubfx	r1, lr, #0, #10
 800891a:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 800891e:	ea4f 2e9e 	mov.w	lr, lr, lsr #10
 8008922:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 8008926:	4934      	ldr	r1, [pc, #208]	; (80089f8 <D80_1CH_HTONS_VOL_HP+0x1cc>)
 8008928:	fb23 cc01 	smlad	ip, r3, r1, ip
 800892c:	4933      	ldr	r1, [pc, #204]	; (80089fc <D80_1CH_HTONS_VOL_HP+0x1d0>)
 800892e:	fb24 cc01 	smlad	ip, r4, r1, ip
 8008932:	4933      	ldr	r1, [pc, #204]	; (8008a00 <D80_1CH_HTONS_VOL_HP+0x1d4>)
 8008934:	fb28 cc01 	smlad	ip, r8, r1, ip
 8008938:	4932      	ldr	r1, [pc, #200]	; (8008a04 <D80_1CH_HTONS_VOL_HP+0x1d8>)
 800893a:	fb22 cc01 	smlad	ip, r2, r1, ip
 800893e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8008942:	fb2b c901 	smlad	r9, fp, r1, ip
 8008946:	4930      	ldr	r1, [pc, #192]	; (8008a08 <D80_1CH_HTONS_VOL_HP+0x1dc>)
 8008948:	fb23 7701 	smlad	r7, r3, r1, r7
 800894c:	492f      	ldr	r1, [pc, #188]	; (8008a0c <D80_1CH_HTONS_VOL_HP+0x1e0>)
 800894e:	fb24 7701 	smlad	r7, r4, r1, r7
 8008952:	f04f 1c4b 	mov.w	ip, #4915275	; 0x4b004b
 8008956:	fb28 7c0c 	smlad	ip, r8, ip, r7
 800895a:	492d      	ldr	r1, [pc, #180]	; (8008a10 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 800895c:	fb22 cc01 	smlad	ip, r2, r1, ip
 8008960:	492c      	ldr	r1, [pc, #176]	; (8008a14 <D80_1CH_HTONS_VOL_HP+0x1e8>)
 8008962:	fb2b cc01 	smlad	ip, fp, r1, ip
 8008966:	2101      	movs	r1, #1
 8008968:	fb23 f301 	smuad	r3, r3, r1
 800896c:	492a      	ldr	r1, [pc, #168]	; (8008a18 <D80_1CH_HTONS_VOL_HP+0x1ec>)
 800896e:	fb24 3401 	smlad	r4, r4, r1, r3
 8008972:	492a      	ldr	r1, [pc, #168]	; (8008a1c <D80_1CH_HTONS_VOL_HP+0x1f0>)
 8008974:	fb28 4101 	smlad	r1, r8, r1, r4
 8008978:	4f29      	ldr	r7, [pc, #164]	; (8008a20 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 800897a:	fb22 1207 	smlad	r2, r2, r7, r1
 800897e:	4f29      	ldr	r7, [pc, #164]	; (8008a24 <D80_1CH_HTONS_VOL_HP+0x1f8>)
 8008980:	fb2b 2707 	smlad	r7, fp, r7, r2
 8008984:	f5a9 317a 	sub.w	r1, r9, #256000	; 0x3e800
 8008988:	9b01      	ldr	r3, [sp, #4]
 800898a:	9c04      	ldr	r4, [sp, #16]
 800898c:	440b      	add	r3, r1
 800898e:	eba3 020a 	sub.w	r2, r3, sl
 8008992:	468a      	mov	sl, r1
 8008994:	ea4f 79e2 	mov.w	r9, r2, asr #31
 8008998:	fba2 2304 	umull	r2, r3, r2, r4
 800899c:	fb04 3309 	mla	r3, r4, r9, r3
 80089a0:	f112 4400 	adds.w	r4, r2, #2147483648	; 0x80000000
 80089a4:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80089a8:	f143 0500 	adc.w	r5, r3, #0
 80089ac:	006b      	lsls	r3, r5, #1
 80089ae:	02aa      	lsls	r2, r5, #10
 80089b0:	2500      	movs	r5, #0
 80089b2:	9301      	str	r3, [sp, #4]
 80089b4:	9b03      	ldr	r3, [sp, #12]
 80089b6:	fbc3 4502 	smlal	r4, r5, r3, r2
 80089ba:	9a02      	ldr	r2, [sp, #8]
 80089bc:	10ab      	asrs	r3, r5, #2
 80089be:	f303 030f 	ssat	r3, #16, r3
 80089c2:	f822 3f02 	strh.w	r3, [r2, #2]!
 80089c6:	9b05      	ldr	r3, [sp, #20]
 80089c8:	9202      	str	r2, [sp, #8]
 80089ca:	4298      	cmp	r0, r3
 80089cc:	f47f af4c 	bne.w	8008868 <D80_1CH_HTONS_VOL_HP+0x3c>
 80089d0:	4673      	mov	r3, lr
 80089d2:	9a07      	ldr	r2, [sp, #28]
 80089d4:	61d3      	str	r3, [r2, #28]
 80089d6:	2000      	movs	r0, #0
 80089d8:	9b01      	ldr	r3, [sp, #4]
 80089da:	6097      	str	r7, [r2, #8]
 80089dc:	f8c2 c00c 	str.w	ip, [r2, #12]
 80089e0:	e9c2 3104 	strd	r3, r1, [r2, #16]
 80089e4:	9b06      	ldr	r3, [sp, #24]
 80089e6:	6193      	str	r3, [r2, #24]
 80089e8:	b009      	add	sp, #36	; 0x24
 80089ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089ee:	4629      	mov	r1, r5
 80089f0:	e7f0      	b.n	80089d4 <D80_1CH_HTONS_VOL_HP+0x1a8>
 80089f2:	bf00      	nop
 80089f4:	24000000 	.word	0x24000000
 80089f8:	002d0024 	.word	0x002d0024
 80089fc:	001c0015 	.word	0x001c0015
 8008a00:	000f000a 	.word	0x000f000a
 8008a04:	00060003 	.word	0x00060003
 8008a08:	0037003f 	.word	0x0037003f
 8008a0c:	00450049 	.word	0x00450049
 8008a10:	00490045 	.word	0x00490045
 8008a14:	003f0037 	.word	0x003f0037
 8008a18:	00030006 	.word	0x00030006
 8008a1c:	000a000f 	.word	0x000a000f
 8008a20:	0015001c 	.word	0x0015001c
 8008a24:	0024002d 	.word	0x0024002d

08008a28 <D128_1CH_HTONS_VOL_HP>:
 8008a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a2c:	6914      	ldr	r4, [r2, #16]
 8008a2e:	b08d      	sub	sp, #52	; 0x34
 8008a30:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8008a32:	9404      	str	r4, [sp, #16]
 8008a34:	6954      	ldr	r4, [r2, #20]
 8008a36:	920b      	str	r2, [sp, #44]	; 0x2c
 8008a38:	9405      	str	r4, [sp, #20]
 8008a3a:	6994      	ldr	r4, [r2, #24]
 8008a3c:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 8008a40:	940a      	str	r4, [sp, #40]	; 0x28
 8008a42:	6894      	ldr	r4, [r2, #8]
 8008a44:	9403      	str	r4, [sp, #12]
 8008a46:	68d4      	ldr	r4, [r2, #12]
 8008a48:	9402      	str	r4, [sp, #8]
 8008a4a:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8008a4c:	6a12      	ldr	r2, [r2, #32]
 8008a4e:	9407      	str	r4, [sp, #28]
 8008a50:	9208      	str	r2, [sp, #32]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	f000 812e 	beq.w	8008cb4 <D128_1CH_HTONS_VOL_HP+0x28c>
 8008a58:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8008a5c:	f100 0b10 	add.w	fp, r0, #16
 8008a60:	f8df 9290 	ldr.w	r9, [pc, #656]	; 8008cf4 <D128_1CH_HTONS_VOL_HP+0x2cc>
 8008a64:	9106      	str	r1, [sp, #24]
 8008a66:	9309      	str	r3, [sp, #36]	; 0x24
 8008a68:	e95b 0204 	ldrd	r0, r2, [fp, #-16]
 8008a6c:	e95b 3602 	ldrd	r3, r6, [fp, #-8]
 8008a70:	ba40      	rev16	r0, r0
 8008a72:	ba52      	rev16	r2, r2
 8008a74:	ba5b      	rev16	r3, r3
 8008a76:	ba76      	rev16	r6, r6
 8008a78:	b2c5      	uxtb	r5, r0
 8008a7a:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8008a7e:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8008a82:	0e00      	lsrs	r0, r0, #24
 8008a84:	f859 7025 	ldr.w	r7, [r9, r5, lsl #2]
 8008a88:	b2d5      	uxtb	r5, r2
 8008a8a:	f859 e024 	ldr.w	lr, [r9, r4, lsl #2]
 8008a8e:	f3c2 2407 	ubfx	r4, r2, #8, #8
 8008a92:	44bc      	add	ip, r7
 8008a94:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008a98:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
 8008a9c:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8008aa0:	eb0e 2e9c 	add.w	lr, lr, ip, lsr #10
 8008aa4:	f859 a025 	ldr.w	sl, [r9, r5, lsl #2]
 8008aa8:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 8008aac:	0e12      	lsrs	r2, r2, #24
 8008aae:	eb01 219e 	add.w	r1, r1, lr, lsr #10
 8008ab2:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 8008ab6:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8008aba:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8008abe:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 8008ac2:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 8008ac6:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8008aca:	b2da      	uxtb	r2, r3
 8008acc:	eb0a 2a97 	add.w	sl, sl, r7, lsr #10
 8008ad0:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8008ad4:	ea4e 4e0c 	orr.w	lr, lr, ip, lsl #16
 8008ad8:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 8008adc:	eb05 259a 	add.w	r5, r5, sl, lsr #10
 8008ae0:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8008ae4:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8008ae8:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8008aec:	eb00 2c95 	add.w	ip, r0, r5, lsr #10
 8008af0:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8008af4:	f859 8021 	ldr.w	r8, [r9, r1, lsl #2]
 8008af8:	f3c3 4107 	ubfx	r1, r3, #16, #8
 8008afc:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 8008b00:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8008b04:	f859 0021 	ldr.w	r0, [r9, r1, lsl #2]
 8008b08:	0e1b      	lsrs	r3, r3, #24
 8008b0a:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 8008b0e:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8008b12:	f859 1023 	ldr.w	r1, [r9, r3, lsl #2]
 8008b16:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 8008b1a:	eb08 2892 	add.w	r8, r8, r2, lsr #10
 8008b1e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8008b22:	b2f3      	uxtb	r3, r6
 8008b24:	eb00 2a98 	add.w	sl, r0, r8, lsr #10
 8008b28:	f3c8 0009 	ubfx	r0, r8, #0, #10
 8008b2c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008b30:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 8008b34:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 8008b38:	f3c6 2c07 	ubfx	ip, r6, #8, #8
 8008b3c:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8008b40:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8008b44:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 8008b48:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 8008b4c:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 8008b50:	0e36      	lsrs	r6, r6, #24
 8008b52:	eb02 2298 	add.w	r2, r2, r8, lsr #10
 8008b56:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8008b5a:	f859 302c 	ldr.w	r3, [r9, ip, lsl #2]
 8008b5e:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8008b62:	f859 c026 	ldr.w	ip, [r9, r6, lsl #2]
 8008b66:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008b6a:	eb03 2692 	add.w	r6, r3, r2, lsr #10
 8008b6e:	f3c2 0309 	ubfx	r3, r2, #0, #10
 8008b72:	9101      	str	r1, [sp, #4]
 8008b74:	ea43 4208 	orr.w	r2, r3, r8, lsl #16
 8008b78:	9b02      	ldr	r3, [sp, #8]
 8008b7a:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 8008b7e:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8008b82:	4611      	mov	r1, r2
 8008b84:	f3cc 0209 	ubfx	r2, ip, #0, #10
 8008b88:	ea4f 2c9c 	mov.w	ip, ip, lsr #10
 8008b8c:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8008b90:	4a49      	ldr	r2, [pc, #292]	; (8008cb8 <D128_1CH_HTONS_VOL_HP+0x290>)
 8008b92:	fb2e 3202 	smlad	r2, lr, r2, r3
 8008b96:	4b49      	ldr	r3, [pc, #292]	; (8008cbc <D128_1CH_HTONS_VOL_HP+0x294>)
 8008b98:	fb27 2203 	smlad	r2, r7, r3, r2
 8008b9c:	4b48      	ldr	r3, [pc, #288]	; (8008cc0 <D128_1CH_HTONS_VOL_HP+0x298>)
 8008b9e:	fb25 2203 	smlad	r2, r5, r3, r2
 8008ba2:	4b48      	ldr	r3, [pc, #288]	; (8008cc4 <D128_1CH_HTONS_VOL_HP+0x29c>)
 8008ba4:	fb24 2203 	smlad	r2, r4, r3, r2
 8008ba8:	4b47      	ldr	r3, [pc, #284]	; (8008cc8 <D128_1CH_HTONS_VOL_HP+0x2a0>)
 8008baa:	fb20 2803 	smlad	r8, r0, r3, r2
 8008bae:	4b47      	ldr	r3, [pc, #284]	; (8008ccc <D128_1CH_HTONS_VOL_HP+0x2a4>)
 8008bb0:	9a01      	ldr	r2, [sp, #4]
 8008bb2:	fb22 8203 	smlad	r2, r2, r3, r8
 8008bb6:	4b46      	ldr	r3, [pc, #280]	; (8008cd0 <D128_1CH_HTONS_VOL_HP+0x2a8>)
 8008bb8:	9102      	str	r1, [sp, #8]
 8008bba:	fb21 2203 	smlad	r2, r1, r3, r2
 8008bbe:	f44f 3880 	mov.w	r8, #65536	; 0x10000
 8008bc2:	fb26 2308 	smlad	r3, r6, r8, r2
 8008bc6:	4619      	mov	r1, r3
 8008bc8:	9a03      	ldr	r2, [sp, #12]
 8008bca:	4b42      	ldr	r3, [pc, #264]	; (8008cd4 <D128_1CH_HTONS_VOL_HP+0x2ac>)
 8008bcc:	fb2e 2803 	smlad	r8, lr, r3, r2
 8008bd0:	4b41      	ldr	r3, [pc, #260]	; (8008cd8 <D128_1CH_HTONS_VOL_HP+0x2b0>)
 8008bd2:	fb27 8a03 	smlad	sl, r7, r3, r8
 8008bd6:	f8df 8120 	ldr.w	r8, [pc, #288]	; 8008cf8 <D128_1CH_HTONS_VOL_HP+0x2d0>
 8008bda:	fb25 a808 	smlad	r8, r5, r8, sl
 8008bde:	f8df a11c 	ldr.w	sl, [pc, #284]	; 8008cfc <D128_1CH_HTONS_VOL_HP+0x2d4>
 8008be2:	fb24 880a 	smlad	r8, r4, sl, r8
 8008be6:	f8df a118 	ldr.w	sl, [pc, #280]	; 8008d00 <D128_1CH_HTONS_VOL_HP+0x2d8>
 8008bea:	fb20 8a0a 	smlad	sl, r0, sl, r8
 8008bee:	f8df 8114 	ldr.w	r8, [pc, #276]	; 8008d04 <D128_1CH_HTONS_VOL_HP+0x2dc>
 8008bf2:	9b01      	ldr	r3, [sp, #4]
 8008bf4:	fb23 aa08 	smlad	sl, r3, r8, sl
 8008bf8:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8008d08 <D128_1CH_HTONS_VOL_HP+0x2e0>
 8008bfc:	9a02      	ldr	r2, [sp, #8]
 8008bfe:	fb22 a808 	smlad	r8, r2, r8, sl
 8008c02:	f8df a108 	ldr.w	sl, [pc, #264]	; 8008d0c <D128_1CH_HTONS_VOL_HP+0x2e4>
 8008c06:	fb26 830a 	smlad	r3, r6, sl, r8
 8008c0a:	f04f 0801 	mov.w	r8, #1
 8008c0e:	9302      	str	r3, [sp, #8]
 8008c10:	fb2e fe08 	smuad	lr, lr, r8
 8008c14:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 8008d10 <D128_1CH_HTONS_VOL_HP+0x2e8>
 8008c18:	fb27 ee08 	smlad	lr, r7, r8, lr
 8008c1c:	4f2f      	ldr	r7, [pc, #188]	; (8008cdc <D128_1CH_HTONS_VOL_HP+0x2b4>)
 8008c1e:	fb25 ee07 	smlad	lr, r5, r7, lr
 8008c22:	4f2f      	ldr	r7, [pc, #188]	; (8008ce0 <D128_1CH_HTONS_VOL_HP+0x2b8>)
 8008c24:	fb24 ee07 	smlad	lr, r4, r7, lr
 8008c28:	4f2e      	ldr	r7, [pc, #184]	; (8008ce4 <D128_1CH_HTONS_VOL_HP+0x2bc>)
 8008c2a:	fb20 ee07 	smlad	lr, r0, r7, lr
 8008c2e:	4f2e      	ldr	r7, [pc, #184]	; (8008ce8 <D128_1CH_HTONS_VOL_HP+0x2c0>)
 8008c30:	9b01      	ldr	r3, [sp, #4]
 8008c32:	fb23 ee07 	smlad	lr, r3, r7, lr
 8008c36:	4f2d      	ldr	r7, [pc, #180]	; (8008cec <D128_1CH_HTONS_VOL_HP+0x2c4>)
 8008c38:	fb22 e707 	smlad	r7, r2, r7, lr
 8008c3c:	4b2c      	ldr	r3, [pc, #176]	; (8008cf0 <D128_1CH_HTONS_VOL_HP+0x2c8>)
 8008c3e:	fb26 7303 	smlad	r3, r6, r3, r7
 8008c42:	f5a1 1680 	sub.w	r6, r1, #1048576	; 0x100000
 8008c46:	9303      	str	r3, [sp, #12]
 8008c48:	9b04      	ldr	r3, [sp, #16]
 8008c4a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8008c4e:	9f08      	ldr	r7, [sp, #32]
 8008c50:	2100      	movs	r1, #0
 8008c52:	4433      	add	r3, r6
 8008c54:	f10b 0b10 	add.w	fp, fp, #16
 8008c58:	461a      	mov	r2, r3
 8008c5a:	9b05      	ldr	r3, [sp, #20]
 8008c5c:	9605      	str	r6, [sp, #20]
 8008c5e:	1ad2      	subs	r2, r2, r3
 8008c60:	17d5      	asrs	r5, r2, #31
 8008c62:	fba2 2307 	umull	r2, r3, r2, r7
 8008c66:	1814      	adds	r4, r2, r0
 8008c68:	fb07 3305 	mla	r3, r7, r5, r3
 8008c6c:	eb43 0501 	adc.w	r5, r3, r1
 8008c70:	006b      	lsls	r3, r5, #1
 8008c72:	022a      	lsls	r2, r5, #8
 8008c74:	9304      	str	r3, [sp, #16]
 8008c76:	9b07      	ldr	r3, [sp, #28]
 8008c78:	fbc3 0102 	smlal	r0, r1, r3, r2
 8008c7c:	9a06      	ldr	r2, [sp, #24]
 8008c7e:	108b      	asrs	r3, r1, #2
 8008c80:	f303 030f 	ssat	r3, #16, r3
 8008c84:	f822 3b02 	strh.w	r3, [r2], #2
 8008c88:	4613      	mov	r3, r2
 8008c8a:	9206      	str	r2, [sp, #24]
 8008c8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	f47f aeea 	bne.w	8008a68 <D128_1CH_HTONS_VOL_HP+0x40>
 8008c94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c96:	2000      	movs	r0, #0
 8008c98:	9903      	ldr	r1, [sp, #12]
 8008c9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c9c:	6099      	str	r1, [r3, #8]
 8008c9e:	9902      	ldr	r1, [sp, #8]
 8008ca0:	f8c3 c01c 	str.w	ip, [r3, #28]
 8008ca4:	60d9      	str	r1, [r3, #12]
 8008ca6:	9904      	ldr	r1, [sp, #16]
 8008ca8:	619a      	str	r2, [r3, #24]
 8008caa:	e9c3 1604 	strd	r1, r6, [r3, #16]
 8008cae:	b00d      	add	sp, #52	; 0x34
 8008cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cb4:	9e05      	ldr	r6, [sp, #20]
 8008cb6:	e7ed      	b.n	8008c94 <D128_1CH_HTONS_VOL_HP+0x26c>
 8008cb8:	00780069 	.word	0x00780069
 8008cbc:	005b004e 	.word	0x005b004e
 8008cc0:	00420037 	.word	0x00420037
 8008cc4:	002d0024 	.word	0x002d0024
 8008cc8:	001c0015 	.word	0x001c0015
 8008ccc:	000f000a 	.word	0x000f000a
 8008cd0:	00060003 	.word	0x00060003
 8008cd4:	00880096 	.word	0x00880096
 8008cd8:	00a200ac 	.word	0x00a200ac
 8008cdc:	000a000f 	.word	0x000a000f
 8008ce0:	0015001c 	.word	0x0015001c
 8008ce4:	0024002d 	.word	0x0024002d
 8008ce8:	00370042 	.word	0x00370042
 8008cec:	004e005b 	.word	0x004e005b
 8008cf0:	00690078 	.word	0x00690078
 8008cf4:	24000000 	.word	0x24000000
 8008cf8:	00b400ba 	.word	0x00b400ba
 8008cfc:	00be00c0 	.word	0x00be00c0
 8008d00:	00c000be 	.word	0x00c000be
 8008d04:	00ba00b4 	.word	0x00ba00b4
 8008d08:	00ac00a2 	.word	0x00ac00a2
 8008d0c:	00960088 	.word	0x00960088
 8008d10:	00030006 	.word	0x00030006

08008d14 <PDM_Filter_Init>:
 8008d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d16:	2240      	movs	r2, #64	; 0x40
 8008d18:	2100      	movs	r1, #0
 8008d1a:	4604      	mov	r4, r0
 8008d1c:	300c      	adds	r0, #12
 8008d1e:	f000 f9ed 	bl	80090fc <memset>
 8008d22:	4a56      	ldr	r2, [pc, #344]	; (8008e7c <PDM_Filter_Init+0x168>)
 8008d24:	4856      	ldr	r0, [pc, #344]	; (8008e80 <PDM_Filter_Init+0x16c>)
 8008d26:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 8008d2a:	6813      	ldr	r3, [r2, #0]
 8008d2c:	f24c 2540 	movw	r5, #49728	; 0xc240
 8008d30:	f023 0301 	bic.w	r3, r3, #1
 8008d34:	6013      	str	r3, [r2, #0]
 8008d36:	6803      	ldr	r3, [r0, #0]
 8008d38:	400b      	ands	r3, r1
 8008d3a:	42ab      	cmp	r3, r5
 8008d3c:	d040      	beq.n	8008dc0 <PDM_Filter_Init+0xac>
 8008d3e:	6803      	ldr	r3, [r0, #0]
 8008d40:	f24c 2270 	movw	r2, #49776	; 0xc270
 8008d44:	4019      	ands	r1, r3
 8008d46:	4291      	cmp	r1, r2
 8008d48:	d03a      	beq.n	8008dc0 <PDM_Filter_Init+0xac>
 8008d4a:	4b4e      	ldr	r3, [pc, #312]	; (8008e84 <PDM_Filter_Init+0x170>)
 8008d4c:	2101      	movs	r1, #1
 8008d4e:	461a      	mov	r2, r3
 8008d50:	6019      	str	r1, [r3, #0]
 8008d52:	6813      	ldr	r3, [r2, #0]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d1fc      	bne.n	8008d52 <PDM_Filter_Init+0x3e>
 8008d58:	4b4b      	ldr	r3, [pc, #300]	; (8008e88 <PDM_Filter_Init+0x174>)
 8008d5a:	494c      	ldr	r1, [pc, #304]	; (8008e8c <PDM_Filter_Init+0x178>)
 8008d5c:	4a4c      	ldr	r2, [pc, #304]	; (8008e90 <PDM_Filter_Init+0x17c>)
 8008d5e:	6019      	str	r1, [r3, #0]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	8820      	ldrh	r0, [r4, #0]
 8008d64:	4293      	cmp	r3, r2
 8008d66:	8961      	ldrh	r1, [r4, #10]
 8008d68:	f04f 0300 	mov.w	r3, #0
 8008d6c:	8922      	ldrh	r2, [r4, #8]
 8008d6e:	bf14      	ite	ne
 8008d70:	2500      	movne	r5, #0
 8008d72:	4d47      	ldreq	r5, [pc, #284]	; (8008e90 <PDM_Filter_Init+0x17c>)
 8008d74:	2801      	cmp	r0, #1
 8008d76:	61a3      	str	r3, [r4, #24]
 8008d78:	6465      	str	r5, [r4, #68]	; 0x44
 8008d7a:	60e3      	str	r3, [r4, #12]
 8008d7c:	6263      	str	r3, [r4, #36]	; 0x24
 8008d7e:	6423      	str	r3, [r4, #64]	; 0x40
 8008d80:	86a1      	strh	r1, [r4, #52]	; 0x34
 8008d82:	86e2      	strh	r2, [r4, #54]	; 0x36
 8008d84:	e9c4 3304 	strd	r3, r3, [r4, #16]
 8008d88:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8008d8c:	d936      	bls.n	8008dfc <PDM_Filter_Init+0xe8>
 8008d8e:	2003      	movs	r0, #3
 8008d90:	2302      	movs	r3, #2
 8008d92:	8862      	ldrh	r2, [r4, #2]
 8008d94:	2a01      	cmp	r2, #1
 8008d96:	d92e      	bls.n	8008df6 <PDM_Filter_Init+0xe2>
 8008d98:	2140      	movs	r1, #64	; 0x40
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8008d9e:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 8008da2:	d101      	bne.n	8008da8 <PDM_Filter_Init+0x94>
 8008da4:	460b      	mov	r3, r1
 8008da6:	6421      	str	r1, [r4, #64]	; 0x40
 8008da8:	6862      	ldr	r2, [r4, #4]
 8008daa:	b11a      	cbz	r2, 8008db4 <PDM_Filter_Init+0xa0>
 8008dac:	f043 0310 	orr.w	r3, r3, #16
 8008db0:	62e2      	str	r2, [r4, #44]	; 0x2c
 8008db2:	6423      	str	r3, [r4, #64]	; 0x40
 8008db4:	2200      	movs	r2, #0
 8008db6:	8722      	strh	r2, [r4, #56]	; 0x38
 8008db8:	b908      	cbnz	r0, 8008dbe <PDM_Filter_Init+0xaa>
 8008dba:	3380      	adds	r3, #128	; 0x80
 8008dbc:	6423      	str	r3, [r4, #64]	; 0x40
 8008dbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008dc0:	4b34      	ldr	r3, [pc, #208]	; (8008e94 <PDM_Filter_Init+0x180>)
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d1c0      	bne.n	8008d4a <PDM_Filter_Init+0x36>
 8008dc8:	4a33      	ldr	r2, [pc, #204]	; (8008e98 <PDM_Filter_Init+0x184>)
 8008dca:	6813      	ldr	r3, [r2, #0]
 8008dcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008dd0:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8008dd4:	d006      	beq.n	8008de4 <PDM_Filter_Init+0xd0>
 8008dd6:	6813      	ldr	r3, [r2, #0]
 8008dd8:	f240 4283 	movw	r2, #1155	; 0x483
 8008ddc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008de0:	4293      	cmp	r3, r2
 8008de2:	d1b2      	bne.n	8008d4a <PDM_Filter_Init+0x36>
 8008de4:	4b2d      	ldr	r3, [pc, #180]	; (8008e9c <PDM_Filter_Init+0x188>)
 8008de6:	2101      	movs	r1, #1
 8008de8:	461a      	mov	r2, r3
 8008dea:	6019      	str	r1, [r3, #0]
 8008dec:	6813      	ldr	r3, [r2, #0]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d1fc      	bne.n	8008dec <PDM_Filter_Init+0xd8>
 8008df2:	4b2b      	ldr	r3, [pc, #172]	; (8008ea0 <PDM_Filter_Init+0x18c>)
 8008df4:	e7b1      	b.n	8008d5a <PDM_Filter_Init+0x46>
 8008df6:	d03a      	beq.n	8008e6e <PDM_Filter_Init+0x15a>
 8008df8:	4618      	mov	r0, r3
 8008dfa:	e7cd      	b.n	8008d98 <PDM_Filter_Init+0x84>
 8008dfc:	4d29      	ldr	r5, [pc, #164]	; (8008ea4 <PDM_Filter_Init+0x190>)
 8008dfe:	782a      	ldrb	r2, [r5, #0]
 8008e00:	d01b      	beq.n	8008e3a <PDM_Filter_Init+0x126>
 8008e02:	2a01      	cmp	r2, #1
 8008e04:	d001      	beq.n	8008e0a <PDM_Filter_Init+0xf6>
 8008e06:	2001      	movs	r0, #1
 8008e08:	e7c3      	b.n	8008d92 <PDM_Filter_Init+0x7e>
 8008e0a:	4927      	ldr	r1, [pc, #156]	; (8008ea8 <PDM_Filter_Init+0x194>)
 8008e0c:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 8008eb0 <PDM_Filter_Init+0x19c>
 8008e10:	f501 6780 	add.w	r7, r1, #1024	; 0x400
 8008e14:	4e25      	ldr	r6, [pc, #148]	; (8008eac <PDM_Filter_Init+0x198>)
 8008e16:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8008e1a:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 8008e1e:	ea02 0006 	and.w	r0, r2, r6
 8008e22:	f3c2 5209 	ubfx	r2, r2, #20, #10
 8008e26:	428f      	cmp	r7, r1
 8008e28:	ea43 0300 	orr.w	r3, r3, r0
 8008e2c:	4413      	add	r3, r2
 8008e2e:	600b      	str	r3, [r1, #0]
 8008e30:	d1f1      	bne.n	8008e16 <PDM_Filter_Init+0x102>
 8008e32:	2300      	movs	r3, #0
 8008e34:	2001      	movs	r0, #1
 8008e36:	702b      	strb	r3, [r5, #0]
 8008e38:	e7ab      	b.n	8008d92 <PDM_Filter_Init+0x7e>
 8008e3a:	2a00      	cmp	r2, #0
 8008e3c:	d1a9      	bne.n	8008d92 <PDM_Filter_Init+0x7e>
 8008e3e:	491a      	ldr	r1, [pc, #104]	; (8008ea8 <PDM_Filter_Init+0x194>)
 8008e40:	f8df c06c 	ldr.w	ip, [pc, #108]	; 8008eb0 <PDM_Filter_Init+0x19c>
 8008e44:	f501 6780 	add.w	r7, r1, #1024	; 0x400
 8008e48:	4e18      	ldr	r6, [pc, #96]	; (8008eac <PDM_Filter_Init+0x198>)
 8008e4a:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8008e4e:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 8008e52:	ea02 0006 	and.w	r0, r2, r6
 8008e56:	f3c2 5209 	ubfx	r2, r2, #20, #10
 8008e5a:	428f      	cmp	r7, r1
 8008e5c:	ea43 0300 	orr.w	r3, r3, r0
 8008e60:	4413      	add	r3, r2
 8008e62:	600b      	str	r3, [r1, #0]
 8008e64:	d1f1      	bne.n	8008e4a <PDM_Filter_Init+0x136>
 8008e66:	2001      	movs	r0, #1
 8008e68:	2300      	movs	r3, #0
 8008e6a:	7028      	strb	r0, [r5, #0]
 8008e6c:	e791      	b.n	8008d92 <PDM_Filter_Init+0x7e>
 8008e6e:	2220      	movs	r2, #32
 8008e70:	4618      	mov	r0, r3
 8008e72:	2160      	movs	r1, #96	; 0x60
 8008e74:	6422      	str	r2, [r4, #64]	; 0x40
 8008e76:	4613      	mov	r3, r2
 8008e78:	e790      	b.n	8008d9c <PDM_Filter_Init+0x88>
 8008e7a:	bf00      	nop
 8008e7c:	e0002000 	.word	0xe0002000
 8008e80:	e000ed00 	.word	0xe000ed00
 8008e84:	40023008 	.word	0x40023008
 8008e88:	40023000 	.word	0x40023000
 8008e8c:	f407a5c2 	.word	0xf407a5c2
 8008e90:	b5e8b5cd 	.word	0xb5e8b5cd
 8008e94:	e0042000 	.word	0xe0042000
 8008e98:	5c001000 	.word	0x5c001000
 8008e9c:	58024c08 	.word	0x58024c08
 8008ea0:	58024c00 	.word	0x58024c00
 8008ea4:	24000490 	.word	0x24000490
 8008ea8:	23fffffc 	.word	0x23fffffc
 8008eac:	000ffc00 	.word	0x000ffc00
 8008eb0:	3ff00000 	.word	0x3ff00000

08008eb4 <PDM_Filter_setConfig>:
 8008eb4:	4b67      	ldr	r3, [pc, #412]	; (8009054 <PDM_Filter_setConfig+0x1a0>)
 8008eb6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008eb8:	429a      	cmp	r2, r3
 8008eba:	d128      	bne.n	8008f0e <PDM_Filter_setConfig+0x5a>
 8008ebc:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8008ebe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ec0:	880e      	ldrh	r6, [r1, #0]
 8008ec2:	460d      	mov	r5, r1
 8008ec4:	4604      	mov	r4, r0
 8008ec6:	f422 7180 	bic.w	r1, r2, #256	; 0x100
 8008eca:	1e73      	subs	r3, r6, #1
 8008ecc:	f9b5 7004 	ldrsh.w	r7, [r5, #4]
 8008ed0:	f9b0 0038 	ldrsh.w	r0, [r0, #56]	; 0x38
 8008ed4:	2b06      	cmp	r3, #6
 8008ed6:	ed2d 8b02 	vpush	{d8}
 8008eda:	6421      	str	r1, [r4, #64]	; 0x40
 8008edc:	b083      	sub	sp, #12
 8008ede:	d820      	bhi.n	8008f22 <PDM_Filter_setConfig+0x6e>
 8008ee0:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8008ee2:	42b3      	cmp	r3, r6
 8008ee4:	d03d      	beq.n	8008f62 <PDM_Filter_setConfig+0xae>
 8008ee6:	4b5c      	ldr	r3, [pc, #368]	; (8009058 <PDM_Filter_setConfig+0x1a4>)
 8008ee8:	4013      	ands	r3, r2
 8008eea:	4333      	orrs	r3, r6
 8008eec:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008ef0:	6423      	str	r3, [r4, #64]	; 0x40
 8008ef2:	f003 030f 	and.w	r3, r3, #15
 8008ef6:	2a70      	cmp	r2, #112	; 0x70
 8008ef8:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8008efc:	d009      	beq.n	8008f12 <PDM_Filter_setConfig+0x5e>
 8008efe:	2b06      	cmp	r3, #6
 8008f00:	d824      	bhi.n	8008f4c <PDM_Filter_setConfig+0x98>
 8008f02:	e8df f003 	tbb	[pc, r3]
 8008f06:	878a      	.short	0x878a
 8008f08:	7b7e8184 	.word	0x7b7e8184
 8008f0c:	78          	.byte	0x78
 8008f0d:	00          	.byte	0x00
 8008f0e:	2004      	movs	r0, #4
 8008f10:	4770      	bx	lr
 8008f12:	2b06      	cmp	r3, #6
 8008f14:	d81a      	bhi.n	8008f4c <PDM_Filter_setConfig+0x98>
 8008f16:	e8df f003 	tbb	[pc, r3]
 8008f1a:	8f92      	.short	0x8f92
 8008f1c:	8617898c 	.word	0x8617898c
 8008f20:	83          	.byte	0x83
 8008f21:	00          	.byte	0x00
 8008f22:	4287      	cmp	r7, r0
 8008f24:	f000 808e 	beq.w	8009044 <PDM_Filter_setConfig+0x190>
 8008f28:	f117 0f0c 	cmn.w	r7, #12
 8008f2c:	f04f 0008 	mov.w	r0, #8
 8008f30:	da11      	bge.n	8008f56 <PDM_Filter_setConfig+0xa2>
 8008f32:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 8008f36:	3040      	adds	r0, #64	; 0x40
 8008f38:	80ab      	strh	r3, [r5, #4]
 8008f3a:	886b      	ldrh	r3, [r5, #2]
 8008f3c:	8626      	strh	r6, [r4, #48]	; 0x30
 8008f3e:	8663      	strh	r3, [r4, #50]	; 0x32
 8008f40:	b003      	add	sp, #12
 8008f42:	ecbd 8b02 	vpop	{d8}
 8008f46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f48:	4b44      	ldr	r3, [pc, #272]	; (800905c <PDM_Filter_setConfig+0x1a8>)
 8008f4a:	64a3      	str	r3, [r4, #72]	; 0x48
 8008f4c:	f117 0f0c 	cmn.w	r7, #12
 8008f50:	f04f 0000 	mov.w	r0, #0
 8008f54:	dbed      	blt.n	8008f32 <PDM_Filter_setConfig+0x7e>
 8008f56:	2f33      	cmp	r7, #51	; 0x33
 8008f58:	dd10      	ble.n	8008f7c <PDM_Filter_setConfig+0xc8>
 8008f5a:	2333      	movs	r3, #51	; 0x33
 8008f5c:	3040      	adds	r0, #64	; 0x40
 8008f5e:	80ab      	strh	r3, [r5, #4]
 8008f60:	e7eb      	b.n	8008f3a <PDM_Filter_setConfig+0x86>
 8008f62:	4287      	cmp	r7, r0
 8008f64:	d1f2      	bne.n	8008f4c <PDM_Filter_setConfig+0x98>
 8008f66:	886b      	ldrh	r3, [r5, #2]
 8008f68:	8663      	strh	r3, [r4, #50]	; 0x32
 8008f6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008f6c:	2000      	movs	r0, #0
 8008f6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f72:	6423      	str	r3, [r4, #64]	; 0x40
 8008f74:	b003      	add	sp, #12
 8008f76:	ecbd 8b02 	vpop	{d8}
 8008f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f7c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008f7e:	f003 030f 	and.w	r3, r3, #15
 8008f82:	3b01      	subs	r3, #1
 8008f84:	2b06      	cmp	r3, #6
 8008f86:	d831      	bhi.n	8008fec <PDM_Filter_setConfig+0x138>
 8008f88:	4a35      	ldr	r2, [pc, #212]	; (8009060 <PDM_Filter_setConfig+0x1ac>)
 8008f8a:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8008f8e:	eddf 0a35 	vldr	s1, [pc, #212]	; 8009064 <PDM_Filter_setConfig+0x1b0>
 8008f92:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008f96:	9001      	str	r0, [sp, #4]
 8008f98:	edd3 7a07 	vldr	s15, [r3, #28]
 8008f9c:	ed93 8a00 	vldr	s16, [r3]
 8008fa0:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8008fa4:	f000 f8cc 	bl	8009140 <powf>
 8008fa8:	eef0 8a40 	vmov.f32	s17, s0
 8008fac:	9801      	ldr	r0, [sp, #4]
 8008fae:	ee07 7a90 	vmov	s15, r7
 8008fb2:	ee28 8a28 	vmul.f32	s16, s16, s17
 8008fb6:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8008fba:	9001      	str	r0, [sp, #4]
 8008fbc:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8008fc0:	eddf 7a29 	vldr	s15, [pc, #164]	; 8009068 <PDM_Filter_setConfig+0x1b4>
 8008fc4:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8008fc8:	f000 f8ba 	bl	8009140 <powf>
 8008fcc:	ee28 8a00 	vmul.f32	s16, s16, s0
 8008fd0:	886b      	ldrh	r3, [r5, #2]
 8008fd2:	9801      	ldr	r0, [sp, #4]
 8008fd4:	feb8 8a48 	vrinta.f32	s16, s16
 8008fd8:	eebc 8ac8 	vcvt.u32.f32	s16, s16
 8008fdc:	8727      	strh	r7, [r4, #56]	; 0x38
 8008fde:	8663      	strh	r3, [r4, #50]	; 0x32
 8008fe0:	8626      	strh	r6, [r4, #48]	; 0x30
 8008fe2:	ed84 8a0f 	vstr	s16, [r4, #60]	; 0x3c
 8008fe6:	2800      	cmp	r0, #0
 8008fe8:	d0bf      	beq.n	8008f6a <PDM_Filter_setConfig+0xb6>
 8008fea:	e7a9      	b.n	8008f40 <PDM_Filter_setConfig+0x8c>
 8008fec:	eddf 8a1f 	vldr	s17, [pc, #124]	; 800906c <PDM_Filter_setConfig+0x1b8>
 8008ff0:	ed9f 8a1f 	vldr	s16, [pc, #124]	; 8009070 <PDM_Filter_setConfig+0x1bc>
 8008ff4:	e7db      	b.n	8008fae <PDM_Filter_setConfig+0xfa>
 8008ff6:	4b1f      	ldr	r3, [pc, #124]	; (8009074 <PDM_Filter_setConfig+0x1c0>)
 8008ff8:	64a3      	str	r3, [r4, #72]	; 0x48
 8008ffa:	e7a7      	b.n	8008f4c <PDM_Filter_setConfig+0x98>
 8008ffc:	4b1e      	ldr	r3, [pc, #120]	; (8009078 <PDM_Filter_setConfig+0x1c4>)
 8008ffe:	64a3      	str	r3, [r4, #72]	; 0x48
 8009000:	e7a4      	b.n	8008f4c <PDM_Filter_setConfig+0x98>
 8009002:	4b1e      	ldr	r3, [pc, #120]	; (800907c <PDM_Filter_setConfig+0x1c8>)
 8009004:	64a3      	str	r3, [r4, #72]	; 0x48
 8009006:	e7a1      	b.n	8008f4c <PDM_Filter_setConfig+0x98>
 8009008:	4b1d      	ldr	r3, [pc, #116]	; (8009080 <PDM_Filter_setConfig+0x1cc>)
 800900a:	64a3      	str	r3, [r4, #72]	; 0x48
 800900c:	e79e      	b.n	8008f4c <PDM_Filter_setConfig+0x98>
 800900e:	4b1d      	ldr	r3, [pc, #116]	; (8009084 <PDM_Filter_setConfig+0x1d0>)
 8009010:	64a3      	str	r3, [r4, #72]	; 0x48
 8009012:	e79b      	b.n	8008f4c <PDM_Filter_setConfig+0x98>
 8009014:	4b1c      	ldr	r3, [pc, #112]	; (8009088 <PDM_Filter_setConfig+0x1d4>)
 8009016:	64a3      	str	r3, [r4, #72]	; 0x48
 8009018:	e798      	b.n	8008f4c <PDM_Filter_setConfig+0x98>
 800901a:	4b1c      	ldr	r3, [pc, #112]	; (800908c <PDM_Filter_setConfig+0x1d8>)
 800901c:	64a3      	str	r3, [r4, #72]	; 0x48
 800901e:	e795      	b.n	8008f4c <PDM_Filter_setConfig+0x98>
 8009020:	4b1b      	ldr	r3, [pc, #108]	; (8009090 <PDM_Filter_setConfig+0x1dc>)
 8009022:	64a3      	str	r3, [r4, #72]	; 0x48
 8009024:	e792      	b.n	8008f4c <PDM_Filter_setConfig+0x98>
 8009026:	4b1b      	ldr	r3, [pc, #108]	; (8009094 <PDM_Filter_setConfig+0x1e0>)
 8009028:	64a3      	str	r3, [r4, #72]	; 0x48
 800902a:	e78f      	b.n	8008f4c <PDM_Filter_setConfig+0x98>
 800902c:	4b1a      	ldr	r3, [pc, #104]	; (8009098 <PDM_Filter_setConfig+0x1e4>)
 800902e:	64a3      	str	r3, [r4, #72]	; 0x48
 8009030:	e78c      	b.n	8008f4c <PDM_Filter_setConfig+0x98>
 8009032:	4b1a      	ldr	r3, [pc, #104]	; (800909c <PDM_Filter_setConfig+0x1e8>)
 8009034:	64a3      	str	r3, [r4, #72]	; 0x48
 8009036:	e789      	b.n	8008f4c <PDM_Filter_setConfig+0x98>
 8009038:	4b19      	ldr	r3, [pc, #100]	; (80090a0 <PDM_Filter_setConfig+0x1ec>)
 800903a:	64a3      	str	r3, [r4, #72]	; 0x48
 800903c:	e786      	b.n	8008f4c <PDM_Filter_setConfig+0x98>
 800903e:	4b19      	ldr	r3, [pc, #100]	; (80090a4 <PDM_Filter_setConfig+0x1f0>)
 8009040:	64a3      	str	r3, [r4, #72]	; 0x48
 8009042:	e783      	b.n	8008f4c <PDM_Filter_setConfig+0x98>
 8009044:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8009046:	42b3      	cmp	r3, r6
 8009048:	f47f af6e 	bne.w	8008f28 <PDM_Filter_setConfig+0x74>
 800904c:	886b      	ldrh	r3, [r5, #2]
 800904e:	2008      	movs	r0, #8
 8009050:	8663      	strh	r3, [r4, #50]	; 0x32
 8009052:	e775      	b.n	8008f40 <PDM_Filter_setConfig+0x8c>
 8009054:	b5e8b5cd 	.word	0xb5e8b5cd
 8009058:	fffffef0 	.word	0xfffffef0
 800905c:	080081cd 	.word	0x080081cd
 8009060:	080094b0 	.word	0x080094b0
 8009064:	42000000 	.word	0x42000000
 8009068:	3d4ccccd 	.word	0x3d4ccccd
 800906c:	4f800000 	.word	0x4f800000
 8009070:	00000000 	.word	0x00000000
 8009074:	080075d9 	.word	0x080075d9
 8009078:	08007461 	.word	0x08007461
 800907c:	08007351 	.word	0x08007351
 8009080:	08007e15 	.word	0x08007e15
 8009084:	08007b7d 	.word	0x08007b7d
 8009088:	08007945 	.word	0x08007945
 800908c:	08007761 	.word	0x08007761
 8009090:	080083e9 	.word	0x080083e9
 8009094:	080082ad 	.word	0x080082ad
 8009098:	08008a29 	.word	0x08008a29
 800909c:	0800882d 	.word	0x0800882d
 80090a0:	08008681 	.word	0x08008681
 80090a4:	08008515 	.word	0x08008515

080090a8 <__errno>:
 80090a8:	4b01      	ldr	r3, [pc, #4]	; (80090b0 <__errno+0x8>)
 80090aa:	6818      	ldr	r0, [r3, #0]
 80090ac:	4770      	bx	lr
 80090ae:	bf00      	nop
 80090b0:	24000410 	.word	0x24000410

080090b4 <__libc_init_array>:
 80090b4:	b570      	push	{r4, r5, r6, lr}
 80090b6:	4d0d      	ldr	r5, [pc, #52]	; (80090ec <__libc_init_array+0x38>)
 80090b8:	4c0d      	ldr	r4, [pc, #52]	; (80090f0 <__libc_init_array+0x3c>)
 80090ba:	1b64      	subs	r4, r4, r5
 80090bc:	10a4      	asrs	r4, r4, #2
 80090be:	2600      	movs	r6, #0
 80090c0:	42a6      	cmp	r6, r4
 80090c2:	d109      	bne.n	80090d8 <__libc_init_array+0x24>
 80090c4:	4d0b      	ldr	r5, [pc, #44]	; (80090f4 <__libc_init_array+0x40>)
 80090c6:	4c0c      	ldr	r4, [pc, #48]	; (80090f8 <__libc_init_array+0x44>)
 80090c8:	f000 f9e6 	bl	8009498 <_init>
 80090cc:	1b64      	subs	r4, r4, r5
 80090ce:	10a4      	asrs	r4, r4, #2
 80090d0:	2600      	movs	r6, #0
 80090d2:	42a6      	cmp	r6, r4
 80090d4:	d105      	bne.n	80090e2 <__libc_init_array+0x2e>
 80090d6:	bd70      	pop	{r4, r5, r6, pc}
 80090d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80090dc:	4798      	blx	r3
 80090de:	3601      	adds	r6, #1
 80090e0:	e7ee      	b.n	80090c0 <__libc_init_array+0xc>
 80090e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80090e6:	4798      	blx	r3
 80090e8:	3601      	adds	r6, #1
 80090ea:	e7f2      	b.n	80090d2 <__libc_init_array+0x1e>
 80090ec:	08009770 	.word	0x08009770
 80090f0:	08009770 	.word	0x08009770
 80090f4:	08009770 	.word	0x08009770
 80090f8:	08009774 	.word	0x08009774

080090fc <memset>:
 80090fc:	4402      	add	r2, r0
 80090fe:	4603      	mov	r3, r0
 8009100:	4293      	cmp	r3, r2
 8009102:	d100      	bne.n	8009106 <memset+0xa>
 8009104:	4770      	bx	lr
 8009106:	f803 1b01 	strb.w	r1, [r3], #1
 800910a:	e7f9      	b.n	8009100 <memset+0x4>

0800910c <checkint>:
 800910c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8009110:	2b7e      	cmp	r3, #126	; 0x7e
 8009112:	dd10      	ble.n	8009136 <checkint+0x2a>
 8009114:	2b96      	cmp	r3, #150	; 0x96
 8009116:	dc0c      	bgt.n	8009132 <checkint+0x26>
 8009118:	2201      	movs	r2, #1
 800911a:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800911e:	fa02 f303 	lsl.w	r3, r2, r3
 8009122:	1e5a      	subs	r2, r3, #1
 8009124:	4202      	tst	r2, r0
 8009126:	d106      	bne.n	8009136 <checkint+0x2a>
 8009128:	4203      	tst	r3, r0
 800912a:	bf0c      	ite	eq
 800912c:	2002      	moveq	r0, #2
 800912e:	2001      	movne	r0, #1
 8009130:	4770      	bx	lr
 8009132:	2002      	movs	r0, #2
 8009134:	4770      	bx	lr
 8009136:	2000      	movs	r0, #0
 8009138:	4770      	bx	lr
 800913a:	0000      	movs	r0, r0
 800913c:	0000      	movs	r0, r0
	...

08009140 <powf>:
 8009140:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009142:	ee10 1a10 	vmov	r1, s0
 8009146:	ee10 6a90 	vmov	r6, s1
 800914a:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 800914e:	0072      	lsls	r2, r6, #1
 8009150:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8009154:	b085      	sub	sp, #20
 8009156:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 800915a:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 800915e:	d256      	bcs.n	800920e <powf+0xce>
 8009160:	4298      	cmp	r0, r3
 8009162:	d256      	bcs.n	8009212 <powf+0xd2>
 8009164:	2000      	movs	r0, #0
 8009166:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 800916a:	4ea3      	ldr	r6, [pc, #652]	; (80093f8 <powf+0x2b8>)
 800916c:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8009170:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 8009174:	f3c2 47c3 	ubfx	r7, r2, #19, #4
 8009178:	0dd2      	lsrs	r2, r2, #23
 800917a:	eb06 1707 	add.w	r7, r6, r7, lsl #4
 800917e:	05d2      	lsls	r2, r2, #23
 8009180:	1a8b      	subs	r3, r1, r2
 8009182:	ed97 5b00 	vldr	d5, [r7]
 8009186:	ee07 3a90 	vmov	s15, r3
 800918a:	15d2      	asrs	r2, r2, #23
 800918c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8009190:	eea5 6b07 	vfma.f64	d6, d5, d7
 8009194:	ed97 5b02 	vldr	d5, [r7, #8]
 8009198:	ee26 2b06 	vmul.f64	d2, d6, d6
 800919c:	ee22 1b02 	vmul.f64	d1, d2, d2
 80091a0:	ee07 2a90 	vmov	s15, r2
 80091a4:	ed96 4b40 	vldr	d4, [r6, #256]	; 0x100
 80091a8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80091ac:	ee37 7b05 	vadd.f64	d7, d7, d5
 80091b0:	ed96 5b42 	vldr	d5, [r6, #264]	; 0x108
 80091b4:	ed96 3b44 	vldr	d3, [r6, #272]	; 0x110
 80091b8:	eea6 5b04 	vfma.f64	d5, d6, d4
 80091bc:	ed96 4b46 	vldr	d4, [r6, #280]	; 0x118
 80091c0:	eea6 4b03 	vfma.f64	d4, d6, d3
 80091c4:	ed96 3b48 	vldr	d3, [r6, #288]	; 0x120
 80091c8:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 80091cc:	eea6 7b03 	vfma.f64	d7, d6, d3
 80091d0:	eea2 7b04 	vfma.f64	d7, d2, d4
 80091d4:	eea5 7b01 	vfma.f64	d7, d5, d1
 80091d8:	ee20 0b07 	vmul.f64	d0, d0, d7
 80091dc:	ee10 1a90 	vmov	r1, s1
 80091e0:	2300      	movs	r3, #0
 80091e2:	2700      	movs	r7, #0
 80091e4:	f3c1 32cf 	ubfx	r2, r1, #15, #16
 80091e8:	f248 06be 	movw	r6, #32958	; 0x80be
 80091ec:	429f      	cmp	r7, r3
 80091ee:	bf08      	it	eq
 80091f0:	4296      	cmpeq	r6, r2
 80091f2:	f080 80b1 	bcs.w	8009358 <powf+0x218>
 80091f6:	ed9f 7b78 	vldr	d7, [pc, #480]	; 80093d8 <powf+0x298>
 80091fa:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80091fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009202:	dd79      	ble.n	80092f8 <powf+0x1b8>
 8009204:	b005      	add	sp, #20
 8009206:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800920a:	f000 b91f 	b.w	800944c <__math_oflowf>
 800920e:	4298      	cmp	r0, r3
 8009210:	d32d      	bcc.n	800926e <powf+0x12e>
 8009212:	b952      	cbnz	r2, 800922a <powf+0xea>
 8009214:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 8009218:	005b      	lsls	r3, r3, #1
 800921a:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 800921e:	f240 80cd 	bls.w	80093bc <powf+0x27c>
 8009222:	ee30 0a20 	vadd.f32	s0, s0, s1
 8009226:	b005      	add	sp, #20
 8009228:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800922a:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800922e:	d105      	bne.n	800923c <powf+0xfc>
 8009230:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 8009234:	0076      	lsls	r6, r6, #1
 8009236:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 800923a:	e7f0      	b.n	800921e <powf+0xde>
 800923c:	004b      	lsls	r3, r1, #1
 800923e:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 8009242:	d8ee      	bhi.n	8009222 <powf+0xe2>
 8009244:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 8009248:	d1eb      	bne.n	8009222 <powf+0xe2>
 800924a:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800924e:	f000 80b5 	beq.w	80093bc <powf+0x27c>
 8009252:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8009256:	ea6f 0606 	mvn.w	r6, r6
 800925a:	bf34      	ite	cc
 800925c:	2300      	movcc	r3, #0
 800925e:	2301      	movcs	r3, #1
 8009260:	0ff6      	lsrs	r6, r6, #31
 8009262:	42b3      	cmp	r3, r6
 8009264:	f040 80ad 	bne.w	80093c2 <powf+0x282>
 8009268:	ee20 0aa0 	vmul.f32	s0, s1, s1
 800926c:	e7db      	b.n	8009226 <powf+0xe6>
 800926e:	004f      	lsls	r7, r1, #1
 8009270:	1e7a      	subs	r2, r7, #1
 8009272:	429a      	cmp	r2, r3
 8009274:	d31c      	bcc.n	80092b0 <powf+0x170>
 8009276:	2900      	cmp	r1, #0
 8009278:	ee20 0a00 	vmul.f32	s0, s0, s0
 800927c:	da0f      	bge.n	800929e <powf+0x15e>
 800927e:	ee10 0a90 	vmov	r0, s1
 8009282:	f7ff ff43 	bl	800910c <checkint>
 8009286:	2801      	cmp	r0, #1
 8009288:	d109      	bne.n	800929e <powf+0x15e>
 800928a:	eeb1 0a40 	vneg.f32	s0, s0
 800928e:	b947      	cbnz	r7, 80092a2 <powf+0x162>
 8009290:	2e00      	cmp	r6, #0
 8009292:	dac8      	bge.n	8009226 <powf+0xe6>
 8009294:	b005      	add	sp, #20
 8009296:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800929a:	f000 b8dd 	b.w	8009458 <__math_divzerof>
 800929e:	2000      	movs	r0, #0
 80092a0:	e7f5      	b.n	800928e <powf+0x14e>
 80092a2:	2e00      	cmp	r6, #0
 80092a4:	dabf      	bge.n	8009226 <powf+0xe6>
 80092a6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80092aa:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80092ae:	e7ba      	b.n	8009226 <powf+0xe6>
 80092b0:	2900      	cmp	r1, #0
 80092b2:	da1f      	bge.n	80092f4 <powf+0x1b4>
 80092b4:	ee10 0a90 	vmov	r0, s1
 80092b8:	f7ff ff28 	bl	800910c <checkint>
 80092bc:	b920      	cbnz	r0, 80092c8 <powf+0x188>
 80092be:	b005      	add	sp, #20
 80092c0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80092c4:	f000 b8d8 	b.w	8009478 <__math_invalidf>
 80092c8:	2801      	cmp	r0, #1
 80092ca:	bf14      	ite	ne
 80092cc:	2000      	movne	r0, #0
 80092ce:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 80092d2:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80092d6:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80092da:	f4bf af44 	bcs.w	8009166 <powf+0x26>
 80092de:	eddf 7a47 	vldr	s15, [pc, #284]	; 80093fc <powf+0x2bc>
 80092e2:	ee20 0a27 	vmul.f32	s0, s0, s15
 80092e6:	ee10 3a10 	vmov	r3, s0
 80092ea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80092ee:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 80092f2:	e738      	b.n	8009166 <powf+0x26>
 80092f4:	2000      	movs	r0, #0
 80092f6:	e7ee      	b.n	80092d6 <powf+0x196>
 80092f8:	ed9f 7b39 	vldr	d7, [pc, #228]	; 80093e0 <powf+0x2a0>
 80092fc:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8009300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009304:	dd10      	ble.n	8009328 <powf+0x1e8>
 8009306:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 800930a:	2800      	cmp	r0, #0
 800930c:	d15c      	bne.n	80093c8 <powf+0x288>
 800930e:	9302      	str	r3, [sp, #8]
 8009310:	eddd 7a02 	vldr	s15, [sp, #8]
 8009314:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009318:	ee77 7a87 	vadd.f32	s15, s15, s14
 800931c:	eef4 7a47 	vcmp.f32	s15, s14
 8009320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009324:	f47f af6e 	bne.w	8009204 <powf+0xc4>
 8009328:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 80093e8 <powf+0x2a8>
 800932c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8009330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009334:	d804      	bhi.n	8009340 <powf+0x200>
 8009336:	b005      	add	sp, #20
 8009338:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800933c:	f000 b87a 	b.w	8009434 <__math_uflowf>
 8009340:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 80093f0 <powf+0x2b0>
 8009344:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8009348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800934c:	d504      	bpl.n	8009358 <powf+0x218>
 800934e:	b005      	add	sp, #20
 8009350:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8009354:	f000 b874 	b.w	8009440 <__math_may_uflowf>
 8009358:	4b29      	ldr	r3, [pc, #164]	; (8009400 <powf+0x2c0>)
 800935a:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 800935e:	ee30 6b07 	vadd.f64	d6, d0, d7
 8009362:	ed8d 6b00 	vstr	d6, [sp]
 8009366:	ee36 7b47 	vsub.f64	d7, d6, d7
 800936a:	ee30 7b47 	vsub.f64	d7, d0, d7
 800936e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009372:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8009376:	f006 011f 	and.w	r1, r6, #31
 800937a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800937e:	e9d1 ce00 	ldrd	ip, lr, [r1]
 8009382:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 8009386:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 800938a:	ed93 4b46 	vldr	d4, [r3, #280]	; 0x118
 800938e:	eea7 6b05 	vfma.f64	d6, d7, d5
 8009392:	ee27 5b07 	vmul.f64	d5, d7, d7
 8009396:	1836      	adds	r6, r6, r0
 8009398:	2300      	movs	r3, #0
 800939a:	eb13 040c 	adds.w	r4, r3, ip
 800939e:	ea4f 31c6 	mov.w	r1, r6, lsl #15
 80093a2:	eb41 050e 	adc.w	r5, r1, lr
 80093a6:	eea7 0b04 	vfma.f64	d0, d7, d4
 80093aa:	ec45 4b17 	vmov	d7, r4, r5
 80093ae:	eea6 0b05 	vfma.f64	d0, d6, d5
 80093b2:	ee20 0b07 	vmul.f64	d0, d0, d7
 80093b6:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80093ba:	e734      	b.n	8009226 <powf+0xe6>
 80093bc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80093c0:	e731      	b.n	8009226 <powf+0xe6>
 80093c2:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8009404 <powf+0x2c4>
 80093c6:	e72e      	b.n	8009226 <powf+0xe6>
 80093c8:	9303      	str	r3, [sp, #12]
 80093ca:	eddd 7a03 	vldr	s15, [sp, #12]
 80093ce:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80093d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80093d6:	e7a1      	b.n	800931c <powf+0x1dc>
 80093d8:	ffd1d571 	.word	0xffd1d571
 80093dc:	405fffff 	.word	0x405fffff
 80093e0:	ffa3aae2 	.word	0xffa3aae2
 80093e4:	405fffff 	.word	0x405fffff
 80093e8:	00000000 	.word	0x00000000
 80093ec:	c062c000 	.word	0xc062c000
 80093f0:	00000000 	.word	0x00000000
 80093f4:	c062a000 	.word	0xc062a000
 80093f8:	08009500 	.word	0x08009500
 80093fc:	4b000000 	.word	0x4b000000
 8009400:	08009628 	.word	0x08009628
 8009404:	00000000 	.word	0x00000000

08009408 <with_errnof>:
 8009408:	b513      	push	{r0, r1, r4, lr}
 800940a:	4604      	mov	r4, r0
 800940c:	ed8d 0a01 	vstr	s0, [sp, #4]
 8009410:	f7ff fe4a 	bl	80090a8 <__errno>
 8009414:	ed9d 0a01 	vldr	s0, [sp, #4]
 8009418:	6004      	str	r4, [r0, #0]
 800941a:	b002      	add	sp, #8
 800941c:	bd10      	pop	{r4, pc}

0800941e <xflowf>:
 800941e:	b130      	cbz	r0, 800942e <xflowf+0x10>
 8009420:	eef1 7a40 	vneg.f32	s15, s0
 8009424:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009428:	2022      	movs	r0, #34	; 0x22
 800942a:	f7ff bfed 	b.w	8009408 <with_errnof>
 800942e:	eef0 7a40 	vmov.f32	s15, s0
 8009432:	e7f7      	b.n	8009424 <xflowf+0x6>

08009434 <__math_uflowf>:
 8009434:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800943c <__math_uflowf+0x8>
 8009438:	f7ff bff1 	b.w	800941e <xflowf>
 800943c:	10000000 	.word	0x10000000

08009440 <__math_may_uflowf>:
 8009440:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009448 <__math_may_uflowf+0x8>
 8009444:	f7ff bfeb 	b.w	800941e <xflowf>
 8009448:	1a200000 	.word	0x1a200000

0800944c <__math_oflowf>:
 800944c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009454 <__math_oflowf+0x8>
 8009450:	f7ff bfe5 	b.w	800941e <xflowf>
 8009454:	70000000 	.word	0x70000000

08009458 <__math_divzerof>:
 8009458:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800945c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8009460:	2800      	cmp	r0, #0
 8009462:	fe40 7a27 	vseleq.f32	s15, s0, s15
 8009466:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8009474 <__math_divzerof+0x1c>
 800946a:	2022      	movs	r0, #34	; 0x22
 800946c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8009470:	f7ff bfca 	b.w	8009408 <with_errnof>
 8009474:	00000000 	.word	0x00000000

08009478 <__math_invalidf>:
 8009478:	eef0 7a40 	vmov.f32	s15, s0
 800947c:	ee30 7a40 	vsub.f32	s14, s0, s0
 8009480:	eef4 7a67 	vcmp.f32	s15, s15
 8009484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009488:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800948c:	d602      	bvs.n	8009494 <__math_invalidf+0x1c>
 800948e:	2021      	movs	r0, #33	; 0x21
 8009490:	f7ff bfba 	b.w	8009408 <with_errnof>
 8009494:	4770      	bx	lr
	...

08009498 <_init>:
 8009498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800949a:	bf00      	nop
 800949c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800949e:	bc08      	pop	{r3}
 80094a0:	469e      	mov	lr, r3
 80094a2:	4770      	bx	lr

080094a4 <_fini>:
 80094a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094a6:	bf00      	nop
 80094a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094aa:	bc08      	pop	{r3}
 80094ac:	469e      	mov	lr, r3
 80094ae:	4770      	bx	lr
