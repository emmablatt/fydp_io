
mic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009400  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c0  080096d0  080096d0  000196d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08009990  08009990  00019990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08009994  08009994  00019994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000474  24000000  08009998  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000728  24000474  08009e0c  00020474  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  24000b9c  08009e0c  00020b9c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020474  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001f602  00000000  00000000  000204a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002f12  00000000  00000000  0003faa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000cf0  00000000  00000000  000429b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000c00  00000000  00000000  000436a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000035a3  00000000  00000000  000442a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00012fe0  00000000  00000000  0004784b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00150079  00000000  00000000  0005a82b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      000000d1  00000000  00000000  001aa8a4  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000035c4  00000000  00000000  001aa978  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000474 	.word	0x24000474
 80002ec:	00000000 	.word	0x00000000
 80002f0:	080096b8 	.word	0x080096b8

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000478 	.word	0x24000478
 800030c:	080096b8 	.word	0x080096b8

08000310 <HAL_SAI_ErrorCallback>:
  * @brief  SAI error callbacks.
  * @param  hsai  SAI handle
  * @retval None
  */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b082      	sub	sp, #8
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
  if(hsai->Instance == AUDIO_OUT_SAIx)
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4a06      	ldr	r2, [pc, #24]	; (8000338 <HAL_SAI_ErrorCallback+0x28>)
 800031e:	4293      	cmp	r3, r2
 8000320:	d103      	bne.n	800032a <HAL_SAI_ErrorCallback+0x1a>
  {
    BSP_AUDIO_OUT_Error_CallBack(0);
 8000322:	2000      	movs	r0, #0
 8000324:	f000 f80a 	bl	800033c <BSP_AUDIO_OUT_Error_CallBack>
  }
  else
  {
    BSP_AUDIO_IN_Error_CallBack(0);
  }
}
 8000328:	e002      	b.n	8000330 <HAL_SAI_ErrorCallback+0x20>
    BSP_AUDIO_IN_Error_CallBack(0);
 800032a:	2000      	movs	r0, #0
 800032c:	f000 f914 	bl	8000558 <BSP_AUDIO_IN_Error_CallBack>
}
 8000330:	bf00      	nop
 8000332:	3708      	adds	r7, #8
 8000334:	46bd      	mov	sp, r7
 8000336:	bd80      	pop	{r7, pc}
 8000338:	40015824 	.word	0x40015824

0800033c <BSP_AUDIO_OUT_Error_CallBack>:
  * @brief  Manages the DMA FIFO error event
  * @param  Instance AUDIO OUT Instance. It can only be 0 (SAI)
  * @retval None
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(uint32_t Instance)
{
 800033c:	b480      	push	{r7}
 800033e:	b083      	sub	sp, #12
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Instance);
}
 8000344:	bf00      	nop
 8000346:	370c      	adds	r7, #12
 8000348:	46bd      	mov	sp, r7
 800034a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034e:	4770      	bx	lr

08000350 <BSP_AUDIO_IN_PDMToPCM_Init>:
  * @param  ChnlNbrIn  Number of input audio channels in the PDM buffer
  * @param  ChnlNbrOut Number of desired output audio channels in the  resulting PCM buffer
  * @retval BSP status
  */
int32_t BSP_AUDIO_IN_PDMToPCM_Init(uint32_t Instance, uint32_t AudioFreq, uint32_t ChnlNbrIn, uint32_t ChnlNbrOut)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b086      	sub	sp, #24
 8000354:	af00      	add	r7, sp, #0
 8000356:	60f8      	str	r0, [r7, #12]
 8000358:	60b9      	str	r1, [r7, #8]
 800035a:	607a      	str	r2, [r7, #4]
 800035c:	603b      	str	r3, [r7, #0]
  uint32_t index = 0;
 800035e:	2300      	movs	r3, #0
 8000360:	617b      	str	r3, [r7, #20]

  if(Instance != 1U)
 8000362:	68fb      	ldr	r3, [r7, #12]
 8000364:	2b01      	cmp	r3, #1
 8000366:	d002      	beq.n	800036e <BSP_AUDIO_IN_PDMToPCM_Init+0x1e>
  {
    return BSP_ERROR_WRONG_PARAM;
 8000368:	f06f 0301 	mvn.w	r3, #1
 800036c:	e085      	b.n	800047a <BSP_AUDIO_IN_PDMToPCM_Init+0x12a>
  }
  else
  {
    /* Enable CRC peripheral to unlock the PDM library */
    __HAL_RCC_CRC_CLK_ENABLE();
 800036e:	4b45      	ldr	r3, [pc, #276]	; (8000484 <BSP_AUDIO_IN_PDMToPCM_Init+0x134>)
 8000370:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000374:	4a43      	ldr	r2, [pc, #268]	; (8000484 <BSP_AUDIO_IN_PDMToPCM_Init+0x134>)
 8000376:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800037a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800037e:	4b41      	ldr	r3, [pc, #260]	; (8000484 <BSP_AUDIO_IN_PDMToPCM_Init+0x134>)
 8000380:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000384:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000388:	613b      	str	r3, [r7, #16]
 800038a:	693b      	ldr	r3, [r7, #16]

    for(index = 0; index < ChnlNbrIn; index++)
 800038c:	2300      	movs	r3, #0
 800038e:	617b      	str	r3, [r7, #20]
 8000390:	e06e      	b.n	8000470 <BSP_AUDIO_IN_PDMToPCM_Init+0x120>
    {
      /* Init PDM filters */
      PDM_FilterHandler[index].bit_order  = PDM_FILTER_BIT_ORDER_MSB;
 8000392:	4a3d      	ldr	r2, [pc, #244]	; (8000488 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 8000394:	697b      	ldr	r3, [r7, #20]
 8000396:	214c      	movs	r1, #76	; 0x4c
 8000398:	fb01 f303 	mul.w	r3, r1, r3
 800039c:	4413      	add	r3, r2
 800039e:	2201      	movs	r2, #1
 80003a0:	801a      	strh	r2, [r3, #0]
      PDM_FilterHandler[index].endianness = PDM_FILTER_ENDIANNESS_LE;
 80003a2:	4a39      	ldr	r2, [pc, #228]	; (8000488 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 80003a4:	697b      	ldr	r3, [r7, #20]
 80003a6:	214c      	movs	r1, #76	; 0x4c
 80003a8:	fb01 f303 	mul.w	r3, r1, r3
 80003ac:	4413      	add	r3, r2
 80003ae:	3302      	adds	r3, #2
 80003b0:	2200      	movs	r2, #0
 80003b2:	801a      	strh	r2, [r3, #0]
      PDM_FilterHandler[index].high_pass_tap = 2122358088;
 80003b4:	4a34      	ldr	r2, [pc, #208]	; (8000488 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 80003b6:	697b      	ldr	r3, [r7, #20]
 80003b8:	214c      	movs	r1, #76	; 0x4c
 80003ba:	fb01 f303 	mul.w	r3, r1, r3
 80003be:	4413      	add	r3, r2
 80003c0:	3304      	adds	r3, #4
 80003c2:	4a32      	ldr	r2, [pc, #200]	; (800048c <BSP_AUDIO_IN_PDMToPCM_Init+0x13c>)
 80003c4:	601a      	str	r2, [r3, #0]
      PDM_FilterHandler[index].out_ptr_channels = ChnlNbrOut;
 80003c6:	683b      	ldr	r3, [r7, #0]
 80003c8:	b298      	uxth	r0, r3
 80003ca:	4a2f      	ldr	r2, [pc, #188]	; (8000488 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 80003cc:	697b      	ldr	r3, [r7, #20]
 80003ce:	214c      	movs	r1, #76	; 0x4c
 80003d0:	fb01 f303 	mul.w	r3, r1, r3
 80003d4:	4413      	add	r3, r2
 80003d6:	330a      	adds	r3, #10
 80003d8:	4602      	mov	r2, r0
 80003da:	801a      	strh	r2, [r3, #0]
      PDM_FilterHandler[index].in_ptr_channels  = ChnlNbrIn;
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	b298      	uxth	r0, r3
 80003e0:	4a29      	ldr	r2, [pc, #164]	; (8000488 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 80003e2:	697b      	ldr	r3, [r7, #20]
 80003e4:	214c      	movs	r1, #76	; 0x4c
 80003e6:	fb01 f303 	mul.w	r3, r1, r3
 80003ea:	4413      	add	r3, r2
 80003ec:	3308      	adds	r3, #8
 80003ee:	4602      	mov	r2, r0
 80003f0:	801a      	strh	r2, [r3, #0]
      PDM_Filter_Init((PDM_Filter_Handler_t *)(&PDM_FilterHandler[index]));
 80003f2:	697b      	ldr	r3, [r7, #20]
 80003f4:	224c      	movs	r2, #76	; 0x4c
 80003f6:	fb02 f303 	mul.w	r3, r2, r3
 80003fa:	4a23      	ldr	r2, [pc, #140]	; (8000488 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 80003fc:	4413      	add	r3, r2
 80003fe:	4618      	mov	r0, r3
 8000400:	f008 fd9a 	bl	8008f38 <PDM_Filter_Init>

      /* PDM lib config phase */
      PDM_FilterConfig[index].output_samples_number = AudioFreq/1000;
 8000404:	68bb      	ldr	r3, [r7, #8]
 8000406:	4a22      	ldr	r2, [pc, #136]	; (8000490 <BSP_AUDIO_IN_PDMToPCM_Init+0x140>)
 8000408:	fba2 2303 	umull	r2, r3, r2, r3
 800040c:	099b      	lsrs	r3, r3, #6
 800040e:	b298      	uxth	r0, r3
 8000410:	4920      	ldr	r1, [pc, #128]	; (8000494 <BSP_AUDIO_IN_PDMToPCM_Init+0x144>)
 8000412:	697a      	ldr	r2, [r7, #20]
 8000414:	4613      	mov	r3, r2
 8000416:	005b      	lsls	r3, r3, #1
 8000418:	4413      	add	r3, r2
 800041a:	005b      	lsls	r3, r3, #1
 800041c:	440b      	add	r3, r1
 800041e:	3302      	adds	r3, #2
 8000420:	4602      	mov	r2, r0
 8000422:	801a      	strh	r2, [r3, #0]
      PDM_FilterConfig[index].mic_gain = 24;
 8000424:	491b      	ldr	r1, [pc, #108]	; (8000494 <BSP_AUDIO_IN_PDMToPCM_Init+0x144>)
 8000426:	697a      	ldr	r2, [r7, #20]
 8000428:	4613      	mov	r3, r2
 800042a:	005b      	lsls	r3, r3, #1
 800042c:	4413      	add	r3, r2
 800042e:	005b      	lsls	r3, r3, #1
 8000430:	440b      	add	r3, r1
 8000432:	3304      	adds	r3, #4
 8000434:	2218      	movs	r2, #24
 8000436:	801a      	strh	r2, [r3, #0]
      PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_32;
 8000438:	4916      	ldr	r1, [pc, #88]	; (8000494 <BSP_AUDIO_IN_PDMToPCM_Init+0x144>)
 800043a:	697a      	ldr	r2, [r7, #20]
 800043c:	4613      	mov	r3, r2
 800043e:	005b      	lsls	r3, r3, #1
 8000440:	4413      	add	r3, r2
 8000442:	005b      	lsls	r3, r3, #1
 8000444:	440b      	add	r3, r1
 8000446:	2207      	movs	r2, #7
 8000448:	801a      	strh	r2, [r3, #0]
      PDM_Filter_setConfig((PDM_Filter_Handler_t *)&PDM_FilterHandler[index], &PDM_FilterConfig[index]);
 800044a:	697b      	ldr	r3, [r7, #20]
 800044c:	224c      	movs	r2, #76	; 0x4c
 800044e:	fb02 f303 	mul.w	r3, r2, r3
 8000452:	4a0d      	ldr	r2, [pc, #52]	; (8000488 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 8000454:	1898      	adds	r0, r3, r2
 8000456:	697a      	ldr	r2, [r7, #20]
 8000458:	4613      	mov	r3, r2
 800045a:	005b      	lsls	r3, r3, #1
 800045c:	4413      	add	r3, r2
 800045e:	005b      	lsls	r3, r3, #1
 8000460:	4a0c      	ldr	r2, [pc, #48]	; (8000494 <BSP_AUDIO_IN_PDMToPCM_Init+0x144>)
 8000462:	4413      	add	r3, r2
 8000464:	4619      	mov	r1, r3
 8000466:	f008 fe37 	bl	80090d8 <PDM_Filter_setConfig>
    for(index = 0; index < ChnlNbrIn; index++)
 800046a:	697b      	ldr	r3, [r7, #20]
 800046c:	3301      	adds	r3, #1
 800046e:	617b      	str	r3, [r7, #20]
 8000470:	697a      	ldr	r2, [r7, #20]
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	429a      	cmp	r2, r3
 8000476:	d38c      	bcc.n	8000392 <BSP_AUDIO_IN_PDMToPCM_Init+0x42>
    }
  }

  return BSP_ERROR_NONE;
 8000478:	2300      	movs	r3, #0
}
 800047a:	4618      	mov	r0, r3
 800047c:	3718      	adds	r7, #24
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	58024400 	.word	0x58024400
 8000488:	240005c4 	.word	0x240005c4
 800048c:	7e809d48 	.word	0x7e809d48
 8000490:	10624dd3 	.word	0x10624dd3
 8000494:	2400065c 	.word	0x2400065c

08000498 <BSP_AUDIO_IN_RecordPDM>:
  * @param  pbuf     Main buffer pointer for the recorded data storing
  * @param  Size     Size of the record buffer
  * @retval BSP status
  */
int32_t BSP_AUDIO_IN_RecordPDM(uint32_t Instance, uint8_t* pBuf, uint32_t NbrOfBytes)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b086      	sub	sp, #24
 800049c:	af00      	add	r7, sp, #0
 800049e:	60f8      	str	r0, [r7, #12]
 80004a0:	60b9      	str	r1, [r7, #8]
 80004a2:	607a      	str	r2, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80004a4:	2300      	movs	r3, #0
 80004a6:	617b      	str	r3, [r7, #20]

  if(Instance != 1U)
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	2b01      	cmp	r3, #1
 80004ac:	d003      	beq.n	80004b6 <BSP_AUDIO_IN_RecordPDM+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80004ae:	f06f 0301 	mvn.w	r3, #1
 80004b2:	617b      	str	r3, [r7, #20]
 80004b4:	e01d      	b.n	80004f2 <BSP_AUDIO_IN_RecordPDM+0x5a>
  }
  else
  {
    /* Start the process receive DMA */
    if(HAL_SAI_Receive_DMA(&haudio_in_sai[Instance], (uint8_t*)pBuf, (uint16_t)(NbrOfBytes/(Audio_In_Ctx[Instance].BitsPerSample/8U))) != HAL_OK)
 80004b6:	68fb      	ldr	r3, [r7, #12]
 80004b8:	2298      	movs	r2, #152	; 0x98
 80004ba:	fb02 f303 	mul.w	r3, r2, r3
 80004be:	4a0f      	ldr	r2, [pc, #60]	; (80004fc <BSP_AUDIO_IN_RecordPDM+0x64>)
 80004c0:	1898      	adds	r0, r3, r2
 80004c2:	490f      	ldr	r1, [pc, #60]	; (8000500 <BSP_AUDIO_IN_RecordPDM+0x68>)
 80004c4:	68fa      	ldr	r2, [r7, #12]
 80004c6:	4613      	mov	r3, r2
 80004c8:	005b      	lsls	r3, r3, #1
 80004ca:	4413      	add	r3, r2
 80004cc:	011b      	lsls	r3, r3, #4
 80004ce:	440b      	add	r3, r1
 80004d0:	330c      	adds	r3, #12
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	08db      	lsrs	r3, r3, #3
 80004d6:	687a      	ldr	r2, [r7, #4]
 80004d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80004dc:	b29b      	uxth	r3, r3
 80004de:	461a      	mov	r2, r3
 80004e0:	68b9      	ldr	r1, [r7, #8]
 80004e2:	f006 f8af 	bl	8006644 <HAL_SAI_Receive_DMA>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d002      	beq.n	80004f2 <BSP_AUDIO_IN_RecordPDM+0x5a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80004ec:	f06f 0303 	mvn.w	r3, #3
 80004f0:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return BSP status */
  return ret;
 80004f2:	697b      	ldr	r3, [r7, #20]
}
 80004f4:	4618      	mov	r0, r3
 80004f6:	3718      	adds	r7, #24
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	24000494 	.word	0x24000494
 8000500:	240008c4 	.word	0x240008c4

08000504 <HAL_SAI_RxHalfCpltCallback>:
  * @brief  Half reception complete callback.
  * @param  hsai   SAI handle.
  * @retval None
  */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsai);

  /* Call the record update function to get the first half */
  BSP_AUDIO_IN_HalfTransfer_CallBack(0);
 800050c:	2000      	movs	r0, #0
 800050e:	f000 f819 	bl	8000544 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 8000512:	bf00      	nop
 8000514:	3708      	adds	r7, #8
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}

0800051a <HAL_SAI_RxCpltCallback>:
  * @brief  Reception complete callback.
  * @param  hsai   SAI handle.
  * @retval None
  */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 800051a:	b580      	push	{r7, lr}
 800051c:	b082      	sub	sp, #8
 800051e:	af00      	add	r7, sp, #0
 8000520:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsai);

  /* Call the record update function to get the second half */
  BSP_AUDIO_IN_TransferComplete_CallBack(0);
 8000522:	2000      	movs	r0, #0
 8000524:	f000 f804 	bl	8000530 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8000528:	bf00      	nop
 800052a:	3708      	adds	r7, #8
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}

08000530 <BSP_AUDIO_IN_TransferComplete_CallBack>:
/**
  * @brief  User callback when record buffer is filled.
  * @retval None
  */
__weak void BSP_AUDIO_IN_TransferComplete_CallBack(uint32_t Instance)
{
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* This function should be implemented by the user application.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 8000538:	bf00      	nop
 800053a:	370c      	adds	r7, #12
 800053c:	46bd      	mov	sp, r7
 800053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000542:	4770      	bx	lr

08000544 <BSP_AUDIO_IN_HalfTransfer_CallBack>:
/**
  * @brief  Manages the DMA Half Transfer complete event.
  * @retval None
  */
__weak void BSP_AUDIO_IN_HalfTransfer_CallBack(uint32_t Instance)
{
 8000544:	b480      	push	{r7}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* This function should be implemented by the user application.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 800054c:	bf00      	nop
 800054e:	370c      	adds	r7, #12
 8000550:	46bd      	mov	sp, r7
 8000552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000556:	4770      	bx	lr

08000558 <BSP_AUDIO_IN_Error_CallBack>:
/**
  * @brief  Audio IN Error callback function.
  * @retval None
  */
__weak void BSP_AUDIO_IN_Error_CallBack(uint32_t Instance)
{
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Instance);

  /* This function is called when an Interrupt due to transfer error on or peripheral
     error occurs. */
}
 8000560:	bf00      	nop
 8000562:	370c      	adds	r7, #12
 8000564:	46bd      	mov	sp, r7
 8000566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056a:	4770      	bx	lr

0800056c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000572:	2003      	movs	r0, #3
 8000574:	f000 f95c 	bl	8000830 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000578:	f003 fbe2 	bl	8003d40 <HAL_RCC_GetSysClockFreq>
 800057c:	4602      	mov	r2, r0
 800057e:	4b15      	ldr	r3, [pc, #84]	; (80005d4 <HAL_Init+0x68>)
 8000580:	699b      	ldr	r3, [r3, #24]
 8000582:	0a1b      	lsrs	r3, r3, #8
 8000584:	f003 030f 	and.w	r3, r3, #15
 8000588:	4913      	ldr	r1, [pc, #76]	; (80005d8 <HAL_Init+0x6c>)
 800058a:	5ccb      	ldrb	r3, [r1, r3]
 800058c:	f003 031f 	and.w	r3, r3, #31
 8000590:	fa22 f303 	lsr.w	r3, r2, r3
 8000594:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000596:	4b0f      	ldr	r3, [pc, #60]	; (80005d4 <HAL_Init+0x68>)
 8000598:	699b      	ldr	r3, [r3, #24]
 800059a:	f003 030f 	and.w	r3, r3, #15
 800059e:	4a0e      	ldr	r2, [pc, #56]	; (80005d8 <HAL_Init+0x6c>)
 80005a0:	5cd3      	ldrb	r3, [r2, r3]
 80005a2:	f003 031f 	and.w	r3, r3, #31
 80005a6:	687a      	ldr	r2, [r7, #4]
 80005a8:	fa22 f303 	lsr.w	r3, r2, r3
 80005ac:	4a0b      	ldr	r2, [pc, #44]	; (80005dc <HAL_Init+0x70>)
 80005ae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80005b0:	4a0b      	ldr	r2, [pc, #44]	; (80005e0 <HAL_Init+0x74>)
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005b6:	2000      	movs	r0, #0
 80005b8:	f000 f814 	bl	80005e4 <HAL_InitTick>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80005c2:	2301      	movs	r3, #1
 80005c4:	e002      	b.n	80005cc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80005c6:	f006 fd2d 	bl	8007024 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005ca:	2300      	movs	r3, #0
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	58024400 	.word	0x58024400
 80005d8:	08009710 	.word	0x08009710
 80005dc:	2400040c 	.word	0x2400040c
 80005e0:	24000408 	.word	0x24000408

080005e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80005ec:	4b15      	ldr	r3, [pc, #84]	; (8000644 <HAL_InitTick+0x60>)
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d101      	bne.n	80005f8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80005f4:	2301      	movs	r3, #1
 80005f6:	e021      	b.n	800063c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80005f8:	4b13      	ldr	r3, [pc, #76]	; (8000648 <HAL_InitTick+0x64>)
 80005fa:	681a      	ldr	r2, [r3, #0]
 80005fc:	4b11      	ldr	r3, [pc, #68]	; (8000644 <HAL_InitTick+0x60>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	4619      	mov	r1, r3
 8000602:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000606:	fbb3 f3f1 	udiv	r3, r3, r1
 800060a:	fbb2 f3f3 	udiv	r3, r2, r3
 800060e:	4618      	mov	r0, r3
 8000610:	f000 f941 	bl	8000896 <HAL_SYSTICK_Config>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800061a:	2301      	movs	r3, #1
 800061c:	e00e      	b.n	800063c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	2b0f      	cmp	r3, #15
 8000622:	d80a      	bhi.n	800063a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000624:	2200      	movs	r2, #0
 8000626:	6879      	ldr	r1, [r7, #4]
 8000628:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800062c:	f000 f90b 	bl	8000846 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000630:	4a06      	ldr	r2, [pc, #24]	; (800064c <HAL_InitTick+0x68>)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000636:	2300      	movs	r3, #0
 8000638:	e000      	b.n	800063c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800063a:	2301      	movs	r3, #1
}
 800063c:	4618      	mov	r0, r3
 800063e:	3708      	adds	r7, #8
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	24000404 	.word	0x24000404
 8000648:	24000408 	.word	0x24000408
 800064c:	24000400 	.word	0x24000400

08000650 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000654:	4b06      	ldr	r3, [pc, #24]	; (8000670 <HAL_IncTick+0x20>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	461a      	mov	r2, r3
 800065a:	4b06      	ldr	r3, [pc, #24]	; (8000674 <HAL_IncTick+0x24>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4413      	add	r3, r2
 8000660:	4a04      	ldr	r2, [pc, #16]	; (8000674 <HAL_IncTick+0x24>)
 8000662:	6013      	str	r3, [r2, #0]
}
 8000664:	bf00      	nop
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	24000404 	.word	0x24000404
 8000674:	24000954 	.word	0x24000954

08000678 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  return uwTick;
 800067c:	4b03      	ldr	r3, [pc, #12]	; (800068c <HAL_GetTick+0x14>)
 800067e:	681b      	ldr	r3, [r3, #0]
}
 8000680:	4618      	mov	r0, r3
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	24000954 	.word	0x24000954

08000690 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000690:	b480      	push	{r7}
 8000692:	b085      	sub	sp, #20
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	f003 0307 	and.w	r3, r3, #7
 800069e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006a0:	4b0b      	ldr	r3, [pc, #44]	; (80006d0 <__NVIC_SetPriorityGrouping+0x40>)
 80006a2:	68db      	ldr	r3, [r3, #12]
 80006a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006a6:	68ba      	ldr	r2, [r7, #8]
 80006a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006ac:	4013      	ands	r3, r2
 80006ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80006b8:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <__NVIC_SetPriorityGrouping+0x44>)
 80006ba:	4313      	orrs	r3, r2
 80006bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006be:	4a04      	ldr	r2, [pc, #16]	; (80006d0 <__NVIC_SetPriorityGrouping+0x40>)
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	60d3      	str	r3, [r2, #12]
}
 80006c4:	bf00      	nop
 80006c6:	3714      	adds	r7, #20
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	e000ed00 	.word	0xe000ed00
 80006d4:	05fa0000 	.word	0x05fa0000

080006d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006dc:	4b04      	ldr	r3, [pc, #16]	; (80006f0 <__NVIC_GetPriorityGrouping+0x18>)
 80006de:	68db      	ldr	r3, [r3, #12]
 80006e0:	0a1b      	lsrs	r3, r3, #8
 80006e2:	f003 0307 	and.w	r3, r3, #7
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr
 80006f0:	e000ed00 	.word	0xe000ed00

080006f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	4603      	mov	r3, r0
 80006fc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80006fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000702:	2b00      	cmp	r3, #0
 8000704:	db0b      	blt.n	800071e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000706:	88fb      	ldrh	r3, [r7, #6]
 8000708:	f003 021f 	and.w	r2, r3, #31
 800070c:	4907      	ldr	r1, [pc, #28]	; (800072c <__NVIC_EnableIRQ+0x38>)
 800070e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000712:	095b      	lsrs	r3, r3, #5
 8000714:	2001      	movs	r0, #1
 8000716:	fa00 f202 	lsl.w	r2, r0, r2
 800071a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800071e:	bf00      	nop
 8000720:	370c      	adds	r7, #12
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	e000e100 	.word	0xe000e100

08000730 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
 8000736:	4603      	mov	r3, r0
 8000738:	6039      	str	r1, [r7, #0]
 800073a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800073c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000740:	2b00      	cmp	r3, #0
 8000742:	db0a      	blt.n	800075a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	b2da      	uxtb	r2, r3
 8000748:	490c      	ldr	r1, [pc, #48]	; (800077c <__NVIC_SetPriority+0x4c>)
 800074a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800074e:	0112      	lsls	r2, r2, #4
 8000750:	b2d2      	uxtb	r2, r2
 8000752:	440b      	add	r3, r1
 8000754:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000758:	e00a      	b.n	8000770 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	b2da      	uxtb	r2, r3
 800075e:	4908      	ldr	r1, [pc, #32]	; (8000780 <__NVIC_SetPriority+0x50>)
 8000760:	88fb      	ldrh	r3, [r7, #6]
 8000762:	f003 030f 	and.w	r3, r3, #15
 8000766:	3b04      	subs	r3, #4
 8000768:	0112      	lsls	r2, r2, #4
 800076a:	b2d2      	uxtb	r2, r2
 800076c:	440b      	add	r3, r1
 800076e:	761a      	strb	r2, [r3, #24]
}
 8000770:	bf00      	nop
 8000772:	370c      	adds	r7, #12
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	e000e100 	.word	0xe000e100
 8000780:	e000ed00 	.word	0xe000ed00

08000784 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000784:	b480      	push	{r7}
 8000786:	b089      	sub	sp, #36	; 0x24
 8000788:	af00      	add	r7, sp, #0
 800078a:	60f8      	str	r0, [r7, #12]
 800078c:	60b9      	str	r1, [r7, #8]
 800078e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	f003 0307 	and.w	r3, r3, #7
 8000796:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000798:	69fb      	ldr	r3, [r7, #28]
 800079a:	f1c3 0307 	rsb	r3, r3, #7
 800079e:	2b04      	cmp	r3, #4
 80007a0:	bf28      	it	cs
 80007a2:	2304      	movcs	r3, #4
 80007a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007a6:	69fb      	ldr	r3, [r7, #28]
 80007a8:	3304      	adds	r3, #4
 80007aa:	2b06      	cmp	r3, #6
 80007ac:	d902      	bls.n	80007b4 <NVIC_EncodePriority+0x30>
 80007ae:	69fb      	ldr	r3, [r7, #28]
 80007b0:	3b03      	subs	r3, #3
 80007b2:	e000      	b.n	80007b6 <NVIC_EncodePriority+0x32>
 80007b4:	2300      	movs	r3, #0
 80007b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80007bc:	69bb      	ldr	r3, [r7, #24]
 80007be:	fa02 f303 	lsl.w	r3, r2, r3
 80007c2:	43da      	mvns	r2, r3
 80007c4:	68bb      	ldr	r3, [r7, #8]
 80007c6:	401a      	ands	r2, r3
 80007c8:	697b      	ldr	r3, [r7, #20]
 80007ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80007d0:	697b      	ldr	r3, [r7, #20]
 80007d2:	fa01 f303 	lsl.w	r3, r1, r3
 80007d6:	43d9      	mvns	r1, r3
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007dc:	4313      	orrs	r3, r2
         );
}
 80007de:	4618      	mov	r0, r3
 80007e0:	3724      	adds	r7, #36	; 0x24
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
	...

080007ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	3b01      	subs	r3, #1
 80007f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007fc:	d301      	bcc.n	8000802 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007fe:	2301      	movs	r3, #1
 8000800:	e00f      	b.n	8000822 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000802:	4a0a      	ldr	r2, [pc, #40]	; (800082c <SysTick_Config+0x40>)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	3b01      	subs	r3, #1
 8000808:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800080a:	210f      	movs	r1, #15
 800080c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000810:	f7ff ff8e 	bl	8000730 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000814:	4b05      	ldr	r3, [pc, #20]	; (800082c <SysTick_Config+0x40>)
 8000816:	2200      	movs	r2, #0
 8000818:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800081a:	4b04      	ldr	r3, [pc, #16]	; (800082c <SysTick_Config+0x40>)
 800081c:	2207      	movs	r2, #7
 800081e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000820:	2300      	movs	r3, #0
}
 8000822:	4618      	mov	r0, r3
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	e000e010 	.word	0xe000e010

08000830 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000838:	6878      	ldr	r0, [r7, #4]
 800083a:	f7ff ff29 	bl	8000690 <__NVIC_SetPriorityGrouping>
}
 800083e:	bf00      	nop
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}

08000846 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000846:	b580      	push	{r7, lr}
 8000848:	b086      	sub	sp, #24
 800084a:	af00      	add	r7, sp, #0
 800084c:	4603      	mov	r3, r0
 800084e:	60b9      	str	r1, [r7, #8]
 8000850:	607a      	str	r2, [r7, #4]
 8000852:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000854:	f7ff ff40 	bl	80006d8 <__NVIC_GetPriorityGrouping>
 8000858:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800085a:	687a      	ldr	r2, [r7, #4]
 800085c:	68b9      	ldr	r1, [r7, #8]
 800085e:	6978      	ldr	r0, [r7, #20]
 8000860:	f7ff ff90 	bl	8000784 <NVIC_EncodePriority>
 8000864:	4602      	mov	r2, r0
 8000866:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800086a:	4611      	mov	r1, r2
 800086c:	4618      	mov	r0, r3
 800086e:	f7ff ff5f 	bl	8000730 <__NVIC_SetPriority>
}
 8000872:	bf00      	nop
 8000874:	3718      	adds	r7, #24
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}

0800087a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800087a:	b580      	push	{r7, lr}
 800087c:	b082      	sub	sp, #8
 800087e:	af00      	add	r7, sp, #0
 8000880:	4603      	mov	r3, r0
 8000882:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000884:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000888:	4618      	mov	r0, r3
 800088a:	f7ff ff33 	bl	80006f4 <__NVIC_EnableIRQ>
}
 800088e:	bf00      	nop
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}

08000896 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000896:	b580      	push	{r7, lr}
 8000898:	b082      	sub	sp, #8
 800089a:	af00      	add	r7, sp, #0
 800089c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800089e:	6878      	ldr	r0, [r7, #4]
 80008a0:	f7ff ffa4 	bl	80007ec <SysTick_Config>
 80008a4:	4603      	mov	r3, r0
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	3708      	adds	r7, #8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
	...

080008b0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d101      	bne.n	80008c2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80008be:	2301      	movs	r3, #1
 80008c0:	e054      	b.n	800096c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	7f5b      	ldrb	r3, [r3, #29]
 80008c6:	b2db      	uxtb	r3, r3
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d105      	bne.n	80008d8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	2200      	movs	r2, #0
 80008d0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80008d2:	6878      	ldr	r0, [r7, #4]
 80008d4:	f006 fbc0 	bl	8007058 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	2202      	movs	r2, #2
 80008dc:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	791b      	ldrb	r3, [r3, #4]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d10c      	bne.n	8000900 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4a22      	ldr	r2, [pc, #136]	; (8000974 <HAL_CRC_Init+0xc4>)
 80008ec:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	689a      	ldr	r2, [r3, #8]
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f022 0218 	bic.w	r2, r2, #24
 80008fc:	609a      	str	r2, [r3, #8]
 80008fe:	e00c      	b.n	800091a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	6899      	ldr	r1, [r3, #8]
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	68db      	ldr	r3, [r3, #12]
 8000908:	461a      	mov	r2, r3
 800090a:	6878      	ldr	r0, [r7, #4]
 800090c:	f000 f834 	bl	8000978 <HAL_CRCEx_Polynomial_Set>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8000916:	2301      	movs	r3, #1
 8000918:	e028      	b.n	800096c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	795b      	ldrb	r3, [r3, #5]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d105      	bne.n	800092e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800092a:	611a      	str	r2, [r3, #16]
 800092c:	e004      	b.n	8000938 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	687a      	ldr	r2, [r7, #4]
 8000934:	6912      	ldr	r2, [r2, #16]
 8000936:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	689b      	ldr	r3, [r3, #8]
 800093e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	695a      	ldr	r2, [r3, #20]
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	430a      	orrs	r2, r1
 800094c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	689b      	ldr	r3, [r3, #8]
 8000954:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	699a      	ldr	r2, [r3, #24]
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	430a      	orrs	r2, r1
 8000962:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	2201      	movs	r2, #1
 8000968:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800096a:	2300      	movs	r3, #0
}
 800096c:	4618      	mov	r0, r3
 800096e:	3708      	adds	r7, #8
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	04c11db7 	.word	0x04c11db7

08000978 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8000978:	b480      	push	{r7}
 800097a:	b087      	sub	sp, #28
 800097c:	af00      	add	r7, sp, #0
 800097e:	60f8      	str	r0, [r7, #12]
 8000980:	60b9      	str	r1, [r7, #8]
 8000982:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000984:	2300      	movs	r3, #0
 8000986:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8000988:	231f      	movs	r3, #31
 800098a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800098c:	bf00      	nop
 800098e:	693b      	ldr	r3, [r7, #16]
 8000990:	1e5a      	subs	r2, r3, #1
 8000992:	613a      	str	r2, [r7, #16]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d009      	beq.n	80009ac <HAL_CRCEx_Polynomial_Set+0x34>
 8000998:	693b      	ldr	r3, [r7, #16]
 800099a:	f003 031f 	and.w	r3, r3, #31
 800099e:	68ba      	ldr	r2, [r7, #8]
 80009a0:	fa22 f303 	lsr.w	r3, r2, r3
 80009a4:	f003 0301 	and.w	r3, r3, #1
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d0f0      	beq.n	800098e <HAL_CRCEx_Polynomial_Set+0x16>
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	2b18      	cmp	r3, #24
 80009b0:	d846      	bhi.n	8000a40 <HAL_CRCEx_Polynomial_Set+0xc8>
 80009b2:	a201      	add	r2, pc, #4	; (adr r2, 80009b8 <HAL_CRCEx_Polynomial_Set+0x40>)
 80009b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009b8:	08000a47 	.word	0x08000a47
 80009bc:	08000a41 	.word	0x08000a41
 80009c0:	08000a41 	.word	0x08000a41
 80009c4:	08000a41 	.word	0x08000a41
 80009c8:	08000a41 	.word	0x08000a41
 80009cc:	08000a41 	.word	0x08000a41
 80009d0:	08000a41 	.word	0x08000a41
 80009d4:	08000a41 	.word	0x08000a41
 80009d8:	08000a35 	.word	0x08000a35
 80009dc:	08000a41 	.word	0x08000a41
 80009e0:	08000a41 	.word	0x08000a41
 80009e4:	08000a41 	.word	0x08000a41
 80009e8:	08000a41 	.word	0x08000a41
 80009ec:	08000a41 	.word	0x08000a41
 80009f0:	08000a41 	.word	0x08000a41
 80009f4:	08000a41 	.word	0x08000a41
 80009f8:	08000a29 	.word	0x08000a29
 80009fc:	08000a41 	.word	0x08000a41
 8000a00:	08000a41 	.word	0x08000a41
 8000a04:	08000a41 	.word	0x08000a41
 8000a08:	08000a41 	.word	0x08000a41
 8000a0c:	08000a41 	.word	0x08000a41
 8000a10:	08000a41 	.word	0x08000a41
 8000a14:	08000a41 	.word	0x08000a41
 8000a18:	08000a1d 	.word	0x08000a1d
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8000a1c:	693b      	ldr	r3, [r7, #16]
 8000a1e:	2b06      	cmp	r3, #6
 8000a20:	d913      	bls.n	8000a4a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8000a22:	2301      	movs	r3, #1
 8000a24:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8000a26:	e010      	b.n	8000a4a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8000a28:	693b      	ldr	r3, [r7, #16]
 8000a2a:	2b07      	cmp	r3, #7
 8000a2c:	d90f      	bls.n	8000a4e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8000a32:	e00c      	b.n	8000a4e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8000a34:	693b      	ldr	r3, [r7, #16]
 8000a36:	2b0f      	cmp	r3, #15
 8000a38:	d90b      	bls.n	8000a52 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8000a3e:	e008      	b.n	8000a52 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8000a40:	2301      	movs	r3, #1
 8000a42:	75fb      	strb	r3, [r7, #23]
      break;
 8000a44:	e006      	b.n	8000a54 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000a46:	bf00      	nop
 8000a48:	e004      	b.n	8000a54 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000a4a:	bf00      	nop
 8000a4c:	e002      	b.n	8000a54 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000a4e:	bf00      	nop
 8000a50:	e000      	b.n	8000a54 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000a52:	bf00      	nop
  }
  if (status == HAL_OK)
 8000a54:	7dfb      	ldrb	r3, [r7, #23]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d10d      	bne.n	8000a76 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	68ba      	ldr	r2, [r7, #8]
 8000a60:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	689b      	ldr	r3, [r3, #8]
 8000a68:	f023 0118 	bic.w	r1, r3, #24
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	687a      	ldr	r2, [r7, #4]
 8000a72:	430a      	orrs	r2, r1
 8000a74:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8000a76:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	371c      	adds	r7, #28
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr

08000a84 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b086      	sub	sp, #24
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8000a8c:	f7ff fdf4 	bl	8000678 <HAL_GetTick>
 8000a90:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d101      	bne.n	8000a9c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	e314      	b.n	80010c6 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a66      	ldr	r2, [pc, #408]	; (8000c3c <HAL_DMA_Init+0x1b8>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d04a      	beq.n	8000b3c <HAL_DMA_Init+0xb8>
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4a65      	ldr	r2, [pc, #404]	; (8000c40 <HAL_DMA_Init+0x1bc>)
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d045      	beq.n	8000b3c <HAL_DMA_Init+0xb8>
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a63      	ldr	r2, [pc, #396]	; (8000c44 <HAL_DMA_Init+0x1c0>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d040      	beq.n	8000b3c <HAL_DMA_Init+0xb8>
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4a62      	ldr	r2, [pc, #392]	; (8000c48 <HAL_DMA_Init+0x1c4>)
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	d03b      	beq.n	8000b3c <HAL_DMA_Init+0xb8>
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a60      	ldr	r2, [pc, #384]	; (8000c4c <HAL_DMA_Init+0x1c8>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d036      	beq.n	8000b3c <HAL_DMA_Init+0xb8>
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4a5f      	ldr	r2, [pc, #380]	; (8000c50 <HAL_DMA_Init+0x1cc>)
 8000ad4:	4293      	cmp	r3, r2
 8000ad6:	d031      	beq.n	8000b3c <HAL_DMA_Init+0xb8>
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a5d      	ldr	r2, [pc, #372]	; (8000c54 <HAL_DMA_Init+0x1d0>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d02c      	beq.n	8000b3c <HAL_DMA_Init+0xb8>
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4a5c      	ldr	r2, [pc, #368]	; (8000c58 <HAL_DMA_Init+0x1d4>)
 8000ae8:	4293      	cmp	r3, r2
 8000aea:	d027      	beq.n	8000b3c <HAL_DMA_Init+0xb8>
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a5a      	ldr	r2, [pc, #360]	; (8000c5c <HAL_DMA_Init+0x1d8>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d022      	beq.n	8000b3c <HAL_DMA_Init+0xb8>
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4a59      	ldr	r2, [pc, #356]	; (8000c60 <HAL_DMA_Init+0x1dc>)
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d01d      	beq.n	8000b3c <HAL_DMA_Init+0xb8>
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a57      	ldr	r2, [pc, #348]	; (8000c64 <HAL_DMA_Init+0x1e0>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d018      	beq.n	8000b3c <HAL_DMA_Init+0xb8>
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a56      	ldr	r2, [pc, #344]	; (8000c68 <HAL_DMA_Init+0x1e4>)
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d013      	beq.n	8000b3c <HAL_DMA_Init+0xb8>
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a54      	ldr	r2, [pc, #336]	; (8000c6c <HAL_DMA_Init+0x1e8>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d00e      	beq.n	8000b3c <HAL_DMA_Init+0xb8>
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4a53      	ldr	r2, [pc, #332]	; (8000c70 <HAL_DMA_Init+0x1ec>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d009      	beq.n	8000b3c <HAL_DMA_Init+0xb8>
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a51      	ldr	r2, [pc, #324]	; (8000c74 <HAL_DMA_Init+0x1f0>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d004      	beq.n	8000b3c <HAL_DMA_Init+0xb8>
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a50      	ldr	r2, [pc, #320]	; (8000c78 <HAL_DMA_Init+0x1f4>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d101      	bne.n	8000b40 <HAL_DMA_Init+0xbc>
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	e000      	b.n	8000b42 <HAL_DMA_Init+0xbe>
 8000b40:	2300      	movs	r3, #0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	f000 813c 	beq.w	8000dc0 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2202      	movs	r2, #2
 8000b4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2200      	movs	r2, #0
 8000b54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a37      	ldr	r2, [pc, #220]	; (8000c3c <HAL_DMA_Init+0x1b8>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d04a      	beq.n	8000bf8 <HAL_DMA_Init+0x174>
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4a36      	ldr	r2, [pc, #216]	; (8000c40 <HAL_DMA_Init+0x1bc>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d045      	beq.n	8000bf8 <HAL_DMA_Init+0x174>
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a34      	ldr	r2, [pc, #208]	; (8000c44 <HAL_DMA_Init+0x1c0>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d040      	beq.n	8000bf8 <HAL_DMA_Init+0x174>
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a33      	ldr	r2, [pc, #204]	; (8000c48 <HAL_DMA_Init+0x1c4>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d03b      	beq.n	8000bf8 <HAL_DMA_Init+0x174>
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a31      	ldr	r2, [pc, #196]	; (8000c4c <HAL_DMA_Init+0x1c8>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d036      	beq.n	8000bf8 <HAL_DMA_Init+0x174>
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a30      	ldr	r2, [pc, #192]	; (8000c50 <HAL_DMA_Init+0x1cc>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d031      	beq.n	8000bf8 <HAL_DMA_Init+0x174>
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a2e      	ldr	r2, [pc, #184]	; (8000c54 <HAL_DMA_Init+0x1d0>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d02c      	beq.n	8000bf8 <HAL_DMA_Init+0x174>
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a2d      	ldr	r2, [pc, #180]	; (8000c58 <HAL_DMA_Init+0x1d4>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d027      	beq.n	8000bf8 <HAL_DMA_Init+0x174>
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a2b      	ldr	r2, [pc, #172]	; (8000c5c <HAL_DMA_Init+0x1d8>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d022      	beq.n	8000bf8 <HAL_DMA_Init+0x174>
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4a2a      	ldr	r2, [pc, #168]	; (8000c60 <HAL_DMA_Init+0x1dc>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d01d      	beq.n	8000bf8 <HAL_DMA_Init+0x174>
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a28      	ldr	r2, [pc, #160]	; (8000c64 <HAL_DMA_Init+0x1e0>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d018      	beq.n	8000bf8 <HAL_DMA_Init+0x174>
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4a27      	ldr	r2, [pc, #156]	; (8000c68 <HAL_DMA_Init+0x1e4>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d013      	beq.n	8000bf8 <HAL_DMA_Init+0x174>
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a25      	ldr	r2, [pc, #148]	; (8000c6c <HAL_DMA_Init+0x1e8>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d00e      	beq.n	8000bf8 <HAL_DMA_Init+0x174>
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a24      	ldr	r2, [pc, #144]	; (8000c70 <HAL_DMA_Init+0x1ec>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d009      	beq.n	8000bf8 <HAL_DMA_Init+0x174>
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a22      	ldr	r2, [pc, #136]	; (8000c74 <HAL_DMA_Init+0x1f0>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d004      	beq.n	8000bf8 <HAL_DMA_Init+0x174>
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a21      	ldr	r2, [pc, #132]	; (8000c78 <HAL_DMA_Init+0x1f4>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d108      	bne.n	8000c0a <HAL_DMA_Init+0x186>
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f022 0201 	bic.w	r2, r2, #1
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	e007      	b.n	8000c1a <HAL_DMA_Init+0x196>
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f022 0201 	bic.w	r2, r2, #1
 8000c18:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8000c1a:	e02f      	b.n	8000c7c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000c1c:	f7ff fd2c 	bl	8000678 <HAL_GetTick>
 8000c20:	4602      	mov	r2, r0
 8000c22:	693b      	ldr	r3, [r7, #16]
 8000c24:	1ad3      	subs	r3, r2, r3
 8000c26:	2b05      	cmp	r3, #5
 8000c28:	d928      	bls.n	8000c7c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2220      	movs	r2, #32
 8000c2e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2203      	movs	r2, #3
 8000c34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	e244      	b.n	80010c6 <HAL_DMA_Init+0x642>
 8000c3c:	40020010 	.word	0x40020010
 8000c40:	40020028 	.word	0x40020028
 8000c44:	40020040 	.word	0x40020040
 8000c48:	40020058 	.word	0x40020058
 8000c4c:	40020070 	.word	0x40020070
 8000c50:	40020088 	.word	0x40020088
 8000c54:	400200a0 	.word	0x400200a0
 8000c58:	400200b8 	.word	0x400200b8
 8000c5c:	40020410 	.word	0x40020410
 8000c60:	40020428 	.word	0x40020428
 8000c64:	40020440 	.word	0x40020440
 8000c68:	40020458 	.word	0x40020458
 8000c6c:	40020470 	.word	0x40020470
 8000c70:	40020488 	.word	0x40020488
 8000c74:	400204a0 	.word	0x400204a0
 8000c78:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d1c8      	bne.n	8000c1c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000c92:	697a      	ldr	r2, [r7, #20]
 8000c94:	4b84      	ldr	r3, [pc, #528]	; (8000ea8 <HAL_DMA_Init+0x424>)
 8000c96:	4013      	ands	r3, r2
 8000c98:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8000ca2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	691b      	ldr	r3, [r3, #16]
 8000ca8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cae:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	699b      	ldr	r3, [r3, #24]
 8000cb4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cba:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	6a1b      	ldr	r3, [r3, #32]
 8000cc0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8000cc2:	697a      	ldr	r2, [r7, #20]
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ccc:	2b04      	cmp	r3, #4
 8000cce:	d107      	bne.n	8000ce0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	697a      	ldr	r2, [r7, #20]
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	2b28      	cmp	r3, #40	; 0x28
 8000ce6:	d903      	bls.n	8000cf0 <HAL_DMA_Init+0x26c>
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	2b2e      	cmp	r3, #46	; 0x2e
 8000cee:	d91f      	bls.n	8000d30 <HAL_DMA_Init+0x2ac>
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	2b3e      	cmp	r3, #62	; 0x3e
 8000cf6:	d903      	bls.n	8000d00 <HAL_DMA_Init+0x27c>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	2b42      	cmp	r3, #66	; 0x42
 8000cfe:	d917      	bls.n	8000d30 <HAL_DMA_Init+0x2ac>
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	2b46      	cmp	r3, #70	; 0x46
 8000d06:	d903      	bls.n	8000d10 <HAL_DMA_Init+0x28c>
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	2b48      	cmp	r3, #72	; 0x48
 8000d0e:	d90f      	bls.n	8000d30 <HAL_DMA_Init+0x2ac>
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	2b4e      	cmp	r3, #78	; 0x4e
 8000d16:	d903      	bls.n	8000d20 <HAL_DMA_Init+0x29c>
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	2b52      	cmp	r3, #82	; 0x52
 8000d1e:	d907      	bls.n	8000d30 <HAL_DMA_Init+0x2ac>
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	2b73      	cmp	r3, #115	; 0x73
 8000d26:	d905      	bls.n	8000d34 <HAL_DMA_Init+0x2b0>
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	2b77      	cmp	r3, #119	; 0x77
 8000d2e:	d801      	bhi.n	8000d34 <HAL_DMA_Init+0x2b0>
 8000d30:	2301      	movs	r3, #1
 8000d32:	e000      	b.n	8000d36 <HAL_DMA_Init+0x2b2>
 8000d34:	2300      	movs	r3, #0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d003      	beq.n	8000d42 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000d40:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	697a      	ldr	r2, [r7, #20]
 8000d48:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	695b      	ldr	r3, [r3, #20]
 8000d50:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	f023 0307 	bic.w	r3, r3, #7
 8000d58:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d5e:	697a      	ldr	r2, [r7, #20]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d68:	2b04      	cmp	r3, #4
 8000d6a:	d117      	bne.n	8000d9c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d70:	697a      	ldr	r2, [r7, #20]
 8000d72:	4313      	orrs	r3, r2
 8000d74:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d00e      	beq.n	8000d9c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000d7e:	6878      	ldr	r0, [r7, #4]
 8000d80:	f001 fdd8 	bl	8002934 <DMA_CheckFifoParam>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d008      	beq.n	8000d9c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2240      	movs	r2, #64	; 0x40
 8000d8e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2201      	movs	r2, #1
 8000d94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	e194      	b.n	80010c6 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	697a      	ldr	r2, [r7, #20]
 8000da2:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	f001 fd13 	bl	80027d0 <DMA_CalcBaseAndBitshift>
 8000daa:	4603      	mov	r3, r0
 8000dac:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000db2:	f003 031f 	and.w	r3, r3, #31
 8000db6:	223f      	movs	r2, #63	; 0x3f
 8000db8:	409a      	lsls	r2, r3
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	609a      	str	r2, [r3, #8]
 8000dbe:	e0ca      	b.n	8000f56 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a39      	ldr	r2, [pc, #228]	; (8000eac <HAL_DMA_Init+0x428>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d022      	beq.n	8000e10 <HAL_DMA_Init+0x38c>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a38      	ldr	r2, [pc, #224]	; (8000eb0 <HAL_DMA_Init+0x42c>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d01d      	beq.n	8000e10 <HAL_DMA_Init+0x38c>
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a36      	ldr	r2, [pc, #216]	; (8000eb4 <HAL_DMA_Init+0x430>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d018      	beq.n	8000e10 <HAL_DMA_Init+0x38c>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a35      	ldr	r2, [pc, #212]	; (8000eb8 <HAL_DMA_Init+0x434>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d013      	beq.n	8000e10 <HAL_DMA_Init+0x38c>
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a33      	ldr	r2, [pc, #204]	; (8000ebc <HAL_DMA_Init+0x438>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d00e      	beq.n	8000e10 <HAL_DMA_Init+0x38c>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a32      	ldr	r2, [pc, #200]	; (8000ec0 <HAL_DMA_Init+0x43c>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d009      	beq.n	8000e10 <HAL_DMA_Init+0x38c>
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a30      	ldr	r2, [pc, #192]	; (8000ec4 <HAL_DMA_Init+0x440>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d004      	beq.n	8000e10 <HAL_DMA_Init+0x38c>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a2f      	ldr	r2, [pc, #188]	; (8000ec8 <HAL_DMA_Init+0x444>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d101      	bne.n	8000e14 <HAL_DMA_Init+0x390>
 8000e10:	2301      	movs	r3, #1
 8000e12:	e000      	b.n	8000e16 <HAL_DMA_Init+0x392>
 8000e14:	2300      	movs	r3, #0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	f000 8094 	beq.w	8000f44 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a22      	ldr	r2, [pc, #136]	; (8000eac <HAL_DMA_Init+0x428>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d021      	beq.n	8000e6a <HAL_DMA_Init+0x3e6>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4a21      	ldr	r2, [pc, #132]	; (8000eb0 <HAL_DMA_Init+0x42c>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d01c      	beq.n	8000e6a <HAL_DMA_Init+0x3e6>
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a1f      	ldr	r2, [pc, #124]	; (8000eb4 <HAL_DMA_Init+0x430>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d017      	beq.n	8000e6a <HAL_DMA_Init+0x3e6>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a1e      	ldr	r2, [pc, #120]	; (8000eb8 <HAL_DMA_Init+0x434>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d012      	beq.n	8000e6a <HAL_DMA_Init+0x3e6>
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a1c      	ldr	r2, [pc, #112]	; (8000ebc <HAL_DMA_Init+0x438>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d00d      	beq.n	8000e6a <HAL_DMA_Init+0x3e6>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a1b      	ldr	r2, [pc, #108]	; (8000ec0 <HAL_DMA_Init+0x43c>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d008      	beq.n	8000e6a <HAL_DMA_Init+0x3e6>
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a19      	ldr	r2, [pc, #100]	; (8000ec4 <HAL_DMA_Init+0x440>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d003      	beq.n	8000e6a <HAL_DMA_Init+0x3e6>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a18      	ldr	r2, [pc, #96]	; (8000ec8 <HAL_DMA_Init+0x444>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2202      	movs	r2, #2
 8000e70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2200      	movs	r2, #0
 8000e78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8000e84:	697a      	ldr	r2, [r7, #20]
 8000e86:	4b11      	ldr	r3, [pc, #68]	; (8000ecc <HAL_DMA_Init+0x448>)
 8000e88:	4013      	ands	r3, r2
 8000e8a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	689b      	ldr	r3, [r3, #8]
 8000e90:	2b40      	cmp	r3, #64	; 0x40
 8000e92:	d01d      	beq.n	8000ed0 <HAL_DMA_Init+0x44c>
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	689b      	ldr	r3, [r3, #8]
 8000e98:	2b80      	cmp	r3, #128	; 0x80
 8000e9a:	d102      	bne.n	8000ea2 <HAL_DMA_Init+0x41e>
 8000e9c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ea0:	e017      	b.n	8000ed2 <HAL_DMA_Init+0x44e>
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	e015      	b.n	8000ed2 <HAL_DMA_Init+0x44e>
 8000ea6:	bf00      	nop
 8000ea8:	fe10803f 	.word	0xfe10803f
 8000eac:	58025408 	.word	0x58025408
 8000eb0:	5802541c 	.word	0x5802541c
 8000eb4:	58025430 	.word	0x58025430
 8000eb8:	58025444 	.word	0x58025444
 8000ebc:	58025458 	.word	0x58025458
 8000ec0:	5802546c 	.word	0x5802546c
 8000ec4:	58025480 	.word	0x58025480
 8000ec8:	58025494 	.word	0x58025494
 8000ecc:	fffe000f 	.word	0xfffe000f
 8000ed0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8000ed2:	687a      	ldr	r2, [r7, #4]
 8000ed4:	68d2      	ldr	r2, [r2, #12]
 8000ed6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8000ed8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	691b      	ldr	r3, [r3, #16]
 8000ede:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8000ee0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	695b      	ldr	r3, [r3, #20]
 8000ee6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8000ee8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	699b      	ldr	r3, [r3, #24]
 8000eee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8000ef0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	69db      	ldr	r3, [r3, #28]
 8000ef6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8000ef8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6a1b      	ldr	r3, [r3, #32]
 8000efe:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8000f00:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8000f02:	697a      	ldr	r2, [r7, #20]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	697a      	ldr	r2, [r7, #20]
 8000f0e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	461a      	mov	r2, r3
 8000f16:	4b6e      	ldr	r3, [pc, #440]	; (80010d0 <HAL_DMA_Init+0x64c>)
 8000f18:	4413      	add	r3, r2
 8000f1a:	4a6e      	ldr	r2, [pc, #440]	; (80010d4 <HAL_DMA_Init+0x650>)
 8000f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f20:	091b      	lsrs	r3, r3, #4
 8000f22:	009a      	lsls	r2, r3, #2
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000f28:	6878      	ldr	r0, [r7, #4]
 8000f2a:	f001 fc51 	bl	80027d0 <DMA_CalcBaseAndBitshift>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f36:	f003 031f 	and.w	r3, r3, #31
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	409a      	lsls	r2, r3
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	e008      	b.n	8000f56 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2240      	movs	r2, #64	; 0x40
 8000f48:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2203      	movs	r2, #3
 8000f4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
 8000f54:	e0b7      	b.n	80010c6 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a5f      	ldr	r2, [pc, #380]	; (80010d8 <HAL_DMA_Init+0x654>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d072      	beq.n	8001046 <HAL_DMA_Init+0x5c2>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a5d      	ldr	r2, [pc, #372]	; (80010dc <HAL_DMA_Init+0x658>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d06d      	beq.n	8001046 <HAL_DMA_Init+0x5c2>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a5c      	ldr	r2, [pc, #368]	; (80010e0 <HAL_DMA_Init+0x65c>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d068      	beq.n	8001046 <HAL_DMA_Init+0x5c2>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a5a      	ldr	r2, [pc, #360]	; (80010e4 <HAL_DMA_Init+0x660>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d063      	beq.n	8001046 <HAL_DMA_Init+0x5c2>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a59      	ldr	r2, [pc, #356]	; (80010e8 <HAL_DMA_Init+0x664>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d05e      	beq.n	8001046 <HAL_DMA_Init+0x5c2>
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a57      	ldr	r2, [pc, #348]	; (80010ec <HAL_DMA_Init+0x668>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d059      	beq.n	8001046 <HAL_DMA_Init+0x5c2>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a56      	ldr	r2, [pc, #344]	; (80010f0 <HAL_DMA_Init+0x66c>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d054      	beq.n	8001046 <HAL_DMA_Init+0x5c2>
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a54      	ldr	r2, [pc, #336]	; (80010f4 <HAL_DMA_Init+0x670>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d04f      	beq.n	8001046 <HAL_DMA_Init+0x5c2>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a53      	ldr	r2, [pc, #332]	; (80010f8 <HAL_DMA_Init+0x674>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d04a      	beq.n	8001046 <HAL_DMA_Init+0x5c2>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a51      	ldr	r2, [pc, #324]	; (80010fc <HAL_DMA_Init+0x678>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d045      	beq.n	8001046 <HAL_DMA_Init+0x5c2>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a50      	ldr	r2, [pc, #320]	; (8001100 <HAL_DMA_Init+0x67c>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d040      	beq.n	8001046 <HAL_DMA_Init+0x5c2>
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a4e      	ldr	r2, [pc, #312]	; (8001104 <HAL_DMA_Init+0x680>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d03b      	beq.n	8001046 <HAL_DMA_Init+0x5c2>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a4d      	ldr	r2, [pc, #308]	; (8001108 <HAL_DMA_Init+0x684>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d036      	beq.n	8001046 <HAL_DMA_Init+0x5c2>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a4b      	ldr	r2, [pc, #300]	; (800110c <HAL_DMA_Init+0x688>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d031      	beq.n	8001046 <HAL_DMA_Init+0x5c2>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a4a      	ldr	r2, [pc, #296]	; (8001110 <HAL_DMA_Init+0x68c>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d02c      	beq.n	8001046 <HAL_DMA_Init+0x5c2>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a48      	ldr	r2, [pc, #288]	; (8001114 <HAL_DMA_Init+0x690>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d027      	beq.n	8001046 <HAL_DMA_Init+0x5c2>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a47      	ldr	r2, [pc, #284]	; (8001118 <HAL_DMA_Init+0x694>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d022      	beq.n	8001046 <HAL_DMA_Init+0x5c2>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a45      	ldr	r2, [pc, #276]	; (800111c <HAL_DMA_Init+0x698>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d01d      	beq.n	8001046 <HAL_DMA_Init+0x5c2>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a44      	ldr	r2, [pc, #272]	; (8001120 <HAL_DMA_Init+0x69c>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d018      	beq.n	8001046 <HAL_DMA_Init+0x5c2>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a42      	ldr	r2, [pc, #264]	; (8001124 <HAL_DMA_Init+0x6a0>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d013      	beq.n	8001046 <HAL_DMA_Init+0x5c2>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a41      	ldr	r2, [pc, #260]	; (8001128 <HAL_DMA_Init+0x6a4>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d00e      	beq.n	8001046 <HAL_DMA_Init+0x5c2>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a3f      	ldr	r2, [pc, #252]	; (800112c <HAL_DMA_Init+0x6a8>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d009      	beq.n	8001046 <HAL_DMA_Init+0x5c2>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a3e      	ldr	r2, [pc, #248]	; (8001130 <HAL_DMA_Init+0x6ac>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d004      	beq.n	8001046 <HAL_DMA_Init+0x5c2>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a3c      	ldr	r2, [pc, #240]	; (8001134 <HAL_DMA_Init+0x6b0>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d101      	bne.n	800104a <HAL_DMA_Init+0x5c6>
 8001046:	2301      	movs	r3, #1
 8001048:	e000      	b.n	800104c <HAL_DMA_Init+0x5c8>
 800104a:	2300      	movs	r3, #0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d032      	beq.n	80010b6 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f001 fceb 	bl	8002a2c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	2b80      	cmp	r3, #128	; 0x80
 800105c:	d102      	bne.n	8001064 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2200      	movs	r2, #0
 8001062:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	685a      	ldr	r2, [r3, #4]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800106c:	b2d2      	uxtb	r2, r2
 800106e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001074:	687a      	ldr	r2, [r7, #4]
 8001076:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001078:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d010      	beq.n	80010a4 <HAL_DMA_Init+0x620>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	2b08      	cmp	r3, #8
 8001088:	d80c      	bhi.n	80010a4 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f001 fd68 	bl	8002b60 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800109c:	687a      	ldr	r2, [r7, #4]
 800109e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	e008      	b.n	80010b6 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2200      	movs	r2, #0
 80010a8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2200      	movs	r2, #0
 80010ae:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2200      	movs	r2, #0
 80010b4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2200      	movs	r2, #0
 80010ba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2201      	movs	r2, #1
 80010c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80010c4:	2300      	movs	r3, #0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3718      	adds	r7, #24
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	a7fdabf8 	.word	0xa7fdabf8
 80010d4:	cccccccd 	.word	0xcccccccd
 80010d8:	40020010 	.word	0x40020010
 80010dc:	40020028 	.word	0x40020028
 80010e0:	40020040 	.word	0x40020040
 80010e4:	40020058 	.word	0x40020058
 80010e8:	40020070 	.word	0x40020070
 80010ec:	40020088 	.word	0x40020088
 80010f0:	400200a0 	.word	0x400200a0
 80010f4:	400200b8 	.word	0x400200b8
 80010f8:	40020410 	.word	0x40020410
 80010fc:	40020428 	.word	0x40020428
 8001100:	40020440 	.word	0x40020440
 8001104:	40020458 	.word	0x40020458
 8001108:	40020470 	.word	0x40020470
 800110c:	40020488 	.word	0x40020488
 8001110:	400204a0 	.word	0x400204a0
 8001114:	400204b8 	.word	0x400204b8
 8001118:	58025408 	.word	0x58025408
 800111c:	5802541c 	.word	0x5802541c
 8001120:	58025430 	.word	0x58025430
 8001124:	58025444 	.word	0x58025444
 8001128:	58025458 	.word	0x58025458
 800112c:	5802546c 	.word	0x5802546c
 8001130:	58025480 	.word	0x58025480
 8001134:	58025494 	.word	0x58025494

08001138 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	607a      	str	r2, [r7, #4]
 8001144:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001146:	2300      	movs	r3, #0
 8001148:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d101      	bne.n	8001154 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001150:	2301      	movs	r3, #1
 8001152:	e226      	b.n	80015a2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800115a:	2b01      	cmp	r3, #1
 800115c:	d101      	bne.n	8001162 <HAL_DMA_Start_IT+0x2a>
 800115e:	2302      	movs	r3, #2
 8001160:	e21f      	b.n	80015a2 <HAL_DMA_Start_IT+0x46a>
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	2201      	movs	r2, #1
 8001166:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001170:	b2db      	uxtb	r3, r3
 8001172:	2b01      	cmp	r3, #1
 8001174:	f040 820a 	bne.w	800158c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	2202      	movs	r2, #2
 800117c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	2200      	movs	r2, #0
 8001184:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a68      	ldr	r2, [pc, #416]	; (800132c <HAL_DMA_Start_IT+0x1f4>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d04a      	beq.n	8001226 <HAL_DMA_Start_IT+0xee>
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a66      	ldr	r2, [pc, #408]	; (8001330 <HAL_DMA_Start_IT+0x1f8>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d045      	beq.n	8001226 <HAL_DMA_Start_IT+0xee>
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a65      	ldr	r2, [pc, #404]	; (8001334 <HAL_DMA_Start_IT+0x1fc>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d040      	beq.n	8001226 <HAL_DMA_Start_IT+0xee>
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a63      	ldr	r2, [pc, #396]	; (8001338 <HAL_DMA_Start_IT+0x200>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d03b      	beq.n	8001226 <HAL_DMA_Start_IT+0xee>
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a62      	ldr	r2, [pc, #392]	; (800133c <HAL_DMA_Start_IT+0x204>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d036      	beq.n	8001226 <HAL_DMA_Start_IT+0xee>
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a60      	ldr	r2, [pc, #384]	; (8001340 <HAL_DMA_Start_IT+0x208>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d031      	beq.n	8001226 <HAL_DMA_Start_IT+0xee>
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a5f      	ldr	r2, [pc, #380]	; (8001344 <HAL_DMA_Start_IT+0x20c>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d02c      	beq.n	8001226 <HAL_DMA_Start_IT+0xee>
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a5d      	ldr	r2, [pc, #372]	; (8001348 <HAL_DMA_Start_IT+0x210>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d027      	beq.n	8001226 <HAL_DMA_Start_IT+0xee>
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a5c      	ldr	r2, [pc, #368]	; (800134c <HAL_DMA_Start_IT+0x214>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d022      	beq.n	8001226 <HAL_DMA_Start_IT+0xee>
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a5a      	ldr	r2, [pc, #360]	; (8001350 <HAL_DMA_Start_IT+0x218>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d01d      	beq.n	8001226 <HAL_DMA_Start_IT+0xee>
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a59      	ldr	r2, [pc, #356]	; (8001354 <HAL_DMA_Start_IT+0x21c>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d018      	beq.n	8001226 <HAL_DMA_Start_IT+0xee>
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a57      	ldr	r2, [pc, #348]	; (8001358 <HAL_DMA_Start_IT+0x220>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d013      	beq.n	8001226 <HAL_DMA_Start_IT+0xee>
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a56      	ldr	r2, [pc, #344]	; (800135c <HAL_DMA_Start_IT+0x224>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d00e      	beq.n	8001226 <HAL_DMA_Start_IT+0xee>
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a54      	ldr	r2, [pc, #336]	; (8001360 <HAL_DMA_Start_IT+0x228>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d009      	beq.n	8001226 <HAL_DMA_Start_IT+0xee>
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a53      	ldr	r2, [pc, #332]	; (8001364 <HAL_DMA_Start_IT+0x22c>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d004      	beq.n	8001226 <HAL_DMA_Start_IT+0xee>
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a51      	ldr	r2, [pc, #324]	; (8001368 <HAL_DMA_Start_IT+0x230>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d108      	bne.n	8001238 <HAL_DMA_Start_IT+0x100>
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f022 0201 	bic.w	r2, r2, #1
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	e007      	b.n	8001248 <HAL_DMA_Start_IT+0x110>
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f022 0201 	bic.w	r2, r2, #1
 8001246:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	68b9      	ldr	r1, [r7, #8]
 800124e:	68f8      	ldr	r0, [r7, #12]
 8001250:	f001 f912 	bl	8002478 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a34      	ldr	r2, [pc, #208]	; (800132c <HAL_DMA_Start_IT+0x1f4>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d04a      	beq.n	80012f4 <HAL_DMA_Start_IT+0x1bc>
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a33      	ldr	r2, [pc, #204]	; (8001330 <HAL_DMA_Start_IT+0x1f8>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d045      	beq.n	80012f4 <HAL_DMA_Start_IT+0x1bc>
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a31      	ldr	r2, [pc, #196]	; (8001334 <HAL_DMA_Start_IT+0x1fc>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d040      	beq.n	80012f4 <HAL_DMA_Start_IT+0x1bc>
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a30      	ldr	r2, [pc, #192]	; (8001338 <HAL_DMA_Start_IT+0x200>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d03b      	beq.n	80012f4 <HAL_DMA_Start_IT+0x1bc>
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a2e      	ldr	r2, [pc, #184]	; (800133c <HAL_DMA_Start_IT+0x204>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d036      	beq.n	80012f4 <HAL_DMA_Start_IT+0x1bc>
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a2d      	ldr	r2, [pc, #180]	; (8001340 <HAL_DMA_Start_IT+0x208>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d031      	beq.n	80012f4 <HAL_DMA_Start_IT+0x1bc>
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a2b      	ldr	r2, [pc, #172]	; (8001344 <HAL_DMA_Start_IT+0x20c>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d02c      	beq.n	80012f4 <HAL_DMA_Start_IT+0x1bc>
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a2a      	ldr	r2, [pc, #168]	; (8001348 <HAL_DMA_Start_IT+0x210>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d027      	beq.n	80012f4 <HAL_DMA_Start_IT+0x1bc>
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a28      	ldr	r2, [pc, #160]	; (800134c <HAL_DMA_Start_IT+0x214>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d022      	beq.n	80012f4 <HAL_DMA_Start_IT+0x1bc>
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a27      	ldr	r2, [pc, #156]	; (8001350 <HAL_DMA_Start_IT+0x218>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d01d      	beq.n	80012f4 <HAL_DMA_Start_IT+0x1bc>
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a25      	ldr	r2, [pc, #148]	; (8001354 <HAL_DMA_Start_IT+0x21c>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d018      	beq.n	80012f4 <HAL_DMA_Start_IT+0x1bc>
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a24      	ldr	r2, [pc, #144]	; (8001358 <HAL_DMA_Start_IT+0x220>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d013      	beq.n	80012f4 <HAL_DMA_Start_IT+0x1bc>
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a22      	ldr	r2, [pc, #136]	; (800135c <HAL_DMA_Start_IT+0x224>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d00e      	beq.n	80012f4 <HAL_DMA_Start_IT+0x1bc>
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a21      	ldr	r2, [pc, #132]	; (8001360 <HAL_DMA_Start_IT+0x228>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d009      	beq.n	80012f4 <HAL_DMA_Start_IT+0x1bc>
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a1f      	ldr	r2, [pc, #124]	; (8001364 <HAL_DMA_Start_IT+0x22c>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d004      	beq.n	80012f4 <HAL_DMA_Start_IT+0x1bc>
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a1e      	ldr	r2, [pc, #120]	; (8001368 <HAL_DMA_Start_IT+0x230>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d101      	bne.n	80012f8 <HAL_DMA_Start_IT+0x1c0>
 80012f4:	2301      	movs	r3, #1
 80012f6:	e000      	b.n	80012fa <HAL_DMA_Start_IT+0x1c2>
 80012f8:	2300      	movs	r3, #0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d036      	beq.n	800136c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f023 021e 	bic.w	r2, r3, #30
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f042 0216 	orr.w	r2, r2, #22
 8001310:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001316:	2b00      	cmp	r3, #0
 8001318:	d03e      	beq.n	8001398 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f042 0208 	orr.w	r2, r2, #8
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	e035      	b.n	8001398 <HAL_DMA_Start_IT+0x260>
 800132c:	40020010 	.word	0x40020010
 8001330:	40020028 	.word	0x40020028
 8001334:	40020040 	.word	0x40020040
 8001338:	40020058 	.word	0x40020058
 800133c:	40020070 	.word	0x40020070
 8001340:	40020088 	.word	0x40020088
 8001344:	400200a0 	.word	0x400200a0
 8001348:	400200b8 	.word	0x400200b8
 800134c:	40020410 	.word	0x40020410
 8001350:	40020428 	.word	0x40020428
 8001354:	40020440 	.word	0x40020440
 8001358:	40020458 	.word	0x40020458
 800135c:	40020470 	.word	0x40020470
 8001360:	40020488 	.word	0x40020488
 8001364:	400204a0 	.word	0x400204a0
 8001368:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f023 020e 	bic.w	r2, r3, #14
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f042 020a 	orr.w	r2, r2, #10
 800137e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001384:	2b00      	cmp	r3, #0
 8001386:	d007      	beq.n	8001398 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f042 0204 	orr.w	r2, r2, #4
 8001396:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a83      	ldr	r2, [pc, #524]	; (80015ac <HAL_DMA_Start_IT+0x474>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d072      	beq.n	8001488 <HAL_DMA_Start_IT+0x350>
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a82      	ldr	r2, [pc, #520]	; (80015b0 <HAL_DMA_Start_IT+0x478>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d06d      	beq.n	8001488 <HAL_DMA_Start_IT+0x350>
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a80      	ldr	r2, [pc, #512]	; (80015b4 <HAL_DMA_Start_IT+0x47c>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d068      	beq.n	8001488 <HAL_DMA_Start_IT+0x350>
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a7f      	ldr	r2, [pc, #508]	; (80015b8 <HAL_DMA_Start_IT+0x480>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d063      	beq.n	8001488 <HAL_DMA_Start_IT+0x350>
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a7d      	ldr	r2, [pc, #500]	; (80015bc <HAL_DMA_Start_IT+0x484>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d05e      	beq.n	8001488 <HAL_DMA_Start_IT+0x350>
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a7c      	ldr	r2, [pc, #496]	; (80015c0 <HAL_DMA_Start_IT+0x488>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d059      	beq.n	8001488 <HAL_DMA_Start_IT+0x350>
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a7a      	ldr	r2, [pc, #488]	; (80015c4 <HAL_DMA_Start_IT+0x48c>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d054      	beq.n	8001488 <HAL_DMA_Start_IT+0x350>
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a79      	ldr	r2, [pc, #484]	; (80015c8 <HAL_DMA_Start_IT+0x490>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d04f      	beq.n	8001488 <HAL_DMA_Start_IT+0x350>
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a77      	ldr	r2, [pc, #476]	; (80015cc <HAL_DMA_Start_IT+0x494>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d04a      	beq.n	8001488 <HAL_DMA_Start_IT+0x350>
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a76      	ldr	r2, [pc, #472]	; (80015d0 <HAL_DMA_Start_IT+0x498>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d045      	beq.n	8001488 <HAL_DMA_Start_IT+0x350>
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a74      	ldr	r2, [pc, #464]	; (80015d4 <HAL_DMA_Start_IT+0x49c>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d040      	beq.n	8001488 <HAL_DMA_Start_IT+0x350>
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a73      	ldr	r2, [pc, #460]	; (80015d8 <HAL_DMA_Start_IT+0x4a0>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d03b      	beq.n	8001488 <HAL_DMA_Start_IT+0x350>
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a71      	ldr	r2, [pc, #452]	; (80015dc <HAL_DMA_Start_IT+0x4a4>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d036      	beq.n	8001488 <HAL_DMA_Start_IT+0x350>
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a70      	ldr	r2, [pc, #448]	; (80015e0 <HAL_DMA_Start_IT+0x4a8>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d031      	beq.n	8001488 <HAL_DMA_Start_IT+0x350>
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a6e      	ldr	r2, [pc, #440]	; (80015e4 <HAL_DMA_Start_IT+0x4ac>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d02c      	beq.n	8001488 <HAL_DMA_Start_IT+0x350>
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a6d      	ldr	r2, [pc, #436]	; (80015e8 <HAL_DMA_Start_IT+0x4b0>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d027      	beq.n	8001488 <HAL_DMA_Start_IT+0x350>
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a6b      	ldr	r2, [pc, #428]	; (80015ec <HAL_DMA_Start_IT+0x4b4>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d022      	beq.n	8001488 <HAL_DMA_Start_IT+0x350>
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a6a      	ldr	r2, [pc, #424]	; (80015f0 <HAL_DMA_Start_IT+0x4b8>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d01d      	beq.n	8001488 <HAL_DMA_Start_IT+0x350>
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a68      	ldr	r2, [pc, #416]	; (80015f4 <HAL_DMA_Start_IT+0x4bc>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d018      	beq.n	8001488 <HAL_DMA_Start_IT+0x350>
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a67      	ldr	r2, [pc, #412]	; (80015f8 <HAL_DMA_Start_IT+0x4c0>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d013      	beq.n	8001488 <HAL_DMA_Start_IT+0x350>
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a65      	ldr	r2, [pc, #404]	; (80015fc <HAL_DMA_Start_IT+0x4c4>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d00e      	beq.n	8001488 <HAL_DMA_Start_IT+0x350>
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a64      	ldr	r2, [pc, #400]	; (8001600 <HAL_DMA_Start_IT+0x4c8>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d009      	beq.n	8001488 <HAL_DMA_Start_IT+0x350>
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a62      	ldr	r2, [pc, #392]	; (8001604 <HAL_DMA_Start_IT+0x4cc>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d004      	beq.n	8001488 <HAL_DMA_Start_IT+0x350>
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a61      	ldr	r2, [pc, #388]	; (8001608 <HAL_DMA_Start_IT+0x4d0>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d101      	bne.n	800148c <HAL_DMA_Start_IT+0x354>
 8001488:	2301      	movs	r3, #1
 800148a:	e000      	b.n	800148e <HAL_DMA_Start_IT+0x356>
 800148c:	2300      	movs	r3, #0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d01a      	beq.n	80014c8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d007      	beq.n	80014b0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80014ae:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d007      	beq.n	80014c8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80014c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80014c6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a37      	ldr	r2, [pc, #220]	; (80015ac <HAL_DMA_Start_IT+0x474>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d04a      	beq.n	8001568 <HAL_DMA_Start_IT+0x430>
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a36      	ldr	r2, [pc, #216]	; (80015b0 <HAL_DMA_Start_IT+0x478>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d045      	beq.n	8001568 <HAL_DMA_Start_IT+0x430>
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a34      	ldr	r2, [pc, #208]	; (80015b4 <HAL_DMA_Start_IT+0x47c>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d040      	beq.n	8001568 <HAL_DMA_Start_IT+0x430>
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a33      	ldr	r2, [pc, #204]	; (80015b8 <HAL_DMA_Start_IT+0x480>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d03b      	beq.n	8001568 <HAL_DMA_Start_IT+0x430>
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a31      	ldr	r2, [pc, #196]	; (80015bc <HAL_DMA_Start_IT+0x484>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d036      	beq.n	8001568 <HAL_DMA_Start_IT+0x430>
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a30      	ldr	r2, [pc, #192]	; (80015c0 <HAL_DMA_Start_IT+0x488>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d031      	beq.n	8001568 <HAL_DMA_Start_IT+0x430>
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a2e      	ldr	r2, [pc, #184]	; (80015c4 <HAL_DMA_Start_IT+0x48c>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d02c      	beq.n	8001568 <HAL_DMA_Start_IT+0x430>
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a2d      	ldr	r2, [pc, #180]	; (80015c8 <HAL_DMA_Start_IT+0x490>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d027      	beq.n	8001568 <HAL_DMA_Start_IT+0x430>
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a2b      	ldr	r2, [pc, #172]	; (80015cc <HAL_DMA_Start_IT+0x494>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d022      	beq.n	8001568 <HAL_DMA_Start_IT+0x430>
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a2a      	ldr	r2, [pc, #168]	; (80015d0 <HAL_DMA_Start_IT+0x498>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d01d      	beq.n	8001568 <HAL_DMA_Start_IT+0x430>
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a28      	ldr	r2, [pc, #160]	; (80015d4 <HAL_DMA_Start_IT+0x49c>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d018      	beq.n	8001568 <HAL_DMA_Start_IT+0x430>
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a27      	ldr	r2, [pc, #156]	; (80015d8 <HAL_DMA_Start_IT+0x4a0>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d013      	beq.n	8001568 <HAL_DMA_Start_IT+0x430>
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a25      	ldr	r2, [pc, #148]	; (80015dc <HAL_DMA_Start_IT+0x4a4>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d00e      	beq.n	8001568 <HAL_DMA_Start_IT+0x430>
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a24      	ldr	r2, [pc, #144]	; (80015e0 <HAL_DMA_Start_IT+0x4a8>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d009      	beq.n	8001568 <HAL_DMA_Start_IT+0x430>
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a22      	ldr	r2, [pc, #136]	; (80015e4 <HAL_DMA_Start_IT+0x4ac>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d004      	beq.n	8001568 <HAL_DMA_Start_IT+0x430>
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a21      	ldr	r2, [pc, #132]	; (80015e8 <HAL_DMA_Start_IT+0x4b0>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d108      	bne.n	800157a <HAL_DMA_Start_IT+0x442>
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f042 0201 	orr.w	r2, r2, #1
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	e012      	b.n	80015a0 <HAL_DMA_Start_IT+0x468>
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f042 0201 	orr.w	r2, r2, #1
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	e009      	b.n	80015a0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001592:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	2200      	movs	r2, #0
 8001598:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80015a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3718      	adds	r7, #24
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40020010 	.word	0x40020010
 80015b0:	40020028 	.word	0x40020028
 80015b4:	40020040 	.word	0x40020040
 80015b8:	40020058 	.word	0x40020058
 80015bc:	40020070 	.word	0x40020070
 80015c0:	40020088 	.word	0x40020088
 80015c4:	400200a0 	.word	0x400200a0
 80015c8:	400200b8 	.word	0x400200b8
 80015cc:	40020410 	.word	0x40020410
 80015d0:	40020428 	.word	0x40020428
 80015d4:	40020440 	.word	0x40020440
 80015d8:	40020458 	.word	0x40020458
 80015dc:	40020470 	.word	0x40020470
 80015e0:	40020488 	.word	0x40020488
 80015e4:	400204a0 	.word	0x400204a0
 80015e8:	400204b8 	.word	0x400204b8
 80015ec:	58025408 	.word	0x58025408
 80015f0:	5802541c 	.word	0x5802541c
 80015f4:	58025430 	.word	0x58025430
 80015f8:	58025444 	.word	0x58025444
 80015fc:	58025458 	.word	0x58025458
 8001600:	5802546c 	.word	0x5802546c
 8001604:	58025480 	.word	0x58025480
 8001608:	58025494 	.word	0x58025494

0800160c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b08a      	sub	sp, #40	; 0x28
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8001614:	2300      	movs	r3, #0
 8001616:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001618:	4b67      	ldr	r3, [pc, #412]	; (80017b8 <HAL_DMA_IRQHandler+0x1ac>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a67      	ldr	r2, [pc, #412]	; (80017bc <HAL_DMA_IRQHandler+0x1b0>)
 800161e:	fba2 2303 	umull	r2, r3, r2, r3
 8001622:	0a9b      	lsrs	r3, r3, #10
 8001624:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800162a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001630:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8001632:	6a3b      	ldr	r3, [r7, #32]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a5f      	ldr	r2, [pc, #380]	; (80017c0 <HAL_DMA_IRQHandler+0x1b4>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d04a      	beq.n	80016de <HAL_DMA_IRQHandler+0xd2>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a5d      	ldr	r2, [pc, #372]	; (80017c4 <HAL_DMA_IRQHandler+0x1b8>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d045      	beq.n	80016de <HAL_DMA_IRQHandler+0xd2>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a5c      	ldr	r2, [pc, #368]	; (80017c8 <HAL_DMA_IRQHandler+0x1bc>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d040      	beq.n	80016de <HAL_DMA_IRQHandler+0xd2>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a5a      	ldr	r2, [pc, #360]	; (80017cc <HAL_DMA_IRQHandler+0x1c0>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d03b      	beq.n	80016de <HAL_DMA_IRQHandler+0xd2>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a59      	ldr	r2, [pc, #356]	; (80017d0 <HAL_DMA_IRQHandler+0x1c4>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d036      	beq.n	80016de <HAL_DMA_IRQHandler+0xd2>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a57      	ldr	r2, [pc, #348]	; (80017d4 <HAL_DMA_IRQHandler+0x1c8>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d031      	beq.n	80016de <HAL_DMA_IRQHandler+0xd2>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a56      	ldr	r2, [pc, #344]	; (80017d8 <HAL_DMA_IRQHandler+0x1cc>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d02c      	beq.n	80016de <HAL_DMA_IRQHandler+0xd2>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a54      	ldr	r2, [pc, #336]	; (80017dc <HAL_DMA_IRQHandler+0x1d0>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d027      	beq.n	80016de <HAL_DMA_IRQHandler+0xd2>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a53      	ldr	r2, [pc, #332]	; (80017e0 <HAL_DMA_IRQHandler+0x1d4>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d022      	beq.n	80016de <HAL_DMA_IRQHandler+0xd2>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a51      	ldr	r2, [pc, #324]	; (80017e4 <HAL_DMA_IRQHandler+0x1d8>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d01d      	beq.n	80016de <HAL_DMA_IRQHandler+0xd2>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a50      	ldr	r2, [pc, #320]	; (80017e8 <HAL_DMA_IRQHandler+0x1dc>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d018      	beq.n	80016de <HAL_DMA_IRQHandler+0xd2>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a4e      	ldr	r2, [pc, #312]	; (80017ec <HAL_DMA_IRQHandler+0x1e0>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d013      	beq.n	80016de <HAL_DMA_IRQHandler+0xd2>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a4d      	ldr	r2, [pc, #308]	; (80017f0 <HAL_DMA_IRQHandler+0x1e4>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d00e      	beq.n	80016de <HAL_DMA_IRQHandler+0xd2>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a4b      	ldr	r2, [pc, #300]	; (80017f4 <HAL_DMA_IRQHandler+0x1e8>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d009      	beq.n	80016de <HAL_DMA_IRQHandler+0xd2>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a4a      	ldr	r2, [pc, #296]	; (80017f8 <HAL_DMA_IRQHandler+0x1ec>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d004      	beq.n	80016de <HAL_DMA_IRQHandler+0xd2>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a48      	ldr	r2, [pc, #288]	; (80017fc <HAL_DMA_IRQHandler+0x1f0>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d101      	bne.n	80016e2 <HAL_DMA_IRQHandler+0xd6>
 80016de:	2301      	movs	r3, #1
 80016e0:	e000      	b.n	80016e4 <HAL_DMA_IRQHandler+0xd8>
 80016e2:	2300      	movs	r3, #0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	f000 842b 	beq.w	8001f40 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016ee:	f003 031f 	and.w	r3, r3, #31
 80016f2:	2208      	movs	r2, #8
 80016f4:	409a      	lsls	r2, r3
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	4013      	ands	r3, r2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	f000 80a2 	beq.w	8001844 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a2e      	ldr	r2, [pc, #184]	; (80017c0 <HAL_DMA_IRQHandler+0x1b4>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d04a      	beq.n	80017a0 <HAL_DMA_IRQHandler+0x194>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a2d      	ldr	r2, [pc, #180]	; (80017c4 <HAL_DMA_IRQHandler+0x1b8>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d045      	beq.n	80017a0 <HAL_DMA_IRQHandler+0x194>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a2b      	ldr	r2, [pc, #172]	; (80017c8 <HAL_DMA_IRQHandler+0x1bc>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d040      	beq.n	80017a0 <HAL_DMA_IRQHandler+0x194>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a2a      	ldr	r2, [pc, #168]	; (80017cc <HAL_DMA_IRQHandler+0x1c0>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d03b      	beq.n	80017a0 <HAL_DMA_IRQHandler+0x194>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a28      	ldr	r2, [pc, #160]	; (80017d0 <HAL_DMA_IRQHandler+0x1c4>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d036      	beq.n	80017a0 <HAL_DMA_IRQHandler+0x194>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a27      	ldr	r2, [pc, #156]	; (80017d4 <HAL_DMA_IRQHandler+0x1c8>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d031      	beq.n	80017a0 <HAL_DMA_IRQHandler+0x194>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a25      	ldr	r2, [pc, #148]	; (80017d8 <HAL_DMA_IRQHandler+0x1cc>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d02c      	beq.n	80017a0 <HAL_DMA_IRQHandler+0x194>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a24      	ldr	r2, [pc, #144]	; (80017dc <HAL_DMA_IRQHandler+0x1d0>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d027      	beq.n	80017a0 <HAL_DMA_IRQHandler+0x194>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a22      	ldr	r2, [pc, #136]	; (80017e0 <HAL_DMA_IRQHandler+0x1d4>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d022      	beq.n	80017a0 <HAL_DMA_IRQHandler+0x194>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a21      	ldr	r2, [pc, #132]	; (80017e4 <HAL_DMA_IRQHandler+0x1d8>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d01d      	beq.n	80017a0 <HAL_DMA_IRQHandler+0x194>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a1f      	ldr	r2, [pc, #124]	; (80017e8 <HAL_DMA_IRQHandler+0x1dc>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d018      	beq.n	80017a0 <HAL_DMA_IRQHandler+0x194>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a1e      	ldr	r2, [pc, #120]	; (80017ec <HAL_DMA_IRQHandler+0x1e0>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d013      	beq.n	80017a0 <HAL_DMA_IRQHandler+0x194>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a1c      	ldr	r2, [pc, #112]	; (80017f0 <HAL_DMA_IRQHandler+0x1e4>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d00e      	beq.n	80017a0 <HAL_DMA_IRQHandler+0x194>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a1b      	ldr	r2, [pc, #108]	; (80017f4 <HAL_DMA_IRQHandler+0x1e8>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d009      	beq.n	80017a0 <HAL_DMA_IRQHandler+0x194>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a19      	ldr	r2, [pc, #100]	; (80017f8 <HAL_DMA_IRQHandler+0x1ec>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d004      	beq.n	80017a0 <HAL_DMA_IRQHandler+0x194>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a18      	ldr	r2, [pc, #96]	; (80017fc <HAL_DMA_IRQHandler+0x1f0>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d12f      	bne.n	8001800 <HAL_DMA_IRQHandler+0x1f4>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0304 	and.w	r3, r3, #4
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	bf14      	ite	ne
 80017ae:	2301      	movne	r3, #1
 80017b0:	2300      	moveq	r3, #0
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	e02e      	b.n	8001814 <HAL_DMA_IRQHandler+0x208>
 80017b6:	bf00      	nop
 80017b8:	24000408 	.word	0x24000408
 80017bc:	1b4e81b5 	.word	0x1b4e81b5
 80017c0:	40020010 	.word	0x40020010
 80017c4:	40020028 	.word	0x40020028
 80017c8:	40020040 	.word	0x40020040
 80017cc:	40020058 	.word	0x40020058
 80017d0:	40020070 	.word	0x40020070
 80017d4:	40020088 	.word	0x40020088
 80017d8:	400200a0 	.word	0x400200a0
 80017dc:	400200b8 	.word	0x400200b8
 80017e0:	40020410 	.word	0x40020410
 80017e4:	40020428 	.word	0x40020428
 80017e8:	40020440 	.word	0x40020440
 80017ec:	40020458 	.word	0x40020458
 80017f0:	40020470 	.word	0x40020470
 80017f4:	40020488 	.word	0x40020488
 80017f8:	400204a0 	.word	0x400204a0
 80017fc:	400204b8 	.word	0x400204b8
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0308 	and.w	r3, r3, #8
 800180a:	2b00      	cmp	r3, #0
 800180c:	bf14      	ite	ne
 800180e:	2301      	movne	r3, #1
 8001810:	2300      	moveq	r3, #0
 8001812:	b2db      	uxtb	r3, r3
 8001814:	2b00      	cmp	r3, #0
 8001816:	d015      	beq.n	8001844 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f022 0204 	bic.w	r2, r2, #4
 8001826:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800182c:	f003 031f 	and.w	r3, r3, #31
 8001830:	2208      	movs	r2, #8
 8001832:	409a      	lsls	r2, r3
 8001834:	6a3b      	ldr	r3, [r7, #32]
 8001836:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800183c:	f043 0201 	orr.w	r2, r3, #1
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001848:	f003 031f 	and.w	r3, r3, #31
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	fa22 f303 	lsr.w	r3, r2, r3
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	2b00      	cmp	r3, #0
 8001858:	d06e      	beq.n	8001938 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a69      	ldr	r2, [pc, #420]	; (8001a04 <HAL_DMA_IRQHandler+0x3f8>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d04a      	beq.n	80018fa <HAL_DMA_IRQHandler+0x2ee>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a67      	ldr	r2, [pc, #412]	; (8001a08 <HAL_DMA_IRQHandler+0x3fc>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d045      	beq.n	80018fa <HAL_DMA_IRQHandler+0x2ee>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a66      	ldr	r2, [pc, #408]	; (8001a0c <HAL_DMA_IRQHandler+0x400>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d040      	beq.n	80018fa <HAL_DMA_IRQHandler+0x2ee>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a64      	ldr	r2, [pc, #400]	; (8001a10 <HAL_DMA_IRQHandler+0x404>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d03b      	beq.n	80018fa <HAL_DMA_IRQHandler+0x2ee>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a63      	ldr	r2, [pc, #396]	; (8001a14 <HAL_DMA_IRQHandler+0x408>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d036      	beq.n	80018fa <HAL_DMA_IRQHandler+0x2ee>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a61      	ldr	r2, [pc, #388]	; (8001a18 <HAL_DMA_IRQHandler+0x40c>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d031      	beq.n	80018fa <HAL_DMA_IRQHandler+0x2ee>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a60      	ldr	r2, [pc, #384]	; (8001a1c <HAL_DMA_IRQHandler+0x410>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d02c      	beq.n	80018fa <HAL_DMA_IRQHandler+0x2ee>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a5e      	ldr	r2, [pc, #376]	; (8001a20 <HAL_DMA_IRQHandler+0x414>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d027      	beq.n	80018fa <HAL_DMA_IRQHandler+0x2ee>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a5d      	ldr	r2, [pc, #372]	; (8001a24 <HAL_DMA_IRQHandler+0x418>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d022      	beq.n	80018fa <HAL_DMA_IRQHandler+0x2ee>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a5b      	ldr	r2, [pc, #364]	; (8001a28 <HAL_DMA_IRQHandler+0x41c>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d01d      	beq.n	80018fa <HAL_DMA_IRQHandler+0x2ee>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a5a      	ldr	r2, [pc, #360]	; (8001a2c <HAL_DMA_IRQHandler+0x420>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d018      	beq.n	80018fa <HAL_DMA_IRQHandler+0x2ee>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a58      	ldr	r2, [pc, #352]	; (8001a30 <HAL_DMA_IRQHandler+0x424>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d013      	beq.n	80018fa <HAL_DMA_IRQHandler+0x2ee>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a57      	ldr	r2, [pc, #348]	; (8001a34 <HAL_DMA_IRQHandler+0x428>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d00e      	beq.n	80018fa <HAL_DMA_IRQHandler+0x2ee>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a55      	ldr	r2, [pc, #340]	; (8001a38 <HAL_DMA_IRQHandler+0x42c>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d009      	beq.n	80018fa <HAL_DMA_IRQHandler+0x2ee>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a54      	ldr	r2, [pc, #336]	; (8001a3c <HAL_DMA_IRQHandler+0x430>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d004      	beq.n	80018fa <HAL_DMA_IRQHandler+0x2ee>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a52      	ldr	r2, [pc, #328]	; (8001a40 <HAL_DMA_IRQHandler+0x434>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d10a      	bne.n	8001910 <HAL_DMA_IRQHandler+0x304>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	695b      	ldr	r3, [r3, #20]
 8001900:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001904:	2b00      	cmp	r3, #0
 8001906:	bf14      	ite	ne
 8001908:	2301      	movne	r3, #1
 800190a:	2300      	moveq	r3, #0
 800190c:	b2db      	uxtb	r3, r3
 800190e:	e003      	b.n	8001918 <HAL_DMA_IRQHandler+0x30c>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	2300      	movs	r3, #0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d00d      	beq.n	8001938 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001920:	f003 031f 	and.w	r3, r3, #31
 8001924:	2201      	movs	r2, #1
 8001926:	409a      	lsls	r2, r3
 8001928:	6a3b      	ldr	r3, [r7, #32]
 800192a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001930:	f043 0202 	orr.w	r2, r3, #2
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800193c:	f003 031f 	and.w	r3, r3, #31
 8001940:	2204      	movs	r2, #4
 8001942:	409a      	lsls	r2, r3
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	4013      	ands	r3, r2
 8001948:	2b00      	cmp	r3, #0
 800194a:	f000 808f 	beq.w	8001a6c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a2c      	ldr	r2, [pc, #176]	; (8001a04 <HAL_DMA_IRQHandler+0x3f8>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d04a      	beq.n	80019ee <HAL_DMA_IRQHandler+0x3e2>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a2a      	ldr	r2, [pc, #168]	; (8001a08 <HAL_DMA_IRQHandler+0x3fc>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d045      	beq.n	80019ee <HAL_DMA_IRQHandler+0x3e2>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a29      	ldr	r2, [pc, #164]	; (8001a0c <HAL_DMA_IRQHandler+0x400>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d040      	beq.n	80019ee <HAL_DMA_IRQHandler+0x3e2>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a27      	ldr	r2, [pc, #156]	; (8001a10 <HAL_DMA_IRQHandler+0x404>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d03b      	beq.n	80019ee <HAL_DMA_IRQHandler+0x3e2>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a26      	ldr	r2, [pc, #152]	; (8001a14 <HAL_DMA_IRQHandler+0x408>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d036      	beq.n	80019ee <HAL_DMA_IRQHandler+0x3e2>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a24      	ldr	r2, [pc, #144]	; (8001a18 <HAL_DMA_IRQHandler+0x40c>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d031      	beq.n	80019ee <HAL_DMA_IRQHandler+0x3e2>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a23      	ldr	r2, [pc, #140]	; (8001a1c <HAL_DMA_IRQHandler+0x410>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d02c      	beq.n	80019ee <HAL_DMA_IRQHandler+0x3e2>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a21      	ldr	r2, [pc, #132]	; (8001a20 <HAL_DMA_IRQHandler+0x414>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d027      	beq.n	80019ee <HAL_DMA_IRQHandler+0x3e2>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a20      	ldr	r2, [pc, #128]	; (8001a24 <HAL_DMA_IRQHandler+0x418>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d022      	beq.n	80019ee <HAL_DMA_IRQHandler+0x3e2>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a1e      	ldr	r2, [pc, #120]	; (8001a28 <HAL_DMA_IRQHandler+0x41c>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d01d      	beq.n	80019ee <HAL_DMA_IRQHandler+0x3e2>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a1d      	ldr	r2, [pc, #116]	; (8001a2c <HAL_DMA_IRQHandler+0x420>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d018      	beq.n	80019ee <HAL_DMA_IRQHandler+0x3e2>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a1b      	ldr	r2, [pc, #108]	; (8001a30 <HAL_DMA_IRQHandler+0x424>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d013      	beq.n	80019ee <HAL_DMA_IRQHandler+0x3e2>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a1a      	ldr	r2, [pc, #104]	; (8001a34 <HAL_DMA_IRQHandler+0x428>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d00e      	beq.n	80019ee <HAL_DMA_IRQHandler+0x3e2>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a18      	ldr	r2, [pc, #96]	; (8001a38 <HAL_DMA_IRQHandler+0x42c>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d009      	beq.n	80019ee <HAL_DMA_IRQHandler+0x3e2>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a17      	ldr	r2, [pc, #92]	; (8001a3c <HAL_DMA_IRQHandler+0x430>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d004      	beq.n	80019ee <HAL_DMA_IRQHandler+0x3e2>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a15      	ldr	r2, [pc, #84]	; (8001a40 <HAL_DMA_IRQHandler+0x434>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d12a      	bne.n	8001a44 <HAL_DMA_IRQHandler+0x438>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0302 	and.w	r3, r3, #2
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	bf14      	ite	ne
 80019fc:	2301      	movne	r3, #1
 80019fe:	2300      	moveq	r3, #0
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	e023      	b.n	8001a4c <HAL_DMA_IRQHandler+0x440>
 8001a04:	40020010 	.word	0x40020010
 8001a08:	40020028 	.word	0x40020028
 8001a0c:	40020040 	.word	0x40020040
 8001a10:	40020058 	.word	0x40020058
 8001a14:	40020070 	.word	0x40020070
 8001a18:	40020088 	.word	0x40020088
 8001a1c:	400200a0 	.word	0x400200a0
 8001a20:	400200b8 	.word	0x400200b8
 8001a24:	40020410 	.word	0x40020410
 8001a28:	40020428 	.word	0x40020428
 8001a2c:	40020440 	.word	0x40020440
 8001a30:	40020458 	.word	0x40020458
 8001a34:	40020470 	.word	0x40020470
 8001a38:	40020488 	.word	0x40020488
 8001a3c:	400204a0 	.word	0x400204a0
 8001a40:	400204b8 	.word	0x400204b8
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d00d      	beq.n	8001a6c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a54:	f003 031f 	and.w	r3, r3, #31
 8001a58:	2204      	movs	r2, #4
 8001a5a:	409a      	lsls	r2, r3
 8001a5c:	6a3b      	ldr	r3, [r7, #32]
 8001a5e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a64:	f043 0204 	orr.w	r2, r3, #4
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a70:	f003 031f 	and.w	r3, r3, #31
 8001a74:	2210      	movs	r2, #16
 8001a76:	409a      	lsls	r2, r3
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	f000 80a6 	beq.w	8001bce <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a85      	ldr	r2, [pc, #532]	; (8001c9c <HAL_DMA_IRQHandler+0x690>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d04a      	beq.n	8001b22 <HAL_DMA_IRQHandler+0x516>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a83      	ldr	r2, [pc, #524]	; (8001ca0 <HAL_DMA_IRQHandler+0x694>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d045      	beq.n	8001b22 <HAL_DMA_IRQHandler+0x516>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a82      	ldr	r2, [pc, #520]	; (8001ca4 <HAL_DMA_IRQHandler+0x698>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d040      	beq.n	8001b22 <HAL_DMA_IRQHandler+0x516>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a80      	ldr	r2, [pc, #512]	; (8001ca8 <HAL_DMA_IRQHandler+0x69c>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d03b      	beq.n	8001b22 <HAL_DMA_IRQHandler+0x516>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a7f      	ldr	r2, [pc, #508]	; (8001cac <HAL_DMA_IRQHandler+0x6a0>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d036      	beq.n	8001b22 <HAL_DMA_IRQHandler+0x516>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a7d      	ldr	r2, [pc, #500]	; (8001cb0 <HAL_DMA_IRQHandler+0x6a4>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d031      	beq.n	8001b22 <HAL_DMA_IRQHandler+0x516>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a7c      	ldr	r2, [pc, #496]	; (8001cb4 <HAL_DMA_IRQHandler+0x6a8>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d02c      	beq.n	8001b22 <HAL_DMA_IRQHandler+0x516>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a7a      	ldr	r2, [pc, #488]	; (8001cb8 <HAL_DMA_IRQHandler+0x6ac>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d027      	beq.n	8001b22 <HAL_DMA_IRQHandler+0x516>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a79      	ldr	r2, [pc, #484]	; (8001cbc <HAL_DMA_IRQHandler+0x6b0>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d022      	beq.n	8001b22 <HAL_DMA_IRQHandler+0x516>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a77      	ldr	r2, [pc, #476]	; (8001cc0 <HAL_DMA_IRQHandler+0x6b4>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d01d      	beq.n	8001b22 <HAL_DMA_IRQHandler+0x516>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a76      	ldr	r2, [pc, #472]	; (8001cc4 <HAL_DMA_IRQHandler+0x6b8>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d018      	beq.n	8001b22 <HAL_DMA_IRQHandler+0x516>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a74      	ldr	r2, [pc, #464]	; (8001cc8 <HAL_DMA_IRQHandler+0x6bc>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d013      	beq.n	8001b22 <HAL_DMA_IRQHandler+0x516>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a73      	ldr	r2, [pc, #460]	; (8001ccc <HAL_DMA_IRQHandler+0x6c0>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d00e      	beq.n	8001b22 <HAL_DMA_IRQHandler+0x516>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a71      	ldr	r2, [pc, #452]	; (8001cd0 <HAL_DMA_IRQHandler+0x6c4>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d009      	beq.n	8001b22 <HAL_DMA_IRQHandler+0x516>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a70      	ldr	r2, [pc, #448]	; (8001cd4 <HAL_DMA_IRQHandler+0x6c8>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d004      	beq.n	8001b22 <HAL_DMA_IRQHandler+0x516>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a6e      	ldr	r2, [pc, #440]	; (8001cd8 <HAL_DMA_IRQHandler+0x6cc>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d10a      	bne.n	8001b38 <HAL_DMA_IRQHandler+0x52c>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0308 	and.w	r3, r3, #8
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	bf14      	ite	ne
 8001b30:	2301      	movne	r3, #1
 8001b32:	2300      	moveq	r3, #0
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	e009      	b.n	8001b4c <HAL_DMA_IRQHandler+0x540>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0304 	and.w	r3, r3, #4
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	bf14      	ite	ne
 8001b46:	2301      	movne	r3, #1
 8001b48:	2300      	moveq	r3, #0
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d03e      	beq.n	8001bce <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b54:	f003 031f 	and.w	r3, r3, #31
 8001b58:	2210      	movs	r2, #16
 8001b5a:	409a      	lsls	r2, r3
 8001b5c:	6a3b      	ldr	r3, [r7, #32]
 8001b5e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d018      	beq.n	8001ba0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d108      	bne.n	8001b8e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d024      	beq.n	8001bce <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	4798      	blx	r3
 8001b8c:	e01f      	b.n	8001bce <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d01b      	beq.n	8001bce <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	4798      	blx	r3
 8001b9e:	e016      	b.n	8001bce <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d107      	bne.n	8001bbe <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f022 0208 	bic.w	r2, r2, #8
 8001bbc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d003      	beq.n	8001bce <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bd2:	f003 031f 	and.w	r3, r3, #31
 8001bd6:	2220      	movs	r2, #32
 8001bd8:	409a      	lsls	r2, r3
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	f000 8110 	beq.w	8001e04 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a2c      	ldr	r2, [pc, #176]	; (8001c9c <HAL_DMA_IRQHandler+0x690>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d04a      	beq.n	8001c84 <HAL_DMA_IRQHandler+0x678>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a2b      	ldr	r2, [pc, #172]	; (8001ca0 <HAL_DMA_IRQHandler+0x694>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d045      	beq.n	8001c84 <HAL_DMA_IRQHandler+0x678>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a29      	ldr	r2, [pc, #164]	; (8001ca4 <HAL_DMA_IRQHandler+0x698>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d040      	beq.n	8001c84 <HAL_DMA_IRQHandler+0x678>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a28      	ldr	r2, [pc, #160]	; (8001ca8 <HAL_DMA_IRQHandler+0x69c>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d03b      	beq.n	8001c84 <HAL_DMA_IRQHandler+0x678>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a26      	ldr	r2, [pc, #152]	; (8001cac <HAL_DMA_IRQHandler+0x6a0>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d036      	beq.n	8001c84 <HAL_DMA_IRQHandler+0x678>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a25      	ldr	r2, [pc, #148]	; (8001cb0 <HAL_DMA_IRQHandler+0x6a4>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d031      	beq.n	8001c84 <HAL_DMA_IRQHandler+0x678>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a23      	ldr	r2, [pc, #140]	; (8001cb4 <HAL_DMA_IRQHandler+0x6a8>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d02c      	beq.n	8001c84 <HAL_DMA_IRQHandler+0x678>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a22      	ldr	r2, [pc, #136]	; (8001cb8 <HAL_DMA_IRQHandler+0x6ac>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d027      	beq.n	8001c84 <HAL_DMA_IRQHandler+0x678>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a20      	ldr	r2, [pc, #128]	; (8001cbc <HAL_DMA_IRQHandler+0x6b0>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d022      	beq.n	8001c84 <HAL_DMA_IRQHandler+0x678>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a1f      	ldr	r2, [pc, #124]	; (8001cc0 <HAL_DMA_IRQHandler+0x6b4>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d01d      	beq.n	8001c84 <HAL_DMA_IRQHandler+0x678>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a1d      	ldr	r2, [pc, #116]	; (8001cc4 <HAL_DMA_IRQHandler+0x6b8>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d018      	beq.n	8001c84 <HAL_DMA_IRQHandler+0x678>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a1c      	ldr	r2, [pc, #112]	; (8001cc8 <HAL_DMA_IRQHandler+0x6bc>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d013      	beq.n	8001c84 <HAL_DMA_IRQHandler+0x678>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a1a      	ldr	r2, [pc, #104]	; (8001ccc <HAL_DMA_IRQHandler+0x6c0>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d00e      	beq.n	8001c84 <HAL_DMA_IRQHandler+0x678>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a19      	ldr	r2, [pc, #100]	; (8001cd0 <HAL_DMA_IRQHandler+0x6c4>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d009      	beq.n	8001c84 <HAL_DMA_IRQHandler+0x678>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a17      	ldr	r2, [pc, #92]	; (8001cd4 <HAL_DMA_IRQHandler+0x6c8>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d004      	beq.n	8001c84 <HAL_DMA_IRQHandler+0x678>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a16      	ldr	r2, [pc, #88]	; (8001cd8 <HAL_DMA_IRQHandler+0x6cc>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d12b      	bne.n	8001cdc <HAL_DMA_IRQHandler+0x6d0>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0310 	and.w	r3, r3, #16
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	bf14      	ite	ne
 8001c92:	2301      	movne	r3, #1
 8001c94:	2300      	moveq	r3, #0
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	e02a      	b.n	8001cf0 <HAL_DMA_IRQHandler+0x6e4>
 8001c9a:	bf00      	nop
 8001c9c:	40020010 	.word	0x40020010
 8001ca0:	40020028 	.word	0x40020028
 8001ca4:	40020040 	.word	0x40020040
 8001ca8:	40020058 	.word	0x40020058
 8001cac:	40020070 	.word	0x40020070
 8001cb0:	40020088 	.word	0x40020088
 8001cb4:	400200a0 	.word	0x400200a0
 8001cb8:	400200b8 	.word	0x400200b8
 8001cbc:	40020410 	.word	0x40020410
 8001cc0:	40020428 	.word	0x40020428
 8001cc4:	40020440 	.word	0x40020440
 8001cc8:	40020458 	.word	0x40020458
 8001ccc:	40020470 	.word	0x40020470
 8001cd0:	40020488 	.word	0x40020488
 8001cd4:	400204a0 	.word	0x400204a0
 8001cd8:	400204b8 	.word	0x400204b8
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0302 	and.w	r3, r3, #2
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	bf14      	ite	ne
 8001cea:	2301      	movne	r3, #1
 8001cec:	2300      	moveq	r3, #0
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	f000 8087 	beq.w	8001e04 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cfa:	f003 031f 	and.w	r3, r3, #31
 8001cfe:	2220      	movs	r2, #32
 8001d00:	409a      	lsls	r2, r3
 8001d02:	6a3b      	ldr	r3, [r7, #32]
 8001d04:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	2b04      	cmp	r3, #4
 8001d10:	d139      	bne.n	8001d86 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f022 0216 	bic.w	r2, r2, #22
 8001d20:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	695a      	ldr	r2, [r3, #20]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d30:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d103      	bne.n	8001d42 <HAL_DMA_IRQHandler+0x736>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d007      	beq.n	8001d52 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f022 0208 	bic.w	r2, r2, #8
 8001d50:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d56:	f003 031f 	and.w	r3, r3, #31
 8001d5a:	223f      	movs	r2, #63	; 0x3f
 8001d5c:	409a      	lsls	r2, r3
 8001d5e:	6a3b      	ldr	r3, [r7, #32]
 8001d60:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2201      	movs	r2, #1
 8001d66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	f000 834a 	beq.w	8002410 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	4798      	blx	r3
          }
          return;
 8001d84:	e344      	b.n	8002410 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d018      	beq.n	8001dc6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d108      	bne.n	8001db4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d02c      	beq.n	8001e04 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	4798      	blx	r3
 8001db2:	e027      	b.n	8001e04 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d023      	beq.n	8001e04 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	4798      	blx	r3
 8001dc4:	e01e      	b.n	8001e04 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d10f      	bne.n	8001df4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f022 0210 	bic.w	r2, r2, #16
 8001de2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2201      	movs	r2, #1
 8001de8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d003      	beq.n	8001e04 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	f000 8306 	beq.w	800241a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	f000 8088 	beq.w	8001f2c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2204      	movs	r2, #4
 8001e20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a7a      	ldr	r2, [pc, #488]	; (8002014 <HAL_DMA_IRQHandler+0xa08>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d04a      	beq.n	8001ec4 <HAL_DMA_IRQHandler+0x8b8>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a79      	ldr	r2, [pc, #484]	; (8002018 <HAL_DMA_IRQHandler+0xa0c>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d045      	beq.n	8001ec4 <HAL_DMA_IRQHandler+0x8b8>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a77      	ldr	r2, [pc, #476]	; (800201c <HAL_DMA_IRQHandler+0xa10>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d040      	beq.n	8001ec4 <HAL_DMA_IRQHandler+0x8b8>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a76      	ldr	r2, [pc, #472]	; (8002020 <HAL_DMA_IRQHandler+0xa14>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d03b      	beq.n	8001ec4 <HAL_DMA_IRQHandler+0x8b8>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a74      	ldr	r2, [pc, #464]	; (8002024 <HAL_DMA_IRQHandler+0xa18>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d036      	beq.n	8001ec4 <HAL_DMA_IRQHandler+0x8b8>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a73      	ldr	r2, [pc, #460]	; (8002028 <HAL_DMA_IRQHandler+0xa1c>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d031      	beq.n	8001ec4 <HAL_DMA_IRQHandler+0x8b8>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a71      	ldr	r2, [pc, #452]	; (800202c <HAL_DMA_IRQHandler+0xa20>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d02c      	beq.n	8001ec4 <HAL_DMA_IRQHandler+0x8b8>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a70      	ldr	r2, [pc, #448]	; (8002030 <HAL_DMA_IRQHandler+0xa24>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d027      	beq.n	8001ec4 <HAL_DMA_IRQHandler+0x8b8>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a6e      	ldr	r2, [pc, #440]	; (8002034 <HAL_DMA_IRQHandler+0xa28>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d022      	beq.n	8001ec4 <HAL_DMA_IRQHandler+0x8b8>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a6d      	ldr	r2, [pc, #436]	; (8002038 <HAL_DMA_IRQHandler+0xa2c>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d01d      	beq.n	8001ec4 <HAL_DMA_IRQHandler+0x8b8>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a6b      	ldr	r2, [pc, #428]	; (800203c <HAL_DMA_IRQHandler+0xa30>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d018      	beq.n	8001ec4 <HAL_DMA_IRQHandler+0x8b8>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a6a      	ldr	r2, [pc, #424]	; (8002040 <HAL_DMA_IRQHandler+0xa34>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d013      	beq.n	8001ec4 <HAL_DMA_IRQHandler+0x8b8>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a68      	ldr	r2, [pc, #416]	; (8002044 <HAL_DMA_IRQHandler+0xa38>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d00e      	beq.n	8001ec4 <HAL_DMA_IRQHandler+0x8b8>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a67      	ldr	r2, [pc, #412]	; (8002048 <HAL_DMA_IRQHandler+0xa3c>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d009      	beq.n	8001ec4 <HAL_DMA_IRQHandler+0x8b8>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a65      	ldr	r2, [pc, #404]	; (800204c <HAL_DMA_IRQHandler+0xa40>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d004      	beq.n	8001ec4 <HAL_DMA_IRQHandler+0x8b8>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a64      	ldr	r2, [pc, #400]	; (8002050 <HAL_DMA_IRQHandler+0xa44>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d108      	bne.n	8001ed6 <HAL_DMA_IRQHandler+0x8ca>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f022 0201 	bic.w	r2, r2, #1
 8001ed2:	601a      	str	r2, [r3, #0]
 8001ed4:	e007      	b.n	8001ee6 <HAL_DMA_IRQHandler+0x8da>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f022 0201 	bic.w	r2, r2, #1
 8001ee4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	60fb      	str	r3, [r7, #12]
 8001eec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d307      	bcc.n	8001f02 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0301 	and.w	r3, r3, #1
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d1f2      	bne.n	8001ee6 <HAL_DMA_IRQHandler+0x8da>
 8001f00:	e000      	b.n	8001f04 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8001f02:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d004      	beq.n	8001f1c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2203      	movs	r2, #3
 8001f16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8001f1a:	e003      	b.n	8001f24 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	f000 8272 	beq.w	800241a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	4798      	blx	r3
 8001f3e:	e26c      	b.n	800241a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a43      	ldr	r2, [pc, #268]	; (8002054 <HAL_DMA_IRQHandler+0xa48>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d022      	beq.n	8001f90 <HAL_DMA_IRQHandler+0x984>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a42      	ldr	r2, [pc, #264]	; (8002058 <HAL_DMA_IRQHandler+0xa4c>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d01d      	beq.n	8001f90 <HAL_DMA_IRQHandler+0x984>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a40      	ldr	r2, [pc, #256]	; (800205c <HAL_DMA_IRQHandler+0xa50>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d018      	beq.n	8001f90 <HAL_DMA_IRQHandler+0x984>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a3f      	ldr	r2, [pc, #252]	; (8002060 <HAL_DMA_IRQHandler+0xa54>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d013      	beq.n	8001f90 <HAL_DMA_IRQHandler+0x984>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a3d      	ldr	r2, [pc, #244]	; (8002064 <HAL_DMA_IRQHandler+0xa58>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d00e      	beq.n	8001f90 <HAL_DMA_IRQHandler+0x984>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a3c      	ldr	r2, [pc, #240]	; (8002068 <HAL_DMA_IRQHandler+0xa5c>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d009      	beq.n	8001f90 <HAL_DMA_IRQHandler+0x984>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a3a      	ldr	r2, [pc, #232]	; (800206c <HAL_DMA_IRQHandler+0xa60>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d004      	beq.n	8001f90 <HAL_DMA_IRQHandler+0x984>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a39      	ldr	r2, [pc, #228]	; (8002070 <HAL_DMA_IRQHandler+0xa64>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d101      	bne.n	8001f94 <HAL_DMA_IRQHandler+0x988>
 8001f90:	2301      	movs	r3, #1
 8001f92:	e000      	b.n	8001f96 <HAL_DMA_IRQHandler+0x98a>
 8001f94:	2300      	movs	r3, #0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f000 823f 	beq.w	800241a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fa8:	f003 031f 	and.w	r3, r3, #31
 8001fac:	2204      	movs	r2, #4
 8001fae:	409a      	lsls	r2, r3
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	f000 80cd 	beq.w	8002154 <HAL_DMA_IRQHandler+0xb48>
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	f003 0304 	and.w	r3, r3, #4
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	f000 80c7 	beq.w	8002154 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fca:	f003 031f 	and.w	r3, r3, #31
 8001fce:	2204      	movs	r2, #4
 8001fd0:	409a      	lsls	r2, r3
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d049      	beq.n	8002074 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d109      	bne.n	8001ffe <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	f000 8210 	beq.w	8002414 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001ffc:	e20a      	b.n	8002414 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002002:	2b00      	cmp	r3, #0
 8002004:	f000 8206 	beq.w	8002414 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002010:	e200      	b.n	8002414 <HAL_DMA_IRQHandler+0xe08>
 8002012:	bf00      	nop
 8002014:	40020010 	.word	0x40020010
 8002018:	40020028 	.word	0x40020028
 800201c:	40020040 	.word	0x40020040
 8002020:	40020058 	.word	0x40020058
 8002024:	40020070 	.word	0x40020070
 8002028:	40020088 	.word	0x40020088
 800202c:	400200a0 	.word	0x400200a0
 8002030:	400200b8 	.word	0x400200b8
 8002034:	40020410 	.word	0x40020410
 8002038:	40020428 	.word	0x40020428
 800203c:	40020440 	.word	0x40020440
 8002040:	40020458 	.word	0x40020458
 8002044:	40020470 	.word	0x40020470
 8002048:	40020488 	.word	0x40020488
 800204c:	400204a0 	.word	0x400204a0
 8002050:	400204b8 	.word	0x400204b8
 8002054:	58025408 	.word	0x58025408
 8002058:	5802541c 	.word	0x5802541c
 800205c:	58025430 	.word	0x58025430
 8002060:	58025444 	.word	0x58025444
 8002064:	58025458 	.word	0x58025458
 8002068:	5802546c 	.word	0x5802546c
 800206c:	58025480 	.word	0x58025480
 8002070:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	f003 0320 	and.w	r3, r3, #32
 800207a:	2b00      	cmp	r3, #0
 800207c:	d160      	bne.n	8002140 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a8c      	ldr	r2, [pc, #560]	; (80022b4 <HAL_DMA_IRQHandler+0xca8>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d04a      	beq.n	800211e <HAL_DMA_IRQHandler+0xb12>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a8a      	ldr	r2, [pc, #552]	; (80022b8 <HAL_DMA_IRQHandler+0xcac>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d045      	beq.n	800211e <HAL_DMA_IRQHandler+0xb12>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a89      	ldr	r2, [pc, #548]	; (80022bc <HAL_DMA_IRQHandler+0xcb0>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d040      	beq.n	800211e <HAL_DMA_IRQHandler+0xb12>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a87      	ldr	r2, [pc, #540]	; (80022c0 <HAL_DMA_IRQHandler+0xcb4>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d03b      	beq.n	800211e <HAL_DMA_IRQHandler+0xb12>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a86      	ldr	r2, [pc, #536]	; (80022c4 <HAL_DMA_IRQHandler+0xcb8>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d036      	beq.n	800211e <HAL_DMA_IRQHandler+0xb12>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a84      	ldr	r2, [pc, #528]	; (80022c8 <HAL_DMA_IRQHandler+0xcbc>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d031      	beq.n	800211e <HAL_DMA_IRQHandler+0xb12>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a83      	ldr	r2, [pc, #524]	; (80022cc <HAL_DMA_IRQHandler+0xcc0>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d02c      	beq.n	800211e <HAL_DMA_IRQHandler+0xb12>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a81      	ldr	r2, [pc, #516]	; (80022d0 <HAL_DMA_IRQHandler+0xcc4>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d027      	beq.n	800211e <HAL_DMA_IRQHandler+0xb12>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a80      	ldr	r2, [pc, #512]	; (80022d4 <HAL_DMA_IRQHandler+0xcc8>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d022      	beq.n	800211e <HAL_DMA_IRQHandler+0xb12>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a7e      	ldr	r2, [pc, #504]	; (80022d8 <HAL_DMA_IRQHandler+0xccc>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d01d      	beq.n	800211e <HAL_DMA_IRQHandler+0xb12>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a7d      	ldr	r2, [pc, #500]	; (80022dc <HAL_DMA_IRQHandler+0xcd0>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d018      	beq.n	800211e <HAL_DMA_IRQHandler+0xb12>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a7b      	ldr	r2, [pc, #492]	; (80022e0 <HAL_DMA_IRQHandler+0xcd4>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d013      	beq.n	800211e <HAL_DMA_IRQHandler+0xb12>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a7a      	ldr	r2, [pc, #488]	; (80022e4 <HAL_DMA_IRQHandler+0xcd8>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d00e      	beq.n	800211e <HAL_DMA_IRQHandler+0xb12>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a78      	ldr	r2, [pc, #480]	; (80022e8 <HAL_DMA_IRQHandler+0xcdc>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d009      	beq.n	800211e <HAL_DMA_IRQHandler+0xb12>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a77      	ldr	r2, [pc, #476]	; (80022ec <HAL_DMA_IRQHandler+0xce0>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d004      	beq.n	800211e <HAL_DMA_IRQHandler+0xb12>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a75      	ldr	r2, [pc, #468]	; (80022f0 <HAL_DMA_IRQHandler+0xce4>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d108      	bne.n	8002130 <HAL_DMA_IRQHandler+0xb24>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f022 0208 	bic.w	r2, r2, #8
 800212c:	601a      	str	r2, [r3, #0]
 800212e:	e007      	b.n	8002140 <HAL_DMA_IRQHandler+0xb34>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f022 0204 	bic.w	r2, r2, #4
 800213e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002144:	2b00      	cmp	r3, #0
 8002146:	f000 8165 	beq.w	8002414 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002152:	e15f      	b.n	8002414 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002158:	f003 031f 	and.w	r3, r3, #31
 800215c:	2202      	movs	r2, #2
 800215e:	409a      	lsls	r2, r3
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	4013      	ands	r3, r2
 8002164:	2b00      	cmp	r3, #0
 8002166:	f000 80c5 	beq.w	80022f4 <HAL_DMA_IRQHandler+0xce8>
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	f003 0302 	and.w	r3, r3, #2
 8002170:	2b00      	cmp	r3, #0
 8002172:	f000 80bf 	beq.w	80022f4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800217a:	f003 031f 	and.w	r3, r3, #31
 800217e:	2202      	movs	r2, #2
 8002180:	409a      	lsls	r2, r3
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d018      	beq.n	80021c2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d109      	bne.n	80021ae <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f000 813a 	beq.w	8002418 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80021ac:	e134      	b.n	8002418 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	f000 8130 	beq.w	8002418 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80021c0:	e12a      	b.n	8002418 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	f003 0320 	and.w	r3, r3, #32
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d168      	bne.n	800229e <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a38      	ldr	r2, [pc, #224]	; (80022b4 <HAL_DMA_IRQHandler+0xca8>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d04a      	beq.n	800226c <HAL_DMA_IRQHandler+0xc60>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a37      	ldr	r2, [pc, #220]	; (80022b8 <HAL_DMA_IRQHandler+0xcac>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d045      	beq.n	800226c <HAL_DMA_IRQHandler+0xc60>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a35      	ldr	r2, [pc, #212]	; (80022bc <HAL_DMA_IRQHandler+0xcb0>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d040      	beq.n	800226c <HAL_DMA_IRQHandler+0xc60>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a34      	ldr	r2, [pc, #208]	; (80022c0 <HAL_DMA_IRQHandler+0xcb4>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d03b      	beq.n	800226c <HAL_DMA_IRQHandler+0xc60>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a32      	ldr	r2, [pc, #200]	; (80022c4 <HAL_DMA_IRQHandler+0xcb8>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d036      	beq.n	800226c <HAL_DMA_IRQHandler+0xc60>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a31      	ldr	r2, [pc, #196]	; (80022c8 <HAL_DMA_IRQHandler+0xcbc>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d031      	beq.n	800226c <HAL_DMA_IRQHandler+0xc60>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a2f      	ldr	r2, [pc, #188]	; (80022cc <HAL_DMA_IRQHandler+0xcc0>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d02c      	beq.n	800226c <HAL_DMA_IRQHandler+0xc60>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a2e      	ldr	r2, [pc, #184]	; (80022d0 <HAL_DMA_IRQHandler+0xcc4>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d027      	beq.n	800226c <HAL_DMA_IRQHandler+0xc60>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a2c      	ldr	r2, [pc, #176]	; (80022d4 <HAL_DMA_IRQHandler+0xcc8>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d022      	beq.n	800226c <HAL_DMA_IRQHandler+0xc60>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a2b      	ldr	r2, [pc, #172]	; (80022d8 <HAL_DMA_IRQHandler+0xccc>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d01d      	beq.n	800226c <HAL_DMA_IRQHandler+0xc60>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a29      	ldr	r2, [pc, #164]	; (80022dc <HAL_DMA_IRQHandler+0xcd0>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d018      	beq.n	800226c <HAL_DMA_IRQHandler+0xc60>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a28      	ldr	r2, [pc, #160]	; (80022e0 <HAL_DMA_IRQHandler+0xcd4>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d013      	beq.n	800226c <HAL_DMA_IRQHandler+0xc60>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a26      	ldr	r2, [pc, #152]	; (80022e4 <HAL_DMA_IRQHandler+0xcd8>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d00e      	beq.n	800226c <HAL_DMA_IRQHandler+0xc60>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a25      	ldr	r2, [pc, #148]	; (80022e8 <HAL_DMA_IRQHandler+0xcdc>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d009      	beq.n	800226c <HAL_DMA_IRQHandler+0xc60>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a23      	ldr	r2, [pc, #140]	; (80022ec <HAL_DMA_IRQHandler+0xce0>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d004      	beq.n	800226c <HAL_DMA_IRQHandler+0xc60>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a22      	ldr	r2, [pc, #136]	; (80022f0 <HAL_DMA_IRQHandler+0xce4>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d108      	bne.n	800227e <HAL_DMA_IRQHandler+0xc72>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f022 0214 	bic.w	r2, r2, #20
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	e007      	b.n	800228e <HAL_DMA_IRQHandler+0xc82>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f022 020a 	bic.w	r2, r2, #10
 800228c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2201      	movs	r2, #1
 8002292:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	f000 80b8 	beq.w	8002418 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80022b0:	e0b2      	b.n	8002418 <HAL_DMA_IRQHandler+0xe0c>
 80022b2:	bf00      	nop
 80022b4:	40020010 	.word	0x40020010
 80022b8:	40020028 	.word	0x40020028
 80022bc:	40020040 	.word	0x40020040
 80022c0:	40020058 	.word	0x40020058
 80022c4:	40020070 	.word	0x40020070
 80022c8:	40020088 	.word	0x40020088
 80022cc:	400200a0 	.word	0x400200a0
 80022d0:	400200b8 	.word	0x400200b8
 80022d4:	40020410 	.word	0x40020410
 80022d8:	40020428 	.word	0x40020428
 80022dc:	40020440 	.word	0x40020440
 80022e0:	40020458 	.word	0x40020458
 80022e4:	40020470 	.word	0x40020470
 80022e8:	40020488 	.word	0x40020488
 80022ec:	400204a0 	.word	0x400204a0
 80022f0:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022f8:	f003 031f 	and.w	r3, r3, #31
 80022fc:	2208      	movs	r2, #8
 80022fe:	409a      	lsls	r2, r3
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	4013      	ands	r3, r2
 8002304:	2b00      	cmp	r3, #0
 8002306:	f000 8088 	beq.w	800241a <HAL_DMA_IRQHandler+0xe0e>
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	f003 0308 	and.w	r3, r3, #8
 8002310:	2b00      	cmp	r3, #0
 8002312:	f000 8082 	beq.w	800241a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a41      	ldr	r2, [pc, #260]	; (8002420 <HAL_DMA_IRQHandler+0xe14>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d04a      	beq.n	80023b6 <HAL_DMA_IRQHandler+0xdaa>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a3f      	ldr	r2, [pc, #252]	; (8002424 <HAL_DMA_IRQHandler+0xe18>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d045      	beq.n	80023b6 <HAL_DMA_IRQHandler+0xdaa>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a3e      	ldr	r2, [pc, #248]	; (8002428 <HAL_DMA_IRQHandler+0xe1c>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d040      	beq.n	80023b6 <HAL_DMA_IRQHandler+0xdaa>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a3c      	ldr	r2, [pc, #240]	; (800242c <HAL_DMA_IRQHandler+0xe20>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d03b      	beq.n	80023b6 <HAL_DMA_IRQHandler+0xdaa>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a3b      	ldr	r2, [pc, #236]	; (8002430 <HAL_DMA_IRQHandler+0xe24>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d036      	beq.n	80023b6 <HAL_DMA_IRQHandler+0xdaa>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a39      	ldr	r2, [pc, #228]	; (8002434 <HAL_DMA_IRQHandler+0xe28>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d031      	beq.n	80023b6 <HAL_DMA_IRQHandler+0xdaa>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a38      	ldr	r2, [pc, #224]	; (8002438 <HAL_DMA_IRQHandler+0xe2c>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d02c      	beq.n	80023b6 <HAL_DMA_IRQHandler+0xdaa>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a36      	ldr	r2, [pc, #216]	; (800243c <HAL_DMA_IRQHandler+0xe30>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d027      	beq.n	80023b6 <HAL_DMA_IRQHandler+0xdaa>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a35      	ldr	r2, [pc, #212]	; (8002440 <HAL_DMA_IRQHandler+0xe34>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d022      	beq.n	80023b6 <HAL_DMA_IRQHandler+0xdaa>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a33      	ldr	r2, [pc, #204]	; (8002444 <HAL_DMA_IRQHandler+0xe38>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d01d      	beq.n	80023b6 <HAL_DMA_IRQHandler+0xdaa>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a32      	ldr	r2, [pc, #200]	; (8002448 <HAL_DMA_IRQHandler+0xe3c>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d018      	beq.n	80023b6 <HAL_DMA_IRQHandler+0xdaa>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a30      	ldr	r2, [pc, #192]	; (800244c <HAL_DMA_IRQHandler+0xe40>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d013      	beq.n	80023b6 <HAL_DMA_IRQHandler+0xdaa>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a2f      	ldr	r2, [pc, #188]	; (8002450 <HAL_DMA_IRQHandler+0xe44>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d00e      	beq.n	80023b6 <HAL_DMA_IRQHandler+0xdaa>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a2d      	ldr	r2, [pc, #180]	; (8002454 <HAL_DMA_IRQHandler+0xe48>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d009      	beq.n	80023b6 <HAL_DMA_IRQHandler+0xdaa>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a2c      	ldr	r2, [pc, #176]	; (8002458 <HAL_DMA_IRQHandler+0xe4c>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d004      	beq.n	80023b6 <HAL_DMA_IRQHandler+0xdaa>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a2a      	ldr	r2, [pc, #168]	; (800245c <HAL_DMA_IRQHandler+0xe50>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d108      	bne.n	80023c8 <HAL_DMA_IRQHandler+0xdbc>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f022 021c 	bic.w	r2, r2, #28
 80023c4:	601a      	str	r2, [r3, #0]
 80023c6:	e007      	b.n	80023d8 <HAL_DMA_IRQHandler+0xdcc>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f022 020e 	bic.w	r2, r2, #14
 80023d6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023dc:	f003 031f 	and.w	r3, r3, #31
 80023e0:	2201      	movs	r2, #1
 80023e2:	409a      	lsls	r2, r3
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2201      	movs	r2, #1
 80023f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002402:	2b00      	cmp	r3, #0
 8002404:	d009      	beq.n	800241a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	4798      	blx	r3
 800240e:	e004      	b.n	800241a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8002410:	bf00      	nop
 8002412:	e002      	b.n	800241a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002414:	bf00      	nop
 8002416:	e000      	b.n	800241a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002418:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800241a:	3728      	adds	r7, #40	; 0x28
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	40020010 	.word	0x40020010
 8002424:	40020028 	.word	0x40020028
 8002428:	40020040 	.word	0x40020040
 800242c:	40020058 	.word	0x40020058
 8002430:	40020070 	.word	0x40020070
 8002434:	40020088 	.word	0x40020088
 8002438:	400200a0 	.word	0x400200a0
 800243c:	400200b8 	.word	0x400200b8
 8002440:	40020410 	.word	0x40020410
 8002444:	40020428 	.word	0x40020428
 8002448:	40020440 	.word	0x40020440
 800244c:	40020458 	.word	0x40020458
 8002450:	40020470 	.word	0x40020470
 8002454:	40020488 	.word	0x40020488
 8002458:	400204a0 	.word	0x400204a0
 800245c:	400204b8 	.word	0x400204b8

08002460 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800246c:	4618      	mov	r0, r3
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr

08002478 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002478:	b480      	push	{r7}
 800247a:	b087      	sub	sp, #28
 800247c:	af00      	add	r7, sp, #0
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
 8002484:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800248a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002490:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a84      	ldr	r2, [pc, #528]	; (80026a8 <DMA_SetConfig+0x230>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d072      	beq.n	8002582 <DMA_SetConfig+0x10a>
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a82      	ldr	r2, [pc, #520]	; (80026ac <DMA_SetConfig+0x234>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d06d      	beq.n	8002582 <DMA_SetConfig+0x10a>
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a81      	ldr	r2, [pc, #516]	; (80026b0 <DMA_SetConfig+0x238>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d068      	beq.n	8002582 <DMA_SetConfig+0x10a>
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a7f      	ldr	r2, [pc, #508]	; (80026b4 <DMA_SetConfig+0x23c>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d063      	beq.n	8002582 <DMA_SetConfig+0x10a>
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a7e      	ldr	r2, [pc, #504]	; (80026b8 <DMA_SetConfig+0x240>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d05e      	beq.n	8002582 <DMA_SetConfig+0x10a>
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a7c      	ldr	r2, [pc, #496]	; (80026bc <DMA_SetConfig+0x244>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d059      	beq.n	8002582 <DMA_SetConfig+0x10a>
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a7b      	ldr	r2, [pc, #492]	; (80026c0 <DMA_SetConfig+0x248>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d054      	beq.n	8002582 <DMA_SetConfig+0x10a>
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a79      	ldr	r2, [pc, #484]	; (80026c4 <DMA_SetConfig+0x24c>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d04f      	beq.n	8002582 <DMA_SetConfig+0x10a>
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a78      	ldr	r2, [pc, #480]	; (80026c8 <DMA_SetConfig+0x250>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d04a      	beq.n	8002582 <DMA_SetConfig+0x10a>
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a76      	ldr	r2, [pc, #472]	; (80026cc <DMA_SetConfig+0x254>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d045      	beq.n	8002582 <DMA_SetConfig+0x10a>
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a75      	ldr	r2, [pc, #468]	; (80026d0 <DMA_SetConfig+0x258>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d040      	beq.n	8002582 <DMA_SetConfig+0x10a>
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a73      	ldr	r2, [pc, #460]	; (80026d4 <DMA_SetConfig+0x25c>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d03b      	beq.n	8002582 <DMA_SetConfig+0x10a>
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a72      	ldr	r2, [pc, #456]	; (80026d8 <DMA_SetConfig+0x260>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d036      	beq.n	8002582 <DMA_SetConfig+0x10a>
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a70      	ldr	r2, [pc, #448]	; (80026dc <DMA_SetConfig+0x264>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d031      	beq.n	8002582 <DMA_SetConfig+0x10a>
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a6f      	ldr	r2, [pc, #444]	; (80026e0 <DMA_SetConfig+0x268>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d02c      	beq.n	8002582 <DMA_SetConfig+0x10a>
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a6d      	ldr	r2, [pc, #436]	; (80026e4 <DMA_SetConfig+0x26c>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d027      	beq.n	8002582 <DMA_SetConfig+0x10a>
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a6c      	ldr	r2, [pc, #432]	; (80026e8 <DMA_SetConfig+0x270>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d022      	beq.n	8002582 <DMA_SetConfig+0x10a>
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a6a      	ldr	r2, [pc, #424]	; (80026ec <DMA_SetConfig+0x274>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d01d      	beq.n	8002582 <DMA_SetConfig+0x10a>
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a69      	ldr	r2, [pc, #420]	; (80026f0 <DMA_SetConfig+0x278>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d018      	beq.n	8002582 <DMA_SetConfig+0x10a>
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a67      	ldr	r2, [pc, #412]	; (80026f4 <DMA_SetConfig+0x27c>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d013      	beq.n	8002582 <DMA_SetConfig+0x10a>
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a66      	ldr	r2, [pc, #408]	; (80026f8 <DMA_SetConfig+0x280>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d00e      	beq.n	8002582 <DMA_SetConfig+0x10a>
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a64      	ldr	r2, [pc, #400]	; (80026fc <DMA_SetConfig+0x284>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d009      	beq.n	8002582 <DMA_SetConfig+0x10a>
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a63      	ldr	r2, [pc, #396]	; (8002700 <DMA_SetConfig+0x288>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d004      	beq.n	8002582 <DMA_SetConfig+0x10a>
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a61      	ldr	r2, [pc, #388]	; (8002704 <DMA_SetConfig+0x28c>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d101      	bne.n	8002586 <DMA_SetConfig+0x10e>
 8002582:	2301      	movs	r3, #1
 8002584:	e000      	b.n	8002588 <DMA_SetConfig+0x110>
 8002586:	2300      	movs	r3, #0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d00d      	beq.n	80025a8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002590:	68fa      	ldr	r2, [r7, #12]
 8002592:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002594:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800259a:	2b00      	cmp	r3, #0
 800259c:	d004      	beq.n	80025a8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a2:	68fa      	ldr	r2, [r7, #12]
 80025a4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80025a6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a3e      	ldr	r2, [pc, #248]	; (80026a8 <DMA_SetConfig+0x230>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d04a      	beq.n	8002648 <DMA_SetConfig+0x1d0>
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a3d      	ldr	r2, [pc, #244]	; (80026ac <DMA_SetConfig+0x234>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d045      	beq.n	8002648 <DMA_SetConfig+0x1d0>
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a3b      	ldr	r2, [pc, #236]	; (80026b0 <DMA_SetConfig+0x238>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d040      	beq.n	8002648 <DMA_SetConfig+0x1d0>
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a3a      	ldr	r2, [pc, #232]	; (80026b4 <DMA_SetConfig+0x23c>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d03b      	beq.n	8002648 <DMA_SetConfig+0x1d0>
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a38      	ldr	r2, [pc, #224]	; (80026b8 <DMA_SetConfig+0x240>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d036      	beq.n	8002648 <DMA_SetConfig+0x1d0>
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a37      	ldr	r2, [pc, #220]	; (80026bc <DMA_SetConfig+0x244>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d031      	beq.n	8002648 <DMA_SetConfig+0x1d0>
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a35      	ldr	r2, [pc, #212]	; (80026c0 <DMA_SetConfig+0x248>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d02c      	beq.n	8002648 <DMA_SetConfig+0x1d0>
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a34      	ldr	r2, [pc, #208]	; (80026c4 <DMA_SetConfig+0x24c>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d027      	beq.n	8002648 <DMA_SetConfig+0x1d0>
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a32      	ldr	r2, [pc, #200]	; (80026c8 <DMA_SetConfig+0x250>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d022      	beq.n	8002648 <DMA_SetConfig+0x1d0>
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a31      	ldr	r2, [pc, #196]	; (80026cc <DMA_SetConfig+0x254>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d01d      	beq.n	8002648 <DMA_SetConfig+0x1d0>
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a2f      	ldr	r2, [pc, #188]	; (80026d0 <DMA_SetConfig+0x258>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d018      	beq.n	8002648 <DMA_SetConfig+0x1d0>
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a2e      	ldr	r2, [pc, #184]	; (80026d4 <DMA_SetConfig+0x25c>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d013      	beq.n	8002648 <DMA_SetConfig+0x1d0>
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a2c      	ldr	r2, [pc, #176]	; (80026d8 <DMA_SetConfig+0x260>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d00e      	beq.n	8002648 <DMA_SetConfig+0x1d0>
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a2b      	ldr	r2, [pc, #172]	; (80026dc <DMA_SetConfig+0x264>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d009      	beq.n	8002648 <DMA_SetConfig+0x1d0>
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a29      	ldr	r2, [pc, #164]	; (80026e0 <DMA_SetConfig+0x268>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d004      	beq.n	8002648 <DMA_SetConfig+0x1d0>
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a28      	ldr	r2, [pc, #160]	; (80026e4 <DMA_SetConfig+0x26c>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d101      	bne.n	800264c <DMA_SetConfig+0x1d4>
 8002648:	2301      	movs	r3, #1
 800264a:	e000      	b.n	800264e <DMA_SetConfig+0x1d6>
 800264c:	2300      	movs	r3, #0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d05a      	beq.n	8002708 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002656:	f003 031f 	and.w	r3, r3, #31
 800265a:	223f      	movs	r2, #63	; 0x3f
 800265c:	409a      	lsls	r2, r3
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002670:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	683a      	ldr	r2, [r7, #0]
 8002678:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	2b40      	cmp	r3, #64	; 0x40
 8002680:	d108      	bne.n	8002694 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	68ba      	ldr	r2, [r7, #8]
 8002690:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002692:	e087      	b.n	80027a4 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	68ba      	ldr	r2, [r7, #8]
 800269a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	60da      	str	r2, [r3, #12]
}
 80026a4:	e07e      	b.n	80027a4 <DMA_SetConfig+0x32c>
 80026a6:	bf00      	nop
 80026a8:	40020010 	.word	0x40020010
 80026ac:	40020028 	.word	0x40020028
 80026b0:	40020040 	.word	0x40020040
 80026b4:	40020058 	.word	0x40020058
 80026b8:	40020070 	.word	0x40020070
 80026bc:	40020088 	.word	0x40020088
 80026c0:	400200a0 	.word	0x400200a0
 80026c4:	400200b8 	.word	0x400200b8
 80026c8:	40020410 	.word	0x40020410
 80026cc:	40020428 	.word	0x40020428
 80026d0:	40020440 	.word	0x40020440
 80026d4:	40020458 	.word	0x40020458
 80026d8:	40020470 	.word	0x40020470
 80026dc:	40020488 	.word	0x40020488
 80026e0:	400204a0 	.word	0x400204a0
 80026e4:	400204b8 	.word	0x400204b8
 80026e8:	58025408 	.word	0x58025408
 80026ec:	5802541c 	.word	0x5802541c
 80026f0:	58025430 	.word	0x58025430
 80026f4:	58025444 	.word	0x58025444
 80026f8:	58025458 	.word	0x58025458
 80026fc:	5802546c 	.word	0x5802546c
 8002700:	58025480 	.word	0x58025480
 8002704:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a28      	ldr	r2, [pc, #160]	; (80027b0 <DMA_SetConfig+0x338>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d022      	beq.n	8002758 <DMA_SetConfig+0x2e0>
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a27      	ldr	r2, [pc, #156]	; (80027b4 <DMA_SetConfig+0x33c>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d01d      	beq.n	8002758 <DMA_SetConfig+0x2e0>
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a25      	ldr	r2, [pc, #148]	; (80027b8 <DMA_SetConfig+0x340>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d018      	beq.n	8002758 <DMA_SetConfig+0x2e0>
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a24      	ldr	r2, [pc, #144]	; (80027bc <DMA_SetConfig+0x344>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d013      	beq.n	8002758 <DMA_SetConfig+0x2e0>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a22      	ldr	r2, [pc, #136]	; (80027c0 <DMA_SetConfig+0x348>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d00e      	beq.n	8002758 <DMA_SetConfig+0x2e0>
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a21      	ldr	r2, [pc, #132]	; (80027c4 <DMA_SetConfig+0x34c>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d009      	beq.n	8002758 <DMA_SetConfig+0x2e0>
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a1f      	ldr	r2, [pc, #124]	; (80027c8 <DMA_SetConfig+0x350>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d004      	beq.n	8002758 <DMA_SetConfig+0x2e0>
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a1e      	ldr	r2, [pc, #120]	; (80027cc <DMA_SetConfig+0x354>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d101      	bne.n	800275c <DMA_SetConfig+0x2e4>
 8002758:	2301      	movs	r3, #1
 800275a:	e000      	b.n	800275e <DMA_SetConfig+0x2e6>
 800275c:	2300      	movs	r3, #0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d020      	beq.n	80027a4 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002766:	f003 031f 	and.w	r3, r3, #31
 800276a:	2201      	movs	r2, #1
 800276c:	409a      	lsls	r2, r3
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	683a      	ldr	r2, [r7, #0]
 8002778:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_PERIPH_TO_MEMORY)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d108      	bne.n	8002794 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	68ba      	ldr	r2, [r7, #8]
 8002790:	60da      	str	r2, [r3, #12]
}
 8002792:	e007      	b.n	80027a4 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	68ba      	ldr	r2, [r7, #8]
 800279a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	60da      	str	r2, [r3, #12]
}
 80027a4:	bf00      	nop
 80027a6:	371c      	adds	r7, #28
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr
 80027b0:	58025408 	.word	0x58025408
 80027b4:	5802541c 	.word	0x5802541c
 80027b8:	58025430 	.word	0x58025430
 80027bc:	58025444 	.word	0x58025444
 80027c0:	58025458 	.word	0x58025458
 80027c4:	5802546c 	.word	0x5802546c
 80027c8:	58025480 	.word	0x58025480
 80027cc:	58025494 	.word	0x58025494

080027d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b085      	sub	sp, #20
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a42      	ldr	r2, [pc, #264]	; (80028e8 <DMA_CalcBaseAndBitshift+0x118>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d04a      	beq.n	8002878 <DMA_CalcBaseAndBitshift+0xa8>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a41      	ldr	r2, [pc, #260]	; (80028ec <DMA_CalcBaseAndBitshift+0x11c>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d045      	beq.n	8002878 <DMA_CalcBaseAndBitshift+0xa8>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a3f      	ldr	r2, [pc, #252]	; (80028f0 <DMA_CalcBaseAndBitshift+0x120>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d040      	beq.n	8002878 <DMA_CalcBaseAndBitshift+0xa8>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a3e      	ldr	r2, [pc, #248]	; (80028f4 <DMA_CalcBaseAndBitshift+0x124>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d03b      	beq.n	8002878 <DMA_CalcBaseAndBitshift+0xa8>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a3c      	ldr	r2, [pc, #240]	; (80028f8 <DMA_CalcBaseAndBitshift+0x128>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d036      	beq.n	8002878 <DMA_CalcBaseAndBitshift+0xa8>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a3b      	ldr	r2, [pc, #236]	; (80028fc <DMA_CalcBaseAndBitshift+0x12c>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d031      	beq.n	8002878 <DMA_CalcBaseAndBitshift+0xa8>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a39      	ldr	r2, [pc, #228]	; (8002900 <DMA_CalcBaseAndBitshift+0x130>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d02c      	beq.n	8002878 <DMA_CalcBaseAndBitshift+0xa8>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a38      	ldr	r2, [pc, #224]	; (8002904 <DMA_CalcBaseAndBitshift+0x134>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d027      	beq.n	8002878 <DMA_CalcBaseAndBitshift+0xa8>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a36      	ldr	r2, [pc, #216]	; (8002908 <DMA_CalcBaseAndBitshift+0x138>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d022      	beq.n	8002878 <DMA_CalcBaseAndBitshift+0xa8>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a35      	ldr	r2, [pc, #212]	; (800290c <DMA_CalcBaseAndBitshift+0x13c>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d01d      	beq.n	8002878 <DMA_CalcBaseAndBitshift+0xa8>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a33      	ldr	r2, [pc, #204]	; (8002910 <DMA_CalcBaseAndBitshift+0x140>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d018      	beq.n	8002878 <DMA_CalcBaseAndBitshift+0xa8>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a32      	ldr	r2, [pc, #200]	; (8002914 <DMA_CalcBaseAndBitshift+0x144>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d013      	beq.n	8002878 <DMA_CalcBaseAndBitshift+0xa8>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a30      	ldr	r2, [pc, #192]	; (8002918 <DMA_CalcBaseAndBitshift+0x148>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d00e      	beq.n	8002878 <DMA_CalcBaseAndBitshift+0xa8>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a2f      	ldr	r2, [pc, #188]	; (800291c <DMA_CalcBaseAndBitshift+0x14c>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d009      	beq.n	8002878 <DMA_CalcBaseAndBitshift+0xa8>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a2d      	ldr	r2, [pc, #180]	; (8002920 <DMA_CalcBaseAndBitshift+0x150>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d004      	beq.n	8002878 <DMA_CalcBaseAndBitshift+0xa8>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a2c      	ldr	r2, [pc, #176]	; (8002924 <DMA_CalcBaseAndBitshift+0x154>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d101      	bne.n	800287c <DMA_CalcBaseAndBitshift+0xac>
 8002878:	2301      	movs	r3, #1
 800287a:	e000      	b.n	800287e <DMA_CalcBaseAndBitshift+0xae>
 800287c:	2300      	movs	r3, #0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d024      	beq.n	80028cc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	b2db      	uxtb	r3, r3
 8002888:	3b10      	subs	r3, #16
 800288a:	4a27      	ldr	r2, [pc, #156]	; (8002928 <DMA_CalcBaseAndBitshift+0x158>)
 800288c:	fba2 2303 	umull	r2, r3, r2, r3
 8002890:	091b      	lsrs	r3, r3, #4
 8002892:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f003 0307 	and.w	r3, r3, #7
 800289a:	4a24      	ldr	r2, [pc, #144]	; (800292c <DMA_CalcBaseAndBitshift+0x15c>)
 800289c:	5cd3      	ldrb	r3, [r2, r3]
 800289e:	461a      	mov	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2b03      	cmp	r3, #3
 80028a8:	d908      	bls.n	80028bc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	461a      	mov	r2, r3
 80028b0:	4b1f      	ldr	r3, [pc, #124]	; (8002930 <DMA_CalcBaseAndBitshift+0x160>)
 80028b2:	4013      	ands	r3, r2
 80028b4:	1d1a      	adds	r2, r3, #4
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	659a      	str	r2, [r3, #88]	; 0x58
 80028ba:	e00d      	b.n	80028d8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	461a      	mov	r2, r3
 80028c2:	4b1b      	ldr	r3, [pc, #108]	; (8002930 <DMA_CalcBaseAndBitshift+0x160>)
 80028c4:	4013      	ands	r3, r2
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	6593      	str	r3, [r2, #88]	; 0x58
 80028ca:	e005      	b.n	80028d8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3714      	adds	r7, #20
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr
 80028e8:	40020010 	.word	0x40020010
 80028ec:	40020028 	.word	0x40020028
 80028f0:	40020040 	.word	0x40020040
 80028f4:	40020058 	.word	0x40020058
 80028f8:	40020070 	.word	0x40020070
 80028fc:	40020088 	.word	0x40020088
 8002900:	400200a0 	.word	0x400200a0
 8002904:	400200b8 	.word	0x400200b8
 8002908:	40020410 	.word	0x40020410
 800290c:	40020428 	.word	0x40020428
 8002910:	40020440 	.word	0x40020440
 8002914:	40020458 	.word	0x40020458
 8002918:	40020470 	.word	0x40020470
 800291c:	40020488 	.word	0x40020488
 8002920:	400204a0 	.word	0x400204a0
 8002924:	400204b8 	.word	0x400204b8
 8002928:	aaaaaaab 	.word	0xaaaaaaab
 800292c:	08009708 	.word	0x08009708
 8002930:	fffffc00 	.word	0xfffffc00

08002934 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002934:	b480      	push	{r7}
 8002936:	b085      	sub	sp, #20
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800293c:	2300      	movs	r3, #0
 800293e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	699b      	ldr	r3, [r3, #24]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d120      	bne.n	800298a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800294c:	2b03      	cmp	r3, #3
 800294e:	d858      	bhi.n	8002a02 <DMA_CheckFifoParam+0xce>
 8002950:	a201      	add	r2, pc, #4	; (adr r2, 8002958 <DMA_CheckFifoParam+0x24>)
 8002952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002956:	bf00      	nop
 8002958:	08002969 	.word	0x08002969
 800295c:	0800297b 	.word	0x0800297b
 8002960:	08002969 	.word	0x08002969
 8002964:	08002a03 	.word	0x08002a03
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800296c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d048      	beq.n	8002a06 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002978:	e045      	b.n	8002a06 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002982:	d142      	bne.n	8002a0a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002988:	e03f      	b.n	8002a0a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002992:	d123      	bne.n	80029dc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002998:	2b03      	cmp	r3, #3
 800299a:	d838      	bhi.n	8002a0e <DMA_CheckFifoParam+0xda>
 800299c:	a201      	add	r2, pc, #4	; (adr r2, 80029a4 <DMA_CheckFifoParam+0x70>)
 800299e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029a2:	bf00      	nop
 80029a4:	080029b5 	.word	0x080029b5
 80029a8:	080029bb 	.word	0x080029bb
 80029ac:	080029b5 	.word	0x080029b5
 80029b0:	080029cd 	.word	0x080029cd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	73fb      	strb	r3, [r7, #15]
        break;
 80029b8:	e030      	b.n	8002a1c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d025      	beq.n	8002a12 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80029ca:	e022      	b.n	8002a12 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80029d4:	d11f      	bne.n	8002a16 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80029da:	e01c      	b.n	8002a16 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d902      	bls.n	80029ea <DMA_CheckFifoParam+0xb6>
 80029e4:	2b03      	cmp	r3, #3
 80029e6:	d003      	beq.n	80029f0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80029e8:	e018      	b.n	8002a1c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	73fb      	strb	r3, [r7, #15]
        break;
 80029ee:	e015      	b.n	8002a1c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d00e      	beq.n	8002a1a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	73fb      	strb	r3, [r7, #15]
    break;
 8002a00:	e00b      	b.n	8002a1a <DMA_CheckFifoParam+0xe6>
        break;
 8002a02:	bf00      	nop
 8002a04:	e00a      	b.n	8002a1c <DMA_CheckFifoParam+0xe8>
        break;
 8002a06:	bf00      	nop
 8002a08:	e008      	b.n	8002a1c <DMA_CheckFifoParam+0xe8>
        break;
 8002a0a:	bf00      	nop
 8002a0c:	e006      	b.n	8002a1c <DMA_CheckFifoParam+0xe8>
        break;
 8002a0e:	bf00      	nop
 8002a10:	e004      	b.n	8002a1c <DMA_CheckFifoParam+0xe8>
        break;
 8002a12:	bf00      	nop
 8002a14:	e002      	b.n	8002a1c <DMA_CheckFifoParam+0xe8>
        break;
 8002a16:	bf00      	nop
 8002a18:	e000      	b.n	8002a1c <DMA_CheckFifoParam+0xe8>
    break;
 8002a1a:	bf00      	nop
    }
  }

  return status;
 8002a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3714      	adds	r7, #20
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop

08002a2c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a38      	ldr	r2, [pc, #224]	; (8002b20 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d022      	beq.n	8002a8a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a36      	ldr	r2, [pc, #216]	; (8002b24 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d01d      	beq.n	8002a8a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a35      	ldr	r2, [pc, #212]	; (8002b28 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d018      	beq.n	8002a8a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a33      	ldr	r2, [pc, #204]	; (8002b2c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d013      	beq.n	8002a8a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a32      	ldr	r2, [pc, #200]	; (8002b30 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d00e      	beq.n	8002a8a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a30      	ldr	r2, [pc, #192]	; (8002b34 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d009      	beq.n	8002a8a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a2f      	ldr	r2, [pc, #188]	; (8002b38 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d004      	beq.n	8002a8a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a2d      	ldr	r2, [pc, #180]	; (8002b3c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d101      	bne.n	8002a8e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e000      	b.n	8002a90 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8002a8e:	2300      	movs	r3, #0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d01a      	beq.n	8002aca <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	3b08      	subs	r3, #8
 8002a9c:	4a28      	ldr	r2, [pc, #160]	; (8002b40 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8002a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa2:	091b      	lsrs	r3, r3, #4
 8002aa4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	4b26      	ldr	r3, [pc, #152]	; (8002b44 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8002aaa:	4413      	add	r3, r2
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	461a      	mov	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4a24      	ldr	r2, [pc, #144]	; (8002b48 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8002ab8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	f003 031f 	and.w	r3, r3, #31
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	409a      	lsls	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8002ac8:	e024      	b.n	8002b14 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	3b10      	subs	r3, #16
 8002ad2:	4a1e      	ldr	r2, [pc, #120]	; (8002b4c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8002ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad8:	091b      	lsrs	r3, r3, #4
 8002ada:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	4a1c      	ldr	r2, [pc, #112]	; (8002b50 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d806      	bhi.n	8002af2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	4a1b      	ldr	r2, [pc, #108]	; (8002b54 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d902      	bls.n	8002af2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	3308      	adds	r3, #8
 8002af0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8002af2:	68fa      	ldr	r2, [r7, #12]
 8002af4:	4b18      	ldr	r3, [pc, #96]	; (8002b58 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8002af6:	4413      	add	r3, r2
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	461a      	mov	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	4a16      	ldr	r2, [pc, #88]	; (8002b5c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8002b04:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	f003 031f 	and.w	r3, r3, #31
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	409a      	lsls	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002b14:	bf00      	nop
 8002b16:	3714      	adds	r7, #20
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr
 8002b20:	58025408 	.word	0x58025408
 8002b24:	5802541c 	.word	0x5802541c
 8002b28:	58025430 	.word	0x58025430
 8002b2c:	58025444 	.word	0x58025444
 8002b30:	58025458 	.word	0x58025458
 8002b34:	5802546c 	.word	0x5802546c
 8002b38:	58025480 	.word	0x58025480
 8002b3c:	58025494 	.word	0x58025494
 8002b40:	cccccccd 	.word	0xcccccccd
 8002b44:	16009600 	.word	0x16009600
 8002b48:	58025880 	.word	0x58025880
 8002b4c:	aaaaaaab 	.word	0xaaaaaaab
 8002b50:	400204b8 	.word	0x400204b8
 8002b54:	4002040f 	.word	0x4002040f
 8002b58:	10008200 	.word	0x10008200
 8002b5c:	40020880 	.word	0x40020880

08002b60 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b085      	sub	sp, #20
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d04a      	beq.n	8002c0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2b08      	cmp	r3, #8
 8002b7a:	d847      	bhi.n	8002c0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a25      	ldr	r2, [pc, #148]	; (8002c18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d022      	beq.n	8002bcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a24      	ldr	r2, [pc, #144]	; (8002c1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d01d      	beq.n	8002bcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a22      	ldr	r2, [pc, #136]	; (8002c20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d018      	beq.n	8002bcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a21      	ldr	r2, [pc, #132]	; (8002c24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d013      	beq.n	8002bcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a1f      	ldr	r2, [pc, #124]	; (8002c28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d00e      	beq.n	8002bcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a1e      	ldr	r2, [pc, #120]	; (8002c2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d009      	beq.n	8002bcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a1c      	ldr	r2, [pc, #112]	; (8002c30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d004      	beq.n	8002bcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a1b      	ldr	r2, [pc, #108]	; (8002c34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d101      	bne.n	8002bd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e000      	b.n	8002bd2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d00a      	beq.n	8002bec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8002bd6:	68fa      	ldr	r2, [r7, #12]
 8002bd8:	4b17      	ldr	r3, [pc, #92]	; (8002c38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8002bda:	4413      	add	r3, r2
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	461a      	mov	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	4a15      	ldr	r2, [pc, #84]	; (8002c3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8002be8:	671a      	str	r2, [r3, #112]	; 0x70
 8002bea:	e009      	b.n	8002c00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002bec:	68fa      	ldr	r2, [r7, #12]
 8002bee:	4b14      	ldr	r3, [pc, #80]	; (8002c40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8002bf0:	4413      	add	r3, r2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a11      	ldr	r2, [pc, #68]	; (8002c44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8002bfe:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	3b01      	subs	r3, #1
 8002c04:	2201      	movs	r2, #1
 8002c06:	409a      	lsls	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8002c0c:	bf00      	nop
 8002c0e:	3714      	adds	r7, #20
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr
 8002c18:	58025408 	.word	0x58025408
 8002c1c:	5802541c 	.word	0x5802541c
 8002c20:	58025430 	.word	0x58025430
 8002c24:	58025444 	.word	0x58025444
 8002c28:	58025458 	.word	0x58025458
 8002c2c:	5802546c 	.word	0x5802546c
 8002c30:	58025480 	.word	0x58025480
 8002c34:	58025494 	.word	0x58025494
 8002c38:	1600963f 	.word	0x1600963f
 8002c3c:	58025940 	.word	0x58025940
 8002c40:	1000823f 	.word	0x1000823f
 8002c44:	40020940 	.word	0x40020940

08002c48 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA Stream.
  * @param  pSyncConfig : pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b085      	sub	sp, #20
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
  uint32_t syncSignalID = 0;
 8002c52:	2300      	movs	r3, #0
 8002c54:	60fb      	str	r3, [r7, #12]
  uint32_t syncPolarity = 0;
 8002c56:	2300      	movs	r3, #0
 8002c58:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  if(pSyncConfig->SyncEnable == ENABLE)
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	7a1b      	ldrb	r3, [r3, #8]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d155      	bne.n	8002d0e <HAL_DMAEx_ConfigMuxSync+0xc6>
  {
    assert_param(IS_DMAMUX_SYNC_POLARITY(pSyncConfig->SyncPolarity));

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a4b      	ldr	r2, [pc, #300]	; (8002d94 <HAL_DMAEx_ConfigMuxSync+0x14c>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d049      	beq.n	8002d00 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a49      	ldr	r2, [pc, #292]	; (8002d98 <HAL_DMAEx_ConfigMuxSync+0x150>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d044      	beq.n	8002d00 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a48      	ldr	r2, [pc, #288]	; (8002d9c <HAL_DMAEx_ConfigMuxSync+0x154>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d03f      	beq.n	8002d00 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a46      	ldr	r2, [pc, #280]	; (8002da0 <HAL_DMAEx_ConfigMuxSync+0x158>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d03a      	beq.n	8002d00 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a45      	ldr	r2, [pc, #276]	; (8002da4 <HAL_DMAEx_ConfigMuxSync+0x15c>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d035      	beq.n	8002d00 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a43      	ldr	r2, [pc, #268]	; (8002da8 <HAL_DMAEx_ConfigMuxSync+0x160>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d030      	beq.n	8002d00 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a42      	ldr	r2, [pc, #264]	; (8002dac <HAL_DMAEx_ConfigMuxSync+0x164>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d02b      	beq.n	8002d00 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a40      	ldr	r2, [pc, #256]	; (8002db0 <HAL_DMAEx_ConfigMuxSync+0x168>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d026      	beq.n	8002d00 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a3f      	ldr	r2, [pc, #252]	; (8002db4 <HAL_DMAEx_ConfigMuxSync+0x16c>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d021      	beq.n	8002d00 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a3d      	ldr	r2, [pc, #244]	; (8002db8 <HAL_DMAEx_ConfigMuxSync+0x170>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d01c      	beq.n	8002d00 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a3c      	ldr	r2, [pc, #240]	; (8002dbc <HAL_DMAEx_ConfigMuxSync+0x174>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d017      	beq.n	8002d00 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a3a      	ldr	r2, [pc, #232]	; (8002dc0 <HAL_DMAEx_ConfigMuxSync+0x178>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d012      	beq.n	8002d00 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a39      	ldr	r2, [pc, #228]	; (8002dc4 <HAL_DMAEx_ConfigMuxSync+0x17c>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d00d      	beq.n	8002d00 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a37      	ldr	r2, [pc, #220]	; (8002dc8 <HAL_DMAEx_ConfigMuxSync+0x180>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d008      	beq.n	8002d00 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a36      	ldr	r2, [pc, #216]	; (8002dcc <HAL_DMAEx_ConfigMuxSync+0x184>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d003      	beq.n	8002d00 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a34      	ldr	r2, [pc, #208]	; (8002dd0 <HAL_DMAEx_ConfigMuxSync+0x188>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	bf00      	nop
    }
    else
    {
      assert_param(IS_BDMA_DMAMUX_SYNC_SIGNAL_ID(pSyncConfig->SyncSignalID));
    }
    syncSignalID = pSyncConfig->SyncSignalID;
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	60fb      	str	r3, [r7, #12]
    syncPolarity = pSyncConfig->SyncPolarity;
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	60bb      	str	r3, [r7, #8]
  }

  /*Check if the DMA state is ready */
  if(hdma->State == HAL_DMA_STATE_READY)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d131      	bne.n	8002d7e <HAL_DMAEx_ConfigMuxSync+0x136>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d101      	bne.n	8002d28 <HAL_DMAEx_ConfigMuxSync+0xe0>
 8002d24:	2302      	movs	r3, #2
 8002d26:	e02f      	b.n	8002d88 <HAL_DMAEx_ConfigMuxSync+0x140>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the synchronization and event generation before applying a new config */
    CLEAR_BIT(hdma->DMAmuxChannel->CCR,(DMAMUX_CxCR_SE | DMAMUX_CxCR_EGE));
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d3a:	f422 3281 	bic.w	r2, r2, #66048	; 0x10200
 8002d3e:	601a      	str	r2, [r3, #0]

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG( hdma->DMAmuxChannel->CCR, \
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	b2d9      	uxtb	r1, r3
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	061a      	lsls	r2, r3, #24
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	3b01      	subs	r3, #1
 8002d52:	04db      	lsls	r3, r3, #19
 8002d54:	431a      	orrs	r2, r3
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	431a      	orrs	r2, r3
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	7a1b      	ldrb	r3, [r3, #8]
 8002d5e:	041b      	lsls	r3, r3, #16
 8002d60:	431a      	orrs	r2, r3
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	7a5b      	ldrb	r3, [r3, #9]
 8002d66:	025b      	lsls	r3, r3, #9
 8002d68:	431a      	orrs	r2, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	601a      	str	r2, [r3, #0]
               ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
               syncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)    | \
               ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos));

      /* Process Locked */
    __HAL_UNLOCK(hdma);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	e004      	b.n	8002d88 <HAL_DMAEx_ConfigMuxSync+0x140>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d84:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
  }
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3714      	adds	r7, #20
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr
 8002d94:	40020010 	.word	0x40020010
 8002d98:	40020028 	.word	0x40020028
 8002d9c:	40020040 	.word	0x40020040
 8002da0:	40020058 	.word	0x40020058
 8002da4:	40020070 	.word	0x40020070
 8002da8:	40020088 	.word	0x40020088
 8002dac:	400200a0 	.word	0x400200a0
 8002db0:	400200b8 	.word	0x400200b8
 8002db4:	40020410 	.word	0x40020410
 8002db8:	40020428 	.word	0x40020428
 8002dbc:	40020440 	.word	0x40020440
 8002dc0:	40020458 	.word	0x40020458
 8002dc4:	40020470 	.word	0x40020470
 8002dc8:	40020488 	.word	0x40020488
 8002dcc:	400204a0 	.word	0x400204a0
 8002dd0:	400204b8 	.word	0x400204b8

08002dd4 <HAL_DMAEx_MUX_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002de6:	4013      	ands	r3, r2
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d01a      	beq.n	8002e22 <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002df6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002dfa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002e04:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e0a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	655a      	str	r2, [r3, #84]	; 0x54

    if(hdma->XferErrorCallback != NULL)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d003      	beq.n	8002e22 <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	4798      	blx	r3
    }
  }

  if(hdma->DMAmuxRequestGen != 0)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d022      	beq.n	8002e70 <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
   /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e34:	4013      	ands	r3, r2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d01a      	beq.n	8002e70 <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e48:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002e52:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e58:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	655a      	str	r2, [r3, #84]	; 0x54

      if(hdma->XferErrorCallback != NULL)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d003      	beq.n	8002e70 <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	4798      	blx	r3
      }
    }
  }
}
 8002e70:	bf00      	nop
 8002e72:	3708      	adds	r7, #8
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b089      	sub	sp, #36	; 0x24
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002e82:	2300      	movs	r3, #0
 8002e84:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002e86:	4b86      	ldr	r3, [pc, #536]	; (80030a0 <HAL_GPIO_Init+0x228>)
 8002e88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002e8a:	e18c      	b.n	80031a6 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	2101      	movs	r1, #1
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	fa01 f303 	lsl.w	r3, r1, r3
 8002e98:	4013      	ands	r3, r2
 8002e9a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	f000 817e 	beq.w	80031a0 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f003 0303 	and.w	r3, r3, #3
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d005      	beq.n	8002ebc <HAL_GPIO_Init+0x44>
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f003 0303 	and.w	r3, r3, #3
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d130      	bne.n	8002f1e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	2203      	movs	r2, #3
 8002ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ecc:	43db      	mvns	r3, r3
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	68da      	ldr	r2, [r3, #12]
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	005b      	lsls	r3, r3, #1
 8002edc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee0:	69ba      	ldr	r2, [r7, #24]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	69ba      	ldr	r2, [r7, #24]
 8002eea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8002efa:	43db      	mvns	r3, r3
 8002efc:	69ba      	ldr	r2, [r7, #24]
 8002efe:	4013      	ands	r3, r2
 8002f00:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	091b      	lsrs	r3, r3, #4
 8002f08:	f003 0201 	and.w	r2, r3, #1
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f12:	69ba      	ldr	r2, [r7, #24]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	69ba      	ldr	r2, [r7, #24]
 8002f1c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	f003 0303 	and.w	r3, r3, #3
 8002f26:	2b03      	cmp	r3, #3
 8002f28:	d017      	beq.n	8002f5a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	005b      	lsls	r3, r3, #1
 8002f34:	2203      	movs	r2, #3
 8002f36:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3a:	43db      	mvns	r3, r3
 8002f3c:	69ba      	ldr	r2, [r7, #24]
 8002f3e:	4013      	ands	r3, r2
 8002f40:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	689a      	ldr	r2, [r3, #8]
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	005b      	lsls	r3, r3, #1
 8002f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4e:	69ba      	ldr	r2, [r7, #24]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	69ba      	ldr	r2, [r7, #24]
 8002f58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f003 0303 	and.w	r3, r3, #3
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d123      	bne.n	8002fae <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	08da      	lsrs	r2, r3, #3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	3208      	adds	r2, #8
 8002f6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	f003 0307 	and.w	r3, r3, #7
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	220f      	movs	r2, #15
 8002f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f82:	43db      	mvns	r3, r3
 8002f84:	69ba      	ldr	r2, [r7, #24]
 8002f86:	4013      	ands	r3, r2
 8002f88:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	691a      	ldr	r2, [r3, #16]
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	f003 0307 	and.w	r3, r3, #7
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9a:	69ba      	ldr	r2, [r7, #24]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	08da      	lsrs	r2, r3, #3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	3208      	adds	r2, #8
 8002fa8:	69b9      	ldr	r1, [r7, #24]
 8002faa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	005b      	lsls	r3, r3, #1
 8002fb8:	2203      	movs	r2, #3
 8002fba:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbe:	43db      	mvns	r3, r3
 8002fc0:	69ba      	ldr	r2, [r7, #24]
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f003 0203 	and.w	r2, r3, #3
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	005b      	lsls	r3, r3, #1
 8002fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd6:	69ba      	ldr	r2, [r7, #24]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	f000 80d8 	beq.w	80031a0 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ff0:	4b2c      	ldr	r3, [pc, #176]	; (80030a4 <HAL_GPIO_Init+0x22c>)
 8002ff2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002ff6:	4a2b      	ldr	r2, [pc, #172]	; (80030a4 <HAL_GPIO_Init+0x22c>)
 8002ff8:	f043 0302 	orr.w	r3, r3, #2
 8002ffc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003000:	4b28      	ldr	r3, [pc, #160]	; (80030a4 <HAL_GPIO_Init+0x22c>)
 8003002:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	60fb      	str	r3, [r7, #12]
 800300c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800300e:	4a26      	ldr	r2, [pc, #152]	; (80030a8 <HAL_GPIO_Init+0x230>)
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	089b      	lsrs	r3, r3, #2
 8003014:	3302      	adds	r3, #2
 8003016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800301a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	f003 0303 	and.w	r3, r3, #3
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	220f      	movs	r2, #15
 8003026:	fa02 f303 	lsl.w	r3, r2, r3
 800302a:	43db      	mvns	r3, r3
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	4013      	ands	r3, r2
 8003030:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a1d      	ldr	r2, [pc, #116]	; (80030ac <HAL_GPIO_Init+0x234>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d04a      	beq.n	80030d0 <HAL_GPIO_Init+0x258>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a1c      	ldr	r2, [pc, #112]	; (80030b0 <HAL_GPIO_Init+0x238>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d02b      	beq.n	800309a <HAL_GPIO_Init+0x222>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a1b      	ldr	r2, [pc, #108]	; (80030b4 <HAL_GPIO_Init+0x23c>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d025      	beq.n	8003096 <HAL_GPIO_Init+0x21e>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a1a      	ldr	r2, [pc, #104]	; (80030b8 <HAL_GPIO_Init+0x240>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d01f      	beq.n	8003092 <HAL_GPIO_Init+0x21a>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a19      	ldr	r2, [pc, #100]	; (80030bc <HAL_GPIO_Init+0x244>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d019      	beq.n	800308e <HAL_GPIO_Init+0x216>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a18      	ldr	r2, [pc, #96]	; (80030c0 <HAL_GPIO_Init+0x248>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d013      	beq.n	800308a <HAL_GPIO_Init+0x212>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a17      	ldr	r2, [pc, #92]	; (80030c4 <HAL_GPIO_Init+0x24c>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d00d      	beq.n	8003086 <HAL_GPIO_Init+0x20e>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a16      	ldr	r2, [pc, #88]	; (80030c8 <HAL_GPIO_Init+0x250>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d007      	beq.n	8003082 <HAL_GPIO_Init+0x20a>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a15      	ldr	r2, [pc, #84]	; (80030cc <HAL_GPIO_Init+0x254>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d101      	bne.n	800307e <HAL_GPIO_Init+0x206>
 800307a:	2309      	movs	r3, #9
 800307c:	e029      	b.n	80030d2 <HAL_GPIO_Init+0x25a>
 800307e:	230a      	movs	r3, #10
 8003080:	e027      	b.n	80030d2 <HAL_GPIO_Init+0x25a>
 8003082:	2307      	movs	r3, #7
 8003084:	e025      	b.n	80030d2 <HAL_GPIO_Init+0x25a>
 8003086:	2306      	movs	r3, #6
 8003088:	e023      	b.n	80030d2 <HAL_GPIO_Init+0x25a>
 800308a:	2305      	movs	r3, #5
 800308c:	e021      	b.n	80030d2 <HAL_GPIO_Init+0x25a>
 800308e:	2304      	movs	r3, #4
 8003090:	e01f      	b.n	80030d2 <HAL_GPIO_Init+0x25a>
 8003092:	2303      	movs	r3, #3
 8003094:	e01d      	b.n	80030d2 <HAL_GPIO_Init+0x25a>
 8003096:	2302      	movs	r3, #2
 8003098:	e01b      	b.n	80030d2 <HAL_GPIO_Init+0x25a>
 800309a:	2301      	movs	r3, #1
 800309c:	e019      	b.n	80030d2 <HAL_GPIO_Init+0x25a>
 800309e:	bf00      	nop
 80030a0:	58000080 	.word	0x58000080
 80030a4:	58024400 	.word	0x58024400
 80030a8:	58000400 	.word	0x58000400
 80030ac:	58020000 	.word	0x58020000
 80030b0:	58020400 	.word	0x58020400
 80030b4:	58020800 	.word	0x58020800
 80030b8:	58020c00 	.word	0x58020c00
 80030bc:	58021000 	.word	0x58021000
 80030c0:	58021400 	.word	0x58021400
 80030c4:	58021800 	.word	0x58021800
 80030c8:	58021c00 	.word	0x58021c00
 80030cc:	58022400 	.word	0x58022400
 80030d0:	2300      	movs	r3, #0
 80030d2:	69fa      	ldr	r2, [r7, #28]
 80030d4:	f002 0203 	and.w	r2, r2, #3
 80030d8:	0092      	lsls	r2, r2, #2
 80030da:	4093      	lsls	r3, r2
 80030dc:	69ba      	ldr	r2, [r7, #24]
 80030de:	4313      	orrs	r3, r2
 80030e0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030e2:	4938      	ldr	r1, [pc, #224]	; (80031c4 <HAL_GPIO_Init+0x34c>)
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	089b      	lsrs	r3, r3, #2
 80030e8:	3302      	adds	r3, #2
 80030ea:	69ba      	ldr	r2, [r7, #24]
 80030ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80030f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	43db      	mvns	r3, r3
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	4013      	ands	r3, r2
 8003100:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d003      	beq.n	8003116 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800310e:	69ba      	ldr	r2, [r7, #24]
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	4313      	orrs	r3, r2
 8003114:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003116:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800311a:	69bb      	ldr	r3, [r7, #24]
 800311c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800311e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	43db      	mvns	r3, r3
 800312a:	69ba      	ldr	r2, [r7, #24]
 800312c:	4013      	ands	r3, r2
 800312e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d003      	beq.n	8003144 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800313c:	69ba      	ldr	r2, [r7, #24]
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	4313      	orrs	r3, r2
 8003142:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003144:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	43db      	mvns	r3, r3
 8003156:	69ba      	ldr	r2, [r7, #24]
 8003158:	4013      	ands	r3, r2
 800315a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d003      	beq.n	8003170 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	4313      	orrs	r3, r2
 800316e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	69ba      	ldr	r2, [r7, #24]
 8003174:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	43db      	mvns	r3, r3
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	4013      	ands	r3, r2
 8003184:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d003      	beq.n	800319a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8003192:	69ba      	ldr	r2, [r7, #24]
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	4313      	orrs	r3, r2
 8003198:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	3301      	adds	r3, #1
 80031a4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	fa22 f303 	lsr.w	r3, r2, r3
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	f47f ae6b 	bne.w	8002e8c <HAL_GPIO_Init+0x14>
  }
}
 80031b6:	bf00      	nop
 80031b8:	bf00      	nop
 80031ba:	3724      	adds	r7, #36	; 0x24
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr
 80031c4:	58000400 	.word	0x58000400

080031c8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80031d0:	4b29      	ldr	r3, [pc, #164]	; (8003278 <HAL_PWREx_ConfigSupply+0xb0>)
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	f003 0307 	and.w	r3, r3, #7
 80031d8:	2b06      	cmp	r3, #6
 80031da:	d00a      	beq.n	80031f2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80031dc:	4b26      	ldr	r3, [pc, #152]	; (8003278 <HAL_PWREx_ConfigSupply+0xb0>)
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d001      	beq.n	80031ee <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e03f      	b.n	800326e <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80031ee:	2300      	movs	r3, #0
 80031f0:	e03d      	b.n	800326e <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80031f2:	4b21      	ldr	r3, [pc, #132]	; (8003278 <HAL_PWREx_ConfigSupply+0xb0>)
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80031fa:	491f      	ldr	r1, [pc, #124]	; (8003278 <HAL_PWREx_ConfigSupply+0xb0>)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4313      	orrs	r3, r2
 8003200:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003202:	f7fd fa39 	bl	8000678 <HAL_GetTick>
 8003206:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003208:	e009      	b.n	800321e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800320a:	f7fd fa35 	bl	8000678 <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003218:	d901      	bls.n	800321e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e027      	b.n	800326e <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800321e:	4b16      	ldr	r3, [pc, #88]	; (8003278 <HAL_PWREx_ConfigSupply+0xb0>)
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003226:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800322a:	d1ee      	bne.n	800320a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2b1e      	cmp	r3, #30
 8003230:	d008      	beq.n	8003244 <HAL_PWREx_ConfigSupply+0x7c>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2b2e      	cmp	r3, #46	; 0x2e
 8003236:	d005      	beq.n	8003244 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2b1d      	cmp	r3, #29
 800323c:	d002      	beq.n	8003244 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2b2d      	cmp	r3, #45	; 0x2d
 8003242:	d113      	bne.n	800326c <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003244:	f7fd fa18 	bl	8000678 <HAL_GetTick>
 8003248:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800324a:	e009      	b.n	8003260 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800324c:	f7fd fa14 	bl	8000678 <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800325a:	d901      	bls.n	8003260 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e006      	b.n	800326e <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003260:	4b05      	ldr	r3, [pc, #20]	; (8003278 <HAL_PWREx_ConfigSupply+0xb0>)
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	f003 0311 	and.w	r3, r3, #17
 8003268:	2b11      	cmp	r3, #17
 800326a:	d1ef      	bne.n	800324c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3710      	adds	r7, #16
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	58024800 	.word	0x58024800

0800327c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b08c      	sub	sp, #48	; 0x30
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d101      	bne.n	800328e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e397      	b.n	80039be <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0301 	and.w	r3, r3, #1
 8003296:	2b00      	cmp	r3, #0
 8003298:	f000 8087 	beq.w	80033aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800329c:	4b9e      	ldr	r3, [pc, #632]	; (8003518 <HAL_RCC_OscConfig+0x29c>)
 800329e:	691b      	ldr	r3, [r3, #16]
 80032a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80032a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80032a6:	4b9c      	ldr	r3, [pc, #624]	; (8003518 <HAL_RCC_OscConfig+0x29c>)
 80032a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032aa:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80032ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ae:	2b10      	cmp	r3, #16
 80032b0:	d007      	beq.n	80032c2 <HAL_RCC_OscConfig+0x46>
 80032b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032b4:	2b18      	cmp	r3, #24
 80032b6:	d110      	bne.n	80032da <HAL_RCC_OscConfig+0x5e>
 80032b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ba:	f003 0303 	and.w	r3, r3, #3
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d10b      	bne.n	80032da <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032c2:	4b95      	ldr	r3, [pc, #596]	; (8003518 <HAL_RCC_OscConfig+0x29c>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d06c      	beq.n	80033a8 <HAL_RCC_OscConfig+0x12c>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d168      	bne.n	80033a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e371      	b.n	80039be <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032e2:	d106      	bne.n	80032f2 <HAL_RCC_OscConfig+0x76>
 80032e4:	4b8c      	ldr	r3, [pc, #560]	; (8003518 <HAL_RCC_OscConfig+0x29c>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a8b      	ldr	r2, [pc, #556]	; (8003518 <HAL_RCC_OscConfig+0x29c>)
 80032ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032ee:	6013      	str	r3, [r2, #0]
 80032f0:	e02e      	b.n	8003350 <HAL_RCC_OscConfig+0xd4>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d10c      	bne.n	8003314 <HAL_RCC_OscConfig+0x98>
 80032fa:	4b87      	ldr	r3, [pc, #540]	; (8003518 <HAL_RCC_OscConfig+0x29c>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a86      	ldr	r2, [pc, #536]	; (8003518 <HAL_RCC_OscConfig+0x29c>)
 8003300:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003304:	6013      	str	r3, [r2, #0]
 8003306:	4b84      	ldr	r3, [pc, #528]	; (8003518 <HAL_RCC_OscConfig+0x29c>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a83      	ldr	r2, [pc, #524]	; (8003518 <HAL_RCC_OscConfig+0x29c>)
 800330c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003310:	6013      	str	r3, [r2, #0]
 8003312:	e01d      	b.n	8003350 <HAL_RCC_OscConfig+0xd4>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800331c:	d10c      	bne.n	8003338 <HAL_RCC_OscConfig+0xbc>
 800331e:	4b7e      	ldr	r3, [pc, #504]	; (8003518 <HAL_RCC_OscConfig+0x29c>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a7d      	ldr	r2, [pc, #500]	; (8003518 <HAL_RCC_OscConfig+0x29c>)
 8003324:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003328:	6013      	str	r3, [r2, #0]
 800332a:	4b7b      	ldr	r3, [pc, #492]	; (8003518 <HAL_RCC_OscConfig+0x29c>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a7a      	ldr	r2, [pc, #488]	; (8003518 <HAL_RCC_OscConfig+0x29c>)
 8003330:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003334:	6013      	str	r3, [r2, #0]
 8003336:	e00b      	b.n	8003350 <HAL_RCC_OscConfig+0xd4>
 8003338:	4b77      	ldr	r3, [pc, #476]	; (8003518 <HAL_RCC_OscConfig+0x29c>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a76      	ldr	r2, [pc, #472]	; (8003518 <HAL_RCC_OscConfig+0x29c>)
 800333e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003342:	6013      	str	r3, [r2, #0]
 8003344:	4b74      	ldr	r3, [pc, #464]	; (8003518 <HAL_RCC_OscConfig+0x29c>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a73      	ldr	r2, [pc, #460]	; (8003518 <HAL_RCC_OscConfig+0x29c>)
 800334a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800334e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d013      	beq.n	8003380 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003358:	f7fd f98e 	bl	8000678 <HAL_GetTick>
 800335c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800335e:	e008      	b.n	8003372 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003360:	f7fd f98a 	bl	8000678 <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	2b64      	cmp	r3, #100	; 0x64
 800336c:	d901      	bls.n	8003372 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e325      	b.n	80039be <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003372:	4b69      	ldr	r3, [pc, #420]	; (8003518 <HAL_RCC_OscConfig+0x29c>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d0f0      	beq.n	8003360 <HAL_RCC_OscConfig+0xe4>
 800337e:	e014      	b.n	80033aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003380:	f7fd f97a 	bl	8000678 <HAL_GetTick>
 8003384:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003386:	e008      	b.n	800339a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003388:	f7fd f976 	bl	8000678 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	2b64      	cmp	r3, #100	; 0x64
 8003394:	d901      	bls.n	800339a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e311      	b.n	80039be <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800339a:	4b5f      	ldr	r3, [pc, #380]	; (8003518 <HAL_RCC_OscConfig+0x29c>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1f0      	bne.n	8003388 <HAL_RCC_OscConfig+0x10c>
 80033a6:	e000      	b.n	80033aa <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0302 	and.w	r3, r3, #2
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	f000 808a 	beq.w	80034cc <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033b8:	4b57      	ldr	r3, [pc, #348]	; (8003518 <HAL_RCC_OscConfig+0x29c>)
 80033ba:	691b      	ldr	r3, [r3, #16]
 80033bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80033c0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80033c2:	4b55      	ldr	r3, [pc, #340]	; (8003518 <HAL_RCC_OscConfig+0x29c>)
 80033c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80033c8:	6a3b      	ldr	r3, [r7, #32]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d007      	beq.n	80033de <HAL_RCC_OscConfig+0x162>
 80033ce:	6a3b      	ldr	r3, [r7, #32]
 80033d0:	2b18      	cmp	r3, #24
 80033d2:	d137      	bne.n	8003444 <HAL_RCC_OscConfig+0x1c8>
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	f003 0303 	and.w	r3, r3, #3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d132      	bne.n	8003444 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033de:	4b4e      	ldr	r3, [pc, #312]	; (8003518 <HAL_RCC_OscConfig+0x29c>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0304 	and.w	r3, r3, #4
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d005      	beq.n	80033f6 <HAL_RCC_OscConfig+0x17a>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d101      	bne.n	80033f6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e2e3      	b.n	80039be <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80033f6:	4b48      	ldr	r3, [pc, #288]	; (8003518 <HAL_RCC_OscConfig+0x29c>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f023 0219 	bic.w	r2, r3, #25
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	4945      	ldr	r1, [pc, #276]	; (8003518 <HAL_RCC_OscConfig+0x29c>)
 8003404:	4313      	orrs	r3, r2
 8003406:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003408:	f7fd f936 	bl	8000678 <HAL_GetTick>
 800340c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800340e:	e008      	b.n	8003422 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003410:	f7fd f932 	bl	8000678 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b02      	cmp	r3, #2
 800341c:	d901      	bls.n	8003422 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e2cd      	b.n	80039be <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003422:	4b3d      	ldr	r3, [pc, #244]	; (8003518 <HAL_RCC_OscConfig+0x29c>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0304 	and.w	r3, r3, #4
 800342a:	2b00      	cmp	r3, #0
 800342c:	d0f0      	beq.n	8003410 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800342e:	4b3a      	ldr	r3, [pc, #232]	; (8003518 <HAL_RCC_OscConfig+0x29c>)
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	691b      	ldr	r3, [r3, #16]
 800343a:	061b      	lsls	r3, r3, #24
 800343c:	4936      	ldr	r1, [pc, #216]	; (8003518 <HAL_RCC_OscConfig+0x29c>)
 800343e:	4313      	orrs	r3, r2
 8003440:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003442:	e043      	b.n	80034cc <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d026      	beq.n	800349a <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800344c:	4b32      	ldr	r3, [pc, #200]	; (8003518 <HAL_RCC_OscConfig+0x29c>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f023 0219 	bic.w	r2, r3, #25
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	492f      	ldr	r1, [pc, #188]	; (8003518 <HAL_RCC_OscConfig+0x29c>)
 800345a:	4313      	orrs	r3, r2
 800345c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800345e:	f7fd f90b 	bl	8000678 <HAL_GetTick>
 8003462:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003464:	e008      	b.n	8003478 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003466:	f7fd f907 	bl	8000678 <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	2b02      	cmp	r3, #2
 8003472:	d901      	bls.n	8003478 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e2a2      	b.n	80039be <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003478:	4b27      	ldr	r3, [pc, #156]	; (8003518 <HAL_RCC_OscConfig+0x29c>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0304 	and.w	r3, r3, #4
 8003480:	2b00      	cmp	r3, #0
 8003482:	d0f0      	beq.n	8003466 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003484:	4b24      	ldr	r3, [pc, #144]	; (8003518 <HAL_RCC_OscConfig+0x29c>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	691b      	ldr	r3, [r3, #16]
 8003490:	061b      	lsls	r3, r3, #24
 8003492:	4921      	ldr	r1, [pc, #132]	; (8003518 <HAL_RCC_OscConfig+0x29c>)
 8003494:	4313      	orrs	r3, r2
 8003496:	604b      	str	r3, [r1, #4]
 8003498:	e018      	b.n	80034cc <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800349a:	4b1f      	ldr	r3, [pc, #124]	; (8003518 <HAL_RCC_OscConfig+0x29c>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a1e      	ldr	r2, [pc, #120]	; (8003518 <HAL_RCC_OscConfig+0x29c>)
 80034a0:	f023 0301 	bic.w	r3, r3, #1
 80034a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a6:	f7fd f8e7 	bl	8000678 <HAL_GetTick>
 80034aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80034ac:	e008      	b.n	80034c0 <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034ae:	f7fd f8e3 	bl	8000678 <HAL_GetTick>
 80034b2:	4602      	mov	r2, r0
 80034b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d901      	bls.n	80034c0 <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	e27e      	b.n	80039be <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80034c0:	4b15      	ldr	r3, [pc, #84]	; (8003518 <HAL_RCC_OscConfig+0x29c>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0304 	and.w	r3, r3, #4
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d1f0      	bne.n	80034ae <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0310 	and.w	r3, r3, #16
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d06d      	beq.n	80035b4 <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034d8:	4b0f      	ldr	r3, [pc, #60]	; (8003518 <HAL_RCC_OscConfig+0x29c>)
 80034da:	691b      	ldr	r3, [r3, #16]
 80034dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034e0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80034e2:	4b0d      	ldr	r3, [pc, #52]	; (8003518 <HAL_RCC_OscConfig+0x29c>)
 80034e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e6:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	2b08      	cmp	r3, #8
 80034ec:	d007      	beq.n	80034fe <HAL_RCC_OscConfig+0x282>
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	2b18      	cmp	r3, #24
 80034f2:	d11e      	bne.n	8003532 <HAL_RCC_OscConfig+0x2b6>
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	f003 0303 	and.w	r3, r3, #3
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d119      	bne.n	8003532 <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80034fe:	4b06      	ldr	r3, [pc, #24]	; (8003518 <HAL_RCC_OscConfig+0x29c>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003506:	2b00      	cmp	r3, #0
 8003508:	d008      	beq.n	800351c <HAL_RCC_OscConfig+0x2a0>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	69db      	ldr	r3, [r3, #28]
 800350e:	2b80      	cmp	r3, #128	; 0x80
 8003510:	d004      	beq.n	800351c <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e253      	b.n	80039be <HAL_RCC_OscConfig+0x742>
 8003516:	bf00      	nop
 8003518:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800351c:	4ba3      	ldr	r3, [pc, #652]	; (80037ac <HAL_RCC_OscConfig+0x530>)
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a1b      	ldr	r3, [r3, #32]
 8003528:	061b      	lsls	r3, r3, #24
 800352a:	49a0      	ldr	r1, [pc, #640]	; (80037ac <HAL_RCC_OscConfig+0x530>)
 800352c:	4313      	orrs	r3, r2
 800352e:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003530:	e040      	b.n	80035b4 <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	69db      	ldr	r3, [r3, #28]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d023      	beq.n	8003582 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800353a:	4b9c      	ldr	r3, [pc, #624]	; (80037ac <HAL_RCC_OscConfig+0x530>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a9b      	ldr	r2, [pc, #620]	; (80037ac <HAL_RCC_OscConfig+0x530>)
 8003540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003544:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003546:	f7fd f897 	bl	8000678 <HAL_GetTick>
 800354a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800354c:	e008      	b.n	8003560 <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800354e:	f7fd f893 	bl	8000678 <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	2b02      	cmp	r3, #2
 800355a:	d901      	bls.n	8003560 <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e22e      	b.n	80039be <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003560:	4b92      	ldr	r3, [pc, #584]	; (80037ac <HAL_RCC_OscConfig+0x530>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003568:	2b00      	cmp	r3, #0
 800356a:	d0f0      	beq.n	800354e <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800356c:	4b8f      	ldr	r3, [pc, #572]	; (80037ac <HAL_RCC_OscConfig+0x530>)
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a1b      	ldr	r3, [r3, #32]
 8003578:	061b      	lsls	r3, r3, #24
 800357a:	498c      	ldr	r1, [pc, #560]	; (80037ac <HAL_RCC_OscConfig+0x530>)
 800357c:	4313      	orrs	r3, r2
 800357e:	60cb      	str	r3, [r1, #12]
 8003580:	e018      	b.n	80035b4 <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003582:	4b8a      	ldr	r3, [pc, #552]	; (80037ac <HAL_RCC_OscConfig+0x530>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a89      	ldr	r2, [pc, #548]	; (80037ac <HAL_RCC_OscConfig+0x530>)
 8003588:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800358c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800358e:	f7fd f873 	bl	8000678 <HAL_GetTick>
 8003592:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003594:	e008      	b.n	80035a8 <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003596:	f7fd f86f 	bl	8000678 <HAL_GetTick>
 800359a:	4602      	mov	r2, r0
 800359c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d901      	bls.n	80035a8 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e20a      	b.n	80039be <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80035a8:	4b80      	ldr	r3, [pc, #512]	; (80037ac <HAL_RCC_OscConfig+0x530>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d1f0      	bne.n	8003596 <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0308 	and.w	r3, r3, #8
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d036      	beq.n	800362e <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	695b      	ldr	r3, [r3, #20]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d019      	beq.n	80035fc <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035c8:	4b78      	ldr	r3, [pc, #480]	; (80037ac <HAL_RCC_OscConfig+0x530>)
 80035ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035cc:	4a77      	ldr	r2, [pc, #476]	; (80037ac <HAL_RCC_OscConfig+0x530>)
 80035ce:	f043 0301 	orr.w	r3, r3, #1
 80035d2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035d4:	f7fd f850 	bl	8000678 <HAL_GetTick>
 80035d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80035da:	e008      	b.n	80035ee <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035dc:	f7fd f84c 	bl	8000678 <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d901      	bls.n	80035ee <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e1e7      	b.n	80039be <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80035ee:	4b6f      	ldr	r3, [pc, #444]	; (80037ac <HAL_RCC_OscConfig+0x530>)
 80035f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d0f0      	beq.n	80035dc <HAL_RCC_OscConfig+0x360>
 80035fa:	e018      	b.n	800362e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035fc:	4b6b      	ldr	r3, [pc, #428]	; (80037ac <HAL_RCC_OscConfig+0x530>)
 80035fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003600:	4a6a      	ldr	r2, [pc, #424]	; (80037ac <HAL_RCC_OscConfig+0x530>)
 8003602:	f023 0301 	bic.w	r3, r3, #1
 8003606:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003608:	f7fd f836 	bl	8000678 <HAL_GetTick>
 800360c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800360e:	e008      	b.n	8003622 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003610:	f7fd f832 	bl	8000678 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	2b02      	cmp	r3, #2
 800361c:	d901      	bls.n	8003622 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e1cd      	b.n	80039be <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003622:	4b62      	ldr	r3, [pc, #392]	; (80037ac <HAL_RCC_OscConfig+0x530>)
 8003624:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003626:	f003 0302 	and.w	r3, r3, #2
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1f0      	bne.n	8003610 <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0320 	and.w	r3, r3, #32
 8003636:	2b00      	cmp	r3, #0
 8003638:	d036      	beq.n	80036a8 <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	699b      	ldr	r3, [r3, #24]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d019      	beq.n	8003676 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003642:	4b5a      	ldr	r3, [pc, #360]	; (80037ac <HAL_RCC_OscConfig+0x530>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a59      	ldr	r2, [pc, #356]	; (80037ac <HAL_RCC_OscConfig+0x530>)
 8003648:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800364c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800364e:	f7fd f813 	bl	8000678 <HAL_GetTick>
 8003652:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003654:	e008      	b.n	8003668 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003656:	f7fd f80f 	bl	8000678 <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	2b02      	cmp	r3, #2
 8003662:	d901      	bls.n	8003668 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e1aa      	b.n	80039be <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003668:	4b50      	ldr	r3, [pc, #320]	; (80037ac <HAL_RCC_OscConfig+0x530>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d0f0      	beq.n	8003656 <HAL_RCC_OscConfig+0x3da>
 8003674:	e018      	b.n	80036a8 <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003676:	4b4d      	ldr	r3, [pc, #308]	; (80037ac <HAL_RCC_OscConfig+0x530>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a4c      	ldr	r2, [pc, #304]	; (80037ac <HAL_RCC_OscConfig+0x530>)
 800367c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003680:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003682:	f7fc fff9 	bl	8000678 <HAL_GetTick>
 8003686:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003688:	e008      	b.n	800369c <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800368a:	f7fc fff5 	bl	8000678 <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	2b02      	cmp	r3, #2
 8003696:	d901      	bls.n	800369c <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e190      	b.n	80039be <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800369c:	4b43      	ldr	r3, [pc, #268]	; (80037ac <HAL_RCC_OscConfig+0x530>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d1f0      	bne.n	800368a <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0304 	and.w	r3, r3, #4
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	f000 8085 	beq.w	80037c0 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80036b6:	4b3e      	ldr	r3, [pc, #248]	; (80037b0 <HAL_RCC_OscConfig+0x534>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a3d      	ldr	r2, [pc, #244]	; (80037b0 <HAL_RCC_OscConfig+0x534>)
 80036bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036c0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80036c2:	f7fc ffd9 	bl	8000678 <HAL_GetTick>
 80036c6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80036c8:	e008      	b.n	80036dc <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80036ca:	f7fc ffd5 	bl	8000678 <HAL_GetTick>
 80036ce:	4602      	mov	r2, r0
 80036d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	2b64      	cmp	r3, #100	; 0x64
 80036d6:	d901      	bls.n	80036dc <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 80036d8:	2303      	movs	r3, #3
 80036da:	e170      	b.n	80039be <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80036dc:	4b34      	ldr	r3, [pc, #208]	; (80037b0 <HAL_RCC_OscConfig+0x534>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d0f0      	beq.n	80036ca <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d106      	bne.n	80036fe <HAL_RCC_OscConfig+0x482>
 80036f0:	4b2e      	ldr	r3, [pc, #184]	; (80037ac <HAL_RCC_OscConfig+0x530>)
 80036f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f4:	4a2d      	ldr	r2, [pc, #180]	; (80037ac <HAL_RCC_OscConfig+0x530>)
 80036f6:	f043 0301 	orr.w	r3, r3, #1
 80036fa:	6713      	str	r3, [r2, #112]	; 0x70
 80036fc:	e02d      	b.n	800375a <HAL_RCC_OscConfig+0x4de>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d10c      	bne.n	8003720 <HAL_RCC_OscConfig+0x4a4>
 8003706:	4b29      	ldr	r3, [pc, #164]	; (80037ac <HAL_RCC_OscConfig+0x530>)
 8003708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800370a:	4a28      	ldr	r2, [pc, #160]	; (80037ac <HAL_RCC_OscConfig+0x530>)
 800370c:	f023 0301 	bic.w	r3, r3, #1
 8003710:	6713      	str	r3, [r2, #112]	; 0x70
 8003712:	4b26      	ldr	r3, [pc, #152]	; (80037ac <HAL_RCC_OscConfig+0x530>)
 8003714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003716:	4a25      	ldr	r2, [pc, #148]	; (80037ac <HAL_RCC_OscConfig+0x530>)
 8003718:	f023 0304 	bic.w	r3, r3, #4
 800371c:	6713      	str	r3, [r2, #112]	; 0x70
 800371e:	e01c      	b.n	800375a <HAL_RCC_OscConfig+0x4de>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	2b05      	cmp	r3, #5
 8003726:	d10c      	bne.n	8003742 <HAL_RCC_OscConfig+0x4c6>
 8003728:	4b20      	ldr	r3, [pc, #128]	; (80037ac <HAL_RCC_OscConfig+0x530>)
 800372a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800372c:	4a1f      	ldr	r2, [pc, #124]	; (80037ac <HAL_RCC_OscConfig+0x530>)
 800372e:	f043 0304 	orr.w	r3, r3, #4
 8003732:	6713      	str	r3, [r2, #112]	; 0x70
 8003734:	4b1d      	ldr	r3, [pc, #116]	; (80037ac <HAL_RCC_OscConfig+0x530>)
 8003736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003738:	4a1c      	ldr	r2, [pc, #112]	; (80037ac <HAL_RCC_OscConfig+0x530>)
 800373a:	f043 0301 	orr.w	r3, r3, #1
 800373e:	6713      	str	r3, [r2, #112]	; 0x70
 8003740:	e00b      	b.n	800375a <HAL_RCC_OscConfig+0x4de>
 8003742:	4b1a      	ldr	r3, [pc, #104]	; (80037ac <HAL_RCC_OscConfig+0x530>)
 8003744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003746:	4a19      	ldr	r2, [pc, #100]	; (80037ac <HAL_RCC_OscConfig+0x530>)
 8003748:	f023 0301 	bic.w	r3, r3, #1
 800374c:	6713      	str	r3, [r2, #112]	; 0x70
 800374e:	4b17      	ldr	r3, [pc, #92]	; (80037ac <HAL_RCC_OscConfig+0x530>)
 8003750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003752:	4a16      	ldr	r2, [pc, #88]	; (80037ac <HAL_RCC_OscConfig+0x530>)
 8003754:	f023 0304 	bic.w	r3, r3, #4
 8003758:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d015      	beq.n	800378e <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003762:	f7fc ff89 	bl	8000678 <HAL_GetTick>
 8003766:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003768:	e00a      	b.n	8003780 <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800376a:	f7fc ff85 	bl	8000678 <HAL_GetTick>
 800376e:	4602      	mov	r2, r0
 8003770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	f241 3288 	movw	r2, #5000	; 0x1388
 8003778:	4293      	cmp	r3, r2
 800377a:	d901      	bls.n	8003780 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	e11e      	b.n	80039be <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003780:	4b0a      	ldr	r3, [pc, #40]	; (80037ac <HAL_RCC_OscConfig+0x530>)
 8003782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003784:	f003 0302 	and.w	r3, r3, #2
 8003788:	2b00      	cmp	r3, #0
 800378a:	d0ee      	beq.n	800376a <HAL_RCC_OscConfig+0x4ee>
 800378c:	e018      	b.n	80037c0 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800378e:	f7fc ff73 	bl	8000678 <HAL_GetTick>
 8003792:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003794:	e00e      	b.n	80037b4 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003796:	f7fc ff6f 	bl	8000678 <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d905      	bls.n	80037b4 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	e108      	b.n	80039be <HAL_RCC_OscConfig+0x742>
 80037ac:	58024400 	.word	0x58024400
 80037b0:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80037b4:	4b84      	ldr	r3, [pc, #528]	; (80039c8 <HAL_RCC_OscConfig+0x74c>)
 80037b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b8:	f003 0302 	and.w	r3, r3, #2
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d1ea      	bne.n	8003796 <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	f000 80f9 	beq.w	80039bc <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80037ca:	4b7f      	ldr	r3, [pc, #508]	; (80039c8 <HAL_RCC_OscConfig+0x74c>)
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80037d2:	2b18      	cmp	r3, #24
 80037d4:	f000 80b4 	beq.w	8003940 <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037dc:	2b02      	cmp	r3, #2
 80037de:	f040 8095 	bne.w	800390c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037e2:	4b79      	ldr	r3, [pc, #484]	; (80039c8 <HAL_RCC_OscConfig+0x74c>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a78      	ldr	r2, [pc, #480]	; (80039c8 <HAL_RCC_OscConfig+0x74c>)
 80037e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ee:	f7fc ff43 	bl	8000678 <HAL_GetTick>
 80037f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80037f4:	e008      	b.n	8003808 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037f6:	f7fc ff3f 	bl	8000678 <HAL_GetTick>
 80037fa:	4602      	mov	r2, r0
 80037fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	2b02      	cmp	r3, #2
 8003802:	d901      	bls.n	8003808 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8003804:	2303      	movs	r3, #3
 8003806:	e0da      	b.n	80039be <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003808:	4b6f      	ldr	r3, [pc, #444]	; (80039c8 <HAL_RCC_OscConfig+0x74c>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d1f0      	bne.n	80037f6 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003814:	4b6c      	ldr	r3, [pc, #432]	; (80039c8 <HAL_RCC_OscConfig+0x74c>)
 8003816:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003818:	4b6c      	ldr	r3, [pc, #432]	; (80039cc <HAL_RCC_OscConfig+0x750>)
 800381a:	4013      	ands	r3, r2
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003824:	0112      	lsls	r2, r2, #4
 8003826:	430a      	orrs	r2, r1
 8003828:	4967      	ldr	r1, [pc, #412]	; (80039c8 <HAL_RCC_OscConfig+0x74c>)
 800382a:	4313      	orrs	r3, r2
 800382c:	628b      	str	r3, [r1, #40]	; 0x28
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003832:	3b01      	subs	r3, #1
 8003834:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800383c:	3b01      	subs	r3, #1
 800383e:	025b      	lsls	r3, r3, #9
 8003840:	b29b      	uxth	r3, r3
 8003842:	431a      	orrs	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003848:	3b01      	subs	r3, #1
 800384a:	041b      	lsls	r3, r3, #16
 800384c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003850:	431a      	orrs	r2, r3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003856:	3b01      	subs	r3, #1
 8003858:	061b      	lsls	r3, r3, #24
 800385a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800385e:	495a      	ldr	r1, [pc, #360]	; (80039c8 <HAL_RCC_OscConfig+0x74c>)
 8003860:	4313      	orrs	r3, r2
 8003862:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003864:	4b58      	ldr	r3, [pc, #352]	; (80039c8 <HAL_RCC_OscConfig+0x74c>)
 8003866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003868:	4a57      	ldr	r2, [pc, #348]	; (80039c8 <HAL_RCC_OscConfig+0x74c>)
 800386a:	f023 0301 	bic.w	r3, r3, #1
 800386e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003870:	4b55      	ldr	r3, [pc, #340]	; (80039c8 <HAL_RCC_OscConfig+0x74c>)
 8003872:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003874:	4b56      	ldr	r3, [pc, #344]	; (80039d0 <HAL_RCC_OscConfig+0x754>)
 8003876:	4013      	ands	r3, r2
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800387c:	00d2      	lsls	r2, r2, #3
 800387e:	4952      	ldr	r1, [pc, #328]	; (80039c8 <HAL_RCC_OscConfig+0x74c>)
 8003880:	4313      	orrs	r3, r2
 8003882:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003884:	4b50      	ldr	r3, [pc, #320]	; (80039c8 <HAL_RCC_OscConfig+0x74c>)
 8003886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003888:	f023 020c 	bic.w	r2, r3, #12
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003890:	494d      	ldr	r1, [pc, #308]	; (80039c8 <HAL_RCC_OscConfig+0x74c>)
 8003892:	4313      	orrs	r3, r2
 8003894:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003896:	4b4c      	ldr	r3, [pc, #304]	; (80039c8 <HAL_RCC_OscConfig+0x74c>)
 8003898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800389a:	f023 0202 	bic.w	r2, r3, #2
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a2:	4949      	ldr	r1, [pc, #292]	; (80039c8 <HAL_RCC_OscConfig+0x74c>)
 80038a4:	4313      	orrs	r3, r2
 80038a6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80038a8:	4b47      	ldr	r3, [pc, #284]	; (80039c8 <HAL_RCC_OscConfig+0x74c>)
 80038aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ac:	4a46      	ldr	r2, [pc, #280]	; (80039c8 <HAL_RCC_OscConfig+0x74c>)
 80038ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038b4:	4b44      	ldr	r3, [pc, #272]	; (80039c8 <HAL_RCC_OscConfig+0x74c>)
 80038b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b8:	4a43      	ldr	r2, [pc, #268]	; (80039c8 <HAL_RCC_OscConfig+0x74c>)
 80038ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80038c0:	4b41      	ldr	r3, [pc, #260]	; (80039c8 <HAL_RCC_OscConfig+0x74c>)
 80038c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c4:	4a40      	ldr	r2, [pc, #256]	; (80039c8 <HAL_RCC_OscConfig+0x74c>)
 80038c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80038cc:	4b3e      	ldr	r3, [pc, #248]	; (80039c8 <HAL_RCC_OscConfig+0x74c>)
 80038ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d0:	4a3d      	ldr	r2, [pc, #244]	; (80039c8 <HAL_RCC_OscConfig+0x74c>)
 80038d2:	f043 0301 	orr.w	r3, r3, #1
 80038d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038d8:	4b3b      	ldr	r3, [pc, #236]	; (80039c8 <HAL_RCC_OscConfig+0x74c>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a3a      	ldr	r2, [pc, #232]	; (80039c8 <HAL_RCC_OscConfig+0x74c>)
 80038de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e4:	f7fc fec8 	bl	8000678 <HAL_GetTick>
 80038e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80038ea:	e008      	b.n	80038fe <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038ec:	f7fc fec4 	bl	8000678 <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e05f      	b.n	80039be <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80038fe:	4b32      	ldr	r3, [pc, #200]	; (80039c8 <HAL_RCC_OscConfig+0x74c>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d0f0      	beq.n	80038ec <HAL_RCC_OscConfig+0x670>
 800390a:	e057      	b.n	80039bc <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800390c:	4b2e      	ldr	r3, [pc, #184]	; (80039c8 <HAL_RCC_OscConfig+0x74c>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a2d      	ldr	r2, [pc, #180]	; (80039c8 <HAL_RCC_OscConfig+0x74c>)
 8003912:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003916:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003918:	f7fc feae 	bl	8000678 <HAL_GetTick>
 800391c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800391e:	e008      	b.n	8003932 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003920:	f7fc feaa 	bl	8000678 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	2b02      	cmp	r3, #2
 800392c:	d901      	bls.n	8003932 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e045      	b.n	80039be <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003932:	4b25      	ldr	r3, [pc, #148]	; (80039c8 <HAL_RCC_OscConfig+0x74c>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d1f0      	bne.n	8003920 <HAL_RCC_OscConfig+0x6a4>
 800393e:	e03d      	b.n	80039bc <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003940:	4b21      	ldr	r3, [pc, #132]	; (80039c8 <HAL_RCC_OscConfig+0x74c>)
 8003942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003944:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003946:	4b20      	ldr	r3, [pc, #128]	; (80039c8 <HAL_RCC_OscConfig+0x74c>)
 8003948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003950:	2b01      	cmp	r3, #1
 8003952:	d031      	beq.n	80039b8 <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	f003 0203 	and.w	r2, r3, #3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800395e:	429a      	cmp	r2, r3
 8003960:	d12a      	bne.n	80039b8 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	091b      	lsrs	r3, r3, #4
 8003966:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800396e:	429a      	cmp	r2, r3
 8003970:	d122      	bne.n	80039b8 <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800397e:	429a      	cmp	r2, r3
 8003980:	d11a      	bne.n	80039b8 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	0a5b      	lsrs	r3, r3, #9
 8003986:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800398e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003990:	429a      	cmp	r2, r3
 8003992:	d111      	bne.n	80039b8 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	0c1b      	lsrs	r3, r3, #16
 8003998:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d108      	bne.n	80039b8 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	0e1b      	lsrs	r3, r3, #24
 80039aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039b2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d001      	beq.n	80039bc <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e000      	b.n	80039be <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3730      	adds	r7, #48	; 0x30
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	58024400 	.word	0x58024400
 80039cc:	fffffc0c 	.word	0xfffffc0c
 80039d0:	ffff0007 	.word	0xffff0007

080039d4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b086      	sub	sp, #24
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d101      	bne.n	80039e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e19c      	b.n	8003d22 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039e8:	4b8a      	ldr	r3, [pc, #552]	; (8003c14 <HAL_RCC_ClockConfig+0x240>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 030f 	and.w	r3, r3, #15
 80039f0:	683a      	ldr	r2, [r7, #0]
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d910      	bls.n	8003a18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039f6:	4b87      	ldr	r3, [pc, #540]	; (8003c14 <HAL_RCC_ClockConfig+0x240>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f023 020f 	bic.w	r2, r3, #15
 80039fe:	4985      	ldr	r1, [pc, #532]	; (8003c14 <HAL_RCC_ClockConfig+0x240>)
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a06:	4b83      	ldr	r3, [pc, #524]	; (8003c14 <HAL_RCC_ClockConfig+0x240>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 030f 	and.w	r3, r3, #15
 8003a0e:	683a      	ldr	r2, [r7, #0]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d001      	beq.n	8003a18 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e184      	b.n	8003d22 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0304 	and.w	r3, r3, #4
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d010      	beq.n	8003a46 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	691a      	ldr	r2, [r3, #16]
 8003a28:	4b7b      	ldr	r3, [pc, #492]	; (8003c18 <HAL_RCC_ClockConfig+0x244>)
 8003a2a:	699b      	ldr	r3, [r3, #24]
 8003a2c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d908      	bls.n	8003a46 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003a34:	4b78      	ldr	r3, [pc, #480]	; (8003c18 <HAL_RCC_ClockConfig+0x244>)
 8003a36:	699b      	ldr	r3, [r3, #24]
 8003a38:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	691b      	ldr	r3, [r3, #16]
 8003a40:	4975      	ldr	r1, [pc, #468]	; (8003c18 <HAL_RCC_ClockConfig+0x244>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0308 	and.w	r3, r3, #8
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d010      	beq.n	8003a74 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	695a      	ldr	r2, [r3, #20]
 8003a56:	4b70      	ldr	r3, [pc, #448]	; (8003c18 <HAL_RCC_ClockConfig+0x244>)
 8003a58:	69db      	ldr	r3, [r3, #28]
 8003a5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d908      	bls.n	8003a74 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003a62:	4b6d      	ldr	r3, [pc, #436]	; (8003c18 <HAL_RCC_ClockConfig+0x244>)
 8003a64:	69db      	ldr	r3, [r3, #28]
 8003a66:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	695b      	ldr	r3, [r3, #20]
 8003a6e:	496a      	ldr	r1, [pc, #424]	; (8003c18 <HAL_RCC_ClockConfig+0x244>)
 8003a70:	4313      	orrs	r3, r2
 8003a72:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0310 	and.w	r3, r3, #16
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d010      	beq.n	8003aa2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	699a      	ldr	r2, [r3, #24]
 8003a84:	4b64      	ldr	r3, [pc, #400]	; (8003c18 <HAL_RCC_ClockConfig+0x244>)
 8003a86:	69db      	ldr	r3, [r3, #28]
 8003a88:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d908      	bls.n	8003aa2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003a90:	4b61      	ldr	r3, [pc, #388]	; (8003c18 <HAL_RCC_ClockConfig+0x244>)
 8003a92:	69db      	ldr	r3, [r3, #28]
 8003a94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	699b      	ldr	r3, [r3, #24]
 8003a9c:	495e      	ldr	r1, [pc, #376]	; (8003c18 <HAL_RCC_ClockConfig+0x244>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0320 	and.w	r3, r3, #32
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d010      	beq.n	8003ad0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	69da      	ldr	r2, [r3, #28]
 8003ab2:	4b59      	ldr	r3, [pc, #356]	; (8003c18 <HAL_RCC_ClockConfig+0x244>)
 8003ab4:	6a1b      	ldr	r3, [r3, #32]
 8003ab6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d908      	bls.n	8003ad0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003abe:	4b56      	ldr	r3, [pc, #344]	; (8003c18 <HAL_RCC_ClockConfig+0x244>)
 8003ac0:	6a1b      	ldr	r3, [r3, #32]
 8003ac2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	69db      	ldr	r3, [r3, #28]
 8003aca:	4953      	ldr	r1, [pc, #332]	; (8003c18 <HAL_RCC_ClockConfig+0x244>)
 8003acc:	4313      	orrs	r3, r2
 8003ace:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0302 	and.w	r3, r3, #2
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d010      	beq.n	8003afe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	68da      	ldr	r2, [r3, #12]
 8003ae0:	4b4d      	ldr	r3, [pc, #308]	; (8003c18 <HAL_RCC_ClockConfig+0x244>)
 8003ae2:	699b      	ldr	r3, [r3, #24]
 8003ae4:	f003 030f 	and.w	r3, r3, #15
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d908      	bls.n	8003afe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003aec:	4b4a      	ldr	r3, [pc, #296]	; (8003c18 <HAL_RCC_ClockConfig+0x244>)
 8003aee:	699b      	ldr	r3, [r3, #24]
 8003af0:	f023 020f 	bic.w	r2, r3, #15
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	4947      	ldr	r1, [pc, #284]	; (8003c18 <HAL_RCC_ClockConfig+0x244>)
 8003afa:	4313      	orrs	r3, r2
 8003afc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0301 	and.w	r3, r3, #1
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d055      	beq.n	8003bb6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003b0a:	4b43      	ldr	r3, [pc, #268]	; (8003c18 <HAL_RCC_ClockConfig+0x244>)
 8003b0c:	699b      	ldr	r3, [r3, #24]
 8003b0e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	4940      	ldr	r1, [pc, #256]	; (8003c18 <HAL_RCC_ClockConfig+0x244>)
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d107      	bne.n	8003b34 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b24:	4b3c      	ldr	r3, [pc, #240]	; (8003c18 <HAL_RCC_ClockConfig+0x244>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d121      	bne.n	8003b74 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e0f6      	b.n	8003d22 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	2b03      	cmp	r3, #3
 8003b3a:	d107      	bne.n	8003b4c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003b3c:	4b36      	ldr	r3, [pc, #216]	; (8003c18 <HAL_RCC_ClockConfig+0x244>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d115      	bne.n	8003b74 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e0ea      	b.n	8003d22 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d107      	bne.n	8003b64 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003b54:	4b30      	ldr	r3, [pc, #192]	; (8003c18 <HAL_RCC_ClockConfig+0x244>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d109      	bne.n	8003b74 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e0de      	b.n	8003d22 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b64:	4b2c      	ldr	r3, [pc, #176]	; (8003c18 <HAL_RCC_ClockConfig+0x244>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0304 	and.w	r3, r3, #4
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d101      	bne.n	8003b74 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e0d6      	b.n	8003d22 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b74:	4b28      	ldr	r3, [pc, #160]	; (8003c18 <HAL_RCC_ClockConfig+0x244>)
 8003b76:	691b      	ldr	r3, [r3, #16]
 8003b78:	f023 0207 	bic.w	r2, r3, #7
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	4925      	ldr	r1, [pc, #148]	; (8003c18 <HAL_RCC_ClockConfig+0x244>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b86:	f7fc fd77 	bl	8000678 <HAL_GetTick>
 8003b8a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b8c:	e00a      	b.n	8003ba4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b8e:	f7fc fd73 	bl	8000678 <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d901      	bls.n	8003ba4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e0be      	b.n	8003d22 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ba4:	4b1c      	ldr	r3, [pc, #112]	; (8003c18 <HAL_RCC_ClockConfig+0x244>)
 8003ba6:	691b      	ldr	r3, [r3, #16]
 8003ba8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	00db      	lsls	r3, r3, #3
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d1eb      	bne.n	8003b8e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0302 	and.w	r3, r3, #2
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d010      	beq.n	8003be4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	68da      	ldr	r2, [r3, #12]
 8003bc6:	4b14      	ldr	r3, [pc, #80]	; (8003c18 <HAL_RCC_ClockConfig+0x244>)
 8003bc8:	699b      	ldr	r3, [r3, #24]
 8003bca:	f003 030f 	and.w	r3, r3, #15
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d208      	bcs.n	8003be4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bd2:	4b11      	ldr	r3, [pc, #68]	; (8003c18 <HAL_RCC_ClockConfig+0x244>)
 8003bd4:	699b      	ldr	r3, [r3, #24]
 8003bd6:	f023 020f 	bic.w	r2, r3, #15
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	490e      	ldr	r1, [pc, #56]	; (8003c18 <HAL_RCC_ClockConfig+0x244>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003be4:	4b0b      	ldr	r3, [pc, #44]	; (8003c14 <HAL_RCC_ClockConfig+0x240>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 030f 	and.w	r3, r3, #15
 8003bec:	683a      	ldr	r2, [r7, #0]
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d214      	bcs.n	8003c1c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bf2:	4b08      	ldr	r3, [pc, #32]	; (8003c14 <HAL_RCC_ClockConfig+0x240>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f023 020f 	bic.w	r2, r3, #15
 8003bfa:	4906      	ldr	r1, [pc, #24]	; (8003c14 <HAL_RCC_ClockConfig+0x240>)
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c02:	4b04      	ldr	r3, [pc, #16]	; (8003c14 <HAL_RCC_ClockConfig+0x240>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 030f 	and.w	r3, r3, #15
 8003c0a:	683a      	ldr	r2, [r7, #0]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d005      	beq.n	8003c1c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	e086      	b.n	8003d22 <HAL_RCC_ClockConfig+0x34e>
 8003c14:	52002000 	.word	0x52002000
 8003c18:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0304 	and.w	r3, r3, #4
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d010      	beq.n	8003c4a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	691a      	ldr	r2, [r3, #16]
 8003c2c:	4b3f      	ldr	r3, [pc, #252]	; (8003d2c <HAL_RCC_ClockConfig+0x358>)
 8003c2e:	699b      	ldr	r3, [r3, #24]
 8003c30:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d208      	bcs.n	8003c4a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003c38:	4b3c      	ldr	r3, [pc, #240]	; (8003d2c <HAL_RCC_ClockConfig+0x358>)
 8003c3a:	699b      	ldr	r3, [r3, #24]
 8003c3c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	691b      	ldr	r3, [r3, #16]
 8003c44:	4939      	ldr	r1, [pc, #228]	; (8003d2c <HAL_RCC_ClockConfig+0x358>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0308 	and.w	r3, r3, #8
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d010      	beq.n	8003c78 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	695a      	ldr	r2, [r3, #20]
 8003c5a:	4b34      	ldr	r3, [pc, #208]	; (8003d2c <HAL_RCC_ClockConfig+0x358>)
 8003c5c:	69db      	ldr	r3, [r3, #28]
 8003c5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d208      	bcs.n	8003c78 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003c66:	4b31      	ldr	r3, [pc, #196]	; (8003d2c <HAL_RCC_ClockConfig+0x358>)
 8003c68:	69db      	ldr	r3, [r3, #28]
 8003c6a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	695b      	ldr	r3, [r3, #20]
 8003c72:	492e      	ldr	r1, [pc, #184]	; (8003d2c <HAL_RCC_ClockConfig+0x358>)
 8003c74:	4313      	orrs	r3, r2
 8003c76:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0310 	and.w	r3, r3, #16
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d010      	beq.n	8003ca6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	699a      	ldr	r2, [r3, #24]
 8003c88:	4b28      	ldr	r3, [pc, #160]	; (8003d2c <HAL_RCC_ClockConfig+0x358>)
 8003c8a:	69db      	ldr	r3, [r3, #28]
 8003c8c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d208      	bcs.n	8003ca6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003c94:	4b25      	ldr	r3, [pc, #148]	; (8003d2c <HAL_RCC_ClockConfig+0x358>)
 8003c96:	69db      	ldr	r3, [r3, #28]
 8003c98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	699b      	ldr	r3, [r3, #24]
 8003ca0:	4922      	ldr	r1, [pc, #136]	; (8003d2c <HAL_RCC_ClockConfig+0x358>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0320 	and.w	r3, r3, #32
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d010      	beq.n	8003cd4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	69da      	ldr	r2, [r3, #28]
 8003cb6:	4b1d      	ldr	r3, [pc, #116]	; (8003d2c <HAL_RCC_ClockConfig+0x358>)
 8003cb8:	6a1b      	ldr	r3, [r3, #32]
 8003cba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d208      	bcs.n	8003cd4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003cc2:	4b1a      	ldr	r3, [pc, #104]	; (8003d2c <HAL_RCC_ClockConfig+0x358>)
 8003cc4:	6a1b      	ldr	r3, [r3, #32]
 8003cc6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	69db      	ldr	r3, [r3, #28]
 8003cce:	4917      	ldr	r1, [pc, #92]	; (8003d2c <HAL_RCC_ClockConfig+0x358>)
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003cd4:	f000 f834 	bl	8003d40 <HAL_RCC_GetSysClockFreq>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	4b14      	ldr	r3, [pc, #80]	; (8003d2c <HAL_RCC_ClockConfig+0x358>)
 8003cdc:	699b      	ldr	r3, [r3, #24]
 8003cde:	0a1b      	lsrs	r3, r3, #8
 8003ce0:	f003 030f 	and.w	r3, r3, #15
 8003ce4:	4912      	ldr	r1, [pc, #72]	; (8003d30 <HAL_RCC_ClockConfig+0x35c>)
 8003ce6:	5ccb      	ldrb	r3, [r1, r3]
 8003ce8:	f003 031f 	and.w	r3, r3, #31
 8003cec:	fa22 f303 	lsr.w	r3, r2, r3
 8003cf0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003cf2:	4b0e      	ldr	r3, [pc, #56]	; (8003d2c <HAL_RCC_ClockConfig+0x358>)
 8003cf4:	699b      	ldr	r3, [r3, #24]
 8003cf6:	f003 030f 	and.w	r3, r3, #15
 8003cfa:	4a0d      	ldr	r2, [pc, #52]	; (8003d30 <HAL_RCC_ClockConfig+0x35c>)
 8003cfc:	5cd3      	ldrb	r3, [r2, r3]
 8003cfe:	f003 031f 	and.w	r3, r3, #31
 8003d02:	693a      	ldr	r2, [r7, #16]
 8003d04:	fa22 f303 	lsr.w	r3, r2, r3
 8003d08:	4a0a      	ldr	r2, [pc, #40]	; (8003d34 <HAL_RCC_ClockConfig+0x360>)
 8003d0a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003d0c:	4a0a      	ldr	r2, [pc, #40]	; (8003d38 <HAL_RCC_ClockConfig+0x364>)
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003d12:	4b0a      	ldr	r3, [pc, #40]	; (8003d3c <HAL_RCC_ClockConfig+0x368>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4618      	mov	r0, r3
 8003d18:	f7fc fc64 	bl	80005e4 <HAL_InitTick>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3718      	adds	r7, #24
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	58024400 	.word	0x58024400
 8003d30:	08009710 	.word	0x08009710
 8003d34:	2400040c 	.word	0x2400040c
 8003d38:	24000408 	.word	0x24000408
 8003d3c:	24000400 	.word	0x24000400

08003d40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b089      	sub	sp, #36	; 0x24
 8003d44:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d46:	4bb3      	ldr	r3, [pc, #716]	; (8004014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d4e:	2b18      	cmp	r3, #24
 8003d50:	f200 8155 	bhi.w	8003ffe <HAL_RCC_GetSysClockFreq+0x2be>
 8003d54:	a201      	add	r2, pc, #4	; (adr r2, 8003d5c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d5a:	bf00      	nop
 8003d5c:	08003dc1 	.word	0x08003dc1
 8003d60:	08003fff 	.word	0x08003fff
 8003d64:	08003fff 	.word	0x08003fff
 8003d68:	08003fff 	.word	0x08003fff
 8003d6c:	08003fff 	.word	0x08003fff
 8003d70:	08003fff 	.word	0x08003fff
 8003d74:	08003fff 	.word	0x08003fff
 8003d78:	08003fff 	.word	0x08003fff
 8003d7c:	08003de7 	.word	0x08003de7
 8003d80:	08003fff 	.word	0x08003fff
 8003d84:	08003fff 	.word	0x08003fff
 8003d88:	08003fff 	.word	0x08003fff
 8003d8c:	08003fff 	.word	0x08003fff
 8003d90:	08003fff 	.word	0x08003fff
 8003d94:	08003fff 	.word	0x08003fff
 8003d98:	08003fff 	.word	0x08003fff
 8003d9c:	08003ded 	.word	0x08003ded
 8003da0:	08003fff 	.word	0x08003fff
 8003da4:	08003fff 	.word	0x08003fff
 8003da8:	08003fff 	.word	0x08003fff
 8003dac:	08003fff 	.word	0x08003fff
 8003db0:	08003fff 	.word	0x08003fff
 8003db4:	08003fff 	.word	0x08003fff
 8003db8:	08003fff 	.word	0x08003fff
 8003dbc:	08003df3 	.word	0x08003df3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003dc0:	4b94      	ldr	r3, [pc, #592]	; (8004014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0320 	and.w	r3, r3, #32
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d009      	beq.n	8003de0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003dcc:	4b91      	ldr	r3, [pc, #580]	; (8004014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	08db      	lsrs	r3, r3, #3
 8003dd2:	f003 0303 	and.w	r3, r3, #3
 8003dd6:	4a90      	ldr	r2, [pc, #576]	; (8004018 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003dd8:	fa22 f303 	lsr.w	r3, r2, r3
 8003ddc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003dde:	e111      	b.n	8004004 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003de0:	4b8d      	ldr	r3, [pc, #564]	; (8004018 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003de2:	61bb      	str	r3, [r7, #24]
    break;
 8003de4:	e10e      	b.n	8004004 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003de6:	4b8d      	ldr	r3, [pc, #564]	; (800401c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003de8:	61bb      	str	r3, [r7, #24]
    break;
 8003dea:	e10b      	b.n	8004004 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003dec:	4b8c      	ldr	r3, [pc, #560]	; (8004020 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003dee:	61bb      	str	r3, [r7, #24]
    break;
 8003df0:	e108      	b.n	8004004 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003df2:	4b88      	ldr	r3, [pc, #544]	; (8004014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df6:	f003 0303 	and.w	r3, r3, #3
 8003dfa:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003dfc:	4b85      	ldr	r3, [pc, #532]	; (8004014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e00:	091b      	lsrs	r3, r3, #4
 8003e02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e06:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003e08:	4b82      	ldr	r3, [pc, #520]	; (8004014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e0c:	f003 0301 	and.w	r3, r3, #1
 8003e10:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003e12:	4b80      	ldr	r3, [pc, #512]	; (8004014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e16:	08db      	lsrs	r3, r3, #3
 8003e18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003e1c:	68fa      	ldr	r2, [r7, #12]
 8003e1e:	fb02 f303 	mul.w	r3, r2, r3
 8003e22:	ee07 3a90 	vmov	s15, r3
 8003e26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e2a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	f000 80e1 	beq.w	8003ff8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	f000 8083 	beq.w	8003f44 <HAL_RCC_GetSysClockFreq+0x204>
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	f200 80a1 	bhi.w	8003f88 <HAL_RCC_GetSysClockFreq+0x248>
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d003      	beq.n	8003e54 <HAL_RCC_GetSysClockFreq+0x114>
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d056      	beq.n	8003f00 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003e52:	e099      	b.n	8003f88 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003e54:	4b6f      	ldr	r3, [pc, #444]	; (8004014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0320 	and.w	r3, r3, #32
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d02d      	beq.n	8003ebc <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003e60:	4b6c      	ldr	r3, [pc, #432]	; (8004014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	08db      	lsrs	r3, r3, #3
 8003e66:	f003 0303 	and.w	r3, r3, #3
 8003e6a:	4a6b      	ldr	r2, [pc, #428]	; (8004018 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003e6c:	fa22 f303 	lsr.w	r3, r2, r3
 8003e70:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	ee07 3a90 	vmov	s15, r3
 8003e78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	ee07 3a90 	vmov	s15, r3
 8003e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e8a:	4b62      	ldr	r3, [pc, #392]	; (8004014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e92:	ee07 3a90 	vmov	s15, r3
 8003e96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e9e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004024 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003ea2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ea6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003eaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003eae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003eb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003eb6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003eba:	e087      	b.n	8003fcc <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	ee07 3a90 	vmov	s15, r3
 8003ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ec6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004028 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003eca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ece:	4b51      	ldr	r3, [pc, #324]	; (8004014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ed6:	ee07 3a90 	vmov	s15, r3
 8003eda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ede:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ee2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004024 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003ee6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003eea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003eee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ef2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003efa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003efe:	e065      	b.n	8003fcc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	ee07 3a90 	vmov	s15, r3
 8003f06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f0a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800402c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003f0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f12:	4b40      	ldr	r3, [pc, #256]	; (8004014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f1a:	ee07 3a90 	vmov	s15, r3
 8003f1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f22:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f26:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004024 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f42:	e043      	b.n	8003fcc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	ee07 3a90 	vmov	s15, r3
 8003f4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f4e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004030 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003f52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f56:	4b2f      	ldr	r3, [pc, #188]	; (8004014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f5e:	ee07 3a90 	vmov	s15, r3
 8003f62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f66:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f6a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004024 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f86:	e021      	b.n	8003fcc <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	ee07 3a90 	vmov	s15, r3
 8003f8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f92:	eddf 6a26 	vldr	s13, [pc, #152]	; 800402c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003f96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f9a:	4b1e      	ldr	r3, [pc, #120]	; (8004014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fa2:	ee07 3a90 	vmov	s15, r3
 8003fa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003faa:	ed97 6a02 	vldr	s12, [r7, #8]
 8003fae:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004024 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003fb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003fbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003fca:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003fcc:	4b11      	ldr	r3, [pc, #68]	; (8004014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd0:	0a5b      	lsrs	r3, r3, #9
 8003fd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	ee07 3a90 	vmov	s15, r3
 8003fe0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003fe4:	edd7 6a07 	vldr	s13, [r7, #28]
 8003fe8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ff0:	ee17 3a90 	vmov	r3, s15
 8003ff4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003ff6:	e005      	b.n	8004004 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	61bb      	str	r3, [r7, #24]
    break;
 8003ffc:	e002      	b.n	8004004 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003ffe:	4b07      	ldr	r3, [pc, #28]	; (800401c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004000:	61bb      	str	r3, [r7, #24]
    break;
 8004002:	bf00      	nop
  }

  return sysclockfreq;
 8004004:	69bb      	ldr	r3, [r7, #24]
}
 8004006:	4618      	mov	r0, r3
 8004008:	3724      	adds	r7, #36	; 0x24
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop
 8004014:	58024400 	.word	0x58024400
 8004018:	03d09000 	.word	0x03d09000
 800401c:	003d0900 	.word	0x003d0900
 8004020:	017d7840 	.word	0x017d7840
 8004024:	46000000 	.word	0x46000000
 8004028:	4c742400 	.word	0x4c742400
 800402c:	4a742400 	.word	0x4a742400
 8004030:	4bbebc20 	.word	0x4bbebc20

08004034 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b082      	sub	sp, #8
 8004038:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800403a:	f7ff fe81 	bl	8003d40 <HAL_RCC_GetSysClockFreq>
 800403e:	4602      	mov	r2, r0
 8004040:	4b10      	ldr	r3, [pc, #64]	; (8004084 <HAL_RCC_GetHCLKFreq+0x50>)
 8004042:	699b      	ldr	r3, [r3, #24]
 8004044:	0a1b      	lsrs	r3, r3, #8
 8004046:	f003 030f 	and.w	r3, r3, #15
 800404a:	490f      	ldr	r1, [pc, #60]	; (8004088 <HAL_RCC_GetHCLKFreq+0x54>)
 800404c:	5ccb      	ldrb	r3, [r1, r3]
 800404e:	f003 031f 	and.w	r3, r3, #31
 8004052:	fa22 f303 	lsr.w	r3, r2, r3
 8004056:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004058:	4b0a      	ldr	r3, [pc, #40]	; (8004084 <HAL_RCC_GetHCLKFreq+0x50>)
 800405a:	699b      	ldr	r3, [r3, #24]
 800405c:	f003 030f 	and.w	r3, r3, #15
 8004060:	4a09      	ldr	r2, [pc, #36]	; (8004088 <HAL_RCC_GetHCLKFreq+0x54>)
 8004062:	5cd3      	ldrb	r3, [r2, r3]
 8004064:	f003 031f 	and.w	r3, r3, #31
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	fa22 f303 	lsr.w	r3, r2, r3
 800406e:	4a07      	ldr	r2, [pc, #28]	; (800408c <HAL_RCC_GetHCLKFreq+0x58>)
 8004070:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004072:	4a07      	ldr	r2, [pc, #28]	; (8004090 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004078:	4b04      	ldr	r3, [pc, #16]	; (800408c <HAL_RCC_GetHCLKFreq+0x58>)
 800407a:	681b      	ldr	r3, [r3, #0]
}
 800407c:	4618      	mov	r0, r3
 800407e:	3708      	adds	r7, #8
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}
 8004084:	58024400 	.word	0x58024400
 8004088:	08009710 	.word	0x08009710
 800408c:	2400040c 	.word	0x2400040c
 8004090:	24000408 	.word	0x24000408

08004094 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b086      	sub	sp, #24
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800409c:	2300      	movs	r3, #0
 800409e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80040a0:	2300      	movs	r3, #0
 80040a2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d03f      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040b4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80040b8:	d02a      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80040ba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80040be:	d824      	bhi.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80040c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040c4:	d018      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80040c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040ca:	d81e      	bhi.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d003      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80040d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040d4:	d007      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80040d6:	e018      	b.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040d8:	4bab      	ldr	r3, [pc, #684]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80040da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040dc:	4aaa      	ldr	r2, [pc, #680]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80040de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80040e4:	e015      	b.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	3304      	adds	r3, #4
 80040ea:	2102      	movs	r1, #2
 80040ec:	4618      	mov	r0, r3
 80040ee:	f001 feff 	bl	8005ef0 <RCCEx_PLL2_Config>
 80040f2:	4603      	mov	r3, r0
 80040f4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80040f6:	e00c      	b.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	3324      	adds	r3, #36	; 0x24
 80040fc:	2102      	movs	r1, #2
 80040fe:	4618      	mov	r0, r3
 8004100:	f001 ffa8 	bl	8006054 <RCCEx_PLL3_Config>
 8004104:	4603      	mov	r3, r0
 8004106:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004108:	e003      	b.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	75fb      	strb	r3, [r7, #23]
      break;
 800410e:	e000      	b.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004110:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004112:	7dfb      	ldrb	r3, [r7, #23]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d109      	bne.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004118:	4b9b      	ldr	r3, [pc, #620]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800411a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800411c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004124:	4998      	ldr	r1, [pc, #608]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004126:	4313      	orrs	r3, r2
 8004128:	650b      	str	r3, [r1, #80]	; 0x50
 800412a:	e001      	b.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800412c:	7dfb      	ldrb	r3, [r7, #23]
 800412e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004138:	2b00      	cmp	r3, #0
 800413a:	d03d      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004140:	2b04      	cmp	r3, #4
 8004142:	d826      	bhi.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004144:	a201      	add	r2, pc, #4	; (adr r2, 800414c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8004146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800414a:	bf00      	nop
 800414c:	08004161 	.word	0x08004161
 8004150:	0800416f 	.word	0x0800416f
 8004154:	08004181 	.word	0x08004181
 8004158:	08004199 	.word	0x08004199
 800415c:	08004199 	.word	0x08004199
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004160:	4b89      	ldr	r3, [pc, #548]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004164:	4a88      	ldr	r2, [pc, #544]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004166:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800416a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800416c:	e015      	b.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	3304      	adds	r3, #4
 8004172:	2100      	movs	r1, #0
 8004174:	4618      	mov	r0, r3
 8004176:	f001 febb 	bl	8005ef0 <RCCEx_PLL2_Config>
 800417a:	4603      	mov	r3, r0
 800417c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800417e:	e00c      	b.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	3324      	adds	r3, #36	; 0x24
 8004184:	2100      	movs	r1, #0
 8004186:	4618      	mov	r0, r3
 8004188:	f001 ff64 	bl	8006054 <RCCEx_PLL3_Config>
 800418c:	4603      	mov	r3, r0
 800418e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004190:	e003      	b.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	75fb      	strb	r3, [r7, #23]
      break;
 8004196:	e000      	b.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004198:	bf00      	nop
    }

    if(ret == HAL_OK)
 800419a:	7dfb      	ldrb	r3, [r7, #23]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d109      	bne.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80041a0:	4b79      	ldr	r3, [pc, #484]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80041a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041a4:	f023 0207 	bic.w	r2, r3, #7
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ac:	4976      	ldr	r1, [pc, #472]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	650b      	str	r3, [r1, #80]	; 0x50
 80041b2:	e001      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041b4:	7dfb      	ldrb	r3, [r7, #23]
 80041b6:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d051      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80041ca:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80041ce:	d036      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80041d0:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80041d4:	d830      	bhi.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80041d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80041da:	d032      	beq.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 80041dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80041e0:	d82a      	bhi.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80041e2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80041e6:	d02e      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80041e8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80041ec:	d824      	bhi.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80041ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041f2:	d018      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80041f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041f8:	d81e      	bhi.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d003      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x172>
 80041fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004202:	d007      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8004204:	e018      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004206:	4b60      	ldr	r3, [pc, #384]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800420a:	4a5f      	ldr	r2, [pc, #380]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800420c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004210:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004212:	e019      	b.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	3304      	adds	r3, #4
 8004218:	2100      	movs	r1, #0
 800421a:	4618      	mov	r0, r3
 800421c:	f001 fe68 	bl	8005ef0 <RCCEx_PLL2_Config>
 8004220:	4603      	mov	r3, r0
 8004222:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004224:	e010      	b.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	3324      	adds	r3, #36	; 0x24
 800422a:	2100      	movs	r1, #0
 800422c:	4618      	mov	r0, r3
 800422e:	f001 ff11 	bl	8006054 <RCCEx_PLL3_Config>
 8004232:	4603      	mov	r3, r0
 8004234:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004236:	e007      	b.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	75fb      	strb	r3, [r7, #23]
      break;
 800423c:	e004      	b.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800423e:	bf00      	nop
 8004240:	e002      	b.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8004242:	bf00      	nop
 8004244:	e000      	b.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8004246:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004248:	7dfb      	ldrb	r3, [r7, #23]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d10a      	bne.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800424e:	4b4e      	ldr	r3, [pc, #312]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004252:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800425c:	494a      	ldr	r1, [pc, #296]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800425e:	4313      	orrs	r3, r2
 8004260:	658b      	str	r3, [r1, #88]	; 0x58
 8004262:	e001      	b.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004264:	7dfb      	ldrb	r3, [r7, #23]
 8004266:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004270:	2b00      	cmp	r3, #0
 8004272:	d051      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800427a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800427e:	d036      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8004280:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004284:	d830      	bhi.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8004286:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800428a:	d032      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 800428c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004290:	d82a      	bhi.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8004292:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004296:	d02e      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8004298:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800429c:	d824      	bhi.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800429e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80042a2:	d018      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x242>
 80042a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80042a8:	d81e      	bhi.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d003      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x222>
 80042ae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042b2:	d007      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80042b4:	e018      	b.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042b6:	4b34      	ldr	r3, [pc, #208]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80042b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ba:	4a33      	ldr	r2, [pc, #204]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80042bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042c0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80042c2:	e019      	b.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	3304      	adds	r3, #4
 80042c8:	2100      	movs	r1, #0
 80042ca:	4618      	mov	r0, r3
 80042cc:	f001 fe10 	bl	8005ef0 <RCCEx_PLL2_Config>
 80042d0:	4603      	mov	r3, r0
 80042d2:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80042d4:	e010      	b.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	3324      	adds	r3, #36	; 0x24
 80042da:	2100      	movs	r1, #0
 80042dc:	4618      	mov	r0, r3
 80042de:	f001 feb9 	bl	8006054 <RCCEx_PLL3_Config>
 80042e2:	4603      	mov	r3, r0
 80042e4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80042e6:	e007      	b.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	75fb      	strb	r3, [r7, #23]
      break;
 80042ec:	e004      	b.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80042ee:	bf00      	nop
 80042f0:	e002      	b.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80042f2:	bf00      	nop
 80042f4:	e000      	b.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80042f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042f8:	7dfb      	ldrb	r3, [r7, #23]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d10a      	bne.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80042fe:	4b22      	ldr	r3, [pc, #136]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004302:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800430c:	491e      	ldr	r1, [pc, #120]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800430e:	4313      	orrs	r3, r2
 8004310:	658b      	str	r3, [r1, #88]	; 0x58
 8004312:	e001      	b.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004314:	7dfb      	ldrb	r3, [r7, #23]
 8004316:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004320:	2b00      	cmp	r3, #0
 8004322:	d035      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004328:	2b30      	cmp	r3, #48	; 0x30
 800432a:	d01c      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800432c:	2b30      	cmp	r3, #48	; 0x30
 800432e:	d817      	bhi.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8004330:	2b20      	cmp	r3, #32
 8004332:	d00c      	beq.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8004334:	2b20      	cmp	r3, #32
 8004336:	d813      	bhi.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8004338:	2b00      	cmp	r3, #0
 800433a:	d016      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 800433c:	2b10      	cmp	r3, #16
 800433e:	d10f      	bne.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004340:	4b11      	ldr	r3, [pc, #68]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004344:	4a10      	ldr	r2, [pc, #64]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004346:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800434a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800434c:	e00e      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	3304      	adds	r3, #4
 8004352:	2102      	movs	r1, #2
 8004354:	4618      	mov	r0, r3
 8004356:	f001 fdcb 	bl	8005ef0 <RCCEx_PLL2_Config>
 800435a:	4603      	mov	r3, r0
 800435c:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800435e:	e005      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	75fb      	strb	r3, [r7, #23]
      break;
 8004364:	e002      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8004366:	bf00      	nop
 8004368:	e000      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 800436a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800436c:	7dfb      	ldrb	r3, [r7, #23]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d10c      	bne.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004372:	4b05      	ldr	r3, [pc, #20]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004376:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800437e:	4902      	ldr	r1, [pc, #8]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004380:	4313      	orrs	r3, r2
 8004382:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004384:	e004      	b.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8004386:	bf00      	nop
 8004388:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800438c:	7dfb      	ldrb	r3, [r7, #23]
 800438e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d047      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043a4:	d030      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x374>
 80043a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043aa:	d82a      	bhi.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80043ac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80043b0:	d02c      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x378>
 80043b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80043b6:	d824      	bhi.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80043b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043bc:	d018      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80043be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043c2:	d81e      	bhi.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d003      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80043c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043cc:	d007      	beq.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80043ce:	e018      	b.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043d0:	4bac      	ldr	r3, [pc, #688]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80043d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d4:	4aab      	ldr	r2, [pc, #684]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80043d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80043dc:	e017      	b.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	3304      	adds	r3, #4
 80043e2:	2100      	movs	r1, #0
 80043e4:	4618      	mov	r0, r3
 80043e6:	f001 fd83 	bl	8005ef0 <RCCEx_PLL2_Config>
 80043ea:	4603      	mov	r3, r0
 80043ec:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80043ee:	e00e      	b.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	3324      	adds	r3, #36	; 0x24
 80043f4:	2100      	movs	r1, #0
 80043f6:	4618      	mov	r0, r3
 80043f8:	f001 fe2c 	bl	8006054 <RCCEx_PLL3_Config>
 80043fc:	4603      	mov	r3, r0
 80043fe:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004400:	e005      	b.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	75fb      	strb	r3, [r7, #23]
      break;
 8004406:	e002      	b.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8004408:	bf00      	nop
 800440a:	e000      	b.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800440c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800440e:	7dfb      	ldrb	r3, [r7, #23]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d109      	bne.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004414:	4b9b      	ldr	r3, [pc, #620]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004416:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004418:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004420:	4998      	ldr	r1, [pc, #608]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004422:	4313      	orrs	r3, r2
 8004424:	650b      	str	r3, [r1, #80]	; 0x50
 8004426:	e001      	b.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004428:	7dfb      	ldrb	r3, [r7, #23]
 800442a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004434:	2b00      	cmp	r3, #0
 8004436:	d049      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800443c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004440:	d02e      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8004442:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004446:	d828      	bhi.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8004448:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800444c:	d02a      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800444e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004452:	d822      	bhi.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8004454:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004458:	d026      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800445a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800445e:	d81c      	bhi.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8004460:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004464:	d010      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8004466:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800446a:	d816      	bhi.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x406>
 800446c:	2b00      	cmp	r3, #0
 800446e:	d01d      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x418>
 8004470:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004474:	d111      	bne.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	3304      	adds	r3, #4
 800447a:	2101      	movs	r1, #1
 800447c:	4618      	mov	r0, r3
 800447e:	f001 fd37 	bl	8005ef0 <RCCEx_PLL2_Config>
 8004482:	4603      	mov	r3, r0
 8004484:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004486:	e012      	b.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	3324      	adds	r3, #36	; 0x24
 800448c:	2101      	movs	r1, #1
 800448e:	4618      	mov	r0, r3
 8004490:	f001 fde0 	bl	8006054 <RCCEx_PLL3_Config>
 8004494:	4603      	mov	r3, r0
 8004496:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004498:	e009      	b.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	75fb      	strb	r3, [r7, #23]
      break;
 800449e:	e006      	b.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80044a0:	bf00      	nop
 80044a2:	e004      	b.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80044a4:	bf00      	nop
 80044a6:	e002      	b.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80044a8:	bf00      	nop
 80044aa:	e000      	b.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80044ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044ae:	7dfb      	ldrb	r3, [r7, #23]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d109      	bne.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80044b4:	4b73      	ldr	r3, [pc, #460]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80044b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044b8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044c0:	4970      	ldr	r1, [pc, #448]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	650b      	str	r3, [r1, #80]	; 0x50
 80044c6:	e001      	b.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044c8:	7dfb      	ldrb	r3, [r7, #23]
 80044ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d04b      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80044de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044e2:	d02e      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80044e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044e8:	d828      	bhi.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80044ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044ee:	d02a      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80044f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044f4:	d822      	bhi.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80044f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80044fa:	d026      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 80044fc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004500:	d81c      	bhi.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004502:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004506:	d010      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x496>
 8004508:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800450c:	d816      	bhi.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800450e:	2b00      	cmp	r3, #0
 8004510:	d01d      	beq.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8004512:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004516:	d111      	bne.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	3304      	adds	r3, #4
 800451c:	2101      	movs	r1, #1
 800451e:	4618      	mov	r0, r3
 8004520:	f001 fce6 	bl	8005ef0 <RCCEx_PLL2_Config>
 8004524:	4603      	mov	r3, r0
 8004526:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004528:	e012      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	3324      	adds	r3, #36	; 0x24
 800452e:	2101      	movs	r1, #1
 8004530:	4618      	mov	r0, r3
 8004532:	f001 fd8f 	bl	8006054 <RCCEx_PLL3_Config>
 8004536:	4603      	mov	r3, r0
 8004538:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800453a:	e009      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	75fb      	strb	r3, [r7, #23]
      break;
 8004540:	e006      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8004542:	bf00      	nop
 8004544:	e004      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8004546:	bf00      	nop
 8004548:	e002      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800454a:	bf00      	nop
 800454c:	e000      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800454e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004550:	7dfb      	ldrb	r3, [r7, #23]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d10a      	bne.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004556:	4b4b      	ldr	r3, [pc, #300]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800455a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004564:	4947      	ldr	r1, [pc, #284]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004566:	4313      	orrs	r3, r2
 8004568:	658b      	str	r3, [r1, #88]	; 0x58
 800456a:	e001      	b.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800456c:	7dfb      	ldrb	r3, [r7, #23]
 800456e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004578:	2b00      	cmp	r3, #0
 800457a:	d02f      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004580:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004584:	d00e      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8004586:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800458a:	d814      	bhi.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800458c:	2b00      	cmp	r3, #0
 800458e:	d015      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x528>
 8004590:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004594:	d10f      	bne.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004596:	4b3b      	ldr	r3, [pc, #236]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800459a:	4a3a      	ldr	r2, [pc, #232]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800459c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80045a2:	e00c      	b.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	3304      	adds	r3, #4
 80045a8:	2101      	movs	r1, #1
 80045aa:	4618      	mov	r0, r3
 80045ac:	f001 fca0 	bl	8005ef0 <RCCEx_PLL2_Config>
 80045b0:	4603      	mov	r3, r0
 80045b2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80045b4:	e003      	b.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	75fb      	strb	r3, [r7, #23]
      break;
 80045ba:	e000      	b.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 80045bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045be:	7dfb      	ldrb	r3, [r7, #23]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d109      	bne.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80045c4:	4b2f      	ldr	r3, [pc, #188]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80045c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045c8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045d0:	492c      	ldr	r1, [pc, #176]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	650b      	str	r3, [r1, #80]	; 0x50
 80045d6:	e001      	b.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045d8:	7dfb      	ldrb	r3, [r7, #23]
 80045da:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d032      	beq.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ec:	2b03      	cmp	r3, #3
 80045ee:	d81b      	bhi.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80045f0:	a201      	add	r2, pc, #4	; (adr r2, 80045f8 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80045f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045f6:	bf00      	nop
 80045f8:	0800462f 	.word	0x0800462f
 80045fc:	08004609 	.word	0x08004609
 8004600:	08004617 	.word	0x08004617
 8004604:	0800462f 	.word	0x0800462f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004608:	4b1e      	ldr	r3, [pc, #120]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800460a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800460c:	4a1d      	ldr	r2, [pc, #116]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800460e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004612:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004614:	e00c      	b.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	3304      	adds	r3, #4
 800461a:	2102      	movs	r1, #2
 800461c:	4618      	mov	r0, r3
 800461e:	f001 fc67 	bl	8005ef0 <RCCEx_PLL2_Config>
 8004622:	4603      	mov	r3, r0
 8004624:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004626:	e003      	b.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	75fb      	strb	r3, [r7, #23]
      break;
 800462c:	e000      	b.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800462e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004630:	7dfb      	ldrb	r3, [r7, #23]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d109      	bne.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004636:	4b13      	ldr	r3, [pc, #76]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800463a:	f023 0203 	bic.w	r2, r3, #3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004642:	4910      	ldr	r1, [pc, #64]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004644:	4313      	orrs	r3, r2
 8004646:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004648:	e001      	b.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800464a:	7dfb      	ldrb	r3, [r7, #23]
 800464c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004656:	2b00      	cmp	r3, #0
 8004658:	f000 808a 	beq.w	8004770 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800465c:	4b0a      	ldr	r3, [pc, #40]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a09      	ldr	r2, [pc, #36]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004662:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004666:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004668:	f7fc f806 	bl	8000678 <HAL_GetTick>
 800466c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800466e:	e00d      	b.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004670:	f7fc f802 	bl	8000678 <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	2b64      	cmp	r3, #100	; 0x64
 800467c:	d906      	bls.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	75fb      	strb	r3, [r7, #23]
        break;
 8004682:	e009      	b.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8004684:	58024400 	.word	0x58024400
 8004688:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800468c:	4bb9      	ldr	r3, [pc, #740]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004694:	2b00      	cmp	r3, #0
 8004696:	d0eb      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8004698:	7dfb      	ldrb	r3, [r7, #23]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d166      	bne.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800469e:	4bb6      	ldr	r3, [pc, #728]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80046a0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80046a8:	4053      	eors	r3, r2
 80046aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d013      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046b2:	4bb1      	ldr	r3, [pc, #708]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80046b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046ba:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80046bc:	4bae      	ldr	r3, [pc, #696]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80046be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c0:	4aad      	ldr	r2, [pc, #692]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80046c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046c6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80046c8:	4bab      	ldr	r3, [pc, #684]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80046ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046cc:	4aaa      	ldr	r2, [pc, #680]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80046ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046d2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80046d4:	4aa8      	ldr	r2, [pc, #672]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80046e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046e4:	d115      	bne.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e6:	f7fb ffc7 	bl	8000678 <HAL_GetTick>
 80046ea:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80046ec:	e00b      	b.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046ee:	f7fb ffc3 	bl	8000678 <HAL_GetTick>
 80046f2:	4602      	mov	r2, r0
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	1ad3      	subs	r3, r2, r3
 80046f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d902      	bls.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	75fb      	strb	r3, [r7, #23]
            break;
 8004704:	e005      	b.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004706:	4b9c      	ldr	r3, [pc, #624]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800470a:	f003 0302 	and.w	r3, r3, #2
 800470e:	2b00      	cmp	r3, #0
 8004710:	d0ed      	beq.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 8004712:	7dfb      	ldrb	r3, [r7, #23]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d126      	bne.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800471e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004722:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004726:	d10d      	bne.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8004728:	4b93      	ldr	r3, [pc, #588]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800472a:	691b      	ldr	r3, [r3, #16]
 800472c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004736:	0919      	lsrs	r1, r3, #4
 8004738:	4b90      	ldr	r3, [pc, #576]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800473a:	400b      	ands	r3, r1
 800473c:	498e      	ldr	r1, [pc, #568]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800473e:	4313      	orrs	r3, r2
 8004740:	610b      	str	r3, [r1, #16]
 8004742:	e005      	b.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 8004744:	4b8c      	ldr	r3, [pc, #560]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004746:	691b      	ldr	r3, [r3, #16]
 8004748:	4a8b      	ldr	r2, [pc, #556]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800474a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800474e:	6113      	str	r3, [r2, #16]
 8004750:	4b89      	ldr	r3, [pc, #548]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004752:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800475a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800475e:	4986      	ldr	r1, [pc, #536]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004760:	4313      	orrs	r3, r2
 8004762:	670b      	str	r3, [r1, #112]	; 0x70
 8004764:	e004      	b.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004766:	7dfb      	ldrb	r3, [r7, #23]
 8004768:	75bb      	strb	r3, [r7, #22]
 800476a:	e001      	b.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800476c:	7dfb      	ldrb	r3, [r7, #23]
 800476e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0301 	and.w	r3, r3, #1
 8004778:	2b00      	cmp	r3, #0
 800477a:	d07e      	beq.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004780:	2b28      	cmp	r3, #40	; 0x28
 8004782:	d867      	bhi.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8004784:	a201      	add	r2, pc, #4	; (adr r2, 800478c <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 8004786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800478a:	bf00      	nop
 800478c:	0800485b 	.word	0x0800485b
 8004790:	08004855 	.word	0x08004855
 8004794:	08004855 	.word	0x08004855
 8004798:	08004855 	.word	0x08004855
 800479c:	08004855 	.word	0x08004855
 80047a0:	08004855 	.word	0x08004855
 80047a4:	08004855 	.word	0x08004855
 80047a8:	08004855 	.word	0x08004855
 80047ac:	08004831 	.word	0x08004831
 80047b0:	08004855 	.word	0x08004855
 80047b4:	08004855 	.word	0x08004855
 80047b8:	08004855 	.word	0x08004855
 80047bc:	08004855 	.word	0x08004855
 80047c0:	08004855 	.word	0x08004855
 80047c4:	08004855 	.word	0x08004855
 80047c8:	08004855 	.word	0x08004855
 80047cc:	08004843 	.word	0x08004843
 80047d0:	08004855 	.word	0x08004855
 80047d4:	08004855 	.word	0x08004855
 80047d8:	08004855 	.word	0x08004855
 80047dc:	08004855 	.word	0x08004855
 80047e0:	08004855 	.word	0x08004855
 80047e4:	08004855 	.word	0x08004855
 80047e8:	08004855 	.word	0x08004855
 80047ec:	0800485b 	.word	0x0800485b
 80047f0:	08004855 	.word	0x08004855
 80047f4:	08004855 	.word	0x08004855
 80047f8:	08004855 	.word	0x08004855
 80047fc:	08004855 	.word	0x08004855
 8004800:	08004855 	.word	0x08004855
 8004804:	08004855 	.word	0x08004855
 8004808:	08004855 	.word	0x08004855
 800480c:	0800485b 	.word	0x0800485b
 8004810:	08004855 	.word	0x08004855
 8004814:	08004855 	.word	0x08004855
 8004818:	08004855 	.word	0x08004855
 800481c:	08004855 	.word	0x08004855
 8004820:	08004855 	.word	0x08004855
 8004824:	08004855 	.word	0x08004855
 8004828:	08004855 	.word	0x08004855
 800482c:	0800485b 	.word	0x0800485b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	3304      	adds	r3, #4
 8004834:	2101      	movs	r1, #1
 8004836:	4618      	mov	r0, r3
 8004838:	f001 fb5a 	bl	8005ef0 <RCCEx_PLL2_Config>
 800483c:	4603      	mov	r3, r0
 800483e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004840:	e00c      	b.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	3324      	adds	r3, #36	; 0x24
 8004846:	2101      	movs	r1, #1
 8004848:	4618      	mov	r0, r3
 800484a:	f001 fc03 	bl	8006054 <RCCEx_PLL3_Config>
 800484e:	4603      	mov	r3, r0
 8004850:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004852:	e003      	b.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	75fb      	strb	r3, [r7, #23]
      break;
 8004858:	e000      	b.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 800485a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800485c:	7dfb      	ldrb	r3, [r7, #23]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d109      	bne.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004862:	4b45      	ldr	r3, [pc, #276]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004866:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800486e:	4942      	ldr	r1, [pc, #264]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004870:	4313      	orrs	r3, r2
 8004872:	654b      	str	r3, [r1, #84]	; 0x54
 8004874:	e001      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004876:	7dfb      	ldrb	r3, [r7, #23]
 8004878:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0302 	and.w	r3, r3, #2
 8004882:	2b00      	cmp	r3, #0
 8004884:	d037      	beq.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800488a:	2b05      	cmp	r3, #5
 800488c:	d820      	bhi.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 800488e:	a201      	add	r2, pc, #4	; (adr r2, 8004894 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8004890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004894:	080048d7 	.word	0x080048d7
 8004898:	080048ad 	.word	0x080048ad
 800489c:	080048bf 	.word	0x080048bf
 80048a0:	080048d7 	.word	0x080048d7
 80048a4:	080048d7 	.word	0x080048d7
 80048a8:	080048d7 	.word	0x080048d7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	3304      	adds	r3, #4
 80048b0:	2101      	movs	r1, #1
 80048b2:	4618      	mov	r0, r3
 80048b4:	f001 fb1c 	bl	8005ef0 <RCCEx_PLL2_Config>
 80048b8:	4603      	mov	r3, r0
 80048ba:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80048bc:	e00c      	b.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	3324      	adds	r3, #36	; 0x24
 80048c2:	2101      	movs	r1, #1
 80048c4:	4618      	mov	r0, r3
 80048c6:	f001 fbc5 	bl	8006054 <RCCEx_PLL3_Config>
 80048ca:	4603      	mov	r3, r0
 80048cc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80048ce:	e003      	b.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	75fb      	strb	r3, [r7, #23]
      break;
 80048d4:	e000      	b.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 80048d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048d8:	7dfb      	ldrb	r3, [r7, #23]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d109      	bne.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80048de:	4b26      	ldr	r3, [pc, #152]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80048e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048e2:	f023 0207 	bic.w	r2, r3, #7
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ea:	4923      	ldr	r1, [pc, #140]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80048ec:	4313      	orrs	r3, r2
 80048ee:	654b      	str	r3, [r1, #84]	; 0x54
 80048f0:	e001      	b.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048f2:	7dfb      	ldrb	r3, [r7, #23]
 80048f4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 0304 	and.w	r3, r3, #4
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d040      	beq.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004908:	2b05      	cmp	r3, #5
 800490a:	d821      	bhi.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 800490c:	a201      	add	r2, pc, #4	; (adr r2, 8004914 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 800490e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004912:	bf00      	nop
 8004914:	08004957 	.word	0x08004957
 8004918:	0800492d 	.word	0x0800492d
 800491c:	0800493f 	.word	0x0800493f
 8004920:	08004957 	.word	0x08004957
 8004924:	08004957 	.word	0x08004957
 8004928:	08004957 	.word	0x08004957
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	3304      	adds	r3, #4
 8004930:	2101      	movs	r1, #1
 8004932:	4618      	mov	r0, r3
 8004934:	f001 fadc 	bl	8005ef0 <RCCEx_PLL2_Config>
 8004938:	4603      	mov	r3, r0
 800493a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800493c:	e00c      	b.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	3324      	adds	r3, #36	; 0x24
 8004942:	2101      	movs	r1, #1
 8004944:	4618      	mov	r0, r3
 8004946:	f001 fb85 	bl	8006054 <RCCEx_PLL3_Config>
 800494a:	4603      	mov	r3, r0
 800494c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800494e:	e003      	b.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	75fb      	strb	r3, [r7, #23]
      break;
 8004954:	e000      	b.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8004956:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004958:	7dfb      	ldrb	r3, [r7, #23]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d110      	bne.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800495e:	4b06      	ldr	r3, [pc, #24]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004962:	f023 0207 	bic.w	r2, r3, #7
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800496c:	4902      	ldr	r1, [pc, #8]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800496e:	4313      	orrs	r3, r2
 8004970:	658b      	str	r3, [r1, #88]	; 0x58
 8004972:	e007      	b.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8004974:	58024800 	.word	0x58024800
 8004978:	58024400 	.word	0x58024400
 800497c:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004980:	7dfb      	ldrb	r3, [r7, #23]
 8004982:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0320 	and.w	r3, r3, #32
 800498c:	2b00      	cmp	r3, #0
 800498e:	d04b      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004996:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800499a:	d02e      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x966>
 800499c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80049a0:	d828      	bhi.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80049a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049a6:	d02a      	beq.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80049a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049ac:	d822      	bhi.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80049ae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80049b2:	d026      	beq.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80049b4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80049b8:	d81c      	bhi.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80049ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049be:	d010      	beq.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 80049c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049c4:	d816      	bhi.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d01d      	beq.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x972>
 80049ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049ce:	d111      	bne.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	3304      	adds	r3, #4
 80049d4:	2100      	movs	r1, #0
 80049d6:	4618      	mov	r0, r3
 80049d8:	f001 fa8a 	bl	8005ef0 <RCCEx_PLL2_Config>
 80049dc:	4603      	mov	r3, r0
 80049de:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80049e0:	e012      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	3324      	adds	r3, #36	; 0x24
 80049e6:	2102      	movs	r1, #2
 80049e8:	4618      	mov	r0, r3
 80049ea:	f001 fb33 	bl	8006054 <RCCEx_PLL3_Config>
 80049ee:	4603      	mov	r3, r0
 80049f0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80049f2:	e009      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	75fb      	strb	r3, [r7, #23]
      break;
 80049f8:	e006      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80049fa:	bf00      	nop
 80049fc:	e004      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80049fe:	bf00      	nop
 8004a00:	e002      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8004a02:	bf00      	nop
 8004a04:	e000      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8004a06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a08:	7dfb      	ldrb	r3, [r7, #23]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d10a      	bne.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a0e:	4bb2      	ldr	r3, [pc, #712]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a12:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a1c:	49ae      	ldr	r1, [pc, #696]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	654b      	str	r3, [r1, #84]	; 0x54
 8004a22:	e001      	b.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a24:	7dfb      	ldrb	r3, [r7, #23]
 8004a26:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d04b      	beq.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a3a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004a3e:	d02e      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8004a40:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004a44:	d828      	bhi.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004a46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a4a:	d02a      	beq.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8004a4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a50:	d822      	bhi.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004a52:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a56:	d026      	beq.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8004a58:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a5c:	d81c      	bhi.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004a5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a62:	d010      	beq.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8004a64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a68:	d816      	bhi.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d01d      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8004a6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a72:	d111      	bne.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	3304      	adds	r3, #4
 8004a78:	2100      	movs	r1, #0
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f001 fa38 	bl	8005ef0 <RCCEx_PLL2_Config>
 8004a80:	4603      	mov	r3, r0
 8004a82:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004a84:	e012      	b.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	3324      	adds	r3, #36	; 0x24
 8004a8a:	2102      	movs	r1, #2
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f001 fae1 	bl	8006054 <RCCEx_PLL3_Config>
 8004a92:	4603      	mov	r3, r0
 8004a94:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004a96:	e009      	b.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	75fb      	strb	r3, [r7, #23]
      break;
 8004a9c:	e006      	b.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004a9e:	bf00      	nop
 8004aa0:	e004      	b.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004aa2:	bf00      	nop
 8004aa4:	e002      	b.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004aa6:	bf00      	nop
 8004aa8:	e000      	b.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004aaa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004aac:	7dfb      	ldrb	r3, [r7, #23]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d10a      	bne.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004ab2:	4b89      	ldr	r3, [pc, #548]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ab6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ac0:	4985      	ldr	r1, [pc, #532]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	658b      	str	r3, [r1, #88]	; 0x58
 8004ac6:	e001      	b.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ac8:	7dfb      	ldrb	r3, [r7, #23]
 8004aca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d04b      	beq.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ade:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004ae2:	d02e      	beq.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8004ae4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004ae8:	d828      	bhi.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004aea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004aee:	d02a      	beq.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8004af0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004af4:	d822      	bhi.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004af6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004afa:	d026      	beq.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8004afc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004b00:	d81c      	bhi.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004b02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b06:	d010      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8004b08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b0c:	d816      	bhi.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d01d      	beq.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8004b12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b16:	d111      	bne.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	3304      	adds	r3, #4
 8004b1c:	2100      	movs	r1, #0
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f001 f9e6 	bl	8005ef0 <RCCEx_PLL2_Config>
 8004b24:	4603      	mov	r3, r0
 8004b26:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004b28:	e012      	b.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	3324      	adds	r3, #36	; 0x24
 8004b2e:	2102      	movs	r1, #2
 8004b30:	4618      	mov	r0, r3
 8004b32:	f001 fa8f 	bl	8006054 <RCCEx_PLL3_Config>
 8004b36:	4603      	mov	r3, r0
 8004b38:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004b3a:	e009      	b.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	75fb      	strb	r3, [r7, #23]
      break;
 8004b40:	e006      	b.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004b42:	bf00      	nop
 8004b44:	e004      	b.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004b46:	bf00      	nop
 8004b48:	e002      	b.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004b4a:	bf00      	nop
 8004b4c:	e000      	b.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004b4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b50:	7dfb      	ldrb	r3, [r7, #23]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d10a      	bne.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004b56:	4b60      	ldr	r3, [pc, #384]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b64:	495c      	ldr	r1, [pc, #368]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004b66:	4313      	orrs	r3, r2
 8004b68:	658b      	str	r3, [r1, #88]	; 0x58
 8004b6a:	e001      	b.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b6c:	7dfb      	ldrb	r3, [r7, #23]
 8004b6e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 0308 	and.w	r3, r3, #8
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d018      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b84:	d10a      	bne.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	3324      	adds	r3, #36	; 0x24
 8004b8a:	2102      	movs	r1, #2
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f001 fa61 	bl	8006054 <RCCEx_PLL3_Config>
 8004b92:	4603      	mov	r3, r0
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d001      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8004b9c:	4b4e      	ldr	r3, [pc, #312]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004b9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ba0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ba8:	494b      	ldr	r1, [pc, #300]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004baa:	4313      	orrs	r3, r2
 8004bac:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0310 	and.w	r3, r3, #16
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d01a      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bc4:	d10a      	bne.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	3324      	adds	r3, #36	; 0x24
 8004bca:	2102      	movs	r1, #2
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f001 fa41 	bl	8006054 <RCCEx_PLL3_Config>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d001      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004bdc:	4b3e      	ldr	r3, [pc, #248]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004be0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bea:	493b      	ldr	r1, [pc, #236]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004bec:	4313      	orrs	r3, r2
 8004bee:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d034      	beq.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c06:	d01d      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8004c08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c0c:	d817      	bhi.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d003      	beq.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8004c12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c16:	d009      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004c18:	e011      	b.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	3304      	adds	r3, #4
 8004c1e:	2100      	movs	r1, #0
 8004c20:	4618      	mov	r0, r3
 8004c22:	f001 f965 	bl	8005ef0 <RCCEx_PLL2_Config>
 8004c26:	4603      	mov	r3, r0
 8004c28:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004c2a:	e00c      	b.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	3324      	adds	r3, #36	; 0x24
 8004c30:	2102      	movs	r1, #2
 8004c32:	4618      	mov	r0, r3
 8004c34:	f001 fa0e 	bl	8006054 <RCCEx_PLL3_Config>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004c3c:	e003      	b.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	75fb      	strb	r3, [r7, #23]
      break;
 8004c42:	e000      	b.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8004c44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c46:	7dfb      	ldrb	r3, [r7, #23]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d10a      	bne.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c4c:	4b22      	ldr	r3, [pc, #136]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004c4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c50:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c5a:	491f      	ldr	r1, [pc, #124]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	658b      	str	r3, [r1, #88]	; 0x58
 8004c60:	e001      	b.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c62:	7dfb      	ldrb	r3, [r7, #23]
 8004c64:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d036      	beq.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c78:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004c7c:	d01c      	beq.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8004c7e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004c82:	d816      	bhi.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004c84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c88:	d003      	beq.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8004c8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c8e:	d007      	beq.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8004c90:	e00f      	b.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c92:	4b11      	ldr	r3, [pc, #68]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c96:	4a10      	ldr	r2, [pc, #64]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004c98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c9c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004c9e:	e00c      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	3324      	adds	r3, #36	; 0x24
 8004ca4:	2101      	movs	r1, #1
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f001 f9d4 	bl	8006054 <RCCEx_PLL3_Config>
 8004cac:	4603      	mov	r3, r0
 8004cae:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004cb0:	e003      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	75fb      	strb	r3, [r7, #23]
      break;
 8004cb6:	e000      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8004cb8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cba:	7dfb      	ldrb	r3, [r7, #23]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d10d      	bne.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004cc0:	4b05      	ldr	r3, [pc, #20]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004cc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cc4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cce:	4902      	ldr	r1, [pc, #8]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	654b      	str	r3, [r1, #84]	; 0x54
 8004cd4:	e004      	b.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 8004cd6:	bf00      	nop
 8004cd8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cdc:	7dfb      	ldrb	r3, [r7, #23]
 8004cde:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d029      	beq.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d003      	beq.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004cf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cf8:	d007      	beq.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8004cfa:	e00f      	b.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cfc:	4b61      	ldr	r3, [pc, #388]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d00:	4a60      	ldr	r2, [pc, #384]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004d02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d06:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004d08:	e00b      	b.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	3304      	adds	r3, #4
 8004d0e:	2102      	movs	r1, #2
 8004d10:	4618      	mov	r0, r3
 8004d12:	f001 f8ed 	bl	8005ef0 <RCCEx_PLL2_Config>
 8004d16:	4603      	mov	r3, r0
 8004d18:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004d1a:	e002      	b.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	75fb      	strb	r3, [r7, #23]
      break;
 8004d20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d22:	7dfb      	ldrb	r3, [r7, #23]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d109      	bne.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004d28:	4b56      	ldr	r3, [pc, #344]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004d2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d2c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d34:	4953      	ldr	r1, [pc, #332]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004d36:	4313      	orrs	r3, r2
 8004d38:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004d3a:	e001      	b.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d3c:	7dfb      	ldrb	r3, [r7, #23]
 8004d3e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d00a      	beq.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	3324      	adds	r3, #36	; 0x24
 8004d50:	2102      	movs	r1, #2
 8004d52:	4618      	mov	r0, r3
 8004d54:	f001 f97e 	bl	8006054 <RCCEx_PLL3_Config>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d001      	beq.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d030      	beq.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d76:	d017      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004d78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d7c:	d811      	bhi.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8004d7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d82:	d013      	beq.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8004d84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d88:	d80b      	bhi.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d010      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8004d8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d92:	d106      	bne.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d94:	4b3b      	ldr	r3, [pc, #236]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d98:	4a3a      	ldr	r2, [pc, #232]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004d9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d9e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004da0:	e007      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	75fb      	strb	r3, [r7, #23]
      break;
 8004da6:	e004      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004da8:	bf00      	nop
 8004daa:	e002      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004dac:	bf00      	nop
 8004dae:	e000      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004db0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004db2:	7dfb      	ldrb	r3, [r7, #23]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d109      	bne.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004db8:	4b32      	ldr	r3, [pc, #200]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dbc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004dc4:	492f      	ldr	r1, [pc, #188]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	654b      	str	r3, [r1, #84]	; 0x54
 8004dca:	e001      	b.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dcc:	7dfb      	ldrb	r3, [r7, #23]
 8004dce:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d008      	beq.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004ddc:	4b29      	ldr	r3, [pc, #164]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004dde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004de0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004de8:	4926      	ldr	r1, [pc, #152]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d008      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004dfa:	4b22      	ldr	r3, [pc, #136]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004dfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dfe:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e06:	491f      	ldr	r1, [pc, #124]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d00d      	beq.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004e18:	4b1a      	ldr	r3, [pc, #104]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004e1a:	691b      	ldr	r3, [r3, #16]
 8004e1c:	4a19      	ldr	r2, [pc, #100]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004e1e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004e22:	6113      	str	r3, [r2, #16]
 8004e24:	4b17      	ldr	r3, [pc, #92]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004e26:	691a      	ldr	r2, [r3, #16]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004e2e:	4915      	ldr	r1, [pc, #84]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004e30:	4313      	orrs	r3, r2
 8004e32:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	da08      	bge.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004e3c:	4b11      	ldr	r3, [pc, #68]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004e3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e40:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e48:	490e      	ldr	r1, [pc, #56]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d009      	beq.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004e5a:	4b0a      	ldr	r3, [pc, #40]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e5e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e68:	4906      	ldr	r1, [pc, #24]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004e6e:	7dbb      	ldrb	r3, [r7, #22]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d101      	bne.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8004e74:	2300      	movs	r3, #0
 8004e76:	e000      	b.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3718      	adds	r7, #24
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	58024400 	.word	0x58024400

08004e88 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b090      	sub	sp, #64	; 0x40
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e96:	f040 8089 	bne.w	8004fac <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8004e9a:	4b95      	ldr	r3, [pc, #596]	; (80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004e9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e9e:	f003 0307 	and.w	r3, r3, #7
 8004ea2:	633b      	str	r3, [r7, #48]	; 0x30
 8004ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea6:	2b04      	cmp	r3, #4
 8004ea8:	d87d      	bhi.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 8004eaa:	a201      	add	r2, pc, #4	; (adr r2, 8004eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8004eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eb0:	08004ec5 	.word	0x08004ec5
 8004eb4:	08004ee9 	.word	0x08004ee9
 8004eb8:	08004f0d 	.word	0x08004f0d
 8004ebc:	08004fa1 	.word	0x08004fa1
 8004ec0:	08004f31 	.word	0x08004f31

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004ec4:	4b8a      	ldr	r3, [pc, #552]	; (80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ecc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ed0:	d107      	bne.n	8004ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004ed2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f000 feb8 	bl	8005c4c <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8004edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ede:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004ee0:	e3ed      	b.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ee6:	e3ea      	b.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004ee8:	4b81      	ldr	r3, [pc, #516]	; (80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ef0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ef4:	d107      	bne.n	8004f06 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ef6:	f107 0318 	add.w	r3, r7, #24
 8004efa:	4618      	mov	r0, r3
 8004efc:	f000 fbfe 	bl	80056fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004f00:	69bb      	ldr	r3, [r7, #24]
 8004f02:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004f04:	e3db      	b.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004f06:	2300      	movs	r3, #0
 8004f08:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f0a:	e3d8      	b.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004f0c:	4b78      	ldr	r3, [pc, #480]	; (80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f18:	d107      	bne.n	8004f2a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f1a:	f107 030c 	add.w	r3, r7, #12
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f000 fd40 	bl	80059a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004f28:	e3c9      	b.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f2e:	e3c6      	b.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004f30:	4b6f      	ldr	r3, [pc, #444]	; (80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004f32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f34:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004f38:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004f3a:	4b6d      	ldr	r3, [pc, #436]	; (80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 0304 	and.w	r3, r3, #4
 8004f42:	2b04      	cmp	r3, #4
 8004f44:	d10c      	bne.n	8004f60 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8004f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d109      	bne.n	8004f60 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004f4c:	4b68      	ldr	r3, [pc, #416]	; (80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	08db      	lsrs	r3, r3, #3
 8004f52:	f003 0303 	and.w	r3, r3, #3
 8004f56:	4a67      	ldr	r2, [pc, #412]	; (80050f4 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8004f58:	fa22 f303 	lsr.w	r3, r2, r3
 8004f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f5e:	e01e      	b.n	8004f9e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004f60:	4b63      	ldr	r3, [pc, #396]	; (80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f6c:	d106      	bne.n	8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8004f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f74:	d102      	bne.n	8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004f76:	4b60      	ldr	r3, [pc, #384]	; (80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004f78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f7a:	e010      	b.n	8004f9e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004f7c:	4b5c      	ldr	r3, [pc, #368]	; (80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f88:	d106      	bne.n	8004f98 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8004f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f90:	d102      	bne.n	8004f98 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004f92:	4b5a      	ldr	r3, [pc, #360]	; (80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8004f94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f96:	e002      	b.n	8004f9e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004f9c:	e38f      	b.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8004f9e:	e38e      	b.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004fa0:	4b57      	ldr	r3, [pc, #348]	; (8005100 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004fa4:	e38b      	b.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004faa:	e388      	b.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fb2:	f040 80a7 	bne.w	8005104 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8004fb6:	4b4e      	ldr	r3, [pc, #312]	; (80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fba:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8004fbe:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004fc6:	d054      	beq.n	8005072 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8004fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004fce:	f200 808b 	bhi.w	80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8004fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004fd8:	f000 8083 	beq.w	80050e2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8004fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fde:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004fe2:	f200 8081 	bhi.w	80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8004fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fec:	d02f      	beq.n	800504e <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 8004fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ff4:	d878      	bhi.n	80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8004ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d004      	beq.n	8005006 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 8004ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ffe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005002:	d012      	beq.n	800502a <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 8005004:	e070      	b.n	80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005006:	4b3a      	ldr	r3, [pc, #232]	; (80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800500e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005012:	d107      	bne.n	8005024 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005014:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005018:	4618      	mov	r0, r3
 800501a:	f000 fe17 	bl	8005c4c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800501e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005020:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005022:	e34c      	b.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005024:	2300      	movs	r3, #0
 8005026:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005028:	e349      	b.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800502a:	4b31      	ldr	r3, [pc, #196]	; (80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005032:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005036:	d107      	bne.n	8005048 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005038:	f107 0318 	add.w	r3, r7, #24
 800503c:	4618      	mov	r0, r3
 800503e:	f000 fb5d 	bl	80056fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005042:	69bb      	ldr	r3, [r7, #24]
 8005044:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005046:	e33a      	b.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005048:	2300      	movs	r3, #0
 800504a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800504c:	e337      	b.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800504e:	4b28      	ldr	r3, [pc, #160]	; (80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005056:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800505a:	d107      	bne.n	800506c <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800505c:	f107 030c 	add.w	r3, r7, #12
 8005060:	4618      	mov	r0, r3
 8005062:	f000 fc9f 	bl	80059a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800506a:	e328      	b.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800506c:	2300      	movs	r3, #0
 800506e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005070:	e325      	b.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005072:	4b1f      	ldr	r3, [pc, #124]	; (80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005076:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800507a:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800507c:	4b1c      	ldr	r3, [pc, #112]	; (80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 0304 	and.w	r3, r3, #4
 8005084:	2b04      	cmp	r3, #4
 8005086:	d10c      	bne.n	80050a2 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 8005088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800508a:	2b00      	cmp	r3, #0
 800508c:	d109      	bne.n	80050a2 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800508e:	4b18      	ldr	r3, [pc, #96]	; (80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	08db      	lsrs	r3, r3, #3
 8005094:	f003 0303 	and.w	r3, r3, #3
 8005098:	4a16      	ldr	r2, [pc, #88]	; (80050f4 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800509a:	fa22 f303 	lsr.w	r3, r2, r3
 800509e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050a0:	e01e      	b.n	80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80050a2:	4b13      	ldr	r3, [pc, #76]	; (80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050ae:	d106      	bne.n	80050be <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 80050b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80050b6:	d102      	bne.n	80050be <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80050b8:	4b0f      	ldr	r3, [pc, #60]	; (80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80050ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050bc:	e010      	b.n	80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80050be:	4b0c      	ldr	r3, [pc, #48]	; (80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80050ca:	d106      	bne.n	80050da <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 80050cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050d2:	d102      	bne.n	80050da <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80050d4:	4b09      	ldr	r3, [pc, #36]	; (80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80050d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050d8:	e002      	b.n	80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80050da:	2300      	movs	r3, #0
 80050dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80050de:	e2ee      	b.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80050e0:	e2ed      	b.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80050e2:	4b07      	ldr	r3, [pc, #28]	; (8005100 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80050e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80050e6:	e2ea      	b.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 80050e8:	2300      	movs	r3, #0
 80050ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80050ec:	e2e7      	b.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80050ee:	bf00      	nop
 80050f0:	58024400 	.word	0x58024400
 80050f4:	03d09000 	.word	0x03d09000
 80050f8:	003d0900 	.word	0x003d0900
 80050fc:	017d7840 	.word	0x017d7840
 8005100:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800510a:	f040 809c 	bne.w	8005246 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800510e:	4b9e      	ldr	r3, [pc, #632]	; (8005388 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005112:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8005116:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800511a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800511e:	d054      	beq.n	80051ca <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8005120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005122:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005126:	f200 808b 	bhi.w	8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800512a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800512c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005130:	f000 8083 	beq.w	800523a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8005134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005136:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800513a:	f200 8081 	bhi.w	8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800513e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005140:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005144:	d02f      	beq.n	80051a6 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8005146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005148:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800514c:	d878      	bhi.n	8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800514e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005150:	2b00      	cmp	r3, #0
 8005152:	d004      	beq.n	800515e <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8005154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005156:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800515a:	d012      	beq.n	8005182 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800515c:	e070      	b.n	8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800515e:	4b8a      	ldr	r3, [pc, #552]	; (8005388 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005166:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800516a:	d107      	bne.n	800517c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800516c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005170:	4618      	mov	r0, r3
 8005172:	f000 fd6b 	bl	8005c4c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005178:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800517a:	e2a0      	b.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800517c:	2300      	movs	r3, #0
 800517e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005180:	e29d      	b.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005182:	4b81      	ldr	r3, [pc, #516]	; (8005388 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800518a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800518e:	d107      	bne.n	80051a0 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005190:	f107 0318 	add.w	r3, r7, #24
 8005194:	4618      	mov	r0, r3
 8005196:	f000 fab1 	bl	80056fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800519e:	e28e      	b.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80051a0:	2300      	movs	r3, #0
 80051a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80051a4:	e28b      	b.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80051a6:	4b78      	ldr	r3, [pc, #480]	; (8005388 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051b2:	d107      	bne.n	80051c4 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80051b4:	f107 030c 	add.w	r3, r7, #12
 80051b8:	4618      	mov	r0, r3
 80051ba:	f000 fbf3 	bl	80059a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80051c2:	e27c      	b.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80051c4:	2300      	movs	r3, #0
 80051c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80051c8:	e279      	b.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80051ca:	4b6f      	ldr	r3, [pc, #444]	; (8005388 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80051cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80051d2:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80051d4:	4b6c      	ldr	r3, [pc, #432]	; (8005388 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 0304 	and.w	r3, r3, #4
 80051dc:	2b04      	cmp	r3, #4
 80051de:	d10c      	bne.n	80051fa <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80051e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d109      	bne.n	80051fa <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80051e6:	4b68      	ldr	r3, [pc, #416]	; (8005388 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	08db      	lsrs	r3, r3, #3
 80051ec:	f003 0303 	and.w	r3, r3, #3
 80051f0:	4a66      	ldr	r2, [pc, #408]	; (800538c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80051f2:	fa22 f303 	lsr.w	r3, r2, r3
 80051f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051f8:	e01e      	b.n	8005238 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80051fa:	4b63      	ldr	r3, [pc, #396]	; (8005388 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005202:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005206:	d106      	bne.n	8005216 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 8005208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800520a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800520e:	d102      	bne.n	8005216 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005210:	4b5f      	ldr	r3, [pc, #380]	; (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8005212:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005214:	e010      	b.n	8005238 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005216:	4b5c      	ldr	r3, [pc, #368]	; (8005388 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800521e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005222:	d106      	bne.n	8005232 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8005224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005226:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800522a:	d102      	bne.n	8005232 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800522c:	4b59      	ldr	r3, [pc, #356]	; (8005394 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800522e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005230:	e002      	b.n	8005238 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005232:	2300      	movs	r3, #0
 8005234:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005236:	e242      	b.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8005238:	e241      	b.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800523a:	4b57      	ldr	r3, [pc, #348]	; (8005398 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800523c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800523e:	e23e      	b.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8005240:	2300      	movs	r3, #0
 8005242:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005244:	e23b      	b.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800524c:	f040 80a6 	bne.w	800539c <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8005250:	4b4d      	ldr	r3, [pc, #308]	; (8005388 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005252:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005254:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005258:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800525a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800525c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005260:	d054      	beq.n	800530c <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8005262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005264:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005268:	f200 808b 	bhi.w	8005382 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800526c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800526e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005272:	f000 8083 	beq.w	800537c <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 8005276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005278:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800527c:	f200 8081 	bhi.w	8005382 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8005280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005282:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005286:	d02f      	beq.n	80052e8 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 8005288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800528a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800528e:	d878      	bhi.n	8005382 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8005290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005292:	2b00      	cmp	r3, #0
 8005294:	d004      	beq.n	80052a0 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8005296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005298:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800529c:	d012      	beq.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 800529e:	e070      	b.n	8005382 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80052a0:	4b39      	ldr	r3, [pc, #228]	; (8005388 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80052ac:	d107      	bne.n	80052be <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80052ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80052b2:	4618      	mov	r0, r3
 80052b4:	f000 fcca 	bl	8005c4c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80052b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ba:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80052bc:	e1ff      	b.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80052be:	2300      	movs	r3, #0
 80052c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80052c2:	e1fc      	b.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80052c4:	4b30      	ldr	r3, [pc, #192]	; (8005388 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052d0:	d107      	bne.n	80052e2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80052d2:	f107 0318 	add.w	r3, r7, #24
 80052d6:	4618      	mov	r0, r3
 80052d8:	f000 fa10 	bl	80056fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80052dc:	69bb      	ldr	r3, [r7, #24]
 80052de:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80052e0:	e1ed      	b.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80052e2:	2300      	movs	r3, #0
 80052e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80052e6:	e1ea      	b.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80052e8:	4b27      	ldr	r3, [pc, #156]	; (8005388 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052f4:	d107      	bne.n	8005306 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80052f6:	f107 030c 	add.w	r3, r7, #12
 80052fa:	4618      	mov	r0, r3
 80052fc:	f000 fb52 	bl	80059a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005304:	e1db      	b.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005306:	2300      	movs	r3, #0
 8005308:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800530a:	e1d8      	b.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800530c:	4b1e      	ldr	r3, [pc, #120]	; (8005388 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800530e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005310:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005314:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005316:	4b1c      	ldr	r3, [pc, #112]	; (8005388 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 0304 	and.w	r3, r3, #4
 800531e:	2b04      	cmp	r3, #4
 8005320:	d10c      	bne.n	800533c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 8005322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005324:	2b00      	cmp	r3, #0
 8005326:	d109      	bne.n	800533c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005328:	4b17      	ldr	r3, [pc, #92]	; (8005388 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	08db      	lsrs	r3, r3, #3
 800532e:	f003 0303 	and.w	r3, r3, #3
 8005332:	4a16      	ldr	r2, [pc, #88]	; (800538c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005334:	fa22 f303 	lsr.w	r3, r2, r3
 8005338:	63fb      	str	r3, [r7, #60]	; 0x3c
 800533a:	e01e      	b.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800533c:	4b12      	ldr	r3, [pc, #72]	; (8005388 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005344:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005348:	d106      	bne.n	8005358 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800534a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800534c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005350:	d102      	bne.n	8005358 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005352:	4b0f      	ldr	r3, [pc, #60]	; (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8005354:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005356:	e010      	b.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005358:	4b0b      	ldr	r3, [pc, #44]	; (8005388 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005360:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005364:	d106      	bne.n	8005374 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8005366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005368:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800536c:	d102      	bne.n	8005374 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800536e:	4b09      	ldr	r3, [pc, #36]	; (8005394 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8005370:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005372:	e002      	b.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005374:	2300      	movs	r3, #0
 8005376:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005378:	e1a1      	b.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800537a:	e1a0      	b.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800537c:	4b06      	ldr	r3, [pc, #24]	; (8005398 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800537e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005380:	e19d      	b.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8005382:	2300      	movs	r3, #0
 8005384:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005386:	e19a      	b.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8005388:	58024400 	.word	0x58024400
 800538c:	03d09000 	.word	0x03d09000
 8005390:	003d0900 	.word	0x003d0900
 8005394:	017d7840 	.word	0x017d7840
 8005398:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80053a2:	d173      	bne.n	800548c <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80053a4:	4b9a      	ldr	r3, [pc, #616]	; (8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80053a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80053ac:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80053ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80053b4:	d02f      	beq.n	8005416 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 80053b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80053bc:	d863      	bhi.n	8005486 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 80053be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d004      	beq.n	80053ce <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 80053c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053ca:	d012      	beq.n	80053f2 <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 80053cc:	e05b      	b.n	8005486 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80053ce:	4b90      	ldr	r3, [pc, #576]	; (8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053da:	d107      	bne.n	80053ec <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80053dc:	f107 0318 	add.w	r3, r7, #24
 80053e0:	4618      	mov	r0, r3
 80053e2:	f000 f98b 	bl	80056fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80053e6:	69bb      	ldr	r3, [r7, #24]
 80053e8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80053ea:	e168      	b.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80053ec:	2300      	movs	r3, #0
 80053ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80053f0:	e165      	b.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80053f2:	4b87      	ldr	r3, [pc, #540]	; (8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053fe:	d107      	bne.n	8005410 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005400:	f107 030c 	add.w	r3, r7, #12
 8005404:	4618      	mov	r0, r3
 8005406:	f000 facd 	bl	80059a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800540e:	e156      	b.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005410:	2300      	movs	r3, #0
 8005412:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005414:	e153      	b.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005416:	4b7e      	ldr	r3, [pc, #504]	; (8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800541a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800541e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005420:	4b7b      	ldr	r3, [pc, #492]	; (8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 0304 	and.w	r3, r3, #4
 8005428:	2b04      	cmp	r3, #4
 800542a:	d10c      	bne.n	8005446 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 800542c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800542e:	2b00      	cmp	r3, #0
 8005430:	d109      	bne.n	8005446 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005432:	4b77      	ldr	r3, [pc, #476]	; (8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	08db      	lsrs	r3, r3, #3
 8005438:	f003 0303 	and.w	r3, r3, #3
 800543c:	4a75      	ldr	r2, [pc, #468]	; (8005614 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800543e:	fa22 f303 	lsr.w	r3, r2, r3
 8005442:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005444:	e01e      	b.n	8005484 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005446:	4b72      	ldr	r3, [pc, #456]	; (8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800544e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005452:	d106      	bne.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8005454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005456:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800545a:	d102      	bne.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800545c:	4b6e      	ldr	r3, [pc, #440]	; (8005618 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800545e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005460:	e010      	b.n	8005484 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005462:	4b6b      	ldr	r3, [pc, #428]	; (8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800546a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800546e:	d106      	bne.n	800547e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8005470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005472:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005476:	d102      	bne.n	800547e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005478:	4b68      	ldr	r3, [pc, #416]	; (800561c <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800547a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800547c:	e002      	b.n	8005484 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800547e:	2300      	movs	r3, #0
 8005480:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005482:	e11c      	b.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8005484:	e11b      	b.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8005486:	2300      	movs	r3, #0
 8005488:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800548a:	e118      	b.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005492:	d133      	bne.n	80054fc <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8005494:	4b5e      	ldr	r3, [pc, #376]	; (8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005496:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005498:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800549c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800549e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d004      	beq.n	80054ae <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 80054a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054aa:	d012      	beq.n	80054d2 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 80054ac:	e023      	b.n	80054f6 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80054ae:	4b58      	ldr	r3, [pc, #352]	; (8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80054ba:	d107      	bne.n	80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80054bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054c0:	4618      	mov	r0, r3
 80054c2:	f000 fbc3 	bl	8005c4c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80054c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80054ca:	e0f8      	b.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80054cc:	2300      	movs	r3, #0
 80054ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80054d0:	e0f5      	b.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80054d2:	4b4f      	ldr	r3, [pc, #316]	; (8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054de:	d107      	bne.n	80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80054e0:	f107 0318 	add.w	r3, r7, #24
 80054e4:	4618      	mov	r0, r3
 80054e6:	f000 f909 	bl	80056fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80054ea:	6a3b      	ldr	r3, [r7, #32]
 80054ec:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80054ee:	e0e6      	b.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80054f0:	2300      	movs	r3, #0
 80054f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80054f4:	e0e3      	b.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 80054f6:	2300      	movs	r3, #0
 80054f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80054fa:	e0e0      	b.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005502:	f040 808d 	bne.w	8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8005506:	4b42      	ldr	r3, [pc, #264]	; (8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800550a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800550e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005512:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005516:	d06b      	beq.n	80055f0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 8005518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800551a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800551e:	d874      	bhi.n	800560a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8005520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005522:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005526:	d056      	beq.n	80055d6 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8005528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800552a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800552e:	d86c      	bhi.n	800560a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8005530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005532:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005536:	d03b      	beq.n	80055b0 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 8005538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800553a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800553e:	d864      	bhi.n	800560a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8005540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005542:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005546:	d021      	beq.n	800558c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8005548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800554a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800554e:	d85c      	bhi.n	800560a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8005550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005552:	2b00      	cmp	r3, #0
 8005554:	d004      	beq.n	8005560 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8005556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005558:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800555c:	d004      	beq.n	8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 800555e:	e054      	b.n	800560a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005560:	f000 f8b6 	bl	80056d0 <HAL_RCCEx_GetD3PCLK1Freq>
 8005564:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8005566:	e0aa      	b.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005568:	4b29      	ldr	r3, [pc, #164]	; (8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005570:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005574:	d107      	bne.n	8005586 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005576:	f107 0318 	add.w	r3, r7, #24
 800557a:	4618      	mov	r0, r3
 800557c:	f000 f8be 	bl	80056fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005580:	69fb      	ldr	r3, [r7, #28]
 8005582:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005584:	e09b      	b.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8005586:	2300      	movs	r3, #0
 8005588:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800558a:	e098      	b.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800558c:	4b20      	ldr	r3, [pc, #128]	; (8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005594:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005598:	d107      	bne.n	80055aa <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800559a:	f107 030c 	add.w	r3, r7, #12
 800559e:	4618      	mov	r0, r3
 80055a0:	f000 fa00 	bl	80059a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80055a8:	e089      	b.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80055aa:	2300      	movs	r3, #0
 80055ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80055ae:	e086      	b.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80055b0:	4b17      	ldr	r3, [pc, #92]	; (8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f003 0304 	and.w	r3, r3, #4
 80055b8:	2b04      	cmp	r3, #4
 80055ba:	d109      	bne.n	80055d0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80055bc:	4b14      	ldr	r3, [pc, #80]	; (8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	08db      	lsrs	r3, r3, #3
 80055c2:	f003 0303 	and.w	r3, r3, #3
 80055c6:	4a13      	ldr	r2, [pc, #76]	; (8005614 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80055c8:	fa22 f303 	lsr.w	r3, r2, r3
 80055cc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80055ce:	e076      	b.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80055d0:	2300      	movs	r3, #0
 80055d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80055d4:	e073      	b.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80055d6:	4b0e      	ldr	r3, [pc, #56]	; (8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055e2:	d102      	bne.n	80055ea <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 80055e4:	4b0c      	ldr	r3, [pc, #48]	; (8005618 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 80055e6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80055e8:	e069      	b.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80055ea:	2300      	movs	r3, #0
 80055ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80055ee:	e066      	b.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80055f0:	4b07      	ldr	r3, [pc, #28]	; (8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055fc:	d102      	bne.n	8005604 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 80055fe:	4b07      	ldr	r3, [pc, #28]	; (800561c <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8005600:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005602:	e05c      	b.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8005604:	2300      	movs	r3, #0
 8005606:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005608:	e059      	b.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800560a:	2300      	movs	r3, #0
 800560c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800560e:	e056      	b.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8005610:	58024400 	.word	0x58024400
 8005614:	03d09000 	.word	0x03d09000
 8005618:	003d0900 	.word	0x003d0900
 800561c:	017d7840 	.word	0x017d7840
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005626:	d148      	bne.n	80056ba <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8005628:	4b27      	ldr	r3, [pc, #156]	; (80056c8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800562a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800562c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005630:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005634:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005638:	d02a      	beq.n	8005690 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 800563a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800563c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005640:	d838      	bhi.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 8005642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005644:	2b00      	cmp	r3, #0
 8005646:	d004      	beq.n	8005652 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 8005648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800564a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800564e:	d00d      	beq.n	800566c <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 8005650:	e030      	b.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005652:	4b1d      	ldr	r3, [pc, #116]	; (80056c8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800565a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800565e:	d102      	bne.n	8005666 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 8005660:	4b1a      	ldr	r3, [pc, #104]	; (80056cc <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8005662:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005664:	e02b      	b.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8005666:	2300      	movs	r3, #0
 8005668:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800566a:	e028      	b.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800566c:	4b16      	ldr	r3, [pc, #88]	; (80056c8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005674:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005678:	d107      	bne.n	800568a <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800567a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800567e:	4618      	mov	r0, r3
 8005680:	f000 fae4 	bl	8005c4c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005686:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005688:	e019      	b.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800568a:	2300      	movs	r3, #0
 800568c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800568e:	e016      	b.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005690:	4b0d      	ldr	r3, [pc, #52]	; (80056c8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005698:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800569c:	d107      	bne.n	80056ae <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800569e:	f107 0318 	add.w	r3, r7, #24
 80056a2:	4618      	mov	r0, r3
 80056a4:	f000 f82a 	bl	80056fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80056a8:	69fb      	ldr	r3, [r7, #28]
 80056aa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80056ac:	e007      	b.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80056ae:	2300      	movs	r3, #0
 80056b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80056b2:	e004      	b.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 80056b4:	2300      	movs	r3, #0
 80056b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80056b8:	e001      	b.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 80056ba:	2300      	movs	r3, #0
 80056bc:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80056be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3740      	adds	r7, #64	; 0x40
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}
 80056c8:	58024400 	.word	0x58024400
 80056cc:	017d7840 	.word	0x017d7840

080056d0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80056d4:	f7fe fcae 	bl	8004034 <HAL_RCC_GetHCLKFreq>
 80056d8:	4602      	mov	r2, r0
 80056da:	4b06      	ldr	r3, [pc, #24]	; (80056f4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80056dc:	6a1b      	ldr	r3, [r3, #32]
 80056de:	091b      	lsrs	r3, r3, #4
 80056e0:	f003 0307 	and.w	r3, r3, #7
 80056e4:	4904      	ldr	r1, [pc, #16]	; (80056f8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80056e6:	5ccb      	ldrb	r3, [r1, r3]
 80056e8:	f003 031f 	and.w	r3, r3, #31
 80056ec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	58024400 	.word	0x58024400
 80056f8:	08009710 	.word	0x08009710

080056fc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b089      	sub	sp, #36	; 0x24
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005704:	4ba1      	ldr	r3, [pc, #644]	; (800598c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005708:	f003 0303 	and.w	r3, r3, #3
 800570c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800570e:	4b9f      	ldr	r3, [pc, #636]	; (800598c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005712:	0b1b      	lsrs	r3, r3, #12
 8005714:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005718:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800571a:	4b9c      	ldr	r3, [pc, #624]	; (800598c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800571c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800571e:	091b      	lsrs	r3, r3, #4
 8005720:	f003 0301 	and.w	r3, r3, #1
 8005724:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005726:	4b99      	ldr	r3, [pc, #612]	; (800598c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800572a:	08db      	lsrs	r3, r3, #3
 800572c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005730:	693a      	ldr	r2, [r7, #16]
 8005732:	fb02 f303 	mul.w	r3, r2, r3
 8005736:	ee07 3a90 	vmov	s15, r3
 800573a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800573e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	2b00      	cmp	r3, #0
 8005746:	f000 8111 	beq.w	800596c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800574a:	69bb      	ldr	r3, [r7, #24]
 800574c:	2b02      	cmp	r3, #2
 800574e:	f000 8083 	beq.w	8005858 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005752:	69bb      	ldr	r3, [r7, #24]
 8005754:	2b02      	cmp	r3, #2
 8005756:	f200 80a1 	bhi.w	800589c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d003      	beq.n	8005768 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005760:	69bb      	ldr	r3, [r7, #24]
 8005762:	2b01      	cmp	r3, #1
 8005764:	d056      	beq.n	8005814 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005766:	e099      	b.n	800589c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005768:	4b88      	ldr	r3, [pc, #544]	; (800598c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 0320 	and.w	r3, r3, #32
 8005770:	2b00      	cmp	r3, #0
 8005772:	d02d      	beq.n	80057d0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005774:	4b85      	ldr	r3, [pc, #532]	; (800598c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	08db      	lsrs	r3, r3, #3
 800577a:	f003 0303 	and.w	r3, r3, #3
 800577e:	4a84      	ldr	r2, [pc, #528]	; (8005990 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005780:	fa22 f303 	lsr.w	r3, r2, r3
 8005784:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	ee07 3a90 	vmov	s15, r3
 800578c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	ee07 3a90 	vmov	s15, r3
 8005796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800579a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800579e:	4b7b      	ldr	r3, [pc, #492]	; (800598c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057a6:	ee07 3a90 	vmov	s15, r3
 80057aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80057b2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005994 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80057b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057ca:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80057ce:	e087      	b.n	80058e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	ee07 3a90 	vmov	s15, r3
 80057d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057da:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005998 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80057de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057e2:	4b6a      	ldr	r3, [pc, #424]	; (800598c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057ea:	ee07 3a90 	vmov	s15, r3
 80057ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80057f6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005994 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80057fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005802:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005806:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800580a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800580e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005812:	e065      	b.n	80058e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	ee07 3a90 	vmov	s15, r3
 800581a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800581e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800599c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005822:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005826:	4b59      	ldr	r3, [pc, #356]	; (800598c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800582a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800582e:	ee07 3a90 	vmov	s15, r3
 8005832:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005836:	ed97 6a03 	vldr	s12, [r7, #12]
 800583a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005994 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800583e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005842:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005846:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800584a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800584e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005852:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005856:	e043      	b.n	80058e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	ee07 3a90 	vmov	s15, r3
 800585e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005862:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80059a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005866:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800586a:	4b48      	ldr	r3, [pc, #288]	; (800598c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800586c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800586e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005872:	ee07 3a90 	vmov	s15, r3
 8005876:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800587a:	ed97 6a03 	vldr	s12, [r7, #12]
 800587e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005994 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005882:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005886:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800588a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800588e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005892:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005896:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800589a:	e021      	b.n	80058e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	ee07 3a90 	vmov	s15, r3
 80058a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058a6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800599c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80058aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058ae:	4b37      	ldr	r3, [pc, #220]	; (800598c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058b6:	ee07 3a90 	vmov	s15, r3
 80058ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058be:	ed97 6a03 	vldr	s12, [r7, #12]
 80058c2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005994 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80058c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80058de:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80058e0:	4b2a      	ldr	r3, [pc, #168]	; (800598c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e4:	0a5b      	lsrs	r3, r3, #9
 80058e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058ea:	ee07 3a90 	vmov	s15, r3
 80058ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80058f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80058fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80058fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005902:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005906:	ee17 2a90 	vmov	r2, s15
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800590e:	4b1f      	ldr	r3, [pc, #124]	; (800598c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005912:	0c1b      	lsrs	r3, r3, #16
 8005914:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005918:	ee07 3a90 	vmov	s15, r3
 800591c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005920:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005924:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005928:	edd7 6a07 	vldr	s13, [r7, #28]
 800592c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005930:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005934:	ee17 2a90 	vmov	r2, s15
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800593c:	4b13      	ldr	r3, [pc, #76]	; (800598c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800593e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005940:	0e1b      	lsrs	r3, r3, #24
 8005942:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005946:	ee07 3a90 	vmov	s15, r3
 800594a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800594e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005952:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005956:	edd7 6a07 	vldr	s13, [r7, #28]
 800595a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800595e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005962:	ee17 2a90 	vmov	r2, s15
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800596a:	e008      	b.n	800597e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2200      	movs	r2, #0
 8005970:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2200      	movs	r2, #0
 800597c:	609a      	str	r2, [r3, #8]
}
 800597e:	bf00      	nop
 8005980:	3724      	adds	r7, #36	; 0x24
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr
 800598a:	bf00      	nop
 800598c:	58024400 	.word	0x58024400
 8005990:	03d09000 	.word	0x03d09000
 8005994:	46000000 	.word	0x46000000
 8005998:	4c742400 	.word	0x4c742400
 800599c:	4a742400 	.word	0x4a742400
 80059a0:	4bbebc20 	.word	0x4bbebc20

080059a4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b089      	sub	sp, #36	; 0x24
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80059ac:	4ba1      	ldr	r3, [pc, #644]	; (8005c34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b0:	f003 0303 	and.w	r3, r3, #3
 80059b4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80059b6:	4b9f      	ldr	r3, [pc, #636]	; (8005c34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ba:	0d1b      	lsrs	r3, r3, #20
 80059bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059c0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80059c2:	4b9c      	ldr	r3, [pc, #624]	; (8005c34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c6:	0a1b      	lsrs	r3, r3, #8
 80059c8:	f003 0301 	and.w	r3, r3, #1
 80059cc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80059ce:	4b99      	ldr	r3, [pc, #612]	; (8005c34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059d2:	08db      	lsrs	r3, r3, #3
 80059d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80059d8:	693a      	ldr	r2, [r7, #16]
 80059da:	fb02 f303 	mul.w	r3, r2, r3
 80059de:	ee07 3a90 	vmov	s15, r3
 80059e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059e6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	f000 8111 	beq.w	8005c14 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80059f2:	69bb      	ldr	r3, [r7, #24]
 80059f4:	2b02      	cmp	r3, #2
 80059f6:	f000 8083 	beq.w	8005b00 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80059fa:	69bb      	ldr	r3, [r7, #24]
 80059fc:	2b02      	cmp	r3, #2
 80059fe:	f200 80a1 	bhi.w	8005b44 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005a02:	69bb      	ldr	r3, [r7, #24]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d003      	beq.n	8005a10 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005a08:	69bb      	ldr	r3, [r7, #24]
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d056      	beq.n	8005abc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005a0e:	e099      	b.n	8005b44 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a10:	4b88      	ldr	r3, [pc, #544]	; (8005c34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 0320 	and.w	r3, r3, #32
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d02d      	beq.n	8005a78 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005a1c:	4b85      	ldr	r3, [pc, #532]	; (8005c34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	08db      	lsrs	r3, r3, #3
 8005a22:	f003 0303 	and.w	r3, r3, #3
 8005a26:	4a84      	ldr	r2, [pc, #528]	; (8005c38 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005a28:	fa22 f303 	lsr.w	r3, r2, r3
 8005a2c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	ee07 3a90 	vmov	s15, r3
 8005a34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	ee07 3a90 	vmov	s15, r3
 8005a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a46:	4b7b      	ldr	r3, [pc, #492]	; (8005c34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a4e:	ee07 3a90 	vmov	s15, r3
 8005a52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a56:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a5a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005c3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005a5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a72:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005a76:	e087      	b.n	8005b88 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	ee07 3a90 	vmov	s15, r3
 8005a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a82:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005c40 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005a86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a8a:	4b6a      	ldr	r3, [pc, #424]	; (8005c34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a92:	ee07 3a90 	vmov	s15, r3
 8005a96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a9e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005c3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005aa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005aa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005aaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005aae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ab6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005aba:	e065      	b.n	8005b88 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	ee07 3a90 	vmov	s15, r3
 8005ac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ac6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005c44 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005aca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ace:	4b59      	ldr	r3, [pc, #356]	; (8005c34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ad6:	ee07 3a90 	vmov	s15, r3
 8005ada:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ade:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ae2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005c3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005ae6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005aea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005aee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005af2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005af6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005afa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005afe:	e043      	b.n	8005b88 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	ee07 3a90 	vmov	s15, r3
 8005b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b0a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005c48 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005b0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b12:	4b48      	ldr	r3, [pc, #288]	; (8005c34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b1a:	ee07 3a90 	vmov	s15, r3
 8005b1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b22:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b26:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005c3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005b2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b3e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005b42:	e021      	b.n	8005b88 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	ee07 3a90 	vmov	s15, r3
 8005b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b4e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005c44 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005b52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b56:	4b37      	ldr	r3, [pc, #220]	; (8005c34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b5e:	ee07 3a90 	vmov	s15, r3
 8005b62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b66:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b6a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005c3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005b6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b82:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005b86:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005b88:	4b2a      	ldr	r3, [pc, #168]	; (8005c34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b8c:	0a5b      	lsrs	r3, r3, #9
 8005b8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b92:	ee07 3a90 	vmov	s15, r3
 8005b96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ba2:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ba6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005baa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bae:	ee17 2a90 	vmov	r2, s15
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005bb6:	4b1f      	ldr	r3, [pc, #124]	; (8005c34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bba:	0c1b      	lsrs	r3, r3, #16
 8005bbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bc0:	ee07 3a90 	vmov	s15, r3
 8005bc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bc8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005bcc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005bd0:	edd7 6a07 	vldr	s13, [r7, #28]
 8005bd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005bd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bdc:	ee17 2a90 	vmov	r2, s15
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005be4:	4b13      	ldr	r3, [pc, #76]	; (8005c34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be8:	0e1b      	lsrs	r3, r3, #24
 8005bea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bee:	ee07 3a90 	vmov	s15, r3
 8005bf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bf6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005bfa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005bfe:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c0a:	ee17 2a90 	vmov	r2, s15
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005c12:	e008      	b.n	8005c26 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2200      	movs	r2, #0
 8005c18:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	609a      	str	r2, [r3, #8]
}
 8005c26:	bf00      	nop
 8005c28:	3724      	adds	r7, #36	; 0x24
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr
 8005c32:	bf00      	nop
 8005c34:	58024400 	.word	0x58024400
 8005c38:	03d09000 	.word	0x03d09000
 8005c3c:	46000000 	.word	0x46000000
 8005c40:	4c742400 	.word	0x4c742400
 8005c44:	4a742400 	.word	0x4a742400
 8005c48:	4bbebc20 	.word	0x4bbebc20

08005c4c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b089      	sub	sp, #36	; 0x24
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005c54:	4ba0      	ldr	r3, [pc, #640]	; (8005ed8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c58:	f003 0303 	and.w	r3, r3, #3
 8005c5c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8005c5e:	4b9e      	ldr	r3, [pc, #632]	; (8005ed8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c62:	091b      	lsrs	r3, r3, #4
 8005c64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c68:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8005c6a:	4b9b      	ldr	r3, [pc, #620]	; (8005ed8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c6e:	f003 0301 	and.w	r3, r3, #1
 8005c72:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005c74:	4b98      	ldr	r3, [pc, #608]	; (8005ed8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c78:	08db      	lsrs	r3, r3, #3
 8005c7a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005c7e:	693a      	ldr	r2, [r7, #16]
 8005c80:	fb02 f303 	mul.w	r3, r2, r3
 8005c84:	ee07 3a90 	vmov	s15, r3
 8005c88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c8c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	f000 8111 	beq.w	8005eba <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8005c98:	69bb      	ldr	r3, [r7, #24]
 8005c9a:	2b02      	cmp	r3, #2
 8005c9c:	f000 8083 	beq.w	8005da6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8005ca0:	69bb      	ldr	r3, [r7, #24]
 8005ca2:	2b02      	cmp	r3, #2
 8005ca4:	f200 80a1 	bhi.w	8005dea <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8005ca8:	69bb      	ldr	r3, [r7, #24]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d003      	beq.n	8005cb6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8005cae:	69bb      	ldr	r3, [r7, #24]
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d056      	beq.n	8005d62 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8005cb4:	e099      	b.n	8005dea <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005cb6:	4b88      	ldr	r3, [pc, #544]	; (8005ed8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f003 0320 	and.w	r3, r3, #32
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d02d      	beq.n	8005d1e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005cc2:	4b85      	ldr	r3, [pc, #532]	; (8005ed8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	08db      	lsrs	r3, r3, #3
 8005cc8:	f003 0303 	and.w	r3, r3, #3
 8005ccc:	4a83      	ldr	r2, [pc, #524]	; (8005edc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8005cce:	fa22 f303 	lsr.w	r3, r2, r3
 8005cd2:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	ee07 3a90 	vmov	s15, r3
 8005cda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	ee07 3a90 	vmov	s15, r3
 8005ce4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ce8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cec:	4b7a      	ldr	r3, [pc, #488]	; (8005ed8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cf4:	ee07 3a90 	vmov	s15, r3
 8005cf8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cfc:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d00:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005ee0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005d04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d18:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005d1c:	e087      	b.n	8005e2e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	ee07 3a90 	vmov	s15, r3
 8005d24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d28:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8005ee4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005d2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d30:	4b69      	ldr	r3, [pc, #420]	; (8005ed8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d38:	ee07 3a90 	vmov	s15, r3
 8005d3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d40:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d44:	eddf 5a66 	vldr	s11, [pc, #408]	; 8005ee0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005d48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d5c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d60:	e065      	b.n	8005e2e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	ee07 3a90 	vmov	s15, r3
 8005d68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d6c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8005ee8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8005d70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d74:	4b58      	ldr	r3, [pc, #352]	; (8005ed8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d7c:	ee07 3a90 	vmov	s15, r3
 8005d80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d84:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d88:	eddf 5a55 	vldr	s11, [pc, #340]	; 8005ee0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005d8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005da0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005da4:	e043      	b.n	8005e2e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	ee07 3a90 	vmov	s15, r3
 8005dac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005db0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005eec <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8005db4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005db8:	4b47      	ldr	r3, [pc, #284]	; (8005ed8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dc0:	ee07 3a90 	vmov	s15, r3
 8005dc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dc8:	ed97 6a03 	vldr	s12, [r7, #12]
 8005dcc:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005ee0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005dd0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dd4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dd8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ddc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005de0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005de4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005de8:	e021      	b.n	8005e2e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	ee07 3a90 	vmov	s15, r3
 8005df0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005df4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8005ee4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005df8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dfc:	4b36      	ldr	r3, [pc, #216]	; (8005ed8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e04:	ee07 3a90 	vmov	s15, r3
 8005e08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e0c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e10:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005ee0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005e14:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e18:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e1c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e20:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e28:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005e2c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8005e2e:	4b2a      	ldr	r3, [pc, #168]	; (8005ed8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e32:	0a5b      	lsrs	r3, r3, #9
 8005e34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e38:	ee07 3a90 	vmov	s15, r3
 8005e3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e40:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e44:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e48:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e54:	ee17 2a90 	vmov	r2, s15
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8005e5c:	4b1e      	ldr	r3, [pc, #120]	; (8005ed8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e60:	0c1b      	lsrs	r3, r3, #16
 8005e62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e66:	ee07 3a90 	vmov	s15, r3
 8005e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e76:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e82:	ee17 2a90 	vmov	r2, s15
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8005e8a:	4b13      	ldr	r3, [pc, #76]	; (8005ed8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e8e:	0e1b      	lsrs	r3, r3, #24
 8005e90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e94:	ee07 3a90 	vmov	s15, r3
 8005e98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ea0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ea4:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ea8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005eac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005eb0:	ee17 2a90 	vmov	r2, s15
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005eb8:	e008      	b.n	8005ecc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	609a      	str	r2, [r3, #8]
}
 8005ecc:	bf00      	nop
 8005ece:	3724      	adds	r7, #36	; 0x24
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr
 8005ed8:	58024400 	.word	0x58024400
 8005edc:	03d09000 	.word	0x03d09000
 8005ee0:	46000000 	.word	0x46000000
 8005ee4:	4c742400 	.word	0x4c742400
 8005ee8:	4a742400 	.word	0x4a742400
 8005eec:	4bbebc20 	.word	0x4bbebc20

08005ef0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b084      	sub	sp, #16
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005efa:	2300      	movs	r3, #0
 8005efc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005efe:	4b53      	ldr	r3, [pc, #332]	; (800604c <RCCEx_PLL2_Config+0x15c>)
 8005f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f02:	f003 0303 	and.w	r3, r3, #3
 8005f06:	2b03      	cmp	r3, #3
 8005f08:	d101      	bne.n	8005f0e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e099      	b.n	8006042 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005f0e:	4b4f      	ldr	r3, [pc, #316]	; (800604c <RCCEx_PLL2_Config+0x15c>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a4e      	ldr	r2, [pc, #312]	; (800604c <RCCEx_PLL2_Config+0x15c>)
 8005f14:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005f18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f1a:	f7fa fbad 	bl	8000678 <HAL_GetTick>
 8005f1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005f20:	e008      	b.n	8005f34 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005f22:	f7fa fba9 	bl	8000678 <HAL_GetTick>
 8005f26:	4602      	mov	r2, r0
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	1ad3      	subs	r3, r2, r3
 8005f2c:	2b02      	cmp	r3, #2
 8005f2e:	d901      	bls.n	8005f34 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005f30:	2303      	movs	r3, #3
 8005f32:	e086      	b.n	8006042 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005f34:	4b45      	ldr	r3, [pc, #276]	; (800604c <RCCEx_PLL2_Config+0x15c>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d1f0      	bne.n	8005f22 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005f40:	4b42      	ldr	r3, [pc, #264]	; (800604c <RCCEx_PLL2_Config+0x15c>)
 8005f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f44:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	031b      	lsls	r3, r3, #12
 8005f4e:	493f      	ldr	r1, [pc, #252]	; (800604c <RCCEx_PLL2_Config+0x15c>)
 8005f50:	4313      	orrs	r3, r2
 8005f52:	628b      	str	r3, [r1, #40]	; 0x28
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	3b01      	subs	r3, #1
 8005f5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	3b01      	subs	r3, #1
 8005f64:	025b      	lsls	r3, r3, #9
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	431a      	orrs	r2, r3
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	68db      	ldr	r3, [r3, #12]
 8005f6e:	3b01      	subs	r3, #1
 8005f70:	041b      	lsls	r3, r3, #16
 8005f72:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005f76:	431a      	orrs	r2, r3
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	691b      	ldr	r3, [r3, #16]
 8005f7c:	3b01      	subs	r3, #1
 8005f7e:	061b      	lsls	r3, r3, #24
 8005f80:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005f84:	4931      	ldr	r1, [pc, #196]	; (800604c <RCCEx_PLL2_Config+0x15c>)
 8005f86:	4313      	orrs	r3, r2
 8005f88:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005f8a:	4b30      	ldr	r3, [pc, #192]	; (800604c <RCCEx_PLL2_Config+0x15c>)
 8005f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f8e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	695b      	ldr	r3, [r3, #20]
 8005f96:	492d      	ldr	r1, [pc, #180]	; (800604c <RCCEx_PLL2_Config+0x15c>)
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005f9c:	4b2b      	ldr	r3, [pc, #172]	; (800604c <RCCEx_PLL2_Config+0x15c>)
 8005f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa0:	f023 0220 	bic.w	r2, r3, #32
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	699b      	ldr	r3, [r3, #24]
 8005fa8:	4928      	ldr	r1, [pc, #160]	; (800604c <RCCEx_PLL2_Config+0x15c>)
 8005faa:	4313      	orrs	r3, r2
 8005fac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005fae:	4b27      	ldr	r3, [pc, #156]	; (800604c <RCCEx_PLL2_Config+0x15c>)
 8005fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb2:	4a26      	ldr	r2, [pc, #152]	; (800604c <RCCEx_PLL2_Config+0x15c>)
 8005fb4:	f023 0310 	bic.w	r3, r3, #16
 8005fb8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005fba:	4b24      	ldr	r3, [pc, #144]	; (800604c <RCCEx_PLL2_Config+0x15c>)
 8005fbc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005fbe:	4b24      	ldr	r3, [pc, #144]	; (8006050 <RCCEx_PLL2_Config+0x160>)
 8005fc0:	4013      	ands	r3, r2
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	69d2      	ldr	r2, [r2, #28]
 8005fc6:	00d2      	lsls	r2, r2, #3
 8005fc8:	4920      	ldr	r1, [pc, #128]	; (800604c <RCCEx_PLL2_Config+0x15c>)
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005fce:	4b1f      	ldr	r3, [pc, #124]	; (800604c <RCCEx_PLL2_Config+0x15c>)
 8005fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd2:	4a1e      	ldr	r2, [pc, #120]	; (800604c <RCCEx_PLL2_Config+0x15c>)
 8005fd4:	f043 0310 	orr.w	r3, r3, #16
 8005fd8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d106      	bne.n	8005fee <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005fe0:	4b1a      	ldr	r3, [pc, #104]	; (800604c <RCCEx_PLL2_Config+0x15c>)
 8005fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe4:	4a19      	ldr	r2, [pc, #100]	; (800604c <RCCEx_PLL2_Config+0x15c>)
 8005fe6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005fea:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005fec:	e00f      	b.n	800600e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d106      	bne.n	8006002 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005ff4:	4b15      	ldr	r3, [pc, #84]	; (800604c <RCCEx_PLL2_Config+0x15c>)
 8005ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff8:	4a14      	ldr	r2, [pc, #80]	; (800604c <RCCEx_PLL2_Config+0x15c>)
 8005ffa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ffe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006000:	e005      	b.n	800600e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006002:	4b12      	ldr	r3, [pc, #72]	; (800604c <RCCEx_PLL2_Config+0x15c>)
 8006004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006006:	4a11      	ldr	r2, [pc, #68]	; (800604c <RCCEx_PLL2_Config+0x15c>)
 8006008:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800600c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800600e:	4b0f      	ldr	r3, [pc, #60]	; (800604c <RCCEx_PLL2_Config+0x15c>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a0e      	ldr	r2, [pc, #56]	; (800604c <RCCEx_PLL2_Config+0x15c>)
 8006014:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006018:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800601a:	f7fa fb2d 	bl	8000678 <HAL_GetTick>
 800601e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006020:	e008      	b.n	8006034 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006022:	f7fa fb29 	bl	8000678 <HAL_GetTick>
 8006026:	4602      	mov	r2, r0
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	1ad3      	subs	r3, r2, r3
 800602c:	2b02      	cmp	r3, #2
 800602e:	d901      	bls.n	8006034 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006030:	2303      	movs	r3, #3
 8006032:	e006      	b.n	8006042 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006034:	4b05      	ldr	r3, [pc, #20]	; (800604c <RCCEx_PLL2_Config+0x15c>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800603c:	2b00      	cmp	r3, #0
 800603e:	d0f0      	beq.n	8006022 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006040:	7bfb      	ldrb	r3, [r7, #15]
}
 8006042:	4618      	mov	r0, r3
 8006044:	3710      	adds	r7, #16
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
 800604a:	bf00      	nop
 800604c:	58024400 	.word	0x58024400
 8006050:	ffff0007 	.word	0xffff0007

08006054 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b084      	sub	sp, #16
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
 800605c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800605e:	2300      	movs	r3, #0
 8006060:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006062:	4b53      	ldr	r3, [pc, #332]	; (80061b0 <RCCEx_PLL3_Config+0x15c>)
 8006064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006066:	f003 0303 	and.w	r3, r3, #3
 800606a:	2b03      	cmp	r3, #3
 800606c:	d101      	bne.n	8006072 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	e099      	b.n	80061a6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006072:	4b4f      	ldr	r3, [pc, #316]	; (80061b0 <RCCEx_PLL3_Config+0x15c>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a4e      	ldr	r2, [pc, #312]	; (80061b0 <RCCEx_PLL3_Config+0x15c>)
 8006078:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800607c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800607e:	f7fa fafb 	bl	8000678 <HAL_GetTick>
 8006082:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006084:	e008      	b.n	8006098 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006086:	f7fa faf7 	bl	8000678 <HAL_GetTick>
 800608a:	4602      	mov	r2, r0
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	1ad3      	subs	r3, r2, r3
 8006090:	2b02      	cmp	r3, #2
 8006092:	d901      	bls.n	8006098 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006094:	2303      	movs	r3, #3
 8006096:	e086      	b.n	80061a6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006098:	4b45      	ldr	r3, [pc, #276]	; (80061b0 <RCCEx_PLL3_Config+0x15c>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d1f0      	bne.n	8006086 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80060a4:	4b42      	ldr	r3, [pc, #264]	; (80061b0 <RCCEx_PLL3_Config+0x15c>)
 80060a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060a8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	051b      	lsls	r3, r3, #20
 80060b2:	493f      	ldr	r1, [pc, #252]	; (80061b0 <RCCEx_PLL3_Config+0x15c>)
 80060b4:	4313      	orrs	r3, r2
 80060b6:	628b      	str	r3, [r1, #40]	; 0x28
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	3b01      	subs	r3, #1
 80060be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	3b01      	subs	r3, #1
 80060c8:	025b      	lsls	r3, r3, #9
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	431a      	orrs	r2, r3
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	68db      	ldr	r3, [r3, #12]
 80060d2:	3b01      	subs	r3, #1
 80060d4:	041b      	lsls	r3, r3, #16
 80060d6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80060da:	431a      	orrs	r2, r3
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	691b      	ldr	r3, [r3, #16]
 80060e0:	3b01      	subs	r3, #1
 80060e2:	061b      	lsls	r3, r3, #24
 80060e4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80060e8:	4931      	ldr	r1, [pc, #196]	; (80061b0 <RCCEx_PLL3_Config+0x15c>)
 80060ea:	4313      	orrs	r3, r2
 80060ec:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80060ee:	4b30      	ldr	r3, [pc, #192]	; (80061b0 <RCCEx_PLL3_Config+0x15c>)
 80060f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	695b      	ldr	r3, [r3, #20]
 80060fa:	492d      	ldr	r1, [pc, #180]	; (80061b0 <RCCEx_PLL3_Config+0x15c>)
 80060fc:	4313      	orrs	r3, r2
 80060fe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006100:	4b2b      	ldr	r3, [pc, #172]	; (80061b0 <RCCEx_PLL3_Config+0x15c>)
 8006102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006104:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	699b      	ldr	r3, [r3, #24]
 800610c:	4928      	ldr	r1, [pc, #160]	; (80061b0 <RCCEx_PLL3_Config+0x15c>)
 800610e:	4313      	orrs	r3, r2
 8006110:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006112:	4b27      	ldr	r3, [pc, #156]	; (80061b0 <RCCEx_PLL3_Config+0x15c>)
 8006114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006116:	4a26      	ldr	r2, [pc, #152]	; (80061b0 <RCCEx_PLL3_Config+0x15c>)
 8006118:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800611c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800611e:	4b24      	ldr	r3, [pc, #144]	; (80061b0 <RCCEx_PLL3_Config+0x15c>)
 8006120:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006122:	4b24      	ldr	r3, [pc, #144]	; (80061b4 <RCCEx_PLL3_Config+0x160>)
 8006124:	4013      	ands	r3, r2
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	69d2      	ldr	r2, [r2, #28]
 800612a:	00d2      	lsls	r2, r2, #3
 800612c:	4920      	ldr	r1, [pc, #128]	; (80061b0 <RCCEx_PLL3_Config+0x15c>)
 800612e:	4313      	orrs	r3, r2
 8006130:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006132:	4b1f      	ldr	r3, [pc, #124]	; (80061b0 <RCCEx_PLL3_Config+0x15c>)
 8006134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006136:	4a1e      	ldr	r2, [pc, #120]	; (80061b0 <RCCEx_PLL3_Config+0x15c>)
 8006138:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800613c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d106      	bne.n	8006152 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006144:	4b1a      	ldr	r3, [pc, #104]	; (80061b0 <RCCEx_PLL3_Config+0x15c>)
 8006146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006148:	4a19      	ldr	r2, [pc, #100]	; (80061b0 <RCCEx_PLL3_Config+0x15c>)
 800614a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800614e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006150:	e00f      	b.n	8006172 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	2b01      	cmp	r3, #1
 8006156:	d106      	bne.n	8006166 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006158:	4b15      	ldr	r3, [pc, #84]	; (80061b0 <RCCEx_PLL3_Config+0x15c>)
 800615a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800615c:	4a14      	ldr	r2, [pc, #80]	; (80061b0 <RCCEx_PLL3_Config+0x15c>)
 800615e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006162:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006164:	e005      	b.n	8006172 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006166:	4b12      	ldr	r3, [pc, #72]	; (80061b0 <RCCEx_PLL3_Config+0x15c>)
 8006168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800616a:	4a11      	ldr	r2, [pc, #68]	; (80061b0 <RCCEx_PLL3_Config+0x15c>)
 800616c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006170:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006172:	4b0f      	ldr	r3, [pc, #60]	; (80061b0 <RCCEx_PLL3_Config+0x15c>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a0e      	ldr	r2, [pc, #56]	; (80061b0 <RCCEx_PLL3_Config+0x15c>)
 8006178:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800617c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800617e:	f7fa fa7b 	bl	8000678 <HAL_GetTick>
 8006182:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006184:	e008      	b.n	8006198 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006186:	f7fa fa77 	bl	8000678 <HAL_GetTick>
 800618a:	4602      	mov	r2, r0
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	1ad3      	subs	r3, r2, r3
 8006190:	2b02      	cmp	r3, #2
 8006192:	d901      	bls.n	8006198 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006194:	2303      	movs	r3, #3
 8006196:	e006      	b.n	80061a6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006198:	4b05      	ldr	r3, [pc, #20]	; (80061b0 <RCCEx_PLL3_Config+0x15c>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d0f0      	beq.n	8006186 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80061a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3710      	adds	r7, #16
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}
 80061ae:	bf00      	nop
 80061b0:	58024400 	.word	0x58024400
 80061b4:	ffff0007 	.word	0xffff0007

080061b8 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b086      	sub	sp, #24
 80061bc:	af00      	add	r7, sp, #0
 80061be:	60f8      	str	r0, [r7, #12]
 80061c0:	60b9      	str	r1, [r7, #8]
 80061c2:	607a      	str	r2, [r7, #4]
 80061c4:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	2b02      	cmp	r3, #2
 80061ca:	d904      	bls.n	80061d6 <HAL_SAI_InitProtocol+0x1e>
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	3b03      	subs	r3, #3
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	d812      	bhi.n	80061fa <HAL_SAI_InitProtocol+0x42>
 80061d4:	e008      	b.n	80061e8 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	68b9      	ldr	r1, [r7, #8]
 80061dc:	68f8      	ldr	r0, [r7, #12]
 80061de:	f000 fac5 	bl	800676c <SAI_InitI2S>
 80061e2:	4603      	mov	r3, r0
 80061e4:	75fb      	strb	r3, [r7, #23]
      break;
 80061e6:	e00b      	b.n	8006200 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	687a      	ldr	r2, [r7, #4]
 80061ec:	68b9      	ldr	r1, [r7, #8]
 80061ee:	68f8      	ldr	r0, [r7, #12]
 80061f0:	f000 fb6e 	bl	80068d0 <SAI_InitPCM>
 80061f4:	4603      	mov	r3, r0
 80061f6:	75fb      	strb	r3, [r7, #23]
      break;
 80061f8:	e002      	b.n	8006200 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	75fb      	strb	r3, [r7, #23]
      break;
 80061fe:	bf00      	nop
  }

  if (status == HAL_OK)
 8006200:	7dfb      	ldrb	r3, [r7, #23]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d104      	bne.n	8006210 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 8006206:	68f8      	ldr	r0, [r7, #12]
 8006208:	f000 f808 	bl	800621c <HAL_SAI_Init>
 800620c:	4603      	mov	r3, r0
 800620e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006210:	7dfb      	ldrb	r3, [r7, #23]
}
 8006212:	4618      	mov	r0, r3
 8006214:	3718      	adds	r7, #24
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}
	...

0800621c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b08a      	sub	sp, #40	; 0x28
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d101      	bne.n	800622e <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800622a:	2301      	movs	r3, #1
 800622c:	e1fb      	b.n	8006626 <HAL_SAI_Init+0x40a>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006234:	2b01      	cmp	r3, #1
 8006236:	d113      	bne.n	8006260 <HAL_SAI_Init+0x44>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a96      	ldr	r2, [pc, #600]	; (8006498 <HAL_SAI_Init+0x27c>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d004      	beq.n	800624c <HAL_SAI_Init+0x30>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a95      	ldr	r2, [pc, #596]	; (800649c <HAL_SAI_Init+0x280>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d107      	bne.n	800625c <HAL_SAI_Init+0x40>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8006250:	2b01      	cmp	r3, #1
 8006252:	d103      	bne.n	800625c <HAL_SAI_Init+0x40>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8006258:	2b00      	cmp	r3, #0
 800625a:	d001      	beq.n	8006260 <HAL_SAI_Init+0x44>
    {
      return HAL_ERROR;
 800625c:	2301      	movs	r3, #1
 800625e:	e1e2      	b.n	8006626 <HAL_SAI_Init+0x40a>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a8c      	ldr	r2, [pc, #560]	; (8006498 <HAL_SAI_Init+0x27c>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d004      	beq.n	8006274 <HAL_SAI_Init+0x58>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a8c      	ldr	r2, [pc, #560]	; (80064a0 <HAL_SAI_Init+0x284>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d102      	bne.n	800627a <HAL_SAI_Init+0x5e>
  {
    SaiBaseAddress = SAI1;
 8006274:	4b8b      	ldr	r3, [pc, #556]	; (80064a4 <HAL_SAI_Init+0x288>)
 8006276:	61bb      	str	r3, [r7, #24]
 8006278:	e00e      	b.n	8006298 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI3;
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a87      	ldr	r2, [pc, #540]	; (800649c <HAL_SAI_Init+0x280>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d004      	beq.n	800628e <HAL_SAI_Init+0x72>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a87      	ldr	r2, [pc, #540]	; (80064a8 <HAL_SAI_Init+0x28c>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d102      	bne.n	8006294 <HAL_SAI_Init+0x78>
  {
    SaiBaseAddress = SAI4;
 800628e:	4b87      	ldr	r3, [pc, #540]	; (80064ac <HAL_SAI_Init+0x290>)
 8006290:	61bb      	str	r3, [r7, #24]
 8006292:	e001      	b.n	8006298 <HAL_SAI_Init+0x7c>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	e1c6      	b.n	8006626 <HAL_SAI_Init+0x40a>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800629e:	b2db      	uxtb	r3, r3
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d106      	bne.n	80062b2 <HAL_SAI_Init+0x96>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2200      	movs	r2, #0
 80062a8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f000 fef5 	bl	800709c <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f000 fbc6 	bl	8006a44 <SAI_Disable>
 80062b8:	4603      	mov	r3, r0
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d001      	beq.n	80062c2 <HAL_SAI_Init+0xa6>
  {
    return HAL_ERROR;
 80062be:	2301      	movs	r3, #1
 80062c0:	e1b1      	b.n	8006626 <HAL_SAI_Init+0x40a>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2202      	movs	r2, #2
 80062c6:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	68db      	ldr	r3, [r3, #12]
 80062ce:	2b02      	cmp	r3, #2
 80062d0:	d00c      	beq.n	80062ec <HAL_SAI_Init+0xd0>
 80062d2:	2b02      	cmp	r3, #2
 80062d4:	d80d      	bhi.n	80062f2 <HAL_SAI_Init+0xd6>
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d002      	beq.n	80062e0 <HAL_SAI_Init+0xc4>
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d003      	beq.n	80062e6 <HAL_SAI_Init+0xca>
 80062de:	e008      	b.n	80062f2 <HAL_SAI_Init+0xd6>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 80062e0:	2300      	movs	r3, #0
 80062e2:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80062e4:	e008      	b.n	80062f8 <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80062e6:	2310      	movs	r3, #16
 80062e8:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80062ea:	e005      	b.n	80062f8 <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80062ec:	2320      	movs	r3, #32
 80062ee:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80062f0:	e002      	b.n	80062f8 <HAL_SAI_Init+0xdc>
    default:
      tmpregisterGCR = 0;
 80062f2:	2300      	movs	r3, #0
 80062f4:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80062f6:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	2b05      	cmp	r3, #5
 80062fe:	d822      	bhi.n	8006346 <HAL_SAI_Init+0x12a>
 8006300:	a201      	add	r2, pc, #4	; (adr r2, 8006308 <HAL_SAI_Init+0xec>)
 8006302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006306:	bf00      	nop
 8006308:	08006321 	.word	0x08006321
 800630c:	08006327 	.word	0x08006327
 8006310:	0800632f 	.word	0x0800632f
 8006314:	08006347 	.word	0x08006347
 8006318:	08006347 	.word	0x08006347
 800631c:	08006337 	.word	0x08006337
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8006320:	2300      	movs	r3, #0
 8006322:	61fb      	str	r3, [r7, #28]
      break;
 8006324:	e012      	b.n	800634c <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8006326:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800632a:	61fb      	str	r3, [r7, #28]
      break;
 800632c:	e00e      	b.n	800634c <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800632e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006332:	61fb      	str	r3, [r7, #28]
      break;
 8006334:	e00a      	b.n	800634c <HAL_SAI_Init+0x130>
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
      break;
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8006336:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800633a:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 800633c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633e:	f043 0303 	orr.w	r3, r3, #3
 8006342:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006344:	e002      	b.n	800634c <HAL_SAI_Init+0x130>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 8006346:	2300      	movs	r3, #0
 8006348:	61fb      	str	r3, [r7, #28]
      break;
 800634a:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 800634c:	69bb      	ldr	r3, [r7, #24]
 800634e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006350:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6a1b      	ldr	r3, [r3, #32]
 8006356:	2b00      	cmp	r3, #0
 8006358:	f000 8084 	beq.w	8006464 <HAL_SAI_Init+0x248>
  {
    uint32_t freq = 0;
 800635c:	2300      	movs	r3, #0
 800635e:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a4c      	ldr	r2, [pc, #304]	; (8006498 <HAL_SAI_Init+0x27c>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d004      	beq.n	8006374 <HAL_SAI_Init+0x158>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a4c      	ldr	r2, [pc, #304]	; (80064a0 <HAL_SAI_Init+0x284>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d104      	bne.n	800637e <HAL_SAI_Init+0x162>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8006374:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006378:	f7fe fd86 	bl	8004e88 <HAL_RCCEx_GetPeriphCLKFreq>
 800637c:	6178      	str	r0, [r7, #20]
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a46      	ldr	r2, [pc, #280]	; (800649c <HAL_SAI_Init+0x280>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d104      	bne.n	8006392 <HAL_SAI_Init+0x176>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8006388:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800638c:	f7fe fd7c 	bl	8004e88 <HAL_RCCEx_GetPeriphCLKFreq>
 8006390:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a44      	ldr	r2, [pc, #272]	; (80064a8 <HAL_SAI_Init+0x28c>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d104      	bne.n	80063a6 <HAL_SAI_Init+0x18a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 800639c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80063a0:	f7fe fd72 	bl	8004e88 <HAL_RCCEx_GetPeriphCLKFreq>
 80063a4:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	699b      	ldr	r3, [r3, #24]
 80063aa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80063ae:	d120      	bne.n	80063f2 <HAL_SAI_Init+0x1d6>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063b4:	2b04      	cmp	r3, #4
 80063b6:	d102      	bne.n	80063be <HAL_SAI_Init+0x1a2>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 80063b8:	2340      	movs	r3, #64	; 0x40
 80063ba:	60fb      	str	r3, [r7, #12]
 80063bc:	e00a      	b.n	80063d4 <HAL_SAI_Init+0x1b8>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063c2:	2b08      	cmp	r3, #8
 80063c4:	d103      	bne.n	80063ce <HAL_SAI_Init+0x1b2>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 80063c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80063ca:	60fb      	str	r3, [r7, #12]
 80063cc:	e002      	b.n	80063d4 <HAL_SAI_Init+0x1b8>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063d2:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 80063d4:	697a      	ldr	r2, [r7, #20]
 80063d6:	4613      	mov	r3, r2
 80063d8:	009b      	lsls	r3, r3, #2
 80063da:	4413      	add	r3, r2
 80063dc:	005b      	lsls	r3, r3, #1
 80063de:	4619      	mov	r1, r3
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6a1b      	ldr	r3, [r3, #32]
 80063e4:	68fa      	ldr	r2, [r7, #12]
 80063e6:	fb02 f303 	mul.w	r3, r2, r3
 80063ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80063ee:	613b      	str	r3, [r7, #16]
 80063f0:	e017      	b.n	8006422 <HAL_SAI_Init+0x206>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063f6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80063fa:	d101      	bne.n	8006400 <HAL_SAI_Init+0x1e4>
 80063fc:	2302      	movs	r3, #2
 80063fe:	e000      	b.n	8006402 <HAL_SAI_Init+0x1e6>
 8006400:	2301      	movs	r3, #1
 8006402:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8006404:	697a      	ldr	r2, [r7, #20]
 8006406:	4613      	mov	r3, r2
 8006408:	009b      	lsls	r3, r3, #2
 800640a:	4413      	add	r3, r2
 800640c:	005b      	lsls	r3, r3, #1
 800640e:	4619      	mov	r1, r3
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6a1b      	ldr	r3, [r3, #32]
 8006414:	68ba      	ldr	r2, [r7, #8]
 8006416:	fb02 f303 	mul.w	r3, r2, r3
 800641a:	021b      	lsls	r3, r3, #8
 800641c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006420:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	4a22      	ldr	r2, [pc, #136]	; (80064b0 <HAL_SAI_Init+0x294>)
 8006426:	fba2 2303 	umull	r2, r3, r2, r3
 800642a:	08da      	lsrs	r2, r3, #3
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8006430:	6939      	ldr	r1, [r7, #16]
 8006432:	4b1f      	ldr	r3, [pc, #124]	; (80064b0 <HAL_SAI_Init+0x294>)
 8006434:	fba3 2301 	umull	r2, r3, r3, r1
 8006438:	08da      	lsrs	r2, r3, #3
 800643a:	4613      	mov	r3, r2
 800643c:	009b      	lsls	r3, r3, #2
 800643e:	4413      	add	r3, r2
 8006440:	005b      	lsls	r3, r3, #1
 8006442:	1aca      	subs	r2, r1, r3
 8006444:	2a08      	cmp	r2, #8
 8006446:	d904      	bls.n	8006452 <HAL_SAI_Init+0x236>
    {
      hsai->Init.Mckdiv += 1U;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800644c:	1c5a      	adds	r2, r3, #1
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006456:	2b04      	cmp	r3, #4
 8006458:	d104      	bne.n	8006464 <HAL_SAI_Init+0x248>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800645e:	085a      	lsrs	r2, r3, #1
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d003      	beq.n	8006474 <HAL_SAI_Init+0x258>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	2b02      	cmp	r3, #2
 8006472:	d109      	bne.n	8006488 <HAL_SAI_Init+0x26c>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006478:	2b01      	cmp	r3, #1
 800647a:	d101      	bne.n	8006480 <HAL_SAI_Init+0x264>
 800647c:	2300      	movs	r3, #0
 800647e:	e001      	b.n	8006484 <HAL_SAI_Init+0x268>
 8006480:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006484:	623b      	str	r3, [r7, #32]
 8006486:	e017      	b.n	80064b8 <HAL_SAI_Init+0x29c>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800648c:	2b01      	cmp	r3, #1
 800648e:	d111      	bne.n	80064b4 <HAL_SAI_Init+0x298>
 8006490:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006494:	e00f      	b.n	80064b6 <HAL_SAI_Init+0x29a>
 8006496:	bf00      	nop
 8006498:	40015804 	.word	0x40015804
 800649c:	58005404 	.word	0x58005404
 80064a0:	40015824 	.word	0x40015824
 80064a4:	40015800 	.word	0x40015800
 80064a8:	58005424 	.word	0x58005424
 80064ac:	58005400 	.word	0x58005400
 80064b0:	cccccccd 	.word	0xcccccccd
 80064b4:	2300      	movs	r3, #0
 80064b6:	623b      	str	r3, [r7, #32]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                            hsai->Init.MckOverSampling);
  }
#else /* SAI_VER_V2_1*/
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	6819      	ldr	r1, [r3, #0]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	4b5b      	ldr	r3, [pc, #364]	; (8006630 <HAL_SAI_Init+0x414>)
 80064c4:	400b      	ands	r3, r1
 80064c6:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	6819      	ldr	r1, [r3, #0]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	685a      	ldr	r2, [r3, #4]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064d6:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80064dc:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064e2:	431a      	orrs	r2, r3
 80064e4:	6a3b      	ldr	r3, [r7, #32]
 80064e6:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 80064e8:	69fb      	ldr	r3, [r7, #28]
 80064ea:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                          ckstr_bits | syncen_bits |                             \
 80064f0:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	695b      	ldr	r3, [r3, #20]
 80064f6:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80064fc:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006502:	051b      	lsls	r3, r3, #20
 8006504:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800650a:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	691b      	ldr	r3, [r3, #16]
 8006510:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	430a      	orrs	r2, r1
 8006518:	601a      	str	r2, [r3, #0]
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	6859      	ldr	r1, [r3, #4]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	4b43      	ldr	r3, [pc, #268]	; (8006634 <HAL_SAI_Init+0x418>)
 8006526:	400b      	ands	r3, r1
 8006528:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	6859      	ldr	r1, [r3, #4]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	69da      	ldr	r2, [r3, #28]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006538:	431a      	orrs	r2, r3
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800653e:	431a      	orrs	r2, r3
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	430a      	orrs	r2, r1
 8006546:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	6899      	ldr	r1, [r3, #8]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	4b39      	ldr	r3, [pc, #228]	; (8006638 <HAL_SAI_Init+0x41c>)
 8006554:	400b      	ands	r3, r1
 8006556:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	6899      	ldr	r1, [r3, #8]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006562:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006568:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 800656e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 8006574:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800657a:	3b01      	subs	r3, #1
 800657c:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800657e:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	430a      	orrs	r2, r1
 8006586:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	68d9      	ldr	r1, [r3, #12]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	f24f 0320 	movw	r3, #61472	; 0xf020
 8006596:	400b      	ands	r3, r1
 8006598:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	68d9      	ldr	r1, [r3, #12]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065a8:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065ae:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80065b0:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065b6:	3b01      	subs	r3, #1
 80065b8:	021b      	lsls	r3, r3, #8
 80065ba:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	430a      	orrs	r2, r1
 80065c2:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a1c      	ldr	r2, [pc, #112]	; (800663c <HAL_SAI_Init+0x420>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d004      	beq.n	80065d8 <HAL_SAI_Init+0x3bc>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a1b      	ldr	r2, [pc, #108]	; (8006640 <HAL_SAI_Init+0x424>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d119      	bne.n	800660c <HAL_SAI_Init+0x3f0>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 80065d8:	69bb      	ldr	r3, [r7, #24]
 80065da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065dc:	f023 0201 	bic.w	r2, r3, #1
 80065e0:	69bb      	ldr	r3, [r7, #24]
 80065e2:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	d10e      	bne.n	800660c <HAL_SAI_Init+0x3f0>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065f6:	3b01      	subs	r3, #1
 80065f8:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80065fa:	431a      	orrs	r2, r3
 80065fc:	69bb      	ldr	r3, [r7, #24]
 80065fe:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 8006600:	69bb      	ldr	r3, [r7, #24]
 8006602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006604:	f043 0201 	orr.w	r2, r3, #1
 8006608:	69bb      	ldr	r3, [r7, #24]
 800660a:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2200      	movs	r2, #0
 8006610:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2201      	movs	r2, #1
 8006618:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2200      	movs	r2, #0
 8006620:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 8006624:	2300      	movs	r3, #0
}
 8006626:	4618      	mov	r0, r3
 8006628:	3728      	adds	r7, #40	; 0x28
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}
 800662e:	bf00      	nop
 8006630:	f005c010 	.word	0xf005c010
 8006634:	ffff1ff0 	.word	0xffff1ff0
 8006638:	fff88000 	.word	0xfff88000
 800663c:	40015804 	.word	0x40015804
 8006640:	58005404 	.word	0x58005404

08006644 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b084      	sub	sp, #16
 8006648:	af00      	add	r7, sp, #0
 800664a:	60f8      	str	r0, [r7, #12]
 800664c:	60b9      	str	r1, [r7, #8]
 800664e:	4613      	mov	r3, r2
 8006650:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d002      	beq.n	800665e <HAL_SAI_Receive_DMA+0x1a>
 8006658:	88fb      	ldrh	r3, [r7, #6]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d101      	bne.n	8006662 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800665e:	2301      	movs	r3, #1
 8006660:	e079      	b.n	8006756 <HAL_SAI_Receive_DMA+0x112>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8006668:	b2db      	uxtb	r3, r3
 800666a:	2b01      	cmp	r3, #1
 800666c:	d172      	bne.n	8006754 <HAL_SAI_Receive_DMA+0x110>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8006674:	2b01      	cmp	r3, #1
 8006676:	d101      	bne.n	800667c <HAL_SAI_Receive_DMA+0x38>
 8006678:	2302      	movs	r3, #2
 800667a:	e06c      	b.n	8006756 <HAL_SAI_Receive_DMA+0x112>
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2201      	movs	r2, #1
 8006680:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	68ba      	ldr	r2, [r7, #8]
 8006688:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	88fa      	ldrh	r2, [r7, #6]
 800668e:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	88fa      	ldrh	r2, [r7, #6]
 8006696:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2200      	movs	r2, #0
 800669e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2222      	movs	r2, #34	; 0x22
 80066a6:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066b0:	4a2b      	ldr	r2, [pc, #172]	; (8006760 <HAL_SAI_Receive_DMA+0x11c>)
 80066b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066ba:	4a2a      	ldr	r2, [pc, #168]	; (8006764 <HAL_SAI_Receive_DMA+0x120>)
 80066bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066c4:	4a28      	ldr	r2, [pc, #160]	; (8006768 <HAL_SAI_Receive_DMA+0x124>)
 80066c6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066ce:	2200      	movs	r2, #0
 80066d0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	331c      	adds	r3, #28
 80066de:	4619      	mov	r1, r3
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80066e4:	461a      	mov	r2, r3
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 80066ec:	f7fa fd24 	bl	8001138 <HAL_DMA_Start_IT>
 80066f0:	4603      	mov	r3, r0
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d005      	beq.n	8006702 <HAL_SAI_Receive_DMA+0xbe>
    {
      __HAL_UNLOCK(hsai);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2200      	movs	r2, #0
 80066fa:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	e029      	b.n	8006756 <HAL_SAI_Receive_DMA+0x112>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8006702:	2100      	movs	r1, #0
 8006704:	68f8      	ldr	r0, [r7, #12]
 8006706:	f000 f965 	bl	80069d4 <SAI_InterruptFlag>
 800670a:	4601      	mov	r1, r0
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	691a      	ldr	r2, [r3, #16]
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	430a      	orrs	r2, r1
 8006718:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	681a      	ldr	r2, [r3, #0]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8006728:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006734:	2b00      	cmp	r3, #0
 8006736:	d107      	bne.n	8006748 <HAL_SAI_Receive_DMA+0x104>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006746:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2200      	movs	r2, #0
 800674c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 8006750:	2300      	movs	r3, #0
 8006752:	e000      	b.n	8006756 <HAL_SAI_Receive_DMA+0x112>
  }
  else
  {
    return HAL_BUSY;
 8006754:	2302      	movs	r3, #2
  }
}
 8006756:	4618      	mov	r0, r3
 8006758:	3710      	adds	r7, #16
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}
 800675e:	bf00      	nop
 8006760:	08006b19 	.word	0x08006b19
 8006764:	08006ab9 	.word	0x08006ab9
 8006768:	08006b35 	.word	0x08006b35

0800676c <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800676c:	b480      	push	{r7}
 800676e:	b087      	sub	sp, #28
 8006770:	af00      	add	r7, sp, #0
 8006772:	60f8      	str	r0, [r7, #12]
 8006774:	60b9      	str	r1, [r7, #8]
 8006776:	607a      	str	r2, [r7, #4]
 8006778:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800677a:	2300      	movs	r3, #0
 800677c:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2200      	movs	r2, #0
 8006782:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2200      	movs	r2, #0
 8006788:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d003      	beq.n	800679a <SAI_InitI2S+0x2e>
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	2b02      	cmp	r3, #2
 8006798:	d103      	bne.n	80067a2 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2200      	movs	r2, #0
 800679e:	651a      	str	r2, [r3, #80]	; 0x50
 80067a0:	e002      	b.n	80067a8 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2201      	movs	r2, #1
 80067a6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80067ae:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80067b6:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2200      	movs	r2, #0
 80067bc:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	683a      	ldr	r2, [r7, #0]
 80067c2:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	f003 0301 	and.w	r3, r3, #1
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d001      	beq.n	80067d2 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	e077      	b.n	80068c2 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d107      	bne.n	80067e8 <SAI_InitI2S+0x7c>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2200      	movs	r2, #0
 80067dc:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80067e4:	665a      	str	r2, [r3, #100]	; 0x64
 80067e6:	e006      	b.n	80067f6 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80067ee:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2200      	movs	r2, #0
 80067f4:	665a      	str	r2, [r3, #100]	; 0x64
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2b03      	cmp	r3, #3
 80067fa:	d84f      	bhi.n	800689c <SAI_InitI2S+0x130>
 80067fc:	a201      	add	r2, pc, #4	; (adr r2, 8006804 <SAI_InitI2S+0x98>)
 80067fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006802:	bf00      	nop
 8006804:	08006815 	.word	0x08006815
 8006808:	08006837 	.word	0x08006837
 800680c:	08006859 	.word	0x08006859
 8006810:	0800687b 	.word	0x0800687b

  /* Frame definition */
  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2280      	movs	r2, #128	; 0x80
 8006818:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	085b      	lsrs	r3, r3, #1
 800681e:	015a      	lsls	r2, r3, #5
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	085b      	lsrs	r3, r3, #1
 8006828:	011a      	lsls	r2, r3, #4
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2240      	movs	r2, #64	; 0x40
 8006832:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8006834:	e035      	b.n	80068a2 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2280      	movs	r2, #128	; 0x80
 800683a:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	085b      	lsrs	r3, r3, #1
 8006840:	019a      	lsls	r2, r3, #6
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	085b      	lsrs	r3, r3, #1
 800684a:	015a      	lsls	r2, r3, #5
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2280      	movs	r2, #128	; 0x80
 8006854:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8006856:	e024      	b.n	80068a2 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	22c0      	movs	r2, #192	; 0xc0
 800685c:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	085b      	lsrs	r3, r3, #1
 8006862:	019a      	lsls	r2, r3, #6
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	085b      	lsrs	r3, r3, #1
 800686c:	015a      	lsls	r2, r3, #5
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2280      	movs	r2, #128	; 0x80
 8006876:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8006878:	e013      	b.n	80068a2 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	22e0      	movs	r2, #224	; 0xe0
 800687e:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	085b      	lsrs	r3, r3, #1
 8006884:	019a      	lsls	r2, r3, #6
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	085b      	lsrs	r3, r3, #1
 800688e:	015a      	lsls	r2, r3, #5
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2280      	movs	r2, #128	; 0x80
 8006898:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800689a:	e002      	b.n	80068a2 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800689c:	2301      	movs	r3, #1
 800689e:	75fb      	strb	r3, [r7, #23]
      break;
 80068a0:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	2b02      	cmp	r3, #2
 80068a6:	d10b      	bne.n	80068c0 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2b01      	cmp	r3, #1
 80068ac:	d102      	bne.n	80068b4 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2210      	movs	r2, #16
 80068b2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2b02      	cmp	r3, #2
 80068b8:	d102      	bne.n	80068c0 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2208      	movs	r2, #8
 80068be:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
 80068c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	371c      	adds	r7, #28
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr
 80068ce:	bf00      	nop

080068d0 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b087      	sub	sp, #28
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	60b9      	str	r1, [r7, #8]
 80068da:	607a      	str	r2, [r7, #4]
 80068dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80068de:	2300      	movs	r3, #0
 80068e0:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2200      	movs	r2, #0
 80068e6:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2200      	movs	r2, #0
 80068ec:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d003      	beq.n	80068fe <SAI_InitPCM+0x2e>
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	2b02      	cmp	r3, #2
 80068fc:	d103      	bne.n	8006906 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2201      	movs	r2, #1
 8006902:	651a      	str	r2, [r3, #80]	; 0x50
 8006904:	e002      	b.n	800690c <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2200      	movs	r2, #0
 800690a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2200      	movs	r2, #0
 8006910:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006918:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006920:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2200      	movs	r2, #0
 8006926:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	683a      	ldr	r2, [r7, #0]
 800692c:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006934:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	2b04      	cmp	r3, #4
 800693a:	d103      	bne.n	8006944 <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2201      	movs	r2, #1
 8006940:	659a      	str	r2, [r3, #88]	; 0x58
 8006942:	e002      	b.n	800694a <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	220d      	movs	r2, #13
 8006948:	659a      	str	r2, [r3, #88]	; 0x58
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2b03      	cmp	r3, #3
 800694e:	d837      	bhi.n	80069c0 <SAI_InitPCM+0xf0>
 8006950:	a201      	add	r2, pc, #4	; (adr r2, 8006958 <SAI_InitPCM+0x88>)
 8006952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006956:	bf00      	nop
 8006958:	08006969 	.word	0x08006969
 800695c:	0800697f 	.word	0x0800697f
 8006960:	08006995 	.word	0x08006995
 8006964:	080069ab 	.word	0x080069ab
  }

  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2280      	movs	r2, #128	; 0x80
 800696c:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	011a      	lsls	r2, r3, #4
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2240      	movs	r2, #64	; 0x40
 800697a:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800697c:	e023      	b.n	80069c6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2280      	movs	r2, #128	; 0x80
 8006982:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	015a      	lsls	r2, r3, #5
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2280      	movs	r2, #128	; 0x80
 8006990:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8006992:	e018      	b.n	80069c6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	22c0      	movs	r2, #192	; 0xc0
 8006998:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	015a      	lsls	r2, r3, #5
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2280      	movs	r2, #128	; 0x80
 80069a6:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80069a8:	e00d      	b.n	80069c6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	22e0      	movs	r2, #224	; 0xe0
 80069ae:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	015a      	lsls	r2, r3, #5
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2280      	movs	r2, #128	; 0x80
 80069bc:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80069be:	e002      	b.n	80069c6 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 80069c0:	2301      	movs	r3, #1
 80069c2:	75fb      	strb	r3, [r7, #23]
      break;
 80069c4:	bf00      	nop
  }

  return status;
 80069c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	371c      	adds	r7, #28
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr

080069d4 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b085      	sub	sp, #20
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	460b      	mov	r3, r1
 80069de:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 80069e0:	2301      	movs	r3, #1
 80069e2:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 80069e4:	78fb      	ldrb	r3, [r7, #3]
 80069e6:	2b01      	cmp	r3, #1
 80069e8:	d103      	bne.n	80069f2 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	f043 0308 	orr.w	r3, r3, #8
 80069f0:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069f6:	2b08      	cmp	r3, #8
 80069f8:	d10b      	bne.n	8006a12 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80069fe:	2b03      	cmp	r3, #3
 8006a00:	d003      	beq.n	8006a0a <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d103      	bne.n	8006a12 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	f043 0310 	orr.w	r3, r3, #16
 8006a10:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	2b03      	cmp	r3, #3
 8006a18:	d003      	beq.n	8006a22 <SAI_InterruptFlag+0x4e>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	2b02      	cmp	r3, #2
 8006a20:	d104      	bne.n	8006a2c <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006a28:	60fb      	str	r3, [r7, #12]
 8006a2a:	e003      	b.n	8006a34 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f043 0304 	orr.w	r3, r3, #4
 8006a32:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8006a34:	68fb      	ldr	r3, [r7, #12]
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3714      	adds	r7, #20
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr
	...

08006a44 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b085      	sub	sp, #20
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8006a4c:	4b18      	ldr	r3, [pc, #96]	; (8006ab0 <SAI_Disable+0x6c>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a18      	ldr	r2, [pc, #96]	; (8006ab4 <SAI_Disable+0x70>)
 8006a52:	fba2 2303 	umull	r2, r3, r2, r3
 8006a56:	0b1b      	lsrs	r3, r3, #12
 8006a58:	009b      	lsls	r3, r3, #2
 8006a5a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	681a      	ldr	r2, [r3, #0]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006a6e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d10a      	bne.n	8006a8c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a7c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 8006a86:	2303      	movs	r3, #3
 8006a88:	72fb      	strb	r3, [r7, #11]
      break;
 8006a8a:	e009      	b.n	8006aa0 <SAI_Disable+0x5c>
    }
    count--;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	3b01      	subs	r3, #1
 8006a90:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d1e7      	bne.n	8006a70 <SAI_Disable+0x2c>

  return status;
 8006aa0:	7afb      	ldrb	r3, [r7, #11]
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3714      	adds	r7, #20
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr
 8006aae:	bf00      	nop
 8006ab0:	24000408 	.word	0x24000408
 8006ab4:	95cbec1b 	.word	0x95cbec1b

08006ab8 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b084      	sub	sp, #16
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac4:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	69db      	ldr	r3, [r3, #28]
 8006aca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ace:	d01c      	beq.n	8006b0a <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	681a      	ldr	r2, [r3, #0]
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8006ade:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8006ae8:	2100      	movs	r1, #0
 8006aea:	68f8      	ldr	r0, [r7, #12]
 8006aec:	f7ff ff72 	bl	80069d4 <SAI_InterruptFlag>
 8006af0:	4603      	mov	r3, r0
 8006af2:	43d9      	mvns	r1, r3
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	691a      	ldr	r2, [r3, #16]
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	400a      	ands	r2, r1
 8006b00:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2201      	movs	r2, #1
 8006b06:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8006b0a:	68f8      	ldr	r0, [r7, #12]
 8006b0c:	f7f9 fd05 	bl	800051a <HAL_SAI_RxCpltCallback>
#endif
}
 8006b10:	bf00      	nop
 8006b12:	3710      	adds	r7, #16
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}

08006b18 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b084      	sub	sp, #16
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b24:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8006b26:	68f8      	ldr	r0, [r7, #12]
 8006b28:	f7f9 fcec 	bl	8000504 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 8006b2c:	bf00      	nop
 8006b2e:	3710      	adds	r7, #16
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b084      	sub	sp, #16
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b40:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f7fb fc8c 	bl	8002460 <HAL_DMA_GetError>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	2b02      	cmp	r3, #2
 8006b4c:	d01d      	beq.n	8006b8a <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b54:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	681a      	ldr	r2, [r3, #0]
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8006b6c:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 8006b6e:	68f8      	ldr	r0, [r7, #12]
 8006b70:	f7ff ff68 	bl	8006a44 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2201      	movs	r2, #1
 8006b78:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 8006b84:	68f8      	ldr	r0, [r7, #12]
 8006b86:	f7f9 fbc3 	bl	8000310 <HAL_SAI_ErrorCallback>
#endif
  }
}
 8006b8a:	bf00      	nop
 8006b8c:	3710      	adds	r7, #16
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
	...

08006b94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	f5ad 6da1 	sub.w	sp, sp, #1288	; 0x508
 8006b9a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006b9c:	f7f9 fce6 	bl	800056c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006ba0:	f000 f83c 	bl	8006c1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006ba4:	f000 f9f0 	bl	8006f88 <MX_GPIO_Init>
  MX_SAI4_Init();
 8006ba8:	f000 f91e 	bl	8006de8 <MX_SAI4_Init>
  MX_BDMA_Init();
 8006bac:	f000 f99c 	bl	8006ee8 <MX_BDMA_Init>
  MX_CRC_Init();
 8006bb0:	f000 f8a2 	bl	8006cf8 <MX_CRC_Init>
  MX_DMA_Init();
 8006bb4:	f000 f9c0 	bl	8006f38 <MX_DMA_Init>
  if (HAL_SAI_Init(&haudio_in_sai[AUDIO_IN_INSTANCE]) != HAL_OK)
 8006bb8:	4816      	ldr	r0, [pc, #88]	; (8006c14 <main+0x80>)
 8006bba:	f7ff fb2f 	bl	800621c <HAL_SAI_Init>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d001      	beq.n	8006bc8 <main+0x34>
  {
    Error_Handler();
 8006bc4:	f000 fa28 	bl	8007018 <Error_Handler>
  }
  //MX_PDM2PCM_Init();
  //MX_DFSDM1_Init();
  MX_SAI1_Init();
 8006bc8:	f000 f8d8 	bl	8006d7c <MX_SAI1_Init>



  // @param  Instance  Audio IN instance: 0 for SAI, 1 for SAI PDM and 2 for DFSDM

  Audio_In_Ctx[AUDIO_IN_INSTANCE].Device = AUDIO_IN_DEVICE_DIGITAL_MIC;
 8006bcc:	4b12      	ldr	r3, [pc, #72]	; (8006c18 <main+0x84>)
 8006bce:	2230      	movs	r2, #48	; 0x30
 8006bd0:	635a      	str	r2, [r3, #52]	; 0x34
  Audio_In_Ctx[AUDIO_IN_INSTANCE].ChannelsNbr = 0;
 8006bd2:	4b11      	ldr	r3, [pc, #68]	; (8006c18 <main+0x84>)
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	641a      	str	r2, [r3, #64]	; 0x40
  Audio_In_Ctx[AUDIO_IN_INSTANCE].SampleRate = SAI_AUDIO_FREQUENCY_48K;
 8006bd8:	4b0f      	ldr	r3, [pc, #60]	; (8006c18 <main+0x84>)
 8006bda:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8006bde:	639a      	str	r2, [r3, #56]	; 0x38
  Audio_In_Ctx[AUDIO_IN_INSTANCE].BitsPerSample = AUDIO_RESOLUTION_8B;
 8006be0:	4b0d      	ldr	r3, [pc, #52]	; (8006c18 <main+0x84>)
 8006be2:	2208      	movs	r2, #8
 8006be4:	63da      	str	r2, [r3, #60]	; 0x3c
  Audio_In_Ctx[AUDIO_IN_INSTANCE].Volume = 80;
 8006be6:	4b0c      	ldr	r3, [pc, #48]	; (8006c18 <main+0x84>)
 8006be8:	2250      	movs	r2, #80	; 0x50
 8006bea:	651a      	str	r2, [r3, #80]	; 0x50

  // initialize audio instance: (NbrOfBytes/(Audio_In_Ctx[Instance].BitsPerSample/8U)
  // needs to be HAL_OK = 0
  // 64 bytes / mic_buffer[AUDIO_IN_INSTANCE].16bits/sample / 8
  int32_t status_init = BSP_AUDIO_IN_PDMToPCM_Init(AUDIO_IN_INSTANCE, SAI_AUDIO_FREQUENCY_16K, 1, 1);
 8006bec:	2301      	movs	r3, #1
 8006bee:	2201      	movs	r2, #1
 8006bf0:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
 8006bf4:	2001      	movs	r0, #1
 8006bf6:	f7f9 fbab 	bl	8000350 <BSP_AUDIO_IN_PDMToPCM_Init>
 8006bfa:	f8c7 0504 	str.w	r0, [r7, #1284]	; 0x504
  int32_t status_record = BSP_AUDIO_IN_RecordPDM(AUDIO_IN_INSTANCE, mic_buffer, 64);
 8006bfe:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8006c02:	2240      	movs	r2, #64	; 0x40
 8006c04:	4619      	mov	r1, r3
 8006c06:	2001      	movs	r0, #1
 8006c08:	f7f9 fc46 	bl	8000498 <BSP_AUDIO_IN_RecordPDM>
 8006c0c:	f8c7 0500 	str.w	r0, [r7, #1280]	; 0x500
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8006c10:	e7fe      	b.n	8006c10 <main+0x7c>
 8006c12:	bf00      	nop
 8006c14:	2400052c 	.word	0x2400052c
 8006c18:	240008c4 	.word	0x240008c4

08006c1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b09c      	sub	sp, #112	; 0x70
 8006c20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006c22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c26:	224c      	movs	r2, #76	; 0x4c
 8006c28:	2100      	movs	r1, #0
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f002 fb78 	bl	8009320 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006c30:	1d3b      	adds	r3, r7, #4
 8006c32:	2220      	movs	r2, #32
 8006c34:	2100      	movs	r1, #0
 8006c36:	4618      	mov	r0, r3
 8006c38:	f002 fb72 	bl	8009320 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8006c3c:	2004      	movs	r0, #4
 8006c3e:	f7fc fac3 	bl	80031c8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006c42:	2300      	movs	r3, #0
 8006c44:	603b      	str	r3, [r7, #0]
 8006c46:	4b2b      	ldr	r3, [pc, #172]	; (8006cf4 <SystemClock_Config+0xd8>)
 8006c48:	699b      	ldr	r3, [r3, #24]
 8006c4a:	4a2a      	ldr	r2, [pc, #168]	; (8006cf4 <SystemClock_Config+0xd8>)
 8006c4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c50:	6193      	str	r3, [r2, #24]
 8006c52:	4b28      	ldr	r3, [pc, #160]	; (8006cf4 <SystemClock_Config+0xd8>)
 8006c54:	699b      	ldr	r3, [r3, #24]
 8006c56:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006c5a:	603b      	str	r3, [r7, #0]
 8006c5c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8006c5e:	bf00      	nop
 8006c60:	4b24      	ldr	r3, [pc, #144]	; (8006cf4 <SystemClock_Config+0xd8>)
 8006c62:	699b      	ldr	r3, [r3, #24]
 8006c64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c6c:	d1f8      	bne.n	8006c60 <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8006c6e:	2302      	movs	r3, #2
 8006c70:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8006c72:	2301      	movs	r3, #1
 8006c74:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006c76:	2340      	movs	r3, #64	; 0x40
 8006c78:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006c7a:	2302      	movs	r3, #2
 8006c7c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8006c82:	2304      	movs	r3, #4
 8006c84:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8006c86:	2318      	movs	r3, #24
 8006c88:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 125;
 8006c8e:	237d      	movs	r3, #125	; 0x7d
 8006c90:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8006c92:	2302      	movs	r3, #2
 8006c94:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8006c96:	230c      	movs	r3, #12
 8006c98:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006ca2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f7fc fae8 	bl	800327c <HAL_RCC_OscConfig>
 8006cac:	4603      	mov	r3, r0
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d001      	beq.n	8006cb6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8006cb2:	f000 f9b1 	bl	8007018 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006cb6:	233f      	movs	r3, #63	; 0x3f
 8006cb8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006cba:	2303      	movs	r3, #3
 8006cbc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8006cc2:	2308      	movs	r3, #8
 8006cc4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8006cc6:	2340      	movs	r3, #64	; 0x40
 8006cc8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8006cca:	2340      	movs	r3, #64	; 0x40
 8006ccc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8006cce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006cd2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8006cd4:	2340      	movs	r3, #64	; 0x40
 8006cd6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8006cd8:	1d3b      	adds	r3, r7, #4
 8006cda:	2102      	movs	r1, #2
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f7fc fe79 	bl	80039d4 <HAL_RCC_ClockConfig>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d001      	beq.n	8006cec <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8006ce8:	f000 f996 	bl	8007018 <Error_Handler>
  }
}
 8006cec:	bf00      	nop
 8006cee:	3770      	adds	r7, #112	; 0x70
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}
 8006cf4:	58024800 	.word	0x58024800

08006cf8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b082      	sub	sp, #8
 8006cfc:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8006cfe:	4b1c      	ldr	r3, [pc, #112]	; (8006d70 <MX_CRC_Init+0x78>)
 8006d00:	4a1c      	ldr	r2, [pc, #112]	; (8006d74 <MX_CRC_Init+0x7c>)
 8006d02:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8006d04:	4b1a      	ldr	r3, [pc, #104]	; (8006d70 <MX_CRC_Init+0x78>)
 8006d06:	2200      	movs	r2, #0
 8006d08:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8006d0a:	4b19      	ldr	r3, [pc, #100]	; (8006d70 <MX_CRC_Init+0x78>)
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8006d10:	4b17      	ldr	r3, [pc, #92]	; (8006d70 <MX_CRC_Init+0x78>)
 8006d12:	2200      	movs	r2, #0
 8006d14:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8006d16:	4b16      	ldr	r3, [pc, #88]	; (8006d70 <MX_CRC_Init+0x78>)
 8006d18:	2200      	movs	r2, #0
 8006d1a:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8006d1c:	4b14      	ldr	r3, [pc, #80]	; (8006d70 <MX_CRC_Init+0x78>)
 8006d1e:	2201      	movs	r2, #1
 8006d20:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8006d22:	4813      	ldr	r0, [pc, #76]	; (8006d70 <MX_CRC_Init+0x78>)
 8006d24:	f7f9 fdc4 	bl	80008b0 <HAL_CRC_Init>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d001      	beq.n	8006d32 <MX_CRC_Init+0x3a>
  {
    Error_Handler();
 8006d2e:	f000 f973 	bl	8007018 <Error_Handler>
  }
  __HAL_CRC_DR_RESET(&hcrc);
 8006d32:	4b0f      	ldr	r3, [pc, #60]	; (8006d70 <MX_CRC_Init+0x78>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	689a      	ldr	r2, [r3, #8]
 8006d38:	4b0d      	ldr	r3, [pc, #52]	; (8006d70 <MX_CRC_Init+0x78>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f042 0201 	orr.w	r2, r2, #1
 8006d40:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN CRC_Init 2 */

  __HAL_RCC_CRC_CLK_ENABLE();
 8006d42:	4b0d      	ldr	r3, [pc, #52]	; (8006d78 <MX_CRC_Init+0x80>)
 8006d44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006d48:	4a0b      	ldr	r2, [pc, #44]	; (8006d78 <MX_CRC_Init+0x80>)
 8006d4a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006d52:	4b09      	ldr	r3, [pc, #36]	; (8006d78 <MX_CRC_Init+0x80>)
 8006d54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006d58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006d5c:	607b      	str	r3, [r7, #4]
 8006d5e:	687b      	ldr	r3, [r7, #4]
  HAL_CRC_MspInit(&hcrc);
 8006d60:	4803      	ldr	r0, [pc, #12]	; (8006d70 <MX_CRC_Init+0x78>)
 8006d62:	f000 f979 	bl	8007058 <HAL_CRC_MspInit>

  /* USER CODE END CRC_Init 2 */

}
 8006d66:	bf00      	nop
 8006d68:	3708      	adds	r7, #8
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}
 8006d6e:	bf00      	nop
 8006d70:	24000958 	.word	0x24000958
 8006d74:	58024c00 	.word	0x58024c00
 8006d78:	58024400 	.word	0x58024400

08006d7c <MX_SAI1_Init>:
//  * @brief SAI1 Initialization Function
//  * @param None
//  * @retval None
//  */
static void MX_SAI1_Init(void)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockB1.Instance = SAI1_Block_B;
 8006d80:	4b16      	ldr	r3, [pc, #88]	; (8006ddc <MX_SAI1_Init+0x60>)
 8006d82:	4a17      	ldr	r2, [pc, #92]	; (8006de0 <MX_SAI1_Init+0x64>)
 8006d84:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 8006d86:	4b15      	ldr	r3, [pc, #84]	; (8006ddc <MX_SAI1_Init+0x60>)
 8006d88:	2200      	movs	r2, #0
 8006d8a:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 8006d8c:	4b13      	ldr	r3, [pc, #76]	; (8006ddc <MX_SAI1_Init+0x60>)
 8006d8e:	2200      	movs	r2, #0
 8006d90:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8006d92:	4b12      	ldr	r3, [pc, #72]	; (8006ddc <MX_SAI1_Init+0x60>)
 8006d94:	2200      	movs	r2, #0
 8006d96:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8006d98:	4b10      	ldr	r3, [pc, #64]	; (8006ddc <MX_SAI1_Init+0x60>)
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8006d9e:	4b0f      	ldr	r3, [pc, #60]	; (8006ddc <MX_SAI1_Init+0x60>)
 8006da0:	2200      	movs	r2, #0
 8006da2:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8006da4:	4b0d      	ldr	r3, [pc, #52]	; (8006ddc <MX_SAI1_Init+0x60>)
 8006da6:	4a0f      	ldr	r2, [pc, #60]	; (8006de4 <MX_SAI1_Init+0x68>)
 8006da8:	621a      	str	r2, [r3, #32]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8006daa:	4b0c      	ldr	r3, [pc, #48]	; (8006ddc <MX_SAI1_Init+0x60>)
 8006dac:	2200      	movs	r2, #0
 8006dae:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8006db0:	4b0a      	ldr	r3, [pc, #40]	; (8006ddc <MX_SAI1_Init+0x60>)
 8006db2:	2200      	movs	r2, #0
 8006db4:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8006db6:	4b09      	ldr	r3, [pc, #36]	; (8006ddc <MX_SAI1_Init+0x60>)
 8006db8:	2200      	movs	r2, #0
 8006dba:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8006dbc:	4b07      	ldr	r3, [pc, #28]	; (8006ddc <MX_SAI1_Init+0x60>)
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8006dc2:	2302      	movs	r3, #2
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	2100      	movs	r1, #0
 8006dc8:	4804      	ldr	r0, [pc, #16]	; (8006ddc <MX_SAI1_Init+0x60>)
 8006dca:	f7ff f9f5 	bl	80061b8 <HAL_SAI_InitProtocol>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d001      	beq.n	8006dd8 <MX_SAI1_Init+0x5c>
  {
    Error_Handler();
 8006dd4:	f000 f920 	bl	8007018 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8006dd8:	bf00      	nop
 8006dda:	bd80      	pop	{r7, pc}
 8006ddc:	2400097c 	.word	0x2400097c
 8006de0:	40015824 	.word	0x40015824
 8006de4:	0002ee00 	.word	0x0002ee00

08006de8 <MX_SAI4_Init>:
  * @brief SAI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI4_Init(void)
{
 8006de8:	b480      	push	{r7}
 8006dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI4_Init 1 */

  /* USER CODE END SAI4_Init 1 */

  /* USER CODE BEGIN SAI4_Init 2 */
  haudio_in_sai[AUDIO_IN_INSTANCE].Instance = AUDIO_IN_SAI_PDMx;
 8006dec:	4b3c      	ldr	r3, [pc, #240]	; (8006ee0 <MX_SAI4_Init+0xf8>)
 8006dee:	4a3d      	ldr	r2, [pc, #244]	; (8006ee4 <MX_SAI4_Init+0xfc>)
 8006df0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  haudio_in_sai[AUDIO_IN_INSTANCE].Init.Protocol = SAI_FREE_PROTOCOL;
 8006df4:	4b3a      	ldr	r3, [pc, #232]	; (8006ee0 <MX_SAI4_Init+0xf8>)
 8006df6:	2200      	movs	r2, #0
 8006df8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
  haudio_in_sai[AUDIO_IN_INSTANCE].Init.AudioMode = SAI_MODEMASTER_RX;
 8006dfc:	4b38      	ldr	r3, [pc, #224]	; (8006ee0 <MX_SAI4_Init+0xf8>)
 8006dfe:	2201      	movs	r2, #1
 8006e00:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  haudio_in_sai[AUDIO_IN_INSTANCE].Init.DataSize = SAI_DATASIZE_16;
 8006e04:	4b36      	ldr	r3, [pc, #216]	; (8006ee0 <MX_SAI4_Init+0xf8>)
 8006e06:	2280      	movs	r2, #128	; 0x80
 8006e08:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  haudio_in_sai[AUDIO_IN_INSTANCE].Init.FirstBit = SAI_FIRSTBIT_MSB;
 8006e0c:	4b34      	ldr	r3, [pc, #208]	; (8006ee0 <MX_SAI4_Init+0xf8>)
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
  haudio_in_sai[AUDIO_IN_INSTANCE].Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8006e14:	4b32      	ldr	r3, [pc, #200]	; (8006ee0 <MX_SAI4_Init+0xf8>)
 8006e16:	2200      	movs	r2, #0
 8006e18:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
  haudio_in_sai[AUDIO_IN_INSTANCE].Init.Synchro = SAI_ASYNCHRONOUS;
 8006e1c:	4b30      	ldr	r3, [pc, #192]	; (8006ee0 <MX_SAI4_Init+0xf8>)
 8006e1e:	2200      	movs	r2, #0
 8006e20:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  haudio_in_sai[AUDIO_IN_INSTANCE].Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8006e24:	4b2e      	ldr	r3, [pc, #184]	; (8006ee0 <MX_SAI4_Init+0xf8>)
 8006e26:	2200      	movs	r2, #0
 8006e28:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  haudio_in_sai[AUDIO_IN_INSTANCE].Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8006e2c:	4b2c      	ldr	r3, [pc, #176]	; (8006ee0 <MX_SAI4_Init+0xf8>)
 8006e2e:	2200      	movs	r2, #0
 8006e30:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  haudio_in_sai[AUDIO_IN_INSTANCE].Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8006e34:	4b2a      	ldr	r3, [pc, #168]	; (8006ee0 <MX_SAI4_Init+0xf8>)
 8006e36:	2200      	movs	r2, #0
 8006e38:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  haudio_in_sai[AUDIO_IN_INSTANCE].Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8006e3c:	4b28      	ldr	r3, [pc, #160]	; (8006ee0 <MX_SAI4_Init+0xf8>)
 8006e3e:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8006e42:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  haudio_in_sai[AUDIO_IN_INSTANCE].Init.MonoStereoMode = SAI_STEREOMODE;
 8006e46:	4b26      	ldr	r3, [pc, #152]	; (8006ee0 <MX_SAI4_Init+0xf8>)
 8006e48:	2200      	movs	r2, #0
 8006e4a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  haudio_in_sai[AUDIO_IN_INSTANCE].Init.CompandingMode = SAI_NOCOMPANDING;
 8006e4e:	4b24      	ldr	r3, [pc, #144]	; (8006ee0 <MX_SAI4_Init+0xf8>)
 8006e50:	2200      	movs	r2, #0
 8006e52:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  haudio_in_sai[AUDIO_IN_INSTANCE].Init.PdmInit.Activation = ENABLE;
 8006e56:	4b22      	ldr	r3, [pc, #136]	; (8006ee0 <MX_SAI4_Init+0xf8>)
 8006e58:	2201      	movs	r2, #1
 8006e5a:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
  haudio_in_sai[AUDIO_IN_INSTANCE].Init.PdmInit.MicPairsNbr = 0;
 8006e5e:	4b20      	ldr	r3, [pc, #128]	; (8006ee0 <MX_SAI4_Init+0xf8>)
 8006e60:	2200      	movs	r2, #0
 8006e62:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  haudio_in_sai[AUDIO_IN_INSTANCE].Init.PdmInit.ClockEnable = SAI_PDM_CLOCK2_ENABLE;
 8006e66:	4b1e      	ldr	r3, [pc, #120]	; (8006ee0 <MX_SAI4_Init+0xf8>)
 8006e68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e6c:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
  haudio_in_sai[AUDIO_IN_INSTANCE].FrameInit.FrameLength = 16;
 8006e70:	4b1b      	ldr	r3, [pc, #108]	; (8006ee0 <MX_SAI4_Init+0xf8>)
 8006e72:	2210      	movs	r2, #16
 8006e74:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
  haudio_in_sai[AUDIO_IN_INSTANCE].FrameInit.ActiveFrameLength = 1;
 8006e78:	4b19      	ldr	r3, [pc, #100]	; (8006ee0 <MX_SAI4_Init+0xf8>)
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  haudio_in_sai[AUDIO_IN_INSTANCE].FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8006e80:	4b17      	ldr	r3, [pc, #92]	; (8006ee0 <MX_SAI4_Init+0xf8>)
 8006e82:	2200      	movs	r2, #0
 8006e84:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
  haudio_in_sai[AUDIO_IN_INSTANCE].FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8006e88:	4b15      	ldr	r3, [pc, #84]	; (8006ee0 <MX_SAI4_Init+0xf8>)
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
  haudio_in_sai[AUDIO_IN_INSTANCE].FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8006e90:	4b13      	ldr	r3, [pc, #76]	; (8006ee0 <MX_SAI4_Init+0xf8>)
 8006e92:	2200      	movs	r2, #0
 8006e94:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
  haudio_in_sai[AUDIO_IN_INSTANCE].SlotInit.FirstBitOffset = 0;
 8006e98:	4b11      	ldr	r3, [pc, #68]	; (8006ee0 <MX_SAI4_Init+0xf8>)
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  haudio_in_sai[AUDIO_IN_INSTANCE].SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8006ea0:	4b0f      	ldr	r3, [pc, #60]	; (8006ee0 <MX_SAI4_Init+0xf8>)
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
  haudio_in_sai[AUDIO_IN_INSTANCE].SlotInit.SlotNumber = 0;
 8006ea8:	4b0d      	ldr	r3, [pc, #52]	; (8006ee0 <MX_SAI4_Init+0xf8>)
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  haudio_in_sai[AUDIO_IN_INSTANCE].SlotInit.SlotActive = 0x0000FFFF;
 8006eb0:	4b0b      	ldr	r3, [pc, #44]	; (8006ee0 <MX_SAI4_Init+0xf8>)
 8006eb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006eb6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  haudio_in_sai[AUDIO_IN_INSTANCE].Init.PdmInit.Activation = ENABLE;
 8006eba:	4b09      	ldr	r3, [pc, #36]	; (8006ee0 <MX_SAI4_Init+0xf8>)
 8006ebc:	2201      	movs	r2, #1
 8006ebe:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
  haudio_in_sai[AUDIO_IN_INSTANCE].Init.PdmInit.MicPairsNbr = 1;
 8006ec2:	4b07      	ldr	r3, [pc, #28]	; (8006ee0 <MX_SAI4_Init+0xf8>)
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  haudio_in_sai[AUDIO_IN_INSTANCE].Init.PdmInit.ClockEnable = SAI_PDM_CLOCK2_ENABLE;
 8006eca:	4b05      	ldr	r3, [pc, #20]	; (8006ee0 <MX_SAI4_Init+0xf8>)
 8006ecc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ed0:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
  // 6.144 mhz bit clk frequency
  // 384khz frame sync frequency
  // 0 slots, 16 bits per frame
  /* USER CODE END SAI4_Init 2 */

}
 8006ed4:	bf00      	nop
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006edc:	4770      	bx	lr
 8006ede:	bf00      	nop
 8006ee0:	24000494 	.word	0x24000494
 8006ee4:	58005404 	.word	0x58005404

08006ee8 <MX_BDMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_BDMA_Init(void)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b082      	sub	sp, #8
 8006eec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 8006eee:	4b11      	ldr	r3, [pc, #68]	; (8006f34 <MX_BDMA_Init+0x4c>)
 8006ef0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006ef4:	4a0f      	ldr	r2, [pc, #60]	; (8006f34 <MX_BDMA_Init+0x4c>)
 8006ef6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006efa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006efe:	4b0d      	ldr	r3, [pc, #52]	; (8006f34 <MX_BDMA_Init+0x4c>)
 8006f00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006f04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f08:	607b      	str	r3, [r7, #4]
 8006f0a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMAMUX2_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX2_OVR_IRQn, 0, 0);
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	2100      	movs	r1, #0
 8006f10:	2080      	movs	r0, #128	; 0x80
 8006f12:	f7f9 fc98 	bl	8000846 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX2_OVR_IRQn);
 8006f16:	2080      	movs	r0, #128	; 0x80
 8006f18:	f7f9 fcaf 	bl	800087a <HAL_NVIC_EnableIRQ>
  /* BDMA_Channel0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 0, 0);
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	2100      	movs	r1, #0
 8006f20:	2081      	movs	r0, #129	; 0x81
 8006f22:	f7f9 fc90 	bl	8000846 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
 8006f26:	2081      	movs	r0, #129	; 0x81
 8006f28:	f7f9 fca7 	bl	800087a <HAL_NVIC_EnableIRQ>

}
 8006f2c:	bf00      	nop
 8006f2e:	3708      	adds	r7, #8
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}
 8006f34:	58024400 	.word	0x58024400

08006f38 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b082      	sub	sp, #8
 8006f3c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006f3e:	4b11      	ldr	r3, [pc, #68]	; (8006f84 <MX_DMA_Init+0x4c>)
 8006f40:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006f44:	4a0f      	ldr	r2, [pc, #60]	; (8006f84 <MX_DMA_Init+0x4c>)
 8006f46:	f043 0301 	orr.w	r3, r3, #1
 8006f4a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8006f4e:	4b0d      	ldr	r3, [pc, #52]	; (8006f84 <MX_DMA_Init+0x4c>)
 8006f50:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006f54:	f003 0301 	and.w	r3, r3, #1
 8006f58:	607b      	str	r3, [r7, #4]
 8006f5a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	2100      	movs	r1, #0
 8006f60:	200c      	movs	r0, #12
 8006f62:	f7f9 fc70 	bl	8000846 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8006f66:	200c      	movs	r0, #12
 8006f68:	f7f9 fc87 	bl	800087a <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 0, 0);
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	2100      	movs	r1, #0
 8006f70:	2066      	movs	r0, #102	; 0x66
 8006f72:	f7f9 fc68 	bl	8000846 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
 8006f76:	2066      	movs	r0, #102	; 0x66
 8006f78:	f7f9 fc7f 	bl	800087a <HAL_NVIC_EnableIRQ>

}
 8006f7c:	bf00      	nop
 8006f7e:	3708      	adds	r7, #8
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}
 8006f84:	58024400 	.word	0x58024400

08006f88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b085      	sub	sp, #20
 8006f8c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f8e:	4b21      	ldr	r3, [pc, #132]	; (8007014 <MX_GPIO_Init+0x8c>)
 8006f90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006f94:	4a1f      	ldr	r2, [pc, #124]	; (8007014 <MX_GPIO_Init+0x8c>)
 8006f96:	f043 0301 	orr.w	r3, r3, #1
 8006f9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006f9e:	4b1d      	ldr	r3, [pc, #116]	; (8007014 <MX_GPIO_Init+0x8c>)
 8006fa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006fa4:	f003 0301 	and.w	r3, r3, #1
 8006fa8:	60fb      	str	r3, [r7, #12]
 8006faa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006fac:	4b19      	ldr	r3, [pc, #100]	; (8007014 <MX_GPIO_Init+0x8c>)
 8006fae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006fb2:	4a18      	ldr	r2, [pc, #96]	; (8007014 <MX_GPIO_Init+0x8c>)
 8006fb4:	f043 0310 	orr.w	r3, r3, #16
 8006fb8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006fbc:	4b15      	ldr	r3, [pc, #84]	; (8007014 <MX_GPIO_Init+0x8c>)
 8006fbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006fc2:	f003 0310 	and.w	r3, r3, #16
 8006fc6:	60bb      	str	r3, [r7, #8]
 8006fc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006fca:	4b12      	ldr	r3, [pc, #72]	; (8007014 <MX_GPIO_Init+0x8c>)
 8006fcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006fd0:	4a10      	ldr	r2, [pc, #64]	; (8007014 <MX_GPIO_Init+0x8c>)
 8006fd2:	f043 0308 	orr.w	r3, r3, #8
 8006fd6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006fda:	4b0e      	ldr	r3, [pc, #56]	; (8007014 <MX_GPIO_Init+0x8c>)
 8006fdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006fe0:	f003 0308 	and.w	r3, r3, #8
 8006fe4:	607b      	str	r3, [r7, #4]
 8006fe6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8006fe8:	4b0a      	ldr	r3, [pc, #40]	; (8007014 <MX_GPIO_Init+0x8c>)
 8006fea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006fee:	4a09      	ldr	r2, [pc, #36]	; (8007014 <MX_GPIO_Init+0x8c>)
 8006ff0:	f043 0320 	orr.w	r3, r3, #32
 8006ff4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006ff8:	4b06      	ldr	r3, [pc, #24]	; (8007014 <MX_GPIO_Init+0x8c>)
 8006ffa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006ffe:	f003 0320 	and.w	r3, r3, #32
 8007002:	603b      	str	r3, [r7, #0]
 8007004:	683b      	ldr	r3, [r7, #0]

}
 8007006:	bf00      	nop
 8007008:	3714      	adds	r7, #20
 800700a:	46bd      	mov	sp, r7
 800700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007010:	4770      	bx	lr
 8007012:	bf00      	nop
 8007014:	58024400 	.word	0x58024400

08007018 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007018:	b480      	push	{r7}
 800701a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800701c:	b672      	cpsid	i
}
 800701e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007020:	e7fe      	b.n	8007020 <Error_Handler+0x8>
	...

08007024 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007024:	b480      	push	{r7}
 8007026:	b083      	sub	sp, #12
 8007028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800702a:	4b0a      	ldr	r3, [pc, #40]	; (8007054 <HAL_MspInit+0x30>)
 800702c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007030:	4a08      	ldr	r2, [pc, #32]	; (8007054 <HAL_MspInit+0x30>)
 8007032:	f043 0302 	orr.w	r3, r3, #2
 8007036:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800703a:	4b06      	ldr	r3, [pc, #24]	; (8007054 <HAL_MspInit+0x30>)
 800703c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007040:	f003 0302 	and.w	r3, r3, #2
 8007044:	607b      	str	r3, [r7, #4]
 8007046:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007048:	bf00      	nop
 800704a:	370c      	adds	r7, #12
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr
 8007054:	58024400 	.word	0x58024400

08007058 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8007058:	b480      	push	{r7}
 800705a:	b085      	sub	sp, #20
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a0b      	ldr	r2, [pc, #44]	; (8007094 <HAL_CRC_MspInit+0x3c>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d10e      	bne.n	8007088 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800706a:	4b0b      	ldr	r3, [pc, #44]	; (8007098 <HAL_CRC_MspInit+0x40>)
 800706c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007070:	4a09      	ldr	r2, [pc, #36]	; (8007098 <HAL_CRC_MspInit+0x40>)
 8007072:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007076:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800707a:	4b07      	ldr	r3, [pc, #28]	; (8007098 <HAL_CRC_MspInit+0x40>)
 800707c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007080:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007084:	60fb      	str	r3, [r7, #12]
 8007086:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8007088:	bf00      	nop
 800708a:	3714      	adds	r7, #20
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr
 8007094:	58024c00 	.word	0x58024c00
 8007098:	58024400 	.word	0x58024400

0800709c <HAL_SAI_MspInit>:

static uint32_t SAI1_client =0;
static uint32_t SAI4_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b0ba      	sub	sp, #232	; 0xe8
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80070a4:	f107 0310 	add.w	r3, r7, #16
 80070a8:	22b4      	movs	r2, #180	; 0xb4
 80070aa:	2100      	movs	r1, #0
 80070ac:	4618      	mov	r0, r3
 80070ae:	f002 f937 	bl	8009320 <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_B)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4aa9      	ldr	r2, [pc, #676]	; (800735c <HAL_SAI_MspInit+0x2c0>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	f040 80a5 	bne.w	8007208 <HAL_SAI_MspInit+0x16c>
    {
      /* Peripheral clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 80070be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80070c2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 80070c4:	2300      	movs	r3, #0
 80070c6:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80070c8:	f107 0310 	add.w	r3, r7, #16
 80070cc:	4618      	mov	r0, r3
 80070ce:	f7fc ffe1 	bl	8004094 <HAL_RCCEx_PeriphCLKConfig>
 80070d2:	4603      	mov	r3, r0
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d001      	beq.n	80070dc <HAL_SAI_MspInit+0x40>
    {
      Error_Handler();
 80070d8:	f7ff ff9e 	bl	8007018 <Error_Handler>
    }

      if (SAI1_client == 0)
 80070dc:	4ba0      	ldr	r3, [pc, #640]	; (8007360 <HAL_SAI_MspInit+0x2c4>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d10e      	bne.n	8007102 <HAL_SAI_MspInit+0x66>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80070e4:	4b9f      	ldr	r3, [pc, #636]	; (8007364 <HAL_SAI_MspInit+0x2c8>)
 80070e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80070ea:	4a9e      	ldr	r2, [pc, #632]	; (8007364 <HAL_SAI_MspInit+0x2c8>)
 80070ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80070f0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80070f4:	4b9b      	ldr	r3, [pc, #620]	; (8007364 <HAL_SAI_MspInit+0x2c8>)
 80070f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80070fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070fe:	60fb      	str	r3, [r7, #12]
 8007100:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8007102:	4b97      	ldr	r3, [pc, #604]	; (8007360 <HAL_SAI_MspInit+0x2c4>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	3301      	adds	r3, #1
 8007108:	4a95      	ldr	r2, [pc, #596]	; (8007360 <HAL_SAI_MspInit+0x2c4>)
 800710a:	6013      	str	r3, [r2, #0]
    PE3     ------> SAI1_SD_B
    PF8     ------> SAI1_SCK_B
    PF7     ------> SAI1_MCLK_B
    PF9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800710c:	2308      	movs	r3, #8
 800710e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007112:	2302      	movs	r3, #2
 8007114:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007118:	2300      	movs	r3, #0
 800711a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800711e:	2300      	movs	r3, #0
 8007120:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8007124:	2306      	movs	r3, #6
 8007126:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800712a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800712e:	4619      	mov	r1, r3
 8007130:	488d      	ldr	r0, [pc, #564]	; (8007368 <HAL_SAI_MspInit+0x2cc>)
 8007132:	f7fb fea1 	bl	8002e78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_9;
 8007136:	f44f 7360 	mov.w	r3, #896	; 0x380
 800713a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800713e:	2302      	movs	r3, #2
 8007140:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007144:	2300      	movs	r3, #0
 8007146:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800714a:	2300      	movs	r3, #0
 800714c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8007150:	2306      	movs	r3, #6
 8007152:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007156:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800715a:	4619      	mov	r1, r3
 800715c:	4883      	ldr	r0, [pc, #524]	; (800736c <HAL_SAI_MspInit+0x2d0>)
 800715e:	f7fb fe8b 	bl	8002e78 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA1_Stream1;
 8007162:	4b83      	ldr	r3, [pc, #524]	; (8007370 <HAL_SAI_MspInit+0x2d4>)
 8007164:	4a83      	ldr	r2, [pc, #524]	; (8007374 <HAL_SAI_MspInit+0x2d8>)
 8007166:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 8007168:	4b81      	ldr	r3, [pc, #516]	; (8007370 <HAL_SAI_MspInit+0x2d4>)
 800716a:	2258      	movs	r2, #88	; 0x58
 800716c:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800716e:	4b80      	ldr	r3, [pc, #512]	; (8007370 <HAL_SAI_MspInit+0x2d4>)
 8007170:	2240      	movs	r2, #64	; 0x40
 8007172:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8007174:	4b7e      	ldr	r3, [pc, #504]	; (8007370 <HAL_SAI_MspInit+0x2d4>)
 8007176:	2200      	movs	r2, #0
 8007178:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 800717a:	4b7d      	ldr	r3, [pc, #500]	; (8007370 <HAL_SAI_MspInit+0x2d4>)
 800717c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007180:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8007182:	4b7b      	ldr	r3, [pc, #492]	; (8007370 <HAL_SAI_MspInit+0x2d4>)
 8007184:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007188:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800718a:	4b79      	ldr	r3, [pc, #484]	; (8007370 <HAL_SAI_MspInit+0x2d4>)
 800718c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007190:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 8007192:	4b77      	ldr	r3, [pc, #476]	; (8007370 <HAL_SAI_MspInit+0x2d4>)
 8007194:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007198:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_HIGH;
 800719a:	4b75      	ldr	r3, [pc, #468]	; (8007370 <HAL_SAI_MspInit+0x2d4>)
 800719c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80071a0:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80071a2:	4b73      	ldr	r3, [pc, #460]	; (8007370 <HAL_SAI_MspInit+0x2d4>)
 80071a4:	2200      	movs	r2, #0
 80071a6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 80071a8:	4871      	ldr	r0, [pc, #452]	; (8007370 <HAL_SAI_MspInit+0x2d4>)
 80071aa:	f7f9 fc6b 	bl	8000a84 <HAL_DMA_Init>
 80071ae:	4603      	mov	r3, r0
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d001      	beq.n	80071b8 <HAL_SAI_MspInit+0x11c>
    {
      Error_Handler();
 80071b4:	f7ff ff30 	bl	8007018 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 80071b8:	2306      	movs	r3, #6
 80071ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 80071be:	2300      	movs	r3, #0
 80071c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    pSyncConfig.SyncEnable = DISABLE;
 80071c4:	2300      	movs	r3, #0
 80071c6:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    pSyncConfig.EventEnable = ENABLE;
 80071ca:	2301      	movs	r3, #1
 80071cc:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    pSyncConfig.RequestNumber = 1;
 80071d0:	2301      	movs	r3, #1
 80071d2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai1_b, &pSyncConfig) != HAL_OK)
 80071d6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80071da:	4619      	mov	r1, r3
 80071dc:	4864      	ldr	r0, [pc, #400]	; (8007370 <HAL_SAI_MspInit+0x2d4>)
 80071de:	f7fb fd33 	bl	8002c48 <HAL_DMAEx_ConfigMuxSync>
 80071e2:	4603      	mov	r3, r0
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d001      	beq.n	80071ec <HAL_SAI_MspInit+0x150>
    {
      Error_Handler();
 80071e8:	f7ff ff16 	bl	8007018 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	4a60      	ldr	r2, [pc, #384]	; (8007370 <HAL_SAI_MspInit+0x2d4>)
 80071f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80071f4:	4a5e      	ldr	r2, [pc, #376]	; (8007370 <HAL_SAI_MspInit+0x2d4>)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	4a5c      	ldr	r2, [pc, #368]	; (8007370 <HAL_SAI_MspInit+0x2d4>)
 80071fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8007202:	4a5b      	ldr	r2, [pc, #364]	; (8007370 <HAL_SAI_MspInit+0x2d4>)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6393      	str	r3, [r2, #56]	; 0x38
    }
/* SAI4 */
    if(hsai->Instance==SAI4_Block_A)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a5a      	ldr	r2, [pc, #360]	; (8007378 <HAL_SAI_MspInit+0x2dc>)
 800720e:	4293      	cmp	r3, r2
 8007210:	f040 80a0 	bne.w	8007354 <HAL_SAI_MspInit+0x2b8>
    {
    /* Peripheral clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI4A;
 8007214:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007218:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Sai4AClockSelection = RCC_SAI4ACLKSOURCE_PLL;
 800721a:	2300      	movs	r3, #0
 800721c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007220:	f107 0310 	add.w	r3, r7, #16
 8007224:	4618      	mov	r0, r3
 8007226:	f7fc ff35 	bl	8004094 <HAL_RCCEx_PeriphCLKConfig>
 800722a:	4603      	mov	r3, r0
 800722c:	2b00      	cmp	r3, #0
 800722e:	d001      	beq.n	8007234 <HAL_SAI_MspInit+0x198>
    {
      Error_Handler();
 8007230:	f7ff fef2 	bl	8007018 <Error_Handler>
    }

    if (SAI4_client == 0)
 8007234:	4b51      	ldr	r3, [pc, #324]	; (800737c <HAL_SAI_MspInit+0x2e0>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d10e      	bne.n	800725a <HAL_SAI_MspInit+0x1be>
    {
       __HAL_RCC_SAI4_CLK_ENABLE();
 800723c:	4b49      	ldr	r3, [pc, #292]	; (8007364 <HAL_SAI_MspInit+0x2c8>)
 800723e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007242:	4a48      	ldr	r2, [pc, #288]	; (8007364 <HAL_SAI_MspInit+0x2c8>)
 8007244:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007248:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800724c:	4b45      	ldr	r3, [pc, #276]	; (8007364 <HAL_SAI_MspInit+0x2c8>)
 800724e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007252:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007256:	60bb      	str	r3, [r7, #8]
 8007258:	68bb      	ldr	r3, [r7, #8]
    }
    SAI4_client ++;
 800725a:	4b48      	ldr	r3, [pc, #288]	; (800737c <HAL_SAI_MspInit+0x2e0>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	3301      	adds	r3, #1
 8007260:	4a46      	ldr	r2, [pc, #280]	; (800737c <HAL_SAI_MspInit+0x2e0>)
 8007262:	6013      	str	r3, [r2, #0]
    /**SAI4_A_Block_A GPIO Configuration
    PE4     ------> SAI4_D2
    PE5     ------> SAI4_CK2
    PD6     ------> SAI4_D1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8007264:	2330      	movs	r3, #48	; 0x30
 8007266:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800726a:	2302      	movs	r3, #2
 800726c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007270:	2300      	movs	r3, #0
 8007272:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007276:	2300      	movs	r3, #0
 8007278:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 800727c:	230a      	movs	r3, #10
 800727e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007282:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8007286:	4619      	mov	r1, r3
 8007288:	4837      	ldr	r0, [pc, #220]	; (8007368 <HAL_SAI_MspInit+0x2cc>)
 800728a:	f7fb fdf5 	bl	8002e78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800728e:	2340      	movs	r3, #64	; 0x40
 8007290:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007294:	2302      	movs	r3, #2
 8007296:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800729a:	2300      	movs	r3, #0
 800729c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80072a0:	2300      	movs	r3, #0
 80072a2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF1_SAI4;
 80072a6:	2301      	movs	r3, #1
 80072a8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80072ac:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80072b0:	4619      	mov	r1, r3
 80072b2:	4833      	ldr	r0, [pc, #204]	; (8007380 <HAL_SAI_MspInit+0x2e4>)
 80072b4:	f7fb fde0 	bl	8002e78 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai4_a.Instance = BDMA_Channel0;
 80072b8:	4b32      	ldr	r3, [pc, #200]	; (8007384 <HAL_SAI_MspInit+0x2e8>)
 80072ba:	4a33      	ldr	r2, [pc, #204]	; (8007388 <HAL_SAI_MspInit+0x2ec>)
 80072bc:	601a      	str	r2, [r3, #0]
    hdma_sai4_a.Init.Request = BDMA_REQUEST_SAI4_A;
 80072be:	4b31      	ldr	r3, [pc, #196]	; (8007384 <HAL_SAI_MspInit+0x2e8>)
 80072c0:	220f      	movs	r2, #15
 80072c2:	605a      	str	r2, [r3, #4]
    hdma_sai4_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80072c4:	4b2f      	ldr	r3, [pc, #188]	; (8007384 <HAL_SAI_MspInit+0x2e8>)
 80072c6:	2200      	movs	r2, #0
 80072c8:	609a      	str	r2, [r3, #8]
    hdma_sai4_a.Init.PeriphInc = DMA_PINC_DISABLE;
 80072ca:	4b2e      	ldr	r3, [pc, #184]	; (8007384 <HAL_SAI_MspInit+0x2e8>)
 80072cc:	2200      	movs	r2, #0
 80072ce:	60da      	str	r2, [r3, #12]
    hdma_sai4_a.Init.MemInc = DMA_MINC_ENABLE;
 80072d0:	4b2c      	ldr	r3, [pc, #176]	; (8007384 <HAL_SAI_MspInit+0x2e8>)
 80072d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80072d6:	611a      	str	r2, [r3, #16]
    hdma_sai4_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80072d8:	4b2a      	ldr	r3, [pc, #168]	; (8007384 <HAL_SAI_MspInit+0x2e8>)
 80072da:	2200      	movs	r2, #0
 80072dc:	615a      	str	r2, [r3, #20]
    hdma_sai4_a.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80072de:	4b29      	ldr	r3, [pc, #164]	; (8007384 <HAL_SAI_MspInit+0x2e8>)
 80072e0:	2200      	movs	r2, #0
 80072e2:	619a      	str	r2, [r3, #24]
    hdma_sai4_a.Init.Mode = DMA_CIRCULAR;
 80072e4:	4b27      	ldr	r3, [pc, #156]	; (8007384 <HAL_SAI_MspInit+0x2e8>)
 80072e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80072ea:	61da      	str	r2, [r3, #28]
    hdma_sai4_a.Init.Priority = DMA_PRIORITY_HIGH;
 80072ec:	4b25      	ldr	r3, [pc, #148]	; (8007384 <HAL_SAI_MspInit+0x2e8>)
 80072ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80072f2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai4_a) != HAL_OK)
 80072f4:	4823      	ldr	r0, [pc, #140]	; (8007384 <HAL_SAI_MspInit+0x2e8>)
 80072f6:	f7f9 fbc5 	bl	8000a84 <HAL_DMA_Init>
 80072fa:	4603      	mov	r3, r0
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d001      	beq.n	8007304 <HAL_SAI_MspInit+0x268>
    {
      Error_Handler();
 8007300:	f7ff fe8a 	bl	8007018 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX2_SYNC_EXTI0;
 8007304:	230e      	movs	r3, #14
 8007306:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 800730a:	2300      	movs	r3, #0
 800730c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    pSyncConfig.SyncEnable = DISABLE;
 8007310:	2300      	movs	r3, #0
 8007312:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    pSyncConfig.EventEnable = ENABLE;
 8007316:	2301      	movs	r3, #1
 8007318:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    pSyncConfig.RequestNumber = 1;
 800731c:	2301      	movs	r3, #1
 800731e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai4_a, &pSyncConfig) != HAL_OK)
 8007322:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007326:	4619      	mov	r1, r3
 8007328:	4816      	ldr	r0, [pc, #88]	; (8007384 <HAL_SAI_MspInit+0x2e8>)
 800732a:	f7fb fc8d 	bl	8002c48 <HAL_DMAEx_ConfigMuxSync>
 800732e:	4603      	mov	r3, r0
 8007330:	2b00      	cmp	r3, #0
 8007332:	d001      	beq.n	8007338 <HAL_SAI_MspInit+0x29c>
    {
      Error_Handler();
 8007334:	f7ff fe70 	bl	8007018 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai4_a);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	4a12      	ldr	r2, [pc, #72]	; (8007384 <HAL_SAI_MspInit+0x2e8>)
 800733c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8007340:	4a10      	ldr	r2, [pc, #64]	; (8007384 <HAL_SAI_MspInit+0x2e8>)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai4_a);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	4a0e      	ldr	r2, [pc, #56]	; (8007384 <HAL_SAI_MspInit+0x2e8>)
 800734a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800734e:	4a0d      	ldr	r2, [pc, #52]	; (8007384 <HAL_SAI_MspInit+0x2e8>)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6393      	str	r3, [r2, #56]	; 0x38

    }
}
 8007354:	bf00      	nop
 8007356:	37e8      	adds	r7, #232	; 0xe8
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}
 800735c:	40015824 	.word	0x40015824
 8007360:	24000668 	.word	0x24000668
 8007364:	58024400 	.word	0x58024400
 8007368:	58021000 	.word	0x58021000
 800736c:	58021400 	.word	0x58021400
 8007370:	24000b24 	.word	0x24000b24
 8007374:	40020028 	.word	0x40020028
 8007378:	58005404 	.word	0x58005404
 800737c:	2400066c 	.word	0x2400066c
 8007380:	58020c00 	.word	0x58020c00
 8007384:	24000aac 	.word	0x24000aac
 8007388:	58025408 	.word	0x58025408

0800738c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800738c:	b480      	push	{r7}
 800738e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007390:	e7fe      	b.n	8007390 <NMI_Handler+0x4>

08007392 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007392:	b480      	push	{r7}
 8007394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007396:	e7fe      	b.n	8007396 <HardFault_Handler+0x4>

08007398 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007398:	b480      	push	{r7}
 800739a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800739c:	e7fe      	b.n	800739c <MemManage_Handler+0x4>

0800739e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800739e:	b480      	push	{r7}
 80073a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80073a2:	e7fe      	b.n	80073a2 <BusFault_Handler+0x4>

080073a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80073a4:	b480      	push	{r7}
 80073a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80073a8:	e7fe      	b.n	80073a8 <UsageFault_Handler+0x4>

080073aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80073aa:	b480      	push	{r7}
 80073ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80073ae:	bf00      	nop
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr

080073b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80073b8:	b480      	push	{r7}
 80073ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80073bc:	bf00      	nop
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr

080073c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80073c6:	b480      	push	{r7}
 80073c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80073ca:	bf00      	nop
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr

080073d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80073d8:	f7f9 f93a 	bl	8000650 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80073dc:	bf00      	nop
 80073de:	bd80      	pop	{r7, pc}

080073e0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 80073e4:	4802      	ldr	r0, [pc, #8]	; (80073f0 <DMA1_Stream1_IRQHandler+0x10>)
 80073e6:	f7fa f911 	bl	800160c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80073ea:	bf00      	nop
 80073ec:	bd80      	pop	{r7, pc}
 80073ee:	bf00      	nop
 80073f0:	24000b24 	.word	0x24000b24

080073f4 <DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX1 overrun interrupt.
  */
void DMAMUX1_OVR_IRQHandler(void)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMAMUX1_OVR_IRQn 0 */
  // Handle DMA1_Stream1
  HAL_DMAEx_MUX_IRQHandler(&hdma_sai1_b);
 80073f8:	4802      	ldr	r0, [pc, #8]	; (8007404 <DMAMUX1_OVR_IRQHandler+0x10>)
 80073fa:	f7fb fceb 	bl	8002dd4 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMAMUX1_OVR_IRQn 1 */
}
 80073fe:	bf00      	nop
 8007400:	bd80      	pop	{r7, pc}
 8007402:	bf00      	nop
 8007404:	24000b24 	.word	0x24000b24

08007408 <DMAMUX2_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX2 overrun interrupt.
  */
void DMAMUX2_OVR_IRQHandler(void)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX2_OVR_IRQn 0 */

  /* USER CODE END DMAMUX2_OVR_IRQn 0 */
  // Handle BDMA_Channel0
  HAL_DMAEx_MUX_IRQHandler(&hdma_sai4_a);
 800740c:	4802      	ldr	r0, [pc, #8]	; (8007418 <DMAMUX2_OVR_IRQHandler+0x10>)
 800740e:	f7fb fce1 	bl	8002dd4 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX2_OVR_IRQn 1 */

  /* USER CODE END DMAMUX2_OVR_IRQn 1 */
}
 8007412:	bf00      	nop
 8007414:	bd80      	pop	{r7, pc}
 8007416:	bf00      	nop
 8007418:	24000aac 	.word	0x24000aac

0800741c <BDMA_Channel0_IRQHandler>:

/**
  * @brief This function handles BDMA channel0 global interrupt.
  */
void BDMA_Channel0_IRQHandler(void)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai4_a);
 8007420:	4802      	ldr	r0, [pc, #8]	; (800742c <BDMA_Channel0_IRQHandler+0x10>)
 8007422:	f7fa f8f3 	bl	800160c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel0_IRQn 1 */

  /* USER CODE END BDMA_Channel0_IRQn 1 */
}
 8007426:	bf00      	nop
 8007428:	bd80      	pop	{r7, pc}
 800742a:	bf00      	nop
 800742c:	24000aac 	.word	0x24000aac

08007430 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8007430:	b480      	push	{r7}
 8007432:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8007434:	4b32      	ldr	r3, [pc, #200]	; (8007500 <SystemInit+0xd0>)
 8007436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800743a:	4a31      	ldr	r2, [pc, #196]	; (8007500 <SystemInit+0xd0>)
 800743c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007440:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8007444:	4b2f      	ldr	r3, [pc, #188]	; (8007504 <SystemInit+0xd4>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f003 030f 	and.w	r3, r3, #15
 800744c:	2b06      	cmp	r3, #6
 800744e:	d807      	bhi.n	8007460 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8007450:	4b2c      	ldr	r3, [pc, #176]	; (8007504 <SystemInit+0xd4>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f023 030f 	bic.w	r3, r3, #15
 8007458:	4a2a      	ldr	r2, [pc, #168]	; (8007504 <SystemInit+0xd4>)
 800745a:	f043 0307 	orr.w	r3, r3, #7
 800745e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8007460:	4b29      	ldr	r3, [pc, #164]	; (8007508 <SystemInit+0xd8>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a28      	ldr	r2, [pc, #160]	; (8007508 <SystemInit+0xd8>)
 8007466:	f043 0301 	orr.w	r3, r3, #1
 800746a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800746c:	4b26      	ldr	r3, [pc, #152]	; (8007508 <SystemInit+0xd8>)
 800746e:	2200      	movs	r2, #0
 8007470:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8007472:	4b25      	ldr	r3, [pc, #148]	; (8007508 <SystemInit+0xd8>)
 8007474:	681a      	ldr	r2, [r3, #0]
 8007476:	4924      	ldr	r1, [pc, #144]	; (8007508 <SystemInit+0xd8>)
 8007478:	4b24      	ldr	r3, [pc, #144]	; (800750c <SystemInit+0xdc>)
 800747a:	4013      	ands	r3, r2
 800747c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800747e:	4b21      	ldr	r3, [pc, #132]	; (8007504 <SystemInit+0xd4>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f003 0308 	and.w	r3, r3, #8
 8007486:	2b00      	cmp	r3, #0
 8007488:	d007      	beq.n	800749a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800748a:	4b1e      	ldr	r3, [pc, #120]	; (8007504 <SystemInit+0xd4>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f023 030f 	bic.w	r3, r3, #15
 8007492:	4a1c      	ldr	r2, [pc, #112]	; (8007504 <SystemInit+0xd4>)
 8007494:	f043 0307 	orr.w	r3, r3, #7
 8007498:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800749a:	4b1b      	ldr	r3, [pc, #108]	; (8007508 <SystemInit+0xd8>)
 800749c:	2200      	movs	r2, #0
 800749e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80074a0:	4b19      	ldr	r3, [pc, #100]	; (8007508 <SystemInit+0xd8>)
 80074a2:	2200      	movs	r2, #0
 80074a4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80074a6:	4b18      	ldr	r3, [pc, #96]	; (8007508 <SystemInit+0xd8>)
 80074a8:	2200      	movs	r2, #0
 80074aa:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80074ac:	4b16      	ldr	r3, [pc, #88]	; (8007508 <SystemInit+0xd8>)
 80074ae:	4a18      	ldr	r2, [pc, #96]	; (8007510 <SystemInit+0xe0>)
 80074b0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80074b2:	4b15      	ldr	r3, [pc, #84]	; (8007508 <SystemInit+0xd8>)
 80074b4:	4a17      	ldr	r2, [pc, #92]	; (8007514 <SystemInit+0xe4>)
 80074b6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80074b8:	4b13      	ldr	r3, [pc, #76]	; (8007508 <SystemInit+0xd8>)
 80074ba:	4a17      	ldr	r2, [pc, #92]	; (8007518 <SystemInit+0xe8>)
 80074bc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80074be:	4b12      	ldr	r3, [pc, #72]	; (8007508 <SystemInit+0xd8>)
 80074c0:	2200      	movs	r2, #0
 80074c2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80074c4:	4b10      	ldr	r3, [pc, #64]	; (8007508 <SystemInit+0xd8>)
 80074c6:	4a14      	ldr	r2, [pc, #80]	; (8007518 <SystemInit+0xe8>)
 80074c8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80074ca:	4b0f      	ldr	r3, [pc, #60]	; (8007508 <SystemInit+0xd8>)
 80074cc:	2200      	movs	r2, #0
 80074ce:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80074d0:	4b0d      	ldr	r3, [pc, #52]	; (8007508 <SystemInit+0xd8>)
 80074d2:	4a11      	ldr	r2, [pc, #68]	; (8007518 <SystemInit+0xe8>)
 80074d4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80074d6:	4b0c      	ldr	r3, [pc, #48]	; (8007508 <SystemInit+0xd8>)
 80074d8:	2200      	movs	r2, #0
 80074da:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80074dc:	4b0a      	ldr	r3, [pc, #40]	; (8007508 <SystemInit+0xd8>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a09      	ldr	r2, [pc, #36]	; (8007508 <SystemInit+0xd8>)
 80074e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80074e6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80074e8:	4b07      	ldr	r3, [pc, #28]	; (8007508 <SystemInit+0xd8>)
 80074ea:	2200      	movs	r2, #0
 80074ec:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80074ee:	4b0b      	ldr	r3, [pc, #44]	; (800751c <SystemInit+0xec>)
 80074f0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80074f4:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 80074f6:	bf00      	nop
 80074f8:	46bd      	mov	sp, r7
 80074fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fe:	4770      	bx	lr
 8007500:	e000ed00 	.word	0xe000ed00
 8007504:	52002000 	.word	0x52002000
 8007508:	58024400 	.word	0x58024400
 800750c:	eaf6ed7f 	.word	0xeaf6ed7f
 8007510:	02020200 	.word	0x02020200
 8007514:	01ff0000 	.word	0x01ff0000
 8007518:	01010280 	.word	0x01010280
 800751c:	52004000 	.word	0x52004000

08007520 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8007520:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007558 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8007524:	f7ff ff84 	bl	8007430 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007528:	480c      	ldr	r0, [pc, #48]	; (800755c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800752a:	490d      	ldr	r1, [pc, #52]	; (8007560 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800752c:	4a0d      	ldr	r2, [pc, #52]	; (8007564 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800752e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007530:	e002      	b.n	8007538 <LoopCopyDataInit>

08007532 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007532:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007534:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007536:	3304      	adds	r3, #4

08007538 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007538:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800753a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800753c:	d3f9      	bcc.n	8007532 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800753e:	4a0a      	ldr	r2, [pc, #40]	; (8007568 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8007540:	4c0a      	ldr	r4, [pc, #40]	; (800756c <LoopFillZerobss+0x22>)
  movs r3, #0
 8007542:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007544:	e001      	b.n	800754a <LoopFillZerobss>

08007546 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007546:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007548:	3204      	adds	r2, #4

0800754a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800754a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800754c:	d3fb      	bcc.n	8007546 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800754e:	f001 fec3 	bl	80092d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007552:	f7ff fb1f 	bl	8006b94 <main>
  bx  lr
 8007556:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007558:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800755c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8007560:	24000474 	.word	0x24000474
  ldr r2, =_sidata
 8007564:	08009998 	.word	0x08009998
  ldr r2, =_sbss
 8007568:	24000474 	.word	0x24000474
  ldr r4, =_ebss
 800756c:	24000b9c 	.word	0x24000b9c

08007570 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007570:	e7fe      	b.n	8007570 <ADC3_IRQHandler>
	...

08007574 <D16_GENERIC>:
 8007574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007578:	b089      	sub	sp, #36	; 0x24
 800757a:	6993      	ldr	r3, [r2, #24]
 800757c:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800757e:	9103      	str	r1, [sp, #12]
 8007580:	9307      	str	r3, [sp, #28]
 8007582:	69d3      	ldr	r3, [r2, #28]
 8007584:	e9d2 c102 	ldrd	ip, r1, [r2, #8]
 8007588:	e9d2 4a04 	ldrd	r4, sl, [r2, #16]
 800758c:	9106      	str	r1, [sp, #24]
 800758e:	e9d2 810c 	ldrd	r8, r1, [r2, #48]	; 0x30
 8007592:	2d00      	cmp	r5, #0
 8007594:	d063      	beq.n	800765e <D16_GENERIC+0xea>
 8007596:	f001 0520 	and.w	r5, r1, #32
 800759a:	f001 0110 	and.w	r1, r1, #16
 800759e:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 8007680 <D16_GENERIC+0x10c>
 80075a2:	46c1      	mov	r9, r8
 80075a4:	9104      	str	r1, [sp, #16]
 80075a6:	2100      	movs	r1, #0
 80075a8:	9505      	str	r5, [sp, #20]
 80075aa:	e04d      	b.n	8007648 <D16_GENERIC+0xd4>
 80075ac:	5d87      	ldrb	r7, [r0, r6]
 80075ae:	7805      	ldrb	r5, [r0, #0]
 80075b0:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 80075b4:	eb05 2707 	add.w	r7, r5, r7, lsl #8
 80075b8:	b2fe      	uxtb	r6, r7
 80075ba:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80075be:	f85e 5026 	ldr.w	r5, [lr, r6, lsl #2]
 80075c2:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
 80075c6:	441d      	add	r5, r3
 80075c8:	eb06 2395 	add.w	r3, r6, r5, lsr #10
 80075cc:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80075d0:	f3c3 0609 	ubfx	r6, r3, #0, #10
 80075d4:	0a9b      	lsrs	r3, r3, #10
 80075d6:	ea46 4605 	orr.w	r6, r6, r5, lsl #16
 80075da:	4d27      	ldr	r5, [pc, #156]	; (8007678 <D16_GENERIC+0x104>)
 80075dc:	fb26 c505 	smlad	r5, r6, r5, ip
 80075e0:	4f26      	ldr	r7, [pc, #152]	; (800767c <D16_GENERIC+0x108>)
 80075e2:	fb26 fc07 	smuad	ip, r6, r7
 80075e6:	9e04      	ldr	r6, [sp, #16]
 80075e8:	f101 0801 	add.w	r8, r1, #1
 80075ec:	f5a5 6500 	sub.w	r5, r5, #2048	; 0x800
 80075f0:	b1ae      	cbz	r6, 800761e <D16_GENERIC+0xaa>
 80075f2:	442c      	add	r4, r5
 80075f4:	f8d2 b020 	ldr.w	fp, [r2, #32]
 80075f8:	eba4 040a 	sub.w	r4, r4, sl
 80075fc:	46aa      	mov	sl, r5
 80075fe:	17e7      	asrs	r7, r4, #31
 8007600:	fba4 450b 	umull	r4, r5, r4, fp
 8007604:	e9cd 4500 	strd	r4, r5, [sp]
 8007608:	fb0b 5407 	mla	r4, fp, r7, r5
 800760c:	9401      	str	r4, [sp, #4]
 800760e:	e9dd 4500 	ldrd	r4, r5, [sp]
 8007612:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 8007616:	f145 0500 	adc.w	r5, r5, #0
 800761a:	006c      	lsls	r4, r5, #1
 800761c:	4625      	mov	r5, r4
 800761e:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 8007622:	042d      	lsls	r5, r5, #16
 8007624:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007628:	2700      	movs	r7, #0
 800762a:	fb01 fb0b 	mul.w	fp, r1, fp
 800762e:	fa1f f188 	uxth.w	r1, r8
 8007632:	fbc9 6705 	smlal	r6, r7, r9, r5
 8007636:	9e03      	ldr	r6, [sp, #12]
 8007638:	10bd      	asrs	r5, r7, #2
 800763a:	f305 050f 	ssat	r5, #16, r5
 800763e:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 8007642:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8007644:	428d      	cmp	r5, r1
 8007646:	d90a      	bls.n	800765e <D16_GENERIC+0xea>
 8007648:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800764a:	2d01      	cmp	r5, #1
 800764c:	b2ee      	uxtb	r6, r5
 800764e:	d1ad      	bne.n	80075ac <D16_GENERIC+0x38>
 8007650:	9d05      	ldr	r5, [sp, #20]
 8007652:	f850 7b02 	ldr.w	r7, [r0], #2
 8007656:	2d00      	cmp	r5, #0
 8007658:	d0ae      	beq.n	80075b8 <D16_GENERIC+0x44>
 800765a:	ba7f      	rev16	r7, r7
 800765c:	e7ac      	b.n	80075b8 <D16_GENERIC+0x44>
 800765e:	2000      	movs	r0, #0
 8007660:	9906      	ldr	r1, [sp, #24]
 8007662:	61d3      	str	r3, [r2, #28]
 8007664:	9b07      	ldr	r3, [sp, #28]
 8007666:	f8c2 c008 	str.w	ip, [r2, #8]
 800766a:	60d1      	str	r1, [r2, #12]
 800766c:	6193      	str	r3, [r2, #24]
 800766e:	e9c2 4a04 	strd	r4, sl, [r2, #16]
 8007672:	b009      	add	sp, #36	; 0x24
 8007674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007678:	00030001 	.word	0x00030001
 800767c:	00010003 	.word	0x00010003
 8007680:	24000000 	.word	0x24000000

08007684 <D24_GENERIC>:
 8007684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007688:	e9d2 4304 	ldrd	r4, r3, [r2, #16]
 800768c:	b089      	sub	sp, #36	; 0x24
 800768e:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 8007690:	9303      	str	r3, [sp, #12]
 8007692:	6993      	ldr	r3, [r2, #24]
 8007694:	9104      	str	r1, [sp, #16]
 8007696:	9307      	str	r3, [sp, #28]
 8007698:	69d1      	ldr	r1, [r2, #28]
 800769a:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 800769e:	e9d2 a50c 	ldrd	sl, r5, [r2, #48]	; 0x30
 80076a2:	2e00      	cmp	r6, #0
 80076a4:	f000 8088 	beq.w	80077b8 <D24_GENERIC+0x134>
 80076a8:	f005 0620 	and.w	r6, r5, #32
 80076ac:	f005 0510 	and.w	r5, r5, #16
 80076b0:	f04f 0c00 	mov.w	ip, #0
 80076b4:	f8df e140 	ldr.w	lr, [pc, #320]	; 80077f8 <D24_GENERIC+0x174>
 80076b8:	9606      	str	r6, [sp, #24]
 80076ba:	9505      	str	r5, [sp, #20]
 80076bc:	e064      	b.n	8007788 <D24_GENERIC+0x104>
 80076be:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 80076c2:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 80076c6:	f810 b007 	ldrb.w	fp, [r0, r7]
 80076ca:	042d      	lsls	r5, r5, #16
 80076cc:	19f0      	adds	r0, r6, r7
 80076ce:	eb05 250b 	add.w	r5, r5, fp, lsl #8
 80076d2:	44a9      	add	r9, r5
 80076d4:	fa5f f689 	uxtb.w	r6, r9
 80076d8:	f3c9 2707 	ubfx	r7, r9, #8, #8
 80076dc:	ea4f 4919 	mov.w	r9, r9, lsr #16
 80076e0:	f85e 6026 	ldr.w	r6, [lr, r6, lsl #2]
 80076e4:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
 80076e8:	eb06 2691 	add.w	r6, r6, r1, lsr #10
 80076ec:	f85e 1029 	ldr.w	r1, [lr, r9, lsl #2]
 80076f0:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 80076f4:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80076f8:	f3c7 0509 	ubfx	r5, r7, #0, #10
 80076fc:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 8007700:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 8007704:	4d3a      	ldr	r5, [pc, #232]	; (80077f0 <D24_GENERIC+0x16c>)
 8007706:	fb26 8705 	smlad	r7, r6, r5, r8
 800770a:	4d3a      	ldr	r5, [pc, #232]	; (80077f4 <D24_GENERIC+0x170>)
 800770c:	fb26 3805 	smlad	r8, r6, r5, r3
 8007710:	f3c1 0309 	ubfx	r3, r1, #0, #10
 8007714:	eb03 0b43 	add.w	fp, r3, r3, lsl #1
 8007718:	2301      	movs	r3, #1
 800771a:	eb08 084b 	add.w	r8, r8, fp, lsl #1
 800771e:	fb26 f603 	smuad	r6, r6, r3
 8007722:	eb0c 0903 	add.w	r9, ip, r3
 8007726:	eb0b 0306 	add.w	r3, fp, r6
 800772a:	9e05      	ldr	r6, [sp, #20]
 800772c:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 8007730:	b1ae      	cbz	r6, 800775e <D24_GENERIC+0xda>
 8007732:	442c      	add	r4, r5
 8007734:	9e03      	ldr	r6, [sp, #12]
 8007736:	f8d2 b020 	ldr.w	fp, [r2, #32]
 800773a:	1ba4      	subs	r4, r4, r6
 800773c:	9503      	str	r5, [sp, #12]
 800773e:	17e7      	asrs	r7, r4, #31
 8007740:	fba4 450b 	umull	r4, r5, r4, fp
 8007744:	e9cd 4500 	strd	r4, r5, [sp]
 8007748:	fb0b 5407 	mla	r4, fp, r7, r5
 800774c:	9401      	str	r4, [sp, #4]
 800774e:	e9dd 4500 	ldrd	r4, r5, [sp]
 8007752:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 8007756:	f145 0500 	adc.w	r5, r5, #0
 800775a:	006c      	lsls	r4, r5, #1
 800775c:	4625      	mov	r5, r4
 800775e:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 8007762:	03ad      	lsls	r5, r5, #14
 8007764:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007768:	2700      	movs	r7, #0
 800776a:	fb0c fb0b 	mul.w	fp, ip, fp
 800776e:	fa1f fc89 	uxth.w	ip, r9
 8007772:	fbca 6705 	smlal	r6, r7, sl, r5
 8007776:	9e04      	ldr	r6, [sp, #16]
 8007778:	10bd      	asrs	r5, r7, #2
 800777a:	f305 050f 	ssat	r5, #16, r5
 800777e:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 8007782:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8007784:	4565      	cmp	r5, ip
 8007786:	d917      	bls.n	80077b8 <D24_GENERIC+0x134>
 8007788:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800778a:	f890 9000 	ldrb.w	r9, [r0]
 800778e:	b2ef      	uxtb	r7, r5
 8007790:	2d01      	cmp	r5, #1
 8007792:	b23e      	sxth	r6, r7
 8007794:	d193      	bne.n	80076be <D24_GENERIC+0x3a>
 8007796:	9d06      	ldr	r5, [sp, #24]
 8007798:	b1dd      	cbz	r5, 80077d2 <D24_GENERIC+0x14e>
 800779a:	78c7      	ldrb	r7, [r0, #3]
 800779c:	ea4f 2609 	mov.w	r6, r9, lsl #8
 80077a0:	f01c 0f01 	tst.w	ip, #1
 80077a4:	ea4f 2507 	mov.w	r5, r7, lsl #8
 80077a8:	eb06 4607 	add.w	r6, r6, r7, lsl #16
 80077ac:	d11a      	bne.n	80077e4 <D24_GENERIC+0x160>
 80077ae:	f890 9001 	ldrb.w	r9, [r0, #1]
 80077b2:	3002      	adds	r0, #2
 80077b4:	44b1      	add	r9, r6
 80077b6:	e78d      	b.n	80076d4 <D24_GENERIC+0x50>
 80077b8:	6093      	str	r3, [r2, #8]
 80077ba:	2000      	movs	r0, #0
 80077bc:	9b03      	ldr	r3, [sp, #12]
 80077be:	f8c2 800c 	str.w	r8, [r2, #12]
 80077c2:	6153      	str	r3, [r2, #20]
 80077c4:	9b07      	ldr	r3, [sp, #28]
 80077c6:	61d1      	str	r1, [r2, #28]
 80077c8:	6114      	str	r4, [r2, #16]
 80077ca:	6193      	str	r3, [r2, #24]
 80077cc:	b009      	add	sp, #36	; 0x24
 80077ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077d2:	7845      	ldrb	r5, [r0, #1]
 80077d4:	3003      	adds	r0, #3
 80077d6:	f810 6c01 	ldrb.w	r6, [r0, #-1]
 80077da:	022d      	lsls	r5, r5, #8
 80077dc:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 80077e0:	44a9      	add	r9, r5
 80077e2:	e777      	b.n	80076d4 <D24_GENERIC+0x50>
 80077e4:	7886      	ldrb	r6, [r0, #2]
 80077e6:	3004      	adds	r0, #4
 80077e8:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 80077ec:	44a9      	add	r9, r5
 80077ee:	e771      	b.n	80076d4 <D24_GENERIC+0x50>
 80077f0:	00030001 	.word	0x00030001
 80077f4:	00060007 	.word	0x00060007
 80077f8:	24000000 	.word	0x24000000

080077fc <D32_GENERIC>:
 80077fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007800:	e9d2 4304 	ldrd	r4, r3, [r2, #16]
 8007804:	b089      	sub	sp, #36	; 0x24
 8007806:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8007808:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 800780a:	9302      	str	r3, [sp, #8]
 800780c:	6993      	ldr	r3, [r2, #24]
 800780e:	9104      	str	r1, [sp, #16]
 8007810:	9307      	str	r3, [sp, #28]
 8007812:	9503      	str	r5, [sp, #12]
 8007814:	69d1      	ldr	r1, [r2, #28]
 8007816:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8007818:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 800781c:	2e00      	cmp	r6, #0
 800781e:	f000 8097 	beq.w	8007950 <D32_GENERIC+0x154>
 8007822:	f005 0620 	and.w	r6, r5, #32
 8007826:	f005 0510 	and.w	r5, r5, #16
 800782a:	f04f 0e00 	mov.w	lr, #0
 800782e:	f8df c150 	ldr.w	ip, [pc, #336]	; 8007980 <D32_GENERIC+0x184>
 8007832:	9606      	str	r6, [sp, #24]
 8007834:	9505      	str	r5, [sp, #20]
 8007836:	e079      	b.n	800792c <D32_GENERIC+0x130>
 8007838:	783d      	ldrb	r5, [r7, #0]
 800783a:	f810 b009 	ldrb.w	fp, [r0, r9]
 800783e:	042d      	lsls	r5, r5, #16
 8007840:	f810 a006 	ldrb.w	sl, [r0, r6]
 8007844:	f890 9000 	ldrb.w	r9, [r0]
 8007848:	eb07 0046 	add.w	r0, r7, r6, lsl #1
 800784c:	eb05 650b 	add.w	r5, r5, fp, lsl #24
 8007850:	eb05 250a 	add.w	r5, r5, sl, lsl #8
 8007854:	44a9      	add	r9, r5
 8007856:	fa5f f789 	uxtb.w	r7, r9
 800785a:	f3c9 2507 	ubfx	r5, r9, #8, #8
 800785e:	f3c9 4607 	ubfx	r6, r9, #16, #8
 8007862:	ea4f 6919 	mov.w	r9, r9, lsr #24
 8007866:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 800786a:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 800786e:	eb07 2191 	add.w	r1, r7, r1, lsr #10
 8007872:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
 8007876:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
 800787a:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800787e:	f3c1 0909 	ubfx	r9, r1, #0, #10
 8007882:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 8007886:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800788a:	eb07 2196 	add.w	r1, r7, r6, lsr #10
 800788e:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8007892:	ea45 4909 	orr.w	r9, r5, r9, lsl #16
 8007896:	f3c1 0509 	ubfx	r5, r1, #0, #10
 800789a:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 800789e:	4d34      	ldr	r5, [pc, #208]	; (8007970 <D32_GENERIC+0x174>)
 80078a0:	fb29 8805 	smlad	r8, r9, r5, r8
 80078a4:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 80078a8:	fb26 8705 	smlad	r7, r6, r5, r8
 80078ac:	4d31      	ldr	r5, [pc, #196]	; (8007974 <D32_GENERIC+0x178>)
 80078ae:	fb29 3305 	smlad	r3, r9, r5, r3
 80078b2:	4d31      	ldr	r5, [pc, #196]	; (8007978 <D32_GENERIC+0x17c>)
 80078b4:	fb26 3805 	smlad	r8, r6, r5, r3
 80078b8:	2301      	movs	r3, #1
 80078ba:	fb29 f903 	smuad	r9, r9, r3
 80078be:	4b2f      	ldr	r3, [pc, #188]	; (800797c <D32_GENERIC+0x180>)
 80078c0:	fb26 9303 	smlad	r3, r6, r3, r9
 80078c4:	9e05      	ldr	r6, [sp, #20]
 80078c6:	f10e 0901 	add.w	r9, lr, #1
 80078ca:	f5a7 4580 	sub.w	r5, r7, #16384	; 0x4000
 80078ce:	b1ae      	cbz	r6, 80078fc <D32_GENERIC+0x100>
 80078d0:	442c      	add	r4, r5
 80078d2:	9e02      	ldr	r6, [sp, #8]
 80078d4:	f8d2 a020 	ldr.w	sl, [r2, #32]
 80078d8:	1ba4      	subs	r4, r4, r6
 80078da:	9502      	str	r5, [sp, #8]
 80078dc:	17e7      	asrs	r7, r4, #31
 80078de:	fba4 450a 	umull	r4, r5, r4, sl
 80078e2:	e9cd 4500 	strd	r4, r5, [sp]
 80078e6:	fb0a 5407 	mla	r4, sl, r7, r5
 80078ea:	9401      	str	r4, [sp, #4]
 80078ec:	e9dd 4500 	ldrd	r4, r5, [sp]
 80078f0:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 80078f4:	f145 0500 	adc.w	r5, r5, #0
 80078f8:	006c      	lsls	r4, r5, #1
 80078fa:	4625      	mov	r5, r4
 80078fc:	f8b2 a028 	ldrh.w	sl, [r2, #40]	; 0x28
 8007900:	036d      	lsls	r5, r5, #13
 8007902:	9f03      	ldr	r7, [sp, #12]
 8007904:	fb0e fb0a 	mul.w	fp, lr, sl
 8007908:	fa1f fe89 	uxth.w	lr, r9
 800790c:	f04f 0a00 	mov.w	sl, #0
 8007910:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 8007914:	9e04      	ldr	r6, [sp, #16]
 8007916:	fbc7 9a05 	smlal	r9, sl, r7, r5
 800791a:	4657      	mov	r7, sl
 800791c:	10bd      	asrs	r5, r7, #2
 800791e:	f305 050f 	ssat	r5, #16, r5
 8007922:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 8007926:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8007928:	4575      	cmp	r5, lr
 800792a:	d911      	bls.n	8007950 <D32_GENERIC+0x154>
 800792c:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800792e:	b2ee      	uxtb	r6, r5
 8007930:	2d01      	cmp	r5, #1
 8007932:	eb00 0746 	add.w	r7, r0, r6, lsl #1
 8007936:	eb06 0946 	add.w	r9, r6, r6, lsl #1
 800793a:	f47f af7d 	bne.w	8007838 <D32_GENERIC+0x3c>
 800793e:	1d05      	adds	r5, r0, #4
 8007940:	f8d0 9000 	ldr.w	r9, [r0]
 8007944:	9806      	ldr	r0, [sp, #24]
 8007946:	b180      	cbz	r0, 800796a <D32_GENERIC+0x16e>
 8007948:	fa99 f999 	rev16.w	r9, r9
 800794c:	4628      	mov	r0, r5
 800794e:	e782      	b.n	8007856 <D32_GENERIC+0x5a>
 8007950:	6093      	str	r3, [r2, #8]
 8007952:	2000      	movs	r0, #0
 8007954:	9b02      	ldr	r3, [sp, #8]
 8007956:	f8c2 800c 	str.w	r8, [r2, #12]
 800795a:	6153      	str	r3, [r2, #20]
 800795c:	9b07      	ldr	r3, [sp, #28]
 800795e:	61d1      	str	r1, [r2, #28]
 8007960:	6114      	str	r4, [r2, #16]
 8007962:	6193      	str	r3, [r2, #24]
 8007964:	b009      	add	sp, #36	; 0x24
 8007966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800796a:	4628      	mov	r0, r5
 800796c:	e773      	b.n	8007856 <D32_GENERIC+0x5a>
 800796e:	bf00      	nop
 8007970:	00060003 	.word	0x00060003
 8007974:	000a000c 	.word	0x000a000c
 8007978:	000c000a 	.word	0x000c000a
 800797c:	00030006 	.word	0x00030006
 8007980:	24000000 	.word	0x24000000

08007984 <D48_GENERIC>:
 8007984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007988:	6913      	ldr	r3, [r2, #16]
 800798a:	b089      	sub	sp, #36	; 0x24
 800798c:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800798e:	9301      	str	r3, [sp, #4]
 8007990:	6953      	ldr	r3, [r2, #20]
 8007992:	9104      	str	r1, [sp, #16]
 8007994:	9302      	str	r3, [sp, #8]
 8007996:	6993      	ldr	r3, [r2, #24]
 8007998:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 800799c:	9307      	str	r3, [sp, #28]
 800799e:	e9d2 3102 	ldrd	r3, r1, [r2, #8]
 80079a2:	9100      	str	r1, [sp, #0]
 80079a4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80079a6:	9103      	str	r1, [sp, #12]
 80079a8:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80079aa:	2c00      	cmp	r4, #0
 80079ac:	f000 80be 	beq.w	8007b2c <D48_GENERIC+0x1a8>
 80079b0:	f001 0420 	and.w	r4, r1, #32
 80079b4:	f001 0110 	and.w	r1, r1, #16
 80079b8:	f04f 0e00 	mov.w	lr, #0
 80079bc:	9105      	str	r1, [sp, #20]
 80079be:	9406      	str	r4, [sp, #24]
 80079c0:	4962      	ldr	r1, [pc, #392]	; (8007b4c <D48_GENERIC+0x1c8>)
 80079c2:	e0a0      	b.n	8007b06 <D48_GENERIC+0x182>
 80079c4:	eb00 0608 	add.w	r6, r0, r8
 80079c8:	f810 a008 	ldrb.w	sl, [r0, r8]
 80079cc:	f810 9005 	ldrb.w	r9, [r0, r5]
 80079d0:	5df4      	ldrb	r4, [r6, r7]
 80079d2:	443e      	add	r6, r7
 80079d4:	f890 b000 	ldrb.w	fp, [r0]
 80079d8:	0420      	lsls	r0, r4, #16
 80079da:	eb06 0408 	add.w	r4, r6, r8
 80079de:	f816 6008 	ldrb.w	r6, [r6, r8]
 80079e2:	eb00 6a0a 	add.w	sl, r0, sl, lsl #24
 80079e6:	f814 8007 	ldrb.w	r8, [r4, r7]
 80079ea:	4427      	add	r7, r4
 80079ec:	eb0a 2a09 	add.w	sl, sl, r9, lsl #8
 80079f0:	eb08 2606 	add.w	r6, r8, r6, lsl #8
 80079f4:	eb0a 040b 	add.w	r4, sl, fp
 80079f8:	eb07 0045 	add.w	r0, r7, r5, lsl #1
 80079fc:	f3c6 2807 	ubfx	r8, r6, #8, #8
 8007a00:	b2f7      	uxtb	r7, r6
 8007a02:	b2e6      	uxtb	r6, r4
 8007a04:	f3c4 2507 	ubfx	r5, r4, #8, #8
 8007a08:	f3c4 4907 	ubfx	r9, r4, #16, #8
 8007a0c:	ea4f 6b14 	mov.w	fp, r4, lsr #24
 8007a10:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8007a14:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 8007a18:	eb06 269c 	add.w	r6, r6, ip, lsr #10
 8007a1c:	f851 9029 	ldr.w	r9, [r1, r9, lsl #2]
 8007a20:	f851 402b 	ldr.w	r4, [r1, fp, lsl #2]
 8007a24:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 8007a28:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 8007a2c:	f851 c028 	ldr.w	ip, [r1, r8, lsl #2]
 8007a30:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8007a34:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 8007a38:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8007a3c:	eb04 2499 	add.w	r4, r4, r9, lsr #10
 8007a40:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8007a44:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 8007a48:	9d00      	ldr	r5, [sp, #0]
 8007a4a:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 8007a4e:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8007a52:	eb0c 2c97 	add.w	ip, ip, r7, lsr #10
 8007a56:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8007a5a:	ea44 4909 	orr.w	r9, r4, r9, lsl #16
 8007a5e:	f3cc 0409 	ubfx	r4, ip, #0, #10
 8007a62:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8007a66:	4c3a      	ldr	r4, [pc, #232]	; (8007b50 <D48_GENERIC+0x1cc>)
 8007a68:	fb26 5a04 	smlad	sl, r6, r4, r5
 8007a6c:	4c39      	ldr	r4, [pc, #228]	; (8007b54 <D48_GENERIC+0x1d0>)
 8007a6e:	fb29 aa04 	smlad	sl, r9, r4, sl
 8007a72:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 8007a76:	fb27 aa04 	smlad	sl, r7, r4, sl
 8007a7a:	4c37      	ldr	r4, [pc, #220]	; (8007b58 <D48_GENERIC+0x1d4>)
 8007a7c:	fb26 3304 	smlad	r3, r6, r4, r3
 8007a80:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 8007a84:	fb29 3304 	smlad	r3, r9, r4, r3
 8007a88:	4c34      	ldr	r4, [pc, #208]	; (8007b5c <D48_GENERIC+0x1d8>)
 8007a8a:	fb27 3304 	smlad	r3, r7, r4, r3
 8007a8e:	2501      	movs	r5, #1
 8007a90:	9300      	str	r3, [sp, #0]
 8007a92:	fb26 f605 	smuad	r6, r6, r5
 8007a96:	4b32      	ldr	r3, [pc, #200]	; (8007b60 <D48_GENERIC+0x1dc>)
 8007a98:	fb29 6903 	smlad	r9, r9, r3, r6
 8007a9c:	4b31      	ldr	r3, [pc, #196]	; (8007b64 <D48_GENERIC+0x1e0>)
 8007a9e:	fb27 9303 	smlad	r3, r7, r3, r9
 8007aa2:	9c05      	ldr	r4, [sp, #20]
 8007aa4:	eb0e 0805 	add.w	r8, lr, r5
 8007aa8:	f5aa 4a58 	sub.w	sl, sl, #55296	; 0xd800
 8007aac:	b19c      	cbz	r4, 8007ad6 <D48_GENERIC+0x152>
 8007aae:	9c01      	ldr	r4, [sp, #4]
 8007ab0:	9d02      	ldr	r5, [sp, #8]
 8007ab2:	4454      	add	r4, sl
 8007ab4:	f8d2 9020 	ldr.w	r9, [r2, #32]
 8007ab8:	f8cd a008 	str.w	sl, [sp, #8]
 8007abc:	1b64      	subs	r4, r4, r5
 8007abe:	fba4 ab09 	umull	sl, fp, r4, r9
 8007ac2:	17e7      	asrs	r7, r4, #31
 8007ac4:	f11a 4400 	adds.w	r4, sl, #2147483648	; 0x80000000
 8007ac8:	fb09 bb07 	mla	fp, r9, r7, fp
 8007acc:	f14b 0500 	adc.w	r5, fp, #0
 8007ad0:	006c      	lsls	r4, r5, #1
 8007ad2:	46a2      	mov	sl, r4
 8007ad4:	9401      	str	r4, [sp, #4]
 8007ad6:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 8007ad8:	ea4f 2aca 	mov.w	sl, sl, lsl #11
 8007adc:	9d03      	ldr	r5, [sp, #12]
 8007ade:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8007ae2:	fb0e f606 	mul.w	r6, lr, r6
 8007ae6:	fa1f fe88 	uxth.w	lr, r8
 8007aea:	f04f 0800 	mov.w	r8, #0
 8007aee:	fbc5 780a 	smlal	r7, r8, r5, sl
 8007af2:	4645      	mov	r5, r8
 8007af4:	10ac      	asrs	r4, r5, #2
 8007af6:	9d04      	ldr	r5, [sp, #16]
 8007af8:	f304 040f 	ssat	r4, #16, r4
 8007afc:	f825 4016 	strh.w	r4, [r5, r6, lsl #1]
 8007b00:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8007b02:	4574      	cmp	r4, lr
 8007b04:	d912      	bls.n	8007b2c <D48_GENERIC+0x1a8>
 8007b06:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 8007b08:	b2e5      	uxtb	r5, r4
 8007b0a:	2c01      	cmp	r4, #1
 8007b0c:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 8007b10:	f1c5 0700 	rsb	r7, r5, #0
 8007b14:	f47f af56 	bne.w	80079c4 <D48_GENERIC+0x40>
 8007b18:	9d06      	ldr	r5, [sp, #24]
 8007b1a:	e9d0 4600 	ldrd	r4, r6, [r0]
 8007b1e:	3006      	adds	r0, #6
 8007b20:	2d00      	cmp	r5, #0
 8007b22:	f43f af6b 	beq.w	80079fc <D48_GENERIC+0x78>
 8007b26:	ba64      	rev16	r4, r4
 8007b28:	ba76      	rev16	r6, r6
 8007b2a:	e767      	b.n	80079fc <D48_GENERIC+0x78>
 8007b2c:	6093      	str	r3, [r2, #8]
 8007b2e:	2000      	movs	r0, #0
 8007b30:	9b00      	ldr	r3, [sp, #0]
 8007b32:	f8c2 c01c 	str.w	ip, [r2, #28]
 8007b36:	60d3      	str	r3, [r2, #12]
 8007b38:	9b01      	ldr	r3, [sp, #4]
 8007b3a:	6113      	str	r3, [r2, #16]
 8007b3c:	9b02      	ldr	r3, [sp, #8]
 8007b3e:	6153      	str	r3, [r2, #20]
 8007b40:	9b07      	ldr	r3, [sp, #28]
 8007b42:	6193      	str	r3, [r2, #24]
 8007b44:	b009      	add	sp, #36	; 0x24
 8007b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b4a:	bf00      	nop
 8007b4c:	24000000 	.word	0x24000000
 8007b50:	000f000a 	.word	0x000f000a
 8007b54:	00060003 	.word	0x00060003
 8007b58:	00150019 	.word	0x00150019
 8007b5c:	00190015 	.word	0x00190015
 8007b60:	00030006 	.word	0x00030006
 8007b64:	000a000f 	.word	0x000a000f

08007b68 <D64_GENERIC>:
 8007b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b6c:	6913      	ldr	r3, [r2, #16]
 8007b6e:	b089      	sub	sp, #36	; 0x24
 8007b70:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8007b72:	9300      	str	r3, [sp, #0]
 8007b74:	6953      	ldr	r3, [r2, #20]
 8007b76:	9105      	str	r1, [sp, #20]
 8007b78:	9303      	str	r3, [sp, #12]
 8007b7a:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 8007b7c:	6993      	ldr	r3, [r2, #24]
 8007b7e:	69d4      	ldr	r4, [r2, #28]
 8007b80:	9307      	str	r3, [sp, #28]
 8007b82:	9504      	str	r5, [sp, #16]
 8007b84:	e9d2 3602 	ldrd	r3, r6, [r2, #8]
 8007b88:	2900      	cmp	r1, #0
 8007b8a:	f000 80e8 	beq.w	8007d5e <D64_GENERIC+0x1f6>
 8007b8e:	6a11      	ldr	r1, [r2, #32]
 8007b90:	2500      	movs	r5, #0
 8007b92:	46b3      	mov	fp, r6
 8007b94:	9302      	str	r3, [sp, #8]
 8007b96:	9106      	str	r1, [sp, #24]
 8007b98:	4978      	ldr	r1, [pc, #480]	; (8007d7c <D64_GENERIC+0x214>)
 8007b9a:	e0cc      	b.n	8007d36 <D64_GENERIC+0x1ce>
 8007b9c:	eb0e 084e 	add.w	r8, lr, lr, lsl #1
 8007ba0:	f1ce 0c00 	rsb	ip, lr, #0
 8007ba4:	f890 9000 	ldrb.w	r9, [r0]
 8007ba8:	eb00 0708 	add.w	r7, r0, r8
 8007bac:	f810 6008 	ldrb.w	r6, [r0, r8]
 8007bb0:	eb07 0a4c 	add.w	sl, r7, ip, lsl #1
 8007bb4:	f817 000c 	ldrb.w	r0, [r7, ip]
 8007bb8:	f817 301c 	ldrb.w	r3, [r7, ip, lsl #1]
 8007bbc:	eb0a 0748 	add.w	r7, sl, r8, lsl #1
 8007bc0:	f81a a018 	ldrb.w	sl, [sl, r8, lsl #1]
 8007bc4:	ea4f 4800 	mov.w	r8, r0, lsl #16
 8007bc8:	f817 000c 	ldrb.w	r0, [r7, ip]
 8007bcc:	eb08 6606 	add.w	r6, r8, r6, lsl #24
 8007bd0:	f817 801c 	ldrb.w	r8, [r7, ip, lsl #1]
 8007bd4:	0400      	lsls	r0, r0, #16
 8007bd6:	4467      	add	r7, ip
 8007bd8:	eb06 2603 	add.w	r6, r6, r3, lsl #8
 8007bdc:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 8007be0:	f817 a01c 	ldrb.w	sl, [r7, ip, lsl #1]
 8007be4:	eb07 074c 	add.w	r7, r7, ip, lsl #1
 8007be8:	444e      	add	r6, r9
 8007bea:	eb00 2808 	add.w	r8, r0, r8, lsl #8
 8007bee:	eb07 008e 	add.w	r0, r7, lr, lsl #2
 8007bf2:	44c2      	add	sl, r8
 8007bf4:	b2f7      	uxtb	r7, r6
 8007bf6:	f3c6 2807 	ubfx	r8, r6, #8, #8
 8007bfa:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 8007bfe:	0e36      	lsrs	r6, r6, #24
 8007c00:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 8007c04:	fa5f fc8a 	uxtb.w	ip, sl
 8007c08:	f851 8028 	ldr.w	r8, [r1, r8, lsl #2]
 8007c0c:	f3ca 2907 	ubfx	r9, sl, #8, #8
 8007c10:	443c      	add	r4, r7
 8007c12:	f851 702e 	ldr.w	r7, [r1, lr, lsl #2]
 8007c16:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8007c1a:	eb08 2894 	add.w	r8, r8, r4, lsr #10
 8007c1e:	f851 c02c 	ldr.w	ip, [r1, ip, lsl #2]
 8007c22:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8007c26:	4b56      	ldr	r3, [pc, #344]	; (8007d80 <D64_GENERIC+0x218>)
 8007c28:	eb07 2e98 	add.w	lr, r7, r8, lsr #10
 8007c2c:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8007c30:	f851 7029 	ldr.w	r7, [r1, r9, lsl #2]
 8007c34:	eb06 269e 	add.w	r6, r6, lr, lsr #10
 8007c38:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8007c3c:	ea48 4804 	orr.w	r8, r8, r4, lsl #16
 8007c40:	f3ca 4407 	ubfx	r4, sl, #16, #8
 8007c44:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 8007c48:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8007c4c:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8007c50:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8007c54:	eb07 279c 	add.w	r7, r7, ip, lsr #10
 8007c58:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8007c5c:	f851 902a 	ldr.w	r9, [r1, sl, lsl #2]
 8007c60:	ea46 460e 	orr.w	r6, r6, lr, lsl #16
 8007c64:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 8007c68:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8007c6c:	eb09 299a 	add.w	r9, r9, sl, lsr #10
 8007c70:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8007c74:	ea47 4c0c 	orr.w	ip, r7, ip, lsl #16
 8007c78:	f3c9 0709 	ubfx	r7, r9, #0, #10
 8007c7c:	ea4f 2499 	mov.w	r4, r9, lsr #10
 8007c80:	ea47 4a0a 	orr.w	sl, r7, sl, lsl #16
 8007c84:	fb28 b903 	smlad	r9, r8, r3, fp
 8007c88:	4b3e      	ldr	r3, [pc, #248]	; (8007d84 <D64_GENERIC+0x21c>)
 8007c8a:	fb26 9903 	smlad	r9, r6, r3, r9
 8007c8e:	4b3e      	ldr	r3, [pc, #248]	; (8007d88 <D64_GENERIC+0x220>)
 8007c90:	fb2c 9703 	smlad	r7, ip, r3, r9
 8007c94:	f44f 3980 	mov.w	r9, #65536	; 0x10000
 8007c98:	fb2a 7909 	smlad	r9, sl, r9, r7
 8007c9c:	4f3b      	ldr	r7, [pc, #236]	; (8007d8c <D64_GENERIC+0x224>)
 8007c9e:	9b02      	ldr	r3, [sp, #8]
 8007ca0:	fb28 3307 	smlad	r3, r8, r7, r3
 8007ca4:	fb2a 3317 	smladx	r3, sl, r7, r3
 8007ca8:	4f39      	ldr	r7, [pc, #228]	; (8007d90 <D64_GENERIC+0x228>)
 8007caa:	fb26 3307 	smlad	r3, r6, r7, r3
 8007cae:	fb2c 3b17 	smladx	fp, ip, r7, r3
 8007cb2:	f04f 0e01 	mov.w	lr, #1
 8007cb6:	fb28 f80e 	smuad	r8, r8, lr
 8007cba:	4b36      	ldr	r3, [pc, #216]	; (8007d94 <D64_GENERIC+0x22c>)
 8007cbc:	fb26 8603 	smlad	r6, r6, r3, r8
 8007cc0:	4b35      	ldr	r3, [pc, #212]	; (8007d98 <D64_GENERIC+0x230>)
 8007cc2:	fb2c 6c03 	smlad	ip, ip, r3, r6
 8007cc6:	4b35      	ldr	r3, [pc, #212]	; (8007d9c <D64_GENERIC+0x234>)
 8007cc8:	fb2a c303 	smlad	r3, sl, r3, ip
 8007ccc:	9f06      	ldr	r7, [sp, #24]
 8007cce:	f5a9 3900 	sub.w	r9, r9, #131072	; 0x20000
 8007cd2:	9302      	str	r3, [sp, #8]
 8007cd4:	b1cf      	cbz	r7, 8007d0a <D64_GENERIC+0x1a2>
 8007cd6:	9b00      	ldr	r3, [sp, #0]
 8007cd8:	444b      	add	r3, r9
 8007cda:	461e      	mov	r6, r3
 8007cdc:	9b03      	ldr	r3, [sp, #12]
 8007cde:	f8cd 900c 	str.w	r9, [sp, #12]
 8007ce2:	1af6      	subs	r6, r6, r3
 8007ce4:	46b0      	mov	r8, r6
 8007ce6:	ea4f 79e6 	mov.w	r9, r6, asr #31
 8007cea:	e9cd 8900 	strd	r8, r9, [sp]
 8007cee:	fba6 8907 	umull	r8, r9, r6, r7
 8007cf2:	9e01      	ldr	r6, [sp, #4]
 8007cf4:	fb07 9306 	mla	r3, r7, r6, r9
 8007cf8:	4646      	mov	r6, r8
 8007cfa:	f116 4600 	adds.w	r6, r6, #2147483648	; 0x80000000
 8007cfe:	f143 0700 	adc.w	r7, r3, #0
 8007d02:	fa07 f30e 	lsl.w	r3, r7, lr
 8007d06:	4699      	mov	r9, r3
 8007d08:	9300      	str	r3, [sp, #0]
 8007d0a:	f8b2 c028 	ldrh.w	ip, [r2, #40]	; 0x28
 8007d0e:	ea4f 2989 	mov.w	r9, r9, lsl #10
 8007d12:	9b04      	ldr	r3, [sp, #16]
 8007d14:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007d18:	2700      	movs	r7, #0
 8007d1a:	fb05 fc0c 	mul.w	ip, r5, ip
 8007d1e:	3501      	adds	r5, #1
 8007d20:	fbc3 6709 	smlal	r6, r7, r3, r9
 8007d24:	9b05      	ldr	r3, [sp, #20]
 8007d26:	10be      	asrs	r6, r7, #2
 8007d28:	f306 060f 	ssat	r6, #16, r6
 8007d2c:	f823 601c 	strh.w	r6, [r3, ip, lsl #1]
 8007d30:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 8007d32:	42ae      	cmp	r6, r5
 8007d34:	dd11      	ble.n	8007d5a <D64_GENERIC+0x1f2>
 8007d36:	f8b2 e02a 	ldrh.w	lr, [r2, #42]	; 0x2a
 8007d3a:	f1be 0f01 	cmp.w	lr, #1
 8007d3e:	f47f af2d 	bne.w	8007b9c <D64_GENERIC+0x34>
 8007d42:	6b57      	ldr	r7, [r2, #52]	; 0x34
 8007d44:	f100 0c08 	add.w	ip, r0, #8
 8007d48:	06bb      	lsls	r3, r7, #26
 8007d4a:	e9d0 6a00 	ldrd	r6, sl, [r0]
 8007d4e:	d513      	bpl.n	8007d78 <D64_GENERIC+0x210>
 8007d50:	ba76      	rev16	r6, r6
 8007d52:	fa9a fa9a 	rev16.w	sl, sl
 8007d56:	4660      	mov	r0, ip
 8007d58:	e74c      	b.n	8007bf4 <D64_GENERIC+0x8c>
 8007d5a:	465e      	mov	r6, fp
 8007d5c:	9b02      	ldr	r3, [sp, #8]
 8007d5e:	6093      	str	r3, [r2, #8]
 8007d60:	2000      	movs	r0, #0
 8007d62:	9b00      	ldr	r3, [sp, #0]
 8007d64:	60d6      	str	r6, [r2, #12]
 8007d66:	6113      	str	r3, [r2, #16]
 8007d68:	9b03      	ldr	r3, [sp, #12]
 8007d6a:	61d4      	str	r4, [r2, #28]
 8007d6c:	6153      	str	r3, [r2, #20]
 8007d6e:	9b07      	ldr	r3, [sp, #28]
 8007d70:	6193      	str	r3, [r2, #24]
 8007d72:	b009      	add	sp, #36	; 0x24
 8007d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d78:	4660      	mov	r0, ip
 8007d7a:	e73b      	b.n	8007bf4 <D64_GENERIC+0x8c>
 8007d7c:	24000000 	.word	0x24000000
 8007d80:	001c0015 	.word	0x001c0015
 8007d84:	000f000a 	.word	0x000f000a
 8007d88:	00060003 	.word	0x00060003
 8007d8c:	0024002a 	.word	0x0024002a
 8007d90:	002e0030 	.word	0x002e0030
 8007d94:	00030006 	.word	0x00030006
 8007d98:	000a000f 	.word	0x000a000f
 8007d9c:	0015001c 	.word	0x0015001c

08007da0 <D80_GENERIC>:
 8007da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007da4:	b08b      	sub	sp, #44	; 0x2c
 8007da6:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8007da8:	9107      	str	r1, [sp, #28]
 8007daa:	6911      	ldr	r1, [r2, #16]
 8007dac:	9104      	str	r1, [sp, #16]
 8007dae:	6951      	ldr	r1, [r2, #20]
 8007db0:	9105      	str	r1, [sp, #20]
 8007db2:	6991      	ldr	r1, [r2, #24]
 8007db4:	9109      	str	r1, [sp, #36]	; 0x24
 8007db6:	69d1      	ldr	r1, [r2, #28]
 8007db8:	9102      	str	r1, [sp, #8]
 8007dba:	6891      	ldr	r1, [r2, #8]
 8007dbc:	9103      	str	r1, [sp, #12]
 8007dbe:	68d1      	ldr	r1, [r2, #12]
 8007dc0:	9101      	str	r1, [sp, #4]
 8007dc2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8007dc4:	9106      	str	r1, [sp, #24]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	f000 810b 	beq.w	8007fe2 <D80_GENERIC+0x242>
 8007dcc:	6a13      	ldr	r3, [r2, #32]
 8007dce:	f04f 0800 	mov.w	r8, #0
 8007dd2:	f8df c260 	ldr.w	ip, [pc, #608]	; 8008034 <D80_GENERIC+0x294>
 8007dd6:	9308      	str	r3, [sp, #32]
 8007dd8:	9200      	str	r2, [sp, #0]
 8007dda:	e0ee      	b.n	8007fba <D80_GENERIC+0x21a>
 8007ddc:	b2db      	uxtb	r3, r3
 8007dde:	f890 e000 	ldrb.w	lr, [r0]
 8007de2:	b219      	sxth	r1, r3
 8007de4:	425c      	negs	r4, r3
 8007de6:	f810 9003 	ldrb.w	r9, [r0, r3]
 8007dea:	004e      	lsls	r6, r1, #1
 8007dec:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 8007df0:	4431      	add	r1, r6
 8007df2:	1843      	adds	r3, r0, r1
 8007df4:	f810 b001 	ldrb.w	fp, [r0, r1]
 8007df8:	1919      	adds	r1, r3, r4
 8007dfa:	5d1b      	ldrb	r3, [r3, r4]
 8007dfc:	1948      	adds	r0, r1, r5
 8007dfe:	f811 a005 	ldrb.w	sl, [r1, r5]
 8007e02:	041b      	lsls	r3, r3, #16
 8007e04:	1907      	adds	r7, r0, r4
 8007e06:	5d01      	ldrb	r1, [r0, r4]
 8007e08:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 8007e0c:	f810 0014 	ldrb.w	r0, [r0, r4, lsl #1]
 8007e10:	eb07 0b44 	add.w	fp, r7, r4, lsl #1
 8007e14:	f817 7014 	ldrb.w	r7, [r7, r4, lsl #1]
 8007e18:	0409      	lsls	r1, r1, #16
 8007e1a:	eb03 2309 	add.w	r3, r3, r9, lsl #8
 8007e1e:	eb0b 0905 	add.w	r9, fp, r5
 8007e22:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 8007e26:	f81b 5005 	ldrb.w	r5, [fp, r5]
 8007e2a:	eb09 0b04 	add.w	fp, r9, r4
 8007e2e:	f819 4004 	ldrb.w	r4, [r9, r4]
 8007e32:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8007e36:	4473      	add	r3, lr
 8007e38:	eb0b 0006 	add.w	r0, fp, r6
 8007e3c:	eb04 2505 	add.w	r5, r4, r5, lsl #8
 8007e40:	4439      	add	r1, r7
 8007e42:	f3c3 2407 	ubfx	r4, r3, #8, #8
 8007e46:	b2df      	uxtb	r7, r3
 8007e48:	f3c3 4607 	ubfx	r6, r3, #16, #8
 8007e4c:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8007e50:	f85c 3027 	ldr.w	r3, [ip, r7, lsl #2]
 8007e54:	fa5f fa81 	uxtb.w	sl, r1
 8007e58:	f85c 7024 	ldr.w	r7, [ip, r4, lsl #2]
 8007e5c:	9c02      	ldr	r4, [sp, #8]
 8007e5e:	f85c 9026 	ldr.w	r9, [ip, r6, lsl #2]
 8007e62:	441c      	add	r4, r3
 8007e64:	f85c 602e 	ldr.w	r6, [ip, lr, lsl #2]
 8007e68:	f85c e02a 	ldr.w	lr, [ip, sl, lsl #2]
 8007e6c:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8007e70:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 8007e74:	f3c4 0309 	ubfx	r3, r4, #0, #10
 8007e78:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8007e7c:	b2ed      	uxtb	r5, r5
 8007e7e:	eb09 2997 	add.w	r9, r9, r7, lsr #10
 8007e82:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8007e86:	f85c 4024 	ldr.w	r4, [ip, r4, lsl #2]
 8007e8a:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 8007e8e:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 8007e92:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 8007e96:	f3c1 4707 	ubfx	r7, r1, #16, #8
 8007e9a:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 8007e9e:	f85c a02a 	ldr.w	sl, [ip, sl, lsl #2]
 8007ea2:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 8007ea6:	0e09      	lsrs	r1, r1, #24
 8007ea8:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 8007eac:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8007eb0:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 8007eb4:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8007eb8:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 8007ebc:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8007ec0:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8007ec4:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 8007ec8:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8007ecc:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
 8007ed0:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 8007ed4:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8007ed8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8007edc:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 8007ee0:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8007ee4:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 8007ee8:	ea4f 229a 	mov.w	r2, sl, lsr #10
 8007eec:	f3ca 0709 	ubfx	r7, sl, #0, #10
 8007ef0:	9202      	str	r2, [sp, #8]
 8007ef2:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 8007ef6:	4a43      	ldr	r2, [pc, #268]	; (8008004 <D80_GENERIC+0x264>)
 8007ef8:	9f01      	ldr	r7, [sp, #4]
 8007efa:	fb23 7a02 	smlad	sl, r3, r2, r7
 8007efe:	4a42      	ldr	r2, [pc, #264]	; (8008008 <D80_GENERIC+0x268>)
 8007f00:	fb26 aa02 	smlad	sl, r6, r2, sl
 8007f04:	4a41      	ldr	r2, [pc, #260]	; (800800c <D80_GENERIC+0x26c>)
 8007f06:	fb24 aa02 	smlad	sl, r4, r2, sl
 8007f0a:	4a41      	ldr	r2, [pc, #260]	; (8008010 <D80_GENERIC+0x270>)
 8007f0c:	fb21 a702 	smlad	r7, r1, r2, sl
 8007f10:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 8007f14:	fb25 7a0a 	smlad	sl, r5, sl, r7
 8007f18:	4a3e      	ldr	r2, [pc, #248]	; (8008014 <D80_GENERIC+0x274>)
 8007f1a:	9f03      	ldr	r7, [sp, #12]
 8007f1c:	fb23 7e02 	smlad	lr, r3, r2, r7
 8007f20:	4a3d      	ldr	r2, [pc, #244]	; (8008018 <D80_GENERIC+0x278>)
 8007f22:	fb26 ee02 	smlad	lr, r6, r2, lr
 8007f26:	f04f 174b 	mov.w	r7, #4915275	; 0x4b004b
 8007f2a:	fb24 e707 	smlad	r7, r4, r7, lr
 8007f2e:	4a3b      	ldr	r2, [pc, #236]	; (800801c <D80_GENERIC+0x27c>)
 8007f30:	fb21 7702 	smlad	r7, r1, r2, r7
 8007f34:	4a3a      	ldr	r2, [pc, #232]	; (8008020 <D80_GENERIC+0x280>)
 8007f36:	fb25 7202 	smlad	r2, r5, r2, r7
 8007f3a:	f04f 0901 	mov.w	r9, #1
 8007f3e:	9201      	str	r2, [sp, #4]
 8007f40:	fb23 f909 	smuad	r9, r3, r9
 8007f44:	4b37      	ldr	r3, [pc, #220]	; (8008024 <D80_GENERIC+0x284>)
 8007f46:	fb26 9603 	smlad	r6, r6, r3, r9
 8007f4a:	4f37      	ldr	r7, [pc, #220]	; (8008028 <D80_GENERIC+0x288>)
 8007f4c:	fb24 6407 	smlad	r4, r4, r7, r6
 8007f50:	4f36      	ldr	r7, [pc, #216]	; (800802c <D80_GENERIC+0x28c>)
 8007f52:	fb21 4707 	smlad	r7, r1, r7, r4
 8007f56:	4936      	ldr	r1, [pc, #216]	; (8008030 <D80_GENERIC+0x290>)
 8007f58:	fb25 7301 	smlad	r3, r5, r1, r7
 8007f5c:	9303      	str	r3, [sp, #12]
 8007f5e:	f5aa 3a7a 	sub.w	sl, sl, #256000	; 0x3e800
 8007f62:	9b08      	ldr	r3, [sp, #32]
 8007f64:	b193      	cbz	r3, 8007f8c <D80_GENERIC+0x1ec>
 8007f66:	9a04      	ldr	r2, [sp, #16]
 8007f68:	4452      	add	r2, sl
 8007f6a:	4614      	mov	r4, r2
 8007f6c:	9a05      	ldr	r2, [sp, #20]
 8007f6e:	f8cd a014 	str.w	sl, [sp, #20]
 8007f72:	1aa4      	subs	r4, r4, r2
 8007f74:	fba4 1203 	umull	r1, r2, r4, r3
 8007f78:	17e7      	asrs	r7, r4, #31
 8007f7a:	f111 4400 	adds.w	r4, r1, #2147483648	; 0x80000000
 8007f7e:	fb03 2207 	mla	r2, r3, r7, r2
 8007f82:	f142 0500 	adc.w	r5, r2, #0
 8007f86:	006b      	lsls	r3, r5, #1
 8007f88:	469a      	mov	sl, r3
 8007f8a:	9304      	str	r3, [sp, #16]
 8007f8c:	9e00      	ldr	r6, [sp, #0]
 8007f8e:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
 8007f92:	9a06      	ldr	r2, [sp, #24]
 8007f94:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8007f98:	8d33      	ldrh	r3, [r6, #40]	; 0x28
 8007f9a:	2500      	movs	r5, #0
 8007f9c:	fb08 f303 	mul.w	r3, r8, r3
 8007fa0:	fbc2 450a 	smlal	r4, r5, r2, sl
 8007fa4:	9a07      	ldr	r2, [sp, #28]
 8007fa6:	f108 0801 	add.w	r8, r8, #1
 8007faa:	10a9      	asrs	r1, r5, #2
 8007fac:	f301 010f 	ssat	r1, #16, r1
 8007fb0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8007fb4:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 8007fb6:	4543      	cmp	r3, r8
 8007fb8:	dd12      	ble.n	8007fe0 <D80_GENERIC+0x240>
 8007fba:	9b00      	ldr	r3, [sp, #0]
 8007fbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fbe:	2b01      	cmp	r3, #1
 8007fc0:	f47f af0c 	bne.w	8007ddc <D80_GENERIC+0x3c>
 8007fc4:	9b00      	ldr	r3, [sp, #0]
 8007fc6:	6885      	ldr	r5, [r0, #8]
 8007fc8:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8007fca:	06b2      	lsls	r2, r6, #26
 8007fcc:	e9d0 3100 	ldrd	r3, r1, [r0]
 8007fd0:	f100 000a 	add.w	r0, r0, #10
 8007fd4:	f57f af35 	bpl.w	8007e42 <D80_GENERIC+0xa2>
 8007fd8:	ba5b      	rev16	r3, r3
 8007fda:	ba49      	rev16	r1, r1
 8007fdc:	ba6d      	rev16	r5, r5
 8007fde:	e730      	b.n	8007e42 <D80_GENERIC+0xa2>
 8007fe0:	4632      	mov	r2, r6
 8007fe2:	9b03      	ldr	r3, [sp, #12]
 8007fe4:	2000      	movs	r0, #0
 8007fe6:	6093      	str	r3, [r2, #8]
 8007fe8:	9b01      	ldr	r3, [sp, #4]
 8007fea:	60d3      	str	r3, [r2, #12]
 8007fec:	9b02      	ldr	r3, [sp, #8]
 8007fee:	61d3      	str	r3, [r2, #28]
 8007ff0:	9b04      	ldr	r3, [sp, #16]
 8007ff2:	6113      	str	r3, [r2, #16]
 8007ff4:	9b05      	ldr	r3, [sp, #20]
 8007ff6:	6153      	str	r3, [r2, #20]
 8007ff8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ffa:	6193      	str	r3, [r2, #24]
 8007ffc:	b00b      	add	sp, #44	; 0x2c
 8007ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008002:	bf00      	nop
 8008004:	002d0024 	.word	0x002d0024
 8008008:	001c0015 	.word	0x001c0015
 800800c:	000f000a 	.word	0x000f000a
 8008010:	00060003 	.word	0x00060003
 8008014:	0037003f 	.word	0x0037003f
 8008018:	00450049 	.word	0x00450049
 800801c:	00490045 	.word	0x00490045
 8008020:	003f0037 	.word	0x003f0037
 8008024:	00030006 	.word	0x00030006
 8008028:	000a000f 	.word	0x000a000f
 800802c:	0015001c 	.word	0x0015001c
 8008030:	0024002d 	.word	0x0024002d
 8008034:	24000000 	.word	0x24000000

08008038 <D128_GENERIC>:
 8008038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800803c:	b08d      	sub	sp, #52	; 0x34
 800803e:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8008040:	f8d2 a01c 	ldr.w	sl, [r2, #28]
 8008044:	9109      	str	r1, [sp, #36]	; 0x24
 8008046:	6911      	ldr	r1, [r2, #16]
 8008048:	9201      	str	r2, [sp, #4]
 800804a:	9106      	str	r1, [sp, #24]
 800804c:	6951      	ldr	r1, [r2, #20]
 800804e:	9107      	str	r1, [sp, #28]
 8008050:	6991      	ldr	r1, [r2, #24]
 8008052:	910b      	str	r1, [sp, #44]	; 0x2c
 8008054:	6891      	ldr	r1, [r2, #8]
 8008056:	9103      	str	r1, [sp, #12]
 8008058:	68d1      	ldr	r1, [r2, #12]
 800805a:	9102      	str	r1, [sp, #8]
 800805c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800805e:	9108      	str	r1, [sp, #32]
 8008060:	2b00      	cmp	r3, #0
 8008062:	f000 8183 	beq.w	800836c <D128_GENERIC+0x334>
 8008066:	2300      	movs	r3, #0
 8008068:	6a12      	ldr	r2, [r2, #32]
 800806a:	4681      	mov	r9, r0
 800806c:	920a      	str	r2, [sp, #40]	; 0x28
 800806e:	e9cd a304 	strd	sl, r3, [sp, #16]
 8008072:	e165      	b.n	8008340 <D128_GENERIC+0x308>
 8008074:	b2d2      	uxtb	r2, r2
 8008076:	f899 b000 	ldrb.w	fp, [r9]
 800807a:	b213      	sxth	r3, r2
 800807c:	4255      	negs	r5, r2
 800807e:	f819 0002 	ldrb.w	r0, [r9, r2]
 8008082:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8008086:	009f      	lsls	r7, r3, #2
 8008088:	eb09 0402 	add.w	r4, r9, r2
 800808c:	ebc3 06c3 	rsb	r6, r3, r3, lsl #3
 8008090:	f819 8002 	ldrb.w	r8, [r9, r2]
 8008094:	443b      	add	r3, r7
 8008096:	1962      	adds	r2, r4, r5
 8008098:	5d64      	ldrb	r4, [r4, r5]
 800809a:	eb02 0c03 	add.w	ip, r2, r3
 800809e:	0424      	lsls	r4, r4, #16
 80080a0:	5cd3      	ldrb	r3, [r2, r3]
 80080a2:	eb0c 0e05 	add.w	lr, ip, r5
 80080a6:	f81c 9015 	ldrb.w	r9, [ip, r5, lsl #1]
 80080aa:	f81c 2005 	ldrb.w	r2, [ip, r5]
 80080ae:	eb04 6408 	add.w	r4, r4, r8, lsl #24
 80080b2:	eb0e 0c45 	add.w	ip, lr, r5, lsl #1
 80080b6:	f81e 8015 	ldrb.w	r8, [lr, r5, lsl #1]
 80080ba:	eb04 2400 	add.w	r4, r4, r0, lsl #8
 80080be:	eb0c 0e06 	add.w	lr, ip, r6
 80080c2:	f81c a006 	ldrb.w	sl, [ip, r6]
 80080c6:	0412      	lsls	r2, r2, #16
 80080c8:	445c      	add	r4, fp
 80080ca:	eb0e 0c05 	add.w	ip, lr, r5
 80080ce:	eb02 6203 	add.w	r2, r2, r3, lsl #24
 80080d2:	f81e 3005 	ldrb.w	r3, [lr, r5]
 80080d6:	eb0c 0045 	add.w	r0, ip, r5, lsl #1
 80080da:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 80080de:	041b      	lsls	r3, r3, #16
 80080e0:	f81c c015 	ldrb.w	ip, [ip, r5, lsl #1]
 80080e4:	eb00 0b06 	add.w	fp, r0, r6
 80080e8:	5d80      	ldrb	r0, [r0, r6]
 80080ea:	eb03 630a 	add.w	r3, r3, sl, lsl #24
 80080ee:	f81b 6005 	ldrb.w	r6, [fp, r5]
 80080f2:	eb0b 0a05 	add.w	sl, fp, r5
 80080f6:	eb02 2209 	add.w	r2, r2, r9, lsl #8
 80080fa:	f81b b015 	ldrb.w	fp, [fp, r5, lsl #1]
 80080fe:	0436      	lsls	r6, r6, #16
 8008100:	eb0a 0945 	add.w	r9, sl, r5, lsl #1
 8008104:	4442      	add	r2, r8
 8008106:	eb06 6600 	add.w	r6, r6, r0, lsl #24
 800810a:	f81a 8015 	ldrb.w	r8, [sl, r5, lsl #1]
 800810e:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 8008112:	44b9      	add	r9, r7
 8008114:	eb06 260b 	add.w	r6, r6, fp, lsl #8
 8008118:	4463      	add	r3, ip
 800811a:	eb06 0508 	add.w	r5, r6, r8
 800811e:	b2e7      	uxtb	r7, r4
 8008120:	f3c4 2607 	ubfx	r6, r4, #8, #8
 8008124:	499b      	ldr	r1, [pc, #620]	; (8008394 <D128_GENERIC+0x35c>)
 8008126:	f3c4 4007 	ubfx	r0, r4, #16, #8
 800812a:	0e24      	lsrs	r4, r4, #24
 800812c:	f851 c027 	ldr.w	ip, [r1, r7, lsl #2]
 8008130:	b2d7      	uxtb	r7, r2
 8008132:	f851 b026 	ldr.w	fp, [r1, r6, lsl #2]
 8008136:	f3c2 2607 	ubfx	r6, r2, #8, #8
 800813a:	9904      	ldr	r1, [sp, #16]
 800813c:	4461      	add	r1, ip
 800813e:	468c      	mov	ip, r1
 8008140:	4994      	ldr	r1, [pc, #592]	; (8008394 <D128_GENERIC+0x35c>)
 8008142:	eb0b 2b9c 	add.w	fp, fp, ip, lsr #10
 8008146:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800814a:	f851 8024 	ldr.w	r8, [r1, r4, lsl #2]
 800814e:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8008152:	eb00 209b 	add.w	r0, r0, fp, lsr #10
 8008156:	f851 e027 	ldr.w	lr, [r1, r7, lsl #2]
 800815a:	f851 7026 	ldr.w	r7, [r1, r6, lsl #2]
 800815e:	0e12      	lsrs	r2, r2, #24
 8008160:	eb08 2890 	add.w	r8, r8, r0, lsr #10
 8008164:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8008168:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 800816c:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8008170:	eb0e 2e98 	add.w	lr, lr, r8, lsr #10
 8008174:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8008178:	b2da      	uxtb	r2, r3
 800817a:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800817e:	eb07 279e 	add.w	r7, r7, lr, lsr #10
 8008182:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8008186:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800818a:	ea48 4800 	orr.w	r8, r8, r0, lsl #16
 800818e:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 8008192:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8008196:	ea4b 4b0c 	orr.w	fp, fp, ip, lsl #16
 800819a:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800819e:	eb06 269a 	add.w	r6, r6, sl, lsr #10
 80081a2:	f851 c020 	ldr.w	ip, [r1, r0, lsl #2]
 80081a6:	f3c3 4007 	ubfx	r0, r3, #16, #8
 80081aa:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80081ae:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 80081b2:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 80081b6:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 80081ba:	0e1b      	lsrs	r3, r3, #24
 80081bc:	eb0c 2c92 	add.w	ip, ip, r2, lsr #10
 80081c0:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80081c4:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 80081c8:	ea47 470e 	orr.w	r7, r7, lr, lsl #16
 80081cc:	b2eb      	uxtb	r3, r5
 80081ce:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80081d2:	eb04 2e9c 	add.w	lr, r4, ip, lsr #10
 80081d6:	f3cc 0409 	ubfx	r4, ip, #0, #10
 80081da:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80081de:	ea46 460a 	orr.w	r6, r6, sl, lsl #16
 80081e2:	eb00 209e 	add.w	r0, r0, lr, lsr #10
 80081e6:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 80081ea:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80081ee:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 80081f2:	eb03 2c90 	add.w	ip, r3, r0, lsr #10
 80081f6:	f851 202a 	ldr.w	r2, [r1, sl, lsl #2]
 80081fa:	f3c5 4307 	ubfx	r3, r5, #16, #8
 80081fe:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 8008202:	eb02 229c 	add.w	r2, r2, ip, lsr #10
 8008206:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800820a:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
 800820e:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8008212:	f851 302a 	ldr.w	r3, [r1, sl, lsl #2]
 8008216:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 800821a:	eb05 2592 	add.w	r5, r5, r2, lsr #10
 800821e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8008222:	eb03 2e95 	add.w	lr, r3, r5, lsr #10
 8008226:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800822a:	ea42 430c 	orr.w	r3, r2, ip, lsl #16
 800822e:	ea4f 219e 	mov.w	r1, lr, lsr #10
 8008232:	f3ce 0209 	ubfx	r2, lr, #0, #10
 8008236:	9104      	str	r1, [sp, #16]
 8008238:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800823c:	9902      	ldr	r1, [sp, #8]
 800823e:	4a56      	ldr	r2, [pc, #344]	; (8008398 <D128_GENERIC+0x360>)
 8008240:	fb2b 1202 	smlad	r2, fp, r2, r1
 8008244:	4955      	ldr	r1, [pc, #340]	; (800839c <D128_GENERIC+0x364>)
 8008246:	fb28 2201 	smlad	r2, r8, r1, r2
 800824a:	4955      	ldr	r1, [pc, #340]	; (80083a0 <D128_GENERIC+0x368>)
 800824c:	fb27 2201 	smlad	r2, r7, r1, r2
 8008250:	4954      	ldr	r1, [pc, #336]	; (80083a4 <D128_GENERIC+0x36c>)
 8008252:	fb26 2201 	smlad	r2, r6, r1, r2
 8008256:	4954      	ldr	r1, [pc, #336]	; (80083a8 <D128_GENERIC+0x370>)
 8008258:	fb24 2201 	smlad	r2, r4, r1, r2
 800825c:	4953      	ldr	r1, [pc, #332]	; (80083ac <D128_GENERIC+0x374>)
 800825e:	fb20 2201 	smlad	r2, r0, r1, r2
 8008262:	4953      	ldr	r1, [pc, #332]	; (80083b0 <D128_GENERIC+0x378>)
 8008264:	fb23 2201 	smlad	r2, r3, r1, r2
 8008268:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
 800826c:	fb25 2a0c 	smlad	sl, r5, ip, r2
 8008270:	4950      	ldr	r1, [pc, #320]	; (80083b4 <D128_GENERIC+0x37c>)
 8008272:	9a03      	ldr	r2, [sp, #12]
 8008274:	fb2b 2c01 	smlad	ip, fp, r1, r2
 8008278:	4a4f      	ldr	r2, [pc, #316]	; (80083b8 <D128_GENERIC+0x380>)
 800827a:	fb28 ce02 	smlad	lr, r8, r2, ip
 800827e:	f8df c150 	ldr.w	ip, [pc, #336]	; 80083d0 <D128_GENERIC+0x398>
 8008282:	fb27 ec0c 	smlad	ip, r7, ip, lr
 8008286:	f8df e14c 	ldr.w	lr, [pc, #332]	; 80083d4 <D128_GENERIC+0x39c>
 800828a:	fb26 cc0e 	smlad	ip, r6, lr, ip
 800828e:	f8df e148 	ldr.w	lr, [pc, #328]	; 80083d8 <D128_GENERIC+0x3a0>
 8008292:	fb24 ce0e 	smlad	lr, r4, lr, ip
 8008296:	f8df c144 	ldr.w	ip, [pc, #324]	; 80083dc <D128_GENERIC+0x3a4>
 800829a:	fb20 ee0c 	smlad	lr, r0, ip, lr
 800829e:	f8df c140 	ldr.w	ip, [pc, #320]	; 80083e0 <D128_GENERIC+0x3a8>
 80082a2:	fb23 ec0c 	smlad	ip, r3, ip, lr
 80082a6:	f8df e13c 	ldr.w	lr, [pc, #316]	; 80083e4 <D128_GENERIC+0x3ac>
 80082aa:	fb25 c20e 	smlad	r2, r5, lr, ip
 80082ae:	f04f 0c01 	mov.w	ip, #1
 80082b2:	9202      	str	r2, [sp, #8]
 80082b4:	fb2b fb0c 	smuad	fp, fp, ip
 80082b8:	f8df c12c 	ldr.w	ip, [pc, #300]	; 80083e8 <D128_GENERIC+0x3b0>
 80082bc:	fb28 bb0c 	smlad	fp, r8, ip, fp
 80082c0:	f8df c128 	ldr.w	ip, [pc, #296]	; 80083ec <D128_GENERIC+0x3b4>
 80082c4:	fb27 bb0c 	smlad	fp, r7, ip, fp
 80082c8:	4f3c      	ldr	r7, [pc, #240]	; (80083bc <D128_GENERIC+0x384>)
 80082ca:	fb26 bb07 	smlad	fp, r6, r7, fp
 80082ce:	4f3c      	ldr	r7, [pc, #240]	; (80083c0 <D128_GENERIC+0x388>)
 80082d0:	fb24 bb07 	smlad	fp, r4, r7, fp
 80082d4:	4f3b      	ldr	r7, [pc, #236]	; (80083c4 <D128_GENERIC+0x38c>)
 80082d6:	fb20 bb07 	smlad	fp, r0, r7, fp
 80082da:	4f3b      	ldr	r7, [pc, #236]	; (80083c8 <D128_GENERIC+0x390>)
 80082dc:	fb23 bb07 	smlad	fp, r3, r7, fp
 80082e0:	4b3a      	ldr	r3, [pc, #232]	; (80083cc <D128_GENERIC+0x394>)
 80082e2:	fb25 b303 	smlad	r3, r5, r3, fp
 80082e6:	9303      	str	r3, [sp, #12]
 80082e8:	f5aa 1480 	sub.w	r4, sl, #1048576	; 0x100000
 80082ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082ee:	b183      	cbz	r3, 8008312 <D128_GENERIC+0x2da>
 80082f0:	9a06      	ldr	r2, [sp, #24]
 80082f2:	9907      	ldr	r1, [sp, #28]
 80082f4:	4422      	add	r2, r4
 80082f6:	9407      	str	r4, [sp, #28]
 80082f8:	1a52      	subs	r2, r2, r1
 80082fa:	fba2 0103 	umull	r0, r1, r2, r3
 80082fe:	17d5      	asrs	r5, r2, #31
 8008300:	f110 4200 	adds.w	r2, r0, #2147483648	; 0x80000000
 8008304:	fb03 1105 	mla	r1, r3, r5, r1
 8008308:	f141 0300 	adc.w	r3, r1, #0
 800830c:	005b      	lsls	r3, r3, #1
 800830e:	461c      	mov	r4, r3
 8008310:	9306      	str	r3, [sp, #24]
 8008312:	9d01      	ldr	r5, [sp, #4]
 8008314:	01e4      	lsls	r4, r4, #7
 8008316:	9e05      	ldr	r6, [sp, #20]
 8008318:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800831c:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 800831e:	2300      	movs	r3, #0
 8008320:	9908      	ldr	r1, [sp, #32]
 8008322:	fb06 f000 	mul.w	r0, r6, r0
 8008326:	3601      	adds	r6, #1
 8008328:	fbc1 2304 	smlal	r2, r3, r1, r4
 800832c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800832e:	109b      	asrs	r3, r3, #2
 8008330:	9605      	str	r6, [sp, #20]
 8008332:	f303 030f 	ssat	r3, #16, r3
 8008336:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
 800833a:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 800833c:	42b3      	cmp	r3, r6
 800833e:	dd13      	ble.n	8008368 <D128_GENERIC+0x330>
 8008340:	9b01      	ldr	r3, [sp, #4]
 8008342:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8008344:	2a01      	cmp	r2, #1
 8008346:	f47f ae95 	bne.w	8008074 <D128_GENERIC+0x3c>
 800834a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800834c:	f109 0610 	add.w	r6, r9, #16
 8008350:	0681      	lsls	r1, r0, #26
 8008352:	e9d9 4200 	ldrd	r4, r2, [r9]
 8008356:	e9d9 3502 	ldrd	r3, r5, [r9, #8]
 800835a:	d518      	bpl.n	800838e <D128_GENERIC+0x356>
 800835c:	ba64      	rev16	r4, r4
 800835e:	ba52      	rev16	r2, r2
 8008360:	ba5b      	rev16	r3, r3
 8008362:	ba6d      	rev16	r5, r5
 8008364:	46b1      	mov	r9, r6
 8008366:	e6da      	b.n	800811e <D128_GENERIC+0xe6>
 8008368:	f8dd a010 	ldr.w	sl, [sp, #16]
 800836c:	9b01      	ldr	r3, [sp, #4]
 800836e:	2000      	movs	r0, #0
 8008370:	9903      	ldr	r1, [sp, #12]
 8008372:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008374:	6099      	str	r1, [r3, #8]
 8008376:	9902      	ldr	r1, [sp, #8]
 8008378:	f8c3 a01c 	str.w	sl, [r3, #28]
 800837c:	60d9      	str	r1, [r3, #12]
 800837e:	9906      	ldr	r1, [sp, #24]
 8008380:	619a      	str	r2, [r3, #24]
 8008382:	6119      	str	r1, [r3, #16]
 8008384:	9907      	ldr	r1, [sp, #28]
 8008386:	6159      	str	r1, [r3, #20]
 8008388:	b00d      	add	sp, #52	; 0x34
 800838a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800838e:	46b1      	mov	r9, r6
 8008390:	e6c5      	b.n	800811e <D128_GENERIC+0xe6>
 8008392:	bf00      	nop
 8008394:	24000000 	.word	0x24000000
 8008398:	00780069 	.word	0x00780069
 800839c:	005b004e 	.word	0x005b004e
 80083a0:	00420037 	.word	0x00420037
 80083a4:	002d0024 	.word	0x002d0024
 80083a8:	001c0015 	.word	0x001c0015
 80083ac:	000f000a 	.word	0x000f000a
 80083b0:	00060003 	.word	0x00060003
 80083b4:	00880096 	.word	0x00880096
 80083b8:	00a200ac 	.word	0x00a200ac
 80083bc:	0015001c 	.word	0x0015001c
 80083c0:	0024002d 	.word	0x0024002d
 80083c4:	00370042 	.word	0x00370042
 80083c8:	004e005b 	.word	0x004e005b
 80083cc:	00690078 	.word	0x00690078
 80083d0:	00b400ba 	.word	0x00b400ba
 80083d4:	00be00c0 	.word	0x00be00c0
 80083d8:	00c000be 	.word	0x00c000be
 80083dc:	00ba00b4 	.word	0x00ba00b4
 80083e0:	00ac00a2 	.word	0x00ac00a2
 80083e4:	00960088 	.word	0x00960088
 80083e8:	00030006 	.word	0x00030006
 80083ec:	000a000f 	.word	0x000a000f

080083f0 <D16_1CH_HTONS_VOL_HP>:
 80083f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083f4:	6993      	ldr	r3, [r2, #24]
 80083f6:	b087      	sub	sp, #28
 80083f8:	4682      	mov	sl, r0
 80083fa:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 80083fc:	9304      	str	r3, [sp, #16]
 80083fe:	f8d2 b030 	ldr.w	fp, [r2, #48]	; 0x30
 8008402:	69d3      	ldr	r3, [r2, #28]
 8008404:	f8d2 e020 	ldr.w	lr, [r2, #32]
 8008408:	e9d2 5402 	ldrd	r5, r4, [r2, #8]
 800840c:	e9d2 6c04 	ldrd	r6, ip, [r2, #16]
 8008410:	9403      	str	r4, [sp, #12]
 8008412:	2800      	cmp	r0, #0
 8008414:	d054      	beq.n	80084c0 <D16_1CH_HTONS_VOL_HP+0xd0>
 8008416:	f1a1 0902 	sub.w	r9, r1, #2
 800841a:	eb0a 0140 	add.w	r1, sl, r0, lsl #1
 800841e:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 80084cc <D16_1CH_HTONS_VOL_HP+0xdc>
 8008422:	4650      	mov	r0, sl
 8008424:	9101      	str	r1, [sp, #4]
 8008426:	4619      	mov	r1, r3
 8008428:	f8cd b008 	str.w	fp, [sp, #8]
 800842c:	9205      	str	r2, [sp, #20]
 800842e:	f850 3b02 	ldr.w	r3, [r0], #2
 8008432:	ba5b      	rev16	r3, r3
 8008434:	b2dc      	uxtb	r4, r3
 8008436:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800843a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800843e:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 8008442:	4419      	add	r1, r3
 8008444:	eb04 2491 	add.w	r4, r4, r1, lsr #10
 8008448:	f3c1 0309 	ubfx	r3, r1, #0, #10
 800844c:	f3c4 0209 	ubfx	r2, r4, #0, #10
 8008450:	0aa1      	lsrs	r1, r4, #10
 8008452:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8008456:	4a1b      	ldr	r2, [pc, #108]	; (80084c4 <D16_1CH_HTONS_VOL_HP+0xd4>)
 8008458:	fb23 5402 	smlad	r4, r3, r2, r5
 800845c:	4a1a      	ldr	r2, [pc, #104]	; (80084c8 <D16_1CH_HTONS_VOL_HP+0xd8>)
 800845e:	fb23 f502 	smuad	r5, r3, r2
 8008462:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 8008466:	f04f 4a00 	mov.w	sl, #2147483648	; 0x80000000
 800846a:	f04f 0b00 	mov.w	fp, #0
 800846e:	19a2      	adds	r2, r4, r6
 8008470:	eba2 020c 	sub.w	r2, r2, ip
 8008474:	46a4      	mov	ip, r4
 8008476:	17d7      	asrs	r7, r2, #31
 8008478:	fba2 230e 	umull	r2, r3, r2, lr
 800847c:	f112 4600 	adds.w	r6, r2, #2147483648	; 0x80000000
 8008480:	fb0e 3307 	mla	r3, lr, r7, r3
 8008484:	f143 0700 	adc.w	r7, r3, #0
 8008488:	9b02      	ldr	r3, [sp, #8]
 800848a:	047a      	lsls	r2, r7, #17
 800848c:	007e      	lsls	r6, r7, #1
 800848e:	fbc3 ab02 	smlal	sl, fp, r3, r2
 8008492:	ea4f 03ab 	mov.w	r3, fp, asr #2
 8008496:	f303 030f 	ssat	r3, #16, r3
 800849a:	f829 3f02 	strh.w	r3, [r9, #2]!
 800849e:	9b01      	ldr	r3, [sp, #4]
 80084a0:	4298      	cmp	r0, r3
 80084a2:	d1c4      	bne.n	800842e <D16_1CH_HTONS_VOL_HP+0x3e>
 80084a4:	460b      	mov	r3, r1
 80084a6:	9a05      	ldr	r2, [sp, #20]
 80084a8:	2000      	movs	r0, #0
 80084aa:	9903      	ldr	r1, [sp, #12]
 80084ac:	61d3      	str	r3, [r2, #28]
 80084ae:	9b04      	ldr	r3, [sp, #16]
 80084b0:	6095      	str	r5, [r2, #8]
 80084b2:	60d1      	str	r1, [r2, #12]
 80084b4:	6193      	str	r3, [r2, #24]
 80084b6:	e9c2 6404 	strd	r6, r4, [r2, #16]
 80084ba:	b007      	add	sp, #28
 80084bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084c0:	4664      	mov	r4, ip
 80084c2:	e7f1      	b.n	80084a8 <D16_1CH_HTONS_VOL_HP+0xb8>
 80084c4:	00030001 	.word	0x00030001
 80084c8:	00010003 	.word	0x00010003
 80084cc:	24000000 	.word	0x24000000

080084d0 <D24_1CH_HTONS_VOL_HP>:
 80084d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084d4:	6b16      	ldr	r6, [r2, #48]	; 0x30
 80084d6:	b089      	sub	sp, #36	; 0x24
 80084d8:	6993      	ldr	r3, [r2, #24]
 80084da:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 80084dc:	9604      	str	r6, [sp, #16]
 80084de:	6a16      	ldr	r6, [r2, #32]
 80084e0:	9306      	str	r3, [sp, #24]
 80084e2:	9505      	str	r5, [sp, #20]
 80084e4:	69d3      	ldr	r3, [r2, #28]
 80084e6:	9600      	str	r6, [sp, #0]
 80084e8:	e9d2 4a04 	ldrd	r4, sl, [r2, #16]
 80084ec:	e9d2 ce02 	ldrd	ip, lr, [r2, #8]
 80084f0:	2d00      	cmp	r5, #0
 80084f2:	f000 8083 	beq.w	80085fc <D24_1CH_HTONS_VOL_HP+0x12c>
 80084f6:	9207      	str	r2, [sp, #28]
 80084f8:	2600      	movs	r6, #0
 80084fa:	4622      	mov	r2, r4
 80084fc:	f1a1 0b02 	sub.w	fp, r1, #2
 8008500:	4f3f      	ldr	r7, [pc, #252]	; (8008600 <D24_1CH_HTONS_VOL_HP+0x130>)
 8008502:	461d      	mov	r5, r3
 8008504:	f8cd a00c 	str.w	sl, [sp, #12]
 8008508:	9c00      	ldr	r4, [sp, #0]
 800850a:	e056      	b.n	80085ba <D24_1CH_HTONS_VOL_HP+0xea>
 800850c:	7841      	ldrb	r1, [r0, #1]
 800850e:	eb08 4809 	add.w	r8, r8, r9, lsl #16
 8008512:	3002      	adds	r0, #2
 8008514:	4488      	add	r8, r1
 8008516:	fa5f f388 	uxtb.w	r3, r8
 800851a:	f3c8 2907 	ubfx	r9, r8, #8, #8
 800851e:	ea4f 4818 	mov.w	r8, r8, lsr #16
 8008522:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 8008526:	f857 3029 	ldr.w	r3, [r7, r9, lsl #2]
 800852a:	eb01 2195 	add.w	r1, r1, r5, lsr #10
 800852e:	f857 5028 	ldr.w	r5, [r7, r8, lsl #2]
 8008532:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 8008536:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800853a:	f3c8 0309 	ubfx	r3, r8, #0, #10
 800853e:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 8008542:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008546:	492f      	ldr	r1, [pc, #188]	; (8008604 <D24_1CH_HTONS_VOL_HP+0x134>)
 8008548:	fb23 e901 	smlad	r9, r3, r1, lr
 800854c:	492e      	ldr	r1, [pc, #184]	; (8008608 <D24_1CH_HTONS_VOL_HP+0x138>)
 800854e:	fb23 ce01 	smlad	lr, r3, r1, ip
 8008552:	f3c5 0c09 	ubfx	ip, r5, #0, #10
 8008556:	2101      	movs	r1, #1
 8008558:	eb0c 084c 	add.w	r8, ip, ip, lsl #1
 800855c:	eb0e 0e48 	add.w	lr, lr, r8, lsl #1
 8008560:	fb23 f301 	smuad	r3, r3, r1
 8008564:	f5a9 51d8 	sub.w	r1, r9, #6912	; 0x1b00
 8008568:	eb08 0c03 	add.w	ip, r8, r3
 800856c:	9b03      	ldr	r3, [sp, #12]
 800856e:	f04f 0a00 	mov.w	sl, #0
 8008572:	440a      	add	r2, r1
 8008574:	3601      	adds	r6, #1
 8008576:	9103      	str	r1, [sp, #12]
 8008578:	1ad2      	subs	r2, r2, r3
 800857a:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800857e:	fba2 2304 	umull	r2, r3, r2, r4
 8008582:	e9cd 2300 	strd	r2, r3, [sp]
 8008586:	fb04 3309 	mla	r3, r4, r9, r3
 800858a:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 800858e:	9301      	str	r3, [sp, #4]
 8008590:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008594:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8008598:	f143 0300 	adc.w	r3, r3, #0
 800859c:	ea4f 38c3 	mov.w	r8, r3, lsl #15
 80085a0:	005a      	lsls	r2, r3, #1
 80085a2:	9b04      	ldr	r3, [sp, #16]
 80085a4:	fbc3 9a08 	smlal	r9, sl, r3, r8
 80085a8:	ea4f 03aa 	mov.w	r3, sl, asr #2
 80085ac:	f303 030f 	ssat	r3, #16, r3
 80085b0:	f82b 3f02 	strh.w	r3, [fp, #2]!
 80085b4:	9b05      	ldr	r3, [sp, #20]
 80085b6:	429e      	cmp	r6, r3
 80085b8:	d010      	beq.n	80085dc <D24_1CH_HTONS_VOL_HP+0x10c>
 80085ba:	f890 9003 	ldrb.w	r9, [r0, #3]
 80085be:	f016 0f01 	tst.w	r6, #1
 80085c2:	7801      	ldrb	r1, [r0, #0]
 80085c4:	ea4f 2309 	mov.w	r3, r9, lsl #8
 80085c8:	ea4f 2801 	mov.w	r8, r1, lsl #8
 80085cc:	d09e      	beq.n	800850c <D24_1CH_HTONS_VOL_HP+0x3c>
 80085ce:	f890 8002 	ldrb.w	r8, [r0, #2]
 80085d2:	3004      	adds	r0, #4
 80085d4:	eb03 4808 	add.w	r8, r3, r8, lsl #16
 80085d8:	4488      	add	r8, r1
 80085da:	e79c      	b.n	8008516 <D24_1CH_HTONS_VOL_HP+0x46>
 80085dc:	4614      	mov	r4, r2
 80085de:	462b      	mov	r3, r5
 80085e0:	9a07      	ldr	r2, [sp, #28]
 80085e2:	2000      	movs	r0, #0
 80085e4:	61d3      	str	r3, [r2, #28]
 80085e6:	9b06      	ldr	r3, [sp, #24]
 80085e8:	f8c2 c008 	str.w	ip, [r2, #8]
 80085ec:	f8c2 e00c 	str.w	lr, [r2, #12]
 80085f0:	6193      	str	r3, [r2, #24]
 80085f2:	e9c2 4104 	strd	r4, r1, [r2, #16]
 80085f6:	b009      	add	sp, #36	; 0x24
 80085f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085fc:	4651      	mov	r1, sl
 80085fe:	e7f0      	b.n	80085e2 <D24_1CH_HTONS_VOL_HP+0x112>
 8008600:	24000000 	.word	0x24000000
 8008604:	00030001 	.word	0x00030001
 8008608:	00060007 	.word	0x00060007

0800860c <D32_1CH_HTONS_VOL_HP>:
 800860c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008610:	6993      	ldr	r3, [r2, #24]
 8008612:	b087      	sub	sp, #28
 8008614:	4683      	mov	fp, r0
 8008616:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 8008618:	9304      	str	r3, [sp, #16]
 800861a:	69d5      	ldr	r5, [r2, #28]
 800861c:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800861e:	f8d2 a020 	ldr.w	sl, [r2, #32]
 8008622:	e9d2 8e04 	ldrd	r8, lr, [r2, #16]
 8008626:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 800862a:	2800      	cmp	r0, #0
 800862c:	d077      	beq.n	800871e <D32_1CH_HTONS_VOL_HP+0x112>
 800862e:	460f      	mov	r7, r1
 8008630:	46f1      	mov	r9, lr
 8008632:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8008636:	f8cd 8000 	str.w	r8, [sp]
 800863a:	4e3a      	ldr	r6, [pc, #232]	; (8008724 <D32_1CH_HTONS_VOL_HP+0x118>)
 800863c:	469e      	mov	lr, r3
 800863e:	46a0      	mov	r8, r4
 8008640:	9103      	str	r1, [sp, #12]
 8008642:	9205      	str	r2, [sp, #20]
 8008644:	f85b 4b04 	ldr.w	r4, [fp], #4
 8008648:	ba64      	rev16	r4, r4
 800864a:	b2e0      	uxtb	r0, r4
 800864c:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8008650:	f3c4 4107 	ubfx	r1, r4, #16, #8
 8008654:	0e24      	lsrs	r4, r4, #24
 8008656:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 800865a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800865e:	eb00 2095 	add.w	r0, r0, r5, lsr #10
 8008662:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8008666:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
 800866a:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 800866e:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8008672:	eb01 2193 	add.w	r1, r1, r3, lsr #10
 8008676:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800867a:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800867e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8008682:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008686:	f3c5 0009 	ubfx	r0, r5, #0, #10
 800868a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800868e:	4826      	ldr	r0, [pc, #152]	; (8008728 <D32_1CH_HTONS_VOL_HP+0x11c>)
 8008690:	fb23 c400 	smlad	r4, r3, r0, ip
 8008694:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008698:	fb21 4402 	smlad	r4, r1, r2, r4
 800869c:	4823      	ldr	r0, [pc, #140]	; (800872c <D32_1CH_HTONS_VOL_HP+0x120>)
 800869e:	fb23 ec00 	smlad	ip, r3, r0, lr
 80086a2:	4823      	ldr	r0, [pc, #140]	; (8008730 <D32_1CH_HTONS_VOL_HP+0x124>)
 80086a4:	fb21 cc00 	smlad	ip, r1, r0, ip
 80086a8:	2201      	movs	r2, #1
 80086aa:	fb23 f302 	smuad	r3, r3, r2
 80086ae:	4821      	ldr	r0, [pc, #132]	; (8008734 <D32_1CH_HTONS_VOL_HP+0x128>)
 80086b0:	fb21 3e00 	smlad	lr, r1, r0, r3
 80086b4:	9b00      	ldr	r3, [sp, #0]
 80086b6:	f5a4 4480 	sub.w	r4, r4, #16384	; 0x4000
 80086ba:	4423      	add	r3, r4
 80086bc:	eba3 0209 	sub.w	r2, r3, r9
 80086c0:	46a1      	mov	r9, r4
 80086c2:	17d1      	asrs	r1, r2, #31
 80086c4:	fba2 230a 	umull	r2, r3, r2, sl
 80086c8:	e9cd 2300 	strd	r2, r3, [sp]
 80086cc:	fb0a 3301 	mla	r3, sl, r1, r3
 80086d0:	9301      	str	r3, [sp, #4]
 80086d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80086d6:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 80086da:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80086de:	f143 0300 	adc.w	r3, r3, #0
 80086e2:	0399      	lsls	r1, r3, #14
 80086e4:	005b      	lsls	r3, r3, #1
 80086e6:	9300      	str	r3, [sp, #0]
 80086e8:	2300      	movs	r3, #0
 80086ea:	fbc8 2301 	smlal	r2, r3, r8, r1
 80086ee:	109b      	asrs	r3, r3, #2
 80086f0:	f303 030f 	ssat	r3, #16, r3
 80086f4:	f827 3b02 	strh.w	r3, [r7], #2
 80086f8:	9b03      	ldr	r3, [sp, #12]
 80086fa:	429f      	cmp	r7, r3
 80086fc:	d1a2      	bne.n	8008644 <D32_1CH_HTONS_VOL_HP+0x38>
 80086fe:	4673      	mov	r3, lr
 8008700:	f8dd 8000 	ldr.w	r8, [sp]
 8008704:	9a05      	ldr	r2, [sp, #20]
 8008706:	6093      	str	r3, [r2, #8]
 8008708:	2000      	movs	r0, #0
 800870a:	9b04      	ldr	r3, [sp, #16]
 800870c:	f8c2 c00c 	str.w	ip, [r2, #12]
 8008710:	61d5      	str	r5, [r2, #28]
 8008712:	6193      	str	r3, [r2, #24]
 8008714:	e9c2 8404 	strd	r8, r4, [r2, #16]
 8008718:	b007      	add	sp, #28
 800871a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800871e:	4674      	mov	r4, lr
 8008720:	e7f1      	b.n	8008706 <D32_1CH_HTONS_VOL_HP+0xfa>
 8008722:	bf00      	nop
 8008724:	24000000 	.word	0x24000000
 8008728:	00060003 	.word	0x00060003
 800872c:	000a000c 	.word	0x000a000c
 8008730:	000c000a 	.word	0x000c000a
 8008734:	00030006 	.word	0x00030006

08008738 <D48_1CH_HTONS_VOL_HP>:
 8008738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800873c:	6b17      	ldr	r7, [r2, #48]	; 0x30
 800873e:	b087      	sub	sp, #28
 8008740:	6993      	ldr	r3, [r2, #24]
 8008742:	9701      	str	r7, [sp, #4]
 8008744:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8008746:	6a17      	ldr	r7, [r2, #32]
 8008748:	9304      	str	r3, [sp, #16]
 800874a:	69d6      	ldr	r6, [r2, #28]
 800874c:	9702      	str	r7, [sp, #8]
 800874e:	e9d2 4e04 	ldrd	r4, lr, [r2, #16]
 8008752:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 8008756:	2d00      	cmp	r5, #0
 8008758:	f000 8093 	beq.w	8008882 <D48_1CH_HTONS_VOL_HP+0x14a>
 800875c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008760:	f1a1 0b02 	sub.w	fp, r1, #2
 8008764:	46f2      	mov	sl, lr
 8008766:	4f48      	ldr	r7, [pc, #288]	; (8008888 <D48_1CH_HTONS_VOL_HP+0x150>)
 8008768:	eb00 0145 	add.w	r1, r0, r5, lsl #1
 800876c:	469e      	mov	lr, r3
 800876e:	9205      	str	r2, [sp, #20]
 8008770:	9103      	str	r1, [sp, #12]
 8008772:	e9d0 3200 	ldrd	r3, r2, [r0]
 8008776:	3006      	adds	r0, #6
 8008778:	ba5b      	rev16	r3, r3
 800877a:	fa92 f992 	rev16.w	r9, r2
 800877e:	b2dd      	uxtb	r5, r3
 8008780:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8008784:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8008788:	0e1b      	lsrs	r3, r3, #24
 800878a:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 800878e:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8008792:	eb05 2696 	add.w	r6, r5, r6, lsr #10
 8008796:	f857 5022 	ldr.w	r5, [r7, r2, lsl #2]
 800879a:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800879e:	fa5f f289 	uxtb.w	r2, r9
 80087a2:	eb01 2196 	add.w	r1, r1, r6, lsr #10
 80087a6:	f3c9 2907 	ubfx	r9, r9, #8, #8
 80087aa:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 80087ae:	f3c6 0809 	ubfx	r8, r6, #0, #10
 80087b2:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 80087b6:	f857 6029 	ldr.w	r6, [r7, r9, lsl #2]
 80087ba:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80087be:	eb03 2395 	add.w	r3, r3, r5, lsr #10
 80087c2:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80087c6:	ea41 4808 	orr.w	r8, r1, r8, lsl #16
 80087ca:	eb02 2293 	add.w	r2, r2, r3, lsr #10
 80087ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80087d2:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 80087d6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80087da:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 80087de:	f3c6 0309 	ubfx	r3, r6, #0, #10
 80087e2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80087e6:	4b29      	ldr	r3, [pc, #164]	; (800888c <D48_1CH_HTONS_VOL_HP+0x154>)
 80087e8:	fb28 c103 	smlad	r1, r8, r3, ip
 80087ec:	4b28      	ldr	r3, [pc, #160]	; (8008890 <D48_1CH_HTONS_VOL_HP+0x158>)
 80087ee:	fb25 1103 	smlad	r1, r5, r3, r1
 80087f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80087f6:	fb22 1903 	smlad	r9, r2, r3, r1
 80087fa:	4b26      	ldr	r3, [pc, #152]	; (8008894 <D48_1CH_HTONS_VOL_HP+0x15c>)
 80087fc:	fb28 ec03 	smlad	ip, r8, r3, lr
 8008800:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 8008804:	fb25 cc03 	smlad	ip, r5, r3, ip
 8008808:	4b23      	ldr	r3, [pc, #140]	; (8008898 <D48_1CH_HTONS_VOL_HP+0x160>)
 800880a:	fb22 cc03 	smlad	ip, r2, r3, ip
 800880e:	2101      	movs	r1, #1
 8008810:	fb28 f801 	smuad	r8, r8, r1
 8008814:	4b21      	ldr	r3, [pc, #132]	; (800889c <D48_1CH_HTONS_VOL_HP+0x164>)
 8008816:	fb25 8503 	smlad	r5, r5, r3, r8
 800881a:	4b21      	ldr	r3, [pc, #132]	; (80088a0 <D48_1CH_HTONS_VOL_HP+0x168>)
 800881c:	fb22 5e03 	smlad	lr, r2, r3, r5
 8008820:	f5a9 4158 	sub.w	r1, r9, #55296	; 0xd800
 8008824:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8008828:	190a      	adds	r2, r1, r4
 800882a:	9c02      	ldr	r4, [sp, #8]
 800882c:	eba2 020a 	sub.w	r2, r2, sl
 8008830:	468a      	mov	sl, r1
 8008832:	ea4f 79e2 	mov.w	r9, r2, asr #31
 8008836:	fba2 2304 	umull	r2, r3, r2, r4
 800883a:	fb04 3309 	mla	r3, r4, r9, r3
 800883e:	f112 4400 	adds.w	r4, r2, #2147483648	; 0x80000000
 8008842:	f04f 0900 	mov.w	r9, #0
 8008846:	f143 0500 	adc.w	r5, r3, #0
 800884a:	9b01      	ldr	r3, [sp, #4]
 800884c:	032a      	lsls	r2, r5, #12
 800884e:	006c      	lsls	r4, r5, #1
 8008850:	fbc3 8902 	smlal	r8, r9, r3, r2
 8008854:	ea4f 03a9 	mov.w	r3, r9, asr #2
 8008858:	f303 030f 	ssat	r3, #16, r3
 800885c:	f82b 3f02 	strh.w	r3, [fp, #2]!
 8008860:	9b03      	ldr	r3, [sp, #12]
 8008862:	4283      	cmp	r3, r0
 8008864:	d185      	bne.n	8008772 <D48_1CH_HTONS_VOL_HP+0x3a>
 8008866:	4673      	mov	r3, lr
 8008868:	9a05      	ldr	r2, [sp, #20]
 800886a:	6093      	str	r3, [r2, #8]
 800886c:	2000      	movs	r0, #0
 800886e:	9b04      	ldr	r3, [sp, #16]
 8008870:	f8c2 c00c 	str.w	ip, [r2, #12]
 8008874:	61d6      	str	r6, [r2, #28]
 8008876:	6193      	str	r3, [r2, #24]
 8008878:	e9c2 4104 	strd	r4, r1, [r2, #16]
 800887c:	b007      	add	sp, #28
 800887e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008882:	4671      	mov	r1, lr
 8008884:	e7f1      	b.n	800886a <D48_1CH_HTONS_VOL_HP+0x132>
 8008886:	bf00      	nop
 8008888:	24000000 	.word	0x24000000
 800888c:	000f000a 	.word	0x000f000a
 8008890:	00060003 	.word	0x00060003
 8008894:	00150019 	.word	0x00150019
 8008898:	00190015 	.word	0x00190015
 800889c:	00030006 	.word	0x00030006
 80088a0:	000a000f 	.word	0x000a000f

080088a4 <D64_1CH_HTONS_VOL_HP>:
 80088a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088a8:	6b15      	ldr	r5, [r2, #48]	; 0x30
 80088aa:	b089      	sub	sp, #36	; 0x24
 80088ac:	6993      	ldr	r3, [r2, #24]
 80088ae:	4686      	mov	lr, r0
 80088b0:	9503      	str	r5, [sp, #12]
 80088b2:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 80088b4:	6a15      	ldr	r5, [r2, #32]
 80088b6:	9306      	str	r3, [sp, #24]
 80088b8:	69d6      	ldr	r6, [r2, #28]
 80088ba:	9504      	str	r5, [sp, #16]
 80088bc:	e9d2 8404 	ldrd	r8, r4, [r2, #16]
 80088c0:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 80088c4:	2800      	cmp	r0, #0
 80088c6:	f000 80a4 	beq.w	8008a12 <D64_1CH_HTONS_VOL_HP+0x16e>
 80088ca:	460f      	mov	r7, r1
 80088cc:	46f1      	mov	r9, lr
 80088ce:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 80088d2:	4d56      	ldr	r5, [pc, #344]	; (8008a2c <D64_1CH_HTONS_VOL_HP+0x188>)
 80088d4:	46a2      	mov	sl, r4
 80088d6:	469e      	mov	lr, r3
 80088d8:	9105      	str	r1, [sp, #20]
 80088da:	9207      	str	r2, [sp, #28]
 80088dc:	f859 1b08 	ldr.w	r1, [r9], #8
 80088e0:	f859 3c04 	ldr.w	r3, [r9, #-4]
 80088e4:	ba49      	rev16	r1, r1
 80088e6:	fa93 fb93 	rev16.w	fp, r3
 80088ea:	b2cb      	uxtb	r3, r1
 80088ec:	f3c1 2207 	ubfx	r2, r1, #8, #8
 80088f0:	f3c1 4007 	ubfx	r0, r1, #16, #8
 80088f4:	0e09      	lsrs	r1, r1, #24
 80088f6:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
 80088fa:	fa5f f38b 	uxtb.w	r3, fp
 80088fe:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8008902:	4426      	add	r6, r4
 8008904:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8008908:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 800890c:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 8008910:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 8008914:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8008918:	f3cb 2307 	ubfx	r3, fp, #8, #8
 800891c:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 8008920:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8008924:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8008928:	eb01 2194 	add.w	r1, r1, r4, lsr #10
 800892c:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8008930:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8008934:	f3cb 4607 	ubfx	r6, fp, #16, #8
 8008938:	eb00 2091 	add.w	r0, r0, r1, lsr #10
 800893c:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8008940:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 8008944:	ea4f 6b1b 	mov.w	fp, fp, lsr #24
 8008948:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 800894c:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8008950:	f855 b02b 	ldr.w	fp, [r5, fp, lsl #2]
 8008954:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008958:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 800895c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008960:	eb0b 2b96 	add.w	fp, fp, r6, lsr #10
 8008964:	f3c6 0409 	ubfx	r4, r6, #0, #10
 8008968:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800896c:	f3cb 0009 	ubfx	r0, fp, #0, #10
 8008970:	ea4f 269b 	mov.w	r6, fp, lsr #10
 8008974:	ea40 4b04 	orr.w	fp, r0, r4, lsl #16
 8008978:	482d      	ldr	r0, [pc, #180]	; (8008a30 <D64_1CH_HTONS_VOL_HP+0x18c>)
 800897a:	fb22 cc00 	smlad	ip, r2, r0, ip
 800897e:	482d      	ldr	r0, [pc, #180]	; (8008a34 <D64_1CH_HTONS_VOL_HP+0x190>)
 8008980:	fb21 cc00 	smlad	ip, r1, r0, ip
 8008984:	482c      	ldr	r0, [pc, #176]	; (8008a38 <D64_1CH_HTONS_VOL_HP+0x194>)
 8008986:	fb23 cc00 	smlad	ip, r3, r0, ip
 800898a:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 800898e:	fb2b c404 	smlad	r4, fp, r4, ip
 8008992:	482a      	ldr	r0, [pc, #168]	; (8008a3c <D64_1CH_HTONS_VOL_HP+0x198>)
 8008994:	fb22 ec00 	smlad	ip, r2, r0, lr
 8008998:	fb2b cc10 	smladx	ip, fp, r0, ip
 800899c:	4828      	ldr	r0, [pc, #160]	; (8008a40 <D64_1CH_HTONS_VOL_HP+0x19c>)
 800899e:	fb21 cc00 	smlad	ip, r1, r0, ip
 80089a2:	fb23 cc10 	smladx	ip, r3, r0, ip
 80089a6:	f04f 0e01 	mov.w	lr, #1
 80089aa:	fb22 f20e 	smuad	r2, r2, lr
 80089ae:	4825      	ldr	r0, [pc, #148]	; (8008a44 <D64_1CH_HTONS_VOL_HP+0x1a0>)
 80089b0:	fb21 2100 	smlad	r1, r1, r0, r2
 80089b4:	4a24      	ldr	r2, [pc, #144]	; (8008a48 <D64_1CH_HTONS_VOL_HP+0x1a4>)
 80089b6:	fb23 1302 	smlad	r3, r3, r2, r1
 80089ba:	4a24      	ldr	r2, [pc, #144]	; (8008a4c <D64_1CH_HTONS_VOL_HP+0x1a8>)
 80089bc:	fb2b 3e02 	smlad	lr, fp, r2, r3
 80089c0:	f5a4 3400 	sub.w	r4, r4, #131072	; 0x20000
 80089c4:	eb04 0208 	add.w	r2, r4, r8
 80089c8:	eba2 020a 	sub.w	r2, r2, sl
 80089cc:	46a2      	mov	sl, r4
 80089ce:	4610      	mov	r0, r2
 80089d0:	17d1      	asrs	r1, r2, #31
 80089d2:	e9cd 0100 	strd	r0, r1, [sp]
 80089d6:	9904      	ldr	r1, [sp, #16]
 80089d8:	9801      	ldr	r0, [sp, #4]
 80089da:	fba2 2301 	umull	r2, r3, r2, r1
 80089de:	fb01 3300 	mla	r3, r1, r0, r3
 80089e2:	f112 4000 	adds.w	r0, r2, #2147483648	; 0x80000000
 80089e6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80089ea:	f143 0100 	adc.w	r1, r3, #0
 80089ee:	9b03      	ldr	r3, [sp, #12]
 80089f0:	02ca      	lsls	r2, r1, #11
 80089f2:	ea4f 0841 	mov.w	r8, r1, lsl #1
 80089f6:	2100      	movs	r1, #0
 80089f8:	fbc3 0102 	smlal	r0, r1, r3, r2
 80089fc:	108b      	asrs	r3, r1, #2
 80089fe:	f303 030f 	ssat	r3, #16, r3
 8008a02:	f827 3b02 	strh.w	r3, [r7], #2
 8008a06:	9b05      	ldr	r3, [sp, #20]
 8008a08:	429f      	cmp	r7, r3
 8008a0a:	f47f af67 	bne.w	80088dc <D64_1CH_HTONS_VOL_HP+0x38>
 8008a0e:	4673      	mov	r3, lr
 8008a10:	9a07      	ldr	r2, [sp, #28]
 8008a12:	6093      	str	r3, [r2, #8]
 8008a14:	2000      	movs	r0, #0
 8008a16:	9b06      	ldr	r3, [sp, #24]
 8008a18:	f8c2 c00c 	str.w	ip, [r2, #12]
 8008a1c:	61d6      	str	r6, [r2, #28]
 8008a1e:	6193      	str	r3, [r2, #24]
 8008a20:	e9c2 8404 	strd	r8, r4, [r2, #16]
 8008a24:	b009      	add	sp, #36	; 0x24
 8008a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a2a:	bf00      	nop
 8008a2c:	24000000 	.word	0x24000000
 8008a30:	001c0015 	.word	0x001c0015
 8008a34:	000f000a 	.word	0x000f000a
 8008a38:	00060003 	.word	0x00060003
 8008a3c:	0024002a 	.word	0x0024002a
 8008a40:	002e0030 	.word	0x002e0030
 8008a44:	00030006 	.word	0x00030006
 8008a48:	000a000f 	.word	0x000a000f
 8008a4c:	0015001c 	.word	0x0015001c

08008a50 <D80_1CH_HTONS_VOL_HP>:
 8008a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a54:	6913      	ldr	r3, [r2, #16]
 8008a56:	b089      	sub	sp, #36	; 0x24
 8008a58:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8008a5a:	9301      	str	r3, [sp, #4]
 8008a5c:	9603      	str	r6, [sp, #12]
 8008a5e:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8008a60:	6a16      	ldr	r6, [r2, #32]
 8008a62:	e9d2 5305 	ldrd	r5, r3, [r2, #20]
 8008a66:	e9d2 7c02 	ldrd	r7, ip, [r2, #8]
 8008a6a:	9306      	str	r3, [sp, #24]
 8008a6c:	9604      	str	r6, [sp, #16]
 8008a6e:	69d3      	ldr	r3, [r2, #28]
 8008a70:	2c00      	cmp	r4, #0
 8008a72:	f000 80ce 	beq.w	8008c12 <D80_1CH_HTONS_VOL_HP+0x1c2>
 8008a76:	3902      	subs	r1, #2
 8008a78:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8008a7c:	4e66      	ldr	r6, [pc, #408]	; (8008c18 <D80_1CH_HTONS_VOL_HP+0x1c8>)
 8008a7e:	469e      	mov	lr, r3
 8008a80:	9102      	str	r1, [sp, #8]
 8008a82:	46aa      	mov	sl, r5
 8008a84:	eb00 0144 	add.w	r1, r0, r4, lsl #1
 8008a88:	9207      	str	r2, [sp, #28]
 8008a8a:	9105      	str	r1, [sp, #20]
 8008a8c:	6883      	ldr	r3, [r0, #8]
 8008a8e:	e9d0 4200 	ldrd	r4, r2, [r0]
 8008a92:	300a      	adds	r0, #10
 8008a94:	ba64      	rev16	r4, r4
 8008a96:	ba52      	rev16	r2, r2
 8008a98:	fa93 fb93 	rev16.w	fp, r3
 8008a9c:	b2e5      	uxtb	r5, r4
 8008a9e:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8008aa2:	f3c4 4107 	ubfx	r1, r4, #16, #8
 8008aa6:	0e24      	lsrs	r4, r4, #24
 8008aa8:	f856 8025 	ldr.w	r8, [r6, r5, lsl #2]
 8008aac:	b2d5      	uxtb	r5, r2
 8008aae:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8008ab2:	44c6      	add	lr, r8
 8008ab4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8008ab8:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
 8008abc:	eb03 239e 	add.w	r3, r3, lr, lsr #10
 8008ac0:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 8008ac4:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8008ac8:	eb01 2993 	add.w	r9, r1, r3, lsr #10
 8008acc:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8008ad0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008ad4:	eb04 2499 	add.w	r4, r4, r9, lsr #10
 8008ad8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8008adc:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8008ae0:	f3cb 2e07 	ubfx	lr, fp, #8, #8
 8008ae4:	eb05 2894 	add.w	r8, r5, r4, lsr #10
 8008ae8:	f3c2 4507 	ubfx	r5, r2, #16, #8
 8008aec:	0e12      	lsrs	r2, r2, #24
 8008aee:	f856 e02e 	ldr.w	lr, [r6, lr, lsl #2]
 8008af2:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 8008af6:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 8008afa:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8008afe:	fa5f fb8b 	uxtb.w	fp, fp
 8008b02:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 8008b06:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8008b0a:	f856 b02b 	ldr.w	fp, [r6, fp, lsl #2]
 8008b0e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8008b12:	eb02 2295 	add.w	r2, r2, r5, lsr #10
 8008b16:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8008b1a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8008b1e:	ea41 4808 	orr.w	r8, r1, r8, lsl #16
 8008b22:	eb0b 2b92 	add.w	fp, fp, r2, lsr #10
 8008b26:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8008b2a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8008b2e:	eb0e 2e9b 	add.w	lr, lr, fp, lsr #10
 8008b32:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8008b36:	ea44 4409 	orr.w	r4, r4, r9, lsl #16
 8008b3a:	f3ce 0109 	ubfx	r1, lr, #0, #10
 8008b3e:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8008b42:	ea4f 2e9e 	mov.w	lr, lr, lsr #10
 8008b46:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 8008b4a:	4934      	ldr	r1, [pc, #208]	; (8008c1c <D80_1CH_HTONS_VOL_HP+0x1cc>)
 8008b4c:	fb23 cc01 	smlad	ip, r3, r1, ip
 8008b50:	4933      	ldr	r1, [pc, #204]	; (8008c20 <D80_1CH_HTONS_VOL_HP+0x1d0>)
 8008b52:	fb24 cc01 	smlad	ip, r4, r1, ip
 8008b56:	4933      	ldr	r1, [pc, #204]	; (8008c24 <D80_1CH_HTONS_VOL_HP+0x1d4>)
 8008b58:	fb28 cc01 	smlad	ip, r8, r1, ip
 8008b5c:	4932      	ldr	r1, [pc, #200]	; (8008c28 <D80_1CH_HTONS_VOL_HP+0x1d8>)
 8008b5e:	fb22 cc01 	smlad	ip, r2, r1, ip
 8008b62:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8008b66:	fb2b c901 	smlad	r9, fp, r1, ip
 8008b6a:	4930      	ldr	r1, [pc, #192]	; (8008c2c <D80_1CH_HTONS_VOL_HP+0x1dc>)
 8008b6c:	fb23 7701 	smlad	r7, r3, r1, r7
 8008b70:	492f      	ldr	r1, [pc, #188]	; (8008c30 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 8008b72:	fb24 7701 	smlad	r7, r4, r1, r7
 8008b76:	f04f 1c4b 	mov.w	ip, #4915275	; 0x4b004b
 8008b7a:	fb28 7c0c 	smlad	ip, r8, ip, r7
 8008b7e:	492d      	ldr	r1, [pc, #180]	; (8008c34 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 8008b80:	fb22 cc01 	smlad	ip, r2, r1, ip
 8008b84:	492c      	ldr	r1, [pc, #176]	; (8008c38 <D80_1CH_HTONS_VOL_HP+0x1e8>)
 8008b86:	fb2b cc01 	smlad	ip, fp, r1, ip
 8008b8a:	2101      	movs	r1, #1
 8008b8c:	fb23 f301 	smuad	r3, r3, r1
 8008b90:	492a      	ldr	r1, [pc, #168]	; (8008c3c <D80_1CH_HTONS_VOL_HP+0x1ec>)
 8008b92:	fb24 3401 	smlad	r4, r4, r1, r3
 8008b96:	492a      	ldr	r1, [pc, #168]	; (8008c40 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 8008b98:	fb28 4101 	smlad	r1, r8, r1, r4
 8008b9c:	4f29      	ldr	r7, [pc, #164]	; (8008c44 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 8008b9e:	fb22 1207 	smlad	r2, r2, r7, r1
 8008ba2:	4f29      	ldr	r7, [pc, #164]	; (8008c48 <D80_1CH_HTONS_VOL_HP+0x1f8>)
 8008ba4:	fb2b 2707 	smlad	r7, fp, r7, r2
 8008ba8:	f5a9 317a 	sub.w	r1, r9, #256000	; 0x3e800
 8008bac:	9b01      	ldr	r3, [sp, #4]
 8008bae:	9c04      	ldr	r4, [sp, #16]
 8008bb0:	440b      	add	r3, r1
 8008bb2:	eba3 020a 	sub.w	r2, r3, sl
 8008bb6:	468a      	mov	sl, r1
 8008bb8:	ea4f 79e2 	mov.w	r9, r2, asr #31
 8008bbc:	fba2 2304 	umull	r2, r3, r2, r4
 8008bc0:	fb04 3309 	mla	r3, r4, r9, r3
 8008bc4:	f112 4400 	adds.w	r4, r2, #2147483648	; 0x80000000
 8008bc8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8008bcc:	f143 0500 	adc.w	r5, r3, #0
 8008bd0:	006b      	lsls	r3, r5, #1
 8008bd2:	02aa      	lsls	r2, r5, #10
 8008bd4:	2500      	movs	r5, #0
 8008bd6:	9301      	str	r3, [sp, #4]
 8008bd8:	9b03      	ldr	r3, [sp, #12]
 8008bda:	fbc3 4502 	smlal	r4, r5, r3, r2
 8008bde:	9a02      	ldr	r2, [sp, #8]
 8008be0:	10ab      	asrs	r3, r5, #2
 8008be2:	f303 030f 	ssat	r3, #16, r3
 8008be6:	f822 3f02 	strh.w	r3, [r2, #2]!
 8008bea:	9b05      	ldr	r3, [sp, #20]
 8008bec:	9202      	str	r2, [sp, #8]
 8008bee:	4298      	cmp	r0, r3
 8008bf0:	f47f af4c 	bne.w	8008a8c <D80_1CH_HTONS_VOL_HP+0x3c>
 8008bf4:	4673      	mov	r3, lr
 8008bf6:	9a07      	ldr	r2, [sp, #28]
 8008bf8:	61d3      	str	r3, [r2, #28]
 8008bfa:	2000      	movs	r0, #0
 8008bfc:	9b01      	ldr	r3, [sp, #4]
 8008bfe:	6097      	str	r7, [r2, #8]
 8008c00:	f8c2 c00c 	str.w	ip, [r2, #12]
 8008c04:	e9c2 3104 	strd	r3, r1, [r2, #16]
 8008c08:	9b06      	ldr	r3, [sp, #24]
 8008c0a:	6193      	str	r3, [r2, #24]
 8008c0c:	b009      	add	sp, #36	; 0x24
 8008c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c12:	4629      	mov	r1, r5
 8008c14:	e7f0      	b.n	8008bf8 <D80_1CH_HTONS_VOL_HP+0x1a8>
 8008c16:	bf00      	nop
 8008c18:	24000000 	.word	0x24000000
 8008c1c:	002d0024 	.word	0x002d0024
 8008c20:	001c0015 	.word	0x001c0015
 8008c24:	000f000a 	.word	0x000f000a
 8008c28:	00060003 	.word	0x00060003
 8008c2c:	0037003f 	.word	0x0037003f
 8008c30:	00450049 	.word	0x00450049
 8008c34:	00490045 	.word	0x00490045
 8008c38:	003f0037 	.word	0x003f0037
 8008c3c:	00030006 	.word	0x00030006
 8008c40:	000a000f 	.word	0x000a000f
 8008c44:	0015001c 	.word	0x0015001c
 8008c48:	0024002d 	.word	0x0024002d

08008c4c <D128_1CH_HTONS_VOL_HP>:
 8008c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c50:	6914      	ldr	r4, [r2, #16]
 8008c52:	b08d      	sub	sp, #52	; 0x34
 8008c54:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8008c56:	9404      	str	r4, [sp, #16]
 8008c58:	6954      	ldr	r4, [r2, #20]
 8008c5a:	920b      	str	r2, [sp, #44]	; 0x2c
 8008c5c:	9405      	str	r4, [sp, #20]
 8008c5e:	6994      	ldr	r4, [r2, #24]
 8008c60:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 8008c64:	940a      	str	r4, [sp, #40]	; 0x28
 8008c66:	6894      	ldr	r4, [r2, #8]
 8008c68:	9403      	str	r4, [sp, #12]
 8008c6a:	68d4      	ldr	r4, [r2, #12]
 8008c6c:	9402      	str	r4, [sp, #8]
 8008c6e:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8008c70:	6a12      	ldr	r2, [r2, #32]
 8008c72:	9407      	str	r4, [sp, #28]
 8008c74:	9208      	str	r2, [sp, #32]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	f000 812e 	beq.w	8008ed8 <D128_1CH_HTONS_VOL_HP+0x28c>
 8008c7c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8008c80:	f100 0b10 	add.w	fp, r0, #16
 8008c84:	f8df 9290 	ldr.w	r9, [pc, #656]	; 8008f18 <D128_1CH_HTONS_VOL_HP+0x2cc>
 8008c88:	9106      	str	r1, [sp, #24]
 8008c8a:	9309      	str	r3, [sp, #36]	; 0x24
 8008c8c:	e95b 0204 	ldrd	r0, r2, [fp, #-16]
 8008c90:	e95b 3602 	ldrd	r3, r6, [fp, #-8]
 8008c94:	ba40      	rev16	r0, r0
 8008c96:	ba52      	rev16	r2, r2
 8008c98:	ba5b      	rev16	r3, r3
 8008c9a:	ba76      	rev16	r6, r6
 8008c9c:	b2c5      	uxtb	r5, r0
 8008c9e:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8008ca2:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8008ca6:	0e00      	lsrs	r0, r0, #24
 8008ca8:	f859 7025 	ldr.w	r7, [r9, r5, lsl #2]
 8008cac:	b2d5      	uxtb	r5, r2
 8008cae:	f859 e024 	ldr.w	lr, [r9, r4, lsl #2]
 8008cb2:	f3c2 2407 	ubfx	r4, r2, #8, #8
 8008cb6:	44bc      	add	ip, r7
 8008cb8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008cbc:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
 8008cc0:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8008cc4:	eb0e 2e9c 	add.w	lr, lr, ip, lsr #10
 8008cc8:	f859 a025 	ldr.w	sl, [r9, r5, lsl #2]
 8008ccc:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 8008cd0:	0e12      	lsrs	r2, r2, #24
 8008cd2:	eb01 219e 	add.w	r1, r1, lr, lsr #10
 8008cd6:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 8008cda:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8008cde:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8008ce2:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 8008ce6:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 8008cea:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8008cee:	b2da      	uxtb	r2, r3
 8008cf0:	eb0a 2a97 	add.w	sl, sl, r7, lsr #10
 8008cf4:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8008cf8:	ea4e 4e0c 	orr.w	lr, lr, ip, lsl #16
 8008cfc:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 8008d00:	eb05 259a 	add.w	r5, r5, sl, lsr #10
 8008d04:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8008d08:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8008d0c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8008d10:	eb00 2c95 	add.w	ip, r0, r5, lsr #10
 8008d14:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8008d18:	f859 8021 	ldr.w	r8, [r9, r1, lsl #2]
 8008d1c:	f3c3 4107 	ubfx	r1, r3, #16, #8
 8008d20:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 8008d24:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8008d28:	f859 0021 	ldr.w	r0, [r9, r1, lsl #2]
 8008d2c:	0e1b      	lsrs	r3, r3, #24
 8008d2e:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 8008d32:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8008d36:	f859 1023 	ldr.w	r1, [r9, r3, lsl #2]
 8008d3a:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 8008d3e:	eb08 2892 	add.w	r8, r8, r2, lsr #10
 8008d42:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8008d46:	b2f3      	uxtb	r3, r6
 8008d48:	eb00 2a98 	add.w	sl, r0, r8, lsr #10
 8008d4c:	f3c8 0009 	ubfx	r0, r8, #0, #10
 8008d50:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008d54:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 8008d58:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 8008d5c:	f3c6 2c07 	ubfx	ip, r6, #8, #8
 8008d60:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8008d64:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8008d68:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 8008d6c:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 8008d70:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 8008d74:	0e36      	lsrs	r6, r6, #24
 8008d76:	eb02 2298 	add.w	r2, r2, r8, lsr #10
 8008d7a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8008d7e:	f859 302c 	ldr.w	r3, [r9, ip, lsl #2]
 8008d82:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8008d86:	f859 c026 	ldr.w	ip, [r9, r6, lsl #2]
 8008d8a:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008d8e:	eb03 2692 	add.w	r6, r3, r2, lsr #10
 8008d92:	f3c2 0309 	ubfx	r3, r2, #0, #10
 8008d96:	9101      	str	r1, [sp, #4]
 8008d98:	ea43 4208 	orr.w	r2, r3, r8, lsl #16
 8008d9c:	9b02      	ldr	r3, [sp, #8]
 8008d9e:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 8008da2:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8008da6:	4611      	mov	r1, r2
 8008da8:	f3cc 0209 	ubfx	r2, ip, #0, #10
 8008dac:	ea4f 2c9c 	mov.w	ip, ip, lsr #10
 8008db0:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8008db4:	4a49      	ldr	r2, [pc, #292]	; (8008edc <D128_1CH_HTONS_VOL_HP+0x290>)
 8008db6:	fb2e 3202 	smlad	r2, lr, r2, r3
 8008dba:	4b49      	ldr	r3, [pc, #292]	; (8008ee0 <D128_1CH_HTONS_VOL_HP+0x294>)
 8008dbc:	fb27 2203 	smlad	r2, r7, r3, r2
 8008dc0:	4b48      	ldr	r3, [pc, #288]	; (8008ee4 <D128_1CH_HTONS_VOL_HP+0x298>)
 8008dc2:	fb25 2203 	smlad	r2, r5, r3, r2
 8008dc6:	4b48      	ldr	r3, [pc, #288]	; (8008ee8 <D128_1CH_HTONS_VOL_HP+0x29c>)
 8008dc8:	fb24 2203 	smlad	r2, r4, r3, r2
 8008dcc:	4b47      	ldr	r3, [pc, #284]	; (8008eec <D128_1CH_HTONS_VOL_HP+0x2a0>)
 8008dce:	fb20 2803 	smlad	r8, r0, r3, r2
 8008dd2:	4b47      	ldr	r3, [pc, #284]	; (8008ef0 <D128_1CH_HTONS_VOL_HP+0x2a4>)
 8008dd4:	9a01      	ldr	r2, [sp, #4]
 8008dd6:	fb22 8203 	smlad	r2, r2, r3, r8
 8008dda:	4b46      	ldr	r3, [pc, #280]	; (8008ef4 <D128_1CH_HTONS_VOL_HP+0x2a8>)
 8008ddc:	9102      	str	r1, [sp, #8]
 8008dde:	fb21 2203 	smlad	r2, r1, r3, r2
 8008de2:	f44f 3880 	mov.w	r8, #65536	; 0x10000
 8008de6:	fb26 2308 	smlad	r3, r6, r8, r2
 8008dea:	4619      	mov	r1, r3
 8008dec:	9a03      	ldr	r2, [sp, #12]
 8008dee:	4b42      	ldr	r3, [pc, #264]	; (8008ef8 <D128_1CH_HTONS_VOL_HP+0x2ac>)
 8008df0:	fb2e 2803 	smlad	r8, lr, r3, r2
 8008df4:	4b41      	ldr	r3, [pc, #260]	; (8008efc <D128_1CH_HTONS_VOL_HP+0x2b0>)
 8008df6:	fb27 8a03 	smlad	sl, r7, r3, r8
 8008dfa:	f8df 8120 	ldr.w	r8, [pc, #288]	; 8008f1c <D128_1CH_HTONS_VOL_HP+0x2d0>
 8008dfe:	fb25 a808 	smlad	r8, r5, r8, sl
 8008e02:	f8df a11c 	ldr.w	sl, [pc, #284]	; 8008f20 <D128_1CH_HTONS_VOL_HP+0x2d4>
 8008e06:	fb24 880a 	smlad	r8, r4, sl, r8
 8008e0a:	f8df a118 	ldr.w	sl, [pc, #280]	; 8008f24 <D128_1CH_HTONS_VOL_HP+0x2d8>
 8008e0e:	fb20 8a0a 	smlad	sl, r0, sl, r8
 8008e12:	f8df 8114 	ldr.w	r8, [pc, #276]	; 8008f28 <D128_1CH_HTONS_VOL_HP+0x2dc>
 8008e16:	9b01      	ldr	r3, [sp, #4]
 8008e18:	fb23 aa08 	smlad	sl, r3, r8, sl
 8008e1c:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8008f2c <D128_1CH_HTONS_VOL_HP+0x2e0>
 8008e20:	9a02      	ldr	r2, [sp, #8]
 8008e22:	fb22 a808 	smlad	r8, r2, r8, sl
 8008e26:	f8df a108 	ldr.w	sl, [pc, #264]	; 8008f30 <D128_1CH_HTONS_VOL_HP+0x2e4>
 8008e2a:	fb26 830a 	smlad	r3, r6, sl, r8
 8008e2e:	f04f 0801 	mov.w	r8, #1
 8008e32:	9302      	str	r3, [sp, #8]
 8008e34:	fb2e fe08 	smuad	lr, lr, r8
 8008e38:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 8008f34 <D128_1CH_HTONS_VOL_HP+0x2e8>
 8008e3c:	fb27 ee08 	smlad	lr, r7, r8, lr
 8008e40:	4f2f      	ldr	r7, [pc, #188]	; (8008f00 <D128_1CH_HTONS_VOL_HP+0x2b4>)
 8008e42:	fb25 ee07 	smlad	lr, r5, r7, lr
 8008e46:	4f2f      	ldr	r7, [pc, #188]	; (8008f04 <D128_1CH_HTONS_VOL_HP+0x2b8>)
 8008e48:	fb24 ee07 	smlad	lr, r4, r7, lr
 8008e4c:	4f2e      	ldr	r7, [pc, #184]	; (8008f08 <D128_1CH_HTONS_VOL_HP+0x2bc>)
 8008e4e:	fb20 ee07 	smlad	lr, r0, r7, lr
 8008e52:	4f2e      	ldr	r7, [pc, #184]	; (8008f0c <D128_1CH_HTONS_VOL_HP+0x2c0>)
 8008e54:	9b01      	ldr	r3, [sp, #4]
 8008e56:	fb23 ee07 	smlad	lr, r3, r7, lr
 8008e5a:	4f2d      	ldr	r7, [pc, #180]	; (8008f10 <D128_1CH_HTONS_VOL_HP+0x2c4>)
 8008e5c:	fb22 e707 	smlad	r7, r2, r7, lr
 8008e60:	4b2c      	ldr	r3, [pc, #176]	; (8008f14 <D128_1CH_HTONS_VOL_HP+0x2c8>)
 8008e62:	fb26 7303 	smlad	r3, r6, r3, r7
 8008e66:	f5a1 1680 	sub.w	r6, r1, #1048576	; 0x100000
 8008e6a:	9303      	str	r3, [sp, #12]
 8008e6c:	9b04      	ldr	r3, [sp, #16]
 8008e6e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8008e72:	9f08      	ldr	r7, [sp, #32]
 8008e74:	2100      	movs	r1, #0
 8008e76:	4433      	add	r3, r6
 8008e78:	f10b 0b10 	add.w	fp, fp, #16
 8008e7c:	461a      	mov	r2, r3
 8008e7e:	9b05      	ldr	r3, [sp, #20]
 8008e80:	9605      	str	r6, [sp, #20]
 8008e82:	1ad2      	subs	r2, r2, r3
 8008e84:	17d5      	asrs	r5, r2, #31
 8008e86:	fba2 2307 	umull	r2, r3, r2, r7
 8008e8a:	1814      	adds	r4, r2, r0
 8008e8c:	fb07 3305 	mla	r3, r7, r5, r3
 8008e90:	eb43 0501 	adc.w	r5, r3, r1
 8008e94:	006b      	lsls	r3, r5, #1
 8008e96:	022a      	lsls	r2, r5, #8
 8008e98:	9304      	str	r3, [sp, #16]
 8008e9a:	9b07      	ldr	r3, [sp, #28]
 8008e9c:	fbc3 0102 	smlal	r0, r1, r3, r2
 8008ea0:	9a06      	ldr	r2, [sp, #24]
 8008ea2:	108b      	asrs	r3, r1, #2
 8008ea4:	f303 030f 	ssat	r3, #16, r3
 8008ea8:	f822 3b02 	strh.w	r3, [r2], #2
 8008eac:	4613      	mov	r3, r2
 8008eae:	9206      	str	r2, [sp, #24]
 8008eb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	f47f aeea 	bne.w	8008c8c <D128_1CH_HTONS_VOL_HP+0x40>
 8008eb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008eba:	2000      	movs	r0, #0
 8008ebc:	9903      	ldr	r1, [sp, #12]
 8008ebe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008ec0:	6099      	str	r1, [r3, #8]
 8008ec2:	9902      	ldr	r1, [sp, #8]
 8008ec4:	f8c3 c01c 	str.w	ip, [r3, #28]
 8008ec8:	60d9      	str	r1, [r3, #12]
 8008eca:	9904      	ldr	r1, [sp, #16]
 8008ecc:	619a      	str	r2, [r3, #24]
 8008ece:	e9c3 1604 	strd	r1, r6, [r3, #16]
 8008ed2:	b00d      	add	sp, #52	; 0x34
 8008ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ed8:	9e05      	ldr	r6, [sp, #20]
 8008eda:	e7ed      	b.n	8008eb8 <D128_1CH_HTONS_VOL_HP+0x26c>
 8008edc:	00780069 	.word	0x00780069
 8008ee0:	005b004e 	.word	0x005b004e
 8008ee4:	00420037 	.word	0x00420037
 8008ee8:	002d0024 	.word	0x002d0024
 8008eec:	001c0015 	.word	0x001c0015
 8008ef0:	000f000a 	.word	0x000f000a
 8008ef4:	00060003 	.word	0x00060003
 8008ef8:	00880096 	.word	0x00880096
 8008efc:	00a200ac 	.word	0x00a200ac
 8008f00:	000a000f 	.word	0x000a000f
 8008f04:	0015001c 	.word	0x0015001c
 8008f08:	0024002d 	.word	0x0024002d
 8008f0c:	00370042 	.word	0x00370042
 8008f10:	004e005b 	.word	0x004e005b
 8008f14:	00690078 	.word	0x00690078
 8008f18:	24000000 	.word	0x24000000
 8008f1c:	00b400ba 	.word	0x00b400ba
 8008f20:	00be00c0 	.word	0x00be00c0
 8008f24:	00c000be 	.word	0x00c000be
 8008f28:	00ba00b4 	.word	0x00ba00b4
 8008f2c:	00ac00a2 	.word	0x00ac00a2
 8008f30:	00960088 	.word	0x00960088
 8008f34:	00030006 	.word	0x00030006

08008f38 <PDM_Filter_Init>:
 8008f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f3a:	2240      	movs	r2, #64	; 0x40
 8008f3c:	2100      	movs	r1, #0
 8008f3e:	4604      	mov	r4, r0
 8008f40:	300c      	adds	r0, #12
 8008f42:	f000 f9ed 	bl	8009320 <memset>
 8008f46:	4a56      	ldr	r2, [pc, #344]	; (80090a0 <PDM_Filter_Init+0x168>)
 8008f48:	4856      	ldr	r0, [pc, #344]	; (80090a4 <PDM_Filter_Init+0x16c>)
 8008f4a:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 8008f4e:	6813      	ldr	r3, [r2, #0]
 8008f50:	f24c 2540 	movw	r5, #49728	; 0xc240
 8008f54:	f023 0301 	bic.w	r3, r3, #1
 8008f58:	6013      	str	r3, [r2, #0]
 8008f5a:	6803      	ldr	r3, [r0, #0]
 8008f5c:	400b      	ands	r3, r1
 8008f5e:	42ab      	cmp	r3, r5
 8008f60:	d040      	beq.n	8008fe4 <PDM_Filter_Init+0xac>
 8008f62:	6803      	ldr	r3, [r0, #0]
 8008f64:	f24c 2270 	movw	r2, #49776	; 0xc270
 8008f68:	4019      	ands	r1, r3
 8008f6a:	4291      	cmp	r1, r2
 8008f6c:	d03a      	beq.n	8008fe4 <PDM_Filter_Init+0xac>
 8008f6e:	4b4e      	ldr	r3, [pc, #312]	; (80090a8 <PDM_Filter_Init+0x170>)
 8008f70:	2101      	movs	r1, #1
 8008f72:	461a      	mov	r2, r3
 8008f74:	6019      	str	r1, [r3, #0]
 8008f76:	6813      	ldr	r3, [r2, #0]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d1fc      	bne.n	8008f76 <PDM_Filter_Init+0x3e>
 8008f7c:	4b4b      	ldr	r3, [pc, #300]	; (80090ac <PDM_Filter_Init+0x174>)
 8008f7e:	494c      	ldr	r1, [pc, #304]	; (80090b0 <PDM_Filter_Init+0x178>)
 8008f80:	4a4c      	ldr	r2, [pc, #304]	; (80090b4 <PDM_Filter_Init+0x17c>)
 8008f82:	6019      	str	r1, [r3, #0]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	8820      	ldrh	r0, [r4, #0]
 8008f88:	4293      	cmp	r3, r2
 8008f8a:	8961      	ldrh	r1, [r4, #10]
 8008f8c:	f04f 0300 	mov.w	r3, #0
 8008f90:	8922      	ldrh	r2, [r4, #8]
 8008f92:	bf14      	ite	ne
 8008f94:	2500      	movne	r5, #0
 8008f96:	4d47      	ldreq	r5, [pc, #284]	; (80090b4 <PDM_Filter_Init+0x17c>)
 8008f98:	2801      	cmp	r0, #1
 8008f9a:	61a3      	str	r3, [r4, #24]
 8008f9c:	6465      	str	r5, [r4, #68]	; 0x44
 8008f9e:	60e3      	str	r3, [r4, #12]
 8008fa0:	6263      	str	r3, [r4, #36]	; 0x24
 8008fa2:	6423      	str	r3, [r4, #64]	; 0x40
 8008fa4:	86a1      	strh	r1, [r4, #52]	; 0x34
 8008fa6:	86e2      	strh	r2, [r4, #54]	; 0x36
 8008fa8:	e9c4 3304 	strd	r3, r3, [r4, #16]
 8008fac:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8008fb0:	d936      	bls.n	8009020 <PDM_Filter_Init+0xe8>
 8008fb2:	2003      	movs	r0, #3
 8008fb4:	2302      	movs	r3, #2
 8008fb6:	8862      	ldrh	r2, [r4, #2]
 8008fb8:	2a01      	cmp	r2, #1
 8008fba:	d92e      	bls.n	800901a <PDM_Filter_Init+0xe2>
 8008fbc:	2140      	movs	r1, #64	; 0x40
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8008fc2:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 8008fc6:	d101      	bne.n	8008fcc <PDM_Filter_Init+0x94>
 8008fc8:	460b      	mov	r3, r1
 8008fca:	6421      	str	r1, [r4, #64]	; 0x40
 8008fcc:	6862      	ldr	r2, [r4, #4]
 8008fce:	b11a      	cbz	r2, 8008fd8 <PDM_Filter_Init+0xa0>
 8008fd0:	f043 0310 	orr.w	r3, r3, #16
 8008fd4:	62e2      	str	r2, [r4, #44]	; 0x2c
 8008fd6:	6423      	str	r3, [r4, #64]	; 0x40
 8008fd8:	2200      	movs	r2, #0
 8008fda:	8722      	strh	r2, [r4, #56]	; 0x38
 8008fdc:	b908      	cbnz	r0, 8008fe2 <PDM_Filter_Init+0xaa>
 8008fde:	3380      	adds	r3, #128	; 0x80
 8008fe0:	6423      	str	r3, [r4, #64]	; 0x40
 8008fe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fe4:	4b34      	ldr	r3, [pc, #208]	; (80090b8 <PDM_Filter_Init+0x180>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d1c0      	bne.n	8008f6e <PDM_Filter_Init+0x36>
 8008fec:	4a33      	ldr	r2, [pc, #204]	; (80090bc <PDM_Filter_Init+0x184>)
 8008fee:	6813      	ldr	r3, [r2, #0]
 8008ff0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008ff4:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8008ff8:	d006      	beq.n	8009008 <PDM_Filter_Init+0xd0>
 8008ffa:	6813      	ldr	r3, [r2, #0]
 8008ffc:	f240 4283 	movw	r2, #1155	; 0x483
 8009000:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009004:	4293      	cmp	r3, r2
 8009006:	d1b2      	bne.n	8008f6e <PDM_Filter_Init+0x36>
 8009008:	4b2d      	ldr	r3, [pc, #180]	; (80090c0 <PDM_Filter_Init+0x188>)
 800900a:	2101      	movs	r1, #1
 800900c:	461a      	mov	r2, r3
 800900e:	6019      	str	r1, [r3, #0]
 8009010:	6813      	ldr	r3, [r2, #0]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d1fc      	bne.n	8009010 <PDM_Filter_Init+0xd8>
 8009016:	4b2b      	ldr	r3, [pc, #172]	; (80090c4 <PDM_Filter_Init+0x18c>)
 8009018:	e7b1      	b.n	8008f7e <PDM_Filter_Init+0x46>
 800901a:	d03a      	beq.n	8009092 <PDM_Filter_Init+0x15a>
 800901c:	4618      	mov	r0, r3
 800901e:	e7cd      	b.n	8008fbc <PDM_Filter_Init+0x84>
 8009020:	4d29      	ldr	r5, [pc, #164]	; (80090c8 <PDM_Filter_Init+0x190>)
 8009022:	782a      	ldrb	r2, [r5, #0]
 8009024:	d01b      	beq.n	800905e <PDM_Filter_Init+0x126>
 8009026:	2a01      	cmp	r2, #1
 8009028:	d001      	beq.n	800902e <PDM_Filter_Init+0xf6>
 800902a:	2001      	movs	r0, #1
 800902c:	e7c3      	b.n	8008fb6 <PDM_Filter_Init+0x7e>
 800902e:	4927      	ldr	r1, [pc, #156]	; (80090cc <PDM_Filter_Init+0x194>)
 8009030:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 80090d4 <PDM_Filter_Init+0x19c>
 8009034:	f501 6780 	add.w	r7, r1, #1024	; 0x400
 8009038:	4e25      	ldr	r6, [pc, #148]	; (80090d0 <PDM_Filter_Init+0x198>)
 800903a:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800903e:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 8009042:	ea02 0006 	and.w	r0, r2, r6
 8009046:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800904a:	428f      	cmp	r7, r1
 800904c:	ea43 0300 	orr.w	r3, r3, r0
 8009050:	4413      	add	r3, r2
 8009052:	600b      	str	r3, [r1, #0]
 8009054:	d1f1      	bne.n	800903a <PDM_Filter_Init+0x102>
 8009056:	2300      	movs	r3, #0
 8009058:	2001      	movs	r0, #1
 800905a:	702b      	strb	r3, [r5, #0]
 800905c:	e7ab      	b.n	8008fb6 <PDM_Filter_Init+0x7e>
 800905e:	2a00      	cmp	r2, #0
 8009060:	d1a9      	bne.n	8008fb6 <PDM_Filter_Init+0x7e>
 8009062:	491a      	ldr	r1, [pc, #104]	; (80090cc <PDM_Filter_Init+0x194>)
 8009064:	f8df c06c 	ldr.w	ip, [pc, #108]	; 80090d4 <PDM_Filter_Init+0x19c>
 8009068:	f501 6780 	add.w	r7, r1, #1024	; 0x400
 800906c:	4e18      	ldr	r6, [pc, #96]	; (80090d0 <PDM_Filter_Init+0x198>)
 800906e:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8009072:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 8009076:	ea02 0006 	and.w	r0, r2, r6
 800907a:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800907e:	428f      	cmp	r7, r1
 8009080:	ea43 0300 	orr.w	r3, r3, r0
 8009084:	4413      	add	r3, r2
 8009086:	600b      	str	r3, [r1, #0]
 8009088:	d1f1      	bne.n	800906e <PDM_Filter_Init+0x136>
 800908a:	2001      	movs	r0, #1
 800908c:	2300      	movs	r3, #0
 800908e:	7028      	strb	r0, [r5, #0]
 8009090:	e791      	b.n	8008fb6 <PDM_Filter_Init+0x7e>
 8009092:	2220      	movs	r2, #32
 8009094:	4618      	mov	r0, r3
 8009096:	2160      	movs	r1, #96	; 0x60
 8009098:	6422      	str	r2, [r4, #64]	; 0x40
 800909a:	4613      	mov	r3, r2
 800909c:	e790      	b.n	8008fc0 <PDM_Filter_Init+0x88>
 800909e:	bf00      	nop
 80090a0:	e0002000 	.word	0xe0002000
 80090a4:	e000ed00 	.word	0xe000ed00
 80090a8:	40023008 	.word	0x40023008
 80090ac:	40023000 	.word	0x40023000
 80090b0:	f407a5c2 	.word	0xf407a5c2
 80090b4:	b5e8b5cd 	.word	0xb5e8b5cd
 80090b8:	e0042000 	.word	0xe0042000
 80090bc:	5c001000 	.word	0x5c001000
 80090c0:	58024c08 	.word	0x58024c08
 80090c4:	58024c00 	.word	0x58024c00
 80090c8:	24000490 	.word	0x24000490
 80090cc:	23fffffc 	.word	0x23fffffc
 80090d0:	000ffc00 	.word	0x000ffc00
 80090d4:	3ff00000 	.word	0x3ff00000

080090d8 <PDM_Filter_setConfig>:
 80090d8:	4b67      	ldr	r3, [pc, #412]	; (8009278 <PDM_Filter_setConfig+0x1a0>)
 80090da:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80090dc:	429a      	cmp	r2, r3
 80090de:	d128      	bne.n	8009132 <PDM_Filter_setConfig+0x5a>
 80090e0:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80090e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090e4:	880e      	ldrh	r6, [r1, #0]
 80090e6:	460d      	mov	r5, r1
 80090e8:	4604      	mov	r4, r0
 80090ea:	f422 7180 	bic.w	r1, r2, #256	; 0x100
 80090ee:	1e73      	subs	r3, r6, #1
 80090f0:	f9b5 7004 	ldrsh.w	r7, [r5, #4]
 80090f4:	f9b0 0038 	ldrsh.w	r0, [r0, #56]	; 0x38
 80090f8:	2b06      	cmp	r3, #6
 80090fa:	ed2d 8b02 	vpush	{d8}
 80090fe:	6421      	str	r1, [r4, #64]	; 0x40
 8009100:	b083      	sub	sp, #12
 8009102:	d820      	bhi.n	8009146 <PDM_Filter_setConfig+0x6e>
 8009104:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8009106:	42b3      	cmp	r3, r6
 8009108:	d03d      	beq.n	8009186 <PDM_Filter_setConfig+0xae>
 800910a:	4b5c      	ldr	r3, [pc, #368]	; (800927c <PDM_Filter_setConfig+0x1a4>)
 800910c:	4013      	ands	r3, r2
 800910e:	4333      	orrs	r3, r6
 8009110:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009114:	6423      	str	r3, [r4, #64]	; 0x40
 8009116:	f003 030f 	and.w	r3, r3, #15
 800911a:	2a70      	cmp	r2, #112	; 0x70
 800911c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8009120:	d009      	beq.n	8009136 <PDM_Filter_setConfig+0x5e>
 8009122:	2b06      	cmp	r3, #6
 8009124:	d824      	bhi.n	8009170 <PDM_Filter_setConfig+0x98>
 8009126:	e8df f003 	tbb	[pc, r3]
 800912a:	878a      	.short	0x878a
 800912c:	7b7e8184 	.word	0x7b7e8184
 8009130:	78          	.byte	0x78
 8009131:	00          	.byte	0x00
 8009132:	2004      	movs	r0, #4
 8009134:	4770      	bx	lr
 8009136:	2b06      	cmp	r3, #6
 8009138:	d81a      	bhi.n	8009170 <PDM_Filter_setConfig+0x98>
 800913a:	e8df f003 	tbb	[pc, r3]
 800913e:	8f92      	.short	0x8f92
 8009140:	8617898c 	.word	0x8617898c
 8009144:	83          	.byte	0x83
 8009145:	00          	.byte	0x00
 8009146:	4287      	cmp	r7, r0
 8009148:	f000 808e 	beq.w	8009268 <PDM_Filter_setConfig+0x190>
 800914c:	f117 0f0c 	cmn.w	r7, #12
 8009150:	f04f 0008 	mov.w	r0, #8
 8009154:	da11      	bge.n	800917a <PDM_Filter_setConfig+0xa2>
 8009156:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 800915a:	3040      	adds	r0, #64	; 0x40
 800915c:	80ab      	strh	r3, [r5, #4]
 800915e:	886b      	ldrh	r3, [r5, #2]
 8009160:	8626      	strh	r6, [r4, #48]	; 0x30
 8009162:	8663      	strh	r3, [r4, #50]	; 0x32
 8009164:	b003      	add	sp, #12
 8009166:	ecbd 8b02 	vpop	{d8}
 800916a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800916c:	4b44      	ldr	r3, [pc, #272]	; (8009280 <PDM_Filter_setConfig+0x1a8>)
 800916e:	64a3      	str	r3, [r4, #72]	; 0x48
 8009170:	f117 0f0c 	cmn.w	r7, #12
 8009174:	f04f 0000 	mov.w	r0, #0
 8009178:	dbed      	blt.n	8009156 <PDM_Filter_setConfig+0x7e>
 800917a:	2f33      	cmp	r7, #51	; 0x33
 800917c:	dd10      	ble.n	80091a0 <PDM_Filter_setConfig+0xc8>
 800917e:	2333      	movs	r3, #51	; 0x33
 8009180:	3040      	adds	r0, #64	; 0x40
 8009182:	80ab      	strh	r3, [r5, #4]
 8009184:	e7eb      	b.n	800915e <PDM_Filter_setConfig+0x86>
 8009186:	4287      	cmp	r7, r0
 8009188:	d1f2      	bne.n	8009170 <PDM_Filter_setConfig+0x98>
 800918a:	886b      	ldrh	r3, [r5, #2]
 800918c:	8663      	strh	r3, [r4, #50]	; 0x32
 800918e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009190:	2000      	movs	r0, #0
 8009192:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009196:	6423      	str	r3, [r4, #64]	; 0x40
 8009198:	b003      	add	sp, #12
 800919a:	ecbd 8b02 	vpop	{d8}
 800919e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80091a2:	f003 030f 	and.w	r3, r3, #15
 80091a6:	3b01      	subs	r3, #1
 80091a8:	2b06      	cmp	r3, #6
 80091aa:	d831      	bhi.n	8009210 <PDM_Filter_setConfig+0x138>
 80091ac:	4a35      	ldr	r2, [pc, #212]	; (8009284 <PDM_Filter_setConfig+0x1ac>)
 80091ae:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80091b2:	eddf 0a35 	vldr	s1, [pc, #212]	; 8009288 <PDM_Filter_setConfig+0x1b0>
 80091b6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80091ba:	9001      	str	r0, [sp, #4]
 80091bc:	edd3 7a07 	vldr	s15, [r3, #28]
 80091c0:	ed93 8a00 	vldr	s16, [r3]
 80091c4:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80091c8:	f000 f8ca 	bl	8009360 <powf>
 80091cc:	eef0 8a40 	vmov.f32	s17, s0
 80091d0:	9801      	ldr	r0, [sp, #4]
 80091d2:	ee07 7a90 	vmov	s15, r7
 80091d6:	ee28 8a28 	vmul.f32	s16, s16, s17
 80091da:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80091de:	9001      	str	r0, [sp, #4]
 80091e0:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 80091e4:	eddf 7a29 	vldr	s15, [pc, #164]	; 800928c <PDM_Filter_setConfig+0x1b4>
 80091e8:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80091ec:	f000 f8b8 	bl	8009360 <powf>
 80091f0:	ee28 8a00 	vmul.f32	s16, s16, s0
 80091f4:	886b      	ldrh	r3, [r5, #2]
 80091f6:	9801      	ldr	r0, [sp, #4]
 80091f8:	feb8 8a48 	vrinta.f32	s16, s16
 80091fc:	eebc 8ac8 	vcvt.u32.f32	s16, s16
 8009200:	8727      	strh	r7, [r4, #56]	; 0x38
 8009202:	8663      	strh	r3, [r4, #50]	; 0x32
 8009204:	8626      	strh	r6, [r4, #48]	; 0x30
 8009206:	ed84 8a0f 	vstr	s16, [r4, #60]	; 0x3c
 800920a:	2800      	cmp	r0, #0
 800920c:	d0bf      	beq.n	800918e <PDM_Filter_setConfig+0xb6>
 800920e:	e7a9      	b.n	8009164 <PDM_Filter_setConfig+0x8c>
 8009210:	eddf 8a1f 	vldr	s17, [pc, #124]	; 8009290 <PDM_Filter_setConfig+0x1b8>
 8009214:	ed9f 8a1f 	vldr	s16, [pc, #124]	; 8009294 <PDM_Filter_setConfig+0x1bc>
 8009218:	e7db      	b.n	80091d2 <PDM_Filter_setConfig+0xfa>
 800921a:	4b1f      	ldr	r3, [pc, #124]	; (8009298 <PDM_Filter_setConfig+0x1c0>)
 800921c:	64a3      	str	r3, [r4, #72]	; 0x48
 800921e:	e7a7      	b.n	8009170 <PDM_Filter_setConfig+0x98>
 8009220:	4b1e      	ldr	r3, [pc, #120]	; (800929c <PDM_Filter_setConfig+0x1c4>)
 8009222:	64a3      	str	r3, [r4, #72]	; 0x48
 8009224:	e7a4      	b.n	8009170 <PDM_Filter_setConfig+0x98>
 8009226:	4b1e      	ldr	r3, [pc, #120]	; (80092a0 <PDM_Filter_setConfig+0x1c8>)
 8009228:	64a3      	str	r3, [r4, #72]	; 0x48
 800922a:	e7a1      	b.n	8009170 <PDM_Filter_setConfig+0x98>
 800922c:	4b1d      	ldr	r3, [pc, #116]	; (80092a4 <PDM_Filter_setConfig+0x1cc>)
 800922e:	64a3      	str	r3, [r4, #72]	; 0x48
 8009230:	e79e      	b.n	8009170 <PDM_Filter_setConfig+0x98>
 8009232:	4b1d      	ldr	r3, [pc, #116]	; (80092a8 <PDM_Filter_setConfig+0x1d0>)
 8009234:	64a3      	str	r3, [r4, #72]	; 0x48
 8009236:	e79b      	b.n	8009170 <PDM_Filter_setConfig+0x98>
 8009238:	4b1c      	ldr	r3, [pc, #112]	; (80092ac <PDM_Filter_setConfig+0x1d4>)
 800923a:	64a3      	str	r3, [r4, #72]	; 0x48
 800923c:	e798      	b.n	8009170 <PDM_Filter_setConfig+0x98>
 800923e:	4b1c      	ldr	r3, [pc, #112]	; (80092b0 <PDM_Filter_setConfig+0x1d8>)
 8009240:	64a3      	str	r3, [r4, #72]	; 0x48
 8009242:	e795      	b.n	8009170 <PDM_Filter_setConfig+0x98>
 8009244:	4b1b      	ldr	r3, [pc, #108]	; (80092b4 <PDM_Filter_setConfig+0x1dc>)
 8009246:	64a3      	str	r3, [r4, #72]	; 0x48
 8009248:	e792      	b.n	8009170 <PDM_Filter_setConfig+0x98>
 800924a:	4b1b      	ldr	r3, [pc, #108]	; (80092b8 <PDM_Filter_setConfig+0x1e0>)
 800924c:	64a3      	str	r3, [r4, #72]	; 0x48
 800924e:	e78f      	b.n	8009170 <PDM_Filter_setConfig+0x98>
 8009250:	4b1a      	ldr	r3, [pc, #104]	; (80092bc <PDM_Filter_setConfig+0x1e4>)
 8009252:	64a3      	str	r3, [r4, #72]	; 0x48
 8009254:	e78c      	b.n	8009170 <PDM_Filter_setConfig+0x98>
 8009256:	4b1a      	ldr	r3, [pc, #104]	; (80092c0 <PDM_Filter_setConfig+0x1e8>)
 8009258:	64a3      	str	r3, [r4, #72]	; 0x48
 800925a:	e789      	b.n	8009170 <PDM_Filter_setConfig+0x98>
 800925c:	4b19      	ldr	r3, [pc, #100]	; (80092c4 <PDM_Filter_setConfig+0x1ec>)
 800925e:	64a3      	str	r3, [r4, #72]	; 0x48
 8009260:	e786      	b.n	8009170 <PDM_Filter_setConfig+0x98>
 8009262:	4b19      	ldr	r3, [pc, #100]	; (80092c8 <PDM_Filter_setConfig+0x1f0>)
 8009264:	64a3      	str	r3, [r4, #72]	; 0x48
 8009266:	e783      	b.n	8009170 <PDM_Filter_setConfig+0x98>
 8009268:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800926a:	42b3      	cmp	r3, r6
 800926c:	f47f af6e 	bne.w	800914c <PDM_Filter_setConfig+0x74>
 8009270:	886b      	ldrh	r3, [r5, #2]
 8009272:	2008      	movs	r0, #8
 8009274:	8663      	strh	r3, [r4, #50]	; 0x32
 8009276:	e775      	b.n	8009164 <PDM_Filter_setConfig+0x8c>
 8009278:	b5e8b5cd 	.word	0xb5e8b5cd
 800927c:	fffffef0 	.word	0xfffffef0
 8009280:	080083f1 	.word	0x080083f1
 8009284:	080096d0 	.word	0x080096d0
 8009288:	42000000 	.word	0x42000000
 800928c:	3d4ccccd 	.word	0x3d4ccccd
 8009290:	4f800000 	.word	0x4f800000
 8009294:	00000000 	.word	0x00000000
 8009298:	080077fd 	.word	0x080077fd
 800929c:	08007685 	.word	0x08007685
 80092a0:	08007575 	.word	0x08007575
 80092a4:	08008039 	.word	0x08008039
 80092a8:	08007da1 	.word	0x08007da1
 80092ac:	08007b69 	.word	0x08007b69
 80092b0:	08007985 	.word	0x08007985
 80092b4:	0800860d 	.word	0x0800860d
 80092b8:	080084d1 	.word	0x080084d1
 80092bc:	08008c4d 	.word	0x08008c4d
 80092c0:	08008a51 	.word	0x08008a51
 80092c4:	080088a5 	.word	0x080088a5
 80092c8:	08008739 	.word	0x08008739

080092cc <__errno>:
 80092cc:	4b01      	ldr	r3, [pc, #4]	; (80092d4 <__errno+0x8>)
 80092ce:	6818      	ldr	r0, [r3, #0]
 80092d0:	4770      	bx	lr
 80092d2:	bf00      	nop
 80092d4:	24000410 	.word	0x24000410

080092d8 <__libc_init_array>:
 80092d8:	b570      	push	{r4, r5, r6, lr}
 80092da:	4d0d      	ldr	r5, [pc, #52]	; (8009310 <__libc_init_array+0x38>)
 80092dc:	4c0d      	ldr	r4, [pc, #52]	; (8009314 <__libc_init_array+0x3c>)
 80092de:	1b64      	subs	r4, r4, r5
 80092e0:	10a4      	asrs	r4, r4, #2
 80092e2:	2600      	movs	r6, #0
 80092e4:	42a6      	cmp	r6, r4
 80092e6:	d109      	bne.n	80092fc <__libc_init_array+0x24>
 80092e8:	4d0b      	ldr	r5, [pc, #44]	; (8009318 <__libc_init_array+0x40>)
 80092ea:	4c0c      	ldr	r4, [pc, #48]	; (800931c <__libc_init_array+0x44>)
 80092ec:	f000 f9e4 	bl	80096b8 <_init>
 80092f0:	1b64      	subs	r4, r4, r5
 80092f2:	10a4      	asrs	r4, r4, #2
 80092f4:	2600      	movs	r6, #0
 80092f6:	42a6      	cmp	r6, r4
 80092f8:	d105      	bne.n	8009306 <__libc_init_array+0x2e>
 80092fa:	bd70      	pop	{r4, r5, r6, pc}
 80092fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009300:	4798      	blx	r3
 8009302:	3601      	adds	r6, #1
 8009304:	e7ee      	b.n	80092e4 <__libc_init_array+0xc>
 8009306:	f855 3b04 	ldr.w	r3, [r5], #4
 800930a:	4798      	blx	r3
 800930c:	3601      	adds	r6, #1
 800930e:	e7f2      	b.n	80092f6 <__libc_init_array+0x1e>
 8009310:	08009990 	.word	0x08009990
 8009314:	08009990 	.word	0x08009990
 8009318:	08009990 	.word	0x08009990
 800931c:	08009994 	.word	0x08009994

08009320 <memset>:
 8009320:	4402      	add	r2, r0
 8009322:	4603      	mov	r3, r0
 8009324:	4293      	cmp	r3, r2
 8009326:	d100      	bne.n	800932a <memset+0xa>
 8009328:	4770      	bx	lr
 800932a:	f803 1b01 	strb.w	r1, [r3], #1
 800932e:	e7f9      	b.n	8009324 <memset+0x4>

08009330 <checkint>:
 8009330:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8009334:	2b7e      	cmp	r3, #126	; 0x7e
 8009336:	dd10      	ble.n	800935a <checkint+0x2a>
 8009338:	2b96      	cmp	r3, #150	; 0x96
 800933a:	dc0c      	bgt.n	8009356 <checkint+0x26>
 800933c:	2201      	movs	r2, #1
 800933e:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8009342:	fa02 f303 	lsl.w	r3, r2, r3
 8009346:	1e5a      	subs	r2, r3, #1
 8009348:	4202      	tst	r2, r0
 800934a:	d106      	bne.n	800935a <checkint+0x2a>
 800934c:	4203      	tst	r3, r0
 800934e:	bf0c      	ite	eq
 8009350:	2002      	moveq	r0, #2
 8009352:	2001      	movne	r0, #1
 8009354:	4770      	bx	lr
 8009356:	2002      	movs	r0, #2
 8009358:	4770      	bx	lr
 800935a:	2000      	movs	r0, #0
 800935c:	4770      	bx	lr
	...

08009360 <powf>:
 8009360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009362:	ee10 1a10 	vmov	r1, s0
 8009366:	ee10 6a90 	vmov	r6, s1
 800936a:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 800936e:	0072      	lsls	r2, r6, #1
 8009370:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8009374:	b085      	sub	sp, #20
 8009376:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 800937a:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 800937e:	d256      	bcs.n	800942e <powf+0xce>
 8009380:	4298      	cmp	r0, r3
 8009382:	d256      	bcs.n	8009432 <powf+0xd2>
 8009384:	2000      	movs	r0, #0
 8009386:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 800938a:	4ea3      	ldr	r6, [pc, #652]	; (8009618 <powf+0x2b8>)
 800938c:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8009390:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 8009394:	f3c2 47c3 	ubfx	r7, r2, #19, #4
 8009398:	0dd2      	lsrs	r2, r2, #23
 800939a:	eb06 1707 	add.w	r7, r6, r7, lsl #4
 800939e:	05d2      	lsls	r2, r2, #23
 80093a0:	1a8b      	subs	r3, r1, r2
 80093a2:	ed97 5b00 	vldr	d5, [r7]
 80093a6:	ee07 3a90 	vmov	s15, r3
 80093aa:	15d2      	asrs	r2, r2, #23
 80093ac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80093b0:	eea5 6b07 	vfma.f64	d6, d5, d7
 80093b4:	ed97 5b02 	vldr	d5, [r7, #8]
 80093b8:	ee26 2b06 	vmul.f64	d2, d6, d6
 80093bc:	ee22 1b02 	vmul.f64	d1, d2, d2
 80093c0:	ee07 2a90 	vmov	s15, r2
 80093c4:	ed96 4b40 	vldr	d4, [r6, #256]	; 0x100
 80093c8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80093cc:	ee37 7b05 	vadd.f64	d7, d7, d5
 80093d0:	ed96 5b42 	vldr	d5, [r6, #264]	; 0x108
 80093d4:	ed96 3b44 	vldr	d3, [r6, #272]	; 0x110
 80093d8:	eea6 5b04 	vfma.f64	d5, d6, d4
 80093dc:	ed96 4b46 	vldr	d4, [r6, #280]	; 0x118
 80093e0:	eea6 4b03 	vfma.f64	d4, d6, d3
 80093e4:	ed96 3b48 	vldr	d3, [r6, #288]	; 0x120
 80093e8:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 80093ec:	eea6 7b03 	vfma.f64	d7, d6, d3
 80093f0:	eea2 7b04 	vfma.f64	d7, d2, d4
 80093f4:	eea5 7b01 	vfma.f64	d7, d5, d1
 80093f8:	ee20 0b07 	vmul.f64	d0, d0, d7
 80093fc:	ee10 1a90 	vmov	r1, s1
 8009400:	2300      	movs	r3, #0
 8009402:	2700      	movs	r7, #0
 8009404:	f3c1 32cf 	ubfx	r2, r1, #15, #16
 8009408:	f248 06be 	movw	r6, #32958	; 0x80be
 800940c:	429f      	cmp	r7, r3
 800940e:	bf08      	it	eq
 8009410:	4296      	cmpeq	r6, r2
 8009412:	f080 80b1 	bcs.w	8009578 <powf+0x218>
 8009416:	ed9f 7b78 	vldr	d7, [pc, #480]	; 80095f8 <powf+0x298>
 800941a:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800941e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009422:	dd79      	ble.n	8009518 <powf+0x1b8>
 8009424:	b005      	add	sp, #20
 8009426:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800942a:	f000 b91f 	b.w	800966c <__math_oflowf>
 800942e:	4298      	cmp	r0, r3
 8009430:	d32d      	bcc.n	800948e <powf+0x12e>
 8009432:	b952      	cbnz	r2, 800944a <powf+0xea>
 8009434:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 8009438:	005b      	lsls	r3, r3, #1
 800943a:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 800943e:	f240 80cd 	bls.w	80095dc <powf+0x27c>
 8009442:	ee30 0a20 	vadd.f32	s0, s0, s1
 8009446:	b005      	add	sp, #20
 8009448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800944a:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800944e:	d105      	bne.n	800945c <powf+0xfc>
 8009450:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 8009454:	0076      	lsls	r6, r6, #1
 8009456:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 800945a:	e7f0      	b.n	800943e <powf+0xde>
 800945c:	004b      	lsls	r3, r1, #1
 800945e:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 8009462:	d8ee      	bhi.n	8009442 <powf+0xe2>
 8009464:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 8009468:	d1eb      	bne.n	8009442 <powf+0xe2>
 800946a:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800946e:	f000 80b5 	beq.w	80095dc <powf+0x27c>
 8009472:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8009476:	ea6f 0606 	mvn.w	r6, r6
 800947a:	bf34      	ite	cc
 800947c:	2300      	movcc	r3, #0
 800947e:	2301      	movcs	r3, #1
 8009480:	0ff6      	lsrs	r6, r6, #31
 8009482:	42b3      	cmp	r3, r6
 8009484:	f040 80ad 	bne.w	80095e2 <powf+0x282>
 8009488:	ee20 0aa0 	vmul.f32	s0, s1, s1
 800948c:	e7db      	b.n	8009446 <powf+0xe6>
 800948e:	004f      	lsls	r7, r1, #1
 8009490:	1e7a      	subs	r2, r7, #1
 8009492:	429a      	cmp	r2, r3
 8009494:	d31c      	bcc.n	80094d0 <powf+0x170>
 8009496:	2900      	cmp	r1, #0
 8009498:	ee20 0a00 	vmul.f32	s0, s0, s0
 800949c:	da0f      	bge.n	80094be <powf+0x15e>
 800949e:	ee10 0a90 	vmov	r0, s1
 80094a2:	f7ff ff45 	bl	8009330 <checkint>
 80094a6:	2801      	cmp	r0, #1
 80094a8:	d109      	bne.n	80094be <powf+0x15e>
 80094aa:	eeb1 0a40 	vneg.f32	s0, s0
 80094ae:	b947      	cbnz	r7, 80094c2 <powf+0x162>
 80094b0:	2e00      	cmp	r6, #0
 80094b2:	dac8      	bge.n	8009446 <powf+0xe6>
 80094b4:	b005      	add	sp, #20
 80094b6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80094ba:	f000 b8dd 	b.w	8009678 <__math_divzerof>
 80094be:	2000      	movs	r0, #0
 80094c0:	e7f5      	b.n	80094ae <powf+0x14e>
 80094c2:	2e00      	cmp	r6, #0
 80094c4:	dabf      	bge.n	8009446 <powf+0xe6>
 80094c6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80094ca:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80094ce:	e7ba      	b.n	8009446 <powf+0xe6>
 80094d0:	2900      	cmp	r1, #0
 80094d2:	da1f      	bge.n	8009514 <powf+0x1b4>
 80094d4:	ee10 0a90 	vmov	r0, s1
 80094d8:	f7ff ff2a 	bl	8009330 <checkint>
 80094dc:	b920      	cbnz	r0, 80094e8 <powf+0x188>
 80094de:	b005      	add	sp, #20
 80094e0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80094e4:	f000 b8d8 	b.w	8009698 <__math_invalidf>
 80094e8:	2801      	cmp	r0, #1
 80094ea:	bf14      	ite	ne
 80094ec:	2000      	movne	r0, #0
 80094ee:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 80094f2:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80094f6:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80094fa:	f4bf af44 	bcs.w	8009386 <powf+0x26>
 80094fe:	eddf 7a47 	vldr	s15, [pc, #284]	; 800961c <powf+0x2bc>
 8009502:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009506:	ee10 3a10 	vmov	r3, s0
 800950a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800950e:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 8009512:	e738      	b.n	8009386 <powf+0x26>
 8009514:	2000      	movs	r0, #0
 8009516:	e7ee      	b.n	80094f6 <powf+0x196>
 8009518:	ed9f 7b39 	vldr	d7, [pc, #228]	; 8009600 <powf+0x2a0>
 800951c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8009520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009524:	dd10      	ble.n	8009548 <powf+0x1e8>
 8009526:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 800952a:	2800      	cmp	r0, #0
 800952c:	d15c      	bne.n	80095e8 <powf+0x288>
 800952e:	9302      	str	r3, [sp, #8]
 8009530:	eddd 7a02 	vldr	s15, [sp, #8]
 8009534:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009538:	ee77 7a87 	vadd.f32	s15, s15, s14
 800953c:	eef4 7a47 	vcmp.f32	s15, s14
 8009540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009544:	f47f af6e 	bne.w	8009424 <powf+0xc4>
 8009548:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8009608 <powf+0x2a8>
 800954c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8009550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009554:	d804      	bhi.n	8009560 <powf+0x200>
 8009556:	b005      	add	sp, #20
 8009558:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800955c:	f000 b87a 	b.w	8009654 <__math_uflowf>
 8009560:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 8009610 <powf+0x2b0>
 8009564:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8009568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800956c:	d504      	bpl.n	8009578 <powf+0x218>
 800956e:	b005      	add	sp, #20
 8009570:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8009574:	f000 b874 	b.w	8009660 <__math_may_uflowf>
 8009578:	4b29      	ldr	r3, [pc, #164]	; (8009620 <powf+0x2c0>)
 800957a:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 800957e:	ee30 6b07 	vadd.f64	d6, d0, d7
 8009582:	ed8d 6b00 	vstr	d6, [sp]
 8009586:	ee36 7b47 	vsub.f64	d7, d6, d7
 800958a:	ee30 7b47 	vsub.f64	d7, d0, d7
 800958e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009592:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8009596:	f006 011f 	and.w	r1, r6, #31
 800959a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800959e:	e9d1 ce00 	ldrd	ip, lr, [r1]
 80095a2:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 80095a6:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 80095aa:	ed93 4b46 	vldr	d4, [r3, #280]	; 0x118
 80095ae:	eea7 6b05 	vfma.f64	d6, d7, d5
 80095b2:	ee27 5b07 	vmul.f64	d5, d7, d7
 80095b6:	1836      	adds	r6, r6, r0
 80095b8:	2300      	movs	r3, #0
 80095ba:	eb13 040c 	adds.w	r4, r3, ip
 80095be:	ea4f 31c6 	mov.w	r1, r6, lsl #15
 80095c2:	eb41 050e 	adc.w	r5, r1, lr
 80095c6:	eea7 0b04 	vfma.f64	d0, d7, d4
 80095ca:	ec45 4b17 	vmov	d7, r4, r5
 80095ce:	eea6 0b05 	vfma.f64	d0, d6, d5
 80095d2:	ee20 0b07 	vmul.f64	d0, d0, d7
 80095d6:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80095da:	e734      	b.n	8009446 <powf+0xe6>
 80095dc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80095e0:	e731      	b.n	8009446 <powf+0xe6>
 80095e2:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8009624 <powf+0x2c4>
 80095e6:	e72e      	b.n	8009446 <powf+0xe6>
 80095e8:	9303      	str	r3, [sp, #12]
 80095ea:	eddd 7a03 	vldr	s15, [sp, #12]
 80095ee:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80095f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80095f6:	e7a1      	b.n	800953c <powf+0x1dc>
 80095f8:	ffd1d571 	.word	0xffd1d571
 80095fc:	405fffff 	.word	0x405fffff
 8009600:	ffa3aae2 	.word	0xffa3aae2
 8009604:	405fffff 	.word	0x405fffff
 8009608:	00000000 	.word	0x00000000
 800960c:	c062c000 	.word	0xc062c000
 8009610:	00000000 	.word	0x00000000
 8009614:	c062a000 	.word	0xc062a000
 8009618:	08009720 	.word	0x08009720
 800961c:	4b000000 	.word	0x4b000000
 8009620:	08009848 	.word	0x08009848
 8009624:	00000000 	.word	0x00000000

08009628 <with_errnof>:
 8009628:	b513      	push	{r0, r1, r4, lr}
 800962a:	4604      	mov	r4, r0
 800962c:	ed8d 0a01 	vstr	s0, [sp, #4]
 8009630:	f7ff fe4c 	bl	80092cc <__errno>
 8009634:	ed9d 0a01 	vldr	s0, [sp, #4]
 8009638:	6004      	str	r4, [r0, #0]
 800963a:	b002      	add	sp, #8
 800963c:	bd10      	pop	{r4, pc}

0800963e <xflowf>:
 800963e:	b130      	cbz	r0, 800964e <xflowf+0x10>
 8009640:	eef1 7a40 	vneg.f32	s15, s0
 8009644:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009648:	2022      	movs	r0, #34	; 0x22
 800964a:	f7ff bfed 	b.w	8009628 <with_errnof>
 800964e:	eef0 7a40 	vmov.f32	s15, s0
 8009652:	e7f7      	b.n	8009644 <xflowf+0x6>

08009654 <__math_uflowf>:
 8009654:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800965c <__math_uflowf+0x8>
 8009658:	f7ff bff1 	b.w	800963e <xflowf>
 800965c:	10000000 	.word	0x10000000

08009660 <__math_may_uflowf>:
 8009660:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009668 <__math_may_uflowf+0x8>
 8009664:	f7ff bfeb 	b.w	800963e <xflowf>
 8009668:	1a200000 	.word	0x1a200000

0800966c <__math_oflowf>:
 800966c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009674 <__math_oflowf+0x8>
 8009670:	f7ff bfe5 	b.w	800963e <xflowf>
 8009674:	70000000 	.word	0x70000000

08009678 <__math_divzerof>:
 8009678:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800967c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8009680:	2800      	cmp	r0, #0
 8009682:	fe40 7a27 	vseleq.f32	s15, s0, s15
 8009686:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8009694 <__math_divzerof+0x1c>
 800968a:	2022      	movs	r0, #34	; 0x22
 800968c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8009690:	f7ff bfca 	b.w	8009628 <with_errnof>
 8009694:	00000000 	.word	0x00000000

08009698 <__math_invalidf>:
 8009698:	eef0 7a40 	vmov.f32	s15, s0
 800969c:	ee30 7a40 	vsub.f32	s14, s0, s0
 80096a0:	eef4 7a67 	vcmp.f32	s15, s15
 80096a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096a8:	ee87 0a07 	vdiv.f32	s0, s14, s14
 80096ac:	d602      	bvs.n	80096b4 <__math_invalidf+0x1c>
 80096ae:	2021      	movs	r0, #33	; 0x21
 80096b0:	f7ff bfba 	b.w	8009628 <with_errnof>
 80096b4:	4770      	bx	lr
	...

080096b8 <_init>:
 80096b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ba:	bf00      	nop
 80096bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096be:	bc08      	pop	{r3}
 80096c0:	469e      	mov	lr, r3
 80096c2:	4770      	bx	lr

080096c4 <_fini>:
 80096c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096c6:	bf00      	nop
 80096c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096ca:	bc08      	pop	{r3}
 80096cc:	469e      	mov	lr, r3
 80096ce:	4770      	bx	lr
