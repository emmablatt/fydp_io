
mic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d420  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c8  0800d6f0  0800d6f0  0001d6f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800d9b8  0800d9b8  0001d9b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800d9bc  0800d9bc  0001d9bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000488  24000000  0800d9c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000004d8  24000488  0800de48  00020488  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000960  0800de48  00020960  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020488  2**0
                  CONTENTS, READONLY
  9 .debug_info   00027c74  00000000  00000000  000204b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003b5d  00000000  00000000  0004812a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000019c0  00000000  00000000  0004bc88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001870  00000000  00000000  0004d648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00034e3e  00000000  00000000  0004eeb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001abfd  00000000  00000000  00083cf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0014f4cb  00000000  00000000  0009e8f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      000000d1  00000000  00000000  001eddbe  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00006dbc  00000000  00000000  001ede90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000488 	.word	0x24000488
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800d6d8 	.word	0x0800d6d8

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400048c 	.word	0x2400048c
 800030c:	0800d6d8 	.word	0x0800d6d8

08000310 <WM8994_Init>:
  * @param pObj pointer to component object
  * @param pInit pointer de component init structure
  * @retval 0 if correct communication, else wrong communication
  */
int32_t WM8994_Init(WM8994_Object_t *pObj, WM8994_Init_t *pInit)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b084      	sub	sp, #16
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
 8000318:	6039      	str	r1, [r7, #0]
  int32_t ret;
  static uint8_t ColdStartup = 1;
  uint16_t tmp;
  
  /* wm8994 Errata Work-Arounds */
  tmp = 0x0003;
 800031a:	2303      	movs	r3, #3
 800031c:	817b      	strh	r3, [r7, #10]
  ret = wm8994_write_reg(&pObj->Ctx, 0x102, &tmp, 2);
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	f103 0018 	add.w	r0, r3, #24
 8000324:	f107 020a 	add.w	r2, r7, #10
 8000328:	2302      	movs	r3, #2
 800032a:	f44f 7181 	mov.w	r1, #258	; 0x102
 800032e:	f001 f9cf 	bl	80016d0 <wm8994_write_reg>
 8000332:	60f8      	str	r0, [r7, #12]
  tmp = 0x0000;
 8000334:	2300      	movs	r3, #0
 8000336:	817b      	strh	r3, [r7, #10]
  ret += wm8994_write_reg(&pObj->Ctx, 0x817, &tmp, 2);
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	f103 0018 	add.w	r0, r3, #24
 800033e:	f107 020a 	add.w	r2, r7, #10
 8000342:	2302      	movs	r3, #2
 8000344:	f640 0117 	movw	r1, #2071	; 0x817
 8000348:	f001 f9c2 	bl	80016d0 <wm8994_write_reg>
 800034c:	4602      	mov	r2, r0
 800034e:	68fb      	ldr	r3, [r7, #12]
 8000350:	4413      	add	r3, r2
 8000352:	60fb      	str	r3, [r7, #12]
  ret += wm8994_write_reg(&pObj->Ctx, 0x102, &tmp, 2);
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	f103 0018 	add.w	r0, r3, #24
 800035a:	f107 020a 	add.w	r2, r7, #10
 800035e:	2302      	movs	r3, #2
 8000360:	f44f 7181 	mov.w	r1, #258	; 0x102
 8000364:	f001 f9b4 	bl	80016d0 <wm8994_write_reg>
 8000368:	4602      	mov	r2, r0
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	4413      	add	r3, r2
 800036e:	60fb      	str	r3, [r7, #12]
  
  /* Enable VMID soft start (fast), Start-up Bias Current Enabled: 0x006C at reg 0x39 */
  /* Bias Enable */
  tmp = 0x006C;
 8000370:	236c      	movs	r3, #108	; 0x6c
 8000372:	817b      	strh	r3, [r7, #10]
  ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANTIPOP2, &tmp, 2);
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	f103 0018 	add.w	r0, r3, #24
 800037a:	f107 020a 	add.w	r2, r7, #10
 800037e:	2302      	movs	r3, #2
 8000380:	2139      	movs	r1, #57	; 0x39
 8000382:	f001 f9a5 	bl	80016d0 <wm8994_write_reg>
 8000386:	4602      	mov	r2, r0
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	4413      	add	r3, r2
 800038c:	60fb      	str	r3, [r7, #12]
  
  /* Enable bias generator, Enable VMID */
  if (pInit->InputDevice != WM8994_IN_NONE)
 800038e:	683b      	ldr	r3, [r7, #0]
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	2b00      	cmp	r3, #0
 8000394:	d00f      	beq.n	80003b6 <WM8994_Init+0xa6>
  {
    tmp = 0x0013;
 8000396:	2313      	movs	r3, #19
 8000398:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);  
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	f103 0018 	add.w	r0, r3, #24
 80003a0:	f107 020a 	add.w	r2, r7, #10
 80003a4:	2302      	movs	r3, #2
 80003a6:	2101      	movs	r1, #1
 80003a8:	f001 f992 	bl	80016d0 <wm8994_write_reg>
 80003ac:	4602      	mov	r2, r0
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	4413      	add	r3, r2
 80003b2:	60fb      	str	r3, [r7, #12]
 80003b4:	e00e      	b.n	80003d4 <WM8994_Init+0xc4>
  }
  else
  { 
    tmp = 0x0003;
 80003b6:	2303      	movs	r3, #3
 80003b8:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	f103 0018 	add.w	r0, r3, #24
 80003c0:	f107 020a 	add.w	r2, r7, #10
 80003c4:	2302      	movs	r3, #2
 80003c6:	2101      	movs	r1, #1
 80003c8:	f001 f982 	bl	80016d0 <wm8994_write_reg>
 80003cc:	4602      	mov	r2, r0
 80003ce:	68fb      	ldr	r3, [r7, #12]
 80003d0:	4413      	add	r3, r2
 80003d2:	60fb      	str	r3, [r7, #12]
  }
  
  /* Add Delay */
  (void)WM8994_Delay(pObj, 50);
 80003d4:	2132      	movs	r1, #50	; 0x32
 80003d6:	6878      	ldr	r0, [r7, #4]
 80003d8:	f001 f902 	bl	80015e0 <WM8994_Delay>
  
  /* Path Configurations for output */
  switch (pInit->OutputDevice)
 80003dc:	683b      	ldr	r3, [r7, #0]
 80003de:	685b      	ldr	r3, [r3, #4]
 80003e0:	2b03      	cmp	r3, #3
 80003e2:	f200 8141 	bhi.w	8000668 <WM8994_Init+0x358>
 80003e6:	a201      	add	r2, pc, #4	; (adr r2, 80003ec <WM8994_Init+0xdc>)
 80003e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003ec:	08000703 	.word	0x08000703
 80003f0:	080003fd 	.word	0x080003fd
 80003f4:	08000497 	.word	0x08000497
 80003f8:	08000531 	.word	0x08000531
  {
  case WM8994_OUT_SPEAKER: 
    /* Enable DAC1 (Left), Enable DAC1 (Right),
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    tmp = 0x0C0C;
 80003fc:	f640 430c 	movw	r3, #3084	; 0xc0c
 8000400:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	f103 0018 	add.w	r0, r3, #24
 8000408:	f107 020a 	add.w	r2, r7, #10
 800040c:	2302      	movs	r3, #2
 800040e:	2105      	movs	r1, #5
 8000410:	f001 f95e 	bl	80016d0 <wm8994_write_reg>
 8000414:	4602      	mov	r2, r0
 8000416:	68fb      	ldr	r3, [r7, #12]
 8000418:	4413      	add	r3, r2
 800041a:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    tmp = 0x0000;
 800041c:	2300      	movs	r3, #0
 800041e:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	f103 0018 	add.w	r0, r3, #24
 8000426:	f107 020a 	add.w	r2, r7, #10
 800042a:	2302      	movs	r3, #2
 800042c:	f240 6101 	movw	r1, #1537	; 0x601
 8000430:	f001 f94e 	bl	80016d0 <wm8994_write_reg>
 8000434:	4602      	mov	r2, r0
 8000436:	68fb      	ldr	r3, [r7, #12]
 8000438:	4413      	add	r3, r2
 800043a:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	f103 0018 	add.w	r0, r3, #24
 8000442:	f107 020a 	add.w	r2, r7, #10
 8000446:	2302      	movs	r3, #2
 8000448:	f240 6102 	movw	r1, #1538	; 0x602
 800044c:	f001 f940 	bl	80016d0 <wm8994_write_reg>
 8000450:	4602      	mov	r2, r0
 8000452:	68fb      	ldr	r3, [r7, #12]
 8000454:	4413      	add	r3, r2
 8000456:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    tmp = 0x0002;
 8000458:	2302      	movs	r3, #2
 800045a:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	f103 0018 	add.w	r0, r3, #24
 8000462:	f107 020a 	add.w	r2, r7, #10
 8000466:	2302      	movs	r3, #2
 8000468:	f240 6104 	movw	r1, #1540	; 0x604
 800046c:	f001 f930 	bl	80016d0 <wm8994_write_reg>
 8000470:	4602      	mov	r2, r0
 8000472:	68fb      	ldr	r3, [r7, #12]
 8000474:	4413      	add	r3, r2
 8000476:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	f103 0018 	add.w	r0, r3, #24
 800047e:	f107 020a 	add.w	r2, r7, #10
 8000482:	2302      	movs	r3, #2
 8000484:	f240 6105 	movw	r1, #1541	; 0x605
 8000488:	f001 f922 	bl	80016d0 <wm8994_write_reg>
 800048c:	4602      	mov	r2, r0
 800048e:	68fb      	ldr	r3, [r7, #12]
 8000490:	4413      	add	r3, r2
 8000492:	60fb      	str	r3, [r7, #12]
    break;
 8000494:	e136      	b.n	8000704 <WM8994_Init+0x3f4>
    
  case WM8994_OUT_HEADPHONE:    
    /* Disable DAC1 (Left), Disable DAC1 (Right),
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    tmp = 0x0303;
 8000496:	f240 3303 	movw	r3, #771	; 0x303
 800049a:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	f103 0018 	add.w	r0, r3, #24
 80004a2:	f107 020a 	add.w	r2, r7, #10
 80004a6:	2302      	movs	r3, #2
 80004a8:	2105      	movs	r1, #5
 80004aa:	f001 f911 	bl	80016d0 <wm8994_write_reg>
 80004ae:	4602      	mov	r2, r0
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	4413      	add	r3, r2
 80004b4:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    tmp = 0x0001;
 80004b6:	2301      	movs	r3, #1
 80004b8:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	f103 0018 	add.w	r0, r3, #24
 80004c0:	f107 020a 	add.w	r2, r7, #10
 80004c4:	2302      	movs	r3, #2
 80004c6:	f240 6101 	movw	r1, #1537	; 0x601
 80004ca:	f001 f901 	bl	80016d0 <wm8994_write_reg>
 80004ce:	4602      	mov	r2, r0
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	4413      	add	r3, r2
 80004d4:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	f103 0018 	add.w	r0, r3, #24
 80004dc:	f107 020a 	add.w	r2, r7, #10
 80004e0:	2302      	movs	r3, #2
 80004e2:	f240 6102 	movw	r1, #1538	; 0x602
 80004e6:	f001 f8f3 	bl	80016d0 <wm8994_write_reg>
 80004ea:	4602      	mov	r2, r0
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	4413      	add	r3, r2
 80004f0:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    tmp = 0x0000;
 80004f2:	2300      	movs	r3, #0
 80004f4:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	f103 0018 	add.w	r0, r3, #24
 80004fc:	f107 020a 	add.w	r2, r7, #10
 8000500:	2302      	movs	r3, #2
 8000502:	f240 6104 	movw	r1, #1540	; 0x604
 8000506:	f001 f8e3 	bl	80016d0 <wm8994_write_reg>
 800050a:	4602      	mov	r2, r0
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	4413      	add	r3, r2
 8000510:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	f103 0018 	add.w	r0, r3, #24
 8000518:	f107 020a 	add.w	r2, r7, #10
 800051c:	2302      	movs	r3, #2
 800051e:	f240 6105 	movw	r1, #1541	; 0x605
 8000522:	f001 f8d5 	bl	80016d0 <wm8994_write_reg>
 8000526:	4602      	mov	r2, r0
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	4413      	add	r3, r2
 800052c:	60fb      	str	r3, [r7, #12]
    break;
 800052e:	e0e9      	b.n	8000704 <WM8994_Init+0x3f4>
    
  case WM8994_OUT_BOTH:
    if (pInit->InputDevice == WM8994_IN_MIC1_MIC2)
 8000530:	683b      	ldr	r3, [r7, #0]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	2b05      	cmp	r3, #5
 8000536:	d14a      	bne.n	80005ce <WM8994_Init+0x2be>
    {
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      also Enable DAC2 (Left), Enable DAC2 (Right)*/
      tmp = 0x0F0F;
 8000538:	f640 730f 	movw	r3, #3855	; 0xf0f
 800053c:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	f103 0018 	add.w	r0, r3, #24
 8000544:	f107 020a 	add.w	r2, r7, #10
 8000548:	2302      	movs	r3, #2
 800054a:	2105      	movs	r1, #5
 800054c:	f001 f8c0 	bl	80016d0 <wm8994_write_reg>
 8000550:	4602      	mov	r2, r0
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	4413      	add	r3, r2
 8000556:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
      Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
      tmp = 0x0003;
 8000558:	2303      	movs	r3, #3
 800055a:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	f103 0018 	add.w	r0, r3, #24
 8000562:	f107 020a 	add.w	r2, r7, #10
 8000566:	2302      	movs	r3, #2
 8000568:	f240 6101 	movw	r1, #1537	; 0x601
 800056c:	f001 f8b0 	bl	80016d0 <wm8994_write_reg>
 8000570:	4602      	mov	r2, r0
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	4413      	add	r3, r2
 8000576:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
      Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	f103 0018 	add.w	r0, r3, #24
 800057e:	f107 020a 	add.w	r2, r7, #10
 8000582:	2302      	movs	r3, #2
 8000584:	f240 6102 	movw	r1, #1538	; 0x602
 8000588:	f001 f8a2 	bl	80016d0 <wm8994_write_reg>
 800058c:	4602      	mov	r2, r0
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	4413      	add	r3, r2
 8000592:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
      Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	f103 0018 	add.w	r0, r3, #24
 800059a:	f107 020a 	add.w	r2, r7, #10
 800059e:	2302      	movs	r3, #2
 80005a0:	f240 6104 	movw	r1, #1540	; 0x604
 80005a4:	f001 f894 	bl	80016d0 <wm8994_write_reg>
 80005a8:	4602      	mov	r2, r0
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	4413      	add	r3, r2
 80005ae:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
      Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */       
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	f103 0018 	add.w	r0, r3, #24
 80005b6:	f107 020a 	add.w	r2, r7, #10
 80005ba:	2302      	movs	r3, #2
 80005bc:	f240 6105 	movw	r1, #1541	; 0x605
 80005c0:	f001 f886 	bl	80016d0 <wm8994_write_reg>
 80005c4:	4602      	mov	r2, r0
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	4413      	add	r3, r2
 80005ca:	60fb      	str	r3, [r7, #12]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
      
      /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
    }
    break;
 80005cc:	e09a      	b.n	8000704 <WM8994_Init+0x3f4>
      tmp = 0x0F0F;
 80005ce:	f640 730f 	movw	r3, #3855	; 0xf0f
 80005d2:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	f103 0018 	add.w	r0, r3, #24
 80005da:	f107 020a 	add.w	r2, r7, #10
 80005de:	2302      	movs	r3, #2
 80005e0:	2105      	movs	r1, #5
 80005e2:	f001 f875 	bl	80016d0 <wm8994_write_reg>
 80005e6:	4602      	mov	r2, r0
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	4413      	add	r3, r2
 80005ec:	60fb      	str	r3, [r7, #12]
      tmp = 0x0001;
 80005ee:	2301      	movs	r3, #1
 80005f0:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	f103 0018 	add.w	r0, r3, #24
 80005f8:	f107 020a 	add.w	r2, r7, #10
 80005fc:	2302      	movs	r3, #2
 80005fe:	f240 6101 	movw	r1, #1537	; 0x601
 8000602:	f001 f865 	bl	80016d0 <wm8994_write_reg>
 8000606:	4602      	mov	r2, r0
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	4413      	add	r3, r2
 800060c:	60fb      	str	r3, [r7, #12]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	f103 0018 	add.w	r0, r3, #24
 8000614:	f107 020a 	add.w	r2, r7, #10
 8000618:	2302      	movs	r3, #2
 800061a:	f240 6102 	movw	r1, #1538	; 0x602
 800061e:	f001 f857 	bl	80016d0 <wm8994_write_reg>
 8000622:	4602      	mov	r2, r0
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	4413      	add	r3, r2
 8000628:	60fb      	str	r3, [r7, #12]
      tmp = 0x0002;
 800062a:	2302      	movs	r3, #2
 800062c:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	f103 0018 	add.w	r0, r3, #24
 8000634:	f107 020a 	add.w	r2, r7, #10
 8000638:	2302      	movs	r3, #2
 800063a:	f240 6104 	movw	r1, #1540	; 0x604
 800063e:	f001 f847 	bl	80016d0 <wm8994_write_reg>
 8000642:	4602      	mov	r2, r0
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	4413      	add	r3, r2
 8000648:	60fb      	str	r3, [r7, #12]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	f103 0018 	add.w	r0, r3, #24
 8000650:	f107 020a 	add.w	r2, r7, #10
 8000654:	2302      	movs	r3, #2
 8000656:	f240 6105 	movw	r1, #1541	; 0x605
 800065a:	f001 f839 	bl	80016d0 <wm8994_write_reg>
 800065e:	4602      	mov	r2, r0
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	4413      	add	r3, r2
 8000664:	60fb      	str	r3, [r7, #12]
    break;
 8000666:	e04d      	b.n	8000704 <WM8994_Init+0x3f4>
    break;
  case WM8994_OUT_AUTO :
  default:
    /* Disable DAC1 (Left), Disable DAC1 (Right),
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    tmp = 0x0303;
 8000668:	f240 3303 	movw	r3, #771	; 0x303
 800066c:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	f103 0018 	add.w	r0, r3, #24
 8000674:	f107 020a 	add.w	r2, r7, #10
 8000678:	2302      	movs	r3, #2
 800067a:	2105      	movs	r1, #5
 800067c:	f001 f828 	bl	80016d0 <wm8994_write_reg>
 8000680:	4602      	mov	r2, r0
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	4413      	add	r3, r2
 8000686:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    tmp = 0x0001;
 8000688:	2301      	movs	r3, #1
 800068a:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	f103 0018 	add.w	r0, r3, #24
 8000692:	f107 020a 	add.w	r2, r7, #10
 8000696:	2302      	movs	r3, #2
 8000698:	f240 6101 	movw	r1, #1537	; 0x601
 800069c:	f001 f818 	bl	80016d0 <wm8994_write_reg>
 80006a0:	4602      	mov	r2, r0
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	4413      	add	r3, r2
 80006a6:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	f103 0018 	add.w	r0, r3, #24
 80006ae:	f107 020a 	add.w	r2, r7, #10
 80006b2:	2302      	movs	r3, #2
 80006b4:	f240 6102 	movw	r1, #1538	; 0x602
 80006b8:	f001 f80a 	bl	80016d0 <wm8994_write_reg>
 80006bc:	4602      	mov	r2, r0
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	4413      	add	r3, r2
 80006c2:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    tmp = 0x0000;
 80006c4:	2300      	movs	r3, #0
 80006c6:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	f103 0018 	add.w	r0, r3, #24
 80006ce:	f107 020a 	add.w	r2, r7, #10
 80006d2:	2302      	movs	r3, #2
 80006d4:	f240 6104 	movw	r1, #1540	; 0x604
 80006d8:	f000 fffa 	bl	80016d0 <wm8994_write_reg>
 80006dc:	4602      	mov	r2, r0
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	4413      	add	r3, r2
 80006e2:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	f103 0018 	add.w	r0, r3, #24
 80006ea:	f107 020a 	add.w	r2, r7, #10
 80006ee:	2302      	movs	r3, #2
 80006f0:	f240 6105 	movw	r1, #1541	; 0x605
 80006f4:	f000 ffec 	bl	80016d0 <wm8994_write_reg>
 80006f8:	4602      	mov	r2, r0
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	4413      	add	r3, r2
 80006fe:	60fb      	str	r3, [r7, #12]
    break;
 8000700:	e000      	b.n	8000704 <WM8994_Init+0x3f4>
    break;
 8000702:	bf00      	nop
  }
  
  /* Path Configurations for input */
  switch (pInit->InputDevice)
 8000704:	683b      	ldr	r3, [r7, #0]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	3b01      	subs	r3, #1
 800070a:	2b04      	cmp	r3, #4
 800070c:	f200 81e0 	bhi.w	8000ad0 <WM8994_Init+0x7c0>
 8000710:	a201      	add	r2, pc, #4	; (adr r2, 8000718 <WM8994_Init+0x408>)
 8000712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000716:	bf00      	nop
 8000718:	08000901 	.word	0x08000901
 800071c:	0800072d 	.word	0x0800072d
 8000720:	080007eb 	.word	0x080007eb
 8000724:	08000ad1 	.word	0x08000ad1
 8000728:	080009bf 	.word	0x080009bf
  {
  case WM8994_IN_MIC2 :
    /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
    * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
    * Enable Left ADC, Enable Right ADC */
    tmp = 0x0C30;
 800072c:	f44f 6343 	mov.w	r3, #3120	; 0xc30
 8000730:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_4, &tmp, 2);
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	f103 0018 	add.w	r0, r3, #24
 8000738:	f107 020a 	add.w	r2, r7, #10
 800073c:	2302      	movs	r3, #2
 800073e:	2104      	movs	r1, #4
 8000740:	f000 ffc6 	bl	80016d0 <wm8994_write_reg>
 8000744:	4602      	mov	r2, r0
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	4413      	add	r3, r2
 800074a:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
    tmp = 0x00DB;
 800074c:	23db      	movs	r3, #219	; 0xdb
 800074e:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC2, &tmp, 2);
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	f103 0018 	add.w	r0, r3, #24
 8000756:	f107 020a 	add.w	r2, r7, #10
 800075a:	2302      	movs	r3, #2
 800075c:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8000760:	f000 ffb6 	bl	80016d0 <wm8994_write_reg>
 8000764:	4602      	mov	r2, r0
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	4413      	add	r3, r2
 800076a:	60fb      	str	r3, [r7, #12]
    
    /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
    tmp = 0x6000;
 800076c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000770:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2);
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	f103 0018 	add.w	r0, r3, #24
 8000778:	f107 020a 	add.w	r2, r7, #10
 800077c:	2302      	movs	r3, #2
 800077e:	2102      	movs	r1, #2
 8000780:	f000 ffa6 	bl	80016d0 <wm8994_write_reg>
 8000784:	4602      	mov	r2, r0
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	4413      	add	r3, r2
 800078a:	60fb      	str	r3, [r7, #12]
    
    /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
    tmp = 0x0002;
 800078c:	2302      	movs	r3, #2
 800078e:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_LMR, &tmp, 2);
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	f103 0018 	add.w	r0, r3, #24
 8000796:	f107 020a 	add.w	r2, r7, #10
 800079a:	2302      	movs	r3, #2
 800079c:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 80007a0:	f000 ff96 	bl	80016d0 <wm8994_write_reg>
 80007a4:	4602      	mov	r2, r0
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	4413      	add	r3, r2
 80007aa:	60fb      	str	r3, [r7, #12]
    
    /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_RMR, &tmp, 2);
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	f103 0018 	add.w	r0, r3, #24
 80007b2:	f107 020a 	add.w	r2, r7, #10
 80007b6:	2302      	movs	r3, #2
 80007b8:	f240 6109 	movw	r1, #1545	; 0x609
 80007bc:	f000 ff88 	bl	80016d0 <wm8994_write_reg>
 80007c0:	4602      	mov	r2, r0
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	4413      	add	r3, r2
 80007c6:	60fb      	str	r3, [r7, #12]
    
    /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
    tmp = 0x000E;
 80007c8:	230e      	movs	r3, #14
 80007ca:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_GPIO1, &tmp, 2);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	f103 0018 	add.w	r0, r3, #24
 80007d2:	f107 020a 	add.w	r2, r7, #10
 80007d6:	2302      	movs	r3, #2
 80007d8:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80007dc:	f000 ff78 	bl	80016d0 <wm8994_write_reg>
 80007e0:	4602      	mov	r2, r0
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	4413      	add	r3, r2
 80007e6:	60fb      	str	r3, [r7, #12]
    break;
 80007e8:	e173      	b.n	8000ad2 <WM8994_Init+0x7c2>
    
  case WM8994_IN_LINE1 :
    /* IN1LN_TO_IN1L, IN1RN_TO_IN1R */
    tmp = 0x0011;
 80007ea:	2311      	movs	r3, #17
 80007ec:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_INPUT_MIXER_2, &tmp, 2);
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	f103 0018 	add.w	r0, r3, #24
 80007f4:	f107 020a 	add.w	r2, r7, #10
 80007f8:	2302      	movs	r3, #2
 80007fa:	2128      	movs	r1, #40	; 0x28
 80007fc:	f000 ff68 	bl	80016d0 <wm8994_write_reg>
 8000800:	4602      	mov	r2, r0
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	4413      	add	r3, r2
 8000806:	60fb      	str	r3, [r7, #12]
    
    /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
    tmp = 0x0035;
 8000808:	2335      	movs	r3, #53	; 0x35
 800080a:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_INPUT_MIXER_3, &tmp, 2);
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	f103 0018 	add.w	r0, r3, #24
 8000812:	f107 020a 	add.w	r2, r7, #10
 8000816:	2302      	movs	r3, #2
 8000818:	2129      	movs	r1, #41	; 0x29
 800081a:	f000 ff59 	bl	80016d0 <wm8994_write_reg>
 800081e:	4602      	mov	r2, r0
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	4413      	add	r3, r2
 8000824:	60fb      	str	r3, [r7, #12]
    
    /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_INPUT_MIXER_4, &tmp, 2);
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	f103 0018 	add.w	r0, r3, #24
 800082c:	f107 020a 	add.w	r2, r7, #10
 8000830:	2302      	movs	r3, #2
 8000832:	212a      	movs	r1, #42	; 0x2a
 8000834:	f000 ff4c 	bl	80016d0 <wm8994_write_reg>
 8000838:	4602      	mov	r2, r0
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	4413      	add	r3, r2
 800083e:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
    * Enable Left ADC, Enable Right ADC */
    tmp = 0x0303;
 8000840:	f240 3303 	movw	r3, #771	; 0x303
 8000844:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_4, &tmp, 2);
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	f103 0018 	add.w	r0, r3, #24
 800084c:	f107 020a 	add.w	r2, r7, #10
 8000850:	2302      	movs	r3, #2
 8000852:	2104      	movs	r1, #4
 8000854:	f000 ff3c 	bl	80016d0 <wm8994_write_reg>
 8000858:	4602      	mov	r2, r0
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	4413      	add	r3, r2
 800085e:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
    tmp = 0x00DB;
 8000860:	23db      	movs	r3, #219	; 0xdb
 8000862:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC1, &tmp, 2);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	f103 0018 	add.w	r0, r3, #24
 800086a:	f107 020a 	add.w	r2, r7, #10
 800086e:	2302      	movs	r3, #2
 8000870:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8000874:	f000 ff2c 	bl	80016d0 <wm8994_write_reg>
 8000878:	4602      	mov	r2, r0
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	4413      	add	r3, r2
 800087e:	60fb      	str	r3, [r7, #12]
    
    /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
    tmp = 0x6350;
 8000880:	f246 3350 	movw	r3, #25424	; 0x6350
 8000884:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2);
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	f103 0018 	add.w	r0, r3, #24
 800088c:	f107 020a 	add.w	r2, r7, #10
 8000890:	2302      	movs	r3, #2
 8000892:	2102      	movs	r1, #2
 8000894:	f000 ff1c 	bl	80016d0 <wm8994_write_reg>
 8000898:	4602      	mov	r2, r0
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	4413      	add	r3, r2
 800089e:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
    tmp = 0x0002;
 80008a0:	2302      	movs	r3, #2
 80008a2:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_LMR, &tmp, 2);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	f103 0018 	add.w	r0, r3, #24
 80008aa:	f107 020a 	add.w	r2, r7, #10
 80008ae:	2302      	movs	r3, #2
 80008b0:	f240 6106 	movw	r1, #1542	; 0x606
 80008b4:	f000 ff0c 	bl	80016d0 <wm8994_write_reg>
 80008b8:	4602      	mov	r2, r0
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	4413      	add	r3, r2
 80008be:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_RMR, &tmp, 2);
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	f103 0018 	add.w	r0, r3, #24
 80008c6:	f107 020a 	add.w	r2, r7, #10
 80008ca:	2302      	movs	r3, #2
 80008cc:	f240 6107 	movw	r1, #1543	; 0x607
 80008d0:	f000 fefe 	bl	80016d0 <wm8994_write_reg>
 80008d4:	4602      	mov	r2, r0
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	4413      	add	r3, r2
 80008da:	60fb      	str	r3, [r7, #12]
    
    /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
    tmp = 0x800D;
 80008dc:	f248 030d 	movw	r3, #32781	; 0x800d
 80008e0:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_GPIO1, &tmp, 2);
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	f103 0018 	add.w	r0, r3, #24
 80008e8:	f107 020a 	add.w	r2, r7, #10
 80008ec:	2302      	movs	r3, #2
 80008ee:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80008f2:	f000 feed 	bl	80016d0 <wm8994_write_reg>
 80008f6:	4602      	mov	r2, r0
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	4413      	add	r3, r2
 80008fc:	60fb      	str	r3, [r7, #12]
    break;
 80008fe:	e0e8      	b.n	8000ad2 <WM8994_Init+0x7c2>
    
  case WM8994_IN_MIC1 :
    /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
    * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
    * Enable Left ADC, Enable Right ADC */
    tmp = 0x030C;
 8000900:	f44f 7343 	mov.w	r3, #780	; 0x30c
 8000904:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_4, &tmp, 2);
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	f103 0018 	add.w	r0, r3, #24
 800090c:	f107 020a 	add.w	r2, r7, #10
 8000910:	2302      	movs	r3, #2
 8000912:	2104      	movs	r1, #4
 8000914:	f000 fedc 	bl	80016d0 <wm8994_write_reg>
 8000918:	4602      	mov	r2, r0
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	4413      	add	r3, r2
 800091e:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
    tmp = 0x00DB;
 8000920:	23db      	movs	r3, #219	; 0xdb
 8000922:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC1, &tmp, 2);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	f103 0018 	add.w	r0, r3, #24
 800092a:	f107 020a 	add.w	r2, r7, #10
 800092e:	2302      	movs	r3, #2
 8000930:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8000934:	f000 fecc 	bl	80016d0 <wm8994_write_reg>
 8000938:	4602      	mov	r2, r0
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	4413      	add	r3, r2
 800093e:	60fb      	str	r3, [r7, #12]
    
    /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
    tmp = 0x6350;
 8000940:	f246 3350 	movw	r3, #25424	; 0x6350
 8000944:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2);
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	f103 0018 	add.w	r0, r3, #24
 800094c:	f107 020a 	add.w	r2, r7, #10
 8000950:	2302      	movs	r3, #2
 8000952:	2102      	movs	r1, #2
 8000954:	f000 febc 	bl	80016d0 <wm8994_write_reg>
 8000958:	4602      	mov	r2, r0
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	4413      	add	r3, r2
 800095e:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
    tmp = 0x0002;
 8000960:	2302      	movs	r3, #2
 8000962:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_LMR, &tmp, 2);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	f103 0018 	add.w	r0, r3, #24
 800096a:	f107 020a 	add.w	r2, r7, #10
 800096e:	2302      	movs	r3, #2
 8000970:	f240 6106 	movw	r1, #1542	; 0x606
 8000974:	f000 feac 	bl	80016d0 <wm8994_write_reg>
 8000978:	4602      	mov	r2, r0
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	4413      	add	r3, r2
 800097e:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_RMR, &tmp, 2);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	f103 0018 	add.w	r0, r3, #24
 8000986:	f107 020a 	add.w	r2, r7, #10
 800098a:	2302      	movs	r3, #2
 800098c:	f240 6107 	movw	r1, #1543	; 0x607
 8000990:	f000 fe9e 	bl	80016d0 <wm8994_write_reg>
 8000994:	4602      	mov	r2, r0
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	4413      	add	r3, r2
 800099a:	60fb      	str	r3, [r7, #12]
    
    /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
    tmp = 0x000D;
 800099c:	230d      	movs	r3, #13
 800099e:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_GPIO1, &tmp, 2);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	f103 0018 	add.w	r0, r3, #24
 80009a6:	f107 020a 	add.w	r2, r7, #10
 80009aa:	2302      	movs	r3, #2
 80009ac:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80009b0:	f000 fe8e 	bl	80016d0 <wm8994_write_reg>
 80009b4:	4602      	mov	r2, r0
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	4413      	add	r3, r2
 80009ba:	60fb      	str	r3, [r7, #12]
    break;
 80009bc:	e089      	b.n	8000ad2 <WM8994_Init+0x7c2>
    
  case WM8994_IN_MIC1_MIC2 :
    /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
    * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
    * Enable Left ADC, Enable Right ADC */
    tmp = 0x0F3C;
 80009be:	f640 733c 	movw	r3, #3900	; 0xf3c
 80009c2:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_4, &tmp, 2);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	f103 0018 	add.w	r0, r3, #24
 80009ca:	f107 020a 	add.w	r2, r7, #10
 80009ce:	2302      	movs	r3, #2
 80009d0:	2104      	movs	r1, #4
 80009d2:	f000 fe7d 	bl	80016d0 <wm8994_write_reg>
 80009d6:	4602      	mov	r2, r0
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	4413      	add	r3, r2
 80009dc:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
    tmp = 0x00DB;
 80009de:	23db      	movs	r3, #219	; 0xdb
 80009e0:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC2, &tmp, 2);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	f103 0018 	add.w	r0, r3, #24
 80009e8:	f107 020a 	add.w	r2, r7, #10
 80009ec:	2302      	movs	r3, #2
 80009ee:	f44f 618a 	mov.w	r1, #1104	; 0x450
 80009f2:	f000 fe6d 	bl	80016d0 <wm8994_write_reg>
 80009f6:	4602      	mov	r2, r0
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	4413      	add	r3, r2
 80009fc:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC1, &tmp, 2);
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	f103 0018 	add.w	r0, r3, #24
 8000a04:	f107 020a 	add.w	r2, r7, #10
 8000a08:	2302      	movs	r3, #2
 8000a0a:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8000a0e:	f000 fe5f 	bl	80016d0 <wm8994_write_reg>
 8000a12:	4602      	mov	r2, r0
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	4413      	add	r3, r2
 8000a18:	60fb      	str	r3, [r7, #12]
    
    /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
    tmp = 0x63A0;
 8000a1a:	f246 33a0 	movw	r3, #25504	; 0x63a0
 8000a1e:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2);
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	f103 0018 	add.w	r0, r3, #24
 8000a26:	f107 020a 	add.w	r2, r7, #10
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	2102      	movs	r1, #2
 8000a2e:	f000 fe4f 	bl	80016d0 <wm8994_write_reg>
 8000a32:	4602      	mov	r2, r0
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	4413      	add	r3, r2
 8000a38:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
    tmp = 0x0002;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_LMR, &tmp, 2);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	f103 0018 	add.w	r0, r3, #24
 8000a44:	f107 020a 	add.w	r2, r7, #10
 8000a48:	2302      	movs	r3, #2
 8000a4a:	f240 6106 	movw	r1, #1542	; 0x606
 8000a4e:	f000 fe3f 	bl	80016d0 <wm8994_write_reg>
 8000a52:	4602      	mov	r2, r0
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	4413      	add	r3, r2
 8000a58:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_RMR, &tmp, 2);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	f103 0018 	add.w	r0, r3, #24
 8000a60:	f107 020a 	add.w	r2, r7, #10
 8000a64:	2302      	movs	r3, #2
 8000a66:	f240 6107 	movw	r1, #1543	; 0x607
 8000a6a:	f000 fe31 	bl	80016d0 <wm8994_write_reg>
 8000a6e:	4602      	mov	r2, r0
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	4413      	add	r3, r2
 8000a74:	60fb      	str	r3, [r7, #12]
    
    /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_LMR, &tmp, 2);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	f103 0018 	add.w	r0, r3, #24
 8000a7c:	f107 020a 	add.w	r2, r7, #10
 8000a80:	2302      	movs	r3, #2
 8000a82:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8000a86:	f000 fe23 	bl	80016d0 <wm8994_write_reg>
 8000a8a:	4602      	mov	r2, r0
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	4413      	add	r3, r2
 8000a90:	60fb      	str	r3, [r7, #12]
    
    /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_RMR, &tmp, 2);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	f103 0018 	add.w	r0, r3, #24
 8000a98:	f107 020a 	add.w	r2, r7, #10
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	f240 6109 	movw	r1, #1545	; 0x609
 8000aa2:	f000 fe15 	bl	80016d0 <wm8994_write_reg>
 8000aa6:	4602      	mov	r2, r0
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	4413      	add	r3, r2
 8000aac:	60fb      	str	r3, [r7, #12]
    
    /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
    tmp = 0x000D;
 8000aae:	230d      	movs	r3, #13
 8000ab0:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_GPIO1, &tmp, 2);
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	f103 0018 	add.w	r0, r3, #24
 8000ab8:	f107 020a 	add.w	r2, r7, #10
 8000abc:	2302      	movs	r3, #2
 8000abe:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000ac2:	f000 fe05 	bl	80016d0 <wm8994_write_reg>
 8000ac6:	4602      	mov	r2, r0
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	4413      	add	r3, r2
 8000acc:	60fb      	str	r3, [r7, #12]
    
    break;    
 8000ace:	e000      	b.n	8000ad2 <WM8994_Init+0x7c2>
  case WM8994_IN_LINE2 :
  case WM8994_IN_NONE:      
  default:
    /* Actually, no other input devices supported */
    break;
 8000ad0:	bf00      	nop
  }
  
  /*  Clock Configurations */
  ret += WM8994_SetFrequency(pObj, pInit->Frequency);
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	689b      	ldr	r3, [r3, #8]
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	6878      	ldr	r0, [r7, #4]
 8000ada:	f000 fc73 	bl	80013c4 <WM8994_SetFrequency>
 8000ade:	4602      	mov	r2, r0
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	60fb      	str	r3, [r7, #12]
  
  if(pInit->InputDevice == WM8994_IN_MIC1_MIC2)
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	2b05      	cmp	r3, #5
 8000aec:	d11a      	bne.n	8000b24 <WM8994_Init+0x814>
  {
    /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
    ret += WM8994_SetResolution(pObj, WM8994_RESOLUTION_16b);
 8000aee:	2100      	movs	r1, #0
 8000af0:	6878      	ldr	r0, [r7, #4]
 8000af2:	f000 fc32 	bl	800135a <WM8994_SetResolution>
 8000af6:	4602      	mov	r2, r0
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	4413      	add	r3, r2
 8000afc:	60fb      	str	r3, [r7, #12]
    ret += WM8994_SetProtocol(pObj, WM8994_PROTOCOL_DSP);
 8000afe:	2103      	movs	r1, #3
 8000b00:	6878      	ldr	r0, [r7, #4]
 8000b02:	f000 fc44 	bl	800138e <WM8994_SetProtocol>
 8000b06:	4602      	mov	r2, r0
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	4413      	add	r3, r2
 8000b0c:	60fb      	str	r3, [r7, #12]
    ret += wm8994_aif1_control1_adcr_src(&pObj->Ctx, 1);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	3318      	adds	r3, #24
 8000b12:	2101      	movs	r1, #1
 8000b14:	4618      	mov	r0, r3
 8000b16:	f000 fe84 	bl	8001822 <wm8994_aif1_control1_adcr_src>
 8000b1a:	4602      	mov	r2, r0
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	4413      	add	r3, r2
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	e01b      	b.n	8000b5c <WM8994_Init+0x84c>
  }
  else
  {
    /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
    ret += WM8994_SetResolution(pObj, pInit->Resolution);
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	68db      	ldr	r3, [r3, #12]
 8000b28:	4619      	mov	r1, r3
 8000b2a:	6878      	ldr	r0, [r7, #4]
 8000b2c:	f000 fc15 	bl	800135a <WM8994_SetResolution>
 8000b30:	4602      	mov	r2, r0
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	4413      	add	r3, r2
 8000b36:	60fb      	str	r3, [r7, #12]
    ret += WM8994_SetProtocol(pObj, WM8994_PROTOCOL_I2S);
 8000b38:	2102      	movs	r1, #2
 8000b3a:	6878      	ldr	r0, [r7, #4]
 8000b3c:	f000 fc27 	bl	800138e <WM8994_SetProtocol>
 8000b40:	4602      	mov	r2, r0
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	4413      	add	r3, r2
 8000b46:	60fb      	str	r3, [r7, #12]
    ret += wm8994_aif1_control1_adcr_src(&pObj->Ctx, 1);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	3318      	adds	r3, #24
 8000b4c:	2101      	movs	r1, #1
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f000 fe67 	bl	8001822 <wm8994_aif1_control1_adcr_src>
 8000b54:	4602      	mov	r2, r0
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	4413      	add	r3, r2
 8000b5a:	60fb      	str	r3, [r7, #12]
  }
  
  /* slave mode */
  tmp = 0x0000;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	817b      	strh	r3, [r7, #10]
  ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_MASTER_SLAVE, &tmp, 2);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	f103 0018 	add.w	r0, r3, #24
 8000b66:	f107 020a 	add.w	r2, r7, #10
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	f240 3102 	movw	r1, #770	; 0x302
 8000b70:	f000 fdae 	bl	80016d0 <wm8994_write_reg>
 8000b74:	4602      	mov	r2, r0
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	4413      	add	r3, r2
 8000b7a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  tmp = 0x000A;
 8000b7c:	230a      	movs	r3, #10
 8000b7e:	817b      	strh	r3, [r7, #10]
  ret += wm8994_write_reg(&pObj->Ctx, WM8994_CLOCKING1, &tmp, 2);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	f103 0018 	add.w	r0, r3, #24
 8000b86:	f107 020a 	add.w	r2, r7, #10
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	f44f 7102 	mov.w	r1, #520	; 0x208
 8000b90:	f000 fd9e 	bl	80016d0 <wm8994_write_reg>
 8000b94:	4602      	mov	r2, r0
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	4413      	add	r3, r2
 8000b9a:	60fb      	str	r3, [r7, #12]
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  tmp = 0x0001;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	817b      	strh	r3, [r7, #10]
  ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_CLOCKING1, &tmp, 2);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	f103 0018 	add.w	r0, r3, #24
 8000ba6:	f107 020a 	add.w	r2, r7, #10
 8000baa:	2302      	movs	r3, #2
 8000bac:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bb0:	f000 fd8e 	bl	80016d0 <wm8994_write_reg>
 8000bb4:	4602      	mov	r2, r0
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	4413      	add	r3, r2
 8000bba:	60fb      	str	r3, [r7, #12]
  
  if (pInit->OutputDevice != WM8994_OUT_NONE)  /* Audio output selected */  
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	f000 81c6 	beq.w	8000f52 <WM8994_Init+0xc42>
  {  
    if ((pInit->OutputDevice == WM8994_OUT_HEADPHONE) && (pInit->InputDevice == WM8994_IN_NONE))
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	2b02      	cmp	r3, #2
 8000bcc:	d164      	bne.n	8000c98 <WM8994_Init+0x988>
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d160      	bne.n	8000c98 <WM8994_Init+0x988>
    {    
      tmp = 0x0100;
 8000bd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bda:	817b      	strh	r3, [r7, #10]
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	f103 0018 	add.w	r0, r3, #24
 8000be2:	f107 020a 	add.w	r2, r7, #10
 8000be6:	2302      	movs	r3, #2
 8000be8:	212d      	movs	r1, #45	; 0x2d
 8000bea:	f000 fd71 	bl	80016d0 <wm8994_write_reg>
 8000bee:	4602      	mov	r2, r0
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	60fb      	str	r3, [r7, #12]
      
      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	f103 0018 	add.w	r0, r3, #24
 8000bfc:	f107 020a 	add.w	r2, r7, #10
 8000c00:	2302      	movs	r3, #2
 8000c02:	212e      	movs	r1, #46	; 0x2e
 8000c04:	f000 fd64 	bl	80016d0 <wm8994_write_reg>
 8000c08:	4602      	mov	r2, r0
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	4413      	add	r3, r2
 8000c0e:	60fb      	str	r3, [r7, #12]
      
      /* Startup sequence for Headphone */
      if(ColdStartup == 1U)
 8000c10:	4b52      	ldr	r3, [pc, #328]	; (8000d5c <WM8994_Init+0xa4c>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d119      	bne.n	8000c4c <WM8994_Init+0x93c>
      {
        /* Enable/Start the write sequencer */
        tmp = 0x8100;
 8000c18:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8000c1c:	817b      	strh	r3, [r7, #10]
        ret += wm8994_write_reg(&pObj->Ctx, WM8994_WRITE_SEQ_CTRL1, &tmp, 2);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	f103 0018 	add.w	r0, r3, #24
 8000c24:	f107 020a 	add.w	r2, r7, #10
 8000c28:	2302      	movs	r3, #2
 8000c2a:	f44f 7188 	mov.w	r1, #272	; 0x110
 8000c2e:	f000 fd4f 	bl	80016d0 <wm8994_write_reg>
 8000c32:	4602      	mov	r2, r0
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	4413      	add	r3, r2
 8000c38:	60fb      	str	r3, [r7, #12]
        
        ColdStartup=0;
 8000c3a:	4b48      	ldr	r3, [pc, #288]	; (8000d5c <WM8994_Init+0xa4c>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	701a      	strb	r2, [r3, #0]
        /* Add Delay */
        (void)WM8994_Delay(pObj, 325);
 8000c40:	f240 1145 	movw	r1, #325	; 0x145
 8000c44:	6878      	ldr	r0, [r7, #4]
 8000c46:	f000 fccb 	bl	80015e0 <WM8994_Delay>
 8000c4a:	e014      	b.n	8000c76 <WM8994_Init+0x966>
      }
      else 
      { 
        /* Headphone Warm Start-Up */
        tmp = 0x8108;
 8000c4c:	f248 1308 	movw	r3, #33032	; 0x8108
 8000c50:	817b      	strh	r3, [r7, #10]
        ret += wm8994_write_reg(&pObj->Ctx, WM8994_WRITE_SEQ_CTRL1, &tmp, 2);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	f103 0018 	add.w	r0, r3, #24
 8000c58:	f107 020a 	add.w	r2, r7, #10
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	f44f 7188 	mov.w	r1, #272	; 0x110
 8000c62:	f000 fd35 	bl	80016d0 <wm8994_write_reg>
 8000c66:	4602      	mov	r2, r0
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	60fb      	str	r3, [r7, #12]
        
        /* Add Delay */
        (void)WM8994_Delay(pObj, 50);
 8000c6e:	2132      	movs	r1, #50	; 0x32
 8000c70:	6878      	ldr	r0, [r7, #4]
 8000c72:	f000 fcb5 	bl	80015e0 <WM8994_Delay>
      }
      
      /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
      tmp = 0x0000;
 8000c76:	2300      	movs	r3, #0
 8000c78:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	f103 0018 	add.w	r0, r3, #24
 8000c80:	f107 020a 	add.w	r2, r7, #10
 8000c84:	2302      	movs	r3, #2
 8000c86:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8000c8a:	f000 fd21 	bl	80016d0 <wm8994_write_reg>
 8000c8e:	4602      	mov	r2, r0
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	4413      	add	r3, r2
 8000c94:	60fb      	str	r3, [r7, #12]
 8000c96:	e0f4      	b.n	8000e82 <WM8994_Init+0xb72>
    else
    {
      /* Analog Output Configuration */
      
      /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
      tmp = 0x0300;
 8000c98:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c9c:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_3, &tmp, 2);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	f103 0018 	add.w	r0, r3, #24
 8000ca4:	f107 020a 	add.w	r2, r7, #10
 8000ca8:	2302      	movs	r3, #2
 8000caa:	2103      	movs	r1, #3
 8000cac:	f000 fd10 	bl	80016d0 <wm8994_write_reg>
 8000cb0:	4602      	mov	r2, r0
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	4413      	add	r3, r2
 8000cb6:	60fb      	str	r3, [r7, #12]
      
      /* Left Speaker Mixer Volume = 0dB */
      tmp = 0x0000;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPKMIXL_ATT, &tmp, 2);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	f103 0018 	add.w	r0, r3, #24
 8000cc2:	f107 020a 	add.w	r2, r7, #10
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	2122      	movs	r1, #34	; 0x22
 8000cca:	f000 fd01 	bl	80016d0 <wm8994_write_reg>
 8000cce:	4602      	mov	r2, r0
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	60fb      	str	r3, [r7, #12]
      
      /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPKMIXR_ATT, &tmp, 2);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	f103 0018 	add.w	r0, r3, #24
 8000cdc:	f107 020a 	add.w	r2, r7, #10
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	2123      	movs	r1, #35	; 0x23
 8000ce4:	f000 fcf4 	bl	80016d0 <wm8994_write_reg>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	4413      	add	r3, r2
 8000cee:	60fb      	str	r3, [r7, #12]
      
      /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
      Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
      tmp = 0x0300;
 8000cf0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cf4:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPEAKER_MIXER, &tmp, 2);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	f103 0018 	add.w	r0, r3, #24
 8000cfc:	f107 020a 	add.w	r2, r7, #10
 8000d00:	2302      	movs	r3, #2
 8000d02:	2136      	movs	r1, #54	; 0x36
 8000d04:	f000 fce4 	bl	80016d0 <wm8994_write_reg>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	4413      	add	r3, r2
 8000d0e:	60fb      	str	r3, [r7, #12]
      
      /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
      tmp = 0x3003;
 8000d10:	f243 0303 	movw	r3, #12291	; 0x3003
 8000d14:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	f103 0018 	add.w	r0, r3, #24
 8000d1c:	f107 020a 	add.w	r2, r7, #10
 8000d20:	2302      	movs	r3, #2
 8000d22:	2101      	movs	r1, #1
 8000d24:	f000 fcd4 	bl	80016d0 <wm8994_write_reg>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	60fb      	str	r3, [r7, #12]
      /* Headphone/Speaker Enable */
      
      if (pInit->InputDevice == WM8994_IN_MIC1_MIC2)
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2b05      	cmp	r3, #5
 8000d36:	d113      	bne.n	8000d60 <WM8994_Init+0xa50>
      {
        /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
        tmp = 0x0205;
 8000d38:	f240 2305 	movw	r3, #517	; 0x205
 8000d3c:	817b      	strh	r3, [r7, #10]
        ret += wm8994_write_reg(&pObj->Ctx, WM8994_CLASS_W, &tmp, 2); 
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	f103 0018 	add.w	r0, r3, #24
 8000d44:	f107 020a 	add.w	r2, r7, #10
 8000d48:	2302      	movs	r3, #2
 8000d4a:	2151      	movs	r1, #81	; 0x51
 8000d4c:	f000 fcc0 	bl	80016d0 <wm8994_write_reg>
 8000d50:	4602      	mov	r2, r0
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	4413      	add	r3, r2
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	e011      	b.n	8000d7e <WM8994_Init+0xa6e>
 8000d5a:	bf00      	nop
 8000d5c:	24000400 	.word	0x24000400
      }
      else
      {
        /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
        tmp = 0x0005;
 8000d60:	2305      	movs	r3, #5
 8000d62:	817b      	strh	r3, [r7, #10]
        ret += wm8994_write_reg(&pObj->Ctx, WM8994_CLASS_W, &tmp, 2);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	f103 0018 	add.w	r0, r3, #24
 8000d6a:	f107 020a 	add.w	r2, r7, #10
 8000d6e:	2302      	movs	r3, #2
 8000d70:	2151      	movs	r1, #81	; 0x51
 8000d72:	f000 fcad 	bl	80016d0 <wm8994_write_reg>
 8000d76:	4602      	mov	r2, r0
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	60fb      	str	r3, [r7, #12]
      }
      
      /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
      /* idem for Speaker */
      tmp = 0x3303;
 8000d7e:	f243 3303 	movw	r3, #13059	; 0x3303
 8000d82:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	f103 0018 	add.w	r0, r3, #24
 8000d8a:	f107 020a 	add.w	r2, r7, #10
 8000d8e:	2302      	movs	r3, #2
 8000d90:	2101      	movs	r1, #1
 8000d92:	f000 fc9d 	bl	80016d0 <wm8994_write_reg>
 8000d96:	4602      	mov	r2, r0
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	60fb      	str	r3, [r7, #12]
      
      /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
      tmp = 0x0022;
 8000d9e:	2322      	movs	r3, #34	; 0x22
 8000da0:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANALOG_HP, &tmp, 2);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	f103 0018 	add.w	r0, r3, #24
 8000da8:	f107 020a 	add.w	r2, r7, #10
 8000dac:	2302      	movs	r3, #2
 8000dae:	2160      	movs	r1, #96	; 0x60
 8000db0:	f000 fc8e 	bl	80016d0 <wm8994_write_reg>
 8000db4:	4602      	mov	r2, r0
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	4413      	add	r3, r2
 8000dba:	60fb      	str	r3, [r7, #12]
      
      /* Enable Charge Pump */
      tmp = 0x9F25;
 8000dbc:	f649 7325 	movw	r3, #40741	; 0x9f25
 8000dc0:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_CHARGE_PUMP1, &tmp, 2);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	f103 0018 	add.w	r0, r3, #24
 8000dc8:	f107 020a 	add.w	r2, r7, #10
 8000dcc:	2302      	movs	r3, #2
 8000dce:	214c      	movs	r1, #76	; 0x4c
 8000dd0:	f000 fc7e 	bl	80016d0 <wm8994_write_reg>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	4413      	add	r3, r2
 8000dda:	60fb      	str	r3, [r7, #12]
      
      /* Add Delay */
      (void)WM8994_Delay(pObj, 15);
 8000ddc:	210f      	movs	r1, #15
 8000dde:	6878      	ldr	r0, [r7, #4]
 8000de0:	f000 fbfe 	bl	80015e0 <WM8994_Delay>
      
      tmp = 0x0001;
 8000de4:	2301      	movs	r3, #1
 8000de6:	817b      	strh	r3, [r7, #10]
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	f103 0018 	add.w	r0, r3, #24
 8000dee:	f107 020a 	add.w	r2, r7, #10
 8000df2:	2302      	movs	r3, #2
 8000df4:	212d      	movs	r1, #45	; 0x2d
 8000df6:	f000 fc6b 	bl	80016d0 <wm8994_write_reg>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	4413      	add	r3, r2
 8000e00:	60fb      	str	r3, [r7, #12]
      
      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	f103 0018 	add.w	r0, r3, #24
 8000e08:	f107 020a 	add.w	r2, r7, #10
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	212e      	movs	r1, #46	; 0x2e
 8000e10:	f000 fc5e 	bl	80016d0 <wm8994_write_reg>
 8000e14:	4602      	mov	r2, r0
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	4413      	add	r3, r2
 8000e1a:	60fb      	str	r3, [r7, #12]
      
      /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
      /* idem for SPKOUTL and SPKOUTR */
      tmp = 0x0330;
 8000e1c:	f44f 734c 	mov.w	r3, #816	; 0x330
 8000e20:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_3, &tmp, 2);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	f103 0018 	add.w	r0, r3, #24
 8000e28:	f107 020a 	add.w	r2, r7, #10
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	2103      	movs	r1, #3
 8000e30:	f000 fc4e 	bl	80016d0 <wm8994_write_reg>
 8000e34:	4602      	mov	r2, r0
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	4413      	add	r3, r2
 8000e3a:	60fb      	str	r3, [r7, #12]
      
      /* Enable DC Servo and trigger start-up mode on left and right channels */
      tmp = 0x0033;
 8000e3c:	2333      	movs	r3, #51	; 0x33
 8000e3e:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_DC_SERVO1, &tmp, 2);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	f103 0018 	add.w	r0, r3, #24
 8000e46:	f107 020a 	add.w	r2, r7, #10
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	2154      	movs	r1, #84	; 0x54
 8000e4e:	f000 fc3f 	bl	80016d0 <wm8994_write_reg>
 8000e52:	4602      	mov	r2, r0
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	4413      	add	r3, r2
 8000e58:	60fb      	str	r3, [r7, #12]
      
      /* Add Delay */
      (void)WM8994_Delay(pObj, 257);
 8000e5a:	f240 1101 	movw	r1, #257	; 0x101
 8000e5e:	6878      	ldr	r0, [r7, #4]
 8000e60:	f000 fbbe 	bl	80015e0 <WM8994_Delay>
      
      /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
      tmp = 0x00EE;
 8000e64:	23ee      	movs	r3, #238	; 0xee
 8000e66:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANALOG_HP, &tmp, 2);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	f103 0018 	add.w	r0, r3, #24
 8000e6e:	f107 020a 	add.w	r2, r7, #10
 8000e72:	2302      	movs	r3, #2
 8000e74:	2160      	movs	r1, #96	; 0x60
 8000e76:	f000 fc2b 	bl	80016d0 <wm8994_write_reg>
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	4413      	add	r3, r2
 8000e80:	60fb      	str	r3, [r7, #12]
    }
    
    /* Unmutes */
    
    /* Unmute DAC 1 (Left) */
    tmp = 0x00C0;
 8000e82:	23c0      	movs	r3, #192	; 0xc0
 8000e84:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DAC1_LEFT_VOL, &tmp, 2);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	f103 0018 	add.w	r0, r3, #24
 8000e8c:	f107 020a 	add.w	r2, r7, #10
 8000e90:	2302      	movs	r3, #2
 8000e92:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8000e96:	f000 fc1b 	bl	80016d0 <wm8994_write_reg>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	60fb      	str	r3, [r7, #12]
    
    /* Unmute DAC 1 (Right) */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DAC1_RIGHT_VOL, &tmp, 2);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	f103 0018 	add.w	r0, r3, #24
 8000ea8:	f107 020a 	add.w	r2, r7, #10
 8000eac:	2302      	movs	r3, #2
 8000eae:	f240 6111 	movw	r1, #1553	; 0x611
 8000eb2:	f000 fc0d 	bl	80016d0 <wm8994_write_reg>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	4413      	add	r3, r2
 8000ebc:	60fb      	str	r3, [r7, #12]
    
    /* Unmute the AIF1 Timeslot 0 DAC path */
    tmp = 0x0010;
 8000ebe:	2310      	movs	r3, #16
 8000ec0:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	f103 0018 	add.w	r0, r3, #24
 8000ec8:	f107 020a 	add.w	r2, r7, #10
 8000ecc:	2302      	movs	r3, #2
 8000ece:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8000ed2:	f000 fbfd 	bl	80016d0 <wm8994_write_reg>
 8000ed6:	4602      	mov	r2, r0
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	4413      	add	r3, r2
 8000edc:	60fb      	str	r3, [r7, #12]
    
    /* Unmute DAC 2 (Left) */
    tmp = 0x00C0;
 8000ede:	23c0      	movs	r3, #192	; 0xc0
 8000ee0:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DAC2_LEFT_VOL, &tmp, 2);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	f103 0018 	add.w	r0, r3, #24
 8000ee8:	f107 020a 	add.w	r2, r7, #10
 8000eec:	2302      	movs	r3, #2
 8000eee:	f240 6112 	movw	r1, #1554	; 0x612
 8000ef2:	f000 fbed 	bl	80016d0 <wm8994_write_reg>
 8000ef6:	4602      	mov	r2, r0
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	4413      	add	r3, r2
 8000efc:	60fb      	str	r3, [r7, #12]
    
    /* Unmute DAC 2 (Right) */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DAC2_RIGHT_VOL, &tmp, 2);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	f103 0018 	add.w	r0, r3, #24
 8000f04:	f107 020a 	add.w	r2, r7, #10
 8000f08:	2302      	movs	r3, #2
 8000f0a:	f240 6113 	movw	r1, #1555	; 0x613
 8000f0e:	f000 fbdf 	bl	80016d0 <wm8994_write_reg>
 8000f12:	4602      	mov	r2, r0
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	4413      	add	r3, r2
 8000f18:	60fb      	str	r3, [r7, #12]
    
    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    tmp = 0x0010;
 8000f1a:	2310      	movs	r3, #16
 8000f1c:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	f103 0018 	add.w	r0, r3, #24
 8000f24:	f107 020a 	add.w	r2, r7, #10
 8000f28:	2302      	movs	r3, #2
 8000f2a:	f240 4122 	movw	r1, #1058	; 0x422
 8000f2e:	f000 fbcf 	bl	80016d0 <wm8994_write_reg>
 8000f32:	4602      	mov	r2, r0
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	4413      	add	r3, r2
 8000f38:	60fb      	str	r3, [r7, #12]
    
    /* Volume Control */
    ret += WM8994_SetVolume(pObj, VOLUME_OUTPUT, (uint8_t)pInit->Volume); 
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	691b      	ldr	r3, [r3, #16]
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	461a      	mov	r2, r3
 8000f42:	2101      	movs	r1, #1
 8000f44:	6878      	ldr	r0, [r7, #4]
 8000f46:	f000 f8e3 	bl	8001110 <WM8994_SetVolume>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	4413      	add	r3, r2
 8000f50:	60fb      	str	r3, [r7, #12]
  }
  
  if (pInit->InputDevice != WM8994_IN_NONE) /* Audio input selected */
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	f000 80b5 	beq.w	80010c6 <WM8994_Init+0xdb6>
  {
    if ((pInit->InputDevice == WM8994_IN_MIC1) || (pInit->InputDevice == WM8994_IN_MIC2))
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d003      	beq.n	8000f6c <WM8994_Init+0xc5c>
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d130      	bne.n	8000fce <WM8994_Init+0xcbe>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      tmp = 0x0013;
 8000f6c:	2313      	movs	r3, #19
 8000f6e:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	f103 0018 	add.w	r0, r3, #24
 8000f76:	f107 020a 	add.w	r2, r7, #10
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	2101      	movs	r1, #1
 8000f7e:	f000 fba7 	bl	80016d0 <wm8994_write_reg>
 8000f82:	4602      	mov	r2, r0
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	4413      	add	r3, r2
 8000f88:	60fb      	str	r3, [r7, #12]
      
      /* ADC oversample enable */
      tmp = 0x0002;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OVERSAMPLING, &tmp, 2);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	f103 0018 	add.w	r0, r3, #24
 8000f94:	f107 020a 	add.w	r2, r7, #10
 8000f98:	2302      	movs	r3, #2
 8000f9a:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8000f9e:	f000 fb97 	bl	80016d0 <wm8994_write_reg>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	60fb      	str	r3, [r7, #12]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      tmp = 0x3800;
 8000faa:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000fae:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_FILTERS, &tmp, 2);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	f103 0018 	add.w	r0, r3, #24
 8000fb6:	f107 020a 	add.w	r2, r7, #10
 8000fba:	2302      	movs	r3, #2
 8000fbc:	f240 4111 	movw	r1, #1041	; 0x411
 8000fc0:	f000 fb86 	bl	80016d0 <wm8994_write_reg>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	4413      	add	r3, r2
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	e06f      	b.n	80010ae <WM8994_Init+0xd9e>
    }
    else if(pInit->InputDevice == WM8994_IN_MIC1_MIC2)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	2b05      	cmp	r3, #5
 8000fd4:	d13e      	bne.n	8001054 <WM8994_Init+0xd44>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      tmp = 0x0013;
 8000fd6:	2313      	movs	r3, #19
 8000fd8:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	f103 0018 	add.w	r0, r3, #24
 8000fe0:	f107 020a 	add.w	r2, r7, #10
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	2101      	movs	r1, #1
 8000fe8:	f000 fb72 	bl	80016d0 <wm8994_write_reg>
 8000fec:	4602      	mov	r2, r0
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	60fb      	str	r3, [r7, #12]
      
      /* ADC oversample enable */
      tmp = 0x0002;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OVERSAMPLING, &tmp, 2);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f103 0018 	add.w	r0, r3, #24
 8000ffe:	f107 020a 	add.w	r2, r7, #10
 8001002:	2302      	movs	r3, #2
 8001004:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8001008:	f000 fb62 	bl	80016d0 <wm8994_write_reg>
 800100c:	4602      	mov	r2, r0
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	4413      	add	r3, r2
 8001012:	60fb      	str	r3, [r7, #12]
      
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      tmp = 0x1800;
 8001014:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001018:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_FILTERS, &tmp, 2);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	f103 0018 	add.w	r0, r3, #24
 8001020:	f107 020a 	add.w	r2, r7, #10
 8001024:	2302      	movs	r3, #2
 8001026:	f44f 6182 	mov.w	r1, #1040	; 0x410
 800102a:	f000 fb51 	bl	80016d0 <wm8994_write_reg>
 800102e:	4602      	mov	r2, r0
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	4413      	add	r3, r2
 8001034:	60fb      	str	r3, [r7, #12]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_FILTERS, &tmp, 2);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	f103 0018 	add.w	r0, r3, #24
 800103c:	f107 020a 	add.w	r2, r7, #10
 8001040:	2302      	movs	r3, #2
 8001042:	f240 4111 	movw	r1, #1041	; 0x411
 8001046:	f000 fb43 	bl	80016d0 <wm8994_write_reg>
 800104a:	4602      	mov	r2, r0
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	4413      	add	r3, r2
 8001050:	60fb      	str	r3, [r7, #12]
 8001052:	e02c      	b.n	80010ae <WM8994_Init+0xd9e>
    }    
    else /* ((pInit->InputDevice == WM8994_IN_LINE1) || (pInit->InputDevice == WM8994_IN_LINE2)) */
    {      
      /* Disable mute on IN1L, IN1L Volume = +0dB */
      tmp = 0x000B;
 8001054:	230b      	movs	r3, #11
 8001056:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_LEFT_LINE_IN12_VOL, &tmp, 2);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f103 0018 	add.w	r0, r3, #24
 800105e:	f107 020a 	add.w	r2, r7, #10
 8001062:	2302      	movs	r3, #2
 8001064:	2118      	movs	r1, #24
 8001066:	f000 fb33 	bl	80016d0 <wm8994_write_reg>
 800106a:	4602      	mov	r2, r0
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	4413      	add	r3, r2
 8001070:	60fb      	str	r3, [r7, #12]
      
      /* Disable mute on IN1R, IN1R Volume = +0dB */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_RIGHT_LINE_IN12_VOL, &tmp, 2);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f103 0018 	add.w	r0, r3, #24
 8001078:	f107 020a 	add.w	r2, r7, #10
 800107c:	2302      	movs	r3, #2
 800107e:	211a      	movs	r1, #26
 8001080:	f000 fb26 	bl	80016d0 <wm8994_write_reg>
 8001084:	4602      	mov	r2, r0
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	4413      	add	r3, r2
 800108a:	60fb      	str	r3, [r7, #12]
      
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      tmp = 0x1800;
 800108c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001090:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_FILTERS, &tmp, 2);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	f103 0018 	add.w	r0, r3, #24
 8001098:	f107 020a 	add.w	r2, r7, #10
 800109c:	2302      	movs	r3, #2
 800109e:	f44f 6182 	mov.w	r1, #1040	; 0x410
 80010a2:	f000 fb15 	bl	80016d0 <wm8994_write_reg>
 80010a6:	4602      	mov	r2, r0
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	4413      	add	r3, r2
 80010ac:	60fb      	str	r3, [r7, #12]
    }
    /* Volume Control */
    ret += WM8994_SetVolume(pObj, VOLUME_INPUT, (uint8_t)pInit->Volume); 
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	691b      	ldr	r3, [r3, #16]
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	461a      	mov	r2, r3
 80010b6:	2100      	movs	r1, #0
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	f000 f829 	bl	8001110 <WM8994_SetVolume>
 80010be:	4602      	mov	r2, r0
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	4413      	add	r3, r2
 80010c4:	60fb      	str	r3, [r7, #12]
  }
  
  if(ret != WM8994_OK)
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d002      	beq.n	80010d2 <WM8994_Init+0xdc2>
  {
    ret = WM8994_ERROR;
 80010cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010d0:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 80010d2:	68fb      	ldr	r3, [r7, #12]
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3710      	adds	r7, #16
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <WM8994_ReadID>:
  * @param  pObj pointer to component object
  * @param  Id component ID
  * @retval Component status 
  */
int32_t WM8994_ReadID(WM8994_Object_t *pObj, uint32_t *Id)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t wm8994_id;
  
  /* Initialize the Control interface of the Audio Codec */
  pObj->IO.Init();
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4798      	blx	r3
  /* Get ID from component */
  ret = wm8994_sw_reset_r(&pObj->Ctx, &wm8994_id);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	3318      	adds	r3, #24
 80010f0:	f107 020a 	add.w	r2, r7, #10
 80010f4:	4611      	mov	r1, r2
 80010f6:	4618      	mov	r0, r3
 80010f8:	f000 fb23 	bl	8001742 <wm8994_sw_reset_r>
 80010fc:	60f8      	str	r0, [r7, #12]
  
  *Id = wm8994_id;
 80010fe:	897b      	ldrh	r3, [r7, #10]
 8001100:	461a      	mov	r2, r3
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	601a      	str	r2, [r3, #0]
  
  return ret;
 8001106:	68fb      	ldr	r3, [r7, #12]
}
 8001108:	4618      	mov	r0, r3
 800110a:	3710      	adds	r7, #16
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <WM8994_SetVolume>:
  * @param  Volume  a byte value from 0 to 63 for output and from 0 to 240 for input
  *         (refer to codec registers description for more details).
  * @retval Component status
  */
int32_t WM8994_SetVolume(WM8994_Object_t *pObj, uint32_t InputOutput, uint8_t Volume)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af00      	add	r7, sp, #0
 8001116:	60f8      	str	r0, [r7, #12]
 8001118:	60b9      	str	r1, [r7, #8]
 800111a:	4613      	mov	r3, r2
 800111c:	71fb      	strb	r3, [r7, #7]
  int32_t ret;  
  uint16_t tmp;
  
  /* Output volume */
  if (InputOutput == VOLUME_OUTPUT)
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	2b01      	cmp	r3, #1
 8001122:	f040 8089 	bne.w	8001238 <WM8994_SetVolume+0x128>
  {    
    if(Volume > 0x3EU)
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	2b3e      	cmp	r3, #62	; 0x3e
 800112a:	d93c      	bls.n	80011a6 <WM8994_SetVolume+0x96>
    {
      /* Unmute audio codec */
      ret = WM8994_SetMute(pObj, WM8994_MUTE_OFF);
 800112c:	2100      	movs	r1, #0
 800112e:	68f8      	ldr	r0, [r7, #12]
 8001130:	f000 f8c8 	bl	80012c4 <WM8994_SetMute>
 8001134:	6178      	str	r0, [r7, #20]
      tmp = 0x3FU | 0x140U;
 8001136:	f240 137f 	movw	r3, #383	; 0x17f
 800113a:	827b      	strh	r3, [r7, #18]
      
      /* Left Headphone Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_LEFT_OUTPUT_VOL, &tmp, 2);
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	f103 0018 	add.w	r0, r3, #24
 8001142:	f107 0212 	add.w	r2, r7, #18
 8001146:	2302      	movs	r3, #2
 8001148:	211c      	movs	r1, #28
 800114a:	f000 fac1 	bl	80016d0 <wm8994_write_reg>
 800114e:	4602      	mov	r2, r0
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	4413      	add	r3, r2
 8001154:	617b      	str	r3, [r7, #20]
      
      /* Right Headphone Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_RIGHT_OUTPUT_VOL, &tmp, 2);
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	f103 0018 	add.w	r0, r3, #24
 800115c:	f107 0212 	add.w	r2, r7, #18
 8001160:	2302      	movs	r3, #2
 8001162:	211d      	movs	r1, #29
 8001164:	f000 fab4 	bl	80016d0 <wm8994_write_reg>
 8001168:	4602      	mov	r2, r0
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	4413      	add	r3, r2
 800116e:	617b      	str	r3, [r7, #20]
      
      /* Left Speaker Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPK_LEFT_VOL, &tmp, 2);
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	f103 0018 	add.w	r0, r3, #24
 8001176:	f107 0212 	add.w	r2, r7, #18
 800117a:	2302      	movs	r3, #2
 800117c:	2126      	movs	r1, #38	; 0x26
 800117e:	f000 faa7 	bl	80016d0 <wm8994_write_reg>
 8001182:	4602      	mov	r2, r0
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	4413      	add	r3, r2
 8001188:	617b      	str	r3, [r7, #20]
      
      /* Right Speaker Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPK_RIGHT_VOL, &tmp, 2);
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	f103 0018 	add.w	r0, r3, #24
 8001190:	f107 0212 	add.w	r2, r7, #18
 8001194:	2302      	movs	r3, #2
 8001196:	2127      	movs	r1, #39	; 0x27
 8001198:	f000 fa9a 	bl	80016d0 <wm8994_write_reg>
 800119c:	4602      	mov	r2, r0
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	4413      	add	r3, r2
 80011a2:	617b      	str	r3, [r7, #20]
 80011a4:	e083      	b.n	80012ae <WM8994_SetVolume+0x19e>
    }
    else if (Volume == 0U)
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d105      	bne.n	80011b8 <WM8994_SetVolume+0xa8>
    {
      /* Mute audio codec */
      ret = WM8994_SetMute(pObj, WM8994_MUTE_ON);
 80011ac:	2101      	movs	r1, #1
 80011ae:	68f8      	ldr	r0, [r7, #12]
 80011b0:	f000 f888 	bl	80012c4 <WM8994_SetMute>
 80011b4:	6178      	str	r0, [r7, #20]
 80011b6:	e07a      	b.n	80012ae <WM8994_SetVolume+0x19e>
    }
    else
    {
      /* Unmute audio codec */
      ret = WM8994_SetMute(pObj, WM8994_MUTE_OFF);
 80011b8:	2100      	movs	r1, #0
 80011ba:	68f8      	ldr	r0, [r7, #12]
 80011bc:	f000 f882 	bl	80012c4 <WM8994_SetMute>
 80011c0:	6178      	str	r0, [r7, #20]
      
      tmp = Volume | 0x140U;
 80011c2:	79fb      	ldrb	r3, [r7, #7]
 80011c4:	b29b      	uxth	r3, r3
 80011c6:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 80011ca:	b29b      	uxth	r3, r3
 80011cc:	827b      	strh	r3, [r7, #18]
      
      /* Left Headphone Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_LEFT_OUTPUT_VOL, &tmp, 2);
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	f103 0018 	add.w	r0, r3, #24
 80011d4:	f107 0212 	add.w	r2, r7, #18
 80011d8:	2302      	movs	r3, #2
 80011da:	211c      	movs	r1, #28
 80011dc:	f000 fa78 	bl	80016d0 <wm8994_write_reg>
 80011e0:	4602      	mov	r2, r0
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	4413      	add	r3, r2
 80011e6:	617b      	str	r3, [r7, #20]
      
      /* Right Headphone Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_RIGHT_OUTPUT_VOL, &tmp, 2);
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	f103 0018 	add.w	r0, r3, #24
 80011ee:	f107 0212 	add.w	r2, r7, #18
 80011f2:	2302      	movs	r3, #2
 80011f4:	211d      	movs	r1, #29
 80011f6:	f000 fa6b 	bl	80016d0 <wm8994_write_reg>
 80011fa:	4602      	mov	r2, r0
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	4413      	add	r3, r2
 8001200:	617b      	str	r3, [r7, #20]
      
      /* Left Speaker Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPK_LEFT_VOL, &tmp, 2);
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	f103 0018 	add.w	r0, r3, #24
 8001208:	f107 0212 	add.w	r2, r7, #18
 800120c:	2302      	movs	r3, #2
 800120e:	2126      	movs	r1, #38	; 0x26
 8001210:	f000 fa5e 	bl	80016d0 <wm8994_write_reg>
 8001214:	4602      	mov	r2, r0
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	4413      	add	r3, r2
 800121a:	617b      	str	r3, [r7, #20]
      
      /* Right Speaker Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPK_RIGHT_VOL, &tmp, 2);      
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	f103 0018 	add.w	r0, r3, #24
 8001222:	f107 0212 	add.w	r2, r7, #18
 8001226:	2302      	movs	r3, #2
 8001228:	2127      	movs	r1, #39	; 0x27
 800122a:	f000 fa51 	bl	80016d0 <wm8994_write_reg>
 800122e:	4602      	mov	r2, r0
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	4413      	add	r3, r2
 8001234:	617b      	str	r3, [r7, #20]
 8001236:	e03a      	b.n	80012ae <WM8994_SetVolume+0x19e>
    }
  }
  else /* Input volume: VOLUME_INPUT */
  {
    tmp = Volume | 0x100U;
 8001238:	79fb      	ldrb	r3, [r7, #7]
 800123a:	b29b      	uxth	r3, r3
 800123c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001240:	b29b      	uxth	r3, r3
 8001242:	827b      	strh	r3, [r7, #18]
    
    /* Left AIF1 ADC1 volume */
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_LEFT_VOL, &tmp, 2); 
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	f103 0018 	add.w	r0, r3, #24
 800124a:	f107 0212 	add.w	r2, r7, #18
 800124e:	2302      	movs	r3, #2
 8001250:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001254:	f000 fa3c 	bl	80016d0 <wm8994_write_reg>
 8001258:	6178      	str	r0, [r7, #20]
    
    /* Right AIF1 ADC1 volume */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_RIGHT_VOL, &tmp, 2); 
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	f103 0018 	add.w	r0, r3, #24
 8001260:	f107 0212 	add.w	r2, r7, #18
 8001264:	2302      	movs	r3, #2
 8001266:	f240 4101 	movw	r1, #1025	; 0x401
 800126a:	f000 fa31 	bl	80016d0 <wm8994_write_reg>
 800126e:	4602      	mov	r2, r0
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	4413      	add	r3, r2
 8001274:	617b      	str	r3, [r7, #20]
    
    /* Left AIF1 ADC2 volume */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_LEFT_VOL, &tmp, 2); 
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	f103 0018 	add.w	r0, r3, #24
 800127c:	f107 0212 	add.w	r2, r7, #18
 8001280:	2302      	movs	r3, #2
 8001282:	f240 4104 	movw	r1, #1028	; 0x404
 8001286:	f000 fa23 	bl	80016d0 <wm8994_write_reg>
 800128a:	4602      	mov	r2, r0
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	4413      	add	r3, r2
 8001290:	617b      	str	r3, [r7, #20]
    
    /* Right AIF1 ADC2 volume */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_RIGHT_VOL, &tmp, 2); 
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	f103 0018 	add.w	r0, r3, #24
 8001298:	f107 0212 	add.w	r2, r7, #18
 800129c:	2302      	movs	r3, #2
 800129e:	f240 4105 	movw	r1, #1029	; 0x405
 80012a2:	f000 fa15 	bl	80016d0 <wm8994_write_reg>
 80012a6:	4602      	mov	r2, r0
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	4413      	add	r3, r2
 80012ac:	617b      	str	r3, [r7, #20]
  }
  
  if(ret != WM8994_OK)
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d002      	beq.n	80012ba <WM8994_SetVolume+0x1aa>
  {
    ret = WM8994_ERROR;
 80012b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012b8:	617b      	str	r3, [r7, #20]
  }
  
  return ret;
 80012ba:	697b      	ldr	r3, [r7, #20]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3718      	adds	r7, #24
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <WM8994_SetMute>:
  * @param Cmd  WM8994_MUTE_ON to enable the mute or WM8994_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
int32_t WM8994_SetMute(WM8994_Object_t *pObj, uint32_t Cmd)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t tmp;
  
  /* Set the Mute mode */
  if(Cmd == WM8994_MUTE_ON)
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d11c      	bne.n	800130e <WM8994_SetMute+0x4a>
  { 
    tmp = 0x0200;
 80012d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012d8:	817b      	strh	r3, [r7, #10]
    /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	f103 0018 	add.w	r0, r3, #24
 80012e0:	f107 020a 	add.w	r2, r7, #10
 80012e4:	2302      	movs	r3, #2
 80012e6:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80012ea:	f000 f9f1 	bl	80016d0 <wm8994_write_reg>
 80012ee:	60f8      	str	r0, [r7, #12]
    
    /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f103 0018 	add.w	r0, r3, #24
 80012f6:	f107 020a 	add.w	r2, r7, #10
 80012fa:	2302      	movs	r3, #2
 80012fc:	f240 4122 	movw	r1, #1058	; 0x422
 8001300:	f000 f9e6 	bl	80016d0 <wm8994_write_reg>
 8001304:	4602      	mov	r2, r0
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	4413      	add	r3, r2
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	e01a      	b.n	8001344 <WM8994_SetMute+0x80>
  }
  else /* WM8994_MUTE_OFF Disable the Mute */
  {
    tmp = 0x0010;
 800130e:	2310      	movs	r3, #16
 8001310:	817b      	strh	r3, [r7, #10]
    /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	f103 0018 	add.w	r0, r3, #24
 8001318:	f107 020a 	add.w	r2, r7, #10
 800131c:	2302      	movs	r3, #2
 800131e:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8001322:	f000 f9d5 	bl	80016d0 <wm8994_write_reg>
 8001326:	60f8      	str	r0, [r7, #12]
    
    /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f103 0018 	add.w	r0, r3, #24
 800132e:	f107 020a 	add.w	r2, r7, #10
 8001332:	2302      	movs	r3, #2
 8001334:	f240 4122 	movw	r1, #1058	; 0x422
 8001338:	f000 f9ca 	bl	80016d0 <wm8994_write_reg>
 800133c:	4602      	mov	r2, r0
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	4413      	add	r3, r2
 8001342:	60fb      	str	r3, [r7, #12]
  }
  
  if(ret != WM8994_OK)
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d002      	beq.n	8001350 <WM8994_SetMute+0x8c>
  {
    ret = WM8994_ERROR;
 800134a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800134e:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 8001350:	68fb      	ldr	r3, [r7, #12]
}
 8001352:	4618      	mov	r0, r3
 8001354:	3710      	adds	r7, #16
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <WM8994_SetResolution>:
  *                    WM8994_RESOLUTION_16b, WM8994_RESOLUTION_20b, 
  *                    WM8994_RESOLUTION_24b or WM8994_RESOLUTION_32b
  * @retval Component status
  */
int32_t WM8994_SetResolution(WM8994_Object_t *pObj, uint32_t Resolution)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b084      	sub	sp, #16
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
 8001362:	6039      	str	r1, [r7, #0]
  int32_t ret = WM8994_OK;
 8001364:	2300      	movs	r3, #0
 8001366:	60fb      	str	r3, [r7, #12]
  
  if(wm8994_aif1_control1_wl(&pObj->Ctx, (uint16_t)Resolution) != WM8994_OK)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	3318      	adds	r3, #24
 800136c:	683a      	ldr	r2, [r7, #0]
 800136e:	b292      	uxth	r2, r2
 8001370:	4611      	mov	r1, r2
 8001372:	4618      	mov	r0, r3
 8001374:	f000 fa25 	bl	80017c2 <wm8994_aif1_control1_wl>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d002      	beq.n	8001384 <WM8994_SetResolution+0x2a>
  {
    ret = WM8994_ERROR;
 800137e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001382:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001384:	68fb      	ldr	r3, [r7, #12]
}
 8001386:	4618      	mov	r0, r3
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <WM8994_SetProtocol>:
  *                  WM8994_PROTOCOL_R_JUSTIFIED, WM8994_PROTOCOL_L_JUSTIFIED, 
  *                  WM8994_PROTOCOL_I2S or WM8994_PROTOCOL_DSP
  * @retval Component status
  */
int32_t WM8994_SetProtocol(WM8994_Object_t *pObj, uint32_t Protocol)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b084      	sub	sp, #16
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
 8001396:	6039      	str	r1, [r7, #0]
  int32_t ret = WM8994_OK; 
 8001398:	2300      	movs	r3, #0
 800139a:	60fb      	str	r3, [r7, #12]
  
  if(wm8994_aif1_control1_fmt(&pObj->Ctx, (uint16_t)Protocol) != WM8994_OK)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	3318      	adds	r3, #24
 80013a0:	683a      	ldr	r2, [r7, #0]
 80013a2:	b292      	uxth	r2, r2
 80013a4:	4611      	mov	r1, r2
 80013a6:	4618      	mov	r0, r3
 80013a8:	f000 f9db 	bl	8001762 <wm8994_aif1_control1_fmt>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d002      	beq.n	80013b8 <WM8994_SetProtocol+0x2a>
  {
    ret = WM8994_ERROR;
 80013b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013b6:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;  
 80013b8:	68fb      	ldr	r3, [r7, #12]
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3710      	adds	r7, #16
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
	...

080013c4 <WM8994_SetFrequency>:
  * @param pObj pointer to component object
  * @param AudioFreq Audio frequency
  * @retval Component status
  */
int32_t WM8994_SetFrequency(WM8994_Object_t *pObj, uint32_t AudioFreq)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t tmp;
  
  switch (AudioFreq)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	4a55      	ldr	r2, [pc, #340]	; (8001528 <WM8994_SetFrequency+0x164>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d05d      	beq.n	8001492 <WM8994_SetFrequency+0xce>
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	4a53      	ldr	r2, [pc, #332]	; (8001528 <WM8994_SetFrequency+0x164>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	f200 8091 	bhi.w	8001502 <WM8994_SetFrequency+0x13e>
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	f64a 4244 	movw	r2, #44100	; 0xac44
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d07d      	beq.n	80014e6 <WM8994_SetFrequency+0x122>
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	f64a 4244 	movw	r2, #44100	; 0xac44
 80013f0:	4293      	cmp	r3, r2
 80013f2:	f200 8086 	bhi.w	8001502 <WM8994_SetFrequency+0x13e>
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80013fc:	d03b      	beq.n	8001476 <WM8994_SetFrequency+0xb2>
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8001404:	d87d      	bhi.n	8001502 <WM8994_SetFrequency+0x13e>
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	f245 6222 	movw	r2, #22050	; 0x5622
 800140c:	4293      	cmp	r3, r2
 800140e:	d05c      	beq.n	80014ca <WM8994_SetFrequency+0x106>
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	f245 6222 	movw	r2, #22050	; 0x5622
 8001416:	4293      	cmp	r3, r2
 8001418:	d873      	bhi.n	8001502 <WM8994_SetFrequency+0x13e>
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8001420:	d01b      	beq.n	800145a <WM8994_SetFrequency+0x96>
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8001428:	d86b      	bhi.n	8001502 <WM8994_SetFrequency+0x13e>
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8001430:	d005      	beq.n	800143e <WM8994_SetFrequency+0x7a>
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	f642 3211 	movw	r2, #11025	; 0x2b11
 8001438:	4293      	cmp	r3, r2
 800143a:	d038      	beq.n	80014ae <WM8994_SetFrequency+0xea>
 800143c:	e061      	b.n	8001502 <WM8994_SetFrequency+0x13e>
  {
  case  WM8994_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */
    tmp = 0x0003;
 800143e:	2303      	movs	r3, #3
 8001440:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	f103 0018 	add.w	r0, r3, #24
 8001448:	f107 020a 	add.w	r2, r7, #10
 800144c:	2302      	movs	r3, #2
 800144e:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001452:	f000 f93d 	bl	80016d0 <wm8994_write_reg>
 8001456:	60f8      	str	r0, [r7, #12]
    break;
 8001458:	e061      	b.n	800151e <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    tmp = 0x0033;
 800145a:	2333      	movs	r3, #51	; 0x33
 800145c:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	f103 0018 	add.w	r0, r3, #24
 8001464:	f107 020a 	add.w	r2, r7, #10
 8001468:	2302      	movs	r3, #2
 800146a:	f44f 7104 	mov.w	r1, #528	; 0x210
 800146e:	f000 f92f 	bl	80016d0 <wm8994_write_reg>
 8001472:	60f8      	str	r0, [r7, #12]
    break;
 8001474:	e053      	b.n	800151e <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */
    tmp = 0x0063;
 8001476:	2363      	movs	r3, #99	; 0x63
 8001478:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	f103 0018 	add.w	r0, r3, #24
 8001480:	f107 020a 	add.w	r2, r7, #10
 8001484:	2302      	movs	r3, #2
 8001486:	f44f 7104 	mov.w	r1, #528	; 0x210
 800148a:	f000 f921 	bl	80016d0 <wm8994_write_reg>
 800148e:	60f8      	str	r0, [r7, #12]
    break;
 8001490:	e045      	b.n	800151e <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */
    tmp = 0x00A3;
 8001492:	23a3      	movs	r3, #163	; 0xa3
 8001494:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	f103 0018 	add.w	r0, r3, #24
 800149c:	f107 020a 	add.w	r2, r7, #10
 80014a0:	2302      	movs	r3, #2
 80014a2:	f44f 7104 	mov.w	r1, #528	; 0x210
 80014a6:	f000 f913 	bl	80016d0 <wm8994_write_reg>
 80014aa:	60f8      	str	r0, [r7, #12]
    break;
 80014ac:	e037      	b.n	800151e <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    tmp = 0x0013;
 80014ae:	2313      	movs	r3, #19
 80014b0:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	f103 0018 	add.w	r0, r3, #24
 80014b8:	f107 020a 	add.w	r2, r7, #10
 80014bc:	2302      	movs	r3, #2
 80014be:	f44f 7104 	mov.w	r1, #528	; 0x210
 80014c2:	f000 f905 	bl	80016d0 <wm8994_write_reg>
 80014c6:	60f8      	str	r0, [r7, #12]
    break;
 80014c8:	e029      	b.n	800151e <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    tmp = 0x0043;
 80014ca:	2343      	movs	r3, #67	; 0x43
 80014cc:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f103 0018 	add.w	r0, r3, #24
 80014d4:	f107 020a 	add.w	r2, r7, #10
 80014d8:	2302      	movs	r3, #2
 80014da:	f44f 7104 	mov.w	r1, #528	; 0x210
 80014de:	f000 f8f7 	bl	80016d0 <wm8994_write_reg>
 80014e2:	60f8      	str	r0, [r7, #12]
    break;
 80014e4:	e01b      	b.n	800151e <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    tmp = 0x0073;
 80014e6:	2373      	movs	r3, #115	; 0x73
 80014e8:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f103 0018 	add.w	r0, r3, #24
 80014f0:	f107 020a 	add.w	r2, r7, #10
 80014f4:	2302      	movs	r3, #2
 80014f6:	f44f 7104 	mov.w	r1, #528	; 0x210
 80014fa:	f000 f8e9 	bl	80016d0 <wm8994_write_reg>
 80014fe:	60f8      	str	r0, [r7, #12]
    break; 
 8001500:	e00d      	b.n	800151e <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_48K:    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */
    tmp = 0x0083;
 8001502:	2383      	movs	r3, #131	; 0x83
 8001504:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f103 0018 	add.w	r0, r3, #24
 800150c:	f107 020a 	add.w	r2, r7, #10
 8001510:	2302      	movs	r3, #2
 8001512:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001516:	f000 f8db 	bl	80016d0 <wm8994_write_reg>
 800151a:	60f8      	str	r0, [r7, #12]
    break; 
 800151c:	bf00      	nop
  }
  
  return ret;
 800151e:	68fb      	ldr	r3, [r7, #12]
}
 8001520:	4618      	mov	r0, r3
 8001522:	3710      	adds	r7, #16
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	00017700 	.word	0x00017700

0800152c <WM8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param pObj pointer to component object 
  * @retval Component status if correct communication, else wrong communication
  */
int32_t WM8994_Reset(WM8994_Object_t *pObj)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  int32_t ret = WM8994_OK;
 8001534:	2300      	movs	r3, #0
 8001536:	60fb      	str	r3, [r7, #12]
  
  /* Reset Codec by writing in 0x0000 address register */
  if(wm8994_sw_reset_w(&pObj->Ctx, 0x0000) != WM8994_OK)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	3318      	adds	r3, #24
 800153c:	2100      	movs	r1, #0
 800153e:	4618      	mov	r0, r3
 8001540:	f000 f8ee 	bl	8001720 <wm8994_sw_reset_w>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d002      	beq.n	8001550 <WM8994_Reset+0x24>
  {
    ret = WM8994_ERROR;
 800154a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800154e:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 8001550:	68fb      	ldr	r3, [r7, #12]
}
 8001552:	4618      	mov	r0, r3
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
	...

0800155c <WM8994_RegisterBusIO>:
  * @brief  Function
  * @param  Component object pointer
  * @retval error status
  */
int32_t WM8994_RegisterBusIO (WM8994_Object_t *pObj, WM8994_IO_t *pIO)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  if (pObj == NULL)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d103      	bne.n	8001574 <WM8994_RegisterBusIO+0x18>
  {
    ret = WM8994_ERROR;
 800156c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	e02c      	b.n	80015ce <WM8994_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685a      	ldr	r2, [r3, #4]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	891a      	ldrh	r2, [r3, #8]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	68da      	ldr	r2, [r3, #12]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	691a      	ldr	r2, [r3, #16]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	695a      	ldr	r2, [r3, #20]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	615a      	str	r2, [r3, #20]
    
    pObj->Ctx.ReadReg  = WM8994_ReadRegWrap;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	4a0c      	ldr	r2, [pc, #48]	; (80015d8 <WM8994_RegisterBusIO+0x7c>)
 80015a8:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WM8994_WriteRegWrap;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a0b      	ldr	r2, [pc, #44]	; (80015dc <WM8994_RegisterBusIO+0x80>)
 80015ae:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	621a      	str	r2, [r3, #32]
    
    if(pObj->IO.Init != NULL)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d004      	beq.n	80015c8 <WM8994_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4798      	blx	r3
 80015c4:	60f8      	str	r0, [r7, #12]
 80015c6:	e002      	b.n	80015ce <WM8994_RegisterBusIO+0x72>
    }
    else
    {
      ret = WM8994_ERROR;
 80015c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015cc:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return ret;
 80015ce:	68fb      	ldr	r3, [r7, #12]
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3710      	adds	r7, #16
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	08001615 	.word	0x08001615
 80015dc:	08001647 	.word	0x08001647

080015e0 <WM8994_Delay>:
  * @param pObj pointer to component object
  * @param Delay: specifies the delay time length, in milliseconds
  * @retval Component status
  */
static int32_t WM8994_Delay(WM8994_Object_t *pObj, uint32_t Delay)
{  
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  tickstart = pObj->IO.GetTick();
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	695b      	ldr	r3, [r3, #20]
 80015ee:	4798      	blx	r3
 80015f0:	4603      	mov	r3, r0
 80015f2:	60fb      	str	r3, [r7, #12]
  while((pObj->IO.GetTick() - tickstart) < Delay)
 80015f4:	bf00      	nop
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	695b      	ldr	r3, [r3, #20]
 80015fa:	4798      	blx	r3
 80015fc:	4603      	mov	r3, r0
 80015fe:	461a      	mov	r2, r3
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	683a      	ldr	r2, [r7, #0]
 8001606:	429a      	cmp	r2, r3
 8001608:	d8f5      	bhi.n	80015f6 <WM8994_Delay+0x16>
  {
  }
  return WM8994_OK;
 800160a:	2300      	movs	r3, #0
}
 800160c:	4618      	mov	r0, r3
 800160e:	3710      	adds	r7, #16
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <WM8994_ReadRegWrap>:
  * @param  pData   The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t WM8994_ReadRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8001614:	b590      	push	{r4, r7, lr}
 8001616:	b087      	sub	sp, #28
 8001618:	af00      	add	r7, sp, #0
 800161a:	60f8      	str	r0, [r7, #12]
 800161c:	607a      	str	r2, [r7, #4]
 800161e:	461a      	mov	r2, r3
 8001620:	460b      	mov	r3, r1
 8001622:	817b      	strh	r3, [r7, #10]
 8001624:	4613      	mov	r3, r2
 8001626:	813b      	strh	r3, [r7, #8]
  WM8994_Object_t *pObj = (WM8994_Object_t *)handle;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	691c      	ldr	r4, [r3, #16]
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	8918      	ldrh	r0, [r3, #8]
 8001634:	893b      	ldrh	r3, [r7, #8]
 8001636:	8979      	ldrh	r1, [r7, #10]
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	47a0      	blx	r4
 800163c:	4603      	mov	r3, r0
}
 800163e:	4618      	mov	r0, r3
 8001640:	371c      	adds	r7, #28
 8001642:	46bd      	mov	sp, r7
 8001644:	bd90      	pop	{r4, r7, pc}

08001646 <WM8994_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval error status
  */
static int32_t WM8994_WriteRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8001646:	b590      	push	{r4, r7, lr}
 8001648:	b087      	sub	sp, #28
 800164a:	af00      	add	r7, sp, #0
 800164c:	60f8      	str	r0, [r7, #12]
 800164e:	607a      	str	r2, [r7, #4]
 8001650:	461a      	mov	r2, r3
 8001652:	460b      	mov	r3, r1
 8001654:	817b      	strh	r3, [r7, #10]
 8001656:	4613      	mov	r3, r2
 8001658:	813b      	strh	r3, [r7, #8]
  WM8994_Object_t *pObj = (WM8994_Object_t *)handle;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	68dc      	ldr	r4, [r3, #12]
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	8918      	ldrh	r0, [r3, #8]
 8001666:	893b      	ldrh	r3, [r7, #8]
 8001668:	8979      	ldrh	r1, [r7, #10]
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	47a0      	blx	r4
 800166e:	4603      	mov	r3, r0
}
 8001670:	4618      	mov	r0, r3
 8001672:	371c      	adds	r7, #28
 8001674:	46bd      	mov	sp, r7
 8001676:	bd90      	pop	{r4, r7, pc}

08001678 <wm8994_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : data Read
*******************************************************************************/
int32_t wm8994_read_reg(wm8994_ctx_t *ctx, uint16_t reg, uint16_t* data, uint16_t length)
{
 8001678:	b590      	push	{r4, r7, lr}
 800167a:	b087      	sub	sp, #28
 800167c:	af00      	add	r7, sp, #0
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	607a      	str	r2, [r7, #4]
 8001682:	461a      	mov	r2, r3
 8001684:	460b      	mov	r3, r1
 8001686:	817b      	strh	r3, [r7, #10]
 8001688:	4613      	mov	r3, r2
 800168a:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  uint16_t tmp;
  
  ret = ctx->ReadReg(ctx->handle, reg, (uint8_t *)data, length);
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	685c      	ldr	r4, [r3, #4]
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	6898      	ldr	r0, [r3, #8]
 8001694:	893b      	ldrh	r3, [r7, #8]
 8001696:	8979      	ldrh	r1, [r7, #10]
 8001698:	687a      	ldr	r2, [r7, #4]
 800169a:	47a0      	blx	r4
 800169c:	6178      	str	r0, [r7, #20]
  
  if(ret >= 0)
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	db10      	blt.n	80016c6 <wm8994_read_reg+0x4e>
  {
    tmp = ((uint16_t)(*data >> 8) & 0x00FF);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	881b      	ldrh	r3, [r3, #0]
 80016a8:	0a1b      	lsrs	r3, r3, #8
 80016aa:	827b      	strh	r3, [r7, #18]
    tmp |= ((uint16_t)(*data << 8) & 0xFF00);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	881b      	ldrh	r3, [r3, #0]
 80016b0:	021b      	lsls	r3, r3, #8
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	b21a      	sxth	r2, r3
 80016b6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	b21b      	sxth	r3, r3
 80016be:	827b      	strh	r3, [r7, #18]
    *data = tmp;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	8a7a      	ldrh	r2, [r7, #18]
 80016c4:	801a      	strh	r2, [r3, #0]
  }
  return ret;
 80016c6:	697b      	ldr	r3, [r7, #20]
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	371c      	adds	r7, #28
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd90      	pop	{r4, r7, pc}

080016d0 <wm8994_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t wm8994_write_reg(wm8994_ctx_t *ctx, uint16_t reg, uint16_t *data, uint16_t length)
{
 80016d0:	b590      	push	{r4, r7, lr}
 80016d2:	b087      	sub	sp, #28
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	607a      	str	r2, [r7, #4]
 80016da:	461a      	mov	r2, r3
 80016dc:	460b      	mov	r3, r1
 80016de:	817b      	strh	r3, [r7, #10]
 80016e0:	4613      	mov	r3, r2
 80016e2:	813b      	strh	r3, [r7, #8]
  uint16_t tmp;
  tmp = ((uint16_t)(*data >> 8) & 0x00FF);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	881b      	ldrh	r3, [r3, #0]
 80016e8:	0a1b      	lsrs	r3, r3, #8
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	82fb      	strh	r3, [r7, #22]
  tmp |= ((uint16_t)(*data << 8) & 0xFF00);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	881b      	ldrh	r3, [r3, #0]
 80016f2:	021b      	lsls	r3, r3, #8
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	b21a      	sxth	r2, r3
 80016f8:	8afb      	ldrh	r3, [r7, #22]
 80016fa:	b21b      	sxth	r3, r3
 80016fc:	4313      	orrs	r3, r2
 80016fe:	b21b      	sxth	r3, r3
 8001700:	b29b      	uxth	r3, r3
 8001702:	82fb      	strh	r3, [r7, #22]
  
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)&tmp, length);
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681c      	ldr	r4, [r3, #0]
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	6898      	ldr	r0, [r3, #8]
 800170c:	893b      	ldrh	r3, [r7, #8]
 800170e:	f107 0216 	add.w	r2, r7, #22
 8001712:	8979      	ldrh	r1, [r7, #10]
 8001714:	47a0      	blx	r4
 8001716:	4603      	mov	r3, r0
}
 8001718:	4618      	mov	r0, r3
 800171a:	371c      	adds	r7, #28
 800171c:	46bd      	mov	sp, r7
 800171e:	bd90      	pop	{r4, r7, pc}

08001720 <wm8994_sw_reset_w>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_sw_reset_w(wm8994_ctx_t *ctx, uint16_t value)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	460b      	mov	r3, r1
 800172a:	807b      	strh	r3, [r7, #2]
  return wm8994_write_reg(ctx, WM8994_SW_RESET, &value, 2);
 800172c:	1cba      	adds	r2, r7, #2
 800172e:	2302      	movs	r3, #2
 8001730:	2100      	movs	r1, #0
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f7ff ffcc 	bl	80016d0 <wm8994_write_reg>
 8001738:	4603      	mov	r3, r0
}
 800173a:	4618      	mov	r0, r3
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <wm8994_sw_reset_r>:
* Input          : Pointer to uint8_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_sw_reset_r(wm8994_ctx_t *ctx, uint16_t *value)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	b082      	sub	sp, #8
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
 800174a:	6039      	str	r1, [r7, #0]
  return wm8994_read_reg(ctx, WM8994_SW_RESET, value, 2);
 800174c:	2302      	movs	r3, #2
 800174e:	683a      	ldr	r2, [r7, #0]
 8001750:	2100      	movs	r1, #0
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f7ff ff90 	bl	8001678 <wm8994_read_reg>
 8001758:	4603      	mov	r3, r0
}
 800175a:	4618      	mov	r0, r3
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <wm8994_aif1_control1_fmt>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_control1_fmt(wm8994_ctx_t *ctx, uint16_t value)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	b084      	sub	sp, #16
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
 800176a:	460b      	mov	r3, r1
 800176c:	807b      	strh	r3, [r7, #2]
  int32_t ret;
  uint16_t tmp = 0;
 800176e:	2300      	movs	r3, #0
 8001770:	817b      	strh	r3, [r7, #10]
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 8001772:	f107 020a 	add.w	r2, r7, #10
 8001776:	2302      	movs	r3, #2
 8001778:	f44f 7140 	mov.w	r1, #768	; 0x300
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f7ff ff7b 	bl	8001678 <wm8994_read_reg>
 8001782:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d116      	bne.n	80017b8 <wm8994_aif1_control1_fmt+0x56>
  {
    tmp &= ~WM8994_AIF1_CONTROL1_FMT_MASK;
 800178a:	897b      	ldrh	r3, [r7, #10]
 800178c:	f023 0318 	bic.w	r3, r3, #24
 8001790:	b29b      	uxth	r3, r3
 8001792:	817b      	strh	r3, [r7, #10]
    tmp |= value << WM8994_AIF1_CONTROL1_FMT_POSITION;
 8001794:	887b      	ldrh	r3, [r7, #2]
 8001796:	00db      	lsls	r3, r3, #3
 8001798:	b21a      	sxth	r2, r3
 800179a:	897b      	ldrh	r3, [r7, #10]
 800179c:	b21b      	sxth	r3, r3
 800179e:	4313      	orrs	r3, r2
 80017a0:	b21b      	sxth	r3, r3
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	817b      	strh	r3, [r7, #10]
    
    ret = wm8994_write_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 80017a6:	f107 020a 	add.w	r2, r7, #10
 80017aa:	2302      	movs	r3, #2
 80017ac:	f44f 7140 	mov.w	r1, #768	; 0x300
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f7ff ff8d 	bl	80016d0 <wm8994_write_reg>
 80017b6:	60f8      	str	r0, [r7, #12]
  }
  
  return ret;
 80017b8:	68fb      	ldr	r3, [r7, #12]
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3710      	adds	r7, #16
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <wm8994_aif1_control1_wl>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_control1_wl(wm8994_ctx_t *ctx, uint16_t value)
{
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b084      	sub	sp, #16
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
 80017ca:	460b      	mov	r3, r1
 80017cc:	807b      	strh	r3, [r7, #2]
  int32_t ret;
  uint16_t tmp = 0;
 80017ce:	2300      	movs	r3, #0
 80017d0:	817b      	strh	r3, [r7, #10]
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 80017d2:	f107 020a 	add.w	r2, r7, #10
 80017d6:	2302      	movs	r3, #2
 80017d8:	f44f 7140 	mov.w	r1, #768	; 0x300
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f7ff ff4b 	bl	8001678 <wm8994_read_reg>
 80017e2:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d116      	bne.n	8001818 <wm8994_aif1_control1_wl+0x56>
  {
    tmp &= ~WM8994_AIF1_CONTROL1_WL_MASK;
 80017ea:	897b      	ldrh	r3, [r7, #10]
 80017ec:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80017f0:	b29b      	uxth	r3, r3
 80017f2:	817b      	strh	r3, [r7, #10]
    tmp |= value << WM8994_AIF1_CONTROL1_WL_POSITION;
 80017f4:	887b      	ldrh	r3, [r7, #2]
 80017f6:	015b      	lsls	r3, r3, #5
 80017f8:	b21a      	sxth	r2, r3
 80017fa:	897b      	ldrh	r3, [r7, #10]
 80017fc:	b21b      	sxth	r3, r3
 80017fe:	4313      	orrs	r3, r2
 8001800:	b21b      	sxth	r3, r3
 8001802:	b29b      	uxth	r3, r3
 8001804:	817b      	strh	r3, [r7, #10]
    
    ret = wm8994_write_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 8001806:	f107 020a 	add.w	r2, r7, #10
 800180a:	2302      	movs	r3, #2
 800180c:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f7ff ff5d 	bl	80016d0 <wm8994_write_reg>
 8001816:	60f8      	str	r0, [r7, #12]
  }
  
  return ret;
 8001818:	68fb      	ldr	r3, [r7, #12]
}
 800181a:	4618      	mov	r0, r3
 800181c:	3710      	adds	r7, #16
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <wm8994_aif1_control1_adcr_src>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_control1_adcr_src(wm8994_ctx_t *ctx, uint16_t value)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b084      	sub	sp, #16
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
 800182a:	460b      	mov	r3, r1
 800182c:	807b      	strh	r3, [r7, #2]
  int32_t ret;
  uint16_t tmp = 0;
 800182e:	2300      	movs	r3, #0
 8001830:	817b      	strh	r3, [r7, #10]
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 8001832:	f107 020a 	add.w	r2, r7, #10
 8001836:	2302      	movs	r3, #2
 8001838:	f44f 7140 	mov.w	r1, #768	; 0x300
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f7ff ff1b 	bl	8001678 <wm8994_read_reg>
 8001842:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d116      	bne.n	8001878 <wm8994_aif1_control1_adcr_src+0x56>
  {
    tmp &= ~WM8994_AIF1_CONTROL1_ADCR_SRC_MASK;
 800184a:	897b      	ldrh	r3, [r7, #10]
 800184c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001850:	b29b      	uxth	r3, r3
 8001852:	817b      	strh	r3, [r7, #10]
    tmp |= value << WM8994_AIF1_CONTROL1_ADCR_SRC_POSITION;
 8001854:	887b      	ldrh	r3, [r7, #2]
 8001856:	039b      	lsls	r3, r3, #14
 8001858:	b21a      	sxth	r2, r3
 800185a:	897b      	ldrh	r3, [r7, #10]
 800185c:	b21b      	sxth	r3, r3
 800185e:	4313      	orrs	r3, r2
 8001860:	b21b      	sxth	r3, r3
 8001862:	b29b      	uxth	r3, r3
 8001864:	817b      	strh	r3, [r7, #10]
    
    ret = wm8994_write_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 8001866:	f107 020a 	add.w	r2, r7, #10
 800186a:	2302      	movs	r3, #2
 800186c:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f7ff ff2d 	bl	80016d0 <wm8994_write_reg>
 8001876:	60f8      	str	r0, [r7, #12]
  }
  
  return ret;
 8001878:	68fb      	ldr	r3, [r7, #12]
}
 800187a:	4618      	mov	r0, r3
 800187c:	3710      	adds	r7, #16
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
	...

08001884 <BSP_LED_Init>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b08a      	sub	sp, #40	; 0x28
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800188e:	2300      	movs	r3, #0
 8001890:	627b      	str	r3, [r7, #36]	; 0x24

  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO_LED clock */
  if (Led == LED1)
 8001892:	79fb      	ldrb	r3, [r7, #7]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d10f      	bne.n	80018b8 <BSP_LED_Init+0x34>
  {
    LED1_GPIO_CLK_ENABLE();
 8001898:	4b26      	ldr	r3, [pc, #152]	; (8001934 <BSP_LED_Init+0xb0>)
 800189a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800189e:	4a25      	ldr	r2, [pc, #148]	; (8001934 <BSP_LED_Init+0xb0>)
 80018a0:	f043 0304 	orr.w	r3, r3, #4
 80018a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018a8:	4b22      	ldr	r3, [pc, #136]	; (8001934 <BSP_LED_Init+0xb0>)
 80018aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018ae:	f003 0304 	and.w	r3, r3, #4
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	e015      	b.n	80018e4 <BSP_LED_Init+0x60>
  }
  else if (Led == LED2)
 80018b8:	79fb      	ldrb	r3, [r7, #7]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d10f      	bne.n	80018de <BSP_LED_Init+0x5a>
  {

    LED2_GPIO_CLK_ENABLE();
 80018be:	4b1d      	ldr	r3, [pc, #116]	; (8001934 <BSP_LED_Init+0xb0>)
 80018c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018c4:	4a1b      	ldr	r2, [pc, #108]	; (8001934 <BSP_LED_Init+0xb0>)
 80018c6:	f043 0304 	orr.w	r3, r3, #4
 80018ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018ce:	4b19      	ldr	r3, [pc, #100]	; (8001934 <BSP_LED_Init+0xb0>)
 80018d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018d4:	f003 0304 	and.w	r3, r3, #4
 80018d8:	60bb      	str	r3, [r7, #8]
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	e002      	b.n	80018e4 <BSP_LED_Init+0x60>
  }
  else
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80018de:	f06f 0301 	mvn.w	r3, #1
 80018e2:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 80018e4:	2301      	movs	r3, #1
 80018e6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80018e8:	2301      	movs	r3, #1
 80018ea:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80018ec:	2302      	movs	r3, #2
 80018ee:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Pin = LED_PIN [Led];
 80018f0:	79fb      	ldrb	r3, [r7, #7]
 80018f2:	4a11      	ldr	r2, [pc, #68]	; (8001938 <BSP_LED_Init+0xb4>)
 80018f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018f8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_PORT [Led], &gpio_init_structure);
 80018fa:	79fb      	ldrb	r3, [r7, #7]
 80018fc:	4a0f      	ldr	r2, [pc, #60]	; (800193c <BSP_LED_Init+0xb8>)
 80018fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001902:	f107 0210 	add.w	r2, r7, #16
 8001906:	4611      	mov	r1, r2
 8001908:	4618      	mov	r0, r3
 800190a:	f003 f99d 	bl	8004c48 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN[Led], GPIO_PIN_SET);
 800190e:	79fb      	ldrb	r3, [r7, #7]
 8001910:	4a0a      	ldr	r2, [pc, #40]	; (800193c <BSP_LED_Init+0xb8>)
 8001912:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001916:	79fb      	ldrb	r3, [r7, #7]
 8001918:	4a07      	ldr	r2, [pc, #28]	; (8001938 <BSP_LED_Init+0xb4>)
 800191a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800191e:	b29b      	uxth	r3, r3
 8001920:	2201      	movs	r2, #1
 8001922:	4619      	mov	r1, r3
 8001924:	f003 fc3a 	bl	800519c <HAL_GPIO_WritePin>

  return ret;
 8001928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800192a:	4618      	mov	r0, r3
 800192c:	3728      	adds	r7, #40	; 0x28
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	58024400 	.word	0x58024400
 8001938:	0800d728 	.word	0x0800d728
 800193c:	24000404 	.word	0x24000404

08001940 <BSP_LED_On>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	4603      	mov	r3, r0
 8001948:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800194a:	2300      	movs	r3, #0
 800194c:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_RESET);
 800194e:	79fb      	ldrb	r3, [r7, #7]
 8001950:	4a08      	ldr	r2, [pc, #32]	; (8001974 <BSP_LED_On+0x34>)
 8001952:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001956:	79fb      	ldrb	r3, [r7, #7]
 8001958:	4a07      	ldr	r2, [pc, #28]	; (8001978 <BSP_LED_On+0x38>)
 800195a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800195e:	b29b      	uxth	r3, r3
 8001960:	2200      	movs	r2, #0
 8001962:	4619      	mov	r1, r3
 8001964:	f003 fc1a 	bl	800519c <HAL_GPIO_WritePin>
  return ret;
 8001968:	68fb      	ldr	r3, [r7, #12]
}
 800196a:	4618      	mov	r0, r3
 800196c:	3710      	adds	r7, #16
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	24000404 	.word	0x24000404
 8001978:	0800d728 	.word	0x0800d728

0800197c <BSP_LED_Off>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	4603      	mov	r3, r0
 8001984:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001986:	2300      	movs	r3, #0
 8001988:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_SET);
 800198a:	79fb      	ldrb	r3, [r7, #7]
 800198c:	4a08      	ldr	r2, [pc, #32]	; (80019b0 <BSP_LED_Off+0x34>)
 800198e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001992:	79fb      	ldrb	r3, [r7, #7]
 8001994:	4a07      	ldr	r2, [pc, #28]	; (80019b4 <BSP_LED_Off+0x38>)
 8001996:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800199a:	b29b      	uxth	r3, r3
 800199c:	2201      	movs	r2, #1
 800199e:	4619      	mov	r1, r3
 80019a0:	f003 fbfc 	bl	800519c <HAL_GPIO_WritePin>
  return ret;
 80019a4:	68fb      	ldr	r3, [r7, #12]
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3710      	adds	r7, #16
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	24000404 	.word	0x24000404
 80019b4:	0800d728 	.word	0x0800d728

080019b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019be:	2003      	movs	r0, #3
 80019c0:	f000 f95c 	bl	8001c7c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80019c4:	f005 fe66 	bl	8007694 <HAL_RCC_GetSysClockFreq>
 80019c8:	4602      	mov	r2, r0
 80019ca:	4b15      	ldr	r3, [pc, #84]	; (8001a20 <HAL_Init+0x68>)
 80019cc:	699b      	ldr	r3, [r3, #24]
 80019ce:	0a1b      	lsrs	r3, r3, #8
 80019d0:	f003 030f 	and.w	r3, r3, #15
 80019d4:	4913      	ldr	r1, [pc, #76]	; (8001a24 <HAL_Init+0x6c>)
 80019d6:	5ccb      	ldrb	r3, [r1, r3]
 80019d8:	f003 031f 	and.w	r3, r3, #31
 80019dc:	fa22 f303 	lsr.w	r3, r2, r3
 80019e0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80019e2:	4b0f      	ldr	r3, [pc, #60]	; (8001a20 <HAL_Init+0x68>)
 80019e4:	699b      	ldr	r3, [r3, #24]
 80019e6:	f003 030f 	and.w	r3, r3, #15
 80019ea:	4a0e      	ldr	r2, [pc, #56]	; (8001a24 <HAL_Init+0x6c>)
 80019ec:	5cd3      	ldrb	r3, [r2, r3]
 80019ee:	f003 031f 	and.w	r3, r3, #31
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	fa22 f303 	lsr.w	r3, r2, r3
 80019f8:	4a0b      	ldr	r2, [pc, #44]	; (8001a28 <HAL_Init+0x70>)
 80019fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80019fc:	4a0b      	ldr	r2, [pc, #44]	; (8001a2c <HAL_Init+0x74>)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a02:	2000      	movs	r0, #0
 8001a04:	f000 f814 	bl	8001a30 <HAL_InitTick>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e002      	b.n	8001a18 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001a12:	f009 f9fb 	bl	800ae0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a16:	2300      	movs	r3, #0
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3708      	adds	r7, #8
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	58024400 	.word	0x58024400
 8001a24:	0800d738 	.word	0x0800d738
 8001a28:	24000420 	.word	0x24000420
 8001a2c:	2400041c 	.word	0x2400041c

08001a30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001a38:	4b15      	ldr	r3, [pc, #84]	; (8001a90 <HAL_InitTick+0x60>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d101      	bne.n	8001a44 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e021      	b.n	8001a88 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001a44:	4b13      	ldr	r3, [pc, #76]	; (8001a94 <HAL_InitTick+0x64>)
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	4b11      	ldr	r3, [pc, #68]	; (8001a90 <HAL_InitTick+0x60>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a52:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f000 f941 	bl	8001ce2 <HAL_SYSTICK_Config>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e00e      	b.n	8001a88 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2b0f      	cmp	r3, #15
 8001a6e:	d80a      	bhi.n	8001a86 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a70:	2200      	movs	r2, #0
 8001a72:	6879      	ldr	r1, [r7, #4]
 8001a74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a78:	f000 f90b 	bl	8001c92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a7c:	4a06      	ldr	r2, [pc, #24]	; (8001a98 <HAL_InitTick+0x68>)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a82:	2300      	movs	r3, #0
 8001a84:	e000      	b.n	8001a88 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3708      	adds	r7, #8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	24000410 	.word	0x24000410
 8001a94:	2400041c 	.word	0x2400041c
 8001a98:	2400040c 	.word	0x2400040c

08001a9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001aa0:	4b06      	ldr	r3, [pc, #24]	; (8001abc <HAL_IncTick+0x20>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	4b06      	ldr	r3, [pc, #24]	; (8001ac0 <HAL_IncTick+0x24>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4413      	add	r3, r2
 8001aac:	4a04      	ldr	r2, [pc, #16]	; (8001ac0 <HAL_IncTick+0x24>)
 8001aae:	6013      	str	r3, [r2, #0]
}
 8001ab0:	bf00      	nop
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	24000410 	.word	0x24000410
 8001ac0:	24000530 	.word	0x24000530

08001ac4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ac8:	4b03      	ldr	r3, [pc, #12]	; (8001ad8 <HAL_GetTick+0x14>)
 8001aca:	681b      	ldr	r3, [r3, #0]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	24000530 	.word	0x24000530

08001adc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f003 0307 	and.w	r3, r3, #7
 8001aea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001aec:	4b0b      	ldr	r3, [pc, #44]	; (8001b1c <__NVIC_SetPriorityGrouping+0x40>)
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001af2:	68ba      	ldr	r2, [r7, #8]
 8001af4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001af8:	4013      	ands	r3, r2
 8001afa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001b04:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <__NVIC_SetPriorityGrouping+0x44>)
 8001b06:	4313      	orrs	r3, r2
 8001b08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b0a:	4a04      	ldr	r2, [pc, #16]	; (8001b1c <__NVIC_SetPriorityGrouping+0x40>)
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	60d3      	str	r3, [r2, #12]
}
 8001b10:	bf00      	nop
 8001b12:	3714      	adds	r7, #20
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr
 8001b1c:	e000ed00 	.word	0xe000ed00
 8001b20:	05fa0000 	.word	0x05fa0000

08001b24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b28:	4b04      	ldr	r3, [pc, #16]	; (8001b3c <__NVIC_GetPriorityGrouping+0x18>)
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	0a1b      	lsrs	r3, r3, #8
 8001b2e:	f003 0307 	and.w	r3, r3, #7
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr
 8001b3c:	e000ed00 	.word	0xe000ed00

08001b40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	4603      	mov	r3, r0
 8001b48:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	db0b      	blt.n	8001b6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b52:	88fb      	ldrh	r3, [r7, #6]
 8001b54:	f003 021f 	and.w	r2, r3, #31
 8001b58:	4907      	ldr	r1, [pc, #28]	; (8001b78 <__NVIC_EnableIRQ+0x38>)
 8001b5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b5e:	095b      	lsrs	r3, r3, #5
 8001b60:	2001      	movs	r0, #1
 8001b62:	fa00 f202 	lsl.w	r2, r0, r2
 8001b66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b6a:	bf00      	nop
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	e000e100 	.word	0xe000e100

08001b7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	4603      	mov	r3, r0
 8001b84:	6039      	str	r1, [r7, #0]
 8001b86:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	db0a      	blt.n	8001ba6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	b2da      	uxtb	r2, r3
 8001b94:	490c      	ldr	r1, [pc, #48]	; (8001bc8 <__NVIC_SetPriority+0x4c>)
 8001b96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b9a:	0112      	lsls	r2, r2, #4
 8001b9c:	b2d2      	uxtb	r2, r2
 8001b9e:	440b      	add	r3, r1
 8001ba0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ba4:	e00a      	b.n	8001bbc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	b2da      	uxtb	r2, r3
 8001baa:	4908      	ldr	r1, [pc, #32]	; (8001bcc <__NVIC_SetPriority+0x50>)
 8001bac:	88fb      	ldrh	r3, [r7, #6]
 8001bae:	f003 030f 	and.w	r3, r3, #15
 8001bb2:	3b04      	subs	r3, #4
 8001bb4:	0112      	lsls	r2, r2, #4
 8001bb6:	b2d2      	uxtb	r2, r2
 8001bb8:	440b      	add	r3, r1
 8001bba:	761a      	strb	r2, [r3, #24]
}
 8001bbc:	bf00      	nop
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr
 8001bc8:	e000e100 	.word	0xe000e100
 8001bcc:	e000ed00 	.word	0xe000ed00

08001bd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b089      	sub	sp, #36	; 0x24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f003 0307 	and.w	r3, r3, #7
 8001be2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	f1c3 0307 	rsb	r3, r3, #7
 8001bea:	2b04      	cmp	r3, #4
 8001bec:	bf28      	it	cs
 8001bee:	2304      	movcs	r3, #4
 8001bf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	3304      	adds	r3, #4
 8001bf6:	2b06      	cmp	r3, #6
 8001bf8:	d902      	bls.n	8001c00 <NVIC_EncodePriority+0x30>
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	3b03      	subs	r3, #3
 8001bfe:	e000      	b.n	8001c02 <NVIC_EncodePriority+0x32>
 8001c00:	2300      	movs	r3, #0
 8001c02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	43da      	mvns	r2, r3
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	401a      	ands	r2, r3
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c18:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c22:	43d9      	mvns	r1, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c28:	4313      	orrs	r3, r2
         );
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3724      	adds	r7, #36	; 0x24
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
	...

08001c38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	3b01      	subs	r3, #1
 8001c44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c48:	d301      	bcc.n	8001c4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e00f      	b.n	8001c6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c4e:	4a0a      	ldr	r2, [pc, #40]	; (8001c78 <SysTick_Config+0x40>)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	3b01      	subs	r3, #1
 8001c54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c56:	210f      	movs	r1, #15
 8001c58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c5c:	f7ff ff8e 	bl	8001b7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c60:	4b05      	ldr	r3, [pc, #20]	; (8001c78 <SysTick_Config+0x40>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c66:	4b04      	ldr	r3, [pc, #16]	; (8001c78 <SysTick_Config+0x40>)
 8001c68:	2207      	movs	r2, #7
 8001c6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	e000e010 	.word	0xe000e010

08001c7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f7ff ff29 	bl	8001adc <__NVIC_SetPriorityGrouping>
}
 8001c8a:	bf00      	nop
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b086      	sub	sp, #24
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	4603      	mov	r3, r0
 8001c9a:	60b9      	str	r1, [r7, #8]
 8001c9c:	607a      	str	r2, [r7, #4]
 8001c9e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ca0:	f7ff ff40 	bl	8001b24 <__NVIC_GetPriorityGrouping>
 8001ca4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	68b9      	ldr	r1, [r7, #8]
 8001caa:	6978      	ldr	r0, [r7, #20]
 8001cac:	f7ff ff90 	bl	8001bd0 <NVIC_EncodePriority>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001cb6:	4611      	mov	r1, r2
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff ff5f 	bl	8001b7c <__NVIC_SetPriority>
}
 8001cbe:	bf00      	nop
 8001cc0:	3718      	adds	r7, #24
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b082      	sub	sp, #8
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	4603      	mov	r3, r0
 8001cce:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cd0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7ff ff33 	bl	8001b40 <__NVIC_EnableIRQ>
}
 8001cda:	bf00      	nop
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b082      	sub	sp, #8
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f7ff ffa4 	bl	8001c38 <SysTick_Config>
 8001cf0:	4603      	mov	r3, r0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
	...

08001cfc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d101      	bne.n	8001d0e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e054      	b.n	8001db8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	7f5b      	ldrb	r3, [r3, #29]
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d105      	bne.n	8001d24 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f009 f88e 	bl	800ae40 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2202      	movs	r2, #2
 8001d28:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	791b      	ldrb	r3, [r3, #4]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d10c      	bne.n	8001d4c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a22      	ldr	r2, [pc, #136]	; (8001dc0 <HAL_CRC_Init+0xc4>)
 8001d38:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	689a      	ldr	r2, [r3, #8]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f022 0218 	bic.w	r2, r2, #24
 8001d48:	609a      	str	r2, [r3, #8]
 8001d4a:	e00c      	b.n	8001d66 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6899      	ldr	r1, [r3, #8]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	461a      	mov	r2, r3
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 f834 	bl	8001dc4 <HAL_CRCEx_Polynomial_Set>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e028      	b.n	8001db8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	795b      	ldrb	r3, [r3, #5]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d105      	bne.n	8001d7a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d76:	611a      	str	r2, [r3, #16]
 8001d78:	e004      	b.n	8001d84 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	6912      	ldr	r2, [r2, #16]
 8001d82:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	695a      	ldr	r2, [r3, #20]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	430a      	orrs	r2, r1
 8001d98:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	699a      	ldr	r2, [r3, #24]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	430a      	orrs	r2, r1
 8001dae:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001db6:	2300      	movs	r3, #0
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3708      	adds	r7, #8
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	04c11db7 	.word	0x04c11db7

08001dc4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b087      	sub	sp, #28
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	60f8      	str	r0, [r7, #12]
 8001dcc:	60b9      	str	r1, [r7, #8]
 8001dce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001dd4:	231f      	movs	r3, #31
 8001dd6:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001dd8:	bf00      	nop
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	1e5a      	subs	r2, r3, #1
 8001dde:	613a      	str	r2, [r7, #16]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d009      	beq.n	8001df8 <HAL_CRCEx_Polynomial_Set+0x34>
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	f003 031f 	and.w	r3, r3, #31
 8001dea:	68ba      	ldr	r2, [r7, #8]
 8001dec:	fa22 f303 	lsr.w	r3, r2, r3
 8001df0:	f003 0301 	and.w	r3, r3, #1
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d0f0      	beq.n	8001dda <HAL_CRCEx_Polynomial_Set+0x16>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2b18      	cmp	r3, #24
 8001dfc:	d846      	bhi.n	8001e8c <HAL_CRCEx_Polynomial_Set+0xc8>
 8001dfe:	a201      	add	r2, pc, #4	; (adr r2, 8001e04 <HAL_CRCEx_Polynomial_Set+0x40>)
 8001e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e04:	08001e93 	.word	0x08001e93
 8001e08:	08001e8d 	.word	0x08001e8d
 8001e0c:	08001e8d 	.word	0x08001e8d
 8001e10:	08001e8d 	.word	0x08001e8d
 8001e14:	08001e8d 	.word	0x08001e8d
 8001e18:	08001e8d 	.word	0x08001e8d
 8001e1c:	08001e8d 	.word	0x08001e8d
 8001e20:	08001e8d 	.word	0x08001e8d
 8001e24:	08001e81 	.word	0x08001e81
 8001e28:	08001e8d 	.word	0x08001e8d
 8001e2c:	08001e8d 	.word	0x08001e8d
 8001e30:	08001e8d 	.word	0x08001e8d
 8001e34:	08001e8d 	.word	0x08001e8d
 8001e38:	08001e8d 	.word	0x08001e8d
 8001e3c:	08001e8d 	.word	0x08001e8d
 8001e40:	08001e8d 	.word	0x08001e8d
 8001e44:	08001e75 	.word	0x08001e75
 8001e48:	08001e8d 	.word	0x08001e8d
 8001e4c:	08001e8d 	.word	0x08001e8d
 8001e50:	08001e8d 	.word	0x08001e8d
 8001e54:	08001e8d 	.word	0x08001e8d
 8001e58:	08001e8d 	.word	0x08001e8d
 8001e5c:	08001e8d 	.word	0x08001e8d
 8001e60:	08001e8d 	.word	0x08001e8d
 8001e64:	08001e69 	.word	0x08001e69
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	2b06      	cmp	r3, #6
 8001e6c:	d913      	bls.n	8001e96 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001e72:	e010      	b.n	8001e96 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	2b07      	cmp	r3, #7
 8001e78:	d90f      	bls.n	8001e9a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001e7e:	e00c      	b.n	8001e9a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	2b0f      	cmp	r3, #15
 8001e84:	d90b      	bls.n	8001e9e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001e8a:	e008      	b.n	8001e9e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	75fb      	strb	r3, [r7, #23]
      break;
 8001e90:	e006      	b.n	8001ea0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001e92:	bf00      	nop
 8001e94:	e004      	b.n	8001ea0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001e96:	bf00      	nop
 8001e98:	e002      	b.n	8001ea0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001e9a:	bf00      	nop
 8001e9c:	e000      	b.n	8001ea0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001e9e:	bf00      	nop
  }
  if (status == HAL_OK)
 8001ea0:	7dfb      	ldrb	r3, [r7, #23]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d10d      	bne.n	8001ec2 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	68ba      	ldr	r2, [r7, #8]
 8001eac:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f023 0118 	bic.w	r1, r3, #24
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	430a      	orrs	r2, r1
 8001ec0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001ec2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	371c      	adds	r7, #28
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b086      	sub	sp, #24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001ed8:	f7ff fdf4 	bl	8001ac4 <HAL_GetTick>
 8001edc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d101      	bne.n	8001ee8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e314      	b.n	8002512 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a66      	ldr	r2, [pc, #408]	; (8002088 <HAL_DMA_Init+0x1b8>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d04a      	beq.n	8001f88 <HAL_DMA_Init+0xb8>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a65      	ldr	r2, [pc, #404]	; (800208c <HAL_DMA_Init+0x1bc>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d045      	beq.n	8001f88 <HAL_DMA_Init+0xb8>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a63      	ldr	r2, [pc, #396]	; (8002090 <HAL_DMA_Init+0x1c0>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d040      	beq.n	8001f88 <HAL_DMA_Init+0xb8>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a62      	ldr	r2, [pc, #392]	; (8002094 <HAL_DMA_Init+0x1c4>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d03b      	beq.n	8001f88 <HAL_DMA_Init+0xb8>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a60      	ldr	r2, [pc, #384]	; (8002098 <HAL_DMA_Init+0x1c8>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d036      	beq.n	8001f88 <HAL_DMA_Init+0xb8>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a5f      	ldr	r2, [pc, #380]	; (800209c <HAL_DMA_Init+0x1cc>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d031      	beq.n	8001f88 <HAL_DMA_Init+0xb8>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a5d      	ldr	r2, [pc, #372]	; (80020a0 <HAL_DMA_Init+0x1d0>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d02c      	beq.n	8001f88 <HAL_DMA_Init+0xb8>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a5c      	ldr	r2, [pc, #368]	; (80020a4 <HAL_DMA_Init+0x1d4>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d027      	beq.n	8001f88 <HAL_DMA_Init+0xb8>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a5a      	ldr	r2, [pc, #360]	; (80020a8 <HAL_DMA_Init+0x1d8>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d022      	beq.n	8001f88 <HAL_DMA_Init+0xb8>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a59      	ldr	r2, [pc, #356]	; (80020ac <HAL_DMA_Init+0x1dc>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d01d      	beq.n	8001f88 <HAL_DMA_Init+0xb8>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a57      	ldr	r2, [pc, #348]	; (80020b0 <HAL_DMA_Init+0x1e0>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d018      	beq.n	8001f88 <HAL_DMA_Init+0xb8>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a56      	ldr	r2, [pc, #344]	; (80020b4 <HAL_DMA_Init+0x1e4>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d013      	beq.n	8001f88 <HAL_DMA_Init+0xb8>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a54      	ldr	r2, [pc, #336]	; (80020b8 <HAL_DMA_Init+0x1e8>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d00e      	beq.n	8001f88 <HAL_DMA_Init+0xb8>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a53      	ldr	r2, [pc, #332]	; (80020bc <HAL_DMA_Init+0x1ec>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d009      	beq.n	8001f88 <HAL_DMA_Init+0xb8>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a51      	ldr	r2, [pc, #324]	; (80020c0 <HAL_DMA_Init+0x1f0>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d004      	beq.n	8001f88 <HAL_DMA_Init+0xb8>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a50      	ldr	r2, [pc, #320]	; (80020c4 <HAL_DMA_Init+0x1f4>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d101      	bne.n	8001f8c <HAL_DMA_Init+0xbc>
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e000      	b.n	8001f8e <HAL_DMA_Init+0xbe>
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f000 813c 	beq.w	800220c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2202      	movs	r2, #2
 8001f98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a37      	ldr	r2, [pc, #220]	; (8002088 <HAL_DMA_Init+0x1b8>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d04a      	beq.n	8002044 <HAL_DMA_Init+0x174>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a36      	ldr	r2, [pc, #216]	; (800208c <HAL_DMA_Init+0x1bc>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d045      	beq.n	8002044 <HAL_DMA_Init+0x174>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a34      	ldr	r2, [pc, #208]	; (8002090 <HAL_DMA_Init+0x1c0>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d040      	beq.n	8002044 <HAL_DMA_Init+0x174>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a33      	ldr	r2, [pc, #204]	; (8002094 <HAL_DMA_Init+0x1c4>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d03b      	beq.n	8002044 <HAL_DMA_Init+0x174>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a31      	ldr	r2, [pc, #196]	; (8002098 <HAL_DMA_Init+0x1c8>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d036      	beq.n	8002044 <HAL_DMA_Init+0x174>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a30      	ldr	r2, [pc, #192]	; (800209c <HAL_DMA_Init+0x1cc>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d031      	beq.n	8002044 <HAL_DMA_Init+0x174>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a2e      	ldr	r2, [pc, #184]	; (80020a0 <HAL_DMA_Init+0x1d0>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d02c      	beq.n	8002044 <HAL_DMA_Init+0x174>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a2d      	ldr	r2, [pc, #180]	; (80020a4 <HAL_DMA_Init+0x1d4>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d027      	beq.n	8002044 <HAL_DMA_Init+0x174>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a2b      	ldr	r2, [pc, #172]	; (80020a8 <HAL_DMA_Init+0x1d8>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d022      	beq.n	8002044 <HAL_DMA_Init+0x174>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a2a      	ldr	r2, [pc, #168]	; (80020ac <HAL_DMA_Init+0x1dc>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d01d      	beq.n	8002044 <HAL_DMA_Init+0x174>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a28      	ldr	r2, [pc, #160]	; (80020b0 <HAL_DMA_Init+0x1e0>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d018      	beq.n	8002044 <HAL_DMA_Init+0x174>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a27      	ldr	r2, [pc, #156]	; (80020b4 <HAL_DMA_Init+0x1e4>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d013      	beq.n	8002044 <HAL_DMA_Init+0x174>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a25      	ldr	r2, [pc, #148]	; (80020b8 <HAL_DMA_Init+0x1e8>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d00e      	beq.n	8002044 <HAL_DMA_Init+0x174>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a24      	ldr	r2, [pc, #144]	; (80020bc <HAL_DMA_Init+0x1ec>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d009      	beq.n	8002044 <HAL_DMA_Init+0x174>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a22      	ldr	r2, [pc, #136]	; (80020c0 <HAL_DMA_Init+0x1f0>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d004      	beq.n	8002044 <HAL_DMA_Init+0x174>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a21      	ldr	r2, [pc, #132]	; (80020c4 <HAL_DMA_Init+0x1f4>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d108      	bne.n	8002056 <HAL_DMA_Init+0x186>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f022 0201 	bic.w	r2, r2, #1
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	e007      	b.n	8002066 <HAL_DMA_Init+0x196>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f022 0201 	bic.w	r2, r2, #1
 8002064:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002066:	e02f      	b.n	80020c8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002068:	f7ff fd2c 	bl	8001ac4 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b05      	cmp	r3, #5
 8002074:	d928      	bls.n	80020c8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2220      	movs	r2, #32
 800207a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2203      	movs	r2, #3
 8002080:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e244      	b.n	8002512 <HAL_DMA_Init+0x642>
 8002088:	40020010 	.word	0x40020010
 800208c:	40020028 	.word	0x40020028
 8002090:	40020040 	.word	0x40020040
 8002094:	40020058 	.word	0x40020058
 8002098:	40020070 	.word	0x40020070
 800209c:	40020088 	.word	0x40020088
 80020a0:	400200a0 	.word	0x400200a0
 80020a4:	400200b8 	.word	0x400200b8
 80020a8:	40020410 	.word	0x40020410
 80020ac:	40020428 	.word	0x40020428
 80020b0:	40020440 	.word	0x40020440
 80020b4:	40020458 	.word	0x40020458
 80020b8:	40020470 	.word	0x40020470
 80020bc:	40020488 	.word	0x40020488
 80020c0:	400204a0 	.word	0x400204a0
 80020c4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d1c8      	bne.n	8002068 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80020de:	697a      	ldr	r2, [r7, #20]
 80020e0:	4b84      	ldr	r3, [pc, #528]	; (80022f4 <HAL_DMA_Init+0x424>)
 80020e2:	4013      	ands	r3, r2
 80020e4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80020ee:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	691b      	ldr	r3, [r3, #16]
 80020f4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020fa:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	699b      	ldr	r3, [r3, #24]
 8002100:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002106:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6a1b      	ldr	r3, [r3, #32]
 800210c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800210e:	697a      	ldr	r2, [r7, #20]
 8002110:	4313      	orrs	r3, r2
 8002112:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002118:	2b04      	cmp	r3, #4
 800211a:	d107      	bne.n	800212c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002124:	4313      	orrs	r3, r2
 8002126:	697a      	ldr	r2, [r7, #20]
 8002128:	4313      	orrs	r3, r2
 800212a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	2b28      	cmp	r3, #40	; 0x28
 8002132:	d903      	bls.n	800213c <HAL_DMA_Init+0x26c>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	2b2e      	cmp	r3, #46	; 0x2e
 800213a:	d91f      	bls.n	800217c <HAL_DMA_Init+0x2ac>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	2b3e      	cmp	r3, #62	; 0x3e
 8002142:	d903      	bls.n	800214c <HAL_DMA_Init+0x27c>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	2b42      	cmp	r3, #66	; 0x42
 800214a:	d917      	bls.n	800217c <HAL_DMA_Init+0x2ac>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	2b46      	cmp	r3, #70	; 0x46
 8002152:	d903      	bls.n	800215c <HAL_DMA_Init+0x28c>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	2b48      	cmp	r3, #72	; 0x48
 800215a:	d90f      	bls.n	800217c <HAL_DMA_Init+0x2ac>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	2b4e      	cmp	r3, #78	; 0x4e
 8002162:	d903      	bls.n	800216c <HAL_DMA_Init+0x29c>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	2b52      	cmp	r3, #82	; 0x52
 800216a:	d907      	bls.n	800217c <HAL_DMA_Init+0x2ac>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	2b73      	cmp	r3, #115	; 0x73
 8002172:	d905      	bls.n	8002180 <HAL_DMA_Init+0x2b0>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	2b77      	cmp	r3, #119	; 0x77
 800217a:	d801      	bhi.n	8002180 <HAL_DMA_Init+0x2b0>
 800217c:	2301      	movs	r3, #1
 800217e:	e000      	b.n	8002182 <HAL_DMA_Init+0x2b2>
 8002180:	2300      	movs	r3, #0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d003      	beq.n	800218e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800218c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	697a      	ldr	r2, [r7, #20]
 8002194:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	695b      	ldr	r3, [r3, #20]
 800219c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	f023 0307 	bic.w	r3, r3, #7
 80021a4:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021aa:	697a      	ldr	r2, [r7, #20]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b4:	2b04      	cmp	r3, #4
 80021b6:	d117      	bne.n	80021e8 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021bc:	697a      	ldr	r2, [r7, #20]
 80021be:	4313      	orrs	r3, r2
 80021c0:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d00e      	beq.n	80021e8 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f002 f9e0 	bl	8004590 <DMA_CheckFifoParam>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d008      	beq.n	80021e8 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2240      	movs	r2, #64	; 0x40
 80021da:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e194      	b.n	8002512 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	697a      	ldr	r2, [r7, #20]
 80021ee:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f002 f91b 	bl	800442c <DMA_CalcBaseAndBitshift>
 80021f6:	4603      	mov	r3, r0
 80021f8:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021fe:	f003 031f 	and.w	r3, r3, #31
 8002202:	223f      	movs	r2, #63	; 0x3f
 8002204:	409a      	lsls	r2, r3
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	609a      	str	r2, [r3, #8]
 800220a:	e0ca      	b.n	80023a2 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a39      	ldr	r2, [pc, #228]	; (80022f8 <HAL_DMA_Init+0x428>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d022      	beq.n	800225c <HAL_DMA_Init+0x38c>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a38      	ldr	r2, [pc, #224]	; (80022fc <HAL_DMA_Init+0x42c>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d01d      	beq.n	800225c <HAL_DMA_Init+0x38c>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a36      	ldr	r2, [pc, #216]	; (8002300 <HAL_DMA_Init+0x430>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d018      	beq.n	800225c <HAL_DMA_Init+0x38c>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a35      	ldr	r2, [pc, #212]	; (8002304 <HAL_DMA_Init+0x434>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d013      	beq.n	800225c <HAL_DMA_Init+0x38c>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a33      	ldr	r2, [pc, #204]	; (8002308 <HAL_DMA_Init+0x438>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d00e      	beq.n	800225c <HAL_DMA_Init+0x38c>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a32      	ldr	r2, [pc, #200]	; (800230c <HAL_DMA_Init+0x43c>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d009      	beq.n	800225c <HAL_DMA_Init+0x38c>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a30      	ldr	r2, [pc, #192]	; (8002310 <HAL_DMA_Init+0x440>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d004      	beq.n	800225c <HAL_DMA_Init+0x38c>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a2f      	ldr	r2, [pc, #188]	; (8002314 <HAL_DMA_Init+0x444>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d101      	bne.n	8002260 <HAL_DMA_Init+0x390>
 800225c:	2301      	movs	r3, #1
 800225e:	e000      	b.n	8002262 <HAL_DMA_Init+0x392>
 8002260:	2300      	movs	r3, #0
 8002262:	2b00      	cmp	r3, #0
 8002264:	f000 8094 	beq.w	8002390 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a22      	ldr	r2, [pc, #136]	; (80022f8 <HAL_DMA_Init+0x428>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d021      	beq.n	80022b6 <HAL_DMA_Init+0x3e6>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a21      	ldr	r2, [pc, #132]	; (80022fc <HAL_DMA_Init+0x42c>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d01c      	beq.n	80022b6 <HAL_DMA_Init+0x3e6>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a1f      	ldr	r2, [pc, #124]	; (8002300 <HAL_DMA_Init+0x430>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d017      	beq.n	80022b6 <HAL_DMA_Init+0x3e6>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a1e      	ldr	r2, [pc, #120]	; (8002304 <HAL_DMA_Init+0x434>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d012      	beq.n	80022b6 <HAL_DMA_Init+0x3e6>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a1c      	ldr	r2, [pc, #112]	; (8002308 <HAL_DMA_Init+0x438>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d00d      	beq.n	80022b6 <HAL_DMA_Init+0x3e6>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a1b      	ldr	r2, [pc, #108]	; (800230c <HAL_DMA_Init+0x43c>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d008      	beq.n	80022b6 <HAL_DMA_Init+0x3e6>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a19      	ldr	r2, [pc, #100]	; (8002310 <HAL_DMA_Init+0x440>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d003      	beq.n	80022b6 <HAL_DMA_Init+0x3e6>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a18      	ldr	r2, [pc, #96]	; (8002314 <HAL_DMA_Init+0x444>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2202      	movs	r2, #2
 80022bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80022d0:	697a      	ldr	r2, [r7, #20]
 80022d2:	4b11      	ldr	r3, [pc, #68]	; (8002318 <HAL_DMA_Init+0x448>)
 80022d4:	4013      	ands	r3, r2
 80022d6:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	2b40      	cmp	r3, #64	; 0x40
 80022de:	d01d      	beq.n	800231c <HAL_DMA_Init+0x44c>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	2b80      	cmp	r3, #128	; 0x80
 80022e6:	d102      	bne.n	80022ee <HAL_DMA_Init+0x41e>
 80022e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80022ec:	e017      	b.n	800231e <HAL_DMA_Init+0x44e>
 80022ee:	2300      	movs	r3, #0
 80022f0:	e015      	b.n	800231e <HAL_DMA_Init+0x44e>
 80022f2:	bf00      	nop
 80022f4:	fe10803f 	.word	0xfe10803f
 80022f8:	58025408 	.word	0x58025408
 80022fc:	5802541c 	.word	0x5802541c
 8002300:	58025430 	.word	0x58025430
 8002304:	58025444 	.word	0x58025444
 8002308:	58025458 	.word	0x58025458
 800230c:	5802546c 	.word	0x5802546c
 8002310:	58025480 	.word	0x58025480
 8002314:	58025494 	.word	0x58025494
 8002318:	fffe000f 	.word	0xfffe000f
 800231c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	68d2      	ldr	r2, [r2, #12]
 8002322:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002324:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800232c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	695b      	ldr	r3, [r3, #20]
 8002332:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002334:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	699b      	ldr	r3, [r3, #24]
 800233a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800233c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	69db      	ldr	r3, [r3, #28]
 8002342:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002344:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a1b      	ldr	r3, [r3, #32]
 800234a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800234c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800234e:	697a      	ldr	r2, [r7, #20]
 8002350:	4313      	orrs	r3, r2
 8002352:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	697a      	ldr	r2, [r7, #20]
 800235a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	461a      	mov	r2, r3
 8002362:	4b6e      	ldr	r3, [pc, #440]	; (800251c <HAL_DMA_Init+0x64c>)
 8002364:	4413      	add	r3, r2
 8002366:	4a6e      	ldr	r2, [pc, #440]	; (8002520 <HAL_DMA_Init+0x650>)
 8002368:	fba2 2303 	umull	r2, r3, r2, r3
 800236c:	091b      	lsrs	r3, r3, #4
 800236e:	009a      	lsls	r2, r3, #2
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f002 f859 	bl	800442c <DMA_CalcBaseAndBitshift>
 800237a:	4603      	mov	r3, r0
 800237c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002382:	f003 031f 	and.w	r3, r3, #31
 8002386:	2201      	movs	r2, #1
 8002388:	409a      	lsls	r2, r3
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	605a      	str	r2, [r3, #4]
 800238e:	e008      	b.n	80023a2 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2240      	movs	r2, #64	; 0x40
 8002394:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2203      	movs	r2, #3
 800239a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e0b7      	b.n	8002512 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a5f      	ldr	r2, [pc, #380]	; (8002524 <HAL_DMA_Init+0x654>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d072      	beq.n	8002492 <HAL_DMA_Init+0x5c2>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a5d      	ldr	r2, [pc, #372]	; (8002528 <HAL_DMA_Init+0x658>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d06d      	beq.n	8002492 <HAL_DMA_Init+0x5c2>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a5c      	ldr	r2, [pc, #368]	; (800252c <HAL_DMA_Init+0x65c>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d068      	beq.n	8002492 <HAL_DMA_Init+0x5c2>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a5a      	ldr	r2, [pc, #360]	; (8002530 <HAL_DMA_Init+0x660>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d063      	beq.n	8002492 <HAL_DMA_Init+0x5c2>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a59      	ldr	r2, [pc, #356]	; (8002534 <HAL_DMA_Init+0x664>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d05e      	beq.n	8002492 <HAL_DMA_Init+0x5c2>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a57      	ldr	r2, [pc, #348]	; (8002538 <HAL_DMA_Init+0x668>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d059      	beq.n	8002492 <HAL_DMA_Init+0x5c2>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a56      	ldr	r2, [pc, #344]	; (800253c <HAL_DMA_Init+0x66c>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d054      	beq.n	8002492 <HAL_DMA_Init+0x5c2>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a54      	ldr	r2, [pc, #336]	; (8002540 <HAL_DMA_Init+0x670>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d04f      	beq.n	8002492 <HAL_DMA_Init+0x5c2>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a53      	ldr	r2, [pc, #332]	; (8002544 <HAL_DMA_Init+0x674>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d04a      	beq.n	8002492 <HAL_DMA_Init+0x5c2>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a51      	ldr	r2, [pc, #324]	; (8002548 <HAL_DMA_Init+0x678>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d045      	beq.n	8002492 <HAL_DMA_Init+0x5c2>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a50      	ldr	r2, [pc, #320]	; (800254c <HAL_DMA_Init+0x67c>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d040      	beq.n	8002492 <HAL_DMA_Init+0x5c2>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a4e      	ldr	r2, [pc, #312]	; (8002550 <HAL_DMA_Init+0x680>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d03b      	beq.n	8002492 <HAL_DMA_Init+0x5c2>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a4d      	ldr	r2, [pc, #308]	; (8002554 <HAL_DMA_Init+0x684>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d036      	beq.n	8002492 <HAL_DMA_Init+0x5c2>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a4b      	ldr	r2, [pc, #300]	; (8002558 <HAL_DMA_Init+0x688>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d031      	beq.n	8002492 <HAL_DMA_Init+0x5c2>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a4a      	ldr	r2, [pc, #296]	; (800255c <HAL_DMA_Init+0x68c>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d02c      	beq.n	8002492 <HAL_DMA_Init+0x5c2>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a48      	ldr	r2, [pc, #288]	; (8002560 <HAL_DMA_Init+0x690>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d027      	beq.n	8002492 <HAL_DMA_Init+0x5c2>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a47      	ldr	r2, [pc, #284]	; (8002564 <HAL_DMA_Init+0x694>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d022      	beq.n	8002492 <HAL_DMA_Init+0x5c2>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a45      	ldr	r2, [pc, #276]	; (8002568 <HAL_DMA_Init+0x698>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d01d      	beq.n	8002492 <HAL_DMA_Init+0x5c2>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a44      	ldr	r2, [pc, #272]	; (800256c <HAL_DMA_Init+0x69c>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d018      	beq.n	8002492 <HAL_DMA_Init+0x5c2>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a42      	ldr	r2, [pc, #264]	; (8002570 <HAL_DMA_Init+0x6a0>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d013      	beq.n	8002492 <HAL_DMA_Init+0x5c2>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a41      	ldr	r2, [pc, #260]	; (8002574 <HAL_DMA_Init+0x6a4>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d00e      	beq.n	8002492 <HAL_DMA_Init+0x5c2>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a3f      	ldr	r2, [pc, #252]	; (8002578 <HAL_DMA_Init+0x6a8>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d009      	beq.n	8002492 <HAL_DMA_Init+0x5c2>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a3e      	ldr	r2, [pc, #248]	; (800257c <HAL_DMA_Init+0x6ac>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d004      	beq.n	8002492 <HAL_DMA_Init+0x5c2>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a3c      	ldr	r2, [pc, #240]	; (8002580 <HAL_DMA_Init+0x6b0>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d101      	bne.n	8002496 <HAL_DMA_Init+0x5c6>
 8002492:	2301      	movs	r3, #1
 8002494:	e000      	b.n	8002498 <HAL_DMA_Init+0x5c8>
 8002496:	2300      	movs	r3, #0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d032      	beq.n	8002502 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f002 f8f3 	bl	8004688 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	2b80      	cmp	r3, #128	; 0x80
 80024a8:	d102      	bne.n	80024b0 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685a      	ldr	r2, [r3, #4]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024b8:	b2d2      	uxtb	r2, r2
 80024ba:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80024c4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d010      	beq.n	80024f0 <HAL_DMA_Init+0x620>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	2b08      	cmp	r3, #8
 80024d4:	d80c      	bhi.n	80024f0 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f002 f970 	bl	80047bc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024e0:	2200      	movs	r2, #0
 80024e2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80024ec:	605a      	str	r2, [r3, #4]
 80024ee:	e008      	b.n	8002502 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3718      	adds	r7, #24
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	a7fdabf8 	.word	0xa7fdabf8
 8002520:	cccccccd 	.word	0xcccccccd
 8002524:	40020010 	.word	0x40020010
 8002528:	40020028 	.word	0x40020028
 800252c:	40020040 	.word	0x40020040
 8002530:	40020058 	.word	0x40020058
 8002534:	40020070 	.word	0x40020070
 8002538:	40020088 	.word	0x40020088
 800253c:	400200a0 	.word	0x400200a0
 8002540:	400200b8 	.word	0x400200b8
 8002544:	40020410 	.word	0x40020410
 8002548:	40020428 	.word	0x40020428
 800254c:	40020440 	.word	0x40020440
 8002550:	40020458 	.word	0x40020458
 8002554:	40020470 	.word	0x40020470
 8002558:	40020488 	.word	0x40020488
 800255c:	400204a0 	.word	0x400204a0
 8002560:	400204b8 	.word	0x400204b8
 8002564:	58025408 	.word	0x58025408
 8002568:	5802541c 	.word	0x5802541c
 800256c:	58025430 	.word	0x58025430
 8002570:	58025444 	.word	0x58025444
 8002574:	58025458 	.word	0x58025458
 8002578:	5802546c 	.word	0x5802546c
 800257c:	58025480 	.word	0x58025480
 8002580:	58025494 	.word	0x58025494

08002584 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d101      	bne.n	8002596 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e1a8      	b.n	80028e8 <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a82      	ldr	r2, [pc, #520]	; (80027a4 <HAL_DMA_DeInit+0x220>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d04a      	beq.n	8002636 <HAL_DMA_DeInit+0xb2>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a80      	ldr	r2, [pc, #512]	; (80027a8 <HAL_DMA_DeInit+0x224>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d045      	beq.n	8002636 <HAL_DMA_DeInit+0xb2>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a7f      	ldr	r2, [pc, #508]	; (80027ac <HAL_DMA_DeInit+0x228>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d040      	beq.n	8002636 <HAL_DMA_DeInit+0xb2>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a7d      	ldr	r2, [pc, #500]	; (80027b0 <HAL_DMA_DeInit+0x22c>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d03b      	beq.n	8002636 <HAL_DMA_DeInit+0xb2>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a7c      	ldr	r2, [pc, #496]	; (80027b4 <HAL_DMA_DeInit+0x230>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d036      	beq.n	8002636 <HAL_DMA_DeInit+0xb2>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a7a      	ldr	r2, [pc, #488]	; (80027b8 <HAL_DMA_DeInit+0x234>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d031      	beq.n	8002636 <HAL_DMA_DeInit+0xb2>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a79      	ldr	r2, [pc, #484]	; (80027bc <HAL_DMA_DeInit+0x238>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d02c      	beq.n	8002636 <HAL_DMA_DeInit+0xb2>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a77      	ldr	r2, [pc, #476]	; (80027c0 <HAL_DMA_DeInit+0x23c>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d027      	beq.n	8002636 <HAL_DMA_DeInit+0xb2>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a76      	ldr	r2, [pc, #472]	; (80027c4 <HAL_DMA_DeInit+0x240>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d022      	beq.n	8002636 <HAL_DMA_DeInit+0xb2>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a74      	ldr	r2, [pc, #464]	; (80027c8 <HAL_DMA_DeInit+0x244>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d01d      	beq.n	8002636 <HAL_DMA_DeInit+0xb2>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a73      	ldr	r2, [pc, #460]	; (80027cc <HAL_DMA_DeInit+0x248>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d018      	beq.n	8002636 <HAL_DMA_DeInit+0xb2>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a71      	ldr	r2, [pc, #452]	; (80027d0 <HAL_DMA_DeInit+0x24c>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d013      	beq.n	8002636 <HAL_DMA_DeInit+0xb2>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a70      	ldr	r2, [pc, #448]	; (80027d4 <HAL_DMA_DeInit+0x250>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d00e      	beq.n	8002636 <HAL_DMA_DeInit+0xb2>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a6e      	ldr	r2, [pc, #440]	; (80027d8 <HAL_DMA_DeInit+0x254>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d009      	beq.n	8002636 <HAL_DMA_DeInit+0xb2>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a6d      	ldr	r2, [pc, #436]	; (80027dc <HAL_DMA_DeInit+0x258>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d004      	beq.n	8002636 <HAL_DMA_DeInit+0xb2>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a6b      	ldr	r2, [pc, #428]	; (80027e0 <HAL_DMA_DeInit+0x25c>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d108      	bne.n	8002648 <HAL_DMA_DeInit+0xc4>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f022 0201 	bic.w	r2, r2, #1
 8002644:	601a      	str	r2, [r3, #0]
 8002646:	e007      	b.n	8002658 <HAL_DMA_DeInit+0xd4>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f022 0201 	bic.w	r2, r2, #1
 8002656:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a51      	ldr	r2, [pc, #324]	; (80027a4 <HAL_DMA_DeInit+0x220>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d04a      	beq.n	80026f8 <HAL_DMA_DeInit+0x174>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a50      	ldr	r2, [pc, #320]	; (80027a8 <HAL_DMA_DeInit+0x224>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d045      	beq.n	80026f8 <HAL_DMA_DeInit+0x174>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a4e      	ldr	r2, [pc, #312]	; (80027ac <HAL_DMA_DeInit+0x228>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d040      	beq.n	80026f8 <HAL_DMA_DeInit+0x174>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a4d      	ldr	r2, [pc, #308]	; (80027b0 <HAL_DMA_DeInit+0x22c>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d03b      	beq.n	80026f8 <HAL_DMA_DeInit+0x174>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a4b      	ldr	r2, [pc, #300]	; (80027b4 <HAL_DMA_DeInit+0x230>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d036      	beq.n	80026f8 <HAL_DMA_DeInit+0x174>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a4a      	ldr	r2, [pc, #296]	; (80027b8 <HAL_DMA_DeInit+0x234>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d031      	beq.n	80026f8 <HAL_DMA_DeInit+0x174>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a48      	ldr	r2, [pc, #288]	; (80027bc <HAL_DMA_DeInit+0x238>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d02c      	beq.n	80026f8 <HAL_DMA_DeInit+0x174>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a47      	ldr	r2, [pc, #284]	; (80027c0 <HAL_DMA_DeInit+0x23c>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d027      	beq.n	80026f8 <HAL_DMA_DeInit+0x174>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a45      	ldr	r2, [pc, #276]	; (80027c4 <HAL_DMA_DeInit+0x240>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d022      	beq.n	80026f8 <HAL_DMA_DeInit+0x174>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a44      	ldr	r2, [pc, #272]	; (80027c8 <HAL_DMA_DeInit+0x244>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d01d      	beq.n	80026f8 <HAL_DMA_DeInit+0x174>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a42      	ldr	r2, [pc, #264]	; (80027cc <HAL_DMA_DeInit+0x248>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d018      	beq.n	80026f8 <HAL_DMA_DeInit+0x174>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a41      	ldr	r2, [pc, #260]	; (80027d0 <HAL_DMA_DeInit+0x24c>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d013      	beq.n	80026f8 <HAL_DMA_DeInit+0x174>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a3f      	ldr	r2, [pc, #252]	; (80027d4 <HAL_DMA_DeInit+0x250>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d00e      	beq.n	80026f8 <HAL_DMA_DeInit+0x174>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a3e      	ldr	r2, [pc, #248]	; (80027d8 <HAL_DMA_DeInit+0x254>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d009      	beq.n	80026f8 <HAL_DMA_DeInit+0x174>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a3c      	ldr	r2, [pc, #240]	; (80027dc <HAL_DMA_DeInit+0x258>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d004      	beq.n	80026f8 <HAL_DMA_DeInit+0x174>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a3b      	ldr	r2, [pc, #236]	; (80027e0 <HAL_DMA_DeInit+0x25c>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d101      	bne.n	80026fc <HAL_DMA_DeInit+0x178>
 80026f8:	2301      	movs	r3, #1
 80026fa:	e000      	b.n	80026fe <HAL_DMA_DeInit+0x17a>
 80026fc:	2300      	movs	r3, #0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d025      	beq.n	800274e <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2200      	movs	r2, #0
 8002708:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2200      	movs	r2, #0
 8002710:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2200      	movs	r2, #0
 8002718:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2200      	movs	r2, #0
 8002720:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2200      	movs	r2, #0
 8002728:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2221      	movs	r2, #33	; 0x21
 8002730:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f001 fe7a 	bl	800442c <DMA_CalcBaseAndBitshift>
 8002738:	4603      	mov	r3, r0
 800273a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002740:	f003 031f 	and.w	r3, r3, #31
 8002744:	223f      	movs	r2, #63	; 0x3f
 8002746:	409a      	lsls	r2, r3
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	609a      	str	r2, [r3, #8]
 800274c:	e081      	b.n	8002852 <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a24      	ldr	r2, [pc, #144]	; (80027e4 <HAL_DMA_DeInit+0x260>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d022      	beq.n	800279e <HAL_DMA_DeInit+0x21a>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a22      	ldr	r2, [pc, #136]	; (80027e8 <HAL_DMA_DeInit+0x264>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d01d      	beq.n	800279e <HAL_DMA_DeInit+0x21a>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a21      	ldr	r2, [pc, #132]	; (80027ec <HAL_DMA_DeInit+0x268>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d018      	beq.n	800279e <HAL_DMA_DeInit+0x21a>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a1f      	ldr	r2, [pc, #124]	; (80027f0 <HAL_DMA_DeInit+0x26c>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d013      	beq.n	800279e <HAL_DMA_DeInit+0x21a>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a1e      	ldr	r2, [pc, #120]	; (80027f4 <HAL_DMA_DeInit+0x270>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d00e      	beq.n	800279e <HAL_DMA_DeInit+0x21a>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a1c      	ldr	r2, [pc, #112]	; (80027f8 <HAL_DMA_DeInit+0x274>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d009      	beq.n	800279e <HAL_DMA_DeInit+0x21a>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a1b      	ldr	r2, [pc, #108]	; (80027fc <HAL_DMA_DeInit+0x278>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d004      	beq.n	800279e <HAL_DMA_DeInit+0x21a>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a19      	ldr	r2, [pc, #100]	; (8002800 <HAL_DMA_DeInit+0x27c>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d132      	bne.n	8002804 <HAL_DMA_DeInit+0x280>
 800279e:	2301      	movs	r3, #1
 80027a0:	e031      	b.n	8002806 <HAL_DMA_DeInit+0x282>
 80027a2:	bf00      	nop
 80027a4:	40020010 	.word	0x40020010
 80027a8:	40020028 	.word	0x40020028
 80027ac:	40020040 	.word	0x40020040
 80027b0:	40020058 	.word	0x40020058
 80027b4:	40020070 	.word	0x40020070
 80027b8:	40020088 	.word	0x40020088
 80027bc:	400200a0 	.word	0x400200a0
 80027c0:	400200b8 	.word	0x400200b8
 80027c4:	40020410 	.word	0x40020410
 80027c8:	40020428 	.word	0x40020428
 80027cc:	40020440 	.word	0x40020440
 80027d0:	40020458 	.word	0x40020458
 80027d4:	40020470 	.word	0x40020470
 80027d8:	40020488 	.word	0x40020488
 80027dc:	400204a0 	.word	0x400204a0
 80027e0:	400204b8 	.word	0x400204b8
 80027e4:	58025408 	.word	0x58025408
 80027e8:	5802541c 	.word	0x5802541c
 80027ec:	58025430 	.word	0x58025430
 80027f0:	58025444 	.word	0x58025444
 80027f4:	58025458 	.word	0x58025458
 80027f8:	5802546c 	.word	0x5802546c
 80027fc:	58025480 	.word	0x58025480
 8002800:	58025494 	.word	0x58025494
 8002804:	2300      	movs	r3, #0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d021      	beq.n	800284e <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2200      	movs	r2, #0
 8002810:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2200      	movs	r2, #0
 8002818:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2200      	movs	r2, #0
 8002820:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2200      	movs	r2, #0
 8002828:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2200      	movs	r2, #0
 8002830:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f001 fdfa 	bl	800442c <DMA_CalcBaseAndBitshift>
 8002838:	4603      	mov	r3, r0
 800283a:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002840:	f003 031f 	and.w	r3, r3, #31
 8002844:	2201      	movs	r2, #1
 8002846:	409a      	lsls	r2, r3
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	605a      	str	r2, [r3, #4]
 800284c:	e001      	b.n	8002852 <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e04a      	b.n	80028e8 <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f001 ff18 	bl	8004688 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800285c:	2b00      	cmp	r3, #0
 800285e:	d008      	beq.n	8002872 <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002864:	2200      	movs	r2, #0
 8002866:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002870:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d00f      	beq.n	800289a <HAL_DMA_DeInit+0x316>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	2b08      	cmp	r3, #8
 8002880:	d80b      	bhi.n	800289a <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f001 ff9a 	bl	80047bc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800288c:	2200      	movs	r2, #0
 800288e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002898:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	671a      	str	r2, [r3, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	675a      	str	r2, [r3, #116]	; 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback     = NULL;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback      = NULL;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback      = NULL;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	651a      	str	r2, [r3, #80]	; 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80028e6:	2300      	movs	r3, #0
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3710      	adds	r7, #16
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b086      	sub	sp, #24
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
 80028fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028fe:	2300      	movs	r3, #0
 8002900:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d101      	bne.n	800290c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e226      	b.n	8002d5a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002912:	2b01      	cmp	r3, #1
 8002914:	d101      	bne.n	800291a <HAL_DMA_Start_IT+0x2a>
 8002916:	2302      	movs	r3, #2
 8002918:	e21f      	b.n	8002d5a <HAL_DMA_Start_IT+0x46a>
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2201      	movs	r2, #1
 800291e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002928:	b2db      	uxtb	r3, r3
 800292a:	2b01      	cmp	r3, #1
 800292c:	f040 820a 	bne.w	8002d44 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2202      	movs	r2, #2
 8002934:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2200      	movs	r2, #0
 800293c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a68      	ldr	r2, [pc, #416]	; (8002ae4 <HAL_DMA_Start_IT+0x1f4>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d04a      	beq.n	80029de <HAL_DMA_Start_IT+0xee>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a66      	ldr	r2, [pc, #408]	; (8002ae8 <HAL_DMA_Start_IT+0x1f8>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d045      	beq.n	80029de <HAL_DMA_Start_IT+0xee>
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a65      	ldr	r2, [pc, #404]	; (8002aec <HAL_DMA_Start_IT+0x1fc>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d040      	beq.n	80029de <HAL_DMA_Start_IT+0xee>
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a63      	ldr	r2, [pc, #396]	; (8002af0 <HAL_DMA_Start_IT+0x200>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d03b      	beq.n	80029de <HAL_DMA_Start_IT+0xee>
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a62      	ldr	r2, [pc, #392]	; (8002af4 <HAL_DMA_Start_IT+0x204>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d036      	beq.n	80029de <HAL_DMA_Start_IT+0xee>
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a60      	ldr	r2, [pc, #384]	; (8002af8 <HAL_DMA_Start_IT+0x208>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d031      	beq.n	80029de <HAL_DMA_Start_IT+0xee>
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a5f      	ldr	r2, [pc, #380]	; (8002afc <HAL_DMA_Start_IT+0x20c>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d02c      	beq.n	80029de <HAL_DMA_Start_IT+0xee>
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a5d      	ldr	r2, [pc, #372]	; (8002b00 <HAL_DMA_Start_IT+0x210>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d027      	beq.n	80029de <HAL_DMA_Start_IT+0xee>
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a5c      	ldr	r2, [pc, #368]	; (8002b04 <HAL_DMA_Start_IT+0x214>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d022      	beq.n	80029de <HAL_DMA_Start_IT+0xee>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a5a      	ldr	r2, [pc, #360]	; (8002b08 <HAL_DMA_Start_IT+0x218>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d01d      	beq.n	80029de <HAL_DMA_Start_IT+0xee>
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a59      	ldr	r2, [pc, #356]	; (8002b0c <HAL_DMA_Start_IT+0x21c>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d018      	beq.n	80029de <HAL_DMA_Start_IT+0xee>
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a57      	ldr	r2, [pc, #348]	; (8002b10 <HAL_DMA_Start_IT+0x220>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d013      	beq.n	80029de <HAL_DMA_Start_IT+0xee>
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a56      	ldr	r2, [pc, #344]	; (8002b14 <HAL_DMA_Start_IT+0x224>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d00e      	beq.n	80029de <HAL_DMA_Start_IT+0xee>
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a54      	ldr	r2, [pc, #336]	; (8002b18 <HAL_DMA_Start_IT+0x228>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d009      	beq.n	80029de <HAL_DMA_Start_IT+0xee>
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a53      	ldr	r2, [pc, #332]	; (8002b1c <HAL_DMA_Start_IT+0x22c>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d004      	beq.n	80029de <HAL_DMA_Start_IT+0xee>
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a51      	ldr	r2, [pc, #324]	; (8002b20 <HAL_DMA_Start_IT+0x230>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d108      	bne.n	80029f0 <HAL_DMA_Start_IT+0x100>
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f022 0201 	bic.w	r2, r2, #1
 80029ec:	601a      	str	r2, [r3, #0]
 80029ee:	e007      	b.n	8002a00 <HAL_DMA_Start_IT+0x110>
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f022 0201 	bic.w	r2, r2, #1
 80029fe:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	68b9      	ldr	r1, [r7, #8]
 8002a06:	68f8      	ldr	r0, [r7, #12]
 8002a08:	f001 fb64 	bl	80040d4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a34      	ldr	r2, [pc, #208]	; (8002ae4 <HAL_DMA_Start_IT+0x1f4>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d04a      	beq.n	8002aac <HAL_DMA_Start_IT+0x1bc>
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a33      	ldr	r2, [pc, #204]	; (8002ae8 <HAL_DMA_Start_IT+0x1f8>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d045      	beq.n	8002aac <HAL_DMA_Start_IT+0x1bc>
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a31      	ldr	r2, [pc, #196]	; (8002aec <HAL_DMA_Start_IT+0x1fc>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d040      	beq.n	8002aac <HAL_DMA_Start_IT+0x1bc>
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a30      	ldr	r2, [pc, #192]	; (8002af0 <HAL_DMA_Start_IT+0x200>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d03b      	beq.n	8002aac <HAL_DMA_Start_IT+0x1bc>
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a2e      	ldr	r2, [pc, #184]	; (8002af4 <HAL_DMA_Start_IT+0x204>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d036      	beq.n	8002aac <HAL_DMA_Start_IT+0x1bc>
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a2d      	ldr	r2, [pc, #180]	; (8002af8 <HAL_DMA_Start_IT+0x208>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d031      	beq.n	8002aac <HAL_DMA_Start_IT+0x1bc>
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a2b      	ldr	r2, [pc, #172]	; (8002afc <HAL_DMA_Start_IT+0x20c>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d02c      	beq.n	8002aac <HAL_DMA_Start_IT+0x1bc>
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a2a      	ldr	r2, [pc, #168]	; (8002b00 <HAL_DMA_Start_IT+0x210>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d027      	beq.n	8002aac <HAL_DMA_Start_IT+0x1bc>
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a28      	ldr	r2, [pc, #160]	; (8002b04 <HAL_DMA_Start_IT+0x214>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d022      	beq.n	8002aac <HAL_DMA_Start_IT+0x1bc>
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a27      	ldr	r2, [pc, #156]	; (8002b08 <HAL_DMA_Start_IT+0x218>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d01d      	beq.n	8002aac <HAL_DMA_Start_IT+0x1bc>
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a25      	ldr	r2, [pc, #148]	; (8002b0c <HAL_DMA_Start_IT+0x21c>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d018      	beq.n	8002aac <HAL_DMA_Start_IT+0x1bc>
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a24      	ldr	r2, [pc, #144]	; (8002b10 <HAL_DMA_Start_IT+0x220>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d013      	beq.n	8002aac <HAL_DMA_Start_IT+0x1bc>
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a22      	ldr	r2, [pc, #136]	; (8002b14 <HAL_DMA_Start_IT+0x224>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d00e      	beq.n	8002aac <HAL_DMA_Start_IT+0x1bc>
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a21      	ldr	r2, [pc, #132]	; (8002b18 <HAL_DMA_Start_IT+0x228>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d009      	beq.n	8002aac <HAL_DMA_Start_IT+0x1bc>
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a1f      	ldr	r2, [pc, #124]	; (8002b1c <HAL_DMA_Start_IT+0x22c>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d004      	beq.n	8002aac <HAL_DMA_Start_IT+0x1bc>
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a1e      	ldr	r2, [pc, #120]	; (8002b20 <HAL_DMA_Start_IT+0x230>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d101      	bne.n	8002ab0 <HAL_DMA_Start_IT+0x1c0>
 8002aac:	2301      	movs	r3, #1
 8002aae:	e000      	b.n	8002ab2 <HAL_DMA_Start_IT+0x1c2>
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d036      	beq.n	8002b24 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f023 021e 	bic.w	r2, r3, #30
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f042 0216 	orr.w	r2, r2, #22
 8002ac8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d03e      	beq.n	8002b50 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f042 0208 	orr.w	r2, r2, #8
 8002ae0:	601a      	str	r2, [r3, #0]
 8002ae2:	e035      	b.n	8002b50 <HAL_DMA_Start_IT+0x260>
 8002ae4:	40020010 	.word	0x40020010
 8002ae8:	40020028 	.word	0x40020028
 8002aec:	40020040 	.word	0x40020040
 8002af0:	40020058 	.word	0x40020058
 8002af4:	40020070 	.word	0x40020070
 8002af8:	40020088 	.word	0x40020088
 8002afc:	400200a0 	.word	0x400200a0
 8002b00:	400200b8 	.word	0x400200b8
 8002b04:	40020410 	.word	0x40020410
 8002b08:	40020428 	.word	0x40020428
 8002b0c:	40020440 	.word	0x40020440
 8002b10:	40020458 	.word	0x40020458
 8002b14:	40020470 	.word	0x40020470
 8002b18:	40020488 	.word	0x40020488
 8002b1c:	400204a0 	.word	0x400204a0
 8002b20:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f023 020e 	bic.w	r2, r3, #14
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f042 020a 	orr.w	r2, r2, #10
 8002b36:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d007      	beq.n	8002b50 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f042 0204 	orr.w	r2, r2, #4
 8002b4e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a83      	ldr	r2, [pc, #524]	; (8002d64 <HAL_DMA_Start_IT+0x474>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d072      	beq.n	8002c40 <HAL_DMA_Start_IT+0x350>
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a82      	ldr	r2, [pc, #520]	; (8002d68 <HAL_DMA_Start_IT+0x478>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d06d      	beq.n	8002c40 <HAL_DMA_Start_IT+0x350>
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a80      	ldr	r2, [pc, #512]	; (8002d6c <HAL_DMA_Start_IT+0x47c>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d068      	beq.n	8002c40 <HAL_DMA_Start_IT+0x350>
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a7f      	ldr	r2, [pc, #508]	; (8002d70 <HAL_DMA_Start_IT+0x480>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d063      	beq.n	8002c40 <HAL_DMA_Start_IT+0x350>
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a7d      	ldr	r2, [pc, #500]	; (8002d74 <HAL_DMA_Start_IT+0x484>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d05e      	beq.n	8002c40 <HAL_DMA_Start_IT+0x350>
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a7c      	ldr	r2, [pc, #496]	; (8002d78 <HAL_DMA_Start_IT+0x488>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d059      	beq.n	8002c40 <HAL_DMA_Start_IT+0x350>
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a7a      	ldr	r2, [pc, #488]	; (8002d7c <HAL_DMA_Start_IT+0x48c>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d054      	beq.n	8002c40 <HAL_DMA_Start_IT+0x350>
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a79      	ldr	r2, [pc, #484]	; (8002d80 <HAL_DMA_Start_IT+0x490>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d04f      	beq.n	8002c40 <HAL_DMA_Start_IT+0x350>
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a77      	ldr	r2, [pc, #476]	; (8002d84 <HAL_DMA_Start_IT+0x494>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d04a      	beq.n	8002c40 <HAL_DMA_Start_IT+0x350>
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a76      	ldr	r2, [pc, #472]	; (8002d88 <HAL_DMA_Start_IT+0x498>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d045      	beq.n	8002c40 <HAL_DMA_Start_IT+0x350>
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a74      	ldr	r2, [pc, #464]	; (8002d8c <HAL_DMA_Start_IT+0x49c>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d040      	beq.n	8002c40 <HAL_DMA_Start_IT+0x350>
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a73      	ldr	r2, [pc, #460]	; (8002d90 <HAL_DMA_Start_IT+0x4a0>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d03b      	beq.n	8002c40 <HAL_DMA_Start_IT+0x350>
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a71      	ldr	r2, [pc, #452]	; (8002d94 <HAL_DMA_Start_IT+0x4a4>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d036      	beq.n	8002c40 <HAL_DMA_Start_IT+0x350>
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a70      	ldr	r2, [pc, #448]	; (8002d98 <HAL_DMA_Start_IT+0x4a8>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d031      	beq.n	8002c40 <HAL_DMA_Start_IT+0x350>
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a6e      	ldr	r2, [pc, #440]	; (8002d9c <HAL_DMA_Start_IT+0x4ac>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d02c      	beq.n	8002c40 <HAL_DMA_Start_IT+0x350>
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a6d      	ldr	r2, [pc, #436]	; (8002da0 <HAL_DMA_Start_IT+0x4b0>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d027      	beq.n	8002c40 <HAL_DMA_Start_IT+0x350>
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a6b      	ldr	r2, [pc, #428]	; (8002da4 <HAL_DMA_Start_IT+0x4b4>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d022      	beq.n	8002c40 <HAL_DMA_Start_IT+0x350>
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a6a      	ldr	r2, [pc, #424]	; (8002da8 <HAL_DMA_Start_IT+0x4b8>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d01d      	beq.n	8002c40 <HAL_DMA_Start_IT+0x350>
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a68      	ldr	r2, [pc, #416]	; (8002dac <HAL_DMA_Start_IT+0x4bc>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d018      	beq.n	8002c40 <HAL_DMA_Start_IT+0x350>
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a67      	ldr	r2, [pc, #412]	; (8002db0 <HAL_DMA_Start_IT+0x4c0>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d013      	beq.n	8002c40 <HAL_DMA_Start_IT+0x350>
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a65      	ldr	r2, [pc, #404]	; (8002db4 <HAL_DMA_Start_IT+0x4c4>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d00e      	beq.n	8002c40 <HAL_DMA_Start_IT+0x350>
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a64      	ldr	r2, [pc, #400]	; (8002db8 <HAL_DMA_Start_IT+0x4c8>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d009      	beq.n	8002c40 <HAL_DMA_Start_IT+0x350>
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a62      	ldr	r2, [pc, #392]	; (8002dbc <HAL_DMA_Start_IT+0x4cc>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d004      	beq.n	8002c40 <HAL_DMA_Start_IT+0x350>
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a61      	ldr	r2, [pc, #388]	; (8002dc0 <HAL_DMA_Start_IT+0x4d0>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d101      	bne.n	8002c44 <HAL_DMA_Start_IT+0x354>
 8002c40:	2301      	movs	r3, #1
 8002c42:	e000      	b.n	8002c46 <HAL_DMA_Start_IT+0x356>
 8002c44:	2300      	movs	r3, #0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d01a      	beq.n	8002c80 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d007      	beq.n	8002c68 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c66:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d007      	beq.n	8002c80 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c7e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a37      	ldr	r2, [pc, #220]	; (8002d64 <HAL_DMA_Start_IT+0x474>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d04a      	beq.n	8002d20 <HAL_DMA_Start_IT+0x430>
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a36      	ldr	r2, [pc, #216]	; (8002d68 <HAL_DMA_Start_IT+0x478>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d045      	beq.n	8002d20 <HAL_DMA_Start_IT+0x430>
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a34      	ldr	r2, [pc, #208]	; (8002d6c <HAL_DMA_Start_IT+0x47c>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d040      	beq.n	8002d20 <HAL_DMA_Start_IT+0x430>
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a33      	ldr	r2, [pc, #204]	; (8002d70 <HAL_DMA_Start_IT+0x480>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d03b      	beq.n	8002d20 <HAL_DMA_Start_IT+0x430>
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a31      	ldr	r2, [pc, #196]	; (8002d74 <HAL_DMA_Start_IT+0x484>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d036      	beq.n	8002d20 <HAL_DMA_Start_IT+0x430>
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a30      	ldr	r2, [pc, #192]	; (8002d78 <HAL_DMA_Start_IT+0x488>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d031      	beq.n	8002d20 <HAL_DMA_Start_IT+0x430>
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a2e      	ldr	r2, [pc, #184]	; (8002d7c <HAL_DMA_Start_IT+0x48c>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d02c      	beq.n	8002d20 <HAL_DMA_Start_IT+0x430>
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a2d      	ldr	r2, [pc, #180]	; (8002d80 <HAL_DMA_Start_IT+0x490>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d027      	beq.n	8002d20 <HAL_DMA_Start_IT+0x430>
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a2b      	ldr	r2, [pc, #172]	; (8002d84 <HAL_DMA_Start_IT+0x494>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d022      	beq.n	8002d20 <HAL_DMA_Start_IT+0x430>
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a2a      	ldr	r2, [pc, #168]	; (8002d88 <HAL_DMA_Start_IT+0x498>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d01d      	beq.n	8002d20 <HAL_DMA_Start_IT+0x430>
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a28      	ldr	r2, [pc, #160]	; (8002d8c <HAL_DMA_Start_IT+0x49c>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d018      	beq.n	8002d20 <HAL_DMA_Start_IT+0x430>
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a27      	ldr	r2, [pc, #156]	; (8002d90 <HAL_DMA_Start_IT+0x4a0>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d013      	beq.n	8002d20 <HAL_DMA_Start_IT+0x430>
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a25      	ldr	r2, [pc, #148]	; (8002d94 <HAL_DMA_Start_IT+0x4a4>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d00e      	beq.n	8002d20 <HAL_DMA_Start_IT+0x430>
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a24      	ldr	r2, [pc, #144]	; (8002d98 <HAL_DMA_Start_IT+0x4a8>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d009      	beq.n	8002d20 <HAL_DMA_Start_IT+0x430>
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a22      	ldr	r2, [pc, #136]	; (8002d9c <HAL_DMA_Start_IT+0x4ac>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d004      	beq.n	8002d20 <HAL_DMA_Start_IT+0x430>
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a21      	ldr	r2, [pc, #132]	; (8002da0 <HAL_DMA_Start_IT+0x4b0>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d108      	bne.n	8002d32 <HAL_DMA_Start_IT+0x442>
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f042 0201 	orr.w	r2, r2, #1
 8002d2e:	601a      	str	r2, [r3, #0]
 8002d30:	e012      	b.n	8002d58 <HAL_DMA_Start_IT+0x468>
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f042 0201 	orr.w	r2, r2, #1
 8002d40:	601a      	str	r2, [r3, #0]
 8002d42:	e009      	b.n	8002d58 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d4a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002d58:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3718      	adds	r7, #24
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	40020010 	.word	0x40020010
 8002d68:	40020028 	.word	0x40020028
 8002d6c:	40020040 	.word	0x40020040
 8002d70:	40020058 	.word	0x40020058
 8002d74:	40020070 	.word	0x40020070
 8002d78:	40020088 	.word	0x40020088
 8002d7c:	400200a0 	.word	0x400200a0
 8002d80:	400200b8 	.word	0x400200b8
 8002d84:	40020410 	.word	0x40020410
 8002d88:	40020428 	.word	0x40020428
 8002d8c:	40020440 	.word	0x40020440
 8002d90:	40020458 	.word	0x40020458
 8002d94:	40020470 	.word	0x40020470
 8002d98:	40020488 	.word	0x40020488
 8002d9c:	400204a0 	.word	0x400204a0
 8002da0:	400204b8 	.word	0x400204b8
 8002da4:	58025408 	.word	0x58025408
 8002da8:	5802541c 	.word	0x5802541c
 8002dac:	58025430 	.word	0x58025430
 8002db0:	58025444 	.word	0x58025444
 8002db4:	58025458 	.word	0x58025458
 8002db8:	5802546c 	.word	0x5802546c
 8002dbc:	58025480 	.word	0x58025480
 8002dc0:	58025494 	.word	0x58025494

08002dc4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d101      	bne.n	8002dd6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e205      	b.n	80031e2 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d004      	beq.n	8002dec <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2280      	movs	r2, #128	; 0x80
 8002de6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e1fa      	b.n	80031e2 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a8c      	ldr	r2, [pc, #560]	; (8003024 <HAL_DMA_Abort_IT+0x260>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d04a      	beq.n	8002e8c <HAL_DMA_Abort_IT+0xc8>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a8b      	ldr	r2, [pc, #556]	; (8003028 <HAL_DMA_Abort_IT+0x264>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d045      	beq.n	8002e8c <HAL_DMA_Abort_IT+0xc8>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a89      	ldr	r2, [pc, #548]	; (800302c <HAL_DMA_Abort_IT+0x268>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d040      	beq.n	8002e8c <HAL_DMA_Abort_IT+0xc8>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a88      	ldr	r2, [pc, #544]	; (8003030 <HAL_DMA_Abort_IT+0x26c>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d03b      	beq.n	8002e8c <HAL_DMA_Abort_IT+0xc8>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a86      	ldr	r2, [pc, #536]	; (8003034 <HAL_DMA_Abort_IT+0x270>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d036      	beq.n	8002e8c <HAL_DMA_Abort_IT+0xc8>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a85      	ldr	r2, [pc, #532]	; (8003038 <HAL_DMA_Abort_IT+0x274>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d031      	beq.n	8002e8c <HAL_DMA_Abort_IT+0xc8>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a83      	ldr	r2, [pc, #524]	; (800303c <HAL_DMA_Abort_IT+0x278>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d02c      	beq.n	8002e8c <HAL_DMA_Abort_IT+0xc8>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a82      	ldr	r2, [pc, #520]	; (8003040 <HAL_DMA_Abort_IT+0x27c>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d027      	beq.n	8002e8c <HAL_DMA_Abort_IT+0xc8>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a80      	ldr	r2, [pc, #512]	; (8003044 <HAL_DMA_Abort_IT+0x280>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d022      	beq.n	8002e8c <HAL_DMA_Abort_IT+0xc8>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a7f      	ldr	r2, [pc, #508]	; (8003048 <HAL_DMA_Abort_IT+0x284>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d01d      	beq.n	8002e8c <HAL_DMA_Abort_IT+0xc8>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a7d      	ldr	r2, [pc, #500]	; (800304c <HAL_DMA_Abort_IT+0x288>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d018      	beq.n	8002e8c <HAL_DMA_Abort_IT+0xc8>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a7c      	ldr	r2, [pc, #496]	; (8003050 <HAL_DMA_Abort_IT+0x28c>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d013      	beq.n	8002e8c <HAL_DMA_Abort_IT+0xc8>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a7a      	ldr	r2, [pc, #488]	; (8003054 <HAL_DMA_Abort_IT+0x290>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d00e      	beq.n	8002e8c <HAL_DMA_Abort_IT+0xc8>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a79      	ldr	r2, [pc, #484]	; (8003058 <HAL_DMA_Abort_IT+0x294>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d009      	beq.n	8002e8c <HAL_DMA_Abort_IT+0xc8>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a77      	ldr	r2, [pc, #476]	; (800305c <HAL_DMA_Abort_IT+0x298>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d004      	beq.n	8002e8c <HAL_DMA_Abort_IT+0xc8>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a76      	ldr	r2, [pc, #472]	; (8003060 <HAL_DMA_Abort_IT+0x29c>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d101      	bne.n	8002e90 <HAL_DMA_Abort_IT+0xcc>
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e000      	b.n	8002e92 <HAL_DMA_Abort_IT+0xce>
 8002e90:	2300      	movs	r3, #0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d065      	beq.n	8002f62 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2204      	movs	r2, #4
 8002e9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a60      	ldr	r2, [pc, #384]	; (8003024 <HAL_DMA_Abort_IT+0x260>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d04a      	beq.n	8002f3e <HAL_DMA_Abort_IT+0x17a>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a5e      	ldr	r2, [pc, #376]	; (8003028 <HAL_DMA_Abort_IT+0x264>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d045      	beq.n	8002f3e <HAL_DMA_Abort_IT+0x17a>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a5d      	ldr	r2, [pc, #372]	; (800302c <HAL_DMA_Abort_IT+0x268>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d040      	beq.n	8002f3e <HAL_DMA_Abort_IT+0x17a>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a5b      	ldr	r2, [pc, #364]	; (8003030 <HAL_DMA_Abort_IT+0x26c>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d03b      	beq.n	8002f3e <HAL_DMA_Abort_IT+0x17a>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a5a      	ldr	r2, [pc, #360]	; (8003034 <HAL_DMA_Abort_IT+0x270>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d036      	beq.n	8002f3e <HAL_DMA_Abort_IT+0x17a>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a58      	ldr	r2, [pc, #352]	; (8003038 <HAL_DMA_Abort_IT+0x274>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d031      	beq.n	8002f3e <HAL_DMA_Abort_IT+0x17a>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a57      	ldr	r2, [pc, #348]	; (800303c <HAL_DMA_Abort_IT+0x278>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d02c      	beq.n	8002f3e <HAL_DMA_Abort_IT+0x17a>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a55      	ldr	r2, [pc, #340]	; (8003040 <HAL_DMA_Abort_IT+0x27c>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d027      	beq.n	8002f3e <HAL_DMA_Abort_IT+0x17a>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a54      	ldr	r2, [pc, #336]	; (8003044 <HAL_DMA_Abort_IT+0x280>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d022      	beq.n	8002f3e <HAL_DMA_Abort_IT+0x17a>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a52      	ldr	r2, [pc, #328]	; (8003048 <HAL_DMA_Abort_IT+0x284>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d01d      	beq.n	8002f3e <HAL_DMA_Abort_IT+0x17a>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a51      	ldr	r2, [pc, #324]	; (800304c <HAL_DMA_Abort_IT+0x288>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d018      	beq.n	8002f3e <HAL_DMA_Abort_IT+0x17a>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a4f      	ldr	r2, [pc, #316]	; (8003050 <HAL_DMA_Abort_IT+0x28c>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d013      	beq.n	8002f3e <HAL_DMA_Abort_IT+0x17a>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a4e      	ldr	r2, [pc, #312]	; (8003054 <HAL_DMA_Abort_IT+0x290>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d00e      	beq.n	8002f3e <HAL_DMA_Abort_IT+0x17a>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a4c      	ldr	r2, [pc, #304]	; (8003058 <HAL_DMA_Abort_IT+0x294>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d009      	beq.n	8002f3e <HAL_DMA_Abort_IT+0x17a>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a4b      	ldr	r2, [pc, #300]	; (800305c <HAL_DMA_Abort_IT+0x298>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d004      	beq.n	8002f3e <HAL_DMA_Abort_IT+0x17a>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a49      	ldr	r2, [pc, #292]	; (8003060 <HAL_DMA_Abort_IT+0x29c>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d108      	bne.n	8002f50 <HAL_DMA_Abort_IT+0x18c>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f022 0201 	bic.w	r2, r2, #1
 8002f4c:	601a      	str	r2, [r3, #0]
 8002f4e:	e147      	b.n	80031e0 <HAL_DMA_Abort_IT+0x41c>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f022 0201 	bic.w	r2, r2, #1
 8002f5e:	601a      	str	r2, [r3, #0]
 8002f60:	e13e      	b.n	80031e0 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f022 020e 	bic.w	r2, r2, #14
 8002f70:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a2b      	ldr	r2, [pc, #172]	; (8003024 <HAL_DMA_Abort_IT+0x260>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d04a      	beq.n	8003012 <HAL_DMA_Abort_IT+0x24e>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a29      	ldr	r2, [pc, #164]	; (8003028 <HAL_DMA_Abort_IT+0x264>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d045      	beq.n	8003012 <HAL_DMA_Abort_IT+0x24e>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a28      	ldr	r2, [pc, #160]	; (800302c <HAL_DMA_Abort_IT+0x268>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d040      	beq.n	8003012 <HAL_DMA_Abort_IT+0x24e>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a26      	ldr	r2, [pc, #152]	; (8003030 <HAL_DMA_Abort_IT+0x26c>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d03b      	beq.n	8003012 <HAL_DMA_Abort_IT+0x24e>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a25      	ldr	r2, [pc, #148]	; (8003034 <HAL_DMA_Abort_IT+0x270>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d036      	beq.n	8003012 <HAL_DMA_Abort_IT+0x24e>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a23      	ldr	r2, [pc, #140]	; (8003038 <HAL_DMA_Abort_IT+0x274>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d031      	beq.n	8003012 <HAL_DMA_Abort_IT+0x24e>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a22      	ldr	r2, [pc, #136]	; (800303c <HAL_DMA_Abort_IT+0x278>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d02c      	beq.n	8003012 <HAL_DMA_Abort_IT+0x24e>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a20      	ldr	r2, [pc, #128]	; (8003040 <HAL_DMA_Abort_IT+0x27c>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d027      	beq.n	8003012 <HAL_DMA_Abort_IT+0x24e>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a1f      	ldr	r2, [pc, #124]	; (8003044 <HAL_DMA_Abort_IT+0x280>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d022      	beq.n	8003012 <HAL_DMA_Abort_IT+0x24e>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a1d      	ldr	r2, [pc, #116]	; (8003048 <HAL_DMA_Abort_IT+0x284>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d01d      	beq.n	8003012 <HAL_DMA_Abort_IT+0x24e>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a1c      	ldr	r2, [pc, #112]	; (800304c <HAL_DMA_Abort_IT+0x288>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d018      	beq.n	8003012 <HAL_DMA_Abort_IT+0x24e>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a1a      	ldr	r2, [pc, #104]	; (8003050 <HAL_DMA_Abort_IT+0x28c>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d013      	beq.n	8003012 <HAL_DMA_Abort_IT+0x24e>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a19      	ldr	r2, [pc, #100]	; (8003054 <HAL_DMA_Abort_IT+0x290>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d00e      	beq.n	8003012 <HAL_DMA_Abort_IT+0x24e>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a17      	ldr	r2, [pc, #92]	; (8003058 <HAL_DMA_Abort_IT+0x294>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d009      	beq.n	8003012 <HAL_DMA_Abort_IT+0x24e>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a16      	ldr	r2, [pc, #88]	; (800305c <HAL_DMA_Abort_IT+0x298>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d004      	beq.n	8003012 <HAL_DMA_Abort_IT+0x24e>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a14      	ldr	r2, [pc, #80]	; (8003060 <HAL_DMA_Abort_IT+0x29c>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d128      	bne.n	8003064 <HAL_DMA_Abort_IT+0x2a0>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f022 0201 	bic.w	r2, r2, #1
 8003020:	601a      	str	r2, [r3, #0]
 8003022:	e027      	b.n	8003074 <HAL_DMA_Abort_IT+0x2b0>
 8003024:	40020010 	.word	0x40020010
 8003028:	40020028 	.word	0x40020028
 800302c:	40020040 	.word	0x40020040
 8003030:	40020058 	.word	0x40020058
 8003034:	40020070 	.word	0x40020070
 8003038:	40020088 	.word	0x40020088
 800303c:	400200a0 	.word	0x400200a0
 8003040:	400200b8 	.word	0x400200b8
 8003044:	40020410 	.word	0x40020410
 8003048:	40020428 	.word	0x40020428
 800304c:	40020440 	.word	0x40020440
 8003050:	40020458 	.word	0x40020458
 8003054:	40020470 	.word	0x40020470
 8003058:	40020488 	.word	0x40020488
 800305c:	400204a0 	.word	0x400204a0
 8003060:	400204b8 	.word	0x400204b8
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f022 0201 	bic.w	r2, r2, #1
 8003072:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a5c      	ldr	r2, [pc, #368]	; (80031ec <HAL_DMA_Abort_IT+0x428>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d072      	beq.n	8003164 <HAL_DMA_Abort_IT+0x3a0>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a5b      	ldr	r2, [pc, #364]	; (80031f0 <HAL_DMA_Abort_IT+0x42c>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d06d      	beq.n	8003164 <HAL_DMA_Abort_IT+0x3a0>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a59      	ldr	r2, [pc, #356]	; (80031f4 <HAL_DMA_Abort_IT+0x430>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d068      	beq.n	8003164 <HAL_DMA_Abort_IT+0x3a0>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a58      	ldr	r2, [pc, #352]	; (80031f8 <HAL_DMA_Abort_IT+0x434>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d063      	beq.n	8003164 <HAL_DMA_Abort_IT+0x3a0>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a56      	ldr	r2, [pc, #344]	; (80031fc <HAL_DMA_Abort_IT+0x438>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d05e      	beq.n	8003164 <HAL_DMA_Abort_IT+0x3a0>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a55      	ldr	r2, [pc, #340]	; (8003200 <HAL_DMA_Abort_IT+0x43c>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d059      	beq.n	8003164 <HAL_DMA_Abort_IT+0x3a0>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a53      	ldr	r2, [pc, #332]	; (8003204 <HAL_DMA_Abort_IT+0x440>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d054      	beq.n	8003164 <HAL_DMA_Abort_IT+0x3a0>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a52      	ldr	r2, [pc, #328]	; (8003208 <HAL_DMA_Abort_IT+0x444>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d04f      	beq.n	8003164 <HAL_DMA_Abort_IT+0x3a0>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a50      	ldr	r2, [pc, #320]	; (800320c <HAL_DMA_Abort_IT+0x448>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d04a      	beq.n	8003164 <HAL_DMA_Abort_IT+0x3a0>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a4f      	ldr	r2, [pc, #316]	; (8003210 <HAL_DMA_Abort_IT+0x44c>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d045      	beq.n	8003164 <HAL_DMA_Abort_IT+0x3a0>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a4d      	ldr	r2, [pc, #308]	; (8003214 <HAL_DMA_Abort_IT+0x450>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d040      	beq.n	8003164 <HAL_DMA_Abort_IT+0x3a0>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a4c      	ldr	r2, [pc, #304]	; (8003218 <HAL_DMA_Abort_IT+0x454>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d03b      	beq.n	8003164 <HAL_DMA_Abort_IT+0x3a0>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a4a      	ldr	r2, [pc, #296]	; (800321c <HAL_DMA_Abort_IT+0x458>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d036      	beq.n	8003164 <HAL_DMA_Abort_IT+0x3a0>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a49      	ldr	r2, [pc, #292]	; (8003220 <HAL_DMA_Abort_IT+0x45c>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d031      	beq.n	8003164 <HAL_DMA_Abort_IT+0x3a0>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a47      	ldr	r2, [pc, #284]	; (8003224 <HAL_DMA_Abort_IT+0x460>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d02c      	beq.n	8003164 <HAL_DMA_Abort_IT+0x3a0>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a46      	ldr	r2, [pc, #280]	; (8003228 <HAL_DMA_Abort_IT+0x464>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d027      	beq.n	8003164 <HAL_DMA_Abort_IT+0x3a0>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a44      	ldr	r2, [pc, #272]	; (800322c <HAL_DMA_Abort_IT+0x468>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d022      	beq.n	8003164 <HAL_DMA_Abort_IT+0x3a0>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a43      	ldr	r2, [pc, #268]	; (8003230 <HAL_DMA_Abort_IT+0x46c>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d01d      	beq.n	8003164 <HAL_DMA_Abort_IT+0x3a0>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a41      	ldr	r2, [pc, #260]	; (8003234 <HAL_DMA_Abort_IT+0x470>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d018      	beq.n	8003164 <HAL_DMA_Abort_IT+0x3a0>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a40      	ldr	r2, [pc, #256]	; (8003238 <HAL_DMA_Abort_IT+0x474>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d013      	beq.n	8003164 <HAL_DMA_Abort_IT+0x3a0>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a3e      	ldr	r2, [pc, #248]	; (800323c <HAL_DMA_Abort_IT+0x478>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d00e      	beq.n	8003164 <HAL_DMA_Abort_IT+0x3a0>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a3d      	ldr	r2, [pc, #244]	; (8003240 <HAL_DMA_Abort_IT+0x47c>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d009      	beq.n	8003164 <HAL_DMA_Abort_IT+0x3a0>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a3b      	ldr	r2, [pc, #236]	; (8003244 <HAL_DMA_Abort_IT+0x480>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d004      	beq.n	8003164 <HAL_DMA_Abort_IT+0x3a0>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a3a      	ldr	r2, [pc, #232]	; (8003248 <HAL_DMA_Abort_IT+0x484>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d101      	bne.n	8003168 <HAL_DMA_Abort_IT+0x3a4>
 8003164:	2301      	movs	r3, #1
 8003166:	e000      	b.n	800316a <HAL_DMA_Abort_IT+0x3a6>
 8003168:	2300      	movs	r3, #0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d028      	beq.n	80031c0 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003178:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800317c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003182:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003188:	f003 031f 	and.w	r3, r3, #31
 800318c:	2201      	movs	r2, #1
 800318e:	409a      	lsls	r2, r3
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800319c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00c      	beq.n	80031c0 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031b4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80031be:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d003      	beq.n	80031e0 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3710      	adds	r7, #16
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	40020010 	.word	0x40020010
 80031f0:	40020028 	.word	0x40020028
 80031f4:	40020040 	.word	0x40020040
 80031f8:	40020058 	.word	0x40020058
 80031fc:	40020070 	.word	0x40020070
 8003200:	40020088 	.word	0x40020088
 8003204:	400200a0 	.word	0x400200a0
 8003208:	400200b8 	.word	0x400200b8
 800320c:	40020410 	.word	0x40020410
 8003210:	40020428 	.word	0x40020428
 8003214:	40020440 	.word	0x40020440
 8003218:	40020458 	.word	0x40020458
 800321c:	40020470 	.word	0x40020470
 8003220:	40020488 	.word	0x40020488
 8003224:	400204a0 	.word	0x400204a0
 8003228:	400204b8 	.word	0x400204b8
 800322c:	58025408 	.word	0x58025408
 8003230:	5802541c 	.word	0x5802541c
 8003234:	58025430 	.word	0x58025430
 8003238:	58025444 	.word	0x58025444
 800323c:	58025458 	.word	0x58025458
 8003240:	5802546c 	.word	0x5802546c
 8003244:	58025480 	.word	0x58025480
 8003248:	58025494 	.word	0x58025494

0800324c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b08a      	sub	sp, #40	; 0x28
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003254:	2300      	movs	r3, #0
 8003256:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003258:	4b67      	ldr	r3, [pc, #412]	; (80033f8 <HAL_DMA_IRQHandler+0x1ac>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a67      	ldr	r2, [pc, #412]	; (80033fc <HAL_DMA_IRQHandler+0x1b0>)
 800325e:	fba2 2303 	umull	r2, r3, r2, r3
 8003262:	0a9b      	lsrs	r3, r3, #10
 8003264:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800326a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003270:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003272:	6a3b      	ldr	r3, [r7, #32]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a5f      	ldr	r2, [pc, #380]	; (8003400 <HAL_DMA_IRQHandler+0x1b4>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d04a      	beq.n	800331e <HAL_DMA_IRQHandler+0xd2>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a5d      	ldr	r2, [pc, #372]	; (8003404 <HAL_DMA_IRQHandler+0x1b8>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d045      	beq.n	800331e <HAL_DMA_IRQHandler+0xd2>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a5c      	ldr	r2, [pc, #368]	; (8003408 <HAL_DMA_IRQHandler+0x1bc>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d040      	beq.n	800331e <HAL_DMA_IRQHandler+0xd2>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a5a      	ldr	r2, [pc, #360]	; (800340c <HAL_DMA_IRQHandler+0x1c0>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d03b      	beq.n	800331e <HAL_DMA_IRQHandler+0xd2>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a59      	ldr	r2, [pc, #356]	; (8003410 <HAL_DMA_IRQHandler+0x1c4>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d036      	beq.n	800331e <HAL_DMA_IRQHandler+0xd2>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a57      	ldr	r2, [pc, #348]	; (8003414 <HAL_DMA_IRQHandler+0x1c8>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d031      	beq.n	800331e <HAL_DMA_IRQHandler+0xd2>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a56      	ldr	r2, [pc, #344]	; (8003418 <HAL_DMA_IRQHandler+0x1cc>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d02c      	beq.n	800331e <HAL_DMA_IRQHandler+0xd2>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a54      	ldr	r2, [pc, #336]	; (800341c <HAL_DMA_IRQHandler+0x1d0>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d027      	beq.n	800331e <HAL_DMA_IRQHandler+0xd2>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a53      	ldr	r2, [pc, #332]	; (8003420 <HAL_DMA_IRQHandler+0x1d4>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d022      	beq.n	800331e <HAL_DMA_IRQHandler+0xd2>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a51      	ldr	r2, [pc, #324]	; (8003424 <HAL_DMA_IRQHandler+0x1d8>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d01d      	beq.n	800331e <HAL_DMA_IRQHandler+0xd2>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a50      	ldr	r2, [pc, #320]	; (8003428 <HAL_DMA_IRQHandler+0x1dc>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d018      	beq.n	800331e <HAL_DMA_IRQHandler+0xd2>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a4e      	ldr	r2, [pc, #312]	; (800342c <HAL_DMA_IRQHandler+0x1e0>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d013      	beq.n	800331e <HAL_DMA_IRQHandler+0xd2>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a4d      	ldr	r2, [pc, #308]	; (8003430 <HAL_DMA_IRQHandler+0x1e4>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d00e      	beq.n	800331e <HAL_DMA_IRQHandler+0xd2>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a4b      	ldr	r2, [pc, #300]	; (8003434 <HAL_DMA_IRQHandler+0x1e8>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d009      	beq.n	800331e <HAL_DMA_IRQHandler+0xd2>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a4a      	ldr	r2, [pc, #296]	; (8003438 <HAL_DMA_IRQHandler+0x1ec>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d004      	beq.n	800331e <HAL_DMA_IRQHandler+0xd2>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a48      	ldr	r2, [pc, #288]	; (800343c <HAL_DMA_IRQHandler+0x1f0>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d101      	bne.n	8003322 <HAL_DMA_IRQHandler+0xd6>
 800331e:	2301      	movs	r3, #1
 8003320:	e000      	b.n	8003324 <HAL_DMA_IRQHandler+0xd8>
 8003322:	2300      	movs	r3, #0
 8003324:	2b00      	cmp	r3, #0
 8003326:	f000 842b 	beq.w	8003b80 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800332e:	f003 031f 	and.w	r3, r3, #31
 8003332:	2208      	movs	r2, #8
 8003334:	409a      	lsls	r2, r3
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	4013      	ands	r3, r2
 800333a:	2b00      	cmp	r3, #0
 800333c:	f000 80a2 	beq.w	8003484 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a2e      	ldr	r2, [pc, #184]	; (8003400 <HAL_DMA_IRQHandler+0x1b4>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d04a      	beq.n	80033e0 <HAL_DMA_IRQHandler+0x194>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a2d      	ldr	r2, [pc, #180]	; (8003404 <HAL_DMA_IRQHandler+0x1b8>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d045      	beq.n	80033e0 <HAL_DMA_IRQHandler+0x194>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a2b      	ldr	r2, [pc, #172]	; (8003408 <HAL_DMA_IRQHandler+0x1bc>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d040      	beq.n	80033e0 <HAL_DMA_IRQHandler+0x194>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a2a      	ldr	r2, [pc, #168]	; (800340c <HAL_DMA_IRQHandler+0x1c0>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d03b      	beq.n	80033e0 <HAL_DMA_IRQHandler+0x194>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a28      	ldr	r2, [pc, #160]	; (8003410 <HAL_DMA_IRQHandler+0x1c4>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d036      	beq.n	80033e0 <HAL_DMA_IRQHandler+0x194>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a27      	ldr	r2, [pc, #156]	; (8003414 <HAL_DMA_IRQHandler+0x1c8>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d031      	beq.n	80033e0 <HAL_DMA_IRQHandler+0x194>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a25      	ldr	r2, [pc, #148]	; (8003418 <HAL_DMA_IRQHandler+0x1cc>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d02c      	beq.n	80033e0 <HAL_DMA_IRQHandler+0x194>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a24      	ldr	r2, [pc, #144]	; (800341c <HAL_DMA_IRQHandler+0x1d0>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d027      	beq.n	80033e0 <HAL_DMA_IRQHandler+0x194>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a22      	ldr	r2, [pc, #136]	; (8003420 <HAL_DMA_IRQHandler+0x1d4>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d022      	beq.n	80033e0 <HAL_DMA_IRQHandler+0x194>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a21      	ldr	r2, [pc, #132]	; (8003424 <HAL_DMA_IRQHandler+0x1d8>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d01d      	beq.n	80033e0 <HAL_DMA_IRQHandler+0x194>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a1f      	ldr	r2, [pc, #124]	; (8003428 <HAL_DMA_IRQHandler+0x1dc>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d018      	beq.n	80033e0 <HAL_DMA_IRQHandler+0x194>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a1e      	ldr	r2, [pc, #120]	; (800342c <HAL_DMA_IRQHandler+0x1e0>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d013      	beq.n	80033e0 <HAL_DMA_IRQHandler+0x194>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a1c      	ldr	r2, [pc, #112]	; (8003430 <HAL_DMA_IRQHandler+0x1e4>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d00e      	beq.n	80033e0 <HAL_DMA_IRQHandler+0x194>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a1b      	ldr	r2, [pc, #108]	; (8003434 <HAL_DMA_IRQHandler+0x1e8>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d009      	beq.n	80033e0 <HAL_DMA_IRQHandler+0x194>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a19      	ldr	r2, [pc, #100]	; (8003438 <HAL_DMA_IRQHandler+0x1ec>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d004      	beq.n	80033e0 <HAL_DMA_IRQHandler+0x194>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a18      	ldr	r2, [pc, #96]	; (800343c <HAL_DMA_IRQHandler+0x1f0>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d12f      	bne.n	8003440 <HAL_DMA_IRQHandler+0x1f4>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0304 	and.w	r3, r3, #4
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	bf14      	ite	ne
 80033ee:	2301      	movne	r3, #1
 80033f0:	2300      	moveq	r3, #0
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	e02e      	b.n	8003454 <HAL_DMA_IRQHandler+0x208>
 80033f6:	bf00      	nop
 80033f8:	2400041c 	.word	0x2400041c
 80033fc:	1b4e81b5 	.word	0x1b4e81b5
 8003400:	40020010 	.word	0x40020010
 8003404:	40020028 	.word	0x40020028
 8003408:	40020040 	.word	0x40020040
 800340c:	40020058 	.word	0x40020058
 8003410:	40020070 	.word	0x40020070
 8003414:	40020088 	.word	0x40020088
 8003418:	400200a0 	.word	0x400200a0
 800341c:	400200b8 	.word	0x400200b8
 8003420:	40020410 	.word	0x40020410
 8003424:	40020428 	.word	0x40020428
 8003428:	40020440 	.word	0x40020440
 800342c:	40020458 	.word	0x40020458
 8003430:	40020470 	.word	0x40020470
 8003434:	40020488 	.word	0x40020488
 8003438:	400204a0 	.word	0x400204a0
 800343c:	400204b8 	.word	0x400204b8
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0308 	and.w	r3, r3, #8
 800344a:	2b00      	cmp	r3, #0
 800344c:	bf14      	ite	ne
 800344e:	2301      	movne	r3, #1
 8003450:	2300      	moveq	r3, #0
 8003452:	b2db      	uxtb	r3, r3
 8003454:	2b00      	cmp	r3, #0
 8003456:	d015      	beq.n	8003484 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f022 0204 	bic.w	r2, r2, #4
 8003466:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800346c:	f003 031f 	and.w	r3, r3, #31
 8003470:	2208      	movs	r2, #8
 8003472:	409a      	lsls	r2, r3
 8003474:	6a3b      	ldr	r3, [r7, #32]
 8003476:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800347c:	f043 0201 	orr.w	r2, r3, #1
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003488:	f003 031f 	and.w	r3, r3, #31
 800348c:	69ba      	ldr	r2, [r7, #24]
 800348e:	fa22 f303 	lsr.w	r3, r2, r3
 8003492:	f003 0301 	and.w	r3, r3, #1
 8003496:	2b00      	cmp	r3, #0
 8003498:	d06e      	beq.n	8003578 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a69      	ldr	r2, [pc, #420]	; (8003644 <HAL_DMA_IRQHandler+0x3f8>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d04a      	beq.n	800353a <HAL_DMA_IRQHandler+0x2ee>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a67      	ldr	r2, [pc, #412]	; (8003648 <HAL_DMA_IRQHandler+0x3fc>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d045      	beq.n	800353a <HAL_DMA_IRQHandler+0x2ee>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a66      	ldr	r2, [pc, #408]	; (800364c <HAL_DMA_IRQHandler+0x400>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d040      	beq.n	800353a <HAL_DMA_IRQHandler+0x2ee>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a64      	ldr	r2, [pc, #400]	; (8003650 <HAL_DMA_IRQHandler+0x404>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d03b      	beq.n	800353a <HAL_DMA_IRQHandler+0x2ee>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a63      	ldr	r2, [pc, #396]	; (8003654 <HAL_DMA_IRQHandler+0x408>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d036      	beq.n	800353a <HAL_DMA_IRQHandler+0x2ee>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a61      	ldr	r2, [pc, #388]	; (8003658 <HAL_DMA_IRQHandler+0x40c>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d031      	beq.n	800353a <HAL_DMA_IRQHandler+0x2ee>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a60      	ldr	r2, [pc, #384]	; (800365c <HAL_DMA_IRQHandler+0x410>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d02c      	beq.n	800353a <HAL_DMA_IRQHandler+0x2ee>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a5e      	ldr	r2, [pc, #376]	; (8003660 <HAL_DMA_IRQHandler+0x414>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d027      	beq.n	800353a <HAL_DMA_IRQHandler+0x2ee>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a5d      	ldr	r2, [pc, #372]	; (8003664 <HAL_DMA_IRQHandler+0x418>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d022      	beq.n	800353a <HAL_DMA_IRQHandler+0x2ee>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a5b      	ldr	r2, [pc, #364]	; (8003668 <HAL_DMA_IRQHandler+0x41c>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d01d      	beq.n	800353a <HAL_DMA_IRQHandler+0x2ee>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a5a      	ldr	r2, [pc, #360]	; (800366c <HAL_DMA_IRQHandler+0x420>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d018      	beq.n	800353a <HAL_DMA_IRQHandler+0x2ee>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a58      	ldr	r2, [pc, #352]	; (8003670 <HAL_DMA_IRQHandler+0x424>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d013      	beq.n	800353a <HAL_DMA_IRQHandler+0x2ee>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a57      	ldr	r2, [pc, #348]	; (8003674 <HAL_DMA_IRQHandler+0x428>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d00e      	beq.n	800353a <HAL_DMA_IRQHandler+0x2ee>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a55      	ldr	r2, [pc, #340]	; (8003678 <HAL_DMA_IRQHandler+0x42c>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d009      	beq.n	800353a <HAL_DMA_IRQHandler+0x2ee>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a54      	ldr	r2, [pc, #336]	; (800367c <HAL_DMA_IRQHandler+0x430>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d004      	beq.n	800353a <HAL_DMA_IRQHandler+0x2ee>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a52      	ldr	r2, [pc, #328]	; (8003680 <HAL_DMA_IRQHandler+0x434>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d10a      	bne.n	8003550 <HAL_DMA_IRQHandler+0x304>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	695b      	ldr	r3, [r3, #20]
 8003540:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003544:	2b00      	cmp	r3, #0
 8003546:	bf14      	ite	ne
 8003548:	2301      	movne	r3, #1
 800354a:	2300      	moveq	r3, #0
 800354c:	b2db      	uxtb	r3, r3
 800354e:	e003      	b.n	8003558 <HAL_DMA_IRQHandler+0x30c>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2300      	movs	r3, #0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d00d      	beq.n	8003578 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003560:	f003 031f 	and.w	r3, r3, #31
 8003564:	2201      	movs	r2, #1
 8003566:	409a      	lsls	r2, r3
 8003568:	6a3b      	ldr	r3, [r7, #32]
 800356a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003570:	f043 0202 	orr.w	r2, r3, #2
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800357c:	f003 031f 	and.w	r3, r3, #31
 8003580:	2204      	movs	r2, #4
 8003582:	409a      	lsls	r2, r3
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	4013      	ands	r3, r2
 8003588:	2b00      	cmp	r3, #0
 800358a:	f000 808f 	beq.w	80036ac <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a2c      	ldr	r2, [pc, #176]	; (8003644 <HAL_DMA_IRQHandler+0x3f8>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d04a      	beq.n	800362e <HAL_DMA_IRQHandler+0x3e2>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a2a      	ldr	r2, [pc, #168]	; (8003648 <HAL_DMA_IRQHandler+0x3fc>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d045      	beq.n	800362e <HAL_DMA_IRQHandler+0x3e2>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a29      	ldr	r2, [pc, #164]	; (800364c <HAL_DMA_IRQHandler+0x400>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d040      	beq.n	800362e <HAL_DMA_IRQHandler+0x3e2>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a27      	ldr	r2, [pc, #156]	; (8003650 <HAL_DMA_IRQHandler+0x404>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d03b      	beq.n	800362e <HAL_DMA_IRQHandler+0x3e2>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a26      	ldr	r2, [pc, #152]	; (8003654 <HAL_DMA_IRQHandler+0x408>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d036      	beq.n	800362e <HAL_DMA_IRQHandler+0x3e2>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a24      	ldr	r2, [pc, #144]	; (8003658 <HAL_DMA_IRQHandler+0x40c>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d031      	beq.n	800362e <HAL_DMA_IRQHandler+0x3e2>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a23      	ldr	r2, [pc, #140]	; (800365c <HAL_DMA_IRQHandler+0x410>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d02c      	beq.n	800362e <HAL_DMA_IRQHandler+0x3e2>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a21      	ldr	r2, [pc, #132]	; (8003660 <HAL_DMA_IRQHandler+0x414>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d027      	beq.n	800362e <HAL_DMA_IRQHandler+0x3e2>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a20      	ldr	r2, [pc, #128]	; (8003664 <HAL_DMA_IRQHandler+0x418>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d022      	beq.n	800362e <HAL_DMA_IRQHandler+0x3e2>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a1e      	ldr	r2, [pc, #120]	; (8003668 <HAL_DMA_IRQHandler+0x41c>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d01d      	beq.n	800362e <HAL_DMA_IRQHandler+0x3e2>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a1d      	ldr	r2, [pc, #116]	; (800366c <HAL_DMA_IRQHandler+0x420>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d018      	beq.n	800362e <HAL_DMA_IRQHandler+0x3e2>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a1b      	ldr	r2, [pc, #108]	; (8003670 <HAL_DMA_IRQHandler+0x424>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d013      	beq.n	800362e <HAL_DMA_IRQHandler+0x3e2>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a1a      	ldr	r2, [pc, #104]	; (8003674 <HAL_DMA_IRQHandler+0x428>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d00e      	beq.n	800362e <HAL_DMA_IRQHandler+0x3e2>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a18      	ldr	r2, [pc, #96]	; (8003678 <HAL_DMA_IRQHandler+0x42c>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d009      	beq.n	800362e <HAL_DMA_IRQHandler+0x3e2>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a17      	ldr	r2, [pc, #92]	; (800367c <HAL_DMA_IRQHandler+0x430>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d004      	beq.n	800362e <HAL_DMA_IRQHandler+0x3e2>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a15      	ldr	r2, [pc, #84]	; (8003680 <HAL_DMA_IRQHandler+0x434>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d12a      	bne.n	8003684 <HAL_DMA_IRQHandler+0x438>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0302 	and.w	r3, r3, #2
 8003638:	2b00      	cmp	r3, #0
 800363a:	bf14      	ite	ne
 800363c:	2301      	movne	r3, #1
 800363e:	2300      	moveq	r3, #0
 8003640:	b2db      	uxtb	r3, r3
 8003642:	e023      	b.n	800368c <HAL_DMA_IRQHandler+0x440>
 8003644:	40020010 	.word	0x40020010
 8003648:	40020028 	.word	0x40020028
 800364c:	40020040 	.word	0x40020040
 8003650:	40020058 	.word	0x40020058
 8003654:	40020070 	.word	0x40020070
 8003658:	40020088 	.word	0x40020088
 800365c:	400200a0 	.word	0x400200a0
 8003660:	400200b8 	.word	0x400200b8
 8003664:	40020410 	.word	0x40020410
 8003668:	40020428 	.word	0x40020428
 800366c:	40020440 	.word	0x40020440
 8003670:	40020458 	.word	0x40020458
 8003674:	40020470 	.word	0x40020470
 8003678:	40020488 	.word	0x40020488
 800367c:	400204a0 	.word	0x400204a0
 8003680:	400204b8 	.word	0x400204b8
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2300      	movs	r3, #0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d00d      	beq.n	80036ac <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003694:	f003 031f 	and.w	r3, r3, #31
 8003698:	2204      	movs	r2, #4
 800369a:	409a      	lsls	r2, r3
 800369c:	6a3b      	ldr	r3, [r7, #32]
 800369e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036a4:	f043 0204 	orr.w	r2, r3, #4
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036b0:	f003 031f 	and.w	r3, r3, #31
 80036b4:	2210      	movs	r2, #16
 80036b6:	409a      	lsls	r2, r3
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	4013      	ands	r3, r2
 80036bc:	2b00      	cmp	r3, #0
 80036be:	f000 80a6 	beq.w	800380e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a85      	ldr	r2, [pc, #532]	; (80038dc <HAL_DMA_IRQHandler+0x690>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d04a      	beq.n	8003762 <HAL_DMA_IRQHandler+0x516>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a83      	ldr	r2, [pc, #524]	; (80038e0 <HAL_DMA_IRQHandler+0x694>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d045      	beq.n	8003762 <HAL_DMA_IRQHandler+0x516>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a82      	ldr	r2, [pc, #520]	; (80038e4 <HAL_DMA_IRQHandler+0x698>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d040      	beq.n	8003762 <HAL_DMA_IRQHandler+0x516>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a80      	ldr	r2, [pc, #512]	; (80038e8 <HAL_DMA_IRQHandler+0x69c>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d03b      	beq.n	8003762 <HAL_DMA_IRQHandler+0x516>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a7f      	ldr	r2, [pc, #508]	; (80038ec <HAL_DMA_IRQHandler+0x6a0>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d036      	beq.n	8003762 <HAL_DMA_IRQHandler+0x516>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a7d      	ldr	r2, [pc, #500]	; (80038f0 <HAL_DMA_IRQHandler+0x6a4>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d031      	beq.n	8003762 <HAL_DMA_IRQHandler+0x516>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a7c      	ldr	r2, [pc, #496]	; (80038f4 <HAL_DMA_IRQHandler+0x6a8>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d02c      	beq.n	8003762 <HAL_DMA_IRQHandler+0x516>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a7a      	ldr	r2, [pc, #488]	; (80038f8 <HAL_DMA_IRQHandler+0x6ac>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d027      	beq.n	8003762 <HAL_DMA_IRQHandler+0x516>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a79      	ldr	r2, [pc, #484]	; (80038fc <HAL_DMA_IRQHandler+0x6b0>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d022      	beq.n	8003762 <HAL_DMA_IRQHandler+0x516>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a77      	ldr	r2, [pc, #476]	; (8003900 <HAL_DMA_IRQHandler+0x6b4>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d01d      	beq.n	8003762 <HAL_DMA_IRQHandler+0x516>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a76      	ldr	r2, [pc, #472]	; (8003904 <HAL_DMA_IRQHandler+0x6b8>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d018      	beq.n	8003762 <HAL_DMA_IRQHandler+0x516>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a74      	ldr	r2, [pc, #464]	; (8003908 <HAL_DMA_IRQHandler+0x6bc>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d013      	beq.n	8003762 <HAL_DMA_IRQHandler+0x516>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a73      	ldr	r2, [pc, #460]	; (800390c <HAL_DMA_IRQHandler+0x6c0>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d00e      	beq.n	8003762 <HAL_DMA_IRQHandler+0x516>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a71      	ldr	r2, [pc, #452]	; (8003910 <HAL_DMA_IRQHandler+0x6c4>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d009      	beq.n	8003762 <HAL_DMA_IRQHandler+0x516>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a70      	ldr	r2, [pc, #448]	; (8003914 <HAL_DMA_IRQHandler+0x6c8>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d004      	beq.n	8003762 <HAL_DMA_IRQHandler+0x516>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a6e      	ldr	r2, [pc, #440]	; (8003918 <HAL_DMA_IRQHandler+0x6cc>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d10a      	bne.n	8003778 <HAL_DMA_IRQHandler+0x52c>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0308 	and.w	r3, r3, #8
 800376c:	2b00      	cmp	r3, #0
 800376e:	bf14      	ite	ne
 8003770:	2301      	movne	r3, #1
 8003772:	2300      	moveq	r3, #0
 8003774:	b2db      	uxtb	r3, r3
 8003776:	e009      	b.n	800378c <HAL_DMA_IRQHandler+0x540>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0304 	and.w	r3, r3, #4
 8003782:	2b00      	cmp	r3, #0
 8003784:	bf14      	ite	ne
 8003786:	2301      	movne	r3, #1
 8003788:	2300      	moveq	r3, #0
 800378a:	b2db      	uxtb	r3, r3
 800378c:	2b00      	cmp	r3, #0
 800378e:	d03e      	beq.n	800380e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003794:	f003 031f 	and.w	r3, r3, #31
 8003798:	2210      	movs	r2, #16
 800379a:	409a      	lsls	r2, r3
 800379c:	6a3b      	ldr	r3, [r7, #32]
 800379e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d018      	beq.n	80037e0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d108      	bne.n	80037ce <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d024      	beq.n	800380e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	4798      	blx	r3
 80037cc:	e01f      	b.n	800380e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d01b      	beq.n	800380e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	4798      	blx	r3
 80037de:	e016      	b.n	800380e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d107      	bne.n	80037fe <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f022 0208 	bic.w	r2, r2, #8
 80037fc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003802:	2b00      	cmp	r3, #0
 8003804:	d003      	beq.n	800380e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003812:	f003 031f 	and.w	r3, r3, #31
 8003816:	2220      	movs	r2, #32
 8003818:	409a      	lsls	r2, r3
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	4013      	ands	r3, r2
 800381e:	2b00      	cmp	r3, #0
 8003820:	f000 8110 	beq.w	8003a44 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a2c      	ldr	r2, [pc, #176]	; (80038dc <HAL_DMA_IRQHandler+0x690>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d04a      	beq.n	80038c4 <HAL_DMA_IRQHandler+0x678>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a2b      	ldr	r2, [pc, #172]	; (80038e0 <HAL_DMA_IRQHandler+0x694>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d045      	beq.n	80038c4 <HAL_DMA_IRQHandler+0x678>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a29      	ldr	r2, [pc, #164]	; (80038e4 <HAL_DMA_IRQHandler+0x698>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d040      	beq.n	80038c4 <HAL_DMA_IRQHandler+0x678>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a28      	ldr	r2, [pc, #160]	; (80038e8 <HAL_DMA_IRQHandler+0x69c>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d03b      	beq.n	80038c4 <HAL_DMA_IRQHandler+0x678>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a26      	ldr	r2, [pc, #152]	; (80038ec <HAL_DMA_IRQHandler+0x6a0>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d036      	beq.n	80038c4 <HAL_DMA_IRQHandler+0x678>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a25      	ldr	r2, [pc, #148]	; (80038f0 <HAL_DMA_IRQHandler+0x6a4>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d031      	beq.n	80038c4 <HAL_DMA_IRQHandler+0x678>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a23      	ldr	r2, [pc, #140]	; (80038f4 <HAL_DMA_IRQHandler+0x6a8>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d02c      	beq.n	80038c4 <HAL_DMA_IRQHandler+0x678>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a22      	ldr	r2, [pc, #136]	; (80038f8 <HAL_DMA_IRQHandler+0x6ac>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d027      	beq.n	80038c4 <HAL_DMA_IRQHandler+0x678>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a20      	ldr	r2, [pc, #128]	; (80038fc <HAL_DMA_IRQHandler+0x6b0>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d022      	beq.n	80038c4 <HAL_DMA_IRQHandler+0x678>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a1f      	ldr	r2, [pc, #124]	; (8003900 <HAL_DMA_IRQHandler+0x6b4>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d01d      	beq.n	80038c4 <HAL_DMA_IRQHandler+0x678>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a1d      	ldr	r2, [pc, #116]	; (8003904 <HAL_DMA_IRQHandler+0x6b8>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d018      	beq.n	80038c4 <HAL_DMA_IRQHandler+0x678>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a1c      	ldr	r2, [pc, #112]	; (8003908 <HAL_DMA_IRQHandler+0x6bc>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d013      	beq.n	80038c4 <HAL_DMA_IRQHandler+0x678>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a1a      	ldr	r2, [pc, #104]	; (800390c <HAL_DMA_IRQHandler+0x6c0>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d00e      	beq.n	80038c4 <HAL_DMA_IRQHandler+0x678>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a19      	ldr	r2, [pc, #100]	; (8003910 <HAL_DMA_IRQHandler+0x6c4>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d009      	beq.n	80038c4 <HAL_DMA_IRQHandler+0x678>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a17      	ldr	r2, [pc, #92]	; (8003914 <HAL_DMA_IRQHandler+0x6c8>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d004      	beq.n	80038c4 <HAL_DMA_IRQHandler+0x678>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a16      	ldr	r2, [pc, #88]	; (8003918 <HAL_DMA_IRQHandler+0x6cc>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d12b      	bne.n	800391c <HAL_DMA_IRQHandler+0x6d0>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0310 	and.w	r3, r3, #16
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	bf14      	ite	ne
 80038d2:	2301      	movne	r3, #1
 80038d4:	2300      	moveq	r3, #0
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	e02a      	b.n	8003930 <HAL_DMA_IRQHandler+0x6e4>
 80038da:	bf00      	nop
 80038dc:	40020010 	.word	0x40020010
 80038e0:	40020028 	.word	0x40020028
 80038e4:	40020040 	.word	0x40020040
 80038e8:	40020058 	.word	0x40020058
 80038ec:	40020070 	.word	0x40020070
 80038f0:	40020088 	.word	0x40020088
 80038f4:	400200a0 	.word	0x400200a0
 80038f8:	400200b8 	.word	0x400200b8
 80038fc:	40020410 	.word	0x40020410
 8003900:	40020428 	.word	0x40020428
 8003904:	40020440 	.word	0x40020440
 8003908:	40020458 	.word	0x40020458
 800390c:	40020470 	.word	0x40020470
 8003910:	40020488 	.word	0x40020488
 8003914:	400204a0 	.word	0x400204a0
 8003918:	400204b8 	.word	0x400204b8
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0302 	and.w	r3, r3, #2
 8003926:	2b00      	cmp	r3, #0
 8003928:	bf14      	ite	ne
 800392a:	2301      	movne	r3, #1
 800392c:	2300      	moveq	r3, #0
 800392e:	b2db      	uxtb	r3, r3
 8003930:	2b00      	cmp	r3, #0
 8003932:	f000 8087 	beq.w	8003a44 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800393a:	f003 031f 	and.w	r3, r3, #31
 800393e:	2220      	movs	r2, #32
 8003940:	409a      	lsls	r2, r3
 8003942:	6a3b      	ldr	r3, [r7, #32]
 8003944:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b04      	cmp	r3, #4
 8003950:	d139      	bne.n	80039c6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f022 0216 	bic.w	r2, r2, #22
 8003960:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	695a      	ldr	r2, [r3, #20]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003970:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003976:	2b00      	cmp	r3, #0
 8003978:	d103      	bne.n	8003982 <HAL_DMA_IRQHandler+0x736>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800397e:	2b00      	cmp	r3, #0
 8003980:	d007      	beq.n	8003992 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f022 0208 	bic.w	r2, r2, #8
 8003990:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003996:	f003 031f 	and.w	r3, r3, #31
 800399a:	223f      	movs	r2, #63	; 0x3f
 800399c:	409a      	lsls	r2, r3
 800399e:	6a3b      	ldr	r3, [r7, #32]
 80039a0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2201      	movs	r2, #1
 80039a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	f000 834a 	beq.w	8004050 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	4798      	blx	r3
          }
          return;
 80039c4:	e344      	b.n	8004050 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d018      	beq.n	8003a06 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d108      	bne.n	80039f4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d02c      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	4798      	blx	r3
 80039f2:	e027      	b.n	8003a44 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d023      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	4798      	blx	r3
 8003a04:	e01e      	b.n	8003a44 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d10f      	bne.n	8003a34 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f022 0210 	bic.w	r2, r2, #16
 8003a22:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d003      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	f000 8306 	beq.w	800405a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a52:	f003 0301 	and.w	r3, r3, #1
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	f000 8088 	beq.w	8003b6c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2204      	movs	r2, #4
 8003a60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a7a      	ldr	r2, [pc, #488]	; (8003c54 <HAL_DMA_IRQHandler+0xa08>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d04a      	beq.n	8003b04 <HAL_DMA_IRQHandler+0x8b8>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a79      	ldr	r2, [pc, #484]	; (8003c58 <HAL_DMA_IRQHandler+0xa0c>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d045      	beq.n	8003b04 <HAL_DMA_IRQHandler+0x8b8>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a77      	ldr	r2, [pc, #476]	; (8003c5c <HAL_DMA_IRQHandler+0xa10>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d040      	beq.n	8003b04 <HAL_DMA_IRQHandler+0x8b8>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a76      	ldr	r2, [pc, #472]	; (8003c60 <HAL_DMA_IRQHandler+0xa14>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d03b      	beq.n	8003b04 <HAL_DMA_IRQHandler+0x8b8>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a74      	ldr	r2, [pc, #464]	; (8003c64 <HAL_DMA_IRQHandler+0xa18>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d036      	beq.n	8003b04 <HAL_DMA_IRQHandler+0x8b8>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a73      	ldr	r2, [pc, #460]	; (8003c68 <HAL_DMA_IRQHandler+0xa1c>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d031      	beq.n	8003b04 <HAL_DMA_IRQHandler+0x8b8>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a71      	ldr	r2, [pc, #452]	; (8003c6c <HAL_DMA_IRQHandler+0xa20>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d02c      	beq.n	8003b04 <HAL_DMA_IRQHandler+0x8b8>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a70      	ldr	r2, [pc, #448]	; (8003c70 <HAL_DMA_IRQHandler+0xa24>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d027      	beq.n	8003b04 <HAL_DMA_IRQHandler+0x8b8>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a6e      	ldr	r2, [pc, #440]	; (8003c74 <HAL_DMA_IRQHandler+0xa28>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d022      	beq.n	8003b04 <HAL_DMA_IRQHandler+0x8b8>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a6d      	ldr	r2, [pc, #436]	; (8003c78 <HAL_DMA_IRQHandler+0xa2c>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d01d      	beq.n	8003b04 <HAL_DMA_IRQHandler+0x8b8>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a6b      	ldr	r2, [pc, #428]	; (8003c7c <HAL_DMA_IRQHandler+0xa30>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d018      	beq.n	8003b04 <HAL_DMA_IRQHandler+0x8b8>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a6a      	ldr	r2, [pc, #424]	; (8003c80 <HAL_DMA_IRQHandler+0xa34>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d013      	beq.n	8003b04 <HAL_DMA_IRQHandler+0x8b8>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a68      	ldr	r2, [pc, #416]	; (8003c84 <HAL_DMA_IRQHandler+0xa38>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d00e      	beq.n	8003b04 <HAL_DMA_IRQHandler+0x8b8>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a67      	ldr	r2, [pc, #412]	; (8003c88 <HAL_DMA_IRQHandler+0xa3c>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d009      	beq.n	8003b04 <HAL_DMA_IRQHandler+0x8b8>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a65      	ldr	r2, [pc, #404]	; (8003c8c <HAL_DMA_IRQHandler+0xa40>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d004      	beq.n	8003b04 <HAL_DMA_IRQHandler+0x8b8>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a64      	ldr	r2, [pc, #400]	; (8003c90 <HAL_DMA_IRQHandler+0xa44>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d108      	bne.n	8003b16 <HAL_DMA_IRQHandler+0x8ca>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f022 0201 	bic.w	r2, r2, #1
 8003b12:	601a      	str	r2, [r3, #0]
 8003b14:	e007      	b.n	8003b26 <HAL_DMA_IRQHandler+0x8da>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f022 0201 	bic.w	r2, r2, #1
 8003b24:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	3301      	adds	r3, #1
 8003b2a:	60fb      	str	r3, [r7, #12]
 8003b2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d307      	bcc.n	8003b42 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0301 	and.w	r3, r3, #1
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d1f2      	bne.n	8003b26 <HAL_DMA_IRQHandler+0x8da>
 8003b40:	e000      	b.n	8003b44 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003b42:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d004      	beq.n	8003b5c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2203      	movs	r2, #3
 8003b56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003b5a:	e003      	b.n	8003b64 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	f000 8272 	beq.w	800405a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	4798      	blx	r3
 8003b7e:	e26c      	b.n	800405a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a43      	ldr	r2, [pc, #268]	; (8003c94 <HAL_DMA_IRQHandler+0xa48>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d022      	beq.n	8003bd0 <HAL_DMA_IRQHandler+0x984>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a42      	ldr	r2, [pc, #264]	; (8003c98 <HAL_DMA_IRQHandler+0xa4c>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d01d      	beq.n	8003bd0 <HAL_DMA_IRQHandler+0x984>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a40      	ldr	r2, [pc, #256]	; (8003c9c <HAL_DMA_IRQHandler+0xa50>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d018      	beq.n	8003bd0 <HAL_DMA_IRQHandler+0x984>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a3f      	ldr	r2, [pc, #252]	; (8003ca0 <HAL_DMA_IRQHandler+0xa54>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d013      	beq.n	8003bd0 <HAL_DMA_IRQHandler+0x984>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a3d      	ldr	r2, [pc, #244]	; (8003ca4 <HAL_DMA_IRQHandler+0xa58>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d00e      	beq.n	8003bd0 <HAL_DMA_IRQHandler+0x984>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a3c      	ldr	r2, [pc, #240]	; (8003ca8 <HAL_DMA_IRQHandler+0xa5c>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d009      	beq.n	8003bd0 <HAL_DMA_IRQHandler+0x984>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a3a      	ldr	r2, [pc, #232]	; (8003cac <HAL_DMA_IRQHandler+0xa60>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d004      	beq.n	8003bd0 <HAL_DMA_IRQHandler+0x984>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a39      	ldr	r2, [pc, #228]	; (8003cb0 <HAL_DMA_IRQHandler+0xa64>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d101      	bne.n	8003bd4 <HAL_DMA_IRQHandler+0x988>
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e000      	b.n	8003bd6 <HAL_DMA_IRQHandler+0x98a>
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	f000 823f 	beq.w	800405a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003be8:	f003 031f 	and.w	r3, r3, #31
 8003bec:	2204      	movs	r2, #4
 8003bee:	409a      	lsls	r2, r3
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	f000 80cd 	beq.w	8003d94 <HAL_DMA_IRQHandler+0xb48>
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	f003 0304 	and.w	r3, r3, #4
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	f000 80c7 	beq.w	8003d94 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c0a:	f003 031f 	and.w	r3, r3, #31
 8003c0e:	2204      	movs	r2, #4
 8003c10:	409a      	lsls	r2, r3
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d049      	beq.n	8003cb4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d109      	bne.n	8003c3e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	f000 8210 	beq.w	8004054 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c3c:	e20a      	b.n	8004054 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	f000 8206 	beq.w	8004054 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c50:	e200      	b.n	8004054 <HAL_DMA_IRQHandler+0xe08>
 8003c52:	bf00      	nop
 8003c54:	40020010 	.word	0x40020010
 8003c58:	40020028 	.word	0x40020028
 8003c5c:	40020040 	.word	0x40020040
 8003c60:	40020058 	.word	0x40020058
 8003c64:	40020070 	.word	0x40020070
 8003c68:	40020088 	.word	0x40020088
 8003c6c:	400200a0 	.word	0x400200a0
 8003c70:	400200b8 	.word	0x400200b8
 8003c74:	40020410 	.word	0x40020410
 8003c78:	40020428 	.word	0x40020428
 8003c7c:	40020440 	.word	0x40020440
 8003c80:	40020458 	.word	0x40020458
 8003c84:	40020470 	.word	0x40020470
 8003c88:	40020488 	.word	0x40020488
 8003c8c:	400204a0 	.word	0x400204a0
 8003c90:	400204b8 	.word	0x400204b8
 8003c94:	58025408 	.word	0x58025408
 8003c98:	5802541c 	.word	0x5802541c
 8003c9c:	58025430 	.word	0x58025430
 8003ca0:	58025444 	.word	0x58025444
 8003ca4:	58025458 	.word	0x58025458
 8003ca8:	5802546c 	.word	0x5802546c
 8003cac:	58025480 	.word	0x58025480
 8003cb0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	f003 0320 	and.w	r3, r3, #32
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d160      	bne.n	8003d80 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a8c      	ldr	r2, [pc, #560]	; (8003ef4 <HAL_DMA_IRQHandler+0xca8>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d04a      	beq.n	8003d5e <HAL_DMA_IRQHandler+0xb12>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a8a      	ldr	r2, [pc, #552]	; (8003ef8 <HAL_DMA_IRQHandler+0xcac>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d045      	beq.n	8003d5e <HAL_DMA_IRQHandler+0xb12>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a89      	ldr	r2, [pc, #548]	; (8003efc <HAL_DMA_IRQHandler+0xcb0>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d040      	beq.n	8003d5e <HAL_DMA_IRQHandler+0xb12>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a87      	ldr	r2, [pc, #540]	; (8003f00 <HAL_DMA_IRQHandler+0xcb4>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d03b      	beq.n	8003d5e <HAL_DMA_IRQHandler+0xb12>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a86      	ldr	r2, [pc, #536]	; (8003f04 <HAL_DMA_IRQHandler+0xcb8>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d036      	beq.n	8003d5e <HAL_DMA_IRQHandler+0xb12>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a84      	ldr	r2, [pc, #528]	; (8003f08 <HAL_DMA_IRQHandler+0xcbc>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d031      	beq.n	8003d5e <HAL_DMA_IRQHandler+0xb12>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a83      	ldr	r2, [pc, #524]	; (8003f0c <HAL_DMA_IRQHandler+0xcc0>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d02c      	beq.n	8003d5e <HAL_DMA_IRQHandler+0xb12>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a81      	ldr	r2, [pc, #516]	; (8003f10 <HAL_DMA_IRQHandler+0xcc4>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d027      	beq.n	8003d5e <HAL_DMA_IRQHandler+0xb12>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a80      	ldr	r2, [pc, #512]	; (8003f14 <HAL_DMA_IRQHandler+0xcc8>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d022      	beq.n	8003d5e <HAL_DMA_IRQHandler+0xb12>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a7e      	ldr	r2, [pc, #504]	; (8003f18 <HAL_DMA_IRQHandler+0xccc>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d01d      	beq.n	8003d5e <HAL_DMA_IRQHandler+0xb12>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a7d      	ldr	r2, [pc, #500]	; (8003f1c <HAL_DMA_IRQHandler+0xcd0>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d018      	beq.n	8003d5e <HAL_DMA_IRQHandler+0xb12>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a7b      	ldr	r2, [pc, #492]	; (8003f20 <HAL_DMA_IRQHandler+0xcd4>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d013      	beq.n	8003d5e <HAL_DMA_IRQHandler+0xb12>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a7a      	ldr	r2, [pc, #488]	; (8003f24 <HAL_DMA_IRQHandler+0xcd8>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d00e      	beq.n	8003d5e <HAL_DMA_IRQHandler+0xb12>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a78      	ldr	r2, [pc, #480]	; (8003f28 <HAL_DMA_IRQHandler+0xcdc>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d009      	beq.n	8003d5e <HAL_DMA_IRQHandler+0xb12>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a77      	ldr	r2, [pc, #476]	; (8003f2c <HAL_DMA_IRQHandler+0xce0>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d004      	beq.n	8003d5e <HAL_DMA_IRQHandler+0xb12>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a75      	ldr	r2, [pc, #468]	; (8003f30 <HAL_DMA_IRQHandler+0xce4>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d108      	bne.n	8003d70 <HAL_DMA_IRQHandler+0xb24>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f022 0208 	bic.w	r2, r2, #8
 8003d6c:	601a      	str	r2, [r3, #0]
 8003d6e:	e007      	b.n	8003d80 <HAL_DMA_IRQHandler+0xb34>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f022 0204 	bic.w	r2, r2, #4
 8003d7e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	f000 8165 	beq.w	8004054 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d92:	e15f      	b.n	8004054 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d98:	f003 031f 	and.w	r3, r3, #31
 8003d9c:	2202      	movs	r2, #2
 8003d9e:	409a      	lsls	r2, r3
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	4013      	ands	r3, r2
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	f000 80c5 	beq.w	8003f34 <HAL_DMA_IRQHandler+0xce8>
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	f003 0302 	and.w	r3, r3, #2
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	f000 80bf 	beq.w	8003f34 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dba:	f003 031f 	and.w	r3, r3, #31
 8003dbe:	2202      	movs	r2, #2
 8003dc0:	409a      	lsls	r2, r3
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d018      	beq.n	8003e02 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d109      	bne.n	8003dee <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	f000 813a 	beq.w	8004058 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003dec:	e134      	b.n	8004058 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	f000 8130 	beq.w	8004058 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e00:	e12a      	b.n	8004058 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	f003 0320 	and.w	r3, r3, #32
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d168      	bne.n	8003ede <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a38      	ldr	r2, [pc, #224]	; (8003ef4 <HAL_DMA_IRQHandler+0xca8>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d04a      	beq.n	8003eac <HAL_DMA_IRQHandler+0xc60>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a37      	ldr	r2, [pc, #220]	; (8003ef8 <HAL_DMA_IRQHandler+0xcac>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d045      	beq.n	8003eac <HAL_DMA_IRQHandler+0xc60>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a35      	ldr	r2, [pc, #212]	; (8003efc <HAL_DMA_IRQHandler+0xcb0>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d040      	beq.n	8003eac <HAL_DMA_IRQHandler+0xc60>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a34      	ldr	r2, [pc, #208]	; (8003f00 <HAL_DMA_IRQHandler+0xcb4>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d03b      	beq.n	8003eac <HAL_DMA_IRQHandler+0xc60>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a32      	ldr	r2, [pc, #200]	; (8003f04 <HAL_DMA_IRQHandler+0xcb8>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d036      	beq.n	8003eac <HAL_DMA_IRQHandler+0xc60>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a31      	ldr	r2, [pc, #196]	; (8003f08 <HAL_DMA_IRQHandler+0xcbc>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d031      	beq.n	8003eac <HAL_DMA_IRQHandler+0xc60>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a2f      	ldr	r2, [pc, #188]	; (8003f0c <HAL_DMA_IRQHandler+0xcc0>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d02c      	beq.n	8003eac <HAL_DMA_IRQHandler+0xc60>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a2e      	ldr	r2, [pc, #184]	; (8003f10 <HAL_DMA_IRQHandler+0xcc4>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d027      	beq.n	8003eac <HAL_DMA_IRQHandler+0xc60>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a2c      	ldr	r2, [pc, #176]	; (8003f14 <HAL_DMA_IRQHandler+0xcc8>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d022      	beq.n	8003eac <HAL_DMA_IRQHandler+0xc60>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a2b      	ldr	r2, [pc, #172]	; (8003f18 <HAL_DMA_IRQHandler+0xccc>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d01d      	beq.n	8003eac <HAL_DMA_IRQHandler+0xc60>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a29      	ldr	r2, [pc, #164]	; (8003f1c <HAL_DMA_IRQHandler+0xcd0>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d018      	beq.n	8003eac <HAL_DMA_IRQHandler+0xc60>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a28      	ldr	r2, [pc, #160]	; (8003f20 <HAL_DMA_IRQHandler+0xcd4>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d013      	beq.n	8003eac <HAL_DMA_IRQHandler+0xc60>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a26      	ldr	r2, [pc, #152]	; (8003f24 <HAL_DMA_IRQHandler+0xcd8>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d00e      	beq.n	8003eac <HAL_DMA_IRQHandler+0xc60>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a25      	ldr	r2, [pc, #148]	; (8003f28 <HAL_DMA_IRQHandler+0xcdc>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d009      	beq.n	8003eac <HAL_DMA_IRQHandler+0xc60>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a23      	ldr	r2, [pc, #140]	; (8003f2c <HAL_DMA_IRQHandler+0xce0>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d004      	beq.n	8003eac <HAL_DMA_IRQHandler+0xc60>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a22      	ldr	r2, [pc, #136]	; (8003f30 <HAL_DMA_IRQHandler+0xce4>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d108      	bne.n	8003ebe <HAL_DMA_IRQHandler+0xc72>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f022 0214 	bic.w	r2, r2, #20
 8003eba:	601a      	str	r2, [r3, #0]
 8003ebc:	e007      	b.n	8003ece <HAL_DMA_IRQHandler+0xc82>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f022 020a 	bic.w	r2, r2, #10
 8003ecc:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	f000 80b8 	beq.w	8004058 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ef0:	e0b2      	b.n	8004058 <HAL_DMA_IRQHandler+0xe0c>
 8003ef2:	bf00      	nop
 8003ef4:	40020010 	.word	0x40020010
 8003ef8:	40020028 	.word	0x40020028
 8003efc:	40020040 	.word	0x40020040
 8003f00:	40020058 	.word	0x40020058
 8003f04:	40020070 	.word	0x40020070
 8003f08:	40020088 	.word	0x40020088
 8003f0c:	400200a0 	.word	0x400200a0
 8003f10:	400200b8 	.word	0x400200b8
 8003f14:	40020410 	.word	0x40020410
 8003f18:	40020428 	.word	0x40020428
 8003f1c:	40020440 	.word	0x40020440
 8003f20:	40020458 	.word	0x40020458
 8003f24:	40020470 	.word	0x40020470
 8003f28:	40020488 	.word	0x40020488
 8003f2c:	400204a0 	.word	0x400204a0
 8003f30:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f38:	f003 031f 	and.w	r3, r3, #31
 8003f3c:	2208      	movs	r2, #8
 8003f3e:	409a      	lsls	r2, r3
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	4013      	ands	r3, r2
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	f000 8088 	beq.w	800405a <HAL_DMA_IRQHandler+0xe0e>
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	f003 0308 	and.w	r3, r3, #8
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	f000 8082 	beq.w	800405a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a41      	ldr	r2, [pc, #260]	; (8004060 <HAL_DMA_IRQHandler+0xe14>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d04a      	beq.n	8003ff6 <HAL_DMA_IRQHandler+0xdaa>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a3f      	ldr	r2, [pc, #252]	; (8004064 <HAL_DMA_IRQHandler+0xe18>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d045      	beq.n	8003ff6 <HAL_DMA_IRQHandler+0xdaa>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a3e      	ldr	r2, [pc, #248]	; (8004068 <HAL_DMA_IRQHandler+0xe1c>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d040      	beq.n	8003ff6 <HAL_DMA_IRQHandler+0xdaa>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a3c      	ldr	r2, [pc, #240]	; (800406c <HAL_DMA_IRQHandler+0xe20>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d03b      	beq.n	8003ff6 <HAL_DMA_IRQHandler+0xdaa>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a3b      	ldr	r2, [pc, #236]	; (8004070 <HAL_DMA_IRQHandler+0xe24>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d036      	beq.n	8003ff6 <HAL_DMA_IRQHandler+0xdaa>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a39      	ldr	r2, [pc, #228]	; (8004074 <HAL_DMA_IRQHandler+0xe28>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d031      	beq.n	8003ff6 <HAL_DMA_IRQHandler+0xdaa>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a38      	ldr	r2, [pc, #224]	; (8004078 <HAL_DMA_IRQHandler+0xe2c>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d02c      	beq.n	8003ff6 <HAL_DMA_IRQHandler+0xdaa>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a36      	ldr	r2, [pc, #216]	; (800407c <HAL_DMA_IRQHandler+0xe30>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d027      	beq.n	8003ff6 <HAL_DMA_IRQHandler+0xdaa>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a35      	ldr	r2, [pc, #212]	; (8004080 <HAL_DMA_IRQHandler+0xe34>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d022      	beq.n	8003ff6 <HAL_DMA_IRQHandler+0xdaa>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a33      	ldr	r2, [pc, #204]	; (8004084 <HAL_DMA_IRQHandler+0xe38>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d01d      	beq.n	8003ff6 <HAL_DMA_IRQHandler+0xdaa>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a32      	ldr	r2, [pc, #200]	; (8004088 <HAL_DMA_IRQHandler+0xe3c>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d018      	beq.n	8003ff6 <HAL_DMA_IRQHandler+0xdaa>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a30      	ldr	r2, [pc, #192]	; (800408c <HAL_DMA_IRQHandler+0xe40>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d013      	beq.n	8003ff6 <HAL_DMA_IRQHandler+0xdaa>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a2f      	ldr	r2, [pc, #188]	; (8004090 <HAL_DMA_IRQHandler+0xe44>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d00e      	beq.n	8003ff6 <HAL_DMA_IRQHandler+0xdaa>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a2d      	ldr	r2, [pc, #180]	; (8004094 <HAL_DMA_IRQHandler+0xe48>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d009      	beq.n	8003ff6 <HAL_DMA_IRQHandler+0xdaa>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a2c      	ldr	r2, [pc, #176]	; (8004098 <HAL_DMA_IRQHandler+0xe4c>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d004      	beq.n	8003ff6 <HAL_DMA_IRQHandler+0xdaa>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a2a      	ldr	r2, [pc, #168]	; (800409c <HAL_DMA_IRQHandler+0xe50>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d108      	bne.n	8004008 <HAL_DMA_IRQHandler+0xdbc>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f022 021c 	bic.w	r2, r2, #28
 8004004:	601a      	str	r2, [r3, #0]
 8004006:	e007      	b.n	8004018 <HAL_DMA_IRQHandler+0xdcc>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f022 020e 	bic.w	r2, r2, #14
 8004016:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800401c:	f003 031f 	and.w	r3, r3, #31
 8004020:	2201      	movs	r2, #1
 8004022:	409a      	lsls	r2, r3
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2201      	movs	r2, #1
 8004032:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004042:	2b00      	cmp	r3, #0
 8004044:	d009      	beq.n	800405a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	4798      	blx	r3
 800404e:	e004      	b.n	800405a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004050:	bf00      	nop
 8004052:	e002      	b.n	800405a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004054:	bf00      	nop
 8004056:	e000      	b.n	800405a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004058:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800405a:	3728      	adds	r7, #40	; 0x28
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}
 8004060:	40020010 	.word	0x40020010
 8004064:	40020028 	.word	0x40020028
 8004068:	40020040 	.word	0x40020040
 800406c:	40020058 	.word	0x40020058
 8004070:	40020070 	.word	0x40020070
 8004074:	40020088 	.word	0x40020088
 8004078:	400200a0 	.word	0x400200a0
 800407c:	400200b8 	.word	0x400200b8
 8004080:	40020410 	.word	0x40020410
 8004084:	40020428 	.word	0x40020428
 8004088:	40020440 	.word	0x40020440
 800408c:	40020458 	.word	0x40020458
 8004090:	40020470 	.word	0x40020470
 8004094:	40020488 	.word	0x40020488
 8004098:	400204a0 	.word	0x400204a0
 800409c:	400204b8 	.word	0x400204b8

080040a0 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040ae:	b2db      	uxtb	r3, r3
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	370c      	adds	r7, #12
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80040bc:	b480      	push	{r7}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	370c      	adds	r7, #12
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr

080040d4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b087      	sub	sp, #28
 80040d8:	af00      	add	r7, sp, #0
 80040da:	60f8      	str	r0, [r7, #12]
 80040dc:	60b9      	str	r1, [r7, #8]
 80040de:	607a      	str	r2, [r7, #4]
 80040e0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040e6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ec:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a84      	ldr	r2, [pc, #528]	; (8004304 <DMA_SetConfig+0x230>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d072      	beq.n	80041de <DMA_SetConfig+0x10a>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a82      	ldr	r2, [pc, #520]	; (8004308 <DMA_SetConfig+0x234>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d06d      	beq.n	80041de <DMA_SetConfig+0x10a>
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a81      	ldr	r2, [pc, #516]	; (800430c <DMA_SetConfig+0x238>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d068      	beq.n	80041de <DMA_SetConfig+0x10a>
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a7f      	ldr	r2, [pc, #508]	; (8004310 <DMA_SetConfig+0x23c>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d063      	beq.n	80041de <DMA_SetConfig+0x10a>
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a7e      	ldr	r2, [pc, #504]	; (8004314 <DMA_SetConfig+0x240>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d05e      	beq.n	80041de <DMA_SetConfig+0x10a>
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a7c      	ldr	r2, [pc, #496]	; (8004318 <DMA_SetConfig+0x244>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d059      	beq.n	80041de <DMA_SetConfig+0x10a>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a7b      	ldr	r2, [pc, #492]	; (800431c <DMA_SetConfig+0x248>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d054      	beq.n	80041de <DMA_SetConfig+0x10a>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a79      	ldr	r2, [pc, #484]	; (8004320 <DMA_SetConfig+0x24c>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d04f      	beq.n	80041de <DMA_SetConfig+0x10a>
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a78      	ldr	r2, [pc, #480]	; (8004324 <DMA_SetConfig+0x250>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d04a      	beq.n	80041de <DMA_SetConfig+0x10a>
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a76      	ldr	r2, [pc, #472]	; (8004328 <DMA_SetConfig+0x254>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d045      	beq.n	80041de <DMA_SetConfig+0x10a>
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a75      	ldr	r2, [pc, #468]	; (800432c <DMA_SetConfig+0x258>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d040      	beq.n	80041de <DMA_SetConfig+0x10a>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a73      	ldr	r2, [pc, #460]	; (8004330 <DMA_SetConfig+0x25c>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d03b      	beq.n	80041de <DMA_SetConfig+0x10a>
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a72      	ldr	r2, [pc, #456]	; (8004334 <DMA_SetConfig+0x260>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d036      	beq.n	80041de <DMA_SetConfig+0x10a>
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a70      	ldr	r2, [pc, #448]	; (8004338 <DMA_SetConfig+0x264>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d031      	beq.n	80041de <DMA_SetConfig+0x10a>
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a6f      	ldr	r2, [pc, #444]	; (800433c <DMA_SetConfig+0x268>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d02c      	beq.n	80041de <DMA_SetConfig+0x10a>
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a6d      	ldr	r2, [pc, #436]	; (8004340 <DMA_SetConfig+0x26c>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d027      	beq.n	80041de <DMA_SetConfig+0x10a>
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a6c      	ldr	r2, [pc, #432]	; (8004344 <DMA_SetConfig+0x270>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d022      	beq.n	80041de <DMA_SetConfig+0x10a>
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a6a      	ldr	r2, [pc, #424]	; (8004348 <DMA_SetConfig+0x274>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d01d      	beq.n	80041de <DMA_SetConfig+0x10a>
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a69      	ldr	r2, [pc, #420]	; (800434c <DMA_SetConfig+0x278>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d018      	beq.n	80041de <DMA_SetConfig+0x10a>
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a67      	ldr	r2, [pc, #412]	; (8004350 <DMA_SetConfig+0x27c>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d013      	beq.n	80041de <DMA_SetConfig+0x10a>
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a66      	ldr	r2, [pc, #408]	; (8004354 <DMA_SetConfig+0x280>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d00e      	beq.n	80041de <DMA_SetConfig+0x10a>
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a64      	ldr	r2, [pc, #400]	; (8004358 <DMA_SetConfig+0x284>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d009      	beq.n	80041de <DMA_SetConfig+0x10a>
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a63      	ldr	r2, [pc, #396]	; (800435c <DMA_SetConfig+0x288>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d004      	beq.n	80041de <DMA_SetConfig+0x10a>
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a61      	ldr	r2, [pc, #388]	; (8004360 <DMA_SetConfig+0x28c>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d101      	bne.n	80041e2 <DMA_SetConfig+0x10e>
 80041de:	2301      	movs	r3, #1
 80041e0:	e000      	b.n	80041e4 <DMA_SetConfig+0x110>
 80041e2:	2300      	movs	r3, #0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d00d      	beq.n	8004204 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041ec:	68fa      	ldr	r2, [r7, #12]
 80041ee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80041f0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d004      	beq.n	8004204 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041fe:	68fa      	ldr	r2, [r7, #12]
 8004200:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004202:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a3e      	ldr	r2, [pc, #248]	; (8004304 <DMA_SetConfig+0x230>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d04a      	beq.n	80042a4 <DMA_SetConfig+0x1d0>
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a3d      	ldr	r2, [pc, #244]	; (8004308 <DMA_SetConfig+0x234>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d045      	beq.n	80042a4 <DMA_SetConfig+0x1d0>
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a3b      	ldr	r2, [pc, #236]	; (800430c <DMA_SetConfig+0x238>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d040      	beq.n	80042a4 <DMA_SetConfig+0x1d0>
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a3a      	ldr	r2, [pc, #232]	; (8004310 <DMA_SetConfig+0x23c>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d03b      	beq.n	80042a4 <DMA_SetConfig+0x1d0>
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a38      	ldr	r2, [pc, #224]	; (8004314 <DMA_SetConfig+0x240>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d036      	beq.n	80042a4 <DMA_SetConfig+0x1d0>
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a37      	ldr	r2, [pc, #220]	; (8004318 <DMA_SetConfig+0x244>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d031      	beq.n	80042a4 <DMA_SetConfig+0x1d0>
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a35      	ldr	r2, [pc, #212]	; (800431c <DMA_SetConfig+0x248>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d02c      	beq.n	80042a4 <DMA_SetConfig+0x1d0>
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a34      	ldr	r2, [pc, #208]	; (8004320 <DMA_SetConfig+0x24c>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d027      	beq.n	80042a4 <DMA_SetConfig+0x1d0>
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a32      	ldr	r2, [pc, #200]	; (8004324 <DMA_SetConfig+0x250>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d022      	beq.n	80042a4 <DMA_SetConfig+0x1d0>
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a31      	ldr	r2, [pc, #196]	; (8004328 <DMA_SetConfig+0x254>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d01d      	beq.n	80042a4 <DMA_SetConfig+0x1d0>
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a2f      	ldr	r2, [pc, #188]	; (800432c <DMA_SetConfig+0x258>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d018      	beq.n	80042a4 <DMA_SetConfig+0x1d0>
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a2e      	ldr	r2, [pc, #184]	; (8004330 <DMA_SetConfig+0x25c>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d013      	beq.n	80042a4 <DMA_SetConfig+0x1d0>
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a2c      	ldr	r2, [pc, #176]	; (8004334 <DMA_SetConfig+0x260>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d00e      	beq.n	80042a4 <DMA_SetConfig+0x1d0>
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a2b      	ldr	r2, [pc, #172]	; (8004338 <DMA_SetConfig+0x264>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d009      	beq.n	80042a4 <DMA_SetConfig+0x1d0>
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a29      	ldr	r2, [pc, #164]	; (800433c <DMA_SetConfig+0x268>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d004      	beq.n	80042a4 <DMA_SetConfig+0x1d0>
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a28      	ldr	r2, [pc, #160]	; (8004340 <DMA_SetConfig+0x26c>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d101      	bne.n	80042a8 <DMA_SetConfig+0x1d4>
 80042a4:	2301      	movs	r3, #1
 80042a6:	e000      	b.n	80042aa <DMA_SetConfig+0x1d6>
 80042a8:	2300      	movs	r3, #0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d05a      	beq.n	8004364 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042b2:	f003 031f 	and.w	r3, r3, #31
 80042b6:	223f      	movs	r2, #63	; 0x3f
 80042b8:	409a      	lsls	r2, r3
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80042cc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	683a      	ldr	r2, [r7, #0]
 80042d4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	2b40      	cmp	r3, #64	; 0x40
 80042dc:	d108      	bne.n	80042f0 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	68ba      	ldr	r2, [r7, #8]
 80042ec:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80042ee:	e087      	b.n	8004400 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	68ba      	ldr	r2, [r7, #8]
 80042f6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	60da      	str	r2, [r3, #12]
}
 8004300:	e07e      	b.n	8004400 <DMA_SetConfig+0x32c>
 8004302:	bf00      	nop
 8004304:	40020010 	.word	0x40020010
 8004308:	40020028 	.word	0x40020028
 800430c:	40020040 	.word	0x40020040
 8004310:	40020058 	.word	0x40020058
 8004314:	40020070 	.word	0x40020070
 8004318:	40020088 	.word	0x40020088
 800431c:	400200a0 	.word	0x400200a0
 8004320:	400200b8 	.word	0x400200b8
 8004324:	40020410 	.word	0x40020410
 8004328:	40020428 	.word	0x40020428
 800432c:	40020440 	.word	0x40020440
 8004330:	40020458 	.word	0x40020458
 8004334:	40020470 	.word	0x40020470
 8004338:	40020488 	.word	0x40020488
 800433c:	400204a0 	.word	0x400204a0
 8004340:	400204b8 	.word	0x400204b8
 8004344:	58025408 	.word	0x58025408
 8004348:	5802541c 	.word	0x5802541c
 800434c:	58025430 	.word	0x58025430
 8004350:	58025444 	.word	0x58025444
 8004354:	58025458 	.word	0x58025458
 8004358:	5802546c 	.word	0x5802546c
 800435c:	58025480 	.word	0x58025480
 8004360:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a28      	ldr	r2, [pc, #160]	; (800440c <DMA_SetConfig+0x338>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d022      	beq.n	80043b4 <DMA_SetConfig+0x2e0>
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a27      	ldr	r2, [pc, #156]	; (8004410 <DMA_SetConfig+0x33c>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d01d      	beq.n	80043b4 <DMA_SetConfig+0x2e0>
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a25      	ldr	r2, [pc, #148]	; (8004414 <DMA_SetConfig+0x340>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d018      	beq.n	80043b4 <DMA_SetConfig+0x2e0>
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a24      	ldr	r2, [pc, #144]	; (8004418 <DMA_SetConfig+0x344>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d013      	beq.n	80043b4 <DMA_SetConfig+0x2e0>
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a22      	ldr	r2, [pc, #136]	; (800441c <DMA_SetConfig+0x348>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d00e      	beq.n	80043b4 <DMA_SetConfig+0x2e0>
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a21      	ldr	r2, [pc, #132]	; (8004420 <DMA_SetConfig+0x34c>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d009      	beq.n	80043b4 <DMA_SetConfig+0x2e0>
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a1f      	ldr	r2, [pc, #124]	; (8004424 <DMA_SetConfig+0x350>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d004      	beq.n	80043b4 <DMA_SetConfig+0x2e0>
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a1e      	ldr	r2, [pc, #120]	; (8004428 <DMA_SetConfig+0x354>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d101      	bne.n	80043b8 <DMA_SetConfig+0x2e4>
 80043b4:	2301      	movs	r3, #1
 80043b6:	e000      	b.n	80043ba <DMA_SetConfig+0x2e6>
 80043b8:	2300      	movs	r3, #0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d020      	beq.n	8004400 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043c2:	f003 031f 	and.w	r3, r3, #31
 80043c6:	2201      	movs	r2, #1
 80043c8:	409a      	lsls	r2, r3
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	683a      	ldr	r2, [r7, #0]
 80043d4:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	2b40      	cmp	r3, #64	; 0x40
 80043dc:	d108      	bne.n	80043f0 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	68ba      	ldr	r2, [r7, #8]
 80043ec:	60da      	str	r2, [r3, #12]
}
 80043ee:	e007      	b.n	8004400 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	68ba      	ldr	r2, [r7, #8]
 80043f6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	60da      	str	r2, [r3, #12]
}
 8004400:	bf00      	nop
 8004402:	371c      	adds	r7, #28
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr
 800440c:	58025408 	.word	0x58025408
 8004410:	5802541c 	.word	0x5802541c
 8004414:	58025430 	.word	0x58025430
 8004418:	58025444 	.word	0x58025444
 800441c:	58025458 	.word	0x58025458
 8004420:	5802546c 	.word	0x5802546c
 8004424:	58025480 	.word	0x58025480
 8004428:	58025494 	.word	0x58025494

0800442c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800442c:	b480      	push	{r7}
 800442e:	b085      	sub	sp, #20
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a42      	ldr	r2, [pc, #264]	; (8004544 <DMA_CalcBaseAndBitshift+0x118>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d04a      	beq.n	80044d4 <DMA_CalcBaseAndBitshift+0xa8>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a41      	ldr	r2, [pc, #260]	; (8004548 <DMA_CalcBaseAndBitshift+0x11c>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d045      	beq.n	80044d4 <DMA_CalcBaseAndBitshift+0xa8>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a3f      	ldr	r2, [pc, #252]	; (800454c <DMA_CalcBaseAndBitshift+0x120>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d040      	beq.n	80044d4 <DMA_CalcBaseAndBitshift+0xa8>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a3e      	ldr	r2, [pc, #248]	; (8004550 <DMA_CalcBaseAndBitshift+0x124>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d03b      	beq.n	80044d4 <DMA_CalcBaseAndBitshift+0xa8>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a3c      	ldr	r2, [pc, #240]	; (8004554 <DMA_CalcBaseAndBitshift+0x128>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d036      	beq.n	80044d4 <DMA_CalcBaseAndBitshift+0xa8>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a3b      	ldr	r2, [pc, #236]	; (8004558 <DMA_CalcBaseAndBitshift+0x12c>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d031      	beq.n	80044d4 <DMA_CalcBaseAndBitshift+0xa8>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a39      	ldr	r2, [pc, #228]	; (800455c <DMA_CalcBaseAndBitshift+0x130>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d02c      	beq.n	80044d4 <DMA_CalcBaseAndBitshift+0xa8>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a38      	ldr	r2, [pc, #224]	; (8004560 <DMA_CalcBaseAndBitshift+0x134>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d027      	beq.n	80044d4 <DMA_CalcBaseAndBitshift+0xa8>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a36      	ldr	r2, [pc, #216]	; (8004564 <DMA_CalcBaseAndBitshift+0x138>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d022      	beq.n	80044d4 <DMA_CalcBaseAndBitshift+0xa8>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a35      	ldr	r2, [pc, #212]	; (8004568 <DMA_CalcBaseAndBitshift+0x13c>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d01d      	beq.n	80044d4 <DMA_CalcBaseAndBitshift+0xa8>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a33      	ldr	r2, [pc, #204]	; (800456c <DMA_CalcBaseAndBitshift+0x140>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d018      	beq.n	80044d4 <DMA_CalcBaseAndBitshift+0xa8>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a32      	ldr	r2, [pc, #200]	; (8004570 <DMA_CalcBaseAndBitshift+0x144>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d013      	beq.n	80044d4 <DMA_CalcBaseAndBitshift+0xa8>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a30      	ldr	r2, [pc, #192]	; (8004574 <DMA_CalcBaseAndBitshift+0x148>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d00e      	beq.n	80044d4 <DMA_CalcBaseAndBitshift+0xa8>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a2f      	ldr	r2, [pc, #188]	; (8004578 <DMA_CalcBaseAndBitshift+0x14c>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d009      	beq.n	80044d4 <DMA_CalcBaseAndBitshift+0xa8>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a2d      	ldr	r2, [pc, #180]	; (800457c <DMA_CalcBaseAndBitshift+0x150>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d004      	beq.n	80044d4 <DMA_CalcBaseAndBitshift+0xa8>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a2c      	ldr	r2, [pc, #176]	; (8004580 <DMA_CalcBaseAndBitshift+0x154>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d101      	bne.n	80044d8 <DMA_CalcBaseAndBitshift+0xac>
 80044d4:	2301      	movs	r3, #1
 80044d6:	e000      	b.n	80044da <DMA_CalcBaseAndBitshift+0xae>
 80044d8:	2300      	movs	r3, #0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d024      	beq.n	8004528 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	3b10      	subs	r3, #16
 80044e6:	4a27      	ldr	r2, [pc, #156]	; (8004584 <DMA_CalcBaseAndBitshift+0x158>)
 80044e8:	fba2 2303 	umull	r2, r3, r2, r3
 80044ec:	091b      	lsrs	r3, r3, #4
 80044ee:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f003 0307 	and.w	r3, r3, #7
 80044f6:	4a24      	ldr	r2, [pc, #144]	; (8004588 <DMA_CalcBaseAndBitshift+0x15c>)
 80044f8:	5cd3      	ldrb	r3, [r2, r3]
 80044fa:	461a      	mov	r2, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2b03      	cmp	r3, #3
 8004504:	d908      	bls.n	8004518 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	461a      	mov	r2, r3
 800450c:	4b1f      	ldr	r3, [pc, #124]	; (800458c <DMA_CalcBaseAndBitshift+0x160>)
 800450e:	4013      	ands	r3, r2
 8004510:	1d1a      	adds	r2, r3, #4
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	659a      	str	r2, [r3, #88]	; 0x58
 8004516:	e00d      	b.n	8004534 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	461a      	mov	r2, r3
 800451e:	4b1b      	ldr	r3, [pc, #108]	; (800458c <DMA_CalcBaseAndBitshift+0x160>)
 8004520:	4013      	ands	r3, r2
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	6593      	str	r3, [r2, #88]	; 0x58
 8004526:	e005      	b.n	8004534 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004538:	4618      	mov	r0, r3
 800453a:	3714      	adds	r7, #20
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr
 8004544:	40020010 	.word	0x40020010
 8004548:	40020028 	.word	0x40020028
 800454c:	40020040 	.word	0x40020040
 8004550:	40020058 	.word	0x40020058
 8004554:	40020070 	.word	0x40020070
 8004558:	40020088 	.word	0x40020088
 800455c:	400200a0 	.word	0x400200a0
 8004560:	400200b8 	.word	0x400200b8
 8004564:	40020410 	.word	0x40020410
 8004568:	40020428 	.word	0x40020428
 800456c:	40020440 	.word	0x40020440
 8004570:	40020458 	.word	0x40020458
 8004574:	40020470 	.word	0x40020470
 8004578:	40020488 	.word	0x40020488
 800457c:	400204a0 	.word	0x400204a0
 8004580:	400204b8 	.word	0x400204b8
 8004584:	aaaaaaab 	.word	0xaaaaaaab
 8004588:	0800d730 	.word	0x0800d730
 800458c:	fffffc00 	.word	0xfffffc00

08004590 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004590:	b480      	push	{r7}
 8004592:	b085      	sub	sp, #20
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004598:	2300      	movs	r3, #0
 800459a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	699b      	ldr	r3, [r3, #24]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d120      	bne.n	80045e6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a8:	2b03      	cmp	r3, #3
 80045aa:	d858      	bhi.n	800465e <DMA_CheckFifoParam+0xce>
 80045ac:	a201      	add	r2, pc, #4	; (adr r2, 80045b4 <DMA_CheckFifoParam+0x24>)
 80045ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b2:	bf00      	nop
 80045b4:	080045c5 	.word	0x080045c5
 80045b8:	080045d7 	.word	0x080045d7
 80045bc:	080045c5 	.word	0x080045c5
 80045c0:	0800465f 	.word	0x0800465f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d048      	beq.n	8004662 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80045d4:	e045      	b.n	8004662 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045da:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80045de:	d142      	bne.n	8004666 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80045e4:	e03f      	b.n	8004666 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	699b      	ldr	r3, [r3, #24]
 80045ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045ee:	d123      	bne.n	8004638 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f4:	2b03      	cmp	r3, #3
 80045f6:	d838      	bhi.n	800466a <DMA_CheckFifoParam+0xda>
 80045f8:	a201      	add	r2, pc, #4	; (adr r2, 8004600 <DMA_CheckFifoParam+0x70>)
 80045fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045fe:	bf00      	nop
 8004600:	08004611 	.word	0x08004611
 8004604:	08004617 	.word	0x08004617
 8004608:	08004611 	.word	0x08004611
 800460c:	08004629 	.word	0x08004629
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	73fb      	strb	r3, [r7, #15]
        break;
 8004614:	e030      	b.n	8004678 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800461a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800461e:	2b00      	cmp	r3, #0
 8004620:	d025      	beq.n	800466e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004626:	e022      	b.n	800466e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800462c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004630:	d11f      	bne.n	8004672 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004636:	e01c      	b.n	8004672 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800463c:	2b02      	cmp	r3, #2
 800463e:	d902      	bls.n	8004646 <DMA_CheckFifoParam+0xb6>
 8004640:	2b03      	cmp	r3, #3
 8004642:	d003      	beq.n	800464c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004644:	e018      	b.n	8004678 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	73fb      	strb	r3, [r7, #15]
        break;
 800464a:	e015      	b.n	8004678 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004650:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d00e      	beq.n	8004676 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	73fb      	strb	r3, [r7, #15]
    break;
 800465c:	e00b      	b.n	8004676 <DMA_CheckFifoParam+0xe6>
        break;
 800465e:	bf00      	nop
 8004660:	e00a      	b.n	8004678 <DMA_CheckFifoParam+0xe8>
        break;
 8004662:	bf00      	nop
 8004664:	e008      	b.n	8004678 <DMA_CheckFifoParam+0xe8>
        break;
 8004666:	bf00      	nop
 8004668:	e006      	b.n	8004678 <DMA_CheckFifoParam+0xe8>
        break;
 800466a:	bf00      	nop
 800466c:	e004      	b.n	8004678 <DMA_CheckFifoParam+0xe8>
        break;
 800466e:	bf00      	nop
 8004670:	e002      	b.n	8004678 <DMA_CheckFifoParam+0xe8>
        break;
 8004672:	bf00      	nop
 8004674:	e000      	b.n	8004678 <DMA_CheckFifoParam+0xe8>
    break;
 8004676:	bf00      	nop
    }
  }

  return status;
 8004678:	7bfb      	ldrb	r3, [r7, #15]
}
 800467a:	4618      	mov	r0, r3
 800467c:	3714      	adds	r7, #20
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr
 8004686:	bf00      	nop

08004688 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004688:	b480      	push	{r7}
 800468a:	b085      	sub	sp, #20
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a38      	ldr	r2, [pc, #224]	; (800477c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d022      	beq.n	80046e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a36      	ldr	r2, [pc, #216]	; (8004780 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d01d      	beq.n	80046e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a35      	ldr	r2, [pc, #212]	; (8004784 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d018      	beq.n	80046e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a33      	ldr	r2, [pc, #204]	; (8004788 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d013      	beq.n	80046e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a32      	ldr	r2, [pc, #200]	; (800478c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d00e      	beq.n	80046e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a30      	ldr	r2, [pc, #192]	; (8004790 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d009      	beq.n	80046e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a2f      	ldr	r2, [pc, #188]	; (8004794 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d004      	beq.n	80046e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a2d      	ldr	r2, [pc, #180]	; (8004798 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d101      	bne.n	80046ea <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80046e6:	2301      	movs	r3, #1
 80046e8:	e000      	b.n	80046ec <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80046ea:	2300      	movs	r3, #0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d01a      	beq.n	8004726 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	3b08      	subs	r3, #8
 80046f8:	4a28      	ldr	r2, [pc, #160]	; (800479c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80046fa:	fba2 2303 	umull	r2, r3, r2, r3
 80046fe:	091b      	lsrs	r3, r3, #4
 8004700:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004702:	68fa      	ldr	r2, [r7, #12]
 8004704:	4b26      	ldr	r3, [pc, #152]	; (80047a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004706:	4413      	add	r3, r2
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	461a      	mov	r2, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	4a24      	ldr	r2, [pc, #144]	; (80047a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004714:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	f003 031f 	and.w	r3, r3, #31
 800471c:	2201      	movs	r2, #1
 800471e:	409a      	lsls	r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004724:	e024      	b.n	8004770 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	b2db      	uxtb	r3, r3
 800472c:	3b10      	subs	r3, #16
 800472e:	4a1e      	ldr	r2, [pc, #120]	; (80047a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004730:	fba2 2303 	umull	r2, r3, r2, r3
 8004734:	091b      	lsrs	r3, r3, #4
 8004736:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	4a1c      	ldr	r2, [pc, #112]	; (80047ac <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d806      	bhi.n	800474e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	4a1b      	ldr	r2, [pc, #108]	; (80047b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d902      	bls.n	800474e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	3308      	adds	r3, #8
 800474c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800474e:	68fa      	ldr	r2, [r7, #12]
 8004750:	4b18      	ldr	r3, [pc, #96]	; (80047b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004752:	4413      	add	r3, r2
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	461a      	mov	r2, r3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	4a16      	ldr	r2, [pc, #88]	; (80047b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004760:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	f003 031f 	and.w	r3, r3, #31
 8004768:	2201      	movs	r2, #1
 800476a:	409a      	lsls	r2, r3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004770:	bf00      	nop
 8004772:	3714      	adds	r7, #20
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr
 800477c:	58025408 	.word	0x58025408
 8004780:	5802541c 	.word	0x5802541c
 8004784:	58025430 	.word	0x58025430
 8004788:	58025444 	.word	0x58025444
 800478c:	58025458 	.word	0x58025458
 8004790:	5802546c 	.word	0x5802546c
 8004794:	58025480 	.word	0x58025480
 8004798:	58025494 	.word	0x58025494
 800479c:	cccccccd 	.word	0xcccccccd
 80047a0:	16009600 	.word	0x16009600
 80047a4:	58025880 	.word	0x58025880
 80047a8:	aaaaaaab 	.word	0xaaaaaaab
 80047ac:	400204b8 	.word	0x400204b8
 80047b0:	4002040f 	.word	0x4002040f
 80047b4:	10008200 	.word	0x10008200
 80047b8:	40020880 	.word	0x40020880

080047bc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80047bc:	b480      	push	{r7}
 80047be:	b085      	sub	sp, #20
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d04a      	beq.n	8004868 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2b08      	cmp	r3, #8
 80047d6:	d847      	bhi.n	8004868 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a25      	ldr	r2, [pc, #148]	; (8004874 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d022      	beq.n	8004828 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a24      	ldr	r2, [pc, #144]	; (8004878 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d01d      	beq.n	8004828 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a22      	ldr	r2, [pc, #136]	; (800487c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d018      	beq.n	8004828 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a21      	ldr	r2, [pc, #132]	; (8004880 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d013      	beq.n	8004828 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a1f      	ldr	r2, [pc, #124]	; (8004884 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d00e      	beq.n	8004828 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a1e      	ldr	r2, [pc, #120]	; (8004888 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d009      	beq.n	8004828 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a1c      	ldr	r2, [pc, #112]	; (800488c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d004      	beq.n	8004828 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a1b      	ldr	r2, [pc, #108]	; (8004890 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d101      	bne.n	800482c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004828:	2301      	movs	r3, #1
 800482a:	e000      	b.n	800482e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800482c:	2300      	movs	r3, #0
 800482e:	2b00      	cmp	r3, #0
 8004830:	d00a      	beq.n	8004848 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004832:	68fa      	ldr	r2, [r7, #12]
 8004834:	4b17      	ldr	r3, [pc, #92]	; (8004894 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004836:	4413      	add	r3, r2
 8004838:	009b      	lsls	r3, r3, #2
 800483a:	461a      	mov	r2, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4a15      	ldr	r2, [pc, #84]	; (8004898 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004844:	671a      	str	r2, [r3, #112]	; 0x70
 8004846:	e009      	b.n	800485c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004848:	68fa      	ldr	r2, [r7, #12]
 800484a:	4b14      	ldr	r3, [pc, #80]	; (800489c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800484c:	4413      	add	r3, r2
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	461a      	mov	r2, r3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a11      	ldr	r2, [pc, #68]	; (80048a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800485a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	3b01      	subs	r3, #1
 8004860:	2201      	movs	r2, #1
 8004862:	409a      	lsls	r2, r3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004868:	bf00      	nop
 800486a:	3714      	adds	r7, #20
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr
 8004874:	58025408 	.word	0x58025408
 8004878:	5802541c 	.word	0x5802541c
 800487c:	58025430 	.word	0x58025430
 8004880:	58025444 	.word	0x58025444
 8004884:	58025458 	.word	0x58025458
 8004888:	5802546c 	.word	0x5802546c
 800488c:	58025480 	.word	0x58025480
 8004890:	58025494 	.word	0x58025494
 8004894:	1600963f 	.word	0x1600963f
 8004898:	58025940 	.word	0x58025940
 800489c:	1000823f 	.word	0x1000823f
 80048a0:	40020940 	.word	0x40020940

080048a4 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA Stream.
  * @param  pSyncConfig : pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b085      	sub	sp, #20
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	6039      	str	r1, [r7, #0]
  uint32_t syncSignalID = 0;
 80048ae:	2300      	movs	r3, #0
 80048b0:	60fb      	str	r3, [r7, #12]
  uint32_t syncPolarity = 0;
 80048b2:	2300      	movs	r3, #0
 80048b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  if(pSyncConfig->SyncEnable == ENABLE)
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	7a1b      	ldrb	r3, [r3, #8]
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d155      	bne.n	800496a <HAL_DMAEx_ConfigMuxSync+0xc6>
  {
    assert_param(IS_DMAMUX_SYNC_POLARITY(pSyncConfig->SyncPolarity));

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a4b      	ldr	r2, [pc, #300]	; (80049f0 <HAL_DMAEx_ConfigMuxSync+0x14c>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d049      	beq.n	800495c <HAL_DMAEx_ConfigMuxSync+0xb8>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a49      	ldr	r2, [pc, #292]	; (80049f4 <HAL_DMAEx_ConfigMuxSync+0x150>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d044      	beq.n	800495c <HAL_DMAEx_ConfigMuxSync+0xb8>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a48      	ldr	r2, [pc, #288]	; (80049f8 <HAL_DMAEx_ConfigMuxSync+0x154>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d03f      	beq.n	800495c <HAL_DMAEx_ConfigMuxSync+0xb8>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a46      	ldr	r2, [pc, #280]	; (80049fc <HAL_DMAEx_ConfigMuxSync+0x158>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d03a      	beq.n	800495c <HAL_DMAEx_ConfigMuxSync+0xb8>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a45      	ldr	r2, [pc, #276]	; (8004a00 <HAL_DMAEx_ConfigMuxSync+0x15c>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d035      	beq.n	800495c <HAL_DMAEx_ConfigMuxSync+0xb8>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a43      	ldr	r2, [pc, #268]	; (8004a04 <HAL_DMAEx_ConfigMuxSync+0x160>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d030      	beq.n	800495c <HAL_DMAEx_ConfigMuxSync+0xb8>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a42      	ldr	r2, [pc, #264]	; (8004a08 <HAL_DMAEx_ConfigMuxSync+0x164>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d02b      	beq.n	800495c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a40      	ldr	r2, [pc, #256]	; (8004a0c <HAL_DMAEx_ConfigMuxSync+0x168>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d026      	beq.n	800495c <HAL_DMAEx_ConfigMuxSync+0xb8>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a3f      	ldr	r2, [pc, #252]	; (8004a10 <HAL_DMAEx_ConfigMuxSync+0x16c>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d021      	beq.n	800495c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a3d      	ldr	r2, [pc, #244]	; (8004a14 <HAL_DMAEx_ConfigMuxSync+0x170>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d01c      	beq.n	800495c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a3c      	ldr	r2, [pc, #240]	; (8004a18 <HAL_DMAEx_ConfigMuxSync+0x174>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d017      	beq.n	800495c <HAL_DMAEx_ConfigMuxSync+0xb8>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a3a      	ldr	r2, [pc, #232]	; (8004a1c <HAL_DMAEx_ConfigMuxSync+0x178>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d012      	beq.n	800495c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a39      	ldr	r2, [pc, #228]	; (8004a20 <HAL_DMAEx_ConfigMuxSync+0x17c>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d00d      	beq.n	800495c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a37      	ldr	r2, [pc, #220]	; (8004a24 <HAL_DMAEx_ConfigMuxSync+0x180>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d008      	beq.n	800495c <HAL_DMAEx_ConfigMuxSync+0xb8>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a36      	ldr	r2, [pc, #216]	; (8004a28 <HAL_DMAEx_ConfigMuxSync+0x184>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d003      	beq.n	800495c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a34      	ldr	r2, [pc, #208]	; (8004a2c <HAL_DMAEx_ConfigMuxSync+0x188>)
 800495a:	4293      	cmp	r3, r2
 800495c:	bf00      	nop
    }
    else
    {
      assert_param(IS_BDMA_DMAMUX_SYNC_SIGNAL_ID(pSyncConfig->SyncSignalID));
    }
    syncSignalID = pSyncConfig->SyncSignalID;
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	60fb      	str	r3, [r7, #12]
    syncPolarity = pSyncConfig->SyncPolarity;
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	60bb      	str	r3, [r7, #8]
  }

  /*Check if the DMA state is ready */
  if(hdma->State == HAL_DMA_STATE_READY)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004970:	b2db      	uxtb	r3, r3
 8004972:	2b01      	cmp	r3, #1
 8004974:	d131      	bne.n	80049da <HAL_DMAEx_ConfigMuxSync+0x136>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800497c:	2b01      	cmp	r3, #1
 800497e:	d101      	bne.n	8004984 <HAL_DMAEx_ConfigMuxSync+0xe0>
 8004980:	2302      	movs	r3, #2
 8004982:	e02f      	b.n	80049e4 <HAL_DMAEx_ConfigMuxSync+0x140>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the synchronization and event generation before applying a new config */
    CLEAR_BIT(hdma->DMAmuxChannel->CCR,(DMAMUX_CxCR_SE | DMAMUX_CxCR_EGE));
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004996:	f422 3281 	bic.w	r2, r2, #66048	; 0x10200
 800499a:	601a      	str	r2, [r3, #0]

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG( hdma->DMAmuxChannel->CCR, \
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	b2d9      	uxtb	r1, r3
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	061a      	lsls	r2, r3, #24
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	3b01      	subs	r3, #1
 80049ae:	04db      	lsls	r3, r3, #19
 80049b0:	431a      	orrs	r2, r3
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	431a      	orrs	r2, r3
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	7a1b      	ldrb	r3, [r3, #8]
 80049ba:	041b      	lsls	r3, r3, #16
 80049bc:	431a      	orrs	r2, r3
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	7a5b      	ldrb	r3, [r3, #9]
 80049c2:	025b      	lsls	r3, r3, #9
 80049c4:	431a      	orrs	r2, r3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049ca:	430a      	orrs	r2, r1
 80049cc:	601a      	str	r2, [r3, #0]
               ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
               syncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)    | \
               ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos));

      /* Process Locked */
    __HAL_UNLOCK(hdma);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80049d6:	2300      	movs	r3, #0
 80049d8:	e004      	b.n	80049e4 <HAL_DMAEx_ConfigMuxSync+0x140>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049e0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
  }
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3714      	adds	r7, #20
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr
 80049f0:	40020010 	.word	0x40020010
 80049f4:	40020028 	.word	0x40020028
 80049f8:	40020040 	.word	0x40020040
 80049fc:	40020058 	.word	0x40020058
 8004a00:	40020070 	.word	0x40020070
 8004a04:	40020088 	.word	0x40020088
 8004a08:	400200a0 	.word	0x400200a0
 8004a0c:	400200b8 	.word	0x400200b8
 8004a10:	40020410 	.word	0x40020410
 8004a14:	40020428 	.word	0x40020428
 8004a18:	40020440 	.word	0x40020440
 8004a1c:	40020458 	.word	0x40020458
 8004a20:	40020470 	.word	0x40020470
 8004a24:	40020488 	.word	0x40020488
 8004a28:	400204a0 	.word	0x400204a0
 8004a2c:	400204b8 	.word	0x400204b8

08004a30 <HAL_DMAEx_ConfigMuxRequestGenerator>:
  *         contains the request generator parameters.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxRequestGenerator (DMA_HandleTypeDef *hdma, HAL_DMA_MuxRequestGeneratorConfigTypeDef *pRequestGeneratorConfig)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b085      	sub	sp, #20
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  HAL_DMA_StateTypeDef temp_state = hdma->State;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a40:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a47      	ldr	r2, [pc, #284]	; (8004b64 <HAL_DMAEx_ConfigMuxRequestGenerator+0x134>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d049      	beq.n	8004ae0 <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a45      	ldr	r2, [pc, #276]	; (8004b68 <HAL_DMAEx_ConfigMuxRequestGenerator+0x138>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d044      	beq.n	8004ae0 <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a44      	ldr	r2, [pc, #272]	; (8004b6c <HAL_DMAEx_ConfigMuxRequestGenerator+0x13c>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d03f      	beq.n	8004ae0 <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a42      	ldr	r2, [pc, #264]	; (8004b70 <HAL_DMAEx_ConfigMuxRequestGenerator+0x140>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d03a      	beq.n	8004ae0 <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a41      	ldr	r2, [pc, #260]	; (8004b74 <HAL_DMAEx_ConfigMuxRequestGenerator+0x144>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d035      	beq.n	8004ae0 <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a3f      	ldr	r2, [pc, #252]	; (8004b78 <HAL_DMAEx_ConfigMuxRequestGenerator+0x148>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d030      	beq.n	8004ae0 <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a3e      	ldr	r2, [pc, #248]	; (8004b7c <HAL_DMAEx_ConfigMuxRequestGenerator+0x14c>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d02b      	beq.n	8004ae0 <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a3c      	ldr	r2, [pc, #240]	; (8004b80 <HAL_DMAEx_ConfigMuxRequestGenerator+0x150>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d026      	beq.n	8004ae0 <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a3b      	ldr	r2, [pc, #236]	; (8004b84 <HAL_DMAEx_ConfigMuxRequestGenerator+0x154>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d021      	beq.n	8004ae0 <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a39      	ldr	r2, [pc, #228]	; (8004b88 <HAL_DMAEx_ConfigMuxRequestGenerator+0x158>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d01c      	beq.n	8004ae0 <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a38      	ldr	r2, [pc, #224]	; (8004b8c <HAL_DMAEx_ConfigMuxRequestGenerator+0x15c>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d017      	beq.n	8004ae0 <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a36      	ldr	r2, [pc, #216]	; (8004b90 <HAL_DMAEx_ConfigMuxRequestGenerator+0x160>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d012      	beq.n	8004ae0 <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a35      	ldr	r2, [pc, #212]	; (8004b94 <HAL_DMAEx_ConfigMuxRequestGenerator+0x164>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d00d      	beq.n	8004ae0 <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a33      	ldr	r2, [pc, #204]	; (8004b98 <HAL_DMAEx_ConfigMuxRequestGenerator+0x168>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d008      	beq.n	8004ae0 <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a32      	ldr	r2, [pc, #200]	; (8004b9c <HAL_DMAEx_ConfigMuxRequestGenerator+0x16c>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d003      	beq.n	8004ae0 <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a30      	ldr	r2, [pc, #192]	; (8004ba0 <HAL_DMAEx_ConfigMuxRequestGenerator+0x170>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	bf00      	nop
  assert_param(IS_DMAMUX_REQUEST_GEN_REQUEST_NUMBER(pRequestGeneratorConfig->RequestNumber));

  /* check if the DMA state is ready
     and DMA is using a DMAMUX request generator block
  */
  if(hdma->DMAmuxRequestGen == 0U)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d105      	bne.n	8004af6 <HAL_DMAEx_ConfigMuxRequestGenerator+0xc6>
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2240      	movs	r2, #64	; 0x40
 8004aee:	655a      	str	r2, [r3, #84]	; 0x54

    /* error status */
    status = HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	73fb      	strb	r3, [r7, #15]
 8004af4:	e02e      	b.n	8004b54 <HAL_DMAEx_ConfigMuxRequestGenerator+0x124>
  }
  else if(((hdma->DMAmuxRequestGen->RGCR & DMAMUX_RGxCR_GE) == 0U) && (temp_state == HAL_DMA_STATE_READY))
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d121      	bne.n	8004b48 <HAL_DMAEx_ConfigMuxRequestGenerator+0x118>
 8004b04:	7bbb      	ldrb	r3, [r7, #14]
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d11e      	bne.n	8004b48 <HAL_DMAEx_ConfigMuxRequestGenerator+0x118>
  {
    /* RequestGenerator must be disable prior to the configuration i.e GE bit is 0 */

    /* Process Locked */
    __HAL_LOCK(hdma);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d101      	bne.n	8004b18 <HAL_DMAEx_ConfigMuxRequestGenerator+0xe8>
 8004b14:	2302      	movs	r3, #2
 8004b16:	e01e      	b.n	8004b56 <HAL_DMAEx_ConfigMuxRequestGenerator+0x126>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the request generator new parameters */
    hdma->DMAmuxRequestGen->RGCR = pRequestGeneratorConfig->SignalID | \
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	681a      	ldr	r2, [r3, #0]
                                  ((pRequestGeneratorConfig->RequestNumber - 1U) << DMAMUX_RGxCR_GNBREQ_Pos)| \
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	3b01      	subs	r3, #1
 8004b2a:	04db      	lsls	r3, r3, #19
    hdma->DMAmuxRequestGen->RGCR = pRequestGeneratorConfig->SignalID | \
 8004b2c:	ea42 0103 	orr.w	r1, r2, r3
                                  pRequestGeneratorConfig->Polarity;
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	685a      	ldr	r2, [r3, #4]
    hdma->DMAmuxRequestGen->RGCR = pRequestGeneratorConfig->SignalID | \
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
                                  ((pRequestGeneratorConfig->RequestNumber - 1U) << DMAMUX_RGxCR_GNBREQ_Pos)| \
 8004b38:	430a      	orrs	r2, r1
    hdma->DMAmuxRequestGen->RGCR = pRequestGeneratorConfig->SignalID | \
 8004b3a:	601a      	str	r2, [r3, #0]
    /* Process Locked */
    __HAL_UNLOCK(hdma);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8004b44:	2300      	movs	r3, #0
 8004b46:	e006      	b.n	8004b56 <HAL_DMAEx_ConfigMuxRequestGenerator+0x126>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b4e:	655a      	str	r2, [r3, #84]	; 0x54

    /* error status */
    status = HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8004b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3714      	adds	r7, #20
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr
 8004b62:	bf00      	nop
 8004b64:	40020010 	.word	0x40020010
 8004b68:	40020028 	.word	0x40020028
 8004b6c:	40020040 	.word	0x40020040
 8004b70:	40020058 	.word	0x40020058
 8004b74:	40020070 	.word	0x40020070
 8004b78:	40020088 	.word	0x40020088
 8004b7c:	400200a0 	.word	0x400200a0
 8004b80:	400200b8 	.word	0x400200b8
 8004b84:	40020410 	.word	0x40020410
 8004b88:	40020428 	.word	0x40020428
 8004b8c:	40020440 	.word	0x40020440
 8004b90:	40020458 	.word	0x40020458
 8004b94:	40020470 	.word	0x40020470
 8004b98:	40020488 	.word	0x40020488
 8004b9c:	400204a0 	.word	0x400204a0
 8004ba0:	400204b8 	.word	0x400204b8

08004ba4 <HAL_DMAEx_MUX_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b082      	sub	sp, #8
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d01a      	beq.n	8004bf2 <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bc6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004bca:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004bd4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bda:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	655a      	str	r2, [r3, #84]	; 0x54

    if(hdma->XferErrorCallback != NULL)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d003      	beq.n	8004bf2 <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	4798      	blx	r3
    }
  }

  if(hdma->DMAmuxRequestGen != 0)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d022      	beq.n	8004c40 <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
   /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c04:	4013      	ands	r3, r2
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d01a      	beq.n	8004c40 <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c18:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004c22:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c28:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	655a      	str	r2, [r3, #84]	; 0x54

      if(hdma->XferErrorCallback != NULL)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d003      	beq.n	8004c40 <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	4798      	blx	r3
      }
    }
  }
}
 8004c40:	bf00      	nop
 8004c42:	3708      	adds	r7, #8
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b089      	sub	sp, #36	; 0x24
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004c52:	2300      	movs	r3, #0
 8004c54:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004c56:	4b86      	ldr	r3, [pc, #536]	; (8004e70 <HAL_GPIO_Init+0x228>)
 8004c58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004c5a:	e18c      	b.n	8004f76 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	2101      	movs	r1, #1
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	fa01 f303 	lsl.w	r3, r1, r3
 8004c68:	4013      	ands	r3, r2
 8004c6a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	f000 817e 	beq.w	8004f70 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	f003 0303 	and.w	r3, r3, #3
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d005      	beq.n	8004c8c <HAL_GPIO_Init+0x44>
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	f003 0303 	and.w	r3, r3, #3
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	d130      	bne.n	8004cee <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004c92:	69fb      	ldr	r3, [r7, #28]
 8004c94:	005b      	lsls	r3, r3, #1
 8004c96:	2203      	movs	r2, #3
 8004c98:	fa02 f303 	lsl.w	r3, r2, r3
 8004c9c:	43db      	mvns	r3, r3
 8004c9e:	69ba      	ldr	r2, [r7, #24]
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	68da      	ldr	r2, [r3, #12]
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	005b      	lsls	r3, r3, #1
 8004cac:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb0:	69ba      	ldr	r2, [r7, #24]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	69ba      	ldr	r2, [r7, #24]
 8004cba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	69fb      	ldr	r3, [r7, #28]
 8004cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cca:	43db      	mvns	r3, r3
 8004ccc:	69ba      	ldr	r2, [r7, #24]
 8004cce:	4013      	ands	r3, r2
 8004cd0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	091b      	lsrs	r3, r3, #4
 8004cd8:	f003 0201 	and.w	r2, r3, #1
 8004cdc:	69fb      	ldr	r3, [r7, #28]
 8004cde:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce2:	69ba      	ldr	r2, [r7, #24]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	69ba      	ldr	r2, [r7, #24]
 8004cec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	f003 0303 	and.w	r3, r3, #3
 8004cf6:	2b03      	cmp	r3, #3
 8004cf8:	d017      	beq.n	8004d2a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004d00:	69fb      	ldr	r3, [r7, #28]
 8004d02:	005b      	lsls	r3, r3, #1
 8004d04:	2203      	movs	r2, #3
 8004d06:	fa02 f303 	lsl.w	r3, r2, r3
 8004d0a:	43db      	mvns	r3, r3
 8004d0c:	69ba      	ldr	r2, [r7, #24]
 8004d0e:	4013      	ands	r3, r2
 8004d10:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	689a      	ldr	r2, [r3, #8]
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	005b      	lsls	r3, r3, #1
 8004d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d1e:	69ba      	ldr	r2, [r7, #24]
 8004d20:	4313      	orrs	r3, r2
 8004d22:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	69ba      	ldr	r2, [r7, #24]
 8004d28:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	f003 0303 	and.w	r3, r3, #3
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d123      	bne.n	8004d7e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	08da      	lsrs	r2, r3, #3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	3208      	adds	r2, #8
 8004d3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	f003 0307 	and.w	r3, r3, #7
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	220f      	movs	r2, #15
 8004d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d52:	43db      	mvns	r3, r3
 8004d54:	69ba      	ldr	r2, [r7, #24]
 8004d56:	4013      	ands	r3, r2
 8004d58:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	691a      	ldr	r2, [r3, #16]
 8004d5e:	69fb      	ldr	r3, [r7, #28]
 8004d60:	f003 0307 	and.w	r3, r3, #7
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6a:	69ba      	ldr	r2, [r7, #24]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004d70:	69fb      	ldr	r3, [r7, #28]
 8004d72:	08da      	lsrs	r2, r3, #3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	3208      	adds	r2, #8
 8004d78:	69b9      	ldr	r1, [r7, #24]
 8004d7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	005b      	lsls	r3, r3, #1
 8004d88:	2203      	movs	r2, #3
 8004d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d8e:	43db      	mvns	r3, r3
 8004d90:	69ba      	ldr	r2, [r7, #24]
 8004d92:	4013      	ands	r3, r2
 8004d94:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	f003 0203 	and.w	r2, r3, #3
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	005b      	lsls	r3, r3, #1
 8004da2:	fa02 f303 	lsl.w	r3, r2, r3
 8004da6:	69ba      	ldr	r2, [r7, #24]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	69ba      	ldr	r2, [r7, #24]
 8004db0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	f000 80d8 	beq.w	8004f70 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004dc0:	4b2c      	ldr	r3, [pc, #176]	; (8004e74 <HAL_GPIO_Init+0x22c>)
 8004dc2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004dc6:	4a2b      	ldr	r2, [pc, #172]	; (8004e74 <HAL_GPIO_Init+0x22c>)
 8004dc8:	f043 0302 	orr.w	r3, r3, #2
 8004dcc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004dd0:	4b28      	ldr	r3, [pc, #160]	; (8004e74 <HAL_GPIO_Init+0x22c>)
 8004dd2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004dd6:	f003 0302 	and.w	r3, r3, #2
 8004dda:	60fb      	str	r3, [r7, #12]
 8004ddc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004dde:	4a26      	ldr	r2, [pc, #152]	; (8004e78 <HAL_GPIO_Init+0x230>)
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	089b      	lsrs	r3, r3, #2
 8004de4:	3302      	adds	r3, #2
 8004de6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004dec:	69fb      	ldr	r3, [r7, #28]
 8004dee:	f003 0303 	and.w	r3, r3, #3
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	220f      	movs	r2, #15
 8004df6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dfa:	43db      	mvns	r3, r3
 8004dfc:	69ba      	ldr	r2, [r7, #24]
 8004dfe:	4013      	ands	r3, r2
 8004e00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4a1d      	ldr	r2, [pc, #116]	; (8004e7c <HAL_GPIO_Init+0x234>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d04a      	beq.n	8004ea0 <HAL_GPIO_Init+0x258>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a1c      	ldr	r2, [pc, #112]	; (8004e80 <HAL_GPIO_Init+0x238>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d02b      	beq.n	8004e6a <HAL_GPIO_Init+0x222>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a1b      	ldr	r2, [pc, #108]	; (8004e84 <HAL_GPIO_Init+0x23c>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d025      	beq.n	8004e66 <HAL_GPIO_Init+0x21e>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a1a      	ldr	r2, [pc, #104]	; (8004e88 <HAL_GPIO_Init+0x240>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d01f      	beq.n	8004e62 <HAL_GPIO_Init+0x21a>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a19      	ldr	r2, [pc, #100]	; (8004e8c <HAL_GPIO_Init+0x244>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d019      	beq.n	8004e5e <HAL_GPIO_Init+0x216>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a18      	ldr	r2, [pc, #96]	; (8004e90 <HAL_GPIO_Init+0x248>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d013      	beq.n	8004e5a <HAL_GPIO_Init+0x212>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a17      	ldr	r2, [pc, #92]	; (8004e94 <HAL_GPIO_Init+0x24c>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d00d      	beq.n	8004e56 <HAL_GPIO_Init+0x20e>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a16      	ldr	r2, [pc, #88]	; (8004e98 <HAL_GPIO_Init+0x250>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d007      	beq.n	8004e52 <HAL_GPIO_Init+0x20a>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a15      	ldr	r2, [pc, #84]	; (8004e9c <HAL_GPIO_Init+0x254>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d101      	bne.n	8004e4e <HAL_GPIO_Init+0x206>
 8004e4a:	2309      	movs	r3, #9
 8004e4c:	e029      	b.n	8004ea2 <HAL_GPIO_Init+0x25a>
 8004e4e:	230a      	movs	r3, #10
 8004e50:	e027      	b.n	8004ea2 <HAL_GPIO_Init+0x25a>
 8004e52:	2307      	movs	r3, #7
 8004e54:	e025      	b.n	8004ea2 <HAL_GPIO_Init+0x25a>
 8004e56:	2306      	movs	r3, #6
 8004e58:	e023      	b.n	8004ea2 <HAL_GPIO_Init+0x25a>
 8004e5a:	2305      	movs	r3, #5
 8004e5c:	e021      	b.n	8004ea2 <HAL_GPIO_Init+0x25a>
 8004e5e:	2304      	movs	r3, #4
 8004e60:	e01f      	b.n	8004ea2 <HAL_GPIO_Init+0x25a>
 8004e62:	2303      	movs	r3, #3
 8004e64:	e01d      	b.n	8004ea2 <HAL_GPIO_Init+0x25a>
 8004e66:	2302      	movs	r3, #2
 8004e68:	e01b      	b.n	8004ea2 <HAL_GPIO_Init+0x25a>
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e019      	b.n	8004ea2 <HAL_GPIO_Init+0x25a>
 8004e6e:	bf00      	nop
 8004e70:	58000080 	.word	0x58000080
 8004e74:	58024400 	.word	0x58024400
 8004e78:	58000400 	.word	0x58000400
 8004e7c:	58020000 	.word	0x58020000
 8004e80:	58020400 	.word	0x58020400
 8004e84:	58020800 	.word	0x58020800
 8004e88:	58020c00 	.word	0x58020c00
 8004e8c:	58021000 	.word	0x58021000
 8004e90:	58021400 	.word	0x58021400
 8004e94:	58021800 	.word	0x58021800
 8004e98:	58021c00 	.word	0x58021c00
 8004e9c:	58022400 	.word	0x58022400
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	69fa      	ldr	r2, [r7, #28]
 8004ea4:	f002 0203 	and.w	r2, r2, #3
 8004ea8:	0092      	lsls	r2, r2, #2
 8004eaa:	4093      	lsls	r3, r2
 8004eac:	69ba      	ldr	r2, [r7, #24]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004eb2:	4938      	ldr	r1, [pc, #224]	; (8004f94 <HAL_GPIO_Init+0x34c>)
 8004eb4:	69fb      	ldr	r3, [r7, #28]
 8004eb6:	089b      	lsrs	r3, r3, #2
 8004eb8:	3302      	adds	r3, #2
 8004eba:	69ba      	ldr	r2, [r7, #24]
 8004ebc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004ec0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	43db      	mvns	r3, r3
 8004ecc:	69ba      	ldr	r2, [r7, #24]
 8004ece:	4013      	ands	r3, r2
 8004ed0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d003      	beq.n	8004ee6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004ede:	69ba      	ldr	r2, [r7, #24]
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004ee6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004eea:	69bb      	ldr	r3, [r7, #24]
 8004eec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004eee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	43db      	mvns	r3, r3
 8004efa:	69ba      	ldr	r2, [r7, #24]
 8004efc:	4013      	ands	r3, r2
 8004efe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d003      	beq.n	8004f14 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8004f0c:	69ba      	ldr	r2, [r7, #24]
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004f14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	43db      	mvns	r3, r3
 8004f26:	69ba      	ldr	r2, [r7, #24]
 8004f28:	4013      	ands	r3, r2
 8004f2a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d003      	beq.n	8004f40 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8004f38:	69ba      	ldr	r2, [r7, #24]
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	69ba      	ldr	r2, [r7, #24]
 8004f44:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	43db      	mvns	r3, r3
 8004f50:	69ba      	ldr	r2, [r7, #24]
 8004f52:	4013      	ands	r3, r2
 8004f54:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d003      	beq.n	8004f6a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8004f62:	69ba      	ldr	r2, [r7, #24]
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	69ba      	ldr	r2, [r7, #24]
 8004f6e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	3301      	adds	r3, #1
 8004f74:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	fa22 f303 	lsr.w	r3, r2, r3
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	f47f ae6b 	bne.w	8004c5c <HAL_GPIO_Init+0x14>
  }
}
 8004f86:	bf00      	nop
 8004f88:	bf00      	nop
 8004f8a:	3724      	adds	r7, #36	; 0x24
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr
 8004f94:	58000400 	.word	0x58000400

08004f98 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b087      	sub	sp, #28
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004fa6:	4b72      	ldr	r3, [pc, #456]	; (8005170 <HAL_GPIO_DeInit+0x1d8>)
 8004fa8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8004faa:	e0d3      	b.n	8005154 <HAL_GPIO_DeInit+0x1bc>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8004fac:	2201      	movs	r2, #1
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb4:	683a      	ldr	r2, [r7, #0]
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	f000 80c6 	beq.w	800514e <HAL_GPIO_DeInit+0x1b6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004fc2:	4a6c      	ldr	r2, [pc, #432]	; (8005174 <HAL_GPIO_DeInit+0x1dc>)
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	089b      	lsrs	r3, r3, #2
 8004fc8:	3302      	adds	r3, #2
 8004fca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fce:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	f003 0303 	and.w	r3, r3, #3
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	220f      	movs	r2, #15
 8004fda:	fa02 f303 	lsl.w	r3, r2, r3
 8004fde:	68ba      	ldr	r2, [r7, #8]
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4a64      	ldr	r2, [pc, #400]	; (8005178 <HAL_GPIO_DeInit+0x1e0>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d031      	beq.n	8005050 <HAL_GPIO_DeInit+0xb8>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4a63      	ldr	r2, [pc, #396]	; (800517c <HAL_GPIO_DeInit+0x1e4>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d02b      	beq.n	800504c <HAL_GPIO_DeInit+0xb4>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	4a62      	ldr	r2, [pc, #392]	; (8005180 <HAL_GPIO_DeInit+0x1e8>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d025      	beq.n	8005048 <HAL_GPIO_DeInit+0xb0>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	4a61      	ldr	r2, [pc, #388]	; (8005184 <HAL_GPIO_DeInit+0x1ec>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d01f      	beq.n	8005044 <HAL_GPIO_DeInit+0xac>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4a60      	ldr	r2, [pc, #384]	; (8005188 <HAL_GPIO_DeInit+0x1f0>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d019      	beq.n	8005040 <HAL_GPIO_DeInit+0xa8>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	4a5f      	ldr	r2, [pc, #380]	; (800518c <HAL_GPIO_DeInit+0x1f4>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d013      	beq.n	800503c <HAL_GPIO_DeInit+0xa4>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a5e      	ldr	r2, [pc, #376]	; (8005190 <HAL_GPIO_DeInit+0x1f8>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d00d      	beq.n	8005038 <HAL_GPIO_DeInit+0xa0>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a5d      	ldr	r2, [pc, #372]	; (8005194 <HAL_GPIO_DeInit+0x1fc>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d007      	beq.n	8005034 <HAL_GPIO_DeInit+0x9c>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	4a5c      	ldr	r2, [pc, #368]	; (8005198 <HAL_GPIO_DeInit+0x200>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d101      	bne.n	8005030 <HAL_GPIO_DeInit+0x98>
 800502c:	2309      	movs	r3, #9
 800502e:	e010      	b.n	8005052 <HAL_GPIO_DeInit+0xba>
 8005030:	230a      	movs	r3, #10
 8005032:	e00e      	b.n	8005052 <HAL_GPIO_DeInit+0xba>
 8005034:	2307      	movs	r3, #7
 8005036:	e00c      	b.n	8005052 <HAL_GPIO_DeInit+0xba>
 8005038:	2306      	movs	r3, #6
 800503a:	e00a      	b.n	8005052 <HAL_GPIO_DeInit+0xba>
 800503c:	2305      	movs	r3, #5
 800503e:	e008      	b.n	8005052 <HAL_GPIO_DeInit+0xba>
 8005040:	2304      	movs	r3, #4
 8005042:	e006      	b.n	8005052 <HAL_GPIO_DeInit+0xba>
 8005044:	2303      	movs	r3, #3
 8005046:	e004      	b.n	8005052 <HAL_GPIO_DeInit+0xba>
 8005048:	2302      	movs	r3, #2
 800504a:	e002      	b.n	8005052 <HAL_GPIO_DeInit+0xba>
 800504c:	2301      	movs	r3, #1
 800504e:	e000      	b.n	8005052 <HAL_GPIO_DeInit+0xba>
 8005050:	2300      	movs	r3, #0
 8005052:	697a      	ldr	r2, [r7, #20]
 8005054:	f002 0203 	and.w	r2, r2, #3
 8005058:	0092      	lsls	r2, r2, #2
 800505a:	4093      	lsls	r3, r2
 800505c:	68ba      	ldr	r2, [r7, #8]
 800505e:	429a      	cmp	r2, r3
 8005060:	d136      	bne.n	80050d0 <HAL_GPIO_DeInit+0x138>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	43db      	mvns	r3, r3
 800506a:	401a      	ands	r2, r3
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	685a      	ldr	r2, [r3, #4]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	43db      	mvns	r3, r3
 8005078:	401a      	ands	r2, r3
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800507e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005082:	685a      	ldr	r2, [r3, #4]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	43db      	mvns	r3, r3
 8005088:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800508c:	4013      	ands	r3, r2
 800508e:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8005090:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	43db      	mvns	r3, r3
 800509a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800509e:	4013      	ands	r3, r2
 80050a0:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	f003 0303 	and.w	r3, r3, #3
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	220f      	movs	r2, #15
 80050ac:	fa02 f303 	lsl.w	r3, r2, r3
 80050b0:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80050b2:	4a30      	ldr	r2, [pc, #192]	; (8005174 <HAL_GPIO_DeInit+0x1dc>)
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	089b      	lsrs	r3, r3, #2
 80050b8:	3302      	adds	r3, #2
 80050ba:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	43da      	mvns	r2, r3
 80050c2:	482c      	ldr	r0, [pc, #176]	; (8005174 <HAL_GPIO_DeInit+0x1dc>)
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	089b      	lsrs	r3, r3, #2
 80050c8:	400a      	ands	r2, r1
 80050ca:	3302      	adds	r3, #2
 80050cc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	005b      	lsls	r3, r3, #1
 80050d8:	2103      	movs	r1, #3
 80050da:	fa01 f303 	lsl.w	r3, r1, r3
 80050de:	431a      	orrs	r2, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	08da      	lsrs	r2, r3, #3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	3208      	adds	r2, #8
 80050ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	f003 0307 	and.w	r3, r3, #7
 80050f6:	009b      	lsls	r3, r3, #2
 80050f8:	220f      	movs	r2, #15
 80050fa:	fa02 f303 	lsl.w	r3, r2, r3
 80050fe:	43db      	mvns	r3, r3
 8005100:	697a      	ldr	r2, [r7, #20]
 8005102:	08d2      	lsrs	r2, r2, #3
 8005104:	4019      	ands	r1, r3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	3208      	adds	r2, #8
 800510a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	68da      	ldr	r2, [r3, #12]
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	005b      	lsls	r3, r3, #1
 8005116:	2103      	movs	r1, #3
 8005118:	fa01 f303 	lsl.w	r3, r1, r3
 800511c:	43db      	mvns	r3, r3
 800511e:	401a      	ands	r2, r3
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	685a      	ldr	r2, [r3, #4]
 8005128:	2101      	movs	r1, #1
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	fa01 f303 	lsl.w	r3, r1, r3
 8005130:	43db      	mvns	r3, r3
 8005132:	401a      	ands	r2, r3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	689a      	ldr	r2, [r3, #8]
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	005b      	lsls	r3, r3, #1
 8005140:	2103      	movs	r1, #3
 8005142:	fa01 f303 	lsl.w	r3, r1, r3
 8005146:	43db      	mvns	r3, r3
 8005148:	401a      	ands	r2, r3
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	609a      	str	r2, [r3, #8]
    }

    position++;
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	3301      	adds	r3, #1
 8005152:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8005154:	683a      	ldr	r2, [r7, #0]
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	fa22 f303 	lsr.w	r3, r2, r3
 800515c:	2b00      	cmp	r3, #0
 800515e:	f47f af25 	bne.w	8004fac <HAL_GPIO_DeInit+0x14>
  }
}
 8005162:	bf00      	nop
 8005164:	bf00      	nop
 8005166:	371c      	adds	r7, #28
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr
 8005170:	58000080 	.word	0x58000080
 8005174:	58000400 	.word	0x58000400
 8005178:	58020000 	.word	0x58020000
 800517c:	58020400 	.word	0x58020400
 8005180:	58020800 	.word	0x58020800
 8005184:	58020c00 	.word	0x58020c00
 8005188:	58021000 	.word	0x58021000
 800518c:	58021400 	.word	0x58021400
 8005190:	58021800 	.word	0x58021800
 8005194:	58021c00 	.word	0x58021c00
 8005198:	58022400 	.word	0x58022400

0800519c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800519c:	b480      	push	{r7}
 800519e:	b083      	sub	sp, #12
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	460b      	mov	r3, r1
 80051a6:	807b      	strh	r3, [r7, #2]
 80051a8:	4613      	mov	r3, r2
 80051aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80051ac:	787b      	ldrb	r3, [r7, #1]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d003      	beq.n	80051ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80051b2:	887a      	ldrh	r2, [r7, #2]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80051b8:	e003      	b.n	80051c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80051ba:	887b      	ldrh	r3, [r7, #2]
 80051bc:	041a      	lsls	r2, r3, #16
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	619a      	str	r2, [r3, #24]
}
 80051c2:	bf00      	nop
 80051c4:	370c      	adds	r7, #12
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr

080051ce <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80051ce:	b580      	push	{r7, lr}
 80051d0:	b082      	sub	sp, #8
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	4603      	mov	r3, r0
 80051d6:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80051d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051dc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80051e0:	88fb      	ldrh	r3, [r7, #6]
 80051e2:	4013      	ands	r3, r2
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d008      	beq.n	80051fa <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80051e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051ec:	88fb      	ldrh	r3, [r7, #6]
 80051ee:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80051f2:	88fb      	ldrh	r3, [r7, #6]
 80051f4:	4618      	mov	r0, r3
 80051f6:	f000 f804 	bl	8005202 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80051fa:	bf00      	nop
 80051fc:	3708      	adds	r7, #8
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}

08005202 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005202:	b480      	push	{r7}
 8005204:	b083      	sub	sp, #12
 8005206:	af00      	add	r7, sp, #0
 8005208:	4603      	mov	r3, r0
 800520a:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800520c:	bf00      	nop
 800520e:	370c      	adds	r7, #12
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr

08005218 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b082      	sub	sp, #8
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d101      	bne.n	800522a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e07f      	b.n	800532a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005230:	b2db      	uxtb	r3, r3
 8005232:	2b00      	cmp	r3, #0
 8005234:	d106      	bne.n	8005244 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f005 fe20 	bl	800ae84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2224      	movs	r2, #36	; 0x24
 8005248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f022 0201 	bic.w	r2, r2, #1
 800525a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	685a      	ldr	r2, [r3, #4]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005268:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	689a      	ldr	r2, [r3, #8]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005278:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	2b01      	cmp	r3, #1
 8005280:	d107      	bne.n	8005292 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	689a      	ldr	r2, [r3, #8]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800528e:	609a      	str	r2, [r3, #8]
 8005290:	e006      	b.n	80052a0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	689a      	ldr	r2, [r3, #8]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800529e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	2b02      	cmp	r3, #2
 80052a6:	d104      	bne.n	80052b2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052b0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	6859      	ldr	r1, [r3, #4]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	4b1d      	ldr	r3, [pc, #116]	; (8005334 <HAL_I2C_Init+0x11c>)
 80052be:	430b      	orrs	r3, r1
 80052c0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	68da      	ldr	r2, [r3, #12]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80052d0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	691a      	ldr	r2, [r3, #16]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	695b      	ldr	r3, [r3, #20]
 80052da:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	699b      	ldr	r3, [r3, #24]
 80052e2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	430a      	orrs	r2, r1
 80052ea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	69d9      	ldr	r1, [r3, #28]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6a1a      	ldr	r2, [r3, #32]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	430a      	orrs	r2, r1
 80052fa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f042 0201 	orr.w	r2, r2, #1
 800530a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2200      	movs	r2, #0
 8005310:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2220      	movs	r2, #32
 8005316:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005328:	2300      	movs	r3, #0
}
 800532a:	4618      	mov	r0, r3
 800532c:	3708      	adds	r7, #8
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
 8005332:	bf00      	nop
 8005334:	02008000 	.word	0x02008000

08005338 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b088      	sub	sp, #32
 800533c:	af02      	add	r7, sp, #8
 800533e:	60f8      	str	r0, [r7, #12]
 8005340:	4608      	mov	r0, r1
 8005342:	4611      	mov	r1, r2
 8005344:	461a      	mov	r2, r3
 8005346:	4603      	mov	r3, r0
 8005348:	817b      	strh	r3, [r7, #10]
 800534a:	460b      	mov	r3, r1
 800534c:	813b      	strh	r3, [r7, #8]
 800534e:	4613      	mov	r3, r2
 8005350:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005358:	b2db      	uxtb	r3, r3
 800535a:	2b20      	cmp	r3, #32
 800535c:	f040 80f9 	bne.w	8005552 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005360:	6a3b      	ldr	r3, [r7, #32]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d002      	beq.n	800536c <HAL_I2C_Mem_Write+0x34>
 8005366:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005368:	2b00      	cmp	r3, #0
 800536a:	d105      	bne.n	8005378 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005372:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e0ed      	b.n	8005554 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800537e:	2b01      	cmp	r3, #1
 8005380:	d101      	bne.n	8005386 <HAL_I2C_Mem_Write+0x4e>
 8005382:	2302      	movs	r3, #2
 8005384:	e0e6      	b.n	8005554 <HAL_I2C_Mem_Write+0x21c>
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2201      	movs	r2, #1
 800538a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800538e:	f7fc fb99 	bl	8001ac4 <HAL_GetTick>
 8005392:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	9300      	str	r3, [sp, #0]
 8005398:	2319      	movs	r3, #25
 800539a:	2201      	movs	r2, #1
 800539c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80053a0:	68f8      	ldr	r0, [r7, #12]
 80053a2:	f001 f8ac 	bl	80064fe <I2C_WaitOnFlagUntilTimeout>
 80053a6:	4603      	mov	r3, r0
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d001      	beq.n	80053b0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	e0d1      	b.n	8005554 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2221      	movs	r2, #33	; 0x21
 80053b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2240      	movs	r2, #64	; 0x40
 80053bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2200      	movs	r2, #0
 80053c4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	6a3a      	ldr	r2, [r7, #32]
 80053ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80053d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2200      	movs	r2, #0
 80053d6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80053d8:	88f8      	ldrh	r0, [r7, #6]
 80053da:	893a      	ldrh	r2, [r7, #8]
 80053dc:	8979      	ldrh	r1, [r7, #10]
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	9301      	str	r3, [sp, #4]
 80053e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e4:	9300      	str	r3, [sp, #0]
 80053e6:	4603      	mov	r3, r0
 80053e8:	68f8      	ldr	r0, [r7, #12]
 80053ea:	f000 fb77 	bl	8005adc <I2C_RequestMemoryWrite>
 80053ee:	4603      	mov	r3, r0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d005      	beq.n	8005400 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2200      	movs	r2, #0
 80053f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	e0a9      	b.n	8005554 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005404:	b29b      	uxth	r3, r3
 8005406:	2bff      	cmp	r3, #255	; 0xff
 8005408:	d90e      	bls.n	8005428 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	22ff      	movs	r2, #255	; 0xff
 800540e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005414:	b2da      	uxtb	r2, r3
 8005416:	8979      	ldrh	r1, [r7, #10]
 8005418:	2300      	movs	r3, #0
 800541a:	9300      	str	r3, [sp, #0]
 800541c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005420:	68f8      	ldr	r0, [r7, #12]
 8005422:	f001 fa15 	bl	8006850 <I2C_TransferConfig>
 8005426:	e00f      	b.n	8005448 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800542c:	b29a      	uxth	r2, r3
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005436:	b2da      	uxtb	r2, r3
 8005438:	8979      	ldrh	r1, [r7, #10]
 800543a:	2300      	movs	r3, #0
 800543c:	9300      	str	r3, [sp, #0]
 800543e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005442:	68f8      	ldr	r0, [r7, #12]
 8005444:	f001 fa04 	bl	8006850 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005448:	697a      	ldr	r2, [r7, #20]
 800544a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800544c:	68f8      	ldr	r0, [r7, #12]
 800544e:	f001 f896 	bl	800657e <I2C_WaitOnTXISFlagUntilTimeout>
 8005452:	4603      	mov	r3, r0
 8005454:	2b00      	cmp	r3, #0
 8005456:	d001      	beq.n	800545c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e07b      	b.n	8005554 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005460:	781a      	ldrb	r2, [r3, #0]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546c:	1c5a      	adds	r2, r3, #1
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005476:	b29b      	uxth	r3, r3
 8005478:	3b01      	subs	r3, #1
 800547a:	b29a      	uxth	r2, r3
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005484:	3b01      	subs	r3, #1
 8005486:	b29a      	uxth	r2, r3
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005490:	b29b      	uxth	r3, r3
 8005492:	2b00      	cmp	r3, #0
 8005494:	d034      	beq.n	8005500 <HAL_I2C_Mem_Write+0x1c8>
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800549a:	2b00      	cmp	r3, #0
 800549c:	d130      	bne.n	8005500 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	9300      	str	r3, [sp, #0]
 80054a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a4:	2200      	movs	r2, #0
 80054a6:	2180      	movs	r1, #128	; 0x80
 80054a8:	68f8      	ldr	r0, [r7, #12]
 80054aa:	f001 f828 	bl	80064fe <I2C_WaitOnFlagUntilTimeout>
 80054ae:	4603      	mov	r3, r0
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d001      	beq.n	80054b8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	e04d      	b.n	8005554 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054bc:	b29b      	uxth	r3, r3
 80054be:	2bff      	cmp	r3, #255	; 0xff
 80054c0:	d90e      	bls.n	80054e0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	22ff      	movs	r2, #255	; 0xff
 80054c6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054cc:	b2da      	uxtb	r2, r3
 80054ce:	8979      	ldrh	r1, [r7, #10]
 80054d0:	2300      	movs	r3, #0
 80054d2:	9300      	str	r3, [sp, #0]
 80054d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80054d8:	68f8      	ldr	r0, [r7, #12]
 80054da:	f001 f9b9 	bl	8006850 <I2C_TransferConfig>
 80054de:	e00f      	b.n	8005500 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054e4:	b29a      	uxth	r2, r3
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054ee:	b2da      	uxtb	r2, r3
 80054f0:	8979      	ldrh	r1, [r7, #10]
 80054f2:	2300      	movs	r3, #0
 80054f4:	9300      	str	r3, [sp, #0]
 80054f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80054fa:	68f8      	ldr	r0, [r7, #12]
 80054fc:	f001 f9a8 	bl	8006850 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005504:	b29b      	uxth	r3, r3
 8005506:	2b00      	cmp	r3, #0
 8005508:	d19e      	bne.n	8005448 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800550a:	697a      	ldr	r2, [r7, #20]
 800550c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800550e:	68f8      	ldr	r0, [r7, #12]
 8005510:	f001 f875 	bl	80065fe <I2C_WaitOnSTOPFlagUntilTimeout>
 8005514:	4603      	mov	r3, r0
 8005516:	2b00      	cmp	r3, #0
 8005518:	d001      	beq.n	800551e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e01a      	b.n	8005554 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	2220      	movs	r2, #32
 8005524:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	6859      	ldr	r1, [r3, #4]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	4b0a      	ldr	r3, [pc, #40]	; (800555c <HAL_I2C_Mem_Write+0x224>)
 8005532:	400b      	ands	r3, r1
 8005534:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2220      	movs	r2, #32
 800553a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2200      	movs	r2, #0
 8005542:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2200      	movs	r2, #0
 800554a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800554e:	2300      	movs	r3, #0
 8005550:	e000      	b.n	8005554 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005552:	2302      	movs	r3, #2
  }
}
 8005554:	4618      	mov	r0, r3
 8005556:	3718      	adds	r7, #24
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}
 800555c:	fe00e800 	.word	0xfe00e800

08005560 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b088      	sub	sp, #32
 8005564:	af02      	add	r7, sp, #8
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	4608      	mov	r0, r1
 800556a:	4611      	mov	r1, r2
 800556c:	461a      	mov	r2, r3
 800556e:	4603      	mov	r3, r0
 8005570:	817b      	strh	r3, [r7, #10]
 8005572:	460b      	mov	r3, r1
 8005574:	813b      	strh	r3, [r7, #8]
 8005576:	4613      	mov	r3, r2
 8005578:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005580:	b2db      	uxtb	r3, r3
 8005582:	2b20      	cmp	r3, #32
 8005584:	f040 80fd 	bne.w	8005782 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005588:	6a3b      	ldr	r3, [r7, #32]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d002      	beq.n	8005594 <HAL_I2C_Mem_Read+0x34>
 800558e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005590:	2b00      	cmp	r3, #0
 8005592:	d105      	bne.n	80055a0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f44f 7200 	mov.w	r2, #512	; 0x200
 800559a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	e0f1      	b.n	8005784 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d101      	bne.n	80055ae <HAL_I2C_Mem_Read+0x4e>
 80055aa:	2302      	movs	r3, #2
 80055ac:	e0ea      	b.n	8005784 <HAL_I2C_Mem_Read+0x224>
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2201      	movs	r2, #1
 80055b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80055b6:	f7fc fa85 	bl	8001ac4 <HAL_GetTick>
 80055ba:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	9300      	str	r3, [sp, #0]
 80055c0:	2319      	movs	r3, #25
 80055c2:	2201      	movs	r2, #1
 80055c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80055c8:	68f8      	ldr	r0, [r7, #12]
 80055ca:	f000 ff98 	bl	80064fe <I2C_WaitOnFlagUntilTimeout>
 80055ce:	4603      	mov	r3, r0
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d001      	beq.n	80055d8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	e0d5      	b.n	8005784 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2222      	movs	r2, #34	; 0x22
 80055dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2240      	movs	r2, #64	; 0x40
 80055e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2200      	movs	r2, #0
 80055ec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	6a3a      	ldr	r2, [r7, #32]
 80055f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80055f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2200      	movs	r2, #0
 80055fe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005600:	88f8      	ldrh	r0, [r7, #6]
 8005602:	893a      	ldrh	r2, [r7, #8]
 8005604:	8979      	ldrh	r1, [r7, #10]
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	9301      	str	r3, [sp, #4]
 800560a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800560c:	9300      	str	r3, [sp, #0]
 800560e:	4603      	mov	r3, r0
 8005610:	68f8      	ldr	r0, [r7, #12]
 8005612:	f000 fab7 	bl	8005b84 <I2C_RequestMemoryRead>
 8005616:	4603      	mov	r3, r0
 8005618:	2b00      	cmp	r3, #0
 800561a:	d005      	beq.n	8005628 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2200      	movs	r2, #0
 8005620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	e0ad      	b.n	8005784 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800562c:	b29b      	uxth	r3, r3
 800562e:	2bff      	cmp	r3, #255	; 0xff
 8005630:	d90e      	bls.n	8005650 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	22ff      	movs	r2, #255	; 0xff
 8005636:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800563c:	b2da      	uxtb	r2, r3
 800563e:	8979      	ldrh	r1, [r7, #10]
 8005640:	4b52      	ldr	r3, [pc, #328]	; (800578c <HAL_I2C_Mem_Read+0x22c>)
 8005642:	9300      	str	r3, [sp, #0]
 8005644:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005648:	68f8      	ldr	r0, [r7, #12]
 800564a:	f001 f901 	bl	8006850 <I2C_TransferConfig>
 800564e:	e00f      	b.n	8005670 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005654:	b29a      	uxth	r2, r3
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800565e:	b2da      	uxtb	r2, r3
 8005660:	8979      	ldrh	r1, [r7, #10]
 8005662:	4b4a      	ldr	r3, [pc, #296]	; (800578c <HAL_I2C_Mem_Read+0x22c>)
 8005664:	9300      	str	r3, [sp, #0]
 8005666:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800566a:	68f8      	ldr	r0, [r7, #12]
 800566c:	f001 f8f0 	bl	8006850 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	9300      	str	r3, [sp, #0]
 8005674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005676:	2200      	movs	r2, #0
 8005678:	2104      	movs	r1, #4
 800567a:	68f8      	ldr	r0, [r7, #12]
 800567c:	f000 ff3f 	bl	80064fe <I2C_WaitOnFlagUntilTimeout>
 8005680:	4603      	mov	r3, r0
 8005682:	2b00      	cmp	r3, #0
 8005684:	d001      	beq.n	800568a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e07c      	b.n	8005784 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005694:	b2d2      	uxtb	r2, r2
 8005696:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569c:	1c5a      	adds	r2, r3, #1
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056a6:	3b01      	subs	r3, #1
 80056a8:	b29a      	uxth	r2, r3
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	3b01      	subs	r3, #1
 80056b6:	b29a      	uxth	r2, r3
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d034      	beq.n	8005730 <HAL_I2C_Mem_Read+0x1d0>
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d130      	bne.n	8005730 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	9300      	str	r3, [sp, #0]
 80056d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d4:	2200      	movs	r2, #0
 80056d6:	2180      	movs	r1, #128	; 0x80
 80056d8:	68f8      	ldr	r0, [r7, #12]
 80056da:	f000 ff10 	bl	80064fe <I2C_WaitOnFlagUntilTimeout>
 80056de:	4603      	mov	r3, r0
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d001      	beq.n	80056e8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	e04d      	b.n	8005784 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	2bff      	cmp	r3, #255	; 0xff
 80056f0:	d90e      	bls.n	8005710 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	22ff      	movs	r2, #255	; 0xff
 80056f6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056fc:	b2da      	uxtb	r2, r3
 80056fe:	8979      	ldrh	r1, [r7, #10]
 8005700:	2300      	movs	r3, #0
 8005702:	9300      	str	r3, [sp, #0]
 8005704:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005708:	68f8      	ldr	r0, [r7, #12]
 800570a:	f001 f8a1 	bl	8006850 <I2C_TransferConfig>
 800570e:	e00f      	b.n	8005730 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005714:	b29a      	uxth	r2, r3
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800571e:	b2da      	uxtb	r2, r3
 8005720:	8979      	ldrh	r1, [r7, #10]
 8005722:	2300      	movs	r3, #0
 8005724:	9300      	str	r3, [sp, #0]
 8005726:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800572a:	68f8      	ldr	r0, [r7, #12]
 800572c:	f001 f890 	bl	8006850 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005734:	b29b      	uxth	r3, r3
 8005736:	2b00      	cmp	r3, #0
 8005738:	d19a      	bne.n	8005670 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800573a:	697a      	ldr	r2, [r7, #20]
 800573c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800573e:	68f8      	ldr	r0, [r7, #12]
 8005740:	f000 ff5d 	bl	80065fe <I2C_WaitOnSTOPFlagUntilTimeout>
 8005744:	4603      	mov	r3, r0
 8005746:	2b00      	cmp	r3, #0
 8005748:	d001      	beq.n	800574e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	e01a      	b.n	8005784 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	2220      	movs	r2, #32
 8005754:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	6859      	ldr	r1, [r3, #4]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	4b0b      	ldr	r3, [pc, #44]	; (8005790 <HAL_I2C_Mem_Read+0x230>)
 8005762:	400b      	ands	r3, r1
 8005764:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2220      	movs	r2, #32
 800576a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2200      	movs	r2, #0
 8005772:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2200      	movs	r2, #0
 800577a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800577e:	2300      	movs	r3, #0
 8005780:	e000      	b.n	8005784 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005782:	2302      	movs	r3, #2
  }
}
 8005784:	4618      	mov	r0, r3
 8005786:	3718      	adds	r7, #24
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}
 800578c:	80002400 	.word	0x80002400
 8005790:	fe00e800 	.word	0xfe00e800

08005794 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b086      	sub	sp, #24
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	699b      	ldr	r3, [r3, #24]
 80057a2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	0a1b      	lsrs	r3, r3, #8
 80057b0:	f003 0301 	and.w	r3, r3, #1
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d010      	beq.n	80057da <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	09db      	lsrs	r3, r3, #7
 80057bc:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d00a      	beq.n	80057da <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057c8:	f043 0201 	orr.w	r2, r3, #1
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057d8:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	0a9b      	lsrs	r3, r3, #10
 80057de:	f003 0301 	and.w	r3, r3, #1
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d010      	beq.n	8005808 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	09db      	lsrs	r3, r3, #7
 80057ea:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d00a      	beq.n	8005808 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057f6:	f043 0208 	orr.w	r2, r3, #8
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005806:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	0a5b      	lsrs	r3, r3, #9
 800580c:	f003 0301 	and.w	r3, r3, #1
 8005810:	2b00      	cmp	r3, #0
 8005812:	d010      	beq.n	8005836 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	09db      	lsrs	r3, r3, #7
 8005818:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800581c:	2b00      	cmp	r3, #0
 800581e:	d00a      	beq.n	8005836 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005824:	f043 0202 	orr.w	r2, r3, #2
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005834:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800583a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f003 030b 	and.w	r3, r3, #11
 8005842:	2b00      	cmp	r3, #0
 8005844:	d003      	beq.n	800584e <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8005846:	68f9      	ldr	r1, [r7, #12]
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f000 fd1f 	bl	800628c <I2C_ITError>
  }
}
 800584e:	bf00      	nop
 8005850:	3718      	adds	r7, #24
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}

08005856 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005856:	b480      	push	{r7}
 8005858:	b083      	sub	sp, #12
 800585a:	af00      	add	r7, sp, #0
 800585c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800585e:	bf00      	nop
 8005860:	370c      	adds	r7, #12
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr

0800586a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800586a:	b480      	push	{r7}
 800586c:	b083      	sub	sp, #12
 800586e:	af00      	add	r7, sp, #0
 8005870:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005872:	bf00      	nop
 8005874:	370c      	adds	r7, #12
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr

0800587e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800587e:	b480      	push	{r7}
 8005880:	b083      	sub	sp, #12
 8005882:	af00      	add	r7, sp, #0
 8005884:	6078      	str	r0, [r7, #4]
 8005886:	460b      	mov	r3, r1
 8005888:	70fb      	strb	r3, [r7, #3]
 800588a:	4613      	mov	r3, r2
 800588c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800588e:	bf00      	nop
 8005890:	370c      	adds	r7, #12
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr

0800589a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800589a:	b480      	push	{r7}
 800589c:	b083      	sub	sp, #12
 800589e:	af00      	add	r7, sp, #0
 80058a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80058a2:	bf00      	nop
 80058a4:	370c      	adds	r7, #12
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr

080058ae <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80058ae:	b480      	push	{r7}
 80058b0:	b083      	sub	sp, #12
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80058b6:	bf00      	nop
 80058b8:	370c      	adds	r7, #12
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr

080058c2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80058c2:	b480      	push	{r7}
 80058c4:	b083      	sub	sp, #12
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80058ca:	bf00      	nop
 80058cc:	370c      	adds	r7, #12
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr

080058d6 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80058d6:	b580      	push	{r7, lr}
 80058d8:	b086      	sub	sp, #24
 80058da:	af00      	add	r7, sp, #0
 80058dc:	60f8      	str	r0, [r7, #12]
 80058de:	60b9      	str	r1, [r7, #8]
 80058e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e6:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d101      	bne.n	80058fa <I2C_Slave_ISR_IT+0x24>
 80058f6:	2302      	movs	r3, #2
 80058f8:	e0ec      	b.n	8005ad4 <I2C_Slave_ISR_IT+0x1fe>
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2201      	movs	r2, #1
 80058fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	095b      	lsrs	r3, r3, #5
 8005906:	f003 0301 	and.w	r3, r3, #1
 800590a:	2b00      	cmp	r3, #0
 800590c:	d009      	beq.n	8005922 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	095b      	lsrs	r3, r3, #5
 8005912:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005916:	2b00      	cmp	r3, #0
 8005918:	d003      	beq.n	8005922 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800591a:	6939      	ldr	r1, [r7, #16]
 800591c:	68f8      	ldr	r0, [r7, #12]
 800591e:	f000 fa67 	bl	8005df0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	091b      	lsrs	r3, r3, #4
 8005926:	f003 0301 	and.w	r3, r3, #1
 800592a:	2b00      	cmp	r3, #0
 800592c:	d04d      	beq.n	80059ca <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	091b      	lsrs	r3, r3, #4
 8005932:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005936:	2b00      	cmp	r3, #0
 8005938:	d047      	beq.n	80059ca <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800593e:	b29b      	uxth	r3, r3
 8005940:	2b00      	cmp	r3, #0
 8005942:	d128      	bne.n	8005996 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800594a:	b2db      	uxtb	r3, r3
 800594c:	2b28      	cmp	r3, #40	; 0x28
 800594e:	d108      	bne.n	8005962 <I2C_Slave_ISR_IT+0x8c>
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005956:	d104      	bne.n	8005962 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005958:	6939      	ldr	r1, [r7, #16]
 800595a:	68f8      	ldr	r0, [r7, #12]
 800595c:	f000 fc40 	bl	80061e0 <I2C_ITListenCplt>
 8005960:	e032      	b.n	80059c8 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005968:	b2db      	uxtb	r3, r3
 800596a:	2b29      	cmp	r3, #41	; 0x29
 800596c:	d10e      	bne.n	800598c <I2C_Slave_ISR_IT+0xb6>
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005974:	d00a      	beq.n	800598c <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	2210      	movs	r2, #16
 800597c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800597e:	68f8      	ldr	r0, [r7, #12]
 8005980:	f000 fd7b 	bl	800647a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005984:	68f8      	ldr	r0, [r7, #12]
 8005986:	f000 f9d5 	bl	8005d34 <I2C_ITSlaveSeqCplt>
 800598a:	e01d      	b.n	80059c8 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	2210      	movs	r2, #16
 8005992:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8005994:	e096      	b.n	8005ac4 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	2210      	movs	r2, #16
 800599c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059a2:	f043 0204 	orr.w	r2, r3, #4
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d004      	beq.n	80059ba <I2C_Slave_ISR_IT+0xe4>
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80059b6:	f040 8085 	bne.w	8005ac4 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059be:	4619      	mov	r1, r3
 80059c0:	68f8      	ldr	r0, [r7, #12]
 80059c2:	f000 fc63 	bl	800628c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80059c6:	e07d      	b.n	8005ac4 <I2C_Slave_ISR_IT+0x1ee>
 80059c8:	e07c      	b.n	8005ac4 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	089b      	lsrs	r3, r3, #2
 80059ce:	f003 0301 	and.w	r3, r3, #1
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d030      	beq.n	8005a38 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	089b      	lsrs	r3, r3, #2
 80059da:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d02a      	beq.n	8005a38 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d018      	beq.n	8005a1e <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f6:	b2d2      	uxtb	r2, r2
 80059f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059fe:	1c5a      	adds	r2, r3, #1
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a08:	3b01      	subs	r3, #1
 8005a0a:	b29a      	uxth	r2, r3
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	3b01      	subs	r3, #1
 8005a18:	b29a      	uxth	r2, r3
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d14f      	bne.n	8005ac8 <I2C_Slave_ISR_IT+0x1f2>
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005a2e:	d04b      	beq.n	8005ac8 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8005a30:	68f8      	ldr	r0, [r7, #12]
 8005a32:	f000 f97f 	bl	8005d34 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8005a36:	e047      	b.n	8005ac8 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	08db      	lsrs	r3, r3, #3
 8005a3c:	f003 0301 	and.w	r3, r3, #1
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d00a      	beq.n	8005a5a <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	08db      	lsrs	r3, r3, #3
 8005a48:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d004      	beq.n	8005a5a <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8005a50:	6939      	ldr	r1, [r7, #16]
 8005a52:	68f8      	ldr	r0, [r7, #12]
 8005a54:	f000 f8ea 	bl	8005c2c <I2C_ITAddrCplt>
 8005a58:	e037      	b.n	8005aca <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	085b      	lsrs	r3, r3, #1
 8005a5e:	f003 0301 	and.w	r3, r3, #1
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d031      	beq.n	8005aca <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	085b      	lsrs	r3, r3, #1
 8005a6a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d02b      	beq.n	8005aca <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d018      	beq.n	8005aae <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a80:	781a      	ldrb	r2, [r3, #0]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8c:	1c5a      	adds	r2, r3, #1
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	3b01      	subs	r3, #1
 8005a9a:	b29a      	uxth	r2, r3
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005aa4:	3b01      	subs	r3, #1
 8005aa6:	b29a      	uxth	r2, r3
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	851a      	strh	r2, [r3, #40]	; 0x28
 8005aac:	e00d      	b.n	8005aca <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ab4:	d002      	beq.n	8005abc <I2C_Slave_ISR_IT+0x1e6>
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d106      	bne.n	8005aca <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005abc:	68f8      	ldr	r0, [r7, #12]
 8005abe:	f000 f939 	bl	8005d34 <I2C_ITSlaveSeqCplt>
 8005ac2:	e002      	b.n	8005aca <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8005ac4:	bf00      	nop
 8005ac6:	e000      	b.n	8005aca <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8005ac8:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2200      	movs	r2, #0
 8005ace:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005ad2:	2300      	movs	r3, #0
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3718      	adds	r7, #24
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}

08005adc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b086      	sub	sp, #24
 8005ae0:	af02      	add	r7, sp, #8
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	4608      	mov	r0, r1
 8005ae6:	4611      	mov	r1, r2
 8005ae8:	461a      	mov	r2, r3
 8005aea:	4603      	mov	r3, r0
 8005aec:	817b      	strh	r3, [r7, #10]
 8005aee:	460b      	mov	r3, r1
 8005af0:	813b      	strh	r3, [r7, #8]
 8005af2:	4613      	mov	r3, r2
 8005af4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005af6:	88fb      	ldrh	r3, [r7, #6]
 8005af8:	b2da      	uxtb	r2, r3
 8005afa:	8979      	ldrh	r1, [r7, #10]
 8005afc:	4b20      	ldr	r3, [pc, #128]	; (8005b80 <I2C_RequestMemoryWrite+0xa4>)
 8005afe:	9300      	str	r3, [sp, #0]
 8005b00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005b04:	68f8      	ldr	r0, [r7, #12]
 8005b06:	f000 fea3 	bl	8006850 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b0a:	69fa      	ldr	r2, [r7, #28]
 8005b0c:	69b9      	ldr	r1, [r7, #24]
 8005b0e:	68f8      	ldr	r0, [r7, #12]
 8005b10:	f000 fd35 	bl	800657e <I2C_WaitOnTXISFlagUntilTimeout>
 8005b14:	4603      	mov	r3, r0
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d001      	beq.n	8005b1e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e02c      	b.n	8005b78 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b1e:	88fb      	ldrh	r3, [r7, #6]
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d105      	bne.n	8005b30 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005b24:	893b      	ldrh	r3, [r7, #8]
 8005b26:	b2da      	uxtb	r2, r3
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	629a      	str	r2, [r3, #40]	; 0x28
 8005b2e:	e015      	b.n	8005b5c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005b30:	893b      	ldrh	r3, [r7, #8]
 8005b32:	0a1b      	lsrs	r3, r3, #8
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	b2da      	uxtb	r2, r3
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b3e:	69fa      	ldr	r2, [r7, #28]
 8005b40:	69b9      	ldr	r1, [r7, #24]
 8005b42:	68f8      	ldr	r0, [r7, #12]
 8005b44:	f000 fd1b 	bl	800657e <I2C_WaitOnTXISFlagUntilTimeout>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d001      	beq.n	8005b52 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e012      	b.n	8005b78 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005b52:	893b      	ldrh	r3, [r7, #8]
 8005b54:	b2da      	uxtb	r2, r3
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005b5c:	69fb      	ldr	r3, [r7, #28]
 8005b5e:	9300      	str	r3, [sp, #0]
 8005b60:	69bb      	ldr	r3, [r7, #24]
 8005b62:	2200      	movs	r2, #0
 8005b64:	2180      	movs	r1, #128	; 0x80
 8005b66:	68f8      	ldr	r0, [r7, #12]
 8005b68:	f000 fcc9 	bl	80064fe <I2C_WaitOnFlagUntilTimeout>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d001      	beq.n	8005b76 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	e000      	b.n	8005b78 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005b76:	2300      	movs	r3, #0
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3710      	adds	r7, #16
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}
 8005b80:	80002000 	.word	0x80002000

08005b84 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b086      	sub	sp, #24
 8005b88:	af02      	add	r7, sp, #8
 8005b8a:	60f8      	str	r0, [r7, #12]
 8005b8c:	4608      	mov	r0, r1
 8005b8e:	4611      	mov	r1, r2
 8005b90:	461a      	mov	r2, r3
 8005b92:	4603      	mov	r3, r0
 8005b94:	817b      	strh	r3, [r7, #10]
 8005b96:	460b      	mov	r3, r1
 8005b98:	813b      	strh	r3, [r7, #8]
 8005b9a:	4613      	mov	r3, r2
 8005b9c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005b9e:	88fb      	ldrh	r3, [r7, #6]
 8005ba0:	b2da      	uxtb	r2, r3
 8005ba2:	8979      	ldrh	r1, [r7, #10]
 8005ba4:	4b20      	ldr	r3, [pc, #128]	; (8005c28 <I2C_RequestMemoryRead+0xa4>)
 8005ba6:	9300      	str	r3, [sp, #0]
 8005ba8:	2300      	movs	r3, #0
 8005baa:	68f8      	ldr	r0, [r7, #12]
 8005bac:	f000 fe50 	bl	8006850 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bb0:	69fa      	ldr	r2, [r7, #28]
 8005bb2:	69b9      	ldr	r1, [r7, #24]
 8005bb4:	68f8      	ldr	r0, [r7, #12]
 8005bb6:	f000 fce2 	bl	800657e <I2C_WaitOnTXISFlagUntilTimeout>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d001      	beq.n	8005bc4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e02c      	b.n	8005c1e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005bc4:	88fb      	ldrh	r3, [r7, #6]
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d105      	bne.n	8005bd6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005bca:	893b      	ldrh	r3, [r7, #8]
 8005bcc:	b2da      	uxtb	r2, r3
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	629a      	str	r2, [r3, #40]	; 0x28
 8005bd4:	e015      	b.n	8005c02 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005bd6:	893b      	ldrh	r3, [r7, #8]
 8005bd8:	0a1b      	lsrs	r3, r3, #8
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	b2da      	uxtb	r2, r3
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005be4:	69fa      	ldr	r2, [r7, #28]
 8005be6:	69b9      	ldr	r1, [r7, #24]
 8005be8:	68f8      	ldr	r0, [r7, #12]
 8005bea:	f000 fcc8 	bl	800657e <I2C_WaitOnTXISFlagUntilTimeout>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d001      	beq.n	8005bf8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e012      	b.n	8005c1e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005bf8:	893b      	ldrh	r3, [r7, #8]
 8005bfa:	b2da      	uxtb	r2, r3
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005c02:	69fb      	ldr	r3, [r7, #28]
 8005c04:	9300      	str	r3, [sp, #0]
 8005c06:	69bb      	ldr	r3, [r7, #24]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	2140      	movs	r1, #64	; 0x40
 8005c0c:	68f8      	ldr	r0, [r7, #12]
 8005c0e:	f000 fc76 	bl	80064fe <I2C_WaitOnFlagUntilTimeout>
 8005c12:	4603      	mov	r3, r0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d001      	beq.n	8005c1c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	e000      	b.n	8005c1e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005c1c:	2300      	movs	r3, #0
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3710      	adds	r7, #16
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	80002000 	.word	0x80002000

08005c2c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b084      	sub	sp, #16
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005c42:	2b28      	cmp	r3, #40	; 0x28
 8005c44:	d16a      	bne.n	8005d1c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	699b      	ldr	r3, [r3, #24]
 8005c4c:	0c1b      	lsrs	r3, r3, #16
 8005c4e:	b2db      	uxtb	r3, r3
 8005c50:	f003 0301 	and.w	r3, r3, #1
 8005c54:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	699b      	ldr	r3, [r3, #24]
 8005c5c:	0c1b      	lsrs	r3, r3, #16
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005c64:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c72:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	68db      	ldr	r3, [r3, #12]
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005c80:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	2b02      	cmp	r3, #2
 8005c88:	d138      	bne.n	8005cfc <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8005c8a:	897b      	ldrh	r3, [r7, #10]
 8005c8c:	09db      	lsrs	r3, r3, #7
 8005c8e:	b29a      	uxth	r2, r3
 8005c90:	89bb      	ldrh	r3, [r7, #12]
 8005c92:	4053      	eors	r3, r2
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	f003 0306 	and.w	r3, r3, #6
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d11c      	bne.n	8005cd8 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8005c9e:	897b      	ldrh	r3, [r7, #10]
 8005ca0:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ca6:	1c5a      	adds	r2, r3, #1
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cb0:	2b02      	cmp	r3, #2
 8005cb2:	d13b      	bne.n	8005d2c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	2208      	movs	r2, #8
 8005cc0:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005cca:	89ba      	ldrh	r2, [r7, #12]
 8005ccc:	7bfb      	ldrb	r3, [r7, #15]
 8005cce:	4619      	mov	r1, r3
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f7ff fdd4 	bl	800587e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005cd6:	e029      	b.n	8005d2c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8005cd8:	893b      	ldrh	r3, [r7, #8]
 8005cda:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005cdc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f000 fde7 	bl	80068b4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005cee:	89ba      	ldrh	r2, [r7, #12]
 8005cf0:	7bfb      	ldrb	r3, [r7, #15]
 8005cf2:	4619      	mov	r1, r3
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f7ff fdc2 	bl	800587e <HAL_I2C_AddrCallback>
}
 8005cfa:	e017      	b.n	8005d2c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005cfc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f000 fdd7 	bl	80068b4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005d0e:	89ba      	ldrh	r2, [r7, #12]
 8005d10:	7bfb      	ldrb	r3, [r7, #15]
 8005d12:	4619      	mov	r1, r3
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f7ff fdb2 	bl	800587e <HAL_I2C_AddrCallback>
}
 8005d1a:	e007      	b.n	8005d2c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	2208      	movs	r2, #8
 8005d22:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8005d2c:	bf00      	nop
 8005d2e:	3710      	adds	r7, #16
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}

08005d34 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b084      	sub	sp, #16
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2200      	movs	r2, #0
 8005d48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	0b9b      	lsrs	r3, r3, #14
 8005d50:	f003 0301 	and.w	r3, r3, #1
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d008      	beq.n	8005d6a <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	681a      	ldr	r2, [r3, #0]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005d66:	601a      	str	r2, [r3, #0]
 8005d68:	e00d      	b.n	8005d86 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	0bdb      	lsrs	r3, r3, #15
 8005d6e:	f003 0301 	and.w	r3, r3, #1
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d007      	beq.n	8005d86 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005d84:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	2b29      	cmp	r3, #41	; 0x29
 8005d90:	d112      	bne.n	8005db8 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2228      	movs	r2, #40	; 0x28
 8005d96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2221      	movs	r2, #33	; 0x21
 8005d9e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005da0:	2101      	movs	r1, #1
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f000 fd86 	bl	80068b4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2200      	movs	r2, #0
 8005dac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f7ff fd50 	bl	8005856 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005db6:	e017      	b.n	8005de8 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	2b2a      	cmp	r3, #42	; 0x2a
 8005dc2:	d111      	bne.n	8005de8 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2228      	movs	r2, #40	; 0x28
 8005dc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2222      	movs	r2, #34	; 0x22
 8005dd0:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005dd2:	2102      	movs	r1, #2
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f000 fd6d 	bl	80068b4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f7ff fd41 	bl	800586a <HAL_I2C_SlaveRxCpltCallback>
}
 8005de8:	bf00      	nop
 8005dea:	3710      	adds	r7, #16
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}

08005df0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b086      	sub	sp, #24
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e0c:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	2220      	movs	r2, #32
 8005e14:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005e16:	7bfb      	ldrb	r3, [r7, #15]
 8005e18:	2b21      	cmp	r3, #33	; 0x21
 8005e1a:	d002      	beq.n	8005e22 <I2C_ITSlaveCplt+0x32>
 8005e1c:	7bfb      	ldrb	r3, [r7, #15]
 8005e1e:	2b29      	cmp	r3, #41	; 0x29
 8005e20:	d108      	bne.n	8005e34 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8005e22:	f248 0101 	movw	r1, #32769	; 0x8001
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f000 fd44 	bl	80068b4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2221      	movs	r2, #33	; 0x21
 8005e30:	631a      	str	r2, [r3, #48]	; 0x30
 8005e32:	e00d      	b.n	8005e50 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005e34:	7bfb      	ldrb	r3, [r7, #15]
 8005e36:	2b22      	cmp	r3, #34	; 0x22
 8005e38:	d002      	beq.n	8005e40 <I2C_ITSlaveCplt+0x50>
 8005e3a:	7bfb      	ldrb	r3, [r7, #15]
 8005e3c:	2b2a      	cmp	r3, #42	; 0x2a
 8005e3e:	d107      	bne.n	8005e50 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8005e40:	f248 0102 	movw	r1, #32770	; 0x8002
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f000 fd35 	bl	80068b4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2222      	movs	r2, #34	; 0x22
 8005e4e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	685a      	ldr	r2, [r3, #4]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e5e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	6859      	ldr	r1, [r3, #4]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	4b80      	ldr	r3, [pc, #512]	; (800606c <I2C_ITSlaveCplt+0x27c>)
 8005e6c:	400b      	ands	r3, r1
 8005e6e:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f000 fb02 	bl	800647a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	0b9b      	lsrs	r3, r3, #14
 8005e7a:	f003 0301 	and.w	r3, r3, #1
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d07a      	beq.n	8005f78 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	681a      	ldr	r2, [r3, #0]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005e90:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	f000 8111 	beq.w	80060be <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a73      	ldr	r2, [pc, #460]	; (8006070 <I2C_ITSlaveCplt+0x280>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d059      	beq.n	8005f5c <I2C_ITSlaveCplt+0x16c>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a71      	ldr	r2, [pc, #452]	; (8006074 <I2C_ITSlaveCplt+0x284>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d053      	beq.n	8005f5c <I2C_ITSlaveCplt+0x16c>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a6f      	ldr	r2, [pc, #444]	; (8006078 <I2C_ITSlaveCplt+0x288>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d04d      	beq.n	8005f5c <I2C_ITSlaveCplt+0x16c>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a6d      	ldr	r2, [pc, #436]	; (800607c <I2C_ITSlaveCplt+0x28c>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d047      	beq.n	8005f5c <I2C_ITSlaveCplt+0x16c>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a6b      	ldr	r2, [pc, #428]	; (8006080 <I2C_ITSlaveCplt+0x290>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d041      	beq.n	8005f5c <I2C_ITSlaveCplt+0x16c>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a69      	ldr	r2, [pc, #420]	; (8006084 <I2C_ITSlaveCplt+0x294>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d03b      	beq.n	8005f5c <I2C_ITSlaveCplt+0x16c>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a67      	ldr	r2, [pc, #412]	; (8006088 <I2C_ITSlaveCplt+0x298>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d035      	beq.n	8005f5c <I2C_ITSlaveCplt+0x16c>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a65      	ldr	r2, [pc, #404]	; (800608c <I2C_ITSlaveCplt+0x29c>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d02f      	beq.n	8005f5c <I2C_ITSlaveCplt+0x16c>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a63      	ldr	r2, [pc, #396]	; (8006090 <I2C_ITSlaveCplt+0x2a0>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d029      	beq.n	8005f5c <I2C_ITSlaveCplt+0x16c>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a61      	ldr	r2, [pc, #388]	; (8006094 <I2C_ITSlaveCplt+0x2a4>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d023      	beq.n	8005f5c <I2C_ITSlaveCplt+0x16c>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a5f      	ldr	r2, [pc, #380]	; (8006098 <I2C_ITSlaveCplt+0x2a8>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d01d      	beq.n	8005f5c <I2C_ITSlaveCplt+0x16c>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a5d      	ldr	r2, [pc, #372]	; (800609c <I2C_ITSlaveCplt+0x2ac>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d017      	beq.n	8005f5c <I2C_ITSlaveCplt+0x16c>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a5b      	ldr	r2, [pc, #364]	; (80060a0 <I2C_ITSlaveCplt+0x2b0>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d011      	beq.n	8005f5c <I2C_ITSlaveCplt+0x16c>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a59      	ldr	r2, [pc, #356]	; (80060a4 <I2C_ITSlaveCplt+0x2b4>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d00b      	beq.n	8005f5c <I2C_ITSlaveCplt+0x16c>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a57      	ldr	r2, [pc, #348]	; (80060a8 <I2C_ITSlaveCplt+0x2b8>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d005      	beq.n	8005f5c <I2C_ITSlaveCplt+0x16c>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a55      	ldr	r2, [pc, #340]	; (80060ac <I2C_ITSlaveCplt+0x2bc>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d105      	bne.n	8005f68 <I2C_ITSlaveCplt+0x178>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	e004      	b.n	8005f72 <I2C_ITSlaveCplt+0x182>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	8553      	strh	r3, [r2, #42]	; 0x2a
 8005f76:	e0a2      	b.n	80060be <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	0bdb      	lsrs	r3, r3, #15
 8005f7c:	f003 0301 	and.w	r3, r3, #1
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	f000 809c 	beq.w	80060be <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005f94:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	f000 808f 	beq.w	80060be <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a32      	ldr	r2, [pc, #200]	; (8006070 <I2C_ITSlaveCplt+0x280>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d059      	beq.n	8006060 <I2C_ITSlaveCplt+0x270>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a30      	ldr	r2, [pc, #192]	; (8006074 <I2C_ITSlaveCplt+0x284>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d053      	beq.n	8006060 <I2C_ITSlaveCplt+0x270>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a2e      	ldr	r2, [pc, #184]	; (8006078 <I2C_ITSlaveCplt+0x288>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d04d      	beq.n	8006060 <I2C_ITSlaveCplt+0x270>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a2c      	ldr	r2, [pc, #176]	; (800607c <I2C_ITSlaveCplt+0x28c>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d047      	beq.n	8006060 <I2C_ITSlaveCplt+0x270>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a2a      	ldr	r2, [pc, #168]	; (8006080 <I2C_ITSlaveCplt+0x290>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d041      	beq.n	8006060 <I2C_ITSlaveCplt+0x270>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a28      	ldr	r2, [pc, #160]	; (8006084 <I2C_ITSlaveCplt+0x294>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d03b      	beq.n	8006060 <I2C_ITSlaveCplt+0x270>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a26      	ldr	r2, [pc, #152]	; (8006088 <I2C_ITSlaveCplt+0x298>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d035      	beq.n	8006060 <I2C_ITSlaveCplt+0x270>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a24      	ldr	r2, [pc, #144]	; (800608c <I2C_ITSlaveCplt+0x29c>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d02f      	beq.n	8006060 <I2C_ITSlaveCplt+0x270>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a22      	ldr	r2, [pc, #136]	; (8006090 <I2C_ITSlaveCplt+0x2a0>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d029      	beq.n	8006060 <I2C_ITSlaveCplt+0x270>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a20      	ldr	r2, [pc, #128]	; (8006094 <I2C_ITSlaveCplt+0x2a4>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d023      	beq.n	8006060 <I2C_ITSlaveCplt+0x270>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a1e      	ldr	r2, [pc, #120]	; (8006098 <I2C_ITSlaveCplt+0x2a8>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d01d      	beq.n	8006060 <I2C_ITSlaveCplt+0x270>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a1c      	ldr	r2, [pc, #112]	; (800609c <I2C_ITSlaveCplt+0x2ac>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d017      	beq.n	8006060 <I2C_ITSlaveCplt+0x270>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a1a      	ldr	r2, [pc, #104]	; (80060a0 <I2C_ITSlaveCplt+0x2b0>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d011      	beq.n	8006060 <I2C_ITSlaveCplt+0x270>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a18      	ldr	r2, [pc, #96]	; (80060a4 <I2C_ITSlaveCplt+0x2b4>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d00b      	beq.n	8006060 <I2C_ITSlaveCplt+0x270>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a16      	ldr	r2, [pc, #88]	; (80060a8 <I2C_ITSlaveCplt+0x2b8>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d005      	beq.n	8006060 <I2C_ITSlaveCplt+0x270>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a14      	ldr	r2, [pc, #80]	; (80060ac <I2C_ITSlaveCplt+0x2bc>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d127      	bne.n	80060b0 <I2C_ITSlaveCplt+0x2c0>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	b29b      	uxth	r3, r3
 800606a:	e026      	b.n	80060ba <I2C_ITSlaveCplt+0x2ca>
 800606c:	fe00e800 	.word	0xfe00e800
 8006070:	40020010 	.word	0x40020010
 8006074:	40020028 	.word	0x40020028
 8006078:	40020040 	.word	0x40020040
 800607c:	40020058 	.word	0x40020058
 8006080:	40020070 	.word	0x40020070
 8006084:	40020088 	.word	0x40020088
 8006088:	400200a0 	.word	0x400200a0
 800608c:	400200b8 	.word	0x400200b8
 8006090:	40020410 	.word	0x40020410
 8006094:	40020428 	.word	0x40020428
 8006098:	40020440 	.word	0x40020440
 800609c:	40020458 	.word	0x40020458
 80060a0:	40020470 	.word	0x40020470
 80060a4:	40020488 	.word	0x40020488
 80060a8:	400204a0 	.word	0x400204a0
 80060ac:	400204b8 	.word	0x400204b8
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	089b      	lsrs	r3, r3, #2
 80060c2:	f003 0301 	and.w	r3, r3, #1
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d020      	beq.n	800610c <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	f023 0304 	bic.w	r3, r3, #4
 80060d0:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060dc:	b2d2      	uxtb	r2, r2
 80060de:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e4:	1c5a      	adds	r2, r3, #1
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d00c      	beq.n	800610c <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060f6:	3b01      	subs	r3, #1
 80060f8:	b29a      	uxth	r2, r3
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006102:	b29b      	uxth	r3, r3
 8006104:	3b01      	subs	r3, #1
 8006106:	b29a      	uxth	r2, r3
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006110:	b29b      	uxth	r3, r3
 8006112:	2b00      	cmp	r3, #0
 8006114:	d005      	beq.n	8006122 <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800611a:	f043 0204 	orr.w	r2, r3, #4
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2200      	movs	r2, #0
 8006126:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2200      	movs	r2, #0
 800612e:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006134:	2b00      	cmp	r3, #0
 8006136:	d010      	beq.n	800615a <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800613c:	4619      	mov	r1, r3
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 f8a4 	bl	800628c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800614a:	b2db      	uxtb	r3, r3
 800614c:	2b28      	cmp	r3, #40	; 0x28
 800614e:	d141      	bne.n	80061d4 <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006150:	6979      	ldr	r1, [r7, #20]
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f000 f844 	bl	80061e0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006158:	e03c      	b.n	80061d4 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800615e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006162:	d014      	beq.n	800618e <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f7ff fde5 	bl	8005d34 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	4a1b      	ldr	r2, [pc, #108]	; (80061dc <I2C_ITSlaveCplt+0x3ec>)
 800616e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2220      	movs	r2, #32
 8006174:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2200      	movs	r2, #0
 800617c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2200      	movs	r2, #0
 8006182:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f7ff fb87 	bl	800589a <HAL_I2C_ListenCpltCallback>
}
 800618c:	e022      	b.n	80061d4 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006194:	b2db      	uxtb	r3, r3
 8006196:	2b22      	cmp	r3, #34	; 0x22
 8006198:	d10e      	bne.n	80061b8 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2220      	movs	r2, #32
 800619e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2200      	movs	r2, #0
 80061a6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2200      	movs	r2, #0
 80061ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f7ff fb5a 	bl	800586a <HAL_I2C_SlaveRxCpltCallback>
}
 80061b6:	e00d      	b.n	80061d4 <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2220      	movs	r2, #32
 80061bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2200      	movs	r2, #0
 80061c4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2200      	movs	r2, #0
 80061ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f7ff fb41 	bl	8005856 <HAL_I2C_SlaveTxCpltCallback>
}
 80061d4:	bf00      	nop
 80061d6:	3718      	adds	r7, #24
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}
 80061dc:	ffff0000 	.word	0xffff0000

080061e0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b082      	sub	sp, #8
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4a26      	ldr	r2, [pc, #152]	; (8006288 <I2C_ITListenCplt+0xa8>)
 80061ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2220      	movs	r2, #32
 80061fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2200      	movs	r2, #0
 8006202:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2200      	movs	r2, #0
 800620a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	089b      	lsrs	r3, r3, #2
 8006210:	f003 0301 	and.w	r3, r3, #1
 8006214:	2b00      	cmp	r3, #0
 8006216:	d022      	beq.n	800625e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006222:	b2d2      	uxtb	r2, r2
 8006224:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800622a:	1c5a      	adds	r2, r3, #1
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006234:	2b00      	cmp	r3, #0
 8006236:	d012      	beq.n	800625e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800623c:	3b01      	subs	r3, #1
 800623e:	b29a      	uxth	r2, r3
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006248:	b29b      	uxth	r3, r3
 800624a:	3b01      	subs	r3, #1
 800624c:	b29a      	uxth	r2, r3
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006256:	f043 0204 	orr.w	r2, r3, #4
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800625e:	f248 0103 	movw	r1, #32771	; 0x8003
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 fb26 	bl	80068b4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	2210      	movs	r2, #16
 800626e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f7ff fb0e 	bl	800589a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800627e:	bf00      	nop
 8006280:	3708      	adds	r7, #8
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
 8006286:	bf00      	nop
 8006288:	ffff0000 	.word	0xffff0000

0800628c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b084      	sub	sp, #16
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800629c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2200      	movs	r2, #0
 80062a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	4a5d      	ldr	r2, [pc, #372]	; (8006420 <I2C_ITError+0x194>)
 80062aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2200      	movs	r2, #0
 80062b0:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	431a      	orrs	r2, r3
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80062be:	7bfb      	ldrb	r3, [r7, #15]
 80062c0:	2b28      	cmp	r3, #40	; 0x28
 80062c2:	d005      	beq.n	80062d0 <I2C_ITError+0x44>
 80062c4:	7bfb      	ldrb	r3, [r7, #15]
 80062c6:	2b29      	cmp	r3, #41	; 0x29
 80062c8:	d002      	beq.n	80062d0 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80062ca:	7bfb      	ldrb	r3, [r7, #15]
 80062cc:	2b2a      	cmp	r3, #42	; 0x2a
 80062ce:	d10b      	bne.n	80062e8 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80062d0:	2103      	movs	r1, #3
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 faee 	bl	80068b4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2228      	movs	r2, #40	; 0x28
 80062dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	4a50      	ldr	r2, [pc, #320]	; (8006424 <I2C_ITError+0x198>)
 80062e4:	635a      	str	r2, [r3, #52]	; 0x34
 80062e6:	e011      	b.n	800630c <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80062e8:	f248 0103 	movw	r1, #32771	; 0x8003
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f000 fae1 	bl	80068b4 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062f8:	b2db      	uxtb	r3, r3
 80062fa:	2b60      	cmp	r3, #96	; 0x60
 80062fc:	d003      	beq.n	8006306 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2220      	movs	r2, #32
 8006302:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2200      	movs	r2, #0
 800630a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006310:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006316:	2b00      	cmp	r3, #0
 8006318:	d039      	beq.n	800638e <I2C_ITError+0x102>
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	2b11      	cmp	r3, #17
 800631e:	d002      	beq.n	8006326 <I2C_ITError+0x9a>
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	2b21      	cmp	r3, #33	; 0x21
 8006324:	d133      	bne.n	800638e <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006330:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006334:	d107      	bne.n	8006346 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	681a      	ldr	r2, [r3, #0]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006344:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800634a:	4618      	mov	r0, r3
 800634c:	f7fd fea8 	bl	80040a0 <HAL_DMA_GetState>
 8006350:	4603      	mov	r3, r0
 8006352:	2b01      	cmp	r3, #1
 8006354:	d017      	beq.n	8006386 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800635a:	4a33      	ldr	r2, [pc, #204]	; (8006428 <I2C_ITError+0x19c>)
 800635c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2200      	movs	r2, #0
 8006362:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800636a:	4618      	mov	r0, r3
 800636c:	f7fc fd2a 	bl	8002dc4 <HAL_DMA_Abort_IT>
 8006370:	4603      	mov	r3, r0
 8006372:	2b00      	cmp	r3, #0
 8006374:	d04d      	beq.n	8006412 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800637a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006380:	4610      	mov	r0, r2
 8006382:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006384:	e045      	b.n	8006412 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 f850 	bl	800642c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800638c:	e041      	b.n	8006412 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006392:	2b00      	cmp	r3, #0
 8006394:	d039      	beq.n	800640a <I2C_ITError+0x17e>
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	2b12      	cmp	r3, #18
 800639a:	d002      	beq.n	80063a2 <I2C_ITError+0x116>
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	2b22      	cmp	r3, #34	; 0x22
 80063a0:	d133      	bne.n	800640a <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80063ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063b0:	d107      	bne.n	80063c2 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80063c0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063c6:	4618      	mov	r0, r3
 80063c8:	f7fd fe6a 	bl	80040a0 <HAL_DMA_GetState>
 80063cc:	4603      	mov	r3, r0
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	d017      	beq.n	8006402 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063d6:	4a14      	ldr	r2, [pc, #80]	; (8006428 <I2C_ITError+0x19c>)
 80063d8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2200      	movs	r2, #0
 80063de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063e6:	4618      	mov	r0, r3
 80063e8:	f7fc fcec 	bl	8002dc4 <HAL_DMA_Abort_IT>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d011      	beq.n	8006416 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063f8:	687a      	ldr	r2, [r7, #4]
 80063fa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80063fc:	4610      	mov	r0, r2
 80063fe:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006400:	e009      	b.n	8006416 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 f812 	bl	800642c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006408:	e005      	b.n	8006416 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f000 f80e 	bl	800642c <I2C_TreatErrorCallback>
  }
}
 8006410:	e002      	b.n	8006418 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006412:	bf00      	nop
 8006414:	e000      	b.n	8006418 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006416:	bf00      	nop
}
 8006418:	bf00      	nop
 800641a:	3710      	adds	r7, #16
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}
 8006420:	ffff0000 	.word	0xffff0000
 8006424:	080058d7 	.word	0x080058d7
 8006428:	080064c3 	.word	0x080064c3

0800642c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b082      	sub	sp, #8
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800643a:	b2db      	uxtb	r3, r3
 800643c:	2b60      	cmp	r3, #96	; 0x60
 800643e:	d10e      	bne.n	800645e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2220      	movs	r2, #32
 8006444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2200      	movs	r2, #0
 800644c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f7ff fa33 	bl	80058c2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800645c:	e009      	b.n	8006472 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2200      	movs	r2, #0
 8006462:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2200      	movs	r2, #0
 8006468:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f7ff fa1e 	bl	80058ae <HAL_I2C_ErrorCallback>
}
 8006472:	bf00      	nop
 8006474:	3708      	adds	r7, #8
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}

0800647a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800647a:	b480      	push	{r7}
 800647c:	b083      	sub	sp, #12
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	699b      	ldr	r3, [r3, #24]
 8006488:	f003 0302 	and.w	r3, r3, #2
 800648c:	2b02      	cmp	r3, #2
 800648e:	d103      	bne.n	8006498 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	2200      	movs	r2, #0
 8006496:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	699b      	ldr	r3, [r3, #24]
 800649e:	f003 0301 	and.w	r3, r3, #1
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d007      	beq.n	80064b6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	699a      	ldr	r2, [r3, #24]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f042 0201 	orr.w	r2, r2, #1
 80064b4:	619a      	str	r2, [r3, #24]
  }
}
 80064b6:	bf00      	nop
 80064b8:	370c      	adds	r7, #12
 80064ba:	46bd      	mov	sp, r7
 80064bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c0:	4770      	bx	lr

080064c2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80064c2:	b580      	push	{r7, lr}
 80064c4:	b084      	sub	sp, #16
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ce:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d003      	beq.n	80064e0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064dc:	2200      	movs	r2, #0
 80064de:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d003      	beq.n	80064f0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064ec:	2200      	movs	r2, #0
 80064ee:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 80064f0:	68f8      	ldr	r0, [r7, #12]
 80064f2:	f7ff ff9b 	bl	800642c <I2C_TreatErrorCallback>
}
 80064f6:	bf00      	nop
 80064f8:	3710      	adds	r7, #16
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}

080064fe <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80064fe:	b580      	push	{r7, lr}
 8006500:	b084      	sub	sp, #16
 8006502:	af00      	add	r7, sp, #0
 8006504:	60f8      	str	r0, [r7, #12]
 8006506:	60b9      	str	r1, [r7, #8]
 8006508:	603b      	str	r3, [r7, #0]
 800650a:	4613      	mov	r3, r2
 800650c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800650e:	e022      	b.n	8006556 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006516:	d01e      	beq.n	8006556 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006518:	f7fb fad4 	bl	8001ac4 <HAL_GetTick>
 800651c:	4602      	mov	r2, r0
 800651e:	69bb      	ldr	r3, [r7, #24]
 8006520:	1ad3      	subs	r3, r2, r3
 8006522:	683a      	ldr	r2, [r7, #0]
 8006524:	429a      	cmp	r2, r3
 8006526:	d302      	bcc.n	800652e <I2C_WaitOnFlagUntilTimeout+0x30>
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d113      	bne.n	8006556 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006532:	f043 0220 	orr.w	r2, r3, #32
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2220      	movs	r2, #32
 800653e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2200      	movs	r2, #0
 8006546:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2200      	movs	r2, #0
 800654e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	e00f      	b.n	8006576 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	699a      	ldr	r2, [r3, #24]
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	4013      	ands	r3, r2
 8006560:	68ba      	ldr	r2, [r7, #8]
 8006562:	429a      	cmp	r2, r3
 8006564:	bf0c      	ite	eq
 8006566:	2301      	moveq	r3, #1
 8006568:	2300      	movne	r3, #0
 800656a:	b2db      	uxtb	r3, r3
 800656c:	461a      	mov	r2, r3
 800656e:	79fb      	ldrb	r3, [r7, #7]
 8006570:	429a      	cmp	r2, r3
 8006572:	d0cd      	beq.n	8006510 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006574:	2300      	movs	r3, #0
}
 8006576:	4618      	mov	r0, r3
 8006578:	3710      	adds	r7, #16
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}

0800657e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800657e:	b580      	push	{r7, lr}
 8006580:	b084      	sub	sp, #16
 8006582:	af00      	add	r7, sp, #0
 8006584:	60f8      	str	r0, [r7, #12]
 8006586:	60b9      	str	r1, [r7, #8]
 8006588:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800658a:	e02c      	b.n	80065e6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800658c:	687a      	ldr	r2, [r7, #4]
 800658e:	68b9      	ldr	r1, [r7, #8]
 8006590:	68f8      	ldr	r0, [r7, #12]
 8006592:	f000 f871 	bl	8006678 <I2C_IsErrorOccurred>
 8006596:	4603      	mov	r3, r0
 8006598:	2b00      	cmp	r3, #0
 800659a:	d001      	beq.n	80065a0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800659c:	2301      	movs	r3, #1
 800659e:	e02a      	b.n	80065f6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065a6:	d01e      	beq.n	80065e6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065a8:	f7fb fa8c 	bl	8001ac4 <HAL_GetTick>
 80065ac:	4602      	mov	r2, r0
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	1ad3      	subs	r3, r2, r3
 80065b2:	68ba      	ldr	r2, [r7, #8]
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d302      	bcc.n	80065be <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d113      	bne.n	80065e6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065c2:	f043 0220 	orr.w	r2, r3, #32
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2220      	movs	r2, #32
 80065ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2200      	movs	r2, #0
 80065d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2200      	movs	r2, #0
 80065de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	e007      	b.n	80065f6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	699b      	ldr	r3, [r3, #24]
 80065ec:	f003 0302 	and.w	r3, r3, #2
 80065f0:	2b02      	cmp	r3, #2
 80065f2:	d1cb      	bne.n	800658c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80065f4:	2300      	movs	r3, #0
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3710      	adds	r7, #16
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}

080065fe <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80065fe:	b580      	push	{r7, lr}
 8006600:	b084      	sub	sp, #16
 8006602:	af00      	add	r7, sp, #0
 8006604:	60f8      	str	r0, [r7, #12]
 8006606:	60b9      	str	r1, [r7, #8]
 8006608:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800660a:	e028      	b.n	800665e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	68b9      	ldr	r1, [r7, #8]
 8006610:	68f8      	ldr	r0, [r7, #12]
 8006612:	f000 f831 	bl	8006678 <I2C_IsErrorOccurred>
 8006616:	4603      	mov	r3, r0
 8006618:	2b00      	cmp	r3, #0
 800661a:	d001      	beq.n	8006620 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800661c:	2301      	movs	r3, #1
 800661e:	e026      	b.n	800666e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006620:	f7fb fa50 	bl	8001ac4 <HAL_GetTick>
 8006624:	4602      	mov	r2, r0
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	1ad3      	subs	r3, r2, r3
 800662a:	68ba      	ldr	r2, [r7, #8]
 800662c:	429a      	cmp	r2, r3
 800662e:	d302      	bcc.n	8006636 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d113      	bne.n	800665e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800663a:	f043 0220 	orr.w	r2, r3, #32
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2220      	movs	r2, #32
 8006646:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2200      	movs	r2, #0
 800664e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2200      	movs	r2, #0
 8006656:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	e007      	b.n	800666e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	699b      	ldr	r3, [r3, #24]
 8006664:	f003 0320 	and.w	r3, r3, #32
 8006668:	2b20      	cmp	r3, #32
 800666a:	d1cf      	bne.n	800660c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800666c:	2300      	movs	r3, #0
}
 800666e:	4618      	mov	r0, r3
 8006670:	3710      	adds	r7, #16
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}
	...

08006678 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b08a      	sub	sp, #40	; 0x28
 800667c:	af00      	add	r7, sp, #0
 800667e:	60f8      	str	r0, [r7, #12]
 8006680:	60b9      	str	r1, [r7, #8]
 8006682:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006684:	2300      	movs	r3, #0
 8006686:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	699b      	ldr	r3, [r3, #24]
 8006690:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006692:	2300      	movs	r3, #0
 8006694:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800669a:	69bb      	ldr	r3, [r7, #24]
 800669c:	f003 0310 	and.w	r3, r3, #16
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d075      	beq.n	8006790 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	2210      	movs	r2, #16
 80066aa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80066ac:	e056      	b.n	800675c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066b4:	d052      	beq.n	800675c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80066b6:	f7fb fa05 	bl	8001ac4 <HAL_GetTick>
 80066ba:	4602      	mov	r2, r0
 80066bc:	69fb      	ldr	r3, [r7, #28]
 80066be:	1ad3      	subs	r3, r2, r3
 80066c0:	68ba      	ldr	r2, [r7, #8]
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d302      	bcc.n	80066cc <I2C_IsErrorOccurred+0x54>
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d147      	bne.n	800675c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066d6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80066de:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	699b      	ldr	r3, [r3, #24]
 80066e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80066ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066ee:	d12e      	bne.n	800674e <I2C_IsErrorOccurred+0xd6>
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80066f6:	d02a      	beq.n	800674e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80066f8:	7cfb      	ldrb	r3, [r7, #19]
 80066fa:	2b20      	cmp	r3, #32
 80066fc:	d027      	beq.n	800674e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	685a      	ldr	r2, [r3, #4]
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800670c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800670e:	f7fb f9d9 	bl	8001ac4 <HAL_GetTick>
 8006712:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006714:	e01b      	b.n	800674e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006716:	f7fb f9d5 	bl	8001ac4 <HAL_GetTick>
 800671a:	4602      	mov	r2, r0
 800671c:	69fb      	ldr	r3, [r7, #28]
 800671e:	1ad3      	subs	r3, r2, r3
 8006720:	2b19      	cmp	r3, #25
 8006722:	d914      	bls.n	800674e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006728:	f043 0220 	orr.w	r2, r3, #32
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2220      	movs	r2, #32
 8006734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2200      	movs	r2, #0
 800673c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2200      	movs	r2, #0
 8006744:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8006748:	2301      	movs	r3, #1
 800674a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	699b      	ldr	r3, [r3, #24]
 8006754:	f003 0320 	and.w	r3, r3, #32
 8006758:	2b20      	cmp	r3, #32
 800675a:	d1dc      	bne.n	8006716 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	699b      	ldr	r3, [r3, #24]
 8006762:	f003 0320 	and.w	r3, r3, #32
 8006766:	2b20      	cmp	r3, #32
 8006768:	d003      	beq.n	8006772 <I2C_IsErrorOccurred+0xfa>
 800676a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800676e:	2b00      	cmp	r3, #0
 8006770:	d09d      	beq.n	80066ae <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006772:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006776:	2b00      	cmp	r3, #0
 8006778:	d103      	bne.n	8006782 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	2220      	movs	r2, #32
 8006780:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006782:	6a3b      	ldr	r3, [r7, #32]
 8006784:	f043 0304 	orr.w	r3, r3, #4
 8006788:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800678a:	2301      	movs	r3, #1
 800678c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	699b      	ldr	r3, [r3, #24]
 8006796:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006798:	69bb      	ldr	r3, [r7, #24]
 800679a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d00b      	beq.n	80067ba <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80067a2:	6a3b      	ldr	r3, [r7, #32]
 80067a4:	f043 0301 	orr.w	r3, r3, #1
 80067a8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80067b2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80067b4:	2301      	movs	r3, #1
 80067b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80067ba:	69bb      	ldr	r3, [r7, #24]
 80067bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d00b      	beq.n	80067dc <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80067c4:	6a3b      	ldr	r3, [r7, #32]
 80067c6:	f043 0308 	orr.w	r3, r3, #8
 80067ca:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80067d4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80067dc:	69bb      	ldr	r3, [r7, #24]
 80067de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d00b      	beq.n	80067fe <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80067e6:	6a3b      	ldr	r3, [r7, #32]
 80067e8:	f043 0302 	orr.w	r3, r3, #2
 80067ec:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067f6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80067f8:	2301      	movs	r3, #1
 80067fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80067fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006802:	2b00      	cmp	r3, #0
 8006804:	d01c      	beq.n	8006840 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006806:	68f8      	ldr	r0, [r7, #12]
 8006808:	f7ff fe37 	bl	800647a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	6859      	ldr	r1, [r3, #4]
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	4b0d      	ldr	r3, [pc, #52]	; (800684c <I2C_IsErrorOccurred+0x1d4>)
 8006818:	400b      	ands	r3, r1
 800681a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006820:	6a3b      	ldr	r3, [r7, #32]
 8006822:	431a      	orrs	r2, r3
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2220      	movs	r2, #32
 800682c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2200      	movs	r2, #0
 8006834:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2200      	movs	r2, #0
 800683c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006840:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006844:	4618      	mov	r0, r3
 8006846:	3728      	adds	r7, #40	; 0x28
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}
 800684c:	fe00e800 	.word	0xfe00e800

08006850 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006850:	b480      	push	{r7}
 8006852:	b087      	sub	sp, #28
 8006854:	af00      	add	r7, sp, #0
 8006856:	60f8      	str	r0, [r7, #12]
 8006858:	607b      	str	r3, [r7, #4]
 800685a:	460b      	mov	r3, r1
 800685c:	817b      	strh	r3, [r7, #10]
 800685e:	4613      	mov	r3, r2
 8006860:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006862:	897b      	ldrh	r3, [r7, #10]
 8006864:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006868:	7a7b      	ldrb	r3, [r7, #9]
 800686a:	041b      	lsls	r3, r3, #16
 800686c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006870:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006876:	6a3b      	ldr	r3, [r7, #32]
 8006878:	4313      	orrs	r3, r2
 800687a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800687e:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	685a      	ldr	r2, [r3, #4]
 8006886:	6a3b      	ldr	r3, [r7, #32]
 8006888:	0d5b      	lsrs	r3, r3, #21
 800688a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800688e:	4b08      	ldr	r3, [pc, #32]	; (80068b0 <I2C_TransferConfig+0x60>)
 8006890:	430b      	orrs	r3, r1
 8006892:	43db      	mvns	r3, r3
 8006894:	ea02 0103 	and.w	r1, r2, r3
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	697a      	ldr	r2, [r7, #20]
 800689e:	430a      	orrs	r2, r1
 80068a0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80068a2:	bf00      	nop
 80068a4:	371c      	adds	r7, #28
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr
 80068ae:	bf00      	nop
 80068b0:	03ff63ff 	.word	0x03ff63ff

080068b4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b085      	sub	sp, #20
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	460b      	mov	r3, r1
 80068be:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80068c0:	2300      	movs	r3, #0
 80068c2:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80068c4:	887b      	ldrh	r3, [r7, #2]
 80068c6:	f003 0301 	and.w	r3, r3, #1
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d00f      	beq.n	80068ee <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80068d4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80068e2:	2b28      	cmp	r3, #40	; 0x28
 80068e4:	d003      	beq.n	80068ee <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80068ec:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80068ee:	887b      	ldrh	r3, [r7, #2]
 80068f0:	f003 0302 	and.w	r3, r3, #2
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d00f      	beq.n	8006918 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80068fe:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006906:	b2db      	uxtb	r3, r3
 8006908:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800690c:	2b28      	cmp	r3, #40	; 0x28
 800690e:	d003      	beq.n	8006918 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8006916:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006918:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800691c:	2b00      	cmp	r3, #0
 800691e:	da03      	bge.n	8006928 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8006926:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006928:	887b      	ldrh	r3, [r7, #2]
 800692a:	2b10      	cmp	r3, #16
 800692c:	d103      	bne.n	8006936 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8006934:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006936:	887b      	ldrh	r3, [r7, #2]
 8006938:	2b20      	cmp	r3, #32
 800693a:	d103      	bne.n	8006944 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f043 0320 	orr.w	r3, r3, #32
 8006942:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006944:	887b      	ldrh	r3, [r7, #2]
 8006946:	2b40      	cmp	r3, #64	; 0x40
 8006948:	d103      	bne.n	8006952 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006950:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	6819      	ldr	r1, [r3, #0]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	43da      	mvns	r2, r3
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	400a      	ands	r2, r1
 8006962:	601a      	str	r2, [r3, #0]
}
 8006964:	bf00      	nop
 8006966:	3714      	adds	r7, #20
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr

08006970 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006970:	b480      	push	{r7}
 8006972:	b083      	sub	sp, #12
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006980:	b2db      	uxtb	r3, r3
 8006982:	2b20      	cmp	r3, #32
 8006984:	d138      	bne.n	80069f8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800698c:	2b01      	cmp	r3, #1
 800698e:	d101      	bne.n	8006994 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006990:	2302      	movs	r3, #2
 8006992:	e032      	b.n	80069fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2201      	movs	r2, #1
 8006998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2224      	movs	r2, #36	; 0x24
 80069a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	681a      	ldr	r2, [r3, #0]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f022 0201 	bic.w	r2, r2, #1
 80069b2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	681a      	ldr	r2, [r3, #0]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80069c2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	6819      	ldr	r1, [r3, #0]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	683a      	ldr	r2, [r7, #0]
 80069d0:	430a      	orrs	r2, r1
 80069d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f042 0201 	orr.w	r2, r2, #1
 80069e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2220      	movs	r2, #32
 80069e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2200      	movs	r2, #0
 80069f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80069f4:	2300      	movs	r3, #0
 80069f6:	e000      	b.n	80069fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80069f8:	2302      	movs	r3, #2
  }
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	370c      	adds	r7, #12
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr

08006a06 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006a06:	b480      	push	{r7}
 8006a08:	b085      	sub	sp, #20
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	6078      	str	r0, [r7, #4]
 8006a0e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a16:	b2db      	uxtb	r3, r3
 8006a18:	2b20      	cmp	r3, #32
 8006a1a:	d139      	bne.n	8006a90 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	d101      	bne.n	8006a2a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006a26:	2302      	movs	r3, #2
 8006a28:	e033      	b.n	8006a92 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2224      	movs	r2, #36	; 0x24
 8006a36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f022 0201 	bic.w	r2, r2, #1
 8006a48:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006a58:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	021b      	lsls	r3, r3, #8
 8006a5e:	68fa      	ldr	r2, [r7, #12]
 8006a60:	4313      	orrs	r3, r2
 8006a62:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	68fa      	ldr	r2, [r7, #12]
 8006a6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	681a      	ldr	r2, [r3, #0]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f042 0201 	orr.w	r2, r2, #1
 8006a7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2220      	movs	r2, #32
 8006a80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2200      	movs	r2, #0
 8006a88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	e000      	b.n	8006a92 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006a90:	2302      	movs	r3, #2
  }
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3714      	adds	r7, #20
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr
	...

08006aa0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b084      	sub	sp, #16
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8006aa8:	4b29      	ldr	r3, [pc, #164]	; (8006b50 <HAL_PWREx_ConfigSupply+0xb0>)
 8006aaa:	68db      	ldr	r3, [r3, #12]
 8006aac:	f003 0307 	and.w	r3, r3, #7
 8006ab0:	2b06      	cmp	r3, #6
 8006ab2:	d00a      	beq.n	8006aca <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006ab4:	4b26      	ldr	r3, [pc, #152]	; (8006b50 <HAL_PWREx_ConfigSupply+0xb0>)
 8006ab6:	68db      	ldr	r3, [r3, #12]
 8006ab8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006abc:	687a      	ldr	r2, [r7, #4]
 8006abe:	429a      	cmp	r2, r3
 8006ac0:	d001      	beq.n	8006ac6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	e03f      	b.n	8006b46 <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	e03d      	b.n	8006b46 <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006aca:	4b21      	ldr	r3, [pc, #132]	; (8006b50 <HAL_PWREx_ConfigSupply+0xb0>)
 8006acc:	68db      	ldr	r3, [r3, #12]
 8006ace:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8006ad2:	491f      	ldr	r1, [pc, #124]	; (8006b50 <HAL_PWREx_ConfigSupply+0xb0>)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006ada:	f7fa fff3 	bl	8001ac4 <HAL_GetTick>
 8006ade:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006ae0:	e009      	b.n	8006af6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006ae2:	f7fa ffef 	bl	8001ac4 <HAL_GetTick>
 8006ae6:	4602      	mov	r2, r0
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	1ad3      	subs	r3, r2, r3
 8006aec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006af0:	d901      	bls.n	8006af6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	e027      	b.n	8006b46 <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006af6:	4b16      	ldr	r3, [pc, #88]	; (8006b50 <HAL_PWREx_ConfigSupply+0xb0>)
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006afe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b02:	d1ee      	bne.n	8006ae2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2b1e      	cmp	r3, #30
 8006b08:	d008      	beq.n	8006b1c <HAL_PWREx_ConfigSupply+0x7c>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2b2e      	cmp	r3, #46	; 0x2e
 8006b0e:	d005      	beq.n	8006b1c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2b1d      	cmp	r3, #29
 8006b14:	d002      	beq.n	8006b1c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2b2d      	cmp	r3, #45	; 0x2d
 8006b1a:	d113      	bne.n	8006b44 <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8006b1c:	f7fa ffd2 	bl	8001ac4 <HAL_GetTick>
 8006b20:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006b22:	e009      	b.n	8006b38 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006b24:	f7fa ffce 	bl	8001ac4 <HAL_GetTick>
 8006b28:	4602      	mov	r2, r0
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	1ad3      	subs	r3, r2, r3
 8006b2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b32:	d901      	bls.n	8006b38 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8006b34:	2301      	movs	r3, #1
 8006b36:	e006      	b.n	8006b46 <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006b38:	4b05      	ldr	r3, [pc, #20]	; (8006b50 <HAL_PWREx_ConfigSupply+0xb0>)
 8006b3a:	68db      	ldr	r3, [r3, #12]
 8006b3c:	f003 0311 	and.w	r3, r3, #17
 8006b40:	2b11      	cmp	r3, #17
 8006b42:	d1ef      	bne.n	8006b24 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006b44:	2300      	movs	r3, #0
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3710      	adds	r7, #16
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}
 8006b4e:	bf00      	nop
 8006b50:	58024800 	.word	0x58024800

08006b54 <HAL_RAMECC_Init>:
  *                  the configuration information for the specified RAMECC
  *                  Monitor.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_RAMECC_Init (RAMECC_HandleTypeDef *hramecc)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b083      	sub	sp, #12
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  /* Check the RAMECC peripheral handle */
  if (hramecc == NULL)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d101      	bne.n	8006b66 <HAL_RAMECC_Init+0x12>
  {
    /* Return HAL status */
    return HAL_ERROR;
 8006b62:	2301      	movs	r3, #1
 8006b64:	e02d      	b.n	8006bc2 <HAL_RAMECC_Init+0x6e>

  /* Check the parameters */
  assert_param (IS_RAMECC_MONITOR_ALL_INSTANCE (hramecc->Instance));

  /* Change RAMECC peripheral state */
  hramecc->State = HAL_RAMECC_STATE_BUSY;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2202      	movs	r2, #2
 8006b6a:	711a      	strb	r2, [r3, #4]

  /* Disable RAMECC monitor */
  hramecc->Instance->CR &= ~RAMECC_CR_ECCELEN;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	681a      	ldr	r2, [r3, #0]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f022 0220 	bic.w	r2, r2, #32
 8006b7a:	601a      	str	r2, [r3, #0]

  /* Disable all global interrupts */
  ((RAMECC_TypeDef *)((uint32_t)hramecc->Instance & 0xFFFFFF00U))->IER &= \
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	6812      	ldr	r2, [r2, #0]
 8006b8a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006b8e:	f023 030f 	bic.w	r3, r3, #15
 8006b92:	6013      	str	r3, [r2, #0]
    ~(RAMECC_IER_GIE | RAMECC_IER_GECCSEIE | RAMECC_IER_GECCDEIE | RAMECC_IER_GECCDEBWIE);

  /* Disable all interrupts monitor  */
  hramecc->Instance->CR &= ~(RAMECC_CR_ECCSEIE | RAMECC_CR_ECCDEIE | RAMECC_CR_ECCDEBWIE);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f022 021c 	bic.w	r2, r2, #28
 8006ba2:	601a      	str	r2, [r3, #0]

  /* Clear RAMECC monitor flags */
  __HAL_RAMECC_CLEAR_FLAG (hramecc, RAMECC_FLAGS_ALL);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	685a      	ldr	r2, [r3, #4]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f022 0207 	bic.w	r2, r2, #7
 8006bb2:	605a      	str	r2, [r3, #4]

  /* Initialise the RAMECC error code */
  hramecc->ErrorCode = HAL_RAMECC_ERROR_NONE;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	609a      	str	r2, [r3, #8]

  /* Update the RAMECC state */
  hramecc->State = HAL_RAMECC_STATE_READY;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	711a      	strb	r2, [r3, #4]

  /* Return HAL status */
  return HAL_OK;
 8006bc0:	2300      	movs	r3, #0
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	370c      	adds	r7, #12
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr
	...

08006bd0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b08c      	sub	sp, #48	; 0x30
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d101      	bne.n	8006be2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006bde:	2301      	movs	r3, #1
 8006be0:	e397      	b.n	8007312 <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f003 0301 	and.w	r3, r3, #1
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	f000 8087 	beq.w	8006cfe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006bf0:	4b9e      	ldr	r3, [pc, #632]	; (8006e6c <HAL_RCC_OscConfig+0x29c>)
 8006bf2:	691b      	ldr	r3, [r3, #16]
 8006bf4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006bfa:	4b9c      	ldr	r3, [pc, #624]	; (8006e6c <HAL_RCC_OscConfig+0x29c>)
 8006bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bfe:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c02:	2b10      	cmp	r3, #16
 8006c04:	d007      	beq.n	8006c16 <HAL_RCC_OscConfig+0x46>
 8006c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c08:	2b18      	cmp	r3, #24
 8006c0a:	d110      	bne.n	8006c2e <HAL_RCC_OscConfig+0x5e>
 8006c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c0e:	f003 0303 	and.w	r3, r3, #3
 8006c12:	2b02      	cmp	r3, #2
 8006c14:	d10b      	bne.n	8006c2e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c16:	4b95      	ldr	r3, [pc, #596]	; (8006e6c <HAL_RCC_OscConfig+0x29c>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d06c      	beq.n	8006cfc <HAL_RCC_OscConfig+0x12c>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d168      	bne.n	8006cfc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	e371      	b.n	8007312 <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c36:	d106      	bne.n	8006c46 <HAL_RCC_OscConfig+0x76>
 8006c38:	4b8c      	ldr	r3, [pc, #560]	; (8006e6c <HAL_RCC_OscConfig+0x29c>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a8b      	ldr	r2, [pc, #556]	; (8006e6c <HAL_RCC_OscConfig+0x29c>)
 8006c3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c42:	6013      	str	r3, [r2, #0]
 8006c44:	e02e      	b.n	8006ca4 <HAL_RCC_OscConfig+0xd4>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d10c      	bne.n	8006c68 <HAL_RCC_OscConfig+0x98>
 8006c4e:	4b87      	ldr	r3, [pc, #540]	; (8006e6c <HAL_RCC_OscConfig+0x29c>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a86      	ldr	r2, [pc, #536]	; (8006e6c <HAL_RCC_OscConfig+0x29c>)
 8006c54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c58:	6013      	str	r3, [r2, #0]
 8006c5a:	4b84      	ldr	r3, [pc, #528]	; (8006e6c <HAL_RCC_OscConfig+0x29c>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a83      	ldr	r2, [pc, #524]	; (8006e6c <HAL_RCC_OscConfig+0x29c>)
 8006c60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c64:	6013      	str	r3, [r2, #0]
 8006c66:	e01d      	b.n	8006ca4 <HAL_RCC_OscConfig+0xd4>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c70:	d10c      	bne.n	8006c8c <HAL_RCC_OscConfig+0xbc>
 8006c72:	4b7e      	ldr	r3, [pc, #504]	; (8006e6c <HAL_RCC_OscConfig+0x29c>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a7d      	ldr	r2, [pc, #500]	; (8006e6c <HAL_RCC_OscConfig+0x29c>)
 8006c78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c7c:	6013      	str	r3, [r2, #0]
 8006c7e:	4b7b      	ldr	r3, [pc, #492]	; (8006e6c <HAL_RCC_OscConfig+0x29c>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a7a      	ldr	r2, [pc, #488]	; (8006e6c <HAL_RCC_OscConfig+0x29c>)
 8006c84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c88:	6013      	str	r3, [r2, #0]
 8006c8a:	e00b      	b.n	8006ca4 <HAL_RCC_OscConfig+0xd4>
 8006c8c:	4b77      	ldr	r3, [pc, #476]	; (8006e6c <HAL_RCC_OscConfig+0x29c>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a76      	ldr	r2, [pc, #472]	; (8006e6c <HAL_RCC_OscConfig+0x29c>)
 8006c92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c96:	6013      	str	r3, [r2, #0]
 8006c98:	4b74      	ldr	r3, [pc, #464]	; (8006e6c <HAL_RCC_OscConfig+0x29c>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a73      	ldr	r2, [pc, #460]	; (8006e6c <HAL_RCC_OscConfig+0x29c>)
 8006c9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ca2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d013      	beq.n	8006cd4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cac:	f7fa ff0a 	bl	8001ac4 <HAL_GetTick>
 8006cb0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006cb2:	e008      	b.n	8006cc6 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006cb4:	f7fa ff06 	bl	8001ac4 <HAL_GetTick>
 8006cb8:	4602      	mov	r2, r0
 8006cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cbc:	1ad3      	subs	r3, r2, r3
 8006cbe:	2b64      	cmp	r3, #100	; 0x64
 8006cc0:	d901      	bls.n	8006cc6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006cc2:	2303      	movs	r3, #3
 8006cc4:	e325      	b.n	8007312 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006cc6:	4b69      	ldr	r3, [pc, #420]	; (8006e6c <HAL_RCC_OscConfig+0x29c>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d0f0      	beq.n	8006cb4 <HAL_RCC_OscConfig+0xe4>
 8006cd2:	e014      	b.n	8006cfe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cd4:	f7fa fef6 	bl	8001ac4 <HAL_GetTick>
 8006cd8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006cda:	e008      	b.n	8006cee <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006cdc:	f7fa fef2 	bl	8001ac4 <HAL_GetTick>
 8006ce0:	4602      	mov	r2, r0
 8006ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce4:	1ad3      	subs	r3, r2, r3
 8006ce6:	2b64      	cmp	r3, #100	; 0x64
 8006ce8:	d901      	bls.n	8006cee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006cea:	2303      	movs	r3, #3
 8006cec:	e311      	b.n	8007312 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006cee:	4b5f      	ldr	r3, [pc, #380]	; (8006e6c <HAL_RCC_OscConfig+0x29c>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d1f0      	bne.n	8006cdc <HAL_RCC_OscConfig+0x10c>
 8006cfa:	e000      	b.n	8006cfe <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006cfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f003 0302 	and.w	r3, r3, #2
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	f000 808a 	beq.w	8006e20 <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d0c:	4b57      	ldr	r3, [pc, #348]	; (8006e6c <HAL_RCC_OscConfig+0x29c>)
 8006d0e:	691b      	ldr	r3, [r3, #16]
 8006d10:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d14:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006d16:	4b55      	ldr	r3, [pc, #340]	; (8006e6c <HAL_RCC_OscConfig+0x29c>)
 8006d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d1a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006d1c:	6a3b      	ldr	r3, [r7, #32]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d007      	beq.n	8006d32 <HAL_RCC_OscConfig+0x162>
 8006d22:	6a3b      	ldr	r3, [r7, #32]
 8006d24:	2b18      	cmp	r3, #24
 8006d26:	d137      	bne.n	8006d98 <HAL_RCC_OscConfig+0x1c8>
 8006d28:	69fb      	ldr	r3, [r7, #28]
 8006d2a:	f003 0303 	and.w	r3, r3, #3
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d132      	bne.n	8006d98 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006d32:	4b4e      	ldr	r3, [pc, #312]	; (8006e6c <HAL_RCC_OscConfig+0x29c>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f003 0304 	and.w	r3, r3, #4
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d005      	beq.n	8006d4a <HAL_RCC_OscConfig+0x17a>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	68db      	ldr	r3, [r3, #12]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d101      	bne.n	8006d4a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006d46:	2301      	movs	r3, #1
 8006d48:	e2e3      	b.n	8007312 <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006d4a:	4b48      	ldr	r3, [pc, #288]	; (8006e6c <HAL_RCC_OscConfig+0x29c>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f023 0219 	bic.w	r2, r3, #25
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	68db      	ldr	r3, [r3, #12]
 8006d56:	4945      	ldr	r1, [pc, #276]	; (8006e6c <HAL_RCC_OscConfig+0x29c>)
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006d5c:	f7fa feb2 	bl	8001ac4 <HAL_GetTick>
 8006d60:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006d62:	e008      	b.n	8006d76 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d64:	f7fa feae 	bl	8001ac4 <HAL_GetTick>
 8006d68:	4602      	mov	r2, r0
 8006d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d6c:	1ad3      	subs	r3, r2, r3
 8006d6e:	2b02      	cmp	r3, #2
 8006d70:	d901      	bls.n	8006d76 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8006d72:	2303      	movs	r3, #3
 8006d74:	e2cd      	b.n	8007312 <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006d76:	4b3d      	ldr	r3, [pc, #244]	; (8006e6c <HAL_RCC_OscConfig+0x29c>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f003 0304 	and.w	r3, r3, #4
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d0f0      	beq.n	8006d64 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d82:	4b3a      	ldr	r3, [pc, #232]	; (8006e6c <HAL_RCC_OscConfig+0x29c>)
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	691b      	ldr	r3, [r3, #16]
 8006d8e:	061b      	lsls	r3, r3, #24
 8006d90:	4936      	ldr	r1, [pc, #216]	; (8006e6c <HAL_RCC_OscConfig+0x29c>)
 8006d92:	4313      	orrs	r3, r2
 8006d94:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006d96:	e043      	b.n	8006e20 <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	68db      	ldr	r3, [r3, #12]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d026      	beq.n	8006dee <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006da0:	4b32      	ldr	r3, [pc, #200]	; (8006e6c <HAL_RCC_OscConfig+0x29c>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f023 0219 	bic.w	r2, r3, #25
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	68db      	ldr	r3, [r3, #12]
 8006dac:	492f      	ldr	r1, [pc, #188]	; (8006e6c <HAL_RCC_OscConfig+0x29c>)
 8006dae:	4313      	orrs	r3, r2
 8006db0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006db2:	f7fa fe87 	bl	8001ac4 <HAL_GetTick>
 8006db6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006db8:	e008      	b.n	8006dcc <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006dba:	f7fa fe83 	bl	8001ac4 <HAL_GetTick>
 8006dbe:	4602      	mov	r2, r0
 8006dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc2:	1ad3      	subs	r3, r2, r3
 8006dc4:	2b02      	cmp	r3, #2
 8006dc6:	d901      	bls.n	8006dcc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8006dc8:	2303      	movs	r3, #3
 8006dca:	e2a2      	b.n	8007312 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006dcc:	4b27      	ldr	r3, [pc, #156]	; (8006e6c <HAL_RCC_OscConfig+0x29c>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f003 0304 	and.w	r3, r3, #4
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d0f0      	beq.n	8006dba <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006dd8:	4b24      	ldr	r3, [pc, #144]	; (8006e6c <HAL_RCC_OscConfig+0x29c>)
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	691b      	ldr	r3, [r3, #16]
 8006de4:	061b      	lsls	r3, r3, #24
 8006de6:	4921      	ldr	r1, [pc, #132]	; (8006e6c <HAL_RCC_OscConfig+0x29c>)
 8006de8:	4313      	orrs	r3, r2
 8006dea:	604b      	str	r3, [r1, #4]
 8006dec:	e018      	b.n	8006e20 <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006dee:	4b1f      	ldr	r3, [pc, #124]	; (8006e6c <HAL_RCC_OscConfig+0x29c>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a1e      	ldr	r2, [pc, #120]	; (8006e6c <HAL_RCC_OscConfig+0x29c>)
 8006df4:	f023 0301 	bic.w	r3, r3, #1
 8006df8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dfa:	f7fa fe63 	bl	8001ac4 <HAL_GetTick>
 8006dfe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006e00:	e008      	b.n	8006e14 <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006e02:	f7fa fe5f 	bl	8001ac4 <HAL_GetTick>
 8006e06:	4602      	mov	r2, r0
 8006e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e0a:	1ad3      	subs	r3, r2, r3
 8006e0c:	2b02      	cmp	r3, #2
 8006e0e:	d901      	bls.n	8006e14 <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 8006e10:	2303      	movs	r3, #3
 8006e12:	e27e      	b.n	8007312 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006e14:	4b15      	ldr	r3, [pc, #84]	; (8006e6c <HAL_RCC_OscConfig+0x29c>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f003 0304 	and.w	r3, r3, #4
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d1f0      	bne.n	8006e02 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f003 0310 	and.w	r3, r3, #16
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d06d      	beq.n	8006f08 <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e2c:	4b0f      	ldr	r3, [pc, #60]	; (8006e6c <HAL_RCC_OscConfig+0x29c>)
 8006e2e:	691b      	ldr	r3, [r3, #16]
 8006e30:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e34:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006e36:	4b0d      	ldr	r3, [pc, #52]	; (8006e6c <HAL_RCC_OscConfig+0x29c>)
 8006e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e3a:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006e3c:	69bb      	ldr	r3, [r7, #24]
 8006e3e:	2b08      	cmp	r3, #8
 8006e40:	d007      	beq.n	8006e52 <HAL_RCC_OscConfig+0x282>
 8006e42:	69bb      	ldr	r3, [r7, #24]
 8006e44:	2b18      	cmp	r3, #24
 8006e46:	d11e      	bne.n	8006e86 <HAL_RCC_OscConfig+0x2b6>
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	f003 0303 	and.w	r3, r3, #3
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	d119      	bne.n	8006e86 <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006e52:	4b06      	ldr	r3, [pc, #24]	; (8006e6c <HAL_RCC_OscConfig+0x29c>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d008      	beq.n	8006e70 <HAL_RCC_OscConfig+0x2a0>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	69db      	ldr	r3, [r3, #28]
 8006e62:	2b80      	cmp	r3, #128	; 0x80
 8006e64:	d004      	beq.n	8006e70 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 8006e66:	2301      	movs	r3, #1
 8006e68:	e253      	b.n	8007312 <HAL_RCC_OscConfig+0x742>
 8006e6a:	bf00      	nop
 8006e6c:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006e70:	4ba3      	ldr	r3, [pc, #652]	; (8007100 <HAL_RCC_OscConfig+0x530>)
 8006e72:	68db      	ldr	r3, [r3, #12]
 8006e74:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6a1b      	ldr	r3, [r3, #32]
 8006e7c:	061b      	lsls	r3, r3, #24
 8006e7e:	49a0      	ldr	r1, [pc, #640]	; (8007100 <HAL_RCC_OscConfig+0x530>)
 8006e80:	4313      	orrs	r3, r2
 8006e82:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006e84:	e040      	b.n	8006f08 <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	69db      	ldr	r3, [r3, #28]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d023      	beq.n	8006ed6 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006e8e:	4b9c      	ldr	r3, [pc, #624]	; (8007100 <HAL_RCC_OscConfig+0x530>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a9b      	ldr	r2, [pc, #620]	; (8007100 <HAL_RCC_OscConfig+0x530>)
 8006e94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e9a:	f7fa fe13 	bl	8001ac4 <HAL_GetTick>
 8006e9e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006ea0:	e008      	b.n	8006eb4 <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006ea2:	f7fa fe0f 	bl	8001ac4 <HAL_GetTick>
 8006ea6:	4602      	mov	r2, r0
 8006ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eaa:	1ad3      	subs	r3, r2, r3
 8006eac:	2b02      	cmp	r3, #2
 8006eae:	d901      	bls.n	8006eb4 <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 8006eb0:	2303      	movs	r3, #3
 8006eb2:	e22e      	b.n	8007312 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006eb4:	4b92      	ldr	r3, [pc, #584]	; (8007100 <HAL_RCC_OscConfig+0x530>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d0f0      	beq.n	8006ea2 <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006ec0:	4b8f      	ldr	r3, [pc, #572]	; (8007100 <HAL_RCC_OscConfig+0x530>)
 8006ec2:	68db      	ldr	r3, [r3, #12]
 8006ec4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6a1b      	ldr	r3, [r3, #32]
 8006ecc:	061b      	lsls	r3, r3, #24
 8006ece:	498c      	ldr	r1, [pc, #560]	; (8007100 <HAL_RCC_OscConfig+0x530>)
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	60cb      	str	r3, [r1, #12]
 8006ed4:	e018      	b.n	8006f08 <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006ed6:	4b8a      	ldr	r3, [pc, #552]	; (8007100 <HAL_RCC_OscConfig+0x530>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a89      	ldr	r2, [pc, #548]	; (8007100 <HAL_RCC_OscConfig+0x530>)
 8006edc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ee0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ee2:	f7fa fdef 	bl	8001ac4 <HAL_GetTick>
 8006ee6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006ee8:	e008      	b.n	8006efc <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006eea:	f7fa fdeb 	bl	8001ac4 <HAL_GetTick>
 8006eee:	4602      	mov	r2, r0
 8006ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef2:	1ad3      	subs	r3, r2, r3
 8006ef4:	2b02      	cmp	r3, #2
 8006ef6:	d901      	bls.n	8006efc <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8006ef8:	2303      	movs	r3, #3
 8006efa:	e20a      	b.n	8007312 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006efc:	4b80      	ldr	r3, [pc, #512]	; (8007100 <HAL_RCC_OscConfig+0x530>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d1f0      	bne.n	8006eea <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f003 0308 	and.w	r3, r3, #8
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d036      	beq.n	8006f82 <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	695b      	ldr	r3, [r3, #20]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d019      	beq.n	8006f50 <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006f1c:	4b78      	ldr	r3, [pc, #480]	; (8007100 <HAL_RCC_OscConfig+0x530>)
 8006f1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f20:	4a77      	ldr	r2, [pc, #476]	; (8007100 <HAL_RCC_OscConfig+0x530>)
 8006f22:	f043 0301 	orr.w	r3, r3, #1
 8006f26:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f28:	f7fa fdcc 	bl	8001ac4 <HAL_GetTick>
 8006f2c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006f2e:	e008      	b.n	8006f42 <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f30:	f7fa fdc8 	bl	8001ac4 <HAL_GetTick>
 8006f34:	4602      	mov	r2, r0
 8006f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f38:	1ad3      	subs	r3, r2, r3
 8006f3a:	2b02      	cmp	r3, #2
 8006f3c:	d901      	bls.n	8006f42 <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 8006f3e:	2303      	movs	r3, #3
 8006f40:	e1e7      	b.n	8007312 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006f42:	4b6f      	ldr	r3, [pc, #444]	; (8007100 <HAL_RCC_OscConfig+0x530>)
 8006f44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f46:	f003 0302 	and.w	r3, r3, #2
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d0f0      	beq.n	8006f30 <HAL_RCC_OscConfig+0x360>
 8006f4e:	e018      	b.n	8006f82 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f50:	4b6b      	ldr	r3, [pc, #428]	; (8007100 <HAL_RCC_OscConfig+0x530>)
 8006f52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f54:	4a6a      	ldr	r2, [pc, #424]	; (8007100 <HAL_RCC_OscConfig+0x530>)
 8006f56:	f023 0301 	bic.w	r3, r3, #1
 8006f5a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f5c:	f7fa fdb2 	bl	8001ac4 <HAL_GetTick>
 8006f60:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006f62:	e008      	b.n	8006f76 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f64:	f7fa fdae 	bl	8001ac4 <HAL_GetTick>
 8006f68:	4602      	mov	r2, r0
 8006f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f6c:	1ad3      	subs	r3, r2, r3
 8006f6e:	2b02      	cmp	r3, #2
 8006f70:	d901      	bls.n	8006f76 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8006f72:	2303      	movs	r3, #3
 8006f74:	e1cd      	b.n	8007312 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006f76:	4b62      	ldr	r3, [pc, #392]	; (8007100 <HAL_RCC_OscConfig+0x530>)
 8006f78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f7a:	f003 0302 	and.w	r3, r3, #2
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d1f0      	bne.n	8006f64 <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f003 0320 	and.w	r3, r3, #32
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d036      	beq.n	8006ffc <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	699b      	ldr	r3, [r3, #24]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d019      	beq.n	8006fca <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006f96:	4b5a      	ldr	r3, [pc, #360]	; (8007100 <HAL_RCC_OscConfig+0x530>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a59      	ldr	r2, [pc, #356]	; (8007100 <HAL_RCC_OscConfig+0x530>)
 8006f9c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006fa0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006fa2:	f7fa fd8f 	bl	8001ac4 <HAL_GetTick>
 8006fa6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006fa8:	e008      	b.n	8006fbc <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006faa:	f7fa fd8b 	bl	8001ac4 <HAL_GetTick>
 8006fae:	4602      	mov	r2, r0
 8006fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb2:	1ad3      	subs	r3, r2, r3
 8006fb4:	2b02      	cmp	r3, #2
 8006fb6:	d901      	bls.n	8006fbc <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8006fb8:	2303      	movs	r3, #3
 8006fba:	e1aa      	b.n	8007312 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006fbc:	4b50      	ldr	r3, [pc, #320]	; (8007100 <HAL_RCC_OscConfig+0x530>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d0f0      	beq.n	8006faa <HAL_RCC_OscConfig+0x3da>
 8006fc8:	e018      	b.n	8006ffc <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006fca:	4b4d      	ldr	r3, [pc, #308]	; (8007100 <HAL_RCC_OscConfig+0x530>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a4c      	ldr	r2, [pc, #304]	; (8007100 <HAL_RCC_OscConfig+0x530>)
 8006fd0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006fd4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006fd6:	f7fa fd75 	bl	8001ac4 <HAL_GetTick>
 8006fda:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006fdc:	e008      	b.n	8006ff0 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006fde:	f7fa fd71 	bl	8001ac4 <HAL_GetTick>
 8006fe2:	4602      	mov	r2, r0
 8006fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe6:	1ad3      	subs	r3, r2, r3
 8006fe8:	2b02      	cmp	r3, #2
 8006fea:	d901      	bls.n	8006ff0 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 8006fec:	2303      	movs	r3, #3
 8006fee:	e190      	b.n	8007312 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006ff0:	4b43      	ldr	r3, [pc, #268]	; (8007100 <HAL_RCC_OscConfig+0x530>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d1f0      	bne.n	8006fde <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f003 0304 	and.w	r3, r3, #4
 8007004:	2b00      	cmp	r3, #0
 8007006:	f000 8085 	beq.w	8007114 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800700a:	4b3e      	ldr	r3, [pc, #248]	; (8007104 <HAL_RCC_OscConfig+0x534>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a3d      	ldr	r2, [pc, #244]	; (8007104 <HAL_RCC_OscConfig+0x534>)
 8007010:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007014:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007016:	f7fa fd55 	bl	8001ac4 <HAL_GetTick>
 800701a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800701c:	e008      	b.n	8007030 <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800701e:	f7fa fd51 	bl	8001ac4 <HAL_GetTick>
 8007022:	4602      	mov	r2, r0
 8007024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007026:	1ad3      	subs	r3, r2, r3
 8007028:	2b64      	cmp	r3, #100	; 0x64
 800702a:	d901      	bls.n	8007030 <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 800702c:	2303      	movs	r3, #3
 800702e:	e170      	b.n	8007312 <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007030:	4b34      	ldr	r3, [pc, #208]	; (8007104 <HAL_RCC_OscConfig+0x534>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007038:	2b00      	cmp	r3, #0
 800703a:	d0f0      	beq.n	800701e <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	689b      	ldr	r3, [r3, #8]
 8007040:	2b01      	cmp	r3, #1
 8007042:	d106      	bne.n	8007052 <HAL_RCC_OscConfig+0x482>
 8007044:	4b2e      	ldr	r3, [pc, #184]	; (8007100 <HAL_RCC_OscConfig+0x530>)
 8007046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007048:	4a2d      	ldr	r2, [pc, #180]	; (8007100 <HAL_RCC_OscConfig+0x530>)
 800704a:	f043 0301 	orr.w	r3, r3, #1
 800704e:	6713      	str	r3, [r2, #112]	; 0x70
 8007050:	e02d      	b.n	80070ae <HAL_RCC_OscConfig+0x4de>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	689b      	ldr	r3, [r3, #8]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d10c      	bne.n	8007074 <HAL_RCC_OscConfig+0x4a4>
 800705a:	4b29      	ldr	r3, [pc, #164]	; (8007100 <HAL_RCC_OscConfig+0x530>)
 800705c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800705e:	4a28      	ldr	r2, [pc, #160]	; (8007100 <HAL_RCC_OscConfig+0x530>)
 8007060:	f023 0301 	bic.w	r3, r3, #1
 8007064:	6713      	str	r3, [r2, #112]	; 0x70
 8007066:	4b26      	ldr	r3, [pc, #152]	; (8007100 <HAL_RCC_OscConfig+0x530>)
 8007068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800706a:	4a25      	ldr	r2, [pc, #148]	; (8007100 <HAL_RCC_OscConfig+0x530>)
 800706c:	f023 0304 	bic.w	r3, r3, #4
 8007070:	6713      	str	r3, [r2, #112]	; 0x70
 8007072:	e01c      	b.n	80070ae <HAL_RCC_OscConfig+0x4de>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	689b      	ldr	r3, [r3, #8]
 8007078:	2b05      	cmp	r3, #5
 800707a:	d10c      	bne.n	8007096 <HAL_RCC_OscConfig+0x4c6>
 800707c:	4b20      	ldr	r3, [pc, #128]	; (8007100 <HAL_RCC_OscConfig+0x530>)
 800707e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007080:	4a1f      	ldr	r2, [pc, #124]	; (8007100 <HAL_RCC_OscConfig+0x530>)
 8007082:	f043 0304 	orr.w	r3, r3, #4
 8007086:	6713      	str	r3, [r2, #112]	; 0x70
 8007088:	4b1d      	ldr	r3, [pc, #116]	; (8007100 <HAL_RCC_OscConfig+0x530>)
 800708a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800708c:	4a1c      	ldr	r2, [pc, #112]	; (8007100 <HAL_RCC_OscConfig+0x530>)
 800708e:	f043 0301 	orr.w	r3, r3, #1
 8007092:	6713      	str	r3, [r2, #112]	; 0x70
 8007094:	e00b      	b.n	80070ae <HAL_RCC_OscConfig+0x4de>
 8007096:	4b1a      	ldr	r3, [pc, #104]	; (8007100 <HAL_RCC_OscConfig+0x530>)
 8007098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800709a:	4a19      	ldr	r2, [pc, #100]	; (8007100 <HAL_RCC_OscConfig+0x530>)
 800709c:	f023 0301 	bic.w	r3, r3, #1
 80070a0:	6713      	str	r3, [r2, #112]	; 0x70
 80070a2:	4b17      	ldr	r3, [pc, #92]	; (8007100 <HAL_RCC_OscConfig+0x530>)
 80070a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070a6:	4a16      	ldr	r2, [pc, #88]	; (8007100 <HAL_RCC_OscConfig+0x530>)
 80070a8:	f023 0304 	bic.w	r3, r3, #4
 80070ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	689b      	ldr	r3, [r3, #8]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d015      	beq.n	80070e2 <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070b6:	f7fa fd05 	bl	8001ac4 <HAL_GetTick>
 80070ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80070bc:	e00a      	b.n	80070d4 <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80070be:	f7fa fd01 	bl	8001ac4 <HAL_GetTick>
 80070c2:	4602      	mov	r2, r0
 80070c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c6:	1ad3      	subs	r3, r2, r3
 80070c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d901      	bls.n	80070d4 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 80070d0:	2303      	movs	r3, #3
 80070d2:	e11e      	b.n	8007312 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80070d4:	4b0a      	ldr	r3, [pc, #40]	; (8007100 <HAL_RCC_OscConfig+0x530>)
 80070d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070d8:	f003 0302 	and.w	r3, r3, #2
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d0ee      	beq.n	80070be <HAL_RCC_OscConfig+0x4ee>
 80070e0:	e018      	b.n	8007114 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070e2:	f7fa fcef 	bl	8001ac4 <HAL_GetTick>
 80070e6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80070e8:	e00e      	b.n	8007108 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80070ea:	f7fa fceb 	bl	8001ac4 <HAL_GetTick>
 80070ee:	4602      	mov	r2, r0
 80070f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f2:	1ad3      	subs	r3, r2, r3
 80070f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d905      	bls.n	8007108 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80070fc:	2303      	movs	r3, #3
 80070fe:	e108      	b.n	8007312 <HAL_RCC_OscConfig+0x742>
 8007100:	58024400 	.word	0x58024400
 8007104:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007108:	4b84      	ldr	r3, [pc, #528]	; (800731c <HAL_RCC_OscConfig+0x74c>)
 800710a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800710c:	f003 0302 	and.w	r3, r3, #2
 8007110:	2b00      	cmp	r3, #0
 8007112:	d1ea      	bne.n	80070ea <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007118:	2b00      	cmp	r3, #0
 800711a:	f000 80f9 	beq.w	8007310 <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800711e:	4b7f      	ldr	r3, [pc, #508]	; (800731c <HAL_RCC_OscConfig+0x74c>)
 8007120:	691b      	ldr	r3, [r3, #16]
 8007122:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007126:	2b18      	cmp	r3, #24
 8007128:	f000 80b4 	beq.w	8007294 <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007130:	2b02      	cmp	r3, #2
 8007132:	f040 8095 	bne.w	8007260 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007136:	4b79      	ldr	r3, [pc, #484]	; (800731c <HAL_RCC_OscConfig+0x74c>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a78      	ldr	r2, [pc, #480]	; (800731c <HAL_RCC_OscConfig+0x74c>)
 800713c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007140:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007142:	f7fa fcbf 	bl	8001ac4 <HAL_GetTick>
 8007146:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007148:	e008      	b.n	800715c <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800714a:	f7fa fcbb 	bl	8001ac4 <HAL_GetTick>
 800714e:	4602      	mov	r2, r0
 8007150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007152:	1ad3      	subs	r3, r2, r3
 8007154:	2b02      	cmp	r3, #2
 8007156:	d901      	bls.n	800715c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8007158:	2303      	movs	r3, #3
 800715a:	e0da      	b.n	8007312 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800715c:	4b6f      	ldr	r3, [pc, #444]	; (800731c <HAL_RCC_OscConfig+0x74c>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007164:	2b00      	cmp	r3, #0
 8007166:	d1f0      	bne.n	800714a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007168:	4b6c      	ldr	r3, [pc, #432]	; (800731c <HAL_RCC_OscConfig+0x74c>)
 800716a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800716c:	4b6c      	ldr	r3, [pc, #432]	; (8007320 <HAL_RCC_OscConfig+0x750>)
 800716e:	4013      	ands	r3, r2
 8007170:	687a      	ldr	r2, [r7, #4]
 8007172:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007174:	687a      	ldr	r2, [r7, #4]
 8007176:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007178:	0112      	lsls	r2, r2, #4
 800717a:	430a      	orrs	r2, r1
 800717c:	4967      	ldr	r1, [pc, #412]	; (800731c <HAL_RCC_OscConfig+0x74c>)
 800717e:	4313      	orrs	r3, r2
 8007180:	628b      	str	r3, [r1, #40]	; 0x28
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007186:	3b01      	subs	r3, #1
 8007188:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007190:	3b01      	subs	r3, #1
 8007192:	025b      	lsls	r3, r3, #9
 8007194:	b29b      	uxth	r3, r3
 8007196:	431a      	orrs	r2, r3
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800719c:	3b01      	subs	r3, #1
 800719e:	041b      	lsls	r3, r3, #16
 80071a0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80071a4:	431a      	orrs	r2, r3
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071aa:	3b01      	subs	r3, #1
 80071ac:	061b      	lsls	r3, r3, #24
 80071ae:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80071b2:	495a      	ldr	r1, [pc, #360]	; (800731c <HAL_RCC_OscConfig+0x74c>)
 80071b4:	4313      	orrs	r3, r2
 80071b6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80071b8:	4b58      	ldr	r3, [pc, #352]	; (800731c <HAL_RCC_OscConfig+0x74c>)
 80071ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071bc:	4a57      	ldr	r2, [pc, #348]	; (800731c <HAL_RCC_OscConfig+0x74c>)
 80071be:	f023 0301 	bic.w	r3, r3, #1
 80071c2:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80071c4:	4b55      	ldr	r3, [pc, #340]	; (800731c <HAL_RCC_OscConfig+0x74c>)
 80071c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071c8:	4b56      	ldr	r3, [pc, #344]	; (8007324 <HAL_RCC_OscConfig+0x754>)
 80071ca:	4013      	ands	r3, r2
 80071cc:	687a      	ldr	r2, [r7, #4]
 80071ce:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80071d0:	00d2      	lsls	r2, r2, #3
 80071d2:	4952      	ldr	r1, [pc, #328]	; (800731c <HAL_RCC_OscConfig+0x74c>)
 80071d4:	4313      	orrs	r3, r2
 80071d6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80071d8:	4b50      	ldr	r3, [pc, #320]	; (800731c <HAL_RCC_OscConfig+0x74c>)
 80071da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071dc:	f023 020c 	bic.w	r2, r3, #12
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e4:	494d      	ldr	r1, [pc, #308]	; (800731c <HAL_RCC_OscConfig+0x74c>)
 80071e6:	4313      	orrs	r3, r2
 80071e8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80071ea:	4b4c      	ldr	r3, [pc, #304]	; (800731c <HAL_RCC_OscConfig+0x74c>)
 80071ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ee:	f023 0202 	bic.w	r2, r3, #2
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071f6:	4949      	ldr	r1, [pc, #292]	; (800731c <HAL_RCC_OscConfig+0x74c>)
 80071f8:	4313      	orrs	r3, r2
 80071fa:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80071fc:	4b47      	ldr	r3, [pc, #284]	; (800731c <HAL_RCC_OscConfig+0x74c>)
 80071fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007200:	4a46      	ldr	r2, [pc, #280]	; (800731c <HAL_RCC_OscConfig+0x74c>)
 8007202:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007206:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007208:	4b44      	ldr	r3, [pc, #272]	; (800731c <HAL_RCC_OscConfig+0x74c>)
 800720a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800720c:	4a43      	ldr	r2, [pc, #268]	; (800731c <HAL_RCC_OscConfig+0x74c>)
 800720e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007212:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007214:	4b41      	ldr	r3, [pc, #260]	; (800731c <HAL_RCC_OscConfig+0x74c>)
 8007216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007218:	4a40      	ldr	r2, [pc, #256]	; (800731c <HAL_RCC_OscConfig+0x74c>)
 800721a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800721e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8007220:	4b3e      	ldr	r3, [pc, #248]	; (800731c <HAL_RCC_OscConfig+0x74c>)
 8007222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007224:	4a3d      	ldr	r2, [pc, #244]	; (800731c <HAL_RCC_OscConfig+0x74c>)
 8007226:	f043 0301 	orr.w	r3, r3, #1
 800722a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800722c:	4b3b      	ldr	r3, [pc, #236]	; (800731c <HAL_RCC_OscConfig+0x74c>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a3a      	ldr	r2, [pc, #232]	; (800731c <HAL_RCC_OscConfig+0x74c>)
 8007232:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007236:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007238:	f7fa fc44 	bl	8001ac4 <HAL_GetTick>
 800723c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800723e:	e008      	b.n	8007252 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007240:	f7fa fc40 	bl	8001ac4 <HAL_GetTick>
 8007244:	4602      	mov	r2, r0
 8007246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007248:	1ad3      	subs	r3, r2, r3
 800724a:	2b02      	cmp	r3, #2
 800724c:	d901      	bls.n	8007252 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800724e:	2303      	movs	r3, #3
 8007250:	e05f      	b.n	8007312 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007252:	4b32      	ldr	r3, [pc, #200]	; (800731c <HAL_RCC_OscConfig+0x74c>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800725a:	2b00      	cmp	r3, #0
 800725c:	d0f0      	beq.n	8007240 <HAL_RCC_OscConfig+0x670>
 800725e:	e057      	b.n	8007310 <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007260:	4b2e      	ldr	r3, [pc, #184]	; (800731c <HAL_RCC_OscConfig+0x74c>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a2d      	ldr	r2, [pc, #180]	; (800731c <HAL_RCC_OscConfig+0x74c>)
 8007266:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800726a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800726c:	f7fa fc2a 	bl	8001ac4 <HAL_GetTick>
 8007270:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007272:	e008      	b.n	8007286 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007274:	f7fa fc26 	bl	8001ac4 <HAL_GetTick>
 8007278:	4602      	mov	r2, r0
 800727a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800727c:	1ad3      	subs	r3, r2, r3
 800727e:	2b02      	cmp	r3, #2
 8007280:	d901      	bls.n	8007286 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8007282:	2303      	movs	r3, #3
 8007284:	e045      	b.n	8007312 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007286:	4b25      	ldr	r3, [pc, #148]	; (800731c <HAL_RCC_OscConfig+0x74c>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800728e:	2b00      	cmp	r3, #0
 8007290:	d1f0      	bne.n	8007274 <HAL_RCC_OscConfig+0x6a4>
 8007292:	e03d      	b.n	8007310 <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007294:	4b21      	ldr	r3, [pc, #132]	; (800731c <HAL_RCC_OscConfig+0x74c>)
 8007296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007298:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800729a:	4b20      	ldr	r3, [pc, #128]	; (800731c <HAL_RCC_OscConfig+0x74c>)
 800729c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800729e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d031      	beq.n	800730c <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	f003 0203 	and.w	r2, r3, #3
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80072b2:	429a      	cmp	r2, r3
 80072b4:	d12a      	bne.n	800730c <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	091b      	lsrs	r3, r3, #4
 80072ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072c2:	429a      	cmp	r2, r3
 80072c4:	d122      	bne.n	800730c <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072d0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80072d2:	429a      	cmp	r2, r3
 80072d4:	d11a      	bne.n	800730c <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	0a5b      	lsrs	r3, r3, #9
 80072da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072e2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80072e4:	429a      	cmp	r2, r3
 80072e6:	d111      	bne.n	800730c <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	0c1b      	lsrs	r3, r3, #16
 80072ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80072f6:	429a      	cmp	r2, r3
 80072f8:	d108      	bne.n	800730c <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	0e1b      	lsrs	r3, r3, #24
 80072fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007306:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007308:	429a      	cmp	r2, r3
 800730a:	d001      	beq.n	8007310 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 800730c:	2301      	movs	r3, #1
 800730e:	e000      	b.n	8007312 <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 8007310:	2300      	movs	r3, #0
}
 8007312:	4618      	mov	r0, r3
 8007314:	3730      	adds	r7, #48	; 0x30
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}
 800731a:	bf00      	nop
 800731c:	58024400 	.word	0x58024400
 8007320:	fffffc0c 	.word	0xfffffc0c
 8007324:	ffff0007 	.word	0xffff0007

08007328 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b086      	sub	sp, #24
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
 8007330:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d101      	bne.n	800733c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007338:	2301      	movs	r3, #1
 800733a:	e19c      	b.n	8007676 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800733c:	4b8a      	ldr	r3, [pc, #552]	; (8007568 <HAL_RCC_ClockConfig+0x240>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f003 030f 	and.w	r3, r3, #15
 8007344:	683a      	ldr	r2, [r7, #0]
 8007346:	429a      	cmp	r2, r3
 8007348:	d910      	bls.n	800736c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800734a:	4b87      	ldr	r3, [pc, #540]	; (8007568 <HAL_RCC_ClockConfig+0x240>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f023 020f 	bic.w	r2, r3, #15
 8007352:	4985      	ldr	r1, [pc, #532]	; (8007568 <HAL_RCC_ClockConfig+0x240>)
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	4313      	orrs	r3, r2
 8007358:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800735a:	4b83      	ldr	r3, [pc, #524]	; (8007568 <HAL_RCC_ClockConfig+0x240>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f003 030f 	and.w	r3, r3, #15
 8007362:	683a      	ldr	r2, [r7, #0]
 8007364:	429a      	cmp	r2, r3
 8007366:	d001      	beq.n	800736c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007368:	2301      	movs	r3, #1
 800736a:	e184      	b.n	8007676 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f003 0304 	and.w	r3, r3, #4
 8007374:	2b00      	cmp	r3, #0
 8007376:	d010      	beq.n	800739a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	691a      	ldr	r2, [r3, #16]
 800737c:	4b7b      	ldr	r3, [pc, #492]	; (800756c <HAL_RCC_ClockConfig+0x244>)
 800737e:	699b      	ldr	r3, [r3, #24]
 8007380:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007384:	429a      	cmp	r2, r3
 8007386:	d908      	bls.n	800739a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007388:	4b78      	ldr	r3, [pc, #480]	; (800756c <HAL_RCC_ClockConfig+0x244>)
 800738a:	699b      	ldr	r3, [r3, #24]
 800738c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	691b      	ldr	r3, [r3, #16]
 8007394:	4975      	ldr	r1, [pc, #468]	; (800756c <HAL_RCC_ClockConfig+0x244>)
 8007396:	4313      	orrs	r3, r2
 8007398:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f003 0308 	and.w	r3, r3, #8
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d010      	beq.n	80073c8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	695a      	ldr	r2, [r3, #20]
 80073aa:	4b70      	ldr	r3, [pc, #448]	; (800756c <HAL_RCC_ClockConfig+0x244>)
 80073ac:	69db      	ldr	r3, [r3, #28]
 80073ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80073b2:	429a      	cmp	r2, r3
 80073b4:	d908      	bls.n	80073c8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80073b6:	4b6d      	ldr	r3, [pc, #436]	; (800756c <HAL_RCC_ClockConfig+0x244>)
 80073b8:	69db      	ldr	r3, [r3, #28]
 80073ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	695b      	ldr	r3, [r3, #20]
 80073c2:	496a      	ldr	r1, [pc, #424]	; (800756c <HAL_RCC_ClockConfig+0x244>)
 80073c4:	4313      	orrs	r3, r2
 80073c6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f003 0310 	and.w	r3, r3, #16
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d010      	beq.n	80073f6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	699a      	ldr	r2, [r3, #24]
 80073d8:	4b64      	ldr	r3, [pc, #400]	; (800756c <HAL_RCC_ClockConfig+0x244>)
 80073da:	69db      	ldr	r3, [r3, #28]
 80073dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d908      	bls.n	80073f6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80073e4:	4b61      	ldr	r3, [pc, #388]	; (800756c <HAL_RCC_ClockConfig+0x244>)
 80073e6:	69db      	ldr	r3, [r3, #28]
 80073e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	699b      	ldr	r3, [r3, #24]
 80073f0:	495e      	ldr	r1, [pc, #376]	; (800756c <HAL_RCC_ClockConfig+0x244>)
 80073f2:	4313      	orrs	r3, r2
 80073f4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f003 0320 	and.w	r3, r3, #32
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d010      	beq.n	8007424 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	69da      	ldr	r2, [r3, #28]
 8007406:	4b59      	ldr	r3, [pc, #356]	; (800756c <HAL_RCC_ClockConfig+0x244>)
 8007408:	6a1b      	ldr	r3, [r3, #32]
 800740a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800740e:	429a      	cmp	r2, r3
 8007410:	d908      	bls.n	8007424 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007412:	4b56      	ldr	r3, [pc, #344]	; (800756c <HAL_RCC_ClockConfig+0x244>)
 8007414:	6a1b      	ldr	r3, [r3, #32]
 8007416:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	69db      	ldr	r3, [r3, #28]
 800741e:	4953      	ldr	r1, [pc, #332]	; (800756c <HAL_RCC_ClockConfig+0x244>)
 8007420:	4313      	orrs	r3, r2
 8007422:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f003 0302 	and.w	r3, r3, #2
 800742c:	2b00      	cmp	r3, #0
 800742e:	d010      	beq.n	8007452 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	68da      	ldr	r2, [r3, #12]
 8007434:	4b4d      	ldr	r3, [pc, #308]	; (800756c <HAL_RCC_ClockConfig+0x244>)
 8007436:	699b      	ldr	r3, [r3, #24]
 8007438:	f003 030f 	and.w	r3, r3, #15
 800743c:	429a      	cmp	r2, r3
 800743e:	d908      	bls.n	8007452 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007440:	4b4a      	ldr	r3, [pc, #296]	; (800756c <HAL_RCC_ClockConfig+0x244>)
 8007442:	699b      	ldr	r3, [r3, #24]
 8007444:	f023 020f 	bic.w	r2, r3, #15
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	68db      	ldr	r3, [r3, #12]
 800744c:	4947      	ldr	r1, [pc, #284]	; (800756c <HAL_RCC_ClockConfig+0x244>)
 800744e:	4313      	orrs	r3, r2
 8007450:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f003 0301 	and.w	r3, r3, #1
 800745a:	2b00      	cmp	r3, #0
 800745c:	d055      	beq.n	800750a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800745e:	4b43      	ldr	r3, [pc, #268]	; (800756c <HAL_RCC_ClockConfig+0x244>)
 8007460:	699b      	ldr	r3, [r3, #24]
 8007462:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	689b      	ldr	r3, [r3, #8]
 800746a:	4940      	ldr	r1, [pc, #256]	; (800756c <HAL_RCC_ClockConfig+0x244>)
 800746c:	4313      	orrs	r3, r2
 800746e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	2b02      	cmp	r3, #2
 8007476:	d107      	bne.n	8007488 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007478:	4b3c      	ldr	r3, [pc, #240]	; (800756c <HAL_RCC_ClockConfig+0x244>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007480:	2b00      	cmp	r3, #0
 8007482:	d121      	bne.n	80074c8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007484:	2301      	movs	r3, #1
 8007486:	e0f6      	b.n	8007676 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	2b03      	cmp	r3, #3
 800748e:	d107      	bne.n	80074a0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007490:	4b36      	ldr	r3, [pc, #216]	; (800756c <HAL_RCC_ClockConfig+0x244>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007498:	2b00      	cmp	r3, #0
 800749a:	d115      	bne.n	80074c8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800749c:	2301      	movs	r3, #1
 800749e:	e0ea      	b.n	8007676 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	2b01      	cmp	r3, #1
 80074a6:	d107      	bne.n	80074b8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80074a8:	4b30      	ldr	r3, [pc, #192]	; (800756c <HAL_RCC_ClockConfig+0x244>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d109      	bne.n	80074c8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80074b4:	2301      	movs	r3, #1
 80074b6:	e0de      	b.n	8007676 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80074b8:	4b2c      	ldr	r3, [pc, #176]	; (800756c <HAL_RCC_ClockConfig+0x244>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f003 0304 	and.w	r3, r3, #4
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d101      	bne.n	80074c8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80074c4:	2301      	movs	r3, #1
 80074c6:	e0d6      	b.n	8007676 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80074c8:	4b28      	ldr	r3, [pc, #160]	; (800756c <HAL_RCC_ClockConfig+0x244>)
 80074ca:	691b      	ldr	r3, [r3, #16]
 80074cc:	f023 0207 	bic.w	r2, r3, #7
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	4925      	ldr	r1, [pc, #148]	; (800756c <HAL_RCC_ClockConfig+0x244>)
 80074d6:	4313      	orrs	r3, r2
 80074d8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074da:	f7fa faf3 	bl	8001ac4 <HAL_GetTick>
 80074de:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80074e0:	e00a      	b.n	80074f8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80074e2:	f7fa faef 	bl	8001ac4 <HAL_GetTick>
 80074e6:	4602      	mov	r2, r0
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	1ad3      	subs	r3, r2, r3
 80074ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d901      	bls.n	80074f8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80074f4:	2303      	movs	r3, #3
 80074f6:	e0be      	b.n	8007676 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80074f8:	4b1c      	ldr	r3, [pc, #112]	; (800756c <HAL_RCC_ClockConfig+0x244>)
 80074fa:	691b      	ldr	r3, [r3, #16]
 80074fc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	00db      	lsls	r3, r3, #3
 8007506:	429a      	cmp	r2, r3
 8007508:	d1eb      	bne.n	80074e2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f003 0302 	and.w	r3, r3, #2
 8007512:	2b00      	cmp	r3, #0
 8007514:	d010      	beq.n	8007538 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	68da      	ldr	r2, [r3, #12]
 800751a:	4b14      	ldr	r3, [pc, #80]	; (800756c <HAL_RCC_ClockConfig+0x244>)
 800751c:	699b      	ldr	r3, [r3, #24]
 800751e:	f003 030f 	and.w	r3, r3, #15
 8007522:	429a      	cmp	r2, r3
 8007524:	d208      	bcs.n	8007538 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007526:	4b11      	ldr	r3, [pc, #68]	; (800756c <HAL_RCC_ClockConfig+0x244>)
 8007528:	699b      	ldr	r3, [r3, #24]
 800752a:	f023 020f 	bic.w	r2, r3, #15
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	68db      	ldr	r3, [r3, #12]
 8007532:	490e      	ldr	r1, [pc, #56]	; (800756c <HAL_RCC_ClockConfig+0x244>)
 8007534:	4313      	orrs	r3, r2
 8007536:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007538:	4b0b      	ldr	r3, [pc, #44]	; (8007568 <HAL_RCC_ClockConfig+0x240>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f003 030f 	and.w	r3, r3, #15
 8007540:	683a      	ldr	r2, [r7, #0]
 8007542:	429a      	cmp	r2, r3
 8007544:	d214      	bcs.n	8007570 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007546:	4b08      	ldr	r3, [pc, #32]	; (8007568 <HAL_RCC_ClockConfig+0x240>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f023 020f 	bic.w	r2, r3, #15
 800754e:	4906      	ldr	r1, [pc, #24]	; (8007568 <HAL_RCC_ClockConfig+0x240>)
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	4313      	orrs	r3, r2
 8007554:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007556:	4b04      	ldr	r3, [pc, #16]	; (8007568 <HAL_RCC_ClockConfig+0x240>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f003 030f 	and.w	r3, r3, #15
 800755e:	683a      	ldr	r2, [r7, #0]
 8007560:	429a      	cmp	r2, r3
 8007562:	d005      	beq.n	8007570 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007564:	2301      	movs	r3, #1
 8007566:	e086      	b.n	8007676 <HAL_RCC_ClockConfig+0x34e>
 8007568:	52002000 	.word	0x52002000
 800756c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f003 0304 	and.w	r3, r3, #4
 8007578:	2b00      	cmp	r3, #0
 800757a:	d010      	beq.n	800759e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	691a      	ldr	r2, [r3, #16]
 8007580:	4b3f      	ldr	r3, [pc, #252]	; (8007680 <HAL_RCC_ClockConfig+0x358>)
 8007582:	699b      	ldr	r3, [r3, #24]
 8007584:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007588:	429a      	cmp	r2, r3
 800758a:	d208      	bcs.n	800759e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800758c:	4b3c      	ldr	r3, [pc, #240]	; (8007680 <HAL_RCC_ClockConfig+0x358>)
 800758e:	699b      	ldr	r3, [r3, #24]
 8007590:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	691b      	ldr	r3, [r3, #16]
 8007598:	4939      	ldr	r1, [pc, #228]	; (8007680 <HAL_RCC_ClockConfig+0x358>)
 800759a:	4313      	orrs	r3, r2
 800759c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f003 0308 	and.w	r3, r3, #8
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d010      	beq.n	80075cc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	695a      	ldr	r2, [r3, #20]
 80075ae:	4b34      	ldr	r3, [pc, #208]	; (8007680 <HAL_RCC_ClockConfig+0x358>)
 80075b0:	69db      	ldr	r3, [r3, #28]
 80075b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80075b6:	429a      	cmp	r2, r3
 80075b8:	d208      	bcs.n	80075cc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80075ba:	4b31      	ldr	r3, [pc, #196]	; (8007680 <HAL_RCC_ClockConfig+0x358>)
 80075bc:	69db      	ldr	r3, [r3, #28]
 80075be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	695b      	ldr	r3, [r3, #20]
 80075c6:	492e      	ldr	r1, [pc, #184]	; (8007680 <HAL_RCC_ClockConfig+0x358>)
 80075c8:	4313      	orrs	r3, r2
 80075ca:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f003 0310 	and.w	r3, r3, #16
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d010      	beq.n	80075fa <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	699a      	ldr	r2, [r3, #24]
 80075dc:	4b28      	ldr	r3, [pc, #160]	; (8007680 <HAL_RCC_ClockConfig+0x358>)
 80075de:	69db      	ldr	r3, [r3, #28]
 80075e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80075e4:	429a      	cmp	r2, r3
 80075e6:	d208      	bcs.n	80075fa <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80075e8:	4b25      	ldr	r3, [pc, #148]	; (8007680 <HAL_RCC_ClockConfig+0x358>)
 80075ea:	69db      	ldr	r3, [r3, #28]
 80075ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	699b      	ldr	r3, [r3, #24]
 80075f4:	4922      	ldr	r1, [pc, #136]	; (8007680 <HAL_RCC_ClockConfig+0x358>)
 80075f6:	4313      	orrs	r3, r2
 80075f8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f003 0320 	and.w	r3, r3, #32
 8007602:	2b00      	cmp	r3, #0
 8007604:	d010      	beq.n	8007628 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	69da      	ldr	r2, [r3, #28]
 800760a:	4b1d      	ldr	r3, [pc, #116]	; (8007680 <HAL_RCC_ClockConfig+0x358>)
 800760c:	6a1b      	ldr	r3, [r3, #32]
 800760e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007612:	429a      	cmp	r2, r3
 8007614:	d208      	bcs.n	8007628 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007616:	4b1a      	ldr	r3, [pc, #104]	; (8007680 <HAL_RCC_ClockConfig+0x358>)
 8007618:	6a1b      	ldr	r3, [r3, #32]
 800761a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	69db      	ldr	r3, [r3, #28]
 8007622:	4917      	ldr	r1, [pc, #92]	; (8007680 <HAL_RCC_ClockConfig+0x358>)
 8007624:	4313      	orrs	r3, r2
 8007626:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007628:	f000 f834 	bl	8007694 <HAL_RCC_GetSysClockFreq>
 800762c:	4602      	mov	r2, r0
 800762e:	4b14      	ldr	r3, [pc, #80]	; (8007680 <HAL_RCC_ClockConfig+0x358>)
 8007630:	699b      	ldr	r3, [r3, #24]
 8007632:	0a1b      	lsrs	r3, r3, #8
 8007634:	f003 030f 	and.w	r3, r3, #15
 8007638:	4912      	ldr	r1, [pc, #72]	; (8007684 <HAL_RCC_ClockConfig+0x35c>)
 800763a:	5ccb      	ldrb	r3, [r1, r3]
 800763c:	f003 031f 	and.w	r3, r3, #31
 8007640:	fa22 f303 	lsr.w	r3, r2, r3
 8007644:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007646:	4b0e      	ldr	r3, [pc, #56]	; (8007680 <HAL_RCC_ClockConfig+0x358>)
 8007648:	699b      	ldr	r3, [r3, #24]
 800764a:	f003 030f 	and.w	r3, r3, #15
 800764e:	4a0d      	ldr	r2, [pc, #52]	; (8007684 <HAL_RCC_ClockConfig+0x35c>)
 8007650:	5cd3      	ldrb	r3, [r2, r3]
 8007652:	f003 031f 	and.w	r3, r3, #31
 8007656:	693a      	ldr	r2, [r7, #16]
 8007658:	fa22 f303 	lsr.w	r3, r2, r3
 800765c:	4a0a      	ldr	r2, [pc, #40]	; (8007688 <HAL_RCC_ClockConfig+0x360>)
 800765e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007660:	4a0a      	ldr	r2, [pc, #40]	; (800768c <HAL_RCC_ClockConfig+0x364>)
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8007666:	4b0a      	ldr	r3, [pc, #40]	; (8007690 <HAL_RCC_ClockConfig+0x368>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4618      	mov	r0, r3
 800766c:	f7fa f9e0 	bl	8001a30 <HAL_InitTick>
 8007670:	4603      	mov	r3, r0
 8007672:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007674:	7bfb      	ldrb	r3, [r7, #15]
}
 8007676:	4618      	mov	r0, r3
 8007678:	3718      	adds	r7, #24
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}
 800767e:	bf00      	nop
 8007680:	58024400 	.word	0x58024400
 8007684:	0800d738 	.word	0x0800d738
 8007688:	24000420 	.word	0x24000420
 800768c:	2400041c 	.word	0x2400041c
 8007690:	2400040c 	.word	0x2400040c

08007694 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007694:	b480      	push	{r7}
 8007696:	b089      	sub	sp, #36	; 0x24
 8007698:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800769a:	4bb3      	ldr	r3, [pc, #716]	; (8007968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800769c:	691b      	ldr	r3, [r3, #16]
 800769e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80076a2:	2b18      	cmp	r3, #24
 80076a4:	f200 8155 	bhi.w	8007952 <HAL_RCC_GetSysClockFreq+0x2be>
 80076a8:	a201      	add	r2, pc, #4	; (adr r2, 80076b0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80076aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ae:	bf00      	nop
 80076b0:	08007715 	.word	0x08007715
 80076b4:	08007953 	.word	0x08007953
 80076b8:	08007953 	.word	0x08007953
 80076bc:	08007953 	.word	0x08007953
 80076c0:	08007953 	.word	0x08007953
 80076c4:	08007953 	.word	0x08007953
 80076c8:	08007953 	.word	0x08007953
 80076cc:	08007953 	.word	0x08007953
 80076d0:	0800773b 	.word	0x0800773b
 80076d4:	08007953 	.word	0x08007953
 80076d8:	08007953 	.word	0x08007953
 80076dc:	08007953 	.word	0x08007953
 80076e0:	08007953 	.word	0x08007953
 80076e4:	08007953 	.word	0x08007953
 80076e8:	08007953 	.word	0x08007953
 80076ec:	08007953 	.word	0x08007953
 80076f0:	08007741 	.word	0x08007741
 80076f4:	08007953 	.word	0x08007953
 80076f8:	08007953 	.word	0x08007953
 80076fc:	08007953 	.word	0x08007953
 8007700:	08007953 	.word	0x08007953
 8007704:	08007953 	.word	0x08007953
 8007708:	08007953 	.word	0x08007953
 800770c:	08007953 	.word	0x08007953
 8007710:	08007747 	.word	0x08007747
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007714:	4b94      	ldr	r3, [pc, #592]	; (8007968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f003 0320 	and.w	r3, r3, #32
 800771c:	2b00      	cmp	r3, #0
 800771e:	d009      	beq.n	8007734 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007720:	4b91      	ldr	r3, [pc, #580]	; (8007968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	08db      	lsrs	r3, r3, #3
 8007726:	f003 0303 	and.w	r3, r3, #3
 800772a:	4a90      	ldr	r2, [pc, #576]	; (800796c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800772c:	fa22 f303 	lsr.w	r3, r2, r3
 8007730:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8007732:	e111      	b.n	8007958 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007734:	4b8d      	ldr	r3, [pc, #564]	; (800796c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007736:	61bb      	str	r3, [r7, #24]
    break;
 8007738:	e10e      	b.n	8007958 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800773a:	4b8d      	ldr	r3, [pc, #564]	; (8007970 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800773c:	61bb      	str	r3, [r7, #24]
    break;
 800773e:	e10b      	b.n	8007958 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007740:	4b8c      	ldr	r3, [pc, #560]	; (8007974 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007742:	61bb      	str	r3, [r7, #24]
    break;
 8007744:	e108      	b.n	8007958 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007746:	4b88      	ldr	r3, [pc, #544]	; (8007968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800774a:	f003 0303 	and.w	r3, r3, #3
 800774e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007750:	4b85      	ldr	r3, [pc, #532]	; (8007968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007754:	091b      	lsrs	r3, r3, #4
 8007756:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800775a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800775c:	4b82      	ldr	r3, [pc, #520]	; (8007968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800775e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007760:	f003 0301 	and.w	r3, r3, #1
 8007764:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007766:	4b80      	ldr	r3, [pc, #512]	; (8007968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800776a:	08db      	lsrs	r3, r3, #3
 800776c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007770:	68fa      	ldr	r2, [r7, #12]
 8007772:	fb02 f303 	mul.w	r3, r2, r3
 8007776:	ee07 3a90 	vmov	s15, r3
 800777a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800777e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	2b00      	cmp	r3, #0
 8007786:	f000 80e1 	beq.w	800794c <HAL_RCC_GetSysClockFreq+0x2b8>
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	2b02      	cmp	r3, #2
 800778e:	f000 8083 	beq.w	8007898 <HAL_RCC_GetSysClockFreq+0x204>
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	2b02      	cmp	r3, #2
 8007796:	f200 80a1 	bhi.w	80078dc <HAL_RCC_GetSysClockFreq+0x248>
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d003      	beq.n	80077a8 <HAL_RCC_GetSysClockFreq+0x114>
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	2b01      	cmp	r3, #1
 80077a4:	d056      	beq.n	8007854 <HAL_RCC_GetSysClockFreq+0x1c0>
 80077a6:	e099      	b.n	80078dc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80077a8:	4b6f      	ldr	r3, [pc, #444]	; (8007968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f003 0320 	and.w	r3, r3, #32
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d02d      	beq.n	8007810 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80077b4:	4b6c      	ldr	r3, [pc, #432]	; (8007968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	08db      	lsrs	r3, r3, #3
 80077ba:	f003 0303 	and.w	r3, r3, #3
 80077be:	4a6b      	ldr	r2, [pc, #428]	; (800796c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80077c0:	fa22 f303 	lsr.w	r3, r2, r3
 80077c4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	ee07 3a90 	vmov	s15, r3
 80077cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	ee07 3a90 	vmov	s15, r3
 80077d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077de:	4b62      	ldr	r3, [pc, #392]	; (8007968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077e6:	ee07 3a90 	vmov	s15, r3
 80077ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80077f2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007978 <HAL_RCC_GetSysClockFreq+0x2e4>
 80077f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007802:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007806:	ee67 7a27 	vmul.f32	s15, s14, s15
 800780a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800780e:	e087      	b.n	8007920 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	ee07 3a90 	vmov	s15, r3
 8007816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800781a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800797c <HAL_RCC_GetSysClockFreq+0x2e8>
 800781e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007822:	4b51      	ldr	r3, [pc, #324]	; (8007968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007826:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800782a:	ee07 3a90 	vmov	s15, r3
 800782e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007832:	ed97 6a02 	vldr	s12, [r7, #8]
 8007836:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007978 <HAL_RCC_GetSysClockFreq+0x2e4>
 800783a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800783e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007842:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007846:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800784a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800784e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007852:	e065      	b.n	8007920 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	ee07 3a90 	vmov	s15, r3
 800785a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800785e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007980 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007862:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007866:	4b40      	ldr	r3, [pc, #256]	; (8007968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800786a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800786e:	ee07 3a90 	vmov	s15, r3
 8007872:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007876:	ed97 6a02 	vldr	s12, [r7, #8]
 800787a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007978 <HAL_RCC_GetSysClockFreq+0x2e4>
 800787e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007882:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007886:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800788a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800788e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007892:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007896:	e043      	b.n	8007920 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	ee07 3a90 	vmov	s15, r3
 800789e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078a2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007984 <HAL_RCC_GetSysClockFreq+0x2f0>
 80078a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078aa:	4b2f      	ldr	r3, [pc, #188]	; (8007968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078b2:	ee07 3a90 	vmov	s15, r3
 80078b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80078be:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007978 <HAL_RCC_GetSysClockFreq+0x2e4>
 80078c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80078da:	e021      	b.n	8007920 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	ee07 3a90 	vmov	s15, r3
 80078e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078e6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007980 <HAL_RCC_GetSysClockFreq+0x2ec>
 80078ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078ee:	4b1e      	ldr	r3, [pc, #120]	; (8007968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078f6:	ee07 3a90 	vmov	s15, r3
 80078fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8007902:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007978 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007906:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800790a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800790e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007912:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800791a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800791e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007920:	4b11      	ldr	r3, [pc, #68]	; (8007968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007924:	0a5b      	lsrs	r3, r3, #9
 8007926:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800792a:	3301      	adds	r3, #1
 800792c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	ee07 3a90 	vmov	s15, r3
 8007934:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007938:	edd7 6a07 	vldr	s13, [r7, #28]
 800793c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007940:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007944:	ee17 3a90 	vmov	r3, s15
 8007948:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800794a:	e005      	b.n	8007958 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800794c:	2300      	movs	r3, #0
 800794e:	61bb      	str	r3, [r7, #24]
    break;
 8007950:	e002      	b.n	8007958 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8007952:	4b07      	ldr	r3, [pc, #28]	; (8007970 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007954:	61bb      	str	r3, [r7, #24]
    break;
 8007956:	bf00      	nop
  }

  return sysclockfreq;
 8007958:	69bb      	ldr	r3, [r7, #24]
}
 800795a:	4618      	mov	r0, r3
 800795c:	3724      	adds	r7, #36	; 0x24
 800795e:	46bd      	mov	sp, r7
 8007960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007964:	4770      	bx	lr
 8007966:	bf00      	nop
 8007968:	58024400 	.word	0x58024400
 800796c:	03d09000 	.word	0x03d09000
 8007970:	003d0900 	.word	0x003d0900
 8007974:	017d7840 	.word	0x017d7840
 8007978:	46000000 	.word	0x46000000
 800797c:	4c742400 	.word	0x4c742400
 8007980:	4a742400 	.word	0x4a742400
 8007984:	4bbebc20 	.word	0x4bbebc20

08007988 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b082      	sub	sp, #8
 800798c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800798e:	f7ff fe81 	bl	8007694 <HAL_RCC_GetSysClockFreq>
 8007992:	4602      	mov	r2, r0
 8007994:	4b10      	ldr	r3, [pc, #64]	; (80079d8 <HAL_RCC_GetHCLKFreq+0x50>)
 8007996:	699b      	ldr	r3, [r3, #24]
 8007998:	0a1b      	lsrs	r3, r3, #8
 800799a:	f003 030f 	and.w	r3, r3, #15
 800799e:	490f      	ldr	r1, [pc, #60]	; (80079dc <HAL_RCC_GetHCLKFreq+0x54>)
 80079a0:	5ccb      	ldrb	r3, [r1, r3]
 80079a2:	f003 031f 	and.w	r3, r3, #31
 80079a6:	fa22 f303 	lsr.w	r3, r2, r3
 80079aa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80079ac:	4b0a      	ldr	r3, [pc, #40]	; (80079d8 <HAL_RCC_GetHCLKFreq+0x50>)
 80079ae:	699b      	ldr	r3, [r3, #24]
 80079b0:	f003 030f 	and.w	r3, r3, #15
 80079b4:	4a09      	ldr	r2, [pc, #36]	; (80079dc <HAL_RCC_GetHCLKFreq+0x54>)
 80079b6:	5cd3      	ldrb	r3, [r2, r3]
 80079b8:	f003 031f 	and.w	r3, r3, #31
 80079bc:	687a      	ldr	r2, [r7, #4]
 80079be:	fa22 f303 	lsr.w	r3, r2, r3
 80079c2:	4a07      	ldr	r2, [pc, #28]	; (80079e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80079c4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80079c6:	4a07      	ldr	r2, [pc, #28]	; (80079e4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80079cc:	4b04      	ldr	r3, [pc, #16]	; (80079e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80079ce:	681b      	ldr	r3, [r3, #0]
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	3708      	adds	r7, #8
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}
 80079d8:	58024400 	.word	0x58024400
 80079dc:	0800d738 	.word	0x0800d738
 80079e0:	24000420 	.word	0x24000420
 80079e4:	2400041c 	.word	0x2400041c

080079e8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b086      	sub	sp, #24
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80079f0:	2300      	movs	r3, #0
 80079f2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80079f4:	2300      	movs	r3, #0
 80079f6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d03f      	beq.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a08:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007a0c:	d02a      	beq.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007a0e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007a12:	d824      	bhi.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007a14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007a18:	d018      	beq.n	8007a4c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007a1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007a1e:	d81e      	bhi.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d003      	beq.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007a24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a28:	d007      	beq.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007a2a:	e018      	b.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a2c:	4bab      	ldr	r3, [pc, #684]	; (8007cdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a30:	4aaa      	ldr	r2, [pc, #680]	; (8007cdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a36:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007a38:	e015      	b.n	8007a66 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	3304      	adds	r3, #4
 8007a3e:	2102      	movs	r1, #2
 8007a40:	4618      	mov	r0, r3
 8007a42:	f001 feff 	bl	8009844 <RCCEx_PLL2_Config>
 8007a46:	4603      	mov	r3, r0
 8007a48:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007a4a:	e00c      	b.n	8007a66 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	3324      	adds	r3, #36	; 0x24
 8007a50:	2102      	movs	r1, #2
 8007a52:	4618      	mov	r0, r3
 8007a54:	f001 ffa8 	bl	80099a8 <RCCEx_PLL3_Config>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007a5c:	e003      	b.n	8007a66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a5e:	2301      	movs	r3, #1
 8007a60:	75fb      	strb	r3, [r7, #23]
      break;
 8007a62:	e000      	b.n	8007a66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007a64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a66:	7dfb      	ldrb	r3, [r7, #23]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d109      	bne.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007a6c:	4b9b      	ldr	r3, [pc, #620]	; (8007cdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a70:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a78:	4998      	ldr	r1, [pc, #608]	; (8007cdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	650b      	str	r3, [r1, #80]	; 0x50
 8007a7e:	e001      	b.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a80:	7dfb      	ldrb	r3, [r7, #23]
 8007a82:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d03d      	beq.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a94:	2b04      	cmp	r3, #4
 8007a96:	d826      	bhi.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007a98:	a201      	add	r2, pc, #4	; (adr r2, 8007aa0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8007a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a9e:	bf00      	nop
 8007aa0:	08007ab5 	.word	0x08007ab5
 8007aa4:	08007ac3 	.word	0x08007ac3
 8007aa8:	08007ad5 	.word	0x08007ad5
 8007aac:	08007aed 	.word	0x08007aed
 8007ab0:	08007aed 	.word	0x08007aed
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ab4:	4b89      	ldr	r3, [pc, #548]	; (8007cdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ab8:	4a88      	ldr	r2, [pc, #544]	; (8007cdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007aba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007abe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007ac0:	e015      	b.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	3304      	adds	r3, #4
 8007ac6:	2100      	movs	r1, #0
 8007ac8:	4618      	mov	r0, r3
 8007aca:	f001 febb 	bl	8009844 <RCCEx_PLL2_Config>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007ad2:	e00c      	b.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	3324      	adds	r3, #36	; 0x24
 8007ad8:	2100      	movs	r1, #0
 8007ada:	4618      	mov	r0, r3
 8007adc:	f001 ff64 	bl	80099a8 <RCCEx_PLL3_Config>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007ae4:	e003      	b.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	75fb      	strb	r3, [r7, #23]
      break;
 8007aea:	e000      	b.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007aec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007aee:	7dfb      	ldrb	r3, [r7, #23]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d109      	bne.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007af4:	4b79      	ldr	r3, [pc, #484]	; (8007cdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007af6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007af8:	f023 0207 	bic.w	r2, r3, #7
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b00:	4976      	ldr	r1, [pc, #472]	; (8007cdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b02:	4313      	orrs	r3, r2
 8007b04:	650b      	str	r3, [r1, #80]	; 0x50
 8007b06:	e001      	b.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b08:	7dfb      	ldrb	r3, [r7, #23]
 8007b0a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d051      	beq.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007b1e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8007b22:	d036      	beq.n	8007b92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007b24:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8007b28:	d830      	bhi.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8007b2a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007b2e:	d032      	beq.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8007b30:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007b34:	d82a      	bhi.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8007b36:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007b3a:	d02e      	beq.n	8007b9a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8007b3c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007b40:	d824      	bhi.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8007b42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007b46:	d018      	beq.n	8007b7a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8007b48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007b4c:	d81e      	bhi.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d003      	beq.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0x172>
 8007b52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007b56:	d007      	beq.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8007b58:	e018      	b.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b5a:	4b60      	ldr	r3, [pc, #384]	; (8007cdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b5e:	4a5f      	ldr	r2, [pc, #380]	; (8007cdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b64:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007b66:	e019      	b.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	3304      	adds	r3, #4
 8007b6c:	2100      	movs	r1, #0
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f001 fe68 	bl	8009844 <RCCEx_PLL2_Config>
 8007b74:	4603      	mov	r3, r0
 8007b76:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007b78:	e010      	b.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	3324      	adds	r3, #36	; 0x24
 8007b7e:	2100      	movs	r1, #0
 8007b80:	4618      	mov	r0, r3
 8007b82:	f001 ff11 	bl	80099a8 <RCCEx_PLL3_Config>
 8007b86:	4603      	mov	r3, r0
 8007b88:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007b8a:	e007      	b.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	75fb      	strb	r3, [r7, #23]
      break;
 8007b90:	e004      	b.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8007b92:	bf00      	nop
 8007b94:	e002      	b.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8007b96:	bf00      	nop
 8007b98:	e000      	b.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8007b9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b9c:	7dfb      	ldrb	r3, [r7, #23]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d10a      	bne.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007ba2:	4b4e      	ldr	r3, [pc, #312]	; (8007cdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ba6:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007bb0:	494a      	ldr	r1, [pc, #296]	; (8007cdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	658b      	str	r3, [r1, #88]	; 0x58
 8007bb6:	e001      	b.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bb8:	7dfb      	ldrb	r3, [r7, #23]
 8007bba:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d051      	beq.n	8007c6c <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007bce:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8007bd2:	d036      	beq.n	8007c42 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8007bd4:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8007bd8:	d830      	bhi.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8007bda:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007bde:	d032      	beq.n	8007c46 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8007be0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007be4:	d82a      	bhi.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8007be6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007bea:	d02e      	beq.n	8007c4a <HAL_RCCEx_PeriphCLKConfig+0x262>
 8007bec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007bf0:	d824      	bhi.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8007bf2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007bf6:	d018      	beq.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0x242>
 8007bf8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007bfc:	d81e      	bhi.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d003      	beq.n	8007c0a <HAL_RCCEx_PeriphCLKConfig+0x222>
 8007c02:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007c06:	d007      	beq.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8007c08:	e018      	b.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c0a:	4b34      	ldr	r3, [pc, #208]	; (8007cdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c0e:	4a33      	ldr	r2, [pc, #204]	; (8007cdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007c10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c14:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007c16:	e019      	b.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	3304      	adds	r3, #4
 8007c1c:	2100      	movs	r1, #0
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f001 fe10 	bl	8009844 <RCCEx_PLL2_Config>
 8007c24:	4603      	mov	r3, r0
 8007c26:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007c28:	e010      	b.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	3324      	adds	r3, #36	; 0x24
 8007c2e:	2100      	movs	r1, #0
 8007c30:	4618      	mov	r0, r3
 8007c32:	f001 feb9 	bl	80099a8 <RCCEx_PLL3_Config>
 8007c36:	4603      	mov	r3, r0
 8007c38:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007c3a:	e007      	b.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	75fb      	strb	r3, [r7, #23]
      break;
 8007c40:	e004      	b.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8007c42:	bf00      	nop
 8007c44:	e002      	b.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8007c46:	bf00      	nop
 8007c48:	e000      	b.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8007c4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c4c:	7dfb      	ldrb	r3, [r7, #23]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d10a      	bne.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007c52:	4b22      	ldr	r3, [pc, #136]	; (8007cdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c56:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007c60:	491e      	ldr	r1, [pc, #120]	; (8007cdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007c62:	4313      	orrs	r3, r2
 8007c64:	658b      	str	r3, [r1, #88]	; 0x58
 8007c66:	e001      	b.n	8007c6c <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c68:	7dfb      	ldrb	r3, [r7, #23]
 8007c6a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d035      	beq.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c7c:	2b30      	cmp	r3, #48	; 0x30
 8007c7e:	d01c      	beq.n	8007cba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007c80:	2b30      	cmp	r3, #48	; 0x30
 8007c82:	d817      	bhi.n	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8007c84:	2b20      	cmp	r3, #32
 8007c86:	d00c      	beq.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8007c88:	2b20      	cmp	r3, #32
 8007c8a:	d813      	bhi.n	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d016      	beq.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8007c90:	2b10      	cmp	r3, #16
 8007c92:	d10f      	bne.n	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c94:	4b11      	ldr	r3, [pc, #68]	; (8007cdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c98:	4a10      	ldr	r2, [pc, #64]	; (8007cdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007c9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c9e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8007ca0:	e00e      	b.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	3304      	adds	r3, #4
 8007ca6:	2102      	movs	r1, #2
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f001 fdcb 	bl	8009844 <RCCEx_PLL2_Config>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8007cb2:	e005      	b.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	75fb      	strb	r3, [r7, #23]
      break;
 8007cb8:	e002      	b.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8007cba:	bf00      	nop
 8007cbc:	e000      	b.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8007cbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007cc0:	7dfb      	ldrb	r3, [r7, #23]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d10c      	bne.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007cc6:	4b05      	ldr	r3, [pc, #20]	; (8007cdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cca:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007cd2:	4902      	ldr	r1, [pc, #8]	; (8007cdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007cd8:	e004      	b.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8007cda:	bf00      	nop
 8007cdc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ce0:	7dfb      	ldrb	r3, [r7, #23]
 8007ce2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d047      	beq.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cf4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007cf8:	d030      	beq.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x374>
 8007cfa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007cfe:	d82a      	bhi.n	8007d56 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8007d00:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007d04:	d02c      	beq.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8007d06:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007d0a:	d824      	bhi.n	8007d56 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8007d0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d10:	d018      	beq.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8007d12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d16:	d81e      	bhi.n	8007d56 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d003      	beq.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007d1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d20:	d007      	beq.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007d22:	e018      	b.n	8007d56 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d24:	4bac      	ldr	r3, [pc, #688]	; (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d28:	4aab      	ldr	r2, [pc, #684]	; (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007d2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d2e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007d30:	e017      	b.n	8007d62 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	3304      	adds	r3, #4
 8007d36:	2100      	movs	r1, #0
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f001 fd83 	bl	8009844 <RCCEx_PLL2_Config>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007d42:	e00e      	b.n	8007d62 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	3324      	adds	r3, #36	; 0x24
 8007d48:	2100      	movs	r1, #0
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f001 fe2c 	bl	80099a8 <RCCEx_PLL3_Config>
 8007d50:	4603      	mov	r3, r0
 8007d52:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007d54:	e005      	b.n	8007d62 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d56:	2301      	movs	r3, #1
 8007d58:	75fb      	strb	r3, [r7, #23]
      break;
 8007d5a:	e002      	b.n	8007d62 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8007d5c:	bf00      	nop
 8007d5e:	e000      	b.n	8007d62 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8007d60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d62:	7dfb      	ldrb	r3, [r7, #23]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d109      	bne.n	8007d7c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007d68:	4b9b      	ldr	r3, [pc, #620]	; (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007d6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d6c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d74:	4998      	ldr	r1, [pc, #608]	; (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007d76:	4313      	orrs	r3, r2
 8007d78:	650b      	str	r3, [r1, #80]	; 0x50
 8007d7a:	e001      	b.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d7c:	7dfb      	ldrb	r3, [r7, #23]
 8007d7e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d049      	beq.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007d94:	d02e      	beq.n	8007df4 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8007d96:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007d9a:	d828      	bhi.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0x406>
 8007d9c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007da0:	d02a      	beq.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8007da2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007da6:	d822      	bhi.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0x406>
 8007da8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007dac:	d026      	beq.n	8007dfc <HAL_RCCEx_PeriphCLKConfig+0x414>
 8007dae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007db2:	d81c      	bhi.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0x406>
 8007db4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007db8:	d010      	beq.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8007dba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007dbe:	d816      	bhi.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0x406>
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d01d      	beq.n	8007e00 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8007dc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007dc8:	d111      	bne.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	3304      	adds	r3, #4
 8007dce:	2101      	movs	r1, #1
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	f001 fd37 	bl	8009844 <RCCEx_PLL2_Config>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007dda:	e012      	b.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	3324      	adds	r3, #36	; 0x24
 8007de0:	2101      	movs	r1, #1
 8007de2:	4618      	mov	r0, r3
 8007de4:	f001 fde0 	bl	80099a8 <RCCEx_PLL3_Config>
 8007de8:	4603      	mov	r3, r0
 8007dea:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007dec:	e009      	b.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007dee:	2301      	movs	r3, #1
 8007df0:	75fb      	strb	r3, [r7, #23]
      break;
 8007df2:	e006      	b.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8007df4:	bf00      	nop
 8007df6:	e004      	b.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8007df8:	bf00      	nop
 8007dfa:	e002      	b.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8007dfc:	bf00      	nop
 8007dfe:	e000      	b.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8007e00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e02:	7dfb      	ldrb	r3, [r7, #23]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d109      	bne.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007e08:	4b73      	ldr	r3, [pc, #460]	; (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007e0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e0c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e14:	4970      	ldr	r1, [pc, #448]	; (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007e16:	4313      	orrs	r3, r2
 8007e18:	650b      	str	r3, [r1, #80]	; 0x50
 8007e1a:	e001      	b.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e1c:	7dfb      	ldrb	r3, [r7, #23]
 8007e1e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d04b      	beq.n	8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007e32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e36:	d02e      	beq.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8007e38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e3c:	d828      	bhi.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8007e3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e42:	d02a      	beq.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8007e44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e48:	d822      	bhi.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8007e4a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007e4e:	d026      	beq.n	8007e9e <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8007e50:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007e54:	d81c      	bhi.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8007e56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e5a:	d010      	beq.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0x496>
 8007e5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e60:	d816      	bhi.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d01d      	beq.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8007e66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e6a:	d111      	bne.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	3304      	adds	r3, #4
 8007e70:	2101      	movs	r1, #1
 8007e72:	4618      	mov	r0, r3
 8007e74:	f001 fce6 	bl	8009844 <RCCEx_PLL2_Config>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007e7c:	e012      	b.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	3324      	adds	r3, #36	; 0x24
 8007e82:	2101      	movs	r1, #1
 8007e84:	4618      	mov	r0, r3
 8007e86:	f001 fd8f 	bl	80099a8 <RCCEx_PLL3_Config>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007e8e:	e009      	b.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007e90:	2301      	movs	r3, #1
 8007e92:	75fb      	strb	r3, [r7, #23]
      break;
 8007e94:	e006      	b.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8007e96:	bf00      	nop
 8007e98:	e004      	b.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8007e9a:	bf00      	nop
 8007e9c:	e002      	b.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8007e9e:	bf00      	nop
 8007ea0:	e000      	b.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8007ea2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ea4:	7dfb      	ldrb	r3, [r7, #23]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d10a      	bne.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007eaa:	4b4b      	ldr	r3, [pc, #300]	; (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007eae:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007eb8:	4947      	ldr	r1, [pc, #284]	; (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007eba:	4313      	orrs	r3, r2
 8007ebc:	658b      	str	r3, [r1, #88]	; 0x58
 8007ebe:	e001      	b.n	8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ec0:	7dfb      	ldrb	r3, [r7, #23]
 8007ec2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d02f      	beq.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ed4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ed8:	d00e      	beq.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8007eda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ede:	d814      	bhi.n	8007f0a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d015      	beq.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8007ee4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ee8:	d10f      	bne.n	8007f0a <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007eea:	4b3b      	ldr	r3, [pc, #236]	; (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eee:	4a3a      	ldr	r2, [pc, #232]	; (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007ef0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ef4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007ef6:	e00c      	b.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	3304      	adds	r3, #4
 8007efc:	2101      	movs	r1, #1
 8007efe:	4618      	mov	r0, r3
 8007f00:	f001 fca0 	bl	8009844 <RCCEx_PLL2_Config>
 8007f04:	4603      	mov	r3, r0
 8007f06:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007f08:	e003      	b.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	75fb      	strb	r3, [r7, #23]
      break;
 8007f0e:	e000      	b.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8007f10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f12:	7dfb      	ldrb	r3, [r7, #23]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d109      	bne.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007f18:	4b2f      	ldr	r3, [pc, #188]	; (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007f1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f1c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f24:	492c      	ldr	r1, [pc, #176]	; (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007f26:	4313      	orrs	r3, r2
 8007f28:	650b      	str	r3, [r1, #80]	; 0x50
 8007f2a:	e001      	b.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f2c:	7dfb      	ldrb	r3, [r7, #23]
 8007f2e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d032      	beq.n	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f40:	2b03      	cmp	r3, #3
 8007f42:	d81b      	bhi.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0x594>
 8007f44:	a201      	add	r2, pc, #4	; (adr r2, 8007f4c <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8007f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f4a:	bf00      	nop
 8007f4c:	08007f83 	.word	0x08007f83
 8007f50:	08007f5d 	.word	0x08007f5d
 8007f54:	08007f6b 	.word	0x08007f6b
 8007f58:	08007f83 	.word	0x08007f83
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f5c:	4b1e      	ldr	r3, [pc, #120]	; (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f60:	4a1d      	ldr	r2, [pc, #116]	; (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007f62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f66:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007f68:	e00c      	b.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	3304      	adds	r3, #4
 8007f6e:	2102      	movs	r1, #2
 8007f70:	4618      	mov	r0, r3
 8007f72:	f001 fc67 	bl	8009844 <RCCEx_PLL2_Config>
 8007f76:	4603      	mov	r3, r0
 8007f78:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007f7a:	e003      	b.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	75fb      	strb	r3, [r7, #23]
      break;
 8007f80:	e000      	b.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8007f82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f84:	7dfb      	ldrb	r3, [r7, #23]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d109      	bne.n	8007f9e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007f8a:	4b13      	ldr	r3, [pc, #76]	; (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f8e:	f023 0203 	bic.w	r2, r3, #3
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f96:	4910      	ldr	r1, [pc, #64]	; (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007f98:	4313      	orrs	r3, r2
 8007f9a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007f9c:	e001      	b.n	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f9e:	7dfb      	ldrb	r3, [r7, #23]
 8007fa0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	f000 808a 	beq.w	80080c4 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007fb0:	4b0a      	ldr	r3, [pc, #40]	; (8007fdc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	4a09      	ldr	r2, [pc, #36]	; (8007fdc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8007fb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007fba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007fbc:	f7f9 fd82 	bl	8001ac4 <HAL_GetTick>
 8007fc0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007fc2:	e00d      	b.n	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007fc4:	f7f9 fd7e 	bl	8001ac4 <HAL_GetTick>
 8007fc8:	4602      	mov	r2, r0
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	1ad3      	subs	r3, r2, r3
 8007fce:	2b64      	cmp	r3, #100	; 0x64
 8007fd0:	d906      	bls.n	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 8007fd2:	2303      	movs	r3, #3
 8007fd4:	75fb      	strb	r3, [r7, #23]
        break;
 8007fd6:	e009      	b.n	8007fec <HAL_RCCEx_PeriphCLKConfig+0x604>
 8007fd8:	58024400 	.word	0x58024400
 8007fdc:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007fe0:	4bb9      	ldr	r3, [pc, #740]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d0eb      	beq.n	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8007fec:	7dfb      	ldrb	r3, [r7, #23]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d166      	bne.n	80080c0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007ff2:	4bb6      	ldr	r3, [pc, #728]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007ff4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007ffc:	4053      	eors	r3, r2
 8007ffe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008002:	2b00      	cmp	r3, #0
 8008004:	d013      	beq.n	800802e <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008006:	4bb1      	ldr	r3, [pc, #708]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800800a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800800e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008010:	4bae      	ldr	r3, [pc, #696]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008014:	4aad      	ldr	r2, [pc, #692]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008016:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800801a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800801c:	4bab      	ldr	r3, [pc, #684]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800801e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008020:	4aaa      	ldr	r2, [pc, #680]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008022:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008026:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008028:	4aa8      	ldr	r2, [pc, #672]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008034:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008038:	d115      	bne.n	8008066 <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800803a:	f7f9 fd43 	bl	8001ac4 <HAL_GetTick>
 800803e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008040:	e00b      	b.n	800805a <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008042:	f7f9 fd3f 	bl	8001ac4 <HAL_GetTick>
 8008046:	4602      	mov	r2, r0
 8008048:	693b      	ldr	r3, [r7, #16]
 800804a:	1ad3      	subs	r3, r2, r3
 800804c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008050:	4293      	cmp	r3, r2
 8008052:	d902      	bls.n	800805a <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8008054:	2303      	movs	r3, #3
 8008056:	75fb      	strb	r3, [r7, #23]
            break;
 8008058:	e005      	b.n	8008066 <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800805a:	4b9c      	ldr	r3, [pc, #624]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800805c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800805e:	f003 0302 	and.w	r3, r3, #2
 8008062:	2b00      	cmp	r3, #0
 8008064:	d0ed      	beq.n	8008042 <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 8008066:	7dfb      	ldrb	r3, [r7, #23]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d126      	bne.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008072:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008076:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800807a:	d10d      	bne.n	8008098 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 800807c:	4b93      	ldr	r3, [pc, #588]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800807e:	691b      	ldr	r3, [r3, #16]
 8008080:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800808a:	0919      	lsrs	r1, r3, #4
 800808c:	4b90      	ldr	r3, [pc, #576]	; (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800808e:	400b      	ands	r3, r1
 8008090:	498e      	ldr	r1, [pc, #568]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008092:	4313      	orrs	r3, r2
 8008094:	610b      	str	r3, [r1, #16]
 8008096:	e005      	b.n	80080a4 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 8008098:	4b8c      	ldr	r3, [pc, #560]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800809a:	691b      	ldr	r3, [r3, #16]
 800809c:	4a8b      	ldr	r2, [pc, #556]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800809e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80080a2:	6113      	str	r3, [r2, #16]
 80080a4:	4b89      	ldr	r3, [pc, #548]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80080a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80080ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80080b2:	4986      	ldr	r1, [pc, #536]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80080b4:	4313      	orrs	r3, r2
 80080b6:	670b      	str	r3, [r1, #112]	; 0x70
 80080b8:	e004      	b.n	80080c4 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80080ba:	7dfb      	ldrb	r3, [r7, #23]
 80080bc:	75bb      	strb	r3, [r7, #22]
 80080be:	e001      	b.n	80080c4 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080c0:	7dfb      	ldrb	r3, [r7, #23]
 80080c2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f003 0301 	and.w	r3, r3, #1
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d07e      	beq.n	80081ce <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080d4:	2b28      	cmp	r3, #40	; 0x28
 80080d6:	d867      	bhi.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 80080d8:	a201      	add	r2, pc, #4	; (adr r2, 80080e0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 80080da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080de:	bf00      	nop
 80080e0:	080081af 	.word	0x080081af
 80080e4:	080081a9 	.word	0x080081a9
 80080e8:	080081a9 	.word	0x080081a9
 80080ec:	080081a9 	.word	0x080081a9
 80080f0:	080081a9 	.word	0x080081a9
 80080f4:	080081a9 	.word	0x080081a9
 80080f8:	080081a9 	.word	0x080081a9
 80080fc:	080081a9 	.word	0x080081a9
 8008100:	08008185 	.word	0x08008185
 8008104:	080081a9 	.word	0x080081a9
 8008108:	080081a9 	.word	0x080081a9
 800810c:	080081a9 	.word	0x080081a9
 8008110:	080081a9 	.word	0x080081a9
 8008114:	080081a9 	.word	0x080081a9
 8008118:	080081a9 	.word	0x080081a9
 800811c:	080081a9 	.word	0x080081a9
 8008120:	08008197 	.word	0x08008197
 8008124:	080081a9 	.word	0x080081a9
 8008128:	080081a9 	.word	0x080081a9
 800812c:	080081a9 	.word	0x080081a9
 8008130:	080081a9 	.word	0x080081a9
 8008134:	080081a9 	.word	0x080081a9
 8008138:	080081a9 	.word	0x080081a9
 800813c:	080081a9 	.word	0x080081a9
 8008140:	080081af 	.word	0x080081af
 8008144:	080081a9 	.word	0x080081a9
 8008148:	080081a9 	.word	0x080081a9
 800814c:	080081a9 	.word	0x080081a9
 8008150:	080081a9 	.word	0x080081a9
 8008154:	080081a9 	.word	0x080081a9
 8008158:	080081a9 	.word	0x080081a9
 800815c:	080081a9 	.word	0x080081a9
 8008160:	080081af 	.word	0x080081af
 8008164:	080081a9 	.word	0x080081a9
 8008168:	080081a9 	.word	0x080081a9
 800816c:	080081a9 	.word	0x080081a9
 8008170:	080081a9 	.word	0x080081a9
 8008174:	080081a9 	.word	0x080081a9
 8008178:	080081a9 	.word	0x080081a9
 800817c:	080081a9 	.word	0x080081a9
 8008180:	080081af 	.word	0x080081af
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	3304      	adds	r3, #4
 8008188:	2101      	movs	r1, #1
 800818a:	4618      	mov	r0, r3
 800818c:	f001 fb5a 	bl	8009844 <RCCEx_PLL2_Config>
 8008190:	4603      	mov	r3, r0
 8008192:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008194:	e00c      	b.n	80081b0 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	3324      	adds	r3, #36	; 0x24
 800819a:	2101      	movs	r1, #1
 800819c:	4618      	mov	r0, r3
 800819e:	f001 fc03 	bl	80099a8 <RCCEx_PLL3_Config>
 80081a2:	4603      	mov	r3, r0
 80081a4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80081a6:	e003      	b.n	80081b0 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80081a8:	2301      	movs	r3, #1
 80081aa:	75fb      	strb	r3, [r7, #23]
      break;
 80081ac:	e000      	b.n	80081b0 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 80081ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80081b0:	7dfb      	ldrb	r3, [r7, #23]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d109      	bne.n	80081ca <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80081b6:	4b45      	ldr	r3, [pc, #276]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80081b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081ba:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081c2:	4942      	ldr	r1, [pc, #264]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80081c4:	4313      	orrs	r3, r2
 80081c6:	654b      	str	r3, [r1, #84]	; 0x54
 80081c8:	e001      	b.n	80081ce <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081ca:	7dfb      	ldrb	r3, [r7, #23]
 80081cc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f003 0302 	and.w	r3, r3, #2
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d037      	beq.n	800824a <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081de:	2b05      	cmp	r3, #5
 80081e0:	d820      	bhi.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 80081e2:	a201      	add	r2, pc, #4	; (adr r2, 80081e8 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 80081e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081e8:	0800822b 	.word	0x0800822b
 80081ec:	08008201 	.word	0x08008201
 80081f0:	08008213 	.word	0x08008213
 80081f4:	0800822b 	.word	0x0800822b
 80081f8:	0800822b 	.word	0x0800822b
 80081fc:	0800822b 	.word	0x0800822b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	3304      	adds	r3, #4
 8008204:	2101      	movs	r1, #1
 8008206:	4618      	mov	r0, r3
 8008208:	f001 fb1c 	bl	8009844 <RCCEx_PLL2_Config>
 800820c:	4603      	mov	r3, r0
 800820e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008210:	e00c      	b.n	800822c <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	3324      	adds	r3, #36	; 0x24
 8008216:	2101      	movs	r1, #1
 8008218:	4618      	mov	r0, r3
 800821a:	f001 fbc5 	bl	80099a8 <RCCEx_PLL3_Config>
 800821e:	4603      	mov	r3, r0
 8008220:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008222:	e003      	b.n	800822c <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008224:	2301      	movs	r3, #1
 8008226:	75fb      	strb	r3, [r7, #23]
      break;
 8008228:	e000      	b.n	800822c <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 800822a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800822c:	7dfb      	ldrb	r3, [r7, #23]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d109      	bne.n	8008246 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008232:	4b26      	ldr	r3, [pc, #152]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008236:	f023 0207 	bic.w	r2, r3, #7
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800823e:	4923      	ldr	r1, [pc, #140]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008240:	4313      	orrs	r3, r2
 8008242:	654b      	str	r3, [r1, #84]	; 0x54
 8008244:	e001      	b.n	800824a <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008246:	7dfb      	ldrb	r3, [r7, #23]
 8008248:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f003 0304 	and.w	r3, r3, #4
 8008252:	2b00      	cmp	r3, #0
 8008254:	d040      	beq.n	80082d8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800825c:	2b05      	cmp	r3, #5
 800825e:	d821      	bhi.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8008260:	a201      	add	r2, pc, #4	; (adr r2, 8008268 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8008262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008266:	bf00      	nop
 8008268:	080082ab 	.word	0x080082ab
 800826c:	08008281 	.word	0x08008281
 8008270:	08008293 	.word	0x08008293
 8008274:	080082ab 	.word	0x080082ab
 8008278:	080082ab 	.word	0x080082ab
 800827c:	080082ab 	.word	0x080082ab
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	3304      	adds	r3, #4
 8008284:	2101      	movs	r1, #1
 8008286:	4618      	mov	r0, r3
 8008288:	f001 fadc 	bl	8009844 <RCCEx_PLL2_Config>
 800828c:	4603      	mov	r3, r0
 800828e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008290:	e00c      	b.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	3324      	adds	r3, #36	; 0x24
 8008296:	2101      	movs	r1, #1
 8008298:	4618      	mov	r0, r3
 800829a:	f001 fb85 	bl	80099a8 <RCCEx_PLL3_Config>
 800829e:	4603      	mov	r3, r0
 80082a0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80082a2:	e003      	b.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80082a4:	2301      	movs	r3, #1
 80082a6:	75fb      	strb	r3, [r7, #23]
      break;
 80082a8:	e000      	b.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 80082aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80082ac:	7dfb      	ldrb	r3, [r7, #23]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d110      	bne.n	80082d4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80082b2:	4b06      	ldr	r3, [pc, #24]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80082b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082b6:	f023 0207 	bic.w	r2, r3, #7
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082c0:	4902      	ldr	r1, [pc, #8]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80082c2:	4313      	orrs	r3, r2
 80082c4:	658b      	str	r3, [r1, #88]	; 0x58
 80082c6:	e007      	b.n	80082d8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 80082c8:	58024800 	.word	0x58024800
 80082cc:	58024400 	.word	0x58024400
 80082d0:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082d4:	7dfb      	ldrb	r3, [r7, #23]
 80082d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f003 0320 	and.w	r3, r3, #32
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d04b      	beq.n	800837c <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80082ee:	d02e      	beq.n	800834e <HAL_RCCEx_PeriphCLKConfig+0x966>
 80082f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80082f4:	d828      	bhi.n	8008348 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80082f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082fa:	d02a      	beq.n	8008352 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80082fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008300:	d822      	bhi.n	8008348 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8008302:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008306:	d026      	beq.n	8008356 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8008308:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800830c:	d81c      	bhi.n	8008348 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800830e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008312:	d010      	beq.n	8008336 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8008314:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008318:	d816      	bhi.n	8008348 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800831a:	2b00      	cmp	r3, #0
 800831c:	d01d      	beq.n	800835a <HAL_RCCEx_PeriphCLKConfig+0x972>
 800831e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008322:	d111      	bne.n	8008348 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	3304      	adds	r3, #4
 8008328:	2100      	movs	r1, #0
 800832a:	4618      	mov	r0, r3
 800832c:	f001 fa8a 	bl	8009844 <RCCEx_PLL2_Config>
 8008330:	4603      	mov	r3, r0
 8008332:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008334:	e012      	b.n	800835c <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	3324      	adds	r3, #36	; 0x24
 800833a:	2102      	movs	r1, #2
 800833c:	4618      	mov	r0, r3
 800833e:	f001 fb33 	bl	80099a8 <RCCEx_PLL3_Config>
 8008342:	4603      	mov	r3, r0
 8008344:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008346:	e009      	b.n	800835c <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008348:	2301      	movs	r3, #1
 800834a:	75fb      	strb	r3, [r7, #23]
      break;
 800834c:	e006      	b.n	800835c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800834e:	bf00      	nop
 8008350:	e004      	b.n	800835c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8008352:	bf00      	nop
 8008354:	e002      	b.n	800835c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8008356:	bf00      	nop
 8008358:	e000      	b.n	800835c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800835a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800835c:	7dfb      	ldrb	r3, [r7, #23]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d10a      	bne.n	8008378 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008362:	4bb2      	ldr	r3, [pc, #712]	; (800862c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008366:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008370:	49ae      	ldr	r1, [pc, #696]	; (800862c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008372:	4313      	orrs	r3, r2
 8008374:	654b      	str	r3, [r1, #84]	; 0x54
 8008376:	e001      	b.n	800837c <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008378:	7dfb      	ldrb	r3, [r7, #23]
 800837a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008384:	2b00      	cmp	r3, #0
 8008386:	d04b      	beq.n	8008420 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800838e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008392:	d02e      	beq.n	80083f2 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8008394:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008398:	d828      	bhi.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800839a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800839e:	d02a      	beq.n	80083f6 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 80083a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083a4:	d822      	bhi.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80083a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80083aa:	d026      	beq.n	80083fa <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80083ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80083b0:	d81c      	bhi.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80083b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083b6:	d010      	beq.n	80083da <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 80083b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083bc:	d816      	bhi.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d01d      	beq.n	80083fe <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80083c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083c6:	d111      	bne.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	3304      	adds	r3, #4
 80083cc:	2100      	movs	r1, #0
 80083ce:	4618      	mov	r0, r3
 80083d0:	f001 fa38 	bl	8009844 <RCCEx_PLL2_Config>
 80083d4:	4603      	mov	r3, r0
 80083d6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80083d8:	e012      	b.n	8008400 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	3324      	adds	r3, #36	; 0x24
 80083de:	2102      	movs	r1, #2
 80083e0:	4618      	mov	r0, r3
 80083e2:	f001 fae1 	bl	80099a8 <RCCEx_PLL3_Config>
 80083e6:	4603      	mov	r3, r0
 80083e8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80083ea:	e009      	b.n	8008400 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80083ec:	2301      	movs	r3, #1
 80083ee:	75fb      	strb	r3, [r7, #23]
      break;
 80083f0:	e006      	b.n	8008400 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80083f2:	bf00      	nop
 80083f4:	e004      	b.n	8008400 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80083f6:	bf00      	nop
 80083f8:	e002      	b.n	8008400 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80083fa:	bf00      	nop
 80083fc:	e000      	b.n	8008400 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80083fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008400:	7dfb      	ldrb	r3, [r7, #23]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d10a      	bne.n	800841c <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008406:	4b89      	ldr	r3, [pc, #548]	; (800862c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800840a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008414:	4985      	ldr	r1, [pc, #532]	; (800862c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008416:	4313      	orrs	r3, r2
 8008418:	658b      	str	r3, [r1, #88]	; 0x58
 800841a:	e001      	b.n	8008420 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800841c:	7dfb      	ldrb	r3, [r7, #23]
 800841e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008428:	2b00      	cmp	r3, #0
 800842a:	d04b      	beq.n	80084c4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008432:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008436:	d02e      	beq.n	8008496 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8008438:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800843c:	d828      	bhi.n	8008490 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800843e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008442:	d02a      	beq.n	800849a <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8008444:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008448:	d822      	bhi.n	8008490 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800844a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800844e:	d026      	beq.n	800849e <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8008450:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008454:	d81c      	bhi.n	8008490 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8008456:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800845a:	d010      	beq.n	800847e <HAL_RCCEx_PeriphCLKConfig+0xa96>
 800845c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008460:	d816      	bhi.n	8008490 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8008462:	2b00      	cmp	r3, #0
 8008464:	d01d      	beq.n	80084a2 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8008466:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800846a:	d111      	bne.n	8008490 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	3304      	adds	r3, #4
 8008470:	2100      	movs	r1, #0
 8008472:	4618      	mov	r0, r3
 8008474:	f001 f9e6 	bl	8009844 <RCCEx_PLL2_Config>
 8008478:	4603      	mov	r3, r0
 800847a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800847c:	e012      	b.n	80084a4 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	3324      	adds	r3, #36	; 0x24
 8008482:	2102      	movs	r1, #2
 8008484:	4618      	mov	r0, r3
 8008486:	f001 fa8f 	bl	80099a8 <RCCEx_PLL3_Config>
 800848a:	4603      	mov	r3, r0
 800848c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800848e:	e009      	b.n	80084a4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008490:	2301      	movs	r3, #1
 8008492:	75fb      	strb	r3, [r7, #23]
      break;
 8008494:	e006      	b.n	80084a4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8008496:	bf00      	nop
 8008498:	e004      	b.n	80084a4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800849a:	bf00      	nop
 800849c:	e002      	b.n	80084a4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800849e:	bf00      	nop
 80084a0:	e000      	b.n	80084a4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80084a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80084a4:	7dfb      	ldrb	r3, [r7, #23]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d10a      	bne.n	80084c0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80084aa:	4b60      	ldr	r3, [pc, #384]	; (800862c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80084ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80084b8:	495c      	ldr	r1, [pc, #368]	; (800862c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80084ba:	4313      	orrs	r3, r2
 80084bc:	658b      	str	r3, [r1, #88]	; 0x58
 80084be:	e001      	b.n	80084c4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084c0:	7dfb      	ldrb	r3, [r7, #23]
 80084c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f003 0308 	and.w	r3, r3, #8
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d018      	beq.n	8008502 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084d8:	d10a      	bne.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	3324      	adds	r3, #36	; 0x24
 80084de:	2102      	movs	r1, #2
 80084e0:	4618      	mov	r0, r3
 80084e2:	f001 fa61 	bl	80099a8 <RCCEx_PLL3_Config>
 80084e6:	4603      	mov	r3, r0
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d001      	beq.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 80084ec:	2301      	movs	r3, #1
 80084ee:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80084f0:	4b4e      	ldr	r3, [pc, #312]	; (800862c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80084f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084f4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084fc:	494b      	ldr	r1, [pc, #300]	; (800862c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80084fe:	4313      	orrs	r3, r2
 8008500:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f003 0310 	and.w	r3, r3, #16
 800850a:	2b00      	cmp	r3, #0
 800850c:	d01a      	beq.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008514:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008518:	d10a      	bne.n	8008530 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	3324      	adds	r3, #36	; 0x24
 800851e:	2102      	movs	r1, #2
 8008520:	4618      	mov	r0, r3
 8008522:	f001 fa41 	bl	80099a8 <RCCEx_PLL3_Config>
 8008526:	4603      	mov	r3, r0
 8008528:	2b00      	cmp	r3, #0
 800852a:	d001      	beq.n	8008530 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 800852c:	2301      	movs	r3, #1
 800852e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008530:	4b3e      	ldr	r3, [pc, #248]	; (800862c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008534:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800853e:	493b      	ldr	r1, [pc, #236]	; (800862c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008540:	4313      	orrs	r3, r2
 8008542:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800854c:	2b00      	cmp	r3, #0
 800854e:	d034      	beq.n	80085ba <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008556:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800855a:	d01d      	beq.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800855c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008560:	d817      	bhi.n	8008592 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8008562:	2b00      	cmp	r3, #0
 8008564:	d003      	beq.n	800856e <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8008566:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800856a:	d009      	beq.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800856c:	e011      	b.n	8008592 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	3304      	adds	r3, #4
 8008572:	2100      	movs	r1, #0
 8008574:	4618      	mov	r0, r3
 8008576:	f001 f965 	bl	8009844 <RCCEx_PLL2_Config>
 800857a:	4603      	mov	r3, r0
 800857c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800857e:	e00c      	b.n	800859a <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	3324      	adds	r3, #36	; 0x24
 8008584:	2102      	movs	r1, #2
 8008586:	4618      	mov	r0, r3
 8008588:	f001 fa0e 	bl	80099a8 <RCCEx_PLL3_Config>
 800858c:	4603      	mov	r3, r0
 800858e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008590:	e003      	b.n	800859a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008592:	2301      	movs	r3, #1
 8008594:	75fb      	strb	r3, [r7, #23]
      break;
 8008596:	e000      	b.n	800859a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8008598:	bf00      	nop
    }

    if(ret == HAL_OK)
 800859a:	7dfb      	ldrb	r3, [r7, #23]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d10a      	bne.n	80085b6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80085a0:	4b22      	ldr	r3, [pc, #136]	; (800862c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80085a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80085ae:	491f      	ldr	r1, [pc, #124]	; (800862c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80085b0:	4313      	orrs	r3, r2
 80085b2:	658b      	str	r3, [r1, #88]	; 0x58
 80085b4:	e001      	b.n	80085ba <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085b6:	7dfb      	ldrb	r3, [r7, #23]
 80085b8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d036      	beq.n	8008634 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80085cc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80085d0:	d01c      	beq.n	800860c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80085d2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80085d6:	d816      	bhi.n	8008606 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80085d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80085dc:	d003      	beq.n	80085e6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80085de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80085e2:	d007      	beq.n	80085f4 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 80085e4:	e00f      	b.n	8008606 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80085e6:	4b11      	ldr	r3, [pc, #68]	; (800862c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80085e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ea:	4a10      	ldr	r2, [pc, #64]	; (800862c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80085ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80085f0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80085f2:	e00c      	b.n	800860e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	3324      	adds	r3, #36	; 0x24
 80085f8:	2101      	movs	r1, #1
 80085fa:	4618      	mov	r0, r3
 80085fc:	f001 f9d4 	bl	80099a8 <RCCEx_PLL3_Config>
 8008600:	4603      	mov	r3, r0
 8008602:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008604:	e003      	b.n	800860e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008606:	2301      	movs	r3, #1
 8008608:	75fb      	strb	r3, [r7, #23]
      break;
 800860a:	e000      	b.n	800860e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 800860c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800860e:	7dfb      	ldrb	r3, [r7, #23]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d10d      	bne.n	8008630 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008614:	4b05      	ldr	r3, [pc, #20]	; (800862c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008618:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008622:	4902      	ldr	r1, [pc, #8]	; (800862c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008624:	4313      	orrs	r3, r2
 8008626:	654b      	str	r3, [r1, #84]	; 0x54
 8008628:	e004      	b.n	8008634 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 800862a:	bf00      	nop
 800862c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008630:	7dfb      	ldrb	r3, [r7, #23]
 8008632:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800863c:	2b00      	cmp	r3, #0
 800863e:	d029      	beq.n	8008694 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008644:	2b00      	cmp	r3, #0
 8008646:	d003      	beq.n	8008650 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008648:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800864c:	d007      	beq.n	800865e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800864e:	e00f      	b.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008650:	4b61      	ldr	r3, [pc, #388]	; (80087d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008654:	4a60      	ldr	r2, [pc, #384]	; (80087d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008656:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800865a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800865c:	e00b      	b.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	3304      	adds	r3, #4
 8008662:	2102      	movs	r1, #2
 8008664:	4618      	mov	r0, r3
 8008666:	f001 f8ed 	bl	8009844 <RCCEx_PLL2_Config>
 800866a:	4603      	mov	r3, r0
 800866c:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800866e:	e002      	b.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 8008670:	2301      	movs	r3, #1
 8008672:	75fb      	strb	r3, [r7, #23]
      break;
 8008674:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008676:	7dfb      	ldrb	r3, [r7, #23]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d109      	bne.n	8008690 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800867c:	4b56      	ldr	r3, [pc, #344]	; (80087d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800867e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008680:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008688:	4953      	ldr	r1, [pc, #332]	; (80087d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800868a:	4313      	orrs	r3, r2
 800868c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800868e:	e001      	b.n	8008694 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008690:	7dfb      	ldrb	r3, [r7, #23]
 8008692:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800869c:	2b00      	cmp	r3, #0
 800869e:	d00a      	beq.n	80086b6 <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	3324      	adds	r3, #36	; 0x24
 80086a4:	2102      	movs	r1, #2
 80086a6:	4618      	mov	r0, r3
 80086a8:	f001 f97e 	bl	80099a8 <RCCEx_PLL3_Config>
 80086ac:	4603      	mov	r3, r0
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d001      	beq.n	80086b6 <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 80086b2:	2301      	movs	r3, #1
 80086b4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d030      	beq.n	8008724 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80086c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80086ca:	d017      	beq.n	80086fc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80086cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80086d0:	d811      	bhi.n	80086f6 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 80086d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80086d6:	d013      	beq.n	8008700 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 80086d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80086dc:	d80b      	bhi.n	80086f6 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d010      	beq.n	8008704 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 80086e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086e6:	d106      	bne.n	80086f6 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086e8:	4b3b      	ldr	r3, [pc, #236]	; (80087d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80086ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ec:	4a3a      	ldr	r2, [pc, #232]	; (80087d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80086ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80086f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80086f4:	e007      	b.n	8008706 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80086f6:	2301      	movs	r3, #1
 80086f8:	75fb      	strb	r3, [r7, #23]
      break;
 80086fa:	e004      	b.n	8008706 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80086fc:	bf00      	nop
 80086fe:	e002      	b.n	8008706 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8008700:	bf00      	nop
 8008702:	e000      	b.n	8008706 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8008704:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008706:	7dfb      	ldrb	r3, [r7, #23]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d109      	bne.n	8008720 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800870c:	4b32      	ldr	r3, [pc, #200]	; (80087d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800870e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008710:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008718:	492f      	ldr	r1, [pc, #188]	; (80087d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800871a:	4313      	orrs	r3, r2
 800871c:	654b      	str	r3, [r1, #84]	; 0x54
 800871e:	e001      	b.n	8008724 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008720:	7dfb      	ldrb	r3, [r7, #23]
 8008722:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800872c:	2b00      	cmp	r3, #0
 800872e:	d008      	beq.n	8008742 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008730:	4b29      	ldr	r3, [pc, #164]	; (80087d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008732:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008734:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800873c:	4926      	ldr	r1, [pc, #152]	; (80087d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800873e:	4313      	orrs	r3, r2
 8008740:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800874a:	2b00      	cmp	r3, #0
 800874c:	d008      	beq.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800874e:	4b22      	ldr	r3, [pc, #136]	; (80087d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008750:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008752:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800875a:	491f      	ldr	r1, [pc, #124]	; (80087d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800875c:	4313      	orrs	r3, r2
 800875e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008768:	2b00      	cmp	r3, #0
 800876a:	d00d      	beq.n	8008788 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800876c:	4b1a      	ldr	r3, [pc, #104]	; (80087d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800876e:	691b      	ldr	r3, [r3, #16]
 8008770:	4a19      	ldr	r2, [pc, #100]	; (80087d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008772:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008776:	6113      	str	r3, [r2, #16]
 8008778:	4b17      	ldr	r3, [pc, #92]	; (80087d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800877a:	691a      	ldr	r2, [r3, #16]
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008782:	4915      	ldr	r1, [pc, #84]	; (80087d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008784:	4313      	orrs	r3, r2
 8008786:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	2b00      	cmp	r3, #0
 800878e:	da08      	bge.n	80087a2 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008790:	4b11      	ldr	r3, [pc, #68]	; (80087d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008792:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008794:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800879c:	490e      	ldr	r1, [pc, #56]	; (80087d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800879e:	4313      	orrs	r3, r2
 80087a0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d009      	beq.n	80087c2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80087ae:	4b0a      	ldr	r3, [pc, #40]	; (80087d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80087b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087b2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087bc:	4906      	ldr	r1, [pc, #24]	; (80087d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80087be:	4313      	orrs	r3, r2
 80087c0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80087c2:	7dbb      	ldrb	r3, [r7, #22]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d101      	bne.n	80087cc <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 80087c8:	2300      	movs	r3, #0
 80087ca:	e000      	b.n	80087ce <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 80087cc:	2301      	movs	r3, #1
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3718      	adds	r7, #24
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}
 80087d6:	bf00      	nop
 80087d8:	58024400 	.word	0x58024400

080087dc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b090      	sub	sp, #64	; 0x40
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087ea:	f040 8089 	bne.w	8008900 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80087ee:	4b95      	ldr	r3, [pc, #596]	; (8008a44 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80087f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087f2:	f003 0307 	and.w	r3, r3, #7
 80087f6:	633b      	str	r3, [r7, #48]	; 0x30
 80087f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087fa:	2b04      	cmp	r3, #4
 80087fc:	d87d      	bhi.n	80088fa <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 80087fe:	a201      	add	r2, pc, #4	; (adr r2, 8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8008800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008804:	08008819 	.word	0x08008819
 8008808:	0800883d 	.word	0x0800883d
 800880c:	08008861 	.word	0x08008861
 8008810:	080088f5 	.word	0x080088f5
 8008814:	08008885 	.word	0x08008885

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008818:	4b8a      	ldr	r3, [pc, #552]	; (8008a44 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008820:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008824:	d107      	bne.n	8008836 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008826:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800882a:	4618      	mov	r0, r3
 800882c:	f000 feb8 	bl	80095a0 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8008830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008832:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008834:	e3ed      	b.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008836:	2300      	movs	r3, #0
 8008838:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800883a:	e3ea      	b.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800883c:	4b81      	ldr	r3, [pc, #516]	; (8008a44 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008844:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008848:	d107      	bne.n	800885a <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800884a:	f107 0318 	add.w	r3, r7, #24
 800884e:	4618      	mov	r0, r3
 8008850:	f000 fbfe 	bl	8009050 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008854:	69bb      	ldr	r3, [r7, #24]
 8008856:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008858:	e3db      	b.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800885a:	2300      	movs	r3, #0
 800885c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800885e:	e3d8      	b.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008860:	4b78      	ldr	r3, [pc, #480]	; (8008a44 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008868:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800886c:	d107      	bne.n	800887e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800886e:	f107 030c 	add.w	r3, r7, #12
 8008872:	4618      	mov	r0, r3
 8008874:	f000 fd40 	bl	80092f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800887c:	e3c9      	b.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800887e:	2300      	movs	r3, #0
 8008880:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008882:	e3c6      	b.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008884:	4b6f      	ldr	r3, [pc, #444]	; (8008a44 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008886:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008888:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800888c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800888e:	4b6d      	ldr	r3, [pc, #436]	; (8008a44 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f003 0304 	and.w	r3, r3, #4
 8008896:	2b04      	cmp	r3, #4
 8008898:	d10c      	bne.n	80088b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800889a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800889c:	2b00      	cmp	r3, #0
 800889e:	d109      	bne.n	80088b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80088a0:	4b68      	ldr	r3, [pc, #416]	; (8008a44 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	08db      	lsrs	r3, r3, #3
 80088a6:	f003 0303 	and.w	r3, r3, #3
 80088aa:	4a67      	ldr	r2, [pc, #412]	; (8008a48 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 80088ac:	fa22 f303 	lsr.w	r3, r2, r3
 80088b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80088b2:	e01e      	b.n	80088f2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80088b4:	4b63      	ldr	r3, [pc, #396]	; (8008a44 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088c0:	d106      	bne.n	80088d0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80088c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80088c8:	d102      	bne.n	80088d0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80088ca:	4b60      	ldr	r3, [pc, #384]	; (8008a4c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80088cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80088ce:	e010      	b.n	80088f2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80088d0:	4b5c      	ldr	r3, [pc, #368]	; (8008a44 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80088dc:	d106      	bne.n	80088ec <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80088de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088e4:	d102      	bne.n	80088ec <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80088e6:	4b5a      	ldr	r3, [pc, #360]	; (8008a50 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80088e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80088ea:	e002      	b.n	80088f2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80088ec:	2300      	movs	r3, #0
 80088ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80088f0:	e38f      	b.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80088f2:	e38e      	b.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80088f4:	4b57      	ldr	r3, [pc, #348]	; (8008a54 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80088f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80088f8:	e38b      	b.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 80088fa:	2300      	movs	r3, #0
 80088fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80088fe:	e388      	b.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008906:	f040 80a7 	bne.w	8008a58 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800890a:	4b4e      	ldr	r3, [pc, #312]	; (8008a44 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800890c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800890e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8008912:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008916:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800891a:	d054      	beq.n	80089c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800891c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800891e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008922:	f200 808b 	bhi.w	8008a3c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8008926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008928:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800892c:	f000 8083 	beq.w	8008a36 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8008930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008932:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008936:	f200 8081 	bhi.w	8008a3c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800893a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800893c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008940:	d02f      	beq.n	80089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 8008942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008944:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008948:	d878      	bhi.n	8008a3c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800894a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800894c:	2b00      	cmp	r3, #0
 800894e:	d004      	beq.n	800895a <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 8008950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008952:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008956:	d012      	beq.n	800897e <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 8008958:	e070      	b.n	8008a3c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800895a:	4b3a      	ldr	r3, [pc, #232]	; (8008a44 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008962:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008966:	d107      	bne.n	8008978 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008968:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800896c:	4618      	mov	r0, r3
 800896e:	f000 fe17 	bl	80095a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008974:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008976:	e34c      	b.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008978:	2300      	movs	r3, #0
 800897a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800897c:	e349      	b.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800897e:	4b31      	ldr	r3, [pc, #196]	; (8008a44 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008986:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800898a:	d107      	bne.n	800899c <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800898c:	f107 0318 	add.w	r3, r7, #24
 8008990:	4618      	mov	r0, r3
 8008992:	f000 fb5d 	bl	8009050 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008996:	69bb      	ldr	r3, [r7, #24]
 8008998:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800899a:	e33a      	b.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800899c:	2300      	movs	r3, #0
 800899e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80089a0:	e337      	b.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80089a2:	4b28      	ldr	r3, [pc, #160]	; (8008a44 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80089aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089ae:	d107      	bne.n	80089c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089b0:	f107 030c 	add.w	r3, r7, #12
 80089b4:	4618      	mov	r0, r3
 80089b6:	f000 fc9f 	bl	80092f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80089be:	e328      	b.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80089c0:	2300      	movs	r3, #0
 80089c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80089c4:	e325      	b.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80089c6:	4b1f      	ldr	r3, [pc, #124]	; (8008a44 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80089c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80089ce:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80089d0:	4b1c      	ldr	r3, [pc, #112]	; (8008a44 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f003 0304 	and.w	r3, r3, #4
 80089d8:	2b04      	cmp	r3, #4
 80089da:	d10c      	bne.n	80089f6 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 80089dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d109      	bne.n	80089f6 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80089e2:	4b18      	ldr	r3, [pc, #96]	; (8008a44 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	08db      	lsrs	r3, r3, #3
 80089e8:	f003 0303 	and.w	r3, r3, #3
 80089ec:	4a16      	ldr	r2, [pc, #88]	; (8008a48 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 80089ee:	fa22 f303 	lsr.w	r3, r2, r3
 80089f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089f4:	e01e      	b.n	8008a34 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80089f6:	4b13      	ldr	r3, [pc, #76]	; (8008a44 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a02:	d106      	bne.n	8008a12 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8008a04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008a0a:	d102      	bne.n	8008a12 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008a0c:	4b0f      	ldr	r3, [pc, #60]	; (8008a4c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a10:	e010      	b.n	8008a34 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008a12:	4b0c      	ldr	r3, [pc, #48]	; (8008a44 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008a1e:	d106      	bne.n	8008a2e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8008a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a26:	d102      	bne.n	8008a2e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008a28:	4b09      	ldr	r3, [pc, #36]	; (8008a50 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8008a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a2c:	e002      	b.n	8008a34 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008a32:	e2ee      	b.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8008a34:	e2ed      	b.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008a36:	4b07      	ldr	r3, [pc, #28]	; (8008a54 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008a38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a3a:	e2ea      	b.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a40:	e2e7      	b.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8008a42:	bf00      	nop
 8008a44:	58024400 	.word	0x58024400
 8008a48:	03d09000 	.word	0x03d09000
 8008a4c:	003d0900 	.word	0x003d0900
 8008a50:	017d7840 	.word	0x017d7840
 8008a54:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a5e:	f040 809c 	bne.w	8008b9a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8008a62:	4b9e      	ldr	r3, [pc, #632]	; (8008cdc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a66:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008a6a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a6e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008a72:	d054      	beq.n	8008b1e <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8008a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a76:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008a7a:	f200 808b 	bhi.w	8008b94 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8008a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a80:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008a84:	f000 8083 	beq.w	8008b8e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8008a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a8a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008a8e:	f200 8081 	bhi.w	8008b94 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8008a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008a98:	d02f      	beq.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8008a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a9c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008aa0:	d878      	bhi.n	8008b94 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8008aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d004      	beq.n	8008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8008aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aaa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008aae:	d012      	beq.n	8008ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8008ab0:	e070      	b.n	8008b94 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008ab2:	4b8a      	ldr	r3, [pc, #552]	; (8008cdc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008aba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008abe:	d107      	bne.n	8008ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008ac0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	f000 fd6b 	bl	80095a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008acc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008ace:	e2a0      	b.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ad4:	e29d      	b.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008ad6:	4b81      	ldr	r3, [pc, #516]	; (8008cdc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ade:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008ae2:	d107      	bne.n	8008af4 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ae4:	f107 0318 	add.w	r3, r7, #24
 8008ae8:	4618      	mov	r0, r3
 8008aea:	f000 fab1 	bl	8009050 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008aee:	69bb      	ldr	r3, [r7, #24]
 8008af0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8008af2:	e28e      	b.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008af4:	2300      	movs	r3, #0
 8008af6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008af8:	e28b      	b.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008afa:	4b78      	ldr	r3, [pc, #480]	; (8008cdc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b06:	d107      	bne.n	8008b18 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b08:	f107 030c 	add.w	r3, r7, #12
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f000 fbf3 	bl	80092f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008b16:	e27c      	b.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008b18:	2300      	movs	r3, #0
 8008b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b1c:	e279      	b.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008b1e:	4b6f      	ldr	r3, [pc, #444]	; (8008cdc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b22:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008b26:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008b28:	4b6c      	ldr	r3, [pc, #432]	; (8008cdc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f003 0304 	and.w	r3, r3, #4
 8008b30:	2b04      	cmp	r3, #4
 8008b32:	d10c      	bne.n	8008b4e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8008b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d109      	bne.n	8008b4e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008b3a:	4b68      	ldr	r3, [pc, #416]	; (8008cdc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	08db      	lsrs	r3, r3, #3
 8008b40:	f003 0303 	and.w	r3, r3, #3
 8008b44:	4a66      	ldr	r2, [pc, #408]	; (8008ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008b46:	fa22 f303 	lsr.w	r3, r2, r3
 8008b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b4c:	e01e      	b.n	8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008b4e:	4b63      	ldr	r3, [pc, #396]	; (8008cdc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b5a:	d106      	bne.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 8008b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008b62:	d102      	bne.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008b64:	4b5f      	ldr	r3, [pc, #380]	; (8008ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8008b66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b68:	e010      	b.n	8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008b6a:	4b5c      	ldr	r3, [pc, #368]	; (8008cdc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b76:	d106      	bne.n	8008b86 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8008b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b7e:	d102      	bne.n	8008b86 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008b80:	4b59      	ldr	r3, [pc, #356]	; (8008ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8008b82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b84:	e002      	b.n	8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008b86:	2300      	movs	r3, #0
 8008b88:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008b8a:	e242      	b.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8008b8c:	e241      	b.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008b8e:	4b57      	ldr	r3, [pc, #348]	; (8008cec <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8008b90:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b92:	e23e      	b.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8008b94:	2300      	movs	r3, #0
 8008b96:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b98:	e23b      	b.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ba0:	f040 80a6 	bne.w	8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8008ba4:	4b4d      	ldr	r3, [pc, #308]	; (8008cdc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008ba6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ba8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008bac:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008bb4:	d054      	beq.n	8008c60 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8008bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008bbc:	f200 808b 	bhi.w	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8008bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bc2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008bc6:	f000 8083 	beq.w	8008cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 8008bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bcc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008bd0:	f200 8081 	bhi.w	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8008bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008bda:	d02f      	beq.n	8008c3c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 8008bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008be2:	d878      	bhi.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8008be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d004      	beq.n	8008bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8008bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bf0:	d012      	beq.n	8008c18 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 8008bf2:	e070      	b.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008bf4:	4b39      	ldr	r3, [pc, #228]	; (8008cdc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bfc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c00:	d107      	bne.n	8008c12 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008c02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c06:	4618      	mov	r0, r3
 8008c08:	f000 fcca 	bl	80095a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008c10:	e1ff      	b.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008c12:	2300      	movs	r3, #0
 8008c14:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c16:	e1fc      	b.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008c18:	4b30      	ldr	r3, [pc, #192]	; (8008cdc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008c24:	d107      	bne.n	8008c36 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c26:	f107 0318 	add.w	r3, r7, #24
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f000 fa10 	bl	8009050 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008c30:	69bb      	ldr	r3, [r7, #24]
 8008c32:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008c34:	e1ed      	b.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008c36:	2300      	movs	r3, #0
 8008c38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c3a:	e1ea      	b.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008c3c:	4b27      	ldr	r3, [pc, #156]	; (8008cdc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c48:	d107      	bne.n	8008c5a <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c4a:	f107 030c 	add.w	r3, r7, #12
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f000 fb52 	bl	80092f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008c58:	e1db      	b.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c5e:	e1d8      	b.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008c60:	4b1e      	ldr	r3, [pc, #120]	; (8008cdc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008c62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c64:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008c68:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008c6a:	4b1c      	ldr	r3, [pc, #112]	; (8008cdc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f003 0304 	and.w	r3, r3, #4
 8008c72:	2b04      	cmp	r3, #4
 8008c74:	d10c      	bne.n	8008c90 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 8008c76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d109      	bne.n	8008c90 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008c7c:	4b17      	ldr	r3, [pc, #92]	; (8008cdc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	08db      	lsrs	r3, r3, #3
 8008c82:	f003 0303 	and.w	r3, r3, #3
 8008c86:	4a16      	ldr	r2, [pc, #88]	; (8008ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008c88:	fa22 f303 	lsr.w	r3, r2, r3
 8008c8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c8e:	e01e      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008c90:	4b12      	ldr	r3, [pc, #72]	; (8008cdc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c9c:	d106      	bne.n	8008cac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8008c9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ca0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ca4:	d102      	bne.n	8008cac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008ca6:	4b0f      	ldr	r3, [pc, #60]	; (8008ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8008ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008caa:	e010      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008cac:	4b0b      	ldr	r3, [pc, #44]	; (8008cdc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008cb8:	d106      	bne.n	8008cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8008cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008cc0:	d102      	bne.n	8008cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008cc2:	4b09      	ldr	r3, [pc, #36]	; (8008ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8008cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008cc6:	e002      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008ccc:	e1a1      	b.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8008cce:	e1a0      	b.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008cd0:	4b06      	ldr	r3, [pc, #24]	; (8008cec <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8008cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008cd4:	e19d      	b.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008cda:	e19a      	b.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8008cdc:	58024400 	.word	0x58024400
 8008ce0:	03d09000 	.word	0x03d09000
 8008ce4:	003d0900 	.word	0x003d0900
 8008ce8:	017d7840 	.word	0x017d7840
 8008cec:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008cf6:	d173      	bne.n	8008de0 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8008cf8:	4b9a      	ldr	r3, [pc, #616]	; (8008f64 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cfc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008d00:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008d08:	d02f      	beq.n	8008d6a <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8008d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008d10:	d863      	bhi.n	8008dda <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8008d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d004      	beq.n	8008d22 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 8008d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d1e:	d012      	beq.n	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 8008d20:	e05b      	b.n	8008dda <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008d22:	4b90      	ldr	r3, [pc, #576]	; (8008f64 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008d2e:	d107      	bne.n	8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d30:	f107 0318 	add.w	r3, r7, #24
 8008d34:	4618      	mov	r0, r3
 8008d36:	f000 f98b 	bl	8009050 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008d3a:	69bb      	ldr	r3, [r7, #24]
 8008d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008d3e:	e168      	b.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008d40:	2300      	movs	r3, #0
 8008d42:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d44:	e165      	b.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008d46:	4b87      	ldr	r3, [pc, #540]	; (8008f64 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008d4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d52:	d107      	bne.n	8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d54:	f107 030c 	add.w	r3, r7, #12
 8008d58:	4618      	mov	r0, r3
 8008d5a:	f000 facd 	bl	80092f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008d5e:	697b      	ldr	r3, [r7, #20]
 8008d60:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008d62:	e156      	b.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008d64:	2300      	movs	r3, #0
 8008d66:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d68:	e153      	b.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008d6a:	4b7e      	ldr	r3, [pc, #504]	; (8008f64 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d6e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008d72:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008d74:	4b7b      	ldr	r3, [pc, #492]	; (8008f64 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f003 0304 	and.w	r3, r3, #4
 8008d7c:	2b04      	cmp	r3, #4
 8008d7e:	d10c      	bne.n	8008d9a <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 8008d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d109      	bne.n	8008d9a <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008d86:	4b77      	ldr	r3, [pc, #476]	; (8008f64 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	08db      	lsrs	r3, r3, #3
 8008d8c:	f003 0303 	and.w	r3, r3, #3
 8008d90:	4a75      	ldr	r2, [pc, #468]	; (8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8008d92:	fa22 f303 	lsr.w	r3, r2, r3
 8008d96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d98:	e01e      	b.n	8008dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008d9a:	4b72      	ldr	r3, [pc, #456]	; (8008f64 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008da2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008da6:	d106      	bne.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8008da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008daa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008dae:	d102      	bne.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008db0:	4b6e      	ldr	r3, [pc, #440]	; (8008f6c <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8008db2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008db4:	e010      	b.n	8008dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008db6:	4b6b      	ldr	r3, [pc, #428]	; (8008f64 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008dbe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008dc2:	d106      	bne.n	8008dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8008dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008dca:	d102      	bne.n	8008dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008dcc:	4b68      	ldr	r3, [pc, #416]	; (8008f70 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8008dce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008dd0:	e002      	b.n	8008dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008dd6:	e11c      	b.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8008dd8:	e11b      	b.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008dde:	e118      	b.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008de6:	d133      	bne.n	8008e50 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8008de8:	4b5e      	ldr	r3, [pc, #376]	; (8008f64 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008dea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008dec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008df0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d004      	beq.n	8008e02 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8008df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008dfe:	d012      	beq.n	8008e26 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 8008e00:	e023      	b.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008e02:	4b58      	ldr	r3, [pc, #352]	; (8008f64 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e0e:	d107      	bne.n	8008e20 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008e10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e14:	4618      	mov	r0, r3
 8008e16:	f000 fbc3 	bl	80095a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008e1e:	e0f8      	b.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008e20:	2300      	movs	r3, #0
 8008e22:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e24:	e0f5      	b.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e26:	4b4f      	ldr	r3, [pc, #316]	; (8008f64 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008e32:	d107      	bne.n	8008e44 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e34:	f107 0318 	add.w	r3, r7, #24
 8008e38:	4618      	mov	r0, r3
 8008e3a:	f000 f909 	bl	8009050 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008e3e:	6a3b      	ldr	r3, [r7, #32]
 8008e40:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008e42:	e0e6      	b.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008e44:	2300      	movs	r3, #0
 8008e46:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e48:	e0e3      	b.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e4e:	e0e0      	b.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008e56:	f040 808d 	bne.w	8008f74 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8008e5a:	4b42      	ldr	r3, [pc, #264]	; (8008f64 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e5e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008e62:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e66:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008e6a:	d06b      	beq.n	8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 8008e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008e72:	d874      	bhi.n	8008f5e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8008e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e7a:	d056      	beq.n	8008f2a <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8008e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e82:	d86c      	bhi.n	8008f5e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8008e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e86:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008e8a:	d03b      	beq.n	8008f04 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 8008e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e8e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008e92:	d864      	bhi.n	8008f5e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8008e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e9a:	d021      	beq.n	8008ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8008e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ea2:	d85c      	bhi.n	8008f5e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8008ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d004      	beq.n	8008eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8008eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008eb0:	d004      	beq.n	8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8008eb2:	e054      	b.n	8008f5e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008eb4:	f000 f8b6 	bl	8009024 <HAL_RCCEx_GetD3PCLK1Freq>
 8008eb8:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8008eba:	e0aa      	b.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008ebc:	4b29      	ldr	r3, [pc, #164]	; (8008f64 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ec4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008ec8:	d107      	bne.n	8008eda <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008eca:	f107 0318 	add.w	r3, r7, #24
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f000 f8be 	bl	8009050 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008ed4:	69fb      	ldr	r3, [r7, #28]
 8008ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008ed8:	e09b      	b.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008eda:	2300      	movs	r3, #0
 8008edc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ede:	e098      	b.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008ee0:	4b20      	ldr	r3, [pc, #128]	; (8008f64 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ee8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008eec:	d107      	bne.n	8008efe <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008eee:	f107 030c 	add.w	r3, r7, #12
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	f000 fa00 	bl	80092f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008efc:	e089      	b.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008efe:	2300      	movs	r3, #0
 8008f00:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f02:	e086      	b.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008f04:	4b17      	ldr	r3, [pc, #92]	; (8008f64 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f003 0304 	and.w	r3, r3, #4
 8008f0c:	2b04      	cmp	r3, #4
 8008f0e:	d109      	bne.n	8008f24 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008f10:	4b14      	ldr	r3, [pc, #80]	; (8008f64 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	08db      	lsrs	r3, r3, #3
 8008f16:	f003 0303 	and.w	r3, r3, #3
 8008f1a:	4a13      	ldr	r2, [pc, #76]	; (8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8008f1c:	fa22 f303 	lsr.w	r3, r2, r3
 8008f20:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008f22:	e076      	b.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008f24:	2300      	movs	r3, #0
 8008f26:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f28:	e073      	b.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008f2a:	4b0e      	ldr	r3, [pc, #56]	; (8008f64 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f36:	d102      	bne.n	8008f3e <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 8008f38:	4b0c      	ldr	r3, [pc, #48]	; (8008f6c <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8008f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008f3c:	e069      	b.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f42:	e066      	b.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008f44:	4b07      	ldr	r3, [pc, #28]	; (8008f64 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f50:	d102      	bne.n	8008f58 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 8008f52:	4b07      	ldr	r3, [pc, #28]	; (8008f70 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8008f54:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008f56:	e05c      	b.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f5c:	e059      	b.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f62:	e056      	b.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8008f64:	58024400 	.word	0x58024400
 8008f68:	03d09000 	.word	0x03d09000
 8008f6c:	003d0900 	.word	0x003d0900
 8008f70:	017d7840 	.word	0x017d7840
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f7a:	d148      	bne.n	800900e <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8008f7c:	4b27      	ldr	r3, [pc, #156]	; (800901c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008f7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f80:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008f84:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f8c:	d02a      	beq.n	8008fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 8008f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f94:	d838      	bhi.n	8009008 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 8008f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d004      	beq.n	8008fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 8008f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008fa2:	d00d      	beq.n	8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 8008fa4:	e030      	b.n	8009008 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008fa6:	4b1d      	ldr	r3, [pc, #116]	; (800901c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008fb2:	d102      	bne.n	8008fba <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 8008fb4:	4b1a      	ldr	r3, [pc, #104]	; (8009020 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8008fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008fb8:	e02b      	b.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008fbe:	e028      	b.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008fc0:	4b16      	ldr	r3, [pc, #88]	; (800901c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fc8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008fcc:	d107      	bne.n	8008fde <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008fce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f000 fae4 	bl	80095a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fda:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008fdc:	e019      	b.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008fe2:	e016      	b.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008fe4:	4b0d      	ldr	r3, [pc, #52]	; (800901c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008fec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008ff0:	d107      	bne.n	8009002 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ff2:	f107 0318 	add.w	r3, r7, #24
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f000 f82a 	bl	8009050 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008ffc:	69fb      	ldr	r3, [r7, #28]
 8008ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009000:	e007      	b.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8009002:	2300      	movs	r3, #0
 8009004:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009006:	e004      	b.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8009008:	2300      	movs	r3, #0
 800900a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800900c:	e001      	b.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 800900e:	2300      	movs	r3, #0
 8009010:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8009012:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009014:	4618      	mov	r0, r3
 8009016:	3740      	adds	r7, #64	; 0x40
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}
 800901c:	58024400 	.word	0x58024400
 8009020:	017d7840 	.word	0x017d7840

08009024 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009028:	f7fe fcae 	bl	8007988 <HAL_RCC_GetHCLKFreq>
 800902c:	4602      	mov	r2, r0
 800902e:	4b06      	ldr	r3, [pc, #24]	; (8009048 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009030:	6a1b      	ldr	r3, [r3, #32]
 8009032:	091b      	lsrs	r3, r3, #4
 8009034:	f003 0307 	and.w	r3, r3, #7
 8009038:	4904      	ldr	r1, [pc, #16]	; (800904c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800903a:	5ccb      	ldrb	r3, [r1, r3]
 800903c:	f003 031f 	and.w	r3, r3, #31
 8009040:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009044:	4618      	mov	r0, r3
 8009046:	bd80      	pop	{r7, pc}
 8009048:	58024400 	.word	0x58024400
 800904c:	0800d738 	.word	0x0800d738

08009050 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8009050:	b480      	push	{r7}
 8009052:	b089      	sub	sp, #36	; 0x24
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009058:	4ba1      	ldr	r3, [pc, #644]	; (80092e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800905a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800905c:	f003 0303 	and.w	r3, r3, #3
 8009060:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8009062:	4b9f      	ldr	r3, [pc, #636]	; (80092e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009066:	0b1b      	lsrs	r3, r3, #12
 8009068:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800906c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800906e:	4b9c      	ldr	r3, [pc, #624]	; (80092e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009072:	091b      	lsrs	r3, r3, #4
 8009074:	f003 0301 	and.w	r3, r3, #1
 8009078:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800907a:	4b99      	ldr	r3, [pc, #612]	; (80092e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800907c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800907e:	08db      	lsrs	r3, r3, #3
 8009080:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009084:	693a      	ldr	r2, [r7, #16]
 8009086:	fb02 f303 	mul.w	r3, r2, r3
 800908a:	ee07 3a90 	vmov	s15, r3
 800908e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009092:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009096:	697b      	ldr	r3, [r7, #20]
 8009098:	2b00      	cmp	r3, #0
 800909a:	f000 8111 	beq.w	80092c0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800909e:	69bb      	ldr	r3, [r7, #24]
 80090a0:	2b02      	cmp	r3, #2
 80090a2:	f000 8083 	beq.w	80091ac <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80090a6:	69bb      	ldr	r3, [r7, #24]
 80090a8:	2b02      	cmp	r3, #2
 80090aa:	f200 80a1 	bhi.w	80091f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80090ae:	69bb      	ldr	r3, [r7, #24]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d003      	beq.n	80090bc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80090b4:	69bb      	ldr	r3, [r7, #24]
 80090b6:	2b01      	cmp	r3, #1
 80090b8:	d056      	beq.n	8009168 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80090ba:	e099      	b.n	80091f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80090bc:	4b88      	ldr	r3, [pc, #544]	; (80092e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f003 0320 	and.w	r3, r3, #32
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d02d      	beq.n	8009124 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80090c8:	4b85      	ldr	r3, [pc, #532]	; (80092e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	08db      	lsrs	r3, r3, #3
 80090ce:	f003 0303 	and.w	r3, r3, #3
 80090d2:	4a84      	ldr	r2, [pc, #528]	; (80092e4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80090d4:	fa22 f303 	lsr.w	r3, r2, r3
 80090d8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	ee07 3a90 	vmov	s15, r3
 80090e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090e4:	697b      	ldr	r3, [r7, #20]
 80090e6:	ee07 3a90 	vmov	s15, r3
 80090ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090f2:	4b7b      	ldr	r3, [pc, #492]	; (80092e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090fa:	ee07 3a90 	vmov	s15, r3
 80090fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009102:	ed97 6a03 	vldr	s12, [r7, #12]
 8009106:	eddf 5a78 	vldr	s11, [pc, #480]	; 80092e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800910a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800910e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009112:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009116:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800911a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800911e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009122:	e087      	b.n	8009234 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009124:	697b      	ldr	r3, [r7, #20]
 8009126:	ee07 3a90 	vmov	s15, r3
 800912a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800912e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80092ec <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009132:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009136:	4b6a      	ldr	r3, [pc, #424]	; (80092e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800913a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800913e:	ee07 3a90 	vmov	s15, r3
 8009142:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009146:	ed97 6a03 	vldr	s12, [r7, #12]
 800914a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80092e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800914e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009152:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009156:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800915a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800915e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009162:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009166:	e065      	b.n	8009234 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009168:	697b      	ldr	r3, [r7, #20]
 800916a:	ee07 3a90 	vmov	s15, r3
 800916e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009172:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80092f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009176:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800917a:	4b59      	ldr	r3, [pc, #356]	; (80092e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800917c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800917e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009182:	ee07 3a90 	vmov	s15, r3
 8009186:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800918a:	ed97 6a03 	vldr	s12, [r7, #12]
 800918e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80092e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009192:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009196:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800919a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800919e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80091aa:	e043      	b.n	8009234 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80091ac:	697b      	ldr	r3, [r7, #20]
 80091ae:	ee07 3a90 	vmov	s15, r3
 80091b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091b6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80092f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80091ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091be:	4b48      	ldr	r3, [pc, #288]	; (80092e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091c6:	ee07 3a90 	vmov	s15, r3
 80091ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80091d2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80092e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80091d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80091e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80091ee:	e021      	b.n	8009234 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80091f0:	697b      	ldr	r3, [r7, #20]
 80091f2:	ee07 3a90 	vmov	s15, r3
 80091f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091fa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80092f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80091fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009202:	4b37      	ldr	r3, [pc, #220]	; (80092e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009206:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800920a:	ee07 3a90 	vmov	s15, r3
 800920e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009212:	ed97 6a03 	vldr	s12, [r7, #12]
 8009216:	eddf 5a34 	vldr	s11, [pc, #208]	; 80092e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800921a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800921e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009222:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009226:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800922a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800922e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009232:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009234:	4b2a      	ldr	r3, [pc, #168]	; (80092e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009238:	0a5b      	lsrs	r3, r3, #9
 800923a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800923e:	ee07 3a90 	vmov	s15, r3
 8009242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009246:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800924a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800924e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009252:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009256:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800925a:	ee17 2a90 	vmov	r2, s15
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009262:	4b1f      	ldr	r3, [pc, #124]	; (80092e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009266:	0c1b      	lsrs	r3, r3, #16
 8009268:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800926c:	ee07 3a90 	vmov	s15, r3
 8009270:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009274:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009278:	ee37 7a87 	vadd.f32	s14, s15, s14
 800927c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009280:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009284:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009288:	ee17 2a90 	vmov	r2, s15
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009290:	4b13      	ldr	r3, [pc, #76]	; (80092e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009294:	0e1b      	lsrs	r3, r3, #24
 8009296:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800929a:	ee07 3a90 	vmov	s15, r3
 800929e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80092a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80092aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80092ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092b6:	ee17 2a90 	vmov	r2, s15
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80092be:	e008      	b.n	80092d2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2200      	movs	r2, #0
 80092c4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2200      	movs	r2, #0
 80092ca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2200      	movs	r2, #0
 80092d0:	609a      	str	r2, [r3, #8]
}
 80092d2:	bf00      	nop
 80092d4:	3724      	adds	r7, #36	; 0x24
 80092d6:	46bd      	mov	sp, r7
 80092d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092dc:	4770      	bx	lr
 80092de:	bf00      	nop
 80092e0:	58024400 	.word	0x58024400
 80092e4:	03d09000 	.word	0x03d09000
 80092e8:	46000000 	.word	0x46000000
 80092ec:	4c742400 	.word	0x4c742400
 80092f0:	4a742400 	.word	0x4a742400
 80092f4:	4bbebc20 	.word	0x4bbebc20

080092f8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80092f8:	b480      	push	{r7}
 80092fa:	b089      	sub	sp, #36	; 0x24
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009300:	4ba1      	ldr	r3, [pc, #644]	; (8009588 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009304:	f003 0303 	and.w	r3, r3, #3
 8009308:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800930a:	4b9f      	ldr	r3, [pc, #636]	; (8009588 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800930c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800930e:	0d1b      	lsrs	r3, r3, #20
 8009310:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009314:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009316:	4b9c      	ldr	r3, [pc, #624]	; (8009588 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800931a:	0a1b      	lsrs	r3, r3, #8
 800931c:	f003 0301 	and.w	r3, r3, #1
 8009320:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009322:	4b99      	ldr	r3, [pc, #612]	; (8009588 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009326:	08db      	lsrs	r3, r3, #3
 8009328:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800932c:	693a      	ldr	r2, [r7, #16]
 800932e:	fb02 f303 	mul.w	r3, r2, r3
 8009332:	ee07 3a90 	vmov	s15, r3
 8009336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800933a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800933e:	697b      	ldr	r3, [r7, #20]
 8009340:	2b00      	cmp	r3, #0
 8009342:	f000 8111 	beq.w	8009568 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009346:	69bb      	ldr	r3, [r7, #24]
 8009348:	2b02      	cmp	r3, #2
 800934a:	f000 8083 	beq.w	8009454 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800934e:	69bb      	ldr	r3, [r7, #24]
 8009350:	2b02      	cmp	r3, #2
 8009352:	f200 80a1 	bhi.w	8009498 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009356:	69bb      	ldr	r3, [r7, #24]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d003      	beq.n	8009364 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800935c:	69bb      	ldr	r3, [r7, #24]
 800935e:	2b01      	cmp	r3, #1
 8009360:	d056      	beq.n	8009410 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009362:	e099      	b.n	8009498 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009364:	4b88      	ldr	r3, [pc, #544]	; (8009588 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f003 0320 	and.w	r3, r3, #32
 800936c:	2b00      	cmp	r3, #0
 800936e:	d02d      	beq.n	80093cc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009370:	4b85      	ldr	r3, [pc, #532]	; (8009588 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	08db      	lsrs	r3, r3, #3
 8009376:	f003 0303 	and.w	r3, r3, #3
 800937a:	4a84      	ldr	r2, [pc, #528]	; (800958c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800937c:	fa22 f303 	lsr.w	r3, r2, r3
 8009380:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	ee07 3a90 	vmov	s15, r3
 8009388:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800938c:	697b      	ldr	r3, [r7, #20]
 800938e:	ee07 3a90 	vmov	s15, r3
 8009392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009396:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800939a:	4b7b      	ldr	r3, [pc, #492]	; (8009588 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800939c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800939e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093a2:	ee07 3a90 	vmov	s15, r3
 80093a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80093ae:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009590 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80093b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093c6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80093ca:	e087      	b.n	80094dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80093cc:	697b      	ldr	r3, [r7, #20]
 80093ce:	ee07 3a90 	vmov	s15, r3
 80093d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093d6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009594 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80093da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093de:	4b6a      	ldr	r3, [pc, #424]	; (8009588 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80093e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093e6:	ee07 3a90 	vmov	s15, r3
 80093ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80093f2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009590 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80093f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009402:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009406:	ee67 7a27 	vmul.f32	s15, s14, s15
 800940a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800940e:	e065      	b.n	80094dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009410:	697b      	ldr	r3, [r7, #20]
 8009412:	ee07 3a90 	vmov	s15, r3
 8009416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800941a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009598 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800941e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009422:	4b59      	ldr	r3, [pc, #356]	; (8009588 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009426:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800942a:	ee07 3a90 	vmov	s15, r3
 800942e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009432:	ed97 6a03 	vldr	s12, [r7, #12]
 8009436:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009590 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800943a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800943e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009442:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009446:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800944a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800944e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009452:	e043      	b.n	80094dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009454:	697b      	ldr	r3, [r7, #20]
 8009456:	ee07 3a90 	vmov	s15, r3
 800945a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800945e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800959c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009462:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009466:	4b48      	ldr	r3, [pc, #288]	; (8009588 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800946a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800946e:	ee07 3a90 	vmov	s15, r3
 8009472:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009476:	ed97 6a03 	vldr	s12, [r7, #12]
 800947a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009590 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800947e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009482:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009486:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800948a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800948e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009492:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009496:	e021      	b.n	80094dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009498:	697b      	ldr	r3, [r7, #20]
 800949a:	ee07 3a90 	vmov	s15, r3
 800949e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094a2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009598 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80094a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094aa:	4b37      	ldr	r3, [pc, #220]	; (8009588 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094b2:	ee07 3a90 	vmov	s15, r3
 80094b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80094be:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009590 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80094c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80094da:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80094dc:	4b2a      	ldr	r3, [pc, #168]	; (8009588 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094e0:	0a5b      	lsrs	r3, r3, #9
 80094e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094e6:	ee07 3a90 	vmov	s15, r3
 80094ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80094f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80094f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80094fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009502:	ee17 2a90 	vmov	r2, s15
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800950a:	4b1f      	ldr	r3, [pc, #124]	; (8009588 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800950c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800950e:	0c1b      	lsrs	r3, r3, #16
 8009510:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009514:	ee07 3a90 	vmov	s15, r3
 8009518:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800951c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009520:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009524:	edd7 6a07 	vldr	s13, [r7, #28]
 8009528:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800952c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009530:	ee17 2a90 	vmov	r2, s15
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009538:	4b13      	ldr	r3, [pc, #76]	; (8009588 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800953a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800953c:	0e1b      	lsrs	r3, r3, #24
 800953e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009542:	ee07 3a90 	vmov	s15, r3
 8009546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800954a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800954e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009552:	edd7 6a07 	vldr	s13, [r7, #28]
 8009556:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800955a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800955e:	ee17 2a90 	vmov	r2, s15
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009566:	e008      	b.n	800957a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2200      	movs	r2, #0
 800956c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2200      	movs	r2, #0
 8009572:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2200      	movs	r2, #0
 8009578:	609a      	str	r2, [r3, #8]
}
 800957a:	bf00      	nop
 800957c:	3724      	adds	r7, #36	; 0x24
 800957e:	46bd      	mov	sp, r7
 8009580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009584:	4770      	bx	lr
 8009586:	bf00      	nop
 8009588:	58024400 	.word	0x58024400
 800958c:	03d09000 	.word	0x03d09000
 8009590:	46000000 	.word	0x46000000
 8009594:	4c742400 	.word	0x4c742400
 8009598:	4a742400 	.word	0x4a742400
 800959c:	4bbebc20 	.word	0x4bbebc20

080095a0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80095a0:	b480      	push	{r7}
 80095a2:	b089      	sub	sp, #36	; 0x24
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80095a8:	4ba0      	ldr	r3, [pc, #640]	; (800982c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80095aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095ac:	f003 0303 	and.w	r3, r3, #3
 80095b0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80095b2:	4b9e      	ldr	r3, [pc, #632]	; (800982c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80095b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095b6:	091b      	lsrs	r3, r3, #4
 80095b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80095bc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80095be:	4b9b      	ldr	r3, [pc, #620]	; (800982c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80095c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095c2:	f003 0301 	and.w	r3, r3, #1
 80095c6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80095c8:	4b98      	ldr	r3, [pc, #608]	; (800982c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80095ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095cc:	08db      	lsrs	r3, r3, #3
 80095ce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80095d2:	693a      	ldr	r2, [r7, #16]
 80095d4:	fb02 f303 	mul.w	r3, r2, r3
 80095d8:	ee07 3a90 	vmov	s15, r3
 80095dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095e0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80095e4:	697b      	ldr	r3, [r7, #20]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	f000 8111 	beq.w	800980e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80095ec:	69bb      	ldr	r3, [r7, #24]
 80095ee:	2b02      	cmp	r3, #2
 80095f0:	f000 8083 	beq.w	80096fa <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80095f4:	69bb      	ldr	r3, [r7, #24]
 80095f6:	2b02      	cmp	r3, #2
 80095f8:	f200 80a1 	bhi.w	800973e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80095fc:	69bb      	ldr	r3, [r7, #24]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d003      	beq.n	800960a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009602:	69bb      	ldr	r3, [r7, #24]
 8009604:	2b01      	cmp	r3, #1
 8009606:	d056      	beq.n	80096b6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009608:	e099      	b.n	800973e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800960a:	4b88      	ldr	r3, [pc, #544]	; (800982c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f003 0320 	and.w	r3, r3, #32
 8009612:	2b00      	cmp	r3, #0
 8009614:	d02d      	beq.n	8009672 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009616:	4b85      	ldr	r3, [pc, #532]	; (800982c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	08db      	lsrs	r3, r3, #3
 800961c:	f003 0303 	and.w	r3, r3, #3
 8009620:	4a83      	ldr	r2, [pc, #524]	; (8009830 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009622:	fa22 f303 	lsr.w	r3, r2, r3
 8009626:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	ee07 3a90 	vmov	s15, r3
 800962e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009632:	697b      	ldr	r3, [r7, #20]
 8009634:	ee07 3a90 	vmov	s15, r3
 8009638:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800963c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009640:	4b7a      	ldr	r3, [pc, #488]	; (800982c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009644:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009648:	ee07 3a90 	vmov	s15, r3
 800964c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009650:	ed97 6a03 	vldr	s12, [r7, #12]
 8009654:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009834 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009658:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800965c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009660:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009664:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009668:	ee67 7a27 	vmul.f32	s15, s14, s15
 800966c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009670:	e087      	b.n	8009782 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009672:	697b      	ldr	r3, [r7, #20]
 8009674:	ee07 3a90 	vmov	s15, r3
 8009678:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800967c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009838 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009680:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009684:	4b69      	ldr	r3, [pc, #420]	; (800982c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009688:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800968c:	ee07 3a90 	vmov	s15, r3
 8009690:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009694:	ed97 6a03 	vldr	s12, [r7, #12]
 8009698:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009834 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800969c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80096a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096b0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80096b4:	e065      	b.n	8009782 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80096b6:	697b      	ldr	r3, [r7, #20]
 80096b8:	ee07 3a90 	vmov	s15, r3
 80096bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096c0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800983c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80096c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096c8:	4b58      	ldr	r3, [pc, #352]	; (800982c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80096ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096d0:	ee07 3a90 	vmov	s15, r3
 80096d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096d8:	ed97 6a03 	vldr	s12, [r7, #12]
 80096dc:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009834 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80096e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80096ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096f4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80096f8:	e043      	b.n	8009782 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80096fa:	697b      	ldr	r3, [r7, #20]
 80096fc:	ee07 3a90 	vmov	s15, r3
 8009700:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009704:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009840 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009708:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800970c:	4b47      	ldr	r3, [pc, #284]	; (800982c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800970e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009710:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009714:	ee07 3a90 	vmov	s15, r3
 8009718:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800971c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009720:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009834 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009724:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009728:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800972c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009730:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009734:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009738:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800973c:	e021      	b.n	8009782 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800973e:	697b      	ldr	r3, [r7, #20]
 8009740:	ee07 3a90 	vmov	s15, r3
 8009744:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009748:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8009838 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800974c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009750:	4b36      	ldr	r3, [pc, #216]	; (800982c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009754:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009758:	ee07 3a90 	vmov	s15, r3
 800975c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009760:	ed97 6a03 	vldr	s12, [r7, #12]
 8009764:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009834 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009768:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800976c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009770:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009774:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009778:	ee67 7a27 	vmul.f32	s15, s14, s15
 800977c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009780:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8009782:	4b2a      	ldr	r3, [pc, #168]	; (800982c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009786:	0a5b      	lsrs	r3, r3, #9
 8009788:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800978c:	ee07 3a90 	vmov	s15, r3
 8009790:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009794:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009798:	ee37 7a87 	vadd.f32	s14, s15, s14
 800979c:	edd7 6a07 	vldr	s13, [r7, #28]
 80097a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097a8:	ee17 2a90 	vmov	r2, s15
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80097b0:	4b1e      	ldr	r3, [pc, #120]	; (800982c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097b4:	0c1b      	lsrs	r3, r3, #16
 80097b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097ba:	ee07 3a90 	vmov	s15, r3
 80097be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80097c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80097ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80097ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097d6:	ee17 2a90 	vmov	r2, s15
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80097de:	4b13      	ldr	r3, [pc, #76]	; (800982c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097e2:	0e1b      	lsrs	r3, r3, #24
 80097e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097e8:	ee07 3a90 	vmov	s15, r3
 80097ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80097f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80097f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80097fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009800:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009804:	ee17 2a90 	vmov	r2, s15
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800980c:	e008      	b.n	8009820 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2200      	movs	r2, #0
 8009812:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2200      	movs	r2, #0
 8009818:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2200      	movs	r2, #0
 800981e:	609a      	str	r2, [r3, #8]
}
 8009820:	bf00      	nop
 8009822:	3724      	adds	r7, #36	; 0x24
 8009824:	46bd      	mov	sp, r7
 8009826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982a:	4770      	bx	lr
 800982c:	58024400 	.word	0x58024400
 8009830:	03d09000 	.word	0x03d09000
 8009834:	46000000 	.word	0x46000000
 8009838:	4c742400 	.word	0x4c742400
 800983c:	4a742400 	.word	0x4a742400
 8009840:	4bbebc20 	.word	0x4bbebc20

08009844 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b084      	sub	sp, #16
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
 800984c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800984e:	2300      	movs	r3, #0
 8009850:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009852:	4b53      	ldr	r3, [pc, #332]	; (80099a0 <RCCEx_PLL2_Config+0x15c>)
 8009854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009856:	f003 0303 	and.w	r3, r3, #3
 800985a:	2b03      	cmp	r3, #3
 800985c:	d101      	bne.n	8009862 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800985e:	2301      	movs	r3, #1
 8009860:	e099      	b.n	8009996 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009862:	4b4f      	ldr	r3, [pc, #316]	; (80099a0 <RCCEx_PLL2_Config+0x15c>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	4a4e      	ldr	r2, [pc, #312]	; (80099a0 <RCCEx_PLL2_Config+0x15c>)
 8009868:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800986c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800986e:	f7f8 f929 	bl	8001ac4 <HAL_GetTick>
 8009872:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009874:	e008      	b.n	8009888 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009876:	f7f8 f925 	bl	8001ac4 <HAL_GetTick>
 800987a:	4602      	mov	r2, r0
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	1ad3      	subs	r3, r2, r3
 8009880:	2b02      	cmp	r3, #2
 8009882:	d901      	bls.n	8009888 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009884:	2303      	movs	r3, #3
 8009886:	e086      	b.n	8009996 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009888:	4b45      	ldr	r3, [pc, #276]	; (80099a0 <RCCEx_PLL2_Config+0x15c>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009890:	2b00      	cmp	r3, #0
 8009892:	d1f0      	bne.n	8009876 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009894:	4b42      	ldr	r3, [pc, #264]	; (80099a0 <RCCEx_PLL2_Config+0x15c>)
 8009896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009898:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	031b      	lsls	r3, r3, #12
 80098a2:	493f      	ldr	r1, [pc, #252]	; (80099a0 <RCCEx_PLL2_Config+0x15c>)
 80098a4:	4313      	orrs	r3, r2
 80098a6:	628b      	str	r3, [r1, #40]	; 0x28
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	685b      	ldr	r3, [r3, #4]
 80098ac:	3b01      	subs	r3, #1
 80098ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	689b      	ldr	r3, [r3, #8]
 80098b6:	3b01      	subs	r3, #1
 80098b8:	025b      	lsls	r3, r3, #9
 80098ba:	b29b      	uxth	r3, r3
 80098bc:	431a      	orrs	r2, r3
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	68db      	ldr	r3, [r3, #12]
 80098c2:	3b01      	subs	r3, #1
 80098c4:	041b      	lsls	r3, r3, #16
 80098c6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80098ca:	431a      	orrs	r2, r3
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	691b      	ldr	r3, [r3, #16]
 80098d0:	3b01      	subs	r3, #1
 80098d2:	061b      	lsls	r3, r3, #24
 80098d4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80098d8:	4931      	ldr	r1, [pc, #196]	; (80099a0 <RCCEx_PLL2_Config+0x15c>)
 80098da:	4313      	orrs	r3, r2
 80098dc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80098de:	4b30      	ldr	r3, [pc, #192]	; (80099a0 <RCCEx_PLL2_Config+0x15c>)
 80098e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098e2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	695b      	ldr	r3, [r3, #20]
 80098ea:	492d      	ldr	r1, [pc, #180]	; (80099a0 <RCCEx_PLL2_Config+0x15c>)
 80098ec:	4313      	orrs	r3, r2
 80098ee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80098f0:	4b2b      	ldr	r3, [pc, #172]	; (80099a0 <RCCEx_PLL2_Config+0x15c>)
 80098f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098f4:	f023 0220 	bic.w	r2, r3, #32
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	699b      	ldr	r3, [r3, #24]
 80098fc:	4928      	ldr	r1, [pc, #160]	; (80099a0 <RCCEx_PLL2_Config+0x15c>)
 80098fe:	4313      	orrs	r3, r2
 8009900:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009902:	4b27      	ldr	r3, [pc, #156]	; (80099a0 <RCCEx_PLL2_Config+0x15c>)
 8009904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009906:	4a26      	ldr	r2, [pc, #152]	; (80099a0 <RCCEx_PLL2_Config+0x15c>)
 8009908:	f023 0310 	bic.w	r3, r3, #16
 800990c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800990e:	4b24      	ldr	r3, [pc, #144]	; (80099a0 <RCCEx_PLL2_Config+0x15c>)
 8009910:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009912:	4b24      	ldr	r3, [pc, #144]	; (80099a4 <RCCEx_PLL2_Config+0x160>)
 8009914:	4013      	ands	r3, r2
 8009916:	687a      	ldr	r2, [r7, #4]
 8009918:	69d2      	ldr	r2, [r2, #28]
 800991a:	00d2      	lsls	r2, r2, #3
 800991c:	4920      	ldr	r1, [pc, #128]	; (80099a0 <RCCEx_PLL2_Config+0x15c>)
 800991e:	4313      	orrs	r3, r2
 8009920:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009922:	4b1f      	ldr	r3, [pc, #124]	; (80099a0 <RCCEx_PLL2_Config+0x15c>)
 8009924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009926:	4a1e      	ldr	r2, [pc, #120]	; (80099a0 <RCCEx_PLL2_Config+0x15c>)
 8009928:	f043 0310 	orr.w	r3, r3, #16
 800992c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d106      	bne.n	8009942 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009934:	4b1a      	ldr	r3, [pc, #104]	; (80099a0 <RCCEx_PLL2_Config+0x15c>)
 8009936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009938:	4a19      	ldr	r2, [pc, #100]	; (80099a0 <RCCEx_PLL2_Config+0x15c>)
 800993a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800993e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009940:	e00f      	b.n	8009962 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	2b01      	cmp	r3, #1
 8009946:	d106      	bne.n	8009956 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009948:	4b15      	ldr	r3, [pc, #84]	; (80099a0 <RCCEx_PLL2_Config+0x15c>)
 800994a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800994c:	4a14      	ldr	r2, [pc, #80]	; (80099a0 <RCCEx_PLL2_Config+0x15c>)
 800994e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009952:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009954:	e005      	b.n	8009962 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009956:	4b12      	ldr	r3, [pc, #72]	; (80099a0 <RCCEx_PLL2_Config+0x15c>)
 8009958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800995a:	4a11      	ldr	r2, [pc, #68]	; (80099a0 <RCCEx_PLL2_Config+0x15c>)
 800995c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009960:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009962:	4b0f      	ldr	r3, [pc, #60]	; (80099a0 <RCCEx_PLL2_Config+0x15c>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	4a0e      	ldr	r2, [pc, #56]	; (80099a0 <RCCEx_PLL2_Config+0x15c>)
 8009968:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800996c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800996e:	f7f8 f8a9 	bl	8001ac4 <HAL_GetTick>
 8009972:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009974:	e008      	b.n	8009988 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009976:	f7f8 f8a5 	bl	8001ac4 <HAL_GetTick>
 800997a:	4602      	mov	r2, r0
 800997c:	68bb      	ldr	r3, [r7, #8]
 800997e:	1ad3      	subs	r3, r2, r3
 8009980:	2b02      	cmp	r3, #2
 8009982:	d901      	bls.n	8009988 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009984:	2303      	movs	r3, #3
 8009986:	e006      	b.n	8009996 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009988:	4b05      	ldr	r3, [pc, #20]	; (80099a0 <RCCEx_PLL2_Config+0x15c>)
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009990:	2b00      	cmp	r3, #0
 8009992:	d0f0      	beq.n	8009976 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009994:	7bfb      	ldrb	r3, [r7, #15]
}
 8009996:	4618      	mov	r0, r3
 8009998:	3710      	adds	r7, #16
 800999a:	46bd      	mov	sp, r7
 800999c:	bd80      	pop	{r7, pc}
 800999e:	bf00      	nop
 80099a0:	58024400 	.word	0x58024400
 80099a4:	ffff0007 	.word	0xffff0007

080099a8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b084      	sub	sp, #16
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
 80099b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80099b2:	2300      	movs	r3, #0
 80099b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80099b6:	4b53      	ldr	r3, [pc, #332]	; (8009b04 <RCCEx_PLL3_Config+0x15c>)
 80099b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099ba:	f003 0303 	and.w	r3, r3, #3
 80099be:	2b03      	cmp	r3, #3
 80099c0:	d101      	bne.n	80099c6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80099c2:	2301      	movs	r3, #1
 80099c4:	e099      	b.n	8009afa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80099c6:	4b4f      	ldr	r3, [pc, #316]	; (8009b04 <RCCEx_PLL3_Config+0x15c>)
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	4a4e      	ldr	r2, [pc, #312]	; (8009b04 <RCCEx_PLL3_Config+0x15c>)
 80099cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80099d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80099d2:	f7f8 f877 	bl	8001ac4 <HAL_GetTick>
 80099d6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80099d8:	e008      	b.n	80099ec <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80099da:	f7f8 f873 	bl	8001ac4 <HAL_GetTick>
 80099de:	4602      	mov	r2, r0
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	1ad3      	subs	r3, r2, r3
 80099e4:	2b02      	cmp	r3, #2
 80099e6:	d901      	bls.n	80099ec <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80099e8:	2303      	movs	r3, #3
 80099ea:	e086      	b.n	8009afa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80099ec:	4b45      	ldr	r3, [pc, #276]	; (8009b04 <RCCEx_PLL3_Config+0x15c>)
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d1f0      	bne.n	80099da <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80099f8:	4b42      	ldr	r3, [pc, #264]	; (8009b04 <RCCEx_PLL3_Config+0x15c>)
 80099fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099fc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	051b      	lsls	r3, r3, #20
 8009a06:	493f      	ldr	r1, [pc, #252]	; (8009b04 <RCCEx_PLL3_Config+0x15c>)
 8009a08:	4313      	orrs	r3, r2
 8009a0a:	628b      	str	r3, [r1, #40]	; 0x28
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	685b      	ldr	r3, [r3, #4]
 8009a10:	3b01      	subs	r3, #1
 8009a12:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	689b      	ldr	r3, [r3, #8]
 8009a1a:	3b01      	subs	r3, #1
 8009a1c:	025b      	lsls	r3, r3, #9
 8009a1e:	b29b      	uxth	r3, r3
 8009a20:	431a      	orrs	r2, r3
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	68db      	ldr	r3, [r3, #12]
 8009a26:	3b01      	subs	r3, #1
 8009a28:	041b      	lsls	r3, r3, #16
 8009a2a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009a2e:	431a      	orrs	r2, r3
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	691b      	ldr	r3, [r3, #16]
 8009a34:	3b01      	subs	r3, #1
 8009a36:	061b      	lsls	r3, r3, #24
 8009a38:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009a3c:	4931      	ldr	r1, [pc, #196]	; (8009b04 <RCCEx_PLL3_Config+0x15c>)
 8009a3e:	4313      	orrs	r3, r2
 8009a40:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009a42:	4b30      	ldr	r3, [pc, #192]	; (8009b04 <RCCEx_PLL3_Config+0x15c>)
 8009a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a46:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	695b      	ldr	r3, [r3, #20]
 8009a4e:	492d      	ldr	r1, [pc, #180]	; (8009b04 <RCCEx_PLL3_Config+0x15c>)
 8009a50:	4313      	orrs	r3, r2
 8009a52:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009a54:	4b2b      	ldr	r3, [pc, #172]	; (8009b04 <RCCEx_PLL3_Config+0x15c>)
 8009a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a58:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	699b      	ldr	r3, [r3, #24]
 8009a60:	4928      	ldr	r1, [pc, #160]	; (8009b04 <RCCEx_PLL3_Config+0x15c>)
 8009a62:	4313      	orrs	r3, r2
 8009a64:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009a66:	4b27      	ldr	r3, [pc, #156]	; (8009b04 <RCCEx_PLL3_Config+0x15c>)
 8009a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a6a:	4a26      	ldr	r2, [pc, #152]	; (8009b04 <RCCEx_PLL3_Config+0x15c>)
 8009a6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a70:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009a72:	4b24      	ldr	r3, [pc, #144]	; (8009b04 <RCCEx_PLL3_Config+0x15c>)
 8009a74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009a76:	4b24      	ldr	r3, [pc, #144]	; (8009b08 <RCCEx_PLL3_Config+0x160>)
 8009a78:	4013      	ands	r3, r2
 8009a7a:	687a      	ldr	r2, [r7, #4]
 8009a7c:	69d2      	ldr	r2, [r2, #28]
 8009a7e:	00d2      	lsls	r2, r2, #3
 8009a80:	4920      	ldr	r1, [pc, #128]	; (8009b04 <RCCEx_PLL3_Config+0x15c>)
 8009a82:	4313      	orrs	r3, r2
 8009a84:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009a86:	4b1f      	ldr	r3, [pc, #124]	; (8009b04 <RCCEx_PLL3_Config+0x15c>)
 8009a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a8a:	4a1e      	ldr	r2, [pc, #120]	; (8009b04 <RCCEx_PLL3_Config+0x15c>)
 8009a8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009a90:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d106      	bne.n	8009aa6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009a98:	4b1a      	ldr	r3, [pc, #104]	; (8009b04 <RCCEx_PLL3_Config+0x15c>)
 8009a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a9c:	4a19      	ldr	r2, [pc, #100]	; (8009b04 <RCCEx_PLL3_Config+0x15c>)
 8009a9e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009aa2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009aa4:	e00f      	b.n	8009ac6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	2b01      	cmp	r3, #1
 8009aaa:	d106      	bne.n	8009aba <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009aac:	4b15      	ldr	r3, [pc, #84]	; (8009b04 <RCCEx_PLL3_Config+0x15c>)
 8009aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ab0:	4a14      	ldr	r2, [pc, #80]	; (8009b04 <RCCEx_PLL3_Config+0x15c>)
 8009ab2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009ab6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009ab8:	e005      	b.n	8009ac6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009aba:	4b12      	ldr	r3, [pc, #72]	; (8009b04 <RCCEx_PLL3_Config+0x15c>)
 8009abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009abe:	4a11      	ldr	r2, [pc, #68]	; (8009b04 <RCCEx_PLL3_Config+0x15c>)
 8009ac0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009ac4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009ac6:	4b0f      	ldr	r3, [pc, #60]	; (8009b04 <RCCEx_PLL3_Config+0x15c>)
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	4a0e      	ldr	r2, [pc, #56]	; (8009b04 <RCCEx_PLL3_Config+0x15c>)
 8009acc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ad0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009ad2:	f7f7 fff7 	bl	8001ac4 <HAL_GetTick>
 8009ad6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009ad8:	e008      	b.n	8009aec <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009ada:	f7f7 fff3 	bl	8001ac4 <HAL_GetTick>
 8009ade:	4602      	mov	r2, r0
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	1ad3      	subs	r3, r2, r3
 8009ae4:	2b02      	cmp	r3, #2
 8009ae6:	d901      	bls.n	8009aec <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009ae8:	2303      	movs	r3, #3
 8009aea:	e006      	b.n	8009afa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009aec:	4b05      	ldr	r3, [pc, #20]	; (8009b04 <RCCEx_PLL3_Config+0x15c>)
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d0f0      	beq.n	8009ada <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009afa:	4618      	mov	r0, r3
 8009afc:	3710      	adds	r7, #16
 8009afe:	46bd      	mov	sp, r7
 8009b00:	bd80      	pop	{r7, pc}
 8009b02:	bf00      	nop
 8009b04:	58024400 	.word	0x58024400
 8009b08:	ffff0007 	.word	0xffff0007

08009b0c <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b086      	sub	sp, #24
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	60f8      	str	r0, [r7, #12]
 8009b14:	60b9      	str	r1, [r7, #8]
 8009b16:	607a      	str	r2, [r7, #4]
 8009b18:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8009b1a:	68bb      	ldr	r3, [r7, #8]
 8009b1c:	2b02      	cmp	r3, #2
 8009b1e:	d904      	bls.n	8009b2a <HAL_SAI_InitProtocol+0x1e>
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	3b03      	subs	r3, #3
 8009b24:	2b01      	cmp	r3, #1
 8009b26:	d812      	bhi.n	8009b4e <HAL_SAI_InitProtocol+0x42>
 8009b28:	e008      	b.n	8009b3c <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	687a      	ldr	r2, [r7, #4]
 8009b2e:	68b9      	ldr	r1, [r7, #8]
 8009b30:	68f8      	ldr	r0, [r7, #12]
 8009b32:	f000 fb49 	bl	800a1c8 <SAI_InitI2S>
 8009b36:	4603      	mov	r3, r0
 8009b38:	75fb      	strb	r3, [r7, #23]
      break;
 8009b3a:	e00b      	b.n	8009b54 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	687a      	ldr	r2, [r7, #4]
 8009b40:	68b9      	ldr	r1, [r7, #8]
 8009b42:	68f8      	ldr	r0, [r7, #12]
 8009b44:	f000 fbf2 	bl	800a32c <SAI_InitPCM>
 8009b48:	4603      	mov	r3, r0
 8009b4a:	75fb      	strb	r3, [r7, #23]
      break;
 8009b4c:	e002      	b.n	8009b54 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 8009b4e:	2301      	movs	r3, #1
 8009b50:	75fb      	strb	r3, [r7, #23]
      break;
 8009b52:	bf00      	nop
  }

  if (status == HAL_OK)
 8009b54:	7dfb      	ldrb	r3, [r7, #23]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d104      	bne.n	8009b64 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 8009b5a:	68f8      	ldr	r0, [r7, #12]
 8009b5c:	f000 f808 	bl	8009b70 <HAL_SAI_Init>
 8009b60:	4603      	mov	r3, r0
 8009b62:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8009b64:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	3718      	adds	r7, #24
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}
	...

08009b70 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b08a      	sub	sp, #40	; 0x28
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d101      	bne.n	8009b82 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8009b7e:	2301      	movs	r3, #1
 8009b80:	e1fb      	b.n	8009f7a <HAL_SAI_Init+0x40a>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009b88:	2b01      	cmp	r3, #1
 8009b8a:	d113      	bne.n	8009bb4 <HAL_SAI_Init+0x44>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	4a96      	ldr	r2, [pc, #600]	; (8009dec <HAL_SAI_Init+0x27c>)
 8009b92:	4293      	cmp	r3, r2
 8009b94:	d004      	beq.n	8009ba0 <HAL_SAI_Init+0x30>
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	4a95      	ldr	r2, [pc, #596]	; (8009df0 <HAL_SAI_Init+0x280>)
 8009b9c:	4293      	cmp	r3, r2
 8009b9e:	d107      	bne.n	8009bb0 <HAL_SAI_Init+0x40>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8009ba4:	2b01      	cmp	r3, #1
 8009ba6:	d103      	bne.n	8009bb0 <HAL_SAI_Init+0x40>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d001      	beq.n	8009bb4 <HAL_SAI_Init+0x44>
    {
      return HAL_ERROR;
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	e1e2      	b.n	8009f7a <HAL_SAI_Init+0x40a>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	4a8c      	ldr	r2, [pc, #560]	; (8009dec <HAL_SAI_Init+0x27c>)
 8009bba:	4293      	cmp	r3, r2
 8009bbc:	d004      	beq.n	8009bc8 <HAL_SAI_Init+0x58>
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	4a8c      	ldr	r2, [pc, #560]	; (8009df4 <HAL_SAI_Init+0x284>)
 8009bc4:	4293      	cmp	r3, r2
 8009bc6:	d102      	bne.n	8009bce <HAL_SAI_Init+0x5e>
  {
    SaiBaseAddress = SAI1;
 8009bc8:	4b8b      	ldr	r3, [pc, #556]	; (8009df8 <HAL_SAI_Init+0x288>)
 8009bca:	61bb      	str	r3, [r7, #24]
 8009bcc:	e00e      	b.n	8009bec <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI3;
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	4a87      	ldr	r2, [pc, #540]	; (8009df0 <HAL_SAI_Init+0x280>)
 8009bd4:	4293      	cmp	r3, r2
 8009bd6:	d004      	beq.n	8009be2 <HAL_SAI_Init+0x72>
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	4a87      	ldr	r2, [pc, #540]	; (8009dfc <HAL_SAI_Init+0x28c>)
 8009bde:	4293      	cmp	r3, r2
 8009be0:	d102      	bne.n	8009be8 <HAL_SAI_Init+0x78>
  {
    SaiBaseAddress = SAI4;
 8009be2:	4b87      	ldr	r3, [pc, #540]	; (8009e00 <HAL_SAI_Init+0x290>)
 8009be4:	61bb      	str	r3, [r7, #24]
 8009be6:	e001      	b.n	8009bec <HAL_SAI_Init+0x7c>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8009be8:	2301      	movs	r3, #1
 8009bea:	e1c6      	b.n	8009f7a <HAL_SAI_Init+0x40a>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8009bf2:	b2db      	uxtb	r3, r3
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d106      	bne.n	8009c06 <HAL_SAI_Init+0x96>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8009c00:	6878      	ldr	r0, [r7, #4]
 8009c02:	f001 f9ad 	bl	800af60 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f000 fc4a 	bl	800a4a0 <SAI_Disable>
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d001      	beq.n	8009c16 <HAL_SAI_Init+0xa6>
  {
    return HAL_ERROR;
 8009c12:	2301      	movs	r3, #1
 8009c14:	e1b1      	b.n	8009f7a <HAL_SAI_Init+0x40a>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2202      	movs	r2, #2
 8009c1a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	68db      	ldr	r3, [r3, #12]
 8009c22:	2b02      	cmp	r3, #2
 8009c24:	d00c      	beq.n	8009c40 <HAL_SAI_Init+0xd0>
 8009c26:	2b02      	cmp	r3, #2
 8009c28:	d80d      	bhi.n	8009c46 <HAL_SAI_Init+0xd6>
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d002      	beq.n	8009c34 <HAL_SAI_Init+0xc4>
 8009c2e:	2b01      	cmp	r3, #1
 8009c30:	d003      	beq.n	8009c3a <HAL_SAI_Init+0xca>
 8009c32:	e008      	b.n	8009c46 <HAL_SAI_Init+0xd6>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8009c34:	2300      	movs	r3, #0
 8009c36:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009c38:	e008      	b.n	8009c4c <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8009c3a:	2310      	movs	r3, #16
 8009c3c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009c3e:	e005      	b.n	8009c4c <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8009c40:	2320      	movs	r3, #32
 8009c42:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009c44:	e002      	b.n	8009c4c <HAL_SAI_Init+0xdc>
    default:
      tmpregisterGCR = 0;
 8009c46:	2300      	movs	r3, #0
 8009c48:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009c4a:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	689b      	ldr	r3, [r3, #8]
 8009c50:	2b05      	cmp	r3, #5
 8009c52:	d822      	bhi.n	8009c9a <HAL_SAI_Init+0x12a>
 8009c54:	a201      	add	r2, pc, #4	; (adr r2, 8009c5c <HAL_SAI_Init+0xec>)
 8009c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c5a:	bf00      	nop
 8009c5c:	08009c75 	.word	0x08009c75
 8009c60:	08009c7b 	.word	0x08009c7b
 8009c64:	08009c83 	.word	0x08009c83
 8009c68:	08009c9b 	.word	0x08009c9b
 8009c6c:	08009c9b 	.word	0x08009c9b
 8009c70:	08009c8b 	.word	0x08009c8b
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8009c74:	2300      	movs	r3, #0
 8009c76:	61fb      	str	r3, [r7, #28]
      break;
 8009c78:	e012      	b.n	8009ca0 <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8009c7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c7e:	61fb      	str	r3, [r7, #28]
      break;
 8009c80:	e00e      	b.n	8009ca0 <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009c82:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009c86:	61fb      	str	r3, [r7, #28]
      break;
 8009c88:	e00a      	b.n	8009ca0 <HAL_SAI_Init+0x130>
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
      break;
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009c8a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009c8e:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8009c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c92:	f043 0303 	orr.w	r3, r3, #3
 8009c96:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009c98:	e002      	b.n	8009ca0 <HAL_SAI_Init+0x130>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	61fb      	str	r3, [r7, #28]
      break;
 8009c9e:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 8009ca0:	69bb      	ldr	r3, [r7, #24]
 8009ca2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ca4:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	6a1b      	ldr	r3, [r3, #32]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	f000 8084 	beq.w	8009db8 <HAL_SAI_Init+0x248>
  {
    uint32_t freq = 0;
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	4a4c      	ldr	r2, [pc, #304]	; (8009dec <HAL_SAI_Init+0x27c>)
 8009cba:	4293      	cmp	r3, r2
 8009cbc:	d004      	beq.n	8009cc8 <HAL_SAI_Init+0x158>
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	4a4c      	ldr	r2, [pc, #304]	; (8009df4 <HAL_SAI_Init+0x284>)
 8009cc4:	4293      	cmp	r3, r2
 8009cc6:	d104      	bne.n	8009cd2 <HAL_SAI_Init+0x162>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8009cc8:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009ccc:	f7fe fd86 	bl	80087dc <HAL_RCCEx_GetPeriphCLKFreq>
 8009cd0:	6178      	str	r0, [r7, #20]
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	4a46      	ldr	r2, [pc, #280]	; (8009df0 <HAL_SAI_Init+0x280>)
 8009cd8:	4293      	cmp	r3, r2
 8009cda:	d104      	bne.n	8009ce6 <HAL_SAI_Init+0x176>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8009cdc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8009ce0:	f7fe fd7c 	bl	80087dc <HAL_RCCEx_GetPeriphCLKFreq>
 8009ce4:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	4a44      	ldr	r2, [pc, #272]	; (8009dfc <HAL_SAI_Init+0x28c>)
 8009cec:	4293      	cmp	r3, r2
 8009cee:	d104      	bne.n	8009cfa <HAL_SAI_Init+0x18a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8009cf0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8009cf4:	f7fe fd72 	bl	80087dc <HAL_RCCEx_GetPeriphCLKFreq>
 8009cf8:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	699b      	ldr	r3, [r3, #24]
 8009cfe:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009d02:	d120      	bne.n	8009d46 <HAL_SAI_Init+0x1d6>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d08:	2b04      	cmp	r3, #4
 8009d0a:	d102      	bne.n	8009d12 <HAL_SAI_Init+0x1a2>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 8009d0c:	2340      	movs	r3, #64	; 0x40
 8009d0e:	60fb      	str	r3, [r7, #12]
 8009d10:	e00a      	b.n	8009d28 <HAL_SAI_Init+0x1b8>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d16:	2b08      	cmp	r3, #8
 8009d18:	d103      	bne.n	8009d22 <HAL_SAI_Init+0x1b2>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 8009d1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d1e:	60fb      	str	r3, [r7, #12]
 8009d20:	e002      	b.n	8009d28 <HAL_SAI_Init+0x1b8>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d26:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8009d28:	697a      	ldr	r2, [r7, #20]
 8009d2a:	4613      	mov	r3, r2
 8009d2c:	009b      	lsls	r3, r3, #2
 8009d2e:	4413      	add	r3, r2
 8009d30:	005b      	lsls	r3, r3, #1
 8009d32:	4619      	mov	r1, r3
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	6a1b      	ldr	r3, [r3, #32]
 8009d38:	68fa      	ldr	r2, [r7, #12]
 8009d3a:	fb02 f303 	mul.w	r3, r2, r3
 8009d3e:	fbb1 f3f3 	udiv	r3, r1, r3
 8009d42:	613b      	str	r3, [r7, #16]
 8009d44:	e017      	b.n	8009d76 <HAL_SAI_Init+0x206>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d4a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009d4e:	d101      	bne.n	8009d54 <HAL_SAI_Init+0x1e4>
 8009d50:	2302      	movs	r3, #2
 8009d52:	e000      	b.n	8009d56 <HAL_SAI_Init+0x1e6>
 8009d54:	2301      	movs	r3, #1
 8009d56:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8009d58:	697a      	ldr	r2, [r7, #20]
 8009d5a:	4613      	mov	r3, r2
 8009d5c:	009b      	lsls	r3, r3, #2
 8009d5e:	4413      	add	r3, r2
 8009d60:	005b      	lsls	r3, r3, #1
 8009d62:	4619      	mov	r1, r3
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	6a1b      	ldr	r3, [r3, #32]
 8009d68:	68ba      	ldr	r2, [r7, #8]
 8009d6a:	fb02 f303 	mul.w	r3, r2, r3
 8009d6e:	021b      	lsls	r3, r3, #8
 8009d70:	fbb1 f3f3 	udiv	r3, r1, r3
 8009d74:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8009d76:	693b      	ldr	r3, [r7, #16]
 8009d78:	4a22      	ldr	r2, [pc, #136]	; (8009e04 <HAL_SAI_Init+0x294>)
 8009d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8009d7e:	08da      	lsrs	r2, r3, #3
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8009d84:	6939      	ldr	r1, [r7, #16]
 8009d86:	4b1f      	ldr	r3, [pc, #124]	; (8009e04 <HAL_SAI_Init+0x294>)
 8009d88:	fba3 2301 	umull	r2, r3, r3, r1
 8009d8c:	08da      	lsrs	r2, r3, #3
 8009d8e:	4613      	mov	r3, r2
 8009d90:	009b      	lsls	r3, r3, #2
 8009d92:	4413      	add	r3, r2
 8009d94:	005b      	lsls	r3, r3, #1
 8009d96:	1aca      	subs	r2, r1, r3
 8009d98:	2a08      	cmp	r2, #8
 8009d9a:	d904      	bls.n	8009da6 <HAL_SAI_Init+0x236>
    {
      hsai->Init.Mckdiv += 1U;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009da0:	1c5a      	adds	r2, r3, #1
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009daa:	2b04      	cmp	r3, #4
 8009dac:	d104      	bne.n	8009db8 <HAL_SAI_Init+0x248>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009db2:	085a      	lsrs	r2, r3, #1
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	685b      	ldr	r3, [r3, #4]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d003      	beq.n	8009dc8 <HAL_SAI_Init+0x258>
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	685b      	ldr	r3, [r3, #4]
 8009dc4:	2b02      	cmp	r3, #2
 8009dc6:	d109      	bne.n	8009ddc <HAL_SAI_Init+0x26c>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009dcc:	2b01      	cmp	r3, #1
 8009dce:	d101      	bne.n	8009dd4 <HAL_SAI_Init+0x264>
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	e001      	b.n	8009dd8 <HAL_SAI_Init+0x268>
 8009dd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009dd8:	623b      	str	r3, [r7, #32]
 8009dda:	e017      	b.n	8009e0c <HAL_SAI_Init+0x29c>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009de0:	2b01      	cmp	r3, #1
 8009de2:	d111      	bne.n	8009e08 <HAL_SAI_Init+0x298>
 8009de4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009de8:	e00f      	b.n	8009e0a <HAL_SAI_Init+0x29a>
 8009dea:	bf00      	nop
 8009dec:	40015804 	.word	0x40015804
 8009df0:	58005404 	.word	0x58005404
 8009df4:	40015824 	.word	0x40015824
 8009df8:	40015800 	.word	0x40015800
 8009dfc:	58005424 	.word	0x58005424
 8009e00:	58005400 	.word	0x58005400
 8009e04:	cccccccd 	.word	0xcccccccd
 8009e08:	2300      	movs	r3, #0
 8009e0a:	623b      	str	r3, [r7, #32]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                            hsai->Init.MckOverSampling);
  }
#else /* SAI_VER_V2_1*/
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	6819      	ldr	r1, [r3, #0]
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681a      	ldr	r2, [r3, #0]
 8009e16:	4b5b      	ldr	r3, [pc, #364]	; (8009f84 <HAL_SAI_Init+0x414>)
 8009e18:	400b      	ands	r3, r1
 8009e1a:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	6819      	ldr	r1, [r3, #0]
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	685a      	ldr	r2, [r3, #4]
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e2a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009e30:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e36:	431a      	orrs	r2, r3
 8009e38:	6a3b      	ldr	r3, [r7, #32]
 8009e3a:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8009e3c:	69fb      	ldr	r3, [r7, #28]
 8009e3e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                          ckstr_bits | syncen_bits |                             \
 8009e44:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	695b      	ldr	r3, [r3, #20]
 8009e4a:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009e50:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e56:	051b      	lsls	r3, r3, #20
 8009e58:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009e5e:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	691b      	ldr	r3, [r3, #16]
 8009e64:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	430a      	orrs	r2, r1
 8009e6c:	601a      	str	r2, [r3, #0]
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	6859      	ldr	r1, [r3, #4]
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681a      	ldr	r2, [r3, #0]
 8009e78:	4b43      	ldr	r3, [pc, #268]	; (8009f88 <HAL_SAI_Init+0x418>)
 8009e7a:	400b      	ands	r3, r1
 8009e7c:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	6859      	ldr	r1, [r3, #4]
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	69da      	ldr	r2, [r3, #28]
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e8c:	431a      	orrs	r2, r3
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e92:	431a      	orrs	r2, r3
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	430a      	orrs	r2, r1
 8009e9a:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	6899      	ldr	r1, [r3, #8]
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681a      	ldr	r2, [r3, #0]
 8009ea6:	4b39      	ldr	r3, [pc, #228]	; (8009f8c <HAL_SAI_Init+0x41c>)
 8009ea8:	400b      	ands	r3, r1
 8009eaa:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	6899      	ldr	r1, [r3, #8]
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009eb6:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8009ebc:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 8009ec2:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 8009ec8:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ece:	3b01      	subs	r3, #1
 8009ed0:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8009ed2:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	430a      	orrs	r2, r1
 8009eda:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	68d9      	ldr	r1, [r3, #12]
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681a      	ldr	r2, [r3, #0]
 8009ee6:	f24f 0320 	movw	r3, #61472	; 0xf020
 8009eea:	400b      	ands	r3, r1
 8009eec:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	68d9      	ldr	r1, [r3, #12]
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009efc:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f02:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8009f04:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f0a:	3b01      	subs	r3, #1
 8009f0c:	021b      	lsls	r3, r3, #8
 8009f0e:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	430a      	orrs	r2, r1
 8009f16:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	4a1c      	ldr	r2, [pc, #112]	; (8009f90 <HAL_SAI_Init+0x420>)
 8009f1e:	4293      	cmp	r3, r2
 8009f20:	d004      	beq.n	8009f2c <HAL_SAI_Init+0x3bc>
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	4a1b      	ldr	r2, [pc, #108]	; (8009f94 <HAL_SAI_Init+0x424>)
 8009f28:	4293      	cmp	r3, r2
 8009f2a:	d119      	bne.n	8009f60 <HAL_SAI_Init+0x3f0>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8009f2c:	69bb      	ldr	r3, [r7, #24]
 8009f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f30:	f023 0201 	bic.w	r2, r3, #1
 8009f34:	69bb      	ldr	r3, [r7, #24]
 8009f36:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009f3e:	2b01      	cmp	r3, #1
 8009f40:	d10e      	bne.n	8009f60 <HAL_SAI_Init+0x3f0>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f4a:	3b01      	subs	r3, #1
 8009f4c:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8009f4e:	431a      	orrs	r2, r3
 8009f50:	69bb      	ldr	r3, [r7, #24]
 8009f52:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 8009f54:	69bb      	ldr	r3, [r7, #24]
 8009f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f58:	f043 0201 	orr.w	r2, r3, #1
 8009f5c:	69bb      	ldr	r3, [r7, #24]
 8009f5e:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2200      	movs	r2, #0
 8009f64:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2201      	movs	r2, #1
 8009f6c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2200      	movs	r2, #0
 8009f74:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 8009f78:	2300      	movs	r3, #0
}
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	3728      	adds	r7, #40	; 0x28
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd80      	pop	{r7, pc}
 8009f82:	bf00      	nop
 8009f84:	f005c010 	.word	0xf005c010
 8009f88:	ffff1ff0 	.word	0xffff1ff0
 8009f8c:	fff88000 	.word	0xfff88000
 8009f90:	40015804 	.word	0x40015804
 8009f94:	58005404 	.word	0x58005404

08009f98 <HAL_SAI_DeInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DeInit(SAI_HandleTypeDef *hsai)
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b084      	sub	sp, #16
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d101      	bne.n	8009faa <HAL_SAI_DeInit+0x12>
  {
    return HAL_ERROR;
 8009fa6:	2301      	movs	r3, #1
 8009fa8:	e050      	b.n	800a04c <HAL_SAI_DeInit+0xb4>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2202      	movs	r2, #2
 8009fae:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009fc2:	619a      	str	r2, [r3, #24]

  /* Disable the SAI */
  if (SAI_Disable(hsai) != HAL_OK)
 8009fc4:	6878      	ldr	r0, [r7, #4]
 8009fc6:	f000 fa6b 	bl	800a4a0 <SAI_Disable>
 8009fca:	4603      	mov	r3, r0
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d009      	beq.n	8009fe4 <HAL_SAI_DeInit+0x4c>
  {
    /* Reset SAI state to ready */
    hsai->State = HAL_SAI_STATE_READY;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2201      	movs	r2, #1
 8009fd4:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Release Lock */
    __HAL_UNLOCK(hsai);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2200      	movs	r2, #0
 8009fdc:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_ERROR;
 8009fe0:	2301      	movs	r3, #1
 8009fe2:	e033      	b.n	800a04c <HAL_SAI_DeInit+0xb4>
  }

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	685a      	ldr	r2, [r3, #4]
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f042 0208 	orr.w	r2, r2, #8
 8009ff2:	605a      	str	r2, [r3, #4]

  /* Disable SAI PDM interface */
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	4a16      	ldr	r2, [pc, #88]	; (800a054 <HAL_SAI_DeInit+0xbc>)
 8009ffa:	4293      	cmp	r3, r2
 8009ffc:	d004      	beq.n	800a008 <HAL_SAI_DeInit+0x70>
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	4a15      	ldr	r2, [pc, #84]	; (800a058 <HAL_SAI_DeInit+0xc0>)
 800a004:	4293      	cmp	r3, r2
 800a006:	d111      	bne.n	800a02c <HAL_SAI_DeInit+0x94>
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Get the SAI base address according to the SAI handle */
#if defined(SAI4)
    SaiBaseAddress = (hsai->Instance == SAI1_Block_A) ? SAI1 : SAI4;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	4a11      	ldr	r2, [pc, #68]	; (800a054 <HAL_SAI_DeInit+0xbc>)
 800a00e:	4293      	cmp	r3, r2
 800a010:	d101      	bne.n	800a016 <HAL_SAI_DeInit+0x7e>
 800a012:	4b12      	ldr	r3, [pc, #72]	; (800a05c <HAL_SAI_DeInit+0xc4>)
 800a014:	e000      	b.n	800a018 <HAL_SAI_DeInit+0x80>
 800a016:	4b12      	ldr	r3, [pc, #72]	; (800a060 <HAL_SAI_DeInit+0xc8>)
 800a018:	60fb      	str	r3, [r7, #12]
#else
    SaiBaseAddress = SAI1;
#endif /* SAI4 */

    /* Reset PDM delays */
    SaiBaseAddress->PDMDLY = 0U;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	2200      	movs	r2, #0
 800a01e:	649a      	str	r2, [r3, #72]	; 0x48

    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a024:	f023 0201 	bic.w	r2, r3, #1
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	645a      	str	r2, [r3, #68]	; 0x44
  {
    hsai->MspDeInitCallback = HAL_SAI_MspDeInit;
  }
  hsai->MspDeInitCallback(hsai);
#else
  HAL_SAI_MspDeInit(hsai);
 800a02c:	6878      	ldr	r0, [r7, #4]
 800a02e:	f001 f911 	bl	800b254 <HAL_SAI_MspDeInit>
#endif

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2200      	movs	r2, #0
 800a036:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_RESET;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	2200      	movs	r2, #0
 800a03e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	2200      	movs	r2, #0
 800a046:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 800a04a:	2300      	movs	r3, #0
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	3710      	adds	r7, #16
 800a050:	46bd      	mov	sp, r7
 800a052:	bd80      	pop	{r7, pc}
 800a054:	40015804 	.word	0x40015804
 800a058:	58005404 	.word	0x58005404
 800a05c:	40015800 	.word	0x40015800
 800a060:	58005400 	.word	0x58005400

0800a064 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b084      	sub	sp, #16
 800a068:	af00      	add	r7, sp, #0
 800a06a:	60f8      	str	r0, [r7, #12]
 800a06c:	60b9      	str	r1, [r7, #8]
 800a06e:	4613      	mov	r3, r2
 800a070:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 800a072:	68bb      	ldr	r3, [r7, #8]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d002      	beq.n	800a07e <HAL_SAI_Receive_DMA+0x1a>
 800a078:	88fb      	ldrh	r3, [r7, #6]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d101      	bne.n	800a082 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800a07e:	2301      	movs	r3, #1
 800a080:	e079      	b.n	800a176 <HAL_SAI_Receive_DMA+0x112>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800a088:	b2db      	uxtb	r3, r3
 800a08a:	2b01      	cmp	r3, #1
 800a08c:	d172      	bne.n	800a174 <HAL_SAI_Receive_DMA+0x110>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800a094:	2b01      	cmp	r3, #1
 800a096:	d101      	bne.n	800a09c <HAL_SAI_Receive_DMA+0x38>
 800a098:	2302      	movs	r3, #2
 800a09a:	e06c      	b.n	800a176 <HAL_SAI_Receive_DMA+0x112>
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	2201      	movs	r2, #1
 800a0a0:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	68ba      	ldr	r2, [r7, #8]
 800a0a8:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	88fa      	ldrh	r2, [r7, #6]
 800a0ae:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	88fa      	ldrh	r2, [r7, #6]
 800a0b6:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	2200      	movs	r2, #0
 800a0be:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	2222      	movs	r2, #34	; 0x22
 800a0c6:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a0d0:	4a2b      	ldr	r2, [pc, #172]	; (800a180 <HAL_SAI_Receive_DMA+0x11c>)
 800a0d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a0da:	4a2a      	ldr	r2, [pc, #168]	; (800a184 <HAL_SAI_Receive_DMA+0x120>)
 800a0dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a0e4:	4a28      	ldr	r2, [pc, #160]	; (800a188 <HAL_SAI_Receive_DMA+0x124>)
 800a0e6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	331c      	adds	r3, #28
 800a0fe:	4619      	mov	r1, r3
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a104:	461a      	mov	r2, r3
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800a10c:	f7f8 fbf0 	bl	80028f0 <HAL_DMA_Start_IT>
 800a110:	4603      	mov	r3, r0
 800a112:	2b00      	cmp	r3, #0
 800a114:	d005      	beq.n	800a122 <HAL_SAI_Receive_DMA+0xbe>
    {
      __HAL_UNLOCK(hsai);
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	2200      	movs	r2, #0
 800a11a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 800a11e:	2301      	movs	r3, #1
 800a120:	e029      	b.n	800a176 <HAL_SAI_Receive_DMA+0x112>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800a122:	2100      	movs	r1, #0
 800a124:	68f8      	ldr	r0, [r7, #12]
 800a126:	f000 f983 	bl	800a430 <SAI_InterruptFlag>
 800a12a:	4601      	mov	r1, r0
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	691a      	ldr	r2, [r3, #16]
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	430a      	orrs	r2, r1
 800a138:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	681a      	ldr	r2, [r3, #0]
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800a148:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a154:	2b00      	cmp	r3, #0
 800a156:	d107      	bne.n	800a168 <HAL_SAI_Receive_DMA+0x104>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	681a      	ldr	r2, [r3, #0]
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800a166:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	2200      	movs	r2, #0
 800a16c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 800a170:	2300      	movs	r3, #0
 800a172:	e000      	b.n	800a176 <HAL_SAI_Receive_DMA+0x112>
  }
  else
  {
    return HAL_BUSY;
 800a174:	2302      	movs	r3, #2
  }
}
 800a176:	4618      	mov	r0, r3
 800a178:	3710      	adds	r7, #16
 800a17a:	46bd      	mov	sp, r7
 800a17c:	bd80      	pop	{r7, pc}
 800a17e:	bf00      	nop
 800a180:	0800a575 	.word	0x0800a575
 800a184:	0800a515 	.word	0x0800a515
 800a188:	0800a591 	.word	0x0800a591

0800a18c <HAL_SAI_RxCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 800a18c:	b480      	push	{r7}
 800a18e:	b083      	sub	sp, #12
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_RxCpltCallback could be implemented in the user file
   */
}
 800a194:	bf00      	nop
 800a196:	370c      	adds	r7, #12
 800a198:	46bd      	mov	sp, r7
 800a19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19e:	4770      	bx	lr

0800a1a0 <HAL_SAI_RxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 800a1a0:	b480      	push	{r7}
 800a1a2:	b083      	sub	sp, #12
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a1a8:	bf00      	nop
 800a1aa:	370c      	adds	r7, #12
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b2:	4770      	bx	lr

0800a1b4 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 800a1b4:	b480      	push	{r7}
 800a1b6:	b083      	sub	sp, #12
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 800a1bc:	bf00      	nop
 800a1be:	370c      	adds	r7, #12
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c6:	4770      	bx	lr

0800a1c8 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800a1c8:	b480      	push	{r7}
 800a1ca:	b087      	sub	sp, #28
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	60f8      	str	r0, [r7, #12]
 800a1d0:	60b9      	str	r1, [r7, #8]
 800a1d2:	607a      	str	r2, [r7, #4]
 800a1d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	2200      	movs	r2, #0
 800a1de:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	685b      	ldr	r3, [r3, #4]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d003      	beq.n	800a1f6 <SAI_InitI2S+0x2e>
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	685b      	ldr	r3, [r3, #4]
 800a1f2:	2b02      	cmp	r3, #2
 800a1f4:	d103      	bne.n	800a1fe <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	651a      	str	r2, [r3, #80]	; 0x50
 800a1fc:	e002      	b.n	800a204 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	2201      	movs	r2, #1
 800a202:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a20a:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a212:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	2200      	movs	r2, #0
 800a218:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	683a      	ldr	r2, [r7, #0]
 800a21e:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	f003 0301 	and.w	r3, r3, #1
 800a226:	2b00      	cmp	r3, #0
 800a228:	d001      	beq.n	800a22e <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800a22a:	2301      	movs	r3, #1
 800a22c:	e077      	b.n	800a31e <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800a22e:	68bb      	ldr	r3, [r7, #8]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d107      	bne.n	800a244 <SAI_InitI2S+0x7c>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	2200      	movs	r2, #0
 800a238:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800a240:	665a      	str	r2, [r3, #100]	; 0x64
 800a242:	e006      	b.n	800a252 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800a24a:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	2200      	movs	r2, #0
 800a250:	665a      	str	r2, [r3, #100]	; 0x64
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	2b03      	cmp	r3, #3
 800a256:	d84f      	bhi.n	800a2f8 <SAI_InitI2S+0x130>
 800a258:	a201      	add	r2, pc, #4	; (adr r2, 800a260 <SAI_InitI2S+0x98>)
 800a25a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a25e:	bf00      	nop
 800a260:	0800a271 	.word	0x0800a271
 800a264:	0800a293 	.word	0x0800a293
 800a268:	0800a2b5 	.word	0x0800a2b5
 800a26c:	0800a2d7 	.word	0x0800a2d7

  /* Frame definition */
  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	2280      	movs	r2, #128	; 0x80
 800a274:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	085b      	lsrs	r3, r3, #1
 800a27a:	015a      	lsls	r2, r3, #5
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	085b      	lsrs	r3, r3, #1
 800a284:	011a      	lsls	r2, r3, #4
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	2240      	movs	r2, #64	; 0x40
 800a28e:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800a290:	e035      	b.n	800a2fe <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	2280      	movs	r2, #128	; 0x80
 800a296:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	085b      	lsrs	r3, r3, #1
 800a29c:	019a      	lsls	r2, r3, #6
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	085b      	lsrs	r3, r3, #1
 800a2a6:	015a      	lsls	r2, r3, #5
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	2280      	movs	r2, #128	; 0x80
 800a2b0:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800a2b2:	e024      	b.n	800a2fe <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	22c0      	movs	r2, #192	; 0xc0
 800a2b8:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	085b      	lsrs	r3, r3, #1
 800a2be:	019a      	lsls	r2, r3, #6
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	085b      	lsrs	r3, r3, #1
 800a2c8:	015a      	lsls	r2, r3, #5
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	2280      	movs	r2, #128	; 0x80
 800a2d2:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800a2d4:	e013      	b.n	800a2fe <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	22e0      	movs	r2, #224	; 0xe0
 800a2da:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	085b      	lsrs	r3, r3, #1
 800a2e0:	019a      	lsls	r2, r3, #6
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	085b      	lsrs	r3, r3, #1
 800a2ea:	015a      	lsls	r2, r3, #5
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	2280      	movs	r2, #128	; 0x80
 800a2f4:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800a2f6:	e002      	b.n	800a2fe <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800a2f8:	2301      	movs	r3, #1
 800a2fa:	75fb      	strb	r3, [r7, #23]
      break;
 800a2fc:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800a2fe:	68bb      	ldr	r3, [r7, #8]
 800a300:	2b02      	cmp	r3, #2
 800a302:	d10b      	bne.n	800a31c <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2b01      	cmp	r3, #1
 800a308:	d102      	bne.n	800a310 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	2210      	movs	r2, #16
 800a30e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2b02      	cmp	r3, #2
 800a314:	d102      	bne.n	800a31c <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	2208      	movs	r2, #8
 800a31a:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
 800a31c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a31e:	4618      	mov	r0, r3
 800a320:	371c      	adds	r7, #28
 800a322:	46bd      	mov	sp, r7
 800a324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a328:	4770      	bx	lr
 800a32a:	bf00      	nop

0800a32c <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800a32c:	b480      	push	{r7}
 800a32e:	b087      	sub	sp, #28
 800a330:	af00      	add	r7, sp, #0
 800a332:	60f8      	str	r0, [r7, #12]
 800a334:	60b9      	str	r1, [r7, #8]
 800a336:	607a      	str	r2, [r7, #4]
 800a338:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a33a:	2300      	movs	r3, #0
 800a33c:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	2200      	movs	r2, #0
 800a342:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	2200      	movs	r2, #0
 800a348:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	685b      	ldr	r3, [r3, #4]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d003      	beq.n	800a35a <SAI_InitPCM+0x2e>
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	685b      	ldr	r3, [r3, #4]
 800a356:	2b02      	cmp	r3, #2
 800a358:	d103      	bne.n	800a362 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	2201      	movs	r2, #1
 800a35e:	651a      	str	r2, [r3, #80]	; 0x50
 800a360:	e002      	b.n	800a368 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	2200      	movs	r2, #0
 800a366:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	2200      	movs	r2, #0
 800a36c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800a374:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800a37c:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	2200      	movs	r2, #0
 800a382:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	683a      	ldr	r2, [r7, #0]
 800a388:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a390:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 800a392:	68bb      	ldr	r3, [r7, #8]
 800a394:	2b04      	cmp	r3, #4
 800a396:	d103      	bne.n	800a3a0 <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	2201      	movs	r2, #1
 800a39c:	659a      	str	r2, [r3, #88]	; 0x58
 800a39e:	e002      	b.n	800a3a6 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	220d      	movs	r2, #13
 800a3a4:	659a      	str	r2, [r3, #88]	; 0x58
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2b03      	cmp	r3, #3
 800a3aa:	d837      	bhi.n	800a41c <SAI_InitPCM+0xf0>
 800a3ac:	a201      	add	r2, pc, #4	; (adr r2, 800a3b4 <SAI_InitPCM+0x88>)
 800a3ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3b2:	bf00      	nop
 800a3b4:	0800a3c5 	.word	0x0800a3c5
 800a3b8:	0800a3db 	.word	0x0800a3db
 800a3bc:	0800a3f1 	.word	0x0800a3f1
 800a3c0:	0800a407 	.word	0x0800a407
  }

  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	2280      	movs	r2, #128	; 0x80
 800a3c8:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	011a      	lsls	r2, r3, #4
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	2240      	movs	r2, #64	; 0x40
 800a3d6:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800a3d8:	e023      	b.n	800a422 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	2280      	movs	r2, #128	; 0x80
 800a3de:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	015a      	lsls	r2, r3, #5
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	2280      	movs	r2, #128	; 0x80
 800a3ec:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800a3ee:	e018      	b.n	800a422 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	22c0      	movs	r2, #192	; 0xc0
 800a3f4:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	015a      	lsls	r2, r3, #5
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	2280      	movs	r2, #128	; 0x80
 800a402:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800a404:	e00d      	b.n	800a422 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	22e0      	movs	r2, #224	; 0xe0
 800a40a:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	015a      	lsls	r2, r3, #5
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	2280      	movs	r2, #128	; 0x80
 800a418:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800a41a:	e002      	b.n	800a422 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800a41c:	2301      	movs	r3, #1
 800a41e:	75fb      	strb	r3, [r7, #23]
      break;
 800a420:	bf00      	nop
  }

  return status;
 800a422:	7dfb      	ldrb	r3, [r7, #23]
}
 800a424:	4618      	mov	r0, r3
 800a426:	371c      	adds	r7, #28
 800a428:	46bd      	mov	sp, r7
 800a42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42e:	4770      	bx	lr

0800a430 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 800a430:	b480      	push	{r7}
 800a432:	b085      	sub	sp, #20
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
 800a438:	460b      	mov	r3, r1
 800a43a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800a43c:	2301      	movs	r3, #1
 800a43e:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800a440:	78fb      	ldrb	r3, [r7, #3]
 800a442:	2b01      	cmp	r3, #1
 800a444:	d103      	bne.n	800a44e <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	f043 0308 	orr.w	r3, r3, #8
 800a44c:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a452:	2b08      	cmp	r3, #8
 800a454:	d10b      	bne.n	800a46e <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800a45a:	2b03      	cmp	r3, #3
 800a45c:	d003      	beq.n	800a466 <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	685b      	ldr	r3, [r3, #4]
 800a462:	2b01      	cmp	r3, #1
 800a464:	d103      	bne.n	800a46e <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	f043 0310 	orr.w	r3, r3, #16
 800a46c:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	685b      	ldr	r3, [r3, #4]
 800a472:	2b03      	cmp	r3, #3
 800a474:	d003      	beq.n	800a47e <SAI_InterruptFlag+0x4e>
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	685b      	ldr	r3, [r3, #4]
 800a47a:	2b02      	cmp	r3, #2
 800a47c:	d104      	bne.n	800a488 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800a484:	60fb      	str	r3, [r7, #12]
 800a486:	e003      	b.n	800a490 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	f043 0304 	orr.w	r3, r3, #4
 800a48e:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800a490:	68fb      	ldr	r3, [r7, #12]
}
 800a492:	4618      	mov	r0, r3
 800a494:	3714      	adds	r7, #20
 800a496:	46bd      	mov	sp, r7
 800a498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49c:	4770      	bx	lr
	...

0800a4a0 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800a4a0:	b480      	push	{r7}
 800a4a2:	b085      	sub	sp, #20
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800a4a8:	4b18      	ldr	r3, [pc, #96]	; (800a50c <SAI_Disable+0x6c>)
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	4a18      	ldr	r2, [pc, #96]	; (800a510 <SAI_Disable+0x70>)
 800a4ae:	fba2 2303 	umull	r2, r3, r2, r3
 800a4b2:	0b1b      	lsrs	r3, r3, #12
 800a4b4:	009b      	lsls	r3, r3, #2
 800a4b6:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	681a      	ldr	r2, [r3, #0]
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a4ca:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d10a      	bne.n	800a4e8 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a4d8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 800a4e2:	2303      	movs	r3, #3
 800a4e4:	72fb      	strb	r3, [r7, #11]
      break;
 800a4e6:	e009      	b.n	800a4fc <SAI_Disable+0x5c>
    }
    count--;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	3b01      	subs	r3, #1
 800a4ec:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d1e7      	bne.n	800a4cc <SAI_Disable+0x2c>

  return status;
 800a4fc:	7afb      	ldrb	r3, [r7, #11]
}
 800a4fe:	4618      	mov	r0, r3
 800a500:	3714      	adds	r7, #20
 800a502:	46bd      	mov	sp, r7
 800a504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a508:	4770      	bx	lr
 800a50a:	bf00      	nop
 800a50c:	2400041c 	.word	0x2400041c
 800a510:	95cbec1b 	.word	0x95cbec1b

0800a514 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b084      	sub	sp, #16
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a520:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	69db      	ldr	r3, [r3, #28]
 800a526:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a52a:	d01c      	beq.n	800a566 <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	681a      	ldr	r2, [r3, #0]
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800a53a:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	2200      	movs	r2, #0
 800a540:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800a544:	2100      	movs	r1, #0
 800a546:	68f8      	ldr	r0, [r7, #12]
 800a548:	f7ff ff72 	bl	800a430 <SAI_InterruptFlag>
 800a54c:	4603      	mov	r3, r0
 800a54e:	43d9      	mvns	r1, r3
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	691a      	ldr	r2, [r3, #16]
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	400a      	ands	r2, r1
 800a55c:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	2201      	movs	r2, #1
 800a562:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800a566:	68f8      	ldr	r0, [r7, #12]
 800a568:	f7ff fe10 	bl	800a18c <HAL_SAI_RxCpltCallback>
#endif
}
 800a56c:	bf00      	nop
 800a56e:	3710      	adds	r7, #16
 800a570:	46bd      	mov	sp, r7
 800a572:	bd80      	pop	{r7, pc}

0800a574 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b084      	sub	sp, #16
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a580:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800a582:	68f8      	ldr	r0, [r7, #12]
 800a584:	f7ff fe0c 	bl	800a1a0 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 800a588:	bf00      	nop
 800a58a:	3710      	adds	r7, #16
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bd80      	pop	{r7, pc}

0800a590 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b084      	sub	sp, #16
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a59c:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800a59e:	6878      	ldr	r0, [r7, #4]
 800a5a0:	f7f9 fd8c 	bl	80040bc <HAL_DMA_GetError>
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	2b02      	cmp	r3, #2
 800a5a8:	d01d      	beq.n	800a5e6 <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a5b0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	681a      	ldr	r2, [r3, #0]
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800a5c8:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 800a5ca:	68f8      	ldr	r0, [r7, #12]
 800a5cc:	f7ff ff68 	bl	800a4a0 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	2201      	movs	r2, #1
 800a5d4:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	2200      	movs	r2, #0
 800a5dc:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 800a5e0:	68f8      	ldr	r0, [r7, #12]
 800a5e2:	f7ff fde7 	bl	800a1b4 <HAL_SAI_ErrorCallback>
#endif
  }
}
 800a5e6:	bf00      	nop
 800a5e8:	3710      	adds	r7, #16
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	bd80      	pop	{r7, pc}
	...

0800a5f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800a5f4:	f7f7 f9e0 	bl	80019b8 <HAL_Init>

  /* USER CODE BEGIN Init */
  BSP_LED_Init(LED1);
 800a5f8:	2000      	movs	r0, #0
 800a5fa:	f7f7 f943 	bl	8001884 <BSP_LED_Init>
  BSP_LED_Init(LED2);
 800a5fe:	2001      	movs	r0, #1
 800a600:	f7f7 f940 	bl	8001884 <BSP_LED_Init>
  BSP_LED_Off(LED1);
 800a604:	2000      	movs	r0, #0
 800a606:	f7f7 f9b9 	bl	800197c <BSP_LED_Off>
  BSP_LED_Off(LED2);
 800a60a:	2001      	movs	r0, #1
 800a60c:	f7f7 f9b6 	bl	800197c <BSP_LED_Off>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800a610:	f000 f84e 	bl	800a6b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800a614:	f000 fb10 	bl	800ac38 <MX_GPIO_Init>
  MX_BDMA_Init();
 800a618:	f000 fa24 	bl	800aa64 <MX_BDMA_Init>
  MX_SAI4_Init();
 800a61c:	f000 f9c4 	bl	800a9a8 <MX_SAI4_Init>
  MX_CRC_Init();
 800a620:	f000 f8d8 	bl	800a7d4 <MX_CRC_Init>
  MX_PDM2PCM_Init();
 800a624:	f000 fbc8 	bl	800adb8 <MX_PDM2PCM_Init>
  MX_DMA_Init();
 800a628:	f000 fa36 	bl	800aa98 <MX_DMA_Init>
  MX_SAI1_Init();
 800a62c:	f000 f986 	bl	800a93c <MX_SAI1_Init>
  MX_RAMECC_Init();
 800a630:	f000 f952 	bl	800a8d8 <MX_RAMECC_Init>
//  MX_I2C4_Init();

  /* Initialize interrupts */
  MX_NVIC_Init();
 800a634:	f000 f8aa 	bl	800a78c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  CODEC_Init();
 800a638:	f000 fb6a 	bl	800ad10 <CODEC_Init>


  HAL_SAI_MspInit(&hsai_BlockA4);
 800a63c:	4815      	ldr	r0, [pc, #84]	; (800a694 <main+0xa4>)
 800a63e:	f000 fc8f 	bl	800af60 <HAL_SAI_MspInit>
  HAL_SAI_Init(&hsai_BlockA4);
 800a642:	4814      	ldr	r0, [pc, #80]	; (800a694 <main+0xa4>)
 800a644:	f7ff fa94 	bl	8009b70 <HAL_SAI_Init>

  // need to move data from D3 into D2 (where SAI1 is)

  HAL_DMA_Start_IT(&hdma_memtomem_dma2_stream0, input_buffer, pdm_buffer, NUM_BYTES);
 800a648:	4b13      	ldr	r3, [pc, #76]	; (800a698 <main+0xa8>)
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	4619      	mov	r1, r3
 800a64e:	4b13      	ldr	r3, [pc, #76]	; (800a69c <main+0xac>)
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	461a      	mov	r2, r3
 800a654:	2320      	movs	r3, #32
 800a656:	4812      	ldr	r0, [pc, #72]	; (800a6a0 <main+0xb0>)
 800a658:	f7f8 f94a 	bl	80028f0 <HAL_DMA_Start_IT>
  if(HAL_SAI_Receive_DMA(&hsai_BlockA4, input_buffer, NUM_BYTES) == HAL_OK)
 800a65c:	4b0e      	ldr	r3, [pc, #56]	; (800a698 <main+0xa8>)
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	2220      	movs	r2, #32
 800a662:	4619      	mov	r1, r3
 800a664:	480b      	ldr	r0, [pc, #44]	; (800a694 <main+0xa4>)
 800a666:	f7ff fcfd 	bl	800a064 <HAL_SAI_Receive_DMA>
 800a66a:	4603      	mov	r3, r0
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d10f      	bne.n	800a690 <main+0xa0>
  {
	  HAL_SAI_DeInit(&hsai_BlockA4);
 800a670:	4808      	ldr	r0, [pc, #32]	; (800a694 <main+0xa4>)
 800a672:	f7ff fc91 	bl	8009f98 <HAL_SAI_DeInit>
	  HAL_SAI_MspInit(&hsai_BlockB1);
 800a676:	480b      	ldr	r0, [pc, #44]	; (800a6a4 <main+0xb4>)
 800a678:	f000 fc72 	bl	800af60 <HAL_SAI_MspInit>
	  PDM_Filter(pdm_buffer, pcm_buffer, &PDM1_filter_handler);
 800a67c:	4b07      	ldr	r3, [pc, #28]	; (800a69c <main+0xac>)
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	4a09      	ldr	r2, [pc, #36]	; (800a6a8 <main+0xb8>)
 800a682:	490a      	ldr	r1, [pc, #40]	; (800a6ac <main+0xbc>)
 800a684:	4618      	mov	r0, r3
 800a686:	f002 fe15 	bl	800d2b4 <PDM_Filter>
	  BSP_LED_On(LED2);
 800a68a:	2001      	movs	r0, #1
 800a68c:	f7f7 f958 	bl	8001940 <BSP_LED_On>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 800a690:	e7fe      	b.n	800a690 <main+0xa0>
 800a692:	bf00      	nop
 800a694:	2400073c 	.word	0x2400073c
 800a698:	24000414 	.word	0x24000414
 800a69c:	24000418 	.word	0x24000418
 800a6a0:	24000590 	.word	0x24000590
 800a6a4:	240006a4 	.word	0x240006a4
 800a6a8:	24000914 	.word	0x24000914
 800a6ac:	240004a8 	.word	0x240004a8

0800a6b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b09c      	sub	sp, #112	; 0x70
 800a6b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a6b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a6ba:	224c      	movs	r2, #76	; 0x4c
 800a6bc:	2100      	movs	r1, #0
 800a6be:	4618      	mov	r0, r3
 800a6c0:	f002 fe3c 	bl	800d33c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a6c4:	1d3b      	adds	r3, r7, #4
 800a6c6:	2220      	movs	r2, #32
 800a6c8:	2100      	movs	r1, #0
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	f002 fe36 	bl	800d33c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800a6d0:	2004      	movs	r0, #4
 800a6d2:	f7fc f9e5 	bl	8006aa0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	603b      	str	r3, [r7, #0]
 800a6da:	4b2b      	ldr	r3, [pc, #172]	; (800a788 <SystemClock_Config+0xd8>)
 800a6dc:	699b      	ldr	r3, [r3, #24]
 800a6de:	4a2a      	ldr	r2, [pc, #168]	; (800a788 <SystemClock_Config+0xd8>)
 800a6e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a6e4:	6193      	str	r3, [r2, #24]
 800a6e6:	4b28      	ldr	r3, [pc, #160]	; (800a788 <SystemClock_Config+0xd8>)
 800a6e8:	699b      	ldr	r3, [r3, #24]
 800a6ea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a6ee:	603b      	str	r3, [r7, #0]
 800a6f0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800a6f2:	bf00      	nop
 800a6f4:	4b24      	ldr	r3, [pc, #144]	; (800a788 <SystemClock_Config+0xd8>)
 800a6f6:	699b      	ldr	r3, [r3, #24]
 800a6f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a6fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a700:	d1f8      	bne.n	800a6f4 <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800a702:	2302      	movs	r3, #2
 800a704:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800a706:	2301      	movs	r3, #1
 800a708:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800a70a:	2340      	movs	r3, #64	; 0x40
 800a70c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a70e:	2302      	movs	r3, #2
 800a710:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800a712:	2300      	movs	r3, #0
 800a714:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800a716:	2304      	movs	r3, #4
 800a718:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 800a71a:	2318      	movs	r3, #24
 800a71c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800a71e:	2301      	movs	r3, #1
 800a720:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 125;
 800a722:	237d      	movs	r3, #125	; 0x7d
 800a724:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800a726:	2302      	movs	r3, #2
 800a728:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800a72a:	230c      	movs	r3, #12
 800a72c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800a72e:	2300      	movs	r3, #0
 800a730:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800a732:	2300      	movs	r3, #0
 800a734:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a736:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a73a:	4618      	mov	r0, r3
 800a73c:	f7fc fa48 	bl	8006bd0 <HAL_RCC_OscConfig>
 800a740:	4603      	mov	r3, r0
 800a742:	2b00      	cmp	r3, #0
 800a744:	d001      	beq.n	800a74a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800a746:	f000 fb31 	bl	800adac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a74a:	233f      	movs	r3, #63	; 0x3f
 800a74c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a74e:	2303      	movs	r3, #3
 800a750:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800a752:	2300      	movs	r3, #0
 800a754:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800a756:	2308      	movs	r3, #8
 800a758:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800a75a:	2340      	movs	r3, #64	; 0x40
 800a75c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800a75e:	2340      	movs	r3, #64	; 0x40
 800a760:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800a762:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a766:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800a768:	2340      	movs	r3, #64	; 0x40
 800a76a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800a76c:	1d3b      	adds	r3, r7, #4
 800a76e:	2102      	movs	r1, #2
 800a770:	4618      	mov	r0, r3
 800a772:	f7fc fdd9 	bl	8007328 <HAL_RCC_ClockConfig>
 800a776:	4603      	mov	r3, r0
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d001      	beq.n	800a780 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800a77c:	f000 fb16 	bl	800adac <Error_Handler>
  }
}
 800a780:	bf00      	nop
 800a782:	3770      	adds	r7, #112	; 0x70
 800a784:	46bd      	mov	sp, r7
 800a786:	bd80      	pop	{r7, pc}
 800a788:	58024800 	.word	0x58024800

0800a78c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	af00      	add	r7, sp, #0
  /* BDMA_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel1_IRQn, 0, 0);
 800a790:	2200      	movs	r2, #0
 800a792:	2100      	movs	r1, #0
 800a794:	2082      	movs	r0, #130	; 0x82
 800a796:	f7f7 fa7c 	bl	8001c92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel1_IRQn);
 800a79a:	2082      	movs	r0, #130	; 0x82
 800a79c:	f7f7 fa93 	bl	8001cc6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	2100      	movs	r1, #0
 800a7a4:	2038      	movs	r0, #56	; 0x38
 800a7a6:	f7f7 fa74 	bl	8001c92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800a7aa:	2038      	movs	r0, #56	; 0x38
 800a7ac:	f7f7 fa8b 	bl	8001cc6 <HAL_NVIC_EnableIRQ>
  /* EXTI0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	2100      	movs	r1, #0
 800a7b4:	2006      	movs	r0, #6
 800a7b6:	f7f7 fa6c 	bl	8001c92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800a7ba:	2006      	movs	r0, #6
 800a7bc:	f7f7 fa83 	bl	8001cc6 <HAL_NVIC_EnableIRQ>
  /* DMAMUX2_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX2_OVR_IRQn, 0, 0);
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	2100      	movs	r1, #0
 800a7c4:	2080      	movs	r0, #128	; 0x80
 800a7c6:	f7f7 fa64 	bl	8001c92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX2_OVR_IRQn);
 800a7ca:	2080      	movs	r0, #128	; 0x80
 800a7cc:	f7f7 fa7b 	bl	8001cc6 <HAL_NVIC_EnableIRQ>
}
 800a7d0:	bf00      	nop
 800a7d2:	bd80      	pop	{r7, pc}

0800a7d4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b082      	sub	sp, #8
 800a7d8:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800a7da:	4b1c      	ldr	r3, [pc, #112]	; (800a84c <MX_CRC_Init+0x78>)
 800a7dc:	4a1c      	ldr	r2, [pc, #112]	; (800a850 <MX_CRC_Init+0x7c>)
 800a7de:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800a7e0:	4b1a      	ldr	r3, [pc, #104]	; (800a84c <MX_CRC_Init+0x78>)
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800a7e6:	4b19      	ldr	r3, [pc, #100]	; (800a84c <MX_CRC_Init+0x78>)
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800a7ec:	4b17      	ldr	r3, [pc, #92]	; (800a84c <MX_CRC_Init+0x78>)
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800a7f2:	4b16      	ldr	r3, [pc, #88]	; (800a84c <MX_CRC_Init+0x78>)
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800a7f8:	4b14      	ldr	r3, [pc, #80]	; (800a84c <MX_CRC_Init+0x78>)
 800a7fa:	2201      	movs	r2, #1
 800a7fc:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800a7fe:	4813      	ldr	r0, [pc, #76]	; (800a84c <MX_CRC_Init+0x78>)
 800a800:	f7f7 fa7c 	bl	8001cfc <HAL_CRC_Init>
 800a804:	4603      	mov	r3, r0
 800a806:	2b00      	cmp	r3, #0
 800a808:	d001      	beq.n	800a80e <MX_CRC_Init+0x3a>
  {
    Error_Handler();
 800a80a:	f000 facf 	bl	800adac <Error_Handler>
  }
  __HAL_CRC_DR_RESET(&hcrc);
 800a80e:	4b0f      	ldr	r3, [pc, #60]	; (800a84c <MX_CRC_Init+0x78>)
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	689a      	ldr	r2, [r3, #8]
 800a814:	4b0d      	ldr	r3, [pc, #52]	; (800a84c <MX_CRC_Init+0x78>)
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	f042 0201 	orr.w	r2, r2, #1
 800a81c:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN CRC_Init 2 */

  __HAL_RCC_CRC_CLK_ENABLE();
 800a81e:	4b0d      	ldr	r3, [pc, #52]	; (800a854 <MX_CRC_Init+0x80>)
 800a820:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a824:	4a0b      	ldr	r2, [pc, #44]	; (800a854 <MX_CRC_Init+0x80>)
 800a826:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a82a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a82e:	4b09      	ldr	r3, [pc, #36]	; (800a854 <MX_CRC_Init+0x80>)
 800a830:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a834:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a838:	607b      	str	r3, [r7, #4]
 800a83a:	687b      	ldr	r3, [r7, #4]
  HAL_CRC_MspInit(&hcrc);
 800a83c:	4803      	ldr	r0, [pc, #12]	; (800a84c <MX_CRC_Init+0x78>)
 800a83e:	f000 faff 	bl	800ae40 <HAL_CRC_MspInit>

  /* USER CODE END CRC_Init 2 */

}
 800a842:	bf00      	nop
 800a844:	3708      	adds	r7, #8
 800a846:	46bd      	mov	sp, r7
 800a848:	bd80      	pop	{r7, pc}
 800a84a:	bf00      	nop
 800a84c:	24000680 	.word	0x24000680
 800a850:	58024c00 	.word	0x58024c00
 800a854:	58024400 	.word	0x58024400

0800a858 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 800a85c:	4b1b      	ldr	r3, [pc, #108]	; (800a8cc <MX_I2C4_Init+0x74>)
 800a85e:	4a1c      	ldr	r2, [pc, #112]	; (800a8d0 <MX_I2C4_Init+0x78>)
 800a860:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10B0DCFB;
 800a862:	4b1a      	ldr	r3, [pc, #104]	; (800a8cc <MX_I2C4_Init+0x74>)
 800a864:	4a1b      	ldr	r2, [pc, #108]	; (800a8d4 <MX_I2C4_Init+0x7c>)
 800a866:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 104;
 800a868:	4b18      	ldr	r3, [pc, #96]	; (800a8cc <MX_I2C4_Init+0x74>)
 800a86a:	2268      	movs	r2, #104	; 0x68
 800a86c:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a86e:	4b17      	ldr	r3, [pc, #92]	; (800a8cc <MX_I2C4_Init+0x74>)
 800a870:	2201      	movs	r2, #1
 800a872:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800a874:	4b15      	ldr	r3, [pc, #84]	; (800a8cc <MX_I2C4_Init+0x74>)
 800a876:	2200      	movs	r2, #0
 800a878:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800a87a:	4b14      	ldr	r3, [pc, #80]	; (800a8cc <MX_I2C4_Init+0x74>)
 800a87c:	2200      	movs	r2, #0
 800a87e:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800a880:	4b12      	ldr	r3, [pc, #72]	; (800a8cc <MX_I2C4_Init+0x74>)
 800a882:	2200      	movs	r2, #0
 800a884:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a886:	4b11      	ldr	r3, [pc, #68]	; (800a8cc <MX_I2C4_Init+0x74>)
 800a888:	2200      	movs	r2, #0
 800a88a:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a88c:	4b0f      	ldr	r3, [pc, #60]	; (800a8cc <MX_I2C4_Init+0x74>)
 800a88e:	2200      	movs	r2, #0
 800a890:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800a892:	480e      	ldr	r0, [pc, #56]	; (800a8cc <MX_I2C4_Init+0x74>)
 800a894:	f7fa fcc0 	bl	8005218 <HAL_I2C_Init>
 800a898:	4603      	mov	r3, r0
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d001      	beq.n	800a8a2 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800a89e:	f000 fa85 	bl	800adac <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800a8a2:	2100      	movs	r1, #0
 800a8a4:	4809      	ldr	r0, [pc, #36]	; (800a8cc <MX_I2C4_Init+0x74>)
 800a8a6:	f7fc f863 	bl	8006970 <HAL_I2CEx_ConfigAnalogFilter>
 800a8aa:	4603      	mov	r3, r0
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d001      	beq.n	800a8b4 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 800a8b0:	f000 fa7c 	bl	800adac <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 800a8b4:	2100      	movs	r1, #0
 800a8b6:	4805      	ldr	r0, [pc, #20]	; (800a8cc <MX_I2C4_Init+0x74>)
 800a8b8:	f7fc f8a5 	bl	8006a06 <HAL_I2CEx_ConfigDigitalFilter>
 800a8bc:	4603      	mov	r3, r0
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d001      	beq.n	800a8c6 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 800a8c2:	f000 fa73 	bl	800adac <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800a8c6:	bf00      	nop
 800a8c8:	bd80      	pop	{r7, pc}
 800a8ca:	bf00      	nop
 800a8cc:	24000534 	.word	0x24000534
 800a8d0:	58001c00 	.word	0x58001c00
 800a8d4:	10b0dcfb 	.word	0x10b0dcfb

0800a8d8 <MX_RAMECC_Init>:
  * @brief RAMECC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RAMECC_Init(void)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RAMECC_Init 1 */

  /* USER CODE END RAMECC_Init 1 */
  /** Initialize RAMECC2 M1 : SRAM1_0
  */
  hramecc2_m1.Instance = RAMECC2_Monitor1;
 800a8dc:	4b11      	ldr	r3, [pc, #68]	; (800a924 <MX_RAMECC_Init+0x4c>)
 800a8de:	4a12      	ldr	r2, [pc, #72]	; (800a928 <MX_RAMECC_Init+0x50>)
 800a8e0:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc2_m1) != HAL_OK)
 800a8e2:	4810      	ldr	r0, [pc, #64]	; (800a924 <MX_RAMECC_Init+0x4c>)
 800a8e4:	f7fc f936 	bl	8006b54 <HAL_RAMECC_Init>
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d001      	beq.n	800a8f2 <MX_RAMECC_Init+0x1a>
  {
    Error_Handler();
 800a8ee:	f000 fa5d 	bl	800adac <Error_Handler>
  }
  /** Initialize RAMECC2 M2 : SRAM2_0
  */
  hramecc2_m2.Instance = RAMECC2_Monitor2;
 800a8f2:	4b0e      	ldr	r3, [pc, #56]	; (800a92c <MX_RAMECC_Init+0x54>)
 800a8f4:	4a0e      	ldr	r2, [pc, #56]	; (800a930 <MX_RAMECC_Init+0x58>)
 800a8f6:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc2_m2) != HAL_OK)
 800a8f8:	480c      	ldr	r0, [pc, #48]	; (800a92c <MX_RAMECC_Init+0x54>)
 800a8fa:	f7fc f92b 	bl	8006b54 <HAL_RAMECC_Init>
 800a8fe:	4603      	mov	r3, r0
 800a900:	2b00      	cmp	r3, #0
 800a902:	d001      	beq.n	800a908 <MX_RAMECC_Init+0x30>
  {
    Error_Handler();
 800a904:	f000 fa52 	bl	800adac <Error_Handler>
  }
  /** Initialize RAMECC3 M1 : SRAM4
  */
  hramecc3_m1.Instance = RAMECC3_Monitor1;
 800a908:	4b0a      	ldr	r3, [pc, #40]	; (800a934 <MX_RAMECC_Init+0x5c>)
 800a90a:	4a0b      	ldr	r2, [pc, #44]	; (800a938 <MX_RAMECC_Init+0x60>)
 800a90c:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc3_m1) != HAL_OK)
 800a90e:	4809      	ldr	r0, [pc, #36]	; (800a934 <MX_RAMECC_Init+0x5c>)
 800a910:	f7fc f920 	bl	8006b54 <HAL_RAMECC_Init>
 800a914:	4603      	mov	r3, r0
 800a916:	2b00      	cmp	r3, #0
 800a918:	d001      	beq.n	800a91e <MX_RAMECC_Init+0x46>
  {
    Error_Handler();
 800a91a:	f000 fa47 	bl	800adac <Error_Handler>
  }
  /* USER CODE BEGIN RAMECC_Init 2 */

  /* USER CODE END RAMECC_Init 2 */

}
 800a91e:	bf00      	nop
 800a920:	bd80      	pop	{r7, pc}
 800a922:	bf00      	nop
 800a924:	2400085c 	.word	0x2400085c
 800a928:	48023020 	.word	0x48023020
 800a92c:	240007d4 	.word	0x240007d4
 800a930:	48023040 	.word	0x48023040
 800a934:	24000580 	.word	0x24000580
 800a938:	58027020 	.word	0x58027020

0800a93c <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockB1.Instance = SAI1_Block_B;
 800a940:	4b16      	ldr	r3, [pc, #88]	; (800a99c <MX_SAI1_Init+0x60>)
 800a942:	4a17      	ldr	r2, [pc, #92]	; (800a9a0 <MX_SAI1_Init+0x64>)
 800a944:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 800a946:	4b15      	ldr	r3, [pc, #84]	; (800a99c <MX_SAI1_Init+0x60>)
 800a948:	2200      	movs	r2, #0
 800a94a:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 800a94c:	4b13      	ldr	r3, [pc, #76]	; (800a99c <MX_SAI1_Init+0x60>)
 800a94e:	2200      	movs	r2, #0
 800a950:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800a952:	4b12      	ldr	r3, [pc, #72]	; (800a99c <MX_SAI1_Init+0x60>)
 800a954:	2200      	movs	r2, #0
 800a956:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800a958:	4b10      	ldr	r3, [pc, #64]	; (800a99c <MX_SAI1_Init+0x60>)
 800a95a:	2200      	movs	r2, #0
 800a95c:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800a95e:	4b0f      	ldr	r3, [pc, #60]	; (800a99c <MX_SAI1_Init+0x60>)
 800a960:	2200      	movs	r2, #0
 800a962:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 800a964:	4b0d      	ldr	r3, [pc, #52]	; (800a99c <MX_SAI1_Init+0x60>)
 800a966:	4a0f      	ldr	r2, [pc, #60]	; (800a9a4 <MX_SAI1_Init+0x68>)
 800a968:	621a      	str	r2, [r3, #32]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800a96a:	4b0c      	ldr	r3, [pc, #48]	; (800a99c <MX_SAI1_Init+0x60>)
 800a96c:	2200      	movs	r2, #0
 800a96e:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 800a970:	4b0a      	ldr	r3, [pc, #40]	; (800a99c <MX_SAI1_Init+0x60>)
 800a972:	2200      	movs	r2, #0
 800a974:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 800a976:	4b09      	ldr	r3, [pc, #36]	; (800a99c <MX_SAI1_Init+0x60>)
 800a978:	2200      	movs	r2, #0
 800a97a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800a97c:	4b07      	ldr	r3, [pc, #28]	; (800a99c <MX_SAI1_Init+0x60>)
 800a97e:	2200      	movs	r2, #0
 800a980:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 800a982:	2302      	movs	r3, #2
 800a984:	2200      	movs	r2, #0
 800a986:	2100      	movs	r1, #0
 800a988:	4804      	ldr	r0, [pc, #16]	; (800a99c <MX_SAI1_Init+0x60>)
 800a98a:	f7ff f8bf 	bl	8009b0c <HAL_SAI_InitProtocol>
 800a98e:	4603      	mov	r3, r0
 800a990:	2b00      	cmp	r3, #0
 800a992:	d001      	beq.n	800a998 <MX_SAI1_Init+0x5c>
  {
    Error_Handler();
 800a994:	f000 fa0a 	bl	800adac <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 800a998:	bf00      	nop
 800a99a:	bd80      	pop	{r7, pc}
 800a99c:	240006a4 	.word	0x240006a4
 800a9a0:	40015824 	.word	0x40015824
 800a9a4:	0002ee00 	.word	0x0002ee00

0800a9a8 <MX_SAI4_Init>:
  * @brief SAI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI4_Init(void)
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	af00      	add	r7, sp, #0
  /* USER CODE END SAI4_Init 0 */

  /* USER CODE BEGIN SAI4_Init 1 */

  /* USER CODE END SAI4_Init 1 */
  hsai_BlockA4.Instance = SAI4_Block_A;
 800a9ac:	4b2b      	ldr	r3, [pc, #172]	; (800aa5c <MX_SAI4_Init+0xb4>)
 800a9ae:	4a2c      	ldr	r2, [pc, #176]	; (800aa60 <MX_SAI4_Init+0xb8>)
 800a9b0:	601a      	str	r2, [r3, #0]
  hsai_BlockA4.Init.Protocol = SAI_FREE_PROTOCOL;
 800a9b2:	4b2a      	ldr	r3, [pc, #168]	; (800aa5c <MX_SAI4_Init+0xb4>)
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA4.Init.AudioMode = SAI_MODEMASTER_RX;
 800a9b8:	4b28      	ldr	r3, [pc, #160]	; (800aa5c <MX_SAI4_Init+0xb4>)
 800a9ba:	2201      	movs	r2, #1
 800a9bc:	605a      	str	r2, [r3, #4]
  hsai_BlockA4.Init.DataSize = SAI_DATASIZE_8;
 800a9be:	4b27      	ldr	r3, [pc, #156]	; (800aa5c <MX_SAI4_Init+0xb4>)
 800a9c0:	2240      	movs	r2, #64	; 0x40
 800a9c2:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA4.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800a9c4:	4b25      	ldr	r3, [pc, #148]	; (800aa5c <MX_SAI4_Init+0xb4>)
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA4.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800a9ca:	4b24      	ldr	r3, [pc, #144]	; (800aa5c <MX_SAI4_Init+0xb4>)
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA4.Init.Synchro = SAI_ASYNCHRONOUS;
 800a9d0:	4b22      	ldr	r3, [pc, #136]	; (800aa5c <MX_SAI4_Init+0xb4>)
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	609a      	str	r2, [r3, #8]
  hsai_BlockA4.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800a9d6:	4b21      	ldr	r3, [pc, #132]	; (800aa5c <MX_SAI4_Init+0xb4>)
 800a9d8:	2200      	movs	r2, #0
 800a9da:	615a      	str	r2, [r3, #20]
  hsai_BlockA4.Init.NoDivider = SAI_MASTERDIVIDER_DISABLE;
 800a9dc:	4b1f      	ldr	r3, [pc, #124]	; (800aa5c <MX_SAI4_Init+0xb4>)
 800a9de:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800a9e2:	619a      	str	r2, [r3, #24]
  hsai_BlockA4.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800a9e4:	4b1d      	ldr	r3, [pc, #116]	; (800aa5c <MX_SAI4_Init+0xb4>)
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	61da      	str	r2, [r3, #28]
  hsai_BlockA4.Init.MonoStereoMode = SAI_STEREOMODE;
 800a9ea:	4b1c      	ldr	r3, [pc, #112]	; (800aa5c <MX_SAI4_Init+0xb4>)
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA4.Init.CompandingMode = SAI_NOCOMPANDING;
 800a9f0:	4b1a      	ldr	r3, [pc, #104]	; (800aa5c <MX_SAI4_Init+0xb4>)
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA4.Init.PdmInit.Activation = ENABLE;
 800a9f6:	4b19      	ldr	r3, [pc, #100]	; (800aa5c <MX_SAI4_Init+0xb4>)
 800a9f8:	2201      	movs	r2, #1
 800a9fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA4.Init.PdmInit.MicPairsNbr = 2;
 800a9fe:	4b17      	ldr	r3, [pc, #92]	; (800aa5c <MX_SAI4_Init+0xb4>)
 800aa00:	2202      	movs	r2, #2
 800aa02:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA4.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK2_ENABLE;
 800aa04:	4b15      	ldr	r3, [pc, #84]	; (800aa5c <MX_SAI4_Init+0xb4>)
 800aa06:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aa0a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA4.FrameInit.FrameLength = 8;
 800aa0c:	4b13      	ldr	r3, [pc, #76]	; (800aa5c <MX_SAI4_Init+0xb4>)
 800aa0e:	2208      	movs	r2, #8
 800aa10:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA4.FrameInit.ActiveFrameLength = 1;
 800aa12:	4b12      	ldr	r3, [pc, #72]	; (800aa5c <MX_SAI4_Init+0xb4>)
 800aa14:	2201      	movs	r2, #1
 800aa16:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA4.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800aa18:	4b10      	ldr	r3, [pc, #64]	; (800aa5c <MX_SAI4_Init+0xb4>)
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA4.FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800aa1e:	4b0f      	ldr	r3, [pc, #60]	; (800aa5c <MX_SAI4_Init+0xb4>)
 800aa20:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800aa24:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA4.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800aa26:	4b0d      	ldr	r3, [pc, #52]	; (800aa5c <MX_SAI4_Init+0xb4>)
 800aa28:	2200      	movs	r2, #0
 800aa2a:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA4.SlotInit.FirstBitOffset = 0;
 800aa2c:	4b0b      	ldr	r3, [pc, #44]	; (800aa5c <MX_SAI4_Init+0xb4>)
 800aa2e:	2200      	movs	r2, #0
 800aa30:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA4.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800aa32:	4b0a      	ldr	r3, [pc, #40]	; (800aa5c <MX_SAI4_Init+0xb4>)
 800aa34:	2200      	movs	r2, #0
 800aa36:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA4.SlotInit.SlotNumber = 1;
 800aa38:	4b08      	ldr	r3, [pc, #32]	; (800aa5c <MX_SAI4_Init+0xb4>)
 800aa3a:	2201      	movs	r2, #1
 800aa3c:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA4.SlotInit.SlotActive = 0x0000FFFF;
 800aa3e:	4b07      	ldr	r3, [pc, #28]	; (800aa5c <MX_SAI4_Init+0xb4>)
 800aa40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aa44:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA4) != HAL_OK)
 800aa46:	4805      	ldr	r0, [pc, #20]	; (800aa5c <MX_SAI4_Init+0xb4>)
 800aa48:	f7ff f892 	bl	8009b70 <HAL_SAI_Init>
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d001      	beq.n	800aa56 <MX_SAI4_Init+0xae>
  {
    Error_Handler();
 800aa52:	f000 f9ab 	bl	800adac <Error_Handler>
  }
  /* USER CODE BEGIN SAI4_Init 2 */

  /* USER CODE END SAI4_Init 2 */

}
 800aa56:	bf00      	nop
 800aa58:	bd80      	pop	{r7, pc}
 800aa5a:	bf00      	nop
 800aa5c:	2400073c 	.word	0x2400073c
 800aa60:	58005404 	.word	0x58005404

0800aa64 <MX_BDMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_BDMA_Init(void)
{
 800aa64:	b480      	push	{r7}
 800aa66:	b083      	sub	sp, #12
 800aa68:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 800aa6a:	4b0a      	ldr	r3, [pc, #40]	; (800aa94 <MX_BDMA_Init+0x30>)
 800aa6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aa70:	4a08      	ldr	r2, [pc, #32]	; (800aa94 <MX_BDMA_Init+0x30>)
 800aa72:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800aa76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800aa7a:	4b06      	ldr	r3, [pc, #24]	; (800aa94 <MX_BDMA_Init+0x30>)
 800aa7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aa80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800aa84:	607b      	str	r3, [r7, #4]
 800aa86:	687b      	ldr	r3, [r7, #4]

}
 800aa88:	bf00      	nop
 800aa8a:	370c      	adds	r7, #12
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa92:	4770      	bx	lr
 800aa94:	58024400 	.word	0x58024400

0800aa98 <MX_DMA_Init>:
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  *   hdma_dma_generator0
  */
static void MX_DMA_Init(void)
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b08a      	sub	sp, #40	; 0x28
 800aa9c:	af00      	add	r7, sp, #0

  /* Local variables */
  HAL_DMA_MuxRequestGeneratorConfigTypeDef pRequestGeneratorConfig = {0};
 800aa9e:	f107 031c 	add.w	r3, r7, #28
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	601a      	str	r2, [r3, #0]
 800aaa6:	605a      	str	r2, [r3, #4]
 800aaa8:	609a      	str	r2, [r3, #8]
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig = {0};
 800aaaa:	f107 030c 	add.w	r3, r7, #12
 800aaae:	2200      	movs	r2, #0
 800aab0:	601a      	str	r2, [r3, #0]
 800aab2:	605a      	str	r2, [r3, #4]
 800aab4:	609a      	str	r2, [r3, #8]
 800aab6:	60da      	str	r2, [r3, #12]

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800aab8:	4b5a      	ldr	r3, [pc, #360]	; (800ac24 <MX_DMA_Init+0x18c>)
 800aaba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800aabe:	4a59      	ldr	r2, [pc, #356]	; (800ac24 <MX_DMA_Init+0x18c>)
 800aac0:	f043 0302 	orr.w	r3, r3, #2
 800aac4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800aac8:	4b56      	ldr	r3, [pc, #344]	; (800ac24 <MX_DMA_Init+0x18c>)
 800aaca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800aace:	f003 0302 	and.w	r3, r3, #2
 800aad2:	60bb      	str	r3, [r7, #8]
 800aad4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800aad6:	4b53      	ldr	r3, [pc, #332]	; (800ac24 <MX_DMA_Init+0x18c>)
 800aad8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800aadc:	4a51      	ldr	r2, [pc, #324]	; (800ac24 <MX_DMA_Init+0x18c>)
 800aade:	f043 0301 	orr.w	r3, r3, #1
 800aae2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800aae6:	4b4f      	ldr	r3, [pc, #316]	; (800ac24 <MX_DMA_Init+0x18c>)
 800aae8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800aaec:	f003 0301 	and.w	r3, r3, #1
 800aaf0:	607b      	str	r3, [r7, #4]
 800aaf2:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 800aaf4:	4b4c      	ldr	r3, [pc, #304]	; (800ac28 <MX_DMA_Init+0x190>)
 800aaf6:	4a4d      	ldr	r2, [pc, #308]	; (800ac2c <MX_DMA_Init+0x194>)
 800aaf8:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Request = DMA_REQUEST_MEM2MEM;
 800aafa:	4b4b      	ldr	r3, [pc, #300]	; (800ac28 <MX_DMA_Init+0x190>)
 800aafc:	2200      	movs	r2, #0
 800aafe:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800ab00:	4b49      	ldr	r3, [pc, #292]	; (800ac28 <MX_DMA_Init+0x190>)
 800ab02:	2280      	movs	r2, #128	; 0x80
 800ab04:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 800ab06:	4b48      	ldr	r3, [pc, #288]	; (800ac28 <MX_DMA_Init+0x190>)
 800ab08:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ab0c:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 800ab0e:	4b46      	ldr	r3, [pc, #280]	; (800ac28 <MX_DMA_Init+0x190>)
 800ab10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ab14:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800ab16:	4b44      	ldr	r3, [pc, #272]	; (800ac28 <MX_DMA_Init+0x190>)
 800ab18:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ab1c:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800ab1e:	4b42      	ldr	r3, [pc, #264]	; (800ac28 <MX_DMA_Init+0x190>)
 800ab20:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800ab24:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 800ab26:	4b40      	ldr	r3, [pc, #256]	; (800ac28 <MX_DMA_Init+0x190>)
 800ab28:	2200      	movs	r2, #0
 800ab2a:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_HIGH;
 800ab2c:	4b3e      	ldr	r3, [pc, #248]	; (800ac28 <MX_DMA_Init+0x190>)
 800ab2e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800ab32:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800ab34:	4b3c      	ldr	r3, [pc, #240]	; (800ac28 <MX_DMA_Init+0x190>)
 800ab36:	2204      	movs	r2, #4
 800ab38:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800ab3a:	4b3b      	ldr	r3, [pc, #236]	; (800ac28 <MX_DMA_Init+0x190>)
 800ab3c:	2203      	movs	r2, #3
 800ab3e:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 800ab40:	4b39      	ldr	r3, [pc, #228]	; (800ac28 <MX_DMA_Init+0x190>)
 800ab42:	2200      	movs	r2, #0
 800ab44:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800ab46:	4b38      	ldr	r3, [pc, #224]	; (800ac28 <MX_DMA_Init+0x190>)
 800ab48:	2200      	movs	r2, #0
 800ab4a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 800ab4c:	4836      	ldr	r0, [pc, #216]	; (800ac28 <MX_DMA_Init+0x190>)
 800ab4e:	f7f7 f9bf 	bl	8001ed0 <HAL_DMA_Init>
 800ab52:	4603      	mov	r3, r0
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d001      	beq.n	800ab5c <MX_DMA_Init+0xc4>
  {
    Error_Handler( );
 800ab58:	f000 f928 	bl	800adac <Error_Handler>
  }

  /* Configure DMA request hdma_dma_generator0 on DMA1_Stream0 */
  hdma_dma_generator0.Instance = DMA1_Stream0;
 800ab5c:	4b34      	ldr	r3, [pc, #208]	; (800ac30 <MX_DMA_Init+0x198>)
 800ab5e:	4a35      	ldr	r2, [pc, #212]	; (800ac34 <MX_DMA_Init+0x19c>)
 800ab60:	601a      	str	r2, [r3, #0]
  hdma_dma_generator0.Init.Request = DMA_REQUEST_GENERATOR0;
 800ab62:	4b33      	ldr	r3, [pc, #204]	; (800ac30 <MX_DMA_Init+0x198>)
 800ab64:	2201      	movs	r2, #1
 800ab66:	605a      	str	r2, [r3, #4]
  hdma_dma_generator0.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ab68:	4b31      	ldr	r3, [pc, #196]	; (800ac30 <MX_DMA_Init+0x198>)
 800ab6a:	2240      	movs	r2, #64	; 0x40
 800ab6c:	609a      	str	r2, [r3, #8]
  hdma_dma_generator0.Init.PeriphInc = DMA_PINC_DISABLE;
 800ab6e:	4b30      	ldr	r3, [pc, #192]	; (800ac30 <MX_DMA_Init+0x198>)
 800ab70:	2200      	movs	r2, #0
 800ab72:	60da      	str	r2, [r3, #12]
  hdma_dma_generator0.Init.MemInc = DMA_MINC_ENABLE;
 800ab74:	4b2e      	ldr	r3, [pc, #184]	; (800ac30 <MX_DMA_Init+0x198>)
 800ab76:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ab7a:	611a      	str	r2, [r3, #16]
  hdma_dma_generator0.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ab7c:	4b2c      	ldr	r3, [pc, #176]	; (800ac30 <MX_DMA_Init+0x198>)
 800ab7e:	2200      	movs	r2, #0
 800ab80:	615a      	str	r2, [r3, #20]
  hdma_dma_generator0.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ab82:	4b2b      	ldr	r3, [pc, #172]	; (800ac30 <MX_DMA_Init+0x198>)
 800ab84:	2200      	movs	r2, #0
 800ab86:	619a      	str	r2, [r3, #24]
  hdma_dma_generator0.Init.Mode = DMA_NORMAL;
 800ab88:	4b29      	ldr	r3, [pc, #164]	; (800ac30 <MX_DMA_Init+0x198>)
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	61da      	str	r2, [r3, #28]
  hdma_dma_generator0.Init.Priority = DMA_PRIORITY_HIGH;
 800ab8e:	4b28      	ldr	r3, [pc, #160]	; (800ac30 <MX_DMA_Init+0x198>)
 800ab90:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800ab94:	621a      	str	r2, [r3, #32]
  hdma_dma_generator0.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800ab96:	4b26      	ldr	r3, [pc, #152]	; (800ac30 <MX_DMA_Init+0x198>)
 800ab98:	2200      	movs	r2, #0
 800ab9a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DMA_Init(&hdma_dma_generator0) != HAL_OK)
 800ab9c:	4824      	ldr	r0, [pc, #144]	; (800ac30 <MX_DMA_Init+0x198>)
 800ab9e:	f7f7 f997 	bl	8001ed0 <HAL_DMA_Init>
 800aba2:	4603      	mov	r3, r0
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d001      	beq.n	800abac <MX_DMA_Init+0x114>
  {
    Error_Handler( );
 800aba8:	f000 f900 	bl	800adac <Error_Handler>
  }

  /* Configure the DMAMUX request generator for the selected DMA stream */
  pRequestGeneratorConfig.SignalID = HAL_DMAMUX1_REQ_GEN_DMAMUX1_CH1_EVT;
 800abac:	2301      	movs	r3, #1
 800abae:	61fb      	str	r3, [r7, #28]
  pRequestGeneratorConfig.Polarity = HAL_DMAMUX_REQ_GEN_RISING;
 800abb0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800abb4:	623b      	str	r3, [r7, #32]
  pRequestGeneratorConfig.RequestNumber = 1;
 800abb6:	2301      	movs	r3, #1
 800abb8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_DMAEx_ConfigMuxRequestGenerator(&hdma_dma_generator0, &pRequestGeneratorConfig) != HAL_OK)
 800abba:	f107 031c 	add.w	r3, r7, #28
 800abbe:	4619      	mov	r1, r3
 800abc0:	481b      	ldr	r0, [pc, #108]	; (800ac30 <MX_DMA_Init+0x198>)
 800abc2:	f7f9 ff35 	bl	8004a30 <HAL_DMAEx_ConfigMuxRequestGenerator>
 800abc6:	4603      	mov	r3, r0
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d001      	beq.n	800abd0 <MX_DMA_Init+0x138>
  {
    Error_Handler( );
 800abcc:	f000 f8ee 	bl	800adac <Error_Handler>
  }

  /* Configure the DMAMUX synchronization parameters for the selected DMA stream */
  pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 800abd0:	2306      	movs	r3, #6
 800abd2:	60fb      	str	r3, [r7, #12]
  pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_RISING;
 800abd4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800abd8:	613b      	str	r3, [r7, #16]
  pSyncConfig.SyncEnable = DISABLE;
 800abda:	2300      	movs	r3, #0
 800abdc:	753b      	strb	r3, [r7, #20]
  pSyncConfig.EventEnable = ENABLE;
 800abde:	2301      	movs	r3, #1
 800abe0:	757b      	strb	r3, [r7, #21]
  pSyncConfig.RequestNumber = 1;
 800abe2:	2301      	movs	r3, #1
 800abe4:	61bb      	str	r3, [r7, #24]
  if (HAL_DMAEx_ConfigMuxSync(&hdma_dma_generator0, &pSyncConfig) != HAL_OK)
 800abe6:	f107 030c 	add.w	r3, r7, #12
 800abea:	4619      	mov	r1, r3
 800abec:	4810      	ldr	r0, [pc, #64]	; (800ac30 <MX_DMA_Init+0x198>)
 800abee:	f7f9 fe59 	bl	80048a4 <HAL_DMAEx_ConfigMuxSync>
 800abf2:	4603      	mov	r3, r0
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d001      	beq.n	800abfc <MX_DMA_Init+0x164>
  {
    Error_Handler( );
 800abf8:	f000 f8d8 	bl	800adac <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800abfc:	2200      	movs	r2, #0
 800abfe:	2100      	movs	r1, #0
 800ac00:	200c      	movs	r0, #12
 800ac02:	f7f7 f846 	bl	8001c92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800ac06:	200c      	movs	r0, #12
 800ac08:	f7f7 f85d 	bl	8001cc6 <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 0, 0);
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	2100      	movs	r1, #0
 800ac10:	2066      	movs	r0, #102	; 0x66
 800ac12:	f7f7 f83e 	bl	8001c92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
 800ac16:	2066      	movs	r0, #102	; 0x66
 800ac18:	f7f7 f855 	bl	8001cc6 <HAL_NVIC_EnableIRQ>

}
 800ac1c:	bf00      	nop
 800ac1e:	3728      	adds	r7, #40	; 0x28
 800ac20:	46bd      	mov	sp, r7
 800ac22:	bd80      	pop	{r7, pc}
 800ac24:	58024400 	.word	0x58024400
 800ac28:	24000590 	.word	0x24000590
 800ac2c:	40020410 	.word	0x40020410
 800ac30:	24000608 	.word	0x24000608
 800ac34:	40020010 	.word	0x40020010

0800ac38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b08a      	sub	sp, #40	; 0x28
 800ac3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ac3e:	f107 0314 	add.w	r3, r7, #20
 800ac42:	2200      	movs	r2, #0
 800ac44:	601a      	str	r2, [r3, #0]
 800ac46:	605a      	str	r2, [r3, #4]
 800ac48:	609a      	str	r2, [r3, #8]
 800ac4a:	60da      	str	r2, [r3, #12]
 800ac4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800ac4e:	4b2e      	ldr	r3, [pc, #184]	; (800ad08 <MX_GPIO_Init+0xd0>)
 800ac50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ac54:	4a2c      	ldr	r2, [pc, #176]	; (800ad08 <MX_GPIO_Init+0xd0>)
 800ac56:	f043 0302 	orr.w	r3, r3, #2
 800ac5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ac5e:	4b2a      	ldr	r3, [pc, #168]	; (800ad08 <MX_GPIO_Init+0xd0>)
 800ac60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ac64:	f003 0302 	and.w	r3, r3, #2
 800ac68:	613b      	str	r3, [r7, #16]
 800ac6a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800ac6c:	4b26      	ldr	r3, [pc, #152]	; (800ad08 <MX_GPIO_Init+0xd0>)
 800ac6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ac72:	4a25      	ldr	r2, [pc, #148]	; (800ad08 <MX_GPIO_Init+0xd0>)
 800ac74:	f043 0301 	orr.w	r3, r3, #1
 800ac78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ac7c:	4b22      	ldr	r3, [pc, #136]	; (800ad08 <MX_GPIO_Init+0xd0>)
 800ac7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ac82:	f003 0301 	and.w	r3, r3, #1
 800ac86:	60fb      	str	r3, [r7, #12]
 800ac88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800ac8a:	4b1f      	ldr	r3, [pc, #124]	; (800ad08 <MX_GPIO_Init+0xd0>)
 800ac8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ac90:	4a1d      	ldr	r2, [pc, #116]	; (800ad08 <MX_GPIO_Init+0xd0>)
 800ac92:	f043 0310 	orr.w	r3, r3, #16
 800ac96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ac9a:	4b1b      	ldr	r3, [pc, #108]	; (800ad08 <MX_GPIO_Init+0xd0>)
 800ac9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aca0:	f003 0310 	and.w	r3, r3, #16
 800aca4:	60bb      	str	r3, [r7, #8]
 800aca6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800aca8:	4b17      	ldr	r3, [pc, #92]	; (800ad08 <MX_GPIO_Init+0xd0>)
 800acaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800acae:	4a16      	ldr	r2, [pc, #88]	; (800ad08 <MX_GPIO_Init+0xd0>)
 800acb0:	f043 0308 	orr.w	r3, r3, #8
 800acb4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800acb8:	4b13      	ldr	r3, [pc, #76]	; (800ad08 <MX_GPIO_Init+0xd0>)
 800acba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800acbe:	f003 0308 	and.w	r3, r3, #8
 800acc2:	607b      	str	r3, [r7, #4]
 800acc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800acc6:	4b10      	ldr	r3, [pc, #64]	; (800ad08 <MX_GPIO_Init+0xd0>)
 800acc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800accc:	4a0e      	ldr	r2, [pc, #56]	; (800ad08 <MX_GPIO_Init+0xd0>)
 800acce:	f043 0320 	orr.w	r3, r3, #32
 800acd2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800acd6:	4b0c      	ldr	r3, [pc, #48]	; (800ad08 <MX_GPIO_Init+0xd0>)
 800acd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800acdc:	f003 0320 	and.w	r3, r3, #32
 800ace0:	603b      	str	r3, [r7, #0]
 800ace2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800ace4:	2301      	movs	r3, #1
 800ace6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800ace8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800acec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800acee:	2300      	movs	r3, #0
 800acf0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800acf2:	f107 0314 	add.w	r3, r7, #20
 800acf6:	4619      	mov	r1, r3
 800acf8:	4804      	ldr	r0, [pc, #16]	; (800ad0c <MX_GPIO_Init+0xd4>)
 800acfa:	f7f9 ffa5 	bl	8004c48 <HAL_GPIO_Init>

}
 800acfe:	bf00      	nop
 800ad00:	3728      	adds	r7, #40	; 0x28
 800ad02:	46bd      	mov	sp, r7
 800ad04:	bd80      	pop	{r7, pc}
 800ad06:	bf00      	nop
 800ad08:	58024400 	.word	0x58024400
 800ad0c:	58021000 	.word	0x58021000

0800ad10 <CODEC_Init>:

/* USER CODE BEGIN 4 */

static void CODEC_Init(void) {
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b08e      	sub	sp, #56	; 0x38
 800ad14:	af00      	add	r7, sp, #0

	/* CONFIG WM8994_Object_t */
	// cancel up to 1khz
	int32_t ret = BSP_ERROR_NONE;
 800ad16:	2300      	movs	r3, #0
 800ad18:	637b      	str	r3, [r7, #52]	; 0x34
	WM8994_Init_t hcodec_init;
	WM8994_IO_t hcodec_io;
	uint32_t id;

	/* Configure audio driver through I2C4 */
	hcodec_io.Address = CODEC_I2C;
 800ad1a:	2334      	movs	r3, #52	; 0x34
 800ad1c:	823b      	strh	r3, [r7, #16]
	hcodec_io.Init = MX_I2C4_Init;
 800ad1e:	4b1f      	ldr	r3, [pc, #124]	; (800ad9c <CODEC_Init+0x8c>)
 800ad20:	60bb      	str	r3, [r7, #8]
//	hcodec_io.DeInit = BSP_I2C4_DeInit;
	hcodec_io.ReadReg = HAL_I2C_Mem_Read;
 800ad22:	4b1f      	ldr	r3, [pc, #124]	; (800ada0 <CODEC_Init+0x90>)
 800ad24:	61bb      	str	r3, [r7, #24]
	hcodec_io.WriteReg = HAL_I2C_Mem_Write;
 800ad26:	4b1f      	ldr	r3, [pc, #124]	; (800ada4 <CODEC_Init+0x94>)
 800ad28:	617b      	str	r3, [r7, #20]
	hcodec_io.GetTick = HAL_GetTick();
 800ad2a:	f7f6 fecb 	bl	8001ac4 <HAL_GetTick>
 800ad2e:	4603      	mov	r3, r0
 800ad30:	61fb      	str	r3, [r7, #28]


	WM8994_Init(&hcodec,&hcodec_io);
 800ad32:	f107 0308 	add.w	r3, r7, #8
 800ad36:	4619      	mov	r1, r3
 800ad38:	481b      	ldr	r0, [pc, #108]	; (800ada8 <CODEC_Init+0x98>)
 800ad3a:	f7f5 fae9 	bl	8000310 <WM8994_Init>
	if(WM8994_RegisterBusIO(&hcodec, &hcodec_io) != WM8994_OK) {
 800ad3e:	f107 0308 	add.w	r3, r7, #8
 800ad42:	4619      	mov	r1, r3
 800ad44:	4818      	ldr	r0, [pc, #96]	; (800ada8 <CODEC_Init+0x98>)
 800ad46:	f7f6 fc09 	bl	800155c <WM8994_RegisterBusIO>
 800ad4a:	4603      	mov	r3, r0
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d003      	beq.n	800ad58 <CODEC_Init+0x48>
		ret = BSP_ERROR_BUS_FAILURE;
 800ad50:	f06f 0307 	mvn.w	r3, #7
 800ad54:	637b      	str	r3, [r7, #52]	; 0x34
 800ad56:	e01d      	b.n	800ad94 <CODEC_Init+0x84>
	} else {

		if(WM8994_Reset(&hcodec) != WM8994_OK)
 800ad58:	4813      	ldr	r0, [pc, #76]	; (800ada8 <CODEC_Init+0x98>)
 800ad5a:	f7f6 fbe7 	bl	800152c <WM8994_Reset>
 800ad5e:	4603      	mov	r3, r0
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d003      	beq.n	800ad6c <CODEC_Init+0x5c>
		{
			ret = BSP_ERROR_COMPONENT_FAILURE;
 800ad64:	f06f 0304 	mvn.w	r3, #4
 800ad68:	637b      	str	r3, [r7, #52]	; 0x34
 800ad6a:	e013      	b.n	800ad94 <CODEC_Init+0x84>
		}
		else if(WM8994_ReadID(&hcodec, &id) != WM8994_OK)
 800ad6c:	1d3b      	adds	r3, r7, #4
 800ad6e:	4619      	mov	r1, r3
 800ad70:	480d      	ldr	r0, [pc, #52]	; (800ada8 <CODEC_Init+0x98>)
 800ad72:	f7f6 f9b3 	bl	80010dc <WM8994_ReadID>
 800ad76:	4603      	mov	r3, r0
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d003      	beq.n	800ad84 <CODEC_Init+0x74>
		{
			ret = BSP_ERROR_COMPONENT_FAILURE;
 800ad7c:	f06f 0304 	mvn.w	r3, #4
 800ad80:	637b      	str	r3, [r7, #52]	; 0x34
 800ad82:	e007      	b.n	800ad94 <CODEC_Init+0x84>
		}
		else if(id != WM8994_ID) {
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	f648 1294 	movw	r2, #35220	; 0x8994
 800ad8a:	4293      	cmp	r3, r2
 800ad8c:	d002      	beq.n	800ad94 <CODEC_Init+0x84>
			ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800ad8e:	f06f 0306 	mvn.w	r3, #6
 800ad92:	637b      	str	r3, [r7, #52]	; 0x34
//	WM8994_Init(&hcodec, &hcodec_init);
//	WM8994_SetProtocol(&hcodec, WM8994_PROTOCOL_L_JUSTIFIED);
//	WM8994_RegisterBusIO(&hcodec, &hcodec_io);
//	WM8994_Play(&hcodec);

}
 800ad94:	3738      	adds	r7, #56	; 0x38
 800ad96:	46bd      	mov	sp, r7
 800ad98:	bd80      	pop	{r7, pc}
 800ad9a:	bf00      	nop
 800ad9c:	0800a859 	.word	0x0800a859
 800ada0:	08005561 	.word	0x08005561
 800ada4:	08005339 	.word	0x08005339
 800ada8:	240008e4 	.word	0x240008e4

0800adac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800adac:	b480      	push	{r7}
 800adae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800adb0:	b672      	cpsid	i
}
 800adb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800adb4:	e7fe      	b.n	800adb4 <Error_Handler+0x8>
	...

0800adb8 <MX_PDM2PCM_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* PDM2PCM init function */
void MX_PDM2PCM_Init(void)
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

   /**
  */
  PDM1_filter_handler.bit_order = PDM_FILTER_BIT_ORDER_MSB;
 800adbc:	4b10      	ldr	r3, [pc, #64]	; (800ae00 <MX_PDM2PCM_Init+0x48>)
 800adbe:	2201      	movs	r2, #1
 800adc0:	801a      	strh	r2, [r3, #0]
  PDM1_filter_handler.endianness = PDM_FILTER_ENDIANNESS_BE;
 800adc2:	4b0f      	ldr	r3, [pc, #60]	; (800ae00 <MX_PDM2PCM_Init+0x48>)
 800adc4:	2201      	movs	r2, #1
 800adc6:	805a      	strh	r2, [r3, #2]
  PDM1_filter_handler.high_pass_tap = 2104533974;
 800adc8:	4b0d      	ldr	r3, [pc, #52]	; (800ae00 <MX_PDM2PCM_Init+0x48>)
 800adca:	4a0e      	ldr	r2, [pc, #56]	; (800ae04 <MX_PDM2PCM_Init+0x4c>)
 800adcc:	605a      	str	r2, [r3, #4]
  PDM1_filter_handler.in_ptr_channels = 1;
 800adce:	4b0c      	ldr	r3, [pc, #48]	; (800ae00 <MX_PDM2PCM_Init+0x48>)
 800add0:	2201      	movs	r2, #1
 800add2:	811a      	strh	r2, [r3, #8]
  PDM1_filter_handler.out_ptr_channels = 1;
 800add4:	4b0a      	ldr	r3, [pc, #40]	; (800ae00 <MX_PDM2PCM_Init+0x48>)
 800add6:	2201      	movs	r2, #1
 800add8:	815a      	strh	r2, [r3, #10]
  PDM_Filter_Init(&PDM1_filter_handler);
 800adda:	4809      	ldr	r0, [pc, #36]	; (800ae00 <MX_PDM2PCM_Init+0x48>)
 800addc:	f002 f8a0 	bl	800cf20 <PDM_Filter_Init>

  PDM1_filter_config.decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 800ade0:	4b09      	ldr	r3, [pc, #36]	; (800ae08 <MX_PDM2PCM_Init+0x50>)
 800ade2:	2202      	movs	r2, #2
 800ade4:	801a      	strh	r2, [r3, #0]
  PDM1_filter_config.output_samples_number = 16;
 800ade6:	4b08      	ldr	r3, [pc, #32]	; (800ae08 <MX_PDM2PCM_Init+0x50>)
 800ade8:	2210      	movs	r2, #16
 800adea:	805a      	strh	r2, [r3, #2]
  PDM1_filter_config.mic_gain = 0;
 800adec:	4b06      	ldr	r3, [pc, #24]	; (800ae08 <MX_PDM2PCM_Init+0x50>)
 800adee:	2200      	movs	r2, #0
 800adf0:	809a      	strh	r2, [r3, #4]
  PDM_Filter_setConfig(&PDM1_filter_handler, &PDM1_filter_config);
 800adf2:	4905      	ldr	r1, [pc, #20]	; (800ae08 <MX_PDM2PCM_Init+0x50>)
 800adf4:	4802      	ldr	r0, [pc, #8]	; (800ae00 <MX_PDM2PCM_Init+0x48>)
 800adf6:	f002 f963 	bl	800d0c0 <PDM_Filter_setConfig>

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 800adfa:	bf00      	nop
 800adfc:	bd80      	pop	{r7, pc}
 800adfe:	bf00      	nop
 800ae00:	24000914 	.word	0x24000914
 800ae04:	7d70a3d6 	.word	0x7d70a3d6
 800ae08:	2400090c 	.word	0x2400090c

0800ae0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800ae0c:	b480      	push	{r7}
 800ae0e:	b083      	sub	sp, #12
 800ae10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ae12:	4b0a      	ldr	r3, [pc, #40]	; (800ae3c <HAL_MspInit+0x30>)
 800ae14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ae18:	4a08      	ldr	r2, [pc, #32]	; (800ae3c <HAL_MspInit+0x30>)
 800ae1a:	f043 0302 	orr.w	r3, r3, #2
 800ae1e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800ae22:	4b06      	ldr	r3, [pc, #24]	; (800ae3c <HAL_MspInit+0x30>)
 800ae24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ae28:	f003 0302 	and.w	r3, r3, #2
 800ae2c:	607b      	str	r3, [r7, #4]
 800ae2e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800ae30:	bf00      	nop
 800ae32:	370c      	adds	r7, #12
 800ae34:	46bd      	mov	sp, r7
 800ae36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3a:	4770      	bx	lr
 800ae3c:	58024400 	.word	0x58024400

0800ae40 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800ae40:	b480      	push	{r7}
 800ae42:	b085      	sub	sp, #20
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	4a0b      	ldr	r2, [pc, #44]	; (800ae7c <HAL_CRC_MspInit+0x3c>)
 800ae4e:	4293      	cmp	r3, r2
 800ae50:	d10e      	bne.n	800ae70 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800ae52:	4b0b      	ldr	r3, [pc, #44]	; (800ae80 <HAL_CRC_MspInit+0x40>)
 800ae54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ae58:	4a09      	ldr	r2, [pc, #36]	; (800ae80 <HAL_CRC_MspInit+0x40>)
 800ae5a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ae5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ae62:	4b07      	ldr	r3, [pc, #28]	; (800ae80 <HAL_CRC_MspInit+0x40>)
 800ae64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ae68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ae6c:	60fb      	str	r3, [r7, #12]
 800ae6e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800ae70:	bf00      	nop
 800ae72:	3714      	adds	r7, #20
 800ae74:	46bd      	mov	sp, r7
 800ae76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7a:	4770      	bx	lr
 800ae7c:	58024c00 	.word	0x58024c00
 800ae80:	58024400 	.word	0x58024400

0800ae84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b0b6      	sub	sp, #216	; 0xd8
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ae8c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800ae90:	2200      	movs	r2, #0
 800ae92:	601a      	str	r2, [r3, #0]
 800ae94:	605a      	str	r2, [r3, #4]
 800ae96:	609a      	str	r2, [r3, #8]
 800ae98:	60da      	str	r2, [r3, #12]
 800ae9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800ae9c:	f107 0310 	add.w	r3, r7, #16
 800aea0:	22b4      	movs	r2, #180	; 0xb4
 800aea2:	2100      	movs	r1, #0
 800aea4:	4618      	mov	r0, r3
 800aea6:	f002 fa49 	bl	800d33c <memset>
  if(hi2c->Instance==I2C4)
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	4a29      	ldr	r2, [pc, #164]	; (800af54 <HAL_I2C_MspInit+0xd0>)
 800aeb0:	4293      	cmp	r3, r2
 800aeb2:	d14a      	bne.n	800af4a <HAL_I2C_MspInit+0xc6>
  /* USER CODE BEGIN I2C4_MspInit 0 */

  /* USER CODE END I2C4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 800aeb4:	2310      	movs	r3, #16
 800aeb6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 800aeb8:	2300      	movs	r3, #0
 800aeba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800aebe:	f107 0310 	add.w	r3, r7, #16
 800aec2:	4618      	mov	r0, r3
 800aec4:	f7fc fd90 	bl	80079e8 <HAL_RCCEx_PeriphCLKConfig>
 800aec8:	4603      	mov	r3, r0
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d001      	beq.n	800aed2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800aece:	f7ff ff6d 	bl	800adac <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800aed2:	4b21      	ldr	r3, [pc, #132]	; (800af58 <HAL_I2C_MspInit+0xd4>)
 800aed4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aed8:	4a1f      	ldr	r2, [pc, #124]	; (800af58 <HAL_I2C_MspInit+0xd4>)
 800aeda:	f043 0302 	orr.w	r3, r3, #2
 800aede:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800aee2:	4b1d      	ldr	r3, [pc, #116]	; (800af58 <HAL_I2C_MspInit+0xd4>)
 800aee4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aee8:	f003 0302 	and.w	r3, r3, #2
 800aeec:	60fb      	str	r3, [r7, #12]
 800aeee:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PB8     ------> I2C4_SCL
    PB9     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800aef0:	f44f 7340 	mov.w	r3, #768	; 0x300
 800aef4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800aef8:	2312      	movs	r3, #18
 800aefa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aefe:	2300      	movs	r3, #0
 800af00:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800af04:	2300      	movs	r3, #0
 800af06:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C4;
 800af0a:	2306      	movs	r3, #6
 800af0c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800af10:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800af14:	4619      	mov	r1, r3
 800af16:	4811      	ldr	r0, [pc, #68]	; (800af5c <HAL_I2C_MspInit+0xd8>)
 800af18:	f7f9 fe96 	bl	8004c48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 800af1c:	4b0e      	ldr	r3, [pc, #56]	; (800af58 <HAL_I2C_MspInit+0xd4>)
 800af1e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800af22:	4a0d      	ldr	r2, [pc, #52]	; (800af58 <HAL_I2C_MspInit+0xd4>)
 800af24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af28:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800af2c:	4b0a      	ldr	r3, [pc, #40]	; (800af58 <HAL_I2C_MspInit+0xd4>)
 800af2e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800af32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af36:	60bb      	str	r3, [r7, #8]
 800af38:	68bb      	ldr	r3, [r7, #8]
    /* I2C4 interrupt Init */
    HAL_NVIC_SetPriority(I2C4_ER_IRQn, 0, 0);
 800af3a:	2200      	movs	r2, #0
 800af3c:	2100      	movs	r1, #0
 800af3e:	2060      	movs	r0, #96	; 0x60
 800af40:	f7f6 fea7 	bl	8001c92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
 800af44:	2060      	movs	r0, #96	; 0x60
 800af46:	f7f6 febe 	bl	8001cc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 800af4a:	bf00      	nop
 800af4c:	37d8      	adds	r7, #216	; 0xd8
 800af4e:	46bd      	mov	sp, r7
 800af50:	bd80      	pop	{r7, pc}
 800af52:	bf00      	nop
 800af54:	58001c00 	.word	0x58001c00
 800af58:	58024400 	.word	0x58024400
 800af5c:	58020400 	.word	0x58020400

0800af60 <HAL_SAI_MspInit>:

static uint32_t SAI1_client =0;
static uint32_t SAI4_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b0ba      	sub	sp, #232	; 0xe8
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800af68:	f107 0310 	add.w	r3, r7, #16
 800af6c:	22b4      	movs	r2, #180	; 0xb4
 800af6e:	2100      	movs	r1, #0
 800af70:	4618      	mov	r0, r3
 800af72:	f002 f9e3 	bl	800d33c <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_B)
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	4aaa      	ldr	r2, [pc, #680]	; (800b224 <HAL_SAI_MspInit+0x2c4>)
 800af7c:	4293      	cmp	r3, r2
 800af7e:	f040 80a5 	bne.w	800b0cc <HAL_SAI_MspInit+0x16c>
    {
      /* Peripheral clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 800af82:	f44f 7380 	mov.w	r3, #256	; 0x100
 800af86:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 800af88:	2300      	movs	r3, #0
 800af8a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800af8c:	f107 0310 	add.w	r3, r7, #16
 800af90:	4618      	mov	r0, r3
 800af92:	f7fc fd29 	bl	80079e8 <HAL_RCCEx_PeriphCLKConfig>
 800af96:	4603      	mov	r3, r0
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d001      	beq.n	800afa0 <HAL_SAI_MspInit+0x40>
    {
      Error_Handler();
 800af9c:	f7ff ff06 	bl	800adac <Error_Handler>
    }

      if (SAI1_client == 0)
 800afa0:	4ba1      	ldr	r3, [pc, #644]	; (800b228 <HAL_SAI_MspInit+0x2c8>)
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d10e      	bne.n	800afc6 <HAL_SAI_MspInit+0x66>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800afa8:	4ba0      	ldr	r3, [pc, #640]	; (800b22c <HAL_SAI_MspInit+0x2cc>)
 800afaa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800afae:	4a9f      	ldr	r2, [pc, #636]	; (800b22c <HAL_SAI_MspInit+0x2cc>)
 800afb0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800afb4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800afb8:	4b9c      	ldr	r3, [pc, #624]	; (800b22c <HAL_SAI_MspInit+0x2cc>)
 800afba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800afbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800afc2:	60fb      	str	r3, [r7, #12]
 800afc4:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 800afc6:	4b98      	ldr	r3, [pc, #608]	; (800b228 <HAL_SAI_MspInit+0x2c8>)
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	3301      	adds	r3, #1
 800afcc:	4a96      	ldr	r2, [pc, #600]	; (800b228 <HAL_SAI_MspInit+0x2c8>)
 800afce:	6013      	str	r3, [r2, #0]
    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    PF8     ------> SAI1_SCK_B
    PF9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800afd0:	2308      	movs	r3, #8
 800afd2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800afd6:	2302      	movs	r3, #2
 800afd8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800afdc:	2300      	movs	r3, #0
 800afde:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800afe2:	2300      	movs	r3, #0
 800afe4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800afe8:	2306      	movs	r3, #6
 800afea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800afee:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800aff2:	4619      	mov	r1, r3
 800aff4:	488e      	ldr	r0, [pc, #568]	; (800b230 <HAL_SAI_MspInit+0x2d0>)
 800aff6:	f7f9 fe27 	bl	8004c48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800affa:	f44f 7340 	mov.w	r3, #768	; 0x300
 800affe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b002:	2302      	movs	r3, #2
 800b004:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b008:	2300      	movs	r3, #0
 800b00a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b00e:	2300      	movs	r3, #0
 800b010:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800b014:	2306      	movs	r3, #6
 800b016:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800b01a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800b01e:	4619      	mov	r1, r3
 800b020:	4884      	ldr	r0, [pc, #528]	; (800b234 <HAL_SAI_MspInit+0x2d4>)
 800b022:	f7f9 fe11 	bl	8004c48 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA1_Stream1;
 800b026:	4b84      	ldr	r3, [pc, #528]	; (800b238 <HAL_SAI_MspInit+0x2d8>)
 800b028:	4a84      	ldr	r2, [pc, #528]	; (800b23c <HAL_SAI_MspInit+0x2dc>)
 800b02a:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 800b02c:	4b82      	ldr	r3, [pc, #520]	; (800b238 <HAL_SAI_MspInit+0x2d8>)
 800b02e:	2258      	movs	r2, #88	; 0x58
 800b030:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b032:	4b81      	ldr	r3, [pc, #516]	; (800b238 <HAL_SAI_MspInit+0x2d8>)
 800b034:	2240      	movs	r2, #64	; 0x40
 800b036:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 800b038:	4b7f      	ldr	r3, [pc, #508]	; (800b238 <HAL_SAI_MspInit+0x2d8>)
 800b03a:	2200      	movs	r2, #0
 800b03c:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 800b03e:	4b7e      	ldr	r3, [pc, #504]	; (800b238 <HAL_SAI_MspInit+0x2d8>)
 800b040:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b044:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800b046:	4b7c      	ldr	r3, [pc, #496]	; (800b238 <HAL_SAI_MspInit+0x2d8>)
 800b048:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b04c:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800b04e:	4b7a      	ldr	r3, [pc, #488]	; (800b238 <HAL_SAI_MspInit+0x2d8>)
 800b050:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b054:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_NORMAL;
 800b056:	4b78      	ldr	r3, [pc, #480]	; (800b238 <HAL_SAI_MspInit+0x2d8>)
 800b058:	2200      	movs	r2, #0
 800b05a:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_HIGH;
 800b05c:	4b76      	ldr	r3, [pc, #472]	; (800b238 <HAL_SAI_MspInit+0x2d8>)
 800b05e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800b062:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b064:	4b74      	ldr	r3, [pc, #464]	; (800b238 <HAL_SAI_MspInit+0x2d8>)
 800b066:	2200      	movs	r2, #0
 800b068:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 800b06a:	4873      	ldr	r0, [pc, #460]	; (800b238 <HAL_SAI_MspInit+0x2d8>)
 800b06c:	f7f6 ff30 	bl	8001ed0 <HAL_DMA_Init>
 800b070:	4603      	mov	r3, r0
 800b072:	2b00      	cmp	r3, #0
 800b074:	d001      	beq.n	800b07a <HAL_SAI_MspInit+0x11a>
    {
      Error_Handler();
 800b076:	f7ff fe99 	bl	800adac <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 800b07a:	2306      	movs	r3, #6
 800b07c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_RISING;
 800b080:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b084:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    pSyncConfig.SyncEnable = DISABLE;
 800b088:	2300      	movs	r3, #0
 800b08a:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    pSyncConfig.EventEnable = ENABLE;
 800b08e:	2301      	movs	r3, #1
 800b090:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    pSyncConfig.RequestNumber = 1;
 800b094:	2301      	movs	r3, #1
 800b096:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai1_b, &pSyncConfig) != HAL_OK)
 800b09a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800b09e:	4619      	mov	r1, r3
 800b0a0:	4865      	ldr	r0, [pc, #404]	; (800b238 <HAL_SAI_MspInit+0x2d8>)
 800b0a2:	f7f9 fbff 	bl	80048a4 <HAL_DMAEx_ConfigMuxSync>
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d001      	beq.n	800b0b0 <HAL_SAI_MspInit+0x150>
    {
      Error_Handler();
 800b0ac:	f7ff fe7e 	bl	800adac <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	4a61      	ldr	r2, [pc, #388]	; (800b238 <HAL_SAI_MspInit+0x2d8>)
 800b0b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800b0b8:	4a5f      	ldr	r2, [pc, #380]	; (800b238 <HAL_SAI_MspInit+0x2d8>)
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	4a5d      	ldr	r2, [pc, #372]	; (800b238 <HAL_SAI_MspInit+0x2d8>)
 800b0c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800b0c6:	4a5c      	ldr	r2, [pc, #368]	; (800b238 <HAL_SAI_MspInit+0x2d8>)
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	6393      	str	r3, [r2, #56]	; 0x38
    }
/* SAI4 */
    if(hsai->Instance==SAI4_Block_A)
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	4a5b      	ldr	r2, [pc, #364]	; (800b240 <HAL_SAI_MspInit+0x2e0>)
 800b0d2:	4293      	cmp	r3, r2
 800b0d4:	f040 80a1 	bne.w	800b21a <HAL_SAI_MspInit+0x2ba>
    {
    /* Peripheral clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI4A;
 800b0d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0dc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Sai4AClockSelection = RCC_SAI4ACLKSOURCE_PLL;
 800b0de:	2300      	movs	r3, #0
 800b0e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b0e4:	f107 0310 	add.w	r3, r7, #16
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	f7fc fc7d 	bl	80079e8 <HAL_RCCEx_PeriphCLKConfig>
 800b0ee:	4603      	mov	r3, r0
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d001      	beq.n	800b0f8 <HAL_SAI_MspInit+0x198>
    {
      Error_Handler();
 800b0f4:	f7ff fe5a 	bl	800adac <Error_Handler>
    }

    if (SAI4_client == 0)
 800b0f8:	4b52      	ldr	r3, [pc, #328]	; (800b244 <HAL_SAI_MspInit+0x2e4>)
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d10e      	bne.n	800b11e <HAL_SAI_MspInit+0x1be>
    {
       __HAL_RCC_SAI4_CLK_ENABLE();
 800b100:	4b4a      	ldr	r3, [pc, #296]	; (800b22c <HAL_SAI_MspInit+0x2cc>)
 800b102:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b106:	4a49      	ldr	r2, [pc, #292]	; (800b22c <HAL_SAI_MspInit+0x2cc>)
 800b108:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b10c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800b110:	4b46      	ldr	r3, [pc, #280]	; (800b22c <HAL_SAI_MspInit+0x2cc>)
 800b112:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b116:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b11a:	60bb      	str	r3, [r7, #8]
 800b11c:	68bb      	ldr	r3, [r7, #8]
    }
    SAI4_client ++;
 800b11e:	4b49      	ldr	r3, [pc, #292]	; (800b244 <HAL_SAI_MspInit+0x2e4>)
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	3301      	adds	r3, #1
 800b124:	4a47      	ldr	r2, [pc, #284]	; (800b244 <HAL_SAI_MspInit+0x2e4>)
 800b126:	6013      	str	r3, [r2, #0]
    /**SAI4_A_Block_A GPIO Configuration
    PE4     ------> SAI4_D2
    PE5     ------> SAI4_CK2
    PD6     ------> SAI4_D1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800b128:	2330      	movs	r3, #48	; 0x30
 800b12a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b12e:	2302      	movs	r3, #2
 800b130:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b134:	2300      	movs	r3, #0
 800b136:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b13a:	2300      	movs	r3, #0
 800b13c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 800b140:	230a      	movs	r3, #10
 800b142:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800b146:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800b14a:	4619      	mov	r1, r3
 800b14c:	4838      	ldr	r0, [pc, #224]	; (800b230 <HAL_SAI_MspInit+0x2d0>)
 800b14e:	f7f9 fd7b 	bl	8004c48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800b152:	2340      	movs	r3, #64	; 0x40
 800b154:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b158:	2302      	movs	r3, #2
 800b15a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b15e:	2300      	movs	r3, #0
 800b160:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b164:	2300      	movs	r3, #0
 800b166:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF1_SAI4;
 800b16a:	2301      	movs	r3, #1
 800b16c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b170:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800b174:	4619      	mov	r1, r3
 800b176:	4834      	ldr	r0, [pc, #208]	; (800b248 <HAL_SAI_MspInit+0x2e8>)
 800b178:	f7f9 fd66 	bl	8004c48 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai4_a.Instance = BDMA_Channel1;
 800b17c:	4b33      	ldr	r3, [pc, #204]	; (800b24c <HAL_SAI_MspInit+0x2ec>)
 800b17e:	4a34      	ldr	r2, [pc, #208]	; (800b250 <HAL_SAI_MspInit+0x2f0>)
 800b180:	601a      	str	r2, [r3, #0]
    hdma_sai4_a.Init.Request = BDMA_REQUEST_SAI4_A;
 800b182:	4b32      	ldr	r3, [pc, #200]	; (800b24c <HAL_SAI_MspInit+0x2ec>)
 800b184:	220f      	movs	r2, #15
 800b186:	605a      	str	r2, [r3, #4]
    hdma_sai4_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b188:	4b30      	ldr	r3, [pc, #192]	; (800b24c <HAL_SAI_MspInit+0x2ec>)
 800b18a:	2200      	movs	r2, #0
 800b18c:	609a      	str	r2, [r3, #8]
    hdma_sai4_a.Init.PeriphInc = DMA_PINC_DISABLE;
 800b18e:	4b2f      	ldr	r3, [pc, #188]	; (800b24c <HAL_SAI_MspInit+0x2ec>)
 800b190:	2200      	movs	r2, #0
 800b192:	60da      	str	r2, [r3, #12]
    hdma_sai4_a.Init.MemInc = DMA_MINC_ENABLE;
 800b194:	4b2d      	ldr	r3, [pc, #180]	; (800b24c <HAL_SAI_MspInit+0x2ec>)
 800b196:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b19a:	611a      	str	r2, [r3, #16]
    hdma_sai4_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b19c:	4b2b      	ldr	r3, [pc, #172]	; (800b24c <HAL_SAI_MspInit+0x2ec>)
 800b19e:	2200      	movs	r2, #0
 800b1a0:	615a      	str	r2, [r3, #20]
    hdma_sai4_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800b1a2:	4b2a      	ldr	r3, [pc, #168]	; (800b24c <HAL_SAI_MspInit+0x2ec>)
 800b1a4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b1a8:	619a      	str	r2, [r3, #24]
    hdma_sai4_a.Init.Mode = DMA_CIRCULAR;
 800b1aa:	4b28      	ldr	r3, [pc, #160]	; (800b24c <HAL_SAI_MspInit+0x2ec>)
 800b1ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b1b0:	61da      	str	r2, [r3, #28]
    hdma_sai4_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800b1b2:	4b26      	ldr	r3, [pc, #152]	; (800b24c <HAL_SAI_MspInit+0x2ec>)
 800b1b4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800b1b8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai4_a) != HAL_OK)
 800b1ba:	4824      	ldr	r0, [pc, #144]	; (800b24c <HAL_SAI_MspInit+0x2ec>)
 800b1bc:	f7f6 fe88 	bl	8001ed0 <HAL_DMA_Init>
 800b1c0:	4603      	mov	r3, r0
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d001      	beq.n	800b1ca <HAL_SAI_MspInit+0x26a>
    {
      Error_Handler();
 800b1c6:	f7ff fdf1 	bl	800adac <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX2_SYNC_EXTI0;
 800b1ca:	230e      	movs	r3, #14
 800b1cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    pSyncConfig.SyncEnable = DISABLE;
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    pSyncConfig.EventEnable = ENABLE;
 800b1dc:	2301      	movs	r3, #1
 800b1de:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    pSyncConfig.RequestNumber = 1;
 800b1e2:	2301      	movs	r3, #1
 800b1e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai4_a, &pSyncConfig) != HAL_OK)
 800b1e8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800b1ec:	4619      	mov	r1, r3
 800b1ee:	4817      	ldr	r0, [pc, #92]	; (800b24c <HAL_SAI_MspInit+0x2ec>)
 800b1f0:	f7f9 fb58 	bl	80048a4 <HAL_DMAEx_ConfigMuxSync>
 800b1f4:	4603      	mov	r3, r0
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d001      	beq.n	800b1fe <HAL_SAI_MspInit+0x29e>
    {
      Error_Handler();
 800b1fa:	f7ff fdd7 	bl	800adac <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai4_a);
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	4a12      	ldr	r2, [pc, #72]	; (800b24c <HAL_SAI_MspInit+0x2ec>)
 800b202:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800b206:	4a11      	ldr	r2, [pc, #68]	; (800b24c <HAL_SAI_MspInit+0x2ec>)
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai4_a);
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	4a0f      	ldr	r2, [pc, #60]	; (800b24c <HAL_SAI_MspInit+0x2ec>)
 800b210:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800b214:	4a0d      	ldr	r2, [pc, #52]	; (800b24c <HAL_SAI_MspInit+0x2ec>)
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	6393      	str	r3, [r2, #56]	; 0x38

    }
}
 800b21a:	bf00      	nop
 800b21c:	37e8      	adds	r7, #232	; 0xe8
 800b21e:	46bd      	mov	sp, r7
 800b220:	bd80      	pop	{r7, pc}
 800b222:	bf00      	nop
 800b224:	40015824 	.word	0x40015824
 800b228:	24000528 	.word	0x24000528
 800b22c:	58024400 	.word	0x58024400
 800b230:	58021000 	.word	0x58021000
 800b234:	58021400 	.word	0x58021400
 800b238:	2400086c 	.word	0x2400086c
 800b23c:	40020028 	.word	0x40020028
 800b240:	58005404 	.word	0x58005404
 800b244:	2400052c 	.word	0x2400052c
 800b248:	58020c00 	.word	0x58020c00
 800b24c:	240007e4 	.word	0x240007e4
 800b250:	5802541c 	.word	0x5802541c

0800b254 <HAL_SAI_MspDeInit>:

void HAL_SAI_MspDeInit(SAI_HandleTypeDef* hsai)
{
 800b254:	b580      	push	{r7, lr}
 800b256:	b082      	sub	sp, #8
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
/* SAI1 */
    if(hsai->Instance==SAI1_Block_B)
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	4a2b      	ldr	r2, [pc, #172]	; (800b310 <HAL_SAI_MspDeInit+0xbc>)
 800b262:	4293      	cmp	r3, r2
 800b264:	d125      	bne.n	800b2b2 <HAL_SAI_MspDeInit+0x5e>
    {
    SAI1_client --;
 800b266:	4b2b      	ldr	r3, [pc, #172]	; (800b314 <HAL_SAI_MspDeInit+0xc0>)
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	3b01      	subs	r3, #1
 800b26c:	4a29      	ldr	r2, [pc, #164]	; (800b314 <HAL_SAI_MspDeInit+0xc0>)
 800b26e:	6013      	str	r3, [r2, #0]
      if (SAI1_client == 0)
 800b270:	4b28      	ldr	r3, [pc, #160]	; (800b314 <HAL_SAI_MspDeInit+0xc0>)
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d107      	bne.n	800b288 <HAL_SAI_MspDeInit+0x34>
      {
      /* Peripheral clock disable */
      __HAL_RCC_SAI1_CLK_DISABLE();
 800b278:	4b27      	ldr	r3, [pc, #156]	; (800b318 <HAL_SAI_MspDeInit+0xc4>)
 800b27a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b27e:	4a26      	ldr	r2, [pc, #152]	; (800b318 <HAL_SAI_MspDeInit+0xc4>)
 800b280:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800b284:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    PF8     ------> SAI1_SCK_B
    PF9     ------> SAI1_FS_B
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_3);
 800b288:	2108      	movs	r1, #8
 800b28a:	4824      	ldr	r0, [pc, #144]	; (800b31c <HAL_SAI_MspDeInit+0xc8>)
 800b28c:	f7f9 fe84 	bl	8004f98 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_8|GPIO_PIN_9);
 800b290:	f44f 7140 	mov.w	r1, #768	; 0x300
 800b294:	4822      	ldr	r0, [pc, #136]	; (800b320 <HAL_SAI_MspDeInit+0xcc>)
 800b296:	f7f9 fe7f 	bl	8004f98 <HAL_GPIO_DeInit>

    /* SAI1 DMA Deinit */
    HAL_DMA_DeInit(hsai->hdmarx);
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	f7f7 f96f 	bl	8002584 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hsai->hdmatx);
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	f7f7 f969 	bl	8002584 <HAL_DMA_DeInit>
    }
/* SAI4 */
    if(hsai->Instance==SAI4_Block_A)
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	4a1b      	ldr	r2, [pc, #108]	; (800b324 <HAL_SAI_MspDeInit+0xd0>)
 800b2b8:	4293      	cmp	r3, r2
 800b2ba:	d124      	bne.n	800b306 <HAL_SAI_MspDeInit+0xb2>
    {
    SAI4_client --;
 800b2bc:	4b1a      	ldr	r3, [pc, #104]	; (800b328 <HAL_SAI_MspDeInit+0xd4>)
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	3b01      	subs	r3, #1
 800b2c2:	4a19      	ldr	r2, [pc, #100]	; (800b328 <HAL_SAI_MspDeInit+0xd4>)
 800b2c4:	6013      	str	r3, [r2, #0]
    if (SAI4_client == 0)
 800b2c6:	4b18      	ldr	r3, [pc, #96]	; (800b328 <HAL_SAI_MspDeInit+0xd4>)
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d107      	bne.n	800b2de <HAL_SAI_MspDeInit+0x8a>
      {
      /* Peripheral clock disable */
       __HAL_RCC_SAI4_CLK_DISABLE();
 800b2ce:	4b12      	ldr	r3, [pc, #72]	; (800b318 <HAL_SAI_MspDeInit+0xc4>)
 800b2d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b2d4:	4a10      	ldr	r2, [pc, #64]	; (800b318 <HAL_SAI_MspDeInit+0xc4>)
 800b2d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b2da:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
    /**SAI4_A_Block_A GPIO Configuration
    PE4     ------> SAI4_D2
    PE5     ------> SAI4_CK2
    PD6     ------> SAI4_D1
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_4|GPIO_PIN_5);
 800b2de:	2130      	movs	r1, #48	; 0x30
 800b2e0:	480e      	ldr	r0, [pc, #56]	; (800b31c <HAL_SAI_MspDeInit+0xc8>)
 800b2e2:	f7f9 fe59 	bl	8004f98 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_6);
 800b2e6:	2140      	movs	r1, #64	; 0x40
 800b2e8:	4810      	ldr	r0, [pc, #64]	; (800b32c <HAL_SAI_MspDeInit+0xd8>)
 800b2ea:	f7f9 fe55 	bl	8004f98 <HAL_GPIO_DeInit>

    /* SAI4 DMA Deinit */
    HAL_DMA_DeInit(hsai->hdmarx);
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	f7f7 f945 	bl	8002584 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hsai->hdmatx);
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b300:	4618      	mov	r0, r3
 800b302:	f7f7 f93f 	bl	8002584 <HAL_DMA_DeInit>
    }
}
 800b306:	bf00      	nop
 800b308:	3708      	adds	r7, #8
 800b30a:	46bd      	mov	sp, r7
 800b30c:	bd80      	pop	{r7, pc}
 800b30e:	bf00      	nop
 800b310:	40015824 	.word	0x40015824
 800b314:	24000528 	.word	0x24000528
 800b318:	58024400 	.word	0x58024400
 800b31c:	58021000 	.word	0x58021000
 800b320:	58021400 	.word	0x58021400
 800b324:	58005404 	.word	0x58005404
 800b328:	2400052c 	.word	0x2400052c
 800b32c:	58020c00 	.word	0x58020c00

0800b330 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b330:	b480      	push	{r7}
 800b332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800b334:	e7fe      	b.n	800b334 <NMI_Handler+0x4>

0800b336 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b336:	b480      	push	{r7}
 800b338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b33a:	e7fe      	b.n	800b33a <HardFault_Handler+0x4>

0800b33c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b33c:	b480      	push	{r7}
 800b33e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b340:	e7fe      	b.n	800b340 <MemManage_Handler+0x4>

0800b342 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b342:	b480      	push	{r7}
 800b344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b346:	e7fe      	b.n	800b346 <BusFault_Handler+0x4>

0800b348 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b348:	b480      	push	{r7}
 800b34a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b34c:	e7fe      	b.n	800b34c <UsageFault_Handler+0x4>

0800b34e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800b34e:	b480      	push	{r7}
 800b350:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800b352:	bf00      	nop
 800b354:	46bd      	mov	sp, r7
 800b356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35a:	4770      	bx	lr

0800b35c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b35c:	b480      	push	{r7}
 800b35e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b360:	bf00      	nop
 800b362:	46bd      	mov	sp, r7
 800b364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b368:	4770      	bx	lr

0800b36a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800b36a:	b480      	push	{r7}
 800b36c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800b36e:	bf00      	nop
 800b370:	46bd      	mov	sp, r7
 800b372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b376:	4770      	bx	lr

0800b378 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800b37c:	f7f6 fb8e 	bl	8001a9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800b380:	bf00      	nop
 800b382:	bd80      	pop	{r7, pc}

0800b384 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800b384:	b580      	push	{r7, lr}
 800b386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	BSP_LED_On(LED1);
 800b388:	2000      	movs	r0, #0
 800b38a:	f7f6 fad9 	bl	8001940 <BSP_LED_On>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800b38e:	2001      	movs	r0, #1
 800b390:	f7f9 ff1d 	bl	80051ce <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  /* USER CODE END EXTI0_IRQn 1 */
}
 800b394:	bf00      	nop
 800b396:	bd80      	pop	{r7, pc}

0800b398 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 800b39c:	4802      	ldr	r0, [pc, #8]	; (800b3a8 <DMA1_Stream1_IRQHandler+0x10>)
 800b39e:	f7f7 ff55 	bl	800324c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800b3a2:	bf00      	nop
 800b3a4:	bd80      	pop	{r7, pc}
 800b3a6:	bf00      	nop
 800b3a8:	2400086c 	.word	0x2400086c

0800b3ac <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma2_stream0);
 800b3b0:	4803      	ldr	r0, [pc, #12]	; (800b3c0 <DMA2_Stream0_IRQHandler+0x14>)
 800b3b2:	f7f7 ff4b 	bl	800324c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */
  BSP_LED_On(LED1);
 800b3b6:	2000      	movs	r0, #0
 800b3b8:	f7f6 fac2 	bl	8001940 <BSP_LED_On>
  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800b3bc:	bf00      	nop
 800b3be:	bd80      	pop	{r7, pc}
 800b3c0:	24000590 	.word	0x24000590

0800b3c4 <I2C4_ER_IRQHandler>:

/**
  * @brief This function handles I2C4 error interrupt.
  */
void I2C4_ER_IRQHandler(void)
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_ER_IRQn 0 */

  /* USER CODE END I2C4_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c4);
 800b3c8:	4802      	ldr	r0, [pc, #8]	; (800b3d4 <I2C4_ER_IRQHandler+0x10>)
 800b3ca:	f7fa f9e3 	bl	8005794 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C4_ER_IRQn 1 */

  /* USER CODE END I2C4_ER_IRQn 1 */
}
 800b3ce:	bf00      	nop
 800b3d0:	bd80      	pop	{r7, pc}
 800b3d2:	bf00      	nop
 800b3d4:	24000534 	.word	0x24000534

0800b3d8 <DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX1 overrun interrupt.
  */
void DMAMUX1_OVR_IRQHandler(void)
{
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMAMUX1_OVR_IRQn 0 */
  // Handle DMA1_Stream1
  HAL_DMAEx_MUX_IRQHandler(&hdma_sai1_b);
 800b3dc:	4802      	ldr	r0, [pc, #8]	; (800b3e8 <DMAMUX1_OVR_IRQHandler+0x10>)
 800b3de:	f7f9 fbe1 	bl	8004ba4 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMAMUX1_OVR_IRQn 1 */
}
 800b3e2:	bf00      	nop
 800b3e4:	bd80      	pop	{r7, pc}
 800b3e6:	bf00      	nop
 800b3e8:	2400086c 	.word	0x2400086c

0800b3ec <DMAMUX2_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX2 overrun interrupt.
  */
void DMAMUX2_OVR_IRQHandler(void)
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX2_OVR_IRQn 0 */

  /* USER CODE END DMAMUX2_OVR_IRQn 0 */
  // Handle BDMA_Channel1
  HAL_DMAEx_MUX_IRQHandler(&hdma_sai4_a);
 800b3f0:	4802      	ldr	r0, [pc, #8]	; (800b3fc <DMAMUX2_OVR_IRQHandler+0x10>)
 800b3f2:	f7f9 fbd7 	bl	8004ba4 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX2_OVR_IRQn 1 */
  /* USER CODE END DMAMUX2_OVR_IRQn 1 */
}
 800b3f6:	bf00      	nop
 800b3f8:	bd80      	pop	{r7, pc}
 800b3fa:	bf00      	nop
 800b3fc:	240007e4 	.word	0x240007e4

0800b400 <BDMA_Channel1_IRQHandler>:

/**
  * @brief This function handles BDMA channel1 global interrupt.
  */
void BDMA_Channel1_IRQHandler(void)
{
 800b400:	b580      	push	{r7, lr}
 800b402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel1_IRQn 0 */

  /* USER CODE END BDMA_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai4_a);
 800b404:	4803      	ldr	r0, [pc, #12]	; (800b414 <BDMA_Channel1_IRQHandler+0x14>)
 800b406:	f7f7 ff21 	bl	800324c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel1_IRQn 1 */
  BSP_LED_On(LED2);
 800b40a:	2001      	movs	r0, #1
 800b40c:	f7f6 fa98 	bl	8001940 <BSP_LED_On>
  /* USER CODE END BDMA_Channel1_IRQn 1 */
}
 800b410:	bf00      	nop
 800b412:	bd80      	pop	{r7, pc}
 800b414:	240007e4 	.word	0x240007e4

0800b418 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800b418:	b480      	push	{r7}
 800b41a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800b41c:	4b32      	ldr	r3, [pc, #200]	; (800b4e8 <SystemInit+0xd0>)
 800b41e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b422:	4a31      	ldr	r2, [pc, #196]	; (800b4e8 <SystemInit+0xd0>)
 800b424:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b428:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800b42c:	4b2f      	ldr	r3, [pc, #188]	; (800b4ec <SystemInit+0xd4>)
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	f003 030f 	and.w	r3, r3, #15
 800b434:	2b06      	cmp	r3, #6
 800b436:	d807      	bhi.n	800b448 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800b438:	4b2c      	ldr	r3, [pc, #176]	; (800b4ec <SystemInit+0xd4>)
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	f023 030f 	bic.w	r3, r3, #15
 800b440:	4a2a      	ldr	r2, [pc, #168]	; (800b4ec <SystemInit+0xd4>)
 800b442:	f043 0307 	orr.w	r3, r3, #7
 800b446:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800b448:	4b29      	ldr	r3, [pc, #164]	; (800b4f0 <SystemInit+0xd8>)
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	4a28      	ldr	r2, [pc, #160]	; (800b4f0 <SystemInit+0xd8>)
 800b44e:	f043 0301 	orr.w	r3, r3, #1
 800b452:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800b454:	4b26      	ldr	r3, [pc, #152]	; (800b4f0 <SystemInit+0xd8>)
 800b456:	2200      	movs	r2, #0
 800b458:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800b45a:	4b25      	ldr	r3, [pc, #148]	; (800b4f0 <SystemInit+0xd8>)
 800b45c:	681a      	ldr	r2, [r3, #0]
 800b45e:	4924      	ldr	r1, [pc, #144]	; (800b4f0 <SystemInit+0xd8>)
 800b460:	4b24      	ldr	r3, [pc, #144]	; (800b4f4 <SystemInit+0xdc>)
 800b462:	4013      	ands	r3, r2
 800b464:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800b466:	4b21      	ldr	r3, [pc, #132]	; (800b4ec <SystemInit+0xd4>)
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	f003 0308 	and.w	r3, r3, #8
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d007      	beq.n	800b482 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800b472:	4b1e      	ldr	r3, [pc, #120]	; (800b4ec <SystemInit+0xd4>)
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	f023 030f 	bic.w	r3, r3, #15
 800b47a:	4a1c      	ldr	r2, [pc, #112]	; (800b4ec <SystemInit+0xd4>)
 800b47c:	f043 0307 	orr.w	r3, r3, #7
 800b480:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800b482:	4b1b      	ldr	r3, [pc, #108]	; (800b4f0 <SystemInit+0xd8>)
 800b484:	2200      	movs	r2, #0
 800b486:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800b488:	4b19      	ldr	r3, [pc, #100]	; (800b4f0 <SystemInit+0xd8>)
 800b48a:	2200      	movs	r2, #0
 800b48c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800b48e:	4b18      	ldr	r3, [pc, #96]	; (800b4f0 <SystemInit+0xd8>)
 800b490:	2200      	movs	r2, #0
 800b492:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800b494:	4b16      	ldr	r3, [pc, #88]	; (800b4f0 <SystemInit+0xd8>)
 800b496:	4a18      	ldr	r2, [pc, #96]	; (800b4f8 <SystemInit+0xe0>)
 800b498:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800b49a:	4b15      	ldr	r3, [pc, #84]	; (800b4f0 <SystemInit+0xd8>)
 800b49c:	4a17      	ldr	r2, [pc, #92]	; (800b4fc <SystemInit+0xe4>)
 800b49e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800b4a0:	4b13      	ldr	r3, [pc, #76]	; (800b4f0 <SystemInit+0xd8>)
 800b4a2:	4a17      	ldr	r2, [pc, #92]	; (800b500 <SystemInit+0xe8>)
 800b4a4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800b4a6:	4b12      	ldr	r3, [pc, #72]	; (800b4f0 <SystemInit+0xd8>)
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800b4ac:	4b10      	ldr	r3, [pc, #64]	; (800b4f0 <SystemInit+0xd8>)
 800b4ae:	4a14      	ldr	r2, [pc, #80]	; (800b500 <SystemInit+0xe8>)
 800b4b0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800b4b2:	4b0f      	ldr	r3, [pc, #60]	; (800b4f0 <SystemInit+0xd8>)
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800b4b8:	4b0d      	ldr	r3, [pc, #52]	; (800b4f0 <SystemInit+0xd8>)
 800b4ba:	4a11      	ldr	r2, [pc, #68]	; (800b500 <SystemInit+0xe8>)
 800b4bc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800b4be:	4b0c      	ldr	r3, [pc, #48]	; (800b4f0 <SystemInit+0xd8>)
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800b4c4:	4b0a      	ldr	r3, [pc, #40]	; (800b4f0 <SystemInit+0xd8>)
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	4a09      	ldr	r2, [pc, #36]	; (800b4f0 <SystemInit+0xd8>)
 800b4ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b4ce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800b4d0:	4b07      	ldr	r3, [pc, #28]	; (800b4f0 <SystemInit+0xd8>)
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800b4d6:	4b0b      	ldr	r3, [pc, #44]	; (800b504 <SystemInit+0xec>)
 800b4d8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800b4dc:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 800b4de:	bf00      	nop
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e6:	4770      	bx	lr
 800b4e8:	e000ed00 	.word	0xe000ed00
 800b4ec:	52002000 	.word	0x52002000
 800b4f0:	58024400 	.word	0x58024400
 800b4f4:	eaf6ed7f 	.word	0xeaf6ed7f
 800b4f8:	02020200 	.word	0x02020200
 800b4fc:	01ff0000 	.word	0x01ff0000
 800b500:	01010280 	.word	0x01010280
 800b504:	52004000 	.word	0x52004000

0800b508 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800b508:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b540 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800b50c:	f7ff ff84 	bl	800b418 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800b510:	480c      	ldr	r0, [pc, #48]	; (800b544 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800b512:	490d      	ldr	r1, [pc, #52]	; (800b548 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800b514:	4a0d      	ldr	r2, [pc, #52]	; (800b54c <LoopFillZerobss+0x1a>)
  movs r3, #0
 800b516:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800b518:	e002      	b.n	800b520 <LoopCopyDataInit>

0800b51a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800b51a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800b51c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800b51e:	3304      	adds	r3, #4

0800b520 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800b520:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800b522:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800b524:	d3f9      	bcc.n	800b51a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800b526:	4a0a      	ldr	r2, [pc, #40]	; (800b550 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800b528:	4c0a      	ldr	r4, [pc, #40]	; (800b554 <LoopFillZerobss+0x22>)
  movs r3, #0
 800b52a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800b52c:	e001      	b.n	800b532 <LoopFillZerobss>

0800b52e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800b52e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800b530:	3204      	adds	r2, #4

0800b532 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800b532:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800b534:	d3fb      	bcc.n	800b52e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800b536:	f001 fedd 	bl	800d2f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b53a:	f7ff f859 	bl	800a5f0 <main>
  bx  lr
 800b53e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800b540:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800b544:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800b548:	24000488 	.word	0x24000488
  ldr r2, =_sidata
 800b54c:	0800d9c0 	.word	0x0800d9c0
  ldr r2, =_sbss
 800b550:	24000488 	.word	0x24000488
  ldr r4, =_ebss
 800b554:	24000960 	.word	0x24000960

0800b558 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b558:	e7fe      	b.n	800b558 <ADC3_IRQHandler>
	...

0800b55c <D16_GENERIC>:
 800b55c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b560:	b089      	sub	sp, #36	; 0x24
 800b562:	6993      	ldr	r3, [r2, #24]
 800b564:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800b566:	9103      	str	r1, [sp, #12]
 800b568:	9307      	str	r3, [sp, #28]
 800b56a:	69d3      	ldr	r3, [r2, #28]
 800b56c:	e9d2 c102 	ldrd	ip, r1, [r2, #8]
 800b570:	e9d2 4a04 	ldrd	r4, sl, [r2, #16]
 800b574:	9106      	str	r1, [sp, #24]
 800b576:	e9d2 810c 	ldrd	r8, r1, [r2, #48]	; 0x30
 800b57a:	2d00      	cmp	r5, #0
 800b57c:	d063      	beq.n	800b646 <D16_GENERIC+0xea>
 800b57e:	f001 0520 	and.w	r5, r1, #32
 800b582:	f001 0110 	and.w	r1, r1, #16
 800b586:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 800b668 <D16_GENERIC+0x10c>
 800b58a:	46c1      	mov	r9, r8
 800b58c:	9104      	str	r1, [sp, #16]
 800b58e:	2100      	movs	r1, #0
 800b590:	9505      	str	r5, [sp, #20]
 800b592:	e04d      	b.n	800b630 <D16_GENERIC+0xd4>
 800b594:	5d87      	ldrb	r7, [r0, r6]
 800b596:	7805      	ldrb	r5, [r0, #0]
 800b598:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 800b59c:	eb05 2707 	add.w	r7, r5, r7, lsl #8
 800b5a0:	b2fe      	uxtb	r6, r7
 800b5a2:	f3c7 2707 	ubfx	r7, r7, #8, #8
 800b5a6:	f85e 5026 	ldr.w	r5, [lr, r6, lsl #2]
 800b5aa:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
 800b5ae:	441d      	add	r5, r3
 800b5b0:	eb06 2395 	add.w	r3, r6, r5, lsr #10
 800b5b4:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800b5b8:	f3c3 0609 	ubfx	r6, r3, #0, #10
 800b5bc:	0a9b      	lsrs	r3, r3, #10
 800b5be:	ea46 4605 	orr.w	r6, r6, r5, lsl #16
 800b5c2:	4d27      	ldr	r5, [pc, #156]	; (800b660 <D16_GENERIC+0x104>)
 800b5c4:	fb26 c505 	smlad	r5, r6, r5, ip
 800b5c8:	4f26      	ldr	r7, [pc, #152]	; (800b664 <D16_GENERIC+0x108>)
 800b5ca:	fb26 fc07 	smuad	ip, r6, r7
 800b5ce:	9e04      	ldr	r6, [sp, #16]
 800b5d0:	f101 0801 	add.w	r8, r1, #1
 800b5d4:	f5a5 6500 	sub.w	r5, r5, #2048	; 0x800
 800b5d8:	b1ae      	cbz	r6, 800b606 <D16_GENERIC+0xaa>
 800b5da:	442c      	add	r4, r5
 800b5dc:	f8d2 b020 	ldr.w	fp, [r2, #32]
 800b5e0:	eba4 040a 	sub.w	r4, r4, sl
 800b5e4:	46aa      	mov	sl, r5
 800b5e6:	17e7      	asrs	r7, r4, #31
 800b5e8:	fba4 450b 	umull	r4, r5, r4, fp
 800b5ec:	e9cd 4500 	strd	r4, r5, [sp]
 800b5f0:	fb0b 5407 	mla	r4, fp, r7, r5
 800b5f4:	9401      	str	r4, [sp, #4]
 800b5f6:	e9dd 4500 	ldrd	r4, r5, [sp]
 800b5fa:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800b5fe:	f145 0500 	adc.w	r5, r5, #0
 800b602:	006c      	lsls	r4, r5, #1
 800b604:	4625      	mov	r5, r4
 800b606:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 800b60a:	042d      	lsls	r5, r5, #16
 800b60c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b610:	2700      	movs	r7, #0
 800b612:	fb01 fb0b 	mul.w	fp, r1, fp
 800b616:	fa1f f188 	uxth.w	r1, r8
 800b61a:	fbc9 6705 	smlal	r6, r7, r9, r5
 800b61e:	9e03      	ldr	r6, [sp, #12]
 800b620:	10bd      	asrs	r5, r7, #2
 800b622:	f305 050f 	ssat	r5, #16, r5
 800b626:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 800b62a:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800b62c:	428d      	cmp	r5, r1
 800b62e:	d90a      	bls.n	800b646 <D16_GENERIC+0xea>
 800b630:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800b632:	2d01      	cmp	r5, #1
 800b634:	b2ee      	uxtb	r6, r5
 800b636:	d1ad      	bne.n	800b594 <D16_GENERIC+0x38>
 800b638:	9d05      	ldr	r5, [sp, #20]
 800b63a:	f850 7b02 	ldr.w	r7, [r0], #2
 800b63e:	2d00      	cmp	r5, #0
 800b640:	d0ae      	beq.n	800b5a0 <D16_GENERIC+0x44>
 800b642:	ba7f      	rev16	r7, r7
 800b644:	e7ac      	b.n	800b5a0 <D16_GENERIC+0x44>
 800b646:	2000      	movs	r0, #0
 800b648:	9906      	ldr	r1, [sp, #24]
 800b64a:	61d3      	str	r3, [r2, #28]
 800b64c:	9b07      	ldr	r3, [sp, #28]
 800b64e:	f8c2 c008 	str.w	ip, [r2, #8]
 800b652:	60d1      	str	r1, [r2, #12]
 800b654:	6193      	str	r3, [r2, #24]
 800b656:	e9c2 4a04 	strd	r4, sl, [r2, #16]
 800b65a:	b009      	add	sp, #36	; 0x24
 800b65c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b660:	00030001 	.word	0x00030001
 800b664:	00010003 	.word	0x00010003
 800b668:	24000000 	.word	0x24000000

0800b66c <D24_GENERIC>:
 800b66c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b670:	e9d2 4304 	ldrd	r4, r3, [r2, #16]
 800b674:	b089      	sub	sp, #36	; 0x24
 800b676:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 800b678:	9303      	str	r3, [sp, #12]
 800b67a:	6993      	ldr	r3, [r2, #24]
 800b67c:	9104      	str	r1, [sp, #16]
 800b67e:	9307      	str	r3, [sp, #28]
 800b680:	69d1      	ldr	r1, [r2, #28]
 800b682:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 800b686:	e9d2 a50c 	ldrd	sl, r5, [r2, #48]	; 0x30
 800b68a:	2e00      	cmp	r6, #0
 800b68c:	f000 8088 	beq.w	800b7a0 <D24_GENERIC+0x134>
 800b690:	f005 0620 	and.w	r6, r5, #32
 800b694:	f005 0510 	and.w	r5, r5, #16
 800b698:	f04f 0c00 	mov.w	ip, #0
 800b69c:	f8df e140 	ldr.w	lr, [pc, #320]	; 800b7e0 <D24_GENERIC+0x174>
 800b6a0:	9606      	str	r6, [sp, #24]
 800b6a2:	9505      	str	r5, [sp, #20]
 800b6a4:	e064      	b.n	800b770 <D24_GENERIC+0x104>
 800b6a6:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 800b6aa:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 800b6ae:	f810 b007 	ldrb.w	fp, [r0, r7]
 800b6b2:	042d      	lsls	r5, r5, #16
 800b6b4:	19f0      	adds	r0, r6, r7
 800b6b6:	eb05 250b 	add.w	r5, r5, fp, lsl #8
 800b6ba:	44a9      	add	r9, r5
 800b6bc:	fa5f f689 	uxtb.w	r6, r9
 800b6c0:	f3c9 2707 	ubfx	r7, r9, #8, #8
 800b6c4:	ea4f 4919 	mov.w	r9, r9, lsr #16
 800b6c8:	f85e 6026 	ldr.w	r6, [lr, r6, lsl #2]
 800b6cc:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
 800b6d0:	eb06 2691 	add.w	r6, r6, r1, lsr #10
 800b6d4:	f85e 1029 	ldr.w	r1, [lr, r9, lsl #2]
 800b6d8:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 800b6dc:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800b6e0:	f3c7 0509 	ubfx	r5, r7, #0, #10
 800b6e4:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 800b6e8:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 800b6ec:	4d3a      	ldr	r5, [pc, #232]	; (800b7d8 <D24_GENERIC+0x16c>)
 800b6ee:	fb26 8705 	smlad	r7, r6, r5, r8
 800b6f2:	4d3a      	ldr	r5, [pc, #232]	; (800b7dc <D24_GENERIC+0x170>)
 800b6f4:	fb26 3805 	smlad	r8, r6, r5, r3
 800b6f8:	f3c1 0309 	ubfx	r3, r1, #0, #10
 800b6fc:	eb03 0b43 	add.w	fp, r3, r3, lsl #1
 800b700:	2301      	movs	r3, #1
 800b702:	eb08 084b 	add.w	r8, r8, fp, lsl #1
 800b706:	fb26 f603 	smuad	r6, r6, r3
 800b70a:	eb0c 0903 	add.w	r9, ip, r3
 800b70e:	eb0b 0306 	add.w	r3, fp, r6
 800b712:	9e05      	ldr	r6, [sp, #20]
 800b714:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 800b718:	b1ae      	cbz	r6, 800b746 <D24_GENERIC+0xda>
 800b71a:	442c      	add	r4, r5
 800b71c:	9e03      	ldr	r6, [sp, #12]
 800b71e:	f8d2 b020 	ldr.w	fp, [r2, #32]
 800b722:	1ba4      	subs	r4, r4, r6
 800b724:	9503      	str	r5, [sp, #12]
 800b726:	17e7      	asrs	r7, r4, #31
 800b728:	fba4 450b 	umull	r4, r5, r4, fp
 800b72c:	e9cd 4500 	strd	r4, r5, [sp]
 800b730:	fb0b 5407 	mla	r4, fp, r7, r5
 800b734:	9401      	str	r4, [sp, #4]
 800b736:	e9dd 4500 	ldrd	r4, r5, [sp]
 800b73a:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800b73e:	f145 0500 	adc.w	r5, r5, #0
 800b742:	006c      	lsls	r4, r5, #1
 800b744:	4625      	mov	r5, r4
 800b746:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 800b74a:	03ad      	lsls	r5, r5, #14
 800b74c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b750:	2700      	movs	r7, #0
 800b752:	fb0c fb0b 	mul.w	fp, ip, fp
 800b756:	fa1f fc89 	uxth.w	ip, r9
 800b75a:	fbca 6705 	smlal	r6, r7, sl, r5
 800b75e:	9e04      	ldr	r6, [sp, #16]
 800b760:	10bd      	asrs	r5, r7, #2
 800b762:	f305 050f 	ssat	r5, #16, r5
 800b766:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 800b76a:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800b76c:	4565      	cmp	r5, ip
 800b76e:	d917      	bls.n	800b7a0 <D24_GENERIC+0x134>
 800b770:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800b772:	f890 9000 	ldrb.w	r9, [r0]
 800b776:	b2ef      	uxtb	r7, r5
 800b778:	2d01      	cmp	r5, #1
 800b77a:	b23e      	sxth	r6, r7
 800b77c:	d193      	bne.n	800b6a6 <D24_GENERIC+0x3a>
 800b77e:	9d06      	ldr	r5, [sp, #24]
 800b780:	b1dd      	cbz	r5, 800b7ba <D24_GENERIC+0x14e>
 800b782:	78c7      	ldrb	r7, [r0, #3]
 800b784:	ea4f 2609 	mov.w	r6, r9, lsl #8
 800b788:	f01c 0f01 	tst.w	ip, #1
 800b78c:	ea4f 2507 	mov.w	r5, r7, lsl #8
 800b790:	eb06 4607 	add.w	r6, r6, r7, lsl #16
 800b794:	d11a      	bne.n	800b7cc <D24_GENERIC+0x160>
 800b796:	f890 9001 	ldrb.w	r9, [r0, #1]
 800b79a:	3002      	adds	r0, #2
 800b79c:	44b1      	add	r9, r6
 800b79e:	e78d      	b.n	800b6bc <D24_GENERIC+0x50>
 800b7a0:	6093      	str	r3, [r2, #8]
 800b7a2:	2000      	movs	r0, #0
 800b7a4:	9b03      	ldr	r3, [sp, #12]
 800b7a6:	f8c2 800c 	str.w	r8, [r2, #12]
 800b7aa:	6153      	str	r3, [r2, #20]
 800b7ac:	9b07      	ldr	r3, [sp, #28]
 800b7ae:	61d1      	str	r1, [r2, #28]
 800b7b0:	6114      	str	r4, [r2, #16]
 800b7b2:	6193      	str	r3, [r2, #24]
 800b7b4:	b009      	add	sp, #36	; 0x24
 800b7b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7ba:	7845      	ldrb	r5, [r0, #1]
 800b7bc:	3003      	adds	r0, #3
 800b7be:	f810 6c01 	ldrb.w	r6, [r0, #-1]
 800b7c2:	022d      	lsls	r5, r5, #8
 800b7c4:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 800b7c8:	44a9      	add	r9, r5
 800b7ca:	e777      	b.n	800b6bc <D24_GENERIC+0x50>
 800b7cc:	7886      	ldrb	r6, [r0, #2]
 800b7ce:	3004      	adds	r0, #4
 800b7d0:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 800b7d4:	44a9      	add	r9, r5
 800b7d6:	e771      	b.n	800b6bc <D24_GENERIC+0x50>
 800b7d8:	00030001 	.word	0x00030001
 800b7dc:	00060007 	.word	0x00060007
 800b7e0:	24000000 	.word	0x24000000

0800b7e4 <D32_GENERIC>:
 800b7e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7e8:	e9d2 4304 	ldrd	r4, r3, [r2, #16]
 800b7ec:	b089      	sub	sp, #36	; 0x24
 800b7ee:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800b7f0:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 800b7f2:	9302      	str	r3, [sp, #8]
 800b7f4:	6993      	ldr	r3, [r2, #24]
 800b7f6:	9104      	str	r1, [sp, #16]
 800b7f8:	9307      	str	r3, [sp, #28]
 800b7fa:	9503      	str	r5, [sp, #12]
 800b7fc:	69d1      	ldr	r1, [r2, #28]
 800b7fe:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800b800:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 800b804:	2e00      	cmp	r6, #0
 800b806:	f000 8097 	beq.w	800b938 <D32_GENERIC+0x154>
 800b80a:	f005 0620 	and.w	r6, r5, #32
 800b80e:	f005 0510 	and.w	r5, r5, #16
 800b812:	f04f 0e00 	mov.w	lr, #0
 800b816:	f8df c150 	ldr.w	ip, [pc, #336]	; 800b968 <D32_GENERIC+0x184>
 800b81a:	9606      	str	r6, [sp, #24]
 800b81c:	9505      	str	r5, [sp, #20]
 800b81e:	e079      	b.n	800b914 <D32_GENERIC+0x130>
 800b820:	783d      	ldrb	r5, [r7, #0]
 800b822:	f810 b009 	ldrb.w	fp, [r0, r9]
 800b826:	042d      	lsls	r5, r5, #16
 800b828:	f810 a006 	ldrb.w	sl, [r0, r6]
 800b82c:	f890 9000 	ldrb.w	r9, [r0]
 800b830:	eb07 0046 	add.w	r0, r7, r6, lsl #1
 800b834:	eb05 650b 	add.w	r5, r5, fp, lsl #24
 800b838:	eb05 250a 	add.w	r5, r5, sl, lsl #8
 800b83c:	44a9      	add	r9, r5
 800b83e:	fa5f f789 	uxtb.w	r7, r9
 800b842:	f3c9 2507 	ubfx	r5, r9, #8, #8
 800b846:	f3c9 4607 	ubfx	r6, r9, #16, #8
 800b84a:	ea4f 6919 	mov.w	r9, r9, lsr #24
 800b84e:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 800b852:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 800b856:	eb07 2191 	add.w	r1, r7, r1, lsr #10
 800b85a:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
 800b85e:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
 800b862:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800b866:	f3c1 0909 	ubfx	r9, r1, #0, #10
 800b86a:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 800b86e:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800b872:	eb07 2196 	add.w	r1, r7, r6, lsr #10
 800b876:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800b87a:	ea45 4909 	orr.w	r9, r5, r9, lsl #16
 800b87e:	f3c1 0509 	ubfx	r5, r1, #0, #10
 800b882:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 800b886:	4d34      	ldr	r5, [pc, #208]	; (800b958 <D32_GENERIC+0x174>)
 800b888:	fb29 8805 	smlad	r8, r9, r5, r8
 800b88c:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 800b890:	fb26 8705 	smlad	r7, r6, r5, r8
 800b894:	4d31      	ldr	r5, [pc, #196]	; (800b95c <D32_GENERIC+0x178>)
 800b896:	fb29 3305 	smlad	r3, r9, r5, r3
 800b89a:	4d31      	ldr	r5, [pc, #196]	; (800b960 <D32_GENERIC+0x17c>)
 800b89c:	fb26 3805 	smlad	r8, r6, r5, r3
 800b8a0:	2301      	movs	r3, #1
 800b8a2:	fb29 f903 	smuad	r9, r9, r3
 800b8a6:	4b2f      	ldr	r3, [pc, #188]	; (800b964 <D32_GENERIC+0x180>)
 800b8a8:	fb26 9303 	smlad	r3, r6, r3, r9
 800b8ac:	9e05      	ldr	r6, [sp, #20]
 800b8ae:	f10e 0901 	add.w	r9, lr, #1
 800b8b2:	f5a7 4580 	sub.w	r5, r7, #16384	; 0x4000
 800b8b6:	b1ae      	cbz	r6, 800b8e4 <D32_GENERIC+0x100>
 800b8b8:	442c      	add	r4, r5
 800b8ba:	9e02      	ldr	r6, [sp, #8]
 800b8bc:	f8d2 a020 	ldr.w	sl, [r2, #32]
 800b8c0:	1ba4      	subs	r4, r4, r6
 800b8c2:	9502      	str	r5, [sp, #8]
 800b8c4:	17e7      	asrs	r7, r4, #31
 800b8c6:	fba4 450a 	umull	r4, r5, r4, sl
 800b8ca:	e9cd 4500 	strd	r4, r5, [sp]
 800b8ce:	fb0a 5407 	mla	r4, sl, r7, r5
 800b8d2:	9401      	str	r4, [sp, #4]
 800b8d4:	e9dd 4500 	ldrd	r4, r5, [sp]
 800b8d8:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800b8dc:	f145 0500 	adc.w	r5, r5, #0
 800b8e0:	006c      	lsls	r4, r5, #1
 800b8e2:	4625      	mov	r5, r4
 800b8e4:	f8b2 a028 	ldrh.w	sl, [r2, #40]	; 0x28
 800b8e8:	036d      	lsls	r5, r5, #13
 800b8ea:	9f03      	ldr	r7, [sp, #12]
 800b8ec:	fb0e fb0a 	mul.w	fp, lr, sl
 800b8f0:	fa1f fe89 	uxth.w	lr, r9
 800b8f4:	f04f 0a00 	mov.w	sl, #0
 800b8f8:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 800b8fc:	9e04      	ldr	r6, [sp, #16]
 800b8fe:	fbc7 9a05 	smlal	r9, sl, r7, r5
 800b902:	4657      	mov	r7, sl
 800b904:	10bd      	asrs	r5, r7, #2
 800b906:	f305 050f 	ssat	r5, #16, r5
 800b90a:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 800b90e:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800b910:	4575      	cmp	r5, lr
 800b912:	d911      	bls.n	800b938 <D32_GENERIC+0x154>
 800b914:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800b916:	b2ee      	uxtb	r6, r5
 800b918:	2d01      	cmp	r5, #1
 800b91a:	eb00 0746 	add.w	r7, r0, r6, lsl #1
 800b91e:	eb06 0946 	add.w	r9, r6, r6, lsl #1
 800b922:	f47f af7d 	bne.w	800b820 <D32_GENERIC+0x3c>
 800b926:	1d05      	adds	r5, r0, #4
 800b928:	f8d0 9000 	ldr.w	r9, [r0]
 800b92c:	9806      	ldr	r0, [sp, #24]
 800b92e:	b180      	cbz	r0, 800b952 <D32_GENERIC+0x16e>
 800b930:	fa99 f999 	rev16.w	r9, r9
 800b934:	4628      	mov	r0, r5
 800b936:	e782      	b.n	800b83e <D32_GENERIC+0x5a>
 800b938:	6093      	str	r3, [r2, #8]
 800b93a:	2000      	movs	r0, #0
 800b93c:	9b02      	ldr	r3, [sp, #8]
 800b93e:	f8c2 800c 	str.w	r8, [r2, #12]
 800b942:	6153      	str	r3, [r2, #20]
 800b944:	9b07      	ldr	r3, [sp, #28]
 800b946:	61d1      	str	r1, [r2, #28]
 800b948:	6114      	str	r4, [r2, #16]
 800b94a:	6193      	str	r3, [r2, #24]
 800b94c:	b009      	add	sp, #36	; 0x24
 800b94e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b952:	4628      	mov	r0, r5
 800b954:	e773      	b.n	800b83e <D32_GENERIC+0x5a>
 800b956:	bf00      	nop
 800b958:	00060003 	.word	0x00060003
 800b95c:	000a000c 	.word	0x000a000c
 800b960:	000c000a 	.word	0x000c000a
 800b964:	00030006 	.word	0x00030006
 800b968:	24000000 	.word	0x24000000

0800b96c <D48_GENERIC>:
 800b96c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b970:	6913      	ldr	r3, [r2, #16]
 800b972:	b089      	sub	sp, #36	; 0x24
 800b974:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800b976:	9301      	str	r3, [sp, #4]
 800b978:	6953      	ldr	r3, [r2, #20]
 800b97a:	9104      	str	r1, [sp, #16]
 800b97c:	9302      	str	r3, [sp, #8]
 800b97e:	6993      	ldr	r3, [r2, #24]
 800b980:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 800b984:	9307      	str	r3, [sp, #28]
 800b986:	e9d2 3102 	ldrd	r3, r1, [r2, #8]
 800b98a:	9100      	str	r1, [sp, #0]
 800b98c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800b98e:	9103      	str	r1, [sp, #12]
 800b990:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800b992:	2c00      	cmp	r4, #0
 800b994:	f000 80be 	beq.w	800bb14 <D48_GENERIC+0x1a8>
 800b998:	f001 0420 	and.w	r4, r1, #32
 800b99c:	f001 0110 	and.w	r1, r1, #16
 800b9a0:	f04f 0e00 	mov.w	lr, #0
 800b9a4:	9105      	str	r1, [sp, #20]
 800b9a6:	9406      	str	r4, [sp, #24]
 800b9a8:	4962      	ldr	r1, [pc, #392]	; (800bb34 <D48_GENERIC+0x1c8>)
 800b9aa:	e0a0      	b.n	800baee <D48_GENERIC+0x182>
 800b9ac:	eb00 0608 	add.w	r6, r0, r8
 800b9b0:	f810 a008 	ldrb.w	sl, [r0, r8]
 800b9b4:	f810 9005 	ldrb.w	r9, [r0, r5]
 800b9b8:	5df4      	ldrb	r4, [r6, r7]
 800b9ba:	443e      	add	r6, r7
 800b9bc:	f890 b000 	ldrb.w	fp, [r0]
 800b9c0:	0420      	lsls	r0, r4, #16
 800b9c2:	eb06 0408 	add.w	r4, r6, r8
 800b9c6:	f816 6008 	ldrb.w	r6, [r6, r8]
 800b9ca:	eb00 6a0a 	add.w	sl, r0, sl, lsl #24
 800b9ce:	f814 8007 	ldrb.w	r8, [r4, r7]
 800b9d2:	4427      	add	r7, r4
 800b9d4:	eb0a 2a09 	add.w	sl, sl, r9, lsl #8
 800b9d8:	eb08 2606 	add.w	r6, r8, r6, lsl #8
 800b9dc:	eb0a 040b 	add.w	r4, sl, fp
 800b9e0:	eb07 0045 	add.w	r0, r7, r5, lsl #1
 800b9e4:	f3c6 2807 	ubfx	r8, r6, #8, #8
 800b9e8:	b2f7      	uxtb	r7, r6
 800b9ea:	b2e6      	uxtb	r6, r4
 800b9ec:	f3c4 2507 	ubfx	r5, r4, #8, #8
 800b9f0:	f3c4 4907 	ubfx	r9, r4, #16, #8
 800b9f4:	ea4f 6b14 	mov.w	fp, r4, lsr #24
 800b9f8:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800b9fc:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 800ba00:	eb06 269c 	add.w	r6, r6, ip, lsr #10
 800ba04:	f851 9029 	ldr.w	r9, [r1, r9, lsl #2]
 800ba08:	f851 402b 	ldr.w	r4, [r1, fp, lsl #2]
 800ba0c:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 800ba10:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 800ba14:	f851 c028 	ldr.w	ip, [r1, r8, lsl #2]
 800ba18:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800ba1c:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 800ba20:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800ba24:	eb04 2499 	add.w	r4, r4, r9, lsr #10
 800ba28:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800ba2c:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 800ba30:	9d00      	ldr	r5, [sp, #0]
 800ba32:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 800ba36:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800ba3a:	eb0c 2c97 	add.w	ip, ip, r7, lsr #10
 800ba3e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800ba42:	ea44 4909 	orr.w	r9, r4, r9, lsl #16
 800ba46:	f3cc 0409 	ubfx	r4, ip, #0, #10
 800ba4a:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 800ba4e:	4c3a      	ldr	r4, [pc, #232]	; (800bb38 <D48_GENERIC+0x1cc>)
 800ba50:	fb26 5a04 	smlad	sl, r6, r4, r5
 800ba54:	4c39      	ldr	r4, [pc, #228]	; (800bb3c <D48_GENERIC+0x1d0>)
 800ba56:	fb29 aa04 	smlad	sl, r9, r4, sl
 800ba5a:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 800ba5e:	fb27 aa04 	smlad	sl, r7, r4, sl
 800ba62:	4c37      	ldr	r4, [pc, #220]	; (800bb40 <D48_GENERIC+0x1d4>)
 800ba64:	fb26 3304 	smlad	r3, r6, r4, r3
 800ba68:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 800ba6c:	fb29 3304 	smlad	r3, r9, r4, r3
 800ba70:	4c34      	ldr	r4, [pc, #208]	; (800bb44 <D48_GENERIC+0x1d8>)
 800ba72:	fb27 3304 	smlad	r3, r7, r4, r3
 800ba76:	2501      	movs	r5, #1
 800ba78:	9300      	str	r3, [sp, #0]
 800ba7a:	fb26 f605 	smuad	r6, r6, r5
 800ba7e:	4b32      	ldr	r3, [pc, #200]	; (800bb48 <D48_GENERIC+0x1dc>)
 800ba80:	fb29 6903 	smlad	r9, r9, r3, r6
 800ba84:	4b31      	ldr	r3, [pc, #196]	; (800bb4c <D48_GENERIC+0x1e0>)
 800ba86:	fb27 9303 	smlad	r3, r7, r3, r9
 800ba8a:	9c05      	ldr	r4, [sp, #20]
 800ba8c:	eb0e 0805 	add.w	r8, lr, r5
 800ba90:	f5aa 4a58 	sub.w	sl, sl, #55296	; 0xd800
 800ba94:	b19c      	cbz	r4, 800babe <D48_GENERIC+0x152>
 800ba96:	9c01      	ldr	r4, [sp, #4]
 800ba98:	9d02      	ldr	r5, [sp, #8]
 800ba9a:	4454      	add	r4, sl
 800ba9c:	f8d2 9020 	ldr.w	r9, [r2, #32]
 800baa0:	f8cd a008 	str.w	sl, [sp, #8]
 800baa4:	1b64      	subs	r4, r4, r5
 800baa6:	fba4 ab09 	umull	sl, fp, r4, r9
 800baaa:	17e7      	asrs	r7, r4, #31
 800baac:	f11a 4400 	adds.w	r4, sl, #2147483648	; 0x80000000
 800bab0:	fb09 bb07 	mla	fp, r9, r7, fp
 800bab4:	f14b 0500 	adc.w	r5, fp, #0
 800bab8:	006c      	lsls	r4, r5, #1
 800baba:	46a2      	mov	sl, r4
 800babc:	9401      	str	r4, [sp, #4]
 800babe:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 800bac0:	ea4f 2aca 	mov.w	sl, sl, lsl #11
 800bac4:	9d03      	ldr	r5, [sp, #12]
 800bac6:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800baca:	fb0e f606 	mul.w	r6, lr, r6
 800bace:	fa1f fe88 	uxth.w	lr, r8
 800bad2:	f04f 0800 	mov.w	r8, #0
 800bad6:	fbc5 780a 	smlal	r7, r8, r5, sl
 800bada:	4645      	mov	r5, r8
 800badc:	10ac      	asrs	r4, r5, #2
 800bade:	9d04      	ldr	r5, [sp, #16]
 800bae0:	f304 040f 	ssat	r4, #16, r4
 800bae4:	f825 4016 	strh.w	r4, [r5, r6, lsl #1]
 800bae8:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800baea:	4574      	cmp	r4, lr
 800baec:	d912      	bls.n	800bb14 <D48_GENERIC+0x1a8>
 800baee:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 800baf0:	b2e5      	uxtb	r5, r4
 800baf2:	2c01      	cmp	r4, #1
 800baf4:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 800baf8:	f1c5 0700 	rsb	r7, r5, #0
 800bafc:	f47f af56 	bne.w	800b9ac <D48_GENERIC+0x40>
 800bb00:	9d06      	ldr	r5, [sp, #24]
 800bb02:	e9d0 4600 	ldrd	r4, r6, [r0]
 800bb06:	3006      	adds	r0, #6
 800bb08:	2d00      	cmp	r5, #0
 800bb0a:	f43f af6b 	beq.w	800b9e4 <D48_GENERIC+0x78>
 800bb0e:	ba64      	rev16	r4, r4
 800bb10:	ba76      	rev16	r6, r6
 800bb12:	e767      	b.n	800b9e4 <D48_GENERIC+0x78>
 800bb14:	6093      	str	r3, [r2, #8]
 800bb16:	2000      	movs	r0, #0
 800bb18:	9b00      	ldr	r3, [sp, #0]
 800bb1a:	f8c2 c01c 	str.w	ip, [r2, #28]
 800bb1e:	60d3      	str	r3, [r2, #12]
 800bb20:	9b01      	ldr	r3, [sp, #4]
 800bb22:	6113      	str	r3, [r2, #16]
 800bb24:	9b02      	ldr	r3, [sp, #8]
 800bb26:	6153      	str	r3, [r2, #20]
 800bb28:	9b07      	ldr	r3, [sp, #28]
 800bb2a:	6193      	str	r3, [r2, #24]
 800bb2c:	b009      	add	sp, #36	; 0x24
 800bb2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb32:	bf00      	nop
 800bb34:	24000000 	.word	0x24000000
 800bb38:	000f000a 	.word	0x000f000a
 800bb3c:	00060003 	.word	0x00060003
 800bb40:	00150019 	.word	0x00150019
 800bb44:	00190015 	.word	0x00190015
 800bb48:	00030006 	.word	0x00030006
 800bb4c:	000a000f 	.word	0x000a000f

0800bb50 <D64_GENERIC>:
 800bb50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb54:	6913      	ldr	r3, [r2, #16]
 800bb56:	b089      	sub	sp, #36	; 0x24
 800bb58:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800bb5a:	9300      	str	r3, [sp, #0]
 800bb5c:	6953      	ldr	r3, [r2, #20]
 800bb5e:	9105      	str	r1, [sp, #20]
 800bb60:	9303      	str	r3, [sp, #12]
 800bb62:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 800bb64:	6993      	ldr	r3, [r2, #24]
 800bb66:	69d4      	ldr	r4, [r2, #28]
 800bb68:	9307      	str	r3, [sp, #28]
 800bb6a:	9504      	str	r5, [sp, #16]
 800bb6c:	e9d2 3602 	ldrd	r3, r6, [r2, #8]
 800bb70:	2900      	cmp	r1, #0
 800bb72:	f000 80e8 	beq.w	800bd46 <D64_GENERIC+0x1f6>
 800bb76:	6a11      	ldr	r1, [r2, #32]
 800bb78:	2500      	movs	r5, #0
 800bb7a:	46b3      	mov	fp, r6
 800bb7c:	9302      	str	r3, [sp, #8]
 800bb7e:	9106      	str	r1, [sp, #24]
 800bb80:	4978      	ldr	r1, [pc, #480]	; (800bd64 <D64_GENERIC+0x214>)
 800bb82:	e0cc      	b.n	800bd1e <D64_GENERIC+0x1ce>
 800bb84:	eb0e 084e 	add.w	r8, lr, lr, lsl #1
 800bb88:	f1ce 0c00 	rsb	ip, lr, #0
 800bb8c:	f890 9000 	ldrb.w	r9, [r0]
 800bb90:	eb00 0708 	add.w	r7, r0, r8
 800bb94:	f810 6008 	ldrb.w	r6, [r0, r8]
 800bb98:	eb07 0a4c 	add.w	sl, r7, ip, lsl #1
 800bb9c:	f817 000c 	ldrb.w	r0, [r7, ip]
 800bba0:	f817 301c 	ldrb.w	r3, [r7, ip, lsl #1]
 800bba4:	eb0a 0748 	add.w	r7, sl, r8, lsl #1
 800bba8:	f81a a018 	ldrb.w	sl, [sl, r8, lsl #1]
 800bbac:	ea4f 4800 	mov.w	r8, r0, lsl #16
 800bbb0:	f817 000c 	ldrb.w	r0, [r7, ip]
 800bbb4:	eb08 6606 	add.w	r6, r8, r6, lsl #24
 800bbb8:	f817 801c 	ldrb.w	r8, [r7, ip, lsl #1]
 800bbbc:	0400      	lsls	r0, r0, #16
 800bbbe:	4467      	add	r7, ip
 800bbc0:	eb06 2603 	add.w	r6, r6, r3, lsl #8
 800bbc4:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 800bbc8:	f817 a01c 	ldrb.w	sl, [r7, ip, lsl #1]
 800bbcc:	eb07 074c 	add.w	r7, r7, ip, lsl #1
 800bbd0:	444e      	add	r6, r9
 800bbd2:	eb00 2808 	add.w	r8, r0, r8, lsl #8
 800bbd6:	eb07 008e 	add.w	r0, r7, lr, lsl #2
 800bbda:	44c2      	add	sl, r8
 800bbdc:	b2f7      	uxtb	r7, r6
 800bbde:	f3c6 2807 	ubfx	r8, r6, #8, #8
 800bbe2:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 800bbe6:	0e36      	lsrs	r6, r6, #24
 800bbe8:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 800bbec:	fa5f fc8a 	uxtb.w	ip, sl
 800bbf0:	f851 8028 	ldr.w	r8, [r1, r8, lsl #2]
 800bbf4:	f3ca 2907 	ubfx	r9, sl, #8, #8
 800bbf8:	443c      	add	r4, r7
 800bbfa:	f851 702e 	ldr.w	r7, [r1, lr, lsl #2]
 800bbfe:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800bc02:	eb08 2894 	add.w	r8, r8, r4, lsr #10
 800bc06:	f851 c02c 	ldr.w	ip, [r1, ip, lsl #2]
 800bc0a:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800bc0e:	4b56      	ldr	r3, [pc, #344]	; (800bd68 <D64_GENERIC+0x218>)
 800bc10:	eb07 2e98 	add.w	lr, r7, r8, lsr #10
 800bc14:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800bc18:	f851 7029 	ldr.w	r7, [r1, r9, lsl #2]
 800bc1c:	eb06 269e 	add.w	r6, r6, lr, lsr #10
 800bc20:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800bc24:	ea48 4804 	orr.w	r8, r8, r4, lsl #16
 800bc28:	f3ca 4407 	ubfx	r4, sl, #16, #8
 800bc2c:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 800bc30:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800bc34:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800bc38:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 800bc3c:	eb07 279c 	add.w	r7, r7, ip, lsr #10
 800bc40:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800bc44:	f851 902a 	ldr.w	r9, [r1, sl, lsl #2]
 800bc48:	ea46 460e 	orr.w	r6, r6, lr, lsl #16
 800bc4c:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 800bc50:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800bc54:	eb09 299a 	add.w	r9, r9, sl, lsr #10
 800bc58:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800bc5c:	ea47 4c0c 	orr.w	ip, r7, ip, lsl #16
 800bc60:	f3c9 0709 	ubfx	r7, r9, #0, #10
 800bc64:	ea4f 2499 	mov.w	r4, r9, lsr #10
 800bc68:	ea47 4a0a 	orr.w	sl, r7, sl, lsl #16
 800bc6c:	fb28 b903 	smlad	r9, r8, r3, fp
 800bc70:	4b3e      	ldr	r3, [pc, #248]	; (800bd6c <D64_GENERIC+0x21c>)
 800bc72:	fb26 9903 	smlad	r9, r6, r3, r9
 800bc76:	4b3e      	ldr	r3, [pc, #248]	; (800bd70 <D64_GENERIC+0x220>)
 800bc78:	fb2c 9703 	smlad	r7, ip, r3, r9
 800bc7c:	f44f 3980 	mov.w	r9, #65536	; 0x10000
 800bc80:	fb2a 7909 	smlad	r9, sl, r9, r7
 800bc84:	4f3b      	ldr	r7, [pc, #236]	; (800bd74 <D64_GENERIC+0x224>)
 800bc86:	9b02      	ldr	r3, [sp, #8]
 800bc88:	fb28 3307 	smlad	r3, r8, r7, r3
 800bc8c:	fb2a 3317 	smladx	r3, sl, r7, r3
 800bc90:	4f39      	ldr	r7, [pc, #228]	; (800bd78 <D64_GENERIC+0x228>)
 800bc92:	fb26 3307 	smlad	r3, r6, r7, r3
 800bc96:	fb2c 3b17 	smladx	fp, ip, r7, r3
 800bc9a:	f04f 0e01 	mov.w	lr, #1
 800bc9e:	fb28 f80e 	smuad	r8, r8, lr
 800bca2:	4b36      	ldr	r3, [pc, #216]	; (800bd7c <D64_GENERIC+0x22c>)
 800bca4:	fb26 8603 	smlad	r6, r6, r3, r8
 800bca8:	4b35      	ldr	r3, [pc, #212]	; (800bd80 <D64_GENERIC+0x230>)
 800bcaa:	fb2c 6c03 	smlad	ip, ip, r3, r6
 800bcae:	4b35      	ldr	r3, [pc, #212]	; (800bd84 <D64_GENERIC+0x234>)
 800bcb0:	fb2a c303 	smlad	r3, sl, r3, ip
 800bcb4:	9f06      	ldr	r7, [sp, #24]
 800bcb6:	f5a9 3900 	sub.w	r9, r9, #131072	; 0x20000
 800bcba:	9302      	str	r3, [sp, #8]
 800bcbc:	b1cf      	cbz	r7, 800bcf2 <D64_GENERIC+0x1a2>
 800bcbe:	9b00      	ldr	r3, [sp, #0]
 800bcc0:	444b      	add	r3, r9
 800bcc2:	461e      	mov	r6, r3
 800bcc4:	9b03      	ldr	r3, [sp, #12]
 800bcc6:	f8cd 900c 	str.w	r9, [sp, #12]
 800bcca:	1af6      	subs	r6, r6, r3
 800bccc:	46b0      	mov	r8, r6
 800bcce:	ea4f 79e6 	mov.w	r9, r6, asr #31
 800bcd2:	e9cd 8900 	strd	r8, r9, [sp]
 800bcd6:	fba6 8907 	umull	r8, r9, r6, r7
 800bcda:	9e01      	ldr	r6, [sp, #4]
 800bcdc:	fb07 9306 	mla	r3, r7, r6, r9
 800bce0:	4646      	mov	r6, r8
 800bce2:	f116 4600 	adds.w	r6, r6, #2147483648	; 0x80000000
 800bce6:	f143 0700 	adc.w	r7, r3, #0
 800bcea:	fa07 f30e 	lsl.w	r3, r7, lr
 800bcee:	4699      	mov	r9, r3
 800bcf0:	9300      	str	r3, [sp, #0]
 800bcf2:	f8b2 c028 	ldrh.w	ip, [r2, #40]	; 0x28
 800bcf6:	ea4f 2989 	mov.w	r9, r9, lsl #10
 800bcfa:	9b04      	ldr	r3, [sp, #16]
 800bcfc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800bd00:	2700      	movs	r7, #0
 800bd02:	fb05 fc0c 	mul.w	ip, r5, ip
 800bd06:	3501      	adds	r5, #1
 800bd08:	fbc3 6709 	smlal	r6, r7, r3, r9
 800bd0c:	9b05      	ldr	r3, [sp, #20]
 800bd0e:	10be      	asrs	r6, r7, #2
 800bd10:	f306 060f 	ssat	r6, #16, r6
 800bd14:	f823 601c 	strh.w	r6, [r3, ip, lsl #1]
 800bd18:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 800bd1a:	42ae      	cmp	r6, r5
 800bd1c:	dd11      	ble.n	800bd42 <D64_GENERIC+0x1f2>
 800bd1e:	f8b2 e02a 	ldrh.w	lr, [r2, #42]	; 0x2a
 800bd22:	f1be 0f01 	cmp.w	lr, #1
 800bd26:	f47f af2d 	bne.w	800bb84 <D64_GENERIC+0x34>
 800bd2a:	6b57      	ldr	r7, [r2, #52]	; 0x34
 800bd2c:	f100 0c08 	add.w	ip, r0, #8
 800bd30:	06bb      	lsls	r3, r7, #26
 800bd32:	e9d0 6a00 	ldrd	r6, sl, [r0]
 800bd36:	d513      	bpl.n	800bd60 <D64_GENERIC+0x210>
 800bd38:	ba76      	rev16	r6, r6
 800bd3a:	fa9a fa9a 	rev16.w	sl, sl
 800bd3e:	4660      	mov	r0, ip
 800bd40:	e74c      	b.n	800bbdc <D64_GENERIC+0x8c>
 800bd42:	465e      	mov	r6, fp
 800bd44:	9b02      	ldr	r3, [sp, #8]
 800bd46:	6093      	str	r3, [r2, #8]
 800bd48:	2000      	movs	r0, #0
 800bd4a:	9b00      	ldr	r3, [sp, #0]
 800bd4c:	60d6      	str	r6, [r2, #12]
 800bd4e:	6113      	str	r3, [r2, #16]
 800bd50:	9b03      	ldr	r3, [sp, #12]
 800bd52:	61d4      	str	r4, [r2, #28]
 800bd54:	6153      	str	r3, [r2, #20]
 800bd56:	9b07      	ldr	r3, [sp, #28]
 800bd58:	6193      	str	r3, [r2, #24]
 800bd5a:	b009      	add	sp, #36	; 0x24
 800bd5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd60:	4660      	mov	r0, ip
 800bd62:	e73b      	b.n	800bbdc <D64_GENERIC+0x8c>
 800bd64:	24000000 	.word	0x24000000
 800bd68:	001c0015 	.word	0x001c0015
 800bd6c:	000f000a 	.word	0x000f000a
 800bd70:	00060003 	.word	0x00060003
 800bd74:	0024002a 	.word	0x0024002a
 800bd78:	002e0030 	.word	0x002e0030
 800bd7c:	00030006 	.word	0x00030006
 800bd80:	000a000f 	.word	0x000a000f
 800bd84:	0015001c 	.word	0x0015001c

0800bd88 <D80_GENERIC>:
 800bd88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd8c:	b08b      	sub	sp, #44	; 0x2c
 800bd8e:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800bd90:	9107      	str	r1, [sp, #28]
 800bd92:	6911      	ldr	r1, [r2, #16]
 800bd94:	9104      	str	r1, [sp, #16]
 800bd96:	6951      	ldr	r1, [r2, #20]
 800bd98:	9105      	str	r1, [sp, #20]
 800bd9a:	6991      	ldr	r1, [r2, #24]
 800bd9c:	9109      	str	r1, [sp, #36]	; 0x24
 800bd9e:	69d1      	ldr	r1, [r2, #28]
 800bda0:	9102      	str	r1, [sp, #8]
 800bda2:	6891      	ldr	r1, [r2, #8]
 800bda4:	9103      	str	r1, [sp, #12]
 800bda6:	68d1      	ldr	r1, [r2, #12]
 800bda8:	9101      	str	r1, [sp, #4]
 800bdaa:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800bdac:	9106      	str	r1, [sp, #24]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	f000 810b 	beq.w	800bfca <D80_GENERIC+0x242>
 800bdb4:	6a13      	ldr	r3, [r2, #32]
 800bdb6:	f04f 0800 	mov.w	r8, #0
 800bdba:	f8df c260 	ldr.w	ip, [pc, #608]	; 800c01c <D80_GENERIC+0x294>
 800bdbe:	9308      	str	r3, [sp, #32]
 800bdc0:	9200      	str	r2, [sp, #0]
 800bdc2:	e0ee      	b.n	800bfa2 <D80_GENERIC+0x21a>
 800bdc4:	b2db      	uxtb	r3, r3
 800bdc6:	f890 e000 	ldrb.w	lr, [r0]
 800bdca:	b219      	sxth	r1, r3
 800bdcc:	425c      	negs	r4, r3
 800bdce:	f810 9003 	ldrb.w	r9, [r0, r3]
 800bdd2:	004e      	lsls	r6, r1, #1
 800bdd4:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 800bdd8:	4431      	add	r1, r6
 800bdda:	1843      	adds	r3, r0, r1
 800bddc:	f810 b001 	ldrb.w	fp, [r0, r1]
 800bde0:	1919      	adds	r1, r3, r4
 800bde2:	5d1b      	ldrb	r3, [r3, r4]
 800bde4:	1948      	adds	r0, r1, r5
 800bde6:	f811 a005 	ldrb.w	sl, [r1, r5]
 800bdea:	041b      	lsls	r3, r3, #16
 800bdec:	1907      	adds	r7, r0, r4
 800bdee:	5d01      	ldrb	r1, [r0, r4]
 800bdf0:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 800bdf4:	f810 0014 	ldrb.w	r0, [r0, r4, lsl #1]
 800bdf8:	eb07 0b44 	add.w	fp, r7, r4, lsl #1
 800bdfc:	f817 7014 	ldrb.w	r7, [r7, r4, lsl #1]
 800be00:	0409      	lsls	r1, r1, #16
 800be02:	eb03 2309 	add.w	r3, r3, r9, lsl #8
 800be06:	eb0b 0905 	add.w	r9, fp, r5
 800be0a:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 800be0e:	f81b 5005 	ldrb.w	r5, [fp, r5]
 800be12:	eb09 0b04 	add.w	fp, r9, r4
 800be16:	f819 4004 	ldrb.w	r4, [r9, r4]
 800be1a:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 800be1e:	4473      	add	r3, lr
 800be20:	eb0b 0006 	add.w	r0, fp, r6
 800be24:	eb04 2505 	add.w	r5, r4, r5, lsl #8
 800be28:	4439      	add	r1, r7
 800be2a:	f3c3 2407 	ubfx	r4, r3, #8, #8
 800be2e:	b2df      	uxtb	r7, r3
 800be30:	f3c3 4607 	ubfx	r6, r3, #16, #8
 800be34:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 800be38:	f85c 3027 	ldr.w	r3, [ip, r7, lsl #2]
 800be3c:	fa5f fa81 	uxtb.w	sl, r1
 800be40:	f85c 7024 	ldr.w	r7, [ip, r4, lsl #2]
 800be44:	9c02      	ldr	r4, [sp, #8]
 800be46:	f85c 9026 	ldr.w	r9, [ip, r6, lsl #2]
 800be4a:	441c      	add	r4, r3
 800be4c:	f85c 602e 	ldr.w	r6, [ip, lr, lsl #2]
 800be50:	f85c e02a 	ldr.w	lr, [ip, sl, lsl #2]
 800be54:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 800be58:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 800be5c:	f3c4 0309 	ubfx	r3, r4, #0, #10
 800be60:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800be64:	b2ed      	uxtb	r5, r5
 800be66:	eb09 2997 	add.w	r9, r9, r7, lsr #10
 800be6a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800be6e:	f85c 4024 	ldr.w	r4, [ip, r4, lsl #2]
 800be72:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 800be76:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 800be7a:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 800be7e:	f3c1 4707 	ubfx	r7, r1, #16, #8
 800be82:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 800be86:	f85c a02a 	ldr.w	sl, [ip, sl, lsl #2]
 800be8a:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 800be8e:	0e09      	lsrs	r1, r1, #24
 800be90:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 800be94:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800be98:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 800be9c:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800bea0:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 800bea4:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800bea8:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800beac:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 800beb0:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800beb4:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
 800beb8:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800bebc:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800bec0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800bec4:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 800bec8:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800becc:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 800bed0:	ea4f 229a 	mov.w	r2, sl, lsr #10
 800bed4:	f3ca 0709 	ubfx	r7, sl, #0, #10
 800bed8:	9202      	str	r2, [sp, #8]
 800beda:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 800bede:	4a43      	ldr	r2, [pc, #268]	; (800bfec <D80_GENERIC+0x264>)
 800bee0:	9f01      	ldr	r7, [sp, #4]
 800bee2:	fb23 7a02 	smlad	sl, r3, r2, r7
 800bee6:	4a42      	ldr	r2, [pc, #264]	; (800bff0 <D80_GENERIC+0x268>)
 800bee8:	fb26 aa02 	smlad	sl, r6, r2, sl
 800beec:	4a41      	ldr	r2, [pc, #260]	; (800bff4 <D80_GENERIC+0x26c>)
 800beee:	fb24 aa02 	smlad	sl, r4, r2, sl
 800bef2:	4a41      	ldr	r2, [pc, #260]	; (800bff8 <D80_GENERIC+0x270>)
 800bef4:	fb21 a702 	smlad	r7, r1, r2, sl
 800bef8:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 800befc:	fb25 7a0a 	smlad	sl, r5, sl, r7
 800bf00:	4a3e      	ldr	r2, [pc, #248]	; (800bffc <D80_GENERIC+0x274>)
 800bf02:	9f03      	ldr	r7, [sp, #12]
 800bf04:	fb23 7e02 	smlad	lr, r3, r2, r7
 800bf08:	4a3d      	ldr	r2, [pc, #244]	; (800c000 <D80_GENERIC+0x278>)
 800bf0a:	fb26 ee02 	smlad	lr, r6, r2, lr
 800bf0e:	f04f 174b 	mov.w	r7, #4915275	; 0x4b004b
 800bf12:	fb24 e707 	smlad	r7, r4, r7, lr
 800bf16:	4a3b      	ldr	r2, [pc, #236]	; (800c004 <D80_GENERIC+0x27c>)
 800bf18:	fb21 7702 	smlad	r7, r1, r2, r7
 800bf1c:	4a3a      	ldr	r2, [pc, #232]	; (800c008 <D80_GENERIC+0x280>)
 800bf1e:	fb25 7202 	smlad	r2, r5, r2, r7
 800bf22:	f04f 0901 	mov.w	r9, #1
 800bf26:	9201      	str	r2, [sp, #4]
 800bf28:	fb23 f909 	smuad	r9, r3, r9
 800bf2c:	4b37      	ldr	r3, [pc, #220]	; (800c00c <D80_GENERIC+0x284>)
 800bf2e:	fb26 9603 	smlad	r6, r6, r3, r9
 800bf32:	4f37      	ldr	r7, [pc, #220]	; (800c010 <D80_GENERIC+0x288>)
 800bf34:	fb24 6407 	smlad	r4, r4, r7, r6
 800bf38:	4f36      	ldr	r7, [pc, #216]	; (800c014 <D80_GENERIC+0x28c>)
 800bf3a:	fb21 4707 	smlad	r7, r1, r7, r4
 800bf3e:	4936      	ldr	r1, [pc, #216]	; (800c018 <D80_GENERIC+0x290>)
 800bf40:	fb25 7301 	smlad	r3, r5, r1, r7
 800bf44:	9303      	str	r3, [sp, #12]
 800bf46:	f5aa 3a7a 	sub.w	sl, sl, #256000	; 0x3e800
 800bf4a:	9b08      	ldr	r3, [sp, #32]
 800bf4c:	b193      	cbz	r3, 800bf74 <D80_GENERIC+0x1ec>
 800bf4e:	9a04      	ldr	r2, [sp, #16]
 800bf50:	4452      	add	r2, sl
 800bf52:	4614      	mov	r4, r2
 800bf54:	9a05      	ldr	r2, [sp, #20]
 800bf56:	f8cd a014 	str.w	sl, [sp, #20]
 800bf5a:	1aa4      	subs	r4, r4, r2
 800bf5c:	fba4 1203 	umull	r1, r2, r4, r3
 800bf60:	17e7      	asrs	r7, r4, #31
 800bf62:	f111 4400 	adds.w	r4, r1, #2147483648	; 0x80000000
 800bf66:	fb03 2207 	mla	r2, r3, r7, r2
 800bf6a:	f142 0500 	adc.w	r5, r2, #0
 800bf6e:	006b      	lsls	r3, r5, #1
 800bf70:	469a      	mov	sl, r3
 800bf72:	9304      	str	r3, [sp, #16]
 800bf74:	9e00      	ldr	r6, [sp, #0]
 800bf76:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
 800bf7a:	9a06      	ldr	r2, [sp, #24]
 800bf7c:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800bf80:	8d33      	ldrh	r3, [r6, #40]	; 0x28
 800bf82:	2500      	movs	r5, #0
 800bf84:	fb08 f303 	mul.w	r3, r8, r3
 800bf88:	fbc2 450a 	smlal	r4, r5, r2, sl
 800bf8c:	9a07      	ldr	r2, [sp, #28]
 800bf8e:	f108 0801 	add.w	r8, r8, #1
 800bf92:	10a9      	asrs	r1, r5, #2
 800bf94:	f301 010f 	ssat	r1, #16, r1
 800bf98:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800bf9c:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 800bf9e:	4543      	cmp	r3, r8
 800bfa0:	dd12      	ble.n	800bfc8 <D80_GENERIC+0x240>
 800bfa2:	9b00      	ldr	r3, [sp, #0]
 800bfa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bfa6:	2b01      	cmp	r3, #1
 800bfa8:	f47f af0c 	bne.w	800bdc4 <D80_GENERIC+0x3c>
 800bfac:	9b00      	ldr	r3, [sp, #0]
 800bfae:	6885      	ldr	r5, [r0, #8]
 800bfb0:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 800bfb2:	06b2      	lsls	r2, r6, #26
 800bfb4:	e9d0 3100 	ldrd	r3, r1, [r0]
 800bfb8:	f100 000a 	add.w	r0, r0, #10
 800bfbc:	f57f af35 	bpl.w	800be2a <D80_GENERIC+0xa2>
 800bfc0:	ba5b      	rev16	r3, r3
 800bfc2:	ba49      	rev16	r1, r1
 800bfc4:	ba6d      	rev16	r5, r5
 800bfc6:	e730      	b.n	800be2a <D80_GENERIC+0xa2>
 800bfc8:	4632      	mov	r2, r6
 800bfca:	9b03      	ldr	r3, [sp, #12]
 800bfcc:	2000      	movs	r0, #0
 800bfce:	6093      	str	r3, [r2, #8]
 800bfd0:	9b01      	ldr	r3, [sp, #4]
 800bfd2:	60d3      	str	r3, [r2, #12]
 800bfd4:	9b02      	ldr	r3, [sp, #8]
 800bfd6:	61d3      	str	r3, [r2, #28]
 800bfd8:	9b04      	ldr	r3, [sp, #16]
 800bfda:	6113      	str	r3, [r2, #16]
 800bfdc:	9b05      	ldr	r3, [sp, #20]
 800bfde:	6153      	str	r3, [r2, #20]
 800bfe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfe2:	6193      	str	r3, [r2, #24]
 800bfe4:	b00b      	add	sp, #44	; 0x2c
 800bfe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfea:	bf00      	nop
 800bfec:	002d0024 	.word	0x002d0024
 800bff0:	001c0015 	.word	0x001c0015
 800bff4:	000f000a 	.word	0x000f000a
 800bff8:	00060003 	.word	0x00060003
 800bffc:	0037003f 	.word	0x0037003f
 800c000:	00450049 	.word	0x00450049
 800c004:	00490045 	.word	0x00490045
 800c008:	003f0037 	.word	0x003f0037
 800c00c:	00030006 	.word	0x00030006
 800c010:	000a000f 	.word	0x000a000f
 800c014:	0015001c 	.word	0x0015001c
 800c018:	0024002d 	.word	0x0024002d
 800c01c:	24000000 	.word	0x24000000

0800c020 <D128_GENERIC>:
 800c020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c024:	b08d      	sub	sp, #52	; 0x34
 800c026:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800c028:	f8d2 a01c 	ldr.w	sl, [r2, #28]
 800c02c:	9109      	str	r1, [sp, #36]	; 0x24
 800c02e:	6911      	ldr	r1, [r2, #16]
 800c030:	9201      	str	r2, [sp, #4]
 800c032:	9106      	str	r1, [sp, #24]
 800c034:	6951      	ldr	r1, [r2, #20]
 800c036:	9107      	str	r1, [sp, #28]
 800c038:	6991      	ldr	r1, [r2, #24]
 800c03a:	910b      	str	r1, [sp, #44]	; 0x2c
 800c03c:	6891      	ldr	r1, [r2, #8]
 800c03e:	9103      	str	r1, [sp, #12]
 800c040:	68d1      	ldr	r1, [r2, #12]
 800c042:	9102      	str	r1, [sp, #8]
 800c044:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800c046:	9108      	str	r1, [sp, #32]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	f000 8183 	beq.w	800c354 <D128_GENERIC+0x334>
 800c04e:	2300      	movs	r3, #0
 800c050:	6a12      	ldr	r2, [r2, #32]
 800c052:	4681      	mov	r9, r0
 800c054:	920a      	str	r2, [sp, #40]	; 0x28
 800c056:	e9cd a304 	strd	sl, r3, [sp, #16]
 800c05a:	e165      	b.n	800c328 <D128_GENERIC+0x308>
 800c05c:	b2d2      	uxtb	r2, r2
 800c05e:	f899 b000 	ldrb.w	fp, [r9]
 800c062:	b213      	sxth	r3, r2
 800c064:	4255      	negs	r5, r2
 800c066:	f819 0002 	ldrb.w	r0, [r9, r2]
 800c06a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800c06e:	009f      	lsls	r7, r3, #2
 800c070:	eb09 0402 	add.w	r4, r9, r2
 800c074:	ebc3 06c3 	rsb	r6, r3, r3, lsl #3
 800c078:	f819 8002 	ldrb.w	r8, [r9, r2]
 800c07c:	443b      	add	r3, r7
 800c07e:	1962      	adds	r2, r4, r5
 800c080:	5d64      	ldrb	r4, [r4, r5]
 800c082:	eb02 0c03 	add.w	ip, r2, r3
 800c086:	0424      	lsls	r4, r4, #16
 800c088:	5cd3      	ldrb	r3, [r2, r3]
 800c08a:	eb0c 0e05 	add.w	lr, ip, r5
 800c08e:	f81c 9015 	ldrb.w	r9, [ip, r5, lsl #1]
 800c092:	f81c 2005 	ldrb.w	r2, [ip, r5]
 800c096:	eb04 6408 	add.w	r4, r4, r8, lsl #24
 800c09a:	eb0e 0c45 	add.w	ip, lr, r5, lsl #1
 800c09e:	f81e 8015 	ldrb.w	r8, [lr, r5, lsl #1]
 800c0a2:	eb04 2400 	add.w	r4, r4, r0, lsl #8
 800c0a6:	eb0c 0e06 	add.w	lr, ip, r6
 800c0aa:	f81c a006 	ldrb.w	sl, [ip, r6]
 800c0ae:	0412      	lsls	r2, r2, #16
 800c0b0:	445c      	add	r4, fp
 800c0b2:	eb0e 0c05 	add.w	ip, lr, r5
 800c0b6:	eb02 6203 	add.w	r2, r2, r3, lsl #24
 800c0ba:	f81e 3005 	ldrb.w	r3, [lr, r5]
 800c0be:	eb0c 0045 	add.w	r0, ip, r5, lsl #1
 800c0c2:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 800c0c6:	041b      	lsls	r3, r3, #16
 800c0c8:	f81c c015 	ldrb.w	ip, [ip, r5, lsl #1]
 800c0cc:	eb00 0b06 	add.w	fp, r0, r6
 800c0d0:	5d80      	ldrb	r0, [r0, r6]
 800c0d2:	eb03 630a 	add.w	r3, r3, sl, lsl #24
 800c0d6:	f81b 6005 	ldrb.w	r6, [fp, r5]
 800c0da:	eb0b 0a05 	add.w	sl, fp, r5
 800c0de:	eb02 2209 	add.w	r2, r2, r9, lsl #8
 800c0e2:	f81b b015 	ldrb.w	fp, [fp, r5, lsl #1]
 800c0e6:	0436      	lsls	r6, r6, #16
 800c0e8:	eb0a 0945 	add.w	r9, sl, r5, lsl #1
 800c0ec:	4442      	add	r2, r8
 800c0ee:	eb06 6600 	add.w	r6, r6, r0, lsl #24
 800c0f2:	f81a 8015 	ldrb.w	r8, [sl, r5, lsl #1]
 800c0f6:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 800c0fa:	44b9      	add	r9, r7
 800c0fc:	eb06 260b 	add.w	r6, r6, fp, lsl #8
 800c100:	4463      	add	r3, ip
 800c102:	eb06 0508 	add.w	r5, r6, r8
 800c106:	b2e7      	uxtb	r7, r4
 800c108:	f3c4 2607 	ubfx	r6, r4, #8, #8
 800c10c:	499b      	ldr	r1, [pc, #620]	; (800c37c <D128_GENERIC+0x35c>)
 800c10e:	f3c4 4007 	ubfx	r0, r4, #16, #8
 800c112:	0e24      	lsrs	r4, r4, #24
 800c114:	f851 c027 	ldr.w	ip, [r1, r7, lsl #2]
 800c118:	b2d7      	uxtb	r7, r2
 800c11a:	f851 b026 	ldr.w	fp, [r1, r6, lsl #2]
 800c11e:	f3c2 2607 	ubfx	r6, r2, #8, #8
 800c122:	9904      	ldr	r1, [sp, #16]
 800c124:	4461      	add	r1, ip
 800c126:	468c      	mov	ip, r1
 800c128:	4994      	ldr	r1, [pc, #592]	; (800c37c <D128_GENERIC+0x35c>)
 800c12a:	eb0b 2b9c 	add.w	fp, fp, ip, lsr #10
 800c12e:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800c132:	f851 8024 	ldr.w	r8, [r1, r4, lsl #2]
 800c136:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800c13a:	eb00 209b 	add.w	r0, r0, fp, lsr #10
 800c13e:	f851 e027 	ldr.w	lr, [r1, r7, lsl #2]
 800c142:	f851 7026 	ldr.w	r7, [r1, r6, lsl #2]
 800c146:	0e12      	lsrs	r2, r2, #24
 800c148:	eb08 2890 	add.w	r8, r8, r0, lsr #10
 800c14c:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800c150:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 800c154:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800c158:	eb0e 2e98 	add.w	lr, lr, r8, lsr #10
 800c15c:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800c160:	b2da      	uxtb	r2, r3
 800c162:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800c166:	eb07 279e 	add.w	r7, r7, lr, lsr #10
 800c16a:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800c16e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800c172:	ea48 4800 	orr.w	r8, r8, r0, lsl #16
 800c176:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 800c17a:	f3c3 2007 	ubfx	r0, r3, #8, #8
 800c17e:	ea4b 4b0c 	orr.w	fp, fp, ip, lsl #16
 800c182:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800c186:	eb06 269a 	add.w	r6, r6, sl, lsr #10
 800c18a:	f851 c020 	ldr.w	ip, [r1, r0, lsl #2]
 800c18e:	f3c3 4007 	ubfx	r0, r3, #16, #8
 800c192:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800c196:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 800c19a:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800c19e:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 800c1a2:	0e1b      	lsrs	r3, r3, #24
 800c1a4:	eb0c 2c92 	add.w	ip, ip, r2, lsr #10
 800c1a8:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800c1ac:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800c1b0:	ea47 470e 	orr.w	r7, r7, lr, lsl #16
 800c1b4:	b2eb      	uxtb	r3, r5
 800c1b6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800c1ba:	eb04 2e9c 	add.w	lr, r4, ip, lsr #10
 800c1be:	f3cc 0409 	ubfx	r4, ip, #0, #10
 800c1c2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c1c6:	ea46 460a 	orr.w	r6, r6, sl, lsl #16
 800c1ca:	eb00 209e 	add.w	r0, r0, lr, lsr #10
 800c1ce:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 800c1d2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800c1d6:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800c1da:	eb03 2c90 	add.w	ip, r3, r0, lsr #10
 800c1de:	f851 202a 	ldr.w	r2, [r1, sl, lsl #2]
 800c1e2:	f3c5 4307 	ubfx	r3, r5, #16, #8
 800c1e6:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 800c1ea:	eb02 229c 	add.w	r2, r2, ip, lsr #10
 800c1ee:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800c1f2:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
 800c1f6:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800c1fa:	f851 302a 	ldr.w	r3, [r1, sl, lsl #2]
 800c1fe:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 800c202:	eb05 2592 	add.w	r5, r5, r2, lsr #10
 800c206:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800c20a:	eb03 2e95 	add.w	lr, r3, r5, lsr #10
 800c20e:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800c212:	ea42 430c 	orr.w	r3, r2, ip, lsl #16
 800c216:	ea4f 219e 	mov.w	r1, lr, lsr #10
 800c21a:	f3ce 0209 	ubfx	r2, lr, #0, #10
 800c21e:	9104      	str	r1, [sp, #16]
 800c220:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800c224:	9902      	ldr	r1, [sp, #8]
 800c226:	4a56      	ldr	r2, [pc, #344]	; (800c380 <D128_GENERIC+0x360>)
 800c228:	fb2b 1202 	smlad	r2, fp, r2, r1
 800c22c:	4955      	ldr	r1, [pc, #340]	; (800c384 <D128_GENERIC+0x364>)
 800c22e:	fb28 2201 	smlad	r2, r8, r1, r2
 800c232:	4955      	ldr	r1, [pc, #340]	; (800c388 <D128_GENERIC+0x368>)
 800c234:	fb27 2201 	smlad	r2, r7, r1, r2
 800c238:	4954      	ldr	r1, [pc, #336]	; (800c38c <D128_GENERIC+0x36c>)
 800c23a:	fb26 2201 	smlad	r2, r6, r1, r2
 800c23e:	4954      	ldr	r1, [pc, #336]	; (800c390 <D128_GENERIC+0x370>)
 800c240:	fb24 2201 	smlad	r2, r4, r1, r2
 800c244:	4953      	ldr	r1, [pc, #332]	; (800c394 <D128_GENERIC+0x374>)
 800c246:	fb20 2201 	smlad	r2, r0, r1, r2
 800c24a:	4953      	ldr	r1, [pc, #332]	; (800c398 <D128_GENERIC+0x378>)
 800c24c:	fb23 2201 	smlad	r2, r3, r1, r2
 800c250:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
 800c254:	fb25 2a0c 	smlad	sl, r5, ip, r2
 800c258:	4950      	ldr	r1, [pc, #320]	; (800c39c <D128_GENERIC+0x37c>)
 800c25a:	9a03      	ldr	r2, [sp, #12]
 800c25c:	fb2b 2c01 	smlad	ip, fp, r1, r2
 800c260:	4a4f      	ldr	r2, [pc, #316]	; (800c3a0 <D128_GENERIC+0x380>)
 800c262:	fb28 ce02 	smlad	lr, r8, r2, ip
 800c266:	f8df c150 	ldr.w	ip, [pc, #336]	; 800c3b8 <D128_GENERIC+0x398>
 800c26a:	fb27 ec0c 	smlad	ip, r7, ip, lr
 800c26e:	f8df e14c 	ldr.w	lr, [pc, #332]	; 800c3bc <D128_GENERIC+0x39c>
 800c272:	fb26 cc0e 	smlad	ip, r6, lr, ip
 800c276:	f8df e148 	ldr.w	lr, [pc, #328]	; 800c3c0 <D128_GENERIC+0x3a0>
 800c27a:	fb24 ce0e 	smlad	lr, r4, lr, ip
 800c27e:	f8df c144 	ldr.w	ip, [pc, #324]	; 800c3c4 <D128_GENERIC+0x3a4>
 800c282:	fb20 ee0c 	smlad	lr, r0, ip, lr
 800c286:	f8df c140 	ldr.w	ip, [pc, #320]	; 800c3c8 <D128_GENERIC+0x3a8>
 800c28a:	fb23 ec0c 	smlad	ip, r3, ip, lr
 800c28e:	f8df e13c 	ldr.w	lr, [pc, #316]	; 800c3cc <D128_GENERIC+0x3ac>
 800c292:	fb25 c20e 	smlad	r2, r5, lr, ip
 800c296:	f04f 0c01 	mov.w	ip, #1
 800c29a:	9202      	str	r2, [sp, #8]
 800c29c:	fb2b fb0c 	smuad	fp, fp, ip
 800c2a0:	f8df c12c 	ldr.w	ip, [pc, #300]	; 800c3d0 <D128_GENERIC+0x3b0>
 800c2a4:	fb28 bb0c 	smlad	fp, r8, ip, fp
 800c2a8:	f8df c128 	ldr.w	ip, [pc, #296]	; 800c3d4 <D128_GENERIC+0x3b4>
 800c2ac:	fb27 bb0c 	smlad	fp, r7, ip, fp
 800c2b0:	4f3c      	ldr	r7, [pc, #240]	; (800c3a4 <D128_GENERIC+0x384>)
 800c2b2:	fb26 bb07 	smlad	fp, r6, r7, fp
 800c2b6:	4f3c      	ldr	r7, [pc, #240]	; (800c3a8 <D128_GENERIC+0x388>)
 800c2b8:	fb24 bb07 	smlad	fp, r4, r7, fp
 800c2bc:	4f3b      	ldr	r7, [pc, #236]	; (800c3ac <D128_GENERIC+0x38c>)
 800c2be:	fb20 bb07 	smlad	fp, r0, r7, fp
 800c2c2:	4f3b      	ldr	r7, [pc, #236]	; (800c3b0 <D128_GENERIC+0x390>)
 800c2c4:	fb23 bb07 	smlad	fp, r3, r7, fp
 800c2c8:	4b3a      	ldr	r3, [pc, #232]	; (800c3b4 <D128_GENERIC+0x394>)
 800c2ca:	fb25 b303 	smlad	r3, r5, r3, fp
 800c2ce:	9303      	str	r3, [sp, #12]
 800c2d0:	f5aa 1480 	sub.w	r4, sl, #1048576	; 0x100000
 800c2d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c2d6:	b183      	cbz	r3, 800c2fa <D128_GENERIC+0x2da>
 800c2d8:	9a06      	ldr	r2, [sp, #24]
 800c2da:	9907      	ldr	r1, [sp, #28]
 800c2dc:	4422      	add	r2, r4
 800c2de:	9407      	str	r4, [sp, #28]
 800c2e0:	1a52      	subs	r2, r2, r1
 800c2e2:	fba2 0103 	umull	r0, r1, r2, r3
 800c2e6:	17d5      	asrs	r5, r2, #31
 800c2e8:	f110 4200 	adds.w	r2, r0, #2147483648	; 0x80000000
 800c2ec:	fb03 1105 	mla	r1, r3, r5, r1
 800c2f0:	f141 0300 	adc.w	r3, r1, #0
 800c2f4:	005b      	lsls	r3, r3, #1
 800c2f6:	461c      	mov	r4, r3
 800c2f8:	9306      	str	r3, [sp, #24]
 800c2fa:	9d01      	ldr	r5, [sp, #4]
 800c2fc:	01e4      	lsls	r4, r4, #7
 800c2fe:	9e05      	ldr	r6, [sp, #20]
 800c300:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c304:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 800c306:	2300      	movs	r3, #0
 800c308:	9908      	ldr	r1, [sp, #32]
 800c30a:	fb06 f000 	mul.w	r0, r6, r0
 800c30e:	3601      	adds	r6, #1
 800c310:	fbc1 2304 	smlal	r2, r3, r1, r4
 800c314:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c316:	109b      	asrs	r3, r3, #2
 800c318:	9605      	str	r6, [sp, #20]
 800c31a:	f303 030f 	ssat	r3, #16, r3
 800c31e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
 800c322:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 800c324:	42b3      	cmp	r3, r6
 800c326:	dd13      	ble.n	800c350 <D128_GENERIC+0x330>
 800c328:	9b01      	ldr	r3, [sp, #4]
 800c32a:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800c32c:	2a01      	cmp	r2, #1
 800c32e:	f47f ae95 	bne.w	800c05c <D128_GENERIC+0x3c>
 800c332:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800c334:	f109 0610 	add.w	r6, r9, #16
 800c338:	0681      	lsls	r1, r0, #26
 800c33a:	e9d9 4200 	ldrd	r4, r2, [r9]
 800c33e:	e9d9 3502 	ldrd	r3, r5, [r9, #8]
 800c342:	d518      	bpl.n	800c376 <D128_GENERIC+0x356>
 800c344:	ba64      	rev16	r4, r4
 800c346:	ba52      	rev16	r2, r2
 800c348:	ba5b      	rev16	r3, r3
 800c34a:	ba6d      	rev16	r5, r5
 800c34c:	46b1      	mov	r9, r6
 800c34e:	e6da      	b.n	800c106 <D128_GENERIC+0xe6>
 800c350:	f8dd a010 	ldr.w	sl, [sp, #16]
 800c354:	9b01      	ldr	r3, [sp, #4]
 800c356:	2000      	movs	r0, #0
 800c358:	9903      	ldr	r1, [sp, #12]
 800c35a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c35c:	6099      	str	r1, [r3, #8]
 800c35e:	9902      	ldr	r1, [sp, #8]
 800c360:	f8c3 a01c 	str.w	sl, [r3, #28]
 800c364:	60d9      	str	r1, [r3, #12]
 800c366:	9906      	ldr	r1, [sp, #24]
 800c368:	619a      	str	r2, [r3, #24]
 800c36a:	6119      	str	r1, [r3, #16]
 800c36c:	9907      	ldr	r1, [sp, #28]
 800c36e:	6159      	str	r1, [r3, #20]
 800c370:	b00d      	add	sp, #52	; 0x34
 800c372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c376:	46b1      	mov	r9, r6
 800c378:	e6c5      	b.n	800c106 <D128_GENERIC+0xe6>
 800c37a:	bf00      	nop
 800c37c:	24000000 	.word	0x24000000
 800c380:	00780069 	.word	0x00780069
 800c384:	005b004e 	.word	0x005b004e
 800c388:	00420037 	.word	0x00420037
 800c38c:	002d0024 	.word	0x002d0024
 800c390:	001c0015 	.word	0x001c0015
 800c394:	000f000a 	.word	0x000f000a
 800c398:	00060003 	.word	0x00060003
 800c39c:	00880096 	.word	0x00880096
 800c3a0:	00a200ac 	.word	0x00a200ac
 800c3a4:	0015001c 	.word	0x0015001c
 800c3a8:	0024002d 	.word	0x0024002d
 800c3ac:	00370042 	.word	0x00370042
 800c3b0:	004e005b 	.word	0x004e005b
 800c3b4:	00690078 	.word	0x00690078
 800c3b8:	00b400ba 	.word	0x00b400ba
 800c3bc:	00be00c0 	.word	0x00be00c0
 800c3c0:	00c000be 	.word	0x00c000be
 800c3c4:	00ba00b4 	.word	0x00ba00b4
 800c3c8:	00ac00a2 	.word	0x00ac00a2
 800c3cc:	00960088 	.word	0x00960088
 800c3d0:	00030006 	.word	0x00030006
 800c3d4:	000a000f 	.word	0x000a000f

0800c3d8 <D16_1CH_HTONS_VOL_HP>:
 800c3d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3dc:	6993      	ldr	r3, [r2, #24]
 800c3de:	b087      	sub	sp, #28
 800c3e0:	4682      	mov	sl, r0
 800c3e2:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 800c3e4:	9304      	str	r3, [sp, #16]
 800c3e6:	f8d2 b030 	ldr.w	fp, [r2, #48]	; 0x30
 800c3ea:	69d3      	ldr	r3, [r2, #28]
 800c3ec:	f8d2 e020 	ldr.w	lr, [r2, #32]
 800c3f0:	e9d2 5402 	ldrd	r5, r4, [r2, #8]
 800c3f4:	e9d2 6c04 	ldrd	r6, ip, [r2, #16]
 800c3f8:	9403      	str	r4, [sp, #12]
 800c3fa:	2800      	cmp	r0, #0
 800c3fc:	d054      	beq.n	800c4a8 <D16_1CH_HTONS_VOL_HP+0xd0>
 800c3fe:	f1a1 0902 	sub.w	r9, r1, #2
 800c402:	eb0a 0140 	add.w	r1, sl, r0, lsl #1
 800c406:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 800c4b4 <D16_1CH_HTONS_VOL_HP+0xdc>
 800c40a:	4650      	mov	r0, sl
 800c40c:	9101      	str	r1, [sp, #4]
 800c40e:	4619      	mov	r1, r3
 800c410:	f8cd b008 	str.w	fp, [sp, #8]
 800c414:	9205      	str	r2, [sp, #20]
 800c416:	f850 3b02 	ldr.w	r3, [r0], #2
 800c41a:	ba5b      	rev16	r3, r3
 800c41c:	b2dc      	uxtb	r4, r3
 800c41e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800c422:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c426:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 800c42a:	4419      	add	r1, r3
 800c42c:	eb04 2491 	add.w	r4, r4, r1, lsr #10
 800c430:	f3c1 0309 	ubfx	r3, r1, #0, #10
 800c434:	f3c4 0209 	ubfx	r2, r4, #0, #10
 800c438:	0aa1      	lsrs	r1, r4, #10
 800c43a:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 800c43e:	4a1b      	ldr	r2, [pc, #108]	; (800c4ac <D16_1CH_HTONS_VOL_HP+0xd4>)
 800c440:	fb23 5402 	smlad	r4, r3, r2, r5
 800c444:	4a1a      	ldr	r2, [pc, #104]	; (800c4b0 <D16_1CH_HTONS_VOL_HP+0xd8>)
 800c446:	fb23 f502 	smuad	r5, r3, r2
 800c44a:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 800c44e:	f04f 4a00 	mov.w	sl, #2147483648	; 0x80000000
 800c452:	f04f 0b00 	mov.w	fp, #0
 800c456:	19a2      	adds	r2, r4, r6
 800c458:	eba2 020c 	sub.w	r2, r2, ip
 800c45c:	46a4      	mov	ip, r4
 800c45e:	17d7      	asrs	r7, r2, #31
 800c460:	fba2 230e 	umull	r2, r3, r2, lr
 800c464:	f112 4600 	adds.w	r6, r2, #2147483648	; 0x80000000
 800c468:	fb0e 3307 	mla	r3, lr, r7, r3
 800c46c:	f143 0700 	adc.w	r7, r3, #0
 800c470:	9b02      	ldr	r3, [sp, #8]
 800c472:	047a      	lsls	r2, r7, #17
 800c474:	007e      	lsls	r6, r7, #1
 800c476:	fbc3 ab02 	smlal	sl, fp, r3, r2
 800c47a:	ea4f 03ab 	mov.w	r3, fp, asr #2
 800c47e:	f303 030f 	ssat	r3, #16, r3
 800c482:	f829 3f02 	strh.w	r3, [r9, #2]!
 800c486:	9b01      	ldr	r3, [sp, #4]
 800c488:	4298      	cmp	r0, r3
 800c48a:	d1c4      	bne.n	800c416 <D16_1CH_HTONS_VOL_HP+0x3e>
 800c48c:	460b      	mov	r3, r1
 800c48e:	9a05      	ldr	r2, [sp, #20]
 800c490:	2000      	movs	r0, #0
 800c492:	9903      	ldr	r1, [sp, #12]
 800c494:	61d3      	str	r3, [r2, #28]
 800c496:	9b04      	ldr	r3, [sp, #16]
 800c498:	6095      	str	r5, [r2, #8]
 800c49a:	60d1      	str	r1, [r2, #12]
 800c49c:	6193      	str	r3, [r2, #24]
 800c49e:	e9c2 6404 	strd	r6, r4, [r2, #16]
 800c4a2:	b007      	add	sp, #28
 800c4a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4a8:	4664      	mov	r4, ip
 800c4aa:	e7f1      	b.n	800c490 <D16_1CH_HTONS_VOL_HP+0xb8>
 800c4ac:	00030001 	.word	0x00030001
 800c4b0:	00010003 	.word	0x00010003
 800c4b4:	24000000 	.word	0x24000000

0800c4b8 <D24_1CH_HTONS_VOL_HP>:
 800c4b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4bc:	6b16      	ldr	r6, [r2, #48]	; 0x30
 800c4be:	b089      	sub	sp, #36	; 0x24
 800c4c0:	6993      	ldr	r3, [r2, #24]
 800c4c2:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800c4c4:	9604      	str	r6, [sp, #16]
 800c4c6:	6a16      	ldr	r6, [r2, #32]
 800c4c8:	9306      	str	r3, [sp, #24]
 800c4ca:	9505      	str	r5, [sp, #20]
 800c4cc:	69d3      	ldr	r3, [r2, #28]
 800c4ce:	9600      	str	r6, [sp, #0]
 800c4d0:	e9d2 4a04 	ldrd	r4, sl, [r2, #16]
 800c4d4:	e9d2 ce02 	ldrd	ip, lr, [r2, #8]
 800c4d8:	2d00      	cmp	r5, #0
 800c4da:	f000 8083 	beq.w	800c5e4 <D24_1CH_HTONS_VOL_HP+0x12c>
 800c4de:	9207      	str	r2, [sp, #28]
 800c4e0:	2600      	movs	r6, #0
 800c4e2:	4622      	mov	r2, r4
 800c4e4:	f1a1 0b02 	sub.w	fp, r1, #2
 800c4e8:	4f3f      	ldr	r7, [pc, #252]	; (800c5e8 <D24_1CH_HTONS_VOL_HP+0x130>)
 800c4ea:	461d      	mov	r5, r3
 800c4ec:	f8cd a00c 	str.w	sl, [sp, #12]
 800c4f0:	9c00      	ldr	r4, [sp, #0]
 800c4f2:	e056      	b.n	800c5a2 <D24_1CH_HTONS_VOL_HP+0xea>
 800c4f4:	7841      	ldrb	r1, [r0, #1]
 800c4f6:	eb08 4809 	add.w	r8, r8, r9, lsl #16
 800c4fa:	3002      	adds	r0, #2
 800c4fc:	4488      	add	r8, r1
 800c4fe:	fa5f f388 	uxtb.w	r3, r8
 800c502:	f3c8 2907 	ubfx	r9, r8, #8, #8
 800c506:	ea4f 4818 	mov.w	r8, r8, lsr #16
 800c50a:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 800c50e:	f857 3029 	ldr.w	r3, [r7, r9, lsl #2]
 800c512:	eb01 2195 	add.w	r1, r1, r5, lsr #10
 800c516:	f857 5028 	ldr.w	r5, [r7, r8, lsl #2]
 800c51a:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 800c51e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800c522:	f3c8 0309 	ubfx	r3, r8, #0, #10
 800c526:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 800c52a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800c52e:	492f      	ldr	r1, [pc, #188]	; (800c5ec <D24_1CH_HTONS_VOL_HP+0x134>)
 800c530:	fb23 e901 	smlad	r9, r3, r1, lr
 800c534:	492e      	ldr	r1, [pc, #184]	; (800c5f0 <D24_1CH_HTONS_VOL_HP+0x138>)
 800c536:	fb23 ce01 	smlad	lr, r3, r1, ip
 800c53a:	f3c5 0c09 	ubfx	ip, r5, #0, #10
 800c53e:	2101      	movs	r1, #1
 800c540:	eb0c 084c 	add.w	r8, ip, ip, lsl #1
 800c544:	eb0e 0e48 	add.w	lr, lr, r8, lsl #1
 800c548:	fb23 f301 	smuad	r3, r3, r1
 800c54c:	f5a9 51d8 	sub.w	r1, r9, #6912	; 0x1b00
 800c550:	eb08 0c03 	add.w	ip, r8, r3
 800c554:	9b03      	ldr	r3, [sp, #12]
 800c556:	f04f 0a00 	mov.w	sl, #0
 800c55a:	440a      	add	r2, r1
 800c55c:	3601      	adds	r6, #1
 800c55e:	9103      	str	r1, [sp, #12]
 800c560:	1ad2      	subs	r2, r2, r3
 800c562:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800c566:	fba2 2304 	umull	r2, r3, r2, r4
 800c56a:	e9cd 2300 	strd	r2, r3, [sp]
 800c56e:	fb04 3309 	mla	r3, r4, r9, r3
 800c572:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 800c576:	9301      	str	r3, [sp, #4]
 800c578:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c57c:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800c580:	f143 0300 	adc.w	r3, r3, #0
 800c584:	ea4f 38c3 	mov.w	r8, r3, lsl #15
 800c588:	005a      	lsls	r2, r3, #1
 800c58a:	9b04      	ldr	r3, [sp, #16]
 800c58c:	fbc3 9a08 	smlal	r9, sl, r3, r8
 800c590:	ea4f 03aa 	mov.w	r3, sl, asr #2
 800c594:	f303 030f 	ssat	r3, #16, r3
 800c598:	f82b 3f02 	strh.w	r3, [fp, #2]!
 800c59c:	9b05      	ldr	r3, [sp, #20]
 800c59e:	429e      	cmp	r6, r3
 800c5a0:	d010      	beq.n	800c5c4 <D24_1CH_HTONS_VOL_HP+0x10c>
 800c5a2:	f890 9003 	ldrb.w	r9, [r0, #3]
 800c5a6:	f016 0f01 	tst.w	r6, #1
 800c5aa:	7801      	ldrb	r1, [r0, #0]
 800c5ac:	ea4f 2309 	mov.w	r3, r9, lsl #8
 800c5b0:	ea4f 2801 	mov.w	r8, r1, lsl #8
 800c5b4:	d09e      	beq.n	800c4f4 <D24_1CH_HTONS_VOL_HP+0x3c>
 800c5b6:	f890 8002 	ldrb.w	r8, [r0, #2]
 800c5ba:	3004      	adds	r0, #4
 800c5bc:	eb03 4808 	add.w	r8, r3, r8, lsl #16
 800c5c0:	4488      	add	r8, r1
 800c5c2:	e79c      	b.n	800c4fe <D24_1CH_HTONS_VOL_HP+0x46>
 800c5c4:	4614      	mov	r4, r2
 800c5c6:	462b      	mov	r3, r5
 800c5c8:	9a07      	ldr	r2, [sp, #28]
 800c5ca:	2000      	movs	r0, #0
 800c5cc:	61d3      	str	r3, [r2, #28]
 800c5ce:	9b06      	ldr	r3, [sp, #24]
 800c5d0:	f8c2 c008 	str.w	ip, [r2, #8]
 800c5d4:	f8c2 e00c 	str.w	lr, [r2, #12]
 800c5d8:	6193      	str	r3, [r2, #24]
 800c5da:	e9c2 4104 	strd	r4, r1, [r2, #16]
 800c5de:	b009      	add	sp, #36	; 0x24
 800c5e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5e4:	4651      	mov	r1, sl
 800c5e6:	e7f0      	b.n	800c5ca <D24_1CH_HTONS_VOL_HP+0x112>
 800c5e8:	24000000 	.word	0x24000000
 800c5ec:	00030001 	.word	0x00030001
 800c5f0:	00060007 	.word	0x00060007

0800c5f4 <D32_1CH_HTONS_VOL_HP>:
 800c5f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5f8:	6993      	ldr	r3, [r2, #24]
 800c5fa:	b087      	sub	sp, #28
 800c5fc:	4683      	mov	fp, r0
 800c5fe:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 800c600:	9304      	str	r3, [sp, #16]
 800c602:	69d5      	ldr	r5, [r2, #28]
 800c604:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800c606:	f8d2 a020 	ldr.w	sl, [r2, #32]
 800c60a:	e9d2 8e04 	ldrd	r8, lr, [r2, #16]
 800c60e:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 800c612:	2800      	cmp	r0, #0
 800c614:	d077      	beq.n	800c706 <D32_1CH_HTONS_VOL_HP+0x112>
 800c616:	460f      	mov	r7, r1
 800c618:	46f1      	mov	r9, lr
 800c61a:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 800c61e:	f8cd 8000 	str.w	r8, [sp]
 800c622:	4e3a      	ldr	r6, [pc, #232]	; (800c70c <D32_1CH_HTONS_VOL_HP+0x118>)
 800c624:	469e      	mov	lr, r3
 800c626:	46a0      	mov	r8, r4
 800c628:	9103      	str	r1, [sp, #12]
 800c62a:	9205      	str	r2, [sp, #20]
 800c62c:	f85b 4b04 	ldr.w	r4, [fp], #4
 800c630:	ba64      	rev16	r4, r4
 800c632:	b2e0      	uxtb	r0, r4
 800c634:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800c638:	f3c4 4107 	ubfx	r1, r4, #16, #8
 800c63c:	0e24      	lsrs	r4, r4, #24
 800c63e:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 800c642:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800c646:	eb00 2095 	add.w	r0, r0, r5, lsr #10
 800c64a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800c64e:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
 800c652:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 800c656:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800c65a:	eb01 2193 	add.w	r1, r1, r3, lsr #10
 800c65e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c662:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800c666:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800c66a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c66e:	f3c5 0009 	ubfx	r0, r5, #0, #10
 800c672:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800c676:	4826      	ldr	r0, [pc, #152]	; (800c710 <D32_1CH_HTONS_VOL_HP+0x11c>)
 800c678:	fb23 c400 	smlad	r4, r3, r0, ip
 800c67c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800c680:	fb21 4402 	smlad	r4, r1, r2, r4
 800c684:	4823      	ldr	r0, [pc, #140]	; (800c714 <D32_1CH_HTONS_VOL_HP+0x120>)
 800c686:	fb23 ec00 	smlad	ip, r3, r0, lr
 800c68a:	4823      	ldr	r0, [pc, #140]	; (800c718 <D32_1CH_HTONS_VOL_HP+0x124>)
 800c68c:	fb21 cc00 	smlad	ip, r1, r0, ip
 800c690:	2201      	movs	r2, #1
 800c692:	fb23 f302 	smuad	r3, r3, r2
 800c696:	4821      	ldr	r0, [pc, #132]	; (800c71c <D32_1CH_HTONS_VOL_HP+0x128>)
 800c698:	fb21 3e00 	smlad	lr, r1, r0, r3
 800c69c:	9b00      	ldr	r3, [sp, #0]
 800c69e:	f5a4 4480 	sub.w	r4, r4, #16384	; 0x4000
 800c6a2:	4423      	add	r3, r4
 800c6a4:	eba3 0209 	sub.w	r2, r3, r9
 800c6a8:	46a1      	mov	r9, r4
 800c6aa:	17d1      	asrs	r1, r2, #31
 800c6ac:	fba2 230a 	umull	r2, r3, r2, sl
 800c6b0:	e9cd 2300 	strd	r2, r3, [sp]
 800c6b4:	fb0a 3301 	mla	r3, sl, r1, r3
 800c6b8:	9301      	str	r3, [sp, #4]
 800c6ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c6be:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800c6c2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c6c6:	f143 0300 	adc.w	r3, r3, #0
 800c6ca:	0399      	lsls	r1, r3, #14
 800c6cc:	005b      	lsls	r3, r3, #1
 800c6ce:	9300      	str	r3, [sp, #0]
 800c6d0:	2300      	movs	r3, #0
 800c6d2:	fbc8 2301 	smlal	r2, r3, r8, r1
 800c6d6:	109b      	asrs	r3, r3, #2
 800c6d8:	f303 030f 	ssat	r3, #16, r3
 800c6dc:	f827 3b02 	strh.w	r3, [r7], #2
 800c6e0:	9b03      	ldr	r3, [sp, #12]
 800c6e2:	429f      	cmp	r7, r3
 800c6e4:	d1a2      	bne.n	800c62c <D32_1CH_HTONS_VOL_HP+0x38>
 800c6e6:	4673      	mov	r3, lr
 800c6e8:	f8dd 8000 	ldr.w	r8, [sp]
 800c6ec:	9a05      	ldr	r2, [sp, #20]
 800c6ee:	6093      	str	r3, [r2, #8]
 800c6f0:	2000      	movs	r0, #0
 800c6f2:	9b04      	ldr	r3, [sp, #16]
 800c6f4:	f8c2 c00c 	str.w	ip, [r2, #12]
 800c6f8:	61d5      	str	r5, [r2, #28]
 800c6fa:	6193      	str	r3, [r2, #24]
 800c6fc:	e9c2 8404 	strd	r8, r4, [r2, #16]
 800c700:	b007      	add	sp, #28
 800c702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c706:	4674      	mov	r4, lr
 800c708:	e7f1      	b.n	800c6ee <D32_1CH_HTONS_VOL_HP+0xfa>
 800c70a:	bf00      	nop
 800c70c:	24000000 	.word	0x24000000
 800c710:	00060003 	.word	0x00060003
 800c714:	000a000c 	.word	0x000a000c
 800c718:	000c000a 	.word	0x000c000a
 800c71c:	00030006 	.word	0x00030006

0800c720 <D48_1CH_HTONS_VOL_HP>:
 800c720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c724:	6b17      	ldr	r7, [r2, #48]	; 0x30
 800c726:	b087      	sub	sp, #28
 800c728:	6993      	ldr	r3, [r2, #24]
 800c72a:	9701      	str	r7, [sp, #4]
 800c72c:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800c72e:	6a17      	ldr	r7, [r2, #32]
 800c730:	9304      	str	r3, [sp, #16]
 800c732:	69d6      	ldr	r6, [r2, #28]
 800c734:	9702      	str	r7, [sp, #8]
 800c736:	e9d2 4e04 	ldrd	r4, lr, [r2, #16]
 800c73a:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 800c73e:	2d00      	cmp	r5, #0
 800c740:	f000 8093 	beq.w	800c86a <D48_1CH_HTONS_VOL_HP+0x14a>
 800c744:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c748:	f1a1 0b02 	sub.w	fp, r1, #2
 800c74c:	46f2      	mov	sl, lr
 800c74e:	4f48      	ldr	r7, [pc, #288]	; (800c870 <D48_1CH_HTONS_VOL_HP+0x150>)
 800c750:	eb00 0145 	add.w	r1, r0, r5, lsl #1
 800c754:	469e      	mov	lr, r3
 800c756:	9205      	str	r2, [sp, #20]
 800c758:	9103      	str	r1, [sp, #12]
 800c75a:	e9d0 3200 	ldrd	r3, r2, [r0]
 800c75e:	3006      	adds	r0, #6
 800c760:	ba5b      	rev16	r3, r3
 800c762:	fa92 f992 	rev16.w	r9, r2
 800c766:	b2dd      	uxtb	r5, r3
 800c768:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800c76c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800c770:	0e1b      	lsrs	r3, r3, #24
 800c772:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 800c776:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 800c77a:	eb05 2696 	add.w	r6, r5, r6, lsr #10
 800c77e:	f857 5022 	ldr.w	r5, [r7, r2, lsl #2]
 800c782:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800c786:	fa5f f289 	uxtb.w	r2, r9
 800c78a:	eb01 2196 	add.w	r1, r1, r6, lsr #10
 800c78e:	f3c9 2907 	ubfx	r9, r9, #8, #8
 800c792:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800c796:	f3c6 0809 	ubfx	r8, r6, #0, #10
 800c79a:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800c79e:	f857 6029 	ldr.w	r6, [r7, r9, lsl #2]
 800c7a2:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800c7a6:	eb03 2395 	add.w	r3, r3, r5, lsr #10
 800c7aa:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800c7ae:	ea41 4808 	orr.w	r8, r1, r8, lsl #16
 800c7b2:	eb02 2293 	add.w	r2, r2, r3, lsr #10
 800c7b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c7ba:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 800c7be:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800c7c2:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 800c7c6:	f3c6 0309 	ubfx	r3, r6, #0, #10
 800c7ca:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 800c7ce:	4b29      	ldr	r3, [pc, #164]	; (800c874 <D48_1CH_HTONS_VOL_HP+0x154>)
 800c7d0:	fb28 c103 	smlad	r1, r8, r3, ip
 800c7d4:	4b28      	ldr	r3, [pc, #160]	; (800c878 <D48_1CH_HTONS_VOL_HP+0x158>)
 800c7d6:	fb25 1103 	smlad	r1, r5, r3, r1
 800c7da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800c7de:	fb22 1903 	smlad	r9, r2, r3, r1
 800c7e2:	4b26      	ldr	r3, [pc, #152]	; (800c87c <D48_1CH_HTONS_VOL_HP+0x15c>)
 800c7e4:	fb28 ec03 	smlad	ip, r8, r3, lr
 800c7e8:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 800c7ec:	fb25 cc03 	smlad	ip, r5, r3, ip
 800c7f0:	4b23      	ldr	r3, [pc, #140]	; (800c880 <D48_1CH_HTONS_VOL_HP+0x160>)
 800c7f2:	fb22 cc03 	smlad	ip, r2, r3, ip
 800c7f6:	2101      	movs	r1, #1
 800c7f8:	fb28 f801 	smuad	r8, r8, r1
 800c7fc:	4b21      	ldr	r3, [pc, #132]	; (800c884 <D48_1CH_HTONS_VOL_HP+0x164>)
 800c7fe:	fb25 8503 	smlad	r5, r5, r3, r8
 800c802:	4b21      	ldr	r3, [pc, #132]	; (800c888 <D48_1CH_HTONS_VOL_HP+0x168>)
 800c804:	fb22 5e03 	smlad	lr, r2, r3, r5
 800c808:	f5a9 4158 	sub.w	r1, r9, #55296	; 0xd800
 800c80c:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800c810:	190a      	adds	r2, r1, r4
 800c812:	9c02      	ldr	r4, [sp, #8]
 800c814:	eba2 020a 	sub.w	r2, r2, sl
 800c818:	468a      	mov	sl, r1
 800c81a:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800c81e:	fba2 2304 	umull	r2, r3, r2, r4
 800c822:	fb04 3309 	mla	r3, r4, r9, r3
 800c826:	f112 4400 	adds.w	r4, r2, #2147483648	; 0x80000000
 800c82a:	f04f 0900 	mov.w	r9, #0
 800c82e:	f143 0500 	adc.w	r5, r3, #0
 800c832:	9b01      	ldr	r3, [sp, #4]
 800c834:	032a      	lsls	r2, r5, #12
 800c836:	006c      	lsls	r4, r5, #1
 800c838:	fbc3 8902 	smlal	r8, r9, r3, r2
 800c83c:	ea4f 03a9 	mov.w	r3, r9, asr #2
 800c840:	f303 030f 	ssat	r3, #16, r3
 800c844:	f82b 3f02 	strh.w	r3, [fp, #2]!
 800c848:	9b03      	ldr	r3, [sp, #12]
 800c84a:	4283      	cmp	r3, r0
 800c84c:	d185      	bne.n	800c75a <D48_1CH_HTONS_VOL_HP+0x3a>
 800c84e:	4673      	mov	r3, lr
 800c850:	9a05      	ldr	r2, [sp, #20]
 800c852:	6093      	str	r3, [r2, #8]
 800c854:	2000      	movs	r0, #0
 800c856:	9b04      	ldr	r3, [sp, #16]
 800c858:	f8c2 c00c 	str.w	ip, [r2, #12]
 800c85c:	61d6      	str	r6, [r2, #28]
 800c85e:	6193      	str	r3, [r2, #24]
 800c860:	e9c2 4104 	strd	r4, r1, [r2, #16]
 800c864:	b007      	add	sp, #28
 800c866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c86a:	4671      	mov	r1, lr
 800c86c:	e7f1      	b.n	800c852 <D48_1CH_HTONS_VOL_HP+0x132>
 800c86e:	bf00      	nop
 800c870:	24000000 	.word	0x24000000
 800c874:	000f000a 	.word	0x000f000a
 800c878:	00060003 	.word	0x00060003
 800c87c:	00150019 	.word	0x00150019
 800c880:	00190015 	.word	0x00190015
 800c884:	00030006 	.word	0x00030006
 800c888:	000a000f 	.word	0x000a000f

0800c88c <D64_1CH_HTONS_VOL_HP>:
 800c88c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c890:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800c892:	b089      	sub	sp, #36	; 0x24
 800c894:	6993      	ldr	r3, [r2, #24]
 800c896:	4686      	mov	lr, r0
 800c898:	9503      	str	r5, [sp, #12]
 800c89a:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 800c89c:	6a15      	ldr	r5, [r2, #32]
 800c89e:	9306      	str	r3, [sp, #24]
 800c8a0:	69d6      	ldr	r6, [r2, #28]
 800c8a2:	9504      	str	r5, [sp, #16]
 800c8a4:	e9d2 8404 	ldrd	r8, r4, [r2, #16]
 800c8a8:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 800c8ac:	2800      	cmp	r0, #0
 800c8ae:	f000 80a4 	beq.w	800c9fa <D64_1CH_HTONS_VOL_HP+0x16e>
 800c8b2:	460f      	mov	r7, r1
 800c8b4:	46f1      	mov	r9, lr
 800c8b6:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 800c8ba:	4d56      	ldr	r5, [pc, #344]	; (800ca14 <D64_1CH_HTONS_VOL_HP+0x188>)
 800c8bc:	46a2      	mov	sl, r4
 800c8be:	469e      	mov	lr, r3
 800c8c0:	9105      	str	r1, [sp, #20]
 800c8c2:	9207      	str	r2, [sp, #28]
 800c8c4:	f859 1b08 	ldr.w	r1, [r9], #8
 800c8c8:	f859 3c04 	ldr.w	r3, [r9, #-4]
 800c8cc:	ba49      	rev16	r1, r1
 800c8ce:	fa93 fb93 	rev16.w	fp, r3
 800c8d2:	b2cb      	uxtb	r3, r1
 800c8d4:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800c8d8:	f3c1 4007 	ubfx	r0, r1, #16, #8
 800c8dc:	0e09      	lsrs	r1, r1, #24
 800c8de:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
 800c8e2:	fa5f f38b 	uxtb.w	r3, fp
 800c8e6:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800c8ea:	4426      	add	r6, r4
 800c8ec:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 800c8f0:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 800c8f4:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 800c8f8:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 800c8fc:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800c900:	f3cb 2307 	ubfx	r3, fp, #8, #8
 800c904:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 800c908:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800c90c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800c910:	eb01 2194 	add.w	r1, r1, r4, lsr #10
 800c914:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800c918:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 800c91c:	f3cb 4607 	ubfx	r6, fp, #16, #8
 800c920:	eb00 2091 	add.w	r0, r0, r1, lsr #10
 800c924:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800c928:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800c92c:	ea4f 6b1b 	mov.w	fp, fp, lsr #24
 800c930:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 800c934:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800c938:	f855 b02b 	ldr.w	fp, [r5, fp, lsl #2]
 800c93c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800c940:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 800c944:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c948:	eb0b 2b96 	add.w	fp, fp, r6, lsr #10
 800c94c:	f3c6 0409 	ubfx	r4, r6, #0, #10
 800c950:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c954:	f3cb 0009 	ubfx	r0, fp, #0, #10
 800c958:	ea4f 269b 	mov.w	r6, fp, lsr #10
 800c95c:	ea40 4b04 	orr.w	fp, r0, r4, lsl #16
 800c960:	482d      	ldr	r0, [pc, #180]	; (800ca18 <D64_1CH_HTONS_VOL_HP+0x18c>)
 800c962:	fb22 cc00 	smlad	ip, r2, r0, ip
 800c966:	482d      	ldr	r0, [pc, #180]	; (800ca1c <D64_1CH_HTONS_VOL_HP+0x190>)
 800c968:	fb21 cc00 	smlad	ip, r1, r0, ip
 800c96c:	482c      	ldr	r0, [pc, #176]	; (800ca20 <D64_1CH_HTONS_VOL_HP+0x194>)
 800c96e:	fb23 cc00 	smlad	ip, r3, r0, ip
 800c972:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 800c976:	fb2b c404 	smlad	r4, fp, r4, ip
 800c97a:	482a      	ldr	r0, [pc, #168]	; (800ca24 <D64_1CH_HTONS_VOL_HP+0x198>)
 800c97c:	fb22 ec00 	smlad	ip, r2, r0, lr
 800c980:	fb2b cc10 	smladx	ip, fp, r0, ip
 800c984:	4828      	ldr	r0, [pc, #160]	; (800ca28 <D64_1CH_HTONS_VOL_HP+0x19c>)
 800c986:	fb21 cc00 	smlad	ip, r1, r0, ip
 800c98a:	fb23 cc10 	smladx	ip, r3, r0, ip
 800c98e:	f04f 0e01 	mov.w	lr, #1
 800c992:	fb22 f20e 	smuad	r2, r2, lr
 800c996:	4825      	ldr	r0, [pc, #148]	; (800ca2c <D64_1CH_HTONS_VOL_HP+0x1a0>)
 800c998:	fb21 2100 	smlad	r1, r1, r0, r2
 800c99c:	4a24      	ldr	r2, [pc, #144]	; (800ca30 <D64_1CH_HTONS_VOL_HP+0x1a4>)
 800c99e:	fb23 1302 	smlad	r3, r3, r2, r1
 800c9a2:	4a24      	ldr	r2, [pc, #144]	; (800ca34 <D64_1CH_HTONS_VOL_HP+0x1a8>)
 800c9a4:	fb2b 3e02 	smlad	lr, fp, r2, r3
 800c9a8:	f5a4 3400 	sub.w	r4, r4, #131072	; 0x20000
 800c9ac:	eb04 0208 	add.w	r2, r4, r8
 800c9b0:	eba2 020a 	sub.w	r2, r2, sl
 800c9b4:	46a2      	mov	sl, r4
 800c9b6:	4610      	mov	r0, r2
 800c9b8:	17d1      	asrs	r1, r2, #31
 800c9ba:	e9cd 0100 	strd	r0, r1, [sp]
 800c9be:	9904      	ldr	r1, [sp, #16]
 800c9c0:	9801      	ldr	r0, [sp, #4]
 800c9c2:	fba2 2301 	umull	r2, r3, r2, r1
 800c9c6:	fb01 3300 	mla	r3, r1, r0, r3
 800c9ca:	f112 4000 	adds.w	r0, r2, #2147483648	; 0x80000000
 800c9ce:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800c9d2:	f143 0100 	adc.w	r1, r3, #0
 800c9d6:	9b03      	ldr	r3, [sp, #12]
 800c9d8:	02ca      	lsls	r2, r1, #11
 800c9da:	ea4f 0841 	mov.w	r8, r1, lsl #1
 800c9de:	2100      	movs	r1, #0
 800c9e0:	fbc3 0102 	smlal	r0, r1, r3, r2
 800c9e4:	108b      	asrs	r3, r1, #2
 800c9e6:	f303 030f 	ssat	r3, #16, r3
 800c9ea:	f827 3b02 	strh.w	r3, [r7], #2
 800c9ee:	9b05      	ldr	r3, [sp, #20]
 800c9f0:	429f      	cmp	r7, r3
 800c9f2:	f47f af67 	bne.w	800c8c4 <D64_1CH_HTONS_VOL_HP+0x38>
 800c9f6:	4673      	mov	r3, lr
 800c9f8:	9a07      	ldr	r2, [sp, #28]
 800c9fa:	6093      	str	r3, [r2, #8]
 800c9fc:	2000      	movs	r0, #0
 800c9fe:	9b06      	ldr	r3, [sp, #24]
 800ca00:	f8c2 c00c 	str.w	ip, [r2, #12]
 800ca04:	61d6      	str	r6, [r2, #28]
 800ca06:	6193      	str	r3, [r2, #24]
 800ca08:	e9c2 8404 	strd	r8, r4, [r2, #16]
 800ca0c:	b009      	add	sp, #36	; 0x24
 800ca0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca12:	bf00      	nop
 800ca14:	24000000 	.word	0x24000000
 800ca18:	001c0015 	.word	0x001c0015
 800ca1c:	000f000a 	.word	0x000f000a
 800ca20:	00060003 	.word	0x00060003
 800ca24:	0024002a 	.word	0x0024002a
 800ca28:	002e0030 	.word	0x002e0030
 800ca2c:	00030006 	.word	0x00030006
 800ca30:	000a000f 	.word	0x000a000f
 800ca34:	0015001c 	.word	0x0015001c

0800ca38 <D80_1CH_HTONS_VOL_HP>:
 800ca38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca3c:	6913      	ldr	r3, [r2, #16]
 800ca3e:	b089      	sub	sp, #36	; 0x24
 800ca40:	6b16      	ldr	r6, [r2, #48]	; 0x30
 800ca42:	9301      	str	r3, [sp, #4]
 800ca44:	9603      	str	r6, [sp, #12]
 800ca46:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800ca48:	6a16      	ldr	r6, [r2, #32]
 800ca4a:	e9d2 5305 	ldrd	r5, r3, [r2, #20]
 800ca4e:	e9d2 7c02 	ldrd	r7, ip, [r2, #8]
 800ca52:	9306      	str	r3, [sp, #24]
 800ca54:	9604      	str	r6, [sp, #16]
 800ca56:	69d3      	ldr	r3, [r2, #28]
 800ca58:	2c00      	cmp	r4, #0
 800ca5a:	f000 80ce 	beq.w	800cbfa <D80_1CH_HTONS_VOL_HP+0x1c2>
 800ca5e:	3902      	subs	r1, #2
 800ca60:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800ca64:	4e66      	ldr	r6, [pc, #408]	; (800cc00 <D80_1CH_HTONS_VOL_HP+0x1c8>)
 800ca66:	469e      	mov	lr, r3
 800ca68:	9102      	str	r1, [sp, #8]
 800ca6a:	46aa      	mov	sl, r5
 800ca6c:	eb00 0144 	add.w	r1, r0, r4, lsl #1
 800ca70:	9207      	str	r2, [sp, #28]
 800ca72:	9105      	str	r1, [sp, #20]
 800ca74:	6883      	ldr	r3, [r0, #8]
 800ca76:	e9d0 4200 	ldrd	r4, r2, [r0]
 800ca7a:	300a      	adds	r0, #10
 800ca7c:	ba64      	rev16	r4, r4
 800ca7e:	ba52      	rev16	r2, r2
 800ca80:	fa93 fb93 	rev16.w	fp, r3
 800ca84:	b2e5      	uxtb	r5, r4
 800ca86:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800ca8a:	f3c4 4107 	ubfx	r1, r4, #16, #8
 800ca8e:	0e24      	lsrs	r4, r4, #24
 800ca90:	f856 8025 	ldr.w	r8, [r6, r5, lsl #2]
 800ca94:	b2d5      	uxtb	r5, r2
 800ca96:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800ca9a:	44c6      	add	lr, r8
 800ca9c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800caa0:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
 800caa4:	eb03 239e 	add.w	r3, r3, lr, lsr #10
 800caa8:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 800caac:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800cab0:	eb01 2993 	add.w	r9, r1, r3, lsr #10
 800cab4:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800cab8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cabc:	eb04 2499 	add.w	r4, r4, r9, lsr #10
 800cac0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800cac4:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800cac8:	f3cb 2e07 	ubfx	lr, fp, #8, #8
 800cacc:	eb05 2894 	add.w	r8, r5, r4, lsr #10
 800cad0:	f3c2 4507 	ubfx	r5, r2, #16, #8
 800cad4:	0e12      	lsrs	r2, r2, #24
 800cad6:	f856 e02e 	ldr.w	lr, [r6, lr, lsl #2]
 800cada:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 800cade:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 800cae2:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 800cae6:	fa5f fb8b 	uxtb.w	fp, fp
 800caea:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800caee:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800caf2:	f856 b02b 	ldr.w	fp, [r6, fp, lsl #2]
 800caf6:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800cafa:	eb02 2295 	add.w	r2, r2, r5, lsr #10
 800cafe:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800cb02:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800cb06:	ea41 4808 	orr.w	r8, r1, r8, lsl #16
 800cb0a:	eb0b 2b92 	add.w	fp, fp, r2, lsr #10
 800cb0e:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800cb12:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800cb16:	eb0e 2e9b 	add.w	lr, lr, fp, lsr #10
 800cb1a:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800cb1e:	ea44 4409 	orr.w	r4, r4, r9, lsl #16
 800cb22:	f3ce 0109 	ubfx	r1, lr, #0, #10
 800cb26:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 800cb2a:	ea4f 2e9e 	mov.w	lr, lr, lsr #10
 800cb2e:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 800cb32:	4934      	ldr	r1, [pc, #208]	; (800cc04 <D80_1CH_HTONS_VOL_HP+0x1cc>)
 800cb34:	fb23 cc01 	smlad	ip, r3, r1, ip
 800cb38:	4933      	ldr	r1, [pc, #204]	; (800cc08 <D80_1CH_HTONS_VOL_HP+0x1d0>)
 800cb3a:	fb24 cc01 	smlad	ip, r4, r1, ip
 800cb3e:	4933      	ldr	r1, [pc, #204]	; (800cc0c <D80_1CH_HTONS_VOL_HP+0x1d4>)
 800cb40:	fb28 cc01 	smlad	ip, r8, r1, ip
 800cb44:	4932      	ldr	r1, [pc, #200]	; (800cc10 <D80_1CH_HTONS_VOL_HP+0x1d8>)
 800cb46:	fb22 cc01 	smlad	ip, r2, r1, ip
 800cb4a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800cb4e:	fb2b c901 	smlad	r9, fp, r1, ip
 800cb52:	4930      	ldr	r1, [pc, #192]	; (800cc14 <D80_1CH_HTONS_VOL_HP+0x1dc>)
 800cb54:	fb23 7701 	smlad	r7, r3, r1, r7
 800cb58:	492f      	ldr	r1, [pc, #188]	; (800cc18 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 800cb5a:	fb24 7701 	smlad	r7, r4, r1, r7
 800cb5e:	f04f 1c4b 	mov.w	ip, #4915275	; 0x4b004b
 800cb62:	fb28 7c0c 	smlad	ip, r8, ip, r7
 800cb66:	492d      	ldr	r1, [pc, #180]	; (800cc1c <D80_1CH_HTONS_VOL_HP+0x1e4>)
 800cb68:	fb22 cc01 	smlad	ip, r2, r1, ip
 800cb6c:	492c      	ldr	r1, [pc, #176]	; (800cc20 <D80_1CH_HTONS_VOL_HP+0x1e8>)
 800cb6e:	fb2b cc01 	smlad	ip, fp, r1, ip
 800cb72:	2101      	movs	r1, #1
 800cb74:	fb23 f301 	smuad	r3, r3, r1
 800cb78:	492a      	ldr	r1, [pc, #168]	; (800cc24 <D80_1CH_HTONS_VOL_HP+0x1ec>)
 800cb7a:	fb24 3401 	smlad	r4, r4, r1, r3
 800cb7e:	492a      	ldr	r1, [pc, #168]	; (800cc28 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 800cb80:	fb28 4101 	smlad	r1, r8, r1, r4
 800cb84:	4f29      	ldr	r7, [pc, #164]	; (800cc2c <D80_1CH_HTONS_VOL_HP+0x1f4>)
 800cb86:	fb22 1207 	smlad	r2, r2, r7, r1
 800cb8a:	4f29      	ldr	r7, [pc, #164]	; (800cc30 <D80_1CH_HTONS_VOL_HP+0x1f8>)
 800cb8c:	fb2b 2707 	smlad	r7, fp, r7, r2
 800cb90:	f5a9 317a 	sub.w	r1, r9, #256000	; 0x3e800
 800cb94:	9b01      	ldr	r3, [sp, #4]
 800cb96:	9c04      	ldr	r4, [sp, #16]
 800cb98:	440b      	add	r3, r1
 800cb9a:	eba3 020a 	sub.w	r2, r3, sl
 800cb9e:	468a      	mov	sl, r1
 800cba0:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800cba4:	fba2 2304 	umull	r2, r3, r2, r4
 800cba8:	fb04 3309 	mla	r3, r4, r9, r3
 800cbac:	f112 4400 	adds.w	r4, r2, #2147483648	; 0x80000000
 800cbb0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800cbb4:	f143 0500 	adc.w	r5, r3, #0
 800cbb8:	006b      	lsls	r3, r5, #1
 800cbba:	02aa      	lsls	r2, r5, #10
 800cbbc:	2500      	movs	r5, #0
 800cbbe:	9301      	str	r3, [sp, #4]
 800cbc0:	9b03      	ldr	r3, [sp, #12]
 800cbc2:	fbc3 4502 	smlal	r4, r5, r3, r2
 800cbc6:	9a02      	ldr	r2, [sp, #8]
 800cbc8:	10ab      	asrs	r3, r5, #2
 800cbca:	f303 030f 	ssat	r3, #16, r3
 800cbce:	f822 3f02 	strh.w	r3, [r2, #2]!
 800cbd2:	9b05      	ldr	r3, [sp, #20]
 800cbd4:	9202      	str	r2, [sp, #8]
 800cbd6:	4298      	cmp	r0, r3
 800cbd8:	f47f af4c 	bne.w	800ca74 <D80_1CH_HTONS_VOL_HP+0x3c>
 800cbdc:	4673      	mov	r3, lr
 800cbde:	9a07      	ldr	r2, [sp, #28]
 800cbe0:	61d3      	str	r3, [r2, #28]
 800cbe2:	2000      	movs	r0, #0
 800cbe4:	9b01      	ldr	r3, [sp, #4]
 800cbe6:	6097      	str	r7, [r2, #8]
 800cbe8:	f8c2 c00c 	str.w	ip, [r2, #12]
 800cbec:	e9c2 3104 	strd	r3, r1, [r2, #16]
 800cbf0:	9b06      	ldr	r3, [sp, #24]
 800cbf2:	6193      	str	r3, [r2, #24]
 800cbf4:	b009      	add	sp, #36	; 0x24
 800cbf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbfa:	4629      	mov	r1, r5
 800cbfc:	e7f0      	b.n	800cbe0 <D80_1CH_HTONS_VOL_HP+0x1a8>
 800cbfe:	bf00      	nop
 800cc00:	24000000 	.word	0x24000000
 800cc04:	002d0024 	.word	0x002d0024
 800cc08:	001c0015 	.word	0x001c0015
 800cc0c:	000f000a 	.word	0x000f000a
 800cc10:	00060003 	.word	0x00060003
 800cc14:	0037003f 	.word	0x0037003f
 800cc18:	00450049 	.word	0x00450049
 800cc1c:	00490045 	.word	0x00490045
 800cc20:	003f0037 	.word	0x003f0037
 800cc24:	00030006 	.word	0x00030006
 800cc28:	000a000f 	.word	0x000a000f
 800cc2c:	0015001c 	.word	0x0015001c
 800cc30:	0024002d 	.word	0x0024002d

0800cc34 <D128_1CH_HTONS_VOL_HP>:
 800cc34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc38:	6914      	ldr	r4, [r2, #16]
 800cc3a:	b08d      	sub	sp, #52	; 0x34
 800cc3c:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800cc3e:	9404      	str	r4, [sp, #16]
 800cc40:	6954      	ldr	r4, [r2, #20]
 800cc42:	920b      	str	r2, [sp, #44]	; 0x2c
 800cc44:	9405      	str	r4, [sp, #20]
 800cc46:	6994      	ldr	r4, [r2, #24]
 800cc48:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 800cc4c:	940a      	str	r4, [sp, #40]	; 0x28
 800cc4e:	6894      	ldr	r4, [r2, #8]
 800cc50:	9403      	str	r4, [sp, #12]
 800cc52:	68d4      	ldr	r4, [r2, #12]
 800cc54:	9402      	str	r4, [sp, #8]
 800cc56:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800cc58:	6a12      	ldr	r2, [r2, #32]
 800cc5a:	9407      	str	r4, [sp, #28]
 800cc5c:	9208      	str	r2, [sp, #32]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	f000 812e 	beq.w	800cec0 <D128_1CH_HTONS_VOL_HP+0x28c>
 800cc64:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800cc68:	f100 0b10 	add.w	fp, r0, #16
 800cc6c:	f8df 9290 	ldr.w	r9, [pc, #656]	; 800cf00 <D128_1CH_HTONS_VOL_HP+0x2cc>
 800cc70:	9106      	str	r1, [sp, #24]
 800cc72:	9309      	str	r3, [sp, #36]	; 0x24
 800cc74:	e95b 0204 	ldrd	r0, r2, [fp, #-16]
 800cc78:	e95b 3602 	ldrd	r3, r6, [fp, #-8]
 800cc7c:	ba40      	rev16	r0, r0
 800cc7e:	ba52      	rev16	r2, r2
 800cc80:	ba5b      	rev16	r3, r3
 800cc82:	ba76      	rev16	r6, r6
 800cc84:	b2c5      	uxtb	r5, r0
 800cc86:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800cc8a:	f3c0 4107 	ubfx	r1, r0, #16, #8
 800cc8e:	0e00      	lsrs	r0, r0, #24
 800cc90:	f859 7025 	ldr.w	r7, [r9, r5, lsl #2]
 800cc94:	b2d5      	uxtb	r5, r2
 800cc96:	f859 e024 	ldr.w	lr, [r9, r4, lsl #2]
 800cc9a:	f3c2 2407 	ubfx	r4, r2, #8, #8
 800cc9e:	44bc      	add	ip, r7
 800cca0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800cca4:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
 800cca8:	f3c2 4007 	ubfx	r0, r2, #16, #8
 800ccac:	eb0e 2e9c 	add.w	lr, lr, ip, lsr #10
 800ccb0:	f859 a025 	ldr.w	sl, [r9, r5, lsl #2]
 800ccb4:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 800ccb8:	0e12      	lsrs	r2, r2, #24
 800ccba:	eb01 219e 	add.w	r1, r1, lr, lsr #10
 800ccbe:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 800ccc2:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800ccc6:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800ccca:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 800ccce:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 800ccd2:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800ccd6:	b2da      	uxtb	r2, r3
 800ccd8:	eb0a 2a97 	add.w	sl, sl, r7, lsr #10
 800ccdc:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800cce0:	ea4e 4e0c 	orr.w	lr, lr, ip, lsl #16
 800cce4:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 800cce8:	eb05 259a 	add.w	r5, r5, sl, lsr #10
 800ccec:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800ccf0:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800ccf4:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800ccf8:	eb00 2c95 	add.w	ip, r0, r5, lsr #10
 800ccfc:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800cd00:	f859 8021 	ldr.w	r8, [r9, r1, lsl #2]
 800cd04:	f3c3 4107 	ubfx	r1, r3, #16, #8
 800cd08:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 800cd0c:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800cd10:	f859 0021 	ldr.w	r0, [r9, r1, lsl #2]
 800cd14:	0e1b      	lsrs	r3, r3, #24
 800cd16:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 800cd1a:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800cd1e:	f859 1023 	ldr.w	r1, [r9, r3, lsl #2]
 800cd22:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 800cd26:	eb08 2892 	add.w	r8, r8, r2, lsr #10
 800cd2a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800cd2e:	b2f3      	uxtb	r3, r6
 800cd30:	eb00 2a98 	add.w	sl, r0, r8, lsr #10
 800cd34:	f3c8 0009 	ubfx	r0, r8, #0, #10
 800cd38:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800cd3c:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 800cd40:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 800cd44:	f3c6 2c07 	ubfx	ip, r6, #8, #8
 800cd48:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800cd4c:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800cd50:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 800cd54:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 800cd58:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 800cd5c:	0e36      	lsrs	r6, r6, #24
 800cd5e:	eb02 2298 	add.w	r2, r2, r8, lsr #10
 800cd62:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800cd66:	f859 302c 	ldr.w	r3, [r9, ip, lsl #2]
 800cd6a:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800cd6e:	f859 c026 	ldr.w	ip, [r9, r6, lsl #2]
 800cd72:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800cd76:	eb03 2692 	add.w	r6, r3, r2, lsr #10
 800cd7a:	f3c2 0309 	ubfx	r3, r2, #0, #10
 800cd7e:	9101      	str	r1, [sp, #4]
 800cd80:	ea43 4208 	orr.w	r2, r3, r8, lsl #16
 800cd84:	9b02      	ldr	r3, [sp, #8]
 800cd86:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 800cd8a:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800cd8e:	4611      	mov	r1, r2
 800cd90:	f3cc 0209 	ubfx	r2, ip, #0, #10
 800cd94:	ea4f 2c9c 	mov.w	ip, ip, lsr #10
 800cd98:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 800cd9c:	4a49      	ldr	r2, [pc, #292]	; (800cec4 <D128_1CH_HTONS_VOL_HP+0x290>)
 800cd9e:	fb2e 3202 	smlad	r2, lr, r2, r3
 800cda2:	4b49      	ldr	r3, [pc, #292]	; (800cec8 <D128_1CH_HTONS_VOL_HP+0x294>)
 800cda4:	fb27 2203 	smlad	r2, r7, r3, r2
 800cda8:	4b48      	ldr	r3, [pc, #288]	; (800cecc <D128_1CH_HTONS_VOL_HP+0x298>)
 800cdaa:	fb25 2203 	smlad	r2, r5, r3, r2
 800cdae:	4b48      	ldr	r3, [pc, #288]	; (800ced0 <D128_1CH_HTONS_VOL_HP+0x29c>)
 800cdb0:	fb24 2203 	smlad	r2, r4, r3, r2
 800cdb4:	4b47      	ldr	r3, [pc, #284]	; (800ced4 <D128_1CH_HTONS_VOL_HP+0x2a0>)
 800cdb6:	fb20 2803 	smlad	r8, r0, r3, r2
 800cdba:	4b47      	ldr	r3, [pc, #284]	; (800ced8 <D128_1CH_HTONS_VOL_HP+0x2a4>)
 800cdbc:	9a01      	ldr	r2, [sp, #4]
 800cdbe:	fb22 8203 	smlad	r2, r2, r3, r8
 800cdc2:	4b46      	ldr	r3, [pc, #280]	; (800cedc <D128_1CH_HTONS_VOL_HP+0x2a8>)
 800cdc4:	9102      	str	r1, [sp, #8]
 800cdc6:	fb21 2203 	smlad	r2, r1, r3, r2
 800cdca:	f44f 3880 	mov.w	r8, #65536	; 0x10000
 800cdce:	fb26 2308 	smlad	r3, r6, r8, r2
 800cdd2:	4619      	mov	r1, r3
 800cdd4:	9a03      	ldr	r2, [sp, #12]
 800cdd6:	4b42      	ldr	r3, [pc, #264]	; (800cee0 <D128_1CH_HTONS_VOL_HP+0x2ac>)
 800cdd8:	fb2e 2803 	smlad	r8, lr, r3, r2
 800cddc:	4b41      	ldr	r3, [pc, #260]	; (800cee4 <D128_1CH_HTONS_VOL_HP+0x2b0>)
 800cdde:	fb27 8a03 	smlad	sl, r7, r3, r8
 800cde2:	f8df 8120 	ldr.w	r8, [pc, #288]	; 800cf04 <D128_1CH_HTONS_VOL_HP+0x2d0>
 800cde6:	fb25 a808 	smlad	r8, r5, r8, sl
 800cdea:	f8df a11c 	ldr.w	sl, [pc, #284]	; 800cf08 <D128_1CH_HTONS_VOL_HP+0x2d4>
 800cdee:	fb24 880a 	smlad	r8, r4, sl, r8
 800cdf2:	f8df a118 	ldr.w	sl, [pc, #280]	; 800cf0c <D128_1CH_HTONS_VOL_HP+0x2d8>
 800cdf6:	fb20 8a0a 	smlad	sl, r0, sl, r8
 800cdfa:	f8df 8114 	ldr.w	r8, [pc, #276]	; 800cf10 <D128_1CH_HTONS_VOL_HP+0x2dc>
 800cdfe:	9b01      	ldr	r3, [sp, #4]
 800ce00:	fb23 aa08 	smlad	sl, r3, r8, sl
 800ce04:	f8df 810c 	ldr.w	r8, [pc, #268]	; 800cf14 <D128_1CH_HTONS_VOL_HP+0x2e0>
 800ce08:	9a02      	ldr	r2, [sp, #8]
 800ce0a:	fb22 a808 	smlad	r8, r2, r8, sl
 800ce0e:	f8df a108 	ldr.w	sl, [pc, #264]	; 800cf18 <D128_1CH_HTONS_VOL_HP+0x2e4>
 800ce12:	fb26 830a 	smlad	r3, r6, sl, r8
 800ce16:	f04f 0801 	mov.w	r8, #1
 800ce1a:	9302      	str	r3, [sp, #8]
 800ce1c:	fb2e fe08 	smuad	lr, lr, r8
 800ce20:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 800cf1c <D128_1CH_HTONS_VOL_HP+0x2e8>
 800ce24:	fb27 ee08 	smlad	lr, r7, r8, lr
 800ce28:	4f2f      	ldr	r7, [pc, #188]	; (800cee8 <D128_1CH_HTONS_VOL_HP+0x2b4>)
 800ce2a:	fb25 ee07 	smlad	lr, r5, r7, lr
 800ce2e:	4f2f      	ldr	r7, [pc, #188]	; (800ceec <D128_1CH_HTONS_VOL_HP+0x2b8>)
 800ce30:	fb24 ee07 	smlad	lr, r4, r7, lr
 800ce34:	4f2e      	ldr	r7, [pc, #184]	; (800cef0 <D128_1CH_HTONS_VOL_HP+0x2bc>)
 800ce36:	fb20 ee07 	smlad	lr, r0, r7, lr
 800ce3a:	4f2e      	ldr	r7, [pc, #184]	; (800cef4 <D128_1CH_HTONS_VOL_HP+0x2c0>)
 800ce3c:	9b01      	ldr	r3, [sp, #4]
 800ce3e:	fb23 ee07 	smlad	lr, r3, r7, lr
 800ce42:	4f2d      	ldr	r7, [pc, #180]	; (800cef8 <D128_1CH_HTONS_VOL_HP+0x2c4>)
 800ce44:	fb22 e707 	smlad	r7, r2, r7, lr
 800ce48:	4b2c      	ldr	r3, [pc, #176]	; (800cefc <D128_1CH_HTONS_VOL_HP+0x2c8>)
 800ce4a:	fb26 7303 	smlad	r3, r6, r3, r7
 800ce4e:	f5a1 1680 	sub.w	r6, r1, #1048576	; 0x100000
 800ce52:	9303      	str	r3, [sp, #12]
 800ce54:	9b04      	ldr	r3, [sp, #16]
 800ce56:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800ce5a:	9f08      	ldr	r7, [sp, #32]
 800ce5c:	2100      	movs	r1, #0
 800ce5e:	4433      	add	r3, r6
 800ce60:	f10b 0b10 	add.w	fp, fp, #16
 800ce64:	461a      	mov	r2, r3
 800ce66:	9b05      	ldr	r3, [sp, #20]
 800ce68:	9605      	str	r6, [sp, #20]
 800ce6a:	1ad2      	subs	r2, r2, r3
 800ce6c:	17d5      	asrs	r5, r2, #31
 800ce6e:	fba2 2307 	umull	r2, r3, r2, r7
 800ce72:	1814      	adds	r4, r2, r0
 800ce74:	fb07 3305 	mla	r3, r7, r5, r3
 800ce78:	eb43 0501 	adc.w	r5, r3, r1
 800ce7c:	006b      	lsls	r3, r5, #1
 800ce7e:	022a      	lsls	r2, r5, #8
 800ce80:	9304      	str	r3, [sp, #16]
 800ce82:	9b07      	ldr	r3, [sp, #28]
 800ce84:	fbc3 0102 	smlal	r0, r1, r3, r2
 800ce88:	9a06      	ldr	r2, [sp, #24]
 800ce8a:	108b      	asrs	r3, r1, #2
 800ce8c:	f303 030f 	ssat	r3, #16, r3
 800ce90:	f822 3b02 	strh.w	r3, [r2], #2
 800ce94:	4613      	mov	r3, r2
 800ce96:	9206      	str	r2, [sp, #24]
 800ce98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce9a:	4293      	cmp	r3, r2
 800ce9c:	f47f aeea 	bne.w	800cc74 <D128_1CH_HTONS_VOL_HP+0x40>
 800cea0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cea2:	2000      	movs	r0, #0
 800cea4:	9903      	ldr	r1, [sp, #12]
 800cea6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cea8:	6099      	str	r1, [r3, #8]
 800ceaa:	9902      	ldr	r1, [sp, #8]
 800ceac:	f8c3 c01c 	str.w	ip, [r3, #28]
 800ceb0:	60d9      	str	r1, [r3, #12]
 800ceb2:	9904      	ldr	r1, [sp, #16]
 800ceb4:	619a      	str	r2, [r3, #24]
 800ceb6:	e9c3 1604 	strd	r1, r6, [r3, #16]
 800ceba:	b00d      	add	sp, #52	; 0x34
 800cebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cec0:	9e05      	ldr	r6, [sp, #20]
 800cec2:	e7ed      	b.n	800cea0 <D128_1CH_HTONS_VOL_HP+0x26c>
 800cec4:	00780069 	.word	0x00780069
 800cec8:	005b004e 	.word	0x005b004e
 800cecc:	00420037 	.word	0x00420037
 800ced0:	002d0024 	.word	0x002d0024
 800ced4:	001c0015 	.word	0x001c0015
 800ced8:	000f000a 	.word	0x000f000a
 800cedc:	00060003 	.word	0x00060003
 800cee0:	00880096 	.word	0x00880096
 800cee4:	00a200ac 	.word	0x00a200ac
 800cee8:	000a000f 	.word	0x000a000f
 800ceec:	0015001c 	.word	0x0015001c
 800cef0:	0024002d 	.word	0x0024002d
 800cef4:	00370042 	.word	0x00370042
 800cef8:	004e005b 	.word	0x004e005b
 800cefc:	00690078 	.word	0x00690078
 800cf00:	24000000 	.word	0x24000000
 800cf04:	00b400ba 	.word	0x00b400ba
 800cf08:	00be00c0 	.word	0x00be00c0
 800cf0c:	00c000be 	.word	0x00c000be
 800cf10:	00ba00b4 	.word	0x00ba00b4
 800cf14:	00ac00a2 	.word	0x00ac00a2
 800cf18:	00960088 	.word	0x00960088
 800cf1c:	00030006 	.word	0x00030006

0800cf20 <PDM_Filter_Init>:
 800cf20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf22:	2240      	movs	r2, #64	; 0x40
 800cf24:	2100      	movs	r1, #0
 800cf26:	4604      	mov	r4, r0
 800cf28:	300c      	adds	r0, #12
 800cf2a:	f000 fa07 	bl	800d33c <memset>
 800cf2e:	4a56      	ldr	r2, [pc, #344]	; (800d088 <PDM_Filter_Init+0x168>)
 800cf30:	4856      	ldr	r0, [pc, #344]	; (800d08c <PDM_Filter_Init+0x16c>)
 800cf32:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 800cf36:	6813      	ldr	r3, [r2, #0]
 800cf38:	f24c 2540 	movw	r5, #49728	; 0xc240
 800cf3c:	f023 0301 	bic.w	r3, r3, #1
 800cf40:	6013      	str	r3, [r2, #0]
 800cf42:	6803      	ldr	r3, [r0, #0]
 800cf44:	400b      	ands	r3, r1
 800cf46:	42ab      	cmp	r3, r5
 800cf48:	d040      	beq.n	800cfcc <PDM_Filter_Init+0xac>
 800cf4a:	6803      	ldr	r3, [r0, #0]
 800cf4c:	f24c 2270 	movw	r2, #49776	; 0xc270
 800cf50:	4019      	ands	r1, r3
 800cf52:	4291      	cmp	r1, r2
 800cf54:	d03a      	beq.n	800cfcc <PDM_Filter_Init+0xac>
 800cf56:	4b4e      	ldr	r3, [pc, #312]	; (800d090 <PDM_Filter_Init+0x170>)
 800cf58:	2101      	movs	r1, #1
 800cf5a:	461a      	mov	r2, r3
 800cf5c:	6019      	str	r1, [r3, #0]
 800cf5e:	6813      	ldr	r3, [r2, #0]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d1fc      	bne.n	800cf5e <PDM_Filter_Init+0x3e>
 800cf64:	4b4b      	ldr	r3, [pc, #300]	; (800d094 <PDM_Filter_Init+0x174>)
 800cf66:	494c      	ldr	r1, [pc, #304]	; (800d098 <PDM_Filter_Init+0x178>)
 800cf68:	4a4c      	ldr	r2, [pc, #304]	; (800d09c <PDM_Filter_Init+0x17c>)
 800cf6a:	6019      	str	r1, [r3, #0]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	8820      	ldrh	r0, [r4, #0]
 800cf70:	4293      	cmp	r3, r2
 800cf72:	8961      	ldrh	r1, [r4, #10]
 800cf74:	f04f 0300 	mov.w	r3, #0
 800cf78:	8922      	ldrh	r2, [r4, #8]
 800cf7a:	bf14      	ite	ne
 800cf7c:	2500      	movne	r5, #0
 800cf7e:	4d47      	ldreq	r5, [pc, #284]	; (800d09c <PDM_Filter_Init+0x17c>)
 800cf80:	2801      	cmp	r0, #1
 800cf82:	61a3      	str	r3, [r4, #24]
 800cf84:	6465      	str	r5, [r4, #68]	; 0x44
 800cf86:	60e3      	str	r3, [r4, #12]
 800cf88:	6263      	str	r3, [r4, #36]	; 0x24
 800cf8a:	6423      	str	r3, [r4, #64]	; 0x40
 800cf8c:	86a1      	strh	r1, [r4, #52]	; 0x34
 800cf8e:	86e2      	strh	r2, [r4, #54]	; 0x36
 800cf90:	e9c4 3304 	strd	r3, r3, [r4, #16]
 800cf94:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800cf98:	d936      	bls.n	800d008 <PDM_Filter_Init+0xe8>
 800cf9a:	2003      	movs	r0, #3
 800cf9c:	2302      	movs	r3, #2
 800cf9e:	8862      	ldrh	r2, [r4, #2]
 800cfa0:	2a01      	cmp	r2, #1
 800cfa2:	d92e      	bls.n	800d002 <PDM_Filter_Init+0xe2>
 800cfa4:	2140      	movs	r1, #64	; 0x40
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800cfaa:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 800cfae:	d101      	bne.n	800cfb4 <PDM_Filter_Init+0x94>
 800cfb0:	460b      	mov	r3, r1
 800cfb2:	6421      	str	r1, [r4, #64]	; 0x40
 800cfb4:	6862      	ldr	r2, [r4, #4]
 800cfb6:	b11a      	cbz	r2, 800cfc0 <PDM_Filter_Init+0xa0>
 800cfb8:	f043 0310 	orr.w	r3, r3, #16
 800cfbc:	62e2      	str	r2, [r4, #44]	; 0x2c
 800cfbe:	6423      	str	r3, [r4, #64]	; 0x40
 800cfc0:	2200      	movs	r2, #0
 800cfc2:	8722      	strh	r2, [r4, #56]	; 0x38
 800cfc4:	b908      	cbnz	r0, 800cfca <PDM_Filter_Init+0xaa>
 800cfc6:	3380      	adds	r3, #128	; 0x80
 800cfc8:	6423      	str	r3, [r4, #64]	; 0x40
 800cfca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cfcc:	4b34      	ldr	r3, [pc, #208]	; (800d0a0 <PDM_Filter_Init+0x180>)
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d1c0      	bne.n	800cf56 <PDM_Filter_Init+0x36>
 800cfd4:	4a33      	ldr	r2, [pc, #204]	; (800d0a4 <PDM_Filter_Init+0x184>)
 800cfd6:	6813      	ldr	r3, [r2, #0]
 800cfd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cfdc:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800cfe0:	d006      	beq.n	800cff0 <PDM_Filter_Init+0xd0>
 800cfe2:	6813      	ldr	r3, [r2, #0]
 800cfe4:	f240 4283 	movw	r2, #1155	; 0x483
 800cfe8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cfec:	4293      	cmp	r3, r2
 800cfee:	d1b2      	bne.n	800cf56 <PDM_Filter_Init+0x36>
 800cff0:	4b2d      	ldr	r3, [pc, #180]	; (800d0a8 <PDM_Filter_Init+0x188>)
 800cff2:	2101      	movs	r1, #1
 800cff4:	461a      	mov	r2, r3
 800cff6:	6019      	str	r1, [r3, #0]
 800cff8:	6813      	ldr	r3, [r2, #0]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d1fc      	bne.n	800cff8 <PDM_Filter_Init+0xd8>
 800cffe:	4b2b      	ldr	r3, [pc, #172]	; (800d0ac <PDM_Filter_Init+0x18c>)
 800d000:	e7b1      	b.n	800cf66 <PDM_Filter_Init+0x46>
 800d002:	d03a      	beq.n	800d07a <PDM_Filter_Init+0x15a>
 800d004:	4618      	mov	r0, r3
 800d006:	e7cd      	b.n	800cfa4 <PDM_Filter_Init+0x84>
 800d008:	4d29      	ldr	r5, [pc, #164]	; (800d0b0 <PDM_Filter_Init+0x190>)
 800d00a:	782a      	ldrb	r2, [r5, #0]
 800d00c:	d01b      	beq.n	800d046 <PDM_Filter_Init+0x126>
 800d00e:	2a01      	cmp	r2, #1
 800d010:	d001      	beq.n	800d016 <PDM_Filter_Init+0xf6>
 800d012:	2001      	movs	r0, #1
 800d014:	e7c3      	b.n	800cf9e <PDM_Filter_Init+0x7e>
 800d016:	4927      	ldr	r1, [pc, #156]	; (800d0b4 <PDM_Filter_Init+0x194>)
 800d018:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 800d0bc <PDM_Filter_Init+0x19c>
 800d01c:	f501 6780 	add.w	r7, r1, #1024	; 0x400
 800d020:	4e25      	ldr	r6, [pc, #148]	; (800d0b8 <PDM_Filter_Init+0x198>)
 800d022:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800d026:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 800d02a:	ea02 0006 	and.w	r0, r2, r6
 800d02e:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800d032:	428f      	cmp	r7, r1
 800d034:	ea43 0300 	orr.w	r3, r3, r0
 800d038:	4413      	add	r3, r2
 800d03a:	600b      	str	r3, [r1, #0]
 800d03c:	d1f1      	bne.n	800d022 <PDM_Filter_Init+0x102>
 800d03e:	2300      	movs	r3, #0
 800d040:	2001      	movs	r0, #1
 800d042:	702b      	strb	r3, [r5, #0]
 800d044:	e7ab      	b.n	800cf9e <PDM_Filter_Init+0x7e>
 800d046:	2a00      	cmp	r2, #0
 800d048:	d1a9      	bne.n	800cf9e <PDM_Filter_Init+0x7e>
 800d04a:	491a      	ldr	r1, [pc, #104]	; (800d0b4 <PDM_Filter_Init+0x194>)
 800d04c:	f8df c06c 	ldr.w	ip, [pc, #108]	; 800d0bc <PDM_Filter_Init+0x19c>
 800d050:	f501 6780 	add.w	r7, r1, #1024	; 0x400
 800d054:	4e18      	ldr	r6, [pc, #96]	; (800d0b8 <PDM_Filter_Init+0x198>)
 800d056:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800d05a:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 800d05e:	ea02 0006 	and.w	r0, r2, r6
 800d062:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800d066:	428f      	cmp	r7, r1
 800d068:	ea43 0300 	orr.w	r3, r3, r0
 800d06c:	4413      	add	r3, r2
 800d06e:	600b      	str	r3, [r1, #0]
 800d070:	d1f1      	bne.n	800d056 <PDM_Filter_Init+0x136>
 800d072:	2001      	movs	r0, #1
 800d074:	2300      	movs	r3, #0
 800d076:	7028      	strb	r0, [r5, #0]
 800d078:	e791      	b.n	800cf9e <PDM_Filter_Init+0x7e>
 800d07a:	2220      	movs	r2, #32
 800d07c:	4618      	mov	r0, r3
 800d07e:	2160      	movs	r1, #96	; 0x60
 800d080:	6422      	str	r2, [r4, #64]	; 0x40
 800d082:	4613      	mov	r3, r2
 800d084:	e790      	b.n	800cfa8 <PDM_Filter_Init+0x88>
 800d086:	bf00      	nop
 800d088:	e0002000 	.word	0xe0002000
 800d08c:	e000ed00 	.word	0xe000ed00
 800d090:	40023008 	.word	0x40023008
 800d094:	40023000 	.word	0x40023000
 800d098:	f407a5c2 	.word	0xf407a5c2
 800d09c:	b5e8b5cd 	.word	0xb5e8b5cd
 800d0a0:	e0042000 	.word	0xe0042000
 800d0a4:	5c001000 	.word	0x5c001000
 800d0a8:	58024c08 	.word	0x58024c08
 800d0ac:	58024c00 	.word	0x58024c00
 800d0b0:	240004a4 	.word	0x240004a4
 800d0b4:	23fffffc 	.word	0x23fffffc
 800d0b8:	000ffc00 	.word	0x000ffc00
 800d0bc:	3ff00000 	.word	0x3ff00000

0800d0c0 <PDM_Filter_setConfig>:
 800d0c0:	4b67      	ldr	r3, [pc, #412]	; (800d260 <PDM_Filter_setConfig+0x1a0>)
 800d0c2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d0c4:	429a      	cmp	r2, r3
 800d0c6:	d128      	bne.n	800d11a <PDM_Filter_setConfig+0x5a>
 800d0c8:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800d0ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d0cc:	880e      	ldrh	r6, [r1, #0]
 800d0ce:	460d      	mov	r5, r1
 800d0d0:	4604      	mov	r4, r0
 800d0d2:	f422 7180 	bic.w	r1, r2, #256	; 0x100
 800d0d6:	1e73      	subs	r3, r6, #1
 800d0d8:	f9b5 7004 	ldrsh.w	r7, [r5, #4]
 800d0dc:	f9b0 0038 	ldrsh.w	r0, [r0, #56]	; 0x38
 800d0e0:	2b06      	cmp	r3, #6
 800d0e2:	ed2d 8b02 	vpush	{d8}
 800d0e6:	6421      	str	r1, [r4, #64]	; 0x40
 800d0e8:	b083      	sub	sp, #12
 800d0ea:	d820      	bhi.n	800d12e <PDM_Filter_setConfig+0x6e>
 800d0ec:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800d0ee:	42b3      	cmp	r3, r6
 800d0f0:	d03d      	beq.n	800d16e <PDM_Filter_setConfig+0xae>
 800d0f2:	4b5c      	ldr	r3, [pc, #368]	; (800d264 <PDM_Filter_setConfig+0x1a4>)
 800d0f4:	4013      	ands	r3, r2
 800d0f6:	4333      	orrs	r3, r6
 800d0f8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800d0fc:	6423      	str	r3, [r4, #64]	; 0x40
 800d0fe:	f003 030f 	and.w	r3, r3, #15
 800d102:	2a70      	cmp	r2, #112	; 0x70
 800d104:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800d108:	d009      	beq.n	800d11e <PDM_Filter_setConfig+0x5e>
 800d10a:	2b06      	cmp	r3, #6
 800d10c:	d824      	bhi.n	800d158 <PDM_Filter_setConfig+0x98>
 800d10e:	e8df f003 	tbb	[pc, r3]
 800d112:	878a      	.short	0x878a
 800d114:	7b7e8184 	.word	0x7b7e8184
 800d118:	78          	.byte	0x78
 800d119:	00          	.byte	0x00
 800d11a:	2004      	movs	r0, #4
 800d11c:	4770      	bx	lr
 800d11e:	2b06      	cmp	r3, #6
 800d120:	d81a      	bhi.n	800d158 <PDM_Filter_setConfig+0x98>
 800d122:	e8df f003 	tbb	[pc, r3]
 800d126:	8f92      	.short	0x8f92
 800d128:	8617898c 	.word	0x8617898c
 800d12c:	83          	.byte	0x83
 800d12d:	00          	.byte	0x00
 800d12e:	4287      	cmp	r7, r0
 800d130:	f000 808e 	beq.w	800d250 <PDM_Filter_setConfig+0x190>
 800d134:	f117 0f0c 	cmn.w	r7, #12
 800d138:	f04f 0008 	mov.w	r0, #8
 800d13c:	da11      	bge.n	800d162 <PDM_Filter_setConfig+0xa2>
 800d13e:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 800d142:	3040      	adds	r0, #64	; 0x40
 800d144:	80ab      	strh	r3, [r5, #4]
 800d146:	886b      	ldrh	r3, [r5, #2]
 800d148:	8626      	strh	r6, [r4, #48]	; 0x30
 800d14a:	8663      	strh	r3, [r4, #50]	; 0x32
 800d14c:	b003      	add	sp, #12
 800d14e:	ecbd 8b02 	vpop	{d8}
 800d152:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d154:	4b44      	ldr	r3, [pc, #272]	; (800d268 <PDM_Filter_setConfig+0x1a8>)
 800d156:	64a3      	str	r3, [r4, #72]	; 0x48
 800d158:	f117 0f0c 	cmn.w	r7, #12
 800d15c:	f04f 0000 	mov.w	r0, #0
 800d160:	dbed      	blt.n	800d13e <PDM_Filter_setConfig+0x7e>
 800d162:	2f33      	cmp	r7, #51	; 0x33
 800d164:	dd10      	ble.n	800d188 <PDM_Filter_setConfig+0xc8>
 800d166:	2333      	movs	r3, #51	; 0x33
 800d168:	3040      	adds	r0, #64	; 0x40
 800d16a:	80ab      	strh	r3, [r5, #4]
 800d16c:	e7eb      	b.n	800d146 <PDM_Filter_setConfig+0x86>
 800d16e:	4287      	cmp	r7, r0
 800d170:	d1f2      	bne.n	800d158 <PDM_Filter_setConfig+0x98>
 800d172:	886b      	ldrh	r3, [r5, #2]
 800d174:	8663      	strh	r3, [r4, #50]	; 0x32
 800d176:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d178:	2000      	movs	r0, #0
 800d17a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d17e:	6423      	str	r3, [r4, #64]	; 0x40
 800d180:	b003      	add	sp, #12
 800d182:	ecbd 8b02 	vpop	{d8}
 800d186:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d188:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d18a:	f003 030f 	and.w	r3, r3, #15
 800d18e:	3b01      	subs	r3, #1
 800d190:	2b06      	cmp	r3, #6
 800d192:	d831      	bhi.n	800d1f8 <PDM_Filter_setConfig+0x138>
 800d194:	4a35      	ldr	r2, [pc, #212]	; (800d26c <PDM_Filter_setConfig+0x1ac>)
 800d196:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800d19a:	eddf 0a35 	vldr	s1, [pc, #212]	; 800d270 <PDM_Filter_setConfig+0x1b0>
 800d19e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d1a2:	9001      	str	r0, [sp, #4]
 800d1a4:	edd3 7a07 	vldr	s15, [r3, #28]
 800d1a8:	ed93 8a00 	vldr	s16, [r3]
 800d1ac:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800d1b0:	f000 f8e6 	bl	800d380 <powf>
 800d1b4:	eef0 8a40 	vmov.f32	s17, s0
 800d1b8:	9801      	ldr	r0, [sp, #4]
 800d1ba:	ee07 7a90 	vmov	s15, r7
 800d1be:	ee28 8a28 	vmul.f32	s16, s16, s17
 800d1c2:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800d1c6:	9001      	str	r0, [sp, #4]
 800d1c8:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 800d1cc:	eddf 7a29 	vldr	s15, [pc, #164]	; 800d274 <PDM_Filter_setConfig+0x1b4>
 800d1d0:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800d1d4:	f000 f8d4 	bl	800d380 <powf>
 800d1d8:	ee28 8a00 	vmul.f32	s16, s16, s0
 800d1dc:	886b      	ldrh	r3, [r5, #2]
 800d1de:	9801      	ldr	r0, [sp, #4]
 800d1e0:	feb8 8a48 	vrinta.f32	s16, s16
 800d1e4:	eebc 8ac8 	vcvt.u32.f32	s16, s16
 800d1e8:	8727      	strh	r7, [r4, #56]	; 0x38
 800d1ea:	8663      	strh	r3, [r4, #50]	; 0x32
 800d1ec:	8626      	strh	r6, [r4, #48]	; 0x30
 800d1ee:	ed84 8a0f 	vstr	s16, [r4, #60]	; 0x3c
 800d1f2:	2800      	cmp	r0, #0
 800d1f4:	d0bf      	beq.n	800d176 <PDM_Filter_setConfig+0xb6>
 800d1f6:	e7a9      	b.n	800d14c <PDM_Filter_setConfig+0x8c>
 800d1f8:	eddf 8a1f 	vldr	s17, [pc, #124]	; 800d278 <PDM_Filter_setConfig+0x1b8>
 800d1fc:	ed9f 8a1f 	vldr	s16, [pc, #124]	; 800d27c <PDM_Filter_setConfig+0x1bc>
 800d200:	e7db      	b.n	800d1ba <PDM_Filter_setConfig+0xfa>
 800d202:	4b1f      	ldr	r3, [pc, #124]	; (800d280 <PDM_Filter_setConfig+0x1c0>)
 800d204:	64a3      	str	r3, [r4, #72]	; 0x48
 800d206:	e7a7      	b.n	800d158 <PDM_Filter_setConfig+0x98>
 800d208:	4b1e      	ldr	r3, [pc, #120]	; (800d284 <PDM_Filter_setConfig+0x1c4>)
 800d20a:	64a3      	str	r3, [r4, #72]	; 0x48
 800d20c:	e7a4      	b.n	800d158 <PDM_Filter_setConfig+0x98>
 800d20e:	4b1e      	ldr	r3, [pc, #120]	; (800d288 <PDM_Filter_setConfig+0x1c8>)
 800d210:	64a3      	str	r3, [r4, #72]	; 0x48
 800d212:	e7a1      	b.n	800d158 <PDM_Filter_setConfig+0x98>
 800d214:	4b1d      	ldr	r3, [pc, #116]	; (800d28c <PDM_Filter_setConfig+0x1cc>)
 800d216:	64a3      	str	r3, [r4, #72]	; 0x48
 800d218:	e79e      	b.n	800d158 <PDM_Filter_setConfig+0x98>
 800d21a:	4b1d      	ldr	r3, [pc, #116]	; (800d290 <PDM_Filter_setConfig+0x1d0>)
 800d21c:	64a3      	str	r3, [r4, #72]	; 0x48
 800d21e:	e79b      	b.n	800d158 <PDM_Filter_setConfig+0x98>
 800d220:	4b1c      	ldr	r3, [pc, #112]	; (800d294 <PDM_Filter_setConfig+0x1d4>)
 800d222:	64a3      	str	r3, [r4, #72]	; 0x48
 800d224:	e798      	b.n	800d158 <PDM_Filter_setConfig+0x98>
 800d226:	4b1c      	ldr	r3, [pc, #112]	; (800d298 <PDM_Filter_setConfig+0x1d8>)
 800d228:	64a3      	str	r3, [r4, #72]	; 0x48
 800d22a:	e795      	b.n	800d158 <PDM_Filter_setConfig+0x98>
 800d22c:	4b1b      	ldr	r3, [pc, #108]	; (800d29c <PDM_Filter_setConfig+0x1dc>)
 800d22e:	64a3      	str	r3, [r4, #72]	; 0x48
 800d230:	e792      	b.n	800d158 <PDM_Filter_setConfig+0x98>
 800d232:	4b1b      	ldr	r3, [pc, #108]	; (800d2a0 <PDM_Filter_setConfig+0x1e0>)
 800d234:	64a3      	str	r3, [r4, #72]	; 0x48
 800d236:	e78f      	b.n	800d158 <PDM_Filter_setConfig+0x98>
 800d238:	4b1a      	ldr	r3, [pc, #104]	; (800d2a4 <PDM_Filter_setConfig+0x1e4>)
 800d23a:	64a3      	str	r3, [r4, #72]	; 0x48
 800d23c:	e78c      	b.n	800d158 <PDM_Filter_setConfig+0x98>
 800d23e:	4b1a      	ldr	r3, [pc, #104]	; (800d2a8 <PDM_Filter_setConfig+0x1e8>)
 800d240:	64a3      	str	r3, [r4, #72]	; 0x48
 800d242:	e789      	b.n	800d158 <PDM_Filter_setConfig+0x98>
 800d244:	4b19      	ldr	r3, [pc, #100]	; (800d2ac <PDM_Filter_setConfig+0x1ec>)
 800d246:	64a3      	str	r3, [r4, #72]	; 0x48
 800d248:	e786      	b.n	800d158 <PDM_Filter_setConfig+0x98>
 800d24a:	4b19      	ldr	r3, [pc, #100]	; (800d2b0 <PDM_Filter_setConfig+0x1f0>)
 800d24c:	64a3      	str	r3, [r4, #72]	; 0x48
 800d24e:	e783      	b.n	800d158 <PDM_Filter_setConfig+0x98>
 800d250:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800d252:	42b3      	cmp	r3, r6
 800d254:	f47f af6e 	bne.w	800d134 <PDM_Filter_setConfig+0x74>
 800d258:	886b      	ldrh	r3, [r5, #2]
 800d25a:	2008      	movs	r0, #8
 800d25c:	8663      	strh	r3, [r4, #50]	; 0x32
 800d25e:	e775      	b.n	800d14c <PDM_Filter_setConfig+0x8c>
 800d260:	b5e8b5cd 	.word	0xb5e8b5cd
 800d264:	fffffef0 	.word	0xfffffef0
 800d268:	0800c3d9 	.word	0x0800c3d9
 800d26c:	0800d6f0 	.word	0x0800d6f0
 800d270:	42000000 	.word	0x42000000
 800d274:	3d4ccccd 	.word	0x3d4ccccd
 800d278:	4f800000 	.word	0x4f800000
 800d27c:	00000000 	.word	0x00000000
 800d280:	0800b7e5 	.word	0x0800b7e5
 800d284:	0800b66d 	.word	0x0800b66d
 800d288:	0800b55d 	.word	0x0800b55d
 800d28c:	0800c021 	.word	0x0800c021
 800d290:	0800bd89 	.word	0x0800bd89
 800d294:	0800bb51 	.word	0x0800bb51
 800d298:	0800b96d 	.word	0x0800b96d
 800d29c:	0800c5f5 	.word	0x0800c5f5
 800d2a0:	0800c4b9 	.word	0x0800c4b9
 800d2a4:	0800cc35 	.word	0x0800cc35
 800d2a8:	0800ca39 	.word	0x0800ca39
 800d2ac:	0800c88d 	.word	0x0800c88d
 800d2b0:	0800c721 	.word	0x0800c721

0800d2b4 <PDM_Filter>:
 800d2b4:	b410      	push	{r4}
 800d2b6:	4b0b      	ldr	r3, [pc, #44]	; (800d2e4 <PDM_Filter+0x30>)
 800d2b8:	6c54      	ldr	r4, [r2, #68]	; 0x44
 800d2ba:	429c      	cmp	r4, r3
 800d2bc:	d107      	bne.n	800d2ce <PDM_Filter+0x1a>
 800d2be:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800d2c0:	05dc      	lsls	r4, r3, #23
 800d2c2:	d508      	bpl.n	800d2d6 <PDM_Filter+0x22>
 800d2c4:	6c93      	ldr	r3, [r2, #72]	; 0x48
 800d2c6:	320c      	adds	r2, #12
 800d2c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d2cc:	4718      	bx	r3
 800d2ce:	2004      	movs	r0, #4
 800d2d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d2d4:	4770      	bx	lr
 800d2d6:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d2da:	bf14      	ite	ne
 800d2dc:	2020      	movne	r0, #32
 800d2de:	2030      	moveq	r0, #48	; 0x30
 800d2e0:	e7f6      	b.n	800d2d0 <PDM_Filter+0x1c>
 800d2e2:	bf00      	nop
 800d2e4:	b5e8b5cd 	.word	0xb5e8b5cd

0800d2e8 <__errno>:
 800d2e8:	4b01      	ldr	r3, [pc, #4]	; (800d2f0 <__errno+0x8>)
 800d2ea:	6818      	ldr	r0, [r3, #0]
 800d2ec:	4770      	bx	lr
 800d2ee:	bf00      	nop
 800d2f0:	24000424 	.word	0x24000424

0800d2f4 <__libc_init_array>:
 800d2f4:	b570      	push	{r4, r5, r6, lr}
 800d2f6:	4d0d      	ldr	r5, [pc, #52]	; (800d32c <__libc_init_array+0x38>)
 800d2f8:	4c0d      	ldr	r4, [pc, #52]	; (800d330 <__libc_init_array+0x3c>)
 800d2fa:	1b64      	subs	r4, r4, r5
 800d2fc:	10a4      	asrs	r4, r4, #2
 800d2fe:	2600      	movs	r6, #0
 800d300:	42a6      	cmp	r6, r4
 800d302:	d109      	bne.n	800d318 <__libc_init_array+0x24>
 800d304:	4d0b      	ldr	r5, [pc, #44]	; (800d334 <__libc_init_array+0x40>)
 800d306:	4c0c      	ldr	r4, [pc, #48]	; (800d338 <__libc_init_array+0x44>)
 800d308:	f000 f9e6 	bl	800d6d8 <_init>
 800d30c:	1b64      	subs	r4, r4, r5
 800d30e:	10a4      	asrs	r4, r4, #2
 800d310:	2600      	movs	r6, #0
 800d312:	42a6      	cmp	r6, r4
 800d314:	d105      	bne.n	800d322 <__libc_init_array+0x2e>
 800d316:	bd70      	pop	{r4, r5, r6, pc}
 800d318:	f855 3b04 	ldr.w	r3, [r5], #4
 800d31c:	4798      	blx	r3
 800d31e:	3601      	adds	r6, #1
 800d320:	e7ee      	b.n	800d300 <__libc_init_array+0xc>
 800d322:	f855 3b04 	ldr.w	r3, [r5], #4
 800d326:	4798      	blx	r3
 800d328:	3601      	adds	r6, #1
 800d32a:	e7f2      	b.n	800d312 <__libc_init_array+0x1e>
 800d32c:	0800d9b8 	.word	0x0800d9b8
 800d330:	0800d9b8 	.word	0x0800d9b8
 800d334:	0800d9b8 	.word	0x0800d9b8
 800d338:	0800d9bc 	.word	0x0800d9bc

0800d33c <memset>:
 800d33c:	4402      	add	r2, r0
 800d33e:	4603      	mov	r3, r0
 800d340:	4293      	cmp	r3, r2
 800d342:	d100      	bne.n	800d346 <memset+0xa>
 800d344:	4770      	bx	lr
 800d346:	f803 1b01 	strb.w	r1, [r3], #1
 800d34a:	e7f9      	b.n	800d340 <memset+0x4>

0800d34c <checkint>:
 800d34c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800d350:	2b7e      	cmp	r3, #126	; 0x7e
 800d352:	dd10      	ble.n	800d376 <checkint+0x2a>
 800d354:	2b96      	cmp	r3, #150	; 0x96
 800d356:	dc0c      	bgt.n	800d372 <checkint+0x26>
 800d358:	2201      	movs	r2, #1
 800d35a:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800d35e:	fa02 f303 	lsl.w	r3, r2, r3
 800d362:	1e5a      	subs	r2, r3, #1
 800d364:	4202      	tst	r2, r0
 800d366:	d106      	bne.n	800d376 <checkint+0x2a>
 800d368:	4203      	tst	r3, r0
 800d36a:	bf0c      	ite	eq
 800d36c:	2002      	moveq	r0, #2
 800d36e:	2001      	movne	r0, #1
 800d370:	4770      	bx	lr
 800d372:	2002      	movs	r0, #2
 800d374:	4770      	bx	lr
 800d376:	2000      	movs	r0, #0
 800d378:	4770      	bx	lr
 800d37a:	0000      	movs	r0, r0
 800d37c:	0000      	movs	r0, r0
	...

0800d380 <powf>:
 800d380:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d382:	ee10 1a10 	vmov	r1, s0
 800d386:	ee10 6a90 	vmov	r6, s1
 800d38a:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 800d38e:	0072      	lsls	r2, r6, #1
 800d390:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800d394:	b085      	sub	sp, #20
 800d396:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 800d39a:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 800d39e:	d256      	bcs.n	800d44e <powf+0xce>
 800d3a0:	4298      	cmp	r0, r3
 800d3a2:	d256      	bcs.n	800d452 <powf+0xd2>
 800d3a4:	2000      	movs	r0, #0
 800d3a6:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 800d3aa:	4ea3      	ldr	r6, [pc, #652]	; (800d638 <powf+0x2b8>)
 800d3ac:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800d3b0:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 800d3b4:	f3c2 47c3 	ubfx	r7, r2, #19, #4
 800d3b8:	0dd2      	lsrs	r2, r2, #23
 800d3ba:	eb06 1707 	add.w	r7, r6, r7, lsl #4
 800d3be:	05d2      	lsls	r2, r2, #23
 800d3c0:	1a8b      	subs	r3, r1, r2
 800d3c2:	ed97 5b00 	vldr	d5, [r7]
 800d3c6:	ee07 3a90 	vmov	s15, r3
 800d3ca:	15d2      	asrs	r2, r2, #23
 800d3cc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d3d0:	eea5 6b07 	vfma.f64	d6, d5, d7
 800d3d4:	ed97 5b02 	vldr	d5, [r7, #8]
 800d3d8:	ee26 2b06 	vmul.f64	d2, d6, d6
 800d3dc:	ee22 1b02 	vmul.f64	d1, d2, d2
 800d3e0:	ee07 2a90 	vmov	s15, r2
 800d3e4:	ed96 4b40 	vldr	d4, [r6, #256]	; 0x100
 800d3e8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d3ec:	ee37 7b05 	vadd.f64	d7, d7, d5
 800d3f0:	ed96 5b42 	vldr	d5, [r6, #264]	; 0x108
 800d3f4:	ed96 3b44 	vldr	d3, [r6, #272]	; 0x110
 800d3f8:	eea6 5b04 	vfma.f64	d5, d6, d4
 800d3fc:	ed96 4b46 	vldr	d4, [r6, #280]	; 0x118
 800d400:	eea6 4b03 	vfma.f64	d4, d6, d3
 800d404:	ed96 3b48 	vldr	d3, [r6, #288]	; 0x120
 800d408:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 800d40c:	eea6 7b03 	vfma.f64	d7, d6, d3
 800d410:	eea2 7b04 	vfma.f64	d7, d2, d4
 800d414:	eea5 7b01 	vfma.f64	d7, d5, d1
 800d418:	ee20 0b07 	vmul.f64	d0, d0, d7
 800d41c:	ee10 1a90 	vmov	r1, s1
 800d420:	2300      	movs	r3, #0
 800d422:	2700      	movs	r7, #0
 800d424:	f3c1 32cf 	ubfx	r2, r1, #15, #16
 800d428:	f248 06be 	movw	r6, #32958	; 0x80be
 800d42c:	429f      	cmp	r7, r3
 800d42e:	bf08      	it	eq
 800d430:	4296      	cmpeq	r6, r2
 800d432:	f080 80b1 	bcs.w	800d598 <powf+0x218>
 800d436:	ed9f 7b78 	vldr	d7, [pc, #480]	; 800d618 <powf+0x298>
 800d43a:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800d43e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d442:	dd79      	ble.n	800d538 <powf+0x1b8>
 800d444:	b005      	add	sp, #20
 800d446:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d44a:	f000 b91f 	b.w	800d68c <__math_oflowf>
 800d44e:	4298      	cmp	r0, r3
 800d450:	d32d      	bcc.n	800d4ae <powf+0x12e>
 800d452:	b952      	cbnz	r2, 800d46a <powf+0xea>
 800d454:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 800d458:	005b      	lsls	r3, r3, #1
 800d45a:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 800d45e:	f240 80cd 	bls.w	800d5fc <powf+0x27c>
 800d462:	ee30 0a20 	vadd.f32	s0, s0, s1
 800d466:	b005      	add	sp, #20
 800d468:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d46a:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800d46e:	d105      	bne.n	800d47c <powf+0xfc>
 800d470:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 800d474:	0076      	lsls	r6, r6, #1
 800d476:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 800d47a:	e7f0      	b.n	800d45e <powf+0xde>
 800d47c:	004b      	lsls	r3, r1, #1
 800d47e:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 800d482:	d8ee      	bhi.n	800d462 <powf+0xe2>
 800d484:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 800d488:	d1eb      	bne.n	800d462 <powf+0xe2>
 800d48a:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800d48e:	f000 80b5 	beq.w	800d5fc <powf+0x27c>
 800d492:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800d496:	ea6f 0606 	mvn.w	r6, r6
 800d49a:	bf34      	ite	cc
 800d49c:	2300      	movcc	r3, #0
 800d49e:	2301      	movcs	r3, #1
 800d4a0:	0ff6      	lsrs	r6, r6, #31
 800d4a2:	42b3      	cmp	r3, r6
 800d4a4:	f040 80ad 	bne.w	800d602 <powf+0x282>
 800d4a8:	ee20 0aa0 	vmul.f32	s0, s1, s1
 800d4ac:	e7db      	b.n	800d466 <powf+0xe6>
 800d4ae:	004f      	lsls	r7, r1, #1
 800d4b0:	1e7a      	subs	r2, r7, #1
 800d4b2:	429a      	cmp	r2, r3
 800d4b4:	d31c      	bcc.n	800d4f0 <powf+0x170>
 800d4b6:	2900      	cmp	r1, #0
 800d4b8:	ee20 0a00 	vmul.f32	s0, s0, s0
 800d4bc:	da0f      	bge.n	800d4de <powf+0x15e>
 800d4be:	ee10 0a90 	vmov	r0, s1
 800d4c2:	f7ff ff43 	bl	800d34c <checkint>
 800d4c6:	2801      	cmp	r0, #1
 800d4c8:	d109      	bne.n	800d4de <powf+0x15e>
 800d4ca:	eeb1 0a40 	vneg.f32	s0, s0
 800d4ce:	b947      	cbnz	r7, 800d4e2 <powf+0x162>
 800d4d0:	2e00      	cmp	r6, #0
 800d4d2:	dac8      	bge.n	800d466 <powf+0xe6>
 800d4d4:	b005      	add	sp, #20
 800d4d6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d4da:	f000 b8dd 	b.w	800d698 <__math_divzerof>
 800d4de:	2000      	movs	r0, #0
 800d4e0:	e7f5      	b.n	800d4ce <powf+0x14e>
 800d4e2:	2e00      	cmp	r6, #0
 800d4e4:	dabf      	bge.n	800d466 <powf+0xe6>
 800d4e6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d4ea:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800d4ee:	e7ba      	b.n	800d466 <powf+0xe6>
 800d4f0:	2900      	cmp	r1, #0
 800d4f2:	da1f      	bge.n	800d534 <powf+0x1b4>
 800d4f4:	ee10 0a90 	vmov	r0, s1
 800d4f8:	f7ff ff28 	bl	800d34c <checkint>
 800d4fc:	b920      	cbnz	r0, 800d508 <powf+0x188>
 800d4fe:	b005      	add	sp, #20
 800d500:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d504:	f000 b8d8 	b.w	800d6b8 <__math_invalidf>
 800d508:	2801      	cmp	r0, #1
 800d50a:	bf14      	ite	ne
 800d50c:	2000      	movne	r0, #0
 800d50e:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800d512:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800d516:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800d51a:	f4bf af44 	bcs.w	800d3a6 <powf+0x26>
 800d51e:	eddf 7a47 	vldr	s15, [pc, #284]	; 800d63c <powf+0x2bc>
 800d522:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d526:	ee10 3a10 	vmov	r3, s0
 800d52a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d52e:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 800d532:	e738      	b.n	800d3a6 <powf+0x26>
 800d534:	2000      	movs	r0, #0
 800d536:	e7ee      	b.n	800d516 <powf+0x196>
 800d538:	ed9f 7b39 	vldr	d7, [pc, #228]	; 800d620 <powf+0x2a0>
 800d53c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800d540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d544:	dd10      	ble.n	800d568 <powf+0x1e8>
 800d546:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 800d54a:	2800      	cmp	r0, #0
 800d54c:	d15c      	bne.n	800d608 <powf+0x288>
 800d54e:	9302      	str	r3, [sp, #8]
 800d550:	eddd 7a02 	vldr	s15, [sp, #8]
 800d554:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d558:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d55c:	eef4 7a47 	vcmp.f32	s15, s14
 800d560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d564:	f47f af6e 	bne.w	800d444 <powf+0xc4>
 800d568:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800d628 <powf+0x2a8>
 800d56c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800d570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d574:	d804      	bhi.n	800d580 <powf+0x200>
 800d576:	b005      	add	sp, #20
 800d578:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d57c:	f000 b87a 	b.w	800d674 <__math_uflowf>
 800d580:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 800d630 <powf+0x2b0>
 800d584:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800d588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d58c:	d504      	bpl.n	800d598 <powf+0x218>
 800d58e:	b005      	add	sp, #20
 800d590:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d594:	f000 b874 	b.w	800d680 <__math_may_uflowf>
 800d598:	4b29      	ldr	r3, [pc, #164]	; (800d640 <powf+0x2c0>)
 800d59a:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 800d59e:	ee30 6b07 	vadd.f64	d6, d0, d7
 800d5a2:	ed8d 6b00 	vstr	d6, [sp]
 800d5a6:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d5aa:	ee30 7b47 	vsub.f64	d7, d0, d7
 800d5ae:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d5b2:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800d5b6:	f006 011f 	and.w	r1, r6, #31
 800d5ba:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800d5be:	e9d1 ce00 	ldrd	ip, lr, [r1]
 800d5c2:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 800d5c6:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 800d5ca:	ed93 4b46 	vldr	d4, [r3, #280]	; 0x118
 800d5ce:	eea7 6b05 	vfma.f64	d6, d7, d5
 800d5d2:	ee27 5b07 	vmul.f64	d5, d7, d7
 800d5d6:	1836      	adds	r6, r6, r0
 800d5d8:	2300      	movs	r3, #0
 800d5da:	eb13 040c 	adds.w	r4, r3, ip
 800d5de:	ea4f 31c6 	mov.w	r1, r6, lsl #15
 800d5e2:	eb41 050e 	adc.w	r5, r1, lr
 800d5e6:	eea7 0b04 	vfma.f64	d0, d7, d4
 800d5ea:	ec45 4b17 	vmov	d7, r4, r5
 800d5ee:	eea6 0b05 	vfma.f64	d0, d6, d5
 800d5f2:	ee20 0b07 	vmul.f64	d0, d0, d7
 800d5f6:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800d5fa:	e734      	b.n	800d466 <powf+0xe6>
 800d5fc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d600:	e731      	b.n	800d466 <powf+0xe6>
 800d602:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800d644 <powf+0x2c4>
 800d606:	e72e      	b.n	800d466 <powf+0xe6>
 800d608:	9303      	str	r3, [sp, #12]
 800d60a:	eddd 7a03 	vldr	s15, [sp, #12]
 800d60e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800d612:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d616:	e7a1      	b.n	800d55c <powf+0x1dc>
 800d618:	ffd1d571 	.word	0xffd1d571
 800d61c:	405fffff 	.word	0x405fffff
 800d620:	ffa3aae2 	.word	0xffa3aae2
 800d624:	405fffff 	.word	0x405fffff
 800d628:	00000000 	.word	0x00000000
 800d62c:	c062c000 	.word	0xc062c000
 800d630:	00000000 	.word	0x00000000
 800d634:	c062a000 	.word	0xc062a000
 800d638:	0800d748 	.word	0x0800d748
 800d63c:	4b000000 	.word	0x4b000000
 800d640:	0800d870 	.word	0x0800d870
 800d644:	00000000 	.word	0x00000000

0800d648 <with_errnof>:
 800d648:	b513      	push	{r0, r1, r4, lr}
 800d64a:	4604      	mov	r4, r0
 800d64c:	ed8d 0a01 	vstr	s0, [sp, #4]
 800d650:	f7ff fe4a 	bl	800d2e8 <__errno>
 800d654:	ed9d 0a01 	vldr	s0, [sp, #4]
 800d658:	6004      	str	r4, [r0, #0]
 800d65a:	b002      	add	sp, #8
 800d65c:	bd10      	pop	{r4, pc}

0800d65e <xflowf>:
 800d65e:	b130      	cbz	r0, 800d66e <xflowf+0x10>
 800d660:	eef1 7a40 	vneg.f32	s15, s0
 800d664:	ee27 0a80 	vmul.f32	s0, s15, s0
 800d668:	2022      	movs	r0, #34	; 0x22
 800d66a:	f7ff bfed 	b.w	800d648 <with_errnof>
 800d66e:	eef0 7a40 	vmov.f32	s15, s0
 800d672:	e7f7      	b.n	800d664 <xflowf+0x6>

0800d674 <__math_uflowf>:
 800d674:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d67c <__math_uflowf+0x8>
 800d678:	f7ff bff1 	b.w	800d65e <xflowf>
 800d67c:	10000000 	.word	0x10000000

0800d680 <__math_may_uflowf>:
 800d680:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d688 <__math_may_uflowf+0x8>
 800d684:	f7ff bfeb 	b.w	800d65e <xflowf>
 800d688:	1a200000 	.word	0x1a200000

0800d68c <__math_oflowf>:
 800d68c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d694 <__math_oflowf+0x8>
 800d690:	f7ff bfe5 	b.w	800d65e <xflowf>
 800d694:	70000000 	.word	0x70000000

0800d698 <__math_divzerof>:
 800d698:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d69c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800d6a0:	2800      	cmp	r0, #0
 800d6a2:	fe40 7a27 	vseleq.f32	s15, s0, s15
 800d6a6:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800d6b4 <__math_divzerof+0x1c>
 800d6aa:	2022      	movs	r0, #34	; 0x22
 800d6ac:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800d6b0:	f7ff bfca 	b.w	800d648 <with_errnof>
 800d6b4:	00000000 	.word	0x00000000

0800d6b8 <__math_invalidf>:
 800d6b8:	eef0 7a40 	vmov.f32	s15, s0
 800d6bc:	ee30 7a40 	vsub.f32	s14, s0, s0
 800d6c0:	eef4 7a67 	vcmp.f32	s15, s15
 800d6c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6c8:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800d6cc:	d602      	bvs.n	800d6d4 <__math_invalidf+0x1c>
 800d6ce:	2021      	movs	r0, #33	; 0x21
 800d6d0:	f7ff bfba 	b.w	800d648 <with_errnof>
 800d6d4:	4770      	bx	lr
	...

0800d6d8 <_init>:
 800d6d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6da:	bf00      	nop
 800d6dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6de:	bc08      	pop	{r3}
 800d6e0:	469e      	mov	lr, r3
 800d6e2:	4770      	bx	lr

0800d6e4 <_fini>:
 800d6e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6e6:	bf00      	nop
 800d6e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6ea:	bc08      	pop	{r3}
 800d6ec:	469e      	mov	lr, r3
 800d6ee:	4770      	bx	lr
