
mic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c5a8  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000340  0800c878  0800c878  0001c878  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800cbb8  0800cbb8  0001cbb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800cbbc  0800cbbc  0001cbbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000047c  24000000  0800cbc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000b4c  2400047c  0800d03c  0002047c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000fc8  0800d03c  00020fc8  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0002047c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00025c65  00000000  00000000  000204aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003766  00000000  00000000  0004610f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000ff0  00000000  00000000  00049878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000ed0  00000000  00000000  0004a868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000329ac  00000000  00000000  0004b738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000165e5  00000000  00000000  0007e0e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00150bfd  00000000  00000000  000946c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      000000d1  00000000  00000000  001e52c6  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000429c  00000000  00000000  001e5398  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2400047c 	.word	0x2400047c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800c860 	.word	0x0800c860

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000480 	.word	0x24000480
 800030c:	0800c860 	.word	0x0800c860

08000310 <BSP_LED_Init>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b08a      	sub	sp, #40	; 0x28
 8000314:	af00      	add	r7, sp, #0
 8000316:	4603      	mov	r3, r0
 8000318:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800031a:	2300      	movs	r3, #0
 800031c:	627b      	str	r3, [r7, #36]	; 0x24

  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO_LED clock */
  if (Led == LED1)
 800031e:	79fb      	ldrb	r3, [r7, #7]
 8000320:	2b00      	cmp	r3, #0
 8000322:	d10f      	bne.n	8000344 <BSP_LED_Init+0x34>
  {
    LED1_GPIO_CLK_ENABLE();
 8000324:	4b26      	ldr	r3, [pc, #152]	; (80003c0 <BSP_LED_Init+0xb0>)
 8000326:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800032a:	4a25      	ldr	r2, [pc, #148]	; (80003c0 <BSP_LED_Init+0xb0>)
 800032c:	f043 0304 	orr.w	r3, r3, #4
 8000330:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000334:	4b22      	ldr	r3, [pc, #136]	; (80003c0 <BSP_LED_Init+0xb0>)
 8000336:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800033a:	f003 0304 	and.w	r3, r3, #4
 800033e:	60fb      	str	r3, [r7, #12]
 8000340:	68fb      	ldr	r3, [r7, #12]
 8000342:	e015      	b.n	8000370 <BSP_LED_Init+0x60>
  }
  else if (Led == LED2)
 8000344:	79fb      	ldrb	r3, [r7, #7]
 8000346:	2b01      	cmp	r3, #1
 8000348:	d10f      	bne.n	800036a <BSP_LED_Init+0x5a>
  {

    LED2_GPIO_CLK_ENABLE();
 800034a:	4b1d      	ldr	r3, [pc, #116]	; (80003c0 <BSP_LED_Init+0xb0>)
 800034c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000350:	4a1b      	ldr	r2, [pc, #108]	; (80003c0 <BSP_LED_Init+0xb0>)
 8000352:	f043 0304 	orr.w	r3, r3, #4
 8000356:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800035a:	4b19      	ldr	r3, [pc, #100]	; (80003c0 <BSP_LED_Init+0xb0>)
 800035c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000360:	f003 0304 	and.w	r3, r3, #4
 8000364:	60bb      	str	r3, [r7, #8]
 8000366:	68bb      	ldr	r3, [r7, #8]
 8000368:	e002      	b.n	8000370 <BSP_LED_Init+0x60>
  }
  else
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800036a:	f06f 0301 	mvn.w	r3, #1
 800036e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8000370:	2301      	movs	r3, #1
 8000372:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8000374:	2301      	movs	r3, #1
 8000376:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000378:	2302      	movs	r3, #2
 800037a:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Pin = LED_PIN [Led];
 800037c:	79fb      	ldrb	r3, [r7, #7]
 800037e:	4a11      	ldr	r2, [pc, #68]	; (80003c4 <BSP_LED_Init+0xb4>)
 8000380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000384:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_PORT [Led], &gpio_init_structure);
 8000386:	79fb      	ldrb	r3, [r7, #7]
 8000388:	4a0f      	ldr	r2, [pc, #60]	; (80003c8 <BSP_LED_Init+0xb8>)
 800038a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800038e:	f107 0210 	add.w	r2, r7, #16
 8000392:	4611      	mov	r1, r2
 8000394:	4618      	mov	r0, r3
 8000396:	f005 f9e5 	bl	8005764 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN[Led], GPIO_PIN_SET);
 800039a:	79fb      	ldrb	r3, [r7, #7]
 800039c:	4a0a      	ldr	r2, [pc, #40]	; (80003c8 <BSP_LED_Init+0xb8>)
 800039e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80003a2:	79fb      	ldrb	r3, [r7, #7]
 80003a4:	4a07      	ldr	r2, [pc, #28]	; (80003c4 <BSP_LED_Init+0xb4>)
 80003a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003aa:	b29b      	uxth	r3, r3
 80003ac:	2201      	movs	r2, #1
 80003ae:	4619      	mov	r1, r3
 80003b0:	f005 fb80 	bl	8005ab4 <HAL_GPIO_WritePin>

  return ret;
 80003b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80003b6:	4618      	mov	r0, r3
 80003b8:	3728      	adds	r7, #40	; 0x28
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	bf00      	nop
 80003c0:	58024400 	.word	0x58024400
 80003c4:	0800c928 	.word	0x0800c928
 80003c8:	24000400 	.word	0x24000400

080003cc <BSP_LED_Off>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b084      	sub	sp, #16
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	4603      	mov	r3, r0
 80003d4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80003d6:	2300      	movs	r3, #0
 80003d8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_SET);
 80003da:	79fb      	ldrb	r3, [r7, #7]
 80003dc:	4a08      	ldr	r2, [pc, #32]	; (8000400 <BSP_LED_Off+0x34>)
 80003de:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80003e2:	79fb      	ldrb	r3, [r7, #7]
 80003e4:	4a07      	ldr	r2, [pc, #28]	; (8000404 <BSP_LED_Off+0x38>)
 80003e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003ea:	b29b      	uxth	r3, r3
 80003ec:	2201      	movs	r2, #1
 80003ee:	4619      	mov	r1, r3
 80003f0:	f005 fb60 	bl	8005ab4 <HAL_GPIO_WritePin>
  return ret;
 80003f4:	68fb      	ldr	r3, [r7, #12]
}
 80003f6:	4618      	mov	r0, r3
 80003f8:	3710      	adds	r7, #16
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	24000400 	.word	0x24000400
 8000404:	0800c928 	.word	0x0800c928

08000408 <MX_SAI1_Block_B_Init>:
  * @param  MXConfig SAI confiruration structure
  * @note   Being __weak it can be overwritten by the application
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SAI1_Block_B_Init(SAI_HandleTypeDef* hsai, MX_SAI_Config *MXConfig)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b084      	sub	sp, #16
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
 8000410:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8000412:	2300      	movs	r3, #0
 8000414:	73fb      	strb	r3, [r7, #15]

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(hsai);
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	681a      	ldr	r2, [r3, #0]
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000424:	601a      	str	r2, [r3, #0]

  /* Configure SAI1_Block_B */
  hsai->Init.MonoStereoMode       = MXConfig->MonoStereoMode;
 8000426:	683b      	ldr	r3, [r7, #0]
 8000428:	68da      	ldr	r2, [r3, #12]
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai->Init.AudioFrequency       = MXConfig->AudioFrequency;
 800042e:	683b      	ldr	r3, [r7, #0]
 8000430:	681a      	ldr	r2, [r3, #0]
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	621a      	str	r2, [r3, #32]
  hsai->Init.AudioMode            = MXConfig->AudioMode;
 8000436:	683b      	ldr	r3, [r7, #0]
 8000438:	685a      	ldr	r2, [r3, #4]
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	605a      	str	r2, [r3, #4]
  hsai->Init.NoDivider            = SAI_MASTERDIVIDER_ENABLE;
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	2200      	movs	r2, #0
 8000442:	619a      	str	r2, [r3, #24]
  hsai->Init.Protocol             = SAI_FREE_PROTOCOL;
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	2200      	movs	r2, #0
 8000448:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.DataSize             = MXConfig->DataSize;
 800044a:	683b      	ldr	r3, [r7, #0]
 800044c:	689a      	ldr	r2, [r3, #8]
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->Init.FirstBit             = SAI_FIRSTBIT_MSB;
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	2200      	movs	r2, #0
 8000456:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->Init.ClockStrobing        = MXConfig->ClockStrobing;
 8000458:	683b      	ldr	r3, [r7, #0]
 800045a:	691a      	ldr	r2, [r3, #16]
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	651a      	str	r2, [r3, #80]	; 0x50
  hsai->Init.Synchro              = MXConfig->Synchro;
 8000460:	683b      	ldr	r3, [r7, #0]
 8000462:	695a      	ldr	r2, [r3, #20]
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	609a      	str	r2, [r3, #8]
  hsai->Init.OutputDrive          = MXConfig->OutputDrive;
 8000468:	683b      	ldr	r3, [r7, #0]
 800046a:	699a      	ldr	r2, [r3, #24]
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	615a      	str	r2, [r3, #20]
  hsai->Init.FIFOThreshold        = SAI_FIFOTHRESHOLD_1QF;
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	2201      	movs	r2, #1
 8000474:	61da      	str	r2, [r3, #28]
  hsai->Init.SynchroExt           = MXConfig->SynchroExt;
 8000476:	683b      	ldr	r3, [r7, #0]
 8000478:	69da      	ldr	r2, [r3, #28]
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	60da      	str	r2, [r3, #12]
  hsai->Init.CompandingMode       = SAI_NOCOMPANDING;
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	2200      	movs	r2, #0
 8000482:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.TriState             = SAI_OUTPUT_NOTRELEASED;
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	2200      	movs	r2, #0
 8000488:	635a      	str	r2, [r3, #52]	; 0x34
  hsai->Init.Mckdiv               = 0;
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	2200      	movs	r2, #0
 800048e:	625a      	str	r2, [r3, #36]	; 0x24
  hsai->Init.MckOutput            = SAI_MCK_OUTPUT_ENABLE;
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000496:	611a      	str	r2, [r3, #16]
  hsai->Init.MckOverSampling      = SAI_MCK_OVERSAMPLING_DISABLE;
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	2200      	movs	r2, #0
 800049c:	629a      	str	r2, [r3, #40]	; 0x28
  hsai->Init.PdmInit.Activation   = DISABLE;
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	2200      	movs	r2, #0
 80004a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Configure SAI_Block_x Frame */
  hsai->FrameInit.FrameLength       = MXConfig->FrameLength;
 80004a6:	683b      	ldr	r3, [r7, #0]
 80004a8:	6a1a      	ldr	r2, [r3, #32]
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->FrameInit.ActiveFrameLength = MXConfig->ActiveFrameLength;
 80004ae:	683b      	ldr	r3, [r7, #0]
 80004b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->FrameInit.FSDefinition      = SAI_FS_CHANNEL_IDENTIFICATION;
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80004bc:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity        = SAI_FS_ACTIVE_LOW;
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	2200      	movs	r2, #0
 80004c2:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset          = SAI_FS_BEFOREFIRSTBIT;
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80004ca:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure SAI Block_x Slot */
  hsai->SlotInit.FirstBitOffset     = 0;
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	2200      	movs	r2, #0
 80004d0:	669a      	str	r2, [r3, #104]	; 0x68
  if ((MXConfig->DataSize == AUDIO_RESOLUTION_24B) || (MXConfig->DataSize == AUDIO_RESOLUTION_32B))
 80004d2:	683b      	ldr	r3, [r7, #0]
 80004d4:	689b      	ldr	r3, [r3, #8]
 80004d6:	2b18      	cmp	r3, #24
 80004d8:	d003      	beq.n	80004e2 <MX_SAI1_Block_B_Init+0xda>
 80004da:	683b      	ldr	r3, [r7, #0]
 80004dc:	689b      	ldr	r3, [r3, #8]
 80004de:	2b20      	cmp	r3, #32
 80004e0:	d103      	bne.n	80004ea <MX_SAI1_Block_B_Init+0xe2>
  {
    hsai->SlotInit.SlotSize         = SAI_SLOTSIZE_32B;
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	2280      	movs	r2, #128	; 0x80
 80004e6:	66da      	str	r2, [r3, #108]	; 0x6c
 80004e8:	e002      	b.n	80004f0 <MX_SAI1_Block_B_Init+0xe8>
  }
  else
  {
    hsai->SlotInit.SlotSize         = SAI_SLOTSIZE_16B;
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	2240      	movs	r2, #64	; 0x40
 80004ee:	66da      	str	r2, [r3, #108]	; 0x6c
  }
  hsai->SlotInit.SlotNumber         = 4;
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	2204      	movs	r2, #4
 80004f4:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive         = MXConfig->SlotActive;
 80004f6:	683b      	ldr	r3, [r7, #0]
 80004f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	675a      	str	r2, [r3, #116]	; 0x74

  if(HAL_SAI_Init(hsai) != HAL_OK)
 80004fe:	6878      	ldr	r0, [r7, #4]
 8000500:	f008 fc6a 	bl	8008dd8 <HAL_SAI_Init>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	d001      	beq.n	800050e <MX_SAI1_Block_B_Init+0x106>
  {
    ret = HAL_ERROR;
 800050a:	2301      	movs	r3, #1
 800050c:	73fb      	strb	r3, [r7, #15]
  }
  __HAL_SAI_ENABLE(hsai);
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	681a      	ldr	r2, [r3, #0]
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800051c:	601a      	str	r2, [r3, #0]

  return ret;
 800051e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000520:	4618      	mov	r0, r3
 8000522:	3710      	adds	r7, #16
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}

08000528 <MX_SAI1_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SAI1_ClockConfig(SAI_HandleTypeDef *hsai, uint32_t SampleRate)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b0b0      	sub	sp, #192	; 0xc0
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
 8000530:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsai);

  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;
  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 8000532:	f107 030c 	add.w	r3, r7, #12
 8000536:	4618      	mov	r0, r3
 8000538:	f007 f936 	bl	80077a8 <HAL_RCCEx_GetPeriphCLKConfig>

  /* Set the PLL configuration according to the audio frequency */
  /* Set the PLL configuration according to the audio frequency */
  if((SampleRate == AUDIO_FREQUENCY_11K) || (SampleRate == AUDIO_FREQUENCY_22K) || (SampleRate == AUDIO_FREQUENCY_44K))
 800053c:	683b      	ldr	r3, [r7, #0]
 800053e:	f642 3211 	movw	r2, #11025	; 0x2b11
 8000542:	4293      	cmp	r3, r2
 8000544:	d009      	beq.n	800055a <MX_SAI1_ClockConfig+0x32>
 8000546:	683b      	ldr	r3, [r7, #0]
 8000548:	f245 6222 	movw	r2, #22050	; 0x5622
 800054c:	4293      	cmp	r3, r2
 800054e:	d004      	beq.n	800055a <MX_SAI1_ClockConfig+0x32>
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	f64a 4244 	movw	r2, #44100	; 0xac44
 8000556:	4293      	cmp	r3, r2
 8000558:	d104      	bne.n	8000564 <MX_SAI1_ClockConfig+0x3c>
  {
    rcc_ex_clk_init_struct.PLL2.PLL2P = 36;
 800055a:	2324      	movs	r3, #36	; 0x24
 800055c:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLL2.PLL2Q = 36;
 800055e:	2324      	movs	r3, #36	; 0x24
 8000560:	61fb      	str	r3, [r7, #28]
 8000562:	e003      	b.n	800056c <MX_SAI1_ClockConfig+0x44>
  }
  else /* AUDIO_FREQUENCY_8K, AUDIO_FREQUENCY_16K, AUDIO_FREQUENCY_32K, AUDIO_FREQUENCY_48K, AUDIO_FREQUENCY_96K */
  {
    rcc_ex_clk_init_struct.PLL2.PLL2P = 8;
 8000564:	2308      	movs	r3, #8
 8000566:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLL2.PLL2Q = 8;
 8000568:	2308      	movs	r3, #8
 800056a:	61fb      	str	r3, [r7, #28]
  }
  rcc_ex_clk_init_struct.PLL2.PLL2N = 80;
 800056c:	2350      	movs	r3, #80	; 0x50
 800056e:	617b      	str	r3, [r7, #20]

  rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8000570:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000574:	60fb      	str	r3, [r7, #12]
  rcc_ex_clk_init_struct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 8000576:	2301      	movs	r3, #1
 8000578:	663b      	str	r3, [r7, #96]	; 0x60
  rcc_ex_clk_init_struct.PLL2.PLL2R = 2;
 800057a:	2302      	movs	r3, #2
 800057c:	623b      	str	r3, [r7, #32]
  rcc_ex_clk_init_struct.PLL2.PLL2M = 5;
 800057e:	2305      	movs	r3, #5
 8000580:	613b      	str	r3, [r7, #16]
  rcc_ex_clk_init_struct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8000582:	2300      	movs	r3, #0
 8000584:	627b      	str	r3, [r7, #36]	; 0x24
  rcc_ex_clk_init_struct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000586:	2320      	movs	r3, #32
 8000588:	62bb      	str	r3, [r7, #40]	; 0x28
  rcc_ex_clk_init_struct.PLL2.PLL2FRACN = 0;
 800058a:	2300      	movs	r3, #0
 800058c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 800058e:	f107 030c 	add.w	r3, r7, #12
 8000592:	4618      	mov	r0, r3
 8000594:	f006 fa0e 	bl	80069b4 <HAL_RCCEx_PeriphCLKConfig>
 8000598:	4603      	mov	r3, r0
}
 800059a:	4618      	mov	r0, r3
 800059c:	37c0      	adds	r7, #192	; 0xc0
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
	...

080005a4 <HAL_SAI_ErrorCallback>:
  * @brief  SAI error callbacks.
  * @param  hsai  SAI handle
  * @retval None
  */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  if(hsai->Instance == AUDIO_OUT_SAIx)
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a06      	ldr	r2, [pc, #24]	; (80005cc <HAL_SAI_ErrorCallback+0x28>)
 80005b2:	4293      	cmp	r3, r2
 80005b4:	d103      	bne.n	80005be <HAL_SAI_ErrorCallback+0x1a>
  {
    BSP_AUDIO_OUT_Error_CallBack(0);
 80005b6:	2000      	movs	r0, #0
 80005b8:	f000 f80a 	bl	80005d0 <BSP_AUDIO_OUT_Error_CallBack>
  }
  else
  {
    BSP_AUDIO_IN_Error_CallBack(0);
  }
}
 80005bc:	e002      	b.n	80005c4 <HAL_SAI_ErrorCallback+0x20>
    BSP_AUDIO_IN_Error_CallBack(0);
 80005be:	2000      	movs	r0, #0
 80005c0:	f001 f862 	bl	8001688 <BSP_AUDIO_IN_Error_CallBack>
}
 80005c4:	bf00      	nop
 80005c6:	3708      	adds	r7, #8
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	40015824 	.word	0x40015824

080005d0 <BSP_AUDIO_OUT_Error_CallBack>:
  * @brief  Manages the DMA FIFO error event
  * @param  Instance AUDIO OUT Instance. It can only be 0 (SAI)
  * @retval None
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(uint32_t Instance)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Instance);
}
 80005d8:	bf00      	nop
 80005da:	370c      	adds	r7, #12
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr

080005e4 <SAI_MspInit>:
  * @brief  Initialize BSP_AUDIO_OUT MSP.
  * @param  hsai  SAI handle
  * @retval None
  */
static void SAI_MspInit(SAI_HandleTypeDef *hsai)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b096      	sub	sp, #88	; 0x58
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  static DMA_HandleTypeDef hdma_sai_tx, hdma_sai_rx;
    /* Enable SAI clock */
  AUDIO_OUT_SAIx_CLK_ENABLE();
 80005ec:	4b61      	ldr	r3, [pc, #388]	; (8000774 <SAI_MspInit+0x190>)
 80005ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80005f2:	4a60      	ldr	r2, [pc, #384]	; (8000774 <SAI_MspInit+0x190>)
 80005f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005f8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80005fc:	4b5d      	ldr	r3, [pc, #372]	; (8000774 <SAI_MspInit+0x190>)
 80005fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000602:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000606:	643b      	str	r3, [r7, #64]	; 0x40
 8000608:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable GPIO clock */
  AUDIO_OUT_SAIx_MCLK_ENABLE();
 800060a:	4b5a      	ldr	r3, [pc, #360]	; (8000774 <SAI_MspInit+0x190>)
 800060c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000610:	4a58      	ldr	r2, [pc, #352]	; (8000774 <SAI_MspInit+0x190>)
 8000612:	f043 0320 	orr.w	r3, r3, #32
 8000616:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800061a:	4b56      	ldr	r3, [pc, #344]	; (8000774 <SAI_MspInit+0x190>)
 800061c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000620:	f003 0320 	and.w	r3, r3, #32
 8000624:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  AUDIO_OUT_SAIx_SCK_ENABLE();
 8000628:	4b52      	ldr	r3, [pc, #328]	; (8000774 <SAI_MspInit+0x190>)
 800062a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800062e:	4a51      	ldr	r2, [pc, #324]	; (8000774 <SAI_MspInit+0x190>)
 8000630:	f043 0320 	orr.w	r3, r3, #32
 8000634:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000638:	4b4e      	ldr	r3, [pc, #312]	; (8000774 <SAI_MspInit+0x190>)
 800063a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800063e:	f003 0320 	and.w	r3, r3, #32
 8000642:	63bb      	str	r3, [r7, #56]	; 0x38
 8000644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  AUDIO_OUT_SAIx_SD_ENABLE();
 8000646:	4b4b      	ldr	r3, [pc, #300]	; (8000774 <SAI_MspInit+0x190>)
 8000648:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800064c:	4a49      	ldr	r2, [pc, #292]	; (8000774 <SAI_MspInit+0x190>)
 800064e:	f043 0320 	orr.w	r3, r3, #32
 8000652:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000656:	4b47      	ldr	r3, [pc, #284]	; (8000774 <SAI_MspInit+0x190>)
 8000658:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800065c:	f003 0320 	and.w	r3, r3, #32
 8000660:	637b      	str	r3, [r7, #52]	; 0x34
 8000662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  AUDIO_OUT_SAIx_FS_ENABLE();
 8000664:	4b43      	ldr	r3, [pc, #268]	; (8000774 <SAI_MspInit+0x190>)
 8000666:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800066a:	4a42      	ldr	r2, [pc, #264]	; (8000774 <SAI_MspInit+0x190>)
 800066c:	f043 0320 	orr.w	r3, r3, #32
 8000670:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000674:	4b3f      	ldr	r3, [pc, #252]	; (8000774 <SAI_MspInit+0x190>)
 8000676:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800067a:	f003 0320 	and.w	r3, r3, #32
 800067e:	633b      	str	r3, [r7, #48]	; 0x30
 8000680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
 8000682:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000686:	647b      	str	r3, [r7, #68]	; 0x44
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8000688:	2302      	movs	r3, #2
 800068a:	64bb      	str	r3, [r7, #72]	; 0x48
  gpio_init_structure.Pull = GPIO_NOPULL;
 800068c:	2300      	movs	r3, #0
 800068e:	64fb      	str	r3, [r7, #76]	; 0x4c
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000690:	2303      	movs	r3, #3
 8000692:	653b      	str	r3, [r7, #80]	; 0x50
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_AF;
 8000694:	2306      	movs	r3, #6
 8000696:	657b      	str	r3, [r7, #84]	; 0x54
  HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 8000698:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800069c:	4619      	mov	r1, r3
 800069e:	4836      	ldr	r0, [pc, #216]	; (8000778 <SAI_MspInit+0x194>)
 80006a0:	f005 f860 	bl	8005764 <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 80006a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006a8:	647b      	str	r3, [r7, #68]	; 0x44
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
 80006aa:	2306      	movs	r3, #6
 80006ac:	657b      	str	r3, [r7, #84]	; 0x54
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_GPIO_PORT, &gpio_init_structure);
 80006ae:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80006b2:	4619      	mov	r1, r3
 80006b4:	4830      	ldr	r0, [pc, #192]	; (8000778 <SAI_MspInit+0x194>)
 80006b6:	f005 f855 	bl	8005764 <HAL_GPIO_Init>

  gpio_init_structure.Pin =  AUDIO_OUT_SAIx_SD_PIN;
 80006ba:	2340      	movs	r3, #64	; 0x40
 80006bc:	647b      	str	r3, [r7, #68]	; 0x44
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SD_AF;
 80006be:	2306      	movs	r3, #6
 80006c0:	657b      	str	r3, [r7, #84]	; 0x54
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 80006c2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80006c6:	4619      	mov	r1, r3
 80006c8:	482b      	ldr	r0, [pc, #172]	; (8000778 <SAI_MspInit+0x194>)
 80006ca:	f005 f84b 	bl	8005764 <HAL_GPIO_Init>

    if(hsai->Instance != AUDIO_IN_SAI_PDMx)
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	4a2a      	ldr	r2, [pc, #168]	; (800077c <SAI_MspInit+0x198>)
 80006d4:	4293      	cmp	r3, r2
 80006d6:	d01e      	beq.n	8000716 <SAI_MspInit+0x132>
    {
      if(haudio_in_sai[0].State != HAL_SAI_STATE_READY)
 80006d8:	4b29      	ldr	r3, [pc, #164]	; (8000780 <SAI_MspInit+0x19c>)
 80006da:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	2b01      	cmp	r3, #1
 80006e2:	d018      	beq.n	8000716 <SAI_MspInit+0x132>
      {
        AUDIO_OUT_SAIx_MCLK_ENABLE();
 80006e4:	4b23      	ldr	r3, [pc, #140]	; (8000774 <SAI_MspInit+0x190>)
 80006e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006ea:	4a22      	ldr	r2, [pc, #136]	; (8000774 <SAI_MspInit+0x190>)
 80006ec:	f043 0320 	orr.w	r3, r3, #32
 80006f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006f4:	4b1f      	ldr	r3, [pc, #124]	; (8000774 <SAI_MspInit+0x190>)
 80006f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006fa:	f003 0320 	and.w	r3, r3, #32
 80006fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
        gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 8000702:	2380      	movs	r3, #128	; 0x80
 8000704:	647b      	str	r3, [r7, #68]	; 0x44
        gpio_init_structure.Alternate = AUDIO_OUT_SAIx_MCLK_AF;
 8000706:	2306      	movs	r3, #6
 8000708:	657b      	str	r3, [r7, #84]	; 0x54
        HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 800070a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800070e:	4619      	mov	r1, r3
 8000710:	4819      	ldr	r0, [pc, #100]	; (8000778 <SAI_MspInit+0x194>)
 8000712:	f005 f827 	bl	8005764 <HAL_GPIO_Init>
      }
    }

  if(hsai->Instance == AUDIO_OUT_SAIx)
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	4a1a      	ldr	r2, [pc, #104]	; (8000784 <SAI_MspInit+0x1a0>)
 800071c:	4293      	cmp	r3, r2
 800071e:	d16b      	bne.n	80007f8 <SAI_MspInit+0x214>
  {
  /* Enable the DMA clock */
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 8000720:	4b14      	ldr	r3, [pc, #80]	; (8000774 <SAI_MspInit+0x190>)
 8000722:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000726:	4a13      	ldr	r2, [pc, #76]	; (8000774 <SAI_MspInit+0x190>)
 8000728:	f043 0302 	orr.w	r3, r3, #2
 800072c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000730:	4b10      	ldr	r3, [pc, #64]	; (8000774 <SAI_MspInit+0x190>)
 8000732:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000736:	f003 0302 	and.w	r3, r3, #2
 800073a:	62bb      	str	r3, [r7, #40]	; 0x28
 800073c:	6abb      	ldr	r3, [r7, #40]	; 0x28

    /* Configure the hdma_saiTx handle parameters */
    hdma_sai_tx.Init.Request             = AUDIO_OUT_SAIx_DMAx_REQUEST;
 800073e:	4b12      	ldr	r3, [pc, #72]	; (8000788 <SAI_MspInit+0x1a4>)
 8000740:	2258      	movs	r2, #88	; 0x58
 8000742:	605a      	str	r2, [r3, #4]
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8000744:	4b10      	ldr	r3, [pc, #64]	; (8000788 <SAI_MspInit+0x1a4>)
 8000746:	2240      	movs	r2, #64	; 0x40
 8000748:	609a      	str	r2, [r3, #8]
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800074a:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <SAI_MspInit+0x1a4>)
 800074c:	2200      	movs	r2, #0
 800074e:	60da      	str	r2, [r3, #12]
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8000750:	4b0d      	ldr	r3, [pc, #52]	; (8000788 <SAI_MspInit+0x1a4>)
 8000752:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000756:	611a      	str	r2, [r3, #16]
    if (Audio_Out_Ctx[0].BitsPerSample == AUDIO_RESOLUTION_16B)
 8000758:	4b0c      	ldr	r3, [pc, #48]	; (800078c <SAI_MspInit+0x1a8>)
 800075a:	68db      	ldr	r3, [r3, #12]
 800075c:	2b10      	cmp	r3, #16
 800075e:	d117      	bne.n	8000790 <SAI_MspInit+0x1ac>
    {
      hdma_sai_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000760:	4b09      	ldr	r3, [pc, #36]	; (8000788 <SAI_MspInit+0x1a4>)
 8000762:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000766:	615a      	str	r2, [r3, #20]
      hdma_sai_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_HALFWORD;
 8000768:	4b07      	ldr	r3, [pc, #28]	; (8000788 <SAI_MspInit+0x1a4>)
 800076a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800076e:	619a      	str	r2, [r3, #24]
 8000770:	e016      	b.n	80007a0 <SAI_MspInit+0x1bc>
 8000772:	bf00      	nop
 8000774:	58024400 	.word	0x58024400
 8000778:	58021400 	.word	0x58021400
 800077c:	58005404 	.word	0x58005404
 8000780:	24000538 	.word	0x24000538
 8000784:	40015824 	.word	0x40015824
 8000788:	240008f0 	.word	0x240008f0
 800078c:	24000c40 	.word	0x24000c40
    }
    else /* AUDIO_RESOLUTION_32B */
    {
      hdma_sai_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000790:	4b53      	ldr	r3, [pc, #332]	; (80008e0 <SAI_MspInit+0x2fc>)
 8000792:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000796:	615a      	str	r2, [r3, #20]
      hdma_sai_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8000798:	4b51      	ldr	r3, [pc, #324]	; (80008e0 <SAI_MspInit+0x2fc>)
 800079a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800079e:	619a      	str	r2, [r3, #24]
    }
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 80007a0:	4b4f      	ldr	r3, [pc, #316]	; (80008e0 <SAI_MspInit+0x2fc>)
 80007a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007a6:	61da      	str	r2, [r3, #28]
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 80007a8:	4b4d      	ldr	r3, [pc, #308]	; (80008e0 <SAI_MspInit+0x2fc>)
 80007aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80007ae:	621a      	str	r2, [r3, #32]
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 80007b0:	4b4b      	ldr	r3, [pc, #300]	; (80008e0 <SAI_MspInit+0x2fc>)
 80007b2:	2204      	movs	r2, #4
 80007b4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80007b6:	4b4a      	ldr	r3, [pc, #296]	; (80008e0 <SAI_MspInit+0x2fc>)
 80007b8:	2203      	movs	r2, #3
 80007ba:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
 80007bc:	4b48      	ldr	r3, [pc, #288]	; (80008e0 <SAI_MspInit+0x2fc>)
 80007be:	2200      	movs	r2, #0
 80007c0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 80007c2:	4b47      	ldr	r3, [pc, #284]	; (80008e0 <SAI_MspInit+0x2fc>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	631a      	str	r2, [r3, #48]	; 0x30

    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 80007c8:	4b45      	ldr	r3, [pc, #276]	; (80008e0 <SAI_MspInit+0x2fc>)
 80007ca:	4a46      	ldr	r2, [pc, #280]	; (80008e4 <SAI_MspInit+0x300>)
 80007cc:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	4a43      	ldr	r2, [pc, #268]	; (80008e0 <SAI_MspInit+0x2fc>)
 80007d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80007d6:	4a42      	ldr	r2, [pc, #264]	; (80008e0 <SAI_MspInit+0x2fc>)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	6393      	str	r3, [r2, #56]	; 0x38

    /* Deinitialize the Stream for new transfer */
    (void)HAL_DMA_DeInit(&hdma_sai_tx);
 80007dc:	4840      	ldr	r0, [pc, #256]	; (80008e0 <SAI_MspInit+0x2fc>)
 80007de:	f002 fa09 	bl	8002bf4 <HAL_DMA_DeInit>

    /* Configure the DMA Stream */
    (void)HAL_DMA_Init(&hdma_sai_tx);
 80007e2:	483f      	ldr	r0, [pc, #252]	; (80008e0 <SAI_MspInit+0x2fc>)
 80007e4:	f001 feac 	bl	8002540 <HAL_DMA_Init>

    /* SAI DMA IRQ Channel configuration */
    HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, BSP_AUDIO_OUT_IT_PRIORITY, 0);
 80007e8:	2200      	movs	r2, #0
 80007ea:	210e      	movs	r1, #14
 80007ec:	2045      	movs	r0, #69	; 0x45
 80007ee:	f001 fb48 	bl	8001e82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ);
 80007f2:	2045      	movs	r0, #69	; 0x45
 80007f4:	f001 fb5f 	bl	8001eb6 <HAL_NVIC_EnableIRQ>
  }

  /* Audio In Msp initialization */
  if(hsai->Instance == AUDIO_IN_SAIx)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a3a      	ldr	r2, [pc, #232]	; (80008e8 <SAI_MspInit+0x304>)
 80007fe:	4293      	cmp	r3, r2
 8000800:	f040 809b 	bne.w	800093a <SAI_MspInit+0x356>
  {
    /* Enable SAI clock */
    AUDIO_IN_SAIx_CLK_ENABLE();
 8000804:	4b39      	ldr	r3, [pc, #228]	; (80008ec <SAI_MspInit+0x308>)
 8000806:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800080a:	4a38      	ldr	r2, [pc, #224]	; (80008ec <SAI_MspInit+0x308>)
 800080c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000810:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000814:	4b35      	ldr	r3, [pc, #212]	; (80008ec <SAI_MspInit+0x308>)
 8000816:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800081a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800081e:	627b      	str	r3, [r7, #36]	; 0x24
 8000820:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    /* Enable SD GPIO clock */
    AUDIO_IN_SAIx_SD_ENABLE();
 8000822:	4b32      	ldr	r3, [pc, #200]	; (80008ec <SAI_MspInit+0x308>)
 8000824:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000828:	4a30      	ldr	r2, [pc, #192]	; (80008ec <SAI_MspInit+0x308>)
 800082a:	f043 0310 	orr.w	r3, r3, #16
 800082e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000832:	4b2e      	ldr	r3, [pc, #184]	; (80008ec <SAI_MspInit+0x308>)
 8000834:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000838:	f003 0310 	and.w	r3, r3, #16
 800083c:	623b      	str	r3, [r7, #32]
 800083e:	6a3b      	ldr	r3, [r7, #32]
    /* CODEC_SAI pin configuration: SD pin */
    gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 8000840:	2340      	movs	r3, #64	; 0x40
 8000842:	647b      	str	r3, [r7, #68]	; 0x44
    gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8000844:	2302      	movs	r3, #2
 8000846:	64bb      	str	r3, [r7, #72]	; 0x48
    gpio_init_structure.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	64fb      	str	r3, [r7, #76]	; 0x4c
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800084c:	2302      	movs	r3, #2
 800084e:	653b      	str	r3, [r7, #80]	; 0x50
    gpio_init_structure.Alternate = AUDIO_IN_SAIx_AF;
 8000850:	2306      	movs	r3, #6
 8000852:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 8000854:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000858:	4619      	mov	r1, r3
 800085a:	4825      	ldr	r0, [pc, #148]	; (80008f0 <SAI_MspInit+0x30c>)
 800085c:	f004 ff82 	bl	8005764 <HAL_GPIO_Init>

    /* Enable the DMA clock */
    AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 8000860:	4b22      	ldr	r3, [pc, #136]	; (80008ec <SAI_MspInit+0x308>)
 8000862:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000866:	4a21      	ldr	r2, [pc, #132]	; (80008ec <SAI_MspInit+0x308>)
 8000868:	f043 0302 	orr.w	r3, r3, #2
 800086c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000870:	4b1e      	ldr	r3, [pc, #120]	; (80008ec <SAI_MspInit+0x308>)
 8000872:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000876:	f003 0302 	and.w	r3, r3, #2
 800087a:	61fb      	str	r3, [r7, #28]
 800087c:	69fb      	ldr	r3, [r7, #28]

    /* Configure the hdma_sai_rx handle parameters */
    hdma_sai_rx.Instance                 = AUDIO_IN_SAI_PDMx_DMAx_STREAM;
 800087e:	4b1d      	ldr	r3, [pc, #116]	; (80008f4 <SAI_MspInit+0x310>)
 8000880:	4a1d      	ldr	r2, [pc, #116]	; (80008f8 <SAI_MspInit+0x314>)
 8000882:	601a      	str	r2, [r3, #0]
    hdma_sai_rx.Init.Request             = AUDIO_IN_SAI_PDMx_DMAx_REQUEST;
 8000884:	4b1b      	ldr	r3, [pc, #108]	; (80008f4 <SAI_MspInit+0x310>)
 8000886:	220f      	movs	r2, #15
 8000888:	605a      	str	r2, [r3, #4]
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 800088a:	4b1a      	ldr	r3, [pc, #104]	; (80008f4 <SAI_MspInit+0x310>)
 800088c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000890:	61da      	str	r2, [r3, #28]
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8000892:	4b18      	ldr	r3, [pc, #96]	; (80008f4 <SAI_MspInit+0x310>)
 8000894:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000898:	621a      	str	r2, [r3, #32]
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 800089a:	4b16      	ldr	r3, [pc, #88]	; (80008f4 <SAI_MspInit+0x310>)
 800089c:	2200      	movs	r2, #0
 800089e:	609a      	str	r2, [r3, #8]
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 80008a0:	4b14      	ldr	r3, [pc, #80]	; (80008f4 <SAI_MspInit+0x310>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	60da      	str	r2, [r3, #12]
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 80008a6:	4b13      	ldr	r3, [pc, #76]	; (80008f4 <SAI_MspInit+0x310>)
 80008a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008ac:	611a      	str	r2, [r3, #16]
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 80008ae:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <SAI_MspInit+0x310>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80008b4:	4b0f      	ldr	r3, [pc, #60]	; (80008f4 <SAI_MspInit+0x310>)
 80008b6:	2203      	movs	r2, #3
 80008b8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 80008ba:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <SAI_MspInit+0x310>)
 80008bc:	2200      	movs	r2, #0
 80008be:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 80008c0:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <SAI_MspInit+0x310>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	631a      	str	r2, [r3, #48]	; 0x30

    if(Audio_In_Ctx[0].BitsPerSample == AUDIO_RESOLUTION_16B)
 80008c6:	4b0d      	ldr	r3, [pc, #52]	; (80008fc <SAI_MspInit+0x318>)
 80008c8:	68db      	ldr	r3, [r3, #12]
 80008ca:	2b10      	cmp	r3, #16
 80008cc:	d118      	bne.n	8000900 <SAI_MspInit+0x31c>
    {
      hdma_sai_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80008ce:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <SAI_MspInit+0x310>)
 80008d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008d4:	615a      	str	r2, [r3, #20]
      hdma_sai_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_HALFWORD;
 80008d6:	4b07      	ldr	r3, [pc, #28]	; (80008f4 <SAI_MspInit+0x310>)
 80008d8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008dc:	619a      	str	r2, [r3, #24]
 80008de:	e017      	b.n	8000910 <SAI_MspInit+0x32c>
 80008e0:	240008f0 	.word	0x240008f0
 80008e4:	400204a0 	.word	0x400204a0
 80008e8:	40015804 	.word	0x40015804
 80008ec:	58024400 	.word	0x58024400
 80008f0:	58021000 	.word	0x58021000
 80008f4:	24000968 	.word	0x24000968
 80008f8:	5802541c 	.word	0x5802541c
 80008fc:	24000c64 	.word	0x24000c64
    }
    else
    {
      hdma_sai_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000900:	4b6f      	ldr	r3, [pc, #444]	; (8000ac0 <SAI_MspInit+0x4dc>)
 8000902:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000906:	615a      	str	r2, [r3, #20]
      hdma_sai_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8000908:	4b6d      	ldr	r3, [pc, #436]	; (8000ac0 <SAI_MspInit+0x4dc>)
 800090a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800090e:	619a      	str	r2, [r3, #24]
    }

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	4a6b      	ldr	r2, [pc, #428]	; (8000ac0 <SAI_MspInit+0x4dc>)
 8000914:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8000918:	4a69      	ldr	r2, [pc, #420]	; (8000ac0 <SAI_MspInit+0x4dc>)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	6393      	str	r3, [r2, #56]	; 0x38

    /* Deinitialize the Stream for new transfer */
    (void)HAL_DMA_DeInit(&hdma_sai_rx);
 800091e:	4868      	ldr	r0, [pc, #416]	; (8000ac0 <SAI_MspInit+0x4dc>)
 8000920:	f002 f968 	bl	8002bf4 <HAL_DMA_DeInit>

    /* Configure the DMA Stream */
    (void)HAL_DMA_Init(&hdma_sai_rx);
 8000924:	4866      	ldr	r0, [pc, #408]	; (8000ac0 <SAI_MspInit+0x4dc>)
 8000926:	f001 fe0b 	bl	8002540 <HAL_DMA_Init>

    /* SAI DMA IRQ Channel configuration */
    HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, BSP_AUDIO_IN_IT_PRIORITY, 0);
 800092a:	2200      	movs	r2, #0
 800092c:	210f      	movs	r1, #15
 800092e:	203c      	movs	r0, #60	; 0x3c
 8000930:	f001 faa7 	bl	8001e82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 8000934:	203c      	movs	r0, #60	; 0x3c
 8000936:	f001 fabe 	bl	8001eb6 <HAL_NVIC_EnableIRQ>
  }

  if(hsai->Instance == AUDIO_IN_SAI_PDMx)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4a61      	ldr	r2, [pc, #388]	; (8000ac4 <SAI_MspInit+0x4e0>)
 8000940:	4293      	cmp	r3, r2
 8000942:	f040 80b8 	bne.w	8000ab6 <SAI_MspInit+0x4d2>
  {
     /* Enable SAI clock */
    AUDIO_IN_SAI_PDMx_CLK_ENABLE();
 8000946:	4b60      	ldr	r3, [pc, #384]	; (8000ac8 <SAI_MspInit+0x4e4>)
 8000948:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800094c:	4a5e      	ldr	r2, [pc, #376]	; (8000ac8 <SAI_MspInit+0x4e4>)
 800094e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000952:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000956:	4b5c      	ldr	r3, [pc, #368]	; (8000ac8 <SAI_MspInit+0x4e4>)
 8000958:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800095c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000960:	61bb      	str	r3, [r7, #24]
 8000962:	69bb      	ldr	r3, [r7, #24]

    AUDIO_IN_SAI_PDMx_CLK_IN_ENABLE();
 8000964:	4b58      	ldr	r3, [pc, #352]	; (8000ac8 <SAI_MspInit+0x4e4>)
 8000966:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800096a:	4a57      	ldr	r2, [pc, #348]	; (8000ac8 <SAI_MspInit+0x4e4>)
 800096c:	f043 0310 	orr.w	r3, r3, #16
 8000970:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000974:	4b54      	ldr	r3, [pc, #336]	; (8000ac8 <SAI_MspInit+0x4e4>)
 8000976:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800097a:	f003 0310 	and.w	r3, r3, #16
 800097e:	617b      	str	r3, [r7, #20]
 8000980:	697b      	ldr	r3, [r7, #20]
    AUDIO_IN_SAI_PDMx_DATA_IN_ENABLE();
 8000982:	4b51      	ldr	r3, [pc, #324]	; (8000ac8 <SAI_MspInit+0x4e4>)
 8000984:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000988:	4a4f      	ldr	r2, [pc, #316]	; (8000ac8 <SAI_MspInit+0x4e4>)
 800098a:	f043 0304 	orr.w	r3, r3, #4
 800098e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000992:	4b4d      	ldr	r3, [pc, #308]	; (8000ac8 <SAI_MspInit+0x4e4>)
 8000994:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000998:	f003 0304 	and.w	r3, r3, #4
 800099c:	613b      	str	r3, [r7, #16]
 800099e:	693b      	ldr	r3, [r7, #16]

    gpio_init_structure.Pin = AUDIO_IN_SAI_PDMx_CLK_IN_PIN;
 80009a0:	2304      	movs	r3, #4
 80009a2:	647b      	str	r3, [r7, #68]	; 0x44
    gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80009a4:	2302      	movs	r3, #2
 80009a6:	64bb      	str	r3, [r7, #72]	; 0x48
    gpio_init_structure.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	64fb      	str	r3, [r7, #76]	; 0x4c
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80009ac:	2302      	movs	r3, #2
 80009ae:	653b      	str	r3, [r7, #80]	; 0x50
    gpio_init_structure.Alternate = AUDIO_IN_SAI_PDMx_DATA_CLK_AF;
 80009b0:	230a      	movs	r3, #10
 80009b2:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(AUDIO_IN_SAI_PDMx_CLK_IN_PORT, &gpio_init_structure);
 80009b4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80009b8:	4619      	mov	r1, r3
 80009ba:	4844      	ldr	r0, [pc, #272]	; (8000acc <SAI_MspInit+0x4e8>)
 80009bc:	f004 fed2 	bl	8005764 <HAL_GPIO_Init>

    gpio_init_structure.Pull = GPIO_PULLUP;
 80009c0:	2301      	movs	r3, #1
 80009c2:	64fb      	str	r3, [r7, #76]	; 0x4c
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80009c4:	2301      	movs	r3, #1
 80009c6:	653b      	str	r3, [r7, #80]	; 0x50
    gpio_init_structure.Pin = AUDIO_IN_SAI_PDMx_DATA_IN_PIN;
 80009c8:	2302      	movs	r3, #2
 80009ca:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(AUDIO_IN_SAI_PDMx_DATA_IN_PORT, &gpio_init_structure);
 80009cc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80009d0:	4619      	mov	r1, r3
 80009d2:	483f      	ldr	r0, [pc, #252]	; (8000ad0 <SAI_MspInit+0x4ec>)
 80009d4:	f004 fec6 	bl	8005764 <HAL_GPIO_Init>

    AUDIO_IN_SAI_PDMx_FS_SCK_ENABLE();
 80009d8:	4b3b      	ldr	r3, [pc, #236]	; (8000ac8 <SAI_MspInit+0x4e4>)
 80009da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009de:	4a3a      	ldr	r2, [pc, #232]	; (8000ac8 <SAI_MspInit+0x4e4>)
 80009e0:	f043 0310 	orr.w	r3, r3, #16
 80009e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009e8:	4b37      	ldr	r3, [pc, #220]	; (8000ac8 <SAI_MspInit+0x4e4>)
 80009ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ee:	f003 0310 	and.w	r3, r3, #16
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]

    /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
    gpio_init_structure.Pin = AUDIO_IN_SAI_PDMx_FS_PIN | AUDIO_IN_SAI_PDMx_SCK_PIN;
 80009f6:	2330      	movs	r3, #48	; 0x30
 80009f8:	647b      	str	r3, [r7, #68]	; 0x44
    gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80009fa:	2302      	movs	r3, #2
 80009fc:	64bb      	str	r3, [r7, #72]	; 0x48
    gpio_init_structure.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	64fb      	str	r3, [r7, #76]	; 0x4c
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a02:	2302      	movs	r3, #2
 8000a04:	653b      	str	r3, [r7, #80]	; 0x50
    gpio_init_structure.Alternate = AUDIO_IN_SAI_PDMx_FS_SCK_AF;
 8000a06:	2308      	movs	r3, #8
 8000a08:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(AUDIO_IN_SAI_PDMx_FS_SCK_GPIO_PORT, &gpio_init_structure);
 8000a0a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000a0e:	4619      	mov	r1, r3
 8000a10:	482e      	ldr	r0, [pc, #184]	; (8000acc <SAI_MspInit+0x4e8>)
 8000a12:	f004 fea7 	bl	8005764 <HAL_GPIO_Init>

    /* Enable the DMA clock */
    AUDIO_IN_SAI_PDMx_DMAx_CLK_ENABLE();
 8000a16:	4b2c      	ldr	r3, [pc, #176]	; (8000ac8 <SAI_MspInit+0x4e4>)
 8000a18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a1c:	4a2a      	ldr	r2, [pc, #168]	; (8000ac8 <SAI_MspInit+0x4e4>)
 8000a1e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a26:	4b28      	ldr	r3, [pc, #160]	; (8000ac8 <SAI_MspInit+0x4e4>)
 8000a28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a30:	60bb      	str	r3, [r7, #8]
 8000a32:	68bb      	ldr	r3, [r7, #8]

    /* Configure the hdma_sai_rx handle parameters */
    hdma_sai_rx.Init.Request             = AUDIO_IN_SAI_PDMx_DMAx_REQUEST;
 8000a34:	4b22      	ldr	r3, [pc, #136]	; (8000ac0 <SAI_MspInit+0x4dc>)
 8000a36:	220f      	movs	r2, #15
 8000a38:	605a      	str	r2, [r3, #4]
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8000a3a:	4b21      	ldr	r3, [pc, #132]	; (8000ac0 <SAI_MspInit+0x4dc>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	609a      	str	r2, [r3, #8]
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8000a40:	4b1f      	ldr	r3, [pc, #124]	; (8000ac0 <SAI_MspInit+0x4dc>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	60da      	str	r2, [r3, #12]
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8000a46:	4b1e      	ldr	r3, [pc, #120]	; (8000ac0 <SAI_MspInit+0x4dc>)
 8000a48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a4c:	611a      	str	r2, [r3, #16]
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAI_PDMx_DMAx_PERIPH_DATA_SIZE;
 8000a4e:	4b1c      	ldr	r3, [pc, #112]	; (8000ac0 <SAI_MspInit+0x4dc>)
 8000a50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a54:	615a      	str	r2, [r3, #20]
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAI_PDMx_DMAx_MEM_DATA_SIZE;
 8000a56:	4b1a      	ldr	r3, [pc, #104]	; (8000ac0 <SAI_MspInit+0x4dc>)
 8000a58:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a5c:	619a      	str	r2, [r3, #24]
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 8000a5e:	4b18      	ldr	r3, [pc, #96]	; (8000ac0 <SAI_MspInit+0x4dc>)
 8000a60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a64:	61da      	str	r2, [r3, #28]
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8000a66:	4b16      	ldr	r3, [pc, #88]	; (8000ac0 <SAI_MspInit+0x4dc>)
 8000a68:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000a6c:	621a      	str	r2, [r3, #32]
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8000a6e:	4b14      	ldr	r3, [pc, #80]	; (8000ac0 <SAI_MspInit+0x4dc>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8000a74:	4b12      	ldr	r3, [pc, #72]	; (8000ac0 <SAI_MspInit+0x4dc>)
 8000a76:	2203      	movs	r2, #3
 8000a78:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8000a7a:	4b11      	ldr	r3, [pc, #68]	; (8000ac0 <SAI_MspInit+0x4dc>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 8000a80:	4b0f      	ldr	r3, [pc, #60]	; (8000ac0 <SAI_MspInit+0x4dc>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	631a      	str	r2, [r3, #48]	; 0x30

    hdma_sai_rx.Instance = AUDIO_IN_SAI_PDMx_DMAx_STREAM;
 8000a86:	4b0e      	ldr	r3, [pc, #56]	; (8000ac0 <SAI_MspInit+0x4dc>)
 8000a88:	4a12      	ldr	r2, [pc, #72]	; (8000ad4 <SAI_MspInit+0x4f0>)
 8000a8a:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	4a0c      	ldr	r2, [pc, #48]	; (8000ac0 <SAI_MspInit+0x4dc>)
 8000a90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8000a94:	4a0a      	ldr	r2, [pc, #40]	; (8000ac0 <SAI_MspInit+0x4dc>)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	6393      	str	r3, [r2, #56]	; 0x38

    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_rx);
 8000a9a:	4809      	ldr	r0, [pc, #36]	; (8000ac0 <SAI_MspInit+0x4dc>)
 8000a9c:	f002 f8aa 	bl	8002bf4 <HAL_DMA_DeInit>

    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_rx);
 8000aa0:	4807      	ldr	r0, [pc, #28]	; (8000ac0 <SAI_MspInit+0x4dc>)
 8000aa2:	f001 fd4d 	bl	8002540 <HAL_DMA_Init>

    /* SAI DMA IRQ Channel configuration */
    HAL_NVIC_SetPriority(AUDIO_IN_SAI_PDMx_DMAx_IRQ, BSP_AUDIO_IN_IT_PRIORITY, 0);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	210f      	movs	r1, #15
 8000aaa:	2082      	movs	r0, #130	; 0x82
 8000aac:	f001 f9e9 	bl	8001e82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AUDIO_IN_SAI_PDMx_DMAx_IRQ);
 8000ab0:	2082      	movs	r0, #130	; 0x82
 8000ab2:	f001 fa00 	bl	8001eb6 <HAL_NVIC_EnableIRQ>
  }
}
 8000ab6:	bf00      	nop
 8000ab8:	3758      	adds	r7, #88	; 0x58
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	24000968 	.word	0x24000968
 8000ac4:	58005404 	.word	0x58005404
 8000ac8:	58024400 	.word	0x58024400
 8000acc:	58021000 	.word	0x58021000
 8000ad0:	58020800 	.word	0x58020800
 8000ad4:	5802541c 	.word	0x5802541c

08000ad8 <BSP_AUDIO_IN_Init>:
  * @param  Instance  Audio IN instance: 0 for SAI, 1 for SAI PDM and 2 for DFSDM
  * @param  AudioInit Init structure
  * @retval BSP status
  */
int32_t BSP_AUDIO_IN_Init(uint32_t Instance, BSP_AUDIO_Init_t* AudioInit)
{
 8000ad8:	b590      	push	{r4, r7, lr}
 8000ada:	b0a9      	sub	sp, #164	; 0xa4
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
 8000ae0:	6039      	str	r1, [r7, #0]
  uint32_t i;
  int32_t ret = BSP_ERROR_NONE;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if(Instance >= AUDIO_IN_INSTANCES_NBR)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	2b02      	cmp	r3, #2
 8000aec:	d904      	bls.n	8000af8 <BSP_AUDIO_IN_Init+0x20>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000aee:	f06f 0301 	mvn.w	r3, #1
 8000af2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000af6:	e2c8      	b.n	800108a <BSP_AUDIO_IN_Init+0x5b2>
  }
  else
  {
    /* Store the audio record context */
    Audio_In_Ctx[PDM].Device          = AudioInit->Device;
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4aa9      	ldr	r2, [pc, #676]	; (8000da4 <BSP_AUDIO_IN_Init+0x2cc>)
 8000afe:	6353      	str	r3, [r2, #52]	; 0x34
    Audio_In_Ctx[PDM].ChannelsNbr     = AudioInit->ChannelsNbr;
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	68db      	ldr	r3, [r3, #12]
 8000b04:	4aa7      	ldr	r2, [pc, #668]	; (8000da4 <BSP_AUDIO_IN_Init+0x2cc>)
 8000b06:	6413      	str	r3, [r2, #64]	; 0x40
    Audio_In_Ctx[PDM].SampleRate      = AudioInit->SampleRate;
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	4aa5      	ldr	r2, [pc, #660]	; (8000da4 <BSP_AUDIO_IN_Init+0x2cc>)
 8000b0e:	6393      	str	r3, [r2, #56]	; 0x38
    Audio_In_Ctx[PDM].BitsPerSample   = AudioInit->BitsPerSample;
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	689b      	ldr	r3, [r3, #8]
 8000b14:	4aa3      	ldr	r2, [pc, #652]	; (8000da4 <BSP_AUDIO_IN_Init+0x2cc>)
 8000b16:	63d3      	str	r3, [r2, #60]	; 0x3c
    Audio_In_Ctx[PDM].Volume          = AudioInit->Volume;
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	691b      	ldr	r3, [r3, #16]
 8000b1c:	4aa1      	ldr	r2, [pc, #644]	; (8000da4 <BSP_AUDIO_IN_Init+0x2cc>)
 8000b1e:	6513      	str	r3, [r2, #80]	; 0x50
    Audio_In_Ctx[PDM].State           = AUDIO_IN_STATE_RESET;
 8000b20:	4ba0      	ldr	r3, [pc, #640]	; (8000da4 <BSP_AUDIO_IN_Init+0x2cc>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	655a      	str	r2, [r3, #84]	; 0x54

    if(Instance == 0U)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	f040 80a8 	bne.w	8000c7e <BSP_AUDIO_IN_Init+0x1a6>
    {
      /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */
      if(MX_SAI1_ClockConfig(&haudio_in_sai[PDM], AudioInit->SampleRate) != HAL_OK)
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	4619      	mov	r1, r3
 8000b34:	489c      	ldr	r0, [pc, #624]	; (8000da8 <BSP_AUDIO_IN_Init+0x2d0>)
 8000b36:	f7ff fcf7 	bl	8000528 <MX_SAI1_ClockConfig>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d004      	beq.n	8000b4a <BSP_AUDIO_IN_Init+0x72>
      {
        ret = BSP_ERROR_CLOCK_FAILURE;
 8000b40:	f06f 0308 	mvn.w	r3, #8
 8000b44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000b48:	e29c      	b.n	8001084 <BSP_AUDIO_IN_Init+0x5ac>
      }
      else
      {
        haudio_in_sai[PDM].Instance    = AUDIO_IN_SAIx;
 8000b4a:	4b98      	ldr	r3, [pc, #608]	; (8000dac <BSP_AUDIO_IN_Init+0x2d4>)
 8000b4c:	4a98      	ldr	r2, [pc, #608]	; (8000db0 <BSP_AUDIO_IN_Init+0x2d8>)
 8000b4e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        haudio_out_sai.Instance   = AUDIO_OUT_SAIx;
 8000b52:	4b98      	ldr	r3, [pc, #608]	; (8000db4 <BSP_AUDIO_IN_Init+0x2dc>)
 8000b54:	4a98      	ldr	r2, [pc, #608]	; (8000db8 <BSP_AUDIO_IN_Init+0x2e0>)
 8000b56:	601a      	str	r2, [r3, #0]
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
          }
        }
#else
        SAI_MspInit(&haudio_in_sai[PDM]);
 8000b58:	4893      	ldr	r0, [pc, #588]	; (8000da8 <BSP_AUDIO_IN_Init+0x2d0>)
 8000b5a:	f7ff fd43 	bl	80005e4 <SAI_MspInit>
#endif /* (USE_HAL_SAI_REGISTER_CALLBACKS == 1) */
        if (ret == BSP_ERROR_NONE)
 8000b5e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	f040 828e 	bne.w	8001084 <BSP_AUDIO_IN_Init+0x5ac>
        {
          MX_SAI_Config mx_config;

          /* Prepare haudio_in_sai handle */
          mx_config.AudioFrequency        = Audio_In_Ctx[PDM].SampleRate;
 8000b68:	4b8e      	ldr	r3, [pc, #568]	; (8000da4 <BSP_AUDIO_IN_Init+0x2cc>)
 8000b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b6c:	60bb      	str	r3, [r7, #8]
          mx_config.AudioMode             = SAI_MODESLAVE_RX;
 8000b6e:	2303      	movs	r3, #3
 8000b70:	60fb      	str	r3, [r7, #12]
          mx_config.ClockStrobing         = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000b72:	2300      	movs	r3, #0
 8000b74:	61bb      	str	r3, [r7, #24]
          mx_config.MonoStereoMode        = (AudioInit->ChannelsNbr == 1U) ? SAI_MONOMODE : SAI_STEREOMODE;
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	68db      	ldr	r3, [r3, #12]
 8000b7a:	2b01      	cmp	r3, #1
 8000b7c:	d102      	bne.n	8000b84 <BSP_AUDIO_IN_Init+0xac>
 8000b7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b82:	e000      	b.n	8000b86 <BSP_AUDIO_IN_Init+0xae>
 8000b84:	2300      	movs	r3, #0
 8000b86:	617b      	str	r3, [r7, #20]
          mx_config.DataSize              = SAI_DATASIZE_16;
 8000b88:	2380      	movs	r3, #128	; 0x80
 8000b8a:	613b      	str	r3, [r7, #16]
          mx_config.FrameLength           = 128;
 8000b8c:	2380      	movs	r3, #128	; 0x80
 8000b8e:	62bb      	str	r3, [r7, #40]	; 0x28
          mx_config.ActiveFrameLength     = 64;
 8000b90:	2340      	movs	r3, #64	; 0x40
 8000b92:	62fb      	str	r3, [r7, #44]	; 0x2c
          mx_config.OutputDrive           = SAI_OUTPUTDRIVE_ENABLE;
 8000b94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b98:	623b      	str	r3, [r7, #32]
          mx_config.Synchro               = SAI_SYNCHRONOUS;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	61fb      	str	r3, [r7, #28]
          mx_config.SynchroExt            = SAI_SYNCEXT_DISABLE;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	627b      	str	r3, [r7, #36]	; 0x24
          mx_config.SlotActive            = SAI_SLOTACTIVE_0 | SAI_SLOTACTIVE_1;
 8000ba2:	2303      	movs	r3, #3
 8000ba4:	633b      	str	r3, [r7, #48]	; 0x30

          if(MX_SAI1_Block_A_Init(&haudio_in_sai[PDM], &mx_config) != HAL_OK)
 8000ba6:	f107 0308 	add.w	r3, r7, #8
 8000baa:	4619      	mov	r1, r3
 8000bac:	487e      	ldr	r0, [pc, #504]	; (8000da8 <BSP_AUDIO_IN_Init+0x2d0>)
 8000bae:	f000 fb65 	bl	800127c <MX_SAI1_Block_A_Init>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d004      	beq.n	8000bc2 <BSP_AUDIO_IN_Init+0xea>
          {
            /* Return BSP_ERROR_PERIPH_FAILURE when operations are not correctly done */
            ret = BSP_ERROR_PERIPH_FAILURE;
 8000bb8:	f06f 0303 	mvn.w	r3, #3
 8000bbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000bc0:	e010      	b.n	8000be4 <BSP_AUDIO_IN_Init+0x10c>
          }
          else
          {
            /* Prepare haudio_out_sai handle */
            mx_config.AudioMode         = SAI_MODEMASTER_TX;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60fb      	str	r3, [r7, #12]
            mx_config.Synchro           = SAI_ASYNCHRONOUS;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61fb      	str	r3, [r7, #28]

            if(MX_SAI1_Block_B_Init(&haudio_out_sai, &mx_config) != HAL_OK)
 8000bca:	f107 0308 	add.w	r3, r7, #8
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4878      	ldr	r0, [pc, #480]	; (8000db4 <BSP_AUDIO_IN_Init+0x2dc>)
 8000bd2:	f7ff fc19 	bl	8000408 <MX_SAI1_Block_B_Init>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d003      	beq.n	8000be4 <BSP_AUDIO_IN_Init+0x10c>
            {
              /* Return BSP_ERROR_PERIPH_FAILURE when operations are not correctly done */
              ret = BSP_ERROR_PERIPH_FAILURE;
 8000bdc:	f06f 0303 	mvn.w	r3, #3
 8000be0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
              }
            }
          }
#endif /* (USE_HAL_SAI_REGISTER_CALLBACKS == 1) */
#if (USE_AUDIO_CODEC_WM8994 == 1)
          if (ret == BSP_ERROR_NONE)
 8000be4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	f040 824b 	bne.w	8001084 <BSP_AUDIO_IN_Init+0x5ac>
          {
            WM8994_Init_t codec_init;

            /* Fill codec_init structure */
            codec_init.OutputDevice = (Audio_Out_Ctx[0].State == AUDIO_OUT_STATE_RESET) ? WM8994_OUT_NONE : WM8994_OUT_HEADPHONE;
 8000bee:	4b73      	ldr	r3, [pc, #460]	; (8000dbc <BSP_AUDIO_IN_Init+0x2e4>)
 8000bf0:	69db      	ldr	r3, [r3, #28]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d101      	bne.n	8000bfa <BSP_AUDIO_IN_Init+0x122>
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	e000      	b.n	8000bfc <BSP_AUDIO_IN_Init+0x124>
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            codec_init.Frequency    = AudioInit->SampleRate;
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
            codec_init.Resolution   = (AudioInit->BitsPerSample == AUDIO_RESOLUTION_32B) ? WM8994_RESOLUTION_32b : WM8994_RESOLUTION_16b;
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	689b      	ldr	r3, [r3, #8]
 8000c0c:	2b20      	cmp	r3, #32
 8000c0e:	d101      	bne.n	8000c14 <BSP_AUDIO_IN_Init+0x13c>
 8000c10:	2303      	movs	r3, #3
 8000c12:	e000      	b.n	8000c16 <BSP_AUDIO_IN_Init+0x13e>
 8000c14:	2300      	movs	r3, #0
 8000c16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
            codec_init.InputDevice  = (AudioInit->Device == AUDIO_IN_DEVICE_ANALOG_MIC) ? WM8994_IN_LINE1 : WM8994_IN_MIC2;
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d101      	bne.n	8000c26 <BSP_AUDIO_IN_Init+0x14e>
 8000c22:	2303      	movs	r3, #3
 8000c24:	e000      	b.n	8000c28 <BSP_AUDIO_IN_Init+0x150>
 8000c26:	2302      	movs	r3, #2
 8000c28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

            /* Convert volume before sending to the codec */
            codec_init.Volume       = VOLUME_IN_CONVERT(AudioInit->Volume);
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	691b      	ldr	r3, [r3, #16]
 8000c30:	2b63      	cmp	r3, #99	; 0x63
 8000c32:	d80c      	bhi.n	8000c4e <BSP_AUDIO_IN_Init+0x176>
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	691a      	ldr	r2, [r3, #16]
 8000c38:	4613      	mov	r3, r2
 8000c3a:	011b      	lsls	r3, r3, #4
 8000c3c:	1a9b      	subs	r3, r3, r2
 8000c3e:	011b      	lsls	r3, r3, #4
 8000c40:	1a9b      	subs	r3, r3, r2
 8000c42:	4a5f      	ldr	r2, [pc, #380]	; (8000dc0 <BSP_AUDIO_IN_Init+0x2e8>)
 8000c44:	fba2 2303 	umull	r2, r3, r2, r3
 8000c48:	095b      	lsrs	r3, r3, #5
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	e000      	b.n	8000c50 <BSP_AUDIO_IN_Init+0x178>
 8000c4e:	23ef      	movs	r3, #239	; 0xef
 8000c50:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
            /* Initialize the codec internal registers */
            if(Audio_Drv->Init(Audio_CompObj, &codec_init) < 0)
 8000c54:	4b5b      	ldr	r3, [pc, #364]	; (8000dc4 <BSP_AUDIO_IN_Init+0x2ec>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4a5b      	ldr	r2, [pc, #364]	; (8000dc8 <BSP_AUDIO_IN_Init+0x2f0>)
 8000c5c:	6812      	ldr	r2, [r2, #0]
 8000c5e:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8000c62:	4610      	mov	r0, r2
 8000c64:	4798      	blx	r3
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	da04      	bge.n	8000c76 <BSP_AUDIO_IN_Init+0x19e>
            {
              ret = BSP_ERROR_COMPONENT_FAILURE;
 8000c6c:	f06f 0304 	mvn.w	r3, #4
 8000c70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000c74:	e206      	b.n	8001084 <BSP_AUDIO_IN_Init+0x5ac>
            }
            else
            {
              /* Update audio in context state */
              Audio_In_Ctx[PDM].State = AUDIO_IN_STATE_STOP;
 8000c76:	4b4b      	ldr	r3, [pc, #300]	; (8000da4 <BSP_AUDIO_IN_Init+0x2cc>)
 8000c78:	2202      	movs	r2, #2
 8000c7a:	655a      	str	r2, [r3, #84]	; 0x54
 8000c7c:	e202      	b.n	8001084 <BSP_AUDIO_IN_Init+0x5ac>
          }
#endif  /*USE_AUDIO_CODEC_WM8994 == 1)*/
        }
      }
    }
    else if(Instance == 1)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2b01      	cmp	r3, #1
 8000c82:	d14f      	bne.n	8000d24 <BSP_AUDIO_IN_Init+0x24c>
    {
      if(Audio_In_Ctx[PDM].Device != AUDIO_IN_DEVICE_DIGITAL_MIC1)
 8000c84:	4b47      	ldr	r3, [pc, #284]	; (8000da4 <BSP_AUDIO_IN_Init+0x2cc>)
 8000c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c88:	2b10      	cmp	r3, #16
 8000c8a:	d004      	beq.n	8000c96 <BSP_AUDIO_IN_Init+0x1be>
      {
        ret = BSP_ERROR_WRONG_PARAM;
 8000c8c:	f06f 0301 	mvn.w	r3, #1
 8000c90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000c94:	e1f6      	b.n	8001084 <BSP_AUDIO_IN_Init+0x5ac>
      }
      else
      {
      /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */
      if(MX_SAI4_ClockConfig(&haudio_in_sai[PDM], AudioInit->SampleRate) != HAL_OK)
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4842      	ldr	r0, [pc, #264]	; (8000da8 <BSP_AUDIO_IN_Init+0x2d0>)
 8000c9e:	f000 fa29 	bl	80010f4 <MX_SAI4_ClockConfig>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d002      	beq.n	8000cae <BSP_AUDIO_IN_Init+0x1d6>
      {
        return BSP_ERROR_CLOCK_FAILURE;
 8000ca8:	f06f 0308 	mvn.w	r3, #8
 8000cac:	e1ef      	b.n	800108e <BSP_AUDIO_IN_Init+0x5b6>
      }
      haudio_in_sai[PDM].Instance = AUDIO_IN_SAI_PDMx;
 8000cae:	4b3f      	ldr	r3, [pc, #252]	; (8000dac <BSP_AUDIO_IN_Init+0x2d4>)
 8000cb0:	4a46      	ldr	r2, [pc, #280]	; (8000dcc <BSP_AUDIO_IN_Init+0x2f4>)
 8000cb2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        {
          return BSP_ERROR_PERIPH_FAILURE;
        }
      }
#else
      SAI_MspInit(&haudio_in_sai[PDM]);
 8000cb6:	483c      	ldr	r0, [pc, #240]	; (8000da8 <BSP_AUDIO_IN_Init+0x2d0>)
 8000cb8:	f7ff fc94 	bl	80005e4 <SAI_MspInit>
#endif /* (USE_HAL_SAI_REGISTER_CALLBACKS == 1U) */
      MX_SAI_Config mx_config;

      /* Prepare haudio_in_sai handle */
      mx_config.MonoStereoMode    = SAI_STEREOMODE;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	617b      	str	r3, [r7, #20]
      mx_config.DataSize          = SAI_DATASIZE_16;
 8000cc0:	2380      	movs	r3, #128	; 0x80
 8000cc2:	613b      	str	r3, [r7, #16]
      mx_config.FrameLength       = 16;
 8000cc4:	2310      	movs	r3, #16
 8000cc6:	62bb      	str	r3, [r7, #40]	; 0x28
      mx_config.ActiveFrameLength = 1;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	62fb      	str	r3, [r7, #44]	; 0x2c
      mx_config.OutputDrive       = SAI_OUTPUTDRIVE_DISABLE;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	623b      	str	r3, [r7, #32]
      mx_config.SlotActive        = SAI_SLOTACTIVE_0;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	633b      	str	r3, [r7, #48]	; 0x30
      mx_config.AudioFrequency    = Audio_In_Ctx[PDM].SampleRate*8;
 8000cd4:	4b33      	ldr	r3, [pc, #204]	; (8000da4 <BSP_AUDIO_IN_Init+0x2cc>)
 8000cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cd8:	00db      	lsls	r3, r3, #3
 8000cda:	60bb      	str	r3, [r7, #8]
      mx_config.AudioMode         = SAI_MODEMASTER_RX;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	60fb      	str	r3, [r7, #12]
      mx_config.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	61bb      	str	r3, [r7, #24]
      mx_config.Synchro           = SAI_ASYNCHRONOUS;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	61fb      	str	r3, [r7, #28]
      mx_config.SynchroExt        = SAI_SYNCEXT_DISABLE;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	627b      	str	r3, [r7, #36]	; 0x24

      if(MX_SAI4_Block_A_Init(&haudio_in_sai[PDM], &mx_config) != HAL_OK)
 8000cec:	f107 0308 	add.w	r3, r7, #8
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	482d      	ldr	r0, [pc, #180]	; (8000da8 <BSP_AUDIO_IN_Init+0x2d0>)
 8000cf4:	f000 fb4a 	bl	800138c <MX_SAI4_Block_A_Init>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d002      	beq.n	8000d04 <BSP_AUDIO_IN_Init+0x22c>
      {
        /* Return BSP_ERROR_PERIPH_FAILURE when operations are not correctly done */
        return BSP_ERROR_PERIPH_FAILURE;
 8000cfe:	f06f 0303 	mvn.w	r3, #3
 8000d02:	e1c4      	b.n	800108e <BSP_AUDIO_IN_Init+0x5b6>
      {
        return BSP_ERROR_PERIPH_FAILURE;
      }
#endif /* (USE_HAL_SAI_REGISTER_CALLBACKS == 1U) */
#if (USE_BSP_PDM_LIB_FEATURE > 0U)
      if(BSP_AUDIO_IN_PDMToPCM_Init(Instance, AudioInit->SampleRate, Audio_In_Ctx[PDM].ChannelsNbr, Audio_In_Ctx[PDM].ChannelsNbr) != BSP_ERROR_NONE)
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	6859      	ldr	r1, [r3, #4]
 8000d08:	4b26      	ldr	r3, [pc, #152]	; (8000da4 <BSP_AUDIO_IN_Init+0x2cc>)
 8000d0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d0c:	4b25      	ldr	r3, [pc, #148]	; (8000da4 <BSP_AUDIO_IN_Init+0x2cc>)
 8000d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d10:	6878      	ldr	r0, [r7, #4]
 8000d12:	f000 fbc1 	bl	8001498 <BSP_AUDIO_IN_PDMToPCM_Init>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	f000 81b3 	beq.w	8001084 <BSP_AUDIO_IN_Init+0x5ac>
      {
        return BSP_ERROR_NO_INIT;
 8000d1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d22:	e1b4      	b.n	800108e <BSP_AUDIO_IN_Init+0x5b6>
#endif
    }
    }
    else /* (Instance == 2U) */
    {
      DFSDM_Filter_TypeDef* FilterInstnace[DFSDM_MIC_NUMBER] = {AUDIO_DFSDMx_MIC1_FILTER, AUDIO_DFSDMx_MIC2_FILTER,AUDIO_DFSDMx_MIC3_FILTER,AUDIO_DFSDMx_MIC4_FILTER};
 8000d24:	4b2a      	ldr	r3, [pc, #168]	; (8000dd0 <BSP_AUDIO_IN_Init+0x2f8>)
 8000d26:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8000d2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d2c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      DFSDM_Channel_TypeDef* ChannelInstance[DFSDM_MIC_NUMBER] = {AUDIO_DFSDMx_MIC1_CHANNEL, AUDIO_DFSDMx_MIC2_CHANNEL,AUDIO_DFSDMx_MIC3_CHANNEL,AUDIO_DFSDMx_MIC4_CHANNEL};
 8000d30:	4b28      	ldr	r3, [pc, #160]	; (8000dd4 <BSP_AUDIO_IN_Init+0x2fc>)
 8000d32:	f107 0464 	add.w	r4, r7, #100	; 0x64
 8000d36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d38:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      uint32_t DigitalMicPins[DFSDM_MIC_NUMBER] = {DFSDM_CHANNEL_SAME_CHANNEL_PINS, DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS, DFSDM_CHANNEL_SAME_CHANNEL_PINS, DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS};
 8000d3c:	4b26      	ldr	r3, [pc, #152]	; (8000dd8 <BSP_AUDIO_IN_Init+0x300>)
 8000d3e:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000d42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      uint32_t DigitalMicType[DFSDM_MIC_NUMBER] = {DFSDM_CHANNEL_SPI_RISING, DFSDM_CHANNEL_SPI_FALLING, DFSDM_CHANNEL_SPI_RISING, DFSDM_CHANNEL_SPI_FALLING};
 8000d48:	4b24      	ldr	r3, [pc, #144]	; (8000ddc <BSP_AUDIO_IN_Init+0x304>)
 8000d4a:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8000d4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d50:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      uint32_t Channel4Filter[DFSDM_MIC_NUMBER] = {AUDIO_DFSDMx_MIC1_CHANNEL_FOR_FILTER, AUDIO_DFSDMx_MIC2_CHANNEL_FOR_FILTER,AUDIO_DFSDMx_MIC3_CHANNEL_FOR_FILTER,AUDIO_DFSDMx_MIC4_CHANNEL_FOR_FILTER};
 8000d54:	4b22      	ldr	r3, [pc, #136]	; (8000de0 <BSP_AUDIO_IN_Init+0x308>)
 8000d56:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8000d5a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d5c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      MX_DFSDM_Config dfsdm_config;

      /* PLL clock is set depending on the AudioFreq (44.1khz vs 48khz groups) */
      if(MX_DFSDM1_ClockConfig(&haudio_in_dfsdm_channel[0], AudioInit->SampleRate) != HAL_OK)
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	4619      	mov	r1, r3
 8000d66:	481f      	ldr	r0, [pc, #124]	; (8000de4 <BSP_AUDIO_IN_Init+0x30c>)
 8000d68:	f000 f99c 	bl	80010a4 <MX_DFSDM1_ClockConfig>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d003      	beq.n	8000d7a <BSP_AUDIO_IN_Init+0x2a2>
      {
        ret = BSP_ERROR_CLOCK_FAILURE;
 8000d72:	f06f 0308 	mvn.w	r3, #8
 8000d76:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
      }

      if(ret == BSP_ERROR_NONE)
 8000d7a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	f040 8180 	bne.w	8001084 <BSP_AUDIO_IN_Init+0x5ac>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
          }
        }
#else
        DFSDM_FilterMspInit(&haudio_in_dfsdm_filter[PDM]);
 8000d84:	4818      	ldr	r0, [pc, #96]	; (8000de8 <BSP_AUDIO_IN_Init+0x310>)
 8000d86:	f000 fd2d 	bl	80017e4 <DFSDM_FilterMspInit>
        DFSDM_ChannelMspInit(&haudio_in_dfsdm_channel[PDM]);
 8000d8a:	4818      	ldr	r0, [pc, #96]	; (8000dec <BSP_AUDIO_IN_Init+0x314>)
 8000d8c:	f000 fc86 	bl	800169c <DFSDM_ChannelMspInit>
#endif /* (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1) */
        if(ret == BSP_ERROR_NONE)
 8000d90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	f040 8175 	bne.w	8001084 <BSP_AUDIO_IN_Init+0x5ac>
        {
          for(i = 0; i < DFSDM_MIC_NUMBER; i ++)
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000da0:	e169      	b.n	8001076 <BSP_AUDIO_IN_Init+0x59e>
 8000da2:	bf00      	nop
 8000da4:	24000c64 	.word	0x24000c64
 8000da8:	240005d0 	.word	0x240005d0
 8000dac:	24000538 	.word	0x24000538
 8000db0:	40015804 	.word	0x40015804
 8000db4:	240004a0 	.word	0x240004a0
 8000db8:	40015824 	.word	0x40015824
 8000dbc:	24000c40 	.word	0x24000c40
 8000dc0:	51eb851f 	.word	0x51eb851f
 8000dc4:	24000668 	.word	0x24000668
 8000dc8:	2400049c 	.word	0x2400049c
 8000dcc:	58005404 	.word	0x58005404
 8000dd0:	0800c878 	.word	0x0800c878
 8000dd4:	0800c888 	.word	0x0800c888
 8000dd8:	0800c898 	.word	0x0800c898
 8000ddc:	0800c8a8 	.word	0x0800c8a8
 8000de0:	0800c8b8 	.word	0x0800c8b8
 8000de4:	24000a10 	.word	0x24000a10
 8000de8:	24000b44 	.word	0x24000b44
 8000dec:	24000a48 	.word	0x24000a48
          {
            dfsdm_config.FilterInstance  = FilterInstnace[i];
 8000df0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8000dfa:	4413      	add	r3, r2
 8000dfc:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8000e00:	60bb      	str	r3, [r7, #8]
            dfsdm_config.ChannelInstance = ChannelInstance[i];
 8000e02:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000e06:	009b      	lsls	r3, r3, #2
 8000e08:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8000e0c:	4413      	add	r3, r2
 8000e0e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8000e12:	61bb      	str	r3, [r7, #24]
            dfsdm_config.DigitalMicPins  = DigitalMicPins[i];
 8000e14:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8000e1e:	4413      	add	r3, r2
 8000e20:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8000e24:	61fb      	str	r3, [r7, #28]
            dfsdm_config.DigitalMicType  = DigitalMicType[i];
 8000e26:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8000e30:	4413      	add	r3, r2
 8000e32:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8000e36:	623b      	str	r3, [r7, #32]
            dfsdm_config.Channel4Filter  = Channel4Filter[i];
 8000e38:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8000e42:	4413      	add	r3, r2
 8000e44:	f853 3c6c 	ldr.w	r3, [r3, #-108]
 8000e48:	627b      	str	r3, [r7, #36]	; 0x24
            dfsdm_config.RegularTrigger  = DFSDM_FILTER_SW_TRIGGER;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	60fb      	str	r3, [r7, #12]
            /* MIC2, MIC3 and MIC4 should be synchronized to MIC1 if it's used */
            if((i >= 1U) && (i < 4U) && ((Audio_In_Ctx[PDM].Device & AUDIO_IN_DEVICE_DIGITAL_MIC1) == AUDIO_IN_DEVICE_DIGITAL_MIC1))
 8000e4e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d00b      	beq.n	8000e6e <BSP_AUDIO_IN_Init+0x396>
 8000e56:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000e5a:	2b03      	cmp	r3, #3
 8000e5c:	d807      	bhi.n	8000e6e <BSP_AUDIO_IN_Init+0x396>
 8000e5e:	4b8e      	ldr	r3, [pc, #568]	; (8001098 <BSP_AUDIO_IN_Init+0x5c0>)
 8000e60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e62:	f003 0310 	and.w	r3, r3, #16
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <BSP_AUDIO_IN_Init+0x396>
            {
              dfsdm_config.RegularTrigger = DFSDM_FILTER_SYNC_TRIGGER;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	60fb      	str	r3, [r7, #12]
            }
            dfsdm_config.SincOrder       = DFSDM_FILTER_ORDER(Audio_In_Ctx[PDM].SampleRate);
 8000e6e:	4b8a      	ldr	r3, [pc, #552]	; (8001098 <BSP_AUDIO_IN_Init+0x5c0>)
 8000e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e72:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8000e76:	d036      	beq.n	8000ee6 <BSP_AUDIO_IN_Init+0x40e>
 8000e78:	4b87      	ldr	r3, [pc, #540]	; (8001098 <BSP_AUDIO_IN_Init+0x5c0>)
 8000e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e7c:	f642 3211 	movw	r2, #11025	; 0x2b11
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d02d      	beq.n	8000ee0 <BSP_AUDIO_IN_Init+0x408>
 8000e84:	4b84      	ldr	r3, [pc, #528]	; (8001098 <BSP_AUDIO_IN_Init+0x5c0>)
 8000e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e88:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8000e8c:	d025      	beq.n	8000eda <BSP_AUDIO_IN_Init+0x402>
 8000e8e:	4b82      	ldr	r3, [pc, #520]	; (8001098 <BSP_AUDIO_IN_Init+0x5c0>)
 8000e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e92:	f245 6222 	movw	r2, #22050	; 0x5622
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d01c      	beq.n	8000ed4 <BSP_AUDIO_IN_Init+0x3fc>
 8000e9a:	4b7f      	ldr	r3, [pc, #508]	; (8001098 <BSP_AUDIO_IN_Init+0x5c0>)
 8000e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e9e:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8000ea2:	d014      	beq.n	8000ece <BSP_AUDIO_IN_Init+0x3f6>
 8000ea4:	4b7c      	ldr	r3, [pc, #496]	; (8001098 <BSP_AUDIO_IN_Init+0x5c0>)
 8000ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ea8:	f64a 4244 	movw	r2, #44100	; 0xac44
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d00b      	beq.n	8000ec8 <BSP_AUDIO_IN_Init+0x3f0>
 8000eb0:	4b79      	ldr	r3, [pc, #484]	; (8001098 <BSP_AUDIO_IN_Init+0x5c0>)
 8000eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000eb4:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d102      	bne.n	8000ec2 <BSP_AUDIO_IN_Init+0x3ea>
 8000ebc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000ec0:	e013      	b.n	8000eea <BSP_AUDIO_IN_Init+0x412>
 8000ec2:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8000ec6:	e010      	b.n	8000eea <BSP_AUDIO_IN_Init+0x412>
 8000ec8:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000ecc:	e00d      	b.n	8000eea <BSP_AUDIO_IN_Init+0x412>
 8000ece:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000ed2:	e00a      	b.n	8000eea <BSP_AUDIO_IN_Init+0x412>
 8000ed4:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000ed8:	e007      	b.n	8000eea <BSP_AUDIO_IN_Init+0x412>
 8000eda:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000ede:	e004      	b.n	8000eea <BSP_AUDIO_IN_Init+0x412>
 8000ee0:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000ee4:	e001      	b.n	8000eea <BSP_AUDIO_IN_Init+0x412>
 8000ee6:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000eea:	613b      	str	r3, [r7, #16]
            dfsdm_config.Oversampling    = DFSDM_OVER_SAMPLING(Audio_In_Ctx[PDM].SampleRate);
 8000eec:	4b6a      	ldr	r3, [pc, #424]	; (8001098 <BSP_AUDIO_IN_Init+0x5c0>)
 8000eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ef0:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8000ef4:	d030      	beq.n	8000f58 <BSP_AUDIO_IN_Init+0x480>
 8000ef6:	4b68      	ldr	r3, [pc, #416]	; (8001098 <BSP_AUDIO_IN_Init+0x5c0>)
 8000ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000efa:	f642 3211 	movw	r2, #11025	; 0x2b11
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d027      	beq.n	8000f52 <BSP_AUDIO_IN_Init+0x47a>
 8000f02:	4b65      	ldr	r3, [pc, #404]	; (8001098 <BSP_AUDIO_IN_Init+0x5c0>)
 8000f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f06:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8000f0a:	d020      	beq.n	8000f4e <BSP_AUDIO_IN_Init+0x476>
 8000f0c:	4b62      	ldr	r3, [pc, #392]	; (8001098 <BSP_AUDIO_IN_Init+0x5c0>)
 8000f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f10:	f245 6222 	movw	r2, #22050	; 0x5622
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d018      	beq.n	8000f4a <BSP_AUDIO_IN_Init+0x472>
 8000f18:	4b5f      	ldr	r3, [pc, #380]	; (8001098 <BSP_AUDIO_IN_Init+0x5c0>)
 8000f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f1c:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8000f20:	d011      	beq.n	8000f46 <BSP_AUDIO_IN_Init+0x46e>
 8000f22:	4b5d      	ldr	r3, [pc, #372]	; (8001098 <BSP_AUDIO_IN_Init+0x5c0>)
 8000f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f26:	f64a 4244 	movw	r2, #44100	; 0xac44
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d009      	beq.n	8000f42 <BSP_AUDIO_IN_Init+0x46a>
 8000f2e:	4b5a      	ldr	r3, [pc, #360]	; (8001098 <BSP_AUDIO_IN_Init+0x5c0>)
 8000f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f32:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d101      	bne.n	8000f3e <BSP_AUDIO_IN_Init+0x466>
 8000f3a:	2320      	movs	r3, #32
 8000f3c:	e00e      	b.n	8000f5c <BSP_AUDIO_IN_Init+0x484>
 8000f3e:	2310      	movs	r3, #16
 8000f40:	e00c      	b.n	8000f5c <BSP_AUDIO_IN_Init+0x484>
 8000f42:	2340      	movs	r3, #64	; 0x40
 8000f44:	e00a      	b.n	8000f5c <BSP_AUDIO_IN_Init+0x484>
 8000f46:	2340      	movs	r3, #64	; 0x40
 8000f48:	e008      	b.n	8000f5c <BSP_AUDIO_IN_Init+0x484>
 8000f4a:	2380      	movs	r3, #128	; 0x80
 8000f4c:	e006      	b.n	8000f5c <BSP_AUDIO_IN_Init+0x484>
 8000f4e:	2380      	movs	r3, #128	; 0x80
 8000f50:	e004      	b.n	8000f5c <BSP_AUDIO_IN_Init+0x484>
 8000f52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f56:	e001      	b.n	8000f5c <BSP_AUDIO_IN_Init+0x484>
 8000f58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f5c:	617b      	str	r3, [r7, #20]
            dfsdm_config.ClockDivider    = DFSDM_CLOCK_DIVIDER(Audio_In_Ctx[PDM].SampleRate);
 8000f5e:	4b4e      	ldr	r3, [pc, #312]	; (8001098 <BSP_AUDIO_IN_Init+0x5c0>)
 8000f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f62:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8000f66:	d027      	beq.n	8000fb8 <BSP_AUDIO_IN_Init+0x4e0>
 8000f68:	4b4b      	ldr	r3, [pc, #300]	; (8001098 <BSP_AUDIO_IN_Init+0x5c0>)
 8000f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f6c:	f642 3211 	movw	r2, #11025	; 0x2b11
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d01f      	beq.n	8000fb4 <BSP_AUDIO_IN_Init+0x4dc>
 8000f74:	4b48      	ldr	r3, [pc, #288]	; (8001098 <BSP_AUDIO_IN_Init+0x5c0>)
 8000f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f78:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8000f7c:	d018      	beq.n	8000fb0 <BSP_AUDIO_IN_Init+0x4d8>
 8000f7e:	4b46      	ldr	r3, [pc, #280]	; (8001098 <BSP_AUDIO_IN_Init+0x5c0>)
 8000f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f82:	f245 6222 	movw	r2, #22050	; 0x5622
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d010      	beq.n	8000fac <BSP_AUDIO_IN_Init+0x4d4>
 8000f8a:	4b43      	ldr	r3, [pc, #268]	; (8001098 <BSP_AUDIO_IN_Init+0x5c0>)
 8000f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f8e:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8000f92:	d009      	beq.n	8000fa8 <BSP_AUDIO_IN_Init+0x4d0>
 8000f94:	4b40      	ldr	r3, [pc, #256]	; (8001098 <BSP_AUDIO_IN_Init+0x5c0>)
 8000f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f98:	f64a 4244 	movw	r2, #44100	; 0xac44
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d101      	bne.n	8000fa4 <BSP_AUDIO_IN_Init+0x4cc>
 8000fa0:	2304      	movs	r3, #4
 8000fa2:	e00a      	b.n	8000fba <BSP_AUDIO_IN_Init+0x4e2>
 8000fa4:	2320      	movs	r3, #32
 8000fa6:	e008      	b.n	8000fba <BSP_AUDIO_IN_Init+0x4e2>
 8000fa8:	2318      	movs	r3, #24
 8000faa:	e006      	b.n	8000fba <BSP_AUDIO_IN_Init+0x4e2>
 8000fac:	2304      	movs	r3, #4
 8000fae:	e004      	b.n	8000fba <BSP_AUDIO_IN_Init+0x4e2>
 8000fb0:	2318      	movs	r3, #24
 8000fb2:	e002      	b.n	8000fba <BSP_AUDIO_IN_Init+0x4e2>
 8000fb4:	2304      	movs	r3, #4
 8000fb6:	e000      	b.n	8000fba <BSP_AUDIO_IN_Init+0x4e2>
 8000fb8:	2318      	movs	r3, #24
 8000fba:	62bb      	str	r3, [r7, #40]	; 0x28
            dfsdm_config.RightBitShift   = DFSDM_MIC_BIT_SHIFT(Audio_In_Ctx[PDM].SampleRate);
 8000fbc:	4b36      	ldr	r3, [pc, #216]	; (8001098 <BSP_AUDIO_IN_Init+0x5c0>)
 8000fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fc0:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8000fc4:	d027      	beq.n	8001016 <BSP_AUDIO_IN_Init+0x53e>
 8000fc6:	4b34      	ldr	r3, [pc, #208]	; (8001098 <BSP_AUDIO_IN_Init+0x5c0>)
 8000fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fca:	f642 3211 	movw	r2, #11025	; 0x2b11
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d01f      	beq.n	8001012 <BSP_AUDIO_IN_Init+0x53a>
 8000fd2:	4b31      	ldr	r3, [pc, #196]	; (8001098 <BSP_AUDIO_IN_Init+0x5c0>)
 8000fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fd6:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8000fda:	d018      	beq.n	800100e <BSP_AUDIO_IN_Init+0x536>
 8000fdc:	4b2e      	ldr	r3, [pc, #184]	; (8001098 <BSP_AUDIO_IN_Init+0x5c0>)
 8000fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fe0:	f245 6222 	movw	r2, #22050	; 0x5622
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d010      	beq.n	800100a <BSP_AUDIO_IN_Init+0x532>
 8000fe8:	4b2b      	ldr	r3, [pc, #172]	; (8001098 <BSP_AUDIO_IN_Init+0x5c0>)
 8000fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fec:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8000ff0:	d009      	beq.n	8001006 <BSP_AUDIO_IN_Init+0x52e>
 8000ff2:	4b29      	ldr	r3, [pc, #164]	; (8001098 <BSP_AUDIO_IN_Init+0x5c0>)
 8000ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ff6:	f64a 4244 	movw	r2, #44100	; 0xac44
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d101      	bne.n	8001002 <BSP_AUDIO_IN_Init+0x52a>
 8000ffe:	2300      	movs	r3, #0
 8001000:	e00a      	b.n	8001018 <BSP_AUDIO_IN_Init+0x540>
 8001002:	2302      	movs	r3, #2
 8001004:	e008      	b.n	8001018 <BSP_AUDIO_IN_Init+0x540>
 8001006:	2306      	movs	r3, #6
 8001008:	e006      	b.n	8001018 <BSP_AUDIO_IN_Init+0x540>
 800100a:	2303      	movs	r3, #3
 800100c:	e004      	b.n	8001018 <BSP_AUDIO_IN_Init+0x540>
 800100e:	2303      	movs	r3, #3
 8001010:	e002      	b.n	8001018 <BSP_AUDIO_IN_Init+0x540>
 8001012:	2306      	movs	r3, #6
 8001014:	e000      	b.n	8001018 <BSP_AUDIO_IN_Init+0x540>
 8001016:	2305      	movs	r3, #5
 8001018:	62fb      	str	r3, [r7, #44]	; 0x2c

            if(((AudioInit->Device >> i) & AUDIO_IN_DEVICE_DIGITAL_MIC1) == AUDIO_IN_DEVICE_DIGITAL_MIC1)
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001022:	fa22 f303 	lsr.w	r3, r2, r3
 8001026:	f003 0310 	and.w	r3, r3, #16
 800102a:	2b00      	cmp	r3, #0
 800102c:	d01a      	beq.n	8001064 <BSP_AUDIO_IN_Init+0x58c>
            {
              /* Default configuration of DFSDM filters and channels */
              if(MX_DFSDM1_Init(&haudio_in_dfsdm_filter[i], &haudio_in_dfsdm_channel[i], &dfsdm_config) != HAL_OK)
 800102e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001032:	2254      	movs	r2, #84	; 0x54
 8001034:	fb02 f303 	mul.w	r3, r2, r3
 8001038:	4a18      	ldr	r2, [pc, #96]	; (800109c <BSP_AUDIO_IN_Init+0x5c4>)
 800103a:	1898      	adds	r0, r3, r2
 800103c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8001040:	4613      	mov	r3, r2
 8001042:	00db      	lsls	r3, r3, #3
 8001044:	1a9b      	subs	r3, r3, r2
 8001046:	00db      	lsls	r3, r3, #3
 8001048:	4a15      	ldr	r2, [pc, #84]	; (80010a0 <BSP_AUDIO_IN_Init+0x5c8>)
 800104a:	4413      	add	r3, r2
 800104c:	f107 0208 	add.w	r2, r7, #8
 8001050:	4619      	mov	r1, r3
 8001052:	f000 f894 	bl	800117e <MX_DFSDM1_Init>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d003      	beq.n	8001064 <BSP_AUDIO_IN_Init+0x58c>
              {
                /* Return BSP_ERROR_PERIPH_FAILURE when operations are not correctly done */
                ret = BSP_ERROR_PERIPH_FAILURE;
 800105c:	f06f 0303 	mvn.w	r3, #3
 8001060:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                  ret = BSP_ERROR_PERIPH_FAILURE;
                }
              }
#endif /* (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1) */
            }
            if(ret != BSP_ERROR_NONE)
 8001064:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001068:	2b00      	cmp	r3, #0
 800106a:	d10a      	bne.n	8001082 <BSP_AUDIO_IN_Init+0x5aa>
          for(i = 0; i < DFSDM_MIC_NUMBER; i ++)
 800106c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001070:	3301      	adds	r3, #1
 8001072:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001076:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800107a:	2b03      	cmp	r3, #3
 800107c:	f67f aeb8 	bls.w	8000df0 <BSP_AUDIO_IN_Init+0x318>
 8001080:	e000      	b.n	8001084 <BSP_AUDIO_IN_Init+0x5ac>
            {
              break;
 8001082:	bf00      	nop
        }
      }
    }

    /* Update BSP AUDIO IN state */
    Audio_In_Ctx[PDM].State = AUDIO_IN_STATE_STOP;
 8001084:	4b04      	ldr	r3, [pc, #16]	; (8001098 <BSP_AUDIO_IN_Init+0x5c0>)
 8001086:	2202      	movs	r2, #2
 8001088:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Return BSP status */
  return ret;
 800108a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
}
 800108e:	4618      	mov	r0, r3
 8001090:	37a4      	adds	r7, #164	; 0xa4
 8001092:	46bd      	mov	sp, r7
 8001094:	bd90      	pop	{r4, r7, pc}
 8001096:	bf00      	nop
 8001098:	24000c64 	.word	0x24000c64
 800109c:	24000af0 	.word	0x24000af0
 80010a0:	24000a10 	.word	0x24000a10

080010a4 <MX_DFSDM1_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_IN_Init()
  *         Being __weak it can be overwritten by the application
  * @retval HAL_status
  */
__weak HAL_StatusTypeDef MX_DFSDM1_ClockConfig(DFSDM_Channel_HandleTypeDef *hDfsdmChannel, uint32_t SampleRate)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b0b0      	sub	sp, #192	; 0xc0
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hDfsdmChannel);

  HAL_StatusTypeDef ret = HAL_OK;
 80010ae:	2300      	movs	r3, #0
 80010b0:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;

  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 80010b4:	f107 0308 	add.w	r3, r7, #8
 80010b8:	4618      	mov	r0, r3
 80010ba:	f006 fb75 	bl	80077a8 <HAL_RCCEx_GetPeriphCLKConfig>

  /* Configure the PLL2 according to the requested audio frequency if not already done by other instances */
  if ((Audio_Out_Ctx[0].State == AUDIO_OUT_STATE_RESET) && (Audio_In_Ctx[0].State == AUDIO_IN_STATE_RESET))
 80010be:	4b0a      	ldr	r3, [pc, #40]	; (80010e8 <MX_DFSDM1_ClockConfig+0x44>)
 80010c0:	69db      	ldr	r3, [r3, #28]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d10a      	bne.n	80010dc <MX_DFSDM1_ClockConfig+0x38>
 80010c6:	4b09      	ldr	r3, [pc, #36]	; (80010ec <MX_DFSDM1_ClockConfig+0x48>)
 80010c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d106      	bne.n	80010dc <MX_DFSDM1_ClockConfig+0x38>
  {
    ret = MX_SAI1_ClockConfig(&haudio_in_sai[0], SampleRate);
 80010ce:	6839      	ldr	r1, [r7, #0]
 80010d0:	4807      	ldr	r0, [pc, #28]	; (80010f0 <MX_DFSDM1_ClockConfig+0x4c>)
 80010d2:	f7ff fa29 	bl	8000528 <MX_SAI1_ClockConfig>
 80010d6:	4603      	mov	r3, r0
 80010d8:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
  }

  return ret;
 80010dc:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	37c0      	adds	r7, #192	; 0xc0
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	24000c40 	.word	0x24000c40
 80010ec:	24000c64 	.word	0x24000c64
 80010f0:	24000538 	.word	0x24000538

080010f4 <MX_SAI4_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SAI4_ClockConfig(SAI_HandleTypeDef *hsai, uint32_t SampleRate)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b0b0      	sub	sp, #192	; 0xc0
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsai);

  HAL_StatusTypeDef ret = HAL_OK;
 80010fe:	2300      	movs	r3, #0
 8001100:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;
  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 8001104:	f107 0308 	add.w	r3, r7, #8
 8001108:	4618      	mov	r0, r3
 800110a:	f006 fb4d 	bl	80077a8 <HAL_RCCEx_GetPeriphCLKConfig>

  /* Set the PLL configuration according to the audio frequency */
  if((SampleRate == AUDIO_FREQUENCY_11K) || (SampleRate == AUDIO_FREQUENCY_22K) || (SampleRate == AUDIO_FREQUENCY_44K))
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	f642 3211 	movw	r2, #11025	; 0x2b11
 8001114:	4293      	cmp	r3, r2
 8001116:	d009      	beq.n	800112c <MX_SAI4_ClockConfig+0x38>
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	f245 6222 	movw	r2, #22050	; 0x5622
 800111e:	4293      	cmp	r3, r2
 8001120:	d004      	beq.n	800112c <MX_SAI4_ClockConfig+0x38>
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	f64a 4244 	movw	r2, #44100	; 0xac44
 8001128:	4293      	cmp	r3, r2
 800112a:	d105      	bne.n	8001138 <MX_SAI4_ClockConfig+0x44>
  {
    rcc_ex_clk_init_struct.PLL2.PLL2P = 24;
 800112c:	2318      	movs	r3, #24
 800112e:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.PLL2.PLL2N = 271;
 8001130:	f240 130f 	movw	r3, #271	; 0x10f
 8001134:	613b      	str	r3, [r7, #16]
 8001136:	e004      	b.n	8001142 <MX_SAI4_ClockConfig+0x4e>
  }
  else /* AUDIO_FREQUENCY_8K, AUDIO_FREQUENCY_16K, AUDIO_FREQUENCY_32K, AUDIO_FREQUENCY_48K, AUDIO_FREQUENCY_96K */
  {
    rcc_ex_clk_init_struct.PLL2.PLL2P = 7;
 8001138:	2307      	movs	r3, #7
 800113a:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.PLL2.PLL2N = 344;
 800113c:	f44f 73ac 	mov.w	r3, #344	; 0x158
 8001140:	613b      	str	r3, [r7, #16]
  }

  /* SAI clock config */
  rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI4A;
 8001142:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001146:	60bb      	str	r3, [r7, #8]
  rcc_ex_clk_init_struct.Sai4AClockSelection = RCC_SAI4ACLKSOURCE_PLL2;
 8001148:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800114c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  rcc_ex_clk_init_struct.PLL2.PLL2Q = 1;
 8001150:	2301      	movs	r3, #1
 8001152:	61bb      	str	r3, [r7, #24]
  rcc_ex_clk_init_struct.PLL2.PLL2R = 1;
 8001154:	2301      	movs	r3, #1
 8001156:	61fb      	str	r3, [r7, #28]
  rcc_ex_clk_init_struct.PLL2.PLL2M = 25;
 8001158:	2319      	movs	r3, #25
 800115a:	60fb      	str	r3, [r7, #12]
  if(HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct) != HAL_OK)
 800115c:	f107 0308 	add.w	r3, r7, #8
 8001160:	4618      	mov	r0, r3
 8001162:	f005 fc27 	bl	80069b4 <HAL_RCCEx_PeriphCLKConfig>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d002      	beq.n	8001172 <MX_SAI4_ClockConfig+0x7e>
  {
    ret = HAL_ERROR;
 800116c:	2301      	movs	r3, #1
 800116e:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
  }

  return ret;
 8001172:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
}
 8001176:	4618      	mov	r0, r3
 8001178:	37c0      	adds	r7, #192	; 0xc0
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <MX_DFSDM1_Init>:
  *           1MHZ < CLK(micro) < 3.2MHZ (TYP 2.4MHZ for MP34DT01TR)
  *         - Oversampling = CLK(input DFSDM)/(Clock_Divider * AudioFreq)
  * @retval HAL_status
  */
__weak HAL_StatusTypeDef MX_DFSDM1_Init(DFSDM_Filter_HandleTypeDef *hDfsdmFilter, DFSDM_Channel_HandleTypeDef *hDfsdmChannel, MX_DFSDM_Config *MXConfig)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	b084      	sub	sp, #16
 8001182:	af00      	add	r7, sp, #0
 8001184:	60f8      	str	r0, [r7, #12]
 8001186:	60b9      	str	r1, [r7, #8]
 8001188:	607a      	str	r2, [r7, #4]
  /* MIC filters  initialization */
  hDfsdmFilter->Instance                          = MXConfig->FilterInstance;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	601a      	str	r2, [r3, #0]
  hDfsdmFilter->Init.RegularParam.Trigger         = MXConfig->RegularTrigger;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	685a      	ldr	r2, [r3, #4]
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	605a      	str	r2, [r3, #4]
  hDfsdmFilter->Init.RegularParam.FastMode        = ENABLE;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	2201      	movs	r2, #1
 800119e:	721a      	strb	r2, [r3, #8]
  hDfsdmFilter->Init.RegularParam.DmaMode         = ENABLE;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	2201      	movs	r2, #1
 80011a4:	725a      	strb	r2, [r3, #9]
  hDfsdmFilter->Init.InjectedParam.Trigger        = DFSDM_FILTER_SW_TRIGGER;
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	2200      	movs	r2, #0
 80011aa:	60da      	str	r2, [r3, #12]
  hDfsdmFilter->Init.InjectedParam.ScanMode       = DISABLE;
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	2200      	movs	r2, #0
 80011b0:	741a      	strb	r2, [r3, #16]
  hDfsdmFilter->Init.InjectedParam.DmaMode        = DISABLE;
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	2200      	movs	r2, #0
 80011b6:	745a      	strb	r2, [r3, #17]
  hDfsdmFilter->Init.InjectedParam.ExtTrigger     = DFSDM_FILTER_EXT_TRIG_TIM8_TRGO;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011be:	615a      	str	r2, [r3, #20]
  hDfsdmFilter->Init.InjectedParam.ExtTriggerEdge = DFSDM_FILTER_EXT_TRIG_BOTH_EDGES;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 80011c6:	619a      	str	r2, [r3, #24]
  hDfsdmFilter->Init.FilterParam.SincOrder        = MXConfig->SincOrder;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	689a      	ldr	r2, [r3, #8]
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	61da      	str	r2, [r3, #28]
  hDfsdmFilter->Init.FilterParam.Oversampling     = MXConfig->Oversampling;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	68da      	ldr	r2, [r3, #12]
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	621a      	str	r2, [r3, #32]
  hDfsdmFilter->Init.FilterParam.IntOversampling  = 1;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	2201      	movs	r2, #1
 80011dc:	625a      	str	r2, [r3, #36]	; 0x24

  if(HAL_DFSDM_FilterInit(hDfsdmFilter) != HAL_OK)
 80011de:	68f8      	ldr	r0, [r7, #12]
 80011e0:	f001 f836 	bl	8002250 <HAL_DFSDM_FilterInit>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_DFSDM1_Init+0x70>
  {
    return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e042      	b.n	8001274 <MX_DFSDM1_Init+0xf6>
  }

  /* MIC channels initialization */
  hDfsdmChannel->Instance                      = MXConfig->ChannelInstance;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	691a      	ldr	r2, [r3, #16]
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	601a      	str	r2, [r3, #0]
  hDfsdmChannel->Init.OutputClock.Activation   = ENABLE;
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	2201      	movs	r2, #1
 80011fa:	711a      	strb	r2, [r3, #4]
  hDfsdmChannel->Init.OutputClock.Selection    = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001202:	609a      	str	r2, [r3, #8]
  hDfsdmChannel->Init.OutputClock.Divider      = MXConfig->ClockDivider;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6a1a      	ldr	r2, [r3, #32]
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	60da      	str	r2, [r3, #12]
  hDfsdmChannel->Init.Input.Multiplexer        = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	2200      	movs	r2, #0
 8001210:	611a      	str	r2, [r3, #16]
  hDfsdmChannel->Init.Input.DataPacking        = DFSDM_CHANNEL_STANDARD_MODE;
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	2200      	movs	r2, #0
 8001216:	615a      	str	r2, [r3, #20]
  hDfsdmChannel->Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	2204      	movs	r2, #4
 800121c:	621a      	str	r2, [r3, #32]
  hDfsdmChannel->Init.Awd.FilterOrder          = DFSDM_CHANNEL_SINC1_ORDER;
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001224:	625a      	str	r2, [r3, #36]	; 0x24
  hDfsdmChannel->Init.Awd.Oversampling         = 10;
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	220a      	movs	r2, #10
 800122a:	629a      	str	r2, [r3, #40]	; 0x28
  hDfsdmChannel->Init.Offset                   = 0;
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	2200      	movs	r2, #0
 8001230:	62da      	str	r2, [r3, #44]	; 0x2c
  hDfsdmChannel->Init.RightBitShift            = MXConfig->RightBitShift;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	631a      	str	r2, [r3, #48]	; 0x30
  hDfsdmChannel->Init.Input.Pins               = MXConfig->DigitalMicPins;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	695a      	ldr	r2, [r3, #20]
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	619a      	str	r2, [r3, #24]
  hDfsdmChannel->Init.SerialInterface.Type     = MXConfig->DigitalMicType;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	699a      	ldr	r2, [r3, #24]
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	61da      	str	r2, [r3, #28]

  if(HAL_OK != HAL_DFSDM_ChannelInit(hDfsdmChannel))
 800124a:	68b8      	ldr	r0, [r7, #8]
 800124c:	f000 ff38 	bl	80020c0 <HAL_DFSDM_ChannelInit>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_DFSDM1_Init+0xdc>
  {
    return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e00c      	b.n	8001274 <MX_DFSDM1_Init+0xf6>
  }

  /* Configure injected channel */
  if(HAL_DFSDM_FilterConfigRegChannel(hDfsdmFilter, MXConfig->Channel4Filter, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	69db      	ldr	r3, [r3, #28]
 800125e:	2201      	movs	r2, #1
 8001260:	4619      	mov	r1, r3
 8001262:	68f8      	ldr	r0, [r7, #12]
 8001264:	f001 f8da 	bl	800241c <HAL_DFSDM_FilterConfigRegChannel>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_DFSDM1_Init+0xf4>
  {
    return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e000      	b.n	8001274 <MX_DFSDM1_Init+0xf6>
  }

  return HAL_OK;
 8001272:	2300      	movs	r3, #0
}
 8001274:	4618      	mov	r0, r3
 8001276:	3710      	adds	r7, #16
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}

0800127c <MX_SAI1_Block_A_Init>:
  * @param  MXConfig SAI configuration structure
  * @note   Being __weak it can be overwritten by the application
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SAI1_Block_A_Init(SAI_HandleTypeDef* hsai, MX_SAI_Config *MXConfig)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8001286:	2300      	movs	r3, #0
 8001288:	73fb      	strb	r3, [r7, #15]

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(hsai);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001298:	601a      	str	r2, [r3, #0]

  /* Configure SAI1_Block_B */
  hsai->Init.AudioFrequency         = MXConfig->AudioFrequency;
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	621a      	str	r2, [r3, #32]
  hsai->Init.MonoStereoMode         = MXConfig->MonoStereoMode;
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	68da      	ldr	r2, [r3, #12]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai->Init.AudioMode              = MXConfig->AudioMode;
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685a      	ldr	r2, [r3, #4]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	605a      	str	r2, [r3, #4]
  hsai->Init.NoDivider              = SAI_MASTERDIVIDER_ENABLE;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2200      	movs	r2, #0
 80012b6:	619a      	str	r2, [r3, #24]
  hsai->Init.Protocol               = SAI_FREE_PROTOCOL;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2200      	movs	r2, #0
 80012bc:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.DataSize               = MXConfig->DataSize;
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	689a      	ldr	r2, [r3, #8]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->Init.FirstBit               = SAI_FIRSTBIT_MSB;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2200      	movs	r2, #0
 80012ca:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->Init.ClockStrobing          = MXConfig->ClockStrobing;
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	691a      	ldr	r2, [r3, #16]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	651a      	str	r2, [r3, #80]	; 0x50
  hsai->Init.Synchro                = MXConfig->Synchro;
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	695a      	ldr	r2, [r3, #20]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	609a      	str	r2, [r3, #8]
  hsai->Init.OutputDrive            = MXConfig->OutputDrive;
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	699a      	ldr	r2, [r3, #24]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	615a      	str	r2, [r3, #20]
  hsai->Init.FIFOThreshold          = SAI_FIFOTHRESHOLD_1QF;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2201      	movs	r2, #1
 80012e8:	61da      	str	r2, [r3, #28]
  hsai->Init.SynchroExt             = MXConfig->SynchroExt;
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	69da      	ldr	r2, [r3, #28]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	60da      	str	r2, [r3, #12]
  hsai->Init.CompandingMode         = SAI_NOCOMPANDING;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2200      	movs	r2, #0
 80012f6:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.TriState               = SAI_OUTPUT_RELEASED;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2210      	movs	r2, #16
 80012fc:	635a      	str	r2, [r3, #52]	; 0x34
  hsai->Init.Mckdiv                 = 0;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2200      	movs	r2, #0
 8001302:	625a      	str	r2, [r3, #36]	; 0x24
  hsai->Init.MckOutput              = SAI_MCK_OUTPUT_ENABLE;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800130a:	611a      	str	r2, [r3, #16]
  hsai->Init.MckOverSampling        = SAI_MCK_OVERSAMPLING_DISABLE;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2200      	movs	r2, #0
 8001310:	629a      	str	r2, [r3, #40]	; 0x28
  hsai->Init.PdmInit.Activation     = DISABLE;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2200      	movs	r2, #0
 8001316:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Configure SAI_Block_x Frame */
  hsai->FrameInit.FrameLength       = MXConfig->FrameLength;
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	6a1a      	ldr	r2, [r3, #32]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->FrameInit.ActiveFrameLength = MXConfig->ActiveFrameLength;
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->FrameInit.FSDefinition      = SAI_FS_CHANNEL_IDENTIFICATION;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001330:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity        = SAI_FS_ACTIVE_LOW;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2200      	movs	r2, #0
 8001336:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset          = SAI_FS_BEFOREFIRSTBIT;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800133e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure SAI Block_x Slot */
  hsai->SlotInit.FirstBitOffset     = 0;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2200      	movs	r2, #0
 8001344:	669a      	str	r2, [r3, #104]	; 0x68
  if ((MXConfig->DataSize == AUDIO_RESOLUTION_24B) || (MXConfig->DataSize == AUDIO_RESOLUTION_32B))
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	2b18      	cmp	r3, #24
 800134c:	d003      	beq.n	8001356 <MX_SAI1_Block_A_Init+0xda>
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	2b20      	cmp	r3, #32
 8001354:	d103      	bne.n	800135e <MX_SAI1_Block_A_Init+0xe2>
  {
    hsai->SlotInit.SlotSize         = SAI_SLOTSIZE_32B;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2280      	movs	r2, #128	; 0x80
 800135a:	66da      	str	r2, [r3, #108]	; 0x6c
 800135c:	e002      	b.n	8001364 <MX_SAI1_Block_A_Init+0xe8>
  }
  else
  {
    hsai->SlotInit.SlotSize         = SAI_SLOTSIZE_16B;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2240      	movs	r2, #64	; 0x40
 8001362:	66da      	str	r2, [r3, #108]	; 0x6c
  }
  hsai->SlotInit.SlotNumber         = 2;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2202      	movs	r2, #2
 8001368:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive        = MXConfig->SlotActive;
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	675a      	str	r2, [r3, #116]	; 0x74

  if(HAL_SAI_Init(hsai) != HAL_OK)
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f007 fd30 	bl	8008dd8 <HAL_SAI_Init>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_SAI1_Block_A_Init+0x106>
  {
    ret = HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001382:	7bfb      	ldrb	r3, [r7, #15]
}
 8001384:	4618      	mov	r0, r3
 8001386:	3710      	adds	r7, #16
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}

0800138c <MX_SAI4_Block_A_Init>:
  * @param  MXConfig SAI configuration structure
  * @note   Being __weak it can be overwritten by the application
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SAI4_Block_A_Init(SAI_HandleTypeDef* hsai, MX_SAI_Config *MXConfig)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8001396:	2300      	movs	r3, #0
 8001398:	73fb      	strb	r3, [r7, #15]

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(hsai);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80013a8:	601a      	str	r2, [r3, #0]

  /* Configure SAI4_Block_A */
  hsai->Init.AudioFrequency         = MXConfig->AudioFrequency;
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	621a      	str	r2, [r3, #32]
  hsai->Init.MonoStereoMode         = MXConfig->MonoStereoMode;
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	68da      	ldr	r2, [r3, #12]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai->Init.AudioMode              = MXConfig->AudioMode;
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685a      	ldr	r2, [r3, #4]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	605a      	str	r2, [r3, #4]
  hsai->Init.NoDivider              = SAI_MASTERDIVIDER_DISABLE;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80013c8:	619a      	str	r2, [r3, #24]
  hsai->Init.Protocol               = SAI_FREE_PROTOCOL;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2200      	movs	r2, #0
 80013ce:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.DataSize               = MXConfig->DataSize;
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	689a      	ldr	r2, [r3, #8]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->Init.FirstBit               = SAI_FIRSTBIT_LSB;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013de:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->Init.ClockStrobing          = MXConfig->ClockStrobing;
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	691a      	ldr	r2, [r3, #16]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	651a      	str	r2, [r3, #80]	; 0x50
  hsai->Init.Synchro                = MXConfig->Synchro;
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	695a      	ldr	r2, [r3, #20]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	609a      	str	r2, [r3, #8]
  hsai->Init.OutputDrive            = MXConfig->OutputDrive;
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	699a      	ldr	r2, [r3, #24]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	615a      	str	r2, [r3, #20]
  hsai->Init.FIFOThreshold          = SAI_FIFOTHRESHOLD_1QF;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2201      	movs	r2, #1
 80013fc:	61da      	str	r2, [r3, #28]
  hsai->Init.SynchroExt             = MXConfig->SynchroExt;
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	69da      	ldr	r2, [r3, #28]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	60da      	str	r2, [r3, #12]
  hsai->Init.CompandingMode         = SAI_NOCOMPANDING;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2200      	movs	r2, #0
 800140a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.TriState               = SAI_OUTPUT_RELEASED;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2210      	movs	r2, #16
 8001410:	635a      	str	r2, [r3, #52]	; 0x34
  hsai->Init.Mckdiv                 = 0;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2200      	movs	r2, #0
 8001416:	625a      	str	r2, [r3, #36]	; 0x24
  hsai->Init.PdmInit.Activation     = ENABLE;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2201      	movs	r2, #1
 800141c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai->Init.PdmInit.MicPairsNbr    = 1;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2201      	movs	r2, #1
 8001424:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai->Init.PdmInit.ClockEnable    = SAI_PDM_CLOCK1_ENABLE;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	f44f 7280 	mov.w	r2, #256	; 0x100
 800142c:	641a      	str	r2, [r3, #64]	; 0x40


  /* Configure SAI_Block_x Frame */
  hsai->FrameInit.FrameLength       = MXConfig->FrameLength;
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	6a1a      	ldr	r2, [r3, #32]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->FrameInit.ActiveFrameLength = MXConfig->ActiveFrameLength;
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->FrameInit.FSDefinition      = SAI_FS_STARTFRAME;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2200      	movs	r2, #0
 8001442:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity        = SAI_FS_ACTIVE_HIGH;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800144a:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset          = SAI_FS_FIRSTBIT;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2200      	movs	r2, #0
 8001450:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure SAI Block_x Slot */
  hsai->SlotInit.FirstBitOffset     = 0;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2200      	movs	r2, #0
 8001456:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotSize           = SAI_SLOTSIZE_DATASIZE;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2200      	movs	r2, #0
 800145c:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai->SlotInit.SlotNumber         = 1;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2201      	movs	r2, #1
 8001462:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive        = MXConfig->SlotActive;
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	675a      	str	r2, [r3, #116]	; 0x74

  if(HAL_SAI_Init(hsai) != HAL_OK)
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f007 fcb3 	bl	8008dd8 <HAL_SAI_Init>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_SAI4_Block_A_Init+0xf0>
  {
    ret = HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	73fb      	strb	r3, [r7, #15]
  }
/* Enable SAI peripheral */
  __HAL_SAI_ENABLE(hsai);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800148a:	601a      	str	r2, [r3, #0]

  return ret;
 800148c:	7bfb      	ldrb	r3, [r7, #15]
}
 800148e:	4618      	mov	r0, r3
 8001490:	3710      	adds	r7, #16
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
	...

08001498 <BSP_AUDIO_IN_PDMToPCM_Init>:
  * @param  ChnlNbrOut Number of desired output audio channels in the  resulting PCM buffer
  * @retval BSP status
  */

int32_t BSP_AUDIO_IN_PDMToPCM_Init(uint32_t Instance, uint32_t AudioFreq, uint32_t ChnlNbrIn, uint32_t ChnlNbrOut)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b086      	sub	sp, #24
 800149c:	af00      	add	r7, sp, #0
 800149e:	60f8      	str	r0, [r7, #12]
 80014a0:	60b9      	str	r1, [r7, #8]
 80014a2:	607a      	str	r2, [r7, #4]
 80014a4:	603b      	str	r3, [r7, #0]
  uint32_t index = 0;
 80014a6:	2300      	movs	r3, #0
 80014a8:	617b      	str	r3, [r7, #20]

  if(Instance != 1U)
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d002      	beq.n	80014b6 <BSP_AUDIO_IN_PDMToPCM_Init+0x1e>
  {
    return BSP_ERROR_WRONG_PARAM;
 80014b0:	f06f 0301 	mvn.w	r3, #1
 80014b4:	e085      	b.n	80015c2 <BSP_AUDIO_IN_PDMToPCM_Init+0x12a>
  }
  else
  {
    /* Enable CRC peripheral to unlock the PDM library */
    __HAL_RCC_CRC_CLK_ENABLE();
 80014b6:	4b45      	ldr	r3, [pc, #276]	; (80015cc <BSP_AUDIO_IN_PDMToPCM_Init+0x134>)
 80014b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014bc:	4a43      	ldr	r2, [pc, #268]	; (80015cc <BSP_AUDIO_IN_PDMToPCM_Init+0x134>)
 80014be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80014c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014c6:	4b41      	ldr	r3, [pc, #260]	; (80015cc <BSP_AUDIO_IN_PDMToPCM_Init+0x134>)
 80014c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014d0:	613b      	str	r3, [r7, #16]
 80014d2:	693b      	ldr	r3, [r7, #16]


    for(index = 0; index < ChnlNbrIn; index++)
 80014d4:	2300      	movs	r3, #0
 80014d6:	617b      	str	r3, [r7, #20]
 80014d8:	e06e      	b.n	80015b8 <BSP_AUDIO_IN_PDMToPCM_Init+0x120>
    {
      /* Init PDM filters */
      PDM_FilterHandler[index].bit_order  = PDM_FILTER_BIT_ORDER_MSB;
 80014da:	4a3d      	ldr	r2, [pc, #244]	; (80015d0 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	214c      	movs	r1, #76	; 0x4c
 80014e0:	fb01 f303 	mul.w	r3, r1, r3
 80014e4:	4413      	add	r3, r2
 80014e6:	2201      	movs	r2, #1
 80014e8:	801a      	strh	r2, [r3, #0]
      PDM_FilterHandler[index].endianness = PDM_FILTER_ENDIANNESS_LE;
 80014ea:	4a39      	ldr	r2, [pc, #228]	; (80015d0 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	214c      	movs	r1, #76	; 0x4c
 80014f0:	fb01 f303 	mul.w	r3, r1, r3
 80014f4:	4413      	add	r3, r2
 80014f6:	3302      	adds	r3, #2
 80014f8:	2200      	movs	r2, #0
 80014fa:	801a      	strh	r2, [r3, #0]
      PDM_FilterHandler[index].high_pass_tap = 2122358088;
 80014fc:	4a34      	ldr	r2, [pc, #208]	; (80015d0 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	214c      	movs	r1, #76	; 0x4c
 8001502:	fb01 f303 	mul.w	r3, r1, r3
 8001506:	4413      	add	r3, r2
 8001508:	3304      	adds	r3, #4
 800150a:	4a32      	ldr	r2, [pc, #200]	; (80015d4 <BSP_AUDIO_IN_PDMToPCM_Init+0x13c>)
 800150c:	601a      	str	r2, [r3, #0]
      PDM_FilterHandler[index].out_ptr_channels = ChnlNbrOut;
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	b298      	uxth	r0, r3
 8001512:	4a2f      	ldr	r2, [pc, #188]	; (80015d0 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	214c      	movs	r1, #76	; 0x4c
 8001518:	fb01 f303 	mul.w	r3, r1, r3
 800151c:	4413      	add	r3, r2
 800151e:	330a      	adds	r3, #10
 8001520:	4602      	mov	r2, r0
 8001522:	801a      	strh	r2, [r3, #0]
      PDM_FilterHandler[index].in_ptr_channels  = ChnlNbrIn;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	b298      	uxth	r0, r3
 8001528:	4a29      	ldr	r2, [pc, #164]	; (80015d0 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	214c      	movs	r1, #76	; 0x4c
 800152e:	fb01 f303 	mul.w	r3, r1, r3
 8001532:	4413      	add	r3, r2
 8001534:	3308      	adds	r3, #8
 8001536:	4602      	mov	r2, r0
 8001538:	801a      	strh	r2, [r3, #0]
      PDM_Filter_Init((PDM_Filter_Handler_t *)(&PDM_FilterHandler[index]));
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	224c      	movs	r2, #76	; 0x4c
 800153e:	fb02 f303 	mul.w	r3, r2, r3
 8001542:	4a23      	ldr	r2, [pc, #140]	; (80015d0 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 8001544:	4413      	add	r3, r2
 8001546:	4618      	mov	r0, r3
 8001548:	f00a fdc8 	bl	800c0dc <PDM_Filter_Init>

      /* PDM lib config phase */
      PDM_FilterConfig[index].output_samples_number = AudioFreq/1000;
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	4a22      	ldr	r2, [pc, #136]	; (80015d8 <BSP_AUDIO_IN_PDMToPCM_Init+0x140>)
 8001550:	fba2 2303 	umull	r2, r3, r2, r3
 8001554:	099b      	lsrs	r3, r3, #6
 8001556:	b298      	uxth	r0, r3
 8001558:	4920      	ldr	r1, [pc, #128]	; (80015dc <BSP_AUDIO_IN_PDMToPCM_Init+0x144>)
 800155a:	697a      	ldr	r2, [r7, #20]
 800155c:	4613      	mov	r3, r2
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	4413      	add	r3, r2
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	440b      	add	r3, r1
 8001566:	3302      	adds	r3, #2
 8001568:	4602      	mov	r2, r0
 800156a:	801a      	strh	r2, [r3, #0]
      PDM_FilterConfig[index].mic_gain = 24;
 800156c:	491b      	ldr	r1, [pc, #108]	; (80015dc <BSP_AUDIO_IN_PDMToPCM_Init+0x144>)
 800156e:	697a      	ldr	r2, [r7, #20]
 8001570:	4613      	mov	r3, r2
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	4413      	add	r3, r2
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	440b      	add	r3, r1
 800157a:	3304      	adds	r3, #4
 800157c:	2218      	movs	r2, #24
 800157e:	801a      	strh	r2, [r3, #0]
      PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 8001580:	4916      	ldr	r1, [pc, #88]	; (80015dc <BSP_AUDIO_IN_PDMToPCM_Init+0x144>)
 8001582:	697a      	ldr	r2, [r7, #20]
 8001584:	4613      	mov	r3, r2
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	4413      	add	r3, r2
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	440b      	add	r3, r1
 800158e:	2202      	movs	r2, #2
 8001590:	801a      	strh	r2, [r3, #0]
      PDM_Filter_setConfig((PDM_Filter_Handler_t *)&PDM_FilterHandler[index], &PDM_FilterConfig[index]);
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	224c      	movs	r2, #76	; 0x4c
 8001596:	fb02 f303 	mul.w	r3, r2, r3
 800159a:	4a0d      	ldr	r2, [pc, #52]	; (80015d0 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 800159c:	1898      	adds	r0, r3, r2
 800159e:	697a      	ldr	r2, [r7, #20]
 80015a0:	4613      	mov	r3, r2
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	4413      	add	r3, r2
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	4a0c      	ldr	r2, [pc, #48]	; (80015dc <BSP_AUDIO_IN_PDMToPCM_Init+0x144>)
 80015aa:	4413      	add	r3, r2
 80015ac:	4619      	mov	r1, r3
 80015ae:	f00a fe65 	bl	800c27c <PDM_Filter_setConfig>
    for(index = 0; index < ChnlNbrIn; index++)
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	3301      	adds	r3, #1
 80015b6:	617b      	str	r3, [r7, #20]
 80015b8:	697a      	ldr	r2, [r7, #20]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	429a      	cmp	r2, r3
 80015be:	d38c      	bcc.n	80014da <BSP_AUDIO_IN_PDMToPCM_Init+0x42>
    }
  }

  return BSP_ERROR_NONE;
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3718      	adds	r7, #24
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	58024400 	.word	0x58024400
 80015d0:	2400084c 	.word	0x2400084c
 80015d4:	7e809d48 	.word	0x7e809d48
 80015d8:	10624dd3 	.word	0x10624dd3
 80015dc:	240008e4 	.word	0x240008e4

080015e0 <BSP_AUDIO_IN_RecordPDM>:
  * @param  pbuf     Main buffer pointer for the recorded data storing
  * @param  Size     Size of the record buffer
  * @retval BSP status
  */
int32_t BSP_AUDIO_IN_RecordPDM(uint32_t Instance, uint8_t* pBuf, uint32_t NbrOfBytes)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80015ec:	2300      	movs	r3, #0
 80015ee:	617b      	str	r3, [r7, #20]

  if(Instance != 1U)
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d003      	beq.n	80015fe <BSP_AUDIO_IN_RecordPDM+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80015f6:	f06f 0301 	mvn.w	r3, #1
 80015fa:	617b      	str	r3, [r7, #20]
 80015fc:	e011      	b.n	8001622 <BSP_AUDIO_IN_RecordPDM+0x42>
  }
  else
  {
    /* Start the process receive DMA */
    if(HAL_SAI_Receive_DMA(&haudio_in_sai[PDM], (uint8_t*)pBuf, (uint16_t)(NbrOfBytes/(Audio_In_Ctx[PDM].BitsPerSample/8U))) != HAL_OK)
 80015fe:	4b0b      	ldr	r3, [pc, #44]	; (800162c <BSP_AUDIO_IN_RecordPDM+0x4c>)
 8001600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001602:	08db      	lsrs	r3, r3, #3
 8001604:	687a      	ldr	r2, [r7, #4]
 8001606:	fbb2 f3f3 	udiv	r3, r2, r3
 800160a:	b29b      	uxth	r3, r3
 800160c:	461a      	mov	r2, r3
 800160e:	68b9      	ldr	r1, [r7, #8]
 8001610:	4807      	ldr	r0, [pc, #28]	; (8001630 <BSP_AUDIO_IN_RecordPDM+0x50>)
 8001612:	f007 fe85 	bl	8009320 <HAL_SAI_Receive_DMA>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d002      	beq.n	8001622 <BSP_AUDIO_IN_RecordPDM+0x42>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800161c:	f06f 0303 	mvn.w	r3, #3
 8001620:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return BSP status */
  return ret;
 8001622:	697b      	ldr	r3, [r7, #20]
}
 8001624:	4618      	mov	r0, r3
 8001626:	3718      	adds	r7, #24
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	24000c64 	.word	0x24000c64
 8001630:	240005d0 	.word	0x240005d0

08001634 <HAL_SAI_RxHalfCpltCallback>:
  * @brief  Half reception complete callback.
  * @param  hsai   SAI handle.
  * @retval None
  */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsai);

  /* Call the record update function to get the first half */
  BSP_AUDIO_IN_HalfTransfer_CallBack(0);
 800163c:	2000      	movs	r0, #0
 800163e:	f000 f819 	bl	8001674 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 8001642:	bf00      	nop
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <HAL_SAI_RxCpltCallback>:
  * @brief  Reception complete callback.
  * @param  hsai   SAI handle.
  * @retval None
  */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b082      	sub	sp, #8
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsai);

  /* Call the record update function to get the second half */
  BSP_AUDIO_IN_TransferComplete_CallBack(0);
 8001652:	2000      	movs	r0, #0
 8001654:	f000 f804 	bl	8001660 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8001658:	bf00      	nop
 800165a:	3708      	adds	r7, #8
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}

08001660 <BSP_AUDIO_IN_TransferComplete_CallBack>:
/**
  * @brief  User callback when record buffer is filled.
  * @retval None
  */
__weak void BSP_AUDIO_IN_TransferComplete_CallBack(uint32_t Instance)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* This function should be implemented by the user application.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 8001668:	bf00      	nop
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <BSP_AUDIO_IN_HalfTransfer_CallBack>:
/**
  * @brief  Manages the DMA Half Transfer complete event.
  * @retval None
  */
__weak void BSP_AUDIO_IN_HalfTransfer_CallBack(uint32_t Instance)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* This function should be implemented by the user application.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 800167c:	bf00      	nop
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <BSP_AUDIO_IN_Error_CallBack>:
/**
  * @brief  Audio IN Error callback function.
  * @retval None
  */
__weak void BSP_AUDIO_IN_Error_CallBack(uint32_t Instance)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Instance);

  /* This function is called when an Interrupt due to transfer error on or peripheral
     error occurs. */
}
 8001690:	bf00      	nop
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <DFSDM_ChannelMspInit>:
  * @brief  Initialize the DFSDM channel MSP.
  * @param  hDfsdmChannel DFSDM Channel handle
  * @retval None
  */
static void DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef *hDfsdmChannel)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b08e      	sub	sp, #56	; 0x38
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hDfsdmChannel);

  /* DFSDM pins configuration: DFSDM_CKOUT, DMIC_DATIN pins ------------------*/
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a4:	2302      	movs	r3, #2
 80016a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a8:	2300      	movs	r3, #0
 80016aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ac:	2303      	movs	r3, #3
 80016ae:	633b      	str	r3, [r7, #48]	; 0x30

  /* Enable DFSDM clock */
  AUDIO_DFSDM1_CLK_ENABLE();
 80016b0:	4b49      	ldr	r3, [pc, #292]	; (80017d8 <DFSDM_ChannelMspInit+0x13c>)
 80016b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80016b6:	4a48      	ldr	r2, [pc, #288]	; (80017d8 <DFSDM_ChannelMspInit+0x13c>)
 80016b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80016bc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80016c0:	4b45      	ldr	r3, [pc, #276]	; (80017d8 <DFSDM_ChannelMspInit+0x13c>)
 80016c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80016c6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80016ca:	623b      	str	r3, [r7, #32]
 80016cc:	6a3b      	ldr	r3, [r7, #32]

  /* Enable GPIO clock */
  AUDIO_DFSDM1_CKOUT_GPIO_CLK_ENABLE();
 80016ce:	4b42      	ldr	r3, [pc, #264]	; (80017d8 <DFSDM_ChannelMspInit+0x13c>)
 80016d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016d4:	4a40      	ldr	r2, [pc, #256]	; (80017d8 <DFSDM_ChannelMspInit+0x13c>)
 80016d6:	f043 0310 	orr.w	r3, r3, #16
 80016da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016de:	4b3e      	ldr	r3, [pc, #248]	; (80017d8 <DFSDM_ChannelMspInit+0x13c>)
 80016e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016e4:	f003 0310 	and.w	r3, r3, #16
 80016e8:	61fb      	str	r3, [r7, #28]
 80016ea:	69fb      	ldr	r3, [r7, #28]
  AUDIO_DFSDMx_DATIN_MIC1_GPIO_CLK_ENABLE();
 80016ec:	4b3a      	ldr	r3, [pc, #232]	; (80017d8 <DFSDM_ChannelMspInit+0x13c>)
 80016ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016f2:	4a39      	ldr	r2, [pc, #228]	; (80017d8 <DFSDM_ChannelMspInit+0x13c>)
 80016f4:	f043 0310 	orr.w	r3, r3, #16
 80016f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016fc:	4b36      	ldr	r3, [pc, #216]	; (80017d8 <DFSDM_ChannelMspInit+0x13c>)
 80016fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001702:	f003 0310 	and.w	r3, r3, #16
 8001706:	61bb      	str	r3, [r7, #24]
 8001708:	69bb      	ldr	r3, [r7, #24]
  AUDIO_DFSDMx_DATIN_MIC2_GPIO_CLK_ENABLE();
 800170a:	4b33      	ldr	r3, [pc, #204]	; (80017d8 <DFSDM_ChannelMspInit+0x13c>)
 800170c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001710:	4a31      	ldr	r2, [pc, #196]	; (80017d8 <DFSDM_ChannelMspInit+0x13c>)
 8001712:	f043 0310 	orr.w	r3, r3, #16
 8001716:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800171a:	4b2f      	ldr	r3, [pc, #188]	; (80017d8 <DFSDM_ChannelMspInit+0x13c>)
 800171c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001720:	f003 0310 	and.w	r3, r3, #16
 8001724:	617b      	str	r3, [r7, #20]
 8001726:	697b      	ldr	r3, [r7, #20]
  AUDIO_DFSDMx_DATIN_MIC3_GPIO_CLK_ENABLE();
 8001728:	4b2b      	ldr	r3, [pc, #172]	; (80017d8 <DFSDM_ChannelMspInit+0x13c>)
 800172a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800172e:	4a2a      	ldr	r2, [pc, #168]	; (80017d8 <DFSDM_ChannelMspInit+0x13c>)
 8001730:	f043 0320 	orr.w	r3, r3, #32
 8001734:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001738:	4b27      	ldr	r3, [pc, #156]	; (80017d8 <DFSDM_ChannelMspInit+0x13c>)
 800173a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800173e:	f003 0320 	and.w	r3, r3, #32
 8001742:	613b      	str	r3, [r7, #16]
 8001744:	693b      	ldr	r3, [r7, #16]
  AUDIO_DFSDMx_DATIN_MIC4_GPIO_CLK_ENABLE();
 8001746:	4b24      	ldr	r3, [pc, #144]	; (80017d8 <DFSDM_ChannelMspInit+0x13c>)
 8001748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800174c:	4a22      	ldr	r2, [pc, #136]	; (80017d8 <DFSDM_ChannelMspInit+0x13c>)
 800174e:	f043 0320 	orr.w	r3, r3, #32
 8001752:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001756:	4b20      	ldr	r3, [pc, #128]	; (80017d8 <DFSDM_ChannelMspInit+0x13c>)
 8001758:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800175c:	f003 0320 	and.w	r3, r3, #32
 8001760:	60fb      	str	r3, [r7, #12]
 8001762:	68fb      	ldr	r3, [r7, #12]

  GPIO_InitStruct.Pin = AUDIO_DFSDM1_CKOUT_PIN;
 8001764:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001768:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Alternate = AUDIO_DFSDM1_CKOUT_AF;
 800176a:	2303      	movs	r3, #3
 800176c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(AUDIO_DFSDM1_CKOUT_GPIO_PORT, &GPIO_InitStruct);
 800176e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001772:	4619      	mov	r1, r3
 8001774:	4819      	ldr	r0, [pc, #100]	; (80017dc <DFSDM_ChannelMspInit+0x140>)
 8001776:	f003 fff5 	bl	8005764 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = AUDIO_DFSDMx_DATIN_MIC1_PIN;
 800177a:	2380      	movs	r3, #128	; 0x80
 800177c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Alternate = AUDIO_DFSDMx_DATIN_MIC1_AF;
 800177e:	2303      	movs	r3, #3
 8001780:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(AUDIO_DFSDMx_DATIN_MIC1_GPIO_PORT, &GPIO_InitStruct);
 8001782:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001786:	4619      	mov	r1, r3
 8001788:	4814      	ldr	r0, [pc, #80]	; (80017dc <DFSDM_ChannelMspInit+0x140>)
 800178a:	f003 ffeb 	bl	8005764 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = AUDIO_DFSDMx_DATIN_MIC2_PIN;
 800178e:	2380      	movs	r3, #128	; 0x80
 8001790:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Alternate = AUDIO_DFSDMx_DATIN_MIC2_AF;
 8001792:	2303      	movs	r3, #3
 8001794:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(AUDIO_DFSDMx_DATIN_MIC2_GPIO_PORT, &GPIO_InitStruct);
 8001796:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800179a:	4619      	mov	r1, r3
 800179c:	480f      	ldr	r0, [pc, #60]	; (80017dc <DFSDM_ChannelMspInit+0x140>)
 800179e:	f003 ffe1 	bl	8005764 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = AUDIO_DFSDMx_DATIN_MIC3_PIN;
 80017a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Alternate = AUDIO_DFSDMx_DATIN_MIC3_AF;
 80017a8:	2303      	movs	r3, #3
 80017aa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(AUDIO_DFSDMx_DATIN_MIC3_GPIO_PORT, &GPIO_InitStruct);
 80017ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017b0:	4619      	mov	r1, r3
 80017b2:	480b      	ldr	r0, [pc, #44]	; (80017e0 <DFSDM_ChannelMspInit+0x144>)
 80017b4:	f003 ffd6 	bl	8005764 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = AUDIO_DFSDMx_DATIN_MIC4_PIN;
 80017b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Alternate = AUDIO_DFSDMx_DATIN_MIC4_AF;
 80017be:	2303      	movs	r3, #3
 80017c0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(AUDIO_DFSDMx_DATIN_MIC4_GPIO_PORT, &GPIO_InitStruct);
 80017c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017c6:	4619      	mov	r1, r3
 80017c8:	4805      	ldr	r0, [pc, #20]	; (80017e0 <DFSDM_ChannelMspInit+0x144>)
 80017ca:	f003 ffcb 	bl	8005764 <HAL_GPIO_Init>

}
 80017ce:	bf00      	nop
 80017d0:	3738      	adds	r7, #56	; 0x38
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	58024400 	.word	0x58024400
 80017dc:	58021000 	.word	0x58021000
 80017e0:	58021400 	.word	0x58021400

080017e4 <DFSDM_FilterMspInit>:
  * @brief  Initialize the DFSDM filter MSP.
  * @param  hDfsdmFilter DFSDM Filter handle
  * @retval None
  */
static void DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef *hDfsdmFilter)
{
 80017e4:	b590      	push	{r4, r7, lr}
 80017e6:	b0a1      	sub	sp, #132	; 0x84
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  uint32_t i, mic_num, mic_init[DFSDM_MIC_NUMBER] = {0};
 80017ec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	60da      	str	r2, [r3, #12]
  IRQn_Type AUDIO_DFSDM_DMAx_MIC_IRQHandler[DFSDM_MIC_NUMBER] = {AUDIO_DFSDMx_DMAx_MIC1_IRQ, AUDIO_DFSDMx_DMAx_MIC2_IRQ, AUDIO_DFSDMx_DMAx_MIC3_IRQ, AUDIO_DFSDMx_DMAx_MIC4_IRQ};
 80017fa:	4a61      	ldr	r2, [pc, #388]	; (8001980 <DFSDM_FilterMspInit+0x19c>)
 80017fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001800:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001804:	e883 0003 	stmia.w	r3, {r0, r1}
  DMA_Stream_TypeDef* AUDIO_DFSDMx_DMAx_MIC_STREAM[DFSDM_MIC_NUMBER] = {AUDIO_DFSDMx_DMAx_MIC1_STREAM, AUDIO_DFSDMx_DMAx_MIC2_STREAM, AUDIO_DFSDMx_DMAx_MIC3_STREAM, AUDIO_DFSDMx_DMAx_MIC4_STREAM};
 8001808:	4b5e      	ldr	r3, [pc, #376]	; (8001984 <DFSDM_FilterMspInit+0x1a0>)
 800180a:	f107 0420 	add.w	r4, r7, #32
 800180e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001810:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t AUDIO_DFSDMx_DMAx_MIC_REQUEST[DFSDM_MIC_NUMBER] = {AUDIO_DFSDMx_DMAx_MIC1_REQUEST, AUDIO_DFSDMx_DMAx_MIC2_REQUEST, AUDIO_DFSDMx_DMAx_MIC3_REQUEST, AUDIO_DFSDMx_DMAx_MIC4_REQUEST};
 8001814:	4b5c      	ldr	r3, [pc, #368]	; (8001988 <DFSDM_FilterMspInit+0x1a4>)
 8001816:	f107 0410 	add.w	r4, r7, #16
 800181a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800181c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hDfsdmFilter);

  /* Enable DFSDM clock */
  AUDIO_DFSDM1_CLK_ENABLE();
 8001820:	4b5a      	ldr	r3, [pc, #360]	; (800198c <DFSDM_FilterMspInit+0x1a8>)
 8001822:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001826:	4a59      	ldr	r2, [pc, #356]	; (800198c <DFSDM_FilterMspInit+0x1a8>)
 8001828:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800182c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001830:	4b56      	ldr	r3, [pc, #344]	; (800198c <DFSDM_FilterMspInit+0x1a8>)
 8001832:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001836:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DMA clock */
  AUDIO_DFSDM1_DMAx_CLK_ENABLE();
 800183e:	4b53      	ldr	r3, [pc, #332]	; (800198c <DFSDM_FilterMspInit+0x1a8>)
 8001840:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001844:	4a51      	ldr	r2, [pc, #324]	; (800198c <DFSDM_FilterMspInit+0x1a8>)
 8001846:	f043 0302 	orr.w	r3, r3, #2
 800184a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800184e:	4b4f      	ldr	r3, [pc, #316]	; (800198c <DFSDM_FilterMspInit+0x1a8>)
 8001850:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001854:	f003 0302 	and.w	r3, r3, #2
 8001858:	60bb      	str	r3, [r7, #8]
 800185a:	68bb      	ldr	r3, [r7, #8]

  for(i = 0; i < DFSDM_MIC_NUMBER; i++)
 800185c:	2300      	movs	r3, #0
 800185e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001860:	e194      	b.n	8001b8c <DFSDM_FilterMspInit+0x3a8>
 8001862:	2310      	movs	r3, #16
 8001864:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001866:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001868:	fa93 f3a3 	rbit	r3, r3
 800186c:	66fb      	str	r3, [r7, #108]	; 0x6c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800186e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001870:	677b      	str	r3, [r7, #116]	; 0x74
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001872:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001874:	2b00      	cmp	r3, #0
 8001876:	d101      	bne.n	800187c <DFSDM_FilterMspInit+0x98>
  {
    return 32U;
 8001878:	2320      	movs	r3, #32
 800187a:	e003      	b.n	8001884 <DFSDM_FilterMspInit+0xa0>
  }
  return __builtin_clz(value);
 800187c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800187e:	fab3 f383 	clz	r3, r3
 8001882:	b2db      	uxtb	r3, r3
  {
    if((mic_init[POS_VAL(AUDIO_IN_DEVICE_DIGITAL_MIC1)] != 1U) && ((Audio_In_Ctx[2].Device & AUDIO_IN_DEVICE_DIGITAL_MIC1) == AUDIO_IN_DEVICE_DIGITAL_MIC1))
 8001884:	3b04      	subs	r3, #4
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800188c:	4413      	add	r3, r2
 800188e:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8001892:	2b01      	cmp	r3, #1
 8001894:	d010      	beq.n	80018b8 <DFSDM_FilterMspInit+0xd4>
 8001896:	4b3e      	ldr	r3, [pc, #248]	; (8001990 <DFSDM_FilterMspInit+0x1ac>)
 8001898:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800189a:	f003 0310 	and.w	r3, r3, #16
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d00a      	beq.n	80018b8 <DFSDM_FilterMspInit+0xd4>
    {
      mic_num = 0U;
 80018a2:	2300      	movs	r3, #0
 80018a4:	67bb      	str	r3, [r7, #120]	; 0x78
      mic_init[mic_num] = 1;
 80018a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80018ae:	4413      	add	r3, r2
 80018b0:	2201      	movs	r2, #1
 80018b2:	f843 2c48 	str.w	r2, [r3, #-72]
 80018b6:	e08c      	b.n	80019d2 <DFSDM_FilterMspInit+0x1ee>
 80018b8:	2320      	movs	r3, #32
 80018ba:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80018be:	fa93 f3a3 	rbit	r3, r3
 80018c2:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80018c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80018c6:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80018c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d101      	bne.n	80018d2 <DFSDM_FilterMspInit+0xee>
    return 32U;
 80018ce:	2320      	movs	r3, #32
 80018d0:	e003      	b.n	80018da <DFSDM_FilterMspInit+0xf6>
  return __builtin_clz(value);
 80018d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80018d4:	fab3 f383 	clz	r3, r3
 80018d8:	b2db      	uxtb	r3, r3
    }
    else if((mic_init[POS_VAL(AUDIO_IN_DEVICE_DIGITAL_MIC2)] != 1U) && ((Audio_In_Ctx[2].Device & AUDIO_IN_DEVICE_DIGITAL_MIC2) == AUDIO_IN_DEVICE_DIGITAL_MIC2))
 80018da:	3b04      	subs	r3, #4
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80018e2:	4413      	add	r3, r2
 80018e4:	f853 3c48 	ldr.w	r3, [r3, #-72]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d010      	beq.n	800190e <DFSDM_FilterMspInit+0x12a>
 80018ec:	4b28      	ldr	r3, [pc, #160]	; (8001990 <DFSDM_FilterMspInit+0x1ac>)
 80018ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80018f0:	f003 0320 	and.w	r3, r3, #32
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d00a      	beq.n	800190e <DFSDM_FilterMspInit+0x12a>
    {
      mic_num = 1U;
 80018f8:	2301      	movs	r3, #1
 80018fa:	67bb      	str	r3, [r7, #120]	; 0x78
      mic_init[mic_num] = 1;
 80018fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001904:	4413      	add	r3, r2
 8001906:	2201      	movs	r2, #1
 8001908:	f843 2c48 	str.w	r2, [r3, #-72]
 800190c:	e061      	b.n	80019d2 <DFSDM_FilterMspInit+0x1ee>
 800190e:	2340      	movs	r3, #64	; 0x40
 8001910:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001912:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001914:	fa93 f3a3 	rbit	r3, r3
 8001918:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800191a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800191c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800191e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001920:	2b00      	cmp	r3, #0
 8001922:	d101      	bne.n	8001928 <DFSDM_FilterMspInit+0x144>
    return 32U;
 8001924:	2320      	movs	r3, #32
 8001926:	e003      	b.n	8001930 <DFSDM_FilterMspInit+0x14c>
  return __builtin_clz(value);
 8001928:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800192a:	fab3 f383 	clz	r3, r3
 800192e:	b2db      	uxtb	r3, r3
    }
    else if((mic_init[POS_VAL(AUDIO_IN_DEVICE_DIGITAL_MIC3)] != 1U) &&((Audio_In_Ctx[2].Device & AUDIO_IN_DEVICE_DIGITAL_MIC3) == AUDIO_IN_DEVICE_DIGITAL_MIC3))
 8001930:	3b04      	subs	r3, #4
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001938:	4413      	add	r3, r2
 800193a:	f853 3c48 	ldr.w	r3, [r3, #-72]
 800193e:	2b01      	cmp	r3, #1
 8001940:	d010      	beq.n	8001964 <DFSDM_FilterMspInit+0x180>
 8001942:	4b13      	ldr	r3, [pc, #76]	; (8001990 <DFSDM_FilterMspInit+0x1ac>)
 8001944:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800194a:	2b00      	cmp	r3, #0
 800194c:	d00a      	beq.n	8001964 <DFSDM_FilterMspInit+0x180>
    {
      mic_num = 2U;
 800194e:	2302      	movs	r3, #2
 8001950:	67bb      	str	r3, [r7, #120]	; 0x78
      mic_init[mic_num] = 1;
 8001952:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800195a:	4413      	add	r3, r2
 800195c:	2201      	movs	r2, #1
 800195e:	f843 2c48 	str.w	r2, [r3, #-72]
 8001962:	e036      	b.n	80019d2 <DFSDM_FilterMspInit+0x1ee>
 8001964:	2380      	movs	r3, #128	; 0x80
 8001966:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001968:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800196a:	fa93 f3a3 	rbit	r3, r3
 800196e:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8001970:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001972:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8001974:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001976:	2b00      	cmp	r3, #0
 8001978:	d10c      	bne.n	8001994 <DFSDM_FilterMspInit+0x1b0>
    return 32U;
 800197a:	2320      	movs	r3, #32
 800197c:	e00e      	b.n	800199c <DFSDM_FilterMspInit+0x1b8>
 800197e:	bf00      	nop
 8001980:	0800c8c8 	.word	0x0800c8c8
 8001984:	0800c8d0 	.word	0x0800c8d0
 8001988:	0800c8e0 	.word	0x0800c8e0
 800198c:	58024400 	.word	0x58024400
 8001990:	24000c64 	.word	0x24000c64
  return __builtin_clz(value);
 8001994:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001996:	fab3 f383 	clz	r3, r3
 800199a:	b2db      	uxtb	r3, r3
    }
    else if((mic_init[POS_VAL(AUDIO_IN_DEVICE_DIGITAL_MIC4)] != 1U) && ((Audio_In_Ctx[2].Device & AUDIO_IN_DEVICE_DIGITAL_MIC4) == AUDIO_IN_DEVICE_DIGITAL_MIC4))
 800199c:	3b04      	subs	r3, #4
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80019a4:	4413      	add	r3, r2
 80019a6:	f853 3c48 	ldr.w	r3, [r3, #-72]
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	f000 80f2 	beq.w	8001b94 <DFSDM_FilterMspInit+0x3b0>
 80019b0:	4b7a      	ldr	r3, [pc, #488]	; (8001b9c <DFSDM_FilterMspInit+0x3b8>)
 80019b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80019b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	f000 80eb 	beq.w	8001b94 <DFSDM_FilterMspInit+0x3b0>
    {
      mic_num = 3U;
 80019be:	2303      	movs	r3, #3
 80019c0:	67bb      	str	r3, [r7, #120]	; 0x78
      mic_init[mic_num] = 1;
 80019c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80019ca:	4413      	add	r3, r2
 80019cc:	2201      	movs	r2, #1
 80019ce:	f843 2c48 	str.w	r2, [r3, #-72]
    else
    {
      break;
    }
    /* Configure the hDmaDfsdm[i] handle parameters */
    hDmaDfsdm[mic_num].Init.Request             = AUDIO_DFSDMx_DMAx_MIC_REQUEST[mic_num];
 80019d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80019da:	4413      	add	r3, r2
 80019dc:	f853 1c70 	ldr.w	r1, [r3, #-112]
 80019e0:	486f      	ldr	r0, [pc, #444]	; (8001ba0 <DFSDM_FilterMspInit+0x3bc>)
 80019e2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80019e4:	4613      	mov	r3, r2
 80019e6:	011b      	lsls	r3, r3, #4
 80019e8:	1a9b      	subs	r3, r3, r2
 80019ea:	00db      	lsls	r3, r3, #3
 80019ec:	4403      	add	r3, r0
 80019ee:	3304      	adds	r3, #4
 80019f0:	6019      	str	r1, [r3, #0]
    hDmaDfsdm[mic_num].Instance                 = AUDIO_DFSDMx_DMAx_MIC_STREAM[mic_num];
 80019f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80019fa:	4413      	add	r3, r2
 80019fc:	f853 1c60 	ldr.w	r1, [r3, #-96]
 8001a00:	4867      	ldr	r0, [pc, #412]	; (8001ba0 <DFSDM_FilterMspInit+0x3bc>)
 8001a02:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001a04:	4613      	mov	r3, r2
 8001a06:	011b      	lsls	r3, r3, #4
 8001a08:	1a9b      	subs	r3, r3, r2
 8001a0a:	00db      	lsls	r3, r3, #3
 8001a0c:	4403      	add	r3, r0
 8001a0e:	6019      	str	r1, [r3, #0]
    hDmaDfsdm[mic_num].Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8001a10:	4963      	ldr	r1, [pc, #396]	; (8001ba0 <DFSDM_FilterMspInit+0x3bc>)
 8001a12:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001a14:	4613      	mov	r3, r2
 8001a16:	011b      	lsls	r3, r3, #4
 8001a18:	1a9b      	subs	r3, r3, r2
 8001a1a:	00db      	lsls	r3, r3, #3
 8001a1c:	440b      	add	r3, r1
 8001a1e:	3308      	adds	r3, #8
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]
    hDmaDfsdm[mic_num].Init.PeriphInc           = DMA_PINC_DISABLE;
 8001a24:	495e      	ldr	r1, [pc, #376]	; (8001ba0 <DFSDM_FilterMspInit+0x3bc>)
 8001a26:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001a28:	4613      	mov	r3, r2
 8001a2a:	011b      	lsls	r3, r3, #4
 8001a2c:	1a9b      	subs	r3, r3, r2
 8001a2e:	00db      	lsls	r3, r3, #3
 8001a30:	440b      	add	r3, r1
 8001a32:	330c      	adds	r3, #12
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
    hDmaDfsdm[mic_num].Init.MemInc              = DMA_MINC_ENABLE;
 8001a38:	4959      	ldr	r1, [pc, #356]	; (8001ba0 <DFSDM_FilterMspInit+0x3bc>)
 8001a3a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	011b      	lsls	r3, r3, #4
 8001a40:	1a9b      	subs	r3, r3, r2
 8001a42:	00db      	lsls	r3, r3, #3
 8001a44:	440b      	add	r3, r1
 8001a46:	3310      	adds	r3, #16
 8001a48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a4c:	601a      	str	r2, [r3, #0]
    hDmaDfsdm[mic_num].Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001a4e:	4954      	ldr	r1, [pc, #336]	; (8001ba0 <DFSDM_FilterMspInit+0x3bc>)
 8001a50:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001a52:	4613      	mov	r3, r2
 8001a54:	011b      	lsls	r3, r3, #4
 8001a56:	1a9b      	subs	r3, r3, r2
 8001a58:	00db      	lsls	r3, r3, #3
 8001a5a:	440b      	add	r3, r1
 8001a5c:	3314      	adds	r3, #20
 8001a5e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a62:	601a      	str	r2, [r3, #0]
    hDmaDfsdm[mic_num].Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8001a64:	494e      	ldr	r1, [pc, #312]	; (8001ba0 <DFSDM_FilterMspInit+0x3bc>)
 8001a66:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001a68:	4613      	mov	r3, r2
 8001a6a:	011b      	lsls	r3, r3, #4
 8001a6c:	1a9b      	subs	r3, r3, r2
 8001a6e:	00db      	lsls	r3, r3, #3
 8001a70:	440b      	add	r3, r1
 8001a72:	3318      	adds	r3, #24
 8001a74:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a78:	601a      	str	r2, [r3, #0]
    hDmaDfsdm[mic_num].Init.Mode                = DMA_CIRCULAR;
 8001a7a:	4949      	ldr	r1, [pc, #292]	; (8001ba0 <DFSDM_FilterMspInit+0x3bc>)
 8001a7c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001a7e:	4613      	mov	r3, r2
 8001a80:	011b      	lsls	r3, r3, #4
 8001a82:	1a9b      	subs	r3, r3, r2
 8001a84:	00db      	lsls	r3, r3, #3
 8001a86:	440b      	add	r3, r1
 8001a88:	331c      	adds	r3, #28
 8001a8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a8e:	601a      	str	r2, [r3, #0]
    hDmaDfsdm[mic_num].Init.Priority            = DMA_PRIORITY_HIGH;
 8001a90:	4943      	ldr	r1, [pc, #268]	; (8001ba0 <DFSDM_FilterMspInit+0x3bc>)
 8001a92:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001a94:	4613      	mov	r3, r2
 8001a96:	011b      	lsls	r3, r3, #4
 8001a98:	1a9b      	subs	r3, r3, r2
 8001a9a:	00db      	lsls	r3, r3, #3
 8001a9c:	440b      	add	r3, r1
 8001a9e:	3320      	adds	r3, #32
 8001aa0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001aa4:	601a      	str	r2, [r3, #0]
    hDmaDfsdm[mic_num].Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8001aa6:	493e      	ldr	r1, [pc, #248]	; (8001ba0 <DFSDM_FilterMspInit+0x3bc>)
 8001aa8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001aaa:	4613      	mov	r3, r2
 8001aac:	011b      	lsls	r3, r3, #4
 8001aae:	1a9b      	subs	r3, r3, r2
 8001ab0:	00db      	lsls	r3, r3, #3
 8001ab2:	440b      	add	r3, r1
 8001ab4:	3324      	adds	r3, #36	; 0x24
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	601a      	str	r2, [r3, #0]
    hDmaDfsdm[mic_num].Init.MemBurst            = DMA_MBURST_SINGLE;
 8001aba:	4939      	ldr	r1, [pc, #228]	; (8001ba0 <DFSDM_FilterMspInit+0x3bc>)
 8001abc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001abe:	4613      	mov	r3, r2
 8001ac0:	011b      	lsls	r3, r3, #4
 8001ac2:	1a9b      	subs	r3, r3, r2
 8001ac4:	00db      	lsls	r3, r3, #3
 8001ac6:	440b      	add	r3, r1
 8001ac8:	332c      	adds	r3, #44	; 0x2c
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
    hDmaDfsdm[mic_num].Init.PeriphBurst         = DMA_PBURST_SINGLE;
 8001ace:	4934      	ldr	r1, [pc, #208]	; (8001ba0 <DFSDM_FilterMspInit+0x3bc>)
 8001ad0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	011b      	lsls	r3, r3, #4
 8001ad6:	1a9b      	subs	r3, r3, r2
 8001ad8:	00db      	lsls	r3, r3, #3
 8001ada:	440b      	add	r3, r1
 8001adc:	3330      	adds	r3, #48	; 0x30
 8001ade:	2200      	movs	r2, #0
 8001ae0:	601a      	str	r2, [r3, #0]
    hDmaDfsdm[mic_num].State                    = HAL_DMA_STATE_RESET;
 8001ae2:	492f      	ldr	r1, [pc, #188]	; (8001ba0 <DFSDM_FilterMspInit+0x3bc>)
 8001ae4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	011b      	lsls	r3, r3, #4
 8001aea:	1a9b      	subs	r3, r3, r2
 8001aec:	00db      	lsls	r3, r3, #3
 8001aee:	440b      	add	r3, r1
 8001af0:	3335      	adds	r3, #53	; 0x35
 8001af2:	2200      	movs	r2, #0
 8001af4:	701a      	strb	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(&haudio_in_dfsdm_filter[mic_num], hdmaReg, hDmaDfsdm[mic_num]);
 8001af6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001af8:	4613      	mov	r3, r2
 8001afa:	011b      	lsls	r3, r3, #4
 8001afc:	1a9b      	subs	r3, r3, r2
 8001afe:	00db      	lsls	r3, r3, #3
 8001b00:	4a27      	ldr	r2, [pc, #156]	; (8001ba0 <DFSDM_FilterMspInit+0x3bc>)
 8001b02:	441a      	add	r2, r3
 8001b04:	4927      	ldr	r1, [pc, #156]	; (8001ba4 <DFSDM_FilterMspInit+0x3c0>)
 8001b06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b08:	2054      	movs	r0, #84	; 0x54
 8001b0a:	fb00 f303 	mul.w	r3, r0, r3
 8001b0e:	440b      	add	r3, r1
 8001b10:	3328      	adds	r3, #40	; 0x28
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b16:	2254      	movs	r2, #84	; 0x54
 8001b18:	fb02 f303 	mul.w	r3, r2, r3
 8001b1c:	4a21      	ldr	r2, [pc, #132]	; (8001ba4 <DFSDM_FilterMspInit+0x3c0>)
 8001b1e:	1899      	adds	r1, r3, r2
 8001b20:	481f      	ldr	r0, [pc, #124]	; (8001ba0 <DFSDM_FilterMspInit+0x3bc>)
 8001b22:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001b24:	4613      	mov	r3, r2
 8001b26:	011b      	lsls	r3, r3, #4
 8001b28:	1a9b      	subs	r3, r3, r2
 8001b2a:	00db      	lsls	r3, r3, #3
 8001b2c:	4403      	add	r3, r0
 8001b2e:	3338      	adds	r3, #56	; 0x38
 8001b30:	6019      	str	r1, [r3, #0]

    /* Reset DMA handle state */
    __HAL_DMA_RESET_HANDLE_STATE(&hDmaDfsdm[mic_num]);
 8001b32:	491b      	ldr	r1, [pc, #108]	; (8001ba0 <DFSDM_FilterMspInit+0x3bc>)
 8001b34:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001b36:	4613      	mov	r3, r2
 8001b38:	011b      	lsls	r3, r3, #4
 8001b3a:	1a9b      	subs	r3, r3, r2
 8001b3c:	00db      	lsls	r3, r3, #3
 8001b3e:	440b      	add	r3, r1
 8001b40:	3335      	adds	r3, #53	; 0x35
 8001b42:	2200      	movs	r2, #0
 8001b44:	701a      	strb	r2, [r3, #0]

    /* Configure the DMA Channel */
    (void)HAL_DMA_Init(&hDmaDfsdm[mic_num]);
 8001b46:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001b48:	4613      	mov	r3, r2
 8001b4a:	011b      	lsls	r3, r3, #4
 8001b4c:	1a9b      	subs	r3, r3, r2
 8001b4e:	00db      	lsls	r3, r3, #3
 8001b50:	4a13      	ldr	r2, [pc, #76]	; (8001ba0 <DFSDM_FilterMspInit+0x3bc>)
 8001b52:	4413      	add	r3, r2
 8001b54:	4618      	mov	r0, r3
 8001b56:	f000 fcf3 	bl	8002540 <HAL_DMA_Init>

    /* DMA IRQ Channel configuration */
    HAL_NVIC_SetPriority(AUDIO_DFSDM_DMAx_MIC_IRQHandler[mic_num], BSP_AUDIO_IN_IT_PRIORITY, 0);
 8001b5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001b62:	4413      	add	r3, r2
 8001b64:	f933 3c50 	ldrsh.w	r3, [r3, #-80]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	210f      	movs	r1, #15
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f000 f988 	bl	8001e82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AUDIO_DFSDM_DMAx_MIC_IRQHandler[mic_num]);
 8001b72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001b7a:	4413      	add	r3, r2
 8001b7c:	f933 3c50 	ldrsh.w	r3, [r3, #-80]
 8001b80:	4618      	mov	r0, r3
 8001b82:	f000 f998 	bl	8001eb6 <HAL_NVIC_EnableIRQ>
  for(i = 0; i < DFSDM_MIC_NUMBER; i++)
 8001b86:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001b88:	3301      	adds	r3, #1
 8001b8a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001b8c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001b8e:	2b03      	cmp	r3, #3
 8001b90:	f67f ae67 	bls.w	8001862 <DFSDM_FilterMspInit+0x7e>
  }
}
 8001b94:	bf00      	nop
 8001b96:	3784      	adds	r7, #132	; 0x84
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd90      	pop	{r4, r7, pc}
 8001b9c:	24000c64 	.word	0x24000c64
 8001ba0:	2400066c 	.word	0x2400066c
 8001ba4:	24000af0 	.word	0x24000af0

08001ba8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bae:	2003      	movs	r0, #3
 8001bb0:	f000 f95c 	bl	8001e6c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001bb4:	f004 fd54 	bl	8006660 <HAL_RCC_GetSysClockFreq>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	4b15      	ldr	r3, [pc, #84]	; (8001c10 <HAL_Init+0x68>)
 8001bbc:	699b      	ldr	r3, [r3, #24]
 8001bbe:	0a1b      	lsrs	r3, r3, #8
 8001bc0:	f003 030f 	and.w	r3, r3, #15
 8001bc4:	4913      	ldr	r1, [pc, #76]	; (8001c14 <HAL_Init+0x6c>)
 8001bc6:	5ccb      	ldrb	r3, [r1, r3]
 8001bc8:	f003 031f 	and.w	r3, r3, #31
 8001bcc:	fa22 f303 	lsr.w	r3, r2, r3
 8001bd0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001bd2:	4b0f      	ldr	r3, [pc, #60]	; (8001c10 <HAL_Init+0x68>)
 8001bd4:	699b      	ldr	r3, [r3, #24]
 8001bd6:	f003 030f 	and.w	r3, r3, #15
 8001bda:	4a0e      	ldr	r2, [pc, #56]	; (8001c14 <HAL_Init+0x6c>)
 8001bdc:	5cd3      	ldrb	r3, [r2, r3]
 8001bde:	f003 031f 	and.w	r3, r3, #31
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	fa22 f303 	lsr.w	r3, r2, r3
 8001be8:	4a0b      	ldr	r2, [pc, #44]	; (8001c18 <HAL_Init+0x70>)
 8001bea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001bec:	4a0b      	ldr	r2, [pc, #44]	; (8001c1c <HAL_Init+0x74>)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bf2:	2000      	movs	r0, #0
 8001bf4:	f000 f814 	bl	8001c20 <HAL_InitTick>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e002      	b.n	8001c08 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001c02:	f008 fa85 	bl	800a110 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c06:	2300      	movs	r3, #0
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3708      	adds	r7, #8
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	58024400 	.word	0x58024400
 8001c14:	0800c938 	.word	0x0800c938
 8001c18:	24000414 	.word	0x24000414
 8001c1c:	24000410 	.word	0x24000410

08001c20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001c28:	4b15      	ldr	r3, [pc, #84]	; (8001c80 <HAL_InitTick+0x60>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d101      	bne.n	8001c34 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e021      	b.n	8001c78 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001c34:	4b13      	ldr	r3, [pc, #76]	; (8001c84 <HAL_InitTick+0x64>)
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	4b11      	ldr	r3, [pc, #68]	; (8001c80 <HAL_InitTick+0x60>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c42:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f000 f941 	bl	8001ed2 <HAL_SYSTICK_Config>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e00e      	b.n	8001c78 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2b0f      	cmp	r3, #15
 8001c5e:	d80a      	bhi.n	8001c76 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c60:	2200      	movs	r2, #0
 8001c62:	6879      	ldr	r1, [r7, #4]
 8001c64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c68:	f000 f90b 	bl	8001e82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c6c:	4a06      	ldr	r2, [pc, #24]	; (8001c88 <HAL_InitTick+0x68>)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c72:	2300      	movs	r3, #0
 8001c74:	e000      	b.n	8001c78 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3708      	adds	r7, #8
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	2400040c 	.word	0x2400040c
 8001c84:	24000410 	.word	0x24000410
 8001c88:	24000408 	.word	0x24000408

08001c8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c90:	4b06      	ldr	r3, [pc, #24]	; (8001cac <HAL_IncTick+0x20>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	461a      	mov	r2, r3
 8001c96:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <HAL_IncTick+0x24>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	4a04      	ldr	r2, [pc, #16]	; (8001cb0 <HAL_IncTick+0x24>)
 8001c9e:	6013      	str	r3, [r2, #0]
}
 8001ca0:	bf00      	nop
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	2400040c 	.word	0x2400040c
 8001cb0:	24000cf4 	.word	0x24000cf4

08001cb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  return uwTick;
 8001cb8:	4b03      	ldr	r3, [pc, #12]	; (8001cc8 <HAL_GetTick+0x14>)
 8001cba:	681b      	ldr	r3, [r3, #0]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	24000cf4 	.word	0x24000cf4

08001ccc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f003 0307 	and.w	r3, r3, #7
 8001cda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cdc:	4b0b      	ldr	r3, [pc, #44]	; (8001d0c <__NVIC_SetPriorityGrouping+0x40>)
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ce2:	68ba      	ldr	r2, [r7, #8]
 8001ce4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ce8:	4013      	ands	r3, r2
 8001cea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001cf4:	4b06      	ldr	r3, [pc, #24]	; (8001d10 <__NVIC_SetPriorityGrouping+0x44>)
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cfa:	4a04      	ldr	r2, [pc, #16]	; (8001d0c <__NVIC_SetPriorityGrouping+0x40>)
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	60d3      	str	r3, [r2, #12]
}
 8001d00:	bf00      	nop
 8001d02:	3714      	adds	r7, #20
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr
 8001d0c:	e000ed00 	.word	0xe000ed00
 8001d10:	05fa0000 	.word	0x05fa0000

08001d14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d18:	4b04      	ldr	r3, [pc, #16]	; (8001d2c <__NVIC_GetPriorityGrouping+0x18>)
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	0a1b      	lsrs	r3, r3, #8
 8001d1e:	f003 0307 	and.w	r3, r3, #7
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr
 8001d2c:	e000ed00 	.word	0xe000ed00

08001d30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	db0b      	blt.n	8001d5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d42:	88fb      	ldrh	r3, [r7, #6]
 8001d44:	f003 021f 	and.w	r2, r3, #31
 8001d48:	4907      	ldr	r1, [pc, #28]	; (8001d68 <__NVIC_EnableIRQ+0x38>)
 8001d4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d4e:	095b      	lsrs	r3, r3, #5
 8001d50:	2001      	movs	r0, #1
 8001d52:	fa00 f202 	lsl.w	r2, r0, r2
 8001d56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d5a:	bf00      	nop
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	e000e100 	.word	0xe000e100

08001d6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	4603      	mov	r3, r0
 8001d74:	6039      	str	r1, [r7, #0]
 8001d76:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	db0a      	blt.n	8001d96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	b2da      	uxtb	r2, r3
 8001d84:	490c      	ldr	r1, [pc, #48]	; (8001db8 <__NVIC_SetPriority+0x4c>)
 8001d86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d8a:	0112      	lsls	r2, r2, #4
 8001d8c:	b2d2      	uxtb	r2, r2
 8001d8e:	440b      	add	r3, r1
 8001d90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d94:	e00a      	b.n	8001dac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	b2da      	uxtb	r2, r3
 8001d9a:	4908      	ldr	r1, [pc, #32]	; (8001dbc <__NVIC_SetPriority+0x50>)
 8001d9c:	88fb      	ldrh	r3, [r7, #6]
 8001d9e:	f003 030f 	and.w	r3, r3, #15
 8001da2:	3b04      	subs	r3, #4
 8001da4:	0112      	lsls	r2, r2, #4
 8001da6:	b2d2      	uxtb	r2, r2
 8001da8:	440b      	add	r3, r1
 8001daa:	761a      	strb	r2, [r3, #24]
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr
 8001db8:	e000e100 	.word	0xe000e100
 8001dbc:	e000ed00 	.word	0xe000ed00

08001dc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b089      	sub	sp, #36	; 0x24
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	60b9      	str	r1, [r7, #8]
 8001dca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	f003 0307 	and.w	r3, r3, #7
 8001dd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	f1c3 0307 	rsb	r3, r3, #7
 8001dda:	2b04      	cmp	r3, #4
 8001ddc:	bf28      	it	cs
 8001dde:	2304      	movcs	r3, #4
 8001de0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	3304      	adds	r3, #4
 8001de6:	2b06      	cmp	r3, #6
 8001de8:	d902      	bls.n	8001df0 <NVIC_EncodePriority+0x30>
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	3b03      	subs	r3, #3
 8001dee:	e000      	b.n	8001df2 <NVIC_EncodePriority+0x32>
 8001df0:	2300      	movs	r3, #0
 8001df2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	43da      	mvns	r2, r3
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	401a      	ands	r2, r3
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e08:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e12:	43d9      	mvns	r1, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e18:	4313      	orrs	r3, r2
         );
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3724      	adds	r7, #36	; 0x24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
	...

08001e28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	3b01      	subs	r3, #1
 8001e34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e38:	d301      	bcc.n	8001e3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e00f      	b.n	8001e5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e3e:	4a0a      	ldr	r2, [pc, #40]	; (8001e68 <SysTick_Config+0x40>)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	3b01      	subs	r3, #1
 8001e44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e46:	210f      	movs	r1, #15
 8001e48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e4c:	f7ff ff8e 	bl	8001d6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e50:	4b05      	ldr	r3, [pc, #20]	; (8001e68 <SysTick_Config+0x40>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e56:	4b04      	ldr	r3, [pc, #16]	; (8001e68 <SysTick_Config+0x40>)
 8001e58:	2207      	movs	r2, #7
 8001e5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	e000e010 	.word	0xe000e010

08001e6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f7ff ff29 	bl	8001ccc <__NVIC_SetPriorityGrouping>
}
 8001e7a:	bf00      	nop
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b086      	sub	sp, #24
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	4603      	mov	r3, r0
 8001e8a:	60b9      	str	r1, [r7, #8]
 8001e8c:	607a      	str	r2, [r7, #4]
 8001e8e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e90:	f7ff ff40 	bl	8001d14 <__NVIC_GetPriorityGrouping>
 8001e94:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	68b9      	ldr	r1, [r7, #8]
 8001e9a:	6978      	ldr	r0, [r7, #20]
 8001e9c:	f7ff ff90 	bl	8001dc0 <NVIC_EncodePriority>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ea6:	4611      	mov	r1, r2
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff ff5f 	bl	8001d6c <__NVIC_SetPriority>
}
 8001eae:	bf00      	nop
 8001eb0:	3718      	adds	r7, #24
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b082      	sub	sp, #8
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ec0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff ff33 	bl	8001d30 <__NVIC_EnableIRQ>
}
 8001eca:	bf00      	nop
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b082      	sub	sp, #8
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f7ff ffa4 	bl	8001e28 <SysTick_Config>
 8001ee0:	4603      	mov	r3, r0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
	...

08001eec <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d101      	bne.n	8001efe <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e054      	b.n	8001fa8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	7f5b      	ldrb	r3, [r3, #29]
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d105      	bne.n	8001f14 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f008 f918 	bl	800a144 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2202      	movs	r2, #2
 8001f18:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	791b      	ldrb	r3, [r3, #4]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d10c      	bne.n	8001f3c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a22      	ldr	r2, [pc, #136]	; (8001fb0 <HAL_CRC_Init+0xc4>)
 8001f28:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	689a      	ldr	r2, [r3, #8]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f022 0218 	bic.w	r2, r2, #24
 8001f38:	609a      	str	r2, [r3, #8]
 8001f3a:	e00c      	b.n	8001f56 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6899      	ldr	r1, [r3, #8]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	461a      	mov	r2, r3
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 f834 	bl	8001fb4 <HAL_CRCEx_Polynomial_Set>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e028      	b.n	8001fa8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	795b      	ldrb	r3, [r3, #5]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d105      	bne.n	8001f6a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f66:	611a      	str	r2, [r3, #16]
 8001f68:	e004      	b.n	8001f74 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	6912      	ldr	r2, [r2, #16]
 8001f72:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	695a      	ldr	r2, [r3, #20]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	430a      	orrs	r2, r1
 8001f88:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	699a      	ldr	r2, [r3, #24]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	430a      	orrs	r2, r1
 8001f9e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001fa6:	2300      	movs	r3, #0
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3708      	adds	r7, #8
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	04c11db7 	.word	0x04c11db7

08001fb4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b087      	sub	sp, #28
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001fc4:	231f      	movs	r3, #31
 8001fc6:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001fc8:	bf00      	nop
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	1e5a      	subs	r2, r3, #1
 8001fce:	613a      	str	r2, [r7, #16]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d009      	beq.n	8001fe8 <HAL_CRCEx_Polynomial_Set+0x34>
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	f003 031f 	and.w	r3, r3, #31
 8001fda:	68ba      	ldr	r2, [r7, #8]
 8001fdc:	fa22 f303 	lsr.w	r3, r2, r3
 8001fe0:	f003 0301 	and.w	r3, r3, #1
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d0f0      	beq.n	8001fca <HAL_CRCEx_Polynomial_Set+0x16>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2b18      	cmp	r3, #24
 8001fec:	d846      	bhi.n	800207c <HAL_CRCEx_Polynomial_Set+0xc8>
 8001fee:	a201      	add	r2, pc, #4	; (adr r2, 8001ff4 <HAL_CRCEx_Polynomial_Set+0x40>)
 8001ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ff4:	08002083 	.word	0x08002083
 8001ff8:	0800207d 	.word	0x0800207d
 8001ffc:	0800207d 	.word	0x0800207d
 8002000:	0800207d 	.word	0x0800207d
 8002004:	0800207d 	.word	0x0800207d
 8002008:	0800207d 	.word	0x0800207d
 800200c:	0800207d 	.word	0x0800207d
 8002010:	0800207d 	.word	0x0800207d
 8002014:	08002071 	.word	0x08002071
 8002018:	0800207d 	.word	0x0800207d
 800201c:	0800207d 	.word	0x0800207d
 8002020:	0800207d 	.word	0x0800207d
 8002024:	0800207d 	.word	0x0800207d
 8002028:	0800207d 	.word	0x0800207d
 800202c:	0800207d 	.word	0x0800207d
 8002030:	0800207d 	.word	0x0800207d
 8002034:	08002065 	.word	0x08002065
 8002038:	0800207d 	.word	0x0800207d
 800203c:	0800207d 	.word	0x0800207d
 8002040:	0800207d 	.word	0x0800207d
 8002044:	0800207d 	.word	0x0800207d
 8002048:	0800207d 	.word	0x0800207d
 800204c:	0800207d 	.word	0x0800207d
 8002050:	0800207d 	.word	0x0800207d
 8002054:	08002059 	.word	0x08002059
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	2b06      	cmp	r3, #6
 800205c:	d913      	bls.n	8002086 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002062:	e010      	b.n	8002086 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	2b07      	cmp	r3, #7
 8002068:	d90f      	bls.n	800208a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800206e:	e00c      	b.n	800208a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	2b0f      	cmp	r3, #15
 8002074:	d90b      	bls.n	800208e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800207a:	e008      	b.n	800208e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	75fb      	strb	r3, [r7, #23]
      break;
 8002080:	e006      	b.n	8002090 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002082:	bf00      	nop
 8002084:	e004      	b.n	8002090 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002086:	bf00      	nop
 8002088:	e002      	b.n	8002090 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800208a:	bf00      	nop
 800208c:	e000      	b.n	8002090 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800208e:	bf00      	nop
  }
  if (status == HAL_OK)
 8002090:	7dfb      	ldrb	r3, [r7, #23]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d10d      	bne.n	80020b2 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	68ba      	ldr	r2, [r7, #8]
 800209c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	f023 0118 	bic.w	r1, r3, #24
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	430a      	orrs	r2, r1
 80020b0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80020b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	371c      	adds	r7, #28
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b086      	sub	sp, #24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t               *channelCounterPtr;
  DFSDM_Channel_HandleTypeDef **channelHandleTable;
  DFSDM_Channel_TypeDef       *channel0Instance;

  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d101      	bne.n	80020d2 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e0b4      	b.n	800223c <HAL_DFSDM_ChannelInit+0x17c>
    channelCounterPtr  = &v_dfsdm2ChannelCounter;
    channelHandleTable = a_dfsdm2ChannelHandle;
    channel0Instance   = DFSDM2_Channel0;
  }
#else /* DFSDM2_Channel0 */
  channelCounterPtr  = &v_dfsdm1ChannelCounter;
 80020d2:	4b5c      	ldr	r3, [pc, #368]	; (8002244 <HAL_DFSDM_ChannelInit+0x184>)
 80020d4:	617b      	str	r3, [r7, #20]
  channelHandleTable = a_dfsdm1ChannelHandle;
 80020d6:	4b5c      	ldr	r3, [pc, #368]	; (8002248 <HAL_DFSDM_ChannelInit+0x188>)
 80020d8:	613b      	str	r3, [r7, #16]
  channel0Instance   = DFSDM1_Channel0;
 80020da:	4b5c      	ldr	r3, [pc, #368]	; (800224c <HAL_DFSDM_ChannelInit+0x18c>)
 80020dc:	60fb      	str	r3, [r7, #12]
#endif /* DFSDM2_Channel0 */

  /* Check that channel has not been already initialized */
  if (channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f000 f9e0 	bl	80024a8 <DFSDM_GetChannelFromInstance>
 80020e8:	4603      	mov	r3, r0
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	693a      	ldr	r2, [r7, #16]
 80020ee:	4413      	add	r3, r2
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <HAL_DFSDM_ChannelInit+0x3a>
  {
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e0a0      	b.n	800223c <HAL_DFSDM_ChannelInit+0x17c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f008 f844 	bl	800a188 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  (*channelCounterPtr)++;
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	1c5a      	adds	r2, r3, #1
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	601a      	str	r2, [r3, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(*channelCounterPtr == 1U)
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	2b01      	cmp	r3, #1
 8002110:	d125      	bne.n	800215e <HAL_DFSDM_ChannelInit+0x9e>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	601a      	str	r2, [r3, #0]
    channel0Instance->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	431a      	orrs	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	601a      	str	r2, [r3, #0]

    /* Reset clock divider */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	791b      	ldrb	r3, [r3, #4]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d108      	bne.n	8002152 <HAL_DFSDM_ChannelInit+0x92>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      channel0Instance->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	3b01      	subs	r3, #1
 800214a:	041b      	lsls	r3, r3, #16
 800214c:	431a      	orrs	r2, r3
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	601a      	str	r2, [r3, #0]
                                              DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    channel0Instance->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	601a      	str	r2, [r3, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800216c:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	6819      	ldr	r1, [r3, #0]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800217c:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002182:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	430a      	orrs	r2, r1
 800218a:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f022 020f 	bic.w	r2, r2, #15
 800219a:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	6819      	ldr	r1, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80021aa:	431a      	orrs	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	430a      	orrs	r2, r1
 80021b2:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	689a      	ldr	r2, [r3, #8]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80021c2:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	6899      	ldr	r1, [r3, #8]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d2:	3b01      	subs	r3, #1
 80021d4:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80021d6:	431a      	orrs	r2, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	430a      	orrs	r2, r1
 80021de:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	685a      	ldr	r2, [r3, #4]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f002 0207 	and.w	r2, r2, #7
 80021ee:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	6859      	ldr	r1, [r3, #4]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021fa:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002200:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002202:	431a      	orrs	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	430a      	orrs	r2, r1
 800220a:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800221a:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2201      	movs	r2, #1
 8002220:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4618      	mov	r0, r3
 800222a:	f000 f93d 	bl	80024a8 <DFSDM_GetChannelFromInstance>
 800222e:	4603      	mov	r3, r0
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	693a      	ldr	r2, [r7, #16]
 8002234:	4413      	add	r3, r2
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800223a:	2300      	movs	r3, #0
}
 800223c:	4618      	mov	r0, r3
 800223e:	3718      	adds	r7, #24
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	240009e0 	.word	0x240009e0
 8002248:	240009e4 	.word	0x240009e4
 800224c:	40017800 	.word	0x40017800

08002250 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  const DFSDM_Filter_TypeDef *filter0Instance;

  /* Check DFSDM Channel handle */
  if(hdfsdm_filter == NULL)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d101      	bne.n	8002262 <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e0c8      	b.n	80023f4 <HAL_DFSDM_FilterInit+0x1a4>
  else
  {
    filter0Instance = DFSDM2_Filter0;
  }
#else /* DFSDM2_Channel0 */
  filter0Instance = DFSDM1_Filter0;
 8002262:	4b66      	ldr	r3, [pc, #408]	; (80023fc <HAL_DFSDM_FilterInit+0x1ac>)
 8002264:	60fb      	str	r3, [r7, #12]
#endif /* DFSDM2_Channel0 */

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == filter0Instance) &&
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	68fa      	ldr	r2, [r7, #12]
 800226c:	429a      	cmp	r2, r3
 800226e:	d109      	bne.n	8002284 <HAL_DFSDM_FilterInit+0x34>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == filter0Instance) &&
 8002274:	2b01      	cmp	r3, #1
 8002276:	d003      	beq.n	8002280 <HAL_DFSDM_FilterInit+0x30>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 800227c:	2b01      	cmp	r3, #1
 800227e:	d101      	bne.n	8002284 <HAL_DFSDM_FilterInit+0x34>
  {
    return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e0b7      	b.n	80023f4 <HAL_DFSDM_FilterInit+0x1a4>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2201      	movs	r2, #1
 800228e:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2201      	movs	r2, #1
 8002294:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f000 f8b3 	bl	8002408 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 80022b0:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	7a1b      	ldrb	r3, [r3, #8]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d108      	bne.n	80022cc <HAL_DFSDM_FilterInit+0x7c>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80022c8:	601a      	str	r2, [r3, #0]
 80022ca:	e007      	b.n	80022dc <HAL_DFSDM_FilterInit+0x8c>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80022da:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	7a5b      	ldrb	r3, [r3, #9]
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d108      	bne.n	80022f6 <HAL_DFSDM_FilterInit+0xa6>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80022f2:	601a      	str	r2, [r3, #0]
 80022f4:	e007      	b.n	8002306 <HAL_DFSDM_FilterInit+0xb6>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8002304:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	6819      	ldr	r1, [r3, #0]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	4b3b      	ldr	r3, [pc, #236]	; (8002400 <HAL_DFSDM_FilterInit+0x1b0>)
 8002312:	400b      	ands	r3, r1
 8002314:	6013      	str	r3, [r2, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	2b02      	cmp	r3, #2
 800231c:	d108      	bne.n	8002330 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	6819      	ldr	r1, [r3, #0]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	695a      	ldr	r2, [r3, #20]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	430a      	orrs	r2, r1
 800232e:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	7c1b      	ldrb	r3, [r3, #16]
 8002334:	2b01      	cmp	r3, #1
 8002336:	d108      	bne.n	800234a <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f042 0210 	orr.w	r2, r2, #16
 8002346:	601a      	str	r2, [r3, #0]
 8002348:	e007      	b.n	800235a <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f022 0210 	bic.w	r2, r2, #16
 8002358:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	7c5b      	ldrb	r3, [r3, #17]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d108      	bne.n	8002374 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f042 0220 	orr.w	r2, r2, #32
 8002370:	601a      	str	r2, [r3, #0]
 8002372:	e007      	b.n	8002384 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f022 0220 	bic.w	r2, r2, #32
 8002382:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	6959      	ldr	r1, [r3, #20]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	4b1d      	ldr	r3, [pc, #116]	; (8002404 <HAL_DFSDM_FilterInit+0x1b4>)
 8002390:	400b      	ands	r3, r1
 8002392:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	6959      	ldr	r1, [r3, #20]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a1b      	ldr	r3, [r3, #32]
 80023a2:	3b01      	subs	r3, #1
 80023a4:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80023a6:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ac:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 80023ae:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	430a      	orrs	r2, r1
 80023b6:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685a      	ldr	r2, [r3, #4]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	68da      	ldr	r2, [r3, #12]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	699a      	ldr	r2, [r3, #24]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	7c1a      	ldrb	r2, [r3, #16]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f042 0201 	orr.w	r2, r2, #1
 80023e8:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2201      	movs	r2, #1
 80023ee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 80023f2:	2300      	movs	r3, #0
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3710      	adds	r7, #16
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	40017900 	.word	0x40017900
 8002400:	ffff80f7 	.word	0xffff80f7
 8002404:	1c00ff00 	.word	0x1c00ff00

08002408 <HAL_DFSDM_FilterMspInit>:
  * @brief  Initializes the DFSDM filter MSP.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the function is needed,
            the HAL_DFSDM_FilterMspInit could be implemented in the user file.
   */
}
 8002410:	bf00      	nop
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 800241c:	b480      	push	{r7}
 800241e:	b087      	sub	sp, #28
 8002420:	af00      	add	r7, sp, #0
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	60b9      	str	r1, [r7, #8]
 8002426:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002428:	2300      	movs	r3, #0
 800242a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002432:	2b00      	cmp	r3, #0
 8002434:	d02c      	beq.n	8002490 <HAL_DFSDM_FilterConfigRegChannel+0x74>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 800243c:	2bff      	cmp	r3, #255	; 0xff
 800243e:	d027      	beq.n	8002490 <HAL_DFSDM_FilterConfigRegChannel+0x74>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	6819      	ldr	r1, [r3, #0]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	4b16      	ldr	r3, [pc, #88]	; (80024a4 <HAL_DFSDM_FilterConfigRegChannel+0x88>)
 800244c:	400b      	ands	r3, r1
 800244e:	6013      	str	r3, [r2, #0]
    if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2b01      	cmp	r3, #1
 8002454:	d10d      	bne.n	8002472 <HAL_DFSDM_FilterConfigRegChannel+0x56>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	021b      	lsls	r3, r3, #8
 8002460:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002464:	431a      	orrs	r2, r3
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800246e:	601a      	str	r2, [r3, #0]
 8002470:	e00a      	b.n	8002488 <HAL_DFSDM_FilterConfigRegChannel+0x6c>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) ((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	6819      	ldr	r1, [r3, #0]
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	021b      	lsls	r3, r3, #8
 800247c:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	430a      	orrs	r2, r1
 8002486:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	631a      	str	r2, [r3, #48]	; 0x30
 800248e:	e001      	b.n	8002494 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  }
  else
  {
    status = HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8002494:	7dfb      	ldrb	r3, [r7, #23]
}
 8002496:	4618      	mov	r0, r3
 8002498:	371c      	adds	r7, #28
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	f8fbffff 	.word	0xf8fbffff

080024a8 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef* Instance)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if(Instance == DFSDM1_Channel0)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	4a1c      	ldr	r2, [pc, #112]	; (8002524 <DFSDM_GetChannelFromInstance+0x7c>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d102      	bne.n	80024be <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80024b8:	2300      	movs	r3, #0
 80024ba:	60fb      	str	r3, [r7, #12]
 80024bc:	e02b      	b.n	8002516 <DFSDM_GetChannelFromInstance+0x6e>
  else if (Instance == DFSDM2_Channel1)
  {
    channel = 1;
  }
#endif /* DFSDM2_Channel0 */
  else if(Instance == DFSDM1_Channel1)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a19      	ldr	r2, [pc, #100]	; (8002528 <DFSDM_GetChannelFromInstance+0x80>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d102      	bne.n	80024cc <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80024c6:	2301      	movs	r3, #1
 80024c8:	60fb      	str	r3, [r7, #12]
 80024ca:	e024      	b.n	8002516 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel2)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4a17      	ldr	r2, [pc, #92]	; (800252c <DFSDM_GetChannelFromInstance+0x84>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d102      	bne.n	80024da <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80024d4:	2302      	movs	r3, #2
 80024d6:	60fb      	str	r3, [r7, #12]
 80024d8:	e01d      	b.n	8002516 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel3)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a14      	ldr	r2, [pc, #80]	; (8002530 <DFSDM_GetChannelFromInstance+0x88>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d102      	bne.n	80024e8 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 3;
 80024e2:	2303      	movs	r3, #3
 80024e4:	60fb      	str	r3, [r7, #12]
 80024e6:	e016      	b.n	8002516 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel4)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	4a12      	ldr	r2, [pc, #72]	; (8002534 <DFSDM_GetChannelFromInstance+0x8c>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d102      	bne.n	80024f6 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 4;
 80024f0:	2304      	movs	r3, #4
 80024f2:	60fb      	str	r3, [r7, #12]
 80024f4:	e00f      	b.n	8002516 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel5)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a0f      	ldr	r2, [pc, #60]	; (8002538 <DFSDM_GetChannelFromInstance+0x90>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d102      	bne.n	8002504 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 5;
 80024fe:	2305      	movs	r3, #5
 8002500:	60fb      	str	r3, [r7, #12]
 8002502:	e008      	b.n	8002516 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel6)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	4a0d      	ldr	r2, [pc, #52]	; (800253c <DFSDM_GetChannelFromInstance+0x94>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d102      	bne.n	8002512 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 6;
 800250c:	2306      	movs	r3, #6
 800250e:	60fb      	str	r3, [r7, #12]
 8002510:	e001      	b.n	8002516 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else /* DFSDM1_Channel7 */
  {
    channel = 7;
 8002512:	2307      	movs	r3, #7
 8002514:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002516:	68fb      	ldr	r3, [r7, #12]
}
 8002518:	4618      	mov	r0, r3
 800251a:	3714      	adds	r7, #20
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr
 8002524:	40017800 	.word	0x40017800
 8002528:	40017820 	.word	0x40017820
 800252c:	40017840 	.word	0x40017840
 8002530:	40017860 	.word	0x40017860
 8002534:	40017880 	.word	0x40017880
 8002538:	400178a0 	.word	0x400178a0
 800253c:	400178c0 	.word	0x400178c0

08002540 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b086      	sub	sp, #24
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002548:	f7ff fbb4 	bl	8001cb4 <HAL_GetTick>
 800254c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d101      	bne.n	8002558 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e314      	b.n	8002b82 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a66      	ldr	r2, [pc, #408]	; (80026f8 <HAL_DMA_Init+0x1b8>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d04a      	beq.n	80025f8 <HAL_DMA_Init+0xb8>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a65      	ldr	r2, [pc, #404]	; (80026fc <HAL_DMA_Init+0x1bc>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d045      	beq.n	80025f8 <HAL_DMA_Init+0xb8>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a63      	ldr	r2, [pc, #396]	; (8002700 <HAL_DMA_Init+0x1c0>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d040      	beq.n	80025f8 <HAL_DMA_Init+0xb8>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a62      	ldr	r2, [pc, #392]	; (8002704 <HAL_DMA_Init+0x1c4>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d03b      	beq.n	80025f8 <HAL_DMA_Init+0xb8>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a60      	ldr	r2, [pc, #384]	; (8002708 <HAL_DMA_Init+0x1c8>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d036      	beq.n	80025f8 <HAL_DMA_Init+0xb8>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a5f      	ldr	r2, [pc, #380]	; (800270c <HAL_DMA_Init+0x1cc>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d031      	beq.n	80025f8 <HAL_DMA_Init+0xb8>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a5d      	ldr	r2, [pc, #372]	; (8002710 <HAL_DMA_Init+0x1d0>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d02c      	beq.n	80025f8 <HAL_DMA_Init+0xb8>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a5c      	ldr	r2, [pc, #368]	; (8002714 <HAL_DMA_Init+0x1d4>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d027      	beq.n	80025f8 <HAL_DMA_Init+0xb8>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a5a      	ldr	r2, [pc, #360]	; (8002718 <HAL_DMA_Init+0x1d8>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d022      	beq.n	80025f8 <HAL_DMA_Init+0xb8>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a59      	ldr	r2, [pc, #356]	; (800271c <HAL_DMA_Init+0x1dc>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d01d      	beq.n	80025f8 <HAL_DMA_Init+0xb8>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a57      	ldr	r2, [pc, #348]	; (8002720 <HAL_DMA_Init+0x1e0>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d018      	beq.n	80025f8 <HAL_DMA_Init+0xb8>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a56      	ldr	r2, [pc, #344]	; (8002724 <HAL_DMA_Init+0x1e4>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d013      	beq.n	80025f8 <HAL_DMA_Init+0xb8>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a54      	ldr	r2, [pc, #336]	; (8002728 <HAL_DMA_Init+0x1e8>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d00e      	beq.n	80025f8 <HAL_DMA_Init+0xb8>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a53      	ldr	r2, [pc, #332]	; (800272c <HAL_DMA_Init+0x1ec>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d009      	beq.n	80025f8 <HAL_DMA_Init+0xb8>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a51      	ldr	r2, [pc, #324]	; (8002730 <HAL_DMA_Init+0x1f0>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d004      	beq.n	80025f8 <HAL_DMA_Init+0xb8>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a50      	ldr	r2, [pc, #320]	; (8002734 <HAL_DMA_Init+0x1f4>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d101      	bne.n	80025fc <HAL_DMA_Init+0xbc>
 80025f8:	2301      	movs	r3, #1
 80025fa:	e000      	b.n	80025fe <HAL_DMA_Init+0xbe>
 80025fc:	2300      	movs	r3, #0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	f000 813c 	beq.w	800287c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2202      	movs	r2, #2
 8002608:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a37      	ldr	r2, [pc, #220]	; (80026f8 <HAL_DMA_Init+0x1b8>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d04a      	beq.n	80026b4 <HAL_DMA_Init+0x174>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a36      	ldr	r2, [pc, #216]	; (80026fc <HAL_DMA_Init+0x1bc>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d045      	beq.n	80026b4 <HAL_DMA_Init+0x174>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a34      	ldr	r2, [pc, #208]	; (8002700 <HAL_DMA_Init+0x1c0>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d040      	beq.n	80026b4 <HAL_DMA_Init+0x174>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a33      	ldr	r2, [pc, #204]	; (8002704 <HAL_DMA_Init+0x1c4>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d03b      	beq.n	80026b4 <HAL_DMA_Init+0x174>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a31      	ldr	r2, [pc, #196]	; (8002708 <HAL_DMA_Init+0x1c8>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d036      	beq.n	80026b4 <HAL_DMA_Init+0x174>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a30      	ldr	r2, [pc, #192]	; (800270c <HAL_DMA_Init+0x1cc>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d031      	beq.n	80026b4 <HAL_DMA_Init+0x174>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a2e      	ldr	r2, [pc, #184]	; (8002710 <HAL_DMA_Init+0x1d0>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d02c      	beq.n	80026b4 <HAL_DMA_Init+0x174>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a2d      	ldr	r2, [pc, #180]	; (8002714 <HAL_DMA_Init+0x1d4>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d027      	beq.n	80026b4 <HAL_DMA_Init+0x174>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a2b      	ldr	r2, [pc, #172]	; (8002718 <HAL_DMA_Init+0x1d8>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d022      	beq.n	80026b4 <HAL_DMA_Init+0x174>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a2a      	ldr	r2, [pc, #168]	; (800271c <HAL_DMA_Init+0x1dc>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d01d      	beq.n	80026b4 <HAL_DMA_Init+0x174>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a28      	ldr	r2, [pc, #160]	; (8002720 <HAL_DMA_Init+0x1e0>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d018      	beq.n	80026b4 <HAL_DMA_Init+0x174>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a27      	ldr	r2, [pc, #156]	; (8002724 <HAL_DMA_Init+0x1e4>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d013      	beq.n	80026b4 <HAL_DMA_Init+0x174>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a25      	ldr	r2, [pc, #148]	; (8002728 <HAL_DMA_Init+0x1e8>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d00e      	beq.n	80026b4 <HAL_DMA_Init+0x174>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a24      	ldr	r2, [pc, #144]	; (800272c <HAL_DMA_Init+0x1ec>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d009      	beq.n	80026b4 <HAL_DMA_Init+0x174>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a22      	ldr	r2, [pc, #136]	; (8002730 <HAL_DMA_Init+0x1f0>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d004      	beq.n	80026b4 <HAL_DMA_Init+0x174>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a21      	ldr	r2, [pc, #132]	; (8002734 <HAL_DMA_Init+0x1f4>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d108      	bne.n	80026c6 <HAL_DMA_Init+0x186>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f022 0201 	bic.w	r2, r2, #1
 80026c2:	601a      	str	r2, [r3, #0]
 80026c4:	e007      	b.n	80026d6 <HAL_DMA_Init+0x196>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f022 0201 	bic.w	r2, r2, #1
 80026d4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80026d6:	e02f      	b.n	8002738 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026d8:	f7ff faec 	bl	8001cb4 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b05      	cmp	r3, #5
 80026e4:	d928      	bls.n	8002738 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2220      	movs	r2, #32
 80026ea:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2203      	movs	r2, #3
 80026f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e244      	b.n	8002b82 <HAL_DMA_Init+0x642>
 80026f8:	40020010 	.word	0x40020010
 80026fc:	40020028 	.word	0x40020028
 8002700:	40020040 	.word	0x40020040
 8002704:	40020058 	.word	0x40020058
 8002708:	40020070 	.word	0x40020070
 800270c:	40020088 	.word	0x40020088
 8002710:	400200a0 	.word	0x400200a0
 8002714:	400200b8 	.word	0x400200b8
 8002718:	40020410 	.word	0x40020410
 800271c:	40020428 	.word	0x40020428
 8002720:	40020440 	.word	0x40020440
 8002724:	40020458 	.word	0x40020458
 8002728:	40020470 	.word	0x40020470
 800272c:	40020488 	.word	0x40020488
 8002730:	400204a0 	.word	0x400204a0
 8002734:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	2b00      	cmp	r3, #0
 8002744:	d1c8      	bne.n	80026d8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800274e:	697a      	ldr	r2, [r7, #20]
 8002750:	4b84      	ldr	r3, [pc, #528]	; (8002964 <HAL_DMA_Init+0x424>)
 8002752:	4013      	ands	r3, r2
 8002754:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800275e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	691b      	ldr	r3, [r3, #16]
 8002764:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800276a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002776:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a1b      	ldr	r3, [r3, #32]
 800277c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800277e:	697a      	ldr	r2, [r7, #20]
 8002780:	4313      	orrs	r3, r2
 8002782:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002788:	2b04      	cmp	r3, #4
 800278a:	d107      	bne.n	800279c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002794:	4313      	orrs	r3, r2
 8002796:	697a      	ldr	r2, [r7, #20]
 8002798:	4313      	orrs	r3, r2
 800279a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	2b28      	cmp	r3, #40	; 0x28
 80027a2:	d903      	bls.n	80027ac <HAL_DMA_Init+0x26c>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	2b2e      	cmp	r3, #46	; 0x2e
 80027aa:	d91f      	bls.n	80027ec <HAL_DMA_Init+0x2ac>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	2b3e      	cmp	r3, #62	; 0x3e
 80027b2:	d903      	bls.n	80027bc <HAL_DMA_Init+0x27c>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	2b42      	cmp	r3, #66	; 0x42
 80027ba:	d917      	bls.n	80027ec <HAL_DMA_Init+0x2ac>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	2b46      	cmp	r3, #70	; 0x46
 80027c2:	d903      	bls.n	80027cc <HAL_DMA_Init+0x28c>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	2b48      	cmp	r3, #72	; 0x48
 80027ca:	d90f      	bls.n	80027ec <HAL_DMA_Init+0x2ac>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	2b4e      	cmp	r3, #78	; 0x4e
 80027d2:	d903      	bls.n	80027dc <HAL_DMA_Init+0x29c>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	2b52      	cmp	r3, #82	; 0x52
 80027da:	d907      	bls.n	80027ec <HAL_DMA_Init+0x2ac>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	2b73      	cmp	r3, #115	; 0x73
 80027e2:	d905      	bls.n	80027f0 <HAL_DMA_Init+0x2b0>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	2b77      	cmp	r3, #119	; 0x77
 80027ea:	d801      	bhi.n	80027f0 <HAL_DMA_Init+0x2b0>
 80027ec:	2301      	movs	r3, #1
 80027ee:	e000      	b.n	80027f2 <HAL_DMA_Init+0x2b2>
 80027f0:	2300      	movs	r3, #0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d003      	beq.n	80027fe <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027fc:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	697a      	ldr	r2, [r7, #20]
 8002804:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	695b      	ldr	r3, [r3, #20]
 800280c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	f023 0307 	bic.w	r3, r3, #7
 8002814:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281a:	697a      	ldr	r2, [r7, #20]
 800281c:	4313      	orrs	r3, r2
 800281e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002824:	2b04      	cmp	r3, #4
 8002826:	d117      	bne.n	8002858 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800282c:	697a      	ldr	r2, [r7, #20]
 800282e:	4313      	orrs	r3, r2
 8002830:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00e      	beq.n	8002858 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f002 fcf0 	bl	8005220 <DMA_CheckFifoParam>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d008      	beq.n	8002858 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2240      	movs	r2, #64	; 0x40
 800284a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e194      	b.n	8002b82 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	697a      	ldr	r2, [r7, #20]
 800285e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f002 fc2b 	bl	80050bc <DMA_CalcBaseAndBitshift>
 8002866:	4603      	mov	r3, r0
 8002868:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800286e:	f003 031f 	and.w	r3, r3, #31
 8002872:	223f      	movs	r2, #63	; 0x3f
 8002874:	409a      	lsls	r2, r3
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	609a      	str	r2, [r3, #8]
 800287a:	e0ca      	b.n	8002a12 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a39      	ldr	r2, [pc, #228]	; (8002968 <HAL_DMA_Init+0x428>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d022      	beq.n	80028cc <HAL_DMA_Init+0x38c>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a38      	ldr	r2, [pc, #224]	; (800296c <HAL_DMA_Init+0x42c>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d01d      	beq.n	80028cc <HAL_DMA_Init+0x38c>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a36      	ldr	r2, [pc, #216]	; (8002970 <HAL_DMA_Init+0x430>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d018      	beq.n	80028cc <HAL_DMA_Init+0x38c>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a35      	ldr	r2, [pc, #212]	; (8002974 <HAL_DMA_Init+0x434>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d013      	beq.n	80028cc <HAL_DMA_Init+0x38c>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a33      	ldr	r2, [pc, #204]	; (8002978 <HAL_DMA_Init+0x438>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d00e      	beq.n	80028cc <HAL_DMA_Init+0x38c>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a32      	ldr	r2, [pc, #200]	; (800297c <HAL_DMA_Init+0x43c>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d009      	beq.n	80028cc <HAL_DMA_Init+0x38c>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a30      	ldr	r2, [pc, #192]	; (8002980 <HAL_DMA_Init+0x440>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d004      	beq.n	80028cc <HAL_DMA_Init+0x38c>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a2f      	ldr	r2, [pc, #188]	; (8002984 <HAL_DMA_Init+0x444>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d101      	bne.n	80028d0 <HAL_DMA_Init+0x390>
 80028cc:	2301      	movs	r3, #1
 80028ce:	e000      	b.n	80028d2 <HAL_DMA_Init+0x392>
 80028d0:	2300      	movs	r3, #0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	f000 8094 	beq.w	8002a00 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a22      	ldr	r2, [pc, #136]	; (8002968 <HAL_DMA_Init+0x428>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d021      	beq.n	8002926 <HAL_DMA_Init+0x3e6>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a21      	ldr	r2, [pc, #132]	; (800296c <HAL_DMA_Init+0x42c>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d01c      	beq.n	8002926 <HAL_DMA_Init+0x3e6>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a1f      	ldr	r2, [pc, #124]	; (8002970 <HAL_DMA_Init+0x430>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d017      	beq.n	8002926 <HAL_DMA_Init+0x3e6>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a1e      	ldr	r2, [pc, #120]	; (8002974 <HAL_DMA_Init+0x434>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d012      	beq.n	8002926 <HAL_DMA_Init+0x3e6>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a1c      	ldr	r2, [pc, #112]	; (8002978 <HAL_DMA_Init+0x438>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d00d      	beq.n	8002926 <HAL_DMA_Init+0x3e6>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a1b      	ldr	r2, [pc, #108]	; (800297c <HAL_DMA_Init+0x43c>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d008      	beq.n	8002926 <HAL_DMA_Init+0x3e6>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a19      	ldr	r2, [pc, #100]	; (8002980 <HAL_DMA_Init+0x440>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d003      	beq.n	8002926 <HAL_DMA_Init+0x3e6>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a18      	ldr	r2, [pc, #96]	; (8002984 <HAL_DMA_Init+0x444>)
 8002924:	4293      	cmp	r3, r2
 8002926:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2202      	movs	r2, #2
 800292c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002940:	697a      	ldr	r2, [r7, #20]
 8002942:	4b11      	ldr	r3, [pc, #68]	; (8002988 <HAL_DMA_Init+0x448>)
 8002944:	4013      	ands	r3, r2
 8002946:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	2b40      	cmp	r3, #64	; 0x40
 800294e:	d01d      	beq.n	800298c <HAL_DMA_Init+0x44c>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	2b80      	cmp	r3, #128	; 0x80
 8002956:	d102      	bne.n	800295e <HAL_DMA_Init+0x41e>
 8002958:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800295c:	e017      	b.n	800298e <HAL_DMA_Init+0x44e>
 800295e:	2300      	movs	r3, #0
 8002960:	e015      	b.n	800298e <HAL_DMA_Init+0x44e>
 8002962:	bf00      	nop
 8002964:	fe10803f 	.word	0xfe10803f
 8002968:	58025408 	.word	0x58025408
 800296c:	5802541c 	.word	0x5802541c
 8002970:	58025430 	.word	0x58025430
 8002974:	58025444 	.word	0x58025444
 8002978:	58025458 	.word	0x58025458
 800297c:	5802546c 	.word	0x5802546c
 8002980:	58025480 	.word	0x58025480
 8002984:	58025494 	.word	0x58025494
 8002988:	fffe000f 	.word	0xfffe000f
 800298c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	68d2      	ldr	r2, [r2, #12]
 8002992:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002994:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800299c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	695b      	ldr	r3, [r3, #20]
 80029a2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80029a4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	699b      	ldr	r3, [r3, #24]
 80029aa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80029ac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	69db      	ldr	r3, [r3, #28]
 80029b2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80029b4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a1b      	ldr	r3, [r3, #32]
 80029ba:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80029bc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80029be:	697a      	ldr	r2, [r7, #20]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	697a      	ldr	r2, [r7, #20]
 80029ca:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	461a      	mov	r2, r3
 80029d2:	4b6e      	ldr	r3, [pc, #440]	; (8002b8c <HAL_DMA_Init+0x64c>)
 80029d4:	4413      	add	r3, r2
 80029d6:	4a6e      	ldr	r2, [pc, #440]	; (8002b90 <HAL_DMA_Init+0x650>)
 80029d8:	fba2 2303 	umull	r2, r3, r2, r3
 80029dc:	091b      	lsrs	r3, r3, #4
 80029de:	009a      	lsls	r2, r3, #2
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f002 fb69 	bl	80050bc <DMA_CalcBaseAndBitshift>
 80029ea:	4603      	mov	r3, r0
 80029ec:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f2:	f003 031f 	and.w	r3, r3, #31
 80029f6:	2201      	movs	r2, #1
 80029f8:	409a      	lsls	r2, r3
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	605a      	str	r2, [r3, #4]
 80029fe:	e008      	b.n	8002a12 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2240      	movs	r2, #64	; 0x40
 8002a04:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2203      	movs	r2, #3
 8002a0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e0b7      	b.n	8002b82 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a5f      	ldr	r2, [pc, #380]	; (8002b94 <HAL_DMA_Init+0x654>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d072      	beq.n	8002b02 <HAL_DMA_Init+0x5c2>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a5d      	ldr	r2, [pc, #372]	; (8002b98 <HAL_DMA_Init+0x658>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d06d      	beq.n	8002b02 <HAL_DMA_Init+0x5c2>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a5c      	ldr	r2, [pc, #368]	; (8002b9c <HAL_DMA_Init+0x65c>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d068      	beq.n	8002b02 <HAL_DMA_Init+0x5c2>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a5a      	ldr	r2, [pc, #360]	; (8002ba0 <HAL_DMA_Init+0x660>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d063      	beq.n	8002b02 <HAL_DMA_Init+0x5c2>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a59      	ldr	r2, [pc, #356]	; (8002ba4 <HAL_DMA_Init+0x664>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d05e      	beq.n	8002b02 <HAL_DMA_Init+0x5c2>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a57      	ldr	r2, [pc, #348]	; (8002ba8 <HAL_DMA_Init+0x668>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d059      	beq.n	8002b02 <HAL_DMA_Init+0x5c2>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a56      	ldr	r2, [pc, #344]	; (8002bac <HAL_DMA_Init+0x66c>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d054      	beq.n	8002b02 <HAL_DMA_Init+0x5c2>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a54      	ldr	r2, [pc, #336]	; (8002bb0 <HAL_DMA_Init+0x670>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d04f      	beq.n	8002b02 <HAL_DMA_Init+0x5c2>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a53      	ldr	r2, [pc, #332]	; (8002bb4 <HAL_DMA_Init+0x674>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d04a      	beq.n	8002b02 <HAL_DMA_Init+0x5c2>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a51      	ldr	r2, [pc, #324]	; (8002bb8 <HAL_DMA_Init+0x678>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d045      	beq.n	8002b02 <HAL_DMA_Init+0x5c2>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a50      	ldr	r2, [pc, #320]	; (8002bbc <HAL_DMA_Init+0x67c>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d040      	beq.n	8002b02 <HAL_DMA_Init+0x5c2>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a4e      	ldr	r2, [pc, #312]	; (8002bc0 <HAL_DMA_Init+0x680>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d03b      	beq.n	8002b02 <HAL_DMA_Init+0x5c2>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a4d      	ldr	r2, [pc, #308]	; (8002bc4 <HAL_DMA_Init+0x684>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d036      	beq.n	8002b02 <HAL_DMA_Init+0x5c2>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a4b      	ldr	r2, [pc, #300]	; (8002bc8 <HAL_DMA_Init+0x688>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d031      	beq.n	8002b02 <HAL_DMA_Init+0x5c2>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a4a      	ldr	r2, [pc, #296]	; (8002bcc <HAL_DMA_Init+0x68c>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d02c      	beq.n	8002b02 <HAL_DMA_Init+0x5c2>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a48      	ldr	r2, [pc, #288]	; (8002bd0 <HAL_DMA_Init+0x690>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d027      	beq.n	8002b02 <HAL_DMA_Init+0x5c2>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a47      	ldr	r2, [pc, #284]	; (8002bd4 <HAL_DMA_Init+0x694>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d022      	beq.n	8002b02 <HAL_DMA_Init+0x5c2>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a45      	ldr	r2, [pc, #276]	; (8002bd8 <HAL_DMA_Init+0x698>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d01d      	beq.n	8002b02 <HAL_DMA_Init+0x5c2>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a44      	ldr	r2, [pc, #272]	; (8002bdc <HAL_DMA_Init+0x69c>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d018      	beq.n	8002b02 <HAL_DMA_Init+0x5c2>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a42      	ldr	r2, [pc, #264]	; (8002be0 <HAL_DMA_Init+0x6a0>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d013      	beq.n	8002b02 <HAL_DMA_Init+0x5c2>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a41      	ldr	r2, [pc, #260]	; (8002be4 <HAL_DMA_Init+0x6a4>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d00e      	beq.n	8002b02 <HAL_DMA_Init+0x5c2>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a3f      	ldr	r2, [pc, #252]	; (8002be8 <HAL_DMA_Init+0x6a8>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d009      	beq.n	8002b02 <HAL_DMA_Init+0x5c2>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a3e      	ldr	r2, [pc, #248]	; (8002bec <HAL_DMA_Init+0x6ac>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d004      	beq.n	8002b02 <HAL_DMA_Init+0x5c2>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a3c      	ldr	r2, [pc, #240]	; (8002bf0 <HAL_DMA_Init+0x6b0>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d101      	bne.n	8002b06 <HAL_DMA_Init+0x5c6>
 8002b02:	2301      	movs	r3, #1
 8002b04:	e000      	b.n	8002b08 <HAL_DMA_Init+0x5c8>
 8002b06:	2300      	movs	r3, #0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d032      	beq.n	8002b72 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f002 fc03 	bl	8005318 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	2b80      	cmp	r3, #128	; 0x80
 8002b18:	d102      	bne.n	8002b20 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685a      	ldr	r2, [r3, #4]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b28:	b2d2      	uxtb	r2, r2
 8002b2a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002b34:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d010      	beq.n	8002b60 <HAL_DMA_Init+0x620>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	2b08      	cmp	r3, #8
 8002b44:	d80c      	bhi.n	8002b60 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f002 fc80 	bl	800544c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b50:	2200      	movs	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002b5c:	605a      	str	r2, [r3, #4]
 8002b5e:	e008      	b.n	8002b72 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3718      	adds	r7, #24
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	a7fdabf8 	.word	0xa7fdabf8
 8002b90:	cccccccd 	.word	0xcccccccd
 8002b94:	40020010 	.word	0x40020010
 8002b98:	40020028 	.word	0x40020028
 8002b9c:	40020040 	.word	0x40020040
 8002ba0:	40020058 	.word	0x40020058
 8002ba4:	40020070 	.word	0x40020070
 8002ba8:	40020088 	.word	0x40020088
 8002bac:	400200a0 	.word	0x400200a0
 8002bb0:	400200b8 	.word	0x400200b8
 8002bb4:	40020410 	.word	0x40020410
 8002bb8:	40020428 	.word	0x40020428
 8002bbc:	40020440 	.word	0x40020440
 8002bc0:	40020458 	.word	0x40020458
 8002bc4:	40020470 	.word	0x40020470
 8002bc8:	40020488 	.word	0x40020488
 8002bcc:	400204a0 	.word	0x400204a0
 8002bd0:	400204b8 	.word	0x400204b8
 8002bd4:	58025408 	.word	0x58025408
 8002bd8:	5802541c 	.word	0x5802541c
 8002bdc:	58025430 	.word	0x58025430
 8002be0:	58025444 	.word	0x58025444
 8002be4:	58025458 	.word	0x58025458
 8002be8:	5802546c 	.word	0x5802546c
 8002bec:	58025480 	.word	0x58025480
 8002bf0:	58025494 	.word	0x58025494

08002bf4 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d101      	bne.n	8002c06 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e1a8      	b.n	8002f58 <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a82      	ldr	r2, [pc, #520]	; (8002e14 <HAL_DMA_DeInit+0x220>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d04a      	beq.n	8002ca6 <HAL_DMA_DeInit+0xb2>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a80      	ldr	r2, [pc, #512]	; (8002e18 <HAL_DMA_DeInit+0x224>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d045      	beq.n	8002ca6 <HAL_DMA_DeInit+0xb2>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a7f      	ldr	r2, [pc, #508]	; (8002e1c <HAL_DMA_DeInit+0x228>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d040      	beq.n	8002ca6 <HAL_DMA_DeInit+0xb2>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a7d      	ldr	r2, [pc, #500]	; (8002e20 <HAL_DMA_DeInit+0x22c>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d03b      	beq.n	8002ca6 <HAL_DMA_DeInit+0xb2>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a7c      	ldr	r2, [pc, #496]	; (8002e24 <HAL_DMA_DeInit+0x230>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d036      	beq.n	8002ca6 <HAL_DMA_DeInit+0xb2>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a7a      	ldr	r2, [pc, #488]	; (8002e28 <HAL_DMA_DeInit+0x234>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d031      	beq.n	8002ca6 <HAL_DMA_DeInit+0xb2>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a79      	ldr	r2, [pc, #484]	; (8002e2c <HAL_DMA_DeInit+0x238>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d02c      	beq.n	8002ca6 <HAL_DMA_DeInit+0xb2>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a77      	ldr	r2, [pc, #476]	; (8002e30 <HAL_DMA_DeInit+0x23c>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d027      	beq.n	8002ca6 <HAL_DMA_DeInit+0xb2>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a76      	ldr	r2, [pc, #472]	; (8002e34 <HAL_DMA_DeInit+0x240>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d022      	beq.n	8002ca6 <HAL_DMA_DeInit+0xb2>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a74      	ldr	r2, [pc, #464]	; (8002e38 <HAL_DMA_DeInit+0x244>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d01d      	beq.n	8002ca6 <HAL_DMA_DeInit+0xb2>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a73      	ldr	r2, [pc, #460]	; (8002e3c <HAL_DMA_DeInit+0x248>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d018      	beq.n	8002ca6 <HAL_DMA_DeInit+0xb2>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a71      	ldr	r2, [pc, #452]	; (8002e40 <HAL_DMA_DeInit+0x24c>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d013      	beq.n	8002ca6 <HAL_DMA_DeInit+0xb2>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a70      	ldr	r2, [pc, #448]	; (8002e44 <HAL_DMA_DeInit+0x250>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d00e      	beq.n	8002ca6 <HAL_DMA_DeInit+0xb2>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a6e      	ldr	r2, [pc, #440]	; (8002e48 <HAL_DMA_DeInit+0x254>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d009      	beq.n	8002ca6 <HAL_DMA_DeInit+0xb2>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a6d      	ldr	r2, [pc, #436]	; (8002e4c <HAL_DMA_DeInit+0x258>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d004      	beq.n	8002ca6 <HAL_DMA_DeInit+0xb2>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a6b      	ldr	r2, [pc, #428]	; (8002e50 <HAL_DMA_DeInit+0x25c>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d108      	bne.n	8002cb8 <HAL_DMA_DeInit+0xc4>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f022 0201 	bic.w	r2, r2, #1
 8002cb4:	601a      	str	r2, [r3, #0]
 8002cb6:	e007      	b.n	8002cc8 <HAL_DMA_DeInit+0xd4>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f022 0201 	bic.w	r2, r2, #1
 8002cc6:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a51      	ldr	r2, [pc, #324]	; (8002e14 <HAL_DMA_DeInit+0x220>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d04a      	beq.n	8002d68 <HAL_DMA_DeInit+0x174>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a50      	ldr	r2, [pc, #320]	; (8002e18 <HAL_DMA_DeInit+0x224>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d045      	beq.n	8002d68 <HAL_DMA_DeInit+0x174>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a4e      	ldr	r2, [pc, #312]	; (8002e1c <HAL_DMA_DeInit+0x228>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d040      	beq.n	8002d68 <HAL_DMA_DeInit+0x174>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a4d      	ldr	r2, [pc, #308]	; (8002e20 <HAL_DMA_DeInit+0x22c>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d03b      	beq.n	8002d68 <HAL_DMA_DeInit+0x174>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a4b      	ldr	r2, [pc, #300]	; (8002e24 <HAL_DMA_DeInit+0x230>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d036      	beq.n	8002d68 <HAL_DMA_DeInit+0x174>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a4a      	ldr	r2, [pc, #296]	; (8002e28 <HAL_DMA_DeInit+0x234>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d031      	beq.n	8002d68 <HAL_DMA_DeInit+0x174>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a48      	ldr	r2, [pc, #288]	; (8002e2c <HAL_DMA_DeInit+0x238>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d02c      	beq.n	8002d68 <HAL_DMA_DeInit+0x174>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a47      	ldr	r2, [pc, #284]	; (8002e30 <HAL_DMA_DeInit+0x23c>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d027      	beq.n	8002d68 <HAL_DMA_DeInit+0x174>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a45      	ldr	r2, [pc, #276]	; (8002e34 <HAL_DMA_DeInit+0x240>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d022      	beq.n	8002d68 <HAL_DMA_DeInit+0x174>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a44      	ldr	r2, [pc, #272]	; (8002e38 <HAL_DMA_DeInit+0x244>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d01d      	beq.n	8002d68 <HAL_DMA_DeInit+0x174>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a42      	ldr	r2, [pc, #264]	; (8002e3c <HAL_DMA_DeInit+0x248>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d018      	beq.n	8002d68 <HAL_DMA_DeInit+0x174>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a41      	ldr	r2, [pc, #260]	; (8002e40 <HAL_DMA_DeInit+0x24c>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d013      	beq.n	8002d68 <HAL_DMA_DeInit+0x174>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a3f      	ldr	r2, [pc, #252]	; (8002e44 <HAL_DMA_DeInit+0x250>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d00e      	beq.n	8002d68 <HAL_DMA_DeInit+0x174>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a3e      	ldr	r2, [pc, #248]	; (8002e48 <HAL_DMA_DeInit+0x254>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d009      	beq.n	8002d68 <HAL_DMA_DeInit+0x174>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a3c      	ldr	r2, [pc, #240]	; (8002e4c <HAL_DMA_DeInit+0x258>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d004      	beq.n	8002d68 <HAL_DMA_DeInit+0x174>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a3b      	ldr	r2, [pc, #236]	; (8002e50 <HAL_DMA_DeInit+0x25c>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d101      	bne.n	8002d6c <HAL_DMA_DeInit+0x178>
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e000      	b.n	8002d6e <HAL_DMA_DeInit+0x17a>
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d025      	beq.n	8002dbe <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2200      	movs	r2, #0
 8002d78:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2200      	movs	r2, #0
 8002d88:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2200      	movs	r2, #0
 8002d98:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	2221      	movs	r2, #33	; 0x21
 8002da0:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f002 f98a 	bl	80050bc <DMA_CalcBaseAndBitshift>
 8002da8:	4603      	mov	r3, r0
 8002daa:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002db0:	f003 031f 	and.w	r3, r3, #31
 8002db4:	223f      	movs	r2, #63	; 0x3f
 8002db6:	409a      	lsls	r2, r3
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	609a      	str	r2, [r3, #8]
 8002dbc:	e081      	b.n	8002ec2 <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a24      	ldr	r2, [pc, #144]	; (8002e54 <HAL_DMA_DeInit+0x260>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d022      	beq.n	8002e0e <HAL_DMA_DeInit+0x21a>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a22      	ldr	r2, [pc, #136]	; (8002e58 <HAL_DMA_DeInit+0x264>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d01d      	beq.n	8002e0e <HAL_DMA_DeInit+0x21a>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a21      	ldr	r2, [pc, #132]	; (8002e5c <HAL_DMA_DeInit+0x268>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d018      	beq.n	8002e0e <HAL_DMA_DeInit+0x21a>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a1f      	ldr	r2, [pc, #124]	; (8002e60 <HAL_DMA_DeInit+0x26c>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d013      	beq.n	8002e0e <HAL_DMA_DeInit+0x21a>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a1e      	ldr	r2, [pc, #120]	; (8002e64 <HAL_DMA_DeInit+0x270>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d00e      	beq.n	8002e0e <HAL_DMA_DeInit+0x21a>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a1c      	ldr	r2, [pc, #112]	; (8002e68 <HAL_DMA_DeInit+0x274>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d009      	beq.n	8002e0e <HAL_DMA_DeInit+0x21a>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a1b      	ldr	r2, [pc, #108]	; (8002e6c <HAL_DMA_DeInit+0x278>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d004      	beq.n	8002e0e <HAL_DMA_DeInit+0x21a>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a19      	ldr	r2, [pc, #100]	; (8002e70 <HAL_DMA_DeInit+0x27c>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d132      	bne.n	8002e74 <HAL_DMA_DeInit+0x280>
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e031      	b.n	8002e76 <HAL_DMA_DeInit+0x282>
 8002e12:	bf00      	nop
 8002e14:	40020010 	.word	0x40020010
 8002e18:	40020028 	.word	0x40020028
 8002e1c:	40020040 	.word	0x40020040
 8002e20:	40020058 	.word	0x40020058
 8002e24:	40020070 	.word	0x40020070
 8002e28:	40020088 	.word	0x40020088
 8002e2c:	400200a0 	.word	0x400200a0
 8002e30:	400200b8 	.word	0x400200b8
 8002e34:	40020410 	.word	0x40020410
 8002e38:	40020428 	.word	0x40020428
 8002e3c:	40020440 	.word	0x40020440
 8002e40:	40020458 	.word	0x40020458
 8002e44:	40020470 	.word	0x40020470
 8002e48:	40020488 	.word	0x40020488
 8002e4c:	400204a0 	.word	0x400204a0
 8002e50:	400204b8 	.word	0x400204b8
 8002e54:	58025408 	.word	0x58025408
 8002e58:	5802541c 	.word	0x5802541c
 8002e5c:	58025430 	.word	0x58025430
 8002e60:	58025444 	.word	0x58025444
 8002e64:	58025458 	.word	0x58025458
 8002e68:	5802546c 	.word	0x5802546c
 8002e6c:	58025480 	.word	0x58025480
 8002e70:	58025494 	.word	0x58025494
 8002e74:	2300      	movs	r3, #0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d021      	beq.n	8002ebe <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2200      	movs	r2, #0
 8002e88:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2200      	movs	r2, #0
 8002e98:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f002 f90a 	bl	80050bc <DMA_CalcBaseAndBitshift>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eb0:	f003 031f 	and.w	r3, r3, #31
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	409a      	lsls	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	605a      	str	r2, [r3, #4]
 8002ebc:	e001      	b.n	8002ec2 <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e04a      	b.n	8002f58 <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f002 fa28 	bl	8005318 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d008      	beq.n	8002ee2 <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002ee0:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d00f      	beq.n	8002f0a <HAL_DMA_DeInit+0x316>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	2b08      	cmp	r3, #8
 8002ef0:	d80b      	bhi.n	8002f0a <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f002 faaa 	bl	800544c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002efc:	2200      	movs	r2, #0
 8002efe:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002f08:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	671a      	str	r2, [r3, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	675a      	str	r2, [r3, #116]	; 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback     = NULL;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback      = NULL;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback      = NULL;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002f56:	2300      	movs	r3, #0
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3710      	adds	r7, #16
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b086      	sub	sp, #24
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	607a      	str	r2, [r7, #4]
 8002f6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d101      	bne.n	8002f7c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e226      	b.n	80033ca <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d101      	bne.n	8002f8a <HAL_DMA_Start_IT+0x2a>
 8002f86:	2302      	movs	r3, #2
 8002f88:	e21f      	b.n	80033ca <HAL_DMA_Start_IT+0x46a>
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	f040 820a 	bne.w	80033b4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2202      	movs	r2, #2
 8002fa4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2200      	movs	r2, #0
 8002fac:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a68      	ldr	r2, [pc, #416]	; (8003154 <HAL_DMA_Start_IT+0x1f4>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d04a      	beq.n	800304e <HAL_DMA_Start_IT+0xee>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a66      	ldr	r2, [pc, #408]	; (8003158 <HAL_DMA_Start_IT+0x1f8>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d045      	beq.n	800304e <HAL_DMA_Start_IT+0xee>
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a65      	ldr	r2, [pc, #404]	; (800315c <HAL_DMA_Start_IT+0x1fc>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d040      	beq.n	800304e <HAL_DMA_Start_IT+0xee>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a63      	ldr	r2, [pc, #396]	; (8003160 <HAL_DMA_Start_IT+0x200>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d03b      	beq.n	800304e <HAL_DMA_Start_IT+0xee>
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a62      	ldr	r2, [pc, #392]	; (8003164 <HAL_DMA_Start_IT+0x204>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d036      	beq.n	800304e <HAL_DMA_Start_IT+0xee>
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a60      	ldr	r2, [pc, #384]	; (8003168 <HAL_DMA_Start_IT+0x208>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d031      	beq.n	800304e <HAL_DMA_Start_IT+0xee>
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a5f      	ldr	r2, [pc, #380]	; (800316c <HAL_DMA_Start_IT+0x20c>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d02c      	beq.n	800304e <HAL_DMA_Start_IT+0xee>
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a5d      	ldr	r2, [pc, #372]	; (8003170 <HAL_DMA_Start_IT+0x210>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d027      	beq.n	800304e <HAL_DMA_Start_IT+0xee>
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a5c      	ldr	r2, [pc, #368]	; (8003174 <HAL_DMA_Start_IT+0x214>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d022      	beq.n	800304e <HAL_DMA_Start_IT+0xee>
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a5a      	ldr	r2, [pc, #360]	; (8003178 <HAL_DMA_Start_IT+0x218>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d01d      	beq.n	800304e <HAL_DMA_Start_IT+0xee>
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a59      	ldr	r2, [pc, #356]	; (800317c <HAL_DMA_Start_IT+0x21c>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d018      	beq.n	800304e <HAL_DMA_Start_IT+0xee>
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a57      	ldr	r2, [pc, #348]	; (8003180 <HAL_DMA_Start_IT+0x220>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d013      	beq.n	800304e <HAL_DMA_Start_IT+0xee>
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a56      	ldr	r2, [pc, #344]	; (8003184 <HAL_DMA_Start_IT+0x224>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d00e      	beq.n	800304e <HAL_DMA_Start_IT+0xee>
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a54      	ldr	r2, [pc, #336]	; (8003188 <HAL_DMA_Start_IT+0x228>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d009      	beq.n	800304e <HAL_DMA_Start_IT+0xee>
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a53      	ldr	r2, [pc, #332]	; (800318c <HAL_DMA_Start_IT+0x22c>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d004      	beq.n	800304e <HAL_DMA_Start_IT+0xee>
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a51      	ldr	r2, [pc, #324]	; (8003190 <HAL_DMA_Start_IT+0x230>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d108      	bne.n	8003060 <HAL_DMA_Start_IT+0x100>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f022 0201 	bic.w	r2, r2, #1
 800305c:	601a      	str	r2, [r3, #0]
 800305e:	e007      	b.n	8003070 <HAL_DMA_Start_IT+0x110>
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f022 0201 	bic.w	r2, r2, #1
 800306e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	68b9      	ldr	r1, [r7, #8]
 8003076:	68f8      	ldr	r0, [r7, #12]
 8003078:	f001 fe74 	bl	8004d64 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a34      	ldr	r2, [pc, #208]	; (8003154 <HAL_DMA_Start_IT+0x1f4>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d04a      	beq.n	800311c <HAL_DMA_Start_IT+0x1bc>
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a33      	ldr	r2, [pc, #204]	; (8003158 <HAL_DMA_Start_IT+0x1f8>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d045      	beq.n	800311c <HAL_DMA_Start_IT+0x1bc>
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a31      	ldr	r2, [pc, #196]	; (800315c <HAL_DMA_Start_IT+0x1fc>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d040      	beq.n	800311c <HAL_DMA_Start_IT+0x1bc>
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a30      	ldr	r2, [pc, #192]	; (8003160 <HAL_DMA_Start_IT+0x200>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d03b      	beq.n	800311c <HAL_DMA_Start_IT+0x1bc>
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a2e      	ldr	r2, [pc, #184]	; (8003164 <HAL_DMA_Start_IT+0x204>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d036      	beq.n	800311c <HAL_DMA_Start_IT+0x1bc>
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a2d      	ldr	r2, [pc, #180]	; (8003168 <HAL_DMA_Start_IT+0x208>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d031      	beq.n	800311c <HAL_DMA_Start_IT+0x1bc>
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a2b      	ldr	r2, [pc, #172]	; (800316c <HAL_DMA_Start_IT+0x20c>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d02c      	beq.n	800311c <HAL_DMA_Start_IT+0x1bc>
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a2a      	ldr	r2, [pc, #168]	; (8003170 <HAL_DMA_Start_IT+0x210>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d027      	beq.n	800311c <HAL_DMA_Start_IT+0x1bc>
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a28      	ldr	r2, [pc, #160]	; (8003174 <HAL_DMA_Start_IT+0x214>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d022      	beq.n	800311c <HAL_DMA_Start_IT+0x1bc>
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a27      	ldr	r2, [pc, #156]	; (8003178 <HAL_DMA_Start_IT+0x218>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d01d      	beq.n	800311c <HAL_DMA_Start_IT+0x1bc>
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a25      	ldr	r2, [pc, #148]	; (800317c <HAL_DMA_Start_IT+0x21c>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d018      	beq.n	800311c <HAL_DMA_Start_IT+0x1bc>
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a24      	ldr	r2, [pc, #144]	; (8003180 <HAL_DMA_Start_IT+0x220>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d013      	beq.n	800311c <HAL_DMA_Start_IT+0x1bc>
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a22      	ldr	r2, [pc, #136]	; (8003184 <HAL_DMA_Start_IT+0x224>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d00e      	beq.n	800311c <HAL_DMA_Start_IT+0x1bc>
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a21      	ldr	r2, [pc, #132]	; (8003188 <HAL_DMA_Start_IT+0x228>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d009      	beq.n	800311c <HAL_DMA_Start_IT+0x1bc>
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a1f      	ldr	r2, [pc, #124]	; (800318c <HAL_DMA_Start_IT+0x22c>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d004      	beq.n	800311c <HAL_DMA_Start_IT+0x1bc>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a1e      	ldr	r2, [pc, #120]	; (8003190 <HAL_DMA_Start_IT+0x230>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d101      	bne.n	8003120 <HAL_DMA_Start_IT+0x1c0>
 800311c:	2301      	movs	r3, #1
 800311e:	e000      	b.n	8003122 <HAL_DMA_Start_IT+0x1c2>
 8003120:	2300      	movs	r3, #0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d036      	beq.n	8003194 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f023 021e 	bic.w	r2, r3, #30
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f042 0216 	orr.w	r2, r2, #22
 8003138:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313e:	2b00      	cmp	r3, #0
 8003140:	d03e      	beq.n	80031c0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f042 0208 	orr.w	r2, r2, #8
 8003150:	601a      	str	r2, [r3, #0]
 8003152:	e035      	b.n	80031c0 <HAL_DMA_Start_IT+0x260>
 8003154:	40020010 	.word	0x40020010
 8003158:	40020028 	.word	0x40020028
 800315c:	40020040 	.word	0x40020040
 8003160:	40020058 	.word	0x40020058
 8003164:	40020070 	.word	0x40020070
 8003168:	40020088 	.word	0x40020088
 800316c:	400200a0 	.word	0x400200a0
 8003170:	400200b8 	.word	0x400200b8
 8003174:	40020410 	.word	0x40020410
 8003178:	40020428 	.word	0x40020428
 800317c:	40020440 	.word	0x40020440
 8003180:	40020458 	.word	0x40020458
 8003184:	40020470 	.word	0x40020470
 8003188:	40020488 	.word	0x40020488
 800318c:	400204a0 	.word	0x400204a0
 8003190:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f023 020e 	bic.w	r2, r3, #14
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f042 020a 	orr.w	r2, r2, #10
 80031a6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d007      	beq.n	80031c0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f042 0204 	orr.w	r2, r2, #4
 80031be:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a83      	ldr	r2, [pc, #524]	; (80033d4 <HAL_DMA_Start_IT+0x474>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d072      	beq.n	80032b0 <HAL_DMA_Start_IT+0x350>
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a82      	ldr	r2, [pc, #520]	; (80033d8 <HAL_DMA_Start_IT+0x478>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d06d      	beq.n	80032b0 <HAL_DMA_Start_IT+0x350>
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a80      	ldr	r2, [pc, #512]	; (80033dc <HAL_DMA_Start_IT+0x47c>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d068      	beq.n	80032b0 <HAL_DMA_Start_IT+0x350>
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a7f      	ldr	r2, [pc, #508]	; (80033e0 <HAL_DMA_Start_IT+0x480>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d063      	beq.n	80032b0 <HAL_DMA_Start_IT+0x350>
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a7d      	ldr	r2, [pc, #500]	; (80033e4 <HAL_DMA_Start_IT+0x484>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d05e      	beq.n	80032b0 <HAL_DMA_Start_IT+0x350>
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a7c      	ldr	r2, [pc, #496]	; (80033e8 <HAL_DMA_Start_IT+0x488>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d059      	beq.n	80032b0 <HAL_DMA_Start_IT+0x350>
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a7a      	ldr	r2, [pc, #488]	; (80033ec <HAL_DMA_Start_IT+0x48c>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d054      	beq.n	80032b0 <HAL_DMA_Start_IT+0x350>
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a79      	ldr	r2, [pc, #484]	; (80033f0 <HAL_DMA_Start_IT+0x490>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d04f      	beq.n	80032b0 <HAL_DMA_Start_IT+0x350>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a77      	ldr	r2, [pc, #476]	; (80033f4 <HAL_DMA_Start_IT+0x494>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d04a      	beq.n	80032b0 <HAL_DMA_Start_IT+0x350>
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a76      	ldr	r2, [pc, #472]	; (80033f8 <HAL_DMA_Start_IT+0x498>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d045      	beq.n	80032b0 <HAL_DMA_Start_IT+0x350>
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a74      	ldr	r2, [pc, #464]	; (80033fc <HAL_DMA_Start_IT+0x49c>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d040      	beq.n	80032b0 <HAL_DMA_Start_IT+0x350>
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a73      	ldr	r2, [pc, #460]	; (8003400 <HAL_DMA_Start_IT+0x4a0>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d03b      	beq.n	80032b0 <HAL_DMA_Start_IT+0x350>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a71      	ldr	r2, [pc, #452]	; (8003404 <HAL_DMA_Start_IT+0x4a4>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d036      	beq.n	80032b0 <HAL_DMA_Start_IT+0x350>
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a70      	ldr	r2, [pc, #448]	; (8003408 <HAL_DMA_Start_IT+0x4a8>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d031      	beq.n	80032b0 <HAL_DMA_Start_IT+0x350>
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a6e      	ldr	r2, [pc, #440]	; (800340c <HAL_DMA_Start_IT+0x4ac>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d02c      	beq.n	80032b0 <HAL_DMA_Start_IT+0x350>
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a6d      	ldr	r2, [pc, #436]	; (8003410 <HAL_DMA_Start_IT+0x4b0>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d027      	beq.n	80032b0 <HAL_DMA_Start_IT+0x350>
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a6b      	ldr	r2, [pc, #428]	; (8003414 <HAL_DMA_Start_IT+0x4b4>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d022      	beq.n	80032b0 <HAL_DMA_Start_IT+0x350>
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a6a      	ldr	r2, [pc, #424]	; (8003418 <HAL_DMA_Start_IT+0x4b8>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d01d      	beq.n	80032b0 <HAL_DMA_Start_IT+0x350>
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a68      	ldr	r2, [pc, #416]	; (800341c <HAL_DMA_Start_IT+0x4bc>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d018      	beq.n	80032b0 <HAL_DMA_Start_IT+0x350>
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a67      	ldr	r2, [pc, #412]	; (8003420 <HAL_DMA_Start_IT+0x4c0>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d013      	beq.n	80032b0 <HAL_DMA_Start_IT+0x350>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a65      	ldr	r2, [pc, #404]	; (8003424 <HAL_DMA_Start_IT+0x4c4>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d00e      	beq.n	80032b0 <HAL_DMA_Start_IT+0x350>
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a64      	ldr	r2, [pc, #400]	; (8003428 <HAL_DMA_Start_IT+0x4c8>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d009      	beq.n	80032b0 <HAL_DMA_Start_IT+0x350>
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a62      	ldr	r2, [pc, #392]	; (800342c <HAL_DMA_Start_IT+0x4cc>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d004      	beq.n	80032b0 <HAL_DMA_Start_IT+0x350>
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a61      	ldr	r2, [pc, #388]	; (8003430 <HAL_DMA_Start_IT+0x4d0>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d101      	bne.n	80032b4 <HAL_DMA_Start_IT+0x354>
 80032b0:	2301      	movs	r3, #1
 80032b2:	e000      	b.n	80032b6 <HAL_DMA_Start_IT+0x356>
 80032b4:	2300      	movs	r3, #0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d01a      	beq.n	80032f0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d007      	beq.n	80032d8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032d6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d007      	beq.n	80032f0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032ee:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a37      	ldr	r2, [pc, #220]	; (80033d4 <HAL_DMA_Start_IT+0x474>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d04a      	beq.n	8003390 <HAL_DMA_Start_IT+0x430>
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a36      	ldr	r2, [pc, #216]	; (80033d8 <HAL_DMA_Start_IT+0x478>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d045      	beq.n	8003390 <HAL_DMA_Start_IT+0x430>
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a34      	ldr	r2, [pc, #208]	; (80033dc <HAL_DMA_Start_IT+0x47c>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d040      	beq.n	8003390 <HAL_DMA_Start_IT+0x430>
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a33      	ldr	r2, [pc, #204]	; (80033e0 <HAL_DMA_Start_IT+0x480>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d03b      	beq.n	8003390 <HAL_DMA_Start_IT+0x430>
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a31      	ldr	r2, [pc, #196]	; (80033e4 <HAL_DMA_Start_IT+0x484>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d036      	beq.n	8003390 <HAL_DMA_Start_IT+0x430>
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a30      	ldr	r2, [pc, #192]	; (80033e8 <HAL_DMA_Start_IT+0x488>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d031      	beq.n	8003390 <HAL_DMA_Start_IT+0x430>
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a2e      	ldr	r2, [pc, #184]	; (80033ec <HAL_DMA_Start_IT+0x48c>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d02c      	beq.n	8003390 <HAL_DMA_Start_IT+0x430>
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a2d      	ldr	r2, [pc, #180]	; (80033f0 <HAL_DMA_Start_IT+0x490>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d027      	beq.n	8003390 <HAL_DMA_Start_IT+0x430>
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a2b      	ldr	r2, [pc, #172]	; (80033f4 <HAL_DMA_Start_IT+0x494>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d022      	beq.n	8003390 <HAL_DMA_Start_IT+0x430>
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a2a      	ldr	r2, [pc, #168]	; (80033f8 <HAL_DMA_Start_IT+0x498>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d01d      	beq.n	8003390 <HAL_DMA_Start_IT+0x430>
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a28      	ldr	r2, [pc, #160]	; (80033fc <HAL_DMA_Start_IT+0x49c>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d018      	beq.n	8003390 <HAL_DMA_Start_IT+0x430>
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a27      	ldr	r2, [pc, #156]	; (8003400 <HAL_DMA_Start_IT+0x4a0>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d013      	beq.n	8003390 <HAL_DMA_Start_IT+0x430>
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a25      	ldr	r2, [pc, #148]	; (8003404 <HAL_DMA_Start_IT+0x4a4>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d00e      	beq.n	8003390 <HAL_DMA_Start_IT+0x430>
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a24      	ldr	r2, [pc, #144]	; (8003408 <HAL_DMA_Start_IT+0x4a8>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d009      	beq.n	8003390 <HAL_DMA_Start_IT+0x430>
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a22      	ldr	r2, [pc, #136]	; (800340c <HAL_DMA_Start_IT+0x4ac>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d004      	beq.n	8003390 <HAL_DMA_Start_IT+0x430>
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a21      	ldr	r2, [pc, #132]	; (8003410 <HAL_DMA_Start_IT+0x4b0>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d108      	bne.n	80033a2 <HAL_DMA_Start_IT+0x442>
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f042 0201 	orr.w	r2, r2, #1
 800339e:	601a      	str	r2, [r3, #0]
 80033a0:	e012      	b.n	80033c8 <HAL_DMA_Start_IT+0x468>
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f042 0201 	orr.w	r2, r2, #1
 80033b0:	601a      	str	r2, [r3, #0]
 80033b2:	e009      	b.n	80033c8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033ba:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80033c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3718      	adds	r7, #24
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	40020010 	.word	0x40020010
 80033d8:	40020028 	.word	0x40020028
 80033dc:	40020040 	.word	0x40020040
 80033e0:	40020058 	.word	0x40020058
 80033e4:	40020070 	.word	0x40020070
 80033e8:	40020088 	.word	0x40020088
 80033ec:	400200a0 	.word	0x400200a0
 80033f0:	400200b8 	.word	0x400200b8
 80033f4:	40020410 	.word	0x40020410
 80033f8:	40020428 	.word	0x40020428
 80033fc:	40020440 	.word	0x40020440
 8003400:	40020458 	.word	0x40020458
 8003404:	40020470 	.word	0x40020470
 8003408:	40020488 	.word	0x40020488
 800340c:	400204a0 	.word	0x400204a0
 8003410:	400204b8 	.word	0x400204b8
 8003414:	58025408 	.word	0x58025408
 8003418:	5802541c 	.word	0x5802541c
 800341c:	58025430 	.word	0x58025430
 8003420:	58025444 	.word	0x58025444
 8003424:	58025458 	.word	0x58025458
 8003428:	5802546c 	.word	0x5802546c
 800342c:	58025480 	.word	0x58025480
 8003430:	58025494 	.word	0x58025494

08003434 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b086      	sub	sp, #24
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800343c:	f7fe fc3a 	bl	8001cb4 <HAL_GetTick>
 8003440:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d101      	bne.n	800344c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e2dc      	b.n	8003a06 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003452:	b2db      	uxtb	r3, r3
 8003454:	2b02      	cmp	r3, #2
 8003456:	d008      	beq.n	800346a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2280      	movs	r2, #128	; 0x80
 800345c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e2cd      	b.n	8003a06 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a76      	ldr	r2, [pc, #472]	; (8003648 <HAL_DMA_Abort+0x214>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d04a      	beq.n	800350a <HAL_DMA_Abort+0xd6>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a74      	ldr	r2, [pc, #464]	; (800364c <HAL_DMA_Abort+0x218>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d045      	beq.n	800350a <HAL_DMA_Abort+0xd6>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a73      	ldr	r2, [pc, #460]	; (8003650 <HAL_DMA_Abort+0x21c>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d040      	beq.n	800350a <HAL_DMA_Abort+0xd6>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a71      	ldr	r2, [pc, #452]	; (8003654 <HAL_DMA_Abort+0x220>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d03b      	beq.n	800350a <HAL_DMA_Abort+0xd6>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a70      	ldr	r2, [pc, #448]	; (8003658 <HAL_DMA_Abort+0x224>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d036      	beq.n	800350a <HAL_DMA_Abort+0xd6>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a6e      	ldr	r2, [pc, #440]	; (800365c <HAL_DMA_Abort+0x228>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d031      	beq.n	800350a <HAL_DMA_Abort+0xd6>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a6d      	ldr	r2, [pc, #436]	; (8003660 <HAL_DMA_Abort+0x22c>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d02c      	beq.n	800350a <HAL_DMA_Abort+0xd6>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a6b      	ldr	r2, [pc, #428]	; (8003664 <HAL_DMA_Abort+0x230>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d027      	beq.n	800350a <HAL_DMA_Abort+0xd6>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a6a      	ldr	r2, [pc, #424]	; (8003668 <HAL_DMA_Abort+0x234>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d022      	beq.n	800350a <HAL_DMA_Abort+0xd6>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a68      	ldr	r2, [pc, #416]	; (800366c <HAL_DMA_Abort+0x238>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d01d      	beq.n	800350a <HAL_DMA_Abort+0xd6>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a67      	ldr	r2, [pc, #412]	; (8003670 <HAL_DMA_Abort+0x23c>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d018      	beq.n	800350a <HAL_DMA_Abort+0xd6>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a65      	ldr	r2, [pc, #404]	; (8003674 <HAL_DMA_Abort+0x240>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d013      	beq.n	800350a <HAL_DMA_Abort+0xd6>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a64      	ldr	r2, [pc, #400]	; (8003678 <HAL_DMA_Abort+0x244>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d00e      	beq.n	800350a <HAL_DMA_Abort+0xd6>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a62      	ldr	r2, [pc, #392]	; (800367c <HAL_DMA_Abort+0x248>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d009      	beq.n	800350a <HAL_DMA_Abort+0xd6>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a61      	ldr	r2, [pc, #388]	; (8003680 <HAL_DMA_Abort+0x24c>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d004      	beq.n	800350a <HAL_DMA_Abort+0xd6>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a5f      	ldr	r2, [pc, #380]	; (8003684 <HAL_DMA_Abort+0x250>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d101      	bne.n	800350e <HAL_DMA_Abort+0xda>
 800350a:	2301      	movs	r3, #1
 800350c:	e000      	b.n	8003510 <HAL_DMA_Abort+0xdc>
 800350e:	2300      	movs	r3, #0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d013      	beq.n	800353c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f022 021e 	bic.w	r2, r2, #30
 8003522:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	695a      	ldr	r2, [r3, #20]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003532:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	617b      	str	r3, [r7, #20]
 800353a:	e00a      	b.n	8003552 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f022 020e 	bic.w	r2, r2, #14
 800354a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a3c      	ldr	r2, [pc, #240]	; (8003648 <HAL_DMA_Abort+0x214>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d072      	beq.n	8003642 <HAL_DMA_Abort+0x20e>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a3a      	ldr	r2, [pc, #232]	; (800364c <HAL_DMA_Abort+0x218>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d06d      	beq.n	8003642 <HAL_DMA_Abort+0x20e>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a39      	ldr	r2, [pc, #228]	; (8003650 <HAL_DMA_Abort+0x21c>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d068      	beq.n	8003642 <HAL_DMA_Abort+0x20e>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a37      	ldr	r2, [pc, #220]	; (8003654 <HAL_DMA_Abort+0x220>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d063      	beq.n	8003642 <HAL_DMA_Abort+0x20e>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a36      	ldr	r2, [pc, #216]	; (8003658 <HAL_DMA_Abort+0x224>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d05e      	beq.n	8003642 <HAL_DMA_Abort+0x20e>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a34      	ldr	r2, [pc, #208]	; (800365c <HAL_DMA_Abort+0x228>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d059      	beq.n	8003642 <HAL_DMA_Abort+0x20e>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a33      	ldr	r2, [pc, #204]	; (8003660 <HAL_DMA_Abort+0x22c>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d054      	beq.n	8003642 <HAL_DMA_Abort+0x20e>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a31      	ldr	r2, [pc, #196]	; (8003664 <HAL_DMA_Abort+0x230>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d04f      	beq.n	8003642 <HAL_DMA_Abort+0x20e>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a30      	ldr	r2, [pc, #192]	; (8003668 <HAL_DMA_Abort+0x234>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d04a      	beq.n	8003642 <HAL_DMA_Abort+0x20e>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a2e      	ldr	r2, [pc, #184]	; (800366c <HAL_DMA_Abort+0x238>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d045      	beq.n	8003642 <HAL_DMA_Abort+0x20e>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a2d      	ldr	r2, [pc, #180]	; (8003670 <HAL_DMA_Abort+0x23c>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d040      	beq.n	8003642 <HAL_DMA_Abort+0x20e>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a2b      	ldr	r2, [pc, #172]	; (8003674 <HAL_DMA_Abort+0x240>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d03b      	beq.n	8003642 <HAL_DMA_Abort+0x20e>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a2a      	ldr	r2, [pc, #168]	; (8003678 <HAL_DMA_Abort+0x244>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d036      	beq.n	8003642 <HAL_DMA_Abort+0x20e>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a28      	ldr	r2, [pc, #160]	; (800367c <HAL_DMA_Abort+0x248>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d031      	beq.n	8003642 <HAL_DMA_Abort+0x20e>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a27      	ldr	r2, [pc, #156]	; (8003680 <HAL_DMA_Abort+0x24c>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d02c      	beq.n	8003642 <HAL_DMA_Abort+0x20e>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a25      	ldr	r2, [pc, #148]	; (8003684 <HAL_DMA_Abort+0x250>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d027      	beq.n	8003642 <HAL_DMA_Abort+0x20e>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a24      	ldr	r2, [pc, #144]	; (8003688 <HAL_DMA_Abort+0x254>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d022      	beq.n	8003642 <HAL_DMA_Abort+0x20e>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a22      	ldr	r2, [pc, #136]	; (800368c <HAL_DMA_Abort+0x258>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d01d      	beq.n	8003642 <HAL_DMA_Abort+0x20e>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a21      	ldr	r2, [pc, #132]	; (8003690 <HAL_DMA_Abort+0x25c>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d018      	beq.n	8003642 <HAL_DMA_Abort+0x20e>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a1f      	ldr	r2, [pc, #124]	; (8003694 <HAL_DMA_Abort+0x260>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d013      	beq.n	8003642 <HAL_DMA_Abort+0x20e>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a1e      	ldr	r2, [pc, #120]	; (8003698 <HAL_DMA_Abort+0x264>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d00e      	beq.n	8003642 <HAL_DMA_Abort+0x20e>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a1c      	ldr	r2, [pc, #112]	; (800369c <HAL_DMA_Abort+0x268>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d009      	beq.n	8003642 <HAL_DMA_Abort+0x20e>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a1b      	ldr	r2, [pc, #108]	; (80036a0 <HAL_DMA_Abort+0x26c>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d004      	beq.n	8003642 <HAL_DMA_Abort+0x20e>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a19      	ldr	r2, [pc, #100]	; (80036a4 <HAL_DMA_Abort+0x270>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d132      	bne.n	80036a8 <HAL_DMA_Abort+0x274>
 8003642:	2301      	movs	r3, #1
 8003644:	e031      	b.n	80036aa <HAL_DMA_Abort+0x276>
 8003646:	bf00      	nop
 8003648:	40020010 	.word	0x40020010
 800364c:	40020028 	.word	0x40020028
 8003650:	40020040 	.word	0x40020040
 8003654:	40020058 	.word	0x40020058
 8003658:	40020070 	.word	0x40020070
 800365c:	40020088 	.word	0x40020088
 8003660:	400200a0 	.word	0x400200a0
 8003664:	400200b8 	.word	0x400200b8
 8003668:	40020410 	.word	0x40020410
 800366c:	40020428 	.word	0x40020428
 8003670:	40020440 	.word	0x40020440
 8003674:	40020458 	.word	0x40020458
 8003678:	40020470 	.word	0x40020470
 800367c:	40020488 	.word	0x40020488
 8003680:	400204a0 	.word	0x400204a0
 8003684:	400204b8 	.word	0x400204b8
 8003688:	58025408 	.word	0x58025408
 800368c:	5802541c 	.word	0x5802541c
 8003690:	58025430 	.word	0x58025430
 8003694:	58025444 	.word	0x58025444
 8003698:	58025458 	.word	0x58025458
 800369c:	5802546c 	.word	0x5802546c
 80036a0:	58025480 	.word	0x58025480
 80036a4:	58025494 	.word	0x58025494
 80036a8:	2300      	movs	r3, #0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d007      	beq.n	80036be <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a6d      	ldr	r2, [pc, #436]	; (8003878 <HAL_DMA_Abort+0x444>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d04a      	beq.n	800375e <HAL_DMA_Abort+0x32a>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a6b      	ldr	r2, [pc, #428]	; (800387c <HAL_DMA_Abort+0x448>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d045      	beq.n	800375e <HAL_DMA_Abort+0x32a>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a6a      	ldr	r2, [pc, #424]	; (8003880 <HAL_DMA_Abort+0x44c>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d040      	beq.n	800375e <HAL_DMA_Abort+0x32a>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a68      	ldr	r2, [pc, #416]	; (8003884 <HAL_DMA_Abort+0x450>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d03b      	beq.n	800375e <HAL_DMA_Abort+0x32a>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a67      	ldr	r2, [pc, #412]	; (8003888 <HAL_DMA_Abort+0x454>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d036      	beq.n	800375e <HAL_DMA_Abort+0x32a>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a65      	ldr	r2, [pc, #404]	; (800388c <HAL_DMA_Abort+0x458>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d031      	beq.n	800375e <HAL_DMA_Abort+0x32a>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a64      	ldr	r2, [pc, #400]	; (8003890 <HAL_DMA_Abort+0x45c>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d02c      	beq.n	800375e <HAL_DMA_Abort+0x32a>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a62      	ldr	r2, [pc, #392]	; (8003894 <HAL_DMA_Abort+0x460>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d027      	beq.n	800375e <HAL_DMA_Abort+0x32a>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a61      	ldr	r2, [pc, #388]	; (8003898 <HAL_DMA_Abort+0x464>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d022      	beq.n	800375e <HAL_DMA_Abort+0x32a>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a5f      	ldr	r2, [pc, #380]	; (800389c <HAL_DMA_Abort+0x468>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d01d      	beq.n	800375e <HAL_DMA_Abort+0x32a>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a5e      	ldr	r2, [pc, #376]	; (80038a0 <HAL_DMA_Abort+0x46c>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d018      	beq.n	800375e <HAL_DMA_Abort+0x32a>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a5c      	ldr	r2, [pc, #368]	; (80038a4 <HAL_DMA_Abort+0x470>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d013      	beq.n	800375e <HAL_DMA_Abort+0x32a>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a5b      	ldr	r2, [pc, #364]	; (80038a8 <HAL_DMA_Abort+0x474>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d00e      	beq.n	800375e <HAL_DMA_Abort+0x32a>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a59      	ldr	r2, [pc, #356]	; (80038ac <HAL_DMA_Abort+0x478>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d009      	beq.n	800375e <HAL_DMA_Abort+0x32a>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a58      	ldr	r2, [pc, #352]	; (80038b0 <HAL_DMA_Abort+0x47c>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d004      	beq.n	800375e <HAL_DMA_Abort+0x32a>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a56      	ldr	r2, [pc, #344]	; (80038b4 <HAL_DMA_Abort+0x480>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d108      	bne.n	8003770 <HAL_DMA_Abort+0x33c>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f022 0201 	bic.w	r2, r2, #1
 800376c:	601a      	str	r2, [r3, #0]
 800376e:	e007      	b.n	8003780 <HAL_DMA_Abort+0x34c>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f022 0201 	bic.w	r2, r2, #1
 800377e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003780:	e013      	b.n	80037aa <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003782:	f7fe fa97 	bl	8001cb4 <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	2b05      	cmp	r3, #5
 800378e:	d90c      	bls.n	80037aa <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2220      	movs	r2, #32
 8003794:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2203      	movs	r2, #3
 800379a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e12d      	b.n	8003a06 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d1e5      	bne.n	8003782 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a2f      	ldr	r2, [pc, #188]	; (8003878 <HAL_DMA_Abort+0x444>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d04a      	beq.n	8003856 <HAL_DMA_Abort+0x422>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a2d      	ldr	r2, [pc, #180]	; (800387c <HAL_DMA_Abort+0x448>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d045      	beq.n	8003856 <HAL_DMA_Abort+0x422>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a2c      	ldr	r2, [pc, #176]	; (8003880 <HAL_DMA_Abort+0x44c>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d040      	beq.n	8003856 <HAL_DMA_Abort+0x422>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a2a      	ldr	r2, [pc, #168]	; (8003884 <HAL_DMA_Abort+0x450>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d03b      	beq.n	8003856 <HAL_DMA_Abort+0x422>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a29      	ldr	r2, [pc, #164]	; (8003888 <HAL_DMA_Abort+0x454>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d036      	beq.n	8003856 <HAL_DMA_Abort+0x422>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a27      	ldr	r2, [pc, #156]	; (800388c <HAL_DMA_Abort+0x458>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d031      	beq.n	8003856 <HAL_DMA_Abort+0x422>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a26      	ldr	r2, [pc, #152]	; (8003890 <HAL_DMA_Abort+0x45c>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d02c      	beq.n	8003856 <HAL_DMA_Abort+0x422>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a24      	ldr	r2, [pc, #144]	; (8003894 <HAL_DMA_Abort+0x460>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d027      	beq.n	8003856 <HAL_DMA_Abort+0x422>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a23      	ldr	r2, [pc, #140]	; (8003898 <HAL_DMA_Abort+0x464>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d022      	beq.n	8003856 <HAL_DMA_Abort+0x422>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a21      	ldr	r2, [pc, #132]	; (800389c <HAL_DMA_Abort+0x468>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d01d      	beq.n	8003856 <HAL_DMA_Abort+0x422>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a20      	ldr	r2, [pc, #128]	; (80038a0 <HAL_DMA_Abort+0x46c>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d018      	beq.n	8003856 <HAL_DMA_Abort+0x422>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a1e      	ldr	r2, [pc, #120]	; (80038a4 <HAL_DMA_Abort+0x470>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d013      	beq.n	8003856 <HAL_DMA_Abort+0x422>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a1d      	ldr	r2, [pc, #116]	; (80038a8 <HAL_DMA_Abort+0x474>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d00e      	beq.n	8003856 <HAL_DMA_Abort+0x422>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a1b      	ldr	r2, [pc, #108]	; (80038ac <HAL_DMA_Abort+0x478>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d009      	beq.n	8003856 <HAL_DMA_Abort+0x422>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a1a      	ldr	r2, [pc, #104]	; (80038b0 <HAL_DMA_Abort+0x47c>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d004      	beq.n	8003856 <HAL_DMA_Abort+0x422>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a18      	ldr	r2, [pc, #96]	; (80038b4 <HAL_DMA_Abort+0x480>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d101      	bne.n	800385a <HAL_DMA_Abort+0x426>
 8003856:	2301      	movs	r3, #1
 8003858:	e000      	b.n	800385c <HAL_DMA_Abort+0x428>
 800385a:	2300      	movs	r3, #0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d02b      	beq.n	80038b8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003864:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800386a:	f003 031f 	and.w	r3, r3, #31
 800386e:	223f      	movs	r2, #63	; 0x3f
 8003870:	409a      	lsls	r2, r3
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	609a      	str	r2, [r3, #8]
 8003876:	e02a      	b.n	80038ce <HAL_DMA_Abort+0x49a>
 8003878:	40020010 	.word	0x40020010
 800387c:	40020028 	.word	0x40020028
 8003880:	40020040 	.word	0x40020040
 8003884:	40020058 	.word	0x40020058
 8003888:	40020070 	.word	0x40020070
 800388c:	40020088 	.word	0x40020088
 8003890:	400200a0 	.word	0x400200a0
 8003894:	400200b8 	.word	0x400200b8
 8003898:	40020410 	.word	0x40020410
 800389c:	40020428 	.word	0x40020428
 80038a0:	40020440 	.word	0x40020440
 80038a4:	40020458 	.word	0x40020458
 80038a8:	40020470 	.word	0x40020470
 80038ac:	40020488 	.word	0x40020488
 80038b0:	400204a0 	.word	0x400204a0
 80038b4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038bc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038c2:	f003 031f 	and.w	r3, r3, #31
 80038c6:	2201      	movs	r2, #1
 80038c8:	409a      	lsls	r2, r3
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a4f      	ldr	r2, [pc, #316]	; (8003a10 <HAL_DMA_Abort+0x5dc>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d072      	beq.n	80039be <HAL_DMA_Abort+0x58a>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a4d      	ldr	r2, [pc, #308]	; (8003a14 <HAL_DMA_Abort+0x5e0>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d06d      	beq.n	80039be <HAL_DMA_Abort+0x58a>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a4c      	ldr	r2, [pc, #304]	; (8003a18 <HAL_DMA_Abort+0x5e4>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d068      	beq.n	80039be <HAL_DMA_Abort+0x58a>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a4a      	ldr	r2, [pc, #296]	; (8003a1c <HAL_DMA_Abort+0x5e8>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d063      	beq.n	80039be <HAL_DMA_Abort+0x58a>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a49      	ldr	r2, [pc, #292]	; (8003a20 <HAL_DMA_Abort+0x5ec>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d05e      	beq.n	80039be <HAL_DMA_Abort+0x58a>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a47      	ldr	r2, [pc, #284]	; (8003a24 <HAL_DMA_Abort+0x5f0>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d059      	beq.n	80039be <HAL_DMA_Abort+0x58a>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a46      	ldr	r2, [pc, #280]	; (8003a28 <HAL_DMA_Abort+0x5f4>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d054      	beq.n	80039be <HAL_DMA_Abort+0x58a>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a44      	ldr	r2, [pc, #272]	; (8003a2c <HAL_DMA_Abort+0x5f8>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d04f      	beq.n	80039be <HAL_DMA_Abort+0x58a>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a43      	ldr	r2, [pc, #268]	; (8003a30 <HAL_DMA_Abort+0x5fc>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d04a      	beq.n	80039be <HAL_DMA_Abort+0x58a>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a41      	ldr	r2, [pc, #260]	; (8003a34 <HAL_DMA_Abort+0x600>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d045      	beq.n	80039be <HAL_DMA_Abort+0x58a>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a40      	ldr	r2, [pc, #256]	; (8003a38 <HAL_DMA_Abort+0x604>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d040      	beq.n	80039be <HAL_DMA_Abort+0x58a>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a3e      	ldr	r2, [pc, #248]	; (8003a3c <HAL_DMA_Abort+0x608>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d03b      	beq.n	80039be <HAL_DMA_Abort+0x58a>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a3d      	ldr	r2, [pc, #244]	; (8003a40 <HAL_DMA_Abort+0x60c>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d036      	beq.n	80039be <HAL_DMA_Abort+0x58a>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a3b      	ldr	r2, [pc, #236]	; (8003a44 <HAL_DMA_Abort+0x610>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d031      	beq.n	80039be <HAL_DMA_Abort+0x58a>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a3a      	ldr	r2, [pc, #232]	; (8003a48 <HAL_DMA_Abort+0x614>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d02c      	beq.n	80039be <HAL_DMA_Abort+0x58a>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a38      	ldr	r2, [pc, #224]	; (8003a4c <HAL_DMA_Abort+0x618>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d027      	beq.n	80039be <HAL_DMA_Abort+0x58a>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a37      	ldr	r2, [pc, #220]	; (8003a50 <HAL_DMA_Abort+0x61c>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d022      	beq.n	80039be <HAL_DMA_Abort+0x58a>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a35      	ldr	r2, [pc, #212]	; (8003a54 <HAL_DMA_Abort+0x620>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d01d      	beq.n	80039be <HAL_DMA_Abort+0x58a>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a34      	ldr	r2, [pc, #208]	; (8003a58 <HAL_DMA_Abort+0x624>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d018      	beq.n	80039be <HAL_DMA_Abort+0x58a>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a32      	ldr	r2, [pc, #200]	; (8003a5c <HAL_DMA_Abort+0x628>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d013      	beq.n	80039be <HAL_DMA_Abort+0x58a>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a31      	ldr	r2, [pc, #196]	; (8003a60 <HAL_DMA_Abort+0x62c>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d00e      	beq.n	80039be <HAL_DMA_Abort+0x58a>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a2f      	ldr	r2, [pc, #188]	; (8003a64 <HAL_DMA_Abort+0x630>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d009      	beq.n	80039be <HAL_DMA_Abort+0x58a>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a2e      	ldr	r2, [pc, #184]	; (8003a68 <HAL_DMA_Abort+0x634>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d004      	beq.n	80039be <HAL_DMA_Abort+0x58a>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a2c      	ldr	r2, [pc, #176]	; (8003a6c <HAL_DMA_Abort+0x638>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d101      	bne.n	80039c2 <HAL_DMA_Abort+0x58e>
 80039be:	2301      	movs	r3, #1
 80039c0:	e000      	b.n	80039c4 <HAL_DMA_Abort+0x590>
 80039c2:	2300      	movs	r3, #0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d015      	beq.n	80039f4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80039d0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d00c      	beq.n	80039f4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039e8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80039f2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3718      	adds	r7, #24
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	40020010 	.word	0x40020010
 8003a14:	40020028 	.word	0x40020028
 8003a18:	40020040 	.word	0x40020040
 8003a1c:	40020058 	.word	0x40020058
 8003a20:	40020070 	.word	0x40020070
 8003a24:	40020088 	.word	0x40020088
 8003a28:	400200a0 	.word	0x400200a0
 8003a2c:	400200b8 	.word	0x400200b8
 8003a30:	40020410 	.word	0x40020410
 8003a34:	40020428 	.word	0x40020428
 8003a38:	40020440 	.word	0x40020440
 8003a3c:	40020458 	.word	0x40020458
 8003a40:	40020470 	.word	0x40020470
 8003a44:	40020488 	.word	0x40020488
 8003a48:	400204a0 	.word	0x400204a0
 8003a4c:	400204b8 	.word	0x400204b8
 8003a50:	58025408 	.word	0x58025408
 8003a54:	5802541c 	.word	0x5802541c
 8003a58:	58025430 	.word	0x58025430
 8003a5c:	58025444 	.word	0x58025444
 8003a60:	58025458 	.word	0x58025458
 8003a64:	5802546c 	.word	0x5802546c
 8003a68:	58025480 	.word	0x58025480
 8003a6c:	58025494 	.word	0x58025494

08003a70 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d101      	bne.n	8003a82 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e205      	b.n	8003e8e <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d004      	beq.n	8003a98 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2280      	movs	r2, #128	; 0x80
 8003a92:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e1fa      	b.n	8003e8e <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a8c      	ldr	r2, [pc, #560]	; (8003cd0 <HAL_DMA_Abort_IT+0x260>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d04a      	beq.n	8003b38 <HAL_DMA_Abort_IT+0xc8>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a8b      	ldr	r2, [pc, #556]	; (8003cd4 <HAL_DMA_Abort_IT+0x264>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d045      	beq.n	8003b38 <HAL_DMA_Abort_IT+0xc8>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a89      	ldr	r2, [pc, #548]	; (8003cd8 <HAL_DMA_Abort_IT+0x268>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d040      	beq.n	8003b38 <HAL_DMA_Abort_IT+0xc8>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a88      	ldr	r2, [pc, #544]	; (8003cdc <HAL_DMA_Abort_IT+0x26c>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d03b      	beq.n	8003b38 <HAL_DMA_Abort_IT+0xc8>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a86      	ldr	r2, [pc, #536]	; (8003ce0 <HAL_DMA_Abort_IT+0x270>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d036      	beq.n	8003b38 <HAL_DMA_Abort_IT+0xc8>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a85      	ldr	r2, [pc, #532]	; (8003ce4 <HAL_DMA_Abort_IT+0x274>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d031      	beq.n	8003b38 <HAL_DMA_Abort_IT+0xc8>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a83      	ldr	r2, [pc, #524]	; (8003ce8 <HAL_DMA_Abort_IT+0x278>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d02c      	beq.n	8003b38 <HAL_DMA_Abort_IT+0xc8>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a82      	ldr	r2, [pc, #520]	; (8003cec <HAL_DMA_Abort_IT+0x27c>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d027      	beq.n	8003b38 <HAL_DMA_Abort_IT+0xc8>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a80      	ldr	r2, [pc, #512]	; (8003cf0 <HAL_DMA_Abort_IT+0x280>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d022      	beq.n	8003b38 <HAL_DMA_Abort_IT+0xc8>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a7f      	ldr	r2, [pc, #508]	; (8003cf4 <HAL_DMA_Abort_IT+0x284>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d01d      	beq.n	8003b38 <HAL_DMA_Abort_IT+0xc8>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a7d      	ldr	r2, [pc, #500]	; (8003cf8 <HAL_DMA_Abort_IT+0x288>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d018      	beq.n	8003b38 <HAL_DMA_Abort_IT+0xc8>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a7c      	ldr	r2, [pc, #496]	; (8003cfc <HAL_DMA_Abort_IT+0x28c>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d013      	beq.n	8003b38 <HAL_DMA_Abort_IT+0xc8>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a7a      	ldr	r2, [pc, #488]	; (8003d00 <HAL_DMA_Abort_IT+0x290>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d00e      	beq.n	8003b38 <HAL_DMA_Abort_IT+0xc8>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a79      	ldr	r2, [pc, #484]	; (8003d04 <HAL_DMA_Abort_IT+0x294>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d009      	beq.n	8003b38 <HAL_DMA_Abort_IT+0xc8>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a77      	ldr	r2, [pc, #476]	; (8003d08 <HAL_DMA_Abort_IT+0x298>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d004      	beq.n	8003b38 <HAL_DMA_Abort_IT+0xc8>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a76      	ldr	r2, [pc, #472]	; (8003d0c <HAL_DMA_Abort_IT+0x29c>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d101      	bne.n	8003b3c <HAL_DMA_Abort_IT+0xcc>
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e000      	b.n	8003b3e <HAL_DMA_Abort_IT+0xce>
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d065      	beq.n	8003c0e <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2204      	movs	r2, #4
 8003b46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a60      	ldr	r2, [pc, #384]	; (8003cd0 <HAL_DMA_Abort_IT+0x260>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d04a      	beq.n	8003bea <HAL_DMA_Abort_IT+0x17a>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a5e      	ldr	r2, [pc, #376]	; (8003cd4 <HAL_DMA_Abort_IT+0x264>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d045      	beq.n	8003bea <HAL_DMA_Abort_IT+0x17a>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a5d      	ldr	r2, [pc, #372]	; (8003cd8 <HAL_DMA_Abort_IT+0x268>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d040      	beq.n	8003bea <HAL_DMA_Abort_IT+0x17a>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a5b      	ldr	r2, [pc, #364]	; (8003cdc <HAL_DMA_Abort_IT+0x26c>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d03b      	beq.n	8003bea <HAL_DMA_Abort_IT+0x17a>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a5a      	ldr	r2, [pc, #360]	; (8003ce0 <HAL_DMA_Abort_IT+0x270>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d036      	beq.n	8003bea <HAL_DMA_Abort_IT+0x17a>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a58      	ldr	r2, [pc, #352]	; (8003ce4 <HAL_DMA_Abort_IT+0x274>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d031      	beq.n	8003bea <HAL_DMA_Abort_IT+0x17a>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a57      	ldr	r2, [pc, #348]	; (8003ce8 <HAL_DMA_Abort_IT+0x278>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d02c      	beq.n	8003bea <HAL_DMA_Abort_IT+0x17a>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a55      	ldr	r2, [pc, #340]	; (8003cec <HAL_DMA_Abort_IT+0x27c>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d027      	beq.n	8003bea <HAL_DMA_Abort_IT+0x17a>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a54      	ldr	r2, [pc, #336]	; (8003cf0 <HAL_DMA_Abort_IT+0x280>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d022      	beq.n	8003bea <HAL_DMA_Abort_IT+0x17a>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a52      	ldr	r2, [pc, #328]	; (8003cf4 <HAL_DMA_Abort_IT+0x284>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d01d      	beq.n	8003bea <HAL_DMA_Abort_IT+0x17a>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a51      	ldr	r2, [pc, #324]	; (8003cf8 <HAL_DMA_Abort_IT+0x288>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d018      	beq.n	8003bea <HAL_DMA_Abort_IT+0x17a>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a4f      	ldr	r2, [pc, #316]	; (8003cfc <HAL_DMA_Abort_IT+0x28c>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d013      	beq.n	8003bea <HAL_DMA_Abort_IT+0x17a>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a4e      	ldr	r2, [pc, #312]	; (8003d00 <HAL_DMA_Abort_IT+0x290>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d00e      	beq.n	8003bea <HAL_DMA_Abort_IT+0x17a>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a4c      	ldr	r2, [pc, #304]	; (8003d04 <HAL_DMA_Abort_IT+0x294>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d009      	beq.n	8003bea <HAL_DMA_Abort_IT+0x17a>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a4b      	ldr	r2, [pc, #300]	; (8003d08 <HAL_DMA_Abort_IT+0x298>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d004      	beq.n	8003bea <HAL_DMA_Abort_IT+0x17a>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a49      	ldr	r2, [pc, #292]	; (8003d0c <HAL_DMA_Abort_IT+0x29c>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d108      	bne.n	8003bfc <HAL_DMA_Abort_IT+0x18c>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f022 0201 	bic.w	r2, r2, #1
 8003bf8:	601a      	str	r2, [r3, #0]
 8003bfa:	e147      	b.n	8003e8c <HAL_DMA_Abort_IT+0x41c>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f022 0201 	bic.w	r2, r2, #1
 8003c0a:	601a      	str	r2, [r3, #0]
 8003c0c:	e13e      	b.n	8003e8c <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f022 020e 	bic.w	r2, r2, #14
 8003c1c:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a2b      	ldr	r2, [pc, #172]	; (8003cd0 <HAL_DMA_Abort_IT+0x260>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d04a      	beq.n	8003cbe <HAL_DMA_Abort_IT+0x24e>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a29      	ldr	r2, [pc, #164]	; (8003cd4 <HAL_DMA_Abort_IT+0x264>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d045      	beq.n	8003cbe <HAL_DMA_Abort_IT+0x24e>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a28      	ldr	r2, [pc, #160]	; (8003cd8 <HAL_DMA_Abort_IT+0x268>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d040      	beq.n	8003cbe <HAL_DMA_Abort_IT+0x24e>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a26      	ldr	r2, [pc, #152]	; (8003cdc <HAL_DMA_Abort_IT+0x26c>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d03b      	beq.n	8003cbe <HAL_DMA_Abort_IT+0x24e>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a25      	ldr	r2, [pc, #148]	; (8003ce0 <HAL_DMA_Abort_IT+0x270>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d036      	beq.n	8003cbe <HAL_DMA_Abort_IT+0x24e>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a23      	ldr	r2, [pc, #140]	; (8003ce4 <HAL_DMA_Abort_IT+0x274>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d031      	beq.n	8003cbe <HAL_DMA_Abort_IT+0x24e>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a22      	ldr	r2, [pc, #136]	; (8003ce8 <HAL_DMA_Abort_IT+0x278>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d02c      	beq.n	8003cbe <HAL_DMA_Abort_IT+0x24e>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a20      	ldr	r2, [pc, #128]	; (8003cec <HAL_DMA_Abort_IT+0x27c>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d027      	beq.n	8003cbe <HAL_DMA_Abort_IT+0x24e>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a1f      	ldr	r2, [pc, #124]	; (8003cf0 <HAL_DMA_Abort_IT+0x280>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d022      	beq.n	8003cbe <HAL_DMA_Abort_IT+0x24e>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a1d      	ldr	r2, [pc, #116]	; (8003cf4 <HAL_DMA_Abort_IT+0x284>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d01d      	beq.n	8003cbe <HAL_DMA_Abort_IT+0x24e>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a1c      	ldr	r2, [pc, #112]	; (8003cf8 <HAL_DMA_Abort_IT+0x288>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d018      	beq.n	8003cbe <HAL_DMA_Abort_IT+0x24e>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a1a      	ldr	r2, [pc, #104]	; (8003cfc <HAL_DMA_Abort_IT+0x28c>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d013      	beq.n	8003cbe <HAL_DMA_Abort_IT+0x24e>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a19      	ldr	r2, [pc, #100]	; (8003d00 <HAL_DMA_Abort_IT+0x290>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d00e      	beq.n	8003cbe <HAL_DMA_Abort_IT+0x24e>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a17      	ldr	r2, [pc, #92]	; (8003d04 <HAL_DMA_Abort_IT+0x294>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d009      	beq.n	8003cbe <HAL_DMA_Abort_IT+0x24e>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a16      	ldr	r2, [pc, #88]	; (8003d08 <HAL_DMA_Abort_IT+0x298>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d004      	beq.n	8003cbe <HAL_DMA_Abort_IT+0x24e>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a14      	ldr	r2, [pc, #80]	; (8003d0c <HAL_DMA_Abort_IT+0x29c>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d128      	bne.n	8003d10 <HAL_DMA_Abort_IT+0x2a0>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f022 0201 	bic.w	r2, r2, #1
 8003ccc:	601a      	str	r2, [r3, #0]
 8003cce:	e027      	b.n	8003d20 <HAL_DMA_Abort_IT+0x2b0>
 8003cd0:	40020010 	.word	0x40020010
 8003cd4:	40020028 	.word	0x40020028
 8003cd8:	40020040 	.word	0x40020040
 8003cdc:	40020058 	.word	0x40020058
 8003ce0:	40020070 	.word	0x40020070
 8003ce4:	40020088 	.word	0x40020088
 8003ce8:	400200a0 	.word	0x400200a0
 8003cec:	400200b8 	.word	0x400200b8
 8003cf0:	40020410 	.word	0x40020410
 8003cf4:	40020428 	.word	0x40020428
 8003cf8:	40020440 	.word	0x40020440
 8003cfc:	40020458 	.word	0x40020458
 8003d00:	40020470 	.word	0x40020470
 8003d04:	40020488 	.word	0x40020488
 8003d08:	400204a0 	.word	0x400204a0
 8003d0c:	400204b8 	.word	0x400204b8
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f022 0201 	bic.w	r2, r2, #1
 8003d1e:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a5c      	ldr	r2, [pc, #368]	; (8003e98 <HAL_DMA_Abort_IT+0x428>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d072      	beq.n	8003e10 <HAL_DMA_Abort_IT+0x3a0>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a5b      	ldr	r2, [pc, #364]	; (8003e9c <HAL_DMA_Abort_IT+0x42c>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d06d      	beq.n	8003e10 <HAL_DMA_Abort_IT+0x3a0>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a59      	ldr	r2, [pc, #356]	; (8003ea0 <HAL_DMA_Abort_IT+0x430>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d068      	beq.n	8003e10 <HAL_DMA_Abort_IT+0x3a0>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a58      	ldr	r2, [pc, #352]	; (8003ea4 <HAL_DMA_Abort_IT+0x434>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d063      	beq.n	8003e10 <HAL_DMA_Abort_IT+0x3a0>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a56      	ldr	r2, [pc, #344]	; (8003ea8 <HAL_DMA_Abort_IT+0x438>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d05e      	beq.n	8003e10 <HAL_DMA_Abort_IT+0x3a0>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a55      	ldr	r2, [pc, #340]	; (8003eac <HAL_DMA_Abort_IT+0x43c>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d059      	beq.n	8003e10 <HAL_DMA_Abort_IT+0x3a0>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a53      	ldr	r2, [pc, #332]	; (8003eb0 <HAL_DMA_Abort_IT+0x440>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d054      	beq.n	8003e10 <HAL_DMA_Abort_IT+0x3a0>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a52      	ldr	r2, [pc, #328]	; (8003eb4 <HAL_DMA_Abort_IT+0x444>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d04f      	beq.n	8003e10 <HAL_DMA_Abort_IT+0x3a0>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a50      	ldr	r2, [pc, #320]	; (8003eb8 <HAL_DMA_Abort_IT+0x448>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d04a      	beq.n	8003e10 <HAL_DMA_Abort_IT+0x3a0>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a4f      	ldr	r2, [pc, #316]	; (8003ebc <HAL_DMA_Abort_IT+0x44c>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d045      	beq.n	8003e10 <HAL_DMA_Abort_IT+0x3a0>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a4d      	ldr	r2, [pc, #308]	; (8003ec0 <HAL_DMA_Abort_IT+0x450>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d040      	beq.n	8003e10 <HAL_DMA_Abort_IT+0x3a0>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a4c      	ldr	r2, [pc, #304]	; (8003ec4 <HAL_DMA_Abort_IT+0x454>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d03b      	beq.n	8003e10 <HAL_DMA_Abort_IT+0x3a0>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a4a      	ldr	r2, [pc, #296]	; (8003ec8 <HAL_DMA_Abort_IT+0x458>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d036      	beq.n	8003e10 <HAL_DMA_Abort_IT+0x3a0>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a49      	ldr	r2, [pc, #292]	; (8003ecc <HAL_DMA_Abort_IT+0x45c>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d031      	beq.n	8003e10 <HAL_DMA_Abort_IT+0x3a0>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a47      	ldr	r2, [pc, #284]	; (8003ed0 <HAL_DMA_Abort_IT+0x460>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d02c      	beq.n	8003e10 <HAL_DMA_Abort_IT+0x3a0>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a46      	ldr	r2, [pc, #280]	; (8003ed4 <HAL_DMA_Abort_IT+0x464>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d027      	beq.n	8003e10 <HAL_DMA_Abort_IT+0x3a0>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a44      	ldr	r2, [pc, #272]	; (8003ed8 <HAL_DMA_Abort_IT+0x468>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d022      	beq.n	8003e10 <HAL_DMA_Abort_IT+0x3a0>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a43      	ldr	r2, [pc, #268]	; (8003edc <HAL_DMA_Abort_IT+0x46c>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d01d      	beq.n	8003e10 <HAL_DMA_Abort_IT+0x3a0>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a41      	ldr	r2, [pc, #260]	; (8003ee0 <HAL_DMA_Abort_IT+0x470>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d018      	beq.n	8003e10 <HAL_DMA_Abort_IT+0x3a0>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a40      	ldr	r2, [pc, #256]	; (8003ee4 <HAL_DMA_Abort_IT+0x474>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d013      	beq.n	8003e10 <HAL_DMA_Abort_IT+0x3a0>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a3e      	ldr	r2, [pc, #248]	; (8003ee8 <HAL_DMA_Abort_IT+0x478>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d00e      	beq.n	8003e10 <HAL_DMA_Abort_IT+0x3a0>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a3d      	ldr	r2, [pc, #244]	; (8003eec <HAL_DMA_Abort_IT+0x47c>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d009      	beq.n	8003e10 <HAL_DMA_Abort_IT+0x3a0>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a3b      	ldr	r2, [pc, #236]	; (8003ef0 <HAL_DMA_Abort_IT+0x480>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d004      	beq.n	8003e10 <HAL_DMA_Abort_IT+0x3a0>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a3a      	ldr	r2, [pc, #232]	; (8003ef4 <HAL_DMA_Abort_IT+0x484>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d101      	bne.n	8003e14 <HAL_DMA_Abort_IT+0x3a4>
 8003e10:	2301      	movs	r3, #1
 8003e12:	e000      	b.n	8003e16 <HAL_DMA_Abort_IT+0x3a6>
 8003e14:	2300      	movs	r3, #0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d028      	beq.n	8003e6c <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e28:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e2e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e34:	f003 031f 	and.w	r3, r3, #31
 8003e38:	2201      	movs	r2, #1
 8003e3a:	409a      	lsls	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003e48:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00c      	beq.n	8003e6c <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e60:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003e6a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d003      	beq.n	8003e8c <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3710      	adds	r7, #16
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	40020010 	.word	0x40020010
 8003e9c:	40020028 	.word	0x40020028
 8003ea0:	40020040 	.word	0x40020040
 8003ea4:	40020058 	.word	0x40020058
 8003ea8:	40020070 	.word	0x40020070
 8003eac:	40020088 	.word	0x40020088
 8003eb0:	400200a0 	.word	0x400200a0
 8003eb4:	400200b8 	.word	0x400200b8
 8003eb8:	40020410 	.word	0x40020410
 8003ebc:	40020428 	.word	0x40020428
 8003ec0:	40020440 	.word	0x40020440
 8003ec4:	40020458 	.word	0x40020458
 8003ec8:	40020470 	.word	0x40020470
 8003ecc:	40020488 	.word	0x40020488
 8003ed0:	400204a0 	.word	0x400204a0
 8003ed4:	400204b8 	.word	0x400204b8
 8003ed8:	58025408 	.word	0x58025408
 8003edc:	5802541c 	.word	0x5802541c
 8003ee0:	58025430 	.word	0x58025430
 8003ee4:	58025444 	.word	0x58025444
 8003ee8:	58025458 	.word	0x58025458
 8003eec:	5802546c 	.word	0x5802546c
 8003ef0:	58025480 	.word	0x58025480
 8003ef4:	58025494 	.word	0x58025494

08003ef8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b08a      	sub	sp, #40	; 0x28
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003f00:	2300      	movs	r3, #0
 8003f02:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003f04:	4b67      	ldr	r3, [pc, #412]	; (80040a4 <HAL_DMA_IRQHandler+0x1ac>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a67      	ldr	r2, [pc, #412]	; (80040a8 <HAL_DMA_IRQHandler+0x1b0>)
 8003f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f0e:	0a9b      	lsrs	r3, r3, #10
 8003f10:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f16:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f1c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003f1e:	6a3b      	ldr	r3, [r7, #32]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a5f      	ldr	r2, [pc, #380]	; (80040ac <HAL_DMA_IRQHandler+0x1b4>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d04a      	beq.n	8003fca <HAL_DMA_IRQHandler+0xd2>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a5d      	ldr	r2, [pc, #372]	; (80040b0 <HAL_DMA_IRQHandler+0x1b8>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d045      	beq.n	8003fca <HAL_DMA_IRQHandler+0xd2>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a5c      	ldr	r2, [pc, #368]	; (80040b4 <HAL_DMA_IRQHandler+0x1bc>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d040      	beq.n	8003fca <HAL_DMA_IRQHandler+0xd2>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a5a      	ldr	r2, [pc, #360]	; (80040b8 <HAL_DMA_IRQHandler+0x1c0>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d03b      	beq.n	8003fca <HAL_DMA_IRQHandler+0xd2>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a59      	ldr	r2, [pc, #356]	; (80040bc <HAL_DMA_IRQHandler+0x1c4>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d036      	beq.n	8003fca <HAL_DMA_IRQHandler+0xd2>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a57      	ldr	r2, [pc, #348]	; (80040c0 <HAL_DMA_IRQHandler+0x1c8>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d031      	beq.n	8003fca <HAL_DMA_IRQHandler+0xd2>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a56      	ldr	r2, [pc, #344]	; (80040c4 <HAL_DMA_IRQHandler+0x1cc>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d02c      	beq.n	8003fca <HAL_DMA_IRQHandler+0xd2>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a54      	ldr	r2, [pc, #336]	; (80040c8 <HAL_DMA_IRQHandler+0x1d0>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d027      	beq.n	8003fca <HAL_DMA_IRQHandler+0xd2>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a53      	ldr	r2, [pc, #332]	; (80040cc <HAL_DMA_IRQHandler+0x1d4>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d022      	beq.n	8003fca <HAL_DMA_IRQHandler+0xd2>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a51      	ldr	r2, [pc, #324]	; (80040d0 <HAL_DMA_IRQHandler+0x1d8>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d01d      	beq.n	8003fca <HAL_DMA_IRQHandler+0xd2>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a50      	ldr	r2, [pc, #320]	; (80040d4 <HAL_DMA_IRQHandler+0x1dc>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d018      	beq.n	8003fca <HAL_DMA_IRQHandler+0xd2>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a4e      	ldr	r2, [pc, #312]	; (80040d8 <HAL_DMA_IRQHandler+0x1e0>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d013      	beq.n	8003fca <HAL_DMA_IRQHandler+0xd2>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a4d      	ldr	r2, [pc, #308]	; (80040dc <HAL_DMA_IRQHandler+0x1e4>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d00e      	beq.n	8003fca <HAL_DMA_IRQHandler+0xd2>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a4b      	ldr	r2, [pc, #300]	; (80040e0 <HAL_DMA_IRQHandler+0x1e8>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d009      	beq.n	8003fca <HAL_DMA_IRQHandler+0xd2>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a4a      	ldr	r2, [pc, #296]	; (80040e4 <HAL_DMA_IRQHandler+0x1ec>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d004      	beq.n	8003fca <HAL_DMA_IRQHandler+0xd2>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a48      	ldr	r2, [pc, #288]	; (80040e8 <HAL_DMA_IRQHandler+0x1f0>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d101      	bne.n	8003fce <HAL_DMA_IRQHandler+0xd6>
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e000      	b.n	8003fd0 <HAL_DMA_IRQHandler+0xd8>
 8003fce:	2300      	movs	r3, #0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	f000 842b 	beq.w	800482c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fda:	f003 031f 	and.w	r3, r3, #31
 8003fde:	2208      	movs	r2, #8
 8003fe0:	409a      	lsls	r2, r3
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	f000 80a2 	beq.w	8004130 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a2e      	ldr	r2, [pc, #184]	; (80040ac <HAL_DMA_IRQHandler+0x1b4>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d04a      	beq.n	800408c <HAL_DMA_IRQHandler+0x194>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a2d      	ldr	r2, [pc, #180]	; (80040b0 <HAL_DMA_IRQHandler+0x1b8>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d045      	beq.n	800408c <HAL_DMA_IRQHandler+0x194>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a2b      	ldr	r2, [pc, #172]	; (80040b4 <HAL_DMA_IRQHandler+0x1bc>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d040      	beq.n	800408c <HAL_DMA_IRQHandler+0x194>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a2a      	ldr	r2, [pc, #168]	; (80040b8 <HAL_DMA_IRQHandler+0x1c0>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d03b      	beq.n	800408c <HAL_DMA_IRQHandler+0x194>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a28      	ldr	r2, [pc, #160]	; (80040bc <HAL_DMA_IRQHandler+0x1c4>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d036      	beq.n	800408c <HAL_DMA_IRQHandler+0x194>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a27      	ldr	r2, [pc, #156]	; (80040c0 <HAL_DMA_IRQHandler+0x1c8>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d031      	beq.n	800408c <HAL_DMA_IRQHandler+0x194>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a25      	ldr	r2, [pc, #148]	; (80040c4 <HAL_DMA_IRQHandler+0x1cc>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d02c      	beq.n	800408c <HAL_DMA_IRQHandler+0x194>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a24      	ldr	r2, [pc, #144]	; (80040c8 <HAL_DMA_IRQHandler+0x1d0>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d027      	beq.n	800408c <HAL_DMA_IRQHandler+0x194>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a22      	ldr	r2, [pc, #136]	; (80040cc <HAL_DMA_IRQHandler+0x1d4>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d022      	beq.n	800408c <HAL_DMA_IRQHandler+0x194>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a21      	ldr	r2, [pc, #132]	; (80040d0 <HAL_DMA_IRQHandler+0x1d8>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d01d      	beq.n	800408c <HAL_DMA_IRQHandler+0x194>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a1f      	ldr	r2, [pc, #124]	; (80040d4 <HAL_DMA_IRQHandler+0x1dc>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d018      	beq.n	800408c <HAL_DMA_IRQHandler+0x194>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a1e      	ldr	r2, [pc, #120]	; (80040d8 <HAL_DMA_IRQHandler+0x1e0>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d013      	beq.n	800408c <HAL_DMA_IRQHandler+0x194>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a1c      	ldr	r2, [pc, #112]	; (80040dc <HAL_DMA_IRQHandler+0x1e4>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d00e      	beq.n	800408c <HAL_DMA_IRQHandler+0x194>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a1b      	ldr	r2, [pc, #108]	; (80040e0 <HAL_DMA_IRQHandler+0x1e8>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d009      	beq.n	800408c <HAL_DMA_IRQHandler+0x194>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a19      	ldr	r2, [pc, #100]	; (80040e4 <HAL_DMA_IRQHandler+0x1ec>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d004      	beq.n	800408c <HAL_DMA_IRQHandler+0x194>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a18      	ldr	r2, [pc, #96]	; (80040e8 <HAL_DMA_IRQHandler+0x1f0>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d12f      	bne.n	80040ec <HAL_DMA_IRQHandler+0x1f4>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0304 	and.w	r3, r3, #4
 8004096:	2b00      	cmp	r3, #0
 8004098:	bf14      	ite	ne
 800409a:	2301      	movne	r3, #1
 800409c:	2300      	moveq	r3, #0
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	e02e      	b.n	8004100 <HAL_DMA_IRQHandler+0x208>
 80040a2:	bf00      	nop
 80040a4:	24000410 	.word	0x24000410
 80040a8:	1b4e81b5 	.word	0x1b4e81b5
 80040ac:	40020010 	.word	0x40020010
 80040b0:	40020028 	.word	0x40020028
 80040b4:	40020040 	.word	0x40020040
 80040b8:	40020058 	.word	0x40020058
 80040bc:	40020070 	.word	0x40020070
 80040c0:	40020088 	.word	0x40020088
 80040c4:	400200a0 	.word	0x400200a0
 80040c8:	400200b8 	.word	0x400200b8
 80040cc:	40020410 	.word	0x40020410
 80040d0:	40020428 	.word	0x40020428
 80040d4:	40020440 	.word	0x40020440
 80040d8:	40020458 	.word	0x40020458
 80040dc:	40020470 	.word	0x40020470
 80040e0:	40020488 	.word	0x40020488
 80040e4:	400204a0 	.word	0x400204a0
 80040e8:	400204b8 	.word	0x400204b8
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0308 	and.w	r3, r3, #8
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	bf14      	ite	ne
 80040fa:	2301      	movne	r3, #1
 80040fc:	2300      	moveq	r3, #0
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	2b00      	cmp	r3, #0
 8004102:	d015      	beq.n	8004130 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f022 0204 	bic.w	r2, r2, #4
 8004112:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004118:	f003 031f 	and.w	r3, r3, #31
 800411c:	2208      	movs	r2, #8
 800411e:	409a      	lsls	r2, r3
 8004120:	6a3b      	ldr	r3, [r7, #32]
 8004122:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004128:	f043 0201 	orr.w	r2, r3, #1
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004134:	f003 031f 	and.w	r3, r3, #31
 8004138:	69ba      	ldr	r2, [r7, #24]
 800413a:	fa22 f303 	lsr.w	r3, r2, r3
 800413e:	f003 0301 	and.w	r3, r3, #1
 8004142:	2b00      	cmp	r3, #0
 8004144:	d06e      	beq.n	8004224 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a69      	ldr	r2, [pc, #420]	; (80042f0 <HAL_DMA_IRQHandler+0x3f8>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d04a      	beq.n	80041e6 <HAL_DMA_IRQHandler+0x2ee>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a67      	ldr	r2, [pc, #412]	; (80042f4 <HAL_DMA_IRQHandler+0x3fc>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d045      	beq.n	80041e6 <HAL_DMA_IRQHandler+0x2ee>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a66      	ldr	r2, [pc, #408]	; (80042f8 <HAL_DMA_IRQHandler+0x400>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d040      	beq.n	80041e6 <HAL_DMA_IRQHandler+0x2ee>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a64      	ldr	r2, [pc, #400]	; (80042fc <HAL_DMA_IRQHandler+0x404>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d03b      	beq.n	80041e6 <HAL_DMA_IRQHandler+0x2ee>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a63      	ldr	r2, [pc, #396]	; (8004300 <HAL_DMA_IRQHandler+0x408>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d036      	beq.n	80041e6 <HAL_DMA_IRQHandler+0x2ee>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a61      	ldr	r2, [pc, #388]	; (8004304 <HAL_DMA_IRQHandler+0x40c>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d031      	beq.n	80041e6 <HAL_DMA_IRQHandler+0x2ee>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a60      	ldr	r2, [pc, #384]	; (8004308 <HAL_DMA_IRQHandler+0x410>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d02c      	beq.n	80041e6 <HAL_DMA_IRQHandler+0x2ee>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a5e      	ldr	r2, [pc, #376]	; (800430c <HAL_DMA_IRQHandler+0x414>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d027      	beq.n	80041e6 <HAL_DMA_IRQHandler+0x2ee>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a5d      	ldr	r2, [pc, #372]	; (8004310 <HAL_DMA_IRQHandler+0x418>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d022      	beq.n	80041e6 <HAL_DMA_IRQHandler+0x2ee>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a5b      	ldr	r2, [pc, #364]	; (8004314 <HAL_DMA_IRQHandler+0x41c>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d01d      	beq.n	80041e6 <HAL_DMA_IRQHandler+0x2ee>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a5a      	ldr	r2, [pc, #360]	; (8004318 <HAL_DMA_IRQHandler+0x420>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d018      	beq.n	80041e6 <HAL_DMA_IRQHandler+0x2ee>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a58      	ldr	r2, [pc, #352]	; (800431c <HAL_DMA_IRQHandler+0x424>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d013      	beq.n	80041e6 <HAL_DMA_IRQHandler+0x2ee>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a57      	ldr	r2, [pc, #348]	; (8004320 <HAL_DMA_IRQHandler+0x428>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d00e      	beq.n	80041e6 <HAL_DMA_IRQHandler+0x2ee>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a55      	ldr	r2, [pc, #340]	; (8004324 <HAL_DMA_IRQHandler+0x42c>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d009      	beq.n	80041e6 <HAL_DMA_IRQHandler+0x2ee>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a54      	ldr	r2, [pc, #336]	; (8004328 <HAL_DMA_IRQHandler+0x430>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d004      	beq.n	80041e6 <HAL_DMA_IRQHandler+0x2ee>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a52      	ldr	r2, [pc, #328]	; (800432c <HAL_DMA_IRQHandler+0x434>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d10a      	bne.n	80041fc <HAL_DMA_IRQHandler+0x304>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	695b      	ldr	r3, [r3, #20]
 80041ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	bf14      	ite	ne
 80041f4:	2301      	movne	r3, #1
 80041f6:	2300      	moveq	r3, #0
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	e003      	b.n	8004204 <HAL_DMA_IRQHandler+0x30c>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	2300      	movs	r3, #0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d00d      	beq.n	8004224 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800420c:	f003 031f 	and.w	r3, r3, #31
 8004210:	2201      	movs	r2, #1
 8004212:	409a      	lsls	r2, r3
 8004214:	6a3b      	ldr	r3, [r7, #32]
 8004216:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800421c:	f043 0202 	orr.w	r2, r3, #2
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004228:	f003 031f 	and.w	r3, r3, #31
 800422c:	2204      	movs	r2, #4
 800422e:	409a      	lsls	r2, r3
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	4013      	ands	r3, r2
 8004234:	2b00      	cmp	r3, #0
 8004236:	f000 808f 	beq.w	8004358 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a2c      	ldr	r2, [pc, #176]	; (80042f0 <HAL_DMA_IRQHandler+0x3f8>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d04a      	beq.n	80042da <HAL_DMA_IRQHandler+0x3e2>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a2a      	ldr	r2, [pc, #168]	; (80042f4 <HAL_DMA_IRQHandler+0x3fc>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d045      	beq.n	80042da <HAL_DMA_IRQHandler+0x3e2>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a29      	ldr	r2, [pc, #164]	; (80042f8 <HAL_DMA_IRQHandler+0x400>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d040      	beq.n	80042da <HAL_DMA_IRQHandler+0x3e2>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a27      	ldr	r2, [pc, #156]	; (80042fc <HAL_DMA_IRQHandler+0x404>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d03b      	beq.n	80042da <HAL_DMA_IRQHandler+0x3e2>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a26      	ldr	r2, [pc, #152]	; (8004300 <HAL_DMA_IRQHandler+0x408>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d036      	beq.n	80042da <HAL_DMA_IRQHandler+0x3e2>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a24      	ldr	r2, [pc, #144]	; (8004304 <HAL_DMA_IRQHandler+0x40c>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d031      	beq.n	80042da <HAL_DMA_IRQHandler+0x3e2>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a23      	ldr	r2, [pc, #140]	; (8004308 <HAL_DMA_IRQHandler+0x410>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d02c      	beq.n	80042da <HAL_DMA_IRQHandler+0x3e2>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a21      	ldr	r2, [pc, #132]	; (800430c <HAL_DMA_IRQHandler+0x414>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d027      	beq.n	80042da <HAL_DMA_IRQHandler+0x3e2>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a20      	ldr	r2, [pc, #128]	; (8004310 <HAL_DMA_IRQHandler+0x418>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d022      	beq.n	80042da <HAL_DMA_IRQHandler+0x3e2>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a1e      	ldr	r2, [pc, #120]	; (8004314 <HAL_DMA_IRQHandler+0x41c>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d01d      	beq.n	80042da <HAL_DMA_IRQHandler+0x3e2>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a1d      	ldr	r2, [pc, #116]	; (8004318 <HAL_DMA_IRQHandler+0x420>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d018      	beq.n	80042da <HAL_DMA_IRQHandler+0x3e2>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a1b      	ldr	r2, [pc, #108]	; (800431c <HAL_DMA_IRQHandler+0x424>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d013      	beq.n	80042da <HAL_DMA_IRQHandler+0x3e2>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a1a      	ldr	r2, [pc, #104]	; (8004320 <HAL_DMA_IRQHandler+0x428>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d00e      	beq.n	80042da <HAL_DMA_IRQHandler+0x3e2>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a18      	ldr	r2, [pc, #96]	; (8004324 <HAL_DMA_IRQHandler+0x42c>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d009      	beq.n	80042da <HAL_DMA_IRQHandler+0x3e2>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a17      	ldr	r2, [pc, #92]	; (8004328 <HAL_DMA_IRQHandler+0x430>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d004      	beq.n	80042da <HAL_DMA_IRQHandler+0x3e2>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a15      	ldr	r2, [pc, #84]	; (800432c <HAL_DMA_IRQHandler+0x434>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d12a      	bne.n	8004330 <HAL_DMA_IRQHandler+0x438>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0302 	and.w	r3, r3, #2
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	bf14      	ite	ne
 80042e8:	2301      	movne	r3, #1
 80042ea:	2300      	moveq	r3, #0
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	e023      	b.n	8004338 <HAL_DMA_IRQHandler+0x440>
 80042f0:	40020010 	.word	0x40020010
 80042f4:	40020028 	.word	0x40020028
 80042f8:	40020040 	.word	0x40020040
 80042fc:	40020058 	.word	0x40020058
 8004300:	40020070 	.word	0x40020070
 8004304:	40020088 	.word	0x40020088
 8004308:	400200a0 	.word	0x400200a0
 800430c:	400200b8 	.word	0x400200b8
 8004310:	40020410 	.word	0x40020410
 8004314:	40020428 	.word	0x40020428
 8004318:	40020440 	.word	0x40020440
 800431c:	40020458 	.word	0x40020458
 8004320:	40020470 	.word	0x40020470
 8004324:	40020488 	.word	0x40020488
 8004328:	400204a0 	.word	0x400204a0
 800432c:	400204b8 	.word	0x400204b8
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2300      	movs	r3, #0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d00d      	beq.n	8004358 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004340:	f003 031f 	and.w	r3, r3, #31
 8004344:	2204      	movs	r2, #4
 8004346:	409a      	lsls	r2, r3
 8004348:	6a3b      	ldr	r3, [r7, #32]
 800434a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004350:	f043 0204 	orr.w	r2, r3, #4
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800435c:	f003 031f 	and.w	r3, r3, #31
 8004360:	2210      	movs	r2, #16
 8004362:	409a      	lsls	r2, r3
 8004364:	69bb      	ldr	r3, [r7, #24]
 8004366:	4013      	ands	r3, r2
 8004368:	2b00      	cmp	r3, #0
 800436a:	f000 80a6 	beq.w	80044ba <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a85      	ldr	r2, [pc, #532]	; (8004588 <HAL_DMA_IRQHandler+0x690>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d04a      	beq.n	800440e <HAL_DMA_IRQHandler+0x516>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a83      	ldr	r2, [pc, #524]	; (800458c <HAL_DMA_IRQHandler+0x694>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d045      	beq.n	800440e <HAL_DMA_IRQHandler+0x516>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a82      	ldr	r2, [pc, #520]	; (8004590 <HAL_DMA_IRQHandler+0x698>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d040      	beq.n	800440e <HAL_DMA_IRQHandler+0x516>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a80      	ldr	r2, [pc, #512]	; (8004594 <HAL_DMA_IRQHandler+0x69c>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d03b      	beq.n	800440e <HAL_DMA_IRQHandler+0x516>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a7f      	ldr	r2, [pc, #508]	; (8004598 <HAL_DMA_IRQHandler+0x6a0>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d036      	beq.n	800440e <HAL_DMA_IRQHandler+0x516>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a7d      	ldr	r2, [pc, #500]	; (800459c <HAL_DMA_IRQHandler+0x6a4>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d031      	beq.n	800440e <HAL_DMA_IRQHandler+0x516>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a7c      	ldr	r2, [pc, #496]	; (80045a0 <HAL_DMA_IRQHandler+0x6a8>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d02c      	beq.n	800440e <HAL_DMA_IRQHandler+0x516>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a7a      	ldr	r2, [pc, #488]	; (80045a4 <HAL_DMA_IRQHandler+0x6ac>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d027      	beq.n	800440e <HAL_DMA_IRQHandler+0x516>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a79      	ldr	r2, [pc, #484]	; (80045a8 <HAL_DMA_IRQHandler+0x6b0>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d022      	beq.n	800440e <HAL_DMA_IRQHandler+0x516>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a77      	ldr	r2, [pc, #476]	; (80045ac <HAL_DMA_IRQHandler+0x6b4>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d01d      	beq.n	800440e <HAL_DMA_IRQHandler+0x516>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a76      	ldr	r2, [pc, #472]	; (80045b0 <HAL_DMA_IRQHandler+0x6b8>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d018      	beq.n	800440e <HAL_DMA_IRQHandler+0x516>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a74      	ldr	r2, [pc, #464]	; (80045b4 <HAL_DMA_IRQHandler+0x6bc>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d013      	beq.n	800440e <HAL_DMA_IRQHandler+0x516>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a73      	ldr	r2, [pc, #460]	; (80045b8 <HAL_DMA_IRQHandler+0x6c0>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d00e      	beq.n	800440e <HAL_DMA_IRQHandler+0x516>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a71      	ldr	r2, [pc, #452]	; (80045bc <HAL_DMA_IRQHandler+0x6c4>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d009      	beq.n	800440e <HAL_DMA_IRQHandler+0x516>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a70      	ldr	r2, [pc, #448]	; (80045c0 <HAL_DMA_IRQHandler+0x6c8>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d004      	beq.n	800440e <HAL_DMA_IRQHandler+0x516>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a6e      	ldr	r2, [pc, #440]	; (80045c4 <HAL_DMA_IRQHandler+0x6cc>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d10a      	bne.n	8004424 <HAL_DMA_IRQHandler+0x52c>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 0308 	and.w	r3, r3, #8
 8004418:	2b00      	cmp	r3, #0
 800441a:	bf14      	ite	ne
 800441c:	2301      	movne	r3, #1
 800441e:	2300      	moveq	r3, #0
 8004420:	b2db      	uxtb	r3, r3
 8004422:	e009      	b.n	8004438 <HAL_DMA_IRQHandler+0x540>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0304 	and.w	r3, r3, #4
 800442e:	2b00      	cmp	r3, #0
 8004430:	bf14      	ite	ne
 8004432:	2301      	movne	r3, #1
 8004434:	2300      	moveq	r3, #0
 8004436:	b2db      	uxtb	r3, r3
 8004438:	2b00      	cmp	r3, #0
 800443a:	d03e      	beq.n	80044ba <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004440:	f003 031f 	and.w	r3, r3, #31
 8004444:	2210      	movs	r2, #16
 8004446:	409a      	lsls	r2, r3
 8004448:	6a3b      	ldr	r3, [r7, #32]
 800444a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d018      	beq.n	800448c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d108      	bne.n	800447a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446c:	2b00      	cmp	r3, #0
 800446e:	d024      	beq.n	80044ba <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	4798      	blx	r3
 8004478:	e01f      	b.n	80044ba <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800447e:	2b00      	cmp	r3, #0
 8004480:	d01b      	beq.n	80044ba <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	4798      	blx	r3
 800448a:	e016      	b.n	80044ba <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004496:	2b00      	cmp	r3, #0
 8004498:	d107      	bne.n	80044aa <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f022 0208 	bic.w	r2, r2, #8
 80044a8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d003      	beq.n	80044ba <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044be:	f003 031f 	and.w	r3, r3, #31
 80044c2:	2220      	movs	r2, #32
 80044c4:	409a      	lsls	r2, r3
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	4013      	ands	r3, r2
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	f000 8110 	beq.w	80046f0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a2c      	ldr	r2, [pc, #176]	; (8004588 <HAL_DMA_IRQHandler+0x690>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d04a      	beq.n	8004570 <HAL_DMA_IRQHandler+0x678>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a2b      	ldr	r2, [pc, #172]	; (800458c <HAL_DMA_IRQHandler+0x694>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d045      	beq.n	8004570 <HAL_DMA_IRQHandler+0x678>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a29      	ldr	r2, [pc, #164]	; (8004590 <HAL_DMA_IRQHandler+0x698>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d040      	beq.n	8004570 <HAL_DMA_IRQHandler+0x678>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a28      	ldr	r2, [pc, #160]	; (8004594 <HAL_DMA_IRQHandler+0x69c>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d03b      	beq.n	8004570 <HAL_DMA_IRQHandler+0x678>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a26      	ldr	r2, [pc, #152]	; (8004598 <HAL_DMA_IRQHandler+0x6a0>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d036      	beq.n	8004570 <HAL_DMA_IRQHandler+0x678>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a25      	ldr	r2, [pc, #148]	; (800459c <HAL_DMA_IRQHandler+0x6a4>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d031      	beq.n	8004570 <HAL_DMA_IRQHandler+0x678>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a23      	ldr	r2, [pc, #140]	; (80045a0 <HAL_DMA_IRQHandler+0x6a8>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d02c      	beq.n	8004570 <HAL_DMA_IRQHandler+0x678>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a22      	ldr	r2, [pc, #136]	; (80045a4 <HAL_DMA_IRQHandler+0x6ac>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d027      	beq.n	8004570 <HAL_DMA_IRQHandler+0x678>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a20      	ldr	r2, [pc, #128]	; (80045a8 <HAL_DMA_IRQHandler+0x6b0>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d022      	beq.n	8004570 <HAL_DMA_IRQHandler+0x678>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a1f      	ldr	r2, [pc, #124]	; (80045ac <HAL_DMA_IRQHandler+0x6b4>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d01d      	beq.n	8004570 <HAL_DMA_IRQHandler+0x678>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a1d      	ldr	r2, [pc, #116]	; (80045b0 <HAL_DMA_IRQHandler+0x6b8>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d018      	beq.n	8004570 <HAL_DMA_IRQHandler+0x678>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a1c      	ldr	r2, [pc, #112]	; (80045b4 <HAL_DMA_IRQHandler+0x6bc>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d013      	beq.n	8004570 <HAL_DMA_IRQHandler+0x678>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a1a      	ldr	r2, [pc, #104]	; (80045b8 <HAL_DMA_IRQHandler+0x6c0>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d00e      	beq.n	8004570 <HAL_DMA_IRQHandler+0x678>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a19      	ldr	r2, [pc, #100]	; (80045bc <HAL_DMA_IRQHandler+0x6c4>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d009      	beq.n	8004570 <HAL_DMA_IRQHandler+0x678>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a17      	ldr	r2, [pc, #92]	; (80045c0 <HAL_DMA_IRQHandler+0x6c8>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d004      	beq.n	8004570 <HAL_DMA_IRQHandler+0x678>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a16      	ldr	r2, [pc, #88]	; (80045c4 <HAL_DMA_IRQHandler+0x6cc>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d12b      	bne.n	80045c8 <HAL_DMA_IRQHandler+0x6d0>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0310 	and.w	r3, r3, #16
 800457a:	2b00      	cmp	r3, #0
 800457c:	bf14      	ite	ne
 800457e:	2301      	movne	r3, #1
 8004580:	2300      	moveq	r3, #0
 8004582:	b2db      	uxtb	r3, r3
 8004584:	e02a      	b.n	80045dc <HAL_DMA_IRQHandler+0x6e4>
 8004586:	bf00      	nop
 8004588:	40020010 	.word	0x40020010
 800458c:	40020028 	.word	0x40020028
 8004590:	40020040 	.word	0x40020040
 8004594:	40020058 	.word	0x40020058
 8004598:	40020070 	.word	0x40020070
 800459c:	40020088 	.word	0x40020088
 80045a0:	400200a0 	.word	0x400200a0
 80045a4:	400200b8 	.word	0x400200b8
 80045a8:	40020410 	.word	0x40020410
 80045ac:	40020428 	.word	0x40020428
 80045b0:	40020440 	.word	0x40020440
 80045b4:	40020458 	.word	0x40020458
 80045b8:	40020470 	.word	0x40020470
 80045bc:	40020488 	.word	0x40020488
 80045c0:	400204a0 	.word	0x400204a0
 80045c4:	400204b8 	.word	0x400204b8
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 0302 	and.w	r3, r3, #2
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	bf14      	ite	ne
 80045d6:	2301      	movne	r3, #1
 80045d8:	2300      	moveq	r3, #0
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	2b00      	cmp	r3, #0
 80045de:	f000 8087 	beq.w	80046f0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045e6:	f003 031f 	and.w	r3, r3, #31
 80045ea:	2220      	movs	r2, #32
 80045ec:	409a      	lsls	r2, r3
 80045ee:	6a3b      	ldr	r3, [r7, #32]
 80045f0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	2b04      	cmp	r3, #4
 80045fc:	d139      	bne.n	8004672 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f022 0216 	bic.w	r2, r2, #22
 800460c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	695a      	ldr	r2, [r3, #20]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800461c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004622:	2b00      	cmp	r3, #0
 8004624:	d103      	bne.n	800462e <HAL_DMA_IRQHandler+0x736>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800462a:	2b00      	cmp	r3, #0
 800462c:	d007      	beq.n	800463e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f022 0208 	bic.w	r2, r2, #8
 800463c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004642:	f003 031f 	and.w	r3, r3, #31
 8004646:	223f      	movs	r2, #63	; 0x3f
 8004648:	409a      	lsls	r2, r3
 800464a:	6a3b      	ldr	r3, [r7, #32]
 800464c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2201      	movs	r2, #1
 8004652:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004662:	2b00      	cmp	r3, #0
 8004664:	f000 834a 	beq.w	8004cfc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	4798      	blx	r3
          }
          return;
 8004670:	e344      	b.n	8004cfc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800467c:	2b00      	cmp	r3, #0
 800467e:	d018      	beq.n	80046b2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d108      	bne.n	80046a0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004692:	2b00      	cmp	r3, #0
 8004694:	d02c      	beq.n	80046f0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	4798      	blx	r3
 800469e:	e027      	b.n	80046f0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d023      	beq.n	80046f0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	4798      	blx	r3
 80046b0:	e01e      	b.n	80046f0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d10f      	bne.n	80046e0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f022 0210 	bic.w	r2, r2, #16
 80046ce:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d003      	beq.n	80046f0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	f000 8306 	beq.w	8004d06 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046fe:	f003 0301 	and.w	r3, r3, #1
 8004702:	2b00      	cmp	r3, #0
 8004704:	f000 8088 	beq.w	8004818 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2204      	movs	r2, #4
 800470c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a7a      	ldr	r2, [pc, #488]	; (8004900 <HAL_DMA_IRQHandler+0xa08>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d04a      	beq.n	80047b0 <HAL_DMA_IRQHandler+0x8b8>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a79      	ldr	r2, [pc, #484]	; (8004904 <HAL_DMA_IRQHandler+0xa0c>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d045      	beq.n	80047b0 <HAL_DMA_IRQHandler+0x8b8>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a77      	ldr	r2, [pc, #476]	; (8004908 <HAL_DMA_IRQHandler+0xa10>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d040      	beq.n	80047b0 <HAL_DMA_IRQHandler+0x8b8>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a76      	ldr	r2, [pc, #472]	; (800490c <HAL_DMA_IRQHandler+0xa14>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d03b      	beq.n	80047b0 <HAL_DMA_IRQHandler+0x8b8>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a74      	ldr	r2, [pc, #464]	; (8004910 <HAL_DMA_IRQHandler+0xa18>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d036      	beq.n	80047b0 <HAL_DMA_IRQHandler+0x8b8>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a73      	ldr	r2, [pc, #460]	; (8004914 <HAL_DMA_IRQHandler+0xa1c>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d031      	beq.n	80047b0 <HAL_DMA_IRQHandler+0x8b8>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a71      	ldr	r2, [pc, #452]	; (8004918 <HAL_DMA_IRQHandler+0xa20>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d02c      	beq.n	80047b0 <HAL_DMA_IRQHandler+0x8b8>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a70      	ldr	r2, [pc, #448]	; (800491c <HAL_DMA_IRQHandler+0xa24>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d027      	beq.n	80047b0 <HAL_DMA_IRQHandler+0x8b8>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a6e      	ldr	r2, [pc, #440]	; (8004920 <HAL_DMA_IRQHandler+0xa28>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d022      	beq.n	80047b0 <HAL_DMA_IRQHandler+0x8b8>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a6d      	ldr	r2, [pc, #436]	; (8004924 <HAL_DMA_IRQHandler+0xa2c>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d01d      	beq.n	80047b0 <HAL_DMA_IRQHandler+0x8b8>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a6b      	ldr	r2, [pc, #428]	; (8004928 <HAL_DMA_IRQHandler+0xa30>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d018      	beq.n	80047b0 <HAL_DMA_IRQHandler+0x8b8>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a6a      	ldr	r2, [pc, #424]	; (800492c <HAL_DMA_IRQHandler+0xa34>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d013      	beq.n	80047b0 <HAL_DMA_IRQHandler+0x8b8>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a68      	ldr	r2, [pc, #416]	; (8004930 <HAL_DMA_IRQHandler+0xa38>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d00e      	beq.n	80047b0 <HAL_DMA_IRQHandler+0x8b8>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a67      	ldr	r2, [pc, #412]	; (8004934 <HAL_DMA_IRQHandler+0xa3c>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d009      	beq.n	80047b0 <HAL_DMA_IRQHandler+0x8b8>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a65      	ldr	r2, [pc, #404]	; (8004938 <HAL_DMA_IRQHandler+0xa40>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d004      	beq.n	80047b0 <HAL_DMA_IRQHandler+0x8b8>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a64      	ldr	r2, [pc, #400]	; (800493c <HAL_DMA_IRQHandler+0xa44>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d108      	bne.n	80047c2 <HAL_DMA_IRQHandler+0x8ca>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f022 0201 	bic.w	r2, r2, #1
 80047be:	601a      	str	r2, [r3, #0]
 80047c0:	e007      	b.n	80047d2 <HAL_DMA_IRQHandler+0x8da>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f022 0201 	bic.w	r2, r2, #1
 80047d0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	3301      	adds	r3, #1
 80047d6:	60fb      	str	r3, [r7, #12]
 80047d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047da:	429a      	cmp	r2, r3
 80047dc:	d307      	bcc.n	80047ee <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0301 	and.w	r3, r3, #1
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d1f2      	bne.n	80047d2 <HAL_DMA_IRQHandler+0x8da>
 80047ec:	e000      	b.n	80047f0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80047ee:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0301 	and.w	r3, r3, #1
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d004      	beq.n	8004808 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2203      	movs	r2, #3
 8004802:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004806:	e003      	b.n	8004810 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800481c:	2b00      	cmp	r3, #0
 800481e:	f000 8272 	beq.w	8004d06 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	4798      	blx	r3
 800482a:	e26c      	b.n	8004d06 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a43      	ldr	r2, [pc, #268]	; (8004940 <HAL_DMA_IRQHandler+0xa48>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d022      	beq.n	800487c <HAL_DMA_IRQHandler+0x984>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a42      	ldr	r2, [pc, #264]	; (8004944 <HAL_DMA_IRQHandler+0xa4c>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d01d      	beq.n	800487c <HAL_DMA_IRQHandler+0x984>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a40      	ldr	r2, [pc, #256]	; (8004948 <HAL_DMA_IRQHandler+0xa50>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d018      	beq.n	800487c <HAL_DMA_IRQHandler+0x984>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a3f      	ldr	r2, [pc, #252]	; (800494c <HAL_DMA_IRQHandler+0xa54>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d013      	beq.n	800487c <HAL_DMA_IRQHandler+0x984>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a3d      	ldr	r2, [pc, #244]	; (8004950 <HAL_DMA_IRQHandler+0xa58>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d00e      	beq.n	800487c <HAL_DMA_IRQHandler+0x984>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a3c      	ldr	r2, [pc, #240]	; (8004954 <HAL_DMA_IRQHandler+0xa5c>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d009      	beq.n	800487c <HAL_DMA_IRQHandler+0x984>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a3a      	ldr	r2, [pc, #232]	; (8004958 <HAL_DMA_IRQHandler+0xa60>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d004      	beq.n	800487c <HAL_DMA_IRQHandler+0x984>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a39      	ldr	r2, [pc, #228]	; (800495c <HAL_DMA_IRQHandler+0xa64>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d101      	bne.n	8004880 <HAL_DMA_IRQHandler+0x988>
 800487c:	2301      	movs	r3, #1
 800487e:	e000      	b.n	8004882 <HAL_DMA_IRQHandler+0x98a>
 8004880:	2300      	movs	r3, #0
 8004882:	2b00      	cmp	r3, #0
 8004884:	f000 823f 	beq.w	8004d06 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004894:	f003 031f 	and.w	r3, r3, #31
 8004898:	2204      	movs	r2, #4
 800489a:	409a      	lsls	r2, r3
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	4013      	ands	r3, r2
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	f000 80cd 	beq.w	8004a40 <HAL_DMA_IRQHandler+0xb48>
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	f003 0304 	and.w	r3, r3, #4
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	f000 80c7 	beq.w	8004a40 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048b6:	f003 031f 	and.w	r3, r3, #31
 80048ba:	2204      	movs	r2, #4
 80048bc:	409a      	lsls	r2, r3
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d049      	beq.n	8004960 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d109      	bne.n	80048ea <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048da:	2b00      	cmp	r3, #0
 80048dc:	f000 8210 	beq.w	8004d00 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048e8:	e20a      	b.n	8004d00 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	f000 8206 	beq.w	8004d00 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048fc:	e200      	b.n	8004d00 <HAL_DMA_IRQHandler+0xe08>
 80048fe:	bf00      	nop
 8004900:	40020010 	.word	0x40020010
 8004904:	40020028 	.word	0x40020028
 8004908:	40020040 	.word	0x40020040
 800490c:	40020058 	.word	0x40020058
 8004910:	40020070 	.word	0x40020070
 8004914:	40020088 	.word	0x40020088
 8004918:	400200a0 	.word	0x400200a0
 800491c:	400200b8 	.word	0x400200b8
 8004920:	40020410 	.word	0x40020410
 8004924:	40020428 	.word	0x40020428
 8004928:	40020440 	.word	0x40020440
 800492c:	40020458 	.word	0x40020458
 8004930:	40020470 	.word	0x40020470
 8004934:	40020488 	.word	0x40020488
 8004938:	400204a0 	.word	0x400204a0
 800493c:	400204b8 	.word	0x400204b8
 8004940:	58025408 	.word	0x58025408
 8004944:	5802541c 	.word	0x5802541c
 8004948:	58025430 	.word	0x58025430
 800494c:	58025444 	.word	0x58025444
 8004950:	58025458 	.word	0x58025458
 8004954:	5802546c 	.word	0x5802546c
 8004958:	58025480 	.word	0x58025480
 800495c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	f003 0320 	and.w	r3, r3, #32
 8004966:	2b00      	cmp	r3, #0
 8004968:	d160      	bne.n	8004a2c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a8c      	ldr	r2, [pc, #560]	; (8004ba0 <HAL_DMA_IRQHandler+0xca8>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d04a      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xb12>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a8a      	ldr	r2, [pc, #552]	; (8004ba4 <HAL_DMA_IRQHandler+0xcac>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d045      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xb12>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a89      	ldr	r2, [pc, #548]	; (8004ba8 <HAL_DMA_IRQHandler+0xcb0>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d040      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xb12>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a87      	ldr	r2, [pc, #540]	; (8004bac <HAL_DMA_IRQHandler+0xcb4>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d03b      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xb12>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a86      	ldr	r2, [pc, #536]	; (8004bb0 <HAL_DMA_IRQHandler+0xcb8>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d036      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xb12>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a84      	ldr	r2, [pc, #528]	; (8004bb4 <HAL_DMA_IRQHandler+0xcbc>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d031      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xb12>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a83      	ldr	r2, [pc, #524]	; (8004bb8 <HAL_DMA_IRQHandler+0xcc0>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d02c      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xb12>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a81      	ldr	r2, [pc, #516]	; (8004bbc <HAL_DMA_IRQHandler+0xcc4>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d027      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xb12>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a80      	ldr	r2, [pc, #512]	; (8004bc0 <HAL_DMA_IRQHandler+0xcc8>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d022      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xb12>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a7e      	ldr	r2, [pc, #504]	; (8004bc4 <HAL_DMA_IRQHandler+0xccc>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d01d      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xb12>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a7d      	ldr	r2, [pc, #500]	; (8004bc8 <HAL_DMA_IRQHandler+0xcd0>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d018      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xb12>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a7b      	ldr	r2, [pc, #492]	; (8004bcc <HAL_DMA_IRQHandler+0xcd4>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d013      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xb12>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a7a      	ldr	r2, [pc, #488]	; (8004bd0 <HAL_DMA_IRQHandler+0xcd8>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d00e      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xb12>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a78      	ldr	r2, [pc, #480]	; (8004bd4 <HAL_DMA_IRQHandler+0xcdc>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d009      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xb12>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a77      	ldr	r2, [pc, #476]	; (8004bd8 <HAL_DMA_IRQHandler+0xce0>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d004      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xb12>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a75      	ldr	r2, [pc, #468]	; (8004bdc <HAL_DMA_IRQHandler+0xce4>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d108      	bne.n	8004a1c <HAL_DMA_IRQHandler+0xb24>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f022 0208 	bic.w	r2, r2, #8
 8004a18:	601a      	str	r2, [r3, #0]
 8004a1a:	e007      	b.n	8004a2c <HAL_DMA_IRQHandler+0xb34>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f022 0204 	bic.w	r2, r2, #4
 8004a2a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	f000 8165 	beq.w	8004d00 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a3e:	e15f      	b.n	8004d00 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a44:	f003 031f 	and.w	r3, r3, #31
 8004a48:	2202      	movs	r2, #2
 8004a4a:	409a      	lsls	r2, r3
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	4013      	ands	r3, r2
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	f000 80c5 	beq.w	8004be0 <HAL_DMA_IRQHandler+0xce8>
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	f003 0302 	and.w	r3, r3, #2
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	f000 80bf 	beq.w	8004be0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a66:	f003 031f 	and.w	r3, r3, #31
 8004a6a:	2202      	movs	r2, #2
 8004a6c:	409a      	lsls	r2, r3
 8004a6e:	69fb      	ldr	r3, [r7, #28]
 8004a70:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d018      	beq.n	8004aae <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d109      	bne.n	8004a9a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	f000 813a 	beq.w	8004d04 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a98:	e134      	b.n	8004d04 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	f000 8130 	beq.w	8004d04 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004aac:	e12a      	b.n	8004d04 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	f003 0320 	and.w	r3, r3, #32
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d168      	bne.n	8004b8a <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a38      	ldr	r2, [pc, #224]	; (8004ba0 <HAL_DMA_IRQHandler+0xca8>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d04a      	beq.n	8004b58 <HAL_DMA_IRQHandler+0xc60>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a37      	ldr	r2, [pc, #220]	; (8004ba4 <HAL_DMA_IRQHandler+0xcac>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d045      	beq.n	8004b58 <HAL_DMA_IRQHandler+0xc60>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a35      	ldr	r2, [pc, #212]	; (8004ba8 <HAL_DMA_IRQHandler+0xcb0>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d040      	beq.n	8004b58 <HAL_DMA_IRQHandler+0xc60>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a34      	ldr	r2, [pc, #208]	; (8004bac <HAL_DMA_IRQHandler+0xcb4>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d03b      	beq.n	8004b58 <HAL_DMA_IRQHandler+0xc60>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a32      	ldr	r2, [pc, #200]	; (8004bb0 <HAL_DMA_IRQHandler+0xcb8>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d036      	beq.n	8004b58 <HAL_DMA_IRQHandler+0xc60>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a31      	ldr	r2, [pc, #196]	; (8004bb4 <HAL_DMA_IRQHandler+0xcbc>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d031      	beq.n	8004b58 <HAL_DMA_IRQHandler+0xc60>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a2f      	ldr	r2, [pc, #188]	; (8004bb8 <HAL_DMA_IRQHandler+0xcc0>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d02c      	beq.n	8004b58 <HAL_DMA_IRQHandler+0xc60>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a2e      	ldr	r2, [pc, #184]	; (8004bbc <HAL_DMA_IRQHandler+0xcc4>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d027      	beq.n	8004b58 <HAL_DMA_IRQHandler+0xc60>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a2c      	ldr	r2, [pc, #176]	; (8004bc0 <HAL_DMA_IRQHandler+0xcc8>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d022      	beq.n	8004b58 <HAL_DMA_IRQHandler+0xc60>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a2b      	ldr	r2, [pc, #172]	; (8004bc4 <HAL_DMA_IRQHandler+0xccc>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d01d      	beq.n	8004b58 <HAL_DMA_IRQHandler+0xc60>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a29      	ldr	r2, [pc, #164]	; (8004bc8 <HAL_DMA_IRQHandler+0xcd0>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d018      	beq.n	8004b58 <HAL_DMA_IRQHandler+0xc60>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a28      	ldr	r2, [pc, #160]	; (8004bcc <HAL_DMA_IRQHandler+0xcd4>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d013      	beq.n	8004b58 <HAL_DMA_IRQHandler+0xc60>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a26      	ldr	r2, [pc, #152]	; (8004bd0 <HAL_DMA_IRQHandler+0xcd8>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d00e      	beq.n	8004b58 <HAL_DMA_IRQHandler+0xc60>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a25      	ldr	r2, [pc, #148]	; (8004bd4 <HAL_DMA_IRQHandler+0xcdc>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d009      	beq.n	8004b58 <HAL_DMA_IRQHandler+0xc60>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a23      	ldr	r2, [pc, #140]	; (8004bd8 <HAL_DMA_IRQHandler+0xce0>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d004      	beq.n	8004b58 <HAL_DMA_IRQHandler+0xc60>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a22      	ldr	r2, [pc, #136]	; (8004bdc <HAL_DMA_IRQHandler+0xce4>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d108      	bne.n	8004b6a <HAL_DMA_IRQHandler+0xc72>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f022 0214 	bic.w	r2, r2, #20
 8004b66:	601a      	str	r2, [r3, #0]
 8004b68:	e007      	b.n	8004b7a <HAL_DMA_IRQHandler+0xc82>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f022 020a 	bic.w	r2, r2, #10
 8004b78:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	f000 80b8 	beq.w	8004d04 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b9c:	e0b2      	b.n	8004d04 <HAL_DMA_IRQHandler+0xe0c>
 8004b9e:	bf00      	nop
 8004ba0:	40020010 	.word	0x40020010
 8004ba4:	40020028 	.word	0x40020028
 8004ba8:	40020040 	.word	0x40020040
 8004bac:	40020058 	.word	0x40020058
 8004bb0:	40020070 	.word	0x40020070
 8004bb4:	40020088 	.word	0x40020088
 8004bb8:	400200a0 	.word	0x400200a0
 8004bbc:	400200b8 	.word	0x400200b8
 8004bc0:	40020410 	.word	0x40020410
 8004bc4:	40020428 	.word	0x40020428
 8004bc8:	40020440 	.word	0x40020440
 8004bcc:	40020458 	.word	0x40020458
 8004bd0:	40020470 	.word	0x40020470
 8004bd4:	40020488 	.word	0x40020488
 8004bd8:	400204a0 	.word	0x400204a0
 8004bdc:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004be4:	f003 031f 	and.w	r3, r3, #31
 8004be8:	2208      	movs	r2, #8
 8004bea:	409a      	lsls	r2, r3
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	4013      	ands	r3, r2
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	f000 8088 	beq.w	8004d06 <HAL_DMA_IRQHandler+0xe0e>
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	f003 0308 	and.w	r3, r3, #8
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	f000 8082 	beq.w	8004d06 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a41      	ldr	r2, [pc, #260]	; (8004d0c <HAL_DMA_IRQHandler+0xe14>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d04a      	beq.n	8004ca2 <HAL_DMA_IRQHandler+0xdaa>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a3f      	ldr	r2, [pc, #252]	; (8004d10 <HAL_DMA_IRQHandler+0xe18>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d045      	beq.n	8004ca2 <HAL_DMA_IRQHandler+0xdaa>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a3e      	ldr	r2, [pc, #248]	; (8004d14 <HAL_DMA_IRQHandler+0xe1c>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d040      	beq.n	8004ca2 <HAL_DMA_IRQHandler+0xdaa>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a3c      	ldr	r2, [pc, #240]	; (8004d18 <HAL_DMA_IRQHandler+0xe20>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d03b      	beq.n	8004ca2 <HAL_DMA_IRQHandler+0xdaa>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a3b      	ldr	r2, [pc, #236]	; (8004d1c <HAL_DMA_IRQHandler+0xe24>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d036      	beq.n	8004ca2 <HAL_DMA_IRQHandler+0xdaa>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a39      	ldr	r2, [pc, #228]	; (8004d20 <HAL_DMA_IRQHandler+0xe28>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d031      	beq.n	8004ca2 <HAL_DMA_IRQHandler+0xdaa>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a38      	ldr	r2, [pc, #224]	; (8004d24 <HAL_DMA_IRQHandler+0xe2c>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d02c      	beq.n	8004ca2 <HAL_DMA_IRQHandler+0xdaa>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a36      	ldr	r2, [pc, #216]	; (8004d28 <HAL_DMA_IRQHandler+0xe30>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d027      	beq.n	8004ca2 <HAL_DMA_IRQHandler+0xdaa>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a35      	ldr	r2, [pc, #212]	; (8004d2c <HAL_DMA_IRQHandler+0xe34>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d022      	beq.n	8004ca2 <HAL_DMA_IRQHandler+0xdaa>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a33      	ldr	r2, [pc, #204]	; (8004d30 <HAL_DMA_IRQHandler+0xe38>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d01d      	beq.n	8004ca2 <HAL_DMA_IRQHandler+0xdaa>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a32      	ldr	r2, [pc, #200]	; (8004d34 <HAL_DMA_IRQHandler+0xe3c>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d018      	beq.n	8004ca2 <HAL_DMA_IRQHandler+0xdaa>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a30      	ldr	r2, [pc, #192]	; (8004d38 <HAL_DMA_IRQHandler+0xe40>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d013      	beq.n	8004ca2 <HAL_DMA_IRQHandler+0xdaa>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a2f      	ldr	r2, [pc, #188]	; (8004d3c <HAL_DMA_IRQHandler+0xe44>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d00e      	beq.n	8004ca2 <HAL_DMA_IRQHandler+0xdaa>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a2d      	ldr	r2, [pc, #180]	; (8004d40 <HAL_DMA_IRQHandler+0xe48>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d009      	beq.n	8004ca2 <HAL_DMA_IRQHandler+0xdaa>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a2c      	ldr	r2, [pc, #176]	; (8004d44 <HAL_DMA_IRQHandler+0xe4c>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d004      	beq.n	8004ca2 <HAL_DMA_IRQHandler+0xdaa>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a2a      	ldr	r2, [pc, #168]	; (8004d48 <HAL_DMA_IRQHandler+0xe50>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d108      	bne.n	8004cb4 <HAL_DMA_IRQHandler+0xdbc>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f022 021c 	bic.w	r2, r2, #28
 8004cb0:	601a      	str	r2, [r3, #0]
 8004cb2:	e007      	b.n	8004cc4 <HAL_DMA_IRQHandler+0xdcc>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f022 020e 	bic.w	r2, r2, #14
 8004cc2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cc8:	f003 031f 	and.w	r3, r3, #31
 8004ccc:	2201      	movs	r2, #1
 8004cce:	409a      	lsls	r2, r3
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2201      	movs	r2, #1
 8004cde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d009      	beq.n	8004d06 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	4798      	blx	r3
 8004cfa:	e004      	b.n	8004d06 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004cfc:	bf00      	nop
 8004cfe:	e002      	b.n	8004d06 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d00:	bf00      	nop
 8004d02:	e000      	b.n	8004d06 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d04:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004d06:	3728      	adds	r7, #40	; 0x28
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}
 8004d0c:	40020010 	.word	0x40020010
 8004d10:	40020028 	.word	0x40020028
 8004d14:	40020040 	.word	0x40020040
 8004d18:	40020058 	.word	0x40020058
 8004d1c:	40020070 	.word	0x40020070
 8004d20:	40020088 	.word	0x40020088
 8004d24:	400200a0 	.word	0x400200a0
 8004d28:	400200b8 	.word	0x400200b8
 8004d2c:	40020410 	.word	0x40020410
 8004d30:	40020428 	.word	0x40020428
 8004d34:	40020440 	.word	0x40020440
 8004d38:	40020458 	.word	0x40020458
 8004d3c:	40020470 	.word	0x40020470
 8004d40:	40020488 	.word	0x40020488
 8004d44:	400204a0 	.word	0x400204a0
 8004d48:	400204b8 	.word	0x400204b8

08004d4c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b083      	sub	sp, #12
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	370c      	adds	r7, #12
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr

08004d64 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b087      	sub	sp, #28
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	60f8      	str	r0, [r7, #12]
 8004d6c:	60b9      	str	r1, [r7, #8]
 8004d6e:	607a      	str	r2, [r7, #4]
 8004d70:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d76:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d7c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a84      	ldr	r2, [pc, #528]	; (8004f94 <DMA_SetConfig+0x230>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d072      	beq.n	8004e6e <DMA_SetConfig+0x10a>
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a82      	ldr	r2, [pc, #520]	; (8004f98 <DMA_SetConfig+0x234>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d06d      	beq.n	8004e6e <DMA_SetConfig+0x10a>
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a81      	ldr	r2, [pc, #516]	; (8004f9c <DMA_SetConfig+0x238>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d068      	beq.n	8004e6e <DMA_SetConfig+0x10a>
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a7f      	ldr	r2, [pc, #508]	; (8004fa0 <DMA_SetConfig+0x23c>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d063      	beq.n	8004e6e <DMA_SetConfig+0x10a>
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a7e      	ldr	r2, [pc, #504]	; (8004fa4 <DMA_SetConfig+0x240>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d05e      	beq.n	8004e6e <DMA_SetConfig+0x10a>
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a7c      	ldr	r2, [pc, #496]	; (8004fa8 <DMA_SetConfig+0x244>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d059      	beq.n	8004e6e <DMA_SetConfig+0x10a>
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a7b      	ldr	r2, [pc, #492]	; (8004fac <DMA_SetConfig+0x248>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d054      	beq.n	8004e6e <DMA_SetConfig+0x10a>
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a79      	ldr	r2, [pc, #484]	; (8004fb0 <DMA_SetConfig+0x24c>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d04f      	beq.n	8004e6e <DMA_SetConfig+0x10a>
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a78      	ldr	r2, [pc, #480]	; (8004fb4 <DMA_SetConfig+0x250>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d04a      	beq.n	8004e6e <DMA_SetConfig+0x10a>
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a76      	ldr	r2, [pc, #472]	; (8004fb8 <DMA_SetConfig+0x254>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d045      	beq.n	8004e6e <DMA_SetConfig+0x10a>
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a75      	ldr	r2, [pc, #468]	; (8004fbc <DMA_SetConfig+0x258>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d040      	beq.n	8004e6e <DMA_SetConfig+0x10a>
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a73      	ldr	r2, [pc, #460]	; (8004fc0 <DMA_SetConfig+0x25c>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d03b      	beq.n	8004e6e <DMA_SetConfig+0x10a>
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a72      	ldr	r2, [pc, #456]	; (8004fc4 <DMA_SetConfig+0x260>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d036      	beq.n	8004e6e <DMA_SetConfig+0x10a>
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a70      	ldr	r2, [pc, #448]	; (8004fc8 <DMA_SetConfig+0x264>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d031      	beq.n	8004e6e <DMA_SetConfig+0x10a>
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a6f      	ldr	r2, [pc, #444]	; (8004fcc <DMA_SetConfig+0x268>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d02c      	beq.n	8004e6e <DMA_SetConfig+0x10a>
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a6d      	ldr	r2, [pc, #436]	; (8004fd0 <DMA_SetConfig+0x26c>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d027      	beq.n	8004e6e <DMA_SetConfig+0x10a>
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a6c      	ldr	r2, [pc, #432]	; (8004fd4 <DMA_SetConfig+0x270>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d022      	beq.n	8004e6e <DMA_SetConfig+0x10a>
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a6a      	ldr	r2, [pc, #424]	; (8004fd8 <DMA_SetConfig+0x274>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d01d      	beq.n	8004e6e <DMA_SetConfig+0x10a>
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a69      	ldr	r2, [pc, #420]	; (8004fdc <DMA_SetConfig+0x278>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d018      	beq.n	8004e6e <DMA_SetConfig+0x10a>
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a67      	ldr	r2, [pc, #412]	; (8004fe0 <DMA_SetConfig+0x27c>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d013      	beq.n	8004e6e <DMA_SetConfig+0x10a>
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a66      	ldr	r2, [pc, #408]	; (8004fe4 <DMA_SetConfig+0x280>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d00e      	beq.n	8004e6e <DMA_SetConfig+0x10a>
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a64      	ldr	r2, [pc, #400]	; (8004fe8 <DMA_SetConfig+0x284>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d009      	beq.n	8004e6e <DMA_SetConfig+0x10a>
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a63      	ldr	r2, [pc, #396]	; (8004fec <DMA_SetConfig+0x288>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d004      	beq.n	8004e6e <DMA_SetConfig+0x10a>
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a61      	ldr	r2, [pc, #388]	; (8004ff0 <DMA_SetConfig+0x28c>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d101      	bne.n	8004e72 <DMA_SetConfig+0x10e>
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e000      	b.n	8004e74 <DMA_SetConfig+0x110>
 8004e72:	2300      	movs	r3, #0
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d00d      	beq.n	8004e94 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e7c:	68fa      	ldr	r2, [r7, #12]
 8004e7e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004e80:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d004      	beq.n	8004e94 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004e92:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a3e      	ldr	r2, [pc, #248]	; (8004f94 <DMA_SetConfig+0x230>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d04a      	beq.n	8004f34 <DMA_SetConfig+0x1d0>
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a3d      	ldr	r2, [pc, #244]	; (8004f98 <DMA_SetConfig+0x234>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d045      	beq.n	8004f34 <DMA_SetConfig+0x1d0>
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a3b      	ldr	r2, [pc, #236]	; (8004f9c <DMA_SetConfig+0x238>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d040      	beq.n	8004f34 <DMA_SetConfig+0x1d0>
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a3a      	ldr	r2, [pc, #232]	; (8004fa0 <DMA_SetConfig+0x23c>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d03b      	beq.n	8004f34 <DMA_SetConfig+0x1d0>
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a38      	ldr	r2, [pc, #224]	; (8004fa4 <DMA_SetConfig+0x240>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d036      	beq.n	8004f34 <DMA_SetConfig+0x1d0>
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a37      	ldr	r2, [pc, #220]	; (8004fa8 <DMA_SetConfig+0x244>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d031      	beq.n	8004f34 <DMA_SetConfig+0x1d0>
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a35      	ldr	r2, [pc, #212]	; (8004fac <DMA_SetConfig+0x248>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d02c      	beq.n	8004f34 <DMA_SetConfig+0x1d0>
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a34      	ldr	r2, [pc, #208]	; (8004fb0 <DMA_SetConfig+0x24c>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d027      	beq.n	8004f34 <DMA_SetConfig+0x1d0>
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a32      	ldr	r2, [pc, #200]	; (8004fb4 <DMA_SetConfig+0x250>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d022      	beq.n	8004f34 <DMA_SetConfig+0x1d0>
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a31      	ldr	r2, [pc, #196]	; (8004fb8 <DMA_SetConfig+0x254>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d01d      	beq.n	8004f34 <DMA_SetConfig+0x1d0>
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a2f      	ldr	r2, [pc, #188]	; (8004fbc <DMA_SetConfig+0x258>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d018      	beq.n	8004f34 <DMA_SetConfig+0x1d0>
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a2e      	ldr	r2, [pc, #184]	; (8004fc0 <DMA_SetConfig+0x25c>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d013      	beq.n	8004f34 <DMA_SetConfig+0x1d0>
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a2c      	ldr	r2, [pc, #176]	; (8004fc4 <DMA_SetConfig+0x260>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d00e      	beq.n	8004f34 <DMA_SetConfig+0x1d0>
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a2b      	ldr	r2, [pc, #172]	; (8004fc8 <DMA_SetConfig+0x264>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d009      	beq.n	8004f34 <DMA_SetConfig+0x1d0>
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a29      	ldr	r2, [pc, #164]	; (8004fcc <DMA_SetConfig+0x268>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d004      	beq.n	8004f34 <DMA_SetConfig+0x1d0>
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a28      	ldr	r2, [pc, #160]	; (8004fd0 <DMA_SetConfig+0x26c>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d101      	bne.n	8004f38 <DMA_SetConfig+0x1d4>
 8004f34:	2301      	movs	r3, #1
 8004f36:	e000      	b.n	8004f3a <DMA_SetConfig+0x1d6>
 8004f38:	2300      	movs	r3, #0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d05a      	beq.n	8004ff4 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f42:	f003 031f 	and.w	r3, r3, #31
 8004f46:	223f      	movs	r2, #63	; 0x3f
 8004f48:	409a      	lsls	r2, r3
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004f5c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	683a      	ldr	r2, [r7, #0]
 8004f64:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	2b40      	cmp	r3, #64	; 0x40
 8004f6c:	d108      	bne.n	8004f80 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	68ba      	ldr	r2, [r7, #8]
 8004f7c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004f7e:	e087      	b.n	8005090 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	68ba      	ldr	r2, [r7, #8]
 8004f86:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	687a      	ldr	r2, [r7, #4]
 8004f8e:	60da      	str	r2, [r3, #12]
}
 8004f90:	e07e      	b.n	8005090 <DMA_SetConfig+0x32c>
 8004f92:	bf00      	nop
 8004f94:	40020010 	.word	0x40020010
 8004f98:	40020028 	.word	0x40020028
 8004f9c:	40020040 	.word	0x40020040
 8004fa0:	40020058 	.word	0x40020058
 8004fa4:	40020070 	.word	0x40020070
 8004fa8:	40020088 	.word	0x40020088
 8004fac:	400200a0 	.word	0x400200a0
 8004fb0:	400200b8 	.word	0x400200b8
 8004fb4:	40020410 	.word	0x40020410
 8004fb8:	40020428 	.word	0x40020428
 8004fbc:	40020440 	.word	0x40020440
 8004fc0:	40020458 	.word	0x40020458
 8004fc4:	40020470 	.word	0x40020470
 8004fc8:	40020488 	.word	0x40020488
 8004fcc:	400204a0 	.word	0x400204a0
 8004fd0:	400204b8 	.word	0x400204b8
 8004fd4:	58025408 	.word	0x58025408
 8004fd8:	5802541c 	.word	0x5802541c
 8004fdc:	58025430 	.word	0x58025430
 8004fe0:	58025444 	.word	0x58025444
 8004fe4:	58025458 	.word	0x58025458
 8004fe8:	5802546c 	.word	0x5802546c
 8004fec:	58025480 	.word	0x58025480
 8004ff0:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a28      	ldr	r2, [pc, #160]	; (800509c <DMA_SetConfig+0x338>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d022      	beq.n	8005044 <DMA_SetConfig+0x2e0>
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a27      	ldr	r2, [pc, #156]	; (80050a0 <DMA_SetConfig+0x33c>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d01d      	beq.n	8005044 <DMA_SetConfig+0x2e0>
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a25      	ldr	r2, [pc, #148]	; (80050a4 <DMA_SetConfig+0x340>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d018      	beq.n	8005044 <DMA_SetConfig+0x2e0>
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a24      	ldr	r2, [pc, #144]	; (80050a8 <DMA_SetConfig+0x344>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d013      	beq.n	8005044 <DMA_SetConfig+0x2e0>
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a22      	ldr	r2, [pc, #136]	; (80050ac <DMA_SetConfig+0x348>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d00e      	beq.n	8005044 <DMA_SetConfig+0x2e0>
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a21      	ldr	r2, [pc, #132]	; (80050b0 <DMA_SetConfig+0x34c>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d009      	beq.n	8005044 <DMA_SetConfig+0x2e0>
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a1f      	ldr	r2, [pc, #124]	; (80050b4 <DMA_SetConfig+0x350>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d004      	beq.n	8005044 <DMA_SetConfig+0x2e0>
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a1e      	ldr	r2, [pc, #120]	; (80050b8 <DMA_SetConfig+0x354>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d101      	bne.n	8005048 <DMA_SetConfig+0x2e4>
 8005044:	2301      	movs	r3, #1
 8005046:	e000      	b.n	800504a <DMA_SetConfig+0x2e6>
 8005048:	2300      	movs	r3, #0
 800504a:	2b00      	cmp	r3, #0
 800504c:	d020      	beq.n	8005090 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005052:	f003 031f 	and.w	r3, r3, #31
 8005056:	2201      	movs	r2, #1
 8005058:	409a      	lsls	r2, r3
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	683a      	ldr	r2, [r7, #0]
 8005064:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	2b40      	cmp	r3, #64	; 0x40
 800506c:	d108      	bne.n	8005080 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	68ba      	ldr	r2, [r7, #8]
 800507c:	60da      	str	r2, [r3, #12]
}
 800507e:	e007      	b.n	8005090 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68ba      	ldr	r2, [r7, #8]
 8005086:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	60da      	str	r2, [r3, #12]
}
 8005090:	bf00      	nop
 8005092:	371c      	adds	r7, #28
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr
 800509c:	58025408 	.word	0x58025408
 80050a0:	5802541c 	.word	0x5802541c
 80050a4:	58025430 	.word	0x58025430
 80050a8:	58025444 	.word	0x58025444
 80050ac:	58025458 	.word	0x58025458
 80050b0:	5802546c 	.word	0x5802546c
 80050b4:	58025480 	.word	0x58025480
 80050b8:	58025494 	.word	0x58025494

080050bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80050bc:	b480      	push	{r7}
 80050be:	b085      	sub	sp, #20
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a42      	ldr	r2, [pc, #264]	; (80051d4 <DMA_CalcBaseAndBitshift+0x118>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d04a      	beq.n	8005164 <DMA_CalcBaseAndBitshift+0xa8>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a41      	ldr	r2, [pc, #260]	; (80051d8 <DMA_CalcBaseAndBitshift+0x11c>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d045      	beq.n	8005164 <DMA_CalcBaseAndBitshift+0xa8>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a3f      	ldr	r2, [pc, #252]	; (80051dc <DMA_CalcBaseAndBitshift+0x120>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d040      	beq.n	8005164 <DMA_CalcBaseAndBitshift+0xa8>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a3e      	ldr	r2, [pc, #248]	; (80051e0 <DMA_CalcBaseAndBitshift+0x124>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d03b      	beq.n	8005164 <DMA_CalcBaseAndBitshift+0xa8>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a3c      	ldr	r2, [pc, #240]	; (80051e4 <DMA_CalcBaseAndBitshift+0x128>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d036      	beq.n	8005164 <DMA_CalcBaseAndBitshift+0xa8>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a3b      	ldr	r2, [pc, #236]	; (80051e8 <DMA_CalcBaseAndBitshift+0x12c>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d031      	beq.n	8005164 <DMA_CalcBaseAndBitshift+0xa8>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a39      	ldr	r2, [pc, #228]	; (80051ec <DMA_CalcBaseAndBitshift+0x130>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d02c      	beq.n	8005164 <DMA_CalcBaseAndBitshift+0xa8>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a38      	ldr	r2, [pc, #224]	; (80051f0 <DMA_CalcBaseAndBitshift+0x134>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d027      	beq.n	8005164 <DMA_CalcBaseAndBitshift+0xa8>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a36      	ldr	r2, [pc, #216]	; (80051f4 <DMA_CalcBaseAndBitshift+0x138>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d022      	beq.n	8005164 <DMA_CalcBaseAndBitshift+0xa8>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a35      	ldr	r2, [pc, #212]	; (80051f8 <DMA_CalcBaseAndBitshift+0x13c>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d01d      	beq.n	8005164 <DMA_CalcBaseAndBitshift+0xa8>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a33      	ldr	r2, [pc, #204]	; (80051fc <DMA_CalcBaseAndBitshift+0x140>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d018      	beq.n	8005164 <DMA_CalcBaseAndBitshift+0xa8>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a32      	ldr	r2, [pc, #200]	; (8005200 <DMA_CalcBaseAndBitshift+0x144>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d013      	beq.n	8005164 <DMA_CalcBaseAndBitshift+0xa8>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a30      	ldr	r2, [pc, #192]	; (8005204 <DMA_CalcBaseAndBitshift+0x148>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d00e      	beq.n	8005164 <DMA_CalcBaseAndBitshift+0xa8>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a2f      	ldr	r2, [pc, #188]	; (8005208 <DMA_CalcBaseAndBitshift+0x14c>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d009      	beq.n	8005164 <DMA_CalcBaseAndBitshift+0xa8>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a2d      	ldr	r2, [pc, #180]	; (800520c <DMA_CalcBaseAndBitshift+0x150>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d004      	beq.n	8005164 <DMA_CalcBaseAndBitshift+0xa8>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a2c      	ldr	r2, [pc, #176]	; (8005210 <DMA_CalcBaseAndBitshift+0x154>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d101      	bne.n	8005168 <DMA_CalcBaseAndBitshift+0xac>
 8005164:	2301      	movs	r3, #1
 8005166:	e000      	b.n	800516a <DMA_CalcBaseAndBitshift+0xae>
 8005168:	2300      	movs	r3, #0
 800516a:	2b00      	cmp	r3, #0
 800516c:	d024      	beq.n	80051b8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	b2db      	uxtb	r3, r3
 8005174:	3b10      	subs	r3, #16
 8005176:	4a27      	ldr	r2, [pc, #156]	; (8005214 <DMA_CalcBaseAndBitshift+0x158>)
 8005178:	fba2 2303 	umull	r2, r3, r2, r3
 800517c:	091b      	lsrs	r3, r3, #4
 800517e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f003 0307 	and.w	r3, r3, #7
 8005186:	4a24      	ldr	r2, [pc, #144]	; (8005218 <DMA_CalcBaseAndBitshift+0x15c>)
 8005188:	5cd3      	ldrb	r3, [r2, r3]
 800518a:	461a      	mov	r2, r3
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2b03      	cmp	r3, #3
 8005194:	d908      	bls.n	80051a8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	461a      	mov	r2, r3
 800519c:	4b1f      	ldr	r3, [pc, #124]	; (800521c <DMA_CalcBaseAndBitshift+0x160>)
 800519e:	4013      	ands	r3, r2
 80051a0:	1d1a      	adds	r2, r3, #4
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	659a      	str	r2, [r3, #88]	; 0x58
 80051a6:	e00d      	b.n	80051c4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	461a      	mov	r2, r3
 80051ae:	4b1b      	ldr	r3, [pc, #108]	; (800521c <DMA_CalcBaseAndBitshift+0x160>)
 80051b0:	4013      	ands	r3, r2
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	6593      	str	r3, [r2, #88]	; 0x58
 80051b6:	e005      	b.n	80051c4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3714      	adds	r7, #20
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr
 80051d4:	40020010 	.word	0x40020010
 80051d8:	40020028 	.word	0x40020028
 80051dc:	40020040 	.word	0x40020040
 80051e0:	40020058 	.word	0x40020058
 80051e4:	40020070 	.word	0x40020070
 80051e8:	40020088 	.word	0x40020088
 80051ec:	400200a0 	.word	0x400200a0
 80051f0:	400200b8 	.word	0x400200b8
 80051f4:	40020410 	.word	0x40020410
 80051f8:	40020428 	.word	0x40020428
 80051fc:	40020440 	.word	0x40020440
 8005200:	40020458 	.word	0x40020458
 8005204:	40020470 	.word	0x40020470
 8005208:	40020488 	.word	0x40020488
 800520c:	400204a0 	.word	0x400204a0
 8005210:	400204b8 	.word	0x400204b8
 8005214:	aaaaaaab 	.word	0xaaaaaaab
 8005218:	0800c930 	.word	0x0800c930
 800521c:	fffffc00 	.word	0xfffffc00

08005220 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005220:	b480      	push	{r7}
 8005222:	b085      	sub	sp, #20
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005228:	2300      	movs	r3, #0
 800522a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	699b      	ldr	r3, [r3, #24]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d120      	bne.n	8005276 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005238:	2b03      	cmp	r3, #3
 800523a:	d858      	bhi.n	80052ee <DMA_CheckFifoParam+0xce>
 800523c:	a201      	add	r2, pc, #4	; (adr r2, 8005244 <DMA_CheckFifoParam+0x24>)
 800523e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005242:	bf00      	nop
 8005244:	08005255 	.word	0x08005255
 8005248:	08005267 	.word	0x08005267
 800524c:	08005255 	.word	0x08005255
 8005250:	080052ef 	.word	0x080052ef
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005258:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800525c:	2b00      	cmp	r3, #0
 800525e:	d048      	beq.n	80052f2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005264:	e045      	b.n	80052f2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800526a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800526e:	d142      	bne.n	80052f6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005274:	e03f      	b.n	80052f6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	699b      	ldr	r3, [r3, #24]
 800527a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800527e:	d123      	bne.n	80052c8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005284:	2b03      	cmp	r3, #3
 8005286:	d838      	bhi.n	80052fa <DMA_CheckFifoParam+0xda>
 8005288:	a201      	add	r2, pc, #4	; (adr r2, 8005290 <DMA_CheckFifoParam+0x70>)
 800528a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800528e:	bf00      	nop
 8005290:	080052a1 	.word	0x080052a1
 8005294:	080052a7 	.word	0x080052a7
 8005298:	080052a1 	.word	0x080052a1
 800529c:	080052b9 	.word	0x080052b9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	73fb      	strb	r3, [r7, #15]
        break;
 80052a4:	e030      	b.n	8005308 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d025      	beq.n	80052fe <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80052b6:	e022      	b.n	80052fe <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052bc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80052c0:	d11f      	bne.n	8005302 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80052c6:	e01c      	b.n	8005302 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052cc:	2b02      	cmp	r3, #2
 80052ce:	d902      	bls.n	80052d6 <DMA_CheckFifoParam+0xb6>
 80052d0:	2b03      	cmp	r3, #3
 80052d2:	d003      	beq.n	80052dc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80052d4:	e018      	b.n	8005308 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	73fb      	strb	r3, [r7, #15]
        break;
 80052da:	e015      	b.n	8005308 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d00e      	beq.n	8005306 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	73fb      	strb	r3, [r7, #15]
    break;
 80052ec:	e00b      	b.n	8005306 <DMA_CheckFifoParam+0xe6>
        break;
 80052ee:	bf00      	nop
 80052f0:	e00a      	b.n	8005308 <DMA_CheckFifoParam+0xe8>
        break;
 80052f2:	bf00      	nop
 80052f4:	e008      	b.n	8005308 <DMA_CheckFifoParam+0xe8>
        break;
 80052f6:	bf00      	nop
 80052f8:	e006      	b.n	8005308 <DMA_CheckFifoParam+0xe8>
        break;
 80052fa:	bf00      	nop
 80052fc:	e004      	b.n	8005308 <DMA_CheckFifoParam+0xe8>
        break;
 80052fe:	bf00      	nop
 8005300:	e002      	b.n	8005308 <DMA_CheckFifoParam+0xe8>
        break;
 8005302:	bf00      	nop
 8005304:	e000      	b.n	8005308 <DMA_CheckFifoParam+0xe8>
    break;
 8005306:	bf00      	nop
    }
  }

  return status;
 8005308:	7bfb      	ldrb	r3, [r7, #15]
}
 800530a:	4618      	mov	r0, r3
 800530c:	3714      	adds	r7, #20
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr
 8005316:	bf00      	nop

08005318 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005318:	b480      	push	{r7}
 800531a:	b085      	sub	sp, #20
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a38      	ldr	r2, [pc, #224]	; (800540c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d022      	beq.n	8005376 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a36      	ldr	r2, [pc, #216]	; (8005410 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d01d      	beq.n	8005376 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a35      	ldr	r2, [pc, #212]	; (8005414 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d018      	beq.n	8005376 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a33      	ldr	r2, [pc, #204]	; (8005418 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d013      	beq.n	8005376 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a32      	ldr	r2, [pc, #200]	; (800541c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d00e      	beq.n	8005376 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a30      	ldr	r2, [pc, #192]	; (8005420 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d009      	beq.n	8005376 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a2f      	ldr	r2, [pc, #188]	; (8005424 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d004      	beq.n	8005376 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a2d      	ldr	r2, [pc, #180]	; (8005428 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d101      	bne.n	800537a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005376:	2301      	movs	r3, #1
 8005378:	e000      	b.n	800537c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800537a:	2300      	movs	r3, #0
 800537c:	2b00      	cmp	r3, #0
 800537e:	d01a      	beq.n	80053b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	b2db      	uxtb	r3, r3
 8005386:	3b08      	subs	r3, #8
 8005388:	4a28      	ldr	r2, [pc, #160]	; (800542c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800538a:	fba2 2303 	umull	r2, r3, r2, r3
 800538e:	091b      	lsrs	r3, r3, #4
 8005390:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005392:	68fa      	ldr	r2, [r7, #12]
 8005394:	4b26      	ldr	r3, [pc, #152]	; (8005430 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005396:	4413      	add	r3, r2
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	461a      	mov	r2, r3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4a24      	ldr	r2, [pc, #144]	; (8005434 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80053a4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	f003 031f 	and.w	r3, r3, #31
 80053ac:	2201      	movs	r2, #1
 80053ae:	409a      	lsls	r2, r3
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80053b4:	e024      	b.n	8005400 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	3b10      	subs	r3, #16
 80053be:	4a1e      	ldr	r2, [pc, #120]	; (8005438 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80053c0:	fba2 2303 	umull	r2, r3, r2, r3
 80053c4:	091b      	lsrs	r3, r3, #4
 80053c6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	4a1c      	ldr	r2, [pc, #112]	; (800543c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d806      	bhi.n	80053de <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	4a1b      	ldr	r2, [pc, #108]	; (8005440 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d902      	bls.n	80053de <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	3308      	adds	r3, #8
 80053dc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	4b18      	ldr	r3, [pc, #96]	; (8005444 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80053e2:	4413      	add	r3, r2
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	461a      	mov	r2, r3
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	4a16      	ldr	r2, [pc, #88]	; (8005448 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80053f0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	f003 031f 	and.w	r3, r3, #31
 80053f8:	2201      	movs	r2, #1
 80053fa:	409a      	lsls	r2, r3
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005400:	bf00      	nop
 8005402:	3714      	adds	r7, #20
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr
 800540c:	58025408 	.word	0x58025408
 8005410:	5802541c 	.word	0x5802541c
 8005414:	58025430 	.word	0x58025430
 8005418:	58025444 	.word	0x58025444
 800541c:	58025458 	.word	0x58025458
 8005420:	5802546c 	.word	0x5802546c
 8005424:	58025480 	.word	0x58025480
 8005428:	58025494 	.word	0x58025494
 800542c:	cccccccd 	.word	0xcccccccd
 8005430:	16009600 	.word	0x16009600
 8005434:	58025880 	.word	0x58025880
 8005438:	aaaaaaab 	.word	0xaaaaaaab
 800543c:	400204b8 	.word	0x400204b8
 8005440:	4002040f 	.word	0x4002040f
 8005444:	10008200 	.word	0x10008200
 8005448:	40020880 	.word	0x40020880

0800544c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800544c:	b480      	push	{r7}
 800544e:	b085      	sub	sp, #20
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	b2db      	uxtb	r3, r3
 800545a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d04a      	beq.n	80054f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2b08      	cmp	r3, #8
 8005466:	d847      	bhi.n	80054f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a25      	ldr	r2, [pc, #148]	; (8005504 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d022      	beq.n	80054b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a24      	ldr	r2, [pc, #144]	; (8005508 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d01d      	beq.n	80054b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a22      	ldr	r2, [pc, #136]	; (800550c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d018      	beq.n	80054b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a21      	ldr	r2, [pc, #132]	; (8005510 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d013      	beq.n	80054b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a1f      	ldr	r2, [pc, #124]	; (8005514 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d00e      	beq.n	80054b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a1e      	ldr	r2, [pc, #120]	; (8005518 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d009      	beq.n	80054b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a1c      	ldr	r2, [pc, #112]	; (800551c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d004      	beq.n	80054b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a1b      	ldr	r2, [pc, #108]	; (8005520 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d101      	bne.n	80054bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80054b8:	2301      	movs	r3, #1
 80054ba:	e000      	b.n	80054be <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80054bc:	2300      	movs	r3, #0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d00a      	beq.n	80054d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80054c2:	68fa      	ldr	r2, [r7, #12]
 80054c4:	4b17      	ldr	r3, [pc, #92]	; (8005524 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80054c6:	4413      	add	r3, r2
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	461a      	mov	r2, r3
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4a15      	ldr	r2, [pc, #84]	; (8005528 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80054d4:	671a      	str	r2, [r3, #112]	; 0x70
 80054d6:	e009      	b.n	80054ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80054d8:	68fa      	ldr	r2, [r7, #12]
 80054da:	4b14      	ldr	r3, [pc, #80]	; (800552c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80054dc:	4413      	add	r3, r2
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	461a      	mov	r2, r3
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4a11      	ldr	r2, [pc, #68]	; (8005530 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80054ea:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	3b01      	subs	r3, #1
 80054f0:	2201      	movs	r2, #1
 80054f2:	409a      	lsls	r2, r3
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80054f8:	bf00      	nop
 80054fa:	3714      	adds	r7, #20
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr
 8005504:	58025408 	.word	0x58025408
 8005508:	5802541c 	.word	0x5802541c
 800550c:	58025430 	.word	0x58025430
 8005510:	58025444 	.word	0x58025444
 8005514:	58025458 	.word	0x58025458
 8005518:	5802546c 	.word	0x5802546c
 800551c:	58025480 	.word	0x58025480
 8005520:	58025494 	.word	0x58025494
 8005524:	1600963f 	.word	0x1600963f
 8005528:	58025940 	.word	0x58025940
 800552c:	1000823f 	.word	0x1000823f
 8005530:	40020940 	.word	0x40020940

08005534 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA Stream.
  * @param  pSyncConfig : pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 8005534:	b480      	push	{r7}
 8005536:	b085      	sub	sp, #20
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
  uint32_t syncSignalID = 0;
 800553e:	2300      	movs	r3, #0
 8005540:	60fb      	str	r3, [r7, #12]
  uint32_t syncPolarity = 0;
 8005542:	2300      	movs	r3, #0
 8005544:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  if(pSyncConfig->SyncEnable == ENABLE)
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	7a1b      	ldrb	r3, [r3, #8]
 800554a:	2b01      	cmp	r3, #1
 800554c:	d155      	bne.n	80055fa <HAL_DMAEx_ConfigMuxSync+0xc6>
  {
    assert_param(IS_DMAMUX_SYNC_POLARITY(pSyncConfig->SyncPolarity));

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a4b      	ldr	r2, [pc, #300]	; (8005680 <HAL_DMAEx_ConfigMuxSync+0x14c>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d049      	beq.n	80055ec <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a49      	ldr	r2, [pc, #292]	; (8005684 <HAL_DMAEx_ConfigMuxSync+0x150>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d044      	beq.n	80055ec <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a48      	ldr	r2, [pc, #288]	; (8005688 <HAL_DMAEx_ConfigMuxSync+0x154>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d03f      	beq.n	80055ec <HAL_DMAEx_ConfigMuxSync+0xb8>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a46      	ldr	r2, [pc, #280]	; (800568c <HAL_DMAEx_ConfigMuxSync+0x158>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d03a      	beq.n	80055ec <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a45      	ldr	r2, [pc, #276]	; (8005690 <HAL_DMAEx_ConfigMuxSync+0x15c>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d035      	beq.n	80055ec <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a43      	ldr	r2, [pc, #268]	; (8005694 <HAL_DMAEx_ConfigMuxSync+0x160>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d030      	beq.n	80055ec <HAL_DMAEx_ConfigMuxSync+0xb8>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a42      	ldr	r2, [pc, #264]	; (8005698 <HAL_DMAEx_ConfigMuxSync+0x164>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d02b      	beq.n	80055ec <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a40      	ldr	r2, [pc, #256]	; (800569c <HAL_DMAEx_ConfigMuxSync+0x168>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d026      	beq.n	80055ec <HAL_DMAEx_ConfigMuxSync+0xb8>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a3f      	ldr	r2, [pc, #252]	; (80056a0 <HAL_DMAEx_ConfigMuxSync+0x16c>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d021      	beq.n	80055ec <HAL_DMAEx_ConfigMuxSync+0xb8>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a3d      	ldr	r2, [pc, #244]	; (80056a4 <HAL_DMAEx_ConfigMuxSync+0x170>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d01c      	beq.n	80055ec <HAL_DMAEx_ConfigMuxSync+0xb8>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a3c      	ldr	r2, [pc, #240]	; (80056a8 <HAL_DMAEx_ConfigMuxSync+0x174>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d017      	beq.n	80055ec <HAL_DMAEx_ConfigMuxSync+0xb8>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a3a      	ldr	r2, [pc, #232]	; (80056ac <HAL_DMAEx_ConfigMuxSync+0x178>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d012      	beq.n	80055ec <HAL_DMAEx_ConfigMuxSync+0xb8>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a39      	ldr	r2, [pc, #228]	; (80056b0 <HAL_DMAEx_ConfigMuxSync+0x17c>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d00d      	beq.n	80055ec <HAL_DMAEx_ConfigMuxSync+0xb8>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a37      	ldr	r2, [pc, #220]	; (80056b4 <HAL_DMAEx_ConfigMuxSync+0x180>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d008      	beq.n	80055ec <HAL_DMAEx_ConfigMuxSync+0xb8>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a36      	ldr	r2, [pc, #216]	; (80056b8 <HAL_DMAEx_ConfigMuxSync+0x184>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d003      	beq.n	80055ec <HAL_DMAEx_ConfigMuxSync+0xb8>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a34      	ldr	r2, [pc, #208]	; (80056bc <HAL_DMAEx_ConfigMuxSync+0x188>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	bf00      	nop
    }
    else
    {
      assert_param(IS_BDMA_DMAMUX_SYNC_SIGNAL_ID(pSyncConfig->SyncSignalID));
    }
    syncSignalID = pSyncConfig->SyncSignalID;
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	60fb      	str	r3, [r7, #12]
    syncPolarity = pSyncConfig->SyncPolarity;
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	60bb      	str	r3, [r7, #8]
  }

  /*Check if the DMA state is ready */
  if(hdma->State == HAL_DMA_STATE_READY)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005600:	b2db      	uxtb	r3, r3
 8005602:	2b01      	cmp	r3, #1
 8005604:	d131      	bne.n	800566a <HAL_DMAEx_ConfigMuxSync+0x136>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800560c:	2b01      	cmp	r3, #1
 800560e:	d101      	bne.n	8005614 <HAL_DMAEx_ConfigMuxSync+0xe0>
 8005610:	2302      	movs	r3, #2
 8005612:	e02f      	b.n	8005674 <HAL_DMAEx_ConfigMuxSync+0x140>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the synchronization and event generation before applying a new config */
    CLEAR_BIT(hdma->DMAmuxChannel->CCR,(DMAMUX_CxCR_SE | DMAMUX_CxCR_EGE));
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005626:	f422 3281 	bic.w	r2, r2, #66048	; 0x10200
 800562a:	601a      	str	r2, [r3, #0]

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG( hdma->DMAmuxChannel->CCR, \
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	b2d9      	uxtb	r1, r3
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	061a      	lsls	r2, r3, #24
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	3b01      	subs	r3, #1
 800563e:	04db      	lsls	r3, r3, #19
 8005640:	431a      	orrs	r2, r3
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	431a      	orrs	r2, r3
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	7a1b      	ldrb	r3, [r3, #8]
 800564a:	041b      	lsls	r3, r3, #16
 800564c:	431a      	orrs	r2, r3
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	7a5b      	ldrb	r3, [r3, #9]
 8005652:	025b      	lsls	r3, r3, #9
 8005654:	431a      	orrs	r2, r3
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800565a:	430a      	orrs	r2, r1
 800565c:	601a      	str	r2, [r3, #0]
               ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
               syncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)    | \
               ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos));

      /* Process Locked */
    __HAL_UNLOCK(hdma);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8005666:	2300      	movs	r3, #0
 8005668:	e004      	b.n	8005674 <HAL_DMAEx_ConfigMuxSync+0x140>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005670:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
  }
}
 8005674:	4618      	mov	r0, r3
 8005676:	3714      	adds	r7, #20
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr
 8005680:	40020010 	.word	0x40020010
 8005684:	40020028 	.word	0x40020028
 8005688:	40020040 	.word	0x40020040
 800568c:	40020058 	.word	0x40020058
 8005690:	40020070 	.word	0x40020070
 8005694:	40020088 	.word	0x40020088
 8005698:	400200a0 	.word	0x400200a0
 800569c:	400200b8 	.word	0x400200b8
 80056a0:	40020410 	.word	0x40020410
 80056a4:	40020428 	.word	0x40020428
 80056a8:	40020440 	.word	0x40020440
 80056ac:	40020458 	.word	0x40020458
 80056b0:	40020470 	.word	0x40020470
 80056b4:	40020488 	.word	0x40020488
 80056b8:	400204a0 	.word	0x400204a0
 80056bc:	400204b8 	.word	0x400204b8

080056c0 <HAL_DMAEx_MUX_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b082      	sub	sp, #8
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056d2:	4013      	ands	r3, r2
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d01a      	beq.n	800570e <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80056e6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80056f0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056f6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	655a      	str	r2, [r3, #84]	; 0x54

    if(hdma->XferErrorCallback != NULL)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005702:	2b00      	cmp	r3, #0
 8005704:	d003      	beq.n	800570e <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	4798      	blx	r3
    }
  }

  if(hdma->DMAmuxRequestGen != 0)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005712:	2b00      	cmp	r3, #0
 8005714:	d022      	beq.n	800575c <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
   /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005720:	4013      	ands	r3, r2
 8005722:	2b00      	cmp	r3, #0
 8005724:	d01a      	beq.n	800575c <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005730:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005734:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800573e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005744:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	655a      	str	r2, [r3, #84]	; 0x54

      if(hdma->XferErrorCallback != NULL)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005750:	2b00      	cmp	r3, #0
 8005752:	d003      	beq.n	800575c <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	4798      	blx	r3
      }
    }
  }
}
 800575c:	bf00      	nop
 800575e:	3708      	adds	r7, #8
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}

08005764 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005764:	b480      	push	{r7}
 8005766:	b089      	sub	sp, #36	; 0x24
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800576e:	2300      	movs	r3, #0
 8005770:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005772:	4b86      	ldr	r3, [pc, #536]	; (800598c <HAL_GPIO_Init+0x228>)
 8005774:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005776:	e18c      	b.n	8005a92 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	2101      	movs	r1, #1
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	fa01 f303 	lsl.w	r3, r1, r3
 8005784:	4013      	ands	r3, r2
 8005786:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	2b00      	cmp	r3, #0
 800578c:	f000 817e 	beq.w	8005a8c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	f003 0303 	and.w	r3, r3, #3
 8005798:	2b01      	cmp	r3, #1
 800579a:	d005      	beq.n	80057a8 <HAL_GPIO_Init+0x44>
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	f003 0303 	and.w	r3, r3, #3
 80057a4:	2b02      	cmp	r3, #2
 80057a6:	d130      	bne.n	800580a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80057ae:	69fb      	ldr	r3, [r7, #28]
 80057b0:	005b      	lsls	r3, r3, #1
 80057b2:	2203      	movs	r2, #3
 80057b4:	fa02 f303 	lsl.w	r3, r2, r3
 80057b8:	43db      	mvns	r3, r3
 80057ba:	69ba      	ldr	r2, [r7, #24]
 80057bc:	4013      	ands	r3, r2
 80057be:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	68da      	ldr	r2, [r3, #12]
 80057c4:	69fb      	ldr	r3, [r7, #28]
 80057c6:	005b      	lsls	r3, r3, #1
 80057c8:	fa02 f303 	lsl.w	r3, r2, r3
 80057cc:	69ba      	ldr	r2, [r7, #24]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	69ba      	ldr	r2, [r7, #24]
 80057d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80057de:	2201      	movs	r2, #1
 80057e0:	69fb      	ldr	r3, [r7, #28]
 80057e2:	fa02 f303 	lsl.w	r3, r2, r3
 80057e6:	43db      	mvns	r3, r3
 80057e8:	69ba      	ldr	r2, [r7, #24]
 80057ea:	4013      	ands	r3, r2
 80057ec:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	091b      	lsrs	r3, r3, #4
 80057f4:	f003 0201 	and.w	r2, r3, #1
 80057f8:	69fb      	ldr	r3, [r7, #28]
 80057fa:	fa02 f303 	lsl.w	r3, r2, r3
 80057fe:	69ba      	ldr	r2, [r7, #24]
 8005800:	4313      	orrs	r3, r2
 8005802:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	69ba      	ldr	r2, [r7, #24]
 8005808:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	f003 0303 	and.w	r3, r3, #3
 8005812:	2b03      	cmp	r3, #3
 8005814:	d017      	beq.n	8005846 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	68db      	ldr	r3, [r3, #12]
 800581a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	005b      	lsls	r3, r3, #1
 8005820:	2203      	movs	r2, #3
 8005822:	fa02 f303 	lsl.w	r3, r2, r3
 8005826:	43db      	mvns	r3, r3
 8005828:	69ba      	ldr	r2, [r7, #24]
 800582a:	4013      	ands	r3, r2
 800582c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	689a      	ldr	r2, [r3, #8]
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	005b      	lsls	r3, r3, #1
 8005836:	fa02 f303 	lsl.w	r3, r2, r3
 800583a:	69ba      	ldr	r2, [r7, #24]
 800583c:	4313      	orrs	r3, r2
 800583e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	69ba      	ldr	r2, [r7, #24]
 8005844:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	f003 0303 	and.w	r3, r3, #3
 800584e:	2b02      	cmp	r3, #2
 8005850:	d123      	bne.n	800589a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005852:	69fb      	ldr	r3, [r7, #28]
 8005854:	08da      	lsrs	r2, r3, #3
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	3208      	adds	r2, #8
 800585a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800585e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005860:	69fb      	ldr	r3, [r7, #28]
 8005862:	f003 0307 	and.w	r3, r3, #7
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	220f      	movs	r2, #15
 800586a:	fa02 f303 	lsl.w	r3, r2, r3
 800586e:	43db      	mvns	r3, r3
 8005870:	69ba      	ldr	r2, [r7, #24]
 8005872:	4013      	ands	r3, r2
 8005874:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	691a      	ldr	r2, [r3, #16]
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	f003 0307 	and.w	r3, r3, #7
 8005880:	009b      	lsls	r3, r3, #2
 8005882:	fa02 f303 	lsl.w	r3, r2, r3
 8005886:	69ba      	ldr	r2, [r7, #24]
 8005888:	4313      	orrs	r3, r2
 800588a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	08da      	lsrs	r2, r3, #3
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	3208      	adds	r2, #8
 8005894:	69b9      	ldr	r1, [r7, #24]
 8005896:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	005b      	lsls	r3, r3, #1
 80058a4:	2203      	movs	r2, #3
 80058a6:	fa02 f303 	lsl.w	r3, r2, r3
 80058aa:	43db      	mvns	r3, r3
 80058ac:	69ba      	ldr	r2, [r7, #24]
 80058ae:	4013      	ands	r3, r2
 80058b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	f003 0203 	and.w	r2, r3, #3
 80058ba:	69fb      	ldr	r3, [r7, #28]
 80058bc:	005b      	lsls	r3, r3, #1
 80058be:	fa02 f303 	lsl.w	r3, r2, r3
 80058c2:	69ba      	ldr	r2, [r7, #24]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	69ba      	ldr	r2, [r7, #24]
 80058cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	f000 80d8 	beq.w	8005a8c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058dc:	4b2c      	ldr	r3, [pc, #176]	; (8005990 <HAL_GPIO_Init+0x22c>)
 80058de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80058e2:	4a2b      	ldr	r2, [pc, #172]	; (8005990 <HAL_GPIO_Init+0x22c>)
 80058e4:	f043 0302 	orr.w	r3, r3, #2
 80058e8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80058ec:	4b28      	ldr	r3, [pc, #160]	; (8005990 <HAL_GPIO_Init+0x22c>)
 80058ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80058f2:	f003 0302 	and.w	r3, r3, #2
 80058f6:	60fb      	str	r3, [r7, #12]
 80058f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80058fa:	4a26      	ldr	r2, [pc, #152]	; (8005994 <HAL_GPIO_Init+0x230>)
 80058fc:	69fb      	ldr	r3, [r7, #28]
 80058fe:	089b      	lsrs	r3, r3, #2
 8005900:	3302      	adds	r3, #2
 8005902:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005906:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005908:	69fb      	ldr	r3, [r7, #28]
 800590a:	f003 0303 	and.w	r3, r3, #3
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	220f      	movs	r2, #15
 8005912:	fa02 f303 	lsl.w	r3, r2, r3
 8005916:	43db      	mvns	r3, r3
 8005918:	69ba      	ldr	r2, [r7, #24]
 800591a:	4013      	ands	r3, r2
 800591c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4a1d      	ldr	r2, [pc, #116]	; (8005998 <HAL_GPIO_Init+0x234>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d04a      	beq.n	80059bc <HAL_GPIO_Init+0x258>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	4a1c      	ldr	r2, [pc, #112]	; (800599c <HAL_GPIO_Init+0x238>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d02b      	beq.n	8005986 <HAL_GPIO_Init+0x222>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	4a1b      	ldr	r2, [pc, #108]	; (80059a0 <HAL_GPIO_Init+0x23c>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d025      	beq.n	8005982 <HAL_GPIO_Init+0x21e>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	4a1a      	ldr	r2, [pc, #104]	; (80059a4 <HAL_GPIO_Init+0x240>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d01f      	beq.n	800597e <HAL_GPIO_Init+0x21a>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4a19      	ldr	r2, [pc, #100]	; (80059a8 <HAL_GPIO_Init+0x244>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d019      	beq.n	800597a <HAL_GPIO_Init+0x216>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	4a18      	ldr	r2, [pc, #96]	; (80059ac <HAL_GPIO_Init+0x248>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d013      	beq.n	8005976 <HAL_GPIO_Init+0x212>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	4a17      	ldr	r2, [pc, #92]	; (80059b0 <HAL_GPIO_Init+0x24c>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d00d      	beq.n	8005972 <HAL_GPIO_Init+0x20e>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4a16      	ldr	r2, [pc, #88]	; (80059b4 <HAL_GPIO_Init+0x250>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d007      	beq.n	800596e <HAL_GPIO_Init+0x20a>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4a15      	ldr	r2, [pc, #84]	; (80059b8 <HAL_GPIO_Init+0x254>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d101      	bne.n	800596a <HAL_GPIO_Init+0x206>
 8005966:	2309      	movs	r3, #9
 8005968:	e029      	b.n	80059be <HAL_GPIO_Init+0x25a>
 800596a:	230a      	movs	r3, #10
 800596c:	e027      	b.n	80059be <HAL_GPIO_Init+0x25a>
 800596e:	2307      	movs	r3, #7
 8005970:	e025      	b.n	80059be <HAL_GPIO_Init+0x25a>
 8005972:	2306      	movs	r3, #6
 8005974:	e023      	b.n	80059be <HAL_GPIO_Init+0x25a>
 8005976:	2305      	movs	r3, #5
 8005978:	e021      	b.n	80059be <HAL_GPIO_Init+0x25a>
 800597a:	2304      	movs	r3, #4
 800597c:	e01f      	b.n	80059be <HAL_GPIO_Init+0x25a>
 800597e:	2303      	movs	r3, #3
 8005980:	e01d      	b.n	80059be <HAL_GPIO_Init+0x25a>
 8005982:	2302      	movs	r3, #2
 8005984:	e01b      	b.n	80059be <HAL_GPIO_Init+0x25a>
 8005986:	2301      	movs	r3, #1
 8005988:	e019      	b.n	80059be <HAL_GPIO_Init+0x25a>
 800598a:	bf00      	nop
 800598c:	58000080 	.word	0x58000080
 8005990:	58024400 	.word	0x58024400
 8005994:	58000400 	.word	0x58000400
 8005998:	58020000 	.word	0x58020000
 800599c:	58020400 	.word	0x58020400
 80059a0:	58020800 	.word	0x58020800
 80059a4:	58020c00 	.word	0x58020c00
 80059a8:	58021000 	.word	0x58021000
 80059ac:	58021400 	.word	0x58021400
 80059b0:	58021800 	.word	0x58021800
 80059b4:	58021c00 	.word	0x58021c00
 80059b8:	58022400 	.word	0x58022400
 80059bc:	2300      	movs	r3, #0
 80059be:	69fa      	ldr	r2, [r7, #28]
 80059c0:	f002 0203 	and.w	r2, r2, #3
 80059c4:	0092      	lsls	r2, r2, #2
 80059c6:	4093      	lsls	r3, r2
 80059c8:	69ba      	ldr	r2, [r7, #24]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80059ce:	4938      	ldr	r1, [pc, #224]	; (8005ab0 <HAL_GPIO_Init+0x34c>)
 80059d0:	69fb      	ldr	r3, [r7, #28]
 80059d2:	089b      	lsrs	r3, r3, #2
 80059d4:	3302      	adds	r3, #2
 80059d6:	69ba      	ldr	r2, [r7, #24]
 80059d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80059dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	43db      	mvns	r3, r3
 80059e8:	69ba      	ldr	r2, [r7, #24]
 80059ea:	4013      	ands	r3, r2
 80059ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d003      	beq.n	8005a02 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80059fa:	69ba      	ldr	r2, [r7, #24]
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005a02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a06:	69bb      	ldr	r3, [r7, #24]
 8005a08:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005a0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	43db      	mvns	r3, r3
 8005a16:	69ba      	ldr	r2, [r7, #24]
 8005a18:	4013      	ands	r3, r2
 8005a1a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d003      	beq.n	8005a30 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8005a28:	69ba      	ldr	r2, [r7, #24]
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005a30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a34:	69bb      	ldr	r3, [r7, #24]
 8005a36:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	43db      	mvns	r3, r3
 8005a42:	69ba      	ldr	r2, [r7, #24]
 8005a44:	4013      	ands	r3, r2
 8005a46:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d003      	beq.n	8005a5c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8005a54:	69ba      	ldr	r2, [r7, #24]
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	69ba      	ldr	r2, [r7, #24]
 8005a60:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	43db      	mvns	r3, r3
 8005a6c:	69ba      	ldr	r2, [r7, #24]
 8005a6e:	4013      	ands	r3, r2
 8005a70:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d003      	beq.n	8005a86 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8005a7e:	69ba      	ldr	r2, [r7, #24]
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	69ba      	ldr	r2, [r7, #24]
 8005a8a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	3301      	adds	r3, #1
 8005a90:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	fa22 f303 	lsr.w	r3, r2, r3
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	f47f ae6b 	bne.w	8005778 <HAL_GPIO_Init+0x14>
  }
}
 8005aa2:	bf00      	nop
 8005aa4:	bf00      	nop
 8005aa6:	3724      	adds	r7, #36	; 0x24
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr
 8005ab0:	58000400 	.word	0x58000400

08005ab4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b083      	sub	sp, #12
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	460b      	mov	r3, r1
 8005abe:	807b      	strh	r3, [r7, #2]
 8005ac0:	4613      	mov	r3, r2
 8005ac2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005ac4:	787b      	ldrb	r3, [r7, #1]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d003      	beq.n	8005ad2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005aca:	887a      	ldrh	r2, [r7, #2]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005ad0:	e003      	b.n	8005ada <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005ad2:	887b      	ldrh	r3, [r7, #2]
 8005ad4:	041a      	lsls	r2, r3, #16
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	619a      	str	r2, [r3, #24]
}
 8005ada:	bf00      	nop
 8005adc:	370c      	adds	r7, #12
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr
	...

08005ae8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8005af0:	4b29      	ldr	r3, [pc, #164]	; (8005b98 <HAL_PWREx_ConfigSupply+0xb0>)
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	f003 0307 	and.w	r3, r3, #7
 8005af8:	2b06      	cmp	r3, #6
 8005afa:	d00a      	beq.n	8005b12 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005afc:	4b26      	ldr	r3, [pc, #152]	; (8005b98 <HAL_PWREx_ConfigSupply+0xb0>)
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b04:	687a      	ldr	r2, [r7, #4]
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d001      	beq.n	8005b0e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e03f      	b.n	8005b8e <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	e03d      	b.n	8005b8e <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005b12:	4b21      	ldr	r3, [pc, #132]	; (8005b98 <HAL_PWREx_ConfigSupply+0xb0>)
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8005b1a:	491f      	ldr	r1, [pc, #124]	; (8005b98 <HAL_PWREx_ConfigSupply+0xb0>)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005b22:	f7fc f8c7 	bl	8001cb4 <HAL_GetTick>
 8005b26:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005b28:	e009      	b.n	8005b3e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005b2a:	f7fc f8c3 	bl	8001cb4 <HAL_GetTick>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	1ad3      	subs	r3, r2, r3
 8005b34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b38:	d901      	bls.n	8005b3e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e027      	b.n	8005b8e <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005b3e:	4b16      	ldr	r3, [pc, #88]	; (8005b98 <HAL_PWREx_ConfigSupply+0xb0>)
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b4a:	d1ee      	bne.n	8005b2a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2b1e      	cmp	r3, #30
 8005b50:	d008      	beq.n	8005b64 <HAL_PWREx_ConfigSupply+0x7c>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2b2e      	cmp	r3, #46	; 0x2e
 8005b56:	d005      	beq.n	8005b64 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2b1d      	cmp	r3, #29
 8005b5c:	d002      	beq.n	8005b64 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2b2d      	cmp	r3, #45	; 0x2d
 8005b62:	d113      	bne.n	8005b8c <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005b64:	f7fc f8a6 	bl	8001cb4 <HAL_GetTick>
 8005b68:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005b6a:	e009      	b.n	8005b80 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005b6c:	f7fc f8a2 	bl	8001cb4 <HAL_GetTick>
 8005b70:	4602      	mov	r2, r0
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	1ad3      	subs	r3, r2, r3
 8005b76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b7a:	d901      	bls.n	8005b80 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	e006      	b.n	8005b8e <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005b80:	4b05      	ldr	r3, [pc, #20]	; (8005b98 <HAL_PWREx_ConfigSupply+0xb0>)
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	f003 0311 	and.w	r3, r3, #17
 8005b88:	2b11      	cmp	r3, #17
 8005b8a:	d1ef      	bne.n	8005b6c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005b8c:	2300      	movs	r3, #0
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3710      	adds	r7, #16
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}
 8005b96:	bf00      	nop
 8005b98:	58024800 	.word	0x58024800

08005b9c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b08c      	sub	sp, #48	; 0x30
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d101      	bne.n	8005bae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	e397      	b.n	80062de <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 0301 	and.w	r3, r3, #1
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	f000 8087 	beq.w	8005cca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005bbc:	4b9e      	ldr	r3, [pc, #632]	; (8005e38 <HAL_RCC_OscConfig+0x29c>)
 8005bbe:	691b      	ldr	r3, [r3, #16]
 8005bc0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005bc6:	4b9c      	ldr	r3, [pc, #624]	; (8005e38 <HAL_RCC_OscConfig+0x29c>)
 8005bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bca:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bce:	2b10      	cmp	r3, #16
 8005bd0:	d007      	beq.n	8005be2 <HAL_RCC_OscConfig+0x46>
 8005bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bd4:	2b18      	cmp	r3, #24
 8005bd6:	d110      	bne.n	8005bfa <HAL_RCC_OscConfig+0x5e>
 8005bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bda:	f003 0303 	and.w	r3, r3, #3
 8005bde:	2b02      	cmp	r3, #2
 8005be0:	d10b      	bne.n	8005bfa <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005be2:	4b95      	ldr	r3, [pc, #596]	; (8005e38 <HAL_RCC_OscConfig+0x29c>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d06c      	beq.n	8005cc8 <HAL_RCC_OscConfig+0x12c>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d168      	bne.n	8005cc8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e371      	b.n	80062de <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c02:	d106      	bne.n	8005c12 <HAL_RCC_OscConfig+0x76>
 8005c04:	4b8c      	ldr	r3, [pc, #560]	; (8005e38 <HAL_RCC_OscConfig+0x29c>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a8b      	ldr	r2, [pc, #556]	; (8005e38 <HAL_RCC_OscConfig+0x29c>)
 8005c0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c0e:	6013      	str	r3, [r2, #0]
 8005c10:	e02e      	b.n	8005c70 <HAL_RCC_OscConfig+0xd4>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d10c      	bne.n	8005c34 <HAL_RCC_OscConfig+0x98>
 8005c1a:	4b87      	ldr	r3, [pc, #540]	; (8005e38 <HAL_RCC_OscConfig+0x29c>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a86      	ldr	r2, [pc, #536]	; (8005e38 <HAL_RCC_OscConfig+0x29c>)
 8005c20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c24:	6013      	str	r3, [r2, #0]
 8005c26:	4b84      	ldr	r3, [pc, #528]	; (8005e38 <HAL_RCC_OscConfig+0x29c>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a83      	ldr	r2, [pc, #524]	; (8005e38 <HAL_RCC_OscConfig+0x29c>)
 8005c2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c30:	6013      	str	r3, [r2, #0]
 8005c32:	e01d      	b.n	8005c70 <HAL_RCC_OscConfig+0xd4>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c3c:	d10c      	bne.n	8005c58 <HAL_RCC_OscConfig+0xbc>
 8005c3e:	4b7e      	ldr	r3, [pc, #504]	; (8005e38 <HAL_RCC_OscConfig+0x29c>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a7d      	ldr	r2, [pc, #500]	; (8005e38 <HAL_RCC_OscConfig+0x29c>)
 8005c44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c48:	6013      	str	r3, [r2, #0]
 8005c4a:	4b7b      	ldr	r3, [pc, #492]	; (8005e38 <HAL_RCC_OscConfig+0x29c>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a7a      	ldr	r2, [pc, #488]	; (8005e38 <HAL_RCC_OscConfig+0x29c>)
 8005c50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c54:	6013      	str	r3, [r2, #0]
 8005c56:	e00b      	b.n	8005c70 <HAL_RCC_OscConfig+0xd4>
 8005c58:	4b77      	ldr	r3, [pc, #476]	; (8005e38 <HAL_RCC_OscConfig+0x29c>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a76      	ldr	r2, [pc, #472]	; (8005e38 <HAL_RCC_OscConfig+0x29c>)
 8005c5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c62:	6013      	str	r3, [r2, #0]
 8005c64:	4b74      	ldr	r3, [pc, #464]	; (8005e38 <HAL_RCC_OscConfig+0x29c>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a73      	ldr	r2, [pc, #460]	; (8005e38 <HAL_RCC_OscConfig+0x29c>)
 8005c6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d013      	beq.n	8005ca0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c78:	f7fc f81c 	bl	8001cb4 <HAL_GetTick>
 8005c7c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005c7e:	e008      	b.n	8005c92 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c80:	f7fc f818 	bl	8001cb4 <HAL_GetTick>
 8005c84:	4602      	mov	r2, r0
 8005c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c88:	1ad3      	subs	r3, r2, r3
 8005c8a:	2b64      	cmp	r3, #100	; 0x64
 8005c8c:	d901      	bls.n	8005c92 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005c8e:	2303      	movs	r3, #3
 8005c90:	e325      	b.n	80062de <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005c92:	4b69      	ldr	r3, [pc, #420]	; (8005e38 <HAL_RCC_OscConfig+0x29c>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d0f0      	beq.n	8005c80 <HAL_RCC_OscConfig+0xe4>
 8005c9e:	e014      	b.n	8005cca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ca0:	f7fc f808 	bl	8001cb4 <HAL_GetTick>
 8005ca4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005ca6:	e008      	b.n	8005cba <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ca8:	f7fc f804 	bl	8001cb4 <HAL_GetTick>
 8005cac:	4602      	mov	r2, r0
 8005cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb0:	1ad3      	subs	r3, r2, r3
 8005cb2:	2b64      	cmp	r3, #100	; 0x64
 8005cb4:	d901      	bls.n	8005cba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005cb6:	2303      	movs	r3, #3
 8005cb8:	e311      	b.n	80062de <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005cba:	4b5f      	ldr	r3, [pc, #380]	; (8005e38 <HAL_RCC_OscConfig+0x29c>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d1f0      	bne.n	8005ca8 <HAL_RCC_OscConfig+0x10c>
 8005cc6:	e000      	b.n	8005cca <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f003 0302 	and.w	r3, r3, #2
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	f000 808a 	beq.w	8005dec <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005cd8:	4b57      	ldr	r3, [pc, #348]	; (8005e38 <HAL_RCC_OscConfig+0x29c>)
 8005cda:	691b      	ldr	r3, [r3, #16]
 8005cdc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ce0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005ce2:	4b55      	ldr	r3, [pc, #340]	; (8005e38 <HAL_RCC_OscConfig+0x29c>)
 8005ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005ce8:	6a3b      	ldr	r3, [r7, #32]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d007      	beq.n	8005cfe <HAL_RCC_OscConfig+0x162>
 8005cee:	6a3b      	ldr	r3, [r7, #32]
 8005cf0:	2b18      	cmp	r3, #24
 8005cf2:	d137      	bne.n	8005d64 <HAL_RCC_OscConfig+0x1c8>
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	f003 0303 	and.w	r3, r3, #3
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d132      	bne.n	8005d64 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005cfe:	4b4e      	ldr	r3, [pc, #312]	; (8005e38 <HAL_RCC_OscConfig+0x29c>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 0304 	and.w	r3, r3, #4
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d005      	beq.n	8005d16 <HAL_RCC_OscConfig+0x17a>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d101      	bne.n	8005d16 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	e2e3      	b.n	80062de <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005d16:	4b48      	ldr	r3, [pc, #288]	; (8005e38 <HAL_RCC_OscConfig+0x29c>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f023 0219 	bic.w	r2, r3, #25
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	4945      	ldr	r1, [pc, #276]	; (8005e38 <HAL_RCC_OscConfig+0x29c>)
 8005d24:	4313      	orrs	r3, r2
 8005d26:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005d28:	f7fb ffc4 	bl	8001cb4 <HAL_GetTick>
 8005d2c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d2e:	e008      	b.n	8005d42 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d30:	f7fb ffc0 	bl	8001cb4 <HAL_GetTick>
 8005d34:	4602      	mov	r2, r0
 8005d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d38:	1ad3      	subs	r3, r2, r3
 8005d3a:	2b02      	cmp	r3, #2
 8005d3c:	d901      	bls.n	8005d42 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8005d3e:	2303      	movs	r3, #3
 8005d40:	e2cd      	b.n	80062de <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d42:	4b3d      	ldr	r3, [pc, #244]	; (8005e38 <HAL_RCC_OscConfig+0x29c>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 0304 	and.w	r3, r3, #4
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d0f0      	beq.n	8005d30 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d4e:	4b3a      	ldr	r3, [pc, #232]	; (8005e38 <HAL_RCC_OscConfig+0x29c>)
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	061b      	lsls	r3, r3, #24
 8005d5c:	4936      	ldr	r1, [pc, #216]	; (8005e38 <HAL_RCC_OscConfig+0x29c>)
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d62:	e043      	b.n	8005dec <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d026      	beq.n	8005dba <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005d6c:	4b32      	ldr	r3, [pc, #200]	; (8005e38 <HAL_RCC_OscConfig+0x29c>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f023 0219 	bic.w	r2, r3, #25
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	68db      	ldr	r3, [r3, #12]
 8005d78:	492f      	ldr	r1, [pc, #188]	; (8005e38 <HAL_RCC_OscConfig+0x29c>)
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d7e:	f7fb ff99 	bl	8001cb4 <HAL_GetTick>
 8005d82:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d84:	e008      	b.n	8005d98 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d86:	f7fb ff95 	bl	8001cb4 <HAL_GetTick>
 8005d8a:	4602      	mov	r2, r0
 8005d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8e:	1ad3      	subs	r3, r2, r3
 8005d90:	2b02      	cmp	r3, #2
 8005d92:	d901      	bls.n	8005d98 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005d94:	2303      	movs	r3, #3
 8005d96:	e2a2      	b.n	80062de <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d98:	4b27      	ldr	r3, [pc, #156]	; (8005e38 <HAL_RCC_OscConfig+0x29c>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 0304 	and.w	r3, r3, #4
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d0f0      	beq.n	8005d86 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005da4:	4b24      	ldr	r3, [pc, #144]	; (8005e38 <HAL_RCC_OscConfig+0x29c>)
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	691b      	ldr	r3, [r3, #16]
 8005db0:	061b      	lsls	r3, r3, #24
 8005db2:	4921      	ldr	r1, [pc, #132]	; (8005e38 <HAL_RCC_OscConfig+0x29c>)
 8005db4:	4313      	orrs	r3, r2
 8005db6:	604b      	str	r3, [r1, #4]
 8005db8:	e018      	b.n	8005dec <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005dba:	4b1f      	ldr	r3, [pc, #124]	; (8005e38 <HAL_RCC_OscConfig+0x29c>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a1e      	ldr	r2, [pc, #120]	; (8005e38 <HAL_RCC_OscConfig+0x29c>)
 8005dc0:	f023 0301 	bic.w	r3, r3, #1
 8005dc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dc6:	f7fb ff75 	bl	8001cb4 <HAL_GetTick>
 8005dca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005dcc:	e008      	b.n	8005de0 <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005dce:	f7fb ff71 	bl	8001cb4 <HAL_GetTick>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd6:	1ad3      	subs	r3, r2, r3
 8005dd8:	2b02      	cmp	r3, #2
 8005dda:	d901      	bls.n	8005de0 <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 8005ddc:	2303      	movs	r3, #3
 8005dde:	e27e      	b.n	80062de <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005de0:	4b15      	ldr	r3, [pc, #84]	; (8005e38 <HAL_RCC_OscConfig+0x29c>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f003 0304 	and.w	r3, r3, #4
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d1f0      	bne.n	8005dce <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f003 0310 	and.w	r3, r3, #16
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d06d      	beq.n	8005ed4 <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005df8:	4b0f      	ldr	r3, [pc, #60]	; (8005e38 <HAL_RCC_OscConfig+0x29c>)
 8005dfa:	691b      	ldr	r3, [r3, #16]
 8005dfc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e00:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005e02:	4b0d      	ldr	r3, [pc, #52]	; (8005e38 <HAL_RCC_OscConfig+0x29c>)
 8005e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e06:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005e08:	69bb      	ldr	r3, [r7, #24]
 8005e0a:	2b08      	cmp	r3, #8
 8005e0c:	d007      	beq.n	8005e1e <HAL_RCC_OscConfig+0x282>
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	2b18      	cmp	r3, #24
 8005e12:	d11e      	bne.n	8005e52 <HAL_RCC_OscConfig+0x2b6>
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	f003 0303 	and.w	r3, r3, #3
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d119      	bne.n	8005e52 <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005e1e:	4b06      	ldr	r3, [pc, #24]	; (8005e38 <HAL_RCC_OscConfig+0x29c>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d008      	beq.n	8005e3c <HAL_RCC_OscConfig+0x2a0>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	69db      	ldr	r3, [r3, #28]
 8005e2e:	2b80      	cmp	r3, #128	; 0x80
 8005e30:	d004      	beq.n	8005e3c <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	e253      	b.n	80062de <HAL_RCC_OscConfig+0x742>
 8005e36:	bf00      	nop
 8005e38:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005e3c:	4ba3      	ldr	r3, [pc, #652]	; (80060cc <HAL_RCC_OscConfig+0x530>)
 8005e3e:	68db      	ldr	r3, [r3, #12]
 8005e40:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6a1b      	ldr	r3, [r3, #32]
 8005e48:	061b      	lsls	r3, r3, #24
 8005e4a:	49a0      	ldr	r1, [pc, #640]	; (80060cc <HAL_RCC_OscConfig+0x530>)
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005e50:	e040      	b.n	8005ed4 <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	69db      	ldr	r3, [r3, #28]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d023      	beq.n	8005ea2 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005e5a:	4b9c      	ldr	r3, [pc, #624]	; (80060cc <HAL_RCC_OscConfig+0x530>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a9b      	ldr	r2, [pc, #620]	; (80060cc <HAL_RCC_OscConfig+0x530>)
 8005e60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e66:	f7fb ff25 	bl	8001cb4 <HAL_GetTick>
 8005e6a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005e6c:	e008      	b.n	8005e80 <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005e6e:	f7fb ff21 	bl	8001cb4 <HAL_GetTick>
 8005e72:	4602      	mov	r2, r0
 8005e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e76:	1ad3      	subs	r3, r2, r3
 8005e78:	2b02      	cmp	r3, #2
 8005e7a:	d901      	bls.n	8005e80 <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 8005e7c:	2303      	movs	r3, #3
 8005e7e:	e22e      	b.n	80062de <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005e80:	4b92      	ldr	r3, [pc, #584]	; (80060cc <HAL_RCC_OscConfig+0x530>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d0f0      	beq.n	8005e6e <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005e8c:	4b8f      	ldr	r3, [pc, #572]	; (80060cc <HAL_RCC_OscConfig+0x530>)
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6a1b      	ldr	r3, [r3, #32]
 8005e98:	061b      	lsls	r3, r3, #24
 8005e9a:	498c      	ldr	r1, [pc, #560]	; (80060cc <HAL_RCC_OscConfig+0x530>)
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	60cb      	str	r3, [r1, #12]
 8005ea0:	e018      	b.n	8005ed4 <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005ea2:	4b8a      	ldr	r3, [pc, #552]	; (80060cc <HAL_RCC_OscConfig+0x530>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a89      	ldr	r2, [pc, #548]	; (80060cc <HAL_RCC_OscConfig+0x530>)
 8005ea8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005eac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eae:	f7fb ff01 	bl	8001cb4 <HAL_GetTick>
 8005eb2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005eb4:	e008      	b.n	8005ec8 <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005eb6:	f7fb fefd 	bl	8001cb4 <HAL_GetTick>
 8005eba:	4602      	mov	r2, r0
 8005ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ebe:	1ad3      	subs	r3, r2, r3
 8005ec0:	2b02      	cmp	r3, #2
 8005ec2:	d901      	bls.n	8005ec8 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8005ec4:	2303      	movs	r3, #3
 8005ec6:	e20a      	b.n	80062de <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005ec8:	4b80      	ldr	r3, [pc, #512]	; (80060cc <HAL_RCC_OscConfig+0x530>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d1f0      	bne.n	8005eb6 <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f003 0308 	and.w	r3, r3, #8
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d036      	beq.n	8005f4e <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	695b      	ldr	r3, [r3, #20]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d019      	beq.n	8005f1c <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ee8:	4b78      	ldr	r3, [pc, #480]	; (80060cc <HAL_RCC_OscConfig+0x530>)
 8005eea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005eec:	4a77      	ldr	r2, [pc, #476]	; (80060cc <HAL_RCC_OscConfig+0x530>)
 8005eee:	f043 0301 	orr.w	r3, r3, #1
 8005ef2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ef4:	f7fb fede 	bl	8001cb4 <HAL_GetTick>
 8005ef8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005efa:	e008      	b.n	8005f0e <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005efc:	f7fb feda 	bl	8001cb4 <HAL_GetTick>
 8005f00:	4602      	mov	r2, r0
 8005f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f04:	1ad3      	subs	r3, r2, r3
 8005f06:	2b02      	cmp	r3, #2
 8005f08:	d901      	bls.n	8005f0e <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 8005f0a:	2303      	movs	r3, #3
 8005f0c:	e1e7      	b.n	80062de <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005f0e:	4b6f      	ldr	r3, [pc, #444]	; (80060cc <HAL_RCC_OscConfig+0x530>)
 8005f10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f12:	f003 0302 	and.w	r3, r3, #2
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d0f0      	beq.n	8005efc <HAL_RCC_OscConfig+0x360>
 8005f1a:	e018      	b.n	8005f4e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f1c:	4b6b      	ldr	r3, [pc, #428]	; (80060cc <HAL_RCC_OscConfig+0x530>)
 8005f1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f20:	4a6a      	ldr	r2, [pc, #424]	; (80060cc <HAL_RCC_OscConfig+0x530>)
 8005f22:	f023 0301 	bic.w	r3, r3, #1
 8005f26:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f28:	f7fb fec4 	bl	8001cb4 <HAL_GetTick>
 8005f2c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005f2e:	e008      	b.n	8005f42 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f30:	f7fb fec0 	bl	8001cb4 <HAL_GetTick>
 8005f34:	4602      	mov	r2, r0
 8005f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f38:	1ad3      	subs	r3, r2, r3
 8005f3a:	2b02      	cmp	r3, #2
 8005f3c:	d901      	bls.n	8005f42 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8005f3e:	2303      	movs	r3, #3
 8005f40:	e1cd      	b.n	80062de <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005f42:	4b62      	ldr	r3, [pc, #392]	; (80060cc <HAL_RCC_OscConfig+0x530>)
 8005f44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f46:	f003 0302 	and.w	r3, r3, #2
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d1f0      	bne.n	8005f30 <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f003 0320 	and.w	r3, r3, #32
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d036      	beq.n	8005fc8 <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	699b      	ldr	r3, [r3, #24]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d019      	beq.n	8005f96 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005f62:	4b5a      	ldr	r3, [pc, #360]	; (80060cc <HAL_RCC_OscConfig+0x530>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a59      	ldr	r2, [pc, #356]	; (80060cc <HAL_RCC_OscConfig+0x530>)
 8005f68:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005f6c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005f6e:	f7fb fea1 	bl	8001cb4 <HAL_GetTick>
 8005f72:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005f74:	e008      	b.n	8005f88 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005f76:	f7fb fe9d 	bl	8001cb4 <HAL_GetTick>
 8005f7a:	4602      	mov	r2, r0
 8005f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7e:	1ad3      	subs	r3, r2, r3
 8005f80:	2b02      	cmp	r3, #2
 8005f82:	d901      	bls.n	8005f88 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8005f84:	2303      	movs	r3, #3
 8005f86:	e1aa      	b.n	80062de <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005f88:	4b50      	ldr	r3, [pc, #320]	; (80060cc <HAL_RCC_OscConfig+0x530>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d0f0      	beq.n	8005f76 <HAL_RCC_OscConfig+0x3da>
 8005f94:	e018      	b.n	8005fc8 <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005f96:	4b4d      	ldr	r3, [pc, #308]	; (80060cc <HAL_RCC_OscConfig+0x530>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a4c      	ldr	r2, [pc, #304]	; (80060cc <HAL_RCC_OscConfig+0x530>)
 8005f9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005fa0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005fa2:	f7fb fe87 	bl	8001cb4 <HAL_GetTick>
 8005fa6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005fa8:	e008      	b.n	8005fbc <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005faa:	f7fb fe83 	bl	8001cb4 <HAL_GetTick>
 8005fae:	4602      	mov	r2, r0
 8005fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb2:	1ad3      	subs	r3, r2, r3
 8005fb4:	2b02      	cmp	r3, #2
 8005fb6:	d901      	bls.n	8005fbc <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 8005fb8:	2303      	movs	r3, #3
 8005fba:	e190      	b.n	80062de <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005fbc:	4b43      	ldr	r3, [pc, #268]	; (80060cc <HAL_RCC_OscConfig+0x530>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d1f0      	bne.n	8005faa <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f003 0304 	and.w	r3, r3, #4
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	f000 8085 	beq.w	80060e0 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005fd6:	4b3e      	ldr	r3, [pc, #248]	; (80060d0 <HAL_RCC_OscConfig+0x534>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a3d      	ldr	r2, [pc, #244]	; (80060d0 <HAL_RCC_OscConfig+0x534>)
 8005fdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fe0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005fe2:	f7fb fe67 	bl	8001cb4 <HAL_GetTick>
 8005fe6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005fe8:	e008      	b.n	8005ffc <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005fea:	f7fb fe63 	bl	8001cb4 <HAL_GetTick>
 8005fee:	4602      	mov	r2, r0
 8005ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff2:	1ad3      	subs	r3, r2, r3
 8005ff4:	2b64      	cmp	r3, #100	; 0x64
 8005ff6:	d901      	bls.n	8005ffc <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 8005ff8:	2303      	movs	r3, #3
 8005ffa:	e170      	b.n	80062de <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ffc:	4b34      	ldr	r3, [pc, #208]	; (80060d0 <HAL_RCC_OscConfig+0x534>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006004:	2b00      	cmp	r3, #0
 8006006:	d0f0      	beq.n	8005fea <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	2b01      	cmp	r3, #1
 800600e:	d106      	bne.n	800601e <HAL_RCC_OscConfig+0x482>
 8006010:	4b2e      	ldr	r3, [pc, #184]	; (80060cc <HAL_RCC_OscConfig+0x530>)
 8006012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006014:	4a2d      	ldr	r2, [pc, #180]	; (80060cc <HAL_RCC_OscConfig+0x530>)
 8006016:	f043 0301 	orr.w	r3, r3, #1
 800601a:	6713      	str	r3, [r2, #112]	; 0x70
 800601c:	e02d      	b.n	800607a <HAL_RCC_OscConfig+0x4de>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d10c      	bne.n	8006040 <HAL_RCC_OscConfig+0x4a4>
 8006026:	4b29      	ldr	r3, [pc, #164]	; (80060cc <HAL_RCC_OscConfig+0x530>)
 8006028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800602a:	4a28      	ldr	r2, [pc, #160]	; (80060cc <HAL_RCC_OscConfig+0x530>)
 800602c:	f023 0301 	bic.w	r3, r3, #1
 8006030:	6713      	str	r3, [r2, #112]	; 0x70
 8006032:	4b26      	ldr	r3, [pc, #152]	; (80060cc <HAL_RCC_OscConfig+0x530>)
 8006034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006036:	4a25      	ldr	r2, [pc, #148]	; (80060cc <HAL_RCC_OscConfig+0x530>)
 8006038:	f023 0304 	bic.w	r3, r3, #4
 800603c:	6713      	str	r3, [r2, #112]	; 0x70
 800603e:	e01c      	b.n	800607a <HAL_RCC_OscConfig+0x4de>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	2b05      	cmp	r3, #5
 8006046:	d10c      	bne.n	8006062 <HAL_RCC_OscConfig+0x4c6>
 8006048:	4b20      	ldr	r3, [pc, #128]	; (80060cc <HAL_RCC_OscConfig+0x530>)
 800604a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800604c:	4a1f      	ldr	r2, [pc, #124]	; (80060cc <HAL_RCC_OscConfig+0x530>)
 800604e:	f043 0304 	orr.w	r3, r3, #4
 8006052:	6713      	str	r3, [r2, #112]	; 0x70
 8006054:	4b1d      	ldr	r3, [pc, #116]	; (80060cc <HAL_RCC_OscConfig+0x530>)
 8006056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006058:	4a1c      	ldr	r2, [pc, #112]	; (80060cc <HAL_RCC_OscConfig+0x530>)
 800605a:	f043 0301 	orr.w	r3, r3, #1
 800605e:	6713      	str	r3, [r2, #112]	; 0x70
 8006060:	e00b      	b.n	800607a <HAL_RCC_OscConfig+0x4de>
 8006062:	4b1a      	ldr	r3, [pc, #104]	; (80060cc <HAL_RCC_OscConfig+0x530>)
 8006064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006066:	4a19      	ldr	r2, [pc, #100]	; (80060cc <HAL_RCC_OscConfig+0x530>)
 8006068:	f023 0301 	bic.w	r3, r3, #1
 800606c:	6713      	str	r3, [r2, #112]	; 0x70
 800606e:	4b17      	ldr	r3, [pc, #92]	; (80060cc <HAL_RCC_OscConfig+0x530>)
 8006070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006072:	4a16      	ldr	r2, [pc, #88]	; (80060cc <HAL_RCC_OscConfig+0x530>)
 8006074:	f023 0304 	bic.w	r3, r3, #4
 8006078:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d015      	beq.n	80060ae <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006082:	f7fb fe17 	bl	8001cb4 <HAL_GetTick>
 8006086:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006088:	e00a      	b.n	80060a0 <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800608a:	f7fb fe13 	bl	8001cb4 <HAL_GetTick>
 800608e:	4602      	mov	r2, r0
 8006090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006092:	1ad3      	subs	r3, r2, r3
 8006094:	f241 3288 	movw	r2, #5000	; 0x1388
 8006098:	4293      	cmp	r3, r2
 800609a:	d901      	bls.n	80060a0 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 800609c:	2303      	movs	r3, #3
 800609e:	e11e      	b.n	80062de <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80060a0:	4b0a      	ldr	r3, [pc, #40]	; (80060cc <HAL_RCC_OscConfig+0x530>)
 80060a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060a4:	f003 0302 	and.w	r3, r3, #2
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d0ee      	beq.n	800608a <HAL_RCC_OscConfig+0x4ee>
 80060ac:	e018      	b.n	80060e0 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060ae:	f7fb fe01 	bl	8001cb4 <HAL_GetTick>
 80060b2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80060b4:	e00e      	b.n	80060d4 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060b6:	f7fb fdfd 	bl	8001cb4 <HAL_GetTick>
 80060ba:	4602      	mov	r2, r0
 80060bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060be:	1ad3      	subs	r3, r2, r3
 80060c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d905      	bls.n	80060d4 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80060c8:	2303      	movs	r3, #3
 80060ca:	e108      	b.n	80062de <HAL_RCC_OscConfig+0x742>
 80060cc:	58024400 	.word	0x58024400
 80060d0:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80060d4:	4b84      	ldr	r3, [pc, #528]	; (80062e8 <HAL_RCC_OscConfig+0x74c>)
 80060d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060d8:	f003 0302 	and.w	r3, r3, #2
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d1ea      	bne.n	80060b6 <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	f000 80f9 	beq.w	80062dc <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80060ea:	4b7f      	ldr	r3, [pc, #508]	; (80062e8 <HAL_RCC_OscConfig+0x74c>)
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80060f2:	2b18      	cmp	r3, #24
 80060f4:	f000 80b4 	beq.w	8006260 <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fc:	2b02      	cmp	r3, #2
 80060fe:	f040 8095 	bne.w	800622c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006102:	4b79      	ldr	r3, [pc, #484]	; (80062e8 <HAL_RCC_OscConfig+0x74c>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a78      	ldr	r2, [pc, #480]	; (80062e8 <HAL_RCC_OscConfig+0x74c>)
 8006108:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800610c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800610e:	f7fb fdd1 	bl	8001cb4 <HAL_GetTick>
 8006112:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006114:	e008      	b.n	8006128 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006116:	f7fb fdcd 	bl	8001cb4 <HAL_GetTick>
 800611a:	4602      	mov	r2, r0
 800611c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611e:	1ad3      	subs	r3, r2, r3
 8006120:	2b02      	cmp	r3, #2
 8006122:	d901      	bls.n	8006128 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8006124:	2303      	movs	r3, #3
 8006126:	e0da      	b.n	80062de <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006128:	4b6f      	ldr	r3, [pc, #444]	; (80062e8 <HAL_RCC_OscConfig+0x74c>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006130:	2b00      	cmp	r3, #0
 8006132:	d1f0      	bne.n	8006116 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006134:	4b6c      	ldr	r3, [pc, #432]	; (80062e8 <HAL_RCC_OscConfig+0x74c>)
 8006136:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006138:	4b6c      	ldr	r3, [pc, #432]	; (80062ec <HAL_RCC_OscConfig+0x750>)
 800613a:	4013      	ands	r3, r2
 800613c:	687a      	ldr	r2, [r7, #4]
 800613e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006140:	687a      	ldr	r2, [r7, #4]
 8006142:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006144:	0112      	lsls	r2, r2, #4
 8006146:	430a      	orrs	r2, r1
 8006148:	4967      	ldr	r1, [pc, #412]	; (80062e8 <HAL_RCC_OscConfig+0x74c>)
 800614a:	4313      	orrs	r3, r2
 800614c:	628b      	str	r3, [r1, #40]	; 0x28
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006152:	3b01      	subs	r3, #1
 8006154:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800615c:	3b01      	subs	r3, #1
 800615e:	025b      	lsls	r3, r3, #9
 8006160:	b29b      	uxth	r3, r3
 8006162:	431a      	orrs	r2, r3
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006168:	3b01      	subs	r3, #1
 800616a:	041b      	lsls	r3, r3, #16
 800616c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006170:	431a      	orrs	r2, r3
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006176:	3b01      	subs	r3, #1
 8006178:	061b      	lsls	r3, r3, #24
 800617a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800617e:	495a      	ldr	r1, [pc, #360]	; (80062e8 <HAL_RCC_OscConfig+0x74c>)
 8006180:	4313      	orrs	r3, r2
 8006182:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006184:	4b58      	ldr	r3, [pc, #352]	; (80062e8 <HAL_RCC_OscConfig+0x74c>)
 8006186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006188:	4a57      	ldr	r2, [pc, #348]	; (80062e8 <HAL_RCC_OscConfig+0x74c>)
 800618a:	f023 0301 	bic.w	r3, r3, #1
 800618e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006190:	4b55      	ldr	r3, [pc, #340]	; (80062e8 <HAL_RCC_OscConfig+0x74c>)
 8006192:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006194:	4b56      	ldr	r3, [pc, #344]	; (80062f0 <HAL_RCC_OscConfig+0x754>)
 8006196:	4013      	ands	r3, r2
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800619c:	00d2      	lsls	r2, r2, #3
 800619e:	4952      	ldr	r1, [pc, #328]	; (80062e8 <HAL_RCC_OscConfig+0x74c>)
 80061a0:	4313      	orrs	r3, r2
 80061a2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80061a4:	4b50      	ldr	r3, [pc, #320]	; (80062e8 <HAL_RCC_OscConfig+0x74c>)
 80061a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a8:	f023 020c 	bic.w	r2, r3, #12
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b0:	494d      	ldr	r1, [pc, #308]	; (80062e8 <HAL_RCC_OscConfig+0x74c>)
 80061b2:	4313      	orrs	r3, r2
 80061b4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80061b6:	4b4c      	ldr	r3, [pc, #304]	; (80062e8 <HAL_RCC_OscConfig+0x74c>)
 80061b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ba:	f023 0202 	bic.w	r2, r3, #2
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061c2:	4949      	ldr	r1, [pc, #292]	; (80062e8 <HAL_RCC_OscConfig+0x74c>)
 80061c4:	4313      	orrs	r3, r2
 80061c6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80061c8:	4b47      	ldr	r3, [pc, #284]	; (80062e8 <HAL_RCC_OscConfig+0x74c>)
 80061ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061cc:	4a46      	ldr	r2, [pc, #280]	; (80062e8 <HAL_RCC_OscConfig+0x74c>)
 80061ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061d4:	4b44      	ldr	r3, [pc, #272]	; (80062e8 <HAL_RCC_OscConfig+0x74c>)
 80061d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d8:	4a43      	ldr	r2, [pc, #268]	; (80062e8 <HAL_RCC_OscConfig+0x74c>)
 80061da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80061e0:	4b41      	ldr	r3, [pc, #260]	; (80062e8 <HAL_RCC_OscConfig+0x74c>)
 80061e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e4:	4a40      	ldr	r2, [pc, #256]	; (80062e8 <HAL_RCC_OscConfig+0x74c>)
 80061e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80061ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80061ec:	4b3e      	ldr	r3, [pc, #248]	; (80062e8 <HAL_RCC_OscConfig+0x74c>)
 80061ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f0:	4a3d      	ldr	r2, [pc, #244]	; (80062e8 <HAL_RCC_OscConfig+0x74c>)
 80061f2:	f043 0301 	orr.w	r3, r3, #1
 80061f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80061f8:	4b3b      	ldr	r3, [pc, #236]	; (80062e8 <HAL_RCC_OscConfig+0x74c>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a3a      	ldr	r2, [pc, #232]	; (80062e8 <HAL_RCC_OscConfig+0x74c>)
 80061fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006202:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006204:	f7fb fd56 	bl	8001cb4 <HAL_GetTick>
 8006208:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800620a:	e008      	b.n	800621e <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800620c:	f7fb fd52 	bl	8001cb4 <HAL_GetTick>
 8006210:	4602      	mov	r2, r0
 8006212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006214:	1ad3      	subs	r3, r2, r3
 8006216:	2b02      	cmp	r3, #2
 8006218:	d901      	bls.n	800621e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800621a:	2303      	movs	r3, #3
 800621c:	e05f      	b.n	80062de <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800621e:	4b32      	ldr	r3, [pc, #200]	; (80062e8 <HAL_RCC_OscConfig+0x74c>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006226:	2b00      	cmp	r3, #0
 8006228:	d0f0      	beq.n	800620c <HAL_RCC_OscConfig+0x670>
 800622a:	e057      	b.n	80062dc <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800622c:	4b2e      	ldr	r3, [pc, #184]	; (80062e8 <HAL_RCC_OscConfig+0x74c>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a2d      	ldr	r2, [pc, #180]	; (80062e8 <HAL_RCC_OscConfig+0x74c>)
 8006232:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006236:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006238:	f7fb fd3c 	bl	8001cb4 <HAL_GetTick>
 800623c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800623e:	e008      	b.n	8006252 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006240:	f7fb fd38 	bl	8001cb4 <HAL_GetTick>
 8006244:	4602      	mov	r2, r0
 8006246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006248:	1ad3      	subs	r3, r2, r3
 800624a:	2b02      	cmp	r3, #2
 800624c:	d901      	bls.n	8006252 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800624e:	2303      	movs	r3, #3
 8006250:	e045      	b.n	80062de <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006252:	4b25      	ldr	r3, [pc, #148]	; (80062e8 <HAL_RCC_OscConfig+0x74c>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800625a:	2b00      	cmp	r3, #0
 800625c:	d1f0      	bne.n	8006240 <HAL_RCC_OscConfig+0x6a4>
 800625e:	e03d      	b.n	80062dc <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006260:	4b21      	ldr	r3, [pc, #132]	; (80062e8 <HAL_RCC_OscConfig+0x74c>)
 8006262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006264:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006266:	4b20      	ldr	r3, [pc, #128]	; (80062e8 <HAL_RCC_OscConfig+0x74c>)
 8006268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800626a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006270:	2b01      	cmp	r3, #1
 8006272:	d031      	beq.n	80062d8 <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	f003 0203 	and.w	r2, r3, #3
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800627e:	429a      	cmp	r2, r3
 8006280:	d12a      	bne.n	80062d8 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	091b      	lsrs	r3, r3, #4
 8006286:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800628e:	429a      	cmp	r2, r3
 8006290:	d122      	bne.n	80062d8 <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800629c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800629e:	429a      	cmp	r2, r3
 80062a0:	d11a      	bne.n	80062d8 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	0a5b      	lsrs	r3, r3, #9
 80062a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062ae:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d111      	bne.n	80062d8 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	0c1b      	lsrs	r3, r3, #16
 80062b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80062c2:	429a      	cmp	r2, r3
 80062c4:	d108      	bne.n	80062d8 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	0e1b      	lsrs	r3, r3, #24
 80062ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062d2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d001      	beq.n	80062dc <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	e000      	b.n	80062de <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 80062dc:	2300      	movs	r3, #0
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3730      	adds	r7, #48	; 0x30
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}
 80062e6:	bf00      	nop
 80062e8:	58024400 	.word	0x58024400
 80062ec:	fffffc0c 	.word	0xfffffc0c
 80062f0:	ffff0007 	.word	0xffff0007

080062f4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b086      	sub	sp, #24
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
 80062fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d101      	bne.n	8006308 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006304:	2301      	movs	r3, #1
 8006306:	e19c      	b.n	8006642 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006308:	4b8a      	ldr	r3, [pc, #552]	; (8006534 <HAL_RCC_ClockConfig+0x240>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f003 030f 	and.w	r3, r3, #15
 8006310:	683a      	ldr	r2, [r7, #0]
 8006312:	429a      	cmp	r2, r3
 8006314:	d910      	bls.n	8006338 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006316:	4b87      	ldr	r3, [pc, #540]	; (8006534 <HAL_RCC_ClockConfig+0x240>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f023 020f 	bic.w	r2, r3, #15
 800631e:	4985      	ldr	r1, [pc, #532]	; (8006534 <HAL_RCC_ClockConfig+0x240>)
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	4313      	orrs	r3, r2
 8006324:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006326:	4b83      	ldr	r3, [pc, #524]	; (8006534 <HAL_RCC_ClockConfig+0x240>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f003 030f 	and.w	r3, r3, #15
 800632e:	683a      	ldr	r2, [r7, #0]
 8006330:	429a      	cmp	r2, r3
 8006332:	d001      	beq.n	8006338 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	e184      	b.n	8006642 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f003 0304 	and.w	r3, r3, #4
 8006340:	2b00      	cmp	r3, #0
 8006342:	d010      	beq.n	8006366 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	691a      	ldr	r2, [r3, #16]
 8006348:	4b7b      	ldr	r3, [pc, #492]	; (8006538 <HAL_RCC_ClockConfig+0x244>)
 800634a:	699b      	ldr	r3, [r3, #24]
 800634c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006350:	429a      	cmp	r2, r3
 8006352:	d908      	bls.n	8006366 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006354:	4b78      	ldr	r3, [pc, #480]	; (8006538 <HAL_RCC_ClockConfig+0x244>)
 8006356:	699b      	ldr	r3, [r3, #24]
 8006358:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	691b      	ldr	r3, [r3, #16]
 8006360:	4975      	ldr	r1, [pc, #468]	; (8006538 <HAL_RCC_ClockConfig+0x244>)
 8006362:	4313      	orrs	r3, r2
 8006364:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f003 0308 	and.w	r3, r3, #8
 800636e:	2b00      	cmp	r3, #0
 8006370:	d010      	beq.n	8006394 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	695a      	ldr	r2, [r3, #20]
 8006376:	4b70      	ldr	r3, [pc, #448]	; (8006538 <HAL_RCC_ClockConfig+0x244>)
 8006378:	69db      	ldr	r3, [r3, #28]
 800637a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800637e:	429a      	cmp	r2, r3
 8006380:	d908      	bls.n	8006394 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006382:	4b6d      	ldr	r3, [pc, #436]	; (8006538 <HAL_RCC_ClockConfig+0x244>)
 8006384:	69db      	ldr	r3, [r3, #28]
 8006386:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	695b      	ldr	r3, [r3, #20]
 800638e:	496a      	ldr	r1, [pc, #424]	; (8006538 <HAL_RCC_ClockConfig+0x244>)
 8006390:	4313      	orrs	r3, r2
 8006392:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f003 0310 	and.w	r3, r3, #16
 800639c:	2b00      	cmp	r3, #0
 800639e:	d010      	beq.n	80063c2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	699a      	ldr	r2, [r3, #24]
 80063a4:	4b64      	ldr	r3, [pc, #400]	; (8006538 <HAL_RCC_ClockConfig+0x244>)
 80063a6:	69db      	ldr	r3, [r3, #28]
 80063a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d908      	bls.n	80063c2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80063b0:	4b61      	ldr	r3, [pc, #388]	; (8006538 <HAL_RCC_ClockConfig+0x244>)
 80063b2:	69db      	ldr	r3, [r3, #28]
 80063b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	699b      	ldr	r3, [r3, #24]
 80063bc:	495e      	ldr	r1, [pc, #376]	; (8006538 <HAL_RCC_ClockConfig+0x244>)
 80063be:	4313      	orrs	r3, r2
 80063c0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f003 0320 	and.w	r3, r3, #32
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d010      	beq.n	80063f0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	69da      	ldr	r2, [r3, #28]
 80063d2:	4b59      	ldr	r3, [pc, #356]	; (8006538 <HAL_RCC_ClockConfig+0x244>)
 80063d4:	6a1b      	ldr	r3, [r3, #32]
 80063d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80063da:	429a      	cmp	r2, r3
 80063dc:	d908      	bls.n	80063f0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80063de:	4b56      	ldr	r3, [pc, #344]	; (8006538 <HAL_RCC_ClockConfig+0x244>)
 80063e0:	6a1b      	ldr	r3, [r3, #32]
 80063e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	69db      	ldr	r3, [r3, #28]
 80063ea:	4953      	ldr	r1, [pc, #332]	; (8006538 <HAL_RCC_ClockConfig+0x244>)
 80063ec:	4313      	orrs	r3, r2
 80063ee:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f003 0302 	and.w	r3, r3, #2
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d010      	beq.n	800641e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	68da      	ldr	r2, [r3, #12]
 8006400:	4b4d      	ldr	r3, [pc, #308]	; (8006538 <HAL_RCC_ClockConfig+0x244>)
 8006402:	699b      	ldr	r3, [r3, #24]
 8006404:	f003 030f 	and.w	r3, r3, #15
 8006408:	429a      	cmp	r2, r3
 800640a:	d908      	bls.n	800641e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800640c:	4b4a      	ldr	r3, [pc, #296]	; (8006538 <HAL_RCC_ClockConfig+0x244>)
 800640e:	699b      	ldr	r3, [r3, #24]
 8006410:	f023 020f 	bic.w	r2, r3, #15
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	68db      	ldr	r3, [r3, #12]
 8006418:	4947      	ldr	r1, [pc, #284]	; (8006538 <HAL_RCC_ClockConfig+0x244>)
 800641a:	4313      	orrs	r3, r2
 800641c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f003 0301 	and.w	r3, r3, #1
 8006426:	2b00      	cmp	r3, #0
 8006428:	d055      	beq.n	80064d6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800642a:	4b43      	ldr	r3, [pc, #268]	; (8006538 <HAL_RCC_ClockConfig+0x244>)
 800642c:	699b      	ldr	r3, [r3, #24]
 800642e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	4940      	ldr	r1, [pc, #256]	; (8006538 <HAL_RCC_ClockConfig+0x244>)
 8006438:	4313      	orrs	r3, r2
 800643a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	2b02      	cmp	r3, #2
 8006442:	d107      	bne.n	8006454 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006444:	4b3c      	ldr	r3, [pc, #240]	; (8006538 <HAL_RCC_ClockConfig+0x244>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800644c:	2b00      	cmp	r3, #0
 800644e:	d121      	bne.n	8006494 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	e0f6      	b.n	8006642 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	2b03      	cmp	r3, #3
 800645a:	d107      	bne.n	800646c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800645c:	4b36      	ldr	r3, [pc, #216]	; (8006538 <HAL_RCC_ClockConfig+0x244>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006464:	2b00      	cmp	r3, #0
 8006466:	d115      	bne.n	8006494 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006468:	2301      	movs	r3, #1
 800646a:	e0ea      	b.n	8006642 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	2b01      	cmp	r3, #1
 8006472:	d107      	bne.n	8006484 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006474:	4b30      	ldr	r3, [pc, #192]	; (8006538 <HAL_RCC_ClockConfig+0x244>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800647c:	2b00      	cmp	r3, #0
 800647e:	d109      	bne.n	8006494 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006480:	2301      	movs	r3, #1
 8006482:	e0de      	b.n	8006642 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006484:	4b2c      	ldr	r3, [pc, #176]	; (8006538 <HAL_RCC_ClockConfig+0x244>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f003 0304 	and.w	r3, r3, #4
 800648c:	2b00      	cmp	r3, #0
 800648e:	d101      	bne.n	8006494 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006490:	2301      	movs	r3, #1
 8006492:	e0d6      	b.n	8006642 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006494:	4b28      	ldr	r3, [pc, #160]	; (8006538 <HAL_RCC_ClockConfig+0x244>)
 8006496:	691b      	ldr	r3, [r3, #16]
 8006498:	f023 0207 	bic.w	r2, r3, #7
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	4925      	ldr	r1, [pc, #148]	; (8006538 <HAL_RCC_ClockConfig+0x244>)
 80064a2:	4313      	orrs	r3, r2
 80064a4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064a6:	f7fb fc05 	bl	8001cb4 <HAL_GetTick>
 80064aa:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064ac:	e00a      	b.n	80064c4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064ae:	f7fb fc01 	bl	8001cb4 <HAL_GetTick>
 80064b2:	4602      	mov	r2, r0
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	1ad3      	subs	r3, r2, r3
 80064b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80064bc:	4293      	cmp	r3, r2
 80064be:	d901      	bls.n	80064c4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80064c0:	2303      	movs	r3, #3
 80064c2:	e0be      	b.n	8006642 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064c4:	4b1c      	ldr	r3, [pc, #112]	; (8006538 <HAL_RCC_ClockConfig+0x244>)
 80064c6:	691b      	ldr	r3, [r3, #16]
 80064c8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	00db      	lsls	r3, r3, #3
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d1eb      	bne.n	80064ae <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f003 0302 	and.w	r3, r3, #2
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d010      	beq.n	8006504 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	68da      	ldr	r2, [r3, #12]
 80064e6:	4b14      	ldr	r3, [pc, #80]	; (8006538 <HAL_RCC_ClockConfig+0x244>)
 80064e8:	699b      	ldr	r3, [r3, #24]
 80064ea:	f003 030f 	and.w	r3, r3, #15
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d208      	bcs.n	8006504 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064f2:	4b11      	ldr	r3, [pc, #68]	; (8006538 <HAL_RCC_ClockConfig+0x244>)
 80064f4:	699b      	ldr	r3, [r3, #24]
 80064f6:	f023 020f 	bic.w	r2, r3, #15
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	68db      	ldr	r3, [r3, #12]
 80064fe:	490e      	ldr	r1, [pc, #56]	; (8006538 <HAL_RCC_ClockConfig+0x244>)
 8006500:	4313      	orrs	r3, r2
 8006502:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006504:	4b0b      	ldr	r3, [pc, #44]	; (8006534 <HAL_RCC_ClockConfig+0x240>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f003 030f 	and.w	r3, r3, #15
 800650c:	683a      	ldr	r2, [r7, #0]
 800650e:	429a      	cmp	r2, r3
 8006510:	d214      	bcs.n	800653c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006512:	4b08      	ldr	r3, [pc, #32]	; (8006534 <HAL_RCC_ClockConfig+0x240>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f023 020f 	bic.w	r2, r3, #15
 800651a:	4906      	ldr	r1, [pc, #24]	; (8006534 <HAL_RCC_ClockConfig+0x240>)
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	4313      	orrs	r3, r2
 8006520:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006522:	4b04      	ldr	r3, [pc, #16]	; (8006534 <HAL_RCC_ClockConfig+0x240>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f003 030f 	and.w	r3, r3, #15
 800652a:	683a      	ldr	r2, [r7, #0]
 800652c:	429a      	cmp	r2, r3
 800652e:	d005      	beq.n	800653c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006530:	2301      	movs	r3, #1
 8006532:	e086      	b.n	8006642 <HAL_RCC_ClockConfig+0x34e>
 8006534:	52002000 	.word	0x52002000
 8006538:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f003 0304 	and.w	r3, r3, #4
 8006544:	2b00      	cmp	r3, #0
 8006546:	d010      	beq.n	800656a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	691a      	ldr	r2, [r3, #16]
 800654c:	4b3f      	ldr	r3, [pc, #252]	; (800664c <HAL_RCC_ClockConfig+0x358>)
 800654e:	699b      	ldr	r3, [r3, #24]
 8006550:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006554:	429a      	cmp	r2, r3
 8006556:	d208      	bcs.n	800656a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006558:	4b3c      	ldr	r3, [pc, #240]	; (800664c <HAL_RCC_ClockConfig+0x358>)
 800655a:	699b      	ldr	r3, [r3, #24]
 800655c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	691b      	ldr	r3, [r3, #16]
 8006564:	4939      	ldr	r1, [pc, #228]	; (800664c <HAL_RCC_ClockConfig+0x358>)
 8006566:	4313      	orrs	r3, r2
 8006568:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f003 0308 	and.w	r3, r3, #8
 8006572:	2b00      	cmp	r3, #0
 8006574:	d010      	beq.n	8006598 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	695a      	ldr	r2, [r3, #20]
 800657a:	4b34      	ldr	r3, [pc, #208]	; (800664c <HAL_RCC_ClockConfig+0x358>)
 800657c:	69db      	ldr	r3, [r3, #28]
 800657e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006582:	429a      	cmp	r2, r3
 8006584:	d208      	bcs.n	8006598 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006586:	4b31      	ldr	r3, [pc, #196]	; (800664c <HAL_RCC_ClockConfig+0x358>)
 8006588:	69db      	ldr	r3, [r3, #28]
 800658a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	695b      	ldr	r3, [r3, #20]
 8006592:	492e      	ldr	r1, [pc, #184]	; (800664c <HAL_RCC_ClockConfig+0x358>)
 8006594:	4313      	orrs	r3, r2
 8006596:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f003 0310 	and.w	r3, r3, #16
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d010      	beq.n	80065c6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	699a      	ldr	r2, [r3, #24]
 80065a8:	4b28      	ldr	r3, [pc, #160]	; (800664c <HAL_RCC_ClockConfig+0x358>)
 80065aa:	69db      	ldr	r3, [r3, #28]
 80065ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80065b0:	429a      	cmp	r2, r3
 80065b2:	d208      	bcs.n	80065c6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80065b4:	4b25      	ldr	r3, [pc, #148]	; (800664c <HAL_RCC_ClockConfig+0x358>)
 80065b6:	69db      	ldr	r3, [r3, #28]
 80065b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	699b      	ldr	r3, [r3, #24]
 80065c0:	4922      	ldr	r1, [pc, #136]	; (800664c <HAL_RCC_ClockConfig+0x358>)
 80065c2:	4313      	orrs	r3, r2
 80065c4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f003 0320 	and.w	r3, r3, #32
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d010      	beq.n	80065f4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	69da      	ldr	r2, [r3, #28]
 80065d6:	4b1d      	ldr	r3, [pc, #116]	; (800664c <HAL_RCC_ClockConfig+0x358>)
 80065d8:	6a1b      	ldr	r3, [r3, #32]
 80065da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80065de:	429a      	cmp	r2, r3
 80065e0:	d208      	bcs.n	80065f4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80065e2:	4b1a      	ldr	r3, [pc, #104]	; (800664c <HAL_RCC_ClockConfig+0x358>)
 80065e4:	6a1b      	ldr	r3, [r3, #32]
 80065e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	69db      	ldr	r3, [r3, #28]
 80065ee:	4917      	ldr	r1, [pc, #92]	; (800664c <HAL_RCC_ClockConfig+0x358>)
 80065f0:	4313      	orrs	r3, r2
 80065f2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80065f4:	f000 f834 	bl	8006660 <HAL_RCC_GetSysClockFreq>
 80065f8:	4602      	mov	r2, r0
 80065fa:	4b14      	ldr	r3, [pc, #80]	; (800664c <HAL_RCC_ClockConfig+0x358>)
 80065fc:	699b      	ldr	r3, [r3, #24]
 80065fe:	0a1b      	lsrs	r3, r3, #8
 8006600:	f003 030f 	and.w	r3, r3, #15
 8006604:	4912      	ldr	r1, [pc, #72]	; (8006650 <HAL_RCC_ClockConfig+0x35c>)
 8006606:	5ccb      	ldrb	r3, [r1, r3]
 8006608:	f003 031f 	and.w	r3, r3, #31
 800660c:	fa22 f303 	lsr.w	r3, r2, r3
 8006610:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006612:	4b0e      	ldr	r3, [pc, #56]	; (800664c <HAL_RCC_ClockConfig+0x358>)
 8006614:	699b      	ldr	r3, [r3, #24]
 8006616:	f003 030f 	and.w	r3, r3, #15
 800661a:	4a0d      	ldr	r2, [pc, #52]	; (8006650 <HAL_RCC_ClockConfig+0x35c>)
 800661c:	5cd3      	ldrb	r3, [r2, r3]
 800661e:	f003 031f 	and.w	r3, r3, #31
 8006622:	693a      	ldr	r2, [r7, #16]
 8006624:	fa22 f303 	lsr.w	r3, r2, r3
 8006628:	4a0a      	ldr	r2, [pc, #40]	; (8006654 <HAL_RCC_ClockConfig+0x360>)
 800662a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800662c:	4a0a      	ldr	r2, [pc, #40]	; (8006658 <HAL_RCC_ClockConfig+0x364>)
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006632:	4b0a      	ldr	r3, [pc, #40]	; (800665c <HAL_RCC_ClockConfig+0x368>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4618      	mov	r0, r3
 8006638:	f7fb faf2 	bl	8001c20 <HAL_InitTick>
 800663c:	4603      	mov	r3, r0
 800663e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006640:	7bfb      	ldrb	r3, [r7, #15]
}
 8006642:	4618      	mov	r0, r3
 8006644:	3718      	adds	r7, #24
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}
 800664a:	bf00      	nop
 800664c:	58024400 	.word	0x58024400
 8006650:	0800c938 	.word	0x0800c938
 8006654:	24000414 	.word	0x24000414
 8006658:	24000410 	.word	0x24000410
 800665c:	24000408 	.word	0x24000408

08006660 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006660:	b480      	push	{r7}
 8006662:	b089      	sub	sp, #36	; 0x24
 8006664:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006666:	4bb3      	ldr	r3, [pc, #716]	; (8006934 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006668:	691b      	ldr	r3, [r3, #16]
 800666a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800666e:	2b18      	cmp	r3, #24
 8006670:	f200 8155 	bhi.w	800691e <HAL_RCC_GetSysClockFreq+0x2be>
 8006674:	a201      	add	r2, pc, #4	; (adr r2, 800667c <HAL_RCC_GetSysClockFreq+0x1c>)
 8006676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800667a:	bf00      	nop
 800667c:	080066e1 	.word	0x080066e1
 8006680:	0800691f 	.word	0x0800691f
 8006684:	0800691f 	.word	0x0800691f
 8006688:	0800691f 	.word	0x0800691f
 800668c:	0800691f 	.word	0x0800691f
 8006690:	0800691f 	.word	0x0800691f
 8006694:	0800691f 	.word	0x0800691f
 8006698:	0800691f 	.word	0x0800691f
 800669c:	08006707 	.word	0x08006707
 80066a0:	0800691f 	.word	0x0800691f
 80066a4:	0800691f 	.word	0x0800691f
 80066a8:	0800691f 	.word	0x0800691f
 80066ac:	0800691f 	.word	0x0800691f
 80066b0:	0800691f 	.word	0x0800691f
 80066b4:	0800691f 	.word	0x0800691f
 80066b8:	0800691f 	.word	0x0800691f
 80066bc:	0800670d 	.word	0x0800670d
 80066c0:	0800691f 	.word	0x0800691f
 80066c4:	0800691f 	.word	0x0800691f
 80066c8:	0800691f 	.word	0x0800691f
 80066cc:	0800691f 	.word	0x0800691f
 80066d0:	0800691f 	.word	0x0800691f
 80066d4:	0800691f 	.word	0x0800691f
 80066d8:	0800691f 	.word	0x0800691f
 80066dc:	08006713 	.word	0x08006713
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80066e0:	4b94      	ldr	r3, [pc, #592]	; (8006934 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f003 0320 	and.w	r3, r3, #32
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d009      	beq.n	8006700 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80066ec:	4b91      	ldr	r3, [pc, #580]	; (8006934 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	08db      	lsrs	r3, r3, #3
 80066f2:	f003 0303 	and.w	r3, r3, #3
 80066f6:	4a90      	ldr	r2, [pc, #576]	; (8006938 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80066f8:	fa22 f303 	lsr.w	r3, r2, r3
 80066fc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80066fe:	e111      	b.n	8006924 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006700:	4b8d      	ldr	r3, [pc, #564]	; (8006938 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006702:	61bb      	str	r3, [r7, #24]
    break;
 8006704:	e10e      	b.n	8006924 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006706:	4b8d      	ldr	r3, [pc, #564]	; (800693c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006708:	61bb      	str	r3, [r7, #24]
    break;
 800670a:	e10b      	b.n	8006924 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800670c:	4b8c      	ldr	r3, [pc, #560]	; (8006940 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800670e:	61bb      	str	r3, [r7, #24]
    break;
 8006710:	e108      	b.n	8006924 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006712:	4b88      	ldr	r3, [pc, #544]	; (8006934 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006716:	f003 0303 	and.w	r3, r3, #3
 800671a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800671c:	4b85      	ldr	r3, [pc, #532]	; (8006934 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800671e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006720:	091b      	lsrs	r3, r3, #4
 8006722:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006726:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006728:	4b82      	ldr	r3, [pc, #520]	; (8006934 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800672a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800672c:	f003 0301 	and.w	r3, r3, #1
 8006730:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006732:	4b80      	ldr	r3, [pc, #512]	; (8006934 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006736:	08db      	lsrs	r3, r3, #3
 8006738:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800673c:	68fa      	ldr	r2, [r7, #12]
 800673e:	fb02 f303 	mul.w	r3, r2, r3
 8006742:	ee07 3a90 	vmov	s15, r3
 8006746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800674a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	2b00      	cmp	r3, #0
 8006752:	f000 80e1 	beq.w	8006918 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	2b02      	cmp	r3, #2
 800675a:	f000 8083 	beq.w	8006864 <HAL_RCC_GetSysClockFreq+0x204>
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	2b02      	cmp	r3, #2
 8006762:	f200 80a1 	bhi.w	80068a8 <HAL_RCC_GetSysClockFreq+0x248>
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d003      	beq.n	8006774 <HAL_RCC_GetSysClockFreq+0x114>
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	2b01      	cmp	r3, #1
 8006770:	d056      	beq.n	8006820 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006772:	e099      	b.n	80068a8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006774:	4b6f      	ldr	r3, [pc, #444]	; (8006934 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f003 0320 	and.w	r3, r3, #32
 800677c:	2b00      	cmp	r3, #0
 800677e:	d02d      	beq.n	80067dc <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006780:	4b6c      	ldr	r3, [pc, #432]	; (8006934 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	08db      	lsrs	r3, r3, #3
 8006786:	f003 0303 	and.w	r3, r3, #3
 800678a:	4a6b      	ldr	r2, [pc, #428]	; (8006938 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800678c:	fa22 f303 	lsr.w	r3, r2, r3
 8006790:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	ee07 3a90 	vmov	s15, r3
 8006798:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	ee07 3a90 	vmov	s15, r3
 80067a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067aa:	4b62      	ldr	r3, [pc, #392]	; (8006934 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067b2:	ee07 3a90 	vmov	s15, r3
 80067b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80067be:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006944 <HAL_RCC_GetSysClockFreq+0x2e4>
 80067c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067d6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80067da:	e087      	b.n	80068ec <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	ee07 3a90 	vmov	s15, r3
 80067e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067e6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006948 <HAL_RCC_GetSysClockFreq+0x2e8>
 80067ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067ee:	4b51      	ldr	r3, [pc, #324]	; (8006934 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067f6:	ee07 3a90 	vmov	s15, r3
 80067fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8006802:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006944 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006806:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800680a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800680e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006812:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006816:	ee67 7a27 	vmul.f32	s15, s14, s15
 800681a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800681e:	e065      	b.n	80068ec <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	ee07 3a90 	vmov	s15, r3
 8006826:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800682a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800694c <HAL_RCC_GetSysClockFreq+0x2ec>
 800682e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006832:	4b40      	ldr	r3, [pc, #256]	; (8006934 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006836:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800683a:	ee07 3a90 	vmov	s15, r3
 800683e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006842:	ed97 6a02 	vldr	s12, [r7, #8]
 8006846:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006944 <HAL_RCC_GetSysClockFreq+0x2e4>
 800684a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800684e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006852:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006856:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800685a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800685e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006862:	e043      	b.n	80068ec <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	ee07 3a90 	vmov	s15, r3
 800686a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800686e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006950 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006872:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006876:	4b2f      	ldr	r3, [pc, #188]	; (8006934 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800687a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800687e:	ee07 3a90 	vmov	s15, r3
 8006882:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006886:	ed97 6a02 	vldr	s12, [r7, #8]
 800688a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006944 <HAL_RCC_GetSysClockFreq+0x2e4>
 800688e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006892:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006896:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800689a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800689e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80068a6:	e021      	b.n	80068ec <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	ee07 3a90 	vmov	s15, r3
 80068ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068b2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800694c <HAL_RCC_GetSysClockFreq+0x2ec>
 80068b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068ba:	4b1e      	ldr	r3, [pc, #120]	; (8006934 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068c2:	ee07 3a90 	vmov	s15, r3
 80068c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80068ce:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006944 <HAL_RCC_GetSysClockFreq+0x2e4>
 80068d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80068ea:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80068ec:	4b11      	ldr	r3, [pc, #68]	; (8006934 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068f0:	0a5b      	lsrs	r3, r3, #9
 80068f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068f6:	3301      	adds	r3, #1
 80068f8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	ee07 3a90 	vmov	s15, r3
 8006900:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006904:	edd7 6a07 	vldr	s13, [r7, #28]
 8006908:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800690c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006910:	ee17 3a90 	vmov	r3, s15
 8006914:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006916:	e005      	b.n	8006924 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006918:	2300      	movs	r3, #0
 800691a:	61bb      	str	r3, [r7, #24]
    break;
 800691c:	e002      	b.n	8006924 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800691e:	4b07      	ldr	r3, [pc, #28]	; (800693c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006920:	61bb      	str	r3, [r7, #24]
    break;
 8006922:	bf00      	nop
  }

  return sysclockfreq;
 8006924:	69bb      	ldr	r3, [r7, #24]
}
 8006926:	4618      	mov	r0, r3
 8006928:	3724      	adds	r7, #36	; 0x24
 800692a:	46bd      	mov	sp, r7
 800692c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006930:	4770      	bx	lr
 8006932:	bf00      	nop
 8006934:	58024400 	.word	0x58024400
 8006938:	03d09000 	.word	0x03d09000
 800693c:	003d0900 	.word	0x003d0900
 8006940:	017d7840 	.word	0x017d7840
 8006944:	46000000 	.word	0x46000000
 8006948:	4c742400 	.word	0x4c742400
 800694c:	4a742400 	.word	0x4a742400
 8006950:	4bbebc20 	.word	0x4bbebc20

08006954 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b082      	sub	sp, #8
 8006958:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800695a:	f7ff fe81 	bl	8006660 <HAL_RCC_GetSysClockFreq>
 800695e:	4602      	mov	r2, r0
 8006960:	4b10      	ldr	r3, [pc, #64]	; (80069a4 <HAL_RCC_GetHCLKFreq+0x50>)
 8006962:	699b      	ldr	r3, [r3, #24]
 8006964:	0a1b      	lsrs	r3, r3, #8
 8006966:	f003 030f 	and.w	r3, r3, #15
 800696a:	490f      	ldr	r1, [pc, #60]	; (80069a8 <HAL_RCC_GetHCLKFreq+0x54>)
 800696c:	5ccb      	ldrb	r3, [r1, r3]
 800696e:	f003 031f 	and.w	r3, r3, #31
 8006972:	fa22 f303 	lsr.w	r3, r2, r3
 8006976:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006978:	4b0a      	ldr	r3, [pc, #40]	; (80069a4 <HAL_RCC_GetHCLKFreq+0x50>)
 800697a:	699b      	ldr	r3, [r3, #24]
 800697c:	f003 030f 	and.w	r3, r3, #15
 8006980:	4a09      	ldr	r2, [pc, #36]	; (80069a8 <HAL_RCC_GetHCLKFreq+0x54>)
 8006982:	5cd3      	ldrb	r3, [r2, r3]
 8006984:	f003 031f 	and.w	r3, r3, #31
 8006988:	687a      	ldr	r2, [r7, #4]
 800698a:	fa22 f303 	lsr.w	r3, r2, r3
 800698e:	4a07      	ldr	r2, [pc, #28]	; (80069ac <HAL_RCC_GetHCLKFreq+0x58>)
 8006990:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006992:	4a07      	ldr	r2, [pc, #28]	; (80069b0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006998:	4b04      	ldr	r3, [pc, #16]	; (80069ac <HAL_RCC_GetHCLKFreq+0x58>)
 800699a:	681b      	ldr	r3, [r3, #0]
}
 800699c:	4618      	mov	r0, r3
 800699e:	3708      	adds	r7, #8
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}
 80069a4:	58024400 	.word	0x58024400
 80069a8:	0800c938 	.word	0x0800c938
 80069ac:	24000414 	.word	0x24000414
 80069b0:	24000410 	.word	0x24000410

080069b4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b086      	sub	sp, #24
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80069bc:	2300      	movs	r3, #0
 80069be:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80069c0:	2300      	movs	r3, #0
 80069c2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d03f      	beq.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069d4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80069d8:	d02a      	beq.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80069da:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80069de:	d824      	bhi.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80069e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80069e4:	d018      	beq.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80069e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80069ea:	d81e      	bhi.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d003      	beq.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80069f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069f4:	d007      	beq.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80069f6:	e018      	b.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069f8:	4bab      	ldr	r3, [pc, #684]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80069fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069fc:	4aaa      	ldr	r2, [pc, #680]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80069fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a02:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006a04:	e015      	b.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	3304      	adds	r3, #4
 8006a0a:	2102      	movs	r1, #2
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f002 f84d 	bl	8008aac <RCCEx_PLL2_Config>
 8006a12:	4603      	mov	r3, r0
 8006a14:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006a16:	e00c      	b.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	3324      	adds	r3, #36	; 0x24
 8006a1c:	2102      	movs	r1, #2
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f002 f8f6 	bl	8008c10 <RCCEx_PLL3_Config>
 8006a24:	4603      	mov	r3, r0
 8006a26:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006a28:	e003      	b.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	75fb      	strb	r3, [r7, #23]
      break;
 8006a2e:	e000      	b.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006a30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a32:	7dfb      	ldrb	r3, [r7, #23]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d109      	bne.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006a38:	4b9b      	ldr	r3, [pc, #620]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006a3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a3c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a44:	4998      	ldr	r1, [pc, #608]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006a46:	4313      	orrs	r3, r2
 8006a48:	650b      	str	r3, [r1, #80]	; 0x50
 8006a4a:	e001      	b.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a4c:	7dfb      	ldrb	r3, [r7, #23]
 8006a4e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d03d      	beq.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a60:	2b04      	cmp	r3, #4
 8006a62:	d826      	bhi.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006a64:	a201      	add	r2, pc, #4	; (adr r2, 8006a6c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8006a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a6a:	bf00      	nop
 8006a6c:	08006a81 	.word	0x08006a81
 8006a70:	08006a8f 	.word	0x08006a8f
 8006a74:	08006aa1 	.word	0x08006aa1
 8006a78:	08006ab9 	.word	0x08006ab9
 8006a7c:	08006ab9 	.word	0x08006ab9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a80:	4b89      	ldr	r3, [pc, #548]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a84:	4a88      	ldr	r2, [pc, #544]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006a86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a8a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006a8c:	e015      	b.n	8006aba <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	3304      	adds	r3, #4
 8006a92:	2100      	movs	r1, #0
 8006a94:	4618      	mov	r0, r3
 8006a96:	f002 f809 	bl	8008aac <RCCEx_PLL2_Config>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006a9e:	e00c      	b.n	8006aba <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	3324      	adds	r3, #36	; 0x24
 8006aa4:	2100      	movs	r1, #0
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f002 f8b2 	bl	8008c10 <RCCEx_PLL3_Config>
 8006aac:	4603      	mov	r3, r0
 8006aae:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006ab0:	e003      	b.n	8006aba <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	75fb      	strb	r3, [r7, #23]
      break;
 8006ab6:	e000      	b.n	8006aba <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006ab8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006aba:	7dfb      	ldrb	r3, [r7, #23]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d109      	bne.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006ac0:	4b79      	ldr	r3, [pc, #484]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006ac2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ac4:	f023 0207 	bic.w	r2, r3, #7
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006acc:	4976      	ldr	r1, [pc, #472]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	650b      	str	r3, [r1, #80]	; 0x50
 8006ad2:	e001      	b.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ad4:	7dfb      	ldrb	r3, [r7, #23]
 8006ad6:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d051      	beq.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006aea:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8006aee:	d036      	beq.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006af0:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8006af4:	d830      	bhi.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8006af6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006afa:	d032      	beq.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8006afc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006b00:	d82a      	bhi.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8006b02:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006b06:	d02e      	beq.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8006b08:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006b0c:	d824      	bhi.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8006b0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b12:	d018      	beq.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8006b14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b18:	d81e      	bhi.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d003      	beq.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0x172>
 8006b1e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b22:	d007      	beq.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8006b24:	e018      	b.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b26:	4b60      	ldr	r3, [pc, #384]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b2a:	4a5f      	ldr	r2, [pc, #380]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006b2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b30:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006b32:	e019      	b.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	3304      	adds	r3, #4
 8006b38:	2100      	movs	r1, #0
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f001 ffb6 	bl	8008aac <RCCEx_PLL2_Config>
 8006b40:	4603      	mov	r3, r0
 8006b42:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006b44:	e010      	b.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	3324      	adds	r3, #36	; 0x24
 8006b4a:	2100      	movs	r1, #0
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f002 f85f 	bl	8008c10 <RCCEx_PLL3_Config>
 8006b52:	4603      	mov	r3, r0
 8006b54:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006b56:	e007      	b.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	75fb      	strb	r3, [r7, #23]
      break;
 8006b5c:	e004      	b.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8006b5e:	bf00      	nop
 8006b60:	e002      	b.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8006b62:	bf00      	nop
 8006b64:	e000      	b.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8006b66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b68:	7dfb      	ldrb	r3, [r7, #23]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d10a      	bne.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006b6e:	4b4e      	ldr	r3, [pc, #312]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b72:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006b7c:	494a      	ldr	r1, [pc, #296]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	658b      	str	r3, [r1, #88]	; 0x58
 8006b82:	e001      	b.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b84:	7dfb      	ldrb	r3, [r7, #23]
 8006b86:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d051      	beq.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006b9a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006b9e:	d036      	beq.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8006ba0:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006ba4:	d830      	bhi.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8006ba6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006baa:	d032      	beq.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8006bac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006bb0:	d82a      	bhi.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8006bb2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006bb6:	d02e      	beq.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8006bb8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006bbc:	d824      	bhi.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8006bbe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006bc2:	d018      	beq.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8006bc4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006bc8:	d81e      	bhi.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d003      	beq.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8006bce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006bd2:	d007      	beq.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8006bd4:	e018      	b.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bd6:	4b34      	ldr	r3, [pc, #208]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bda:	4a33      	ldr	r2, [pc, #204]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006bdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006be0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006be2:	e019      	b.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	3304      	adds	r3, #4
 8006be8:	2100      	movs	r1, #0
 8006bea:	4618      	mov	r0, r3
 8006bec:	f001 ff5e 	bl	8008aac <RCCEx_PLL2_Config>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006bf4:	e010      	b.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	3324      	adds	r3, #36	; 0x24
 8006bfa:	2100      	movs	r1, #0
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f002 f807 	bl	8008c10 <RCCEx_PLL3_Config>
 8006c02:	4603      	mov	r3, r0
 8006c04:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006c06:	e007      	b.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	75fb      	strb	r3, [r7, #23]
      break;
 8006c0c:	e004      	b.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8006c0e:	bf00      	nop
 8006c10:	e002      	b.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8006c12:	bf00      	nop
 8006c14:	e000      	b.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8006c16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c18:	7dfb      	ldrb	r3, [r7, #23]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d10a      	bne.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006c1e:	4b22      	ldr	r3, [pc, #136]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c22:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006c2c:	491e      	ldr	r1, [pc, #120]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	658b      	str	r3, [r1, #88]	; 0x58
 8006c32:	e001      	b.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c34:	7dfb      	ldrb	r3, [r7, #23]
 8006c36:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d035      	beq.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c48:	2b30      	cmp	r3, #48	; 0x30
 8006c4a:	d01c      	beq.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006c4c:	2b30      	cmp	r3, #48	; 0x30
 8006c4e:	d817      	bhi.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8006c50:	2b20      	cmp	r3, #32
 8006c52:	d00c      	beq.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8006c54:	2b20      	cmp	r3, #32
 8006c56:	d813      	bhi.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d016      	beq.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8006c5c:	2b10      	cmp	r3, #16
 8006c5e:	d10f      	bne.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c60:	4b11      	ldr	r3, [pc, #68]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c64:	4a10      	ldr	r2, [pc, #64]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006c66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c6a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8006c6c:	e00e      	b.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	3304      	adds	r3, #4
 8006c72:	2102      	movs	r1, #2
 8006c74:	4618      	mov	r0, r3
 8006c76:	f001 ff19 	bl	8008aac <RCCEx_PLL2_Config>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8006c7e:	e005      	b.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006c80:	2301      	movs	r3, #1
 8006c82:	75fb      	strb	r3, [r7, #23]
      break;
 8006c84:	e002      	b.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8006c86:	bf00      	nop
 8006c88:	e000      	b.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8006c8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c8c:	7dfb      	ldrb	r3, [r7, #23]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d10c      	bne.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006c92:	4b05      	ldr	r3, [pc, #20]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c96:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c9e:	4902      	ldr	r1, [pc, #8]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006ca4:	e004      	b.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8006ca6:	bf00      	nop
 8006ca8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cac:	7dfb      	ldrb	r3, [r7, #23]
 8006cae:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d047      	beq.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cc0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006cc4:	d030      	beq.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8006cc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006cca:	d82a      	bhi.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8006ccc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006cd0:	d02c      	beq.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x378>
 8006cd2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006cd6:	d824      	bhi.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8006cd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cdc:	d018      	beq.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006cde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ce2:	d81e      	bhi.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d003      	beq.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006ce8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cec:	d007      	beq.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006cee:	e018      	b.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cf0:	4bac      	ldr	r3, [pc, #688]	; (8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf4:	4aab      	ldr	r2, [pc, #684]	; (8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006cf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cfa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006cfc:	e017      	b.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	3304      	adds	r3, #4
 8006d02:	2100      	movs	r1, #0
 8006d04:	4618      	mov	r0, r3
 8006d06:	f001 fed1 	bl	8008aac <RCCEx_PLL2_Config>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006d0e:	e00e      	b.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	3324      	adds	r3, #36	; 0x24
 8006d14:	2100      	movs	r1, #0
 8006d16:	4618      	mov	r0, r3
 8006d18:	f001 ff7a 	bl	8008c10 <RCCEx_PLL3_Config>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006d20:	e005      	b.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d22:	2301      	movs	r3, #1
 8006d24:	75fb      	strb	r3, [r7, #23]
      break;
 8006d26:	e002      	b.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8006d28:	bf00      	nop
 8006d2a:	e000      	b.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8006d2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d2e:	7dfb      	ldrb	r3, [r7, #23]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d109      	bne.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006d34:	4b9b      	ldr	r3, [pc, #620]	; (8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006d36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d38:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d40:	4998      	ldr	r1, [pc, #608]	; (8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006d42:	4313      	orrs	r3, r2
 8006d44:	650b      	str	r3, [r1, #80]	; 0x50
 8006d46:	e001      	b.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d48:	7dfb      	ldrb	r3, [r7, #23]
 8006d4a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d049      	beq.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d60:	d02e      	beq.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8006d62:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d66:	d828      	bhi.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0x406>
 8006d68:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006d6c:	d02a      	beq.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8006d6e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006d72:	d822      	bhi.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0x406>
 8006d74:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006d78:	d026      	beq.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8006d7a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006d7e:	d81c      	bhi.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0x406>
 8006d80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d84:	d010      	beq.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8006d86:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d8a:	d816      	bhi.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0x406>
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d01d      	beq.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x418>
 8006d90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d94:	d111      	bne.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	3304      	adds	r3, #4
 8006d9a:	2101      	movs	r1, #1
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f001 fe85 	bl	8008aac <RCCEx_PLL2_Config>
 8006da2:	4603      	mov	r3, r0
 8006da4:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006da6:	e012      	b.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	3324      	adds	r3, #36	; 0x24
 8006dac:	2101      	movs	r1, #1
 8006dae:	4618      	mov	r0, r3
 8006db0:	f001 ff2e 	bl	8008c10 <RCCEx_PLL3_Config>
 8006db4:	4603      	mov	r3, r0
 8006db6:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006db8:	e009      	b.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006dba:	2301      	movs	r3, #1
 8006dbc:	75fb      	strb	r3, [r7, #23]
      break;
 8006dbe:	e006      	b.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8006dc0:	bf00      	nop
 8006dc2:	e004      	b.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8006dc4:	bf00      	nop
 8006dc6:	e002      	b.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8006dc8:	bf00      	nop
 8006dca:	e000      	b.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8006dcc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006dce:	7dfb      	ldrb	r3, [r7, #23]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d109      	bne.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006dd4:	4b73      	ldr	r3, [pc, #460]	; (8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006dd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dd8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006de0:	4970      	ldr	r1, [pc, #448]	; (8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006de2:	4313      	orrs	r3, r2
 8006de4:	650b      	str	r3, [r1, #80]	; 0x50
 8006de6:	e001      	b.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006de8:	7dfb      	ldrb	r3, [r7, #23]
 8006dea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d04b      	beq.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006dfe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006e02:	d02e      	beq.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8006e04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006e08:	d828      	bhi.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e0e:	d02a      	beq.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8006e10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e14:	d822      	bhi.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006e16:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006e1a:	d026      	beq.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8006e1c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006e20:	d81c      	bhi.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006e22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e26:	d010      	beq.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0x496>
 8006e28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e2c:	d816      	bhi.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d01d      	beq.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8006e32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e36:	d111      	bne.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	3304      	adds	r3, #4
 8006e3c:	2101      	movs	r1, #1
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f001 fe34 	bl	8008aac <RCCEx_PLL2_Config>
 8006e44:	4603      	mov	r3, r0
 8006e46:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006e48:	e012      	b.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	3324      	adds	r3, #36	; 0x24
 8006e4e:	2101      	movs	r1, #1
 8006e50:	4618      	mov	r0, r3
 8006e52:	f001 fedd 	bl	8008c10 <RCCEx_PLL3_Config>
 8006e56:	4603      	mov	r3, r0
 8006e58:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006e5a:	e009      	b.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	75fb      	strb	r3, [r7, #23]
      break;
 8006e60:	e006      	b.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8006e62:	bf00      	nop
 8006e64:	e004      	b.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8006e66:	bf00      	nop
 8006e68:	e002      	b.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8006e6a:	bf00      	nop
 8006e6c:	e000      	b.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8006e6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e70:	7dfb      	ldrb	r3, [r7, #23]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d10a      	bne.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006e76:	4b4b      	ldr	r3, [pc, #300]	; (8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e7a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006e84:	4947      	ldr	r1, [pc, #284]	; (8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006e86:	4313      	orrs	r3, r2
 8006e88:	658b      	str	r3, [r1, #88]	; 0x58
 8006e8a:	e001      	b.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e8c:	7dfb      	ldrb	r3, [r7, #23]
 8006e8e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d02f      	beq.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ea0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ea4:	d00e      	beq.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8006ea6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006eaa:	d814      	bhi.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d015      	beq.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x528>
 8006eb0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006eb4:	d10f      	bne.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006eb6:	4b3b      	ldr	r3, [pc, #236]	; (8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eba:	4a3a      	ldr	r2, [pc, #232]	; (8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006ebc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ec0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006ec2:	e00c      	b.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	3304      	adds	r3, #4
 8006ec8:	2101      	movs	r1, #1
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f001 fdee 	bl	8008aac <RCCEx_PLL2_Config>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006ed4:	e003      	b.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	75fb      	strb	r3, [r7, #23]
      break;
 8006eda:	e000      	b.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8006edc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ede:	7dfb      	ldrb	r3, [r7, #23]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d109      	bne.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006ee4:	4b2f      	ldr	r3, [pc, #188]	; (8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006ee6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ee8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ef0:	492c      	ldr	r1, [pc, #176]	; (8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	650b      	str	r3, [r1, #80]	; 0x50
 8006ef6:	e001      	b.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ef8:	7dfb      	ldrb	r3, [r7, #23]
 8006efa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d032      	beq.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f0c:	2b03      	cmp	r3, #3
 8006f0e:	d81b      	bhi.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8006f10:	a201      	add	r2, pc, #4	; (adr r2, 8006f18 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8006f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f16:	bf00      	nop
 8006f18:	08006f4f 	.word	0x08006f4f
 8006f1c:	08006f29 	.word	0x08006f29
 8006f20:	08006f37 	.word	0x08006f37
 8006f24:	08006f4f 	.word	0x08006f4f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f28:	4b1e      	ldr	r3, [pc, #120]	; (8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f2c:	4a1d      	ldr	r2, [pc, #116]	; (8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006f2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f32:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006f34:	e00c      	b.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	3304      	adds	r3, #4
 8006f3a:	2102      	movs	r1, #2
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f001 fdb5 	bl	8008aac <RCCEx_PLL2_Config>
 8006f42:	4603      	mov	r3, r0
 8006f44:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006f46:	e003      	b.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	75fb      	strb	r3, [r7, #23]
      break;
 8006f4c:	e000      	b.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8006f4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f50:	7dfb      	ldrb	r3, [r7, #23]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d109      	bne.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006f56:	4b13      	ldr	r3, [pc, #76]	; (8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f5a:	f023 0203 	bic.w	r2, r3, #3
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f62:	4910      	ldr	r1, [pc, #64]	; (8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006f64:	4313      	orrs	r3, r2
 8006f66:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006f68:	e001      	b.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f6a:	7dfb      	ldrb	r3, [r7, #23]
 8006f6c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	f000 808a 	beq.w	8007090 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006f7c:	4b0a      	ldr	r3, [pc, #40]	; (8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a09      	ldr	r2, [pc, #36]	; (8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8006f82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f86:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006f88:	f7fa fe94 	bl	8001cb4 <HAL_GetTick>
 8006f8c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f8e:	e00d      	b.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f90:	f7fa fe90 	bl	8001cb4 <HAL_GetTick>
 8006f94:	4602      	mov	r2, r0
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	1ad3      	subs	r3, r2, r3
 8006f9a:	2b64      	cmp	r3, #100	; 0x64
 8006f9c:	d906      	bls.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 8006f9e:	2303      	movs	r3, #3
 8006fa0:	75fb      	strb	r3, [r7, #23]
        break;
 8006fa2:	e009      	b.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8006fa4:	58024400 	.word	0x58024400
 8006fa8:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006fac:	4bb9      	ldr	r3, [pc, #740]	; (8007294 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d0eb      	beq.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8006fb8:	7dfb      	ldrb	r3, [r7, #23]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d166      	bne.n	800708c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006fbe:	4bb6      	ldr	r3, [pc, #728]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006fc0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006fc8:	4053      	eors	r3, r2
 8006fca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d013      	beq.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006fd2:	4bb1      	ldr	r3, [pc, #708]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fda:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006fdc:	4bae      	ldr	r3, [pc, #696]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fe0:	4aad      	ldr	r2, [pc, #692]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006fe2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fe6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006fe8:	4bab      	ldr	r3, [pc, #684]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fec:	4aaa      	ldr	r2, [pc, #680]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006fee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ff2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006ff4:	4aa8      	ldr	r2, [pc, #672]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007000:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007004:	d115      	bne.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007006:	f7fa fe55 	bl	8001cb4 <HAL_GetTick>
 800700a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800700c:	e00b      	b.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800700e:	f7fa fe51 	bl	8001cb4 <HAL_GetTick>
 8007012:	4602      	mov	r2, r0
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	1ad3      	subs	r3, r2, r3
 8007018:	f241 3288 	movw	r2, #5000	; 0x1388
 800701c:	4293      	cmp	r3, r2
 800701e:	d902      	bls.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8007020:	2303      	movs	r3, #3
 8007022:	75fb      	strb	r3, [r7, #23]
            break;
 8007024:	e005      	b.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007026:	4b9c      	ldr	r3, [pc, #624]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800702a:	f003 0302 	and.w	r3, r3, #2
 800702e:	2b00      	cmp	r3, #0
 8007030:	d0ed      	beq.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 8007032:	7dfb      	ldrb	r3, [r7, #23]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d126      	bne.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800703e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007042:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007046:	d10d      	bne.n	8007064 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8007048:	4b93      	ldr	r3, [pc, #588]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800704a:	691b      	ldr	r3, [r3, #16]
 800704c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007056:	0919      	lsrs	r1, r3, #4
 8007058:	4b90      	ldr	r3, [pc, #576]	; (800729c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800705a:	400b      	ands	r3, r1
 800705c:	498e      	ldr	r1, [pc, #568]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800705e:	4313      	orrs	r3, r2
 8007060:	610b      	str	r3, [r1, #16]
 8007062:	e005      	b.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 8007064:	4b8c      	ldr	r3, [pc, #560]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007066:	691b      	ldr	r3, [r3, #16]
 8007068:	4a8b      	ldr	r2, [pc, #556]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800706a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800706e:	6113      	str	r3, [r2, #16]
 8007070:	4b89      	ldr	r3, [pc, #548]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007072:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800707a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800707e:	4986      	ldr	r1, [pc, #536]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007080:	4313      	orrs	r3, r2
 8007082:	670b      	str	r3, [r1, #112]	; 0x70
 8007084:	e004      	b.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007086:	7dfb      	ldrb	r3, [r7, #23]
 8007088:	75bb      	strb	r3, [r7, #22]
 800708a:	e001      	b.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800708c:	7dfb      	ldrb	r3, [r7, #23]
 800708e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f003 0301 	and.w	r3, r3, #1
 8007098:	2b00      	cmp	r3, #0
 800709a:	d07e      	beq.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070a0:	2b28      	cmp	r3, #40	; 0x28
 80070a2:	d867      	bhi.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 80070a4:	a201      	add	r2, pc, #4	; (adr r2, 80070ac <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 80070a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070aa:	bf00      	nop
 80070ac:	0800717b 	.word	0x0800717b
 80070b0:	08007175 	.word	0x08007175
 80070b4:	08007175 	.word	0x08007175
 80070b8:	08007175 	.word	0x08007175
 80070bc:	08007175 	.word	0x08007175
 80070c0:	08007175 	.word	0x08007175
 80070c4:	08007175 	.word	0x08007175
 80070c8:	08007175 	.word	0x08007175
 80070cc:	08007151 	.word	0x08007151
 80070d0:	08007175 	.word	0x08007175
 80070d4:	08007175 	.word	0x08007175
 80070d8:	08007175 	.word	0x08007175
 80070dc:	08007175 	.word	0x08007175
 80070e0:	08007175 	.word	0x08007175
 80070e4:	08007175 	.word	0x08007175
 80070e8:	08007175 	.word	0x08007175
 80070ec:	08007163 	.word	0x08007163
 80070f0:	08007175 	.word	0x08007175
 80070f4:	08007175 	.word	0x08007175
 80070f8:	08007175 	.word	0x08007175
 80070fc:	08007175 	.word	0x08007175
 8007100:	08007175 	.word	0x08007175
 8007104:	08007175 	.word	0x08007175
 8007108:	08007175 	.word	0x08007175
 800710c:	0800717b 	.word	0x0800717b
 8007110:	08007175 	.word	0x08007175
 8007114:	08007175 	.word	0x08007175
 8007118:	08007175 	.word	0x08007175
 800711c:	08007175 	.word	0x08007175
 8007120:	08007175 	.word	0x08007175
 8007124:	08007175 	.word	0x08007175
 8007128:	08007175 	.word	0x08007175
 800712c:	0800717b 	.word	0x0800717b
 8007130:	08007175 	.word	0x08007175
 8007134:	08007175 	.word	0x08007175
 8007138:	08007175 	.word	0x08007175
 800713c:	08007175 	.word	0x08007175
 8007140:	08007175 	.word	0x08007175
 8007144:	08007175 	.word	0x08007175
 8007148:	08007175 	.word	0x08007175
 800714c:	0800717b 	.word	0x0800717b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	3304      	adds	r3, #4
 8007154:	2101      	movs	r1, #1
 8007156:	4618      	mov	r0, r3
 8007158:	f001 fca8 	bl	8008aac <RCCEx_PLL2_Config>
 800715c:	4603      	mov	r3, r0
 800715e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007160:	e00c      	b.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	3324      	adds	r3, #36	; 0x24
 8007166:	2101      	movs	r1, #1
 8007168:	4618      	mov	r0, r3
 800716a:	f001 fd51 	bl	8008c10 <RCCEx_PLL3_Config>
 800716e:	4603      	mov	r3, r0
 8007170:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007172:	e003      	b.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007174:	2301      	movs	r3, #1
 8007176:	75fb      	strb	r3, [r7, #23]
      break;
 8007178:	e000      	b.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 800717a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800717c:	7dfb      	ldrb	r3, [r7, #23]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d109      	bne.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007182:	4b45      	ldr	r3, [pc, #276]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007186:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800718e:	4942      	ldr	r1, [pc, #264]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007190:	4313      	orrs	r3, r2
 8007192:	654b      	str	r3, [r1, #84]	; 0x54
 8007194:	e001      	b.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007196:	7dfb      	ldrb	r3, [r7, #23]
 8007198:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f003 0302 	and.w	r3, r3, #2
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d037      	beq.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071aa:	2b05      	cmp	r3, #5
 80071ac:	d820      	bhi.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 80071ae:	a201      	add	r2, pc, #4	; (adr r2, 80071b4 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 80071b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071b4:	080071f7 	.word	0x080071f7
 80071b8:	080071cd 	.word	0x080071cd
 80071bc:	080071df 	.word	0x080071df
 80071c0:	080071f7 	.word	0x080071f7
 80071c4:	080071f7 	.word	0x080071f7
 80071c8:	080071f7 	.word	0x080071f7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	3304      	adds	r3, #4
 80071d0:	2101      	movs	r1, #1
 80071d2:	4618      	mov	r0, r3
 80071d4:	f001 fc6a 	bl	8008aac <RCCEx_PLL2_Config>
 80071d8:	4603      	mov	r3, r0
 80071da:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80071dc:	e00c      	b.n	80071f8 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	3324      	adds	r3, #36	; 0x24
 80071e2:	2101      	movs	r1, #1
 80071e4:	4618      	mov	r0, r3
 80071e6:	f001 fd13 	bl	8008c10 <RCCEx_PLL3_Config>
 80071ea:	4603      	mov	r3, r0
 80071ec:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80071ee:	e003      	b.n	80071f8 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80071f0:	2301      	movs	r3, #1
 80071f2:	75fb      	strb	r3, [r7, #23]
      break;
 80071f4:	e000      	b.n	80071f8 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 80071f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071f8:	7dfb      	ldrb	r3, [r7, #23]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d109      	bne.n	8007212 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80071fe:	4b26      	ldr	r3, [pc, #152]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007202:	f023 0207 	bic.w	r2, r3, #7
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800720a:	4923      	ldr	r1, [pc, #140]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800720c:	4313      	orrs	r3, r2
 800720e:	654b      	str	r3, [r1, #84]	; 0x54
 8007210:	e001      	b.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007212:	7dfb      	ldrb	r3, [r7, #23]
 8007214:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f003 0304 	and.w	r3, r3, #4
 800721e:	2b00      	cmp	r3, #0
 8007220:	d040      	beq.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007228:	2b05      	cmp	r3, #5
 800722a:	d821      	bhi.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 800722c:	a201      	add	r2, pc, #4	; (adr r2, 8007234 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 800722e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007232:	bf00      	nop
 8007234:	08007277 	.word	0x08007277
 8007238:	0800724d 	.word	0x0800724d
 800723c:	0800725f 	.word	0x0800725f
 8007240:	08007277 	.word	0x08007277
 8007244:	08007277 	.word	0x08007277
 8007248:	08007277 	.word	0x08007277
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	3304      	adds	r3, #4
 8007250:	2101      	movs	r1, #1
 8007252:	4618      	mov	r0, r3
 8007254:	f001 fc2a 	bl	8008aac <RCCEx_PLL2_Config>
 8007258:	4603      	mov	r3, r0
 800725a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800725c:	e00c      	b.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	3324      	adds	r3, #36	; 0x24
 8007262:	2101      	movs	r1, #1
 8007264:	4618      	mov	r0, r3
 8007266:	f001 fcd3 	bl	8008c10 <RCCEx_PLL3_Config>
 800726a:	4603      	mov	r3, r0
 800726c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800726e:	e003      	b.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007270:	2301      	movs	r3, #1
 8007272:	75fb      	strb	r3, [r7, #23]
      break;
 8007274:	e000      	b.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8007276:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007278:	7dfb      	ldrb	r3, [r7, #23]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d110      	bne.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800727e:	4b06      	ldr	r3, [pc, #24]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007282:	f023 0207 	bic.w	r2, r3, #7
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800728c:	4902      	ldr	r1, [pc, #8]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800728e:	4313      	orrs	r3, r2
 8007290:	658b      	str	r3, [r1, #88]	; 0x58
 8007292:	e007      	b.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8007294:	58024800 	.word	0x58024800
 8007298:	58024400 	.word	0x58024400
 800729c:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072a0:	7dfb      	ldrb	r3, [r7, #23]
 80072a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f003 0320 	and.w	r3, r3, #32
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d04b      	beq.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80072ba:	d02e      	beq.n	800731a <HAL_RCCEx_PeriphCLKConfig+0x966>
 80072bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80072c0:	d828      	bhi.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80072c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072c6:	d02a      	beq.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80072c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072cc:	d822      	bhi.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80072ce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80072d2:	d026      	beq.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80072d4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80072d8:	d81c      	bhi.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80072da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072de:	d010      	beq.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 80072e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072e4:	d816      	bhi.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d01d      	beq.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x972>
 80072ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80072ee:	d111      	bne.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	3304      	adds	r3, #4
 80072f4:	2100      	movs	r1, #0
 80072f6:	4618      	mov	r0, r3
 80072f8:	f001 fbd8 	bl	8008aac <RCCEx_PLL2_Config>
 80072fc:	4603      	mov	r3, r0
 80072fe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007300:	e012      	b.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	3324      	adds	r3, #36	; 0x24
 8007306:	2102      	movs	r1, #2
 8007308:	4618      	mov	r0, r3
 800730a:	f001 fc81 	bl	8008c10 <RCCEx_PLL3_Config>
 800730e:	4603      	mov	r3, r0
 8007310:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007312:	e009      	b.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007314:	2301      	movs	r3, #1
 8007316:	75fb      	strb	r3, [r7, #23]
      break;
 8007318:	e006      	b.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800731a:	bf00      	nop
 800731c:	e004      	b.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800731e:	bf00      	nop
 8007320:	e002      	b.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8007322:	bf00      	nop
 8007324:	e000      	b.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8007326:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007328:	7dfb      	ldrb	r3, [r7, #23]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d10a      	bne.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800732e:	4bb2      	ldr	r3, [pc, #712]	; (80075f8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007332:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800733c:	49ae      	ldr	r1, [pc, #696]	; (80075f8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800733e:	4313      	orrs	r3, r2
 8007340:	654b      	str	r3, [r1, #84]	; 0x54
 8007342:	e001      	b.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007344:	7dfb      	ldrb	r3, [r7, #23]
 8007346:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007350:	2b00      	cmp	r3, #0
 8007352:	d04b      	beq.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800735a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800735e:	d02e      	beq.n	80073be <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8007360:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007364:	d828      	bhi.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8007366:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800736a:	d02a      	beq.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800736c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007370:	d822      	bhi.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8007372:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007376:	d026      	beq.n	80073c6 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8007378:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800737c:	d81c      	bhi.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800737e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007382:	d010      	beq.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8007384:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007388:	d816      	bhi.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800738a:	2b00      	cmp	r3, #0
 800738c:	d01d      	beq.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800738e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007392:	d111      	bne.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	3304      	adds	r3, #4
 8007398:	2100      	movs	r1, #0
 800739a:	4618      	mov	r0, r3
 800739c:	f001 fb86 	bl	8008aac <RCCEx_PLL2_Config>
 80073a0:	4603      	mov	r3, r0
 80073a2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80073a4:	e012      	b.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	3324      	adds	r3, #36	; 0x24
 80073aa:	2102      	movs	r1, #2
 80073ac:	4618      	mov	r0, r3
 80073ae:	f001 fc2f 	bl	8008c10 <RCCEx_PLL3_Config>
 80073b2:	4603      	mov	r3, r0
 80073b4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80073b6:	e009      	b.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80073b8:	2301      	movs	r3, #1
 80073ba:	75fb      	strb	r3, [r7, #23]
      break;
 80073bc:	e006      	b.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80073be:	bf00      	nop
 80073c0:	e004      	b.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80073c2:	bf00      	nop
 80073c4:	e002      	b.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80073c6:	bf00      	nop
 80073c8:	e000      	b.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80073ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80073cc:	7dfb      	ldrb	r3, [r7, #23]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d10a      	bne.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80073d2:	4b89      	ldr	r3, [pc, #548]	; (80075f8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80073d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073d6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80073e0:	4985      	ldr	r1, [pc, #532]	; (80075f8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80073e2:	4313      	orrs	r3, r2
 80073e4:	658b      	str	r3, [r1, #88]	; 0x58
 80073e6:	e001      	b.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073e8:	7dfb      	ldrb	r3, [r7, #23]
 80073ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d04b      	beq.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80073fe:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007402:	d02e      	beq.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8007404:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007408:	d828      	bhi.n	800745c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800740a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800740e:	d02a      	beq.n	8007466 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8007410:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007414:	d822      	bhi.n	800745c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8007416:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800741a:	d026      	beq.n	800746a <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800741c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007420:	d81c      	bhi.n	800745c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8007422:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007426:	d010      	beq.n	800744a <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8007428:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800742c:	d816      	bhi.n	800745c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800742e:	2b00      	cmp	r3, #0
 8007430:	d01d      	beq.n	800746e <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8007432:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007436:	d111      	bne.n	800745c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	3304      	adds	r3, #4
 800743c:	2100      	movs	r1, #0
 800743e:	4618      	mov	r0, r3
 8007440:	f001 fb34 	bl	8008aac <RCCEx_PLL2_Config>
 8007444:	4603      	mov	r3, r0
 8007446:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007448:	e012      	b.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	3324      	adds	r3, #36	; 0x24
 800744e:	2102      	movs	r1, #2
 8007450:	4618      	mov	r0, r3
 8007452:	f001 fbdd 	bl	8008c10 <RCCEx_PLL3_Config>
 8007456:	4603      	mov	r3, r0
 8007458:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800745a:	e009      	b.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800745c:	2301      	movs	r3, #1
 800745e:	75fb      	strb	r3, [r7, #23]
      break;
 8007460:	e006      	b.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8007462:	bf00      	nop
 8007464:	e004      	b.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8007466:	bf00      	nop
 8007468:	e002      	b.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800746a:	bf00      	nop
 800746c:	e000      	b.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800746e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007470:	7dfb      	ldrb	r3, [r7, #23]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d10a      	bne.n	800748c <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007476:	4b60      	ldr	r3, [pc, #384]	; (80075f8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800747a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007484:	495c      	ldr	r1, [pc, #368]	; (80075f8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007486:	4313      	orrs	r3, r2
 8007488:	658b      	str	r3, [r1, #88]	; 0x58
 800748a:	e001      	b.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800748c:	7dfb      	ldrb	r3, [r7, #23]
 800748e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f003 0308 	and.w	r3, r3, #8
 8007498:	2b00      	cmp	r3, #0
 800749a:	d018      	beq.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074a4:	d10a      	bne.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	3324      	adds	r3, #36	; 0x24
 80074aa:	2102      	movs	r1, #2
 80074ac:	4618      	mov	r0, r3
 80074ae:	f001 fbaf 	bl	8008c10 <RCCEx_PLL3_Config>
 80074b2:	4603      	mov	r3, r0
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d001      	beq.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 80074b8:	2301      	movs	r3, #1
 80074ba:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80074bc:	4b4e      	ldr	r3, [pc, #312]	; (80075f8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80074be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074c0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074c8:	494b      	ldr	r1, [pc, #300]	; (80075f8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80074ca:	4313      	orrs	r3, r2
 80074cc:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f003 0310 	and.w	r3, r3, #16
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d01a      	beq.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074e4:	d10a      	bne.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	3324      	adds	r3, #36	; 0x24
 80074ea:	2102      	movs	r1, #2
 80074ec:	4618      	mov	r0, r3
 80074ee:	f001 fb8f 	bl	8008c10 <RCCEx_PLL3_Config>
 80074f2:	4603      	mov	r3, r0
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d001      	beq.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 80074f8:	2301      	movs	r3, #1
 80074fa:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80074fc:	4b3e      	ldr	r3, [pc, #248]	; (80075f8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80074fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007500:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800750a:	493b      	ldr	r1, [pc, #236]	; (80075f8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800750c:	4313      	orrs	r3, r2
 800750e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007518:	2b00      	cmp	r3, #0
 800751a:	d034      	beq.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007522:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007526:	d01d      	beq.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8007528:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800752c:	d817      	bhi.n	800755e <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800752e:	2b00      	cmp	r3, #0
 8007530:	d003      	beq.n	800753a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8007532:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007536:	d009      	beq.n	800754c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007538:	e011      	b.n	800755e <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	3304      	adds	r3, #4
 800753e:	2100      	movs	r1, #0
 8007540:	4618      	mov	r0, r3
 8007542:	f001 fab3 	bl	8008aac <RCCEx_PLL2_Config>
 8007546:	4603      	mov	r3, r0
 8007548:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800754a:	e00c      	b.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	3324      	adds	r3, #36	; 0x24
 8007550:	2102      	movs	r1, #2
 8007552:	4618      	mov	r0, r3
 8007554:	f001 fb5c 	bl	8008c10 <RCCEx_PLL3_Config>
 8007558:	4603      	mov	r3, r0
 800755a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800755c:	e003      	b.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800755e:	2301      	movs	r3, #1
 8007560:	75fb      	strb	r3, [r7, #23]
      break;
 8007562:	e000      	b.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8007564:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007566:	7dfb      	ldrb	r3, [r7, #23]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d10a      	bne.n	8007582 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800756c:	4b22      	ldr	r3, [pc, #136]	; (80075f8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800756e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007570:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800757a:	491f      	ldr	r1, [pc, #124]	; (80075f8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800757c:	4313      	orrs	r3, r2
 800757e:	658b      	str	r3, [r1, #88]	; 0x58
 8007580:	e001      	b.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007582:	7dfb      	ldrb	r3, [r7, #23]
 8007584:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800758e:	2b00      	cmp	r3, #0
 8007590:	d036      	beq.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007598:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800759c:	d01c      	beq.n	80075d8 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800759e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80075a2:	d816      	bhi.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80075a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075a8:	d003      	beq.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80075aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80075ae:	d007      	beq.n	80075c0 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 80075b0:	e00f      	b.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075b2:	4b11      	ldr	r3, [pc, #68]	; (80075f8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80075b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075b6:	4a10      	ldr	r2, [pc, #64]	; (80075f8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80075b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075bc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80075be:	e00c      	b.n	80075da <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	3324      	adds	r3, #36	; 0x24
 80075c4:	2101      	movs	r1, #1
 80075c6:	4618      	mov	r0, r3
 80075c8:	f001 fb22 	bl	8008c10 <RCCEx_PLL3_Config>
 80075cc:	4603      	mov	r3, r0
 80075ce:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80075d0:	e003      	b.n	80075da <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80075d2:	2301      	movs	r3, #1
 80075d4:	75fb      	strb	r3, [r7, #23]
      break;
 80075d6:	e000      	b.n	80075da <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 80075d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075da:	7dfb      	ldrb	r3, [r7, #23]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d10d      	bne.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80075e0:	4b05      	ldr	r3, [pc, #20]	; (80075f8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80075e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075ee:	4902      	ldr	r1, [pc, #8]	; (80075f8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80075f0:	4313      	orrs	r3, r2
 80075f2:	654b      	str	r3, [r1, #84]	; 0x54
 80075f4:	e004      	b.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 80075f6:	bf00      	nop
 80075f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075fc:	7dfb      	ldrb	r3, [r7, #23]
 80075fe:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007608:	2b00      	cmp	r3, #0
 800760a:	d029      	beq.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007610:	2b00      	cmp	r3, #0
 8007612:	d003      	beq.n	800761c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007614:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007618:	d007      	beq.n	800762a <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800761a:	e00f      	b.n	800763c <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800761c:	4b61      	ldr	r3, [pc, #388]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800761e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007620:	4a60      	ldr	r2, [pc, #384]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007622:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007626:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007628:	e00b      	b.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	3304      	adds	r3, #4
 800762e:	2102      	movs	r1, #2
 8007630:	4618      	mov	r0, r3
 8007632:	f001 fa3b 	bl	8008aac <RCCEx_PLL2_Config>
 8007636:	4603      	mov	r3, r0
 8007638:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800763a:	e002      	b.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 800763c:	2301      	movs	r3, #1
 800763e:	75fb      	strb	r3, [r7, #23]
      break;
 8007640:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007642:	7dfb      	ldrb	r3, [r7, #23]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d109      	bne.n	800765c <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007648:	4b56      	ldr	r3, [pc, #344]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800764a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800764c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007654:	4953      	ldr	r1, [pc, #332]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007656:	4313      	orrs	r3, r2
 8007658:	64cb      	str	r3, [r1, #76]	; 0x4c
 800765a:	e001      	b.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800765c:	7dfb      	ldrb	r3, [r7, #23]
 800765e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007668:	2b00      	cmp	r3, #0
 800766a:	d00a      	beq.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	3324      	adds	r3, #36	; 0x24
 8007670:	2102      	movs	r1, #2
 8007672:	4618      	mov	r0, r3
 8007674:	f001 facc 	bl	8008c10 <RCCEx_PLL3_Config>
 8007678:	4603      	mov	r3, r0
 800767a:	2b00      	cmp	r3, #0
 800767c:	d001      	beq.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 800767e:	2301      	movs	r3, #1
 8007680:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800768a:	2b00      	cmp	r3, #0
 800768c:	d030      	beq.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007692:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007696:	d017      	beq.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007698:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800769c:	d811      	bhi.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800769e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076a2:	d013      	beq.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0xd18>
 80076a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076a8:	d80b      	bhi.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d010      	beq.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 80076ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076b2:	d106      	bne.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076b4:	4b3b      	ldr	r3, [pc, #236]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80076b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076b8:	4a3a      	ldr	r2, [pc, #232]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80076ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80076c0:	e007      	b.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80076c2:	2301      	movs	r3, #1
 80076c4:	75fb      	strb	r3, [r7, #23]
      break;
 80076c6:	e004      	b.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80076c8:	bf00      	nop
 80076ca:	e002      	b.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80076cc:	bf00      	nop
 80076ce:	e000      	b.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80076d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076d2:	7dfb      	ldrb	r3, [r7, #23]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d109      	bne.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80076d8:	4b32      	ldr	r3, [pc, #200]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80076da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076e4:	492f      	ldr	r1, [pc, #188]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80076e6:	4313      	orrs	r3, r2
 80076e8:	654b      	str	r3, [r1, #84]	; 0x54
 80076ea:	e001      	b.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076ec:	7dfb      	ldrb	r3, [r7, #23]
 80076ee:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d008      	beq.n	800770e <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80076fc:	4b29      	ldr	r3, [pc, #164]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80076fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007700:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007708:	4926      	ldr	r1, [pc, #152]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800770a:	4313      	orrs	r3, r2
 800770c:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007716:	2b00      	cmp	r3, #0
 8007718:	d008      	beq.n	800772c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800771a:	4b22      	ldr	r3, [pc, #136]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800771c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800771e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007726:	491f      	ldr	r1, [pc, #124]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007728:	4313      	orrs	r3, r2
 800772a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007734:	2b00      	cmp	r3, #0
 8007736:	d00d      	beq.n	8007754 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007738:	4b1a      	ldr	r3, [pc, #104]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800773a:	691b      	ldr	r3, [r3, #16]
 800773c:	4a19      	ldr	r2, [pc, #100]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800773e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007742:	6113      	str	r3, [r2, #16]
 8007744:	4b17      	ldr	r3, [pc, #92]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007746:	691a      	ldr	r2, [r3, #16]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800774e:	4915      	ldr	r1, [pc, #84]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007750:	4313      	orrs	r3, r2
 8007752:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	2b00      	cmp	r3, #0
 800775a:	da08      	bge.n	800776e <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800775c:	4b11      	ldr	r3, [pc, #68]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800775e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007760:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007768:	490e      	ldr	r1, [pc, #56]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800776a:	4313      	orrs	r3, r2
 800776c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007776:	2b00      	cmp	r3, #0
 8007778:	d009      	beq.n	800778e <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800777a:	4b0a      	ldr	r3, [pc, #40]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800777c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800777e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007788:	4906      	ldr	r1, [pc, #24]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800778a:	4313      	orrs	r3, r2
 800778c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800778e:	7dbb      	ldrb	r3, [r7, #22]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d101      	bne.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8007794:	2300      	movs	r3, #0
 8007796:	e000      	b.n	800779a <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8007798:	2301      	movs	r3, #1
}
 800779a:	4618      	mov	r0, r3
 800779c:	3718      	adds	r7, #24
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}
 80077a2:	bf00      	nop
 80077a4:	58024400 	.word	0x58024400

080077a8 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @retval None
  *
  *   (*) : Available on some STM32H7 lines only.
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b083      	sub	sp, #12
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection =
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	4aa2      	ldr	r2, [pc, #648]	; (8007a3c <HAL_RCCEx_GetPeriphCLKConfig+0x294>)
 80077b4:	601a      	str	r2, [r3, #0]
	         RCC_PERIPHCLK_ADC     | RCC_PERIPHCLK_SWPMI1      | RCC_PERIPHCLK_DFSDM1  | RCC_PERIPHCLK_RTC      |
	         RCC_PERIPHCLK_CEC     | RCC_PERIPHCLK_FMC         | RCC_PERIPHCLK_SPDIFRX | RCC_PERIPHCLK_TIM      |
	         RCC_PERIPHCLK_CKPER;

#if defined(I2C5)
PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_I2C1235;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f043 0208 	orr.w	r2, r3, #8
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	601a      	str	r2, [r3, #0]
#endif /* RCC_CDCCIP1R_SAI2BSEL */
#if defined(SAI3)	 
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SAI23;
#endif /* SAI3 */
#if defined(SAI4)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SAI4A;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	601a      	str	r2, [r3, #0]
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SAI4B;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	601a      	str	r2, [r3, #0]
#endif /* DFSDM2 */
#if defined(QUADSPI)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_QSPI;
#endif /* QUADSPI */
#if defined(OCTOSPI1) || defined(OCTOSPI2)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_OSPI;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	601a      	str	r2, [r3, #0]
#endif /* OCTOSPI1 || OCTOSPI2 */
#if defined(HRTIM1)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_HRTIM1;
#endif /* HRTIM1 */
#if defined(LTDC)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_LTDC;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	601a      	str	r2, [r3, #0]
#if defined(DSI)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_DSI;
#endif /* DSI */

  /* Get the PLL3 Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLL3.PLL3M = (uint32_t)((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> RCC_PLLCKSELR_DIVM3_Pos);
 80077f2:	4b93      	ldr	r3, [pc, #588]	; (8007a40 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 80077f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077f6:	0d1b      	lsrs	r3, r3, #20
 80077f8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	625a      	str	r2, [r3, #36]	; 0x24
  PeriphClkInit->PLL3.PLL3N = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) >> RCC_PLL3DIVR_N3_Pos)+ 1U;
 8007800:	4b8f      	ldr	r3, [pc, #572]	; (8007a40 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007804:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007808:	1c5a      	adds	r2, r3, #1
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInit->PLL3.PLL3R = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> RCC_PLL3DIVR_R3_Pos)+ 1U;
 800780e:	4b8c      	ldr	r3, [pc, #560]	; (8007a40 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007812:	0e1b      	lsrs	r3, r3, #24
 8007814:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007818:	1c5a      	adds	r2, r3, #1
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	635a      	str	r2, [r3, #52]	; 0x34
  PeriphClkInit->PLL3.PLL3P = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> RCC_PLL3DIVR_P3_Pos)+ 1U;
 800781e:	4b88      	ldr	r3, [pc, #544]	; (8007a40 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007822:	0a5b      	lsrs	r3, r3, #9
 8007824:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007828:	1c5a      	adds	r2, r3, #1
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	62da      	str	r2, [r3, #44]	; 0x2c
  PeriphClkInit->PLL3.PLL3Q = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> RCC_PLL3DIVR_Q3_Pos)+ 1U;
 800782e:	4b84      	ldr	r3, [pc, #528]	; (8007a40 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007832:	0c1b      	lsrs	r3, r3, #16
 8007834:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007838:	1c5a      	adds	r2, r3, #1
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	631a      	str	r2, [r3, #48]	; 0x30
  PeriphClkInit->PLL3.PLL3RGE = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL3RGE) >> RCC_PLLCFGR_PLL3RGE_Pos);
 800783e:	4b80      	ldr	r3, [pc, #512]	; (8007a40 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007842:	0a9b      	lsrs	r3, r3, #10
 8007844:	f003 0203 	and.w	r2, r3, #3
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	639a      	str	r2, [r3, #56]	; 0x38
  PeriphClkInit->PLL3.PLL3VCOSEL = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL3VCOSEL) >> RCC_PLLCFGR_PLL3VCOSEL_Pos);
 800784c:	4b7c      	ldr	r3, [pc, #496]	; (8007a40 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800784e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007850:	0a5b      	lsrs	r3, r3, #9
 8007852:	f003 0201 	and.w	r2, r3, #1
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Get the PLL2 Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLL2.PLL2M = (uint32_t)((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> RCC_PLLCKSELR_DIVM2_Pos);
 800785a:	4b79      	ldr	r3, [pc, #484]	; (8007a40 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800785c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800785e:	0b1b      	lsrs	r3, r3, #12
 8007860:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLL2.PLL2N = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) >> RCC_PLL2DIVR_N2_Pos)+ 1U;
 8007868:	4b75      	ldr	r3, [pc, #468]	; (8007a40 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800786a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800786c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007870:	1c5a      	adds	r2, r3, #1
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	609a      	str	r2, [r3, #8]
  PeriphClkInit->PLL2.PLL2R = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> RCC_PLL2DIVR_R2_Pos)+ 1U;
 8007876:	4b72      	ldr	r3, [pc, #456]	; (8007a40 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800787a:	0e1b      	lsrs	r3, r3, #24
 800787c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007880:	1c5a      	adds	r2, r3, #1
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLL2.PLL2P = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> RCC_PLL2DIVR_P2_Pos)+ 1U;
 8007886:	4b6e      	ldr	r3, [pc, #440]	; (8007a40 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800788a:	0a5b      	lsrs	r3, r3, #9
 800788c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007890:	1c5a      	adds	r2, r3, #1
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLL2.PLL2Q = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> RCC_PLL2DIVR_Q2_Pos)+ 1U;
 8007896:	4b6a      	ldr	r3, [pc, #424]	; (8007a40 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800789a:	0c1b      	lsrs	r3, r3, #16
 800789c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078a0:	1c5a      	adds	r2, r3, #1
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLL2.PLL2RGE = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL2RGE) >> RCC_PLLCFGR_PLL2RGE_Pos);
 80078a6:	4b66      	ldr	r3, [pc, #408]	; (8007a40 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 80078a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078aa:	099b      	lsrs	r3, r3, #6
 80078ac:	f003 0203 	and.w	r2, r3, #3
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLL2.PLL2VCOSEL = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL2VCOSEL) >> RCC_PLLCFGR_PLL2VCOSEL_Pos);
 80078b4:	4b62      	ldr	r3, [pc, #392]	; (8007a40 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 80078b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078b8:	095b      	lsrs	r3, r3, #5
 80078ba:	f003 0201 	and.w	r2, r3, #1
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	61da      	str	r2, [r3, #28]

  /* Get the USART1 configuration --------------------------------------------*/
  PeriphClkInit->Usart16ClockSelection      = __HAL_RCC_GET_USART16_SOURCE();
 80078c2:	4b5f      	ldr	r3, [pc, #380]	; (8007a40 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 80078c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078c6:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	675a      	str	r2, [r3, #116]	; 0x74
  /* Get the USART2/3/4/5/7/8 clock source -----------------------------------*/
  PeriphClkInit->Usart234578ClockSelection  = __HAL_RCC_GET_USART234578_SOURCE();
 80078ce:	4b5c      	ldr	r3, [pc, #368]	; (8007a40 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 80078d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078d2:	f003 0207 	and.w	r2, r3, #7
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	671a      	str	r2, [r3, #112]	; 0x70
  /* Get the LPUART1 clock source --------------------------------------------*/
  PeriphClkInit->Lpuart1ClockSelection      = __HAL_RCC_GET_LPUART1_SOURCE();
 80078da:	4b59      	ldr	r3, [pc, #356]	; (8007a40 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 80078dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078de:	f003 0207 	and.w	r2, r3, #7
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if defined(I2C5)
  /* Get the I2C1/2/3/5 clock source -----------------------------------------*/
  PeriphClkInit->I2c1235ClockSelection       = __HAL_RCC_GET_I2C1_SOURCE();
 80078e8:	4b55      	ldr	r3, [pc, #340]	; (8007a40 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 80078ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078ec:	f403 5240 	and.w	r2, r3, #12288	; 0x3000
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	67da      	str	r2, [r3, #124]	; 0x7c
#else
  /* Get the I2C1/2/3 clock source -------------------------------------------*/
  PeriphClkInit->I2c123ClockSelection       = __HAL_RCC_GET_I2C1_SOURCE();
#endif /*I2C5*/
  /* Get the LPTIM1 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection       = __HAL_RCC_GET_LPTIM1_SOURCE();
 80078f4:	4b52      	ldr	r3, [pc, #328]	; (8007a40 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 80078f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078f8:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  /* Get the LPTIM2 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim2ClockSelection       = __HAL_RCC_GET_LPTIM2_SOURCE();
 8007902:	4b4f      	ldr	r3, [pc, #316]	; (8007a40 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007906:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  /* Get the LPTIM3/4/5 clock source -----------------------------------------*/
  PeriphClkInit->Lptim345ClockSelection     = __HAL_RCC_GET_LPTIM345_SOURCE();
 8007910:	4b4b      	ldr	r3, [pc, #300]	; (8007a40 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007914:	f403 4260 	and.w	r2, r3, #57344	; 0xe000
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  /* Get the SAI1 clock source -----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection         = __HAL_RCC_GET_SAI1_SOURCE();
 800791e:	4b48      	ldr	r3, [pc, #288]	; (8007a40 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007920:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007922:	f003 0207 	and.w	r2, r3, #7
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	655a      	str	r2, [r3, #84]	; 0x54
  /* Get the SAI2B clock source ---------------------------------------------*/
  PeriphClkInit->Sai2BClockSelection        = __HAL_RCC_GET_SAI2B_SOURCE();
#endif  /*SAI2B*/
#if defined(SAI4)
  /* Get the SAI4A clock source ----------------------------------------------*/
  PeriphClkInit->Sai4AClockSelection        = __HAL_RCC_GET_SAI4A_SOURCE();
 800792a:	4b45      	ldr	r3, [pc, #276]	; (8007a40 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800792c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800792e:	f403 0260 	and.w	r2, r3, #14680064	; 0xe00000
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  /* Get the SAI4B clock source ----------------------------------------------*/
  PeriphClkInit->Sai4BClockSelection        = __HAL_RCC_GET_SAI4B_SOURCE();
 8007938:	4b41      	ldr	r3, [pc, #260]	; (8007a40 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800793a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800793c:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
#endif  /*SAI4*/
  /* Get the RTC clock source ------------------------------------------------*/
  PeriphClkInit->RTCClockSelection          = __HAL_RCC_GET_RTC_SOURCE();
 8007946:	4b3e      	ldr	r3, [pc, #248]	; (8007a40 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800794a:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  /* Get the USB clock source ------------------------------------------------*/
  PeriphClkInit->UsbClockSelection          = __HAL_RCC_GET_USB_SOURCE();
 8007954:	4b3a      	ldr	r3, [pc, #232]	; (8007a40 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007958:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  /* Get the SDMMC clock source ----------------------------------------------*/
  PeriphClkInit->SdmmcClockSelection        = __HAL_RCC_GET_SDMMC_SOURCE();
 8007962:	4b37      	ldr	r3, [pc, #220]	; (8007a40 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007966:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Get the RNG clock source ------------------------------------------------*/
  PeriphClkInit->RngClockSelection          = __HAL_RCC_GET_RNG_SOURCE();
 800796e:	4b34      	ldr	r3, [pc, #208]	; (8007a40 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007972:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	679a      	str	r2, [r3, #120]	; 0x78
#if defined(HRTIM1)
  /* Get the HRTIM1 clock source ---------------------------------------------*/
  PeriphClkInit->Hrtim1ClockSelection       = __HAL_RCC_GET_HRTIM1_SOURCE();
#endif /* HRTIM1 */
  /* Get the ADC clock source ------------------------------------------------*/
  PeriphClkInit->AdcClockSelection          = __HAL_RCC_GET_ADC_SOURCE();
 800797a:	4b31      	ldr	r3, [pc, #196]	; (8007a40 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800797c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800797e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  /* Get the SWPMI1 clock source ---------------------------------------------*/
  PeriphClkInit->Swpmi1ClockSelection       = __HAL_RCC_GET_SWPMI1_SOURCE();
 8007988:	4b2d      	ldr	r3, [pc, #180]	; (8007a40 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800798a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800798c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	66da      	str	r2, [r3, #108]	; 0x6c
  /* Get the DFSDM1 clock source ---------------------------------------------*/
  PeriphClkInit->Dfsdm1ClockSelection       = __HAL_RCC_GET_DFSDM1_SOURCE();
 8007994:	4b2a      	ldr	r3, [pc, #168]	; (8007a40 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007996:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007998:	f003 7280 	and.w	r2, r3, #16777216	; 0x1000000
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	665a      	str	r2, [r3, #100]	; 0x64
#if defined(DFSDM2_BASE)
  /* Get the DFSDM2 clock source ---------------------------------------------*/
  PeriphClkInit->Dfsdm2ClockSelection       = __HAL_RCC_GET_DFSDM2_SOURCE();
#endif /* DFSDM2 */
  /* Get the SPDIFRX clock source --------------------------------------------*/
  PeriphClkInit->SpdifrxClockSelection      = __HAL_RCC_GET_SPDIFRX_SOURCE();
 80079a0:	4b27      	ldr	r3, [pc, #156]	; (8007a40 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 80079a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079a4:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	661a      	str	r2, [r3, #96]	; 0x60
  /* Get the SPI1/2/3 clock source -------------------------------------------*/
  PeriphClkInit->Spi123ClockSelection       = __HAL_RCC_GET_SPI123_SOURCE();
 80079ac:	4b24      	ldr	r3, [pc, #144]	; (8007a40 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 80079ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079b0:	f403 42e0 	and.w	r2, r3, #28672	; 0x7000
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	659a      	str	r2, [r3, #88]	; 0x58
  /* Get the SPI4/5 clock source ---------------------------------------------*/
  PeriphClkInit->Spi45ClockSelection        = __HAL_RCC_GET_SPI45_SOURCE();
 80079b8:	4b21      	ldr	r3, [pc, #132]	; (8007a40 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 80079ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079bc:	f403 22e0 	and.w	r2, r3, #458752	; 0x70000
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Get the SPI6 clock source -----------------------------------------------*/
  PeriphClkInit->Spi6ClockSelection         = __HAL_RCC_GET_SPI6_SOURCE();
 80079c4:	4b1e      	ldr	r3, [pc, #120]	; (8007a40 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 80079c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079c8:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  /* Get the FDCAN clock source ----------------------------------------------*/
  PeriphClkInit->FdcanClockSelection        = __HAL_RCC_GET_FDCAN_SOURCE();
 80079d2:	4b1b      	ldr	r3, [pc, #108]	; (8007a40 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 80079d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079d6:	f003 5240 	and.w	r2, r3, #805306368	; 0x30000000
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	669a      	str	r2, [r3, #104]	; 0x68
  /* Get the CEC clock source ------------------------------------------------*/
  PeriphClkInit->CecClockSelection          = __HAL_RCC_GET_CEC_SOURCE();
 80079de:	4b18      	ldr	r3, [pc, #96]	; (8007a40 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 80079e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079e2:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  /* Get the FMC clock source ------------------------------------------------*/
  PeriphClkInit->FmcClockSelection          = __HAL_RCC_GET_FMC_SOURCE();
 80079ec:	4b14      	ldr	r3, [pc, #80]	; (8007a40 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 80079ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079f0:	f003 0203 	and.w	r2, r3, #3
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	645a      	str	r2, [r3, #68]	; 0x44
  /* Get the QSPI clock source -----------------------------------------------*/
  PeriphClkInit->QspiClockSelection         = __HAL_RCC_GET_QSPI_SOURCE();
#endif /* QUADSPI */
#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /* Get the OSPI clock source -----------------------------------------------*/
  PeriphClkInit->OspiClockSelection         = __HAL_RCC_GET_OSPI_SOURCE();
 80079f8:	4b11      	ldr	r3, [pc, #68]	; (8007a40 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 80079fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079fc:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	649a      	str	r2, [r3, #72]	; 0x48
  /* Get the DSI clock source ------------------------------------------------*/
  PeriphClkInit->DsiClockSelection          = __HAL_RCC_GET_DSI_SOURCE();
#endif /*DSI*/

  /* Get the CKPER clock source ----------------------------------------------*/
  PeriphClkInit->CkperClockSelection        = __HAL_RCC_GET_CLKP_SOURCE();
 8007a04:	4b0e      	ldr	r3, [pc, #56]	; (8007a40 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007a06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a08:	f003 5240 	and.w	r2, r3, #805306368	; 0x30000000
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Get the TIM Prescaler configuration -------------------------------------*/
  if ((RCC->CFGR & RCC_CFGR_TIMPRE) == 0U)
 8007a10:	4b0b      	ldr	r3, [pc, #44]	; (8007a40 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8007a12:	691b      	ldr	r3, [r3, #16]
 8007a14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d104      	bne.n	8007a26 <HAL_RCCEx_GetPeriphCLKConfig+0x27e>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 8007a24:	e004      	b.n	8007a30 <HAL_RCCEx_GetPeriphCLKConfig+0x288>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8007a2c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8007a30:	bf00      	nop
 8007a32:	370c      	adds	r7, #12
 8007a34:	46bd      	mov	sp, r7
 8007a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3a:	4770      	bx	lr
 8007a3c:	c9fff1f7 	.word	0xc9fff1f7
 8007a40:	58024400 	.word	0x58024400

08007a44 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b090      	sub	sp, #64	; 0x40
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a52:	f040 8089 	bne.w	8007b68 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8007a56:	4b95      	ldr	r3, [pc, #596]	; (8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007a58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a5a:	f003 0307 	and.w	r3, r3, #7
 8007a5e:	633b      	str	r3, [r7, #48]	; 0x30
 8007a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a62:	2b04      	cmp	r3, #4
 8007a64:	d87d      	bhi.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 8007a66:	a201      	add	r2, pc, #4	; (adr r2, 8007a6c <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8007a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a6c:	08007a81 	.word	0x08007a81
 8007a70:	08007aa5 	.word	0x08007aa5
 8007a74:	08007ac9 	.word	0x08007ac9
 8007a78:	08007b5d 	.word	0x08007b5d
 8007a7c:	08007aed 	.word	0x08007aed

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007a80:	4b8a      	ldr	r3, [pc, #552]	; (8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a88:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a8c:	d107      	bne.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a92:	4618      	mov	r0, r3
 8007a94:	f000 feb8 	bl	8008808 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8007a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007a9c:	e3ed      	b.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007aa2:	e3ea      	b.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007aa4:	4b81      	ldr	r3, [pc, #516]	; (8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007aac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ab0:	d107      	bne.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ab2:	f107 0318 	add.w	r3, r7, #24
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f000 fbfe 	bl	80082b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007abc:	69bb      	ldr	r3, [r7, #24]
 8007abe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007ac0:	e3db      	b.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ac6:	e3d8      	b.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007ac8:	4b78      	ldr	r3, [pc, #480]	; (8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ad0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ad4:	d107      	bne.n	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ad6:	f107 030c 	add.w	r3, r7, #12
 8007ada:	4618      	mov	r0, r3
 8007adc:	f000 fd40 	bl	8008560 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007ae4:	e3c9      	b.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007aea:	e3c6      	b.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007aec:	4b6f      	ldr	r3, [pc, #444]	; (8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007aee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007af0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007af4:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007af6:	4b6d      	ldr	r3, [pc, #436]	; (8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f003 0304 	and.w	r3, r3, #4
 8007afe:	2b04      	cmp	r3, #4
 8007b00:	d10c      	bne.n	8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8007b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d109      	bne.n	8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007b08:	4b68      	ldr	r3, [pc, #416]	; (8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	08db      	lsrs	r3, r3, #3
 8007b0e:	f003 0303 	and.w	r3, r3, #3
 8007b12:	4a67      	ldr	r2, [pc, #412]	; (8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8007b14:	fa22 f303 	lsr.w	r3, r2, r3
 8007b18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b1a:	e01e      	b.n	8007b5a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007b1c:	4b63      	ldr	r3, [pc, #396]	; (8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b28:	d106      	bne.n	8007b38 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8007b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b2c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b30:	d102      	bne.n	8007b38 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007b32:	4b60      	ldr	r3, [pc, #384]	; (8007cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007b34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b36:	e010      	b.n	8007b5a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007b38:	4b5c      	ldr	r3, [pc, #368]	; (8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b44:	d106      	bne.n	8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8007b46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b4c:	d102      	bne.n	8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007b4e:	4b5a      	ldr	r3, [pc, #360]	; (8007cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007b50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b52:	e002      	b.n	8007b5a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007b54:	2300      	movs	r3, #0
 8007b56:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007b58:	e38f      	b.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8007b5a:	e38e      	b.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007b5c:	4b57      	ldr	r3, [pc, #348]	; (8007cbc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b60:	e38b      	b.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8007b62:	2300      	movs	r3, #0
 8007b64:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b66:	e388      	b.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b6e:	f040 80a7 	bne.w	8007cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8007b72:	4b4e      	ldr	r3, [pc, #312]	; (8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b76:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8007b7a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b7e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007b82:	d054      	beq.n	8007c2e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8007b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b86:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007b8a:	f200 808b 	bhi.w	8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8007b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b90:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007b94:	f000 8083 	beq.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8007b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b9a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007b9e:	f200 8081 	bhi.w	8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8007ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ba8:	d02f      	beq.n	8007c0a <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 8007baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007bb0:	d878      	bhi.n	8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8007bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d004      	beq.n	8007bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 8007bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007bbe:	d012      	beq.n	8007be6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 8007bc0:	e070      	b.n	8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007bc2:	4b3a      	ldr	r3, [pc, #232]	; (8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007bce:	d107      	bne.n	8007be0 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007bd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f000 fe17 	bl	8008808 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bdc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007bde:	e34c      	b.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007be0:	2300      	movs	r3, #0
 8007be2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007be4:	e349      	b.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007be6:	4b31      	ldr	r3, [pc, #196]	; (8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007bee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007bf2:	d107      	bne.n	8007c04 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007bf4:	f107 0318 	add.w	r3, r7, #24
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f000 fb5d 	bl	80082b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007bfe:	69bb      	ldr	r3, [r7, #24]
 8007c00:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007c02:	e33a      	b.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007c04:	2300      	movs	r3, #0
 8007c06:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c08:	e337      	b.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007c0a:	4b28      	ldr	r3, [pc, #160]	; (8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c16:	d107      	bne.n	8007c28 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c18:	f107 030c 	add.w	r3, r7, #12
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f000 fc9f 	bl	8008560 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007c26:	e328      	b.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c2c:	e325      	b.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007c2e:	4b1f      	ldr	r3, [pc, #124]	; (8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c32:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007c36:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007c38:	4b1c      	ldr	r3, [pc, #112]	; (8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f003 0304 	and.w	r3, r3, #4
 8007c40:	2b04      	cmp	r3, #4
 8007c42:	d10c      	bne.n	8007c5e <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 8007c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d109      	bne.n	8007c5e <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007c4a:	4b18      	ldr	r3, [pc, #96]	; (8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	08db      	lsrs	r3, r3, #3
 8007c50:	f003 0303 	and.w	r3, r3, #3
 8007c54:	4a16      	ldr	r2, [pc, #88]	; (8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8007c56:	fa22 f303 	lsr.w	r3, r2, r3
 8007c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c5c:	e01e      	b.n	8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007c5e:	4b13      	ldr	r3, [pc, #76]	; (8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c6a:	d106      	bne.n	8007c7a <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8007c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c72:	d102      	bne.n	8007c7a <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007c74:	4b0f      	ldr	r3, [pc, #60]	; (8007cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007c76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c78:	e010      	b.n	8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007c7a:	4b0c      	ldr	r3, [pc, #48]	; (8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c82:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c86:	d106      	bne.n	8007c96 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8007c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c8e:	d102      	bne.n	8007c96 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007c90:	4b09      	ldr	r3, [pc, #36]	; (8007cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007c92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c94:	e002      	b.n	8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007c96:	2300      	movs	r3, #0
 8007c98:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007c9a:	e2ee      	b.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8007c9c:	e2ed      	b.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007c9e:	4b07      	ldr	r3, [pc, #28]	; (8007cbc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ca2:	e2ea      	b.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ca8:	e2e7      	b.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8007caa:	bf00      	nop
 8007cac:	58024400 	.word	0x58024400
 8007cb0:	03d09000 	.word	0x03d09000
 8007cb4:	003d0900 	.word	0x003d0900
 8007cb8:	017d7840 	.word	0x017d7840
 8007cbc:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007cc6:	f040 809c 	bne.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8007cca:	4b9e      	ldr	r3, [pc, #632]	; (8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cce:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007cd2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007cda:	d054      	beq.n	8007d86 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8007cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cde:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007ce2:	f200 808b 	bhi.w	8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8007ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ce8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007cec:	f000 8083 	beq.w	8007df6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8007cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007cf6:	f200 8081 	bhi.w	8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8007cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cfc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d00:	d02f      	beq.n	8007d62 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8007d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d04:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d08:	d878      	bhi.n	8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8007d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d004      	beq.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8007d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d12:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007d16:	d012      	beq.n	8007d3e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8007d18:	e070      	b.n	8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007d1a:	4b8a      	ldr	r3, [pc, #552]	; (8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d22:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d26:	d107      	bne.n	8007d38 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007d28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f000 fd6b 	bl	8008808 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d34:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007d36:	e2a0      	b.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007d38:	2300      	movs	r3, #0
 8007d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d3c:	e29d      	b.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007d3e:	4b81      	ldr	r3, [pc, #516]	; (8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d4a:	d107      	bne.n	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d4c:	f107 0318 	add.w	r3, r7, #24
 8007d50:	4618      	mov	r0, r3
 8007d52:	f000 fab1 	bl	80082b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007d56:	69bb      	ldr	r3, [r7, #24]
 8007d58:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8007d5a:	e28e      	b.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d60:	e28b      	b.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007d62:	4b78      	ldr	r3, [pc, #480]	; (8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d6e:	d107      	bne.n	8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d70:	f107 030c 	add.w	r3, r7, #12
 8007d74:	4618      	mov	r0, r3
 8007d76:	f000 fbf3 	bl	8008560 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007d7e:	e27c      	b.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007d80:	2300      	movs	r3, #0
 8007d82:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d84:	e279      	b.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007d86:	4b6f      	ldr	r3, [pc, #444]	; (8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d8a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007d8e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007d90:	4b6c      	ldr	r3, [pc, #432]	; (8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f003 0304 	and.w	r3, r3, #4
 8007d98:	2b04      	cmp	r3, #4
 8007d9a:	d10c      	bne.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8007d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d109      	bne.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007da2:	4b68      	ldr	r3, [pc, #416]	; (8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	08db      	lsrs	r3, r3, #3
 8007da8:	f003 0303 	and.w	r3, r3, #3
 8007dac:	4a66      	ldr	r2, [pc, #408]	; (8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007dae:	fa22 f303 	lsr.w	r3, r2, r3
 8007db2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007db4:	e01e      	b.n	8007df4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007db6:	4b63      	ldr	r3, [pc, #396]	; (8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dc2:	d106      	bne.n	8007dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 8007dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dc6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007dca:	d102      	bne.n	8007dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007dcc:	4b5f      	ldr	r3, [pc, #380]	; (8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8007dce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007dd0:	e010      	b.n	8007df4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007dd2:	4b5c      	ldr	r3, [pc, #368]	; (8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007dda:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007dde:	d106      	bne.n	8007dee <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8007de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007de2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007de6:	d102      	bne.n	8007dee <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007de8:	4b59      	ldr	r3, [pc, #356]	; (8007f50 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8007dea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007dec:	e002      	b.n	8007df4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007dee:	2300      	movs	r3, #0
 8007df0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007df2:	e242      	b.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8007df4:	e241      	b.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007df6:	4b57      	ldr	r3, [pc, #348]	; (8007f54 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8007df8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007dfa:	e23e      	b.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e00:	e23b      	b.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e08:	f040 80a6 	bne.w	8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8007e0c:	4b4d      	ldr	r3, [pc, #308]	; (8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007e0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e10:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007e14:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e1c:	d054      	beq.n	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8007e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e24:	f200 808b 	bhi.w	8007f3e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8007e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e2a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007e2e:	f000 8083 	beq.w	8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 8007e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e34:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007e38:	f200 8081 	bhi.w	8007f3e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8007e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e42:	d02f      	beq.n	8007ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 8007e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e4a:	d878      	bhi.n	8007f3e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8007e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d004      	beq.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8007e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e58:	d012      	beq.n	8007e80 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 8007e5a:	e070      	b.n	8007f3e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007e5c:	4b39      	ldr	r3, [pc, #228]	; (8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007e68:	d107      	bne.n	8007e7a <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007e6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f000 fcca 	bl	8008808 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e76:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007e78:	e1ff      	b.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e7e:	e1fc      	b.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007e80:	4b30      	ldr	r3, [pc, #192]	; (8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e8c:	d107      	bne.n	8007e9e <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e8e:	f107 0318 	add.w	r3, r7, #24
 8007e92:	4618      	mov	r0, r3
 8007e94:	f000 fa10 	bl	80082b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007e98:	69bb      	ldr	r3, [r7, #24]
 8007e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007e9c:	e1ed      	b.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ea2:	e1ea      	b.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007ea4:	4b27      	ldr	r3, [pc, #156]	; (8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007eac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007eb0:	d107      	bne.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007eb2:	f107 030c 	add.w	r3, r7, #12
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f000 fb52 	bl	8008560 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007ec0:	e1db      	b.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ec6:	e1d8      	b.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007ec8:	4b1e      	ldr	r3, [pc, #120]	; (8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007eca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ecc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007ed0:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007ed2:	4b1c      	ldr	r3, [pc, #112]	; (8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f003 0304 	and.w	r3, r3, #4
 8007eda:	2b04      	cmp	r3, #4
 8007edc:	d10c      	bne.n	8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 8007ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d109      	bne.n	8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007ee4:	4b17      	ldr	r3, [pc, #92]	; (8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	08db      	lsrs	r3, r3, #3
 8007eea:	f003 0303 	and.w	r3, r3, #3
 8007eee:	4a16      	ldr	r2, [pc, #88]	; (8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007ef0:	fa22 f303 	lsr.w	r3, r2, r3
 8007ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ef6:	e01e      	b.n	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007ef8:	4b12      	ldr	r3, [pc, #72]	; (8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f04:	d106      	bne.n	8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8007f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f08:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f0c:	d102      	bne.n	8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007f0e:	4b0f      	ldr	r3, [pc, #60]	; (8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8007f10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f12:	e010      	b.n	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007f14:	4b0b      	ldr	r3, [pc, #44]	; (8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f20:	d106      	bne.n	8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8007f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f28:	d102      	bne.n	8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007f2a:	4b09      	ldr	r3, [pc, #36]	; (8007f50 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8007f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f2e:	e002      	b.n	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007f30:	2300      	movs	r3, #0
 8007f32:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007f34:	e1a1      	b.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8007f36:	e1a0      	b.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007f38:	4b06      	ldr	r3, [pc, #24]	; (8007f54 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8007f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f3c:	e19d      	b.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f42:	e19a      	b.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8007f44:	58024400 	.word	0x58024400
 8007f48:	03d09000 	.word	0x03d09000
 8007f4c:	003d0900 	.word	0x003d0900
 8007f50:	017d7840 	.word	0x017d7840
 8007f54:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007f5e:	d173      	bne.n	8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8007f60:	4b9a      	ldr	r3, [pc, #616]	; (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007f68:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f70:	d02f      	beq.n	8007fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8007f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f78:	d863      	bhi.n	8008042 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8007f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d004      	beq.n	8007f8a <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 8007f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f86:	d012      	beq.n	8007fae <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 8007f88:	e05b      	b.n	8008042 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007f8a:	4b90      	ldr	r3, [pc, #576]	; (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f96:	d107      	bne.n	8007fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f98:	f107 0318 	add.w	r3, r7, #24
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f000 f98b 	bl	80082b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007fa2:	69bb      	ldr	r3, [r7, #24]
 8007fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007fa6:	e168      	b.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007fac:	e165      	b.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007fae:	4b87      	ldr	r3, [pc, #540]	; (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007fb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fba:	d107      	bne.n	8007fcc <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007fbc:	f107 030c 	add.w	r3, r7, #12
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f000 facd 	bl	8008560 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007fca:	e156      	b.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007fd0:	e153      	b.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007fd2:	4b7e      	ldr	r3, [pc, #504]	; (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fd6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007fda:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007fdc:	4b7b      	ldr	r3, [pc, #492]	; (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f003 0304 	and.w	r3, r3, #4
 8007fe4:	2b04      	cmp	r3, #4
 8007fe6:	d10c      	bne.n	8008002 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 8007fe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d109      	bne.n	8008002 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007fee:	4b77      	ldr	r3, [pc, #476]	; (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	08db      	lsrs	r3, r3, #3
 8007ff4:	f003 0303 	and.w	r3, r3, #3
 8007ff8:	4a75      	ldr	r2, [pc, #468]	; (80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8007ffa:	fa22 f303 	lsr.w	r3, r2, r3
 8007ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008000:	e01e      	b.n	8008040 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008002:	4b72      	ldr	r3, [pc, #456]	; (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800800a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800800e:	d106      	bne.n	800801e <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8008010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008012:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008016:	d102      	bne.n	800801e <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008018:	4b6e      	ldr	r3, [pc, #440]	; (80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800801a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800801c:	e010      	b.n	8008040 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800801e:	4b6b      	ldr	r3, [pc, #428]	; (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008026:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800802a:	d106      	bne.n	800803a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800802c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800802e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008032:	d102      	bne.n	800803a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008034:	4b68      	ldr	r3, [pc, #416]	; (80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8008036:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008038:	e002      	b.n	8008040 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800803a:	2300      	movs	r3, #0
 800803c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800803e:	e11c      	b.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8008040:	e11b      	b.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8008042:	2300      	movs	r3, #0
 8008044:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008046:	e118      	b.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800804e:	d133      	bne.n	80080b8 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8008050:	4b5e      	ldr	r3, [pc, #376]	; (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008052:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008054:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008058:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800805a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800805c:	2b00      	cmp	r3, #0
 800805e:	d004      	beq.n	800806a <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8008060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008062:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008066:	d012      	beq.n	800808e <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 8008068:	e023      	b.n	80080b2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800806a:	4b58      	ldr	r3, [pc, #352]	; (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008072:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008076:	d107      	bne.n	8008088 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008078:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800807c:	4618      	mov	r0, r3
 800807e:	f000 fbc3 	bl	8008808 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008084:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008086:	e0f8      	b.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008088:	2300      	movs	r3, #0
 800808a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800808c:	e0f5      	b.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800808e:	4b4f      	ldr	r3, [pc, #316]	; (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008096:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800809a:	d107      	bne.n	80080ac <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800809c:	f107 0318 	add.w	r3, r7, #24
 80080a0:	4618      	mov	r0, r3
 80080a2:	f000 f909 	bl	80082b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80080a6:	6a3b      	ldr	r3, [r7, #32]
 80080a8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80080aa:	e0e6      	b.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80080ac:	2300      	movs	r3, #0
 80080ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080b0:	e0e3      	b.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 80080b2:	2300      	movs	r3, #0
 80080b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080b6:	e0e0      	b.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80080be:	f040 808d 	bne.w	80081dc <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80080c2:	4b42      	ldr	r3, [pc, #264]	; (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80080c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080c6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80080ca:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80080cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80080d2:	d06b      	beq.n	80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 80080d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80080da:	d874      	bhi.n	80081c6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 80080dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080e2:	d056      	beq.n	8008192 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 80080e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080ea:	d86c      	bhi.n	80081c6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 80080ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80080f2:	d03b      	beq.n	800816c <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 80080f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80080fa:	d864      	bhi.n	80081c6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 80080fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008102:	d021      	beq.n	8008148 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8008104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008106:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800810a:	d85c      	bhi.n	80081c6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800810c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800810e:	2b00      	cmp	r3, #0
 8008110:	d004      	beq.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8008112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008114:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008118:	d004      	beq.n	8008124 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 800811a:	e054      	b.n	80081c6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800811c:	f000 f8b6 	bl	800828c <HAL_RCCEx_GetD3PCLK1Freq>
 8008120:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8008122:	e0aa      	b.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008124:	4b29      	ldr	r3, [pc, #164]	; (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800812c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008130:	d107      	bne.n	8008142 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008132:	f107 0318 	add.w	r3, r7, #24
 8008136:	4618      	mov	r0, r3
 8008138:	f000 f8be 	bl	80082b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800813c:	69fb      	ldr	r3, [r7, #28]
 800813e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008140:	e09b      	b.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008142:	2300      	movs	r3, #0
 8008144:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008146:	e098      	b.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008148:	4b20      	ldr	r3, [pc, #128]	; (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008150:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008154:	d107      	bne.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008156:	f107 030c 	add.w	r3, r7, #12
 800815a:	4618      	mov	r0, r3
 800815c:	f000 fa00 	bl	8008560 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008164:	e089      	b.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008166:	2300      	movs	r3, #0
 8008168:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800816a:	e086      	b.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800816c:	4b17      	ldr	r3, [pc, #92]	; (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f003 0304 	and.w	r3, r3, #4
 8008174:	2b04      	cmp	r3, #4
 8008176:	d109      	bne.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008178:	4b14      	ldr	r3, [pc, #80]	; (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	08db      	lsrs	r3, r3, #3
 800817e:	f003 0303 	and.w	r3, r3, #3
 8008182:	4a13      	ldr	r2, [pc, #76]	; (80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8008184:	fa22 f303 	lsr.w	r3, r2, r3
 8008188:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800818a:	e076      	b.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800818c:	2300      	movs	r3, #0
 800818e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008190:	e073      	b.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008192:	4b0e      	ldr	r3, [pc, #56]	; (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800819a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800819e:	d102      	bne.n	80081a6 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 80081a0:	4b0c      	ldr	r3, [pc, #48]	; (80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 80081a2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80081a4:	e069      	b.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80081a6:	2300      	movs	r3, #0
 80081a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081aa:	e066      	b.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80081ac:	4b07      	ldr	r3, [pc, #28]	; (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081b8:	d102      	bne.n	80081c0 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 80081ba:	4b07      	ldr	r3, [pc, #28]	; (80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 80081bc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80081be:	e05c      	b.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80081c0:	2300      	movs	r3, #0
 80081c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081c4:	e059      	b.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80081c6:	2300      	movs	r3, #0
 80081c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081ca:	e056      	b.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80081cc:	58024400 	.word	0x58024400
 80081d0:	03d09000 	.word	0x03d09000
 80081d4:	003d0900 	.word	0x003d0900
 80081d8:	017d7840 	.word	0x017d7840
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081e2:	d148      	bne.n	8008276 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 80081e4:	4b27      	ldr	r3, [pc, #156]	; (8008284 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80081e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80081ec:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80081ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081f4:	d02a      	beq.n	800824c <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 80081f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081fc:	d838      	bhi.n	8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 80081fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008200:	2b00      	cmp	r3, #0
 8008202:	d004      	beq.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 8008204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008206:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800820a:	d00d      	beq.n	8008228 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 800820c:	e030      	b.n	8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800820e:	4b1d      	ldr	r3, [pc, #116]	; (8008284 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008216:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800821a:	d102      	bne.n	8008222 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 800821c:	4b1a      	ldr	r3, [pc, #104]	; (8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800821e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008220:	e02b      	b.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008222:	2300      	movs	r3, #0
 8008224:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008226:	e028      	b.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008228:	4b16      	ldr	r3, [pc, #88]	; (8008284 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008230:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008234:	d107      	bne.n	8008246 <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008236:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800823a:	4618      	mov	r0, r3
 800823c:	f000 fae4 	bl	8008808 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008242:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008244:	e019      	b.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008246:	2300      	movs	r3, #0
 8008248:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800824a:	e016      	b.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800824c:	4b0d      	ldr	r3, [pc, #52]	; (8008284 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008254:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008258:	d107      	bne.n	800826a <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800825a:	f107 0318 	add.w	r3, r7, #24
 800825e:	4618      	mov	r0, r3
 8008260:	f000 f82a 	bl	80082b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008264:	69fb      	ldr	r3, [r7, #28]
 8008266:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008268:	e007      	b.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800826a:	2300      	movs	r3, #0
 800826c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800826e:	e004      	b.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8008270:	2300      	movs	r3, #0
 8008272:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008274:	e001      	b.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 8008276:	2300      	movs	r3, #0
 8008278:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800827a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800827c:	4618      	mov	r0, r3
 800827e:	3740      	adds	r7, #64	; 0x40
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}
 8008284:	58024400 	.word	0x58024400
 8008288:	017d7840 	.word	0x017d7840

0800828c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008290:	f7fe fb60 	bl	8006954 <HAL_RCC_GetHCLKFreq>
 8008294:	4602      	mov	r2, r0
 8008296:	4b06      	ldr	r3, [pc, #24]	; (80082b0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008298:	6a1b      	ldr	r3, [r3, #32]
 800829a:	091b      	lsrs	r3, r3, #4
 800829c:	f003 0307 	and.w	r3, r3, #7
 80082a0:	4904      	ldr	r1, [pc, #16]	; (80082b4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80082a2:	5ccb      	ldrb	r3, [r1, r3]
 80082a4:	f003 031f 	and.w	r3, r3, #31
 80082a8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	bd80      	pop	{r7, pc}
 80082b0:	58024400 	.word	0x58024400
 80082b4:	0800c938 	.word	0x0800c938

080082b8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b089      	sub	sp, #36	; 0x24
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80082c0:	4ba1      	ldr	r3, [pc, #644]	; (8008548 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082c4:	f003 0303 	and.w	r3, r3, #3
 80082c8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80082ca:	4b9f      	ldr	r3, [pc, #636]	; (8008548 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082ce:	0b1b      	lsrs	r3, r3, #12
 80082d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80082d4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80082d6:	4b9c      	ldr	r3, [pc, #624]	; (8008548 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082da:	091b      	lsrs	r3, r3, #4
 80082dc:	f003 0301 	and.w	r3, r3, #1
 80082e0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80082e2:	4b99      	ldr	r3, [pc, #612]	; (8008548 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082e6:	08db      	lsrs	r3, r3, #3
 80082e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80082ec:	693a      	ldr	r2, [r7, #16]
 80082ee:	fb02 f303 	mul.w	r3, r2, r3
 80082f2:	ee07 3a90 	vmov	s15, r3
 80082f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082fa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	2b00      	cmp	r3, #0
 8008302:	f000 8111 	beq.w	8008528 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008306:	69bb      	ldr	r3, [r7, #24]
 8008308:	2b02      	cmp	r3, #2
 800830a:	f000 8083 	beq.w	8008414 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800830e:	69bb      	ldr	r3, [r7, #24]
 8008310:	2b02      	cmp	r3, #2
 8008312:	f200 80a1 	bhi.w	8008458 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008316:	69bb      	ldr	r3, [r7, #24]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d003      	beq.n	8008324 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800831c:	69bb      	ldr	r3, [r7, #24]
 800831e:	2b01      	cmp	r3, #1
 8008320:	d056      	beq.n	80083d0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008322:	e099      	b.n	8008458 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008324:	4b88      	ldr	r3, [pc, #544]	; (8008548 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f003 0320 	and.w	r3, r3, #32
 800832c:	2b00      	cmp	r3, #0
 800832e:	d02d      	beq.n	800838c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008330:	4b85      	ldr	r3, [pc, #532]	; (8008548 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	08db      	lsrs	r3, r3, #3
 8008336:	f003 0303 	and.w	r3, r3, #3
 800833a:	4a84      	ldr	r2, [pc, #528]	; (800854c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800833c:	fa22 f303 	lsr.w	r3, r2, r3
 8008340:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	ee07 3a90 	vmov	s15, r3
 8008348:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800834c:	697b      	ldr	r3, [r7, #20]
 800834e:	ee07 3a90 	vmov	s15, r3
 8008352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008356:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800835a:	4b7b      	ldr	r3, [pc, #492]	; (8008548 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800835c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800835e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008362:	ee07 3a90 	vmov	s15, r3
 8008366:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800836a:	ed97 6a03 	vldr	s12, [r7, #12]
 800836e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008550 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008372:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008376:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800837a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800837e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008382:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008386:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800838a:	e087      	b.n	800849c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	ee07 3a90 	vmov	s15, r3
 8008392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008396:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008554 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800839a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800839e:	4b6a      	ldr	r3, [pc, #424]	; (8008548 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083a6:	ee07 3a90 	vmov	s15, r3
 80083aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80083b2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008550 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80083b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80083ce:	e065      	b.n	800849c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80083d0:	697b      	ldr	r3, [r7, #20]
 80083d2:	ee07 3a90 	vmov	s15, r3
 80083d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083da:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008558 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80083de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083e2:	4b59      	ldr	r3, [pc, #356]	; (8008548 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083ea:	ee07 3a90 	vmov	s15, r3
 80083ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80083f6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008550 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80083fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008402:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008406:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800840a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800840e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008412:	e043      	b.n	800849c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	ee07 3a90 	vmov	s15, r3
 800841a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800841e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800855c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008422:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008426:	4b48      	ldr	r3, [pc, #288]	; (8008548 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800842a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800842e:	ee07 3a90 	vmov	s15, r3
 8008432:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008436:	ed97 6a03 	vldr	s12, [r7, #12]
 800843a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008550 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800843e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008442:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008446:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800844a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800844e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008452:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008456:	e021      	b.n	800849c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	ee07 3a90 	vmov	s15, r3
 800845e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008462:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008558 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008466:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800846a:	4b37      	ldr	r3, [pc, #220]	; (8008548 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800846c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800846e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008472:	ee07 3a90 	vmov	s15, r3
 8008476:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800847a:	ed97 6a03 	vldr	s12, [r7, #12]
 800847e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008550 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008482:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008486:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800848a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800848e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008492:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008496:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800849a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800849c:	4b2a      	ldr	r3, [pc, #168]	; (8008548 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800849e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084a0:	0a5b      	lsrs	r3, r3, #9
 80084a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084a6:	ee07 3a90 	vmov	s15, r3
 80084aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80084b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80084b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80084ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084c2:	ee17 2a90 	vmov	r2, s15
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80084ca:	4b1f      	ldr	r3, [pc, #124]	; (8008548 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80084cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ce:	0c1b      	lsrs	r3, r3, #16
 80084d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084d4:	ee07 3a90 	vmov	s15, r3
 80084d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80084e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80084e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80084e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084f0:	ee17 2a90 	vmov	r2, s15
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80084f8:	4b13      	ldr	r3, [pc, #76]	; (8008548 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80084fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084fc:	0e1b      	lsrs	r3, r3, #24
 80084fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008502:	ee07 3a90 	vmov	s15, r3
 8008506:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800850a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800850e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008512:	edd7 6a07 	vldr	s13, [r7, #28]
 8008516:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800851a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800851e:	ee17 2a90 	vmov	r2, s15
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008526:	e008      	b.n	800853a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2200      	movs	r2, #0
 800852c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2200      	movs	r2, #0
 8008532:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2200      	movs	r2, #0
 8008538:	609a      	str	r2, [r3, #8]
}
 800853a:	bf00      	nop
 800853c:	3724      	adds	r7, #36	; 0x24
 800853e:	46bd      	mov	sp, r7
 8008540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008544:	4770      	bx	lr
 8008546:	bf00      	nop
 8008548:	58024400 	.word	0x58024400
 800854c:	03d09000 	.word	0x03d09000
 8008550:	46000000 	.word	0x46000000
 8008554:	4c742400 	.word	0x4c742400
 8008558:	4a742400 	.word	0x4a742400
 800855c:	4bbebc20 	.word	0x4bbebc20

08008560 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008560:	b480      	push	{r7}
 8008562:	b089      	sub	sp, #36	; 0x24
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008568:	4ba1      	ldr	r3, [pc, #644]	; (80087f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800856a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800856c:	f003 0303 	and.w	r3, r3, #3
 8008570:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008572:	4b9f      	ldr	r3, [pc, #636]	; (80087f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008576:	0d1b      	lsrs	r3, r3, #20
 8008578:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800857c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800857e:	4b9c      	ldr	r3, [pc, #624]	; (80087f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008582:	0a1b      	lsrs	r3, r3, #8
 8008584:	f003 0301 	and.w	r3, r3, #1
 8008588:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800858a:	4b99      	ldr	r3, [pc, #612]	; (80087f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800858c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800858e:	08db      	lsrs	r3, r3, #3
 8008590:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008594:	693a      	ldr	r2, [r7, #16]
 8008596:	fb02 f303 	mul.w	r3, r2, r3
 800859a:	ee07 3a90 	vmov	s15, r3
 800859e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085a2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	f000 8111 	beq.w	80087d0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80085ae:	69bb      	ldr	r3, [r7, #24]
 80085b0:	2b02      	cmp	r3, #2
 80085b2:	f000 8083 	beq.w	80086bc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80085b6:	69bb      	ldr	r3, [r7, #24]
 80085b8:	2b02      	cmp	r3, #2
 80085ba:	f200 80a1 	bhi.w	8008700 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80085be:	69bb      	ldr	r3, [r7, #24]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d003      	beq.n	80085cc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80085c4:	69bb      	ldr	r3, [r7, #24]
 80085c6:	2b01      	cmp	r3, #1
 80085c8:	d056      	beq.n	8008678 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80085ca:	e099      	b.n	8008700 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80085cc:	4b88      	ldr	r3, [pc, #544]	; (80087f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f003 0320 	and.w	r3, r3, #32
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d02d      	beq.n	8008634 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80085d8:	4b85      	ldr	r3, [pc, #532]	; (80087f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	08db      	lsrs	r3, r3, #3
 80085de:	f003 0303 	and.w	r3, r3, #3
 80085e2:	4a84      	ldr	r2, [pc, #528]	; (80087f4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80085e4:	fa22 f303 	lsr.w	r3, r2, r3
 80085e8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	ee07 3a90 	vmov	s15, r3
 80085f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085f4:	697b      	ldr	r3, [r7, #20]
 80085f6:	ee07 3a90 	vmov	s15, r3
 80085fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008602:	4b7b      	ldr	r3, [pc, #492]	; (80087f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008606:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800860a:	ee07 3a90 	vmov	s15, r3
 800860e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008612:	ed97 6a03 	vldr	s12, [r7, #12]
 8008616:	eddf 5a78 	vldr	s11, [pc, #480]	; 80087f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800861a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800861e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008622:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008626:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800862a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800862e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008632:	e087      	b.n	8008744 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008634:	697b      	ldr	r3, [r7, #20]
 8008636:	ee07 3a90 	vmov	s15, r3
 800863a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800863e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80087fc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008642:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008646:	4b6a      	ldr	r3, [pc, #424]	; (80087f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800864a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800864e:	ee07 3a90 	vmov	s15, r3
 8008652:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008656:	ed97 6a03 	vldr	s12, [r7, #12]
 800865a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80087f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800865e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008662:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008666:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800866a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800866e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008672:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008676:	e065      	b.n	8008744 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008678:	697b      	ldr	r3, [r7, #20]
 800867a:	ee07 3a90 	vmov	s15, r3
 800867e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008682:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008800 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008686:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800868a:	4b59      	ldr	r3, [pc, #356]	; (80087f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800868c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800868e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008692:	ee07 3a90 	vmov	s15, r3
 8008696:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800869a:	ed97 6a03 	vldr	s12, [r7, #12]
 800869e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80087f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80086a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80086ba:	e043      	b.n	8008744 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	ee07 3a90 	vmov	s15, r3
 80086c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086c6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008804 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80086ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086ce:	4b48      	ldr	r3, [pc, #288]	; (80087f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086d6:	ee07 3a90 	vmov	s15, r3
 80086da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086de:	ed97 6a03 	vldr	s12, [r7, #12]
 80086e2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80087f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80086e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80086fe:	e021      	b.n	8008744 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	ee07 3a90 	vmov	s15, r3
 8008706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800870a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008800 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800870e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008712:	4b37      	ldr	r3, [pc, #220]	; (80087f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008716:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800871a:	ee07 3a90 	vmov	s15, r3
 800871e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008722:	ed97 6a03 	vldr	s12, [r7, #12]
 8008726:	eddf 5a34 	vldr	s11, [pc, #208]	; 80087f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800872a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800872e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008732:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008736:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800873a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800873e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008742:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008744:	4b2a      	ldr	r3, [pc, #168]	; (80087f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008748:	0a5b      	lsrs	r3, r3, #9
 800874a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800874e:	ee07 3a90 	vmov	s15, r3
 8008752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008756:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800875a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800875e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008762:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008766:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800876a:	ee17 2a90 	vmov	r2, s15
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008772:	4b1f      	ldr	r3, [pc, #124]	; (80087f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008776:	0c1b      	lsrs	r3, r3, #16
 8008778:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800877c:	ee07 3a90 	vmov	s15, r3
 8008780:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008784:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008788:	ee37 7a87 	vadd.f32	s14, s15, s14
 800878c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008790:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008794:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008798:	ee17 2a90 	vmov	r2, s15
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80087a0:	4b13      	ldr	r3, [pc, #76]	; (80087f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80087a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087a4:	0e1b      	lsrs	r3, r3, #24
 80087a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087aa:	ee07 3a90 	vmov	s15, r3
 80087ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80087b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80087ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80087be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087c6:	ee17 2a90 	vmov	r2, s15
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80087ce:	e008      	b.n	80087e2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2200      	movs	r2, #0
 80087d4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2200      	movs	r2, #0
 80087da:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2200      	movs	r2, #0
 80087e0:	609a      	str	r2, [r3, #8]
}
 80087e2:	bf00      	nop
 80087e4:	3724      	adds	r7, #36	; 0x24
 80087e6:	46bd      	mov	sp, r7
 80087e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ec:	4770      	bx	lr
 80087ee:	bf00      	nop
 80087f0:	58024400 	.word	0x58024400
 80087f4:	03d09000 	.word	0x03d09000
 80087f8:	46000000 	.word	0x46000000
 80087fc:	4c742400 	.word	0x4c742400
 8008800:	4a742400 	.word	0x4a742400
 8008804:	4bbebc20 	.word	0x4bbebc20

08008808 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8008808:	b480      	push	{r7}
 800880a:	b089      	sub	sp, #36	; 0x24
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008810:	4ba0      	ldr	r3, [pc, #640]	; (8008a94 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008814:	f003 0303 	and.w	r3, r3, #3
 8008818:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800881a:	4b9e      	ldr	r3, [pc, #632]	; (8008a94 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800881c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800881e:	091b      	lsrs	r3, r3, #4
 8008820:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008824:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008826:	4b9b      	ldr	r3, [pc, #620]	; (8008a94 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800882a:	f003 0301 	and.w	r3, r3, #1
 800882e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008830:	4b98      	ldr	r3, [pc, #608]	; (8008a94 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008834:	08db      	lsrs	r3, r3, #3
 8008836:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800883a:	693a      	ldr	r2, [r7, #16]
 800883c:	fb02 f303 	mul.w	r3, r2, r3
 8008840:	ee07 3a90 	vmov	s15, r3
 8008844:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008848:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800884c:	697b      	ldr	r3, [r7, #20]
 800884e:	2b00      	cmp	r3, #0
 8008850:	f000 8111 	beq.w	8008a76 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008854:	69bb      	ldr	r3, [r7, #24]
 8008856:	2b02      	cmp	r3, #2
 8008858:	f000 8083 	beq.w	8008962 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800885c:	69bb      	ldr	r3, [r7, #24]
 800885e:	2b02      	cmp	r3, #2
 8008860:	f200 80a1 	bhi.w	80089a6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008864:	69bb      	ldr	r3, [r7, #24]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d003      	beq.n	8008872 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800886a:	69bb      	ldr	r3, [r7, #24]
 800886c:	2b01      	cmp	r3, #1
 800886e:	d056      	beq.n	800891e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008870:	e099      	b.n	80089a6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008872:	4b88      	ldr	r3, [pc, #544]	; (8008a94 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f003 0320 	and.w	r3, r3, #32
 800887a:	2b00      	cmp	r3, #0
 800887c:	d02d      	beq.n	80088da <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800887e:	4b85      	ldr	r3, [pc, #532]	; (8008a94 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	08db      	lsrs	r3, r3, #3
 8008884:	f003 0303 	and.w	r3, r3, #3
 8008888:	4a83      	ldr	r2, [pc, #524]	; (8008a98 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800888a:	fa22 f303 	lsr.w	r3, r2, r3
 800888e:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	ee07 3a90 	vmov	s15, r3
 8008896:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	ee07 3a90 	vmov	s15, r3
 80088a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088a8:	4b7a      	ldr	r3, [pc, #488]	; (8008a94 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80088aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088b0:	ee07 3a90 	vmov	s15, r3
 80088b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088b8:	ed97 6a03 	vldr	s12, [r7, #12]
 80088bc:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008a9c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80088c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088d4:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80088d8:	e087      	b.n	80089ea <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	ee07 3a90 	vmov	s15, r3
 80088e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088e4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008aa0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80088e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088ec:	4b69      	ldr	r3, [pc, #420]	; (8008a94 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80088ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088f4:	ee07 3a90 	vmov	s15, r3
 80088f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088fc:	ed97 6a03 	vldr	s12, [r7, #12]
 8008900:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008a9c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008904:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008908:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800890c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008910:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008914:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008918:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800891c:	e065      	b.n	80089ea <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	ee07 3a90 	vmov	s15, r3
 8008924:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008928:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008aa4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800892c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008930:	4b58      	ldr	r3, [pc, #352]	; (8008a94 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008934:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008938:	ee07 3a90 	vmov	s15, r3
 800893c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008940:	ed97 6a03 	vldr	s12, [r7, #12]
 8008944:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008a9c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008948:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800894c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008950:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008954:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008958:	ee67 7a27 	vmul.f32	s15, s14, s15
 800895c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008960:	e043      	b.n	80089ea <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008962:	697b      	ldr	r3, [r7, #20]
 8008964:	ee07 3a90 	vmov	s15, r3
 8008968:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800896c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008aa8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008970:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008974:	4b47      	ldr	r3, [pc, #284]	; (8008a94 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008978:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800897c:	ee07 3a90 	vmov	s15, r3
 8008980:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008984:	ed97 6a03 	vldr	s12, [r7, #12]
 8008988:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008a9c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800898c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008990:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008994:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008998:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800899c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089a0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80089a4:	e021      	b.n	80089ea <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80089a6:	697b      	ldr	r3, [r7, #20]
 80089a8:	ee07 3a90 	vmov	s15, r3
 80089ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089b0:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8008aa0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80089b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089b8:	4b36      	ldr	r3, [pc, #216]	; (8008a94 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80089ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089c0:	ee07 3a90 	vmov	s15, r3
 80089c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089c8:	ed97 6a03 	vldr	s12, [r7, #12]
 80089cc:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008a9c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80089d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089e4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80089e8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80089ea:	4b2a      	ldr	r3, [pc, #168]	; (8008a94 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80089ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089ee:	0a5b      	lsrs	r3, r3, #9
 80089f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089f4:	ee07 3a90 	vmov	s15, r3
 80089f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a00:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a04:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a10:	ee17 2a90 	vmov	r2, s15
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8008a18:	4b1e      	ldr	r3, [pc, #120]	; (8008a94 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a1c:	0c1b      	lsrs	r3, r3, #16
 8008a1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a22:	ee07 3a90 	vmov	s15, r3
 8008a26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a32:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a3e:	ee17 2a90 	vmov	r2, s15
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8008a46:	4b13      	ldr	r3, [pc, #76]	; (8008a94 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a4a:	0e1b      	lsrs	r3, r3, #24
 8008a4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a50:	ee07 3a90 	vmov	s15, r3
 8008a54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a5c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a60:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a6c:	ee17 2a90 	vmov	r2, s15
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008a74:	e008      	b.n	8008a88 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2200      	movs	r2, #0
 8008a86:	609a      	str	r2, [r3, #8]
}
 8008a88:	bf00      	nop
 8008a8a:	3724      	adds	r7, #36	; 0x24
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a92:	4770      	bx	lr
 8008a94:	58024400 	.word	0x58024400
 8008a98:	03d09000 	.word	0x03d09000
 8008a9c:	46000000 	.word	0x46000000
 8008aa0:	4c742400 	.word	0x4c742400
 8008aa4:	4a742400 	.word	0x4a742400
 8008aa8:	4bbebc20 	.word	0x4bbebc20

08008aac <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b084      	sub	sp, #16
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
 8008ab4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008aba:	4b53      	ldr	r3, [pc, #332]	; (8008c08 <RCCEx_PLL2_Config+0x15c>)
 8008abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008abe:	f003 0303 	and.w	r3, r3, #3
 8008ac2:	2b03      	cmp	r3, #3
 8008ac4:	d101      	bne.n	8008aca <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	e099      	b.n	8008bfe <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008aca:	4b4f      	ldr	r3, [pc, #316]	; (8008c08 <RCCEx_PLL2_Config+0x15c>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	4a4e      	ldr	r2, [pc, #312]	; (8008c08 <RCCEx_PLL2_Config+0x15c>)
 8008ad0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008ad4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ad6:	f7f9 f8ed 	bl	8001cb4 <HAL_GetTick>
 8008ada:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008adc:	e008      	b.n	8008af0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008ade:	f7f9 f8e9 	bl	8001cb4 <HAL_GetTick>
 8008ae2:	4602      	mov	r2, r0
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	1ad3      	subs	r3, r2, r3
 8008ae8:	2b02      	cmp	r3, #2
 8008aea:	d901      	bls.n	8008af0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008aec:	2303      	movs	r3, #3
 8008aee:	e086      	b.n	8008bfe <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008af0:	4b45      	ldr	r3, [pc, #276]	; (8008c08 <RCCEx_PLL2_Config+0x15c>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d1f0      	bne.n	8008ade <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008afc:	4b42      	ldr	r3, [pc, #264]	; (8008c08 <RCCEx_PLL2_Config+0x15c>)
 8008afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b00:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	031b      	lsls	r3, r3, #12
 8008b0a:	493f      	ldr	r1, [pc, #252]	; (8008c08 <RCCEx_PLL2_Config+0x15c>)
 8008b0c:	4313      	orrs	r3, r2
 8008b0e:	628b      	str	r3, [r1, #40]	; 0x28
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	685b      	ldr	r3, [r3, #4]
 8008b14:	3b01      	subs	r3, #1
 8008b16:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	689b      	ldr	r3, [r3, #8]
 8008b1e:	3b01      	subs	r3, #1
 8008b20:	025b      	lsls	r3, r3, #9
 8008b22:	b29b      	uxth	r3, r3
 8008b24:	431a      	orrs	r2, r3
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	68db      	ldr	r3, [r3, #12]
 8008b2a:	3b01      	subs	r3, #1
 8008b2c:	041b      	lsls	r3, r3, #16
 8008b2e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008b32:	431a      	orrs	r2, r3
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	691b      	ldr	r3, [r3, #16]
 8008b38:	3b01      	subs	r3, #1
 8008b3a:	061b      	lsls	r3, r3, #24
 8008b3c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008b40:	4931      	ldr	r1, [pc, #196]	; (8008c08 <RCCEx_PLL2_Config+0x15c>)
 8008b42:	4313      	orrs	r3, r2
 8008b44:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008b46:	4b30      	ldr	r3, [pc, #192]	; (8008c08 <RCCEx_PLL2_Config+0x15c>)
 8008b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b4a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	695b      	ldr	r3, [r3, #20]
 8008b52:	492d      	ldr	r1, [pc, #180]	; (8008c08 <RCCEx_PLL2_Config+0x15c>)
 8008b54:	4313      	orrs	r3, r2
 8008b56:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008b58:	4b2b      	ldr	r3, [pc, #172]	; (8008c08 <RCCEx_PLL2_Config+0x15c>)
 8008b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b5c:	f023 0220 	bic.w	r2, r3, #32
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	699b      	ldr	r3, [r3, #24]
 8008b64:	4928      	ldr	r1, [pc, #160]	; (8008c08 <RCCEx_PLL2_Config+0x15c>)
 8008b66:	4313      	orrs	r3, r2
 8008b68:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008b6a:	4b27      	ldr	r3, [pc, #156]	; (8008c08 <RCCEx_PLL2_Config+0x15c>)
 8008b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b6e:	4a26      	ldr	r2, [pc, #152]	; (8008c08 <RCCEx_PLL2_Config+0x15c>)
 8008b70:	f023 0310 	bic.w	r3, r3, #16
 8008b74:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008b76:	4b24      	ldr	r3, [pc, #144]	; (8008c08 <RCCEx_PLL2_Config+0x15c>)
 8008b78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b7a:	4b24      	ldr	r3, [pc, #144]	; (8008c0c <RCCEx_PLL2_Config+0x160>)
 8008b7c:	4013      	ands	r3, r2
 8008b7e:	687a      	ldr	r2, [r7, #4]
 8008b80:	69d2      	ldr	r2, [r2, #28]
 8008b82:	00d2      	lsls	r2, r2, #3
 8008b84:	4920      	ldr	r1, [pc, #128]	; (8008c08 <RCCEx_PLL2_Config+0x15c>)
 8008b86:	4313      	orrs	r3, r2
 8008b88:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008b8a:	4b1f      	ldr	r3, [pc, #124]	; (8008c08 <RCCEx_PLL2_Config+0x15c>)
 8008b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b8e:	4a1e      	ldr	r2, [pc, #120]	; (8008c08 <RCCEx_PLL2_Config+0x15c>)
 8008b90:	f043 0310 	orr.w	r3, r3, #16
 8008b94:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d106      	bne.n	8008baa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008b9c:	4b1a      	ldr	r3, [pc, #104]	; (8008c08 <RCCEx_PLL2_Config+0x15c>)
 8008b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ba0:	4a19      	ldr	r2, [pc, #100]	; (8008c08 <RCCEx_PLL2_Config+0x15c>)
 8008ba2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008ba6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008ba8:	e00f      	b.n	8008bca <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	2b01      	cmp	r3, #1
 8008bae:	d106      	bne.n	8008bbe <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008bb0:	4b15      	ldr	r3, [pc, #84]	; (8008c08 <RCCEx_PLL2_Config+0x15c>)
 8008bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bb4:	4a14      	ldr	r2, [pc, #80]	; (8008c08 <RCCEx_PLL2_Config+0x15c>)
 8008bb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008bba:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008bbc:	e005      	b.n	8008bca <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008bbe:	4b12      	ldr	r3, [pc, #72]	; (8008c08 <RCCEx_PLL2_Config+0x15c>)
 8008bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bc2:	4a11      	ldr	r2, [pc, #68]	; (8008c08 <RCCEx_PLL2_Config+0x15c>)
 8008bc4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008bc8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008bca:	4b0f      	ldr	r3, [pc, #60]	; (8008c08 <RCCEx_PLL2_Config+0x15c>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	4a0e      	ldr	r2, [pc, #56]	; (8008c08 <RCCEx_PLL2_Config+0x15c>)
 8008bd0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008bd4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008bd6:	f7f9 f86d 	bl	8001cb4 <HAL_GetTick>
 8008bda:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008bdc:	e008      	b.n	8008bf0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008bde:	f7f9 f869 	bl	8001cb4 <HAL_GetTick>
 8008be2:	4602      	mov	r2, r0
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	1ad3      	subs	r3, r2, r3
 8008be8:	2b02      	cmp	r3, #2
 8008bea:	d901      	bls.n	8008bf0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008bec:	2303      	movs	r3, #3
 8008bee:	e006      	b.n	8008bfe <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008bf0:	4b05      	ldr	r3, [pc, #20]	; (8008c08 <RCCEx_PLL2_Config+0x15c>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d0f0      	beq.n	8008bde <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	3710      	adds	r7, #16
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}
 8008c06:	bf00      	nop
 8008c08:	58024400 	.word	0x58024400
 8008c0c:	ffff0007 	.word	0xffff0007

08008c10 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b084      	sub	sp, #16
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
 8008c18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008c1e:	4b53      	ldr	r3, [pc, #332]	; (8008d6c <RCCEx_PLL3_Config+0x15c>)
 8008c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c22:	f003 0303 	and.w	r3, r3, #3
 8008c26:	2b03      	cmp	r3, #3
 8008c28:	d101      	bne.n	8008c2e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	e099      	b.n	8008d62 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008c2e:	4b4f      	ldr	r3, [pc, #316]	; (8008d6c <RCCEx_PLL3_Config+0x15c>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	4a4e      	ldr	r2, [pc, #312]	; (8008d6c <RCCEx_PLL3_Config+0x15c>)
 8008c34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008c38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c3a:	f7f9 f83b 	bl	8001cb4 <HAL_GetTick>
 8008c3e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008c40:	e008      	b.n	8008c54 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008c42:	f7f9 f837 	bl	8001cb4 <HAL_GetTick>
 8008c46:	4602      	mov	r2, r0
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	1ad3      	subs	r3, r2, r3
 8008c4c:	2b02      	cmp	r3, #2
 8008c4e:	d901      	bls.n	8008c54 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008c50:	2303      	movs	r3, #3
 8008c52:	e086      	b.n	8008d62 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008c54:	4b45      	ldr	r3, [pc, #276]	; (8008d6c <RCCEx_PLL3_Config+0x15c>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d1f0      	bne.n	8008c42 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008c60:	4b42      	ldr	r3, [pc, #264]	; (8008d6c <RCCEx_PLL3_Config+0x15c>)
 8008c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c64:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	051b      	lsls	r3, r3, #20
 8008c6e:	493f      	ldr	r1, [pc, #252]	; (8008d6c <RCCEx_PLL3_Config+0x15c>)
 8008c70:	4313      	orrs	r3, r2
 8008c72:	628b      	str	r3, [r1, #40]	; 0x28
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	685b      	ldr	r3, [r3, #4]
 8008c78:	3b01      	subs	r3, #1
 8008c7a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	689b      	ldr	r3, [r3, #8]
 8008c82:	3b01      	subs	r3, #1
 8008c84:	025b      	lsls	r3, r3, #9
 8008c86:	b29b      	uxth	r3, r3
 8008c88:	431a      	orrs	r2, r3
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	68db      	ldr	r3, [r3, #12]
 8008c8e:	3b01      	subs	r3, #1
 8008c90:	041b      	lsls	r3, r3, #16
 8008c92:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008c96:	431a      	orrs	r2, r3
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	691b      	ldr	r3, [r3, #16]
 8008c9c:	3b01      	subs	r3, #1
 8008c9e:	061b      	lsls	r3, r3, #24
 8008ca0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008ca4:	4931      	ldr	r1, [pc, #196]	; (8008d6c <RCCEx_PLL3_Config+0x15c>)
 8008ca6:	4313      	orrs	r3, r2
 8008ca8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008caa:	4b30      	ldr	r3, [pc, #192]	; (8008d6c <RCCEx_PLL3_Config+0x15c>)
 8008cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	695b      	ldr	r3, [r3, #20]
 8008cb6:	492d      	ldr	r1, [pc, #180]	; (8008d6c <RCCEx_PLL3_Config+0x15c>)
 8008cb8:	4313      	orrs	r3, r2
 8008cba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008cbc:	4b2b      	ldr	r3, [pc, #172]	; (8008d6c <RCCEx_PLL3_Config+0x15c>)
 8008cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cc0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	699b      	ldr	r3, [r3, #24]
 8008cc8:	4928      	ldr	r1, [pc, #160]	; (8008d6c <RCCEx_PLL3_Config+0x15c>)
 8008cca:	4313      	orrs	r3, r2
 8008ccc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008cce:	4b27      	ldr	r3, [pc, #156]	; (8008d6c <RCCEx_PLL3_Config+0x15c>)
 8008cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cd2:	4a26      	ldr	r2, [pc, #152]	; (8008d6c <RCCEx_PLL3_Config+0x15c>)
 8008cd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008cd8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008cda:	4b24      	ldr	r3, [pc, #144]	; (8008d6c <RCCEx_PLL3_Config+0x15c>)
 8008cdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008cde:	4b24      	ldr	r3, [pc, #144]	; (8008d70 <RCCEx_PLL3_Config+0x160>)
 8008ce0:	4013      	ands	r3, r2
 8008ce2:	687a      	ldr	r2, [r7, #4]
 8008ce4:	69d2      	ldr	r2, [r2, #28]
 8008ce6:	00d2      	lsls	r2, r2, #3
 8008ce8:	4920      	ldr	r1, [pc, #128]	; (8008d6c <RCCEx_PLL3_Config+0x15c>)
 8008cea:	4313      	orrs	r3, r2
 8008cec:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008cee:	4b1f      	ldr	r3, [pc, #124]	; (8008d6c <RCCEx_PLL3_Config+0x15c>)
 8008cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cf2:	4a1e      	ldr	r2, [pc, #120]	; (8008d6c <RCCEx_PLL3_Config+0x15c>)
 8008cf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008cf8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d106      	bne.n	8008d0e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008d00:	4b1a      	ldr	r3, [pc, #104]	; (8008d6c <RCCEx_PLL3_Config+0x15c>)
 8008d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d04:	4a19      	ldr	r2, [pc, #100]	; (8008d6c <RCCEx_PLL3_Config+0x15c>)
 8008d06:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008d0a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008d0c:	e00f      	b.n	8008d2e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	2b01      	cmp	r3, #1
 8008d12:	d106      	bne.n	8008d22 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008d14:	4b15      	ldr	r3, [pc, #84]	; (8008d6c <RCCEx_PLL3_Config+0x15c>)
 8008d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d18:	4a14      	ldr	r2, [pc, #80]	; (8008d6c <RCCEx_PLL3_Config+0x15c>)
 8008d1a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008d1e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008d20:	e005      	b.n	8008d2e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008d22:	4b12      	ldr	r3, [pc, #72]	; (8008d6c <RCCEx_PLL3_Config+0x15c>)
 8008d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d26:	4a11      	ldr	r2, [pc, #68]	; (8008d6c <RCCEx_PLL3_Config+0x15c>)
 8008d28:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008d2c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008d2e:	4b0f      	ldr	r3, [pc, #60]	; (8008d6c <RCCEx_PLL3_Config+0x15c>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	4a0e      	ldr	r2, [pc, #56]	; (8008d6c <RCCEx_PLL3_Config+0x15c>)
 8008d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d3a:	f7f8 ffbb 	bl	8001cb4 <HAL_GetTick>
 8008d3e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008d40:	e008      	b.n	8008d54 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008d42:	f7f8 ffb7 	bl	8001cb4 <HAL_GetTick>
 8008d46:	4602      	mov	r2, r0
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	1ad3      	subs	r3, r2, r3
 8008d4c:	2b02      	cmp	r3, #2
 8008d4e:	d901      	bls.n	8008d54 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008d50:	2303      	movs	r3, #3
 8008d52:	e006      	b.n	8008d62 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008d54:	4b05      	ldr	r3, [pc, #20]	; (8008d6c <RCCEx_PLL3_Config+0x15c>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d0f0      	beq.n	8008d42 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d62:	4618      	mov	r0, r3
 8008d64:	3710      	adds	r7, #16
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}
 8008d6a:	bf00      	nop
 8008d6c:	58024400 	.word	0x58024400
 8008d70:	ffff0007 	.word	0xffff0007

08008d74 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b086      	sub	sp, #24
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	60f8      	str	r0, [r7, #12]
 8008d7c:	60b9      	str	r1, [r7, #8]
 8008d7e:	607a      	str	r2, [r7, #4]
 8008d80:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	2b02      	cmp	r3, #2
 8008d86:	d904      	bls.n	8008d92 <HAL_SAI_InitProtocol+0x1e>
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	3b03      	subs	r3, #3
 8008d8c:	2b01      	cmp	r3, #1
 8008d8e:	d812      	bhi.n	8008db6 <HAL_SAI_InitProtocol+0x42>
 8008d90:	e008      	b.n	8008da4 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	687a      	ldr	r2, [r7, #4]
 8008d96:	68b9      	ldr	r1, [r7, #8]
 8008d98:	68f8      	ldr	r0, [r7, #12]
 8008d9a:	f000 fd0d 	bl	80097b8 <SAI_InitI2S>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	75fb      	strb	r3, [r7, #23]
      break;
 8008da2:	e00b      	b.n	8008dbc <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	687a      	ldr	r2, [r7, #4]
 8008da8:	68b9      	ldr	r1, [r7, #8]
 8008daa:	68f8      	ldr	r0, [r7, #12]
 8008dac:	f000 fdb6 	bl	800991c <SAI_InitPCM>
 8008db0:	4603      	mov	r3, r0
 8008db2:	75fb      	strb	r3, [r7, #23]
      break;
 8008db4:	e002      	b.n	8008dbc <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 8008db6:	2301      	movs	r3, #1
 8008db8:	75fb      	strb	r3, [r7, #23]
      break;
 8008dba:	bf00      	nop
  }

  if (status == HAL_OK)
 8008dbc:	7dfb      	ldrb	r3, [r7, #23]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d104      	bne.n	8008dcc <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 8008dc2:	68f8      	ldr	r0, [r7, #12]
 8008dc4:	f000 f808 	bl	8008dd8 <HAL_SAI_Init>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8008dcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	3718      	adds	r7, #24
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}
	...

08008dd8 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b08a      	sub	sp, #40	; 0x28
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d101      	bne.n	8008dea <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8008de6:	2301      	movs	r3, #1
 8008de8:	e1fb      	b.n	80091e2 <HAL_SAI_Init+0x40a>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008df0:	2b01      	cmp	r3, #1
 8008df2:	d113      	bne.n	8008e1c <HAL_SAI_Init+0x44>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	4a96      	ldr	r2, [pc, #600]	; (8009054 <HAL_SAI_Init+0x27c>)
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	d004      	beq.n	8008e08 <HAL_SAI_Init+0x30>
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	4a95      	ldr	r2, [pc, #596]	; (8009058 <HAL_SAI_Init+0x280>)
 8008e04:	4293      	cmp	r3, r2
 8008e06:	d107      	bne.n	8008e18 <HAL_SAI_Init+0x40>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8008e0c:	2b01      	cmp	r3, #1
 8008e0e:	d103      	bne.n	8008e18 <HAL_SAI_Init+0x40>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d001      	beq.n	8008e1c <HAL_SAI_Init+0x44>
    {
      return HAL_ERROR;
 8008e18:	2301      	movs	r3, #1
 8008e1a:	e1e2      	b.n	80091e2 <HAL_SAI_Init+0x40a>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	4a8c      	ldr	r2, [pc, #560]	; (8009054 <HAL_SAI_Init+0x27c>)
 8008e22:	4293      	cmp	r3, r2
 8008e24:	d004      	beq.n	8008e30 <HAL_SAI_Init+0x58>
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	4a8c      	ldr	r2, [pc, #560]	; (800905c <HAL_SAI_Init+0x284>)
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	d102      	bne.n	8008e36 <HAL_SAI_Init+0x5e>
  {
    SaiBaseAddress = SAI1;
 8008e30:	4b8b      	ldr	r3, [pc, #556]	; (8009060 <HAL_SAI_Init+0x288>)
 8008e32:	61bb      	str	r3, [r7, #24]
 8008e34:	e00e      	b.n	8008e54 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI3;
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	4a87      	ldr	r2, [pc, #540]	; (8009058 <HAL_SAI_Init+0x280>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d004      	beq.n	8008e4a <HAL_SAI_Init+0x72>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	4a87      	ldr	r2, [pc, #540]	; (8009064 <HAL_SAI_Init+0x28c>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d102      	bne.n	8008e50 <HAL_SAI_Init+0x78>
  {
    SaiBaseAddress = SAI4;
 8008e4a:	4b87      	ldr	r3, [pc, #540]	; (8009068 <HAL_SAI_Init+0x290>)
 8008e4c:	61bb      	str	r3, [r7, #24]
 8008e4e:	e001      	b.n	8008e54 <HAL_SAI_Init+0x7c>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8008e50:	2301      	movs	r3, #1
 8008e52:	e1c6      	b.n	80091e2 <HAL_SAI_Init+0x40a>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8008e5a:	b2db      	uxtb	r3, r3
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d106      	bne.n	8008e6e <HAL_SAI_Init+0x96>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2200      	movs	r2, #0
 8008e64:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f001 f9c7 	bl	800a1fc <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f000 fe0e 	bl	8009a90 <SAI_Disable>
 8008e74:	4603      	mov	r3, r0
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d001      	beq.n	8008e7e <HAL_SAI_Init+0xa6>
  {
    return HAL_ERROR;
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	e1b1      	b.n	80091e2 <HAL_SAI_Init+0x40a>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2202      	movs	r2, #2
 8008e82:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	68db      	ldr	r3, [r3, #12]
 8008e8a:	2b02      	cmp	r3, #2
 8008e8c:	d00c      	beq.n	8008ea8 <HAL_SAI_Init+0xd0>
 8008e8e:	2b02      	cmp	r3, #2
 8008e90:	d80d      	bhi.n	8008eae <HAL_SAI_Init+0xd6>
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d002      	beq.n	8008e9c <HAL_SAI_Init+0xc4>
 8008e96:	2b01      	cmp	r3, #1
 8008e98:	d003      	beq.n	8008ea2 <HAL_SAI_Init+0xca>
 8008e9a:	e008      	b.n	8008eae <HAL_SAI_Init+0xd6>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8008ea0:	e008      	b.n	8008eb4 <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8008ea2:	2310      	movs	r3, #16
 8008ea4:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8008ea6:	e005      	b.n	8008eb4 <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8008ea8:	2320      	movs	r3, #32
 8008eaa:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8008eac:	e002      	b.n	8008eb4 <HAL_SAI_Init+0xdc>
    default:
      tmpregisterGCR = 0;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8008eb2:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	689b      	ldr	r3, [r3, #8]
 8008eb8:	2b05      	cmp	r3, #5
 8008eba:	d822      	bhi.n	8008f02 <HAL_SAI_Init+0x12a>
 8008ebc:	a201      	add	r2, pc, #4	; (adr r2, 8008ec4 <HAL_SAI_Init+0xec>)
 8008ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ec2:	bf00      	nop
 8008ec4:	08008edd 	.word	0x08008edd
 8008ec8:	08008ee3 	.word	0x08008ee3
 8008ecc:	08008eeb 	.word	0x08008eeb
 8008ed0:	08008f03 	.word	0x08008f03
 8008ed4:	08008f03 	.word	0x08008f03
 8008ed8:	08008ef3 	.word	0x08008ef3
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8008edc:	2300      	movs	r3, #0
 8008ede:	61fb      	str	r3, [r7, #28]
      break;
 8008ee0:	e012      	b.n	8008f08 <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8008ee2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ee6:	61fb      	str	r3, [r7, #28]
      break;
 8008ee8:	e00e      	b.n	8008f08 <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008eea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008eee:	61fb      	str	r3, [r7, #28]
      break;
 8008ef0:	e00a      	b.n	8008f08 <HAL_SAI_Init+0x130>
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
      break;
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008ef2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008ef6:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8008ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008efa:	f043 0303 	orr.w	r3, r3, #3
 8008efe:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8008f00:	e002      	b.n	8008f08 <HAL_SAI_Init+0x130>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 8008f02:	2300      	movs	r3, #0
 8008f04:	61fb      	str	r3, [r7, #28]
      break;
 8008f06:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 8008f08:	69bb      	ldr	r3, [r7, #24]
 8008f0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f0c:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6a1b      	ldr	r3, [r3, #32]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	f000 8084 	beq.w	8009020 <HAL_SAI_Init+0x248>
  {
    uint32_t freq = 0;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4a4c      	ldr	r2, [pc, #304]	; (8009054 <HAL_SAI_Init+0x27c>)
 8008f22:	4293      	cmp	r3, r2
 8008f24:	d004      	beq.n	8008f30 <HAL_SAI_Init+0x158>
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	4a4c      	ldr	r2, [pc, #304]	; (800905c <HAL_SAI_Init+0x284>)
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	d104      	bne.n	8008f3a <HAL_SAI_Init+0x162>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8008f30:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008f34:	f7fe fd86 	bl	8007a44 <HAL_RCCEx_GetPeriphCLKFreq>
 8008f38:	6178      	str	r0, [r7, #20]
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	4a46      	ldr	r2, [pc, #280]	; (8009058 <HAL_SAI_Init+0x280>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d104      	bne.n	8008f4e <HAL_SAI_Init+0x176>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8008f44:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8008f48:	f7fe fd7c 	bl	8007a44 <HAL_RCCEx_GetPeriphCLKFreq>
 8008f4c:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	4a44      	ldr	r2, [pc, #272]	; (8009064 <HAL_SAI_Init+0x28c>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d104      	bne.n	8008f62 <HAL_SAI_Init+0x18a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8008f58:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008f5c:	f7fe fd72 	bl	8007a44 <HAL_RCCEx_GetPeriphCLKFreq>
 8008f60:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	699b      	ldr	r3, [r3, #24]
 8008f66:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008f6a:	d120      	bne.n	8008fae <HAL_SAI_Init+0x1d6>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f70:	2b04      	cmp	r3, #4
 8008f72:	d102      	bne.n	8008f7a <HAL_SAI_Init+0x1a2>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 8008f74:	2340      	movs	r3, #64	; 0x40
 8008f76:	60fb      	str	r3, [r7, #12]
 8008f78:	e00a      	b.n	8008f90 <HAL_SAI_Init+0x1b8>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f7e:	2b08      	cmp	r3, #8
 8008f80:	d103      	bne.n	8008f8a <HAL_SAI_Init+0x1b2>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 8008f82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f86:	60fb      	str	r3, [r7, #12]
 8008f88:	e002      	b.n	8008f90 <HAL_SAI_Init+0x1b8>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f8e:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8008f90:	697a      	ldr	r2, [r7, #20]
 8008f92:	4613      	mov	r3, r2
 8008f94:	009b      	lsls	r3, r3, #2
 8008f96:	4413      	add	r3, r2
 8008f98:	005b      	lsls	r3, r3, #1
 8008f9a:	4619      	mov	r1, r3
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	6a1b      	ldr	r3, [r3, #32]
 8008fa0:	68fa      	ldr	r2, [r7, #12]
 8008fa2:	fb02 f303 	mul.w	r3, r2, r3
 8008fa6:	fbb1 f3f3 	udiv	r3, r1, r3
 8008faa:	613b      	str	r3, [r7, #16]
 8008fac:	e017      	b.n	8008fde <HAL_SAI_Init+0x206>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fb2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008fb6:	d101      	bne.n	8008fbc <HAL_SAI_Init+0x1e4>
 8008fb8:	2302      	movs	r3, #2
 8008fba:	e000      	b.n	8008fbe <HAL_SAI_Init+0x1e6>
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8008fc0:	697a      	ldr	r2, [r7, #20]
 8008fc2:	4613      	mov	r3, r2
 8008fc4:	009b      	lsls	r3, r3, #2
 8008fc6:	4413      	add	r3, r2
 8008fc8:	005b      	lsls	r3, r3, #1
 8008fca:	4619      	mov	r1, r3
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6a1b      	ldr	r3, [r3, #32]
 8008fd0:	68ba      	ldr	r2, [r7, #8]
 8008fd2:	fb02 f303 	mul.w	r3, r2, r3
 8008fd6:	021b      	lsls	r3, r3, #8
 8008fd8:	fbb1 f3f3 	udiv	r3, r1, r3
 8008fdc:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8008fde:	693b      	ldr	r3, [r7, #16]
 8008fe0:	4a22      	ldr	r2, [pc, #136]	; (800906c <HAL_SAI_Init+0x294>)
 8008fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8008fe6:	08da      	lsrs	r2, r3, #3
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8008fec:	6939      	ldr	r1, [r7, #16]
 8008fee:	4b1f      	ldr	r3, [pc, #124]	; (800906c <HAL_SAI_Init+0x294>)
 8008ff0:	fba3 2301 	umull	r2, r3, r3, r1
 8008ff4:	08da      	lsrs	r2, r3, #3
 8008ff6:	4613      	mov	r3, r2
 8008ff8:	009b      	lsls	r3, r3, #2
 8008ffa:	4413      	add	r3, r2
 8008ffc:	005b      	lsls	r3, r3, #1
 8008ffe:	1aca      	subs	r2, r1, r3
 8009000:	2a08      	cmp	r2, #8
 8009002:	d904      	bls.n	800900e <HAL_SAI_Init+0x236>
    {
      hsai->Init.Mckdiv += 1U;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009008:	1c5a      	adds	r2, r3, #1
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009012:	2b04      	cmp	r3, #4
 8009014:	d104      	bne.n	8009020 <HAL_SAI_Init+0x248>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800901a:	085a      	lsrs	r2, r3, #1
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	685b      	ldr	r3, [r3, #4]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d003      	beq.n	8009030 <HAL_SAI_Init+0x258>
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	685b      	ldr	r3, [r3, #4]
 800902c:	2b02      	cmp	r3, #2
 800902e:	d109      	bne.n	8009044 <HAL_SAI_Init+0x26c>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009034:	2b01      	cmp	r3, #1
 8009036:	d101      	bne.n	800903c <HAL_SAI_Init+0x264>
 8009038:	2300      	movs	r3, #0
 800903a:	e001      	b.n	8009040 <HAL_SAI_Init+0x268>
 800903c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009040:	623b      	str	r3, [r7, #32]
 8009042:	e017      	b.n	8009074 <HAL_SAI_Init+0x29c>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009048:	2b01      	cmp	r3, #1
 800904a:	d111      	bne.n	8009070 <HAL_SAI_Init+0x298>
 800904c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009050:	e00f      	b.n	8009072 <HAL_SAI_Init+0x29a>
 8009052:	bf00      	nop
 8009054:	40015804 	.word	0x40015804
 8009058:	58005404 	.word	0x58005404
 800905c:	40015824 	.word	0x40015824
 8009060:	40015800 	.word	0x40015800
 8009064:	58005424 	.word	0x58005424
 8009068:	58005400 	.word	0x58005400
 800906c:	cccccccd 	.word	0xcccccccd
 8009070:	2300      	movs	r3, #0
 8009072:	623b      	str	r3, [r7, #32]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                            hsai->Init.MckOverSampling);
  }
#else /* SAI_VER_V2_1*/
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	6819      	ldr	r1, [r3, #0]
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681a      	ldr	r2, [r3, #0]
 800907e:	4b5b      	ldr	r3, [pc, #364]	; (80091ec <HAL_SAI_Init+0x414>)
 8009080:	400b      	ands	r3, r1
 8009082:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	6819      	ldr	r1, [r3, #0]
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	685a      	ldr	r2, [r3, #4]
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009092:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009098:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800909e:	431a      	orrs	r2, r3
 80090a0:	6a3b      	ldr	r3, [r7, #32]
 80090a2:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 80090a4:	69fb      	ldr	r3, [r7, #28]
 80090a6:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                          ckstr_bits | syncen_bits |                             \
 80090ac:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	695b      	ldr	r3, [r3, #20]
 80090b2:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80090b8:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090be:	051b      	lsls	r3, r3, #20
 80090c0:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80090c6:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	691b      	ldr	r3, [r3, #16]
 80090cc:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	430a      	orrs	r2, r1
 80090d4:	601a      	str	r2, [r3, #0]
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	6859      	ldr	r1, [r3, #4]
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681a      	ldr	r2, [r3, #0]
 80090e0:	4b43      	ldr	r3, [pc, #268]	; (80091f0 <HAL_SAI_Init+0x418>)
 80090e2:	400b      	ands	r3, r1
 80090e4:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	6859      	ldr	r1, [r3, #4]
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	69da      	ldr	r2, [r3, #28]
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090f4:	431a      	orrs	r2, r3
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090fa:	431a      	orrs	r2, r3
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	430a      	orrs	r2, r1
 8009102:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	6899      	ldr	r1, [r3, #8]
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681a      	ldr	r2, [r3, #0]
 800910e:	4b39      	ldr	r3, [pc, #228]	; (80091f4 <HAL_SAI_Init+0x41c>)
 8009110:	400b      	ands	r3, r1
 8009112:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	6899      	ldr	r1, [r3, #8]
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800911e:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8009124:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 800912a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 8009130:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009136:	3b01      	subs	r3, #1
 8009138:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800913a:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	430a      	orrs	r2, r1
 8009142:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	68d9      	ldr	r1, [r3, #12]
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681a      	ldr	r2, [r3, #0]
 800914e:	f24f 0320 	movw	r3, #61472	; 0xf020
 8009152:	400b      	ands	r3, r1
 8009154:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	68d9      	ldr	r1, [r3, #12]
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009164:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800916a:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800916c:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009172:	3b01      	subs	r3, #1
 8009174:	021b      	lsls	r3, r3, #8
 8009176:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	430a      	orrs	r2, r1
 800917e:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	4a1c      	ldr	r2, [pc, #112]	; (80091f8 <HAL_SAI_Init+0x420>)
 8009186:	4293      	cmp	r3, r2
 8009188:	d004      	beq.n	8009194 <HAL_SAI_Init+0x3bc>
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	4a1b      	ldr	r2, [pc, #108]	; (80091fc <HAL_SAI_Init+0x424>)
 8009190:	4293      	cmp	r3, r2
 8009192:	d119      	bne.n	80091c8 <HAL_SAI_Init+0x3f0>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8009194:	69bb      	ldr	r3, [r7, #24]
 8009196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009198:	f023 0201 	bic.w	r2, r3, #1
 800919c:	69bb      	ldr	r3, [r7, #24]
 800919e:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80091a6:	2b01      	cmp	r3, #1
 80091a8:	d10e      	bne.n	80091c8 <HAL_SAI_Init+0x3f0>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091b2:	3b01      	subs	r3, #1
 80091b4:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80091b6:	431a      	orrs	r2, r3
 80091b8:	69bb      	ldr	r3, [r7, #24]
 80091ba:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 80091bc:	69bb      	ldr	r3, [r7, #24]
 80091be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091c0:	f043 0201 	orr.w	r2, r3, #1
 80091c4:	69bb      	ldr	r3, [r7, #24]
 80091c6:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2200      	movs	r2, #0
 80091cc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2201      	movs	r2, #1
 80091d4:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2200      	movs	r2, #0
 80091dc:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 80091e0:	2300      	movs	r3, #0
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3728      	adds	r7, #40	; 0x28
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}
 80091ea:	bf00      	nop
 80091ec:	f005c010 	.word	0xf005c010
 80091f0:	ffff1ff0 	.word	0xffff1ff0
 80091f4:	fff88000 	.word	0xfff88000
 80091f8:	40015804 	.word	0x40015804
 80091fc:	58005404 	.word	0x58005404

08009200 <HAL_SAI_Abort>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b084      	sub	sp, #16
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009208:	2300      	movs	r3, #0
 800920a:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8009212:	2b01      	cmp	r3, #1
 8009214:	d101      	bne.n	800921a <HAL_SAI_Abort+0x1a>
 8009216:	2302      	movs	r3, #2
 8009218:	e07d      	b.n	8009316 <HAL_SAI_Abort+0x116>
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2201      	movs	r2, #1
 800921e:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  /* Check SAI DMA is enabled or not */
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800922c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009230:	d14f      	bne.n	80092d2 <HAL_SAI_Abort+0xd2>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	681a      	ldr	r2, [r3, #0]
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8009240:	601a      	str	r2, [r3, #0]

    /* Abort the SAI Tx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX)&& (hsai->hdmatx != NULL))
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8009248:	b2db      	uxtb	r3, r3
 800924a:	2b12      	cmp	r3, #18
 800924c:	d11d      	bne.n	800928a <HAL_SAI_Abort+0x8a>
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009254:	2b00      	cmp	r3, #0
 8009256:	d018      	beq.n	800928a <HAL_SAI_Abort+0x8a>
    {
      if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800925e:	4618      	mov	r0, r3
 8009260:	f7fa f8e8 	bl	8003434 <HAL_DMA_Abort>
 8009264:	4603      	mov	r3, r0
 8009266:	2b00      	cmp	r3, #0
 8009268:	d00f      	beq.n	800928a <HAL_SAI_Abort+0x8a>
      {
        /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009272:	2b80      	cmp	r3, #128	; 0x80
 8009274:	d009      	beq.n	800928a <HAL_SAI_Abort+0x8a>
        {
          status = HAL_ERROR;
 8009276:	2301      	movs	r3, #1
 8009278:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009280:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        }
      }
    }

    /* Abort the SAI Rx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8009290:	b2db      	uxtb	r3, r3
 8009292:	2b22      	cmp	r3, #34	; 0x22
 8009294:	d11d      	bne.n	80092d2 <HAL_SAI_Abort+0xd2>
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800929c:	2b00      	cmp	r3, #0
 800929e:	d018      	beq.n	80092d2 <HAL_SAI_Abort+0xd2>
    {
      if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092a6:	4618      	mov	r0, r3
 80092a8:	f7fa f8c4 	bl	8003434 <HAL_DMA_Abort>
 80092ac:	4603      	mov	r3, r0
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d00f      	beq.n	80092d2 <HAL_SAI_Abort+0xd2>
      {
        /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092ba:	2b80      	cmp	r3, #128	; 0x80
 80092bc:	d009      	beq.n	80092d2 <HAL_SAI_Abort+0xd2>
        {
          status = HAL_ERROR;
 80092be:	2301      	movs	r3, #1
 80092c0:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80092c8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      }
    }
  }

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	2200      	movs	r2, #0
 80092d8:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80092e2:	619a      	str	r2, [r3, #24]

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f000 fbd3 	bl	8009a90 <SAI_Disable>
 80092ea:	4603      	mov	r3, r0
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d001      	beq.n	80092f4 <HAL_SAI_Abort+0xf4>
  {
    status = HAL_ERROR;
 80092f0:	2301      	movs	r3, #1
 80092f2:	73fb      	strb	r3, [r7, #15]
  }

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	685a      	ldr	r2, [r3, #4]
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f042 0208 	orr.w	r2, r2, #8
 8009302:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2201      	movs	r2, #1
 8009308:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2200      	movs	r2, #0
 8009310:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return status;
 8009314:	7bfb      	ldrb	r3, [r7, #15]
}
 8009316:	4618      	mov	r0, r3
 8009318:	3710      	adds	r7, #16
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}
	...

08009320 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b084      	sub	sp, #16
 8009324:	af00      	add	r7, sp, #0
 8009326:	60f8      	str	r0, [r7, #12]
 8009328:	60b9      	str	r1, [r7, #8]
 800932a:	4613      	mov	r3, r2
 800932c:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 800932e:	68bb      	ldr	r3, [r7, #8]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d002      	beq.n	800933a <HAL_SAI_Receive_DMA+0x1a>
 8009334:	88fb      	ldrh	r3, [r7, #6]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d101      	bne.n	800933e <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800933a:	2301      	movs	r3, #1
 800933c:	e079      	b.n	8009432 <HAL_SAI_Receive_DMA+0x112>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8009344:	b2db      	uxtb	r3, r3
 8009346:	2b01      	cmp	r3, #1
 8009348:	d172      	bne.n	8009430 <HAL_SAI_Receive_DMA+0x110>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8009350:	2b01      	cmp	r3, #1
 8009352:	d101      	bne.n	8009358 <HAL_SAI_Receive_DMA+0x38>
 8009354:	2302      	movs	r3, #2
 8009356:	e06c      	b.n	8009432 <HAL_SAI_Receive_DMA+0x112>
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	2201      	movs	r2, #1
 800935c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	68ba      	ldr	r2, [r7, #8]
 8009364:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	88fa      	ldrh	r2, [r7, #6]
 800936a:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	88fa      	ldrh	r2, [r7, #6]
 8009372:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	2200      	movs	r2, #0
 800937a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	2222      	movs	r2, #34	; 0x22
 8009382:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800938c:	4a2b      	ldr	r2, [pc, #172]	; (800943c <HAL_SAI_Receive_DMA+0x11c>)
 800938e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009396:	4a2a      	ldr	r2, [pc, #168]	; (8009440 <HAL_SAI_Receive_DMA+0x120>)
 8009398:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093a0:	4a28      	ldr	r2, [pc, #160]	; (8009444 <HAL_SAI_Receive_DMA+0x124>)
 80093a2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093aa:	2200      	movs	r2, #0
 80093ac:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	331c      	adds	r3, #28
 80093ba:	4619      	mov	r1, r3
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80093c0:	461a      	mov	r2, r3
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 80093c8:	f7f9 fdca 	bl	8002f60 <HAL_DMA_Start_IT>
 80093cc:	4603      	mov	r3, r0
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d005      	beq.n	80093de <HAL_SAI_Receive_DMA+0xbe>
    {
      __HAL_UNLOCK(hsai);
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	2200      	movs	r2, #0
 80093d6:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 80093da:	2301      	movs	r3, #1
 80093dc:	e029      	b.n	8009432 <HAL_SAI_Receive_DMA+0x112>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80093de:	2100      	movs	r1, #0
 80093e0:	68f8      	ldr	r0, [r7, #12]
 80093e2:	f000 fb1d 	bl	8009a20 <SAI_InterruptFlag>
 80093e6:	4601      	mov	r1, r0
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	691a      	ldr	r2, [r3, #16]
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	430a      	orrs	r2, r1
 80093f4:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	681a      	ldr	r2, [r3, #0]
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009404:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009410:	2b00      	cmp	r3, #0
 8009412:	d107      	bne.n	8009424 <HAL_SAI_Receive_DMA+0x104>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	681a      	ldr	r2, [r3, #0]
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8009422:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	2200      	movs	r2, #0
 8009428:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 800942c:	2300      	movs	r3, #0
 800942e:	e000      	b.n	8009432 <HAL_SAI_Receive_DMA+0x112>
  }
  else
  {
    return HAL_BUSY;
 8009430:	2302      	movs	r3, #2
  }
}
 8009432:	4618      	mov	r0, r3
 8009434:	3710      	adds	r7, #16
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}
 800943a:	bf00      	nop
 800943c:	08009b65 	.word	0x08009b65
 8009440:	08009b05 	.word	0x08009b05
 8009444:	08009b81 	.word	0x08009b81

08009448 <HAL_SAI_IRQHandler>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b086      	sub	sp, #24
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
  if (hsai->State != HAL_SAI_STATE_RESET)
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8009456:	b2db      	uxtb	r3, r3
 8009458:	2b00      	cmp	r3, #0
 800945a:	f000 81a7 	beq.w	80097ac <HAL_SAI_IRQHandler+0x364>
  {
    uint32_t itflags = hsai->Instance->SR;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	695b      	ldr	r3, [r3, #20]
 8009464:	617b      	str	r3, [r7, #20]
    uint32_t itsources = hsai->Instance->IMR;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	691b      	ldr	r3, [r3, #16]
 800946c:	613b      	str	r3, [r7, #16]
    uint32_t cr1config = hsai->Instance->CR1;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	60fb      	str	r3, [r7, #12]
    uint32_t tmperror;

    /* SAI Fifo request interrupt occurred ------------------------------------*/
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 8009476:	697b      	ldr	r3, [r7, #20]
 8009478:	f003 0308 	and.w	r3, r3, #8
 800947c:	2b00      	cmp	r3, #0
 800947e:	d00a      	beq.n	8009496 <HAL_SAI_IRQHandler+0x4e>
 8009480:	693b      	ldr	r3, [r7, #16]
 8009482:	f003 0308 	and.w	r3, r3, #8
 8009486:	2b00      	cmp	r3, #0
 8009488:	d005      	beq.n	8009496 <HAL_SAI_IRQHandler+0x4e>
    {
      hsai->InterruptServiceRoutine(hsai);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	4798      	blx	r3
 8009494:	e18a      	b.n	80097ac <HAL_SAI_IRQHandler+0x364>
    }
    /* SAI Overrun error interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 8009496:	697b      	ldr	r3, [r7, #20]
 8009498:	f003 0301 	and.w	r3, r3, #1
 800949c:	2b00      	cmp	r3, #0
 800949e:	d01e      	beq.n	80094de <HAL_SAI_IRQHandler+0x96>
 80094a0:	693b      	ldr	r3, [r7, #16]
 80094a2:	f003 0301 	and.w	r3, r3, #1
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d019      	beq.n	80094de <HAL_SAI_IRQHandler+0x96>
    {
      /* Clear the SAI Overrun flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	2201      	movs	r2, #1
 80094b0:	619a      	str	r2, [r3, #24]
      /* Get the SAI error code */
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80094b8:	b2db      	uxtb	r3, r3
 80094ba:	2b22      	cmp	r3, #34	; 0x22
 80094bc:	d101      	bne.n	80094c2 <HAL_SAI_IRQHandler+0x7a>
 80094be:	2301      	movs	r3, #1
 80094c0:	e000      	b.n	80094c4 <HAL_SAI_IRQHandler+0x7c>
 80094c2:	2302      	movs	r3, #2
 80094c4:	60bb      	str	r3, [r7, #8]
      /* Change the SAI error code */
      hsai->ErrorCode |= tmperror;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	431a      	orrs	r2, r3
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f7f7 f864 	bl	80005a4 <HAL_SAI_ErrorCallback>
 80094dc:	e166      	b.n	80097ac <HAL_SAI_IRQHandler+0x364>
#endif
    }
    /* SAI mutedet interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	f003 0302 	and.w	r3, r3, #2
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d013      	beq.n	8009510 <HAL_SAI_IRQHandler+0xc8>
 80094e8:	693b      	ldr	r3, [r7, #16]
 80094ea:	f003 0302 	and.w	r3, r3, #2
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d00e      	beq.n	8009510 <HAL_SAI_IRQHandler+0xc8>
    {
      /* Clear the SAI mutedet flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	2202      	movs	r2, #2
 80094f8:	619a      	str	r2, [r3, #24]
      /* call the call back function */
      if (hsai->mutecallback != NULL)
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009500:	2b00      	cmp	r3, #0
 8009502:	f000 8153 	beq.w	80097ac <HAL_SAI_IRQHandler+0x364>
      {
        /* inform the user that an RX mute event has been detected */
        hsai->mutecallback();
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800950c:	4798      	blx	r3
      if (hsai->mutecallback != NULL)
 800950e:	e14d      	b.n	80097ac <HAL_SAI_IRQHandler+0x364>
      }
    }
    /* SAI AFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 8009510:	697b      	ldr	r3, [r7, #20]
 8009512:	f003 0320 	and.w	r3, r3, #32
 8009516:	2b00      	cmp	r3, #0
 8009518:	d05b      	beq.n	80095d2 <HAL_SAI_IRQHandler+0x18a>
 800951a:	693b      	ldr	r3, [r7, #16]
 800951c:	f003 0320 	and.w	r3, r3, #32
 8009520:	2b00      	cmp	r3, #0
 8009522:	d056      	beq.n	80095d2 <HAL_SAI_IRQHandler+0x18a>
    {
      /* Clear the SAI AFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	2220      	movs	r2, #32
 800952a:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009532:	f043 0204 	orr.w	r2, r3, #4
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009542:	2b00      	cmp	r3, #0
 8009544:	d03e      	beq.n	80095c4 <HAL_SAI_IRQHandler+0x17c>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800954c:	2b00      	cmp	r3, #0
 800954e:	d018      	beq.n	8009582 <HAL_SAI_IRQHandler+0x13a>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009556:	4a97      	ldr	r2, [pc, #604]	; (80097b4 <HAL_SAI_IRQHandler+0x36c>)
 8009558:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009560:	4618      	mov	r0, r3
 8009562:	f7fa fa85 	bl	8003a70 <HAL_DMA_Abort_IT>
 8009566:	4603      	mov	r3, r0
 8009568:	2b00      	cmp	r3, #0
 800956a:	d00a      	beq.n	8009582 <HAL_SAI_IRQHandler+0x13a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009572:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f7f7 f811 	bl	80005a4 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009588:	2b00      	cmp	r3, #0
 800958a:	f000 810a 	beq.w	80097a2 <HAL_SAI_IRQHandler+0x35a>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009594:	4a87      	ldr	r2, [pc, #540]	; (80097b4 <HAL_SAI_IRQHandler+0x36c>)
 8009596:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800959e:	4618      	mov	r0, r3
 80095a0:	f7fa fa66 	bl	8003a70 <HAL_DMA_Abort_IT>
 80095a4:	4603      	mov	r3, r0
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	f000 80fb 	beq.w	80097a2 <HAL_SAI_IRQHandler+0x35a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80095b2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f7f6 fff1 	bl	80005a4 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80095c2:	e0ee      	b.n	80097a2 <HAL_SAI_IRQHandler+0x35a>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	f7ff fe1b 	bl	8009200 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f7f6 ffea 	bl	80005a4 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80095d0:	e0e7      	b.n	80097a2 <HAL_SAI_IRQHandler+0x35a>
#endif
      }
    }
    /* SAI LFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 80095d2:	697b      	ldr	r3, [r7, #20]
 80095d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d05b      	beq.n	8009694 <HAL_SAI_IRQHandler+0x24c>
 80095dc:	693b      	ldr	r3, [r7, #16]
 80095de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d056      	beq.n	8009694 <HAL_SAI_IRQHandler+0x24c>
    {
      /* Clear the SAI LFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	2240      	movs	r2, #64	; 0x40
 80095ec:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80095f4:	f043 0208 	orr.w	r2, r3, #8
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009604:	2b00      	cmp	r3, #0
 8009606:	d03e      	beq.n	8009686 <HAL_SAI_IRQHandler+0x23e>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800960e:	2b00      	cmp	r3, #0
 8009610:	d018      	beq.n	8009644 <HAL_SAI_IRQHandler+0x1fc>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009618:	4a66      	ldr	r2, [pc, #408]	; (80097b4 <HAL_SAI_IRQHandler+0x36c>)
 800961a:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009622:	4618      	mov	r0, r3
 8009624:	f7fa fa24 	bl	8003a70 <HAL_DMA_Abort_IT>
 8009628:	4603      	mov	r3, r0
 800962a:	2b00      	cmp	r3, #0
 800962c:	d00a      	beq.n	8009644 <HAL_SAI_IRQHandler+0x1fc>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009634:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f7f6 ffb0 	bl	80005a4 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800964a:	2b00      	cmp	r3, #0
 800964c:	f000 80ab 	beq.w	80097a6 <HAL_SAI_IRQHandler+0x35e>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009656:	4a57      	ldr	r2, [pc, #348]	; (80097b4 <HAL_SAI_IRQHandler+0x36c>)
 8009658:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009660:	4618      	mov	r0, r3
 8009662:	f7fa fa05 	bl	8003a70 <HAL_DMA_Abort_IT>
 8009666:	4603      	mov	r3, r0
 8009668:	2b00      	cmp	r3, #0
 800966a:	f000 809c 	beq.w	80097a6 <HAL_SAI_IRQHandler+0x35e>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009674:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f7f6 ff90 	bl	80005a4 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8009684:	e08f      	b.n	80097a6 <HAL_SAI_IRQHandler+0x35e>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	f7ff fdba 	bl	8009200 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 800968c:	6878      	ldr	r0, [r7, #4]
 800968e:	f7f6 ff89 	bl	80005a4 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8009692:	e088      	b.n	80097a6 <HAL_SAI_IRQHandler+0x35e>
#endif
      }
    }
    /* SAI WCKCFG interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 8009694:	697b      	ldr	r3, [r7, #20]
 8009696:	f003 0304 	and.w	r3, r3, #4
 800969a:	2b00      	cmp	r3, #0
 800969c:	d067      	beq.n	800976e <HAL_SAI_IRQHandler+0x326>
 800969e:	693b      	ldr	r3, [r7, #16]
 80096a0:	f003 0304 	and.w	r3, r3, #4
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d062      	beq.n	800976e <HAL_SAI_IRQHandler+0x326>
    {
      /* Clear the SAI WCKCFG flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	2204      	movs	r2, #4
 80096ae:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80096b6:	f043 0220 	orr.w	r2, r3, #32
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d03c      	beq.n	8009744 <HAL_SAI_IRQHandler+0x2fc>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d018      	beq.n	8009706 <HAL_SAI_IRQHandler+0x2be>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80096da:	4a36      	ldr	r2, [pc, #216]	; (80097b4 <HAL_SAI_IRQHandler+0x36c>)
 80096dc:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80096e4:	4618      	mov	r0, r3
 80096e6:	f7fa f9c3 	bl	8003a70 <HAL_DMA_Abort_IT>
 80096ea:	4603      	mov	r3, r0
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d00a      	beq.n	8009706 <HAL_SAI_IRQHandler+0x2be>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80096f6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f7f6 ff4f 	bl	80005a4 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800970c:	2b00      	cmp	r3, #0
 800970e:	d04c      	beq.n	80097aa <HAL_SAI_IRQHandler+0x362>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009716:	4a27      	ldr	r2, [pc, #156]	; (80097b4 <HAL_SAI_IRQHandler+0x36c>)
 8009718:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009720:	4618      	mov	r0, r3
 8009722:	f7fa f9a5 	bl	8003a70 <HAL_DMA_Abort_IT>
 8009726:	4603      	mov	r3, r0
 8009728:	2b00      	cmp	r3, #0
 800972a:	d03e      	beq.n	80097aa <HAL_SAI_IRQHandler+0x362>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009732:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800973c:	6878      	ldr	r0, [r7, #4]
 800973e:	f7f6 ff31 	bl	80005a4 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8009742:	e032      	b.n	80097aa <HAL_SAI_IRQHandler+0x362>
      }
      else
      {
        /* If WCKCFG occurs, SAI audio block is automatically disabled */
        /* Disable all interrupts and clear all flags */
        hsai->Instance->IMR = 0U;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	2200      	movs	r2, #0
 800974a:	611a      	str	r2, [r3, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009754:	619a      	str	r2, [r3, #24]
        /* Set the SAI state to ready to be able to start again the process */
        hsai->State = HAL_SAI_STATE_READY;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2201      	movs	r2, #1
 800975a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

        /* Initialize XferCount */
        hsai->XferCount = 0U;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2200      	movs	r2, #0
 8009762:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

        /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f7f6 ff1c 	bl	80005a4 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800976c:	e01d      	b.n	80097aa <HAL_SAI_IRQHandler+0x362>
#endif
      }
    }
    /* SAI CNRDY interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 800976e:	697b      	ldr	r3, [r7, #20]
 8009770:	f003 0310 	and.w	r3, r3, #16
 8009774:	2b00      	cmp	r3, #0
 8009776:	d019      	beq.n	80097ac <HAL_SAI_IRQHandler+0x364>
 8009778:	693b      	ldr	r3, [r7, #16]
 800977a:	f003 0310 	and.w	r3, r3, #16
 800977e:	2b00      	cmp	r3, #0
 8009780:	d014      	beq.n	80097ac <HAL_SAI_IRQHandler+0x364>
    {
      /* Clear the SAI CNRDY flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	2210      	movs	r2, #16
 8009788:	619a      	str	r2, [r3, #24]
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009790:	f043 0210 	orr.w	r2, r3, #16
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 800979a:	6878      	ldr	r0, [r7, #4]
 800979c:	f7f6 ff02 	bl	80005a4 <HAL_SAI_ErrorCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
 80097a0:	e004      	b.n	80097ac <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80097a2:	bf00      	nop
 80097a4:	e002      	b.n	80097ac <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80097a6:	bf00      	nop
 80097a8:	e000      	b.n	80097ac <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80097aa:	bf00      	nop
}
 80097ac:	bf00      	nop
 80097ae:	3718      	adds	r7, #24
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}
 80097b4:	08009bdf 	.word	0x08009bdf

080097b8 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80097b8:	b480      	push	{r7}
 80097ba:	b087      	sub	sp, #28
 80097bc:	af00      	add	r7, sp, #0
 80097be:	60f8      	str	r0, [r7, #12]
 80097c0:	60b9      	str	r1, [r7, #8]
 80097c2:	607a      	str	r2, [r7, #4]
 80097c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80097c6:	2300      	movs	r3, #0
 80097c8:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	2200      	movs	r2, #0
 80097ce:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	2200      	movs	r2, #0
 80097d4:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	685b      	ldr	r3, [r3, #4]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d003      	beq.n	80097e6 <SAI_InitI2S+0x2e>
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	685b      	ldr	r3, [r3, #4]
 80097e2:	2b02      	cmp	r3, #2
 80097e4:	d103      	bne.n	80097ee <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	2200      	movs	r2, #0
 80097ea:	651a      	str	r2, [r3, #80]	; 0x50
 80097ec:	e002      	b.n	80097f4 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	2201      	movs	r2, #1
 80097f2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80097fa:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009802:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	2200      	movs	r2, #0
 8009808:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	683a      	ldr	r2, [r7, #0]
 800980e:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	f003 0301 	and.w	r3, r3, #1
 8009816:	2b00      	cmp	r3, #0
 8009818:	d001      	beq.n	800981e <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800981a:	2301      	movs	r3, #1
 800981c:	e077      	b.n	800990e <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d107      	bne.n	8009834 <SAI_InitI2S+0x7c>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	2200      	movs	r2, #0
 8009828:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8009830:	665a      	str	r2, [r3, #100]	; 0x64
 8009832:	e006      	b.n	8009842 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800983a:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	2200      	movs	r2, #0
 8009840:	665a      	str	r2, [r3, #100]	; 0x64
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2b03      	cmp	r3, #3
 8009846:	d84f      	bhi.n	80098e8 <SAI_InitI2S+0x130>
 8009848:	a201      	add	r2, pc, #4	; (adr r2, 8009850 <SAI_InitI2S+0x98>)
 800984a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800984e:	bf00      	nop
 8009850:	08009861 	.word	0x08009861
 8009854:	08009883 	.word	0x08009883
 8009858:	080098a5 	.word	0x080098a5
 800985c:	080098c7 	.word	0x080098c7

  /* Frame definition */
  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	2280      	movs	r2, #128	; 0x80
 8009864:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	085b      	lsrs	r3, r3, #1
 800986a:	015a      	lsls	r2, r3, #5
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	085b      	lsrs	r3, r3, #1
 8009874:	011a      	lsls	r2, r3, #4
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	2240      	movs	r2, #64	; 0x40
 800987e:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8009880:	e035      	b.n	80098ee <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	2280      	movs	r2, #128	; 0x80
 8009886:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	085b      	lsrs	r3, r3, #1
 800988c:	019a      	lsls	r2, r3, #6
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	085b      	lsrs	r3, r3, #1
 8009896:	015a      	lsls	r2, r3, #5
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	2280      	movs	r2, #128	; 0x80
 80098a0:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80098a2:	e024      	b.n	80098ee <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	22c0      	movs	r2, #192	; 0xc0
 80098a8:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	085b      	lsrs	r3, r3, #1
 80098ae:	019a      	lsls	r2, r3, #6
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	085b      	lsrs	r3, r3, #1
 80098b8:	015a      	lsls	r2, r3, #5
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	2280      	movs	r2, #128	; 0x80
 80098c2:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80098c4:	e013      	b.n	80098ee <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	22e0      	movs	r2, #224	; 0xe0
 80098ca:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	085b      	lsrs	r3, r3, #1
 80098d0:	019a      	lsls	r2, r3, #6
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	085b      	lsrs	r3, r3, #1
 80098da:	015a      	lsls	r2, r3, #5
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	2280      	movs	r2, #128	; 0x80
 80098e4:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80098e6:	e002      	b.n	80098ee <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 80098e8:	2301      	movs	r3, #1
 80098ea:	75fb      	strb	r3, [r7, #23]
      break;
 80098ec:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 80098ee:	68bb      	ldr	r3, [r7, #8]
 80098f0:	2b02      	cmp	r3, #2
 80098f2:	d10b      	bne.n	800990c <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2b01      	cmp	r3, #1
 80098f8:	d102      	bne.n	8009900 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	2210      	movs	r2, #16
 80098fe:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2b02      	cmp	r3, #2
 8009904:	d102      	bne.n	800990c <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	2208      	movs	r2, #8
 800990a:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
 800990c:	7dfb      	ldrb	r3, [r7, #23]
}
 800990e:	4618      	mov	r0, r3
 8009910:	371c      	adds	r7, #28
 8009912:	46bd      	mov	sp, r7
 8009914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009918:	4770      	bx	lr
 800991a:	bf00      	nop

0800991c <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800991c:	b480      	push	{r7}
 800991e:	b087      	sub	sp, #28
 8009920:	af00      	add	r7, sp, #0
 8009922:	60f8      	str	r0, [r7, #12]
 8009924:	60b9      	str	r1, [r7, #8]
 8009926:	607a      	str	r2, [r7, #4]
 8009928:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800992a:	2300      	movs	r3, #0
 800992c:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	2200      	movs	r2, #0
 8009932:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	2200      	movs	r2, #0
 8009938:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	685b      	ldr	r3, [r3, #4]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d003      	beq.n	800994a <SAI_InitPCM+0x2e>
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	685b      	ldr	r3, [r3, #4]
 8009946:	2b02      	cmp	r3, #2
 8009948:	d103      	bne.n	8009952 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	2201      	movs	r2, #1
 800994e:	651a      	str	r2, [r3, #80]	; 0x50
 8009950:	e002      	b.n	8009958 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	2200      	movs	r2, #0
 8009956:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	2200      	movs	r2, #0
 800995c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009964:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800996c:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	2200      	movs	r2, #0
 8009972:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	683a      	ldr	r2, [r7, #0]
 8009978:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009980:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 8009982:	68bb      	ldr	r3, [r7, #8]
 8009984:	2b04      	cmp	r3, #4
 8009986:	d103      	bne.n	8009990 <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	2201      	movs	r2, #1
 800998c:	659a      	str	r2, [r3, #88]	; 0x58
 800998e:	e002      	b.n	8009996 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	220d      	movs	r2, #13
 8009994:	659a      	str	r2, [r3, #88]	; 0x58
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2b03      	cmp	r3, #3
 800999a:	d837      	bhi.n	8009a0c <SAI_InitPCM+0xf0>
 800999c:	a201      	add	r2, pc, #4	; (adr r2, 80099a4 <SAI_InitPCM+0x88>)
 800999e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099a2:	bf00      	nop
 80099a4:	080099b5 	.word	0x080099b5
 80099a8:	080099cb 	.word	0x080099cb
 80099ac:	080099e1 	.word	0x080099e1
 80099b0:	080099f7 	.word	0x080099f7
  }

  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	2280      	movs	r2, #128	; 0x80
 80099b8:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	011a      	lsls	r2, r3, #4
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	2240      	movs	r2, #64	; 0x40
 80099c6:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80099c8:	e023      	b.n	8009a12 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	2280      	movs	r2, #128	; 0x80
 80099ce:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	015a      	lsls	r2, r3, #5
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	2280      	movs	r2, #128	; 0x80
 80099dc:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80099de:	e018      	b.n	8009a12 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	22c0      	movs	r2, #192	; 0xc0
 80099e4:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	015a      	lsls	r2, r3, #5
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	2280      	movs	r2, #128	; 0x80
 80099f2:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80099f4:	e00d      	b.n	8009a12 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	22e0      	movs	r2, #224	; 0xe0
 80099fa:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	015a      	lsls	r2, r3, #5
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	2280      	movs	r2, #128	; 0x80
 8009a08:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8009a0a:	e002      	b.n	8009a12 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	75fb      	strb	r3, [r7, #23]
      break;
 8009a10:	bf00      	nop
  }

  return status;
 8009a12:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a14:	4618      	mov	r0, r3
 8009a16:	371c      	adds	r7, #28
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1e:	4770      	bx	lr

08009a20 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 8009a20:	b480      	push	{r7}
 8009a22:	b085      	sub	sp, #20
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
 8009a28:	460b      	mov	r3, r1
 8009a2a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8009a30:	78fb      	ldrb	r3, [r7, #3]
 8009a32:	2b01      	cmp	r3, #1
 8009a34:	d103      	bne.n	8009a3e <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	f043 0308 	orr.w	r3, r3, #8
 8009a3c:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a42:	2b08      	cmp	r3, #8
 8009a44:	d10b      	bne.n	8009a5e <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8009a4a:	2b03      	cmp	r3, #3
 8009a4c:	d003      	beq.n	8009a56 <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	685b      	ldr	r3, [r3, #4]
 8009a52:	2b01      	cmp	r3, #1
 8009a54:	d103      	bne.n	8009a5e <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	f043 0310 	orr.w	r3, r3, #16
 8009a5c:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	685b      	ldr	r3, [r3, #4]
 8009a62:	2b03      	cmp	r3, #3
 8009a64:	d003      	beq.n	8009a6e <SAI_InterruptFlag+0x4e>
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	685b      	ldr	r3, [r3, #4]
 8009a6a:	2b02      	cmp	r3, #2
 8009a6c:	d104      	bne.n	8009a78 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009a74:	60fb      	str	r3, [r7, #12]
 8009a76:	e003      	b.n	8009a80 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	f043 0304 	orr.w	r3, r3, #4
 8009a7e:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8009a80:	68fb      	ldr	r3, [r7, #12]
}
 8009a82:	4618      	mov	r0, r3
 8009a84:	3714      	adds	r7, #20
 8009a86:	46bd      	mov	sp, r7
 8009a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8c:	4770      	bx	lr
	...

08009a90 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8009a90:	b480      	push	{r7}
 8009a92:	b085      	sub	sp, #20
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8009a98:	4b18      	ldr	r3, [pc, #96]	; (8009afc <SAI_Disable+0x6c>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	4a18      	ldr	r2, [pc, #96]	; (8009b00 <SAI_Disable+0x70>)
 8009a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8009aa2:	0b1b      	lsrs	r3, r3, #12
 8009aa4:	009b      	lsls	r3, r3, #2
 8009aa6:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	681a      	ldr	r2, [r3, #0]
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009aba:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d10a      	bne.n	8009ad8 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009ac8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 8009ad2:	2303      	movs	r3, #3
 8009ad4:	72fb      	strb	r3, [r7, #11]
      break;
 8009ad6:	e009      	b.n	8009aec <SAI_Disable+0x5c>
    }
    count--;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	3b01      	subs	r3, #1
 8009adc:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d1e7      	bne.n	8009abc <SAI_Disable+0x2c>

  return status;
 8009aec:	7afb      	ldrb	r3, [r7, #11]
}
 8009aee:	4618      	mov	r0, r3
 8009af0:	3714      	adds	r7, #20
 8009af2:	46bd      	mov	sp, r7
 8009af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af8:	4770      	bx	lr
 8009afa:	bf00      	nop
 8009afc:	24000410 	.word	0x24000410
 8009b00:	95cbec1b 	.word	0x95cbec1b

08009b04 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b084      	sub	sp, #16
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b10:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	69db      	ldr	r3, [r3, #28]
 8009b16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b1a:	d01c      	beq.n	8009b56 <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	681a      	ldr	r2, [r3, #0]
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8009b2a:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	2200      	movs	r2, #0
 8009b30:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8009b34:	2100      	movs	r1, #0
 8009b36:	68f8      	ldr	r0, [r7, #12]
 8009b38:	f7ff ff72 	bl	8009a20 <SAI_InterruptFlag>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	43d9      	mvns	r1, r3
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	691a      	ldr	r2, [r3, #16]
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	400a      	ands	r2, r1
 8009b4c:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	2201      	movs	r2, #1
 8009b52:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8009b56:	68f8      	ldr	r0, [r7, #12]
 8009b58:	f7f7 fd77 	bl	800164a <HAL_SAI_RxCpltCallback>
#endif
}
 8009b5c:	bf00      	nop
 8009b5e:	3710      	adds	r7, #16
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bd80      	pop	{r7, pc}

08009b64 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b084      	sub	sp, #16
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b70:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8009b72:	68f8      	ldr	r0, [r7, #12]
 8009b74:	f7f7 fd5e 	bl	8001634 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 8009b78:	bf00      	nop
 8009b7a:	3710      	adds	r7, #16
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	bd80      	pop	{r7, pc}

08009b80 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b084      	sub	sp, #16
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b8c:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f7fb f8dc 	bl	8004d4c <HAL_DMA_GetError>
 8009b94:	4603      	mov	r3, r0
 8009b96:	2b02      	cmp	r3, #2
 8009b98:	d01d      	beq.n	8009bd6 <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009ba0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	681a      	ldr	r2, [r3, #0]
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8009bb8:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 8009bba:	68f8      	ldr	r0, [r7, #12]
 8009bbc:	f7ff ff68 	bl	8009a90 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	2201      	movs	r2, #1
 8009bc4:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	2200      	movs	r2, #0
 8009bcc:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 8009bd0:	68f8      	ldr	r0, [r7, #12]
 8009bd2:	f7f6 fce7 	bl	80005a4 <HAL_SAI_ErrorCallback>
#endif
  }
}
 8009bd6:	bf00      	nop
 8009bd8:	3710      	adds	r7, #16
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd80      	pop	{r7, pc}

08009bde <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8009bde:	b580      	push	{r7, lr}
 8009be0:	b084      	sub	sp, #16
 8009be2:	af00      	add	r7, sp, #0
 8009be4:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bea:	60fb      	str	r3, [r7, #12]

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	681a      	ldr	r2, [r3, #0]
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8009bfa:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	2200      	movs	r2, #0
 8009c02:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009c0c:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009c14:	2b20      	cmp	r3, #32
 8009c16:	d00a      	beq.n	8009c2e <SAI_DMAAbort+0x50>
  {
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 8009c18:	68f8      	ldr	r0, [r7, #12]
 8009c1a:	f7ff ff39 	bl	8009a90 <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	685a      	ldr	r2, [r3, #4]
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	f042 0208 	orr.w	r2, r2, #8
 8009c2c:	605a      	str	r2, [r3, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	2201      	movs	r2, #1
 8009c32:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	2200      	movs	r2, #0
 8009c3a:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8009c3e:	68f8      	ldr	r0, [r7, #12]
 8009c40:	f7f6 fcb0 	bl	80005a4 <HAL_SAI_ErrorCallback>
#endif
}
 8009c44:	bf00      	nop
 8009c46:	3710      	adds	r7, #16
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	bd80      	pop	{r7, pc}

08009c4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b0a8      	sub	sp, #160	; 0xa0
 8009c50:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009c52:	f7f7 ffa9 	bl	8001ba8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009c56:	f000 f84d 	bl	8009cf4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_CRC_Init();
 8009c5a:	f000 f8b9 	bl	8009dd0 <MX_CRC_Init>
  MX_GPIO_Init();
 8009c5e:	f000 f9df 	bl	800a020 <MX_GPIO_Init>
  MX_BDMA_Init();
 8009c62:	f000 f98d 	bl	8009f80 <MX_BDMA_Init>

  MX_SAI4_Init();
 8009c66:	f000 f92b 	bl	8009ec0 <MX_SAI4_Init>

  MX_PDM2PCM_Init();
 8009c6a:	f000 fa27 	bl	800a0bc <MX_PDM2PCM_Init>
  MX_DMA_Init();
 8009c6e:	f000 f9af 	bl	8009fd0 <MX_DMA_Init>
  MX_SAI1_Init();
 8009c72:	f000 f8ef 	bl	8009e54 <MX_SAI1_Init>
  //MX_DFSDM1_Init();

  /* USER CODE BEGIN 2 */
  BSP_LED_Init(LED_GREEN);
 8009c76:	2000      	movs	r0, #0
 8009c78:	f7f6 fb4a 	bl	8000310 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8009c7c:	2001      	movs	r0, #1
 8009c7e:	f7f6 fb47 	bl	8000310 <BSP_LED_Init>
  BSP_LED_Off(LED_GREEN);
 8009c82:	2000      	movs	r0, #0
 8009c84:	f7f6 fba2 	bl	80003cc <BSP_LED_Off>
  BSP_LED_Off(LED_RED);
 8009c88:	2001      	movs	r0, #1
 8009c8a:	f7f6 fb9f 	bl	80003cc <BSP_LED_Off>

  BSP_AUDIO_Init_t haudio_in;
  haudio_in.Device = AUDIO_IN_DEVICE_DIGITAL_MIC1;
 8009c8e:	2310      	movs	r3, #16
 8009c90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  haudio_in.ChannelsNbr = 1;
 8009c94:	2301      	movs	r3, #1
 8009c96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  haudio_in.SampleRate = AUDIO_FREQUENCY_16K;
 8009c9a:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 8009c9e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  haudio_in.BitsPerSample = AUDIO_RESOLUTION_8B;
 8009ca2:	2308      	movs	r3, #8
 8009ca4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  haudio_in.Volume = 50;
 8009ca8:	2332      	movs	r3, #50	; 0x32
 8009caa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  int32_t in_init_status = BSP_AUDIO_IN_Init(PDM, &haudio_in);
 8009cae:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009cb2:	4619      	mov	r1, r3
 8009cb4:	2001      	movs	r0, #1
 8009cb6:	f7f6 ff0f 	bl	8000ad8 <BSP_AUDIO_IN_Init>
 8009cba:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
  int32_t convert_status = BSP_AUDIO_IN_PDMToPCM_Init(PDM, SAI_AUDIO_FREQUENCY_16K, 1, 1);
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	2201      	movs	r2, #1
 8009cc2:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
 8009cc6:	2001      	movs	r0, #1
 8009cc8:	f7f7 fbe6 	bl	8001498 <BSP_AUDIO_IN_PDMToPCM_Init>
 8009ccc:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

  uint8_t mic_buffer[PDM_BUFFER_SIZE] = {0};
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	603b      	str	r3, [r7, #0]
 8009cd4:	1d3b      	adds	r3, r7, #4
 8009cd6:	227c      	movs	r2, #124	; 0x7c
 8009cd8:	2100      	movs	r1, #0
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f002 fbf2 	bl	800c4c4 <memset>
  // uint16_t speaker_buffer[PCM_BUFFER_SIZE] = {0};
  // @param  Instance  Audio IN instance: 0 for SAI, 1 for SAI PDM and 2 for DFSDM
  uint8_t record_status = BSP_AUDIO_IN_RecordPDM(PDM, mic_buffer, PDM_BUFFER_SIZE);
 8009ce0:	463b      	mov	r3, r7
 8009ce2:	2280      	movs	r2, #128	; 0x80
 8009ce4:	4619      	mov	r1, r3
 8009ce6:	2001      	movs	r0, #1
 8009ce8:	f7f7 fc7a 	bl	80015e0 <BSP_AUDIO_IN_RecordPDM>
 8009cec:	4603      	mov	r3, r0
 8009cee:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8009cf2:	e7fe      	b.n	8009cf2 <main+0xa6>

08009cf4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b09c      	sub	sp, #112	; 0x70
 8009cf8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009cfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009cfe:	224c      	movs	r2, #76	; 0x4c
 8009d00:	2100      	movs	r1, #0
 8009d02:	4618      	mov	r0, r3
 8009d04:	f002 fbde 	bl	800c4c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009d08:	1d3b      	adds	r3, r7, #4
 8009d0a:	2220      	movs	r2, #32
 8009d0c:	2100      	movs	r1, #0
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f002 fbd8 	bl	800c4c4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8009d14:	2004      	movs	r0, #4
 8009d16:	f7fb fee7 	bl	8005ae8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	603b      	str	r3, [r7, #0]
 8009d1e:	4b2b      	ldr	r3, [pc, #172]	; (8009dcc <SystemClock_Config+0xd8>)
 8009d20:	699b      	ldr	r3, [r3, #24]
 8009d22:	4a2a      	ldr	r2, [pc, #168]	; (8009dcc <SystemClock_Config+0xd8>)
 8009d24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009d28:	6193      	str	r3, [r2, #24]
 8009d2a:	4b28      	ldr	r3, [pc, #160]	; (8009dcc <SystemClock_Config+0xd8>)
 8009d2c:	699b      	ldr	r3, [r3, #24]
 8009d2e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009d32:	603b      	str	r3, [r7, #0]
 8009d34:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8009d36:	bf00      	nop
 8009d38:	4b24      	ldr	r3, [pc, #144]	; (8009dcc <SystemClock_Config+0xd8>)
 8009d3a:	699b      	ldr	r3, [r3, #24]
 8009d3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009d40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d44:	d1f8      	bne.n	8009d38 <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8009d46:	2302      	movs	r3, #2
 8009d48:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8009d4a:	2301      	movs	r3, #1
 8009d4c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8009d4e:	2340      	movs	r3, #64	; 0x40
 8009d50:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009d52:	2302      	movs	r3, #2
 8009d54:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8009d56:	2300      	movs	r3, #0
 8009d58:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8009d5a:	2304      	movs	r3, #4
 8009d5c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8009d5e:	2318      	movs	r3, #24
 8009d60:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8009d62:	2301      	movs	r3, #1
 8009d64:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 125;
 8009d66:	237d      	movs	r3, #125	; 0x7d
 8009d68:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8009d6a:	2302      	movs	r3, #2
 8009d6c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8009d6e:	230c      	movs	r3, #12
 8009d70:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8009d72:	2300      	movs	r3, #0
 8009d74:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8009d76:	2300      	movs	r3, #0
 8009d78:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009d7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009d7e:	4618      	mov	r0, r3
 8009d80:	f7fb ff0c 	bl	8005b9c <HAL_RCC_OscConfig>
 8009d84:	4603      	mov	r3, r0
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d001      	beq.n	8009d8e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8009d8a:	f000 f991 	bl	800a0b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009d8e:	233f      	movs	r3, #63	; 0x3f
 8009d90:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009d92:	2303      	movs	r3, #3
 8009d94:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8009d96:	2300      	movs	r3, #0
 8009d98:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8009d9a:	2308      	movs	r3, #8
 8009d9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8009d9e:	2340      	movs	r3, #64	; 0x40
 8009da0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8009da2:	2340      	movs	r3, #64	; 0x40
 8009da4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8009da6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009daa:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8009dac:	2340      	movs	r3, #64	; 0x40
 8009dae:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8009db0:	1d3b      	adds	r3, r7, #4
 8009db2:	2102      	movs	r1, #2
 8009db4:	4618      	mov	r0, r3
 8009db6:	f7fc fa9d 	bl	80062f4 <HAL_RCC_ClockConfig>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d001      	beq.n	8009dc4 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8009dc0:	f000 f976 	bl	800a0b0 <Error_Handler>
  }
}
 8009dc4:	bf00      	nop
 8009dc6:	3770      	adds	r7, #112	; 0x70
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	bd80      	pop	{r7, pc}
 8009dcc:	58024800 	.word	0x58024800

08009dd0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b082      	sub	sp, #8
 8009dd4:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8009dd6:	4b1c      	ldr	r3, [pc, #112]	; (8009e48 <MX_CRC_Init+0x78>)
 8009dd8:	4a1c      	ldr	r2, [pc, #112]	; (8009e4c <MX_CRC_Init+0x7c>)
 8009dda:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8009ddc:	4b1a      	ldr	r3, [pc, #104]	; (8009e48 <MX_CRC_Init+0x78>)
 8009dde:	2200      	movs	r2, #0
 8009de0:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8009de2:	4b19      	ldr	r3, [pc, #100]	; (8009e48 <MX_CRC_Init+0x78>)
 8009de4:	2200      	movs	r2, #0
 8009de6:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8009de8:	4b17      	ldr	r3, [pc, #92]	; (8009e48 <MX_CRC_Init+0x78>)
 8009dea:	2200      	movs	r2, #0
 8009dec:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8009dee:	4b16      	ldr	r3, [pc, #88]	; (8009e48 <MX_CRC_Init+0x78>)
 8009df0:	2200      	movs	r2, #0
 8009df2:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8009df4:	4b14      	ldr	r3, [pc, #80]	; (8009e48 <MX_CRC_Init+0x78>)
 8009df6:	2201      	movs	r2, #1
 8009df8:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8009dfa:	4813      	ldr	r0, [pc, #76]	; (8009e48 <MX_CRC_Init+0x78>)
 8009dfc:	f7f8 f876 	bl	8001eec <HAL_CRC_Init>
 8009e00:	4603      	mov	r3, r0
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d001      	beq.n	8009e0a <MX_CRC_Init+0x3a>
  {
    Error_Handler();
 8009e06:	f000 f953 	bl	800a0b0 <Error_Handler>
  }
  __HAL_CRC_DR_RESET(&hcrc);
 8009e0a:	4b0f      	ldr	r3, [pc, #60]	; (8009e48 <MX_CRC_Init+0x78>)
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	689a      	ldr	r2, [r3, #8]
 8009e10:	4b0d      	ldr	r3, [pc, #52]	; (8009e48 <MX_CRC_Init+0x78>)
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	f042 0201 	orr.w	r2, r2, #1
 8009e18:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN CRC_Init 2 */

  __HAL_RCC_CRC_CLK_ENABLE();
 8009e1a:	4b0d      	ldr	r3, [pc, #52]	; (8009e50 <MX_CRC_Init+0x80>)
 8009e1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009e20:	4a0b      	ldr	r2, [pc, #44]	; (8009e50 <MX_CRC_Init+0x80>)
 8009e22:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009e26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009e2a:	4b09      	ldr	r3, [pc, #36]	; (8009e50 <MX_CRC_Init+0x80>)
 8009e2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009e30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009e34:	607b      	str	r3, [r7, #4]
 8009e36:	687b      	ldr	r3, [r7, #4]
  HAL_CRC_MspInit(&hcrc);
 8009e38:	4803      	ldr	r0, [pc, #12]	; (8009e48 <MX_CRC_Init+0x78>)
 8009e3a:	f000 f983 	bl	800a144 <HAL_CRC_MspInit>

  /* USER CODE END CRC_Init 2 */

}
 8009e3e:	bf00      	nop
 8009e40:	3708      	adds	r7, #8
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bd80      	pop	{r7, pc}
 8009e46:	bf00      	nop
 8009e48:	24000cf8 	.word	0x24000cf8
 8009e4c:	58024c00 	.word	0x58024c00
 8009e50:	58024400 	.word	0x58024400

08009e54 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockB1.Instance = SAI1_Block_B;
 8009e58:	4b16      	ldr	r3, [pc, #88]	; (8009eb4 <MX_SAI1_Init+0x60>)
 8009e5a:	4a17      	ldr	r2, [pc, #92]	; (8009eb8 <MX_SAI1_Init+0x64>)
 8009e5c:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 8009e5e:	4b15      	ldr	r3, [pc, #84]	; (8009eb4 <MX_SAI1_Init+0x60>)
 8009e60:	2200      	movs	r2, #0
 8009e62:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 8009e64:	4b13      	ldr	r3, [pc, #76]	; (8009eb4 <MX_SAI1_Init+0x60>)
 8009e66:	2200      	movs	r2, #0
 8009e68:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8009e6a:	4b12      	ldr	r3, [pc, #72]	; (8009eb4 <MX_SAI1_Init+0x60>)
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8009e70:	4b10      	ldr	r3, [pc, #64]	; (8009eb4 <MX_SAI1_Init+0x60>)
 8009e72:	2200      	movs	r2, #0
 8009e74:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8009e76:	4b0f      	ldr	r3, [pc, #60]	; (8009eb4 <MX_SAI1_Init+0x60>)
 8009e78:	2200      	movs	r2, #0
 8009e7a:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8009e7c:	4b0d      	ldr	r3, [pc, #52]	; (8009eb4 <MX_SAI1_Init+0x60>)
 8009e7e:	4a0f      	ldr	r2, [pc, #60]	; (8009ebc <MX_SAI1_Init+0x68>)
 8009e80:	621a      	str	r2, [r3, #32]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8009e82:	4b0c      	ldr	r3, [pc, #48]	; (8009eb4 <MX_SAI1_Init+0x60>)
 8009e84:	2200      	movs	r2, #0
 8009e86:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8009e88:	4b0a      	ldr	r3, [pc, #40]	; (8009eb4 <MX_SAI1_Init+0x60>)
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8009e8e:	4b09      	ldr	r3, [pc, #36]	; (8009eb4 <MX_SAI1_Init+0x60>)
 8009e90:	2200      	movs	r2, #0
 8009e92:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8009e94:	4b07      	ldr	r3, [pc, #28]	; (8009eb4 <MX_SAI1_Init+0x60>)
 8009e96:	2200      	movs	r2, #0
 8009e98:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8009e9a:	2302      	movs	r3, #2
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	2100      	movs	r1, #0
 8009ea0:	4804      	ldr	r0, [pc, #16]	; (8009eb4 <MX_SAI1_Init+0x60>)
 8009ea2:	f7fe ff67 	bl	8008d74 <HAL_SAI_InitProtocol>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d001      	beq.n	8009eb0 <MX_SAI1_Init+0x5c>
  {
    Error_Handler();
 8009eac:	f000 f900 	bl	800a0b0 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8009eb0:	bf00      	nop
 8009eb2:	bd80      	pop	{r7, pc}
 8009eb4:	24000d1c 	.word	0x24000d1c
 8009eb8:	40015824 	.word	0x40015824
 8009ebc:	0002ee00 	.word	0x0002ee00

08009ec0 <MX_SAI4_Init>:
  * @brief SAI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI4_Init(void)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	af00      	add	r7, sp, #0
  /* USER CODE END SAI4_Init 0 */

  /* USER CODE BEGIN SAI4_Init 1 */

  /* USER CODE END SAI4_Init 1 */
  hsai_BlockA4.Instance = SAI4_Block_A;
 8009ec4:	4b2c      	ldr	r3, [pc, #176]	; (8009f78 <MX_SAI4_Init+0xb8>)
 8009ec6:	4a2d      	ldr	r2, [pc, #180]	; (8009f7c <MX_SAI4_Init+0xbc>)
 8009ec8:	601a      	str	r2, [r3, #0]
  hsai_BlockA4.Init.Protocol = SAI_FREE_PROTOCOL;
 8009eca:	4b2b      	ldr	r3, [pc, #172]	; (8009f78 <MX_SAI4_Init+0xb8>)
 8009ecc:	2200      	movs	r2, #0
 8009ece:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA4.Init.AudioMode = SAI_MODEMASTER_RX;
 8009ed0:	4b29      	ldr	r3, [pc, #164]	; (8009f78 <MX_SAI4_Init+0xb8>)
 8009ed2:	2201      	movs	r2, #1
 8009ed4:	605a      	str	r2, [r3, #4]
  hsai_BlockA4.Init.DataSize = SAI_DATASIZE_16;
 8009ed6:	4b28      	ldr	r3, [pc, #160]	; (8009f78 <MX_SAI4_Init+0xb8>)
 8009ed8:	2280      	movs	r2, #128	; 0x80
 8009eda:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA4.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8009edc:	4b26      	ldr	r3, [pc, #152]	; (8009f78 <MX_SAI4_Init+0xb8>)
 8009ede:	2200      	movs	r2, #0
 8009ee0:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA4.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8009ee2:	4b25      	ldr	r3, [pc, #148]	; (8009f78 <MX_SAI4_Init+0xb8>)
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA4.Init.Synchro = SAI_ASYNCHRONOUS;
 8009ee8:	4b23      	ldr	r3, [pc, #140]	; (8009f78 <MX_SAI4_Init+0xb8>)
 8009eea:	2200      	movs	r2, #0
 8009eec:	609a      	str	r2, [r3, #8]
  hsai_BlockA4.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8009eee:	4b22      	ldr	r3, [pc, #136]	; (8009f78 <MX_SAI4_Init+0xb8>)
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	615a      	str	r2, [r3, #20]
  hsai_BlockA4.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8009ef4:	4b20      	ldr	r3, [pc, #128]	; (8009f78 <MX_SAI4_Init+0xb8>)
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	619a      	str	r2, [r3, #24]
  hsai_BlockA4.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8009efa:	4b1f      	ldr	r3, [pc, #124]	; (8009f78 <MX_SAI4_Init+0xb8>)
 8009efc:	2200      	movs	r2, #0
 8009efe:	61da      	str	r2, [r3, #28]
  hsai_BlockA4.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8009f00:	4b1d      	ldr	r3, [pc, #116]	; (8009f78 <MX_SAI4_Init+0xb8>)
 8009f02:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8009f06:	621a      	str	r2, [r3, #32]
  hsai_BlockA4.Init.MonoStereoMode = SAI_STEREOMODE;
 8009f08:	4b1b      	ldr	r3, [pc, #108]	; (8009f78 <MX_SAI4_Init+0xb8>)
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA4.Init.CompandingMode = SAI_NOCOMPANDING;
 8009f0e:	4b1a      	ldr	r3, [pc, #104]	; (8009f78 <MX_SAI4_Init+0xb8>)
 8009f10:	2200      	movs	r2, #0
 8009f12:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA4.Init.PdmInit.Activation = ENABLE;
 8009f14:	4b18      	ldr	r3, [pc, #96]	; (8009f78 <MX_SAI4_Init+0xb8>)
 8009f16:	2201      	movs	r2, #1
 8009f18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA4.Init.PdmInit.MicPairsNbr = 2;
 8009f1c:	4b16      	ldr	r3, [pc, #88]	; (8009f78 <MX_SAI4_Init+0xb8>)
 8009f1e:	2202      	movs	r2, #2
 8009f20:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA4.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK2_ENABLE;
 8009f22:	4b15      	ldr	r3, [pc, #84]	; (8009f78 <MX_SAI4_Init+0xb8>)
 8009f24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009f28:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA4.FrameInit.FrameLength = 16;
 8009f2a:	4b13      	ldr	r3, [pc, #76]	; (8009f78 <MX_SAI4_Init+0xb8>)
 8009f2c:	2210      	movs	r2, #16
 8009f2e:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA4.FrameInit.ActiveFrameLength = 1;
 8009f30:	4b11      	ldr	r3, [pc, #68]	; (8009f78 <MX_SAI4_Init+0xb8>)
 8009f32:	2201      	movs	r2, #1
 8009f34:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA4.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8009f36:	4b10      	ldr	r3, [pc, #64]	; (8009f78 <MX_SAI4_Init+0xb8>)
 8009f38:	2200      	movs	r2, #0
 8009f3a:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA4.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8009f3c:	4b0e      	ldr	r3, [pc, #56]	; (8009f78 <MX_SAI4_Init+0xb8>)
 8009f3e:	2200      	movs	r2, #0
 8009f40:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA4.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8009f42:	4b0d      	ldr	r3, [pc, #52]	; (8009f78 <MX_SAI4_Init+0xb8>)
 8009f44:	2200      	movs	r2, #0
 8009f46:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA4.SlotInit.FirstBitOffset = 0;
 8009f48:	4b0b      	ldr	r3, [pc, #44]	; (8009f78 <MX_SAI4_Init+0xb8>)
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA4.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8009f4e:	4b0a      	ldr	r3, [pc, #40]	; (8009f78 <MX_SAI4_Init+0xb8>)
 8009f50:	2200      	movs	r2, #0
 8009f52:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA4.SlotInit.SlotNumber = 1;
 8009f54:	4b08      	ldr	r3, [pc, #32]	; (8009f78 <MX_SAI4_Init+0xb8>)
 8009f56:	2201      	movs	r2, #1
 8009f58:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA4.SlotInit.SlotActive = 0x0000FFFF;
 8009f5a:	4b07      	ldr	r3, [pc, #28]	; (8009f78 <MX_SAI4_Init+0xb8>)
 8009f5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009f60:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA4) != HAL_OK)
 8009f62:	4805      	ldr	r0, [pc, #20]	; (8009f78 <MX_SAI4_Init+0xb8>)
 8009f64:	f7fe ff38 	bl	8008dd8 <HAL_SAI_Init>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d001      	beq.n	8009f72 <MX_SAI4_Init+0xb2>
  {
    Error_Handler();
 8009f6e:	f000 f89f 	bl	800a0b0 <Error_Handler>
  }
  /* USER CODE BEGIN SAI4_Init 2 */

  /* USER CODE END SAI4_Init 2 */

}
 8009f72:	bf00      	nop
 8009f74:	bd80      	pop	{r7, pc}
 8009f76:	bf00      	nop
 8009f78:	24000db4 	.word	0x24000db4
 8009f7c:	58005404 	.word	0x58005404

08009f80 <MX_BDMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_BDMA_Init(void)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b082      	sub	sp, #8
 8009f84:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 8009f86:	4b11      	ldr	r3, [pc, #68]	; (8009fcc <MX_BDMA_Init+0x4c>)
 8009f88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009f8c:	4a0f      	ldr	r2, [pc, #60]	; (8009fcc <MX_BDMA_Init+0x4c>)
 8009f8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009f92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009f96:	4b0d      	ldr	r3, [pc, #52]	; (8009fcc <MX_BDMA_Init+0x4c>)
 8009f98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009f9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009fa0:	607b      	str	r3, [r7, #4]
 8009fa2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMAMUX2_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX2_OVR_IRQn, 0, 0);
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	2100      	movs	r1, #0
 8009fa8:	2080      	movs	r0, #128	; 0x80
 8009faa:	f7f7 ff6a 	bl	8001e82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX2_OVR_IRQn);
 8009fae:	2080      	movs	r0, #128	; 0x80
 8009fb0:	f7f7 ff81 	bl	8001eb6 <HAL_NVIC_EnableIRQ>
  /* BDMA_Channel0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 0, 0);
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	2100      	movs	r1, #0
 8009fb8:	2081      	movs	r0, #129	; 0x81
 8009fba:	f7f7 ff62 	bl	8001e82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
 8009fbe:	2081      	movs	r0, #129	; 0x81
 8009fc0:	f7f7 ff79 	bl	8001eb6 <HAL_NVIC_EnableIRQ>

}
 8009fc4:	bf00      	nop
 8009fc6:	3708      	adds	r7, #8
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	bd80      	pop	{r7, pc}
 8009fcc:	58024400 	.word	0x58024400

08009fd0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b082      	sub	sp, #8
 8009fd4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8009fd6:	4b11      	ldr	r3, [pc, #68]	; (800a01c <MX_DMA_Init+0x4c>)
 8009fd8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009fdc:	4a0f      	ldr	r2, [pc, #60]	; (800a01c <MX_DMA_Init+0x4c>)
 8009fde:	f043 0301 	orr.w	r3, r3, #1
 8009fe2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8009fe6:	4b0d      	ldr	r3, [pc, #52]	; (800a01c <MX_DMA_Init+0x4c>)
 8009fe8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009fec:	f003 0301 	and.w	r3, r3, #1
 8009ff0:	607b      	str	r3, [r7, #4]
 8009ff2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	2100      	movs	r1, #0
 8009ff8:	200c      	movs	r0, #12
 8009ffa:	f7f7 ff42 	bl	8001e82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8009ffe:	200c      	movs	r0, #12
 800a000:	f7f7 ff59 	bl	8001eb6 <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 0, 0);
 800a004:	2200      	movs	r2, #0
 800a006:	2100      	movs	r1, #0
 800a008:	2066      	movs	r0, #102	; 0x66
 800a00a:	f7f7 ff3a 	bl	8001e82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
 800a00e:	2066      	movs	r0, #102	; 0x66
 800a010:	f7f7 ff51 	bl	8001eb6 <HAL_NVIC_EnableIRQ>

}
 800a014:	bf00      	nop
 800a016:	3708      	adds	r7, #8
 800a018:	46bd      	mov	sp, r7
 800a01a:	bd80      	pop	{r7, pc}
 800a01c:	58024400 	.word	0x58024400

0800a020 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800a020:	b480      	push	{r7}
 800a022:	b085      	sub	sp, #20
 800a024:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a026:	4b21      	ldr	r3, [pc, #132]	; (800a0ac <MX_GPIO_Init+0x8c>)
 800a028:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a02c:	4a1f      	ldr	r2, [pc, #124]	; (800a0ac <MX_GPIO_Init+0x8c>)
 800a02e:	f043 0301 	orr.w	r3, r3, #1
 800a032:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a036:	4b1d      	ldr	r3, [pc, #116]	; (800a0ac <MX_GPIO_Init+0x8c>)
 800a038:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a03c:	f003 0301 	and.w	r3, r3, #1
 800a040:	60fb      	str	r3, [r7, #12]
 800a042:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800a044:	4b19      	ldr	r3, [pc, #100]	; (800a0ac <MX_GPIO_Init+0x8c>)
 800a046:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a04a:	4a18      	ldr	r2, [pc, #96]	; (800a0ac <MX_GPIO_Init+0x8c>)
 800a04c:	f043 0310 	orr.w	r3, r3, #16
 800a050:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a054:	4b15      	ldr	r3, [pc, #84]	; (800a0ac <MX_GPIO_Init+0x8c>)
 800a056:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a05a:	f003 0310 	and.w	r3, r3, #16
 800a05e:	60bb      	str	r3, [r7, #8]
 800a060:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a062:	4b12      	ldr	r3, [pc, #72]	; (800a0ac <MX_GPIO_Init+0x8c>)
 800a064:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a068:	4a10      	ldr	r2, [pc, #64]	; (800a0ac <MX_GPIO_Init+0x8c>)
 800a06a:	f043 0308 	orr.w	r3, r3, #8
 800a06e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a072:	4b0e      	ldr	r3, [pc, #56]	; (800a0ac <MX_GPIO_Init+0x8c>)
 800a074:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a078:	f003 0308 	and.w	r3, r3, #8
 800a07c:	607b      	str	r3, [r7, #4]
 800a07e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800a080:	4b0a      	ldr	r3, [pc, #40]	; (800a0ac <MX_GPIO_Init+0x8c>)
 800a082:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a086:	4a09      	ldr	r2, [pc, #36]	; (800a0ac <MX_GPIO_Init+0x8c>)
 800a088:	f043 0320 	orr.w	r3, r3, #32
 800a08c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a090:	4b06      	ldr	r3, [pc, #24]	; (800a0ac <MX_GPIO_Init+0x8c>)
 800a092:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a096:	f003 0320 	and.w	r3, r3, #32
 800a09a:	603b      	str	r3, [r7, #0]
 800a09c:	683b      	ldr	r3, [r7, #0]

}
 800a09e:	bf00      	nop
 800a0a0:	3714      	adds	r7, #20
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a8:	4770      	bx	lr
 800a0aa:	bf00      	nop
 800a0ac:	58024400 	.word	0x58024400

0800a0b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a0b0:	b480      	push	{r7}
 800a0b2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800a0b4:	b672      	cpsid	i
}
 800a0b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800a0b8:	e7fe      	b.n	800a0b8 <Error_Handler+0x8>
	...

0800a0bc <MX_PDM2PCM_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* PDM2PCM init function */
void MX_PDM2PCM_Init(void)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

   /**
  */
  PDM1_filter_handler.bit_order = PDM_FILTER_BIT_ORDER_LSB;
 800a0c0:	4b10      	ldr	r3, [pc, #64]	; (800a104 <MX_PDM2PCM_Init+0x48>)
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	801a      	strh	r2, [r3, #0]
  PDM1_filter_handler.endianness = PDM_FILTER_ENDIANNESS_BE;
 800a0c6:	4b0f      	ldr	r3, [pc, #60]	; (800a104 <MX_PDM2PCM_Init+0x48>)
 800a0c8:	2201      	movs	r2, #1
 800a0ca:	805a      	strh	r2, [r3, #2]
  PDM1_filter_handler.high_pass_tap = 2104533974;
 800a0cc:	4b0d      	ldr	r3, [pc, #52]	; (800a104 <MX_PDM2PCM_Init+0x48>)
 800a0ce:	4a0e      	ldr	r2, [pc, #56]	; (800a108 <MX_PDM2PCM_Init+0x4c>)
 800a0d0:	605a      	str	r2, [r3, #4]
  PDM1_filter_handler.in_ptr_channels = 2;
 800a0d2:	4b0c      	ldr	r3, [pc, #48]	; (800a104 <MX_PDM2PCM_Init+0x48>)
 800a0d4:	2202      	movs	r2, #2
 800a0d6:	811a      	strh	r2, [r3, #8]
  PDM1_filter_handler.out_ptr_channels = 2;
 800a0d8:	4b0a      	ldr	r3, [pc, #40]	; (800a104 <MX_PDM2PCM_Init+0x48>)
 800a0da:	2202      	movs	r2, #2
 800a0dc:	815a      	strh	r2, [r3, #10]
  PDM_Filter_Init(&PDM1_filter_handler);
 800a0de:	4809      	ldr	r0, [pc, #36]	; (800a104 <MX_PDM2PCM_Init+0x48>)
 800a0e0:	f001 fffc 	bl	800c0dc <PDM_Filter_Init>

  PDM1_filter_config.decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 800a0e4:	4b09      	ldr	r3, [pc, #36]	; (800a10c <MX_PDM2PCM_Init+0x50>)
 800a0e6:	2202      	movs	r2, #2
 800a0e8:	801a      	strh	r2, [r3, #0]
  PDM1_filter_config.output_samples_number = 16;
 800a0ea:	4b08      	ldr	r3, [pc, #32]	; (800a10c <MX_PDM2PCM_Init+0x50>)
 800a0ec:	2210      	movs	r2, #16
 800a0ee:	805a      	strh	r2, [r3, #2]
  PDM1_filter_config.mic_gain = 0;
 800a0f0:	4b06      	ldr	r3, [pc, #24]	; (800a10c <MX_PDM2PCM_Init+0x50>)
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	809a      	strh	r2, [r3, #4]
  PDM_Filter_setConfig(&PDM1_filter_handler, &PDM1_filter_config);
 800a0f6:	4905      	ldr	r1, [pc, #20]	; (800a10c <MX_PDM2PCM_Init+0x50>)
 800a0f8:	4802      	ldr	r0, [pc, #8]	; (800a104 <MX_PDM2PCM_Init+0x48>)
 800a0fa:	f002 f8bf 	bl	800c27c <PDM_Filter_setConfig>

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 800a0fe:	bf00      	nop
 800a100:	bd80      	pop	{r7, pc}
 800a102:	bf00      	nop
 800a104:	24000f7c 	.word	0x24000f7c
 800a108:	7d70a3d6 	.word	0x7d70a3d6
 800a10c:	24000f74 	.word	0x24000f74

0800a110 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a110:	b480      	push	{r7}
 800a112:	b083      	sub	sp, #12
 800a114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a116:	4b0a      	ldr	r3, [pc, #40]	; (800a140 <HAL_MspInit+0x30>)
 800a118:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a11c:	4a08      	ldr	r2, [pc, #32]	; (800a140 <HAL_MspInit+0x30>)
 800a11e:	f043 0302 	orr.w	r3, r3, #2
 800a122:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800a126:	4b06      	ldr	r3, [pc, #24]	; (800a140 <HAL_MspInit+0x30>)
 800a128:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a12c:	f003 0302 	and.w	r3, r3, #2
 800a130:	607b      	str	r3, [r7, #4]
 800a132:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a134:	bf00      	nop
 800a136:	370c      	adds	r7, #12
 800a138:	46bd      	mov	sp, r7
 800a13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13e:	4770      	bx	lr
 800a140:	58024400 	.word	0x58024400

0800a144 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800a144:	b480      	push	{r7}
 800a146:	b085      	sub	sp, #20
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	4a0b      	ldr	r2, [pc, #44]	; (800a180 <HAL_CRC_MspInit+0x3c>)
 800a152:	4293      	cmp	r3, r2
 800a154:	d10e      	bne.n	800a174 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800a156:	4b0b      	ldr	r3, [pc, #44]	; (800a184 <HAL_CRC_MspInit+0x40>)
 800a158:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a15c:	4a09      	ldr	r2, [pc, #36]	; (800a184 <HAL_CRC_MspInit+0x40>)
 800a15e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a162:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a166:	4b07      	ldr	r3, [pc, #28]	; (800a184 <HAL_CRC_MspInit+0x40>)
 800a168:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a16c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a170:	60fb      	str	r3, [r7, #12]
 800a172:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800a174:	bf00      	nop
 800a176:	3714      	adds	r7, #20
 800a178:	46bd      	mov	sp, r7
 800a17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17e:	4770      	bx	lr
 800a180:	58024c00 	.word	0x58024c00
 800a184:	58024400 	.word	0x58024400

0800a188 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b0b0      	sub	sp, #192	; 0xc0
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a190:	f107 030c 	add.w	r3, r7, #12
 800a194:	22b4      	movs	r2, #180	; 0xb4
 800a196:	2100      	movs	r1, #0
 800a198:	4618      	mov	r0, r3
 800a19a:	f002 f993 	bl	800c4c4 <memset>
  if(DFSDM1_Init == 0)
 800a19e:	4b15      	ldr	r3, [pc, #84]	; (800a1f4 <HAL_DFSDM_ChannelMspInit+0x6c>)
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d122      	bne.n	800a1ec <HAL_DFSDM_ChannelMspInit+0x64>
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800a1a6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a1aa:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_D2PCLK1;
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a1b0:	f107 030c 	add.w	r3, r7, #12
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	f7fc fbfd 	bl	80069b4 <HAL_RCCEx_PeriphCLKConfig>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d001      	beq.n	800a1c4 <HAL_DFSDM_ChannelMspInit+0x3c>
    {
      Error_Handler();
 800a1c0:	f7ff ff76 	bl	800a0b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800a1c4:	4b0c      	ldr	r3, [pc, #48]	; (800a1f8 <HAL_DFSDM_ChannelMspInit+0x70>)
 800a1c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a1ca:	4a0b      	ldr	r2, [pc, #44]	; (800a1f8 <HAL_DFSDM_ChannelMspInit+0x70>)
 800a1cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a1d0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800a1d4:	4b08      	ldr	r3, [pc, #32]	; (800a1f8 <HAL_DFSDM_ChannelMspInit+0x70>)
 800a1d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a1da:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a1de:	60bb      	str	r3, [r7, #8]
 800a1e0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 800a1e2:	4b04      	ldr	r3, [pc, #16]	; (800a1f4 <HAL_DFSDM_ChannelMspInit+0x6c>)
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	3301      	adds	r3, #1
 800a1e8:	4a02      	ldr	r2, [pc, #8]	; (800a1f4 <HAL_DFSDM_ChannelMspInit+0x6c>)
 800a1ea:	6013      	str	r3, [r2, #0]
  }

}
 800a1ec:	bf00      	nop
 800a1ee:	37c0      	adds	r7, #192	; 0xc0
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	bd80      	pop	{r7, pc}
 800a1f4:	24000a04 	.word	0x24000a04
 800a1f8:	58024400 	.word	0x58024400

0800a1fc <HAL_SAI_MspInit>:

static uint32_t SAI1_client =0;
static uint32_t SAI4_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b0ba      	sub	sp, #232	; 0xe8
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a204:	f107 0310 	add.w	r3, r7, #16
 800a208:	22b4      	movs	r2, #180	; 0xb4
 800a20a:	2100      	movs	r1, #0
 800a20c:	4618      	mov	r0, r3
 800a20e:	f002 f959 	bl	800c4c4 <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_B)
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	4ab1      	ldr	r2, [pc, #708]	; (800a4dc <HAL_SAI_MspInit+0x2e0>)
 800a218:	4293      	cmp	r3, r2
 800a21a:	f040 80ad 	bne.w	800a378 <HAL_SAI_MspInit+0x17c>
    {
      /* Peripheral clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 800a21e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a222:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 800a224:	2300      	movs	r3, #0
 800a226:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a228:	f107 0310 	add.w	r3, r7, #16
 800a22c:	4618      	mov	r0, r3
 800a22e:	f7fc fbc1 	bl	80069b4 <HAL_RCCEx_PeriphCLKConfig>
 800a232:	4603      	mov	r3, r0
 800a234:	2b00      	cmp	r3, #0
 800a236:	d001      	beq.n	800a23c <HAL_SAI_MspInit+0x40>
    {
      Error_Handler();
 800a238:	f7ff ff3a 	bl	800a0b0 <Error_Handler>
    }

      if (SAI1_client == 0)
 800a23c:	4ba8      	ldr	r3, [pc, #672]	; (800a4e0 <HAL_SAI_MspInit+0x2e4>)
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d116      	bne.n	800a272 <HAL_SAI_MspInit+0x76>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800a244:	4ba7      	ldr	r3, [pc, #668]	; (800a4e4 <HAL_SAI_MspInit+0x2e8>)
 800a246:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a24a:	4aa6      	ldr	r2, [pc, #664]	; (800a4e4 <HAL_SAI_MspInit+0x2e8>)
 800a24c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a250:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800a254:	4ba3      	ldr	r3, [pc, #652]	; (800a4e4 <HAL_SAI_MspInit+0x2e8>)
 800a256:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a25a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a25e:	60fb      	str	r3, [r7, #12]
 800a260:	68fb      	ldr	r3, [r7, #12]

      /* Peripheral interrupt init*/
      HAL_NVIC_SetPriority(SAI1_IRQn, 0, 0);
 800a262:	2200      	movs	r2, #0
 800a264:	2100      	movs	r1, #0
 800a266:	2057      	movs	r0, #87	; 0x57
 800a268:	f7f7 fe0b 	bl	8001e82 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(SAI1_IRQn);
 800a26c:	2057      	movs	r0, #87	; 0x57
 800a26e:	f7f7 fe22 	bl	8001eb6 <HAL_NVIC_EnableIRQ>
      }
    SAI1_client ++;
 800a272:	4b9b      	ldr	r3, [pc, #620]	; (800a4e0 <HAL_SAI_MspInit+0x2e4>)
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	3301      	adds	r3, #1
 800a278:	4a99      	ldr	r2, [pc, #612]	; (800a4e0 <HAL_SAI_MspInit+0x2e4>)
 800a27a:	6013      	str	r3, [r2, #0]
    PE3     ------> SAI1_SD_B
    PF8     ------> SAI1_SCK_B
    PF7     ------> SAI1_MCLK_B
    PF9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800a27c:	2308      	movs	r3, #8
 800a27e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a282:	2302      	movs	r3, #2
 800a284:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a288:	2300      	movs	r3, #0
 800a28a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a28e:	2300      	movs	r3, #0
 800a290:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800a294:	2306      	movs	r3, #6
 800a296:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a29a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800a29e:	4619      	mov	r1, r3
 800a2a0:	4891      	ldr	r0, [pc, #580]	; (800a4e8 <HAL_SAI_MspInit+0x2ec>)
 800a2a2:	f7fb fa5f 	bl	8005764 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_9;
 800a2a6:	f44f 7360 	mov.w	r3, #896	; 0x380
 800a2aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a2ae:	2302      	movs	r3, #2
 800a2b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800a2c0:	2306      	movs	r3, #6
 800a2c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800a2c6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800a2ca:	4619      	mov	r1, r3
 800a2cc:	4887      	ldr	r0, [pc, #540]	; (800a4ec <HAL_SAI_MspInit+0x2f0>)
 800a2ce:	f7fb fa49 	bl	8005764 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA1_Stream1;
 800a2d2:	4b87      	ldr	r3, [pc, #540]	; (800a4f0 <HAL_SAI_MspInit+0x2f4>)
 800a2d4:	4a87      	ldr	r2, [pc, #540]	; (800a4f4 <HAL_SAI_MspInit+0x2f8>)
 800a2d6:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 800a2d8:	4b85      	ldr	r3, [pc, #532]	; (800a4f0 <HAL_SAI_MspInit+0x2f4>)
 800a2da:	2258      	movs	r2, #88	; 0x58
 800a2dc:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a2de:	4b84      	ldr	r3, [pc, #528]	; (800a4f0 <HAL_SAI_MspInit+0x2f4>)
 800a2e0:	2240      	movs	r2, #64	; 0x40
 800a2e2:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 800a2e4:	4b82      	ldr	r3, [pc, #520]	; (800a4f0 <HAL_SAI_MspInit+0x2f4>)
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 800a2ea:	4b81      	ldr	r3, [pc, #516]	; (800a4f0 <HAL_SAI_MspInit+0x2f4>)
 800a2ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a2f0:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800a2f2:	4b7f      	ldr	r3, [pc, #508]	; (800a4f0 <HAL_SAI_MspInit+0x2f4>)
 800a2f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a2f8:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800a2fa:	4b7d      	ldr	r3, [pc, #500]	; (800a4f0 <HAL_SAI_MspInit+0x2f4>)
 800a2fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800a300:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 800a302:	4b7b      	ldr	r3, [pc, #492]	; (800a4f0 <HAL_SAI_MspInit+0x2f4>)
 800a304:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a308:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_HIGH;
 800a30a:	4b79      	ldr	r3, [pc, #484]	; (800a4f0 <HAL_SAI_MspInit+0x2f4>)
 800a30c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800a310:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800a312:	4b77      	ldr	r3, [pc, #476]	; (800a4f0 <HAL_SAI_MspInit+0x2f4>)
 800a314:	2200      	movs	r2, #0
 800a316:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 800a318:	4875      	ldr	r0, [pc, #468]	; (800a4f0 <HAL_SAI_MspInit+0x2f4>)
 800a31a:	f7f8 f911 	bl	8002540 <HAL_DMA_Init>
 800a31e:	4603      	mov	r3, r0
 800a320:	2b00      	cmp	r3, #0
 800a322:	d001      	beq.n	800a328 <HAL_SAI_MspInit+0x12c>
    {
      Error_Handler();
 800a324:	f7ff fec4 	bl	800a0b0 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 800a328:	2306      	movs	r3, #6
 800a32a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 800a32e:	2300      	movs	r3, #0
 800a330:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    pSyncConfig.SyncEnable = DISABLE;
 800a334:	2300      	movs	r3, #0
 800a336:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    pSyncConfig.EventEnable = ENABLE;
 800a33a:	2301      	movs	r3, #1
 800a33c:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    pSyncConfig.RequestNumber = 1;
 800a340:	2301      	movs	r3, #1
 800a342:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai1_b, &pSyncConfig) != HAL_OK)
 800a346:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800a34a:	4619      	mov	r1, r3
 800a34c:	4868      	ldr	r0, [pc, #416]	; (800a4f0 <HAL_SAI_MspInit+0x2f4>)
 800a34e:	f7fb f8f1 	bl	8005534 <HAL_DMAEx_ConfigMuxSync>
 800a352:	4603      	mov	r3, r0
 800a354:	2b00      	cmp	r3, #0
 800a356:	d001      	beq.n	800a35c <HAL_SAI_MspInit+0x160>
    {
      Error_Handler();
 800a358:	f7ff feaa 	bl	800a0b0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	4a64      	ldr	r2, [pc, #400]	; (800a4f0 <HAL_SAI_MspInit+0x2f4>)
 800a360:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800a364:	4a62      	ldr	r2, [pc, #392]	; (800a4f0 <HAL_SAI_MspInit+0x2f4>)
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	4a60      	ldr	r2, [pc, #384]	; (800a4f0 <HAL_SAI_MspInit+0x2f4>)
 800a36e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800a372:	4a5f      	ldr	r2, [pc, #380]	; (800a4f0 <HAL_SAI_MspInit+0x2f4>)
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	6393      	str	r3, [r2, #56]	; 0x38
    }
/* SAI4 */
    if(hsai->Instance==SAI4_Block_A)
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	4a5e      	ldr	r2, [pc, #376]	; (800a4f8 <HAL_SAI_MspInit+0x2fc>)
 800a37e:	4293      	cmp	r3, r2
 800a380:	f040 80a8 	bne.w	800a4d4 <HAL_SAI_MspInit+0x2d8>
    {
    /* Peripheral clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI4A;
 800a384:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a388:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Sai4AClockSelection = RCC_SAI4ACLKSOURCE_PLL;
 800a38a:	2300      	movs	r3, #0
 800a38c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a390:	f107 0310 	add.w	r3, r7, #16
 800a394:	4618      	mov	r0, r3
 800a396:	f7fc fb0d 	bl	80069b4 <HAL_RCCEx_PeriphCLKConfig>
 800a39a:	4603      	mov	r3, r0
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d001      	beq.n	800a3a4 <HAL_SAI_MspInit+0x1a8>
    {
      Error_Handler();
 800a3a0:	f7ff fe86 	bl	800a0b0 <Error_Handler>
    }

    if (SAI4_client == 0)
 800a3a4:	4b55      	ldr	r3, [pc, #340]	; (800a4fc <HAL_SAI_MspInit+0x300>)
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d116      	bne.n	800a3da <HAL_SAI_MspInit+0x1de>
    {
       __HAL_RCC_SAI4_CLK_ENABLE();
 800a3ac:	4b4d      	ldr	r3, [pc, #308]	; (800a4e4 <HAL_SAI_MspInit+0x2e8>)
 800a3ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a3b2:	4a4c      	ldr	r2, [pc, #304]	; (800a4e4 <HAL_SAI_MspInit+0x2e8>)
 800a3b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a3b8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800a3bc:	4b49      	ldr	r3, [pc, #292]	; (800a4e4 <HAL_SAI_MspInit+0x2e8>)
 800a3be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a3c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a3c6:	60bb      	str	r3, [r7, #8]
 800a3c8:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(SAI4_IRQn, 0, 0);
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	2100      	movs	r1, #0
 800a3ce:	2092      	movs	r0, #146	; 0x92
 800a3d0:	f7f7 fd57 	bl	8001e82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI4_IRQn);
 800a3d4:	2092      	movs	r0, #146	; 0x92
 800a3d6:	f7f7 fd6e 	bl	8001eb6 <HAL_NVIC_EnableIRQ>
    }
    SAI4_client ++;
 800a3da:	4b48      	ldr	r3, [pc, #288]	; (800a4fc <HAL_SAI_MspInit+0x300>)
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	3301      	adds	r3, #1
 800a3e0:	4a46      	ldr	r2, [pc, #280]	; (800a4fc <HAL_SAI_MspInit+0x300>)
 800a3e2:	6013      	str	r3, [r2, #0]
    /**SAI4_A_Block_A GPIO Configuration
    PE4     ------> SAI4_D2
    PE5     ------> SAI4_CK2
    PD6     ------> SAI4_D1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800a3e4:	2330      	movs	r3, #48	; 0x30
 800a3e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a3ea:	2302      	movs	r3, #2
 800a3ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 800a3fc:	230a      	movs	r3, #10
 800a3fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a402:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800a406:	4619      	mov	r1, r3
 800a408:	4837      	ldr	r0, [pc, #220]	; (800a4e8 <HAL_SAI_MspInit+0x2ec>)
 800a40a:	f7fb f9ab 	bl	8005764 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800a40e:	2340      	movs	r3, #64	; 0x40
 800a410:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a414:	2302      	movs	r3, #2
 800a416:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a41a:	2300      	movs	r3, #0
 800a41c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a420:	2300      	movs	r3, #0
 800a422:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF1_SAI4;
 800a426:	2301      	movs	r3, #1
 800a428:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a42c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800a430:	4619      	mov	r1, r3
 800a432:	4833      	ldr	r0, [pc, #204]	; (800a500 <HAL_SAI_MspInit+0x304>)
 800a434:	f7fb f996 	bl	8005764 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai4_a.Instance = BDMA_Channel0;
 800a438:	4b32      	ldr	r3, [pc, #200]	; (800a504 <HAL_SAI_MspInit+0x308>)
 800a43a:	4a33      	ldr	r2, [pc, #204]	; (800a508 <HAL_SAI_MspInit+0x30c>)
 800a43c:	601a      	str	r2, [r3, #0]
    hdma_sai4_a.Init.Request = BDMA_REQUEST_SAI4_A;
 800a43e:	4b31      	ldr	r3, [pc, #196]	; (800a504 <HAL_SAI_MspInit+0x308>)
 800a440:	220f      	movs	r2, #15
 800a442:	605a      	str	r2, [r3, #4]
    hdma_sai4_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a444:	4b2f      	ldr	r3, [pc, #188]	; (800a504 <HAL_SAI_MspInit+0x308>)
 800a446:	2200      	movs	r2, #0
 800a448:	609a      	str	r2, [r3, #8]
    hdma_sai4_a.Init.PeriphInc = DMA_PINC_DISABLE;
 800a44a:	4b2e      	ldr	r3, [pc, #184]	; (800a504 <HAL_SAI_MspInit+0x308>)
 800a44c:	2200      	movs	r2, #0
 800a44e:	60da      	str	r2, [r3, #12]
    hdma_sai4_a.Init.MemInc = DMA_MINC_ENABLE;
 800a450:	4b2c      	ldr	r3, [pc, #176]	; (800a504 <HAL_SAI_MspInit+0x308>)
 800a452:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a456:	611a      	str	r2, [r3, #16]
    hdma_sai4_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a458:	4b2a      	ldr	r3, [pc, #168]	; (800a504 <HAL_SAI_MspInit+0x308>)
 800a45a:	2200      	movs	r2, #0
 800a45c:	615a      	str	r2, [r3, #20]
    hdma_sai4_a.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a45e:	4b29      	ldr	r3, [pc, #164]	; (800a504 <HAL_SAI_MspInit+0x308>)
 800a460:	2200      	movs	r2, #0
 800a462:	619a      	str	r2, [r3, #24]
    hdma_sai4_a.Init.Mode = DMA_CIRCULAR;
 800a464:	4b27      	ldr	r3, [pc, #156]	; (800a504 <HAL_SAI_MspInit+0x308>)
 800a466:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a46a:	61da      	str	r2, [r3, #28]
    hdma_sai4_a.Init.Priority = DMA_PRIORITY_HIGH;
 800a46c:	4b25      	ldr	r3, [pc, #148]	; (800a504 <HAL_SAI_MspInit+0x308>)
 800a46e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800a472:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai4_a) != HAL_OK)
 800a474:	4823      	ldr	r0, [pc, #140]	; (800a504 <HAL_SAI_MspInit+0x308>)
 800a476:	f7f8 f863 	bl	8002540 <HAL_DMA_Init>
 800a47a:	4603      	mov	r3, r0
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d001      	beq.n	800a484 <HAL_SAI_MspInit+0x288>
    {
      Error_Handler();
 800a480:	f7ff fe16 	bl	800a0b0 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX2_SYNC_EXTI0;
 800a484:	230e      	movs	r3, #14
 800a486:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 800a48a:	2300      	movs	r3, #0
 800a48c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    pSyncConfig.SyncEnable = DISABLE;
 800a490:	2300      	movs	r3, #0
 800a492:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    pSyncConfig.EventEnable = ENABLE;
 800a496:	2301      	movs	r3, #1
 800a498:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    pSyncConfig.RequestNumber = 1;
 800a49c:	2301      	movs	r3, #1
 800a49e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai4_a, &pSyncConfig) != HAL_OK)
 800a4a2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800a4a6:	4619      	mov	r1, r3
 800a4a8:	4816      	ldr	r0, [pc, #88]	; (800a504 <HAL_SAI_MspInit+0x308>)
 800a4aa:	f7fb f843 	bl	8005534 <HAL_DMAEx_ConfigMuxSync>
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d001      	beq.n	800a4b8 <HAL_SAI_MspInit+0x2bc>
    {
      Error_Handler();
 800a4b4:	f7ff fdfc 	bl	800a0b0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai4_a);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	4a12      	ldr	r2, [pc, #72]	; (800a504 <HAL_SAI_MspInit+0x308>)
 800a4bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800a4c0:	4a10      	ldr	r2, [pc, #64]	; (800a504 <HAL_SAI_MspInit+0x308>)
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai4_a);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	4a0e      	ldr	r2, [pc, #56]	; (800a504 <HAL_SAI_MspInit+0x308>)
 800a4ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800a4ce:	4a0d      	ldr	r2, [pc, #52]	; (800a504 <HAL_SAI_MspInit+0x308>)
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	6393      	str	r3, [r2, #56]	; 0x38

    }
}
 800a4d4:	bf00      	nop
 800a4d6:	37e8      	adds	r7, #232	; 0xe8
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bd80      	pop	{r7, pc}
 800a4dc:	40015824 	.word	0x40015824
 800a4e0:	24000a08 	.word	0x24000a08
 800a4e4:	58024400 	.word	0x58024400
 800a4e8:	58021000 	.word	0x58021000
 800a4ec:	58021400 	.word	0x58021400
 800a4f0:	24000efc 	.word	0x24000efc
 800a4f4:	40020028 	.word	0x40020028
 800a4f8:	58005404 	.word	0x58005404
 800a4fc:	24000a0c 	.word	0x24000a0c
 800a500:	58020c00 	.word	0x58020c00
 800a504:	24000e4c 	.word	0x24000e4c
 800a508:	58025408 	.word	0x58025408

0800a50c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a50c:	b480      	push	{r7}
 800a50e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800a510:	e7fe      	b.n	800a510 <NMI_Handler+0x4>

0800a512 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a512:	b480      	push	{r7}
 800a514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a516:	e7fe      	b.n	800a516 <HardFault_Handler+0x4>

0800a518 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a518:	b480      	push	{r7}
 800a51a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a51c:	e7fe      	b.n	800a51c <MemManage_Handler+0x4>

0800a51e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a51e:	b480      	push	{r7}
 800a520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a522:	e7fe      	b.n	800a522 <BusFault_Handler+0x4>

0800a524 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a524:	b480      	push	{r7}
 800a526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a528:	e7fe      	b.n	800a528 <UsageFault_Handler+0x4>

0800a52a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800a52a:	b480      	push	{r7}
 800a52c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800a52e:	bf00      	nop
 800a530:	46bd      	mov	sp, r7
 800a532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a536:	4770      	bx	lr

0800a538 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a538:	b480      	push	{r7}
 800a53a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a53c:	bf00      	nop
 800a53e:	46bd      	mov	sp, r7
 800a540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a544:	4770      	bx	lr

0800a546 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800a546:	b480      	push	{r7}
 800a548:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800a54a:	bf00      	nop
 800a54c:	46bd      	mov	sp, r7
 800a54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a552:	4770      	bx	lr

0800a554 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800a554:	b580      	push	{r7, lr}
 800a556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800a558:	f7f7 fb98 	bl	8001c8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800a55c:	bf00      	nop
 800a55e:	bd80      	pop	{r7, pc}

0800a560 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800a560:	b580      	push	{r7, lr}
 800a562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 800a564:	4802      	ldr	r0, [pc, #8]	; (800a570 <DMA1_Stream1_IRQHandler+0x10>)
 800a566:	f7f9 fcc7 	bl	8003ef8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800a56a:	bf00      	nop
 800a56c:	bd80      	pop	{r7, pc}
 800a56e:	bf00      	nop
 800a570:	24000efc 	.word	0x24000efc

0800a574 <SAI1_IRQHandler>:

/**
  * @brief This function handles SAI1 global interrupt.
  */
void SAI1_IRQHandler(void)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI1_IRQn 0 */

  /* USER CODE END SAI1_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockB1);
 800a578:	4802      	ldr	r0, [pc, #8]	; (800a584 <SAI1_IRQHandler+0x10>)
 800a57a:	f7fe ff65 	bl	8009448 <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI1_IRQn 1 */

  /* USER CODE END SAI1_IRQn 1 */
}
 800a57e:	bf00      	nop
 800a580:	bd80      	pop	{r7, pc}
 800a582:	bf00      	nop
 800a584:	24000d1c 	.word	0x24000d1c

0800a588 <DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX1 overrun interrupt.
  */
void DMAMUX1_OVR_IRQHandler(void)
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMAMUX1_OVR_IRQn 0 */
  // Handle DMA1_Stream1
  HAL_DMAEx_MUX_IRQHandler(&hdma_sai1_b);
 800a58c:	4802      	ldr	r0, [pc, #8]	; (800a598 <DMAMUX1_OVR_IRQHandler+0x10>)
 800a58e:	f7fb f897 	bl	80056c0 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMAMUX1_OVR_IRQn 1 */
}
 800a592:	bf00      	nop
 800a594:	bd80      	pop	{r7, pc}
 800a596:	bf00      	nop
 800a598:	24000efc 	.word	0x24000efc

0800a59c <DMAMUX2_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX2 overrun interrupt.
  */
void DMAMUX2_OVR_IRQHandler(void)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX2_OVR_IRQn 0 */

  /* USER CODE END DMAMUX2_OVR_IRQn 0 */
  // Handle BDMA_Channel0
  HAL_DMAEx_MUX_IRQHandler(&hdma_sai4_a);
 800a5a0:	4802      	ldr	r0, [pc, #8]	; (800a5ac <DMAMUX2_OVR_IRQHandler+0x10>)
 800a5a2:	f7fb f88d 	bl	80056c0 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX2_OVR_IRQn 1 */

  /* USER CODE END DMAMUX2_OVR_IRQn 1 */
}
 800a5a6:	bf00      	nop
 800a5a8:	bd80      	pop	{r7, pc}
 800a5aa:	bf00      	nop
 800a5ac:	24000e4c 	.word	0x24000e4c

0800a5b0 <BDMA_Channel0_IRQHandler>:

/**
  * @brief This function handles BDMA channel0 global interrupt.
  */
void BDMA_Channel0_IRQHandler(void)
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai4_a);
 800a5b4:	4802      	ldr	r0, [pc, #8]	; (800a5c0 <BDMA_Channel0_IRQHandler+0x10>)
 800a5b6:	f7f9 fc9f 	bl	8003ef8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel0_IRQn 1 */

  /* USER CODE END BDMA_Channel0_IRQn 1 */
}
 800a5ba:	bf00      	nop
 800a5bc:	bd80      	pop	{r7, pc}
 800a5be:	bf00      	nop
 800a5c0:	24000e4c 	.word	0x24000e4c

0800a5c4 <SAI4_IRQHandler>:

/**
  * @brief This function handles SAI4 global interrupt.
  */
void SAI4_IRQHandler(void)
{
 800a5c4:	b480      	push	{r7}
 800a5c6:	af00      	add	r7, sp, #0
  /* USER CODE END SAI4_IRQn 0 */

  /* USER CODE BEGIN SAI4_IRQn 1 */

  /* USER CODE END SAI4_IRQn 1 */
}
 800a5c8:	bf00      	nop
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d0:	4770      	bx	lr
	...

0800a5d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800a5d4:	b480      	push	{r7}
 800a5d6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800a5d8:	4b32      	ldr	r3, [pc, #200]	; (800a6a4 <SystemInit+0xd0>)
 800a5da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5de:	4a31      	ldr	r2, [pc, #196]	; (800a6a4 <SystemInit+0xd0>)
 800a5e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a5e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800a5e8:	4b2f      	ldr	r3, [pc, #188]	; (800a6a8 <SystemInit+0xd4>)
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	f003 030f 	and.w	r3, r3, #15
 800a5f0:	2b06      	cmp	r3, #6
 800a5f2:	d807      	bhi.n	800a604 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800a5f4:	4b2c      	ldr	r3, [pc, #176]	; (800a6a8 <SystemInit+0xd4>)
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	f023 030f 	bic.w	r3, r3, #15
 800a5fc:	4a2a      	ldr	r2, [pc, #168]	; (800a6a8 <SystemInit+0xd4>)
 800a5fe:	f043 0307 	orr.w	r3, r3, #7
 800a602:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800a604:	4b29      	ldr	r3, [pc, #164]	; (800a6ac <SystemInit+0xd8>)
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	4a28      	ldr	r2, [pc, #160]	; (800a6ac <SystemInit+0xd8>)
 800a60a:	f043 0301 	orr.w	r3, r3, #1
 800a60e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800a610:	4b26      	ldr	r3, [pc, #152]	; (800a6ac <SystemInit+0xd8>)
 800a612:	2200      	movs	r2, #0
 800a614:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800a616:	4b25      	ldr	r3, [pc, #148]	; (800a6ac <SystemInit+0xd8>)
 800a618:	681a      	ldr	r2, [r3, #0]
 800a61a:	4924      	ldr	r1, [pc, #144]	; (800a6ac <SystemInit+0xd8>)
 800a61c:	4b24      	ldr	r3, [pc, #144]	; (800a6b0 <SystemInit+0xdc>)
 800a61e:	4013      	ands	r3, r2
 800a620:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800a622:	4b21      	ldr	r3, [pc, #132]	; (800a6a8 <SystemInit+0xd4>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	f003 0308 	and.w	r3, r3, #8
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d007      	beq.n	800a63e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800a62e:	4b1e      	ldr	r3, [pc, #120]	; (800a6a8 <SystemInit+0xd4>)
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	f023 030f 	bic.w	r3, r3, #15
 800a636:	4a1c      	ldr	r2, [pc, #112]	; (800a6a8 <SystemInit+0xd4>)
 800a638:	f043 0307 	orr.w	r3, r3, #7
 800a63c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800a63e:	4b1b      	ldr	r3, [pc, #108]	; (800a6ac <SystemInit+0xd8>)
 800a640:	2200      	movs	r2, #0
 800a642:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800a644:	4b19      	ldr	r3, [pc, #100]	; (800a6ac <SystemInit+0xd8>)
 800a646:	2200      	movs	r2, #0
 800a648:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800a64a:	4b18      	ldr	r3, [pc, #96]	; (800a6ac <SystemInit+0xd8>)
 800a64c:	2200      	movs	r2, #0
 800a64e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800a650:	4b16      	ldr	r3, [pc, #88]	; (800a6ac <SystemInit+0xd8>)
 800a652:	4a18      	ldr	r2, [pc, #96]	; (800a6b4 <SystemInit+0xe0>)
 800a654:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800a656:	4b15      	ldr	r3, [pc, #84]	; (800a6ac <SystemInit+0xd8>)
 800a658:	4a17      	ldr	r2, [pc, #92]	; (800a6b8 <SystemInit+0xe4>)
 800a65a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800a65c:	4b13      	ldr	r3, [pc, #76]	; (800a6ac <SystemInit+0xd8>)
 800a65e:	4a17      	ldr	r2, [pc, #92]	; (800a6bc <SystemInit+0xe8>)
 800a660:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800a662:	4b12      	ldr	r3, [pc, #72]	; (800a6ac <SystemInit+0xd8>)
 800a664:	2200      	movs	r2, #0
 800a666:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800a668:	4b10      	ldr	r3, [pc, #64]	; (800a6ac <SystemInit+0xd8>)
 800a66a:	4a14      	ldr	r2, [pc, #80]	; (800a6bc <SystemInit+0xe8>)
 800a66c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800a66e:	4b0f      	ldr	r3, [pc, #60]	; (800a6ac <SystemInit+0xd8>)
 800a670:	2200      	movs	r2, #0
 800a672:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800a674:	4b0d      	ldr	r3, [pc, #52]	; (800a6ac <SystemInit+0xd8>)
 800a676:	4a11      	ldr	r2, [pc, #68]	; (800a6bc <SystemInit+0xe8>)
 800a678:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800a67a:	4b0c      	ldr	r3, [pc, #48]	; (800a6ac <SystemInit+0xd8>)
 800a67c:	2200      	movs	r2, #0
 800a67e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800a680:	4b0a      	ldr	r3, [pc, #40]	; (800a6ac <SystemInit+0xd8>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	4a09      	ldr	r2, [pc, #36]	; (800a6ac <SystemInit+0xd8>)
 800a686:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a68a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800a68c:	4b07      	ldr	r3, [pc, #28]	; (800a6ac <SystemInit+0xd8>)
 800a68e:	2200      	movs	r2, #0
 800a690:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800a692:	4b0b      	ldr	r3, [pc, #44]	; (800a6c0 <SystemInit+0xec>)
 800a694:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800a698:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 800a69a:	bf00      	nop
 800a69c:	46bd      	mov	sp, r7
 800a69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a2:	4770      	bx	lr
 800a6a4:	e000ed00 	.word	0xe000ed00
 800a6a8:	52002000 	.word	0x52002000
 800a6ac:	58024400 	.word	0x58024400
 800a6b0:	eaf6ed7f 	.word	0xeaf6ed7f
 800a6b4:	02020200 	.word	0x02020200
 800a6b8:	01ff0000 	.word	0x01ff0000
 800a6bc:	01010280 	.word	0x01010280
 800a6c0:	52004000 	.word	0x52004000

0800a6c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800a6c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800a6fc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800a6c8:	f7ff ff84 	bl	800a5d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800a6cc:	480c      	ldr	r0, [pc, #48]	; (800a700 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800a6ce:	490d      	ldr	r1, [pc, #52]	; (800a704 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800a6d0:	4a0d      	ldr	r2, [pc, #52]	; (800a708 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800a6d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800a6d4:	e002      	b.n	800a6dc <LoopCopyDataInit>

0800a6d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800a6d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800a6d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800a6da:	3304      	adds	r3, #4

0800a6dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800a6dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800a6de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800a6e0:	d3f9      	bcc.n	800a6d6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800a6e2:	4a0a      	ldr	r2, [pc, #40]	; (800a70c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800a6e4:	4c0a      	ldr	r4, [pc, #40]	; (800a710 <LoopFillZerobss+0x22>)
  movs r3, #0
 800a6e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 800a6e8:	e001      	b.n	800a6ee <LoopFillZerobss>

0800a6ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800a6ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800a6ec:	3204      	adds	r2, #4

0800a6ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800a6ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800a6f0:	d3fb      	bcc.n	800a6ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800a6f2:	f001 fec3 	bl	800c47c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800a6f6:	f7ff faa9 	bl	8009c4c <main>
  bx  lr
 800a6fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800a6fc:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800a700:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800a704:	2400047c 	.word	0x2400047c
  ldr r2, =_sidata
 800a708:	0800cbc0 	.word	0x0800cbc0
  ldr r2, =_sbss
 800a70c:	2400047c 	.word	0x2400047c
  ldr r4, =_ebss
 800a710:	24000fc8 	.word	0x24000fc8

0800a714 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800a714:	e7fe      	b.n	800a714 <ADC3_IRQHandler>
	...

0800a718 <D16_GENERIC>:
 800a718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a71c:	b089      	sub	sp, #36	; 0x24
 800a71e:	6993      	ldr	r3, [r2, #24]
 800a720:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800a722:	9103      	str	r1, [sp, #12]
 800a724:	9307      	str	r3, [sp, #28]
 800a726:	69d3      	ldr	r3, [r2, #28]
 800a728:	e9d2 c102 	ldrd	ip, r1, [r2, #8]
 800a72c:	e9d2 4a04 	ldrd	r4, sl, [r2, #16]
 800a730:	9106      	str	r1, [sp, #24]
 800a732:	e9d2 810c 	ldrd	r8, r1, [r2, #48]	; 0x30
 800a736:	2d00      	cmp	r5, #0
 800a738:	d063      	beq.n	800a802 <D16_GENERIC+0xea>
 800a73a:	f001 0520 	and.w	r5, r1, #32
 800a73e:	f001 0110 	and.w	r1, r1, #16
 800a742:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 800a824 <D16_GENERIC+0x10c>
 800a746:	46c1      	mov	r9, r8
 800a748:	9104      	str	r1, [sp, #16]
 800a74a:	2100      	movs	r1, #0
 800a74c:	9505      	str	r5, [sp, #20]
 800a74e:	e04d      	b.n	800a7ec <D16_GENERIC+0xd4>
 800a750:	5d87      	ldrb	r7, [r0, r6]
 800a752:	7805      	ldrb	r5, [r0, #0]
 800a754:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 800a758:	eb05 2707 	add.w	r7, r5, r7, lsl #8
 800a75c:	b2fe      	uxtb	r6, r7
 800a75e:	f3c7 2707 	ubfx	r7, r7, #8, #8
 800a762:	f85e 5026 	ldr.w	r5, [lr, r6, lsl #2]
 800a766:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
 800a76a:	441d      	add	r5, r3
 800a76c:	eb06 2395 	add.w	r3, r6, r5, lsr #10
 800a770:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800a774:	f3c3 0609 	ubfx	r6, r3, #0, #10
 800a778:	0a9b      	lsrs	r3, r3, #10
 800a77a:	ea46 4605 	orr.w	r6, r6, r5, lsl #16
 800a77e:	4d27      	ldr	r5, [pc, #156]	; (800a81c <D16_GENERIC+0x104>)
 800a780:	fb26 c505 	smlad	r5, r6, r5, ip
 800a784:	4f26      	ldr	r7, [pc, #152]	; (800a820 <D16_GENERIC+0x108>)
 800a786:	fb26 fc07 	smuad	ip, r6, r7
 800a78a:	9e04      	ldr	r6, [sp, #16]
 800a78c:	f101 0801 	add.w	r8, r1, #1
 800a790:	f5a5 6500 	sub.w	r5, r5, #2048	; 0x800
 800a794:	b1ae      	cbz	r6, 800a7c2 <D16_GENERIC+0xaa>
 800a796:	442c      	add	r4, r5
 800a798:	f8d2 b020 	ldr.w	fp, [r2, #32]
 800a79c:	eba4 040a 	sub.w	r4, r4, sl
 800a7a0:	46aa      	mov	sl, r5
 800a7a2:	17e7      	asrs	r7, r4, #31
 800a7a4:	fba4 450b 	umull	r4, r5, r4, fp
 800a7a8:	e9cd 4500 	strd	r4, r5, [sp]
 800a7ac:	fb0b 5407 	mla	r4, fp, r7, r5
 800a7b0:	9401      	str	r4, [sp, #4]
 800a7b2:	e9dd 4500 	ldrd	r4, r5, [sp]
 800a7b6:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800a7ba:	f145 0500 	adc.w	r5, r5, #0
 800a7be:	006c      	lsls	r4, r5, #1
 800a7c0:	4625      	mov	r5, r4
 800a7c2:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 800a7c6:	042d      	lsls	r5, r5, #16
 800a7c8:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a7cc:	2700      	movs	r7, #0
 800a7ce:	fb01 fb0b 	mul.w	fp, r1, fp
 800a7d2:	fa1f f188 	uxth.w	r1, r8
 800a7d6:	fbc9 6705 	smlal	r6, r7, r9, r5
 800a7da:	9e03      	ldr	r6, [sp, #12]
 800a7dc:	10bd      	asrs	r5, r7, #2
 800a7de:	f305 050f 	ssat	r5, #16, r5
 800a7e2:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 800a7e6:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800a7e8:	428d      	cmp	r5, r1
 800a7ea:	d90a      	bls.n	800a802 <D16_GENERIC+0xea>
 800a7ec:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800a7ee:	2d01      	cmp	r5, #1
 800a7f0:	b2ee      	uxtb	r6, r5
 800a7f2:	d1ad      	bne.n	800a750 <D16_GENERIC+0x38>
 800a7f4:	9d05      	ldr	r5, [sp, #20]
 800a7f6:	f850 7b02 	ldr.w	r7, [r0], #2
 800a7fa:	2d00      	cmp	r5, #0
 800a7fc:	d0ae      	beq.n	800a75c <D16_GENERIC+0x44>
 800a7fe:	ba7f      	rev16	r7, r7
 800a800:	e7ac      	b.n	800a75c <D16_GENERIC+0x44>
 800a802:	2000      	movs	r0, #0
 800a804:	9906      	ldr	r1, [sp, #24]
 800a806:	61d3      	str	r3, [r2, #28]
 800a808:	9b07      	ldr	r3, [sp, #28]
 800a80a:	f8c2 c008 	str.w	ip, [r2, #8]
 800a80e:	60d1      	str	r1, [r2, #12]
 800a810:	6193      	str	r3, [r2, #24]
 800a812:	e9c2 4a04 	strd	r4, sl, [r2, #16]
 800a816:	b009      	add	sp, #36	; 0x24
 800a818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a81c:	00030001 	.word	0x00030001
 800a820:	00010003 	.word	0x00010003
 800a824:	24000000 	.word	0x24000000

0800a828 <D24_GENERIC>:
 800a828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a82c:	e9d2 4304 	ldrd	r4, r3, [r2, #16]
 800a830:	b089      	sub	sp, #36	; 0x24
 800a832:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 800a834:	9303      	str	r3, [sp, #12]
 800a836:	6993      	ldr	r3, [r2, #24]
 800a838:	9104      	str	r1, [sp, #16]
 800a83a:	9307      	str	r3, [sp, #28]
 800a83c:	69d1      	ldr	r1, [r2, #28]
 800a83e:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 800a842:	e9d2 a50c 	ldrd	sl, r5, [r2, #48]	; 0x30
 800a846:	2e00      	cmp	r6, #0
 800a848:	f000 8088 	beq.w	800a95c <D24_GENERIC+0x134>
 800a84c:	f005 0620 	and.w	r6, r5, #32
 800a850:	f005 0510 	and.w	r5, r5, #16
 800a854:	f04f 0c00 	mov.w	ip, #0
 800a858:	f8df e140 	ldr.w	lr, [pc, #320]	; 800a99c <D24_GENERIC+0x174>
 800a85c:	9606      	str	r6, [sp, #24]
 800a85e:	9505      	str	r5, [sp, #20]
 800a860:	e064      	b.n	800a92c <D24_GENERIC+0x104>
 800a862:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 800a866:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 800a86a:	f810 b007 	ldrb.w	fp, [r0, r7]
 800a86e:	042d      	lsls	r5, r5, #16
 800a870:	19f0      	adds	r0, r6, r7
 800a872:	eb05 250b 	add.w	r5, r5, fp, lsl #8
 800a876:	44a9      	add	r9, r5
 800a878:	fa5f f689 	uxtb.w	r6, r9
 800a87c:	f3c9 2707 	ubfx	r7, r9, #8, #8
 800a880:	ea4f 4919 	mov.w	r9, r9, lsr #16
 800a884:	f85e 6026 	ldr.w	r6, [lr, r6, lsl #2]
 800a888:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
 800a88c:	eb06 2691 	add.w	r6, r6, r1, lsr #10
 800a890:	f85e 1029 	ldr.w	r1, [lr, r9, lsl #2]
 800a894:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 800a898:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800a89c:	f3c7 0509 	ubfx	r5, r7, #0, #10
 800a8a0:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 800a8a4:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 800a8a8:	4d3a      	ldr	r5, [pc, #232]	; (800a994 <D24_GENERIC+0x16c>)
 800a8aa:	fb26 8705 	smlad	r7, r6, r5, r8
 800a8ae:	4d3a      	ldr	r5, [pc, #232]	; (800a998 <D24_GENERIC+0x170>)
 800a8b0:	fb26 3805 	smlad	r8, r6, r5, r3
 800a8b4:	f3c1 0309 	ubfx	r3, r1, #0, #10
 800a8b8:	eb03 0b43 	add.w	fp, r3, r3, lsl #1
 800a8bc:	2301      	movs	r3, #1
 800a8be:	eb08 084b 	add.w	r8, r8, fp, lsl #1
 800a8c2:	fb26 f603 	smuad	r6, r6, r3
 800a8c6:	eb0c 0903 	add.w	r9, ip, r3
 800a8ca:	eb0b 0306 	add.w	r3, fp, r6
 800a8ce:	9e05      	ldr	r6, [sp, #20]
 800a8d0:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 800a8d4:	b1ae      	cbz	r6, 800a902 <D24_GENERIC+0xda>
 800a8d6:	442c      	add	r4, r5
 800a8d8:	9e03      	ldr	r6, [sp, #12]
 800a8da:	f8d2 b020 	ldr.w	fp, [r2, #32]
 800a8de:	1ba4      	subs	r4, r4, r6
 800a8e0:	9503      	str	r5, [sp, #12]
 800a8e2:	17e7      	asrs	r7, r4, #31
 800a8e4:	fba4 450b 	umull	r4, r5, r4, fp
 800a8e8:	e9cd 4500 	strd	r4, r5, [sp]
 800a8ec:	fb0b 5407 	mla	r4, fp, r7, r5
 800a8f0:	9401      	str	r4, [sp, #4]
 800a8f2:	e9dd 4500 	ldrd	r4, r5, [sp]
 800a8f6:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800a8fa:	f145 0500 	adc.w	r5, r5, #0
 800a8fe:	006c      	lsls	r4, r5, #1
 800a900:	4625      	mov	r5, r4
 800a902:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 800a906:	03ad      	lsls	r5, r5, #14
 800a908:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a90c:	2700      	movs	r7, #0
 800a90e:	fb0c fb0b 	mul.w	fp, ip, fp
 800a912:	fa1f fc89 	uxth.w	ip, r9
 800a916:	fbca 6705 	smlal	r6, r7, sl, r5
 800a91a:	9e04      	ldr	r6, [sp, #16]
 800a91c:	10bd      	asrs	r5, r7, #2
 800a91e:	f305 050f 	ssat	r5, #16, r5
 800a922:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 800a926:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800a928:	4565      	cmp	r5, ip
 800a92a:	d917      	bls.n	800a95c <D24_GENERIC+0x134>
 800a92c:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800a92e:	f890 9000 	ldrb.w	r9, [r0]
 800a932:	b2ef      	uxtb	r7, r5
 800a934:	2d01      	cmp	r5, #1
 800a936:	b23e      	sxth	r6, r7
 800a938:	d193      	bne.n	800a862 <D24_GENERIC+0x3a>
 800a93a:	9d06      	ldr	r5, [sp, #24]
 800a93c:	b1dd      	cbz	r5, 800a976 <D24_GENERIC+0x14e>
 800a93e:	78c7      	ldrb	r7, [r0, #3]
 800a940:	ea4f 2609 	mov.w	r6, r9, lsl #8
 800a944:	f01c 0f01 	tst.w	ip, #1
 800a948:	ea4f 2507 	mov.w	r5, r7, lsl #8
 800a94c:	eb06 4607 	add.w	r6, r6, r7, lsl #16
 800a950:	d11a      	bne.n	800a988 <D24_GENERIC+0x160>
 800a952:	f890 9001 	ldrb.w	r9, [r0, #1]
 800a956:	3002      	adds	r0, #2
 800a958:	44b1      	add	r9, r6
 800a95a:	e78d      	b.n	800a878 <D24_GENERIC+0x50>
 800a95c:	6093      	str	r3, [r2, #8]
 800a95e:	2000      	movs	r0, #0
 800a960:	9b03      	ldr	r3, [sp, #12]
 800a962:	f8c2 800c 	str.w	r8, [r2, #12]
 800a966:	6153      	str	r3, [r2, #20]
 800a968:	9b07      	ldr	r3, [sp, #28]
 800a96a:	61d1      	str	r1, [r2, #28]
 800a96c:	6114      	str	r4, [r2, #16]
 800a96e:	6193      	str	r3, [r2, #24]
 800a970:	b009      	add	sp, #36	; 0x24
 800a972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a976:	7845      	ldrb	r5, [r0, #1]
 800a978:	3003      	adds	r0, #3
 800a97a:	f810 6c01 	ldrb.w	r6, [r0, #-1]
 800a97e:	022d      	lsls	r5, r5, #8
 800a980:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 800a984:	44a9      	add	r9, r5
 800a986:	e777      	b.n	800a878 <D24_GENERIC+0x50>
 800a988:	7886      	ldrb	r6, [r0, #2]
 800a98a:	3004      	adds	r0, #4
 800a98c:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 800a990:	44a9      	add	r9, r5
 800a992:	e771      	b.n	800a878 <D24_GENERIC+0x50>
 800a994:	00030001 	.word	0x00030001
 800a998:	00060007 	.word	0x00060007
 800a99c:	24000000 	.word	0x24000000

0800a9a0 <D32_GENERIC>:
 800a9a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9a4:	e9d2 4304 	ldrd	r4, r3, [r2, #16]
 800a9a8:	b089      	sub	sp, #36	; 0x24
 800a9aa:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800a9ac:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 800a9ae:	9302      	str	r3, [sp, #8]
 800a9b0:	6993      	ldr	r3, [r2, #24]
 800a9b2:	9104      	str	r1, [sp, #16]
 800a9b4:	9307      	str	r3, [sp, #28]
 800a9b6:	9503      	str	r5, [sp, #12]
 800a9b8:	69d1      	ldr	r1, [r2, #28]
 800a9ba:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800a9bc:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 800a9c0:	2e00      	cmp	r6, #0
 800a9c2:	f000 8097 	beq.w	800aaf4 <D32_GENERIC+0x154>
 800a9c6:	f005 0620 	and.w	r6, r5, #32
 800a9ca:	f005 0510 	and.w	r5, r5, #16
 800a9ce:	f04f 0e00 	mov.w	lr, #0
 800a9d2:	f8df c150 	ldr.w	ip, [pc, #336]	; 800ab24 <D32_GENERIC+0x184>
 800a9d6:	9606      	str	r6, [sp, #24]
 800a9d8:	9505      	str	r5, [sp, #20]
 800a9da:	e079      	b.n	800aad0 <D32_GENERIC+0x130>
 800a9dc:	783d      	ldrb	r5, [r7, #0]
 800a9de:	f810 b009 	ldrb.w	fp, [r0, r9]
 800a9e2:	042d      	lsls	r5, r5, #16
 800a9e4:	f810 a006 	ldrb.w	sl, [r0, r6]
 800a9e8:	f890 9000 	ldrb.w	r9, [r0]
 800a9ec:	eb07 0046 	add.w	r0, r7, r6, lsl #1
 800a9f0:	eb05 650b 	add.w	r5, r5, fp, lsl #24
 800a9f4:	eb05 250a 	add.w	r5, r5, sl, lsl #8
 800a9f8:	44a9      	add	r9, r5
 800a9fa:	fa5f f789 	uxtb.w	r7, r9
 800a9fe:	f3c9 2507 	ubfx	r5, r9, #8, #8
 800aa02:	f3c9 4607 	ubfx	r6, r9, #16, #8
 800aa06:	ea4f 6919 	mov.w	r9, r9, lsr #24
 800aa0a:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 800aa0e:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 800aa12:	eb07 2191 	add.w	r1, r7, r1, lsr #10
 800aa16:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
 800aa1a:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
 800aa1e:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800aa22:	f3c1 0909 	ubfx	r9, r1, #0, #10
 800aa26:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 800aa2a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800aa2e:	eb07 2196 	add.w	r1, r7, r6, lsr #10
 800aa32:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800aa36:	ea45 4909 	orr.w	r9, r5, r9, lsl #16
 800aa3a:	f3c1 0509 	ubfx	r5, r1, #0, #10
 800aa3e:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 800aa42:	4d34      	ldr	r5, [pc, #208]	; (800ab14 <D32_GENERIC+0x174>)
 800aa44:	fb29 8805 	smlad	r8, r9, r5, r8
 800aa48:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 800aa4c:	fb26 8705 	smlad	r7, r6, r5, r8
 800aa50:	4d31      	ldr	r5, [pc, #196]	; (800ab18 <D32_GENERIC+0x178>)
 800aa52:	fb29 3305 	smlad	r3, r9, r5, r3
 800aa56:	4d31      	ldr	r5, [pc, #196]	; (800ab1c <D32_GENERIC+0x17c>)
 800aa58:	fb26 3805 	smlad	r8, r6, r5, r3
 800aa5c:	2301      	movs	r3, #1
 800aa5e:	fb29 f903 	smuad	r9, r9, r3
 800aa62:	4b2f      	ldr	r3, [pc, #188]	; (800ab20 <D32_GENERIC+0x180>)
 800aa64:	fb26 9303 	smlad	r3, r6, r3, r9
 800aa68:	9e05      	ldr	r6, [sp, #20]
 800aa6a:	f10e 0901 	add.w	r9, lr, #1
 800aa6e:	f5a7 4580 	sub.w	r5, r7, #16384	; 0x4000
 800aa72:	b1ae      	cbz	r6, 800aaa0 <D32_GENERIC+0x100>
 800aa74:	442c      	add	r4, r5
 800aa76:	9e02      	ldr	r6, [sp, #8]
 800aa78:	f8d2 a020 	ldr.w	sl, [r2, #32]
 800aa7c:	1ba4      	subs	r4, r4, r6
 800aa7e:	9502      	str	r5, [sp, #8]
 800aa80:	17e7      	asrs	r7, r4, #31
 800aa82:	fba4 450a 	umull	r4, r5, r4, sl
 800aa86:	e9cd 4500 	strd	r4, r5, [sp]
 800aa8a:	fb0a 5407 	mla	r4, sl, r7, r5
 800aa8e:	9401      	str	r4, [sp, #4]
 800aa90:	e9dd 4500 	ldrd	r4, r5, [sp]
 800aa94:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800aa98:	f145 0500 	adc.w	r5, r5, #0
 800aa9c:	006c      	lsls	r4, r5, #1
 800aa9e:	4625      	mov	r5, r4
 800aaa0:	f8b2 a028 	ldrh.w	sl, [r2, #40]	; 0x28
 800aaa4:	036d      	lsls	r5, r5, #13
 800aaa6:	9f03      	ldr	r7, [sp, #12]
 800aaa8:	fb0e fb0a 	mul.w	fp, lr, sl
 800aaac:	fa1f fe89 	uxth.w	lr, r9
 800aab0:	f04f 0a00 	mov.w	sl, #0
 800aab4:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 800aab8:	9e04      	ldr	r6, [sp, #16]
 800aaba:	fbc7 9a05 	smlal	r9, sl, r7, r5
 800aabe:	4657      	mov	r7, sl
 800aac0:	10bd      	asrs	r5, r7, #2
 800aac2:	f305 050f 	ssat	r5, #16, r5
 800aac6:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 800aaca:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800aacc:	4575      	cmp	r5, lr
 800aace:	d911      	bls.n	800aaf4 <D32_GENERIC+0x154>
 800aad0:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800aad2:	b2ee      	uxtb	r6, r5
 800aad4:	2d01      	cmp	r5, #1
 800aad6:	eb00 0746 	add.w	r7, r0, r6, lsl #1
 800aada:	eb06 0946 	add.w	r9, r6, r6, lsl #1
 800aade:	f47f af7d 	bne.w	800a9dc <D32_GENERIC+0x3c>
 800aae2:	1d05      	adds	r5, r0, #4
 800aae4:	f8d0 9000 	ldr.w	r9, [r0]
 800aae8:	9806      	ldr	r0, [sp, #24]
 800aaea:	b180      	cbz	r0, 800ab0e <D32_GENERIC+0x16e>
 800aaec:	fa99 f999 	rev16.w	r9, r9
 800aaf0:	4628      	mov	r0, r5
 800aaf2:	e782      	b.n	800a9fa <D32_GENERIC+0x5a>
 800aaf4:	6093      	str	r3, [r2, #8]
 800aaf6:	2000      	movs	r0, #0
 800aaf8:	9b02      	ldr	r3, [sp, #8]
 800aafa:	f8c2 800c 	str.w	r8, [r2, #12]
 800aafe:	6153      	str	r3, [r2, #20]
 800ab00:	9b07      	ldr	r3, [sp, #28]
 800ab02:	61d1      	str	r1, [r2, #28]
 800ab04:	6114      	str	r4, [r2, #16]
 800ab06:	6193      	str	r3, [r2, #24]
 800ab08:	b009      	add	sp, #36	; 0x24
 800ab0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab0e:	4628      	mov	r0, r5
 800ab10:	e773      	b.n	800a9fa <D32_GENERIC+0x5a>
 800ab12:	bf00      	nop
 800ab14:	00060003 	.word	0x00060003
 800ab18:	000a000c 	.word	0x000a000c
 800ab1c:	000c000a 	.word	0x000c000a
 800ab20:	00030006 	.word	0x00030006
 800ab24:	24000000 	.word	0x24000000

0800ab28 <D48_GENERIC>:
 800ab28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab2c:	6913      	ldr	r3, [r2, #16]
 800ab2e:	b089      	sub	sp, #36	; 0x24
 800ab30:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800ab32:	9301      	str	r3, [sp, #4]
 800ab34:	6953      	ldr	r3, [r2, #20]
 800ab36:	9104      	str	r1, [sp, #16]
 800ab38:	9302      	str	r3, [sp, #8]
 800ab3a:	6993      	ldr	r3, [r2, #24]
 800ab3c:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 800ab40:	9307      	str	r3, [sp, #28]
 800ab42:	e9d2 3102 	ldrd	r3, r1, [r2, #8]
 800ab46:	9100      	str	r1, [sp, #0]
 800ab48:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800ab4a:	9103      	str	r1, [sp, #12]
 800ab4c:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800ab4e:	2c00      	cmp	r4, #0
 800ab50:	f000 80be 	beq.w	800acd0 <D48_GENERIC+0x1a8>
 800ab54:	f001 0420 	and.w	r4, r1, #32
 800ab58:	f001 0110 	and.w	r1, r1, #16
 800ab5c:	f04f 0e00 	mov.w	lr, #0
 800ab60:	9105      	str	r1, [sp, #20]
 800ab62:	9406      	str	r4, [sp, #24]
 800ab64:	4962      	ldr	r1, [pc, #392]	; (800acf0 <D48_GENERIC+0x1c8>)
 800ab66:	e0a0      	b.n	800acaa <D48_GENERIC+0x182>
 800ab68:	eb00 0608 	add.w	r6, r0, r8
 800ab6c:	f810 a008 	ldrb.w	sl, [r0, r8]
 800ab70:	f810 9005 	ldrb.w	r9, [r0, r5]
 800ab74:	5df4      	ldrb	r4, [r6, r7]
 800ab76:	443e      	add	r6, r7
 800ab78:	f890 b000 	ldrb.w	fp, [r0]
 800ab7c:	0420      	lsls	r0, r4, #16
 800ab7e:	eb06 0408 	add.w	r4, r6, r8
 800ab82:	f816 6008 	ldrb.w	r6, [r6, r8]
 800ab86:	eb00 6a0a 	add.w	sl, r0, sl, lsl #24
 800ab8a:	f814 8007 	ldrb.w	r8, [r4, r7]
 800ab8e:	4427      	add	r7, r4
 800ab90:	eb0a 2a09 	add.w	sl, sl, r9, lsl #8
 800ab94:	eb08 2606 	add.w	r6, r8, r6, lsl #8
 800ab98:	eb0a 040b 	add.w	r4, sl, fp
 800ab9c:	eb07 0045 	add.w	r0, r7, r5, lsl #1
 800aba0:	f3c6 2807 	ubfx	r8, r6, #8, #8
 800aba4:	b2f7      	uxtb	r7, r6
 800aba6:	b2e6      	uxtb	r6, r4
 800aba8:	f3c4 2507 	ubfx	r5, r4, #8, #8
 800abac:	f3c4 4907 	ubfx	r9, r4, #16, #8
 800abb0:	ea4f 6b14 	mov.w	fp, r4, lsr #24
 800abb4:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800abb8:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 800abbc:	eb06 269c 	add.w	r6, r6, ip, lsr #10
 800abc0:	f851 9029 	ldr.w	r9, [r1, r9, lsl #2]
 800abc4:	f851 402b 	ldr.w	r4, [r1, fp, lsl #2]
 800abc8:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 800abcc:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 800abd0:	f851 c028 	ldr.w	ip, [r1, r8, lsl #2]
 800abd4:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800abd8:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 800abdc:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800abe0:	eb04 2499 	add.w	r4, r4, r9, lsr #10
 800abe4:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800abe8:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 800abec:	9d00      	ldr	r5, [sp, #0]
 800abee:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 800abf2:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800abf6:	eb0c 2c97 	add.w	ip, ip, r7, lsr #10
 800abfa:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800abfe:	ea44 4909 	orr.w	r9, r4, r9, lsl #16
 800ac02:	f3cc 0409 	ubfx	r4, ip, #0, #10
 800ac06:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 800ac0a:	4c3a      	ldr	r4, [pc, #232]	; (800acf4 <D48_GENERIC+0x1cc>)
 800ac0c:	fb26 5a04 	smlad	sl, r6, r4, r5
 800ac10:	4c39      	ldr	r4, [pc, #228]	; (800acf8 <D48_GENERIC+0x1d0>)
 800ac12:	fb29 aa04 	smlad	sl, r9, r4, sl
 800ac16:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 800ac1a:	fb27 aa04 	smlad	sl, r7, r4, sl
 800ac1e:	4c37      	ldr	r4, [pc, #220]	; (800acfc <D48_GENERIC+0x1d4>)
 800ac20:	fb26 3304 	smlad	r3, r6, r4, r3
 800ac24:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 800ac28:	fb29 3304 	smlad	r3, r9, r4, r3
 800ac2c:	4c34      	ldr	r4, [pc, #208]	; (800ad00 <D48_GENERIC+0x1d8>)
 800ac2e:	fb27 3304 	smlad	r3, r7, r4, r3
 800ac32:	2501      	movs	r5, #1
 800ac34:	9300      	str	r3, [sp, #0]
 800ac36:	fb26 f605 	smuad	r6, r6, r5
 800ac3a:	4b32      	ldr	r3, [pc, #200]	; (800ad04 <D48_GENERIC+0x1dc>)
 800ac3c:	fb29 6903 	smlad	r9, r9, r3, r6
 800ac40:	4b31      	ldr	r3, [pc, #196]	; (800ad08 <D48_GENERIC+0x1e0>)
 800ac42:	fb27 9303 	smlad	r3, r7, r3, r9
 800ac46:	9c05      	ldr	r4, [sp, #20]
 800ac48:	eb0e 0805 	add.w	r8, lr, r5
 800ac4c:	f5aa 4a58 	sub.w	sl, sl, #55296	; 0xd800
 800ac50:	b19c      	cbz	r4, 800ac7a <D48_GENERIC+0x152>
 800ac52:	9c01      	ldr	r4, [sp, #4]
 800ac54:	9d02      	ldr	r5, [sp, #8]
 800ac56:	4454      	add	r4, sl
 800ac58:	f8d2 9020 	ldr.w	r9, [r2, #32]
 800ac5c:	f8cd a008 	str.w	sl, [sp, #8]
 800ac60:	1b64      	subs	r4, r4, r5
 800ac62:	fba4 ab09 	umull	sl, fp, r4, r9
 800ac66:	17e7      	asrs	r7, r4, #31
 800ac68:	f11a 4400 	adds.w	r4, sl, #2147483648	; 0x80000000
 800ac6c:	fb09 bb07 	mla	fp, r9, r7, fp
 800ac70:	f14b 0500 	adc.w	r5, fp, #0
 800ac74:	006c      	lsls	r4, r5, #1
 800ac76:	46a2      	mov	sl, r4
 800ac78:	9401      	str	r4, [sp, #4]
 800ac7a:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 800ac7c:	ea4f 2aca 	mov.w	sl, sl, lsl #11
 800ac80:	9d03      	ldr	r5, [sp, #12]
 800ac82:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800ac86:	fb0e f606 	mul.w	r6, lr, r6
 800ac8a:	fa1f fe88 	uxth.w	lr, r8
 800ac8e:	f04f 0800 	mov.w	r8, #0
 800ac92:	fbc5 780a 	smlal	r7, r8, r5, sl
 800ac96:	4645      	mov	r5, r8
 800ac98:	10ac      	asrs	r4, r5, #2
 800ac9a:	9d04      	ldr	r5, [sp, #16]
 800ac9c:	f304 040f 	ssat	r4, #16, r4
 800aca0:	f825 4016 	strh.w	r4, [r5, r6, lsl #1]
 800aca4:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800aca6:	4574      	cmp	r4, lr
 800aca8:	d912      	bls.n	800acd0 <D48_GENERIC+0x1a8>
 800acaa:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 800acac:	b2e5      	uxtb	r5, r4
 800acae:	2c01      	cmp	r4, #1
 800acb0:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 800acb4:	f1c5 0700 	rsb	r7, r5, #0
 800acb8:	f47f af56 	bne.w	800ab68 <D48_GENERIC+0x40>
 800acbc:	9d06      	ldr	r5, [sp, #24]
 800acbe:	e9d0 4600 	ldrd	r4, r6, [r0]
 800acc2:	3006      	adds	r0, #6
 800acc4:	2d00      	cmp	r5, #0
 800acc6:	f43f af6b 	beq.w	800aba0 <D48_GENERIC+0x78>
 800acca:	ba64      	rev16	r4, r4
 800accc:	ba76      	rev16	r6, r6
 800acce:	e767      	b.n	800aba0 <D48_GENERIC+0x78>
 800acd0:	6093      	str	r3, [r2, #8]
 800acd2:	2000      	movs	r0, #0
 800acd4:	9b00      	ldr	r3, [sp, #0]
 800acd6:	f8c2 c01c 	str.w	ip, [r2, #28]
 800acda:	60d3      	str	r3, [r2, #12]
 800acdc:	9b01      	ldr	r3, [sp, #4]
 800acde:	6113      	str	r3, [r2, #16]
 800ace0:	9b02      	ldr	r3, [sp, #8]
 800ace2:	6153      	str	r3, [r2, #20]
 800ace4:	9b07      	ldr	r3, [sp, #28]
 800ace6:	6193      	str	r3, [r2, #24]
 800ace8:	b009      	add	sp, #36	; 0x24
 800acea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acee:	bf00      	nop
 800acf0:	24000000 	.word	0x24000000
 800acf4:	000f000a 	.word	0x000f000a
 800acf8:	00060003 	.word	0x00060003
 800acfc:	00150019 	.word	0x00150019
 800ad00:	00190015 	.word	0x00190015
 800ad04:	00030006 	.word	0x00030006
 800ad08:	000a000f 	.word	0x000a000f

0800ad0c <D64_GENERIC>:
 800ad0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad10:	6913      	ldr	r3, [r2, #16]
 800ad12:	b089      	sub	sp, #36	; 0x24
 800ad14:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800ad16:	9300      	str	r3, [sp, #0]
 800ad18:	6953      	ldr	r3, [r2, #20]
 800ad1a:	9105      	str	r1, [sp, #20]
 800ad1c:	9303      	str	r3, [sp, #12]
 800ad1e:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 800ad20:	6993      	ldr	r3, [r2, #24]
 800ad22:	69d4      	ldr	r4, [r2, #28]
 800ad24:	9307      	str	r3, [sp, #28]
 800ad26:	9504      	str	r5, [sp, #16]
 800ad28:	e9d2 3602 	ldrd	r3, r6, [r2, #8]
 800ad2c:	2900      	cmp	r1, #0
 800ad2e:	f000 80e8 	beq.w	800af02 <D64_GENERIC+0x1f6>
 800ad32:	6a11      	ldr	r1, [r2, #32]
 800ad34:	2500      	movs	r5, #0
 800ad36:	46b3      	mov	fp, r6
 800ad38:	9302      	str	r3, [sp, #8]
 800ad3a:	9106      	str	r1, [sp, #24]
 800ad3c:	4978      	ldr	r1, [pc, #480]	; (800af20 <D64_GENERIC+0x214>)
 800ad3e:	e0cc      	b.n	800aeda <D64_GENERIC+0x1ce>
 800ad40:	eb0e 084e 	add.w	r8, lr, lr, lsl #1
 800ad44:	f1ce 0c00 	rsb	ip, lr, #0
 800ad48:	f890 9000 	ldrb.w	r9, [r0]
 800ad4c:	eb00 0708 	add.w	r7, r0, r8
 800ad50:	f810 6008 	ldrb.w	r6, [r0, r8]
 800ad54:	eb07 0a4c 	add.w	sl, r7, ip, lsl #1
 800ad58:	f817 000c 	ldrb.w	r0, [r7, ip]
 800ad5c:	f817 301c 	ldrb.w	r3, [r7, ip, lsl #1]
 800ad60:	eb0a 0748 	add.w	r7, sl, r8, lsl #1
 800ad64:	f81a a018 	ldrb.w	sl, [sl, r8, lsl #1]
 800ad68:	ea4f 4800 	mov.w	r8, r0, lsl #16
 800ad6c:	f817 000c 	ldrb.w	r0, [r7, ip]
 800ad70:	eb08 6606 	add.w	r6, r8, r6, lsl #24
 800ad74:	f817 801c 	ldrb.w	r8, [r7, ip, lsl #1]
 800ad78:	0400      	lsls	r0, r0, #16
 800ad7a:	4467      	add	r7, ip
 800ad7c:	eb06 2603 	add.w	r6, r6, r3, lsl #8
 800ad80:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 800ad84:	f817 a01c 	ldrb.w	sl, [r7, ip, lsl #1]
 800ad88:	eb07 074c 	add.w	r7, r7, ip, lsl #1
 800ad8c:	444e      	add	r6, r9
 800ad8e:	eb00 2808 	add.w	r8, r0, r8, lsl #8
 800ad92:	eb07 008e 	add.w	r0, r7, lr, lsl #2
 800ad96:	44c2      	add	sl, r8
 800ad98:	b2f7      	uxtb	r7, r6
 800ad9a:	f3c6 2807 	ubfx	r8, r6, #8, #8
 800ad9e:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 800ada2:	0e36      	lsrs	r6, r6, #24
 800ada4:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 800ada8:	fa5f fc8a 	uxtb.w	ip, sl
 800adac:	f851 8028 	ldr.w	r8, [r1, r8, lsl #2]
 800adb0:	f3ca 2907 	ubfx	r9, sl, #8, #8
 800adb4:	443c      	add	r4, r7
 800adb6:	f851 702e 	ldr.w	r7, [r1, lr, lsl #2]
 800adba:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800adbe:	eb08 2894 	add.w	r8, r8, r4, lsr #10
 800adc2:	f851 c02c 	ldr.w	ip, [r1, ip, lsl #2]
 800adc6:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800adca:	4b56      	ldr	r3, [pc, #344]	; (800af24 <D64_GENERIC+0x218>)
 800adcc:	eb07 2e98 	add.w	lr, r7, r8, lsr #10
 800add0:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800add4:	f851 7029 	ldr.w	r7, [r1, r9, lsl #2]
 800add8:	eb06 269e 	add.w	r6, r6, lr, lsr #10
 800addc:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800ade0:	ea48 4804 	orr.w	r8, r8, r4, lsl #16
 800ade4:	f3ca 4407 	ubfx	r4, sl, #16, #8
 800ade8:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 800adec:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800adf0:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800adf4:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 800adf8:	eb07 279c 	add.w	r7, r7, ip, lsr #10
 800adfc:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800ae00:	f851 902a 	ldr.w	r9, [r1, sl, lsl #2]
 800ae04:	ea46 460e 	orr.w	r6, r6, lr, lsl #16
 800ae08:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 800ae0c:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800ae10:	eb09 299a 	add.w	r9, r9, sl, lsr #10
 800ae14:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800ae18:	ea47 4c0c 	orr.w	ip, r7, ip, lsl #16
 800ae1c:	f3c9 0709 	ubfx	r7, r9, #0, #10
 800ae20:	ea4f 2499 	mov.w	r4, r9, lsr #10
 800ae24:	ea47 4a0a 	orr.w	sl, r7, sl, lsl #16
 800ae28:	fb28 b903 	smlad	r9, r8, r3, fp
 800ae2c:	4b3e      	ldr	r3, [pc, #248]	; (800af28 <D64_GENERIC+0x21c>)
 800ae2e:	fb26 9903 	smlad	r9, r6, r3, r9
 800ae32:	4b3e      	ldr	r3, [pc, #248]	; (800af2c <D64_GENERIC+0x220>)
 800ae34:	fb2c 9703 	smlad	r7, ip, r3, r9
 800ae38:	f44f 3980 	mov.w	r9, #65536	; 0x10000
 800ae3c:	fb2a 7909 	smlad	r9, sl, r9, r7
 800ae40:	4f3b      	ldr	r7, [pc, #236]	; (800af30 <D64_GENERIC+0x224>)
 800ae42:	9b02      	ldr	r3, [sp, #8]
 800ae44:	fb28 3307 	smlad	r3, r8, r7, r3
 800ae48:	fb2a 3317 	smladx	r3, sl, r7, r3
 800ae4c:	4f39      	ldr	r7, [pc, #228]	; (800af34 <D64_GENERIC+0x228>)
 800ae4e:	fb26 3307 	smlad	r3, r6, r7, r3
 800ae52:	fb2c 3b17 	smladx	fp, ip, r7, r3
 800ae56:	f04f 0e01 	mov.w	lr, #1
 800ae5a:	fb28 f80e 	smuad	r8, r8, lr
 800ae5e:	4b36      	ldr	r3, [pc, #216]	; (800af38 <D64_GENERIC+0x22c>)
 800ae60:	fb26 8603 	smlad	r6, r6, r3, r8
 800ae64:	4b35      	ldr	r3, [pc, #212]	; (800af3c <D64_GENERIC+0x230>)
 800ae66:	fb2c 6c03 	smlad	ip, ip, r3, r6
 800ae6a:	4b35      	ldr	r3, [pc, #212]	; (800af40 <D64_GENERIC+0x234>)
 800ae6c:	fb2a c303 	smlad	r3, sl, r3, ip
 800ae70:	9f06      	ldr	r7, [sp, #24]
 800ae72:	f5a9 3900 	sub.w	r9, r9, #131072	; 0x20000
 800ae76:	9302      	str	r3, [sp, #8]
 800ae78:	b1cf      	cbz	r7, 800aeae <D64_GENERIC+0x1a2>
 800ae7a:	9b00      	ldr	r3, [sp, #0]
 800ae7c:	444b      	add	r3, r9
 800ae7e:	461e      	mov	r6, r3
 800ae80:	9b03      	ldr	r3, [sp, #12]
 800ae82:	f8cd 900c 	str.w	r9, [sp, #12]
 800ae86:	1af6      	subs	r6, r6, r3
 800ae88:	46b0      	mov	r8, r6
 800ae8a:	ea4f 79e6 	mov.w	r9, r6, asr #31
 800ae8e:	e9cd 8900 	strd	r8, r9, [sp]
 800ae92:	fba6 8907 	umull	r8, r9, r6, r7
 800ae96:	9e01      	ldr	r6, [sp, #4]
 800ae98:	fb07 9306 	mla	r3, r7, r6, r9
 800ae9c:	4646      	mov	r6, r8
 800ae9e:	f116 4600 	adds.w	r6, r6, #2147483648	; 0x80000000
 800aea2:	f143 0700 	adc.w	r7, r3, #0
 800aea6:	fa07 f30e 	lsl.w	r3, r7, lr
 800aeaa:	4699      	mov	r9, r3
 800aeac:	9300      	str	r3, [sp, #0]
 800aeae:	f8b2 c028 	ldrh.w	ip, [r2, #40]	; 0x28
 800aeb2:	ea4f 2989 	mov.w	r9, r9, lsl #10
 800aeb6:	9b04      	ldr	r3, [sp, #16]
 800aeb8:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800aebc:	2700      	movs	r7, #0
 800aebe:	fb05 fc0c 	mul.w	ip, r5, ip
 800aec2:	3501      	adds	r5, #1
 800aec4:	fbc3 6709 	smlal	r6, r7, r3, r9
 800aec8:	9b05      	ldr	r3, [sp, #20]
 800aeca:	10be      	asrs	r6, r7, #2
 800aecc:	f306 060f 	ssat	r6, #16, r6
 800aed0:	f823 601c 	strh.w	r6, [r3, ip, lsl #1]
 800aed4:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 800aed6:	42ae      	cmp	r6, r5
 800aed8:	dd11      	ble.n	800aefe <D64_GENERIC+0x1f2>
 800aeda:	f8b2 e02a 	ldrh.w	lr, [r2, #42]	; 0x2a
 800aede:	f1be 0f01 	cmp.w	lr, #1
 800aee2:	f47f af2d 	bne.w	800ad40 <D64_GENERIC+0x34>
 800aee6:	6b57      	ldr	r7, [r2, #52]	; 0x34
 800aee8:	f100 0c08 	add.w	ip, r0, #8
 800aeec:	06bb      	lsls	r3, r7, #26
 800aeee:	e9d0 6a00 	ldrd	r6, sl, [r0]
 800aef2:	d513      	bpl.n	800af1c <D64_GENERIC+0x210>
 800aef4:	ba76      	rev16	r6, r6
 800aef6:	fa9a fa9a 	rev16.w	sl, sl
 800aefa:	4660      	mov	r0, ip
 800aefc:	e74c      	b.n	800ad98 <D64_GENERIC+0x8c>
 800aefe:	465e      	mov	r6, fp
 800af00:	9b02      	ldr	r3, [sp, #8]
 800af02:	6093      	str	r3, [r2, #8]
 800af04:	2000      	movs	r0, #0
 800af06:	9b00      	ldr	r3, [sp, #0]
 800af08:	60d6      	str	r6, [r2, #12]
 800af0a:	6113      	str	r3, [r2, #16]
 800af0c:	9b03      	ldr	r3, [sp, #12]
 800af0e:	61d4      	str	r4, [r2, #28]
 800af10:	6153      	str	r3, [r2, #20]
 800af12:	9b07      	ldr	r3, [sp, #28]
 800af14:	6193      	str	r3, [r2, #24]
 800af16:	b009      	add	sp, #36	; 0x24
 800af18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af1c:	4660      	mov	r0, ip
 800af1e:	e73b      	b.n	800ad98 <D64_GENERIC+0x8c>
 800af20:	24000000 	.word	0x24000000
 800af24:	001c0015 	.word	0x001c0015
 800af28:	000f000a 	.word	0x000f000a
 800af2c:	00060003 	.word	0x00060003
 800af30:	0024002a 	.word	0x0024002a
 800af34:	002e0030 	.word	0x002e0030
 800af38:	00030006 	.word	0x00030006
 800af3c:	000a000f 	.word	0x000a000f
 800af40:	0015001c 	.word	0x0015001c

0800af44 <D80_GENERIC>:
 800af44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af48:	b08b      	sub	sp, #44	; 0x2c
 800af4a:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800af4c:	9107      	str	r1, [sp, #28]
 800af4e:	6911      	ldr	r1, [r2, #16]
 800af50:	9104      	str	r1, [sp, #16]
 800af52:	6951      	ldr	r1, [r2, #20]
 800af54:	9105      	str	r1, [sp, #20]
 800af56:	6991      	ldr	r1, [r2, #24]
 800af58:	9109      	str	r1, [sp, #36]	; 0x24
 800af5a:	69d1      	ldr	r1, [r2, #28]
 800af5c:	9102      	str	r1, [sp, #8]
 800af5e:	6891      	ldr	r1, [r2, #8]
 800af60:	9103      	str	r1, [sp, #12]
 800af62:	68d1      	ldr	r1, [r2, #12]
 800af64:	9101      	str	r1, [sp, #4]
 800af66:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800af68:	9106      	str	r1, [sp, #24]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	f000 810b 	beq.w	800b186 <D80_GENERIC+0x242>
 800af70:	6a13      	ldr	r3, [r2, #32]
 800af72:	f04f 0800 	mov.w	r8, #0
 800af76:	f8df c260 	ldr.w	ip, [pc, #608]	; 800b1d8 <D80_GENERIC+0x294>
 800af7a:	9308      	str	r3, [sp, #32]
 800af7c:	9200      	str	r2, [sp, #0]
 800af7e:	e0ee      	b.n	800b15e <D80_GENERIC+0x21a>
 800af80:	b2db      	uxtb	r3, r3
 800af82:	f890 e000 	ldrb.w	lr, [r0]
 800af86:	b219      	sxth	r1, r3
 800af88:	425c      	negs	r4, r3
 800af8a:	f810 9003 	ldrb.w	r9, [r0, r3]
 800af8e:	004e      	lsls	r6, r1, #1
 800af90:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 800af94:	4431      	add	r1, r6
 800af96:	1843      	adds	r3, r0, r1
 800af98:	f810 b001 	ldrb.w	fp, [r0, r1]
 800af9c:	1919      	adds	r1, r3, r4
 800af9e:	5d1b      	ldrb	r3, [r3, r4]
 800afa0:	1948      	adds	r0, r1, r5
 800afa2:	f811 a005 	ldrb.w	sl, [r1, r5]
 800afa6:	041b      	lsls	r3, r3, #16
 800afa8:	1907      	adds	r7, r0, r4
 800afaa:	5d01      	ldrb	r1, [r0, r4]
 800afac:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 800afb0:	f810 0014 	ldrb.w	r0, [r0, r4, lsl #1]
 800afb4:	eb07 0b44 	add.w	fp, r7, r4, lsl #1
 800afb8:	f817 7014 	ldrb.w	r7, [r7, r4, lsl #1]
 800afbc:	0409      	lsls	r1, r1, #16
 800afbe:	eb03 2309 	add.w	r3, r3, r9, lsl #8
 800afc2:	eb0b 0905 	add.w	r9, fp, r5
 800afc6:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 800afca:	f81b 5005 	ldrb.w	r5, [fp, r5]
 800afce:	eb09 0b04 	add.w	fp, r9, r4
 800afd2:	f819 4004 	ldrb.w	r4, [r9, r4]
 800afd6:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 800afda:	4473      	add	r3, lr
 800afdc:	eb0b 0006 	add.w	r0, fp, r6
 800afe0:	eb04 2505 	add.w	r5, r4, r5, lsl #8
 800afe4:	4439      	add	r1, r7
 800afe6:	f3c3 2407 	ubfx	r4, r3, #8, #8
 800afea:	b2df      	uxtb	r7, r3
 800afec:	f3c3 4607 	ubfx	r6, r3, #16, #8
 800aff0:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 800aff4:	f85c 3027 	ldr.w	r3, [ip, r7, lsl #2]
 800aff8:	fa5f fa81 	uxtb.w	sl, r1
 800affc:	f85c 7024 	ldr.w	r7, [ip, r4, lsl #2]
 800b000:	9c02      	ldr	r4, [sp, #8]
 800b002:	f85c 9026 	ldr.w	r9, [ip, r6, lsl #2]
 800b006:	441c      	add	r4, r3
 800b008:	f85c 602e 	ldr.w	r6, [ip, lr, lsl #2]
 800b00c:	f85c e02a 	ldr.w	lr, [ip, sl, lsl #2]
 800b010:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 800b014:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 800b018:	f3c4 0309 	ubfx	r3, r4, #0, #10
 800b01c:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800b020:	b2ed      	uxtb	r5, r5
 800b022:	eb09 2997 	add.w	r9, r9, r7, lsr #10
 800b026:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800b02a:	f85c 4024 	ldr.w	r4, [ip, r4, lsl #2]
 800b02e:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 800b032:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 800b036:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 800b03a:	f3c1 4707 	ubfx	r7, r1, #16, #8
 800b03e:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 800b042:	f85c a02a 	ldr.w	sl, [ip, sl, lsl #2]
 800b046:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 800b04a:	0e09      	lsrs	r1, r1, #24
 800b04c:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 800b050:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800b054:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 800b058:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800b05c:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 800b060:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800b064:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800b068:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 800b06c:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800b070:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
 800b074:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800b078:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800b07c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800b080:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 800b084:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800b088:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 800b08c:	ea4f 229a 	mov.w	r2, sl, lsr #10
 800b090:	f3ca 0709 	ubfx	r7, sl, #0, #10
 800b094:	9202      	str	r2, [sp, #8]
 800b096:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 800b09a:	4a43      	ldr	r2, [pc, #268]	; (800b1a8 <D80_GENERIC+0x264>)
 800b09c:	9f01      	ldr	r7, [sp, #4]
 800b09e:	fb23 7a02 	smlad	sl, r3, r2, r7
 800b0a2:	4a42      	ldr	r2, [pc, #264]	; (800b1ac <D80_GENERIC+0x268>)
 800b0a4:	fb26 aa02 	smlad	sl, r6, r2, sl
 800b0a8:	4a41      	ldr	r2, [pc, #260]	; (800b1b0 <D80_GENERIC+0x26c>)
 800b0aa:	fb24 aa02 	smlad	sl, r4, r2, sl
 800b0ae:	4a41      	ldr	r2, [pc, #260]	; (800b1b4 <D80_GENERIC+0x270>)
 800b0b0:	fb21 a702 	smlad	r7, r1, r2, sl
 800b0b4:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 800b0b8:	fb25 7a0a 	smlad	sl, r5, sl, r7
 800b0bc:	4a3e      	ldr	r2, [pc, #248]	; (800b1b8 <D80_GENERIC+0x274>)
 800b0be:	9f03      	ldr	r7, [sp, #12]
 800b0c0:	fb23 7e02 	smlad	lr, r3, r2, r7
 800b0c4:	4a3d      	ldr	r2, [pc, #244]	; (800b1bc <D80_GENERIC+0x278>)
 800b0c6:	fb26 ee02 	smlad	lr, r6, r2, lr
 800b0ca:	f04f 174b 	mov.w	r7, #4915275	; 0x4b004b
 800b0ce:	fb24 e707 	smlad	r7, r4, r7, lr
 800b0d2:	4a3b      	ldr	r2, [pc, #236]	; (800b1c0 <D80_GENERIC+0x27c>)
 800b0d4:	fb21 7702 	smlad	r7, r1, r2, r7
 800b0d8:	4a3a      	ldr	r2, [pc, #232]	; (800b1c4 <D80_GENERIC+0x280>)
 800b0da:	fb25 7202 	smlad	r2, r5, r2, r7
 800b0de:	f04f 0901 	mov.w	r9, #1
 800b0e2:	9201      	str	r2, [sp, #4]
 800b0e4:	fb23 f909 	smuad	r9, r3, r9
 800b0e8:	4b37      	ldr	r3, [pc, #220]	; (800b1c8 <D80_GENERIC+0x284>)
 800b0ea:	fb26 9603 	smlad	r6, r6, r3, r9
 800b0ee:	4f37      	ldr	r7, [pc, #220]	; (800b1cc <D80_GENERIC+0x288>)
 800b0f0:	fb24 6407 	smlad	r4, r4, r7, r6
 800b0f4:	4f36      	ldr	r7, [pc, #216]	; (800b1d0 <D80_GENERIC+0x28c>)
 800b0f6:	fb21 4707 	smlad	r7, r1, r7, r4
 800b0fa:	4936      	ldr	r1, [pc, #216]	; (800b1d4 <D80_GENERIC+0x290>)
 800b0fc:	fb25 7301 	smlad	r3, r5, r1, r7
 800b100:	9303      	str	r3, [sp, #12]
 800b102:	f5aa 3a7a 	sub.w	sl, sl, #256000	; 0x3e800
 800b106:	9b08      	ldr	r3, [sp, #32]
 800b108:	b193      	cbz	r3, 800b130 <D80_GENERIC+0x1ec>
 800b10a:	9a04      	ldr	r2, [sp, #16]
 800b10c:	4452      	add	r2, sl
 800b10e:	4614      	mov	r4, r2
 800b110:	9a05      	ldr	r2, [sp, #20]
 800b112:	f8cd a014 	str.w	sl, [sp, #20]
 800b116:	1aa4      	subs	r4, r4, r2
 800b118:	fba4 1203 	umull	r1, r2, r4, r3
 800b11c:	17e7      	asrs	r7, r4, #31
 800b11e:	f111 4400 	adds.w	r4, r1, #2147483648	; 0x80000000
 800b122:	fb03 2207 	mla	r2, r3, r7, r2
 800b126:	f142 0500 	adc.w	r5, r2, #0
 800b12a:	006b      	lsls	r3, r5, #1
 800b12c:	469a      	mov	sl, r3
 800b12e:	9304      	str	r3, [sp, #16]
 800b130:	9e00      	ldr	r6, [sp, #0]
 800b132:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
 800b136:	9a06      	ldr	r2, [sp, #24]
 800b138:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800b13c:	8d33      	ldrh	r3, [r6, #40]	; 0x28
 800b13e:	2500      	movs	r5, #0
 800b140:	fb08 f303 	mul.w	r3, r8, r3
 800b144:	fbc2 450a 	smlal	r4, r5, r2, sl
 800b148:	9a07      	ldr	r2, [sp, #28]
 800b14a:	f108 0801 	add.w	r8, r8, #1
 800b14e:	10a9      	asrs	r1, r5, #2
 800b150:	f301 010f 	ssat	r1, #16, r1
 800b154:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800b158:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 800b15a:	4543      	cmp	r3, r8
 800b15c:	dd12      	ble.n	800b184 <D80_GENERIC+0x240>
 800b15e:	9b00      	ldr	r3, [sp, #0]
 800b160:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b162:	2b01      	cmp	r3, #1
 800b164:	f47f af0c 	bne.w	800af80 <D80_GENERIC+0x3c>
 800b168:	9b00      	ldr	r3, [sp, #0]
 800b16a:	6885      	ldr	r5, [r0, #8]
 800b16c:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 800b16e:	06b2      	lsls	r2, r6, #26
 800b170:	e9d0 3100 	ldrd	r3, r1, [r0]
 800b174:	f100 000a 	add.w	r0, r0, #10
 800b178:	f57f af35 	bpl.w	800afe6 <D80_GENERIC+0xa2>
 800b17c:	ba5b      	rev16	r3, r3
 800b17e:	ba49      	rev16	r1, r1
 800b180:	ba6d      	rev16	r5, r5
 800b182:	e730      	b.n	800afe6 <D80_GENERIC+0xa2>
 800b184:	4632      	mov	r2, r6
 800b186:	9b03      	ldr	r3, [sp, #12]
 800b188:	2000      	movs	r0, #0
 800b18a:	6093      	str	r3, [r2, #8]
 800b18c:	9b01      	ldr	r3, [sp, #4]
 800b18e:	60d3      	str	r3, [r2, #12]
 800b190:	9b02      	ldr	r3, [sp, #8]
 800b192:	61d3      	str	r3, [r2, #28]
 800b194:	9b04      	ldr	r3, [sp, #16]
 800b196:	6113      	str	r3, [r2, #16]
 800b198:	9b05      	ldr	r3, [sp, #20]
 800b19a:	6153      	str	r3, [r2, #20]
 800b19c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b19e:	6193      	str	r3, [r2, #24]
 800b1a0:	b00b      	add	sp, #44	; 0x2c
 800b1a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1a6:	bf00      	nop
 800b1a8:	002d0024 	.word	0x002d0024
 800b1ac:	001c0015 	.word	0x001c0015
 800b1b0:	000f000a 	.word	0x000f000a
 800b1b4:	00060003 	.word	0x00060003
 800b1b8:	0037003f 	.word	0x0037003f
 800b1bc:	00450049 	.word	0x00450049
 800b1c0:	00490045 	.word	0x00490045
 800b1c4:	003f0037 	.word	0x003f0037
 800b1c8:	00030006 	.word	0x00030006
 800b1cc:	000a000f 	.word	0x000a000f
 800b1d0:	0015001c 	.word	0x0015001c
 800b1d4:	0024002d 	.word	0x0024002d
 800b1d8:	24000000 	.word	0x24000000

0800b1dc <D128_GENERIC>:
 800b1dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1e0:	b08d      	sub	sp, #52	; 0x34
 800b1e2:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800b1e4:	f8d2 a01c 	ldr.w	sl, [r2, #28]
 800b1e8:	9109      	str	r1, [sp, #36]	; 0x24
 800b1ea:	6911      	ldr	r1, [r2, #16]
 800b1ec:	9201      	str	r2, [sp, #4]
 800b1ee:	9106      	str	r1, [sp, #24]
 800b1f0:	6951      	ldr	r1, [r2, #20]
 800b1f2:	9107      	str	r1, [sp, #28]
 800b1f4:	6991      	ldr	r1, [r2, #24]
 800b1f6:	910b      	str	r1, [sp, #44]	; 0x2c
 800b1f8:	6891      	ldr	r1, [r2, #8]
 800b1fa:	9103      	str	r1, [sp, #12]
 800b1fc:	68d1      	ldr	r1, [r2, #12]
 800b1fe:	9102      	str	r1, [sp, #8]
 800b200:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800b202:	9108      	str	r1, [sp, #32]
 800b204:	2b00      	cmp	r3, #0
 800b206:	f000 8183 	beq.w	800b510 <D128_GENERIC+0x334>
 800b20a:	2300      	movs	r3, #0
 800b20c:	6a12      	ldr	r2, [r2, #32]
 800b20e:	4681      	mov	r9, r0
 800b210:	920a      	str	r2, [sp, #40]	; 0x28
 800b212:	e9cd a304 	strd	sl, r3, [sp, #16]
 800b216:	e165      	b.n	800b4e4 <D128_GENERIC+0x308>
 800b218:	b2d2      	uxtb	r2, r2
 800b21a:	f899 b000 	ldrb.w	fp, [r9]
 800b21e:	b213      	sxth	r3, r2
 800b220:	4255      	negs	r5, r2
 800b222:	f819 0002 	ldrb.w	r0, [r9, r2]
 800b226:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800b22a:	009f      	lsls	r7, r3, #2
 800b22c:	eb09 0402 	add.w	r4, r9, r2
 800b230:	ebc3 06c3 	rsb	r6, r3, r3, lsl #3
 800b234:	f819 8002 	ldrb.w	r8, [r9, r2]
 800b238:	443b      	add	r3, r7
 800b23a:	1962      	adds	r2, r4, r5
 800b23c:	5d64      	ldrb	r4, [r4, r5]
 800b23e:	eb02 0c03 	add.w	ip, r2, r3
 800b242:	0424      	lsls	r4, r4, #16
 800b244:	5cd3      	ldrb	r3, [r2, r3]
 800b246:	eb0c 0e05 	add.w	lr, ip, r5
 800b24a:	f81c 9015 	ldrb.w	r9, [ip, r5, lsl #1]
 800b24e:	f81c 2005 	ldrb.w	r2, [ip, r5]
 800b252:	eb04 6408 	add.w	r4, r4, r8, lsl #24
 800b256:	eb0e 0c45 	add.w	ip, lr, r5, lsl #1
 800b25a:	f81e 8015 	ldrb.w	r8, [lr, r5, lsl #1]
 800b25e:	eb04 2400 	add.w	r4, r4, r0, lsl #8
 800b262:	eb0c 0e06 	add.w	lr, ip, r6
 800b266:	f81c a006 	ldrb.w	sl, [ip, r6]
 800b26a:	0412      	lsls	r2, r2, #16
 800b26c:	445c      	add	r4, fp
 800b26e:	eb0e 0c05 	add.w	ip, lr, r5
 800b272:	eb02 6203 	add.w	r2, r2, r3, lsl #24
 800b276:	f81e 3005 	ldrb.w	r3, [lr, r5]
 800b27a:	eb0c 0045 	add.w	r0, ip, r5, lsl #1
 800b27e:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 800b282:	041b      	lsls	r3, r3, #16
 800b284:	f81c c015 	ldrb.w	ip, [ip, r5, lsl #1]
 800b288:	eb00 0b06 	add.w	fp, r0, r6
 800b28c:	5d80      	ldrb	r0, [r0, r6]
 800b28e:	eb03 630a 	add.w	r3, r3, sl, lsl #24
 800b292:	f81b 6005 	ldrb.w	r6, [fp, r5]
 800b296:	eb0b 0a05 	add.w	sl, fp, r5
 800b29a:	eb02 2209 	add.w	r2, r2, r9, lsl #8
 800b29e:	f81b b015 	ldrb.w	fp, [fp, r5, lsl #1]
 800b2a2:	0436      	lsls	r6, r6, #16
 800b2a4:	eb0a 0945 	add.w	r9, sl, r5, lsl #1
 800b2a8:	4442      	add	r2, r8
 800b2aa:	eb06 6600 	add.w	r6, r6, r0, lsl #24
 800b2ae:	f81a 8015 	ldrb.w	r8, [sl, r5, lsl #1]
 800b2b2:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 800b2b6:	44b9      	add	r9, r7
 800b2b8:	eb06 260b 	add.w	r6, r6, fp, lsl #8
 800b2bc:	4463      	add	r3, ip
 800b2be:	eb06 0508 	add.w	r5, r6, r8
 800b2c2:	b2e7      	uxtb	r7, r4
 800b2c4:	f3c4 2607 	ubfx	r6, r4, #8, #8
 800b2c8:	499b      	ldr	r1, [pc, #620]	; (800b538 <D128_GENERIC+0x35c>)
 800b2ca:	f3c4 4007 	ubfx	r0, r4, #16, #8
 800b2ce:	0e24      	lsrs	r4, r4, #24
 800b2d0:	f851 c027 	ldr.w	ip, [r1, r7, lsl #2]
 800b2d4:	b2d7      	uxtb	r7, r2
 800b2d6:	f851 b026 	ldr.w	fp, [r1, r6, lsl #2]
 800b2da:	f3c2 2607 	ubfx	r6, r2, #8, #8
 800b2de:	9904      	ldr	r1, [sp, #16]
 800b2e0:	4461      	add	r1, ip
 800b2e2:	468c      	mov	ip, r1
 800b2e4:	4994      	ldr	r1, [pc, #592]	; (800b538 <D128_GENERIC+0x35c>)
 800b2e6:	eb0b 2b9c 	add.w	fp, fp, ip, lsr #10
 800b2ea:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800b2ee:	f851 8024 	ldr.w	r8, [r1, r4, lsl #2]
 800b2f2:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800b2f6:	eb00 209b 	add.w	r0, r0, fp, lsr #10
 800b2fa:	f851 e027 	ldr.w	lr, [r1, r7, lsl #2]
 800b2fe:	f851 7026 	ldr.w	r7, [r1, r6, lsl #2]
 800b302:	0e12      	lsrs	r2, r2, #24
 800b304:	eb08 2890 	add.w	r8, r8, r0, lsr #10
 800b308:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800b30c:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 800b310:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800b314:	eb0e 2e98 	add.w	lr, lr, r8, lsr #10
 800b318:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800b31c:	b2da      	uxtb	r2, r3
 800b31e:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800b322:	eb07 279e 	add.w	r7, r7, lr, lsr #10
 800b326:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800b32a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b32e:	ea48 4800 	orr.w	r8, r8, r0, lsl #16
 800b332:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 800b336:	f3c3 2007 	ubfx	r0, r3, #8, #8
 800b33a:	ea4b 4b0c 	orr.w	fp, fp, ip, lsl #16
 800b33e:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800b342:	eb06 269a 	add.w	r6, r6, sl, lsr #10
 800b346:	f851 c020 	ldr.w	ip, [r1, r0, lsl #2]
 800b34a:	f3c3 4007 	ubfx	r0, r3, #16, #8
 800b34e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800b352:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 800b356:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800b35a:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 800b35e:	0e1b      	lsrs	r3, r3, #24
 800b360:	eb0c 2c92 	add.w	ip, ip, r2, lsr #10
 800b364:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800b368:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800b36c:	ea47 470e 	orr.w	r7, r7, lr, lsl #16
 800b370:	b2eb      	uxtb	r3, r5
 800b372:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800b376:	eb04 2e9c 	add.w	lr, r4, ip, lsr #10
 800b37a:	f3cc 0409 	ubfx	r4, ip, #0, #10
 800b37e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b382:	ea46 460a 	orr.w	r6, r6, sl, lsl #16
 800b386:	eb00 209e 	add.w	r0, r0, lr, lsr #10
 800b38a:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 800b38e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b392:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800b396:	eb03 2c90 	add.w	ip, r3, r0, lsr #10
 800b39a:	f851 202a 	ldr.w	r2, [r1, sl, lsl #2]
 800b39e:	f3c5 4307 	ubfx	r3, r5, #16, #8
 800b3a2:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 800b3a6:	eb02 229c 	add.w	r2, r2, ip, lsr #10
 800b3aa:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800b3ae:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
 800b3b2:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800b3b6:	f851 302a 	ldr.w	r3, [r1, sl, lsl #2]
 800b3ba:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 800b3be:	eb05 2592 	add.w	r5, r5, r2, lsr #10
 800b3c2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800b3c6:	eb03 2e95 	add.w	lr, r3, r5, lsr #10
 800b3ca:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800b3ce:	ea42 430c 	orr.w	r3, r2, ip, lsl #16
 800b3d2:	ea4f 219e 	mov.w	r1, lr, lsr #10
 800b3d6:	f3ce 0209 	ubfx	r2, lr, #0, #10
 800b3da:	9104      	str	r1, [sp, #16]
 800b3dc:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800b3e0:	9902      	ldr	r1, [sp, #8]
 800b3e2:	4a56      	ldr	r2, [pc, #344]	; (800b53c <D128_GENERIC+0x360>)
 800b3e4:	fb2b 1202 	smlad	r2, fp, r2, r1
 800b3e8:	4955      	ldr	r1, [pc, #340]	; (800b540 <D128_GENERIC+0x364>)
 800b3ea:	fb28 2201 	smlad	r2, r8, r1, r2
 800b3ee:	4955      	ldr	r1, [pc, #340]	; (800b544 <D128_GENERIC+0x368>)
 800b3f0:	fb27 2201 	smlad	r2, r7, r1, r2
 800b3f4:	4954      	ldr	r1, [pc, #336]	; (800b548 <D128_GENERIC+0x36c>)
 800b3f6:	fb26 2201 	smlad	r2, r6, r1, r2
 800b3fa:	4954      	ldr	r1, [pc, #336]	; (800b54c <D128_GENERIC+0x370>)
 800b3fc:	fb24 2201 	smlad	r2, r4, r1, r2
 800b400:	4953      	ldr	r1, [pc, #332]	; (800b550 <D128_GENERIC+0x374>)
 800b402:	fb20 2201 	smlad	r2, r0, r1, r2
 800b406:	4953      	ldr	r1, [pc, #332]	; (800b554 <D128_GENERIC+0x378>)
 800b408:	fb23 2201 	smlad	r2, r3, r1, r2
 800b40c:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
 800b410:	fb25 2a0c 	smlad	sl, r5, ip, r2
 800b414:	4950      	ldr	r1, [pc, #320]	; (800b558 <D128_GENERIC+0x37c>)
 800b416:	9a03      	ldr	r2, [sp, #12]
 800b418:	fb2b 2c01 	smlad	ip, fp, r1, r2
 800b41c:	4a4f      	ldr	r2, [pc, #316]	; (800b55c <D128_GENERIC+0x380>)
 800b41e:	fb28 ce02 	smlad	lr, r8, r2, ip
 800b422:	f8df c150 	ldr.w	ip, [pc, #336]	; 800b574 <D128_GENERIC+0x398>
 800b426:	fb27 ec0c 	smlad	ip, r7, ip, lr
 800b42a:	f8df e14c 	ldr.w	lr, [pc, #332]	; 800b578 <D128_GENERIC+0x39c>
 800b42e:	fb26 cc0e 	smlad	ip, r6, lr, ip
 800b432:	f8df e148 	ldr.w	lr, [pc, #328]	; 800b57c <D128_GENERIC+0x3a0>
 800b436:	fb24 ce0e 	smlad	lr, r4, lr, ip
 800b43a:	f8df c144 	ldr.w	ip, [pc, #324]	; 800b580 <D128_GENERIC+0x3a4>
 800b43e:	fb20 ee0c 	smlad	lr, r0, ip, lr
 800b442:	f8df c140 	ldr.w	ip, [pc, #320]	; 800b584 <D128_GENERIC+0x3a8>
 800b446:	fb23 ec0c 	smlad	ip, r3, ip, lr
 800b44a:	f8df e13c 	ldr.w	lr, [pc, #316]	; 800b588 <D128_GENERIC+0x3ac>
 800b44e:	fb25 c20e 	smlad	r2, r5, lr, ip
 800b452:	f04f 0c01 	mov.w	ip, #1
 800b456:	9202      	str	r2, [sp, #8]
 800b458:	fb2b fb0c 	smuad	fp, fp, ip
 800b45c:	f8df c12c 	ldr.w	ip, [pc, #300]	; 800b58c <D128_GENERIC+0x3b0>
 800b460:	fb28 bb0c 	smlad	fp, r8, ip, fp
 800b464:	f8df c128 	ldr.w	ip, [pc, #296]	; 800b590 <D128_GENERIC+0x3b4>
 800b468:	fb27 bb0c 	smlad	fp, r7, ip, fp
 800b46c:	4f3c      	ldr	r7, [pc, #240]	; (800b560 <D128_GENERIC+0x384>)
 800b46e:	fb26 bb07 	smlad	fp, r6, r7, fp
 800b472:	4f3c      	ldr	r7, [pc, #240]	; (800b564 <D128_GENERIC+0x388>)
 800b474:	fb24 bb07 	smlad	fp, r4, r7, fp
 800b478:	4f3b      	ldr	r7, [pc, #236]	; (800b568 <D128_GENERIC+0x38c>)
 800b47a:	fb20 bb07 	smlad	fp, r0, r7, fp
 800b47e:	4f3b      	ldr	r7, [pc, #236]	; (800b56c <D128_GENERIC+0x390>)
 800b480:	fb23 bb07 	smlad	fp, r3, r7, fp
 800b484:	4b3a      	ldr	r3, [pc, #232]	; (800b570 <D128_GENERIC+0x394>)
 800b486:	fb25 b303 	smlad	r3, r5, r3, fp
 800b48a:	9303      	str	r3, [sp, #12]
 800b48c:	f5aa 1480 	sub.w	r4, sl, #1048576	; 0x100000
 800b490:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b492:	b183      	cbz	r3, 800b4b6 <D128_GENERIC+0x2da>
 800b494:	9a06      	ldr	r2, [sp, #24]
 800b496:	9907      	ldr	r1, [sp, #28]
 800b498:	4422      	add	r2, r4
 800b49a:	9407      	str	r4, [sp, #28]
 800b49c:	1a52      	subs	r2, r2, r1
 800b49e:	fba2 0103 	umull	r0, r1, r2, r3
 800b4a2:	17d5      	asrs	r5, r2, #31
 800b4a4:	f110 4200 	adds.w	r2, r0, #2147483648	; 0x80000000
 800b4a8:	fb03 1105 	mla	r1, r3, r5, r1
 800b4ac:	f141 0300 	adc.w	r3, r1, #0
 800b4b0:	005b      	lsls	r3, r3, #1
 800b4b2:	461c      	mov	r4, r3
 800b4b4:	9306      	str	r3, [sp, #24]
 800b4b6:	9d01      	ldr	r5, [sp, #4]
 800b4b8:	01e4      	lsls	r4, r4, #7
 800b4ba:	9e05      	ldr	r6, [sp, #20]
 800b4bc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b4c0:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	9908      	ldr	r1, [sp, #32]
 800b4c6:	fb06 f000 	mul.w	r0, r6, r0
 800b4ca:	3601      	adds	r6, #1
 800b4cc:	fbc1 2304 	smlal	r2, r3, r1, r4
 800b4d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b4d2:	109b      	asrs	r3, r3, #2
 800b4d4:	9605      	str	r6, [sp, #20]
 800b4d6:	f303 030f 	ssat	r3, #16, r3
 800b4da:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
 800b4de:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 800b4e0:	42b3      	cmp	r3, r6
 800b4e2:	dd13      	ble.n	800b50c <D128_GENERIC+0x330>
 800b4e4:	9b01      	ldr	r3, [sp, #4]
 800b4e6:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800b4e8:	2a01      	cmp	r2, #1
 800b4ea:	f47f ae95 	bne.w	800b218 <D128_GENERIC+0x3c>
 800b4ee:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800b4f0:	f109 0610 	add.w	r6, r9, #16
 800b4f4:	0681      	lsls	r1, r0, #26
 800b4f6:	e9d9 4200 	ldrd	r4, r2, [r9]
 800b4fa:	e9d9 3502 	ldrd	r3, r5, [r9, #8]
 800b4fe:	d518      	bpl.n	800b532 <D128_GENERIC+0x356>
 800b500:	ba64      	rev16	r4, r4
 800b502:	ba52      	rev16	r2, r2
 800b504:	ba5b      	rev16	r3, r3
 800b506:	ba6d      	rev16	r5, r5
 800b508:	46b1      	mov	r9, r6
 800b50a:	e6da      	b.n	800b2c2 <D128_GENERIC+0xe6>
 800b50c:	f8dd a010 	ldr.w	sl, [sp, #16]
 800b510:	9b01      	ldr	r3, [sp, #4]
 800b512:	2000      	movs	r0, #0
 800b514:	9903      	ldr	r1, [sp, #12]
 800b516:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b518:	6099      	str	r1, [r3, #8]
 800b51a:	9902      	ldr	r1, [sp, #8]
 800b51c:	f8c3 a01c 	str.w	sl, [r3, #28]
 800b520:	60d9      	str	r1, [r3, #12]
 800b522:	9906      	ldr	r1, [sp, #24]
 800b524:	619a      	str	r2, [r3, #24]
 800b526:	6119      	str	r1, [r3, #16]
 800b528:	9907      	ldr	r1, [sp, #28]
 800b52a:	6159      	str	r1, [r3, #20]
 800b52c:	b00d      	add	sp, #52	; 0x34
 800b52e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b532:	46b1      	mov	r9, r6
 800b534:	e6c5      	b.n	800b2c2 <D128_GENERIC+0xe6>
 800b536:	bf00      	nop
 800b538:	24000000 	.word	0x24000000
 800b53c:	00780069 	.word	0x00780069
 800b540:	005b004e 	.word	0x005b004e
 800b544:	00420037 	.word	0x00420037
 800b548:	002d0024 	.word	0x002d0024
 800b54c:	001c0015 	.word	0x001c0015
 800b550:	000f000a 	.word	0x000f000a
 800b554:	00060003 	.word	0x00060003
 800b558:	00880096 	.word	0x00880096
 800b55c:	00a200ac 	.word	0x00a200ac
 800b560:	0015001c 	.word	0x0015001c
 800b564:	0024002d 	.word	0x0024002d
 800b568:	00370042 	.word	0x00370042
 800b56c:	004e005b 	.word	0x004e005b
 800b570:	00690078 	.word	0x00690078
 800b574:	00b400ba 	.word	0x00b400ba
 800b578:	00be00c0 	.word	0x00be00c0
 800b57c:	00c000be 	.word	0x00c000be
 800b580:	00ba00b4 	.word	0x00ba00b4
 800b584:	00ac00a2 	.word	0x00ac00a2
 800b588:	00960088 	.word	0x00960088
 800b58c:	00030006 	.word	0x00030006
 800b590:	000a000f 	.word	0x000a000f

0800b594 <D16_1CH_HTONS_VOL_HP>:
 800b594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b598:	6993      	ldr	r3, [r2, #24]
 800b59a:	b087      	sub	sp, #28
 800b59c:	4682      	mov	sl, r0
 800b59e:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 800b5a0:	9304      	str	r3, [sp, #16]
 800b5a2:	f8d2 b030 	ldr.w	fp, [r2, #48]	; 0x30
 800b5a6:	69d3      	ldr	r3, [r2, #28]
 800b5a8:	f8d2 e020 	ldr.w	lr, [r2, #32]
 800b5ac:	e9d2 5402 	ldrd	r5, r4, [r2, #8]
 800b5b0:	e9d2 6c04 	ldrd	r6, ip, [r2, #16]
 800b5b4:	9403      	str	r4, [sp, #12]
 800b5b6:	2800      	cmp	r0, #0
 800b5b8:	d054      	beq.n	800b664 <D16_1CH_HTONS_VOL_HP+0xd0>
 800b5ba:	f1a1 0902 	sub.w	r9, r1, #2
 800b5be:	eb0a 0140 	add.w	r1, sl, r0, lsl #1
 800b5c2:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 800b670 <D16_1CH_HTONS_VOL_HP+0xdc>
 800b5c6:	4650      	mov	r0, sl
 800b5c8:	9101      	str	r1, [sp, #4]
 800b5ca:	4619      	mov	r1, r3
 800b5cc:	f8cd b008 	str.w	fp, [sp, #8]
 800b5d0:	9205      	str	r2, [sp, #20]
 800b5d2:	f850 3b02 	ldr.w	r3, [r0], #2
 800b5d6:	ba5b      	rev16	r3, r3
 800b5d8:	b2dc      	uxtb	r4, r3
 800b5da:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800b5de:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b5e2:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 800b5e6:	4419      	add	r1, r3
 800b5e8:	eb04 2491 	add.w	r4, r4, r1, lsr #10
 800b5ec:	f3c1 0309 	ubfx	r3, r1, #0, #10
 800b5f0:	f3c4 0209 	ubfx	r2, r4, #0, #10
 800b5f4:	0aa1      	lsrs	r1, r4, #10
 800b5f6:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 800b5fa:	4a1b      	ldr	r2, [pc, #108]	; (800b668 <D16_1CH_HTONS_VOL_HP+0xd4>)
 800b5fc:	fb23 5402 	smlad	r4, r3, r2, r5
 800b600:	4a1a      	ldr	r2, [pc, #104]	; (800b66c <D16_1CH_HTONS_VOL_HP+0xd8>)
 800b602:	fb23 f502 	smuad	r5, r3, r2
 800b606:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 800b60a:	f04f 4a00 	mov.w	sl, #2147483648	; 0x80000000
 800b60e:	f04f 0b00 	mov.w	fp, #0
 800b612:	19a2      	adds	r2, r4, r6
 800b614:	eba2 020c 	sub.w	r2, r2, ip
 800b618:	46a4      	mov	ip, r4
 800b61a:	17d7      	asrs	r7, r2, #31
 800b61c:	fba2 230e 	umull	r2, r3, r2, lr
 800b620:	f112 4600 	adds.w	r6, r2, #2147483648	; 0x80000000
 800b624:	fb0e 3307 	mla	r3, lr, r7, r3
 800b628:	f143 0700 	adc.w	r7, r3, #0
 800b62c:	9b02      	ldr	r3, [sp, #8]
 800b62e:	047a      	lsls	r2, r7, #17
 800b630:	007e      	lsls	r6, r7, #1
 800b632:	fbc3 ab02 	smlal	sl, fp, r3, r2
 800b636:	ea4f 03ab 	mov.w	r3, fp, asr #2
 800b63a:	f303 030f 	ssat	r3, #16, r3
 800b63e:	f829 3f02 	strh.w	r3, [r9, #2]!
 800b642:	9b01      	ldr	r3, [sp, #4]
 800b644:	4298      	cmp	r0, r3
 800b646:	d1c4      	bne.n	800b5d2 <D16_1CH_HTONS_VOL_HP+0x3e>
 800b648:	460b      	mov	r3, r1
 800b64a:	9a05      	ldr	r2, [sp, #20]
 800b64c:	2000      	movs	r0, #0
 800b64e:	9903      	ldr	r1, [sp, #12]
 800b650:	61d3      	str	r3, [r2, #28]
 800b652:	9b04      	ldr	r3, [sp, #16]
 800b654:	6095      	str	r5, [r2, #8]
 800b656:	60d1      	str	r1, [r2, #12]
 800b658:	6193      	str	r3, [r2, #24]
 800b65a:	e9c2 6404 	strd	r6, r4, [r2, #16]
 800b65e:	b007      	add	sp, #28
 800b660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b664:	4664      	mov	r4, ip
 800b666:	e7f1      	b.n	800b64c <D16_1CH_HTONS_VOL_HP+0xb8>
 800b668:	00030001 	.word	0x00030001
 800b66c:	00010003 	.word	0x00010003
 800b670:	24000000 	.word	0x24000000

0800b674 <D24_1CH_HTONS_VOL_HP>:
 800b674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b678:	6b16      	ldr	r6, [r2, #48]	; 0x30
 800b67a:	b089      	sub	sp, #36	; 0x24
 800b67c:	6993      	ldr	r3, [r2, #24]
 800b67e:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800b680:	9604      	str	r6, [sp, #16]
 800b682:	6a16      	ldr	r6, [r2, #32]
 800b684:	9306      	str	r3, [sp, #24]
 800b686:	9505      	str	r5, [sp, #20]
 800b688:	69d3      	ldr	r3, [r2, #28]
 800b68a:	9600      	str	r6, [sp, #0]
 800b68c:	e9d2 4a04 	ldrd	r4, sl, [r2, #16]
 800b690:	e9d2 ce02 	ldrd	ip, lr, [r2, #8]
 800b694:	2d00      	cmp	r5, #0
 800b696:	f000 8083 	beq.w	800b7a0 <D24_1CH_HTONS_VOL_HP+0x12c>
 800b69a:	9207      	str	r2, [sp, #28]
 800b69c:	2600      	movs	r6, #0
 800b69e:	4622      	mov	r2, r4
 800b6a0:	f1a1 0b02 	sub.w	fp, r1, #2
 800b6a4:	4f3f      	ldr	r7, [pc, #252]	; (800b7a4 <D24_1CH_HTONS_VOL_HP+0x130>)
 800b6a6:	461d      	mov	r5, r3
 800b6a8:	f8cd a00c 	str.w	sl, [sp, #12]
 800b6ac:	9c00      	ldr	r4, [sp, #0]
 800b6ae:	e056      	b.n	800b75e <D24_1CH_HTONS_VOL_HP+0xea>
 800b6b0:	7841      	ldrb	r1, [r0, #1]
 800b6b2:	eb08 4809 	add.w	r8, r8, r9, lsl #16
 800b6b6:	3002      	adds	r0, #2
 800b6b8:	4488      	add	r8, r1
 800b6ba:	fa5f f388 	uxtb.w	r3, r8
 800b6be:	f3c8 2907 	ubfx	r9, r8, #8, #8
 800b6c2:	ea4f 4818 	mov.w	r8, r8, lsr #16
 800b6c6:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 800b6ca:	f857 3029 	ldr.w	r3, [r7, r9, lsl #2]
 800b6ce:	eb01 2195 	add.w	r1, r1, r5, lsr #10
 800b6d2:	f857 5028 	ldr.w	r5, [r7, r8, lsl #2]
 800b6d6:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 800b6da:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800b6de:	f3c8 0309 	ubfx	r3, r8, #0, #10
 800b6e2:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 800b6e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800b6ea:	492f      	ldr	r1, [pc, #188]	; (800b7a8 <D24_1CH_HTONS_VOL_HP+0x134>)
 800b6ec:	fb23 e901 	smlad	r9, r3, r1, lr
 800b6f0:	492e      	ldr	r1, [pc, #184]	; (800b7ac <D24_1CH_HTONS_VOL_HP+0x138>)
 800b6f2:	fb23 ce01 	smlad	lr, r3, r1, ip
 800b6f6:	f3c5 0c09 	ubfx	ip, r5, #0, #10
 800b6fa:	2101      	movs	r1, #1
 800b6fc:	eb0c 084c 	add.w	r8, ip, ip, lsl #1
 800b700:	eb0e 0e48 	add.w	lr, lr, r8, lsl #1
 800b704:	fb23 f301 	smuad	r3, r3, r1
 800b708:	f5a9 51d8 	sub.w	r1, r9, #6912	; 0x1b00
 800b70c:	eb08 0c03 	add.w	ip, r8, r3
 800b710:	9b03      	ldr	r3, [sp, #12]
 800b712:	f04f 0a00 	mov.w	sl, #0
 800b716:	440a      	add	r2, r1
 800b718:	3601      	adds	r6, #1
 800b71a:	9103      	str	r1, [sp, #12]
 800b71c:	1ad2      	subs	r2, r2, r3
 800b71e:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800b722:	fba2 2304 	umull	r2, r3, r2, r4
 800b726:	e9cd 2300 	strd	r2, r3, [sp]
 800b72a:	fb04 3309 	mla	r3, r4, r9, r3
 800b72e:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 800b732:	9301      	str	r3, [sp, #4]
 800b734:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b738:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800b73c:	f143 0300 	adc.w	r3, r3, #0
 800b740:	ea4f 38c3 	mov.w	r8, r3, lsl #15
 800b744:	005a      	lsls	r2, r3, #1
 800b746:	9b04      	ldr	r3, [sp, #16]
 800b748:	fbc3 9a08 	smlal	r9, sl, r3, r8
 800b74c:	ea4f 03aa 	mov.w	r3, sl, asr #2
 800b750:	f303 030f 	ssat	r3, #16, r3
 800b754:	f82b 3f02 	strh.w	r3, [fp, #2]!
 800b758:	9b05      	ldr	r3, [sp, #20]
 800b75a:	429e      	cmp	r6, r3
 800b75c:	d010      	beq.n	800b780 <D24_1CH_HTONS_VOL_HP+0x10c>
 800b75e:	f890 9003 	ldrb.w	r9, [r0, #3]
 800b762:	f016 0f01 	tst.w	r6, #1
 800b766:	7801      	ldrb	r1, [r0, #0]
 800b768:	ea4f 2309 	mov.w	r3, r9, lsl #8
 800b76c:	ea4f 2801 	mov.w	r8, r1, lsl #8
 800b770:	d09e      	beq.n	800b6b0 <D24_1CH_HTONS_VOL_HP+0x3c>
 800b772:	f890 8002 	ldrb.w	r8, [r0, #2]
 800b776:	3004      	adds	r0, #4
 800b778:	eb03 4808 	add.w	r8, r3, r8, lsl #16
 800b77c:	4488      	add	r8, r1
 800b77e:	e79c      	b.n	800b6ba <D24_1CH_HTONS_VOL_HP+0x46>
 800b780:	4614      	mov	r4, r2
 800b782:	462b      	mov	r3, r5
 800b784:	9a07      	ldr	r2, [sp, #28]
 800b786:	2000      	movs	r0, #0
 800b788:	61d3      	str	r3, [r2, #28]
 800b78a:	9b06      	ldr	r3, [sp, #24]
 800b78c:	f8c2 c008 	str.w	ip, [r2, #8]
 800b790:	f8c2 e00c 	str.w	lr, [r2, #12]
 800b794:	6193      	str	r3, [r2, #24]
 800b796:	e9c2 4104 	strd	r4, r1, [r2, #16]
 800b79a:	b009      	add	sp, #36	; 0x24
 800b79c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7a0:	4651      	mov	r1, sl
 800b7a2:	e7f0      	b.n	800b786 <D24_1CH_HTONS_VOL_HP+0x112>
 800b7a4:	24000000 	.word	0x24000000
 800b7a8:	00030001 	.word	0x00030001
 800b7ac:	00060007 	.word	0x00060007

0800b7b0 <D32_1CH_HTONS_VOL_HP>:
 800b7b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7b4:	6993      	ldr	r3, [r2, #24]
 800b7b6:	b087      	sub	sp, #28
 800b7b8:	4683      	mov	fp, r0
 800b7ba:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 800b7bc:	9304      	str	r3, [sp, #16]
 800b7be:	69d5      	ldr	r5, [r2, #28]
 800b7c0:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800b7c2:	f8d2 a020 	ldr.w	sl, [r2, #32]
 800b7c6:	e9d2 8e04 	ldrd	r8, lr, [r2, #16]
 800b7ca:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 800b7ce:	2800      	cmp	r0, #0
 800b7d0:	d077      	beq.n	800b8c2 <D32_1CH_HTONS_VOL_HP+0x112>
 800b7d2:	460f      	mov	r7, r1
 800b7d4:	46f1      	mov	r9, lr
 800b7d6:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 800b7da:	f8cd 8000 	str.w	r8, [sp]
 800b7de:	4e3a      	ldr	r6, [pc, #232]	; (800b8c8 <D32_1CH_HTONS_VOL_HP+0x118>)
 800b7e0:	469e      	mov	lr, r3
 800b7e2:	46a0      	mov	r8, r4
 800b7e4:	9103      	str	r1, [sp, #12]
 800b7e6:	9205      	str	r2, [sp, #20]
 800b7e8:	f85b 4b04 	ldr.w	r4, [fp], #4
 800b7ec:	ba64      	rev16	r4, r4
 800b7ee:	b2e0      	uxtb	r0, r4
 800b7f0:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800b7f4:	f3c4 4107 	ubfx	r1, r4, #16, #8
 800b7f8:	0e24      	lsrs	r4, r4, #24
 800b7fa:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 800b7fe:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800b802:	eb00 2095 	add.w	r0, r0, r5, lsr #10
 800b806:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800b80a:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
 800b80e:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 800b812:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800b816:	eb01 2193 	add.w	r1, r1, r3, lsr #10
 800b81a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b81e:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800b822:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800b826:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b82a:	f3c5 0009 	ubfx	r0, r5, #0, #10
 800b82e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800b832:	4826      	ldr	r0, [pc, #152]	; (800b8cc <D32_1CH_HTONS_VOL_HP+0x11c>)
 800b834:	fb23 c400 	smlad	r4, r3, r0, ip
 800b838:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800b83c:	fb21 4402 	smlad	r4, r1, r2, r4
 800b840:	4823      	ldr	r0, [pc, #140]	; (800b8d0 <D32_1CH_HTONS_VOL_HP+0x120>)
 800b842:	fb23 ec00 	smlad	ip, r3, r0, lr
 800b846:	4823      	ldr	r0, [pc, #140]	; (800b8d4 <D32_1CH_HTONS_VOL_HP+0x124>)
 800b848:	fb21 cc00 	smlad	ip, r1, r0, ip
 800b84c:	2201      	movs	r2, #1
 800b84e:	fb23 f302 	smuad	r3, r3, r2
 800b852:	4821      	ldr	r0, [pc, #132]	; (800b8d8 <D32_1CH_HTONS_VOL_HP+0x128>)
 800b854:	fb21 3e00 	smlad	lr, r1, r0, r3
 800b858:	9b00      	ldr	r3, [sp, #0]
 800b85a:	f5a4 4480 	sub.w	r4, r4, #16384	; 0x4000
 800b85e:	4423      	add	r3, r4
 800b860:	eba3 0209 	sub.w	r2, r3, r9
 800b864:	46a1      	mov	r9, r4
 800b866:	17d1      	asrs	r1, r2, #31
 800b868:	fba2 230a 	umull	r2, r3, r2, sl
 800b86c:	e9cd 2300 	strd	r2, r3, [sp]
 800b870:	fb0a 3301 	mla	r3, sl, r1, r3
 800b874:	9301      	str	r3, [sp, #4]
 800b876:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b87a:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800b87e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b882:	f143 0300 	adc.w	r3, r3, #0
 800b886:	0399      	lsls	r1, r3, #14
 800b888:	005b      	lsls	r3, r3, #1
 800b88a:	9300      	str	r3, [sp, #0]
 800b88c:	2300      	movs	r3, #0
 800b88e:	fbc8 2301 	smlal	r2, r3, r8, r1
 800b892:	109b      	asrs	r3, r3, #2
 800b894:	f303 030f 	ssat	r3, #16, r3
 800b898:	f827 3b02 	strh.w	r3, [r7], #2
 800b89c:	9b03      	ldr	r3, [sp, #12]
 800b89e:	429f      	cmp	r7, r3
 800b8a0:	d1a2      	bne.n	800b7e8 <D32_1CH_HTONS_VOL_HP+0x38>
 800b8a2:	4673      	mov	r3, lr
 800b8a4:	f8dd 8000 	ldr.w	r8, [sp]
 800b8a8:	9a05      	ldr	r2, [sp, #20]
 800b8aa:	6093      	str	r3, [r2, #8]
 800b8ac:	2000      	movs	r0, #0
 800b8ae:	9b04      	ldr	r3, [sp, #16]
 800b8b0:	f8c2 c00c 	str.w	ip, [r2, #12]
 800b8b4:	61d5      	str	r5, [r2, #28]
 800b8b6:	6193      	str	r3, [r2, #24]
 800b8b8:	e9c2 8404 	strd	r8, r4, [r2, #16]
 800b8bc:	b007      	add	sp, #28
 800b8be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8c2:	4674      	mov	r4, lr
 800b8c4:	e7f1      	b.n	800b8aa <D32_1CH_HTONS_VOL_HP+0xfa>
 800b8c6:	bf00      	nop
 800b8c8:	24000000 	.word	0x24000000
 800b8cc:	00060003 	.word	0x00060003
 800b8d0:	000a000c 	.word	0x000a000c
 800b8d4:	000c000a 	.word	0x000c000a
 800b8d8:	00030006 	.word	0x00030006

0800b8dc <D48_1CH_HTONS_VOL_HP>:
 800b8dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8e0:	6b17      	ldr	r7, [r2, #48]	; 0x30
 800b8e2:	b087      	sub	sp, #28
 800b8e4:	6993      	ldr	r3, [r2, #24]
 800b8e6:	9701      	str	r7, [sp, #4]
 800b8e8:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800b8ea:	6a17      	ldr	r7, [r2, #32]
 800b8ec:	9304      	str	r3, [sp, #16]
 800b8ee:	69d6      	ldr	r6, [r2, #28]
 800b8f0:	9702      	str	r7, [sp, #8]
 800b8f2:	e9d2 4e04 	ldrd	r4, lr, [r2, #16]
 800b8f6:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 800b8fa:	2d00      	cmp	r5, #0
 800b8fc:	f000 8093 	beq.w	800ba26 <D48_1CH_HTONS_VOL_HP+0x14a>
 800b900:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b904:	f1a1 0b02 	sub.w	fp, r1, #2
 800b908:	46f2      	mov	sl, lr
 800b90a:	4f48      	ldr	r7, [pc, #288]	; (800ba2c <D48_1CH_HTONS_VOL_HP+0x150>)
 800b90c:	eb00 0145 	add.w	r1, r0, r5, lsl #1
 800b910:	469e      	mov	lr, r3
 800b912:	9205      	str	r2, [sp, #20]
 800b914:	9103      	str	r1, [sp, #12]
 800b916:	e9d0 3200 	ldrd	r3, r2, [r0]
 800b91a:	3006      	adds	r0, #6
 800b91c:	ba5b      	rev16	r3, r3
 800b91e:	fa92 f992 	rev16.w	r9, r2
 800b922:	b2dd      	uxtb	r5, r3
 800b924:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800b928:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800b92c:	0e1b      	lsrs	r3, r3, #24
 800b92e:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 800b932:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 800b936:	eb05 2696 	add.w	r6, r5, r6, lsr #10
 800b93a:	f857 5022 	ldr.w	r5, [r7, r2, lsl #2]
 800b93e:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800b942:	fa5f f289 	uxtb.w	r2, r9
 800b946:	eb01 2196 	add.w	r1, r1, r6, lsr #10
 800b94a:	f3c9 2907 	ubfx	r9, r9, #8, #8
 800b94e:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800b952:	f3c6 0809 	ubfx	r8, r6, #0, #10
 800b956:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800b95a:	f857 6029 	ldr.w	r6, [r7, r9, lsl #2]
 800b95e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800b962:	eb03 2395 	add.w	r3, r3, r5, lsr #10
 800b966:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800b96a:	ea41 4808 	orr.w	r8, r1, r8, lsl #16
 800b96e:	eb02 2293 	add.w	r2, r2, r3, lsr #10
 800b972:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b976:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 800b97a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800b97e:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 800b982:	f3c6 0309 	ubfx	r3, r6, #0, #10
 800b986:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 800b98a:	4b29      	ldr	r3, [pc, #164]	; (800ba30 <D48_1CH_HTONS_VOL_HP+0x154>)
 800b98c:	fb28 c103 	smlad	r1, r8, r3, ip
 800b990:	4b28      	ldr	r3, [pc, #160]	; (800ba34 <D48_1CH_HTONS_VOL_HP+0x158>)
 800b992:	fb25 1103 	smlad	r1, r5, r3, r1
 800b996:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b99a:	fb22 1903 	smlad	r9, r2, r3, r1
 800b99e:	4b26      	ldr	r3, [pc, #152]	; (800ba38 <D48_1CH_HTONS_VOL_HP+0x15c>)
 800b9a0:	fb28 ec03 	smlad	ip, r8, r3, lr
 800b9a4:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 800b9a8:	fb25 cc03 	smlad	ip, r5, r3, ip
 800b9ac:	4b23      	ldr	r3, [pc, #140]	; (800ba3c <D48_1CH_HTONS_VOL_HP+0x160>)
 800b9ae:	fb22 cc03 	smlad	ip, r2, r3, ip
 800b9b2:	2101      	movs	r1, #1
 800b9b4:	fb28 f801 	smuad	r8, r8, r1
 800b9b8:	4b21      	ldr	r3, [pc, #132]	; (800ba40 <D48_1CH_HTONS_VOL_HP+0x164>)
 800b9ba:	fb25 8503 	smlad	r5, r5, r3, r8
 800b9be:	4b21      	ldr	r3, [pc, #132]	; (800ba44 <D48_1CH_HTONS_VOL_HP+0x168>)
 800b9c0:	fb22 5e03 	smlad	lr, r2, r3, r5
 800b9c4:	f5a9 4158 	sub.w	r1, r9, #55296	; 0xd800
 800b9c8:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800b9cc:	190a      	adds	r2, r1, r4
 800b9ce:	9c02      	ldr	r4, [sp, #8]
 800b9d0:	eba2 020a 	sub.w	r2, r2, sl
 800b9d4:	468a      	mov	sl, r1
 800b9d6:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800b9da:	fba2 2304 	umull	r2, r3, r2, r4
 800b9de:	fb04 3309 	mla	r3, r4, r9, r3
 800b9e2:	f112 4400 	adds.w	r4, r2, #2147483648	; 0x80000000
 800b9e6:	f04f 0900 	mov.w	r9, #0
 800b9ea:	f143 0500 	adc.w	r5, r3, #0
 800b9ee:	9b01      	ldr	r3, [sp, #4]
 800b9f0:	032a      	lsls	r2, r5, #12
 800b9f2:	006c      	lsls	r4, r5, #1
 800b9f4:	fbc3 8902 	smlal	r8, r9, r3, r2
 800b9f8:	ea4f 03a9 	mov.w	r3, r9, asr #2
 800b9fc:	f303 030f 	ssat	r3, #16, r3
 800ba00:	f82b 3f02 	strh.w	r3, [fp, #2]!
 800ba04:	9b03      	ldr	r3, [sp, #12]
 800ba06:	4283      	cmp	r3, r0
 800ba08:	d185      	bne.n	800b916 <D48_1CH_HTONS_VOL_HP+0x3a>
 800ba0a:	4673      	mov	r3, lr
 800ba0c:	9a05      	ldr	r2, [sp, #20]
 800ba0e:	6093      	str	r3, [r2, #8]
 800ba10:	2000      	movs	r0, #0
 800ba12:	9b04      	ldr	r3, [sp, #16]
 800ba14:	f8c2 c00c 	str.w	ip, [r2, #12]
 800ba18:	61d6      	str	r6, [r2, #28]
 800ba1a:	6193      	str	r3, [r2, #24]
 800ba1c:	e9c2 4104 	strd	r4, r1, [r2, #16]
 800ba20:	b007      	add	sp, #28
 800ba22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba26:	4671      	mov	r1, lr
 800ba28:	e7f1      	b.n	800ba0e <D48_1CH_HTONS_VOL_HP+0x132>
 800ba2a:	bf00      	nop
 800ba2c:	24000000 	.word	0x24000000
 800ba30:	000f000a 	.word	0x000f000a
 800ba34:	00060003 	.word	0x00060003
 800ba38:	00150019 	.word	0x00150019
 800ba3c:	00190015 	.word	0x00190015
 800ba40:	00030006 	.word	0x00030006
 800ba44:	000a000f 	.word	0x000a000f

0800ba48 <D64_1CH_HTONS_VOL_HP>:
 800ba48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba4c:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800ba4e:	b089      	sub	sp, #36	; 0x24
 800ba50:	6993      	ldr	r3, [r2, #24]
 800ba52:	4686      	mov	lr, r0
 800ba54:	9503      	str	r5, [sp, #12]
 800ba56:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 800ba58:	6a15      	ldr	r5, [r2, #32]
 800ba5a:	9306      	str	r3, [sp, #24]
 800ba5c:	69d6      	ldr	r6, [r2, #28]
 800ba5e:	9504      	str	r5, [sp, #16]
 800ba60:	e9d2 8404 	ldrd	r8, r4, [r2, #16]
 800ba64:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 800ba68:	2800      	cmp	r0, #0
 800ba6a:	f000 80a4 	beq.w	800bbb6 <D64_1CH_HTONS_VOL_HP+0x16e>
 800ba6e:	460f      	mov	r7, r1
 800ba70:	46f1      	mov	r9, lr
 800ba72:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 800ba76:	4d56      	ldr	r5, [pc, #344]	; (800bbd0 <D64_1CH_HTONS_VOL_HP+0x188>)
 800ba78:	46a2      	mov	sl, r4
 800ba7a:	469e      	mov	lr, r3
 800ba7c:	9105      	str	r1, [sp, #20]
 800ba7e:	9207      	str	r2, [sp, #28]
 800ba80:	f859 1b08 	ldr.w	r1, [r9], #8
 800ba84:	f859 3c04 	ldr.w	r3, [r9, #-4]
 800ba88:	ba49      	rev16	r1, r1
 800ba8a:	fa93 fb93 	rev16.w	fp, r3
 800ba8e:	b2cb      	uxtb	r3, r1
 800ba90:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800ba94:	f3c1 4007 	ubfx	r0, r1, #16, #8
 800ba98:	0e09      	lsrs	r1, r1, #24
 800ba9a:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
 800ba9e:	fa5f f38b 	uxtb.w	r3, fp
 800baa2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800baa6:	4426      	add	r6, r4
 800baa8:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 800baac:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 800bab0:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 800bab4:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 800bab8:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800babc:	f3cb 2307 	ubfx	r3, fp, #8, #8
 800bac0:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 800bac4:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800bac8:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800bacc:	eb01 2194 	add.w	r1, r1, r4, lsr #10
 800bad0:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800bad4:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 800bad8:	f3cb 4607 	ubfx	r6, fp, #16, #8
 800badc:	eb00 2091 	add.w	r0, r0, r1, lsr #10
 800bae0:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800bae4:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800bae8:	ea4f 6b1b 	mov.w	fp, fp, lsr #24
 800baec:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 800baf0:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800baf4:	f855 b02b 	ldr.w	fp, [r5, fp, lsl #2]
 800baf8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800bafc:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 800bb00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bb04:	eb0b 2b96 	add.w	fp, fp, r6, lsr #10
 800bb08:	f3c6 0409 	ubfx	r4, r6, #0, #10
 800bb0c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bb10:	f3cb 0009 	ubfx	r0, fp, #0, #10
 800bb14:	ea4f 269b 	mov.w	r6, fp, lsr #10
 800bb18:	ea40 4b04 	orr.w	fp, r0, r4, lsl #16
 800bb1c:	482d      	ldr	r0, [pc, #180]	; (800bbd4 <D64_1CH_HTONS_VOL_HP+0x18c>)
 800bb1e:	fb22 cc00 	smlad	ip, r2, r0, ip
 800bb22:	482d      	ldr	r0, [pc, #180]	; (800bbd8 <D64_1CH_HTONS_VOL_HP+0x190>)
 800bb24:	fb21 cc00 	smlad	ip, r1, r0, ip
 800bb28:	482c      	ldr	r0, [pc, #176]	; (800bbdc <D64_1CH_HTONS_VOL_HP+0x194>)
 800bb2a:	fb23 cc00 	smlad	ip, r3, r0, ip
 800bb2e:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 800bb32:	fb2b c404 	smlad	r4, fp, r4, ip
 800bb36:	482a      	ldr	r0, [pc, #168]	; (800bbe0 <D64_1CH_HTONS_VOL_HP+0x198>)
 800bb38:	fb22 ec00 	smlad	ip, r2, r0, lr
 800bb3c:	fb2b cc10 	smladx	ip, fp, r0, ip
 800bb40:	4828      	ldr	r0, [pc, #160]	; (800bbe4 <D64_1CH_HTONS_VOL_HP+0x19c>)
 800bb42:	fb21 cc00 	smlad	ip, r1, r0, ip
 800bb46:	fb23 cc10 	smladx	ip, r3, r0, ip
 800bb4a:	f04f 0e01 	mov.w	lr, #1
 800bb4e:	fb22 f20e 	smuad	r2, r2, lr
 800bb52:	4825      	ldr	r0, [pc, #148]	; (800bbe8 <D64_1CH_HTONS_VOL_HP+0x1a0>)
 800bb54:	fb21 2100 	smlad	r1, r1, r0, r2
 800bb58:	4a24      	ldr	r2, [pc, #144]	; (800bbec <D64_1CH_HTONS_VOL_HP+0x1a4>)
 800bb5a:	fb23 1302 	smlad	r3, r3, r2, r1
 800bb5e:	4a24      	ldr	r2, [pc, #144]	; (800bbf0 <D64_1CH_HTONS_VOL_HP+0x1a8>)
 800bb60:	fb2b 3e02 	smlad	lr, fp, r2, r3
 800bb64:	f5a4 3400 	sub.w	r4, r4, #131072	; 0x20000
 800bb68:	eb04 0208 	add.w	r2, r4, r8
 800bb6c:	eba2 020a 	sub.w	r2, r2, sl
 800bb70:	46a2      	mov	sl, r4
 800bb72:	4610      	mov	r0, r2
 800bb74:	17d1      	asrs	r1, r2, #31
 800bb76:	e9cd 0100 	strd	r0, r1, [sp]
 800bb7a:	9904      	ldr	r1, [sp, #16]
 800bb7c:	9801      	ldr	r0, [sp, #4]
 800bb7e:	fba2 2301 	umull	r2, r3, r2, r1
 800bb82:	fb01 3300 	mla	r3, r1, r0, r3
 800bb86:	f112 4000 	adds.w	r0, r2, #2147483648	; 0x80000000
 800bb8a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800bb8e:	f143 0100 	adc.w	r1, r3, #0
 800bb92:	9b03      	ldr	r3, [sp, #12]
 800bb94:	02ca      	lsls	r2, r1, #11
 800bb96:	ea4f 0841 	mov.w	r8, r1, lsl #1
 800bb9a:	2100      	movs	r1, #0
 800bb9c:	fbc3 0102 	smlal	r0, r1, r3, r2
 800bba0:	108b      	asrs	r3, r1, #2
 800bba2:	f303 030f 	ssat	r3, #16, r3
 800bba6:	f827 3b02 	strh.w	r3, [r7], #2
 800bbaa:	9b05      	ldr	r3, [sp, #20]
 800bbac:	429f      	cmp	r7, r3
 800bbae:	f47f af67 	bne.w	800ba80 <D64_1CH_HTONS_VOL_HP+0x38>
 800bbb2:	4673      	mov	r3, lr
 800bbb4:	9a07      	ldr	r2, [sp, #28]
 800bbb6:	6093      	str	r3, [r2, #8]
 800bbb8:	2000      	movs	r0, #0
 800bbba:	9b06      	ldr	r3, [sp, #24]
 800bbbc:	f8c2 c00c 	str.w	ip, [r2, #12]
 800bbc0:	61d6      	str	r6, [r2, #28]
 800bbc2:	6193      	str	r3, [r2, #24]
 800bbc4:	e9c2 8404 	strd	r8, r4, [r2, #16]
 800bbc8:	b009      	add	sp, #36	; 0x24
 800bbca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbce:	bf00      	nop
 800bbd0:	24000000 	.word	0x24000000
 800bbd4:	001c0015 	.word	0x001c0015
 800bbd8:	000f000a 	.word	0x000f000a
 800bbdc:	00060003 	.word	0x00060003
 800bbe0:	0024002a 	.word	0x0024002a
 800bbe4:	002e0030 	.word	0x002e0030
 800bbe8:	00030006 	.word	0x00030006
 800bbec:	000a000f 	.word	0x000a000f
 800bbf0:	0015001c 	.word	0x0015001c

0800bbf4 <D80_1CH_HTONS_VOL_HP>:
 800bbf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbf8:	6913      	ldr	r3, [r2, #16]
 800bbfa:	b089      	sub	sp, #36	; 0x24
 800bbfc:	6b16      	ldr	r6, [r2, #48]	; 0x30
 800bbfe:	9301      	str	r3, [sp, #4]
 800bc00:	9603      	str	r6, [sp, #12]
 800bc02:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800bc04:	6a16      	ldr	r6, [r2, #32]
 800bc06:	e9d2 5305 	ldrd	r5, r3, [r2, #20]
 800bc0a:	e9d2 7c02 	ldrd	r7, ip, [r2, #8]
 800bc0e:	9306      	str	r3, [sp, #24]
 800bc10:	9604      	str	r6, [sp, #16]
 800bc12:	69d3      	ldr	r3, [r2, #28]
 800bc14:	2c00      	cmp	r4, #0
 800bc16:	f000 80ce 	beq.w	800bdb6 <D80_1CH_HTONS_VOL_HP+0x1c2>
 800bc1a:	3902      	subs	r1, #2
 800bc1c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800bc20:	4e66      	ldr	r6, [pc, #408]	; (800bdbc <D80_1CH_HTONS_VOL_HP+0x1c8>)
 800bc22:	469e      	mov	lr, r3
 800bc24:	9102      	str	r1, [sp, #8]
 800bc26:	46aa      	mov	sl, r5
 800bc28:	eb00 0144 	add.w	r1, r0, r4, lsl #1
 800bc2c:	9207      	str	r2, [sp, #28]
 800bc2e:	9105      	str	r1, [sp, #20]
 800bc30:	6883      	ldr	r3, [r0, #8]
 800bc32:	e9d0 4200 	ldrd	r4, r2, [r0]
 800bc36:	300a      	adds	r0, #10
 800bc38:	ba64      	rev16	r4, r4
 800bc3a:	ba52      	rev16	r2, r2
 800bc3c:	fa93 fb93 	rev16.w	fp, r3
 800bc40:	b2e5      	uxtb	r5, r4
 800bc42:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800bc46:	f3c4 4107 	ubfx	r1, r4, #16, #8
 800bc4a:	0e24      	lsrs	r4, r4, #24
 800bc4c:	f856 8025 	ldr.w	r8, [r6, r5, lsl #2]
 800bc50:	b2d5      	uxtb	r5, r2
 800bc52:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800bc56:	44c6      	add	lr, r8
 800bc58:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800bc5c:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
 800bc60:	eb03 239e 	add.w	r3, r3, lr, lsr #10
 800bc64:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 800bc68:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800bc6c:	eb01 2993 	add.w	r9, r1, r3, lsr #10
 800bc70:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800bc74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bc78:	eb04 2499 	add.w	r4, r4, r9, lsr #10
 800bc7c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800bc80:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800bc84:	f3cb 2e07 	ubfx	lr, fp, #8, #8
 800bc88:	eb05 2894 	add.w	r8, r5, r4, lsr #10
 800bc8c:	f3c2 4507 	ubfx	r5, r2, #16, #8
 800bc90:	0e12      	lsrs	r2, r2, #24
 800bc92:	f856 e02e 	ldr.w	lr, [r6, lr, lsl #2]
 800bc96:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 800bc9a:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 800bc9e:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 800bca2:	fa5f fb8b 	uxtb.w	fp, fp
 800bca6:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800bcaa:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800bcae:	f856 b02b 	ldr.w	fp, [r6, fp, lsl #2]
 800bcb2:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800bcb6:	eb02 2295 	add.w	r2, r2, r5, lsr #10
 800bcba:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800bcbe:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800bcc2:	ea41 4808 	orr.w	r8, r1, r8, lsl #16
 800bcc6:	eb0b 2b92 	add.w	fp, fp, r2, lsr #10
 800bcca:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800bcce:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800bcd2:	eb0e 2e9b 	add.w	lr, lr, fp, lsr #10
 800bcd6:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800bcda:	ea44 4409 	orr.w	r4, r4, r9, lsl #16
 800bcde:	f3ce 0109 	ubfx	r1, lr, #0, #10
 800bce2:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 800bce6:	ea4f 2e9e 	mov.w	lr, lr, lsr #10
 800bcea:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 800bcee:	4934      	ldr	r1, [pc, #208]	; (800bdc0 <D80_1CH_HTONS_VOL_HP+0x1cc>)
 800bcf0:	fb23 cc01 	smlad	ip, r3, r1, ip
 800bcf4:	4933      	ldr	r1, [pc, #204]	; (800bdc4 <D80_1CH_HTONS_VOL_HP+0x1d0>)
 800bcf6:	fb24 cc01 	smlad	ip, r4, r1, ip
 800bcfa:	4933      	ldr	r1, [pc, #204]	; (800bdc8 <D80_1CH_HTONS_VOL_HP+0x1d4>)
 800bcfc:	fb28 cc01 	smlad	ip, r8, r1, ip
 800bd00:	4932      	ldr	r1, [pc, #200]	; (800bdcc <D80_1CH_HTONS_VOL_HP+0x1d8>)
 800bd02:	fb22 cc01 	smlad	ip, r2, r1, ip
 800bd06:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800bd0a:	fb2b c901 	smlad	r9, fp, r1, ip
 800bd0e:	4930      	ldr	r1, [pc, #192]	; (800bdd0 <D80_1CH_HTONS_VOL_HP+0x1dc>)
 800bd10:	fb23 7701 	smlad	r7, r3, r1, r7
 800bd14:	492f      	ldr	r1, [pc, #188]	; (800bdd4 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 800bd16:	fb24 7701 	smlad	r7, r4, r1, r7
 800bd1a:	f04f 1c4b 	mov.w	ip, #4915275	; 0x4b004b
 800bd1e:	fb28 7c0c 	smlad	ip, r8, ip, r7
 800bd22:	492d      	ldr	r1, [pc, #180]	; (800bdd8 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 800bd24:	fb22 cc01 	smlad	ip, r2, r1, ip
 800bd28:	492c      	ldr	r1, [pc, #176]	; (800bddc <D80_1CH_HTONS_VOL_HP+0x1e8>)
 800bd2a:	fb2b cc01 	smlad	ip, fp, r1, ip
 800bd2e:	2101      	movs	r1, #1
 800bd30:	fb23 f301 	smuad	r3, r3, r1
 800bd34:	492a      	ldr	r1, [pc, #168]	; (800bde0 <D80_1CH_HTONS_VOL_HP+0x1ec>)
 800bd36:	fb24 3401 	smlad	r4, r4, r1, r3
 800bd3a:	492a      	ldr	r1, [pc, #168]	; (800bde4 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 800bd3c:	fb28 4101 	smlad	r1, r8, r1, r4
 800bd40:	4f29      	ldr	r7, [pc, #164]	; (800bde8 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 800bd42:	fb22 1207 	smlad	r2, r2, r7, r1
 800bd46:	4f29      	ldr	r7, [pc, #164]	; (800bdec <D80_1CH_HTONS_VOL_HP+0x1f8>)
 800bd48:	fb2b 2707 	smlad	r7, fp, r7, r2
 800bd4c:	f5a9 317a 	sub.w	r1, r9, #256000	; 0x3e800
 800bd50:	9b01      	ldr	r3, [sp, #4]
 800bd52:	9c04      	ldr	r4, [sp, #16]
 800bd54:	440b      	add	r3, r1
 800bd56:	eba3 020a 	sub.w	r2, r3, sl
 800bd5a:	468a      	mov	sl, r1
 800bd5c:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800bd60:	fba2 2304 	umull	r2, r3, r2, r4
 800bd64:	fb04 3309 	mla	r3, r4, r9, r3
 800bd68:	f112 4400 	adds.w	r4, r2, #2147483648	; 0x80000000
 800bd6c:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800bd70:	f143 0500 	adc.w	r5, r3, #0
 800bd74:	006b      	lsls	r3, r5, #1
 800bd76:	02aa      	lsls	r2, r5, #10
 800bd78:	2500      	movs	r5, #0
 800bd7a:	9301      	str	r3, [sp, #4]
 800bd7c:	9b03      	ldr	r3, [sp, #12]
 800bd7e:	fbc3 4502 	smlal	r4, r5, r3, r2
 800bd82:	9a02      	ldr	r2, [sp, #8]
 800bd84:	10ab      	asrs	r3, r5, #2
 800bd86:	f303 030f 	ssat	r3, #16, r3
 800bd8a:	f822 3f02 	strh.w	r3, [r2, #2]!
 800bd8e:	9b05      	ldr	r3, [sp, #20]
 800bd90:	9202      	str	r2, [sp, #8]
 800bd92:	4298      	cmp	r0, r3
 800bd94:	f47f af4c 	bne.w	800bc30 <D80_1CH_HTONS_VOL_HP+0x3c>
 800bd98:	4673      	mov	r3, lr
 800bd9a:	9a07      	ldr	r2, [sp, #28]
 800bd9c:	61d3      	str	r3, [r2, #28]
 800bd9e:	2000      	movs	r0, #0
 800bda0:	9b01      	ldr	r3, [sp, #4]
 800bda2:	6097      	str	r7, [r2, #8]
 800bda4:	f8c2 c00c 	str.w	ip, [r2, #12]
 800bda8:	e9c2 3104 	strd	r3, r1, [r2, #16]
 800bdac:	9b06      	ldr	r3, [sp, #24]
 800bdae:	6193      	str	r3, [r2, #24]
 800bdb0:	b009      	add	sp, #36	; 0x24
 800bdb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdb6:	4629      	mov	r1, r5
 800bdb8:	e7f0      	b.n	800bd9c <D80_1CH_HTONS_VOL_HP+0x1a8>
 800bdba:	bf00      	nop
 800bdbc:	24000000 	.word	0x24000000
 800bdc0:	002d0024 	.word	0x002d0024
 800bdc4:	001c0015 	.word	0x001c0015
 800bdc8:	000f000a 	.word	0x000f000a
 800bdcc:	00060003 	.word	0x00060003
 800bdd0:	0037003f 	.word	0x0037003f
 800bdd4:	00450049 	.word	0x00450049
 800bdd8:	00490045 	.word	0x00490045
 800bddc:	003f0037 	.word	0x003f0037
 800bde0:	00030006 	.word	0x00030006
 800bde4:	000a000f 	.word	0x000a000f
 800bde8:	0015001c 	.word	0x0015001c
 800bdec:	0024002d 	.word	0x0024002d

0800bdf0 <D128_1CH_HTONS_VOL_HP>:
 800bdf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdf4:	6914      	ldr	r4, [r2, #16]
 800bdf6:	b08d      	sub	sp, #52	; 0x34
 800bdf8:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800bdfa:	9404      	str	r4, [sp, #16]
 800bdfc:	6954      	ldr	r4, [r2, #20]
 800bdfe:	920b      	str	r2, [sp, #44]	; 0x2c
 800be00:	9405      	str	r4, [sp, #20]
 800be02:	6994      	ldr	r4, [r2, #24]
 800be04:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 800be08:	940a      	str	r4, [sp, #40]	; 0x28
 800be0a:	6894      	ldr	r4, [r2, #8]
 800be0c:	9403      	str	r4, [sp, #12]
 800be0e:	68d4      	ldr	r4, [r2, #12]
 800be10:	9402      	str	r4, [sp, #8]
 800be12:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800be14:	6a12      	ldr	r2, [r2, #32]
 800be16:	9407      	str	r4, [sp, #28]
 800be18:	9208      	str	r2, [sp, #32]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	f000 812e 	beq.w	800c07c <D128_1CH_HTONS_VOL_HP+0x28c>
 800be20:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800be24:	f100 0b10 	add.w	fp, r0, #16
 800be28:	f8df 9290 	ldr.w	r9, [pc, #656]	; 800c0bc <D128_1CH_HTONS_VOL_HP+0x2cc>
 800be2c:	9106      	str	r1, [sp, #24]
 800be2e:	9309      	str	r3, [sp, #36]	; 0x24
 800be30:	e95b 0204 	ldrd	r0, r2, [fp, #-16]
 800be34:	e95b 3602 	ldrd	r3, r6, [fp, #-8]
 800be38:	ba40      	rev16	r0, r0
 800be3a:	ba52      	rev16	r2, r2
 800be3c:	ba5b      	rev16	r3, r3
 800be3e:	ba76      	rev16	r6, r6
 800be40:	b2c5      	uxtb	r5, r0
 800be42:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800be46:	f3c0 4107 	ubfx	r1, r0, #16, #8
 800be4a:	0e00      	lsrs	r0, r0, #24
 800be4c:	f859 7025 	ldr.w	r7, [r9, r5, lsl #2]
 800be50:	b2d5      	uxtb	r5, r2
 800be52:	f859 e024 	ldr.w	lr, [r9, r4, lsl #2]
 800be56:	f3c2 2407 	ubfx	r4, r2, #8, #8
 800be5a:	44bc      	add	ip, r7
 800be5c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800be60:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
 800be64:	f3c2 4007 	ubfx	r0, r2, #16, #8
 800be68:	eb0e 2e9c 	add.w	lr, lr, ip, lsr #10
 800be6c:	f859 a025 	ldr.w	sl, [r9, r5, lsl #2]
 800be70:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 800be74:	0e12      	lsrs	r2, r2, #24
 800be76:	eb01 219e 	add.w	r1, r1, lr, lsr #10
 800be7a:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 800be7e:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800be82:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800be86:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 800be8a:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 800be8e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800be92:	b2da      	uxtb	r2, r3
 800be94:	eb0a 2a97 	add.w	sl, sl, r7, lsr #10
 800be98:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800be9c:	ea4e 4e0c 	orr.w	lr, lr, ip, lsl #16
 800bea0:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 800bea4:	eb05 259a 	add.w	r5, r5, sl, lsr #10
 800bea8:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800beac:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800beb0:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800beb4:	eb00 2c95 	add.w	ip, r0, r5, lsr #10
 800beb8:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800bebc:	f859 8021 	ldr.w	r8, [r9, r1, lsl #2]
 800bec0:	f3c3 4107 	ubfx	r1, r3, #16, #8
 800bec4:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 800bec8:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800becc:	f859 0021 	ldr.w	r0, [r9, r1, lsl #2]
 800bed0:	0e1b      	lsrs	r3, r3, #24
 800bed2:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 800bed6:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800beda:	f859 1023 	ldr.w	r1, [r9, r3, lsl #2]
 800bede:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 800bee2:	eb08 2892 	add.w	r8, r8, r2, lsr #10
 800bee6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800beea:	b2f3      	uxtb	r3, r6
 800beec:	eb00 2a98 	add.w	sl, r0, r8, lsr #10
 800bef0:	f3c8 0009 	ubfx	r0, r8, #0, #10
 800bef4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800bef8:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 800befc:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 800bf00:	f3c6 2c07 	ubfx	ip, r6, #8, #8
 800bf04:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800bf08:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800bf0c:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 800bf10:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 800bf14:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 800bf18:	0e36      	lsrs	r6, r6, #24
 800bf1a:	eb02 2298 	add.w	r2, r2, r8, lsr #10
 800bf1e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800bf22:	f859 302c 	ldr.w	r3, [r9, ip, lsl #2]
 800bf26:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800bf2a:	f859 c026 	ldr.w	ip, [r9, r6, lsl #2]
 800bf2e:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800bf32:	eb03 2692 	add.w	r6, r3, r2, lsr #10
 800bf36:	f3c2 0309 	ubfx	r3, r2, #0, #10
 800bf3a:	9101      	str	r1, [sp, #4]
 800bf3c:	ea43 4208 	orr.w	r2, r3, r8, lsl #16
 800bf40:	9b02      	ldr	r3, [sp, #8]
 800bf42:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 800bf46:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800bf4a:	4611      	mov	r1, r2
 800bf4c:	f3cc 0209 	ubfx	r2, ip, #0, #10
 800bf50:	ea4f 2c9c 	mov.w	ip, ip, lsr #10
 800bf54:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 800bf58:	4a49      	ldr	r2, [pc, #292]	; (800c080 <D128_1CH_HTONS_VOL_HP+0x290>)
 800bf5a:	fb2e 3202 	smlad	r2, lr, r2, r3
 800bf5e:	4b49      	ldr	r3, [pc, #292]	; (800c084 <D128_1CH_HTONS_VOL_HP+0x294>)
 800bf60:	fb27 2203 	smlad	r2, r7, r3, r2
 800bf64:	4b48      	ldr	r3, [pc, #288]	; (800c088 <D128_1CH_HTONS_VOL_HP+0x298>)
 800bf66:	fb25 2203 	smlad	r2, r5, r3, r2
 800bf6a:	4b48      	ldr	r3, [pc, #288]	; (800c08c <D128_1CH_HTONS_VOL_HP+0x29c>)
 800bf6c:	fb24 2203 	smlad	r2, r4, r3, r2
 800bf70:	4b47      	ldr	r3, [pc, #284]	; (800c090 <D128_1CH_HTONS_VOL_HP+0x2a0>)
 800bf72:	fb20 2803 	smlad	r8, r0, r3, r2
 800bf76:	4b47      	ldr	r3, [pc, #284]	; (800c094 <D128_1CH_HTONS_VOL_HP+0x2a4>)
 800bf78:	9a01      	ldr	r2, [sp, #4]
 800bf7a:	fb22 8203 	smlad	r2, r2, r3, r8
 800bf7e:	4b46      	ldr	r3, [pc, #280]	; (800c098 <D128_1CH_HTONS_VOL_HP+0x2a8>)
 800bf80:	9102      	str	r1, [sp, #8]
 800bf82:	fb21 2203 	smlad	r2, r1, r3, r2
 800bf86:	f44f 3880 	mov.w	r8, #65536	; 0x10000
 800bf8a:	fb26 2308 	smlad	r3, r6, r8, r2
 800bf8e:	4619      	mov	r1, r3
 800bf90:	9a03      	ldr	r2, [sp, #12]
 800bf92:	4b42      	ldr	r3, [pc, #264]	; (800c09c <D128_1CH_HTONS_VOL_HP+0x2ac>)
 800bf94:	fb2e 2803 	smlad	r8, lr, r3, r2
 800bf98:	4b41      	ldr	r3, [pc, #260]	; (800c0a0 <D128_1CH_HTONS_VOL_HP+0x2b0>)
 800bf9a:	fb27 8a03 	smlad	sl, r7, r3, r8
 800bf9e:	f8df 8120 	ldr.w	r8, [pc, #288]	; 800c0c0 <D128_1CH_HTONS_VOL_HP+0x2d0>
 800bfa2:	fb25 a808 	smlad	r8, r5, r8, sl
 800bfa6:	f8df a11c 	ldr.w	sl, [pc, #284]	; 800c0c4 <D128_1CH_HTONS_VOL_HP+0x2d4>
 800bfaa:	fb24 880a 	smlad	r8, r4, sl, r8
 800bfae:	f8df a118 	ldr.w	sl, [pc, #280]	; 800c0c8 <D128_1CH_HTONS_VOL_HP+0x2d8>
 800bfb2:	fb20 8a0a 	smlad	sl, r0, sl, r8
 800bfb6:	f8df 8114 	ldr.w	r8, [pc, #276]	; 800c0cc <D128_1CH_HTONS_VOL_HP+0x2dc>
 800bfba:	9b01      	ldr	r3, [sp, #4]
 800bfbc:	fb23 aa08 	smlad	sl, r3, r8, sl
 800bfc0:	f8df 810c 	ldr.w	r8, [pc, #268]	; 800c0d0 <D128_1CH_HTONS_VOL_HP+0x2e0>
 800bfc4:	9a02      	ldr	r2, [sp, #8]
 800bfc6:	fb22 a808 	smlad	r8, r2, r8, sl
 800bfca:	f8df a108 	ldr.w	sl, [pc, #264]	; 800c0d4 <D128_1CH_HTONS_VOL_HP+0x2e4>
 800bfce:	fb26 830a 	smlad	r3, r6, sl, r8
 800bfd2:	f04f 0801 	mov.w	r8, #1
 800bfd6:	9302      	str	r3, [sp, #8]
 800bfd8:	fb2e fe08 	smuad	lr, lr, r8
 800bfdc:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 800c0d8 <D128_1CH_HTONS_VOL_HP+0x2e8>
 800bfe0:	fb27 ee08 	smlad	lr, r7, r8, lr
 800bfe4:	4f2f      	ldr	r7, [pc, #188]	; (800c0a4 <D128_1CH_HTONS_VOL_HP+0x2b4>)
 800bfe6:	fb25 ee07 	smlad	lr, r5, r7, lr
 800bfea:	4f2f      	ldr	r7, [pc, #188]	; (800c0a8 <D128_1CH_HTONS_VOL_HP+0x2b8>)
 800bfec:	fb24 ee07 	smlad	lr, r4, r7, lr
 800bff0:	4f2e      	ldr	r7, [pc, #184]	; (800c0ac <D128_1CH_HTONS_VOL_HP+0x2bc>)
 800bff2:	fb20 ee07 	smlad	lr, r0, r7, lr
 800bff6:	4f2e      	ldr	r7, [pc, #184]	; (800c0b0 <D128_1CH_HTONS_VOL_HP+0x2c0>)
 800bff8:	9b01      	ldr	r3, [sp, #4]
 800bffa:	fb23 ee07 	smlad	lr, r3, r7, lr
 800bffe:	4f2d      	ldr	r7, [pc, #180]	; (800c0b4 <D128_1CH_HTONS_VOL_HP+0x2c4>)
 800c000:	fb22 e707 	smlad	r7, r2, r7, lr
 800c004:	4b2c      	ldr	r3, [pc, #176]	; (800c0b8 <D128_1CH_HTONS_VOL_HP+0x2c8>)
 800c006:	fb26 7303 	smlad	r3, r6, r3, r7
 800c00a:	f5a1 1680 	sub.w	r6, r1, #1048576	; 0x100000
 800c00e:	9303      	str	r3, [sp, #12]
 800c010:	9b04      	ldr	r3, [sp, #16]
 800c012:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800c016:	9f08      	ldr	r7, [sp, #32]
 800c018:	2100      	movs	r1, #0
 800c01a:	4433      	add	r3, r6
 800c01c:	f10b 0b10 	add.w	fp, fp, #16
 800c020:	461a      	mov	r2, r3
 800c022:	9b05      	ldr	r3, [sp, #20]
 800c024:	9605      	str	r6, [sp, #20]
 800c026:	1ad2      	subs	r2, r2, r3
 800c028:	17d5      	asrs	r5, r2, #31
 800c02a:	fba2 2307 	umull	r2, r3, r2, r7
 800c02e:	1814      	adds	r4, r2, r0
 800c030:	fb07 3305 	mla	r3, r7, r5, r3
 800c034:	eb43 0501 	adc.w	r5, r3, r1
 800c038:	006b      	lsls	r3, r5, #1
 800c03a:	022a      	lsls	r2, r5, #8
 800c03c:	9304      	str	r3, [sp, #16]
 800c03e:	9b07      	ldr	r3, [sp, #28]
 800c040:	fbc3 0102 	smlal	r0, r1, r3, r2
 800c044:	9a06      	ldr	r2, [sp, #24]
 800c046:	108b      	asrs	r3, r1, #2
 800c048:	f303 030f 	ssat	r3, #16, r3
 800c04c:	f822 3b02 	strh.w	r3, [r2], #2
 800c050:	4613      	mov	r3, r2
 800c052:	9206      	str	r2, [sp, #24]
 800c054:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c056:	4293      	cmp	r3, r2
 800c058:	f47f aeea 	bne.w	800be30 <D128_1CH_HTONS_VOL_HP+0x40>
 800c05c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c05e:	2000      	movs	r0, #0
 800c060:	9903      	ldr	r1, [sp, #12]
 800c062:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c064:	6099      	str	r1, [r3, #8]
 800c066:	9902      	ldr	r1, [sp, #8]
 800c068:	f8c3 c01c 	str.w	ip, [r3, #28]
 800c06c:	60d9      	str	r1, [r3, #12]
 800c06e:	9904      	ldr	r1, [sp, #16]
 800c070:	619a      	str	r2, [r3, #24]
 800c072:	e9c3 1604 	strd	r1, r6, [r3, #16]
 800c076:	b00d      	add	sp, #52	; 0x34
 800c078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c07c:	9e05      	ldr	r6, [sp, #20]
 800c07e:	e7ed      	b.n	800c05c <D128_1CH_HTONS_VOL_HP+0x26c>
 800c080:	00780069 	.word	0x00780069
 800c084:	005b004e 	.word	0x005b004e
 800c088:	00420037 	.word	0x00420037
 800c08c:	002d0024 	.word	0x002d0024
 800c090:	001c0015 	.word	0x001c0015
 800c094:	000f000a 	.word	0x000f000a
 800c098:	00060003 	.word	0x00060003
 800c09c:	00880096 	.word	0x00880096
 800c0a0:	00a200ac 	.word	0x00a200ac
 800c0a4:	000a000f 	.word	0x000a000f
 800c0a8:	0015001c 	.word	0x0015001c
 800c0ac:	0024002d 	.word	0x0024002d
 800c0b0:	00370042 	.word	0x00370042
 800c0b4:	004e005b 	.word	0x004e005b
 800c0b8:	00690078 	.word	0x00690078
 800c0bc:	24000000 	.word	0x24000000
 800c0c0:	00b400ba 	.word	0x00b400ba
 800c0c4:	00be00c0 	.word	0x00be00c0
 800c0c8:	00c000be 	.word	0x00c000be
 800c0cc:	00ba00b4 	.word	0x00ba00b4
 800c0d0:	00ac00a2 	.word	0x00ac00a2
 800c0d4:	00960088 	.word	0x00960088
 800c0d8:	00030006 	.word	0x00030006

0800c0dc <PDM_Filter_Init>:
 800c0dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0de:	2240      	movs	r2, #64	; 0x40
 800c0e0:	2100      	movs	r1, #0
 800c0e2:	4604      	mov	r4, r0
 800c0e4:	300c      	adds	r0, #12
 800c0e6:	f000 f9ed 	bl	800c4c4 <memset>
 800c0ea:	4a56      	ldr	r2, [pc, #344]	; (800c244 <PDM_Filter_Init+0x168>)
 800c0ec:	4856      	ldr	r0, [pc, #344]	; (800c248 <PDM_Filter_Init+0x16c>)
 800c0ee:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 800c0f2:	6813      	ldr	r3, [r2, #0]
 800c0f4:	f24c 2540 	movw	r5, #49728	; 0xc240
 800c0f8:	f023 0301 	bic.w	r3, r3, #1
 800c0fc:	6013      	str	r3, [r2, #0]
 800c0fe:	6803      	ldr	r3, [r0, #0]
 800c100:	400b      	ands	r3, r1
 800c102:	42ab      	cmp	r3, r5
 800c104:	d040      	beq.n	800c188 <PDM_Filter_Init+0xac>
 800c106:	6803      	ldr	r3, [r0, #0]
 800c108:	f24c 2270 	movw	r2, #49776	; 0xc270
 800c10c:	4019      	ands	r1, r3
 800c10e:	4291      	cmp	r1, r2
 800c110:	d03a      	beq.n	800c188 <PDM_Filter_Init+0xac>
 800c112:	4b4e      	ldr	r3, [pc, #312]	; (800c24c <PDM_Filter_Init+0x170>)
 800c114:	2101      	movs	r1, #1
 800c116:	461a      	mov	r2, r3
 800c118:	6019      	str	r1, [r3, #0]
 800c11a:	6813      	ldr	r3, [r2, #0]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d1fc      	bne.n	800c11a <PDM_Filter_Init+0x3e>
 800c120:	4b4b      	ldr	r3, [pc, #300]	; (800c250 <PDM_Filter_Init+0x174>)
 800c122:	494c      	ldr	r1, [pc, #304]	; (800c254 <PDM_Filter_Init+0x178>)
 800c124:	4a4c      	ldr	r2, [pc, #304]	; (800c258 <PDM_Filter_Init+0x17c>)
 800c126:	6019      	str	r1, [r3, #0]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	8820      	ldrh	r0, [r4, #0]
 800c12c:	4293      	cmp	r3, r2
 800c12e:	8961      	ldrh	r1, [r4, #10]
 800c130:	f04f 0300 	mov.w	r3, #0
 800c134:	8922      	ldrh	r2, [r4, #8]
 800c136:	bf14      	ite	ne
 800c138:	2500      	movne	r5, #0
 800c13a:	4d47      	ldreq	r5, [pc, #284]	; (800c258 <PDM_Filter_Init+0x17c>)
 800c13c:	2801      	cmp	r0, #1
 800c13e:	61a3      	str	r3, [r4, #24]
 800c140:	6465      	str	r5, [r4, #68]	; 0x44
 800c142:	60e3      	str	r3, [r4, #12]
 800c144:	6263      	str	r3, [r4, #36]	; 0x24
 800c146:	6423      	str	r3, [r4, #64]	; 0x40
 800c148:	86a1      	strh	r1, [r4, #52]	; 0x34
 800c14a:	86e2      	strh	r2, [r4, #54]	; 0x36
 800c14c:	e9c4 3304 	strd	r3, r3, [r4, #16]
 800c150:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800c154:	d936      	bls.n	800c1c4 <PDM_Filter_Init+0xe8>
 800c156:	2003      	movs	r0, #3
 800c158:	2302      	movs	r3, #2
 800c15a:	8862      	ldrh	r2, [r4, #2]
 800c15c:	2a01      	cmp	r2, #1
 800c15e:	d92e      	bls.n	800c1be <PDM_Filter_Init+0xe2>
 800c160:	2140      	movs	r1, #64	; 0x40
 800c162:	2300      	movs	r3, #0
 800c164:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800c166:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 800c16a:	d101      	bne.n	800c170 <PDM_Filter_Init+0x94>
 800c16c:	460b      	mov	r3, r1
 800c16e:	6421      	str	r1, [r4, #64]	; 0x40
 800c170:	6862      	ldr	r2, [r4, #4]
 800c172:	b11a      	cbz	r2, 800c17c <PDM_Filter_Init+0xa0>
 800c174:	f043 0310 	orr.w	r3, r3, #16
 800c178:	62e2      	str	r2, [r4, #44]	; 0x2c
 800c17a:	6423      	str	r3, [r4, #64]	; 0x40
 800c17c:	2200      	movs	r2, #0
 800c17e:	8722      	strh	r2, [r4, #56]	; 0x38
 800c180:	b908      	cbnz	r0, 800c186 <PDM_Filter_Init+0xaa>
 800c182:	3380      	adds	r3, #128	; 0x80
 800c184:	6423      	str	r3, [r4, #64]	; 0x40
 800c186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c188:	4b34      	ldr	r3, [pc, #208]	; (800c25c <PDM_Filter_Init+0x180>)
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d1c0      	bne.n	800c112 <PDM_Filter_Init+0x36>
 800c190:	4a33      	ldr	r2, [pc, #204]	; (800c260 <PDM_Filter_Init+0x184>)
 800c192:	6813      	ldr	r3, [r2, #0]
 800c194:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c198:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800c19c:	d006      	beq.n	800c1ac <PDM_Filter_Init+0xd0>
 800c19e:	6813      	ldr	r3, [r2, #0]
 800c1a0:	f240 4283 	movw	r2, #1155	; 0x483
 800c1a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c1a8:	4293      	cmp	r3, r2
 800c1aa:	d1b2      	bne.n	800c112 <PDM_Filter_Init+0x36>
 800c1ac:	4b2d      	ldr	r3, [pc, #180]	; (800c264 <PDM_Filter_Init+0x188>)
 800c1ae:	2101      	movs	r1, #1
 800c1b0:	461a      	mov	r2, r3
 800c1b2:	6019      	str	r1, [r3, #0]
 800c1b4:	6813      	ldr	r3, [r2, #0]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d1fc      	bne.n	800c1b4 <PDM_Filter_Init+0xd8>
 800c1ba:	4b2b      	ldr	r3, [pc, #172]	; (800c268 <PDM_Filter_Init+0x18c>)
 800c1bc:	e7b1      	b.n	800c122 <PDM_Filter_Init+0x46>
 800c1be:	d03a      	beq.n	800c236 <PDM_Filter_Init+0x15a>
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	e7cd      	b.n	800c160 <PDM_Filter_Init+0x84>
 800c1c4:	4d29      	ldr	r5, [pc, #164]	; (800c26c <PDM_Filter_Init+0x190>)
 800c1c6:	782a      	ldrb	r2, [r5, #0]
 800c1c8:	d01b      	beq.n	800c202 <PDM_Filter_Init+0x126>
 800c1ca:	2a01      	cmp	r2, #1
 800c1cc:	d001      	beq.n	800c1d2 <PDM_Filter_Init+0xf6>
 800c1ce:	2001      	movs	r0, #1
 800c1d0:	e7c3      	b.n	800c15a <PDM_Filter_Init+0x7e>
 800c1d2:	4927      	ldr	r1, [pc, #156]	; (800c270 <PDM_Filter_Init+0x194>)
 800c1d4:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 800c278 <PDM_Filter_Init+0x19c>
 800c1d8:	f501 6780 	add.w	r7, r1, #1024	; 0x400
 800c1dc:	4e25      	ldr	r6, [pc, #148]	; (800c274 <PDM_Filter_Init+0x198>)
 800c1de:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800c1e2:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 800c1e6:	ea02 0006 	and.w	r0, r2, r6
 800c1ea:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800c1ee:	428f      	cmp	r7, r1
 800c1f0:	ea43 0300 	orr.w	r3, r3, r0
 800c1f4:	4413      	add	r3, r2
 800c1f6:	600b      	str	r3, [r1, #0]
 800c1f8:	d1f1      	bne.n	800c1de <PDM_Filter_Init+0x102>
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	2001      	movs	r0, #1
 800c1fe:	702b      	strb	r3, [r5, #0]
 800c200:	e7ab      	b.n	800c15a <PDM_Filter_Init+0x7e>
 800c202:	2a00      	cmp	r2, #0
 800c204:	d1a9      	bne.n	800c15a <PDM_Filter_Init+0x7e>
 800c206:	491a      	ldr	r1, [pc, #104]	; (800c270 <PDM_Filter_Init+0x194>)
 800c208:	f8df c06c 	ldr.w	ip, [pc, #108]	; 800c278 <PDM_Filter_Init+0x19c>
 800c20c:	f501 6780 	add.w	r7, r1, #1024	; 0x400
 800c210:	4e18      	ldr	r6, [pc, #96]	; (800c274 <PDM_Filter_Init+0x198>)
 800c212:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800c216:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 800c21a:	ea02 0006 	and.w	r0, r2, r6
 800c21e:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800c222:	428f      	cmp	r7, r1
 800c224:	ea43 0300 	orr.w	r3, r3, r0
 800c228:	4413      	add	r3, r2
 800c22a:	600b      	str	r3, [r1, #0]
 800c22c:	d1f1      	bne.n	800c212 <PDM_Filter_Init+0x136>
 800c22e:	2001      	movs	r0, #1
 800c230:	2300      	movs	r3, #0
 800c232:	7028      	strb	r0, [r5, #0]
 800c234:	e791      	b.n	800c15a <PDM_Filter_Init+0x7e>
 800c236:	2220      	movs	r2, #32
 800c238:	4618      	mov	r0, r3
 800c23a:	2160      	movs	r1, #96	; 0x60
 800c23c:	6422      	str	r2, [r4, #64]	; 0x40
 800c23e:	4613      	mov	r3, r2
 800c240:	e790      	b.n	800c164 <PDM_Filter_Init+0x88>
 800c242:	bf00      	nop
 800c244:	e0002000 	.word	0xe0002000
 800c248:	e000ed00 	.word	0xe000ed00
 800c24c:	40023008 	.word	0x40023008
 800c250:	40023000 	.word	0x40023000
 800c254:	f407a5c2 	.word	0xf407a5c2
 800c258:	b5e8b5cd 	.word	0xb5e8b5cd
 800c25c:	e0042000 	.word	0xe0042000
 800c260:	5c001000 	.word	0x5c001000
 800c264:	58024c08 	.word	0x58024c08
 800c268:	58024c00 	.word	0x58024c00
 800c26c:	24000498 	.word	0x24000498
 800c270:	23fffffc 	.word	0x23fffffc
 800c274:	000ffc00 	.word	0x000ffc00
 800c278:	3ff00000 	.word	0x3ff00000

0800c27c <PDM_Filter_setConfig>:
 800c27c:	4b67      	ldr	r3, [pc, #412]	; (800c41c <PDM_Filter_setConfig+0x1a0>)
 800c27e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c280:	429a      	cmp	r2, r3
 800c282:	d128      	bne.n	800c2d6 <PDM_Filter_setConfig+0x5a>
 800c284:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800c286:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c288:	880e      	ldrh	r6, [r1, #0]
 800c28a:	460d      	mov	r5, r1
 800c28c:	4604      	mov	r4, r0
 800c28e:	f422 7180 	bic.w	r1, r2, #256	; 0x100
 800c292:	1e73      	subs	r3, r6, #1
 800c294:	f9b5 7004 	ldrsh.w	r7, [r5, #4]
 800c298:	f9b0 0038 	ldrsh.w	r0, [r0, #56]	; 0x38
 800c29c:	2b06      	cmp	r3, #6
 800c29e:	ed2d 8b02 	vpush	{d8}
 800c2a2:	6421      	str	r1, [r4, #64]	; 0x40
 800c2a4:	b083      	sub	sp, #12
 800c2a6:	d820      	bhi.n	800c2ea <PDM_Filter_setConfig+0x6e>
 800c2a8:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800c2aa:	42b3      	cmp	r3, r6
 800c2ac:	d03d      	beq.n	800c32a <PDM_Filter_setConfig+0xae>
 800c2ae:	4b5c      	ldr	r3, [pc, #368]	; (800c420 <PDM_Filter_setConfig+0x1a4>)
 800c2b0:	4013      	ands	r3, r2
 800c2b2:	4333      	orrs	r3, r6
 800c2b4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800c2b8:	6423      	str	r3, [r4, #64]	; 0x40
 800c2ba:	f003 030f 	and.w	r3, r3, #15
 800c2be:	2a70      	cmp	r2, #112	; 0x70
 800c2c0:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800c2c4:	d009      	beq.n	800c2da <PDM_Filter_setConfig+0x5e>
 800c2c6:	2b06      	cmp	r3, #6
 800c2c8:	d824      	bhi.n	800c314 <PDM_Filter_setConfig+0x98>
 800c2ca:	e8df f003 	tbb	[pc, r3]
 800c2ce:	878a      	.short	0x878a
 800c2d0:	7b7e8184 	.word	0x7b7e8184
 800c2d4:	78          	.byte	0x78
 800c2d5:	00          	.byte	0x00
 800c2d6:	2004      	movs	r0, #4
 800c2d8:	4770      	bx	lr
 800c2da:	2b06      	cmp	r3, #6
 800c2dc:	d81a      	bhi.n	800c314 <PDM_Filter_setConfig+0x98>
 800c2de:	e8df f003 	tbb	[pc, r3]
 800c2e2:	8f92      	.short	0x8f92
 800c2e4:	8617898c 	.word	0x8617898c
 800c2e8:	83          	.byte	0x83
 800c2e9:	00          	.byte	0x00
 800c2ea:	4287      	cmp	r7, r0
 800c2ec:	f000 808e 	beq.w	800c40c <PDM_Filter_setConfig+0x190>
 800c2f0:	f117 0f0c 	cmn.w	r7, #12
 800c2f4:	f04f 0008 	mov.w	r0, #8
 800c2f8:	da11      	bge.n	800c31e <PDM_Filter_setConfig+0xa2>
 800c2fa:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 800c2fe:	3040      	adds	r0, #64	; 0x40
 800c300:	80ab      	strh	r3, [r5, #4]
 800c302:	886b      	ldrh	r3, [r5, #2]
 800c304:	8626      	strh	r6, [r4, #48]	; 0x30
 800c306:	8663      	strh	r3, [r4, #50]	; 0x32
 800c308:	b003      	add	sp, #12
 800c30a:	ecbd 8b02 	vpop	{d8}
 800c30e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c310:	4b44      	ldr	r3, [pc, #272]	; (800c424 <PDM_Filter_setConfig+0x1a8>)
 800c312:	64a3      	str	r3, [r4, #72]	; 0x48
 800c314:	f117 0f0c 	cmn.w	r7, #12
 800c318:	f04f 0000 	mov.w	r0, #0
 800c31c:	dbed      	blt.n	800c2fa <PDM_Filter_setConfig+0x7e>
 800c31e:	2f33      	cmp	r7, #51	; 0x33
 800c320:	dd10      	ble.n	800c344 <PDM_Filter_setConfig+0xc8>
 800c322:	2333      	movs	r3, #51	; 0x33
 800c324:	3040      	adds	r0, #64	; 0x40
 800c326:	80ab      	strh	r3, [r5, #4]
 800c328:	e7eb      	b.n	800c302 <PDM_Filter_setConfig+0x86>
 800c32a:	4287      	cmp	r7, r0
 800c32c:	d1f2      	bne.n	800c314 <PDM_Filter_setConfig+0x98>
 800c32e:	886b      	ldrh	r3, [r5, #2]
 800c330:	8663      	strh	r3, [r4, #50]	; 0x32
 800c332:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c334:	2000      	movs	r0, #0
 800c336:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c33a:	6423      	str	r3, [r4, #64]	; 0x40
 800c33c:	b003      	add	sp, #12
 800c33e:	ecbd 8b02 	vpop	{d8}
 800c342:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c344:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c346:	f003 030f 	and.w	r3, r3, #15
 800c34a:	3b01      	subs	r3, #1
 800c34c:	2b06      	cmp	r3, #6
 800c34e:	d831      	bhi.n	800c3b4 <PDM_Filter_setConfig+0x138>
 800c350:	4a35      	ldr	r2, [pc, #212]	; (800c428 <PDM_Filter_setConfig+0x1ac>)
 800c352:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800c356:	eddf 0a35 	vldr	s1, [pc, #212]	; 800c42c <PDM_Filter_setConfig+0x1b0>
 800c35a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c35e:	9001      	str	r0, [sp, #4]
 800c360:	edd3 7a07 	vldr	s15, [r3, #28]
 800c364:	ed93 8a00 	vldr	s16, [r3]
 800c368:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800c36c:	f000 f8cc 	bl	800c508 <powf>
 800c370:	eef0 8a40 	vmov.f32	s17, s0
 800c374:	9801      	ldr	r0, [sp, #4]
 800c376:	ee07 7a90 	vmov	s15, r7
 800c37a:	ee28 8a28 	vmul.f32	s16, s16, s17
 800c37e:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800c382:	9001      	str	r0, [sp, #4]
 800c384:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 800c388:	eddf 7a29 	vldr	s15, [pc, #164]	; 800c430 <PDM_Filter_setConfig+0x1b4>
 800c38c:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800c390:	f000 f8ba 	bl	800c508 <powf>
 800c394:	ee28 8a00 	vmul.f32	s16, s16, s0
 800c398:	886b      	ldrh	r3, [r5, #2]
 800c39a:	9801      	ldr	r0, [sp, #4]
 800c39c:	feb8 8a48 	vrinta.f32	s16, s16
 800c3a0:	eebc 8ac8 	vcvt.u32.f32	s16, s16
 800c3a4:	8727      	strh	r7, [r4, #56]	; 0x38
 800c3a6:	8663      	strh	r3, [r4, #50]	; 0x32
 800c3a8:	8626      	strh	r6, [r4, #48]	; 0x30
 800c3aa:	ed84 8a0f 	vstr	s16, [r4, #60]	; 0x3c
 800c3ae:	2800      	cmp	r0, #0
 800c3b0:	d0bf      	beq.n	800c332 <PDM_Filter_setConfig+0xb6>
 800c3b2:	e7a9      	b.n	800c308 <PDM_Filter_setConfig+0x8c>
 800c3b4:	eddf 8a1f 	vldr	s17, [pc, #124]	; 800c434 <PDM_Filter_setConfig+0x1b8>
 800c3b8:	ed9f 8a1f 	vldr	s16, [pc, #124]	; 800c438 <PDM_Filter_setConfig+0x1bc>
 800c3bc:	e7db      	b.n	800c376 <PDM_Filter_setConfig+0xfa>
 800c3be:	4b1f      	ldr	r3, [pc, #124]	; (800c43c <PDM_Filter_setConfig+0x1c0>)
 800c3c0:	64a3      	str	r3, [r4, #72]	; 0x48
 800c3c2:	e7a7      	b.n	800c314 <PDM_Filter_setConfig+0x98>
 800c3c4:	4b1e      	ldr	r3, [pc, #120]	; (800c440 <PDM_Filter_setConfig+0x1c4>)
 800c3c6:	64a3      	str	r3, [r4, #72]	; 0x48
 800c3c8:	e7a4      	b.n	800c314 <PDM_Filter_setConfig+0x98>
 800c3ca:	4b1e      	ldr	r3, [pc, #120]	; (800c444 <PDM_Filter_setConfig+0x1c8>)
 800c3cc:	64a3      	str	r3, [r4, #72]	; 0x48
 800c3ce:	e7a1      	b.n	800c314 <PDM_Filter_setConfig+0x98>
 800c3d0:	4b1d      	ldr	r3, [pc, #116]	; (800c448 <PDM_Filter_setConfig+0x1cc>)
 800c3d2:	64a3      	str	r3, [r4, #72]	; 0x48
 800c3d4:	e79e      	b.n	800c314 <PDM_Filter_setConfig+0x98>
 800c3d6:	4b1d      	ldr	r3, [pc, #116]	; (800c44c <PDM_Filter_setConfig+0x1d0>)
 800c3d8:	64a3      	str	r3, [r4, #72]	; 0x48
 800c3da:	e79b      	b.n	800c314 <PDM_Filter_setConfig+0x98>
 800c3dc:	4b1c      	ldr	r3, [pc, #112]	; (800c450 <PDM_Filter_setConfig+0x1d4>)
 800c3de:	64a3      	str	r3, [r4, #72]	; 0x48
 800c3e0:	e798      	b.n	800c314 <PDM_Filter_setConfig+0x98>
 800c3e2:	4b1c      	ldr	r3, [pc, #112]	; (800c454 <PDM_Filter_setConfig+0x1d8>)
 800c3e4:	64a3      	str	r3, [r4, #72]	; 0x48
 800c3e6:	e795      	b.n	800c314 <PDM_Filter_setConfig+0x98>
 800c3e8:	4b1b      	ldr	r3, [pc, #108]	; (800c458 <PDM_Filter_setConfig+0x1dc>)
 800c3ea:	64a3      	str	r3, [r4, #72]	; 0x48
 800c3ec:	e792      	b.n	800c314 <PDM_Filter_setConfig+0x98>
 800c3ee:	4b1b      	ldr	r3, [pc, #108]	; (800c45c <PDM_Filter_setConfig+0x1e0>)
 800c3f0:	64a3      	str	r3, [r4, #72]	; 0x48
 800c3f2:	e78f      	b.n	800c314 <PDM_Filter_setConfig+0x98>
 800c3f4:	4b1a      	ldr	r3, [pc, #104]	; (800c460 <PDM_Filter_setConfig+0x1e4>)
 800c3f6:	64a3      	str	r3, [r4, #72]	; 0x48
 800c3f8:	e78c      	b.n	800c314 <PDM_Filter_setConfig+0x98>
 800c3fa:	4b1a      	ldr	r3, [pc, #104]	; (800c464 <PDM_Filter_setConfig+0x1e8>)
 800c3fc:	64a3      	str	r3, [r4, #72]	; 0x48
 800c3fe:	e789      	b.n	800c314 <PDM_Filter_setConfig+0x98>
 800c400:	4b19      	ldr	r3, [pc, #100]	; (800c468 <PDM_Filter_setConfig+0x1ec>)
 800c402:	64a3      	str	r3, [r4, #72]	; 0x48
 800c404:	e786      	b.n	800c314 <PDM_Filter_setConfig+0x98>
 800c406:	4b19      	ldr	r3, [pc, #100]	; (800c46c <PDM_Filter_setConfig+0x1f0>)
 800c408:	64a3      	str	r3, [r4, #72]	; 0x48
 800c40a:	e783      	b.n	800c314 <PDM_Filter_setConfig+0x98>
 800c40c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800c40e:	42b3      	cmp	r3, r6
 800c410:	f47f af6e 	bne.w	800c2f0 <PDM_Filter_setConfig+0x74>
 800c414:	886b      	ldrh	r3, [r5, #2]
 800c416:	2008      	movs	r0, #8
 800c418:	8663      	strh	r3, [r4, #50]	; 0x32
 800c41a:	e775      	b.n	800c308 <PDM_Filter_setConfig+0x8c>
 800c41c:	b5e8b5cd 	.word	0xb5e8b5cd
 800c420:	fffffef0 	.word	0xfffffef0
 800c424:	0800b595 	.word	0x0800b595
 800c428:	0800c8f0 	.word	0x0800c8f0
 800c42c:	42000000 	.word	0x42000000
 800c430:	3d4ccccd 	.word	0x3d4ccccd
 800c434:	4f800000 	.word	0x4f800000
 800c438:	00000000 	.word	0x00000000
 800c43c:	0800a9a1 	.word	0x0800a9a1
 800c440:	0800a829 	.word	0x0800a829
 800c444:	0800a719 	.word	0x0800a719
 800c448:	0800b1dd 	.word	0x0800b1dd
 800c44c:	0800af45 	.word	0x0800af45
 800c450:	0800ad0d 	.word	0x0800ad0d
 800c454:	0800ab29 	.word	0x0800ab29
 800c458:	0800b7b1 	.word	0x0800b7b1
 800c45c:	0800b675 	.word	0x0800b675
 800c460:	0800bdf1 	.word	0x0800bdf1
 800c464:	0800bbf5 	.word	0x0800bbf5
 800c468:	0800ba49 	.word	0x0800ba49
 800c46c:	0800b8dd 	.word	0x0800b8dd

0800c470 <__errno>:
 800c470:	4b01      	ldr	r3, [pc, #4]	; (800c478 <__errno+0x8>)
 800c472:	6818      	ldr	r0, [r3, #0]
 800c474:	4770      	bx	lr
 800c476:	bf00      	nop
 800c478:	24000418 	.word	0x24000418

0800c47c <__libc_init_array>:
 800c47c:	b570      	push	{r4, r5, r6, lr}
 800c47e:	4d0d      	ldr	r5, [pc, #52]	; (800c4b4 <__libc_init_array+0x38>)
 800c480:	4c0d      	ldr	r4, [pc, #52]	; (800c4b8 <__libc_init_array+0x3c>)
 800c482:	1b64      	subs	r4, r4, r5
 800c484:	10a4      	asrs	r4, r4, #2
 800c486:	2600      	movs	r6, #0
 800c488:	42a6      	cmp	r6, r4
 800c48a:	d109      	bne.n	800c4a0 <__libc_init_array+0x24>
 800c48c:	4d0b      	ldr	r5, [pc, #44]	; (800c4bc <__libc_init_array+0x40>)
 800c48e:	4c0c      	ldr	r4, [pc, #48]	; (800c4c0 <__libc_init_array+0x44>)
 800c490:	f000 f9e6 	bl	800c860 <_init>
 800c494:	1b64      	subs	r4, r4, r5
 800c496:	10a4      	asrs	r4, r4, #2
 800c498:	2600      	movs	r6, #0
 800c49a:	42a6      	cmp	r6, r4
 800c49c:	d105      	bne.n	800c4aa <__libc_init_array+0x2e>
 800c49e:	bd70      	pop	{r4, r5, r6, pc}
 800c4a0:	f855 3b04 	ldr.w	r3, [r5], #4
 800c4a4:	4798      	blx	r3
 800c4a6:	3601      	adds	r6, #1
 800c4a8:	e7ee      	b.n	800c488 <__libc_init_array+0xc>
 800c4aa:	f855 3b04 	ldr.w	r3, [r5], #4
 800c4ae:	4798      	blx	r3
 800c4b0:	3601      	adds	r6, #1
 800c4b2:	e7f2      	b.n	800c49a <__libc_init_array+0x1e>
 800c4b4:	0800cbb8 	.word	0x0800cbb8
 800c4b8:	0800cbb8 	.word	0x0800cbb8
 800c4bc:	0800cbb8 	.word	0x0800cbb8
 800c4c0:	0800cbbc 	.word	0x0800cbbc

0800c4c4 <memset>:
 800c4c4:	4402      	add	r2, r0
 800c4c6:	4603      	mov	r3, r0
 800c4c8:	4293      	cmp	r3, r2
 800c4ca:	d100      	bne.n	800c4ce <memset+0xa>
 800c4cc:	4770      	bx	lr
 800c4ce:	f803 1b01 	strb.w	r1, [r3], #1
 800c4d2:	e7f9      	b.n	800c4c8 <memset+0x4>

0800c4d4 <checkint>:
 800c4d4:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800c4d8:	2b7e      	cmp	r3, #126	; 0x7e
 800c4da:	dd10      	ble.n	800c4fe <checkint+0x2a>
 800c4dc:	2b96      	cmp	r3, #150	; 0x96
 800c4de:	dc0c      	bgt.n	800c4fa <checkint+0x26>
 800c4e0:	2201      	movs	r2, #1
 800c4e2:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800c4e6:	fa02 f303 	lsl.w	r3, r2, r3
 800c4ea:	1e5a      	subs	r2, r3, #1
 800c4ec:	4202      	tst	r2, r0
 800c4ee:	d106      	bne.n	800c4fe <checkint+0x2a>
 800c4f0:	4203      	tst	r3, r0
 800c4f2:	bf0c      	ite	eq
 800c4f4:	2002      	moveq	r0, #2
 800c4f6:	2001      	movne	r0, #1
 800c4f8:	4770      	bx	lr
 800c4fa:	2002      	movs	r0, #2
 800c4fc:	4770      	bx	lr
 800c4fe:	2000      	movs	r0, #0
 800c500:	4770      	bx	lr
 800c502:	0000      	movs	r0, r0
 800c504:	0000      	movs	r0, r0
	...

0800c508 <powf>:
 800c508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c50a:	ee10 1a10 	vmov	r1, s0
 800c50e:	ee10 6a90 	vmov	r6, s1
 800c512:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 800c516:	0072      	lsls	r2, r6, #1
 800c518:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800c51c:	b085      	sub	sp, #20
 800c51e:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 800c522:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 800c526:	d256      	bcs.n	800c5d6 <powf+0xce>
 800c528:	4298      	cmp	r0, r3
 800c52a:	d256      	bcs.n	800c5da <powf+0xd2>
 800c52c:	2000      	movs	r0, #0
 800c52e:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 800c532:	4ea3      	ldr	r6, [pc, #652]	; (800c7c0 <powf+0x2b8>)
 800c534:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800c538:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 800c53c:	f3c2 47c3 	ubfx	r7, r2, #19, #4
 800c540:	0dd2      	lsrs	r2, r2, #23
 800c542:	eb06 1707 	add.w	r7, r6, r7, lsl #4
 800c546:	05d2      	lsls	r2, r2, #23
 800c548:	1a8b      	subs	r3, r1, r2
 800c54a:	ed97 5b00 	vldr	d5, [r7]
 800c54e:	ee07 3a90 	vmov	s15, r3
 800c552:	15d2      	asrs	r2, r2, #23
 800c554:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800c558:	eea5 6b07 	vfma.f64	d6, d5, d7
 800c55c:	ed97 5b02 	vldr	d5, [r7, #8]
 800c560:	ee26 2b06 	vmul.f64	d2, d6, d6
 800c564:	ee22 1b02 	vmul.f64	d1, d2, d2
 800c568:	ee07 2a90 	vmov	s15, r2
 800c56c:	ed96 4b40 	vldr	d4, [r6, #256]	; 0x100
 800c570:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c574:	ee37 7b05 	vadd.f64	d7, d7, d5
 800c578:	ed96 5b42 	vldr	d5, [r6, #264]	; 0x108
 800c57c:	ed96 3b44 	vldr	d3, [r6, #272]	; 0x110
 800c580:	eea6 5b04 	vfma.f64	d5, d6, d4
 800c584:	ed96 4b46 	vldr	d4, [r6, #280]	; 0x118
 800c588:	eea6 4b03 	vfma.f64	d4, d6, d3
 800c58c:	ed96 3b48 	vldr	d3, [r6, #288]	; 0x120
 800c590:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 800c594:	eea6 7b03 	vfma.f64	d7, d6, d3
 800c598:	eea2 7b04 	vfma.f64	d7, d2, d4
 800c59c:	eea5 7b01 	vfma.f64	d7, d5, d1
 800c5a0:	ee20 0b07 	vmul.f64	d0, d0, d7
 800c5a4:	ee10 1a90 	vmov	r1, s1
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	2700      	movs	r7, #0
 800c5ac:	f3c1 32cf 	ubfx	r2, r1, #15, #16
 800c5b0:	f248 06be 	movw	r6, #32958	; 0x80be
 800c5b4:	429f      	cmp	r7, r3
 800c5b6:	bf08      	it	eq
 800c5b8:	4296      	cmpeq	r6, r2
 800c5ba:	f080 80b1 	bcs.w	800c720 <powf+0x218>
 800c5be:	ed9f 7b78 	vldr	d7, [pc, #480]	; 800c7a0 <powf+0x298>
 800c5c2:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800c5c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5ca:	dd79      	ble.n	800c6c0 <powf+0x1b8>
 800c5cc:	b005      	add	sp, #20
 800c5ce:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800c5d2:	f000 b91f 	b.w	800c814 <__math_oflowf>
 800c5d6:	4298      	cmp	r0, r3
 800c5d8:	d32d      	bcc.n	800c636 <powf+0x12e>
 800c5da:	b952      	cbnz	r2, 800c5f2 <powf+0xea>
 800c5dc:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 800c5e0:	005b      	lsls	r3, r3, #1
 800c5e2:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 800c5e6:	f240 80cd 	bls.w	800c784 <powf+0x27c>
 800c5ea:	ee30 0a20 	vadd.f32	s0, s0, s1
 800c5ee:	b005      	add	sp, #20
 800c5f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c5f2:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800c5f6:	d105      	bne.n	800c604 <powf+0xfc>
 800c5f8:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 800c5fc:	0076      	lsls	r6, r6, #1
 800c5fe:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 800c602:	e7f0      	b.n	800c5e6 <powf+0xde>
 800c604:	004b      	lsls	r3, r1, #1
 800c606:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 800c60a:	d8ee      	bhi.n	800c5ea <powf+0xe2>
 800c60c:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 800c610:	d1eb      	bne.n	800c5ea <powf+0xe2>
 800c612:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800c616:	f000 80b5 	beq.w	800c784 <powf+0x27c>
 800c61a:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800c61e:	ea6f 0606 	mvn.w	r6, r6
 800c622:	bf34      	ite	cc
 800c624:	2300      	movcc	r3, #0
 800c626:	2301      	movcs	r3, #1
 800c628:	0ff6      	lsrs	r6, r6, #31
 800c62a:	42b3      	cmp	r3, r6
 800c62c:	f040 80ad 	bne.w	800c78a <powf+0x282>
 800c630:	ee20 0aa0 	vmul.f32	s0, s1, s1
 800c634:	e7db      	b.n	800c5ee <powf+0xe6>
 800c636:	004f      	lsls	r7, r1, #1
 800c638:	1e7a      	subs	r2, r7, #1
 800c63a:	429a      	cmp	r2, r3
 800c63c:	d31c      	bcc.n	800c678 <powf+0x170>
 800c63e:	2900      	cmp	r1, #0
 800c640:	ee20 0a00 	vmul.f32	s0, s0, s0
 800c644:	da0f      	bge.n	800c666 <powf+0x15e>
 800c646:	ee10 0a90 	vmov	r0, s1
 800c64a:	f7ff ff43 	bl	800c4d4 <checkint>
 800c64e:	2801      	cmp	r0, #1
 800c650:	d109      	bne.n	800c666 <powf+0x15e>
 800c652:	eeb1 0a40 	vneg.f32	s0, s0
 800c656:	b947      	cbnz	r7, 800c66a <powf+0x162>
 800c658:	2e00      	cmp	r6, #0
 800c65a:	dac8      	bge.n	800c5ee <powf+0xe6>
 800c65c:	b005      	add	sp, #20
 800c65e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800c662:	f000 b8dd 	b.w	800c820 <__math_divzerof>
 800c666:	2000      	movs	r0, #0
 800c668:	e7f5      	b.n	800c656 <powf+0x14e>
 800c66a:	2e00      	cmp	r6, #0
 800c66c:	dabf      	bge.n	800c5ee <powf+0xe6>
 800c66e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c672:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800c676:	e7ba      	b.n	800c5ee <powf+0xe6>
 800c678:	2900      	cmp	r1, #0
 800c67a:	da1f      	bge.n	800c6bc <powf+0x1b4>
 800c67c:	ee10 0a90 	vmov	r0, s1
 800c680:	f7ff ff28 	bl	800c4d4 <checkint>
 800c684:	b920      	cbnz	r0, 800c690 <powf+0x188>
 800c686:	b005      	add	sp, #20
 800c688:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800c68c:	f000 b8d8 	b.w	800c840 <__math_invalidf>
 800c690:	2801      	cmp	r0, #1
 800c692:	bf14      	ite	ne
 800c694:	2000      	movne	r0, #0
 800c696:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800c69a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800c69e:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800c6a2:	f4bf af44 	bcs.w	800c52e <powf+0x26>
 800c6a6:	eddf 7a47 	vldr	s15, [pc, #284]	; 800c7c4 <powf+0x2bc>
 800c6aa:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c6ae:	ee10 3a10 	vmov	r3, s0
 800c6b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c6b6:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 800c6ba:	e738      	b.n	800c52e <powf+0x26>
 800c6bc:	2000      	movs	r0, #0
 800c6be:	e7ee      	b.n	800c69e <powf+0x196>
 800c6c0:	ed9f 7b39 	vldr	d7, [pc, #228]	; 800c7a8 <powf+0x2a0>
 800c6c4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800c6c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6cc:	dd10      	ble.n	800c6f0 <powf+0x1e8>
 800c6ce:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 800c6d2:	2800      	cmp	r0, #0
 800c6d4:	d15c      	bne.n	800c790 <powf+0x288>
 800c6d6:	9302      	str	r3, [sp, #8]
 800c6d8:	eddd 7a02 	vldr	s15, [sp, #8]
 800c6dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c6e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c6e4:	eef4 7a47 	vcmp.f32	s15, s14
 800c6e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6ec:	f47f af6e 	bne.w	800c5cc <powf+0xc4>
 800c6f0:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800c7b0 <powf+0x2a8>
 800c6f4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800c6f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6fc:	d804      	bhi.n	800c708 <powf+0x200>
 800c6fe:	b005      	add	sp, #20
 800c700:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800c704:	f000 b87a 	b.w	800c7fc <__math_uflowf>
 800c708:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 800c7b8 <powf+0x2b0>
 800c70c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800c710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c714:	d504      	bpl.n	800c720 <powf+0x218>
 800c716:	b005      	add	sp, #20
 800c718:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800c71c:	f000 b874 	b.w	800c808 <__math_may_uflowf>
 800c720:	4b29      	ldr	r3, [pc, #164]	; (800c7c8 <powf+0x2c0>)
 800c722:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 800c726:	ee30 6b07 	vadd.f64	d6, d0, d7
 800c72a:	ed8d 6b00 	vstr	d6, [sp]
 800c72e:	ee36 7b47 	vsub.f64	d7, d6, d7
 800c732:	ee30 7b47 	vsub.f64	d7, d0, d7
 800c736:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c73a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800c73e:	f006 011f 	and.w	r1, r6, #31
 800c742:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800c746:	e9d1 ce00 	ldrd	ip, lr, [r1]
 800c74a:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 800c74e:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 800c752:	ed93 4b46 	vldr	d4, [r3, #280]	; 0x118
 800c756:	eea7 6b05 	vfma.f64	d6, d7, d5
 800c75a:	ee27 5b07 	vmul.f64	d5, d7, d7
 800c75e:	1836      	adds	r6, r6, r0
 800c760:	2300      	movs	r3, #0
 800c762:	eb13 040c 	adds.w	r4, r3, ip
 800c766:	ea4f 31c6 	mov.w	r1, r6, lsl #15
 800c76a:	eb41 050e 	adc.w	r5, r1, lr
 800c76e:	eea7 0b04 	vfma.f64	d0, d7, d4
 800c772:	ec45 4b17 	vmov	d7, r4, r5
 800c776:	eea6 0b05 	vfma.f64	d0, d6, d5
 800c77a:	ee20 0b07 	vmul.f64	d0, d0, d7
 800c77e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800c782:	e734      	b.n	800c5ee <powf+0xe6>
 800c784:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c788:	e731      	b.n	800c5ee <powf+0xe6>
 800c78a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800c7cc <powf+0x2c4>
 800c78e:	e72e      	b.n	800c5ee <powf+0xe6>
 800c790:	9303      	str	r3, [sp, #12]
 800c792:	eddd 7a03 	vldr	s15, [sp, #12]
 800c796:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800c79a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c79e:	e7a1      	b.n	800c6e4 <powf+0x1dc>
 800c7a0:	ffd1d571 	.word	0xffd1d571
 800c7a4:	405fffff 	.word	0x405fffff
 800c7a8:	ffa3aae2 	.word	0xffa3aae2
 800c7ac:	405fffff 	.word	0x405fffff
 800c7b0:	00000000 	.word	0x00000000
 800c7b4:	c062c000 	.word	0xc062c000
 800c7b8:	00000000 	.word	0x00000000
 800c7bc:	c062a000 	.word	0xc062a000
 800c7c0:	0800c948 	.word	0x0800c948
 800c7c4:	4b000000 	.word	0x4b000000
 800c7c8:	0800ca70 	.word	0x0800ca70
 800c7cc:	00000000 	.word	0x00000000

0800c7d0 <with_errnof>:
 800c7d0:	b513      	push	{r0, r1, r4, lr}
 800c7d2:	4604      	mov	r4, r0
 800c7d4:	ed8d 0a01 	vstr	s0, [sp, #4]
 800c7d8:	f7ff fe4a 	bl	800c470 <__errno>
 800c7dc:	ed9d 0a01 	vldr	s0, [sp, #4]
 800c7e0:	6004      	str	r4, [r0, #0]
 800c7e2:	b002      	add	sp, #8
 800c7e4:	bd10      	pop	{r4, pc}

0800c7e6 <xflowf>:
 800c7e6:	b130      	cbz	r0, 800c7f6 <xflowf+0x10>
 800c7e8:	eef1 7a40 	vneg.f32	s15, s0
 800c7ec:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c7f0:	2022      	movs	r0, #34	; 0x22
 800c7f2:	f7ff bfed 	b.w	800c7d0 <with_errnof>
 800c7f6:	eef0 7a40 	vmov.f32	s15, s0
 800c7fa:	e7f7      	b.n	800c7ec <xflowf+0x6>

0800c7fc <__math_uflowf>:
 800c7fc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c804 <__math_uflowf+0x8>
 800c800:	f7ff bff1 	b.w	800c7e6 <xflowf>
 800c804:	10000000 	.word	0x10000000

0800c808 <__math_may_uflowf>:
 800c808:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c810 <__math_may_uflowf+0x8>
 800c80c:	f7ff bfeb 	b.w	800c7e6 <xflowf>
 800c810:	1a200000 	.word	0x1a200000

0800c814 <__math_oflowf>:
 800c814:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c81c <__math_oflowf+0x8>
 800c818:	f7ff bfe5 	b.w	800c7e6 <xflowf>
 800c81c:	70000000 	.word	0x70000000

0800c820 <__math_divzerof>:
 800c820:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c824:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800c828:	2800      	cmp	r0, #0
 800c82a:	fe40 7a27 	vseleq.f32	s15, s0, s15
 800c82e:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800c83c <__math_divzerof+0x1c>
 800c832:	2022      	movs	r0, #34	; 0x22
 800c834:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800c838:	f7ff bfca 	b.w	800c7d0 <with_errnof>
 800c83c:	00000000 	.word	0x00000000

0800c840 <__math_invalidf>:
 800c840:	eef0 7a40 	vmov.f32	s15, s0
 800c844:	ee30 7a40 	vsub.f32	s14, s0, s0
 800c848:	eef4 7a67 	vcmp.f32	s15, s15
 800c84c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c850:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800c854:	d602      	bvs.n	800c85c <__math_invalidf+0x1c>
 800c856:	2021      	movs	r0, #33	; 0x21
 800c858:	f7ff bfba 	b.w	800c7d0 <with_errnof>
 800c85c:	4770      	bx	lr
	...

0800c860 <_init>:
 800c860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c862:	bf00      	nop
 800c864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c866:	bc08      	pop	{r3}
 800c868:	469e      	mov	lr, r3
 800c86a:	4770      	bx	lr

0800c86c <_fini>:
 800c86c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c86e:	bf00      	nop
 800c870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c872:	bc08      	pop	{r3}
 800c874:	469e      	mov	lr, r3
 800c876:	4770      	bx	lr
